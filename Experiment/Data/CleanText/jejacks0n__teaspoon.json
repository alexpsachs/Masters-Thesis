{
    "jejacks0n": "Yup, did you pull?  I spied on something important outside an 'it'. \n\nJeremy Jackson\n303-507-6846\nOn Dec 13, 2012, at 8:08 AM, Jed Schneider notifications@github.com wrote:\n\ngetting an uncaught exception\nUncaught TypeError: Cannot set property 'innerHTML' of null\nBaseView.prototype.setHtml = function(id, value, add) {\n  var el;\n  if (add == null) {\n    add = false;\n  }\n  el = this.findEl(id);\n  if (add) {\n    return el.innerHTML += value;\n  } else {\n    return el.innerHTML = value;\n  Uncaught TypeError: Cannot set property 'innerHTML' of null\n  }\n};\n\u2014\nReply to this email directly or view it on GitHub.\n. awesome! looks good.. I'm going to make a few changes -- I see a /jasmine instead of /teabag, but that's it.  thanks. =)\n. Thanks, and that seems do-able.\n\nSo, with these types of formatters are you writing them to files, or?\n\nJeremy Jackson\nOn Dec 21, 2012, at 8:48 AM, 7rans notifications@github.com wrote:\n\nVery nice looking project!\nI'd like to see TAP-Y/J reporters --a next gen TAP format.\nSee https://github.com/rubyworks/tapout/wiki/TAP-Y-J-Specification\n\u2014\nReply to this email directly or view it on GitHub.\n. I played around with adding tapout support this evening.. it looks good, and will only require some minor refactorings.  I've committed some initial setup requirements for this and have it working -- but will need to do a little more work before I'm comfortable pushing it.\n. A few things worth noting -- it's pretty impossible to know the file / line number of the errors, and the stack trace in safari (aka phantomjs) is weak, so some information is just not available to us from the javascript stack and can't be provided to tapout.\n. Just submitted a pull request -- so other folks can potentially review.  You're welcome to point your gem to that branch and see how it works out for you.\n. As far as improvements for the TAP-Y/J format, it looks solid.  I potentially should've used that from the start.\n. Awesome, let me know your thoughts -- I expect there to be a few things that I missed, but for now I merged the changes into master, and will likely bump the version later today if all seems well.\n\nClosing the issue, but feel free to provide additional feedback.\n. ;-P\n. After playing around with this concept it has one big issue.. loading the environment for rails is not easy and can't be automated very well.\nThe potential fixes are to guess (bad), or to have a dependency on an rspec style spec_helper.rb where someone can provide/tweak those variables.\nI'd say it's a no go for this feature unless someone has alternate ideas.\n. Done.\n. Booo!.. well, thanks for the heads up.. I'll take a look at it/fix it.\n. fixed.\n@skarlcf -- thanks for your help, I wasn't motivated to look at it unless it wasn't working.\n. I had a chance to get this wrapped up while I waited for my wife to get ready for dinner. sigh (don't tell her I posted this)\n. I'll go ahead and pull this for now -- it's preliminary still, and there still needs to be logic to run focus tests.. also, Merry Christmas. =)\n. include the phantomjs-linux gem in your Gemfile.. not sure why phantomjs.rb isn't properly adding it as a dependency.\noh, are you including teabag in a \"development\", or \"asset\" group in your Gemfile?\n. hmm.. ok.. that's odd -- it's working for us (check our gemfile in this project) on travis-ci.\nI do assume you're running on Linux, and if you say everything is being required correctly in your Gemspec I trust you.\nIf you can't find an easy solution (or it requires something on our end) please let us know.\nAnd if all else fails, you can use selenium if you want -- https://github.com/modeset/teabag/wiki/Using-Selenium-WebDriver\n. Interesting to know.  I think we probably need to add some info about installing phantomjs vs the phantomjs.rb gem on Linux but I don't think I know enough to write anything about it.\n. I just added some info to the readme and a wiki article.\nI am literally one of the worst people to contribute information on the topic, so if you would like to contribute to the wiki article, that would be immensely appreciated: https://github.com/modeset/teabag/wiki/PhantomJS-on-Linux\nThanks for the heads up as well.\n. When I understood what the issue was I looked into adding a \"fallback\" scenario to phantomjs.rb -- if neither gem was found, then the execution path could be specified, but I couldn't find an elegant solution.\nI'll poke around more and let you know.\n. Ok, so no.. I don't have a good solution for this, but this adds the ability to override the phantomjs bin path.\nSo the problem I see with this is that it lacks the ability to keep this sort of override system specific -- you're on Ubuntu, I'm on OS X, we're both working on the same project.. we're screwed.. that's the down side to this implementation.\nI would actually recommend doing this instead..\nIn an initializer that you add to gitignore:\nruby\nrequire \"phantomjs\"\nmodule Phantomjs\n  def get_executable\n    \"your path\"\n  end\nend\n. Just to clarify, you want to keep the phantomjs_bin configuration?\nIf that's the case I'll make the changes that Jay suggested, and provide the information on the wiki article.. It will likely not get documented anywhere but on the wiki -- as it raises the chances of shooting one's self in the foot.\n. Updated wiki, and released the change we discussed.  Hopefully that will make it nicer for others.\nThanks again for your help.\n. We've provided a better interface for this now.. The PHANTOMJS_BIN env allows you to specify your own installed version -- this also improves flexibility on CI (specifically Travis CI).  You can specify this globally in your environment, or you can specify it when you run the rake task or teabag command.\n. Thank you, much appreciated.. I also added the link back to the wiki home.\n. Ah, so we specifically have TAP-Y(aml).. which I don't know if it has -- I considered adding TAP output proper, but didn't.\n. Do you think we should add standard TAP output?  I like it better than XML. =)\n. I'm adding this now -- as JUnit XML.\n. Closing because it probably won't ever be added unless someone else needs it.\n. It was initially discussed and this was the issue to track it -- nobody ever felt like doing it, and since there's TAP support in Teabag you should be able to format that in all sorts of ways. The link that @jayzes posted is about TAP support in Jenkins.\n. I'd take a pull request -- since we don't use Bamboo it would be hard to ensure it works, so if you're using it and think it's worth it, you might consider adding it. Sorry we can't help you here.\n. That's awesome.  You can check the existing formatters for examples, but the answer is not really. :)\n. I'll try to publish by the weekend.. =) Also this may be a nicer way to add the dependency:\nruby\ngem 'teaspoon', '>= 0.7.7', github: 'modeset/teaspoon', ref: '6f390361'\nWhen it's released you would only have to remove the extra info and bundle update teaspoon\n. Thanks, have you personally tried it out?\n. As an fyi, master is currently working in Rails 4.. I've also attempted to push some bug fixes to rails/rails and rails/sprocket-rails that address some of the issues I came across.\n. Thanks for the heads up -- I'll fix it if you can tell me what's going on.\nTry something like this, and let me know:\njavascript\nbeforeEach(function() {\n    Backbone.history = new Backbone.History()\n    Backbone.history.start(silent: true)\n});\n. and potentially:\n``` javascript\nafterEach(function() {\n  Backbone.history.stop()\n});\n```\n. Update?  The one calling submit on a form will always reload the page unless you stop the event.\nQuestion: these sound like tests that you already have, correct?  What were you using before?\nThe reason I ask is because I considered using an iframe for the fixtures for this reason, but I thought it better for people to see those things so they can be properly stubbed or fixed.\n. Glad you got it sorted.. I assume that you were using a way outdated version of the gem -- and I did see the reloading thing and was able to fix it a while ago.\nThanks for the follow up.\n. Not sure @Gowiem -- anything that sets the url will .... change the url. ;-P\nIf Ember.Test#visit is changing the browsers location (via location.href= or location.reload()), then the browser will reload, and that seems like it would be wrong.  I don't know enough about Ember to be able to say what's going on there.  Sorry.\n. Thanks man.. and I appreciate your contributions to the pull requests on rails/rails and rails/sprockets-rails.\n. Thanks for the feedback.. It does say that, but more in regards to serving spec files through the asset pipeline -- thus allowing the require directive etc.\nIt's limiting to assume that everything worth testing is required through application.js -- and that's why there are no assumptions made in regards to the javascript structure.\nI can understand your confusion, so do you think we can clarify that more -- and if so, what are your thoughts?\n. Oh, on a side note, just use:\njavascript\n//= require application\nSince Teabag does use the asset pipeline everything works just like it would if the spec files were in app/assets/javascripts.\n. Perfect.  I'll add it/and a note to the spec helper that gets generated. :).  Thanks.\n. It should already be released.  Are you seeing it on the current release?\n\nJeremy Jackson\nOn Jan 18, 2013, at 7:34 PM, Jared Sartin notifications@github.com wrote:\n\nMakes sense, I have some test working with YouTube embed - when will this hit the Gem? \n\nJared Sartin \n[Ph] +1 269 364 1735 \nOn Friday, January 18, 2013 at 9:32 PM, Gabe Varela wrote: \n\nI think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it. \nGabe Varela \n303-638-6576 \nOn Jan 18, 2013, at 7:00 PM, Jared Sartin  wrote: \n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\" \nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too. \nAny way to provide better feedback? And get tests passing? Could this be a cache thing? \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014 \nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449229). \n\u2014\nReply to this email directly or view it on GitHub.\n. Put the Teabag.defer somewhere at a high level.. like maybe in your spec helper.\n\n\nIf you defer execution, it requires that you call Teabag.execute yourself at some later point (eg. after the files you need are loaded.)\nHow you determine when you're ready to begin executing your tests is up to you, and since I don't personally use RequireJS or other AMD libraries, I don't know the best ways to accomplish that, but assume if you're using RequireJS you can sort it out and let others know.\n. Any solutions to share?\n. I'm actually working on a solution now.. I played around with it and it's not fun.\n. Well, to clarify it's easy to get working if you don't care to run specs limited to a file -- but I worked hard at making that work and think it's important.  I think AMD is a bit silly if you're using coffeescript + rails, but I'd like to support it anyway.\n. I've updated the readme and added a wiki article about this.\nhttps://github.com/modeset/teabag/wiki/RequireJS-with-Teabag\nRead that and let me know if you have any issues.. be sure to update to the latest (0.5.4) before attempting, as it utilizes a new Teabag.resolveDependenciesFromParams method.\n. How else would require know what you had defined and wanted to load? :)\n\nJeremy Jackson\nOn Feb 3, 2013, at 11:42 PM, olivier-o notifications@github.com wrote:\n\nLooks great. I read the wiki, does it mean that I need to add an entry for every spec file in spec_helper.js?\n\u2014\nReply to this email directly or view it on GitHub.\n. So yes.  Sadly.\n. Right, and within this file you have all of your implementation files defined?  Where do you have your specs defined?  You should define them in your spec helper, but you're welcome to add something to Teabag that does what you're looking for.\n\nIn my experiments you must define your specs within a \"define\".. and when you do that you will then need to \"require\" them somewhere.  You could probably add a js.erb to do something like that, but I don't feel it should come bundled with Teabag because it's overly complex and has few benefits -- AMD in general provides little when you have the asset pipeline, and adds complication.\n\nJeremy Jackson\nhttps://github.com/jejacks0n\nOn Feb 4, 2013, at 12:23 AM, olivier-o notifications@github.com wrote:\n\ncould teabag discover the files under spec/javascript and then run Teabag.execute? ...my app as already a config.js that contains path for requirejs, could Teabag take have a setting for consuming it?\n\u2014\nReply to this email directly or view it on GitHub.\n. To clarify, it doesn't just pick a random port.. it finds an available port using the system.\n. 026efdd9aa2b63e5cbb07e85b731f0a6b065f116\n. /cc @prashantrajan\n\nThis is based on a suggestion from prashantrajan.  It's the first step to getting coverage reports generated using istanbul -- though we might consider doing a simplistic report in the browser as well if that's simple enough.\n. So, I'd like some feedback on this -- specifically which files get instrumented.\nIt's really hard to determine which files should be instrumented and which should not.  Since Teabag is so flexible with what your specs can be named and where they exist, we have to ask the suite if it's a spec.  If it's not a spec it will instrument the file -- which includes the spec helpers and all dependencies.\nSo let's say I'm using jasmine-jquery for instance -- that file will get instrumented and will count against the total coverage statistics -- which may or may not be desirable.\nIf require allowed specifying something like #= require implementation.js?instrument=true it would all be awesome.. you would specify which files you wanted to instrument from your spec helper / specs.. but alas, that doesn't work.\nSo I think if we don't want spec_helper, and some of the files that might be required in it to be instrumented we'll have to provide a way to specify which files not to instrument in Teabag.configuration.\nThoughts?\n. I'm trying to hack sprockets so that params can make it through to the tilt template, as well as avoid caching for these requests.  This is for the instrumented/non-instrumented javacripts..\nAnyhow, long story short -- that's pretty horrendous.\n. Yeah, it's all in the instrumentation.rb file -- what's in there works but busts caching for all files all the time.  And since send :include doesn't work as expected....\n. So instead of using a Tilt::Template and register_postprocessor in the engine (basically telling sprockets that it should do something) it's been adjusted to just mix in a bit with Sprockets::Environment.\nThis is because sprockets doesn't allow any sensible way to accomplish this.  I won't bore anyone with my rant, but yeah.. :-/\nAnyhow, it should be good to go -- I'm doing a little testing on other projects, so if you're inclined:\npoint your project to this branch\nrun bundle exec teabag --coverage-reports=text,html and you should be able to check out the report that's generated in [root]/coverage.\n. Looks good to me.. performance is good (doesn't seem to slow down requests or caching).  I'll merge tomorrow if there's not any issues.\n. Ah!  Good catch, and thanks for the heads up.  I'll add better support and build an options hash that can be serialized into query params nicer.\n. fixed in 2964bab2396f8f61f1b711495d038e4cdc834930\n. I'll be releasing 0.5.5 shortly.\n. We'll talk about it.  Here's some alternate methods:\nIn a beforeEach:\nthis.el = $(fixture.load('foo')[0])\nOr in my specs I use it as a scope:\nexpect( $('em', fixture.el).length ).to.eq(2)\n. /cc @mkitt \n. Ah... so, the source you link to is total bullshit, and I hate it, but sprockets + the railtie are such crap that it requires us to do that.  Honestly, it drives me nuts.\nAnd yes, external scripts are an oversight.  How would you like it to be implemented?  To include external libraries like this in your suite.javascripts configuration, or some other means?\n. I went with adding the ability from within the suite config.. hopefully that covers the need.\nI wish sprockets supported it itself though: https://github.com/sstephenson/sprockets/issues/289\n. you should be able to put them in the configuration in 0.8 (master)\nsuite.javascripts << ['//cdn.com/jquery']\n. Update teabag.  We did a broken release there if you don't have more tha one suite.\n\nJeremy Jackson\nOn Mar 13, 2013, at 8:09 AM, LiquidMark notifications@github.com wrote:\n\n(Note: I originally submitted this under teabag-demo, but decided it may reflect a problem in teabag itself, so am submitting it here as well.)\nI am very keen to use teabag -- exactly what I need for testing my rails with JavaScript, from the looks of it!\nHowever, I can't get even the simplest test to work. Thinking I must have some incompatibility with my version of Ruby or some gem, I tried cloning the teabag demo, built it, ran the rails server, and navigated to http://localhost:3000/teabag. What it shows is \"passes: 0 failures: 0 skipped: 0 duration: \u221e\". As best I know how, teabag-demo is using the exact versions of Ruby and all gems as specified by the .rvmrc and Gemfile/Gemfile.lock.\nNo errors are shown from the rails server, but using Firefox, I looked at the console and see the error\nTypeError: this.findEl(...) is null\n[Break On This Error]   \nthis.findEl(\"suite-select\").onchange = this.changeSuite;\nteabag...?body=1 (line 2815)\nRuby is 1.9.3p392:\nruby -v\nruby 1.9.3p392 (2013-02-22 revision 39386) [i686-linux]\nI'll include my Gemfile and Gemfile.lock here too in case that helps:\nGemfile:\nsource 'https://rubygems.org'\ngem 'rails', '3.2.9'\nBundle edge Rails instead:\ngem 'rails', :git => 'git://github.com/rails/rails.git'\ngem 'sqlite3'\nGems used only for assets and not required\nin production environments by default.\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n# See https://github.com/sstephenson/execjs#readme for more supported runtimes\n  # gem 'therubyracer', :platforms => :ruby\ngem 'uglifier', '>= 1.0.3'\n  gem \"teabag\"\nend\ngem 'phantomjs-linux'\ngem 'jquery-rails'\nTo use ActiveModel has_secure_password\ngem 'bcrypt-ruby', '~> 3.0.0'\nTo use Jbuilder templates for JSON\ngem 'jbuilder'\nUse unicorn as the app server\ngem 'unicorn'\nDeploy with Capistrano\ngem 'capistrano'\nTo use debugger\ngem 'debugger'\nGemfile.lock:\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionmailer (3.2.9)\n      actionpack (= 3.2.9)\n      mail (~> 2.4.4)\n    actionpack (3.2.9)\n      activemodel (= 3.2.9)\n      activesupport (= 3.2.9)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.2.1)\n    activemodel (3.2.9)\n      activesupport (= 3.2.9)\n      builder (~> 3.0.0)\n    activerecord (3.2.9)\n      activemodel (= 3.2.9)\n      activesupport (= 3.2.9)\n      arel (~> 3.0.2)\n      tzinfo (~> 0.3.29)\n    activeresource (3.2.9)\n      activemodel (= 3.2.9)\n      activesupport (= 3.2.9)\n    activesupport (3.2.9)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    arel (3.0.2)\n    builder (3.0.4)\n    coffee-rails (3.2.2)\n      coffee-script (>= 2.2.0)\n      railties (~> 3.2.0)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.4.0)\n    erubis (2.7.0)\n    execjs (1.4.0)\n      multi_json (~> 1.0)\n    hike (1.2.1)\n    i18n (0.6.1)\n    journey (1.0.4)\n    jquery-rails (2.1.4)\n      railties (>= 3.0, < 5.0)\n      thor (>= 0.14, < 2.0)\n    json (1.7.5)\n    mail (2.4.4)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    mime-types (1.19)\n    multi_json (1.5.0)\n    phantomjs-linux (0.0.2)\n    phantomjs-mac (0.0.3)\n    phantomjs.rb (0.0.5)\n      phantomjs-mac\n    polyglot (0.3.3)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    rails (3.2.9)\n      actionmailer (= 3.2.9)\n      actionpack (= 3.2.9)\n      activerecord (= 3.2.9)\n      activeresource (= 3.2.9)\n      activesupport (= 3.2.9)\n      bundler (~> 1.0)\n      railties (= 3.2.9)\n    railties (3.2.9)\n      actionpack (= 3.2.9)\n      activesupport (= 3.2.9)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n    rake (10.0.3)\n    rdoc (3.12)\n      json (~> 1.4)\n    sass (3.2.4)\n    sass-rails (3.2.5)\n      railties (~> 3.2.0)\n      sass (>= 3.1.10)\n      tilt (~> 1.3)\n    sprockets (2.2.2)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sqlite3 (1.3.6)\n    teabag (0.4.1)\n      phantomjs.rb (~> 0.0.5)\n      railties (~> 3.2.5)\n    thor (0.16.0)\n    tilt (1.3.3)\n    treetop (1.4.12)\n      polyglot\n      polyglot (>= 0.3.1)\n    tzinfo (0.3.35)\n    uglifier (1.3.0)\n      execjs (>= 0.3.0)\n      multi_json (~> 1.0, >= 1.0.2)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  coffee-rails (~> 3.2.1)\n  jquery-rails\n  phantomjs-linux\n  rails (= 3.2.9)\n  sass-rails (~> 3.2.3)\n  sqlite3\n  teabag\n  uglifier (>= 1.0.3)\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you explain more? I haven't used angular yet, so I need more info on what you mean.\n\n\nJeremy Jackson\nOn Mar 14, 2013, at 7:37 AM, Julien Portalier notifications@github.com wrote:\n\nHow hard do you think it would be to have an adapter for angular scenario, so that we could have an E2E testing suite in teabag?\n\u2014\nReply to this email directly or view it on GitHub.\n. Sweet, I'll look into it.  Thanks for the example stuff too. =)\n. Awesome!  And yeah, but they're actually not too bad -- often times it's about getting the right callbacks from the runner, and normalizing specs and \"suites\" (which are collections of specs). I'm at the office at the moment, but I will be spending some time on this in the next few days.  I may have some questions for you.\n\nOn Mar 14, 2013, at 11:15 AM, Julien Portalier notifications@github.com wrote:\n\nI just updated the gist: tests are running, passes/failures counters are updated, and errors are reported, but the full report still won't display.\nI guess a console reporter is required to run tests through phantomjs?\n\u2014\nReply to this email directly or view it on GitHub.\n. It looks great! =) What can I do to help?  I probably won't have time to get everything setup with angular until this weekend though.\n\nOn Mar 14, 2013, at 7:25 PM, Julien Portalier notifications@github.com wrote:\n\nHere comes a proper integration: ysbaddaden@099e4a0\nProper tests are lacking. There are just basic tests for Teabag.Spec and Teabag.Suite\n\u2014\nReply to this email directly or view it on GitHub.\n. It's hard to test your test runner using your test runner. Heh. I had to do soom backflips in some places to get as much as I could test.\n\nSubmit a pull request.  I can write a few specs now that the required assets are there. Right?\n. Thanks again for this addition!\n. So this is likely because Teabag does some setup to Jasmine initially (specifying reporter, etc), and requiring jasmine again would overwrites that setup.  Understandable mistake, but yeah, not really a fixable one. =)  Thanks for the info -- I tagged this appropriately and will leave it around.\n. @kenglishhi, the name is based on the association with the Jasmine library.  The Jasmine flower is used to flavor some teas, so this seemed like an appropriate and sensible association to make.  Also, Mocha could be considered a \"tea\" by some serious coffee drinkers.\nSome background -- I was going to use this image as the logo, and the photographer allowed me to do so, but it never quite fit into the designs. http://goo.gl/f6Kay\nAs far as the urban dictionary definition goes, you may want to block urban dictionary or turn safe search on within google -- the only thing we can do to combat that issue would be to become a more popular definition, as a name change is not likely.\n. I actually like the kettle suggestion (I generally like the word), but as I said, a name change isn't likely simply because the association is a non-issue from my perspective. Look, it's understood that Teabag is a euphemism, but it's just as telling that there's such a juvenile level of humor in our industry. I'm not trying to be harsh here, but it's a bit silly, right? Am I crazy?\nI left this issue open so people would see my explanation and the real association if they were in question.\nOne can make literally anything into a euphemism, and that's not the intention with the name of the project. Sure, get a chuckle out of it, but we also have to respect that our industry has all genders, cultures, orientations and backgrounds. Teabag isn't making light of that because any inference is solely on the individual making it.\n. @monkseal aka @kenglishhi -- really, the word Erector[http://www.thefreedictionary.com/erector], a totally legitimate english word, and century old toy for children offends you?\n. I'm sorry you work with people who aren't sensitive and who can't behave like grown ups, and I'm sorry you don't feel like my several attempts at clarifying the issue are sufficient for you to not post childish comments. I've already clarified that I named the project after a bag of tea, not what you describe. One is a noun, and one is a verb. Now grow up --  I'm not down with you posting crap like this to (I can only assume) get your rocks off.\n. @bigtunacan I've also reported your comment with github as being abusive and inappropriate.\n. 1. I don't think you can read -- because I say that myself up at the top of this long thread.\n2. You're offensive -- bigtunacan[urbandictionary.com]\nNow, taking into account how insensitive and offensive the name you've chosen to code under is, that it doesn't matter what I say.. you'll continue to be juvenile and offensive. I'm done here.\n. Oh, so you're suggesting I name it Testacular now that that name is available? Pfff.\n. I've discussed with coworkers and one suggestion was Steap -- does anyone here have issues with that? I'm not saying that there's a name change in order, I have to sleep on it and consider just how inappropriate the comments posted here tonight were. I'm disappointed in the community for not understanding, or caring enough, to see that it's not an inappropriate name.\nLiterally, this makes me sick, and I think people like you @bigtunacan are the problem, not a useful and well written and thought out project. If I had a solution for fixing people like you man, I would employ it. I don't care what you say about your nick, I find it offensive, no matter what you say to \"clarify\" it. You're sad.\n. @bigtunacan Since you deleted your comment, I figured I'd provide the screen shot that I reported you for.. I stand behind what I say, and I don't delete my comments, and I think it's revealing of your character that you would delete it.\n\n\n. @ngan thank you, I appreciate your comments. =)\n. @bigtunacan I don't understand why you try to clarify your stance when you don't show the respect to understand mine. shrug, I proposed a name change, but you failed to respond to that. You failed to read my thoughts and reasonable responses on the matter and bullied through an argument that's ridiculous, you failed to notice that I'm open to a name change -- even in light of your rudeness and inappropriateness, and you failed to contribute anything useful in general to the conversation. You failed.\n. @bigtunacan thanks.\n. Some alternatives provided today:\n- BagOfTea (no urban dictionary entry, no gem with this name)\n- Teasac/Teasack (no urban dictionary entry, no gem with this name)\n- Teaball (urban dictionary entry, but as @bigtunacan claims the number of upvotes matters -- has 1 upvote, no gem with this name)\n- Teaspoon (my personal favorite, has an urban dictionary definition, but again only a few upvotes, has a gem named this).\nAt this point Teaspoon is all I would accept, but we would need to try and acquire the name from: http://rubygems.org/gems/teaspoon\n. It's a spoon of a specific size and shape that is used to measure and stir tea.\n. @bigtunacan I'm hoping you can take care of trying to open up the namespace?  If you can CC me on the conversation with the author that would be awesome. Thanks!\n. Awesome, thanks @bigtunacan. I'm ready over here, and the new repo redirect stuff that the github team added last week (https://github.com/blog/1508-repository-redirects-are-here) should make that easy.\n. Of course, we'll take care of releasing and all aspects that entails. I would accept a pull request with the name change. Teaspoon (no camelcase for the namespace) / teaspoon (lowercase for cli/routes/etc). We'll also have to rename the guard-teabag project.\n. Just waiting for a pull request. I figured it was an opportunity.\n. @adityamenon I don't think you have anything to apologize for -- I think what you contributed was actually quite eloquent in contrast. =)\n. No worries, I appreciate the work, so thanks. I consider it in my court now, and the timing will probably have to be sometime over the weekend.  I'll keep you posted.\n. I updated the wiki and other things (screenshots etc.)  It would be useful if some people go through the upgrade process -- first using bundle update teabag to ensure that the deprecation notice is there and useful,\nThen changing your Gemfile as suggested, running teabag vs teaspoon as both the rake task and bin command to see the notices there and see how it behaves.. I provided those so it doesn't immediately break CI setups, since people will have to update their rake tasks on them potentially.\nChances are you'll have to update your initializer first, but I did add some help for migrating the teabag_env.rb to teaspoon_env.rb.\nIt's be interesting to know what you encounter, so we can potentially add that to the readme.\nI also wanted to clarify that I don't believe Teabag is an inappropriate name, and that it's more telling of the maturity level in our industry in general. I can say Teabag in front of anyone with a straight face, either as the name of a project, or when I'm steeping my tea, and have come to believe that it's a litmus test for an individuals personal maturity, but whatever, it is what it is.\nPerhaps the experience can shed some light on that and have us all move forward with a better knowledge and awareness of how we as individuals, and as a community address these things.\n. I have an 8 year old step daughter (and 10 year old step son) -- neither believe that programming is at all related to gender. I've been teaching both of them how to program and at a more basic level, how to think through problems logically.\nSorry to the people who are put out by the name change, and as @randallb suggests, this conversation should stop here.\n. @bigtunacan, thanks for taking the time to do that -- and this is also the reason I think the conversation should end.\nYou put the time in to fix the thing that you took issue with, so I consider it done and over with. My bad for letting it get a bit flame-ish in the first place, so you have my apologies.\nNow, it's been renamed, that's the reality.. let's all move on with contributing good things for the community -- this thread is now detracting from it.\nThanks all, now go have some Tea!\n. :+1: would merge.\n. Thanks man!\n. Can you explain why this is needed?\n. It's currently a limitation of phantomjs, but let me know more -- what version of phantomjs are you using?\n\nJeremy Jackson\nOn Mar 23, 2013, at 11:56 PM, Ngan Pham notifications@github.com wrote:\n\nMy spec pass when they are run in a browser but they fail on console with rake teabag and phantomjs.\nI'm trying to debug the issue...but the trace isn't very helpful...\n1) Foo submits form when uploading\n     Failure/Error: ReferenceError: Can't find variable: page\nThat's basically all I get...no file and line number.\nAny tips on getting better traces? Or is this a limitation of teabag/phantomjs?\n\u2014\nReply to this email directly or view it on GitHub.\n. Try installing a system version.  If you're using brew: brew install phantomjs\n\nThen make sure it's in your path (teabag uses the system one first).  The gem is current, but phantomjs is older in the gem.\n\nJeremy Jackson\nOn Mar 24, 2013, at 12:21 AM, Ngan Pham notifications@github.com wrote:\n\nphantomjs-mac (0.0.3)\nphantomjs.rb (0.0.5)\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree with @gvarela -- so you don't really uncomment the require.\n\nhttp://guides.rubyonrails.org/asset_pipeline.html\n. This is something that we would take as a pull request -- if you ever need it.\n. It looks like it fails outside of teabag.. I would expect it to fail because phantomjs clearly fails to start, but it's not.  Hmm.  I'll have to try and make phantomjs bomb and see.  Is there any way you can give trying to figure it out a shot? As it's not going to be easy to replicate...\nAlso, you may want to install phantomjs -- I expect that would fix the actual issue you have.  There's a wiki article about Linux/phantomjs.\n. Thanks man!\n. I like the addition and will merge it.. can you double check the failure on CI -- seems related.\n. Please do, I would like to merge this. =)\n. Yup, I'll look into that.\n. The failure was due to poltergeist -- switched back to webdriver and fixed it.\n. Thanks for this addition.\n. Cheers!  Thanks for this fix, I learned something new. =)\n. Yes, we would.\n. Thanks for your other pull request.. I'll try and get to fixing the build this weekend and get the pull requests merged in.\n. The build is fixed.  Are you planning on doing this?\n. This is in now btw. Thanks to @trevmex.\n. I honestly don't know. I assume you could just write specs however you wanted.  That's sort of why the issue is here -- in case someone wants to own it -- since I haven't yet had the chance to use angular.\n. Awesome.  I think our next project here at the office will use angular, so hopefully that will allow us to understand it better.\nI assume you're on Rails 3.2.13? The slow loading is a regression in that version of rails, and I provide a link to fix in another issue. Annoying, but solvable.\n. That would be awesome. please do. =)\n. Nice! I have no idea, so I'm deferring to your judgment. =) Thanks for the information.\n. So, I don't use angular for anything -- I want to, but I haven't had a project where it made sense, so until that point it's really hard for me to do anything for it.. I don't fully understand it, so I'm not a good person to tackle those challenges. I'm hoping someone will step up and embrace maintaining that.  If someone shows the acumen needed, I'd make them a collaborator.\n. Notice: I will do my best to get to this, but it's rather hard since I have't used angular yet.  If this doesn't get attention from myself or someone else in the next week I'll be removing it -- and then someone can work with me to get it back in fully -- and properly.  I have higher standards than what's currently provided, and I'm unwilling to leave it linger in the state that it's in.\n. Removed angular support a while back and nobody has said anything. Updating wiki to remove it.\n. Spring came up the other day for rspec and rake, and it was pretty slick.. I was considering adding support for that in spring directly, but haven't landed anywhere on that.\n. The other thought I had was this. Throw this in your teabag_env.rb:\n``` ruby\nmodule Teabag\n  class Server\n    def start; end\ndef url\n  'http://localhost' # or something.dev if you're using pow\nend\n\ndef find_available_port\n  '3000'\nend\n\nend\nend\n```\nThat gives you the behavior you're looking for -- because I'm not sure how to accomplish this feature without making things considerably more complex.. eg. port, url, etc.. how would one configure that easily?  If you wrote that to use ENV vars it seems like something your entire team could use, but unless you have a convincing argument it seems outside of what Teabag should worry about.\n. Seems reasonable. Might look into it.\n. It's worth mentioning that you won't need to require rails from within your teabag_env if you take this route.\n. That's not entirely true, but I expect you can work around that fairly easily.  I will look into this more for a proper solution.\n. I plan on doing this shortly.. but I'm pretty focused on another project at the moment -- the reason I wanted Teabag for to begin with.  You're right though, it's a rabbit hole, and I think using things from active support instead of all of rails will make it better and more reliable for things like this in the future.\n. I take that back, I probably won't be able to do this at this point.. maybe at some later time.\n. Ah, so it's looking for phantomjs, using a sort of \"which\" type of functionality.. I expect the error is coming from this, but I'm not sure: https://github.com/modeset/teabag/blob/master/lib/teabag/utility.rb\nIs phantomjs in your path?\n. Awesome, thank you!\nAs an aside, I have a javascript project called Mercury Editor, and the level of questions/support needs between people writing specs for their projects vs. people wanting to use a javascript library is considerably different. It's really rewarding to support a project for folks that read documentation and are able to clarify issues. Cheers! =)\n. with jasmine you can disable the try/catch, which lets the browser handle the stack trace.  In chrome you can use this to jump to code lines.\n. You can speed everything up by disabling the progress, and full reporting.. I've only observed this on safari using mocha, but yeah, it does exist -- the progress is using canvas to draw the circle and safari doesn't like the speed at which mocha is reporting specs.\nDoes this sound familiar?\n. I would assume looking at resource response times in your browser would help identify what's responding slowly.  Can you provide a screen or paste of the asset load times as provided by your debug tool?\n\nJeremy Jackson\nOn Apr 22, 2013, at 2:43 PM, Jed Schneider notifications@github.com wrote:\n\nI missed the original comment on this in my inbox. probably not related to loading tons of assets. sorry.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, so, teabag forces debug to false when run from the command line because the asset pipeline handles file load errors (404s) differently, and to be able to display those errors in a useful way in the console it needs to tell javascript there was a 404.\n\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/console.rb#L13\nThis is a shortcoming of how that's handled in sprockets-rails, as it should really be two configs and not one. So that's relavant, but potentially not related.\nThe helper you link to is another hack to fix bugs in sprockets-rails as well -- I submitted a patch for that, which was accepted, but until that's in the wild and reliably used we still need that (I think rails ~3.2.13).  You're welcome to override that helper method for your own case, but sadly because of how sprockets is setup and integrated with rails we need to do that hackiness -- for now at least.  If you're not using the code coverage features and are on something > 3.2.13 you're probably good to just call through to javascript_include_tag -- don't quote me on that though.\n. Also, it appears Jed was correct -- even though you have a small spec, if you're requiring all of your assets for that single spec it's going to be bad.\nA better approach might be to have your spec require the file that's being tested, instead of requiring application.js.. This is why I think putting //= require application.js into the spec helper is a horrible horrible idea.  Take a look at this project for how you should setup your specs:\nhttps://github.com/jejacks0n/mercury/tree/mercury2/spec\n. Too many questions\u2026 first -- this is why we need the javascript_include_tag hack:\nhttps://github.com/rails/rails/pull/8735\nhttps://github.com/rails/sprockets-rails/pull/33\nAlso -- a fix for Rails 4:\nhttps://github.com/rails/rails/pull/8712\nSo, as you can see, to get around both of those bugs we had to wrap our own.. sadly, they were major deal breakers for functionality.\nTo answer your other question it doesn't do anything with the debug configuration when you're not running it from the console, and as you can see, I've done plenty to try and get things fixed up so we can use it reliably and with the support we need.\nI've closed the issue because it's not something we can fix -- I understand you may find the lack of concatenation a problem, but I've already proposed a solution -- if redefining javascript_include_tag_for_teabag to call through to javascript_include_tag is too much of a pain, I'm sorry, but pass the blame to sprockets.\n. I explained that it's a combination of bugs in previous versions of rails and because of instrumentation / code coverage reports.\nLooks like you solved it, so like I said before, if you don't care about coverage reports and you're above 3.2.11 you're fine.\n. And you're right, the shorter hack is nicer, but it doesn't work on previous versions of rails and it doesn't have support for coverage reports. =)\n. No worries.\n. You ran the generator and haven't modified your teabag_env?\n. Well, it looks like active_support isn't being required before the configuration is being loaded.. if rails is being required before, which is how it works for every case I've ever seen, you wouldn't be seeing that.\n. So the answer to the problem is to ensure that rails is being loaded.. is there anything odd with your setup?\n. Your server isn't starting.. does it start when you run rails server?\n. Thanks for the info!\n. I'm curious about this.. I assume you have some time to dedicate to it since you're asking.\nTry this:\ncopy this view https://github.com/modeset/teabag/blob/master/app/views/teabag/spec/runner.html.erb into your project and replace the javascript_include_tag_for_teabag calls with javascript_include_tag (removing the options for the second call).\nDoes this improve the speed, and if so, by how much?\nThanks.\n. fail how?\n. Are files being loaded more than once?\n. So, I assume you're on something less than rails 3.2.11.  Can you confirm?\n. This has been a thorn in my side, but here's some background / where I fixed that in Rails.. I think it made it in version 3.2.13.\nhttps://github.com/rails/rails/pull/8735\nI also fixed it in sprockets-rails for Rails 4.  You can see that what I had to do in Teabag is total crap, but required for assets to be loaded correctly.  If the three seconds matters enough to you, you can use the manifest style in your spec_helper -- which makes it more like jasminerice, replace the helper to call through to javascript_include_tag instead of the hackery it does now, and be careful not to ever double require a file.\n. Please also check https://github.com/modeset/teabag/issues/57\n. Thanks for the info.. it's a bummer, but I will eventually be able to remove the hacks that are in there.\n. It was also brought to our attention that rails 3.2.13 has a regression where asset loading is way slowed down.\nYou can read more and find a solution at http://stackoverflow.com/questions/15501354/what-causes-the-extreme-slowness-when-changing-from-rails-3-2-12-to-3-2-13\n. Looks great, thanks a ton.\n. Awesome!  I don't use require.js, so this is helpful.  Can you do two things for me?  Squash the commits so its easier to review, and update the docs/wiki to help others get a good understanding of how to do it now.\n. Can you update the docs/wiki so there's not any lingering confusion about that? Thanks again for the work!\n:+1: \n. Hmmm, I expect your hypothesis is correct.  I'm not sure how a post might work, but I don't really love the idea.  Could a different suite (even a temporary one) do what you're looking for?  You can even use a file matcher to simplify the list if it's applicable.\n. Why do they have to be different every time, out of curiousity?\n\nJeremy Jackson\nOn May 1, 2013, at 5:20 PM, Ngan Pham notifications@github.com wrote:\n\nCan you explain the \"temporary suite\" concept? Basically what I'm trying to do is distribute my javascript specs across multiple machines and I need certain machines to run certain files. The batch of files each machine runs is assigned on-the-fly every time, so there's no way for me to batch them in suites. Unless there's a way to quickly and temporally allocate certain files to a suite and run that temp suite.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmm, ok, seems sensible for sure.  Let me think on it.  Seems like something that would be nice to add.\n. @Ngan, so a hypothetical issue isn't really an issue imho.. You're welcome to address this how you want, and it will get merged if the tests and implementation look solid.\n\nWe also didn't include support for Netscape Navigator but would happily take a pull request for it should someone need it.\n. Well, it looks fine, but the thing is that it complicates things for an addition that nobody really needs yet.  I'd say keep it in the gist there, but link to it on a wiki page so others can benefit from it should they need it -- but it feels like putting it in isn't worth it at this point.  Thoughts?\n. Assumed you've linked to the gist in the wiki, so closing.\n. Yup, that's true, and they shouldn't be there.. So, I specify in the gemspec that it should include the spec directory, but in this day and age, I would assume someone to pop into the repo here to see specs if they want to know more about it.  Thanks for the heads up -- I'll remove it for the next release.\n. No worries, it should be fixed in the next release. =)\n. this should be fixed in 0.7.8.  Thanks for the heads up.  It was including all the logs/tmp etc. from the dummy app in specs.\n. Well, to add coverage Istanbul must generate a file with instrumentation, and you probably don't want those hanging around.  I've not ever checked it on windows, so the path replacement that happens in the report might need a fix?  Since I don't use windows it would be great if you/someone could check it out.  Look at the lib/teabag instrument.rb and coverage.rb files -- we may not be doing an OS safe path regexp in coverage, or it could be where we add instrumentation.\n. Yes, in instrumentation.rb, in the process_and_instrument method.  Looks legit to me, so I'm not sure what would be going on differently on windows.  One using / and another using \\ I would assume though.  Note the path replacement in there.\n\nJeremy Jackson\nOn May 15, 2013, at 9:57 AM, Derk-Jan Karrenbeld notifications@github.com wrote:\n\nI understand how that happens then.\nIt's not only in the report, it's also in the console [which is where the report gets its data from off course]. What should I look for? Needless to say, on UNIX-based systems ( the rest of my project ) the folder structure is maintained, where on windows it is completely flattened.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome!  Thank you. :+1: \n. I'd like to get a fix for #66 in the next release.  If I don't have time for that this weekend I'll release sunday/monday regardless.\n. Closed as a duplicate of #40 \n. Looks good, thanks! :)\n. I don't have a solution for you -- the RequireJS support was added by @inlineblock, but aside from that, I don't believe the current gem (0.7.2) has that in it yet. As a rule of thumb, it's always good to check master. Also, you don't need jasmine -- the javascripts come with Teabag\n\nTry pointing your gem to github instead of the release and let us know how that works out.\n. It's pretty tied to activesupport, which is a bummer and a regret.. At some point it would be nice to remove some of those things, but yes, at this point it's pretty tied to rails/activesupport/railties.. I agree that it would be nice to use in sinatra, but the project wasn't written to attempt to solve the issue for everyone and is more about testing assets in rails -- my development environment.\nIt was released, and is open source, so you could fork it and go about making this happen, or you could take the code as a learning tool and adapt it in your own ways to provide a good solution for sinatra.\nI also wanted to keep the installation simple -- falling somewhere between a braindead simple setup, that can expand to a more full feature test setup, and having different installation steps / dependencies based on framework only makes that more complex. Sorry man.\n. How about this.. When I have time I'll try and strip down so it works better without rails -- this needs to happen so people can use their own servers in general (and is valuable to us as well).\nAfter that it should be easier for you to figure out what needs to happen for it to be useful in a sinatra app. Thoughts?\n. This all looks good, but can you adjust the suite_spec?\n. Cheers! Have a great weekend. =)\n. Thanks for the offer! =)  There's one that I've been meaning to get on so I can release 0.7.2 -- but it's a little involved and may require a windows setup/vm. I haven't had the time to set something up to check that the fix works.. you could probably take a crack at it without windows though maybe?\n66 could probably be fixed by doing some path tweaking on https://github.com/modeset/teabag/blob/master/lib/teabag/instrumentation.rb#L49\nI think the problem is that windows uses \\ for path parts, and everybody else uses /, but I'm not positive.. seems like it should work as is, but it's not.\n. If you felt like taking that on, it would be rad.. I could release the gem as soon as you thought it was fixed, but this isn't intended to feel like an obligation. =)\n. Good call, thanks. =)\n. Blah, thanks for that.\n. Teabag doesn't do any of the coffeescript conversion for you and relies on the asset pipeline that Rails provides.. can confirm that you have coffeescript setup in Rails -- eg. \"gem 'coffee-rails'\" in your Gemfile?\nAnd that you can load a converted coffeescript file as js in the browser?  Try loading one of your coffeescript files in  by the url (/assets/your_file.js) and see if it serves it.\n. no, you shouldn't.. is it serving files from that path at all?\n. It should be adding /test/javascripts to your asset paths:\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/configuration.rb#L10\nwhich is then added to the asset paths in the engine:\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/engine.rb#L11\nCan you confirm this is happening?\n. Try /assets/my_test.js\n. No worries, thanks for the follow up.\n. This doesn't seem to attract much attention, so closing. Still welcome to accept pull requests.\n. Don't require expect -- it's a different library, for those that don't want to use chai.\n\nJeremy Jackson\nOn Jun 21, 2013, at 5:25 AM, Jean-Denis Vauguet notifications@github.com wrote:\n\nHi,\nUsing teaspoon and\n= require support/chai\n= require support/expect\nI end up having weird errors such as Object # has no method 'throw' coming from an expect(fn).to.throw Error (which passes under Konacha, for instance). Some other chai helpers are \"missing\" as well, such as instanceof. The majority of them are present, though\u2026 so it's kind of weird.\nI'm feeling this could be more a chai-related issue, but you may have encountered the issue already.\n\u2014\nReply to this email directly or view it on GitHub.\n. re: Chai 1.7.0 -- I updated it 5 days ago, but to 1.6.1.. feel free to submit a pull request.\n. Thank you for figuring it out.  Much appreciated.  Do you want to submit a pull request?  I may not have time this week.  Sorry!\n. Cheers!  And also good to know.\n. Thanks!\n. I appreciate all the work you've been putting in. =)\n. Those are from console.[debug|log|info] lines in your javascript. We output that stuff so you can see them for debugging, or just to catch ones you didn't intend to leave in.\n\nYou can turn this off in the configuration, but I find it useful to have.. What I usually do is create a global log/trace method ... here's an example \nhttps://github.com/jejacks0n/mercury/blob/mercury2/lib/javascripts/mercury/core/logger.coffee#L9\nThen I can stub that for my specs (in spec_helper), and I can catch any console.log that made it in unintentionally that's not using the proper logging method that I've provided.  console.log can cause errors in older browsers, so leaving them around can be bad.\n. Word!\n. try:\n``` ruby\nrunner = Teaspoon::Console.new\nrunner.execute(suite: 'editor')\n...\nrunner.execute(suite: 'app')\n```\nThis will use the same server, and not wait for anything to start.\n. I'd be curious to understand why you're using it that way though.. why not run via rake?\n. Yes, so for a proper answer.. It's there in case someone overrides console in their specs.. without console.log the phantomjs console reporter can't report -- that log output is what's processed by ruby.\nHowever, the selenium driver does it differently -- it collects the messages and pulls them from selenium at a set interval.\nAnyway, yes, that probably could be adjusted, but I struggle to see how to do it easily.. I'd say a shim in your spec helper is probably the best solution for the time being..\njavascript\nconsole.log = console.log || function() {}\nInterested in your thoughts.. if you look into it more you'll see what I mean:\nselenium driver:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/selenium_driver.rb#L20\n. that shim is only an example.. chances are you'll have to define console as an object first.\n. What seems to be blocking it after that?  I'm assuming it would be the progress (which uses a canvas) -- which can be turned off.\n. I updated the config to allow passing through json.. Check that out -- I figured it might be a useful first step for accomplishing this sort of thing.\n\nJeremy Jackson\nOn Jul 20, 2013, at 5:48 AM, Tom Meier notifications@github.com wrote:\n\nHi @jejacks0n , Sorry, I got slammed at work, I'll hopefully have a chance to dig deeper into this soon (not forgotten).\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, sort of. If it's run via CLI using selenium+ie it would simply not generate any output. That fail is there because it technically can't use anything that doesn't have console.log when run via CLI.\n\n\nJeremy Jackson\n\nOn Jul 14, 2015, at 3:36 PM, Mike Pack notifications@github.com wrote:\nI didn't realize you were running IE8 tests from the CLI. I think what's happening here is that Teaspoon attempts to console.log, it fails, and Teaspoon throws an exception. IIRC, IE8 just stops executing all future JS after encountering an exception. This seems like the offending lines:\ntry console.log(arguments...)\ncatch e\n  throw new Error(\"Unable to use console.log for logging\")\nI would imagine the error being thrown is because it's fatal in most browsers not to have console.log when running on the CLI, but this is not the case with Selenium-driven browsers.\n@jejacks0n do you think failing silently here would cause us other headaches? eg:\nconsole?.log?(arguments...)\n\u2014\nReply to this email directly or view it on GitHub.\n. Good point. How do the messages make it into Teaspoon.getMessages? I honestly don't recall and can't easily check.\n\n\nJeremy Jackson\n\nOn Jul 14, 2015, at 9:14 PM, Mike Pack notifications@github.com wrote:\nExcept for Selenium, which polls for Teaspoon.getMessages(), no? Doesn't seem like a need for console.log there.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sweet. :+1:\n. Thanks!\n. Browse to /teaspoon in your browser.  Look at the console to figure out why files aren't being loaded.\n\n\nJeremy Jackson\nOn Jul 22, 2013, at 4:22 PM, Devin Walters notifications@github.com wrote:\n\nAny ideas?\n\u2623 (solo)> rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:49295/teaspoon/default\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:12\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:50\nReferenceError: Can't find variable: jQuery\n  # http://127.0.0.1:49295/asset-detail/mini-profiler-resources/includes.js?v=e777c6e0fdfb9a725e857c8ca3eab18f:897\nError: Failed to load: http://127.0.0.1:49295/teaspoon/default?reporter=Console\nrake aborted!\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/teaspoon-0.7.4/lib/tasks/teaspoon.rake:4:in block in <top (required)>'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:ineval'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:in `'\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n\u2014\nReply to this email directly or view it on GitHub.\n. Also jquery isn't part of teaspoon, so I'm assuming your stuff is broken or not compiling correctly.\n\n\nJeremy Jackson\nOn Jul 22, 2013, at 4:22 PM, Devin Walters notifications@github.com wrote:\n\nAny ideas?\n\u2623 (solo)> rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:49295/teaspoon/default\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:12\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:50\nReferenceError: Can't find variable: jQuery\n  # http://127.0.0.1:49295/asset-detail/mini-profiler-resources/includes.js?v=e777c6e0fdfb9a725e857c8ca3eab18f:897\nError: Failed to load: http://127.0.0.1:49295/teaspoon/default?reporter=Console\nrake aborted!\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/teaspoon-0.7.4/lib/tasks/teaspoon.rake:4:in block in <top (required)>'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:ineval'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:in `'\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you joking?  It's the namespace and is used all over the place.\n\nMy bet, since it works for almost everybody, is that you have a javascript or coffeescript syntax error that breaks execution.\nI can't be more specific with the steps required to identify what's wrong.  Files not loading, bad syntax, etc.  the place where it tries to access teaspoon for the first time outside of js is in the view. That's probably where it's failing, because it never gets defined , because there's a problem in the scripts before teaspoon loads.\n\nJeremy Jackson\nOn Jul 22, 2013, at 5:41 PM, Devin Walters notifications@github.com wrote:\n\nCould you be more specific? Where is it looking for that var?\n\u2014\nReply to this email directly or view it on GitHub.\n. Have you opened it up in the browser like I've mentioned?  http://localhost:3000/teaspoon\n. Do you have a basic Teaspoon install? Is the spec_helper loading what it's supposed to? What have you changed about the script files being loaded? This usually only happens if your server is failing to load js files, which is outside the scope of what I can easily help with.\n. comment out your suite.javascripts = [\"support/expect\", \"support/sinon\"] -- read the comments there, and then note that those files are also required by your spec_helper.\n\nload /teaspoon up in your browser and see if it loads.. if you see errors in the console you've done something else wrong.\nAlso, why are you using selenium?\n. The readme includes this, right?  Is there a way I could make it more clear?\n. Love it!  Will check it out tomorrow, but looks good.  We've been meaning to do this as well, but it's complicated with knowing which suite to load for a given spec/specs.\n. Thank you, I didn't feel up to fixing it today.\n. Everything in coffeescript is wrapped within a closure.  To get something \"globally\".\nso like\ncoffeescript\nwindow.fixture = window.navigator = null\nOr something, based on your needs.\nDoes that help?\n. As an aside, I don't use window unless I specifically need to.. often times, at the top of a file, or in my case a spec helper, I use the this identifier (which inside a top level coffeescript closure, is window):\n(this is psuedocode based on what you're trying to do -- I don't actually recall what getCurrentPosition actually returns)\ncoffeescript\n@navigator.geolocation = {getCurrentPosition: -> setTimeout((-> [-36.0, 150]), 1)}\nYou can check the spec helper for mercury2.\nAlso, phantomjs isn't anything crazy, I picture it as a compiled version of safari that doesn't have any GUI.. it's rendering content, just into a buffer or something -- you can screen shot the rendered output if you want, and you can debug the dom etc.. so if you picture it as a browser that you don't have to look at, that's about as accurate as you could be.\n. related, since @jayzes asked:  https://github.com/ariya/phantomjs/wiki/Screen-Capture\n. Teaspoon has fixtures.  Have you tried using a fixture?\n. Have you read up on it and does it make sense how you could use it?\n. It's just an element that teaspoon helps you create.. you're familiar with the DOM? a fixture is simply an element that you can put elements/content within and teaspoon provides an api to do that and check it nicely.\n. It already works this way.. It will attempt to locate a phantomjs bin within your path, and uses that one if possible.  \nIt installs the gem for people who don't care to understand how to install phantomjs so they don't have to worry about it, but those that care, can install phantomjs manually to get a more recent version.  The down side is that teaspoon installs the phantomjs gem even if you don't want it (which is large).\nI wanted to see what people thought, but the reporting is skewed a bit because only those with a relatively advanced understanding would care.\n. That's a valid point.  I was unaware of the dependency issues.  I'll remove it shortly and update the docs.\n. It's a rails config thing.  Check dev asset config vs test/production.\n\nJeremy Jackson\nOn Aug 7, 2013, at 7:34 PM, Emerson Lackey notifications@github.com wrote:\n\nHowdy,\nI like the idea of running my javascript integration tests against my test database which has all my fixtures in it. I can easily boot up the app in the testing environment by using the rails s -e test command - and the browser based teaspoon tests work great. However, it appears that my javascript is cached, and in order to reload all the tests I need to kill the server and restart it.\nDo you guys know of any way to reload my javascript every request within the test environment? Is this a Rails thing or something that needs to be adjusted within Teaspoon itself?\nAny help would be much appreciated.\n\u2014\nReply to this email directly or view it on GitHub.\n. Relatively soon.. I find it hard to release immediately after a merge of a pull request.. hit it up again in a few days.\n. Yup.\n. Should be released as 0.7.5.\n\nbundle update teaspoon --full-index should work for you now.\n. Can you access it directly in the browser when your server is running normally (http://localhost:port/teaspoon)?  eg. not via the command line tools.\nOn Aug 8, 2013, at 8:32 AM, Dimitrios Arethas notifications@github.com wrote:\n\nHello everyone,\njust seeing if anyone has had success running teaspoon with an ssl rails server. I see that there is a CLI option to pass to phantomjs, but my issue is I cannot go to localhost/teaspoon due to a malformed http request (ssl I am assuming). Are there any extra configuration options I can set for using teaspoon with ssl?\nusing jRuby 1.7.4 with 1.9.3 engine\n\u2014\nReply to this email directly or view it on GitHub.\n. Which SSL protocol are you using?  Check the docs for phantomjs (search for ssl).\n\nAdditionally, if PhantomJS isn't working for you, you could try the selenium-webdriver. \nhttps://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n. I think you're not using Teaspoon for what it's intended for.\nYou should consider using a more BDD style approach for something like that -- eg. cucumber-rails, or rspec features.\nTeaspoon isn't meant to test your pages, it's meant to unit test your javascript.  If you need more clarification on how to use teaspoon please refer to the Quick Start Walkthrough.\n. I initially hardcoded this value to three minutes (180 seconds I think), but there are some scenarios where Phantom doesn't receive an error and doesn't begin execution (these are rare, but can happen). I added the timeout so in those cases it will only sit there for 3 minutes before registering it as an error.\nIt's likely this is to enable longer running tests.  I remember adding a todo (https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs/runner.coffee#L8)\nSo this completes that todo. =)\n@tmandke, if you could remove that todo line I'll merge.\n:+1: \n. Can you merge master and force push this branch so I can merge this in?\n. Hey, this is a follow up.. do you want to merge master so I can merge this nicely?\n. I'm going to close this and implement something similar.  Thanks for the pull request, and sorry I wasn't able to utilize it.\n. I haven't needed it -- like you say, I typically use chrome for debugging simply because it's easy.. however, there's a pretty interesting opportunity to figure this out.  I did a quick google search and came up with this:\nhttps://github.com/ariya/phantomjs/wiki/Troubleshooting#remote-debugging\nI don't have the time currently to look into it more, but I'll be able to answer some questions if you have any.. I'd bet you can pass that flag to phantomjs (using the driver_cli_options configuration) and see how it turns out.  Would appreciate you sharing your results. =)\n. you can edit the configuration to allow console.log through to std out. if that makes it easier.. also, since things run in the browser, you should be able to use the browser.\n. I expect Jed is correct. I've found that Phantom is pretty dang close to safari -- so another option is to open it up in safari and see if it passes there (and I suspect it will not).\n. To clarify a little more about what Jed explained.. What you're probably seeing here is local caching.  You've probably cached this image locally in your browser so it loads fast enough for this to pass, but PhantomJS being more for testing doesn't have caching like that enabled.\n. There's two states, and I think you're missing one.  There is skipped (I don't care about it) and pending (I need to see this so I don't forget).\nYou're right, jasmine allows skipping tests.  It doesn't allow pending, so we did in fact add the support.  Do you have info I don't have?\n. Haha, no worries.. I think there were two lines, and they can be found here: https://github.com/modeset/teaspoon/blob/master/vendor/assets/javascripts/jasmine-1.3.1.js#L868\nThis lets the reporter understand that it wasn't skipped, but there was no function to execute there, thus no assertions.\n. What version of phantomjs are you using?  This is likely due to older versions of phantomjs not being able to pass exceptions/stacktraces around.\n. If you haven't solved this I'm going to assume it's an issue of the browser/test framework not being able to pass around the exception properly.. this is a complex issue that I (and others) haven't really found a good fix for.  If I'm wrong on this I apologize.\n. I appreciate the work! Thanks. =)\nOne thing -- can you remove the second commit, it looks like a merge that has a bunch of changes from master.  You want to remove that one and rebase master instead?\n. I did the same thing on a rails commit once.. I hated it.  If I had the skills I could probably help, but I don't.. so just be aware that I'm not judging, cause it's happened to me.\n. Cool, thanks. =)  I'll let CI do it's thing and then merge. Thanks again!\n. released 0.7.7\n. Thanks.\n. What version are you on?  That's been fixed for a while now, or that's what it seems like.\nhttps://github.com/modeset/teaspoon/blob/master/lib/generators/teaspoon/install/POST_INSTALL\n. The only guess I have for you is that you have an old version of teabag installed, and when you run the generator not using bundler that may be getting loaded instead of teaspoon? try uninstalling any teabag gem you have.\n. Straight from the docs on http://chaijs.com/guide/styles/\njavascript\nvar should = require('chai').should() //actually call the the function\nit sounds like you'll want to do something like window.should = chai.should() in your spec_helper, but you probably want to read about chai anyway, so I recommend that.\n. I tend to think not, because having to know things like that encourages a better understanding of your test framework -- and while not super important, this type of knowledge is valuable and I'd like to encourage it.  I haven't seen many issues like this, and while handholding is nice, I don't think it's the test runners responsibility to do it.  Make sense?\n. Sure, but understand that there's nothing that teaspoon is doing to expose chai, it's literally only providing the javascript file so you don't have to manually add it to your own support path.. so the chai documentation is correct, if you're using require.js the line would read require('support/chai').should() (which is pretty much what the chai documentation says), and this is the level of understanding that I encourage people to have -- it helps you choose your test framework at a minimum.  if we put too much sugar on top of things like that we're impacting things that a runner should not be impacting.\n. Basically, you would be facing these same challenges with or without Teaspoon, and I think Konacha did a bad thing with doing this for you -- exposed by the issue you're having now.  I want to help people write tests, but I also want them to learn what exactly is happening when they're writing their tests.\n. Definitely value there, since it's caused confusion for more than one.\nIt may just be useful to document in the generator template instead: https://github.com/modeset/teaspoon/tree/master/lib/generators/teaspoon/install/templates/mocha\nYou can update that with whatever examples you think would be useful for mocha.  That would be much appreciated. =)\n. Thanks!\n. Yes, there's code in there for that that used to work in rails 3.2.x, so I assume it must've broken with 4?\nThis was important for that to work:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/console.rb#L13\n\nJeremy Jackson\n\nOn Oct 11, 2013, at 4:18 AM, Nicklas Gummesson notifications@github.com wrote:\nI noticed that if one of my spec files (or spec_helper) contains a faulty require, e.g.:\n//= require broken_file.js\ndescribe(\"My great feature\", function() {\nit(\"will change the world\", function() {\n    expect(true).toBe(true);\n    expect(jQuery).toBeDefined();\n  });\n});\nThen teaspoon yields:\n$ bundle exec rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:61696/teaspoon/default\nError: Failed to load: http://127.0.0.1:61696/teaspoon/default?reporter=Console\nrake aborted!\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/teaspoon-0.7.7/lib/tasks/teaspoon.rake:5:in block in <top (required)>\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n$ bundle exec rake teaspoon --trace\n* Invoke teaspoon (first_time)\n* Invoke environment (first_time)\n* Invoke db:load_config (first_time)\n* Execute db:load_config\n* Execute environment\n* Execute teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:61715/teaspoon/default\nError: Failed to load: http://127.0.0.1:61715/teaspoon/default?reporter=Console\nrake aborted!\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/teaspoon-0.7.7/lib/tasks/teaspoon.rake:5:in block in <top (required)>'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:236:incall'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:236:in block in execute'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:231:ineach'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:231:in execute'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:175:inblock in invoke_with_call_chain'\n/opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/monitor.rb:211:in mon_synchronize'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:168:ininvoke_with_call_chain'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:161:in invoke'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:149:ininvoke_task'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:106:in block (2 levels) in top_level'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:106:ineach'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:106:in block in top_level'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:115:inrun_with_threads'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:100:in top_level'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:78:inblock in run'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:165:in standard_exception_handling'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:75:inrun'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/bin/rake:33:in <top (required)>'\n/Users/viddo/src/project/vendor/ruby/2.0.0/bin/rake:23:inload'\n/Users/viddo/src/project/vendor/ruby/2.0.0/bin/rake:23:in `'\nTasks: TOP => teaspoon\nIs it be possible for teaspoon to give something more useful to identify this kind of error rather than just saying \"Failed to load\"? I would not mind to help out to implement this but wanted to see if this is a known issue, and if there are some efforts to solve this before.\n\u2014\nReply to this email directly or view it on GitHub.\n. Basically if an exception is thrown before the tests starts, teaspoon will display that and exit.  So if you can figure out how to get sprockets-rails to generate the exception (outside of teaspoon) instead of a serving a 404 it will work how you'd expect.\n\nSame goes for coffeescript that can't compile.\n\nJeremy Jackson\n\nOn Oct 11, 2013, at 9:39 AM, Nicklas Gummesson notifications@github.com wrote:\nAh ok, I use Rails 4. I'll see if I can fix this.\nThanks for the prompt answer!\n\u2014\nReply to this email directly or view it on GitHub.\n. @all, please check this by pointing your gem at master -- it at least handles migration exceptions, and I assume all others that happen before making it to the specs controller.\n\nIf possible, and for bonus point (nothing else really), it would be great to check this in rails 3 as well -- to make sure nothing blows up.  If everything works well I'll release it.\n. Try requiring teaspoon/exception_handling at the bottom of your initializer.  This shouldn't make a difference, but I would like to know.\n\nJeremy Jackson\n303-507-6846\n\nOn Oct 22, 2013, at 5:07 AM, Nicklas Gummesson notifications@github.com wrote:\nMore or less same error message as before, but w/o the rake aborted message:\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:62202/teaspoon/default\nError: Failed to load: http://127.0.0.1:62202/teaspoon/default?reporter=Console\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmmm.  I don't want you to have to include that file manually.  Could you privately email me your application.rb and development.rb files?  Assuming you're running teaspoon in the Dev env.\n\n\nJeremy Jackson\n\nOn Oct 22, 2013, at 10:15 AM, Nicklas Gummesson notifications@github.com wrote:\nThat seemed to do the trick:\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:51554/teaspoon/default\nError: Sprockets::FileNotFound: couldn't find file 'broken_file.js'\n  (in /Users/viddo/src/project/app/assets/javascripts/application.js:1)\n  # http://127.0.0.1:51554/teaspoon/default?reporter=Console:1\nError: Failed to load: http://127.0.0.1:51554/teaspoon/default?reporter=Console\n\u2014\nReply to this email directly or view it on GitHub.\n. That would make sense.. the better_errors gem is hooking into the same area teaspoon tries to hook into. I'm hooking into the rails middleware that displays the errors, and if something else is changing that out from under teaspoon then there's not really much to do about it.  In your specific case with better_errors, you're going to have to manually require the file, but people not using better_errors should be fine without it.\n\nThanks much for helping me clarify why it wasn't working for you out of the box.. It may be worth a mention in the wiki or something.\n. That would be nice.  I considered doing it at some point, but have you investigated tapout? \nIt may work to pipe the output out using the teaspoon tap-y formatter, and then using tapout to build something else.\n. there's not an easy way to get the html from the browser to ruby.. we use json in the console reporter, pass it through to phantomjs or selenium, and then use that information in the formatters.\nI'd say it's probably better to provide a custom formatter -- they're pretty simple, and if you look at the existing ones you'll see how they work pretty easily.  I'd take a pull request for this if it makes sense to do so.\n. Cool, I'll be around this weekend -- if you need any guidance. Hit up my email and I can get on skype if you need.\n. I'm closing this assuming that you'll be submitting a pull request. Thanks!\n. I'll have to take a look.  I've never seen it before.\n\nJeremy Jackson\n\nOn Oct 17, 2013, at 2:04 AM, Ivo Wever notifications@github.com wrote:\nI upgraded to 0.7.7 today and am currently seeing the following output when I run bundle exec rake teaspoon:\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:42137/teaspoon/default\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\nafter which the specs are executed successfully.\nI would like to get rid of this superfluous output (I know I don't have phantomjs installed: it is provided by the gem). My goal is to create a situation where a glance at a failed build immediately tells me what is wrong and I don't have to ignore any 'informational' warnings.\nIs there a way to suppress this output by setting an appropriate option? If not, can we consider this a bug or feature request?\n\u2014\nReply to this email directly or view it on GitHub.\n. Phantomjs not in path or something?\n\n\nJeremy Jackson\n\nOn Oct 17, 2013, at 9:01 AM, Gabe Varela notifications@github.com wrote:\nI've seen it on our CI before. \n\nGabe Varela \nOn Thursday, October 17, 2013 at 8:15 AM, jejacks0n wrote: \n\nI'll have to take a look. I've never seen it before. \n\nJeremy Jackson \n\nOn Oct 17, 2013, at 2:04 AM, Ivo Wever  wrote: \nI upgraded to 0.7.7 today and am currently seeing the following output when I run bundle exec rake teaspoon: \nStarting the Teaspoon server... \nTeaspoon running default suite at http://127.0.0.1:42137/teaspoon/default \n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs \n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs \nafter which the specs are executed successfully. \nI would like to get rid of this superfluous output (I know I don't have phantomjs installed: it is provided by the gem). My goal is to create a situation where a glance at a failed build immediately tells me what is wrong and I don't have to ignore any 'informational' warnings. \nIs there a way to suppress this output by setting an appropriate option? If not, can we consider this a bug or feature request? \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014 \nReply to this email directly or view it on GitHub (https://github.com/modeset/teaspoon/issues/122#issuecomment-26509224). \n\u2014\nReply to this email directly or view it on GitHub.\n. I just changed how the gem / phantomjs needs to be installed.. closing this for now until someone can provide more useful information about how to reproduce.\n. Thanks much!\n. So, that's there for two reasons.  The first is because sprockets had a bug (I think this was in rails 3.2.12, and I fixed it there, and in sprocket-rails for rails 4), where in it would load the same file more than once.. so if you required the same file in multiple sources it would load that many times -- often times overwriting things and causing unexpected behavior.  There are other issues here where I go into this in more detail.\n\n\nThe second reason is for stack traces.. if all files are combined into one, the stack traces aren't very useful, but this is up to you to determine.\nWith those things being explained, you're welcome to provide your own layout where you call javascript_include_tag directly.  That's easy, just copy the one from the gem and put it in your own application.  Now that you're aware of the entire picture you're welcome to do whatever you like.\n. I would take a pull request for a generator that copies the layout into the application.. that way I can update the readme to explain this, and how to get around it.\n. Interesting.. Yes, if you could provide a fix or point me to what the fix would be that would be great.\nThat gsub there on line 123 is for windows support I believe.. :-/\n. Eh, it looks great to me.  Thanks much!\nMy only feedback is to try and match the style of specs a little more -- I'm OCD, so the spacing around context blocks in the specs is noticeable.  Regardless, I appreciate the fact that you identified the issue and provided a fix, so I'm willing to adjust myself if I ever come across it later. Thanks again. =)  I'm merging as-is.\n. I appreciate your issue, and I understand what you're saying.. The reason I won't merge this is because jasmine-jquery is a library outside of the scope of Teaspoon, and gets updated periodically (so your changes would be overridden).  It's only included as a convenience.\nA better way to fix this, and to not have to work from your own fork, is to copy the jasmine-jquery library into your own project -- putting it in spec/javascripts/support, you should be able to require it from within your spec helper (as you are now), but it will be your own modified version.\n. If you feel like this should be changed, I would suggest checking here: https://github.com/velesin/jasmine-jquery -- cause I kind of agree with you, but I don't think changing it in Teaspoon is the right place.\n. I changed this a bit, so let me know if that works out.  I hesitate, because I'm not absolutely sure why I didn't require it if rails was defined, but it may have been an oversight?..\n. Thanks!\n. I'd love to see an example.  I'm struggling to understand, but I vaguely get what you mean.. can you mock up a project so I can clone it and see if I have a good solution?\n. Everything looks ok.. It runs locally?  My guess would be that something is wrong with files being loaded or something.. can you make sure you're running it with the master branch?  I did some work for Rails 4 and better exception notifications, so that might help us sort out what's wrong.\n. It looks like rails isn't auto loading the engines controllers.  We don't know why this is the case, but have confirmed that requiring that controller fixes it.  So, the really odd thing is that this happens with consistency when it happens, but only happens on a few projects.\n. Well, I added a \"fix\" for this, but it still seems fishy to me.\n. it now requires the controller that it uses.. it seems like an engine should be able to resolve that, but I suspect some other gem or setup is breaking that.  does it work in your development env?  does it work in test env?  I still don't know the culprit.\n. I fixed it in the repo, so use master.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb#L1\n. @jayzes and I just made a change that will make this better (we hope).  If you're not suppressing logs, then it should display why the server failed to start.. This might be a good place to start to identify.  In our case, it was because we didn't provide the ENV for the secret_key_base, which was keeping things from starting successfully.  Let us know what you see in your logs when you use github: 'modeset/teaspoon' for your gem.\n. @tommoor: check your logs?\n. your rails logs.  are you using thin, out of curiosity?  if you're not, add it to your gemfile and report please.\n. assuming it's working for people now since I haven't heard back for a while.\n. I need to dedicate some time to understanding it.  It's much appreciated though, I just haven't yet. :)\n. I intentionally left this out of the 0.7.8 update, but merged it to master.. we'll see if there's any issues and go from there.  Thanks again, and I never fully understood it. =)\n. Can you explain what you want to solve?  I don't understand your suggestions without more context.\n. Ah, I see.  Yeah, would take a PR with that adjusted as well, and should only impact the layout -- putting the relative root instead of root, right?\n. I'm addressing this in 0.8.. can you explain why this needs to be configurable?  eg. wouldn't it always just be whatever the relative root is?\n. Do you think it's ok to just use the Rails relative URL root config in the few places where it's needed?  I'll make the adjustment for 0.8 if that works for you.  Thanks again for pointing it out.\n\nJeremy Jackson\n303-507-6846\n\nOn Jan 28, 2014, at 12:34 AM, Marek Kowalcze notifications@github.com wrote:\nI think you are right, if Teaspoon has to consider relative root it always should be the same root as in application so making it configurable doesn't make much sense. I've added  Taspoon.configuration.context just to have all path/URL related variable in one place. I guess it should be stored somewhere anyway, but can be read only.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks man!\n. :+1:  I like this, and will merge it when specs are passing. =)\n\nThanks!\n. @rjackson, nope, everything looked pretty good from my review.\nThanks again!  I'm thankful for good pull requests with good specs. =)\n. Well, I'm not sure what the problem is.. I'll take a guess, but I'll also make a recommendation.  First, I'm not saying you're doing it wrong, and I encourage you to try and identify exactly what's happening so we can address it with a fix or solution that others can benefit from. My guess is that the page may be reloaded, or some other thing is changing the DOM without you noticing -- that may not be accurate, but it's where I'd start.. Try a global beforeEach (or whatever) that checks for the element before each test.  You should be able to see when it goes away and narrow down your search.\nI usually don't rely on the DOM to be anything in the test environment -- it's sort of a can of worms in my experience.. instead, I prefer (and recommend) using a fixture for this sort of thing.  And there's a ton of ways to accomplish this.  Where you use $('meta[name=app_id]').attr('content'), you may consider putting that into a method that can be stubbed.  It's sort of a structural thing, and again, I'm not saying you're doing it wrong, but I've found that writing code that can be stubbed easily for tests, not only creates nice clean tests, it also encourages some good design patterns that I've found useful later -- my point being that I don't encourage writing code so it can be tested easily, rather that code that's easy to test is also easy to maintain -- and having that be a method you can stub will make it easier to test, and will probably encourage more structure which can be better in the long run.\n. No worries, thanks for closing the issue and explaining what was happening -- you'd be surprised at how helpful these issues can be for others in the future.\n. https://metacpan.org/pod/release/PETDANCE/Test-Harness-2.64/lib/Test/Harness/TAP.pod#Anything-else\nSo, I considered that, but it seems wrong to have that output in the same area as the TAP plan output. TAP is intended to be parsed by something else, like Hudson to generate metrics.  If you output coverage with TAP, while it says it's ignored, the spec doesn't sound like it wants anything other than plan output.\nYou can accomplish matching the spec and outputting the coverage reports by using the html output, which also generates a cobertura-coverage.xml file.  Do you see a different way to accomplish this?\n. I just poked around a bit, and I think the problem is in here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/formatters/base_formatter.rb#L55\nIt doesn't generate the reports if logs are suppressed, which is the case with the TAP formatter.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/formatters/tap_formatter.rb#L23\nI think that may need a revisit based on this feedback.\n. This should be resolved now.  It doesn't display text or text-summary when run with a formatter that suppresses logs still, but this seems reasonable as it can break the output generated for such consumers.\n. Thanks!  Can you tell why CI is failing?\n. Haha, no worries.. thanks. =)\n. How is this Teaspoon?  You say \"Teaspoon is not happy about passing .bind()\", yet I see nothing in your code that's at all related to Teaspoon.\nWhat it looks like, is that bind isn't being loaded into your test environment.  So the question should be:\nWhere is the bind method coming from, and why isn't it defined?\nIf you figure that out, you will solve your issue.  Again, this doesn't seem like anything related to Teaspoon, and I apologize if you can show me otherwise.\n. Ok, I did some quick research.. I'd guess you're trying to use the ECMA-5.1 implementation.. which isn't supported everywhere -- and apparently not in phantomjs yet either?\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\nThat link provides a polyfill, which you'll need to load.  And you should consider loading that anyway, otherwise your JS won't work properly in some clients.\nIf you don't want to load the polyfill, you might want to consider using selenium as your driver (instead of phantomjs), as that might give you more expected results since I'd also guess you're only checking things in FF.\nAm I at least close to understanding your issue?\n. No ideas.. :-/  Have you figured out what was going on?\n. I suspect this is due to an update to qunit, but would love someone to confirm this as I don't personally use qunit and all the spec specs for qunit are still passing.\n. I guess I'd do a window.location.reload instead?  Or you can work what you need in, but I don't believe I provided any teardown -- since I wasn't foreseeing that as being needed.\n. I just tried adding this, and it's not something that we can easily accommodate.  This is because the test frameworks (jasmine, mocha) at least don't support it natively (at least jasmine doesn't), so without some hacks for that it's not feasible.  I'll stick with my original recommendation of window.location.reload() being what you should call.\n. Just added the ability to use execute again -- it just reloads the page.\n. I don't, and I don't personally use windows, so fixing that is rough.  I'd happily take a pull request if you figure it out.  Sorry it doesn't work for you. :-/\n. you know, it could be where paths are joined.. with a /, vs .. I don't recall windows considering that a command, but it could be something like that.\n. If you have a full setup using cygwin etc. (which is what I used to do), this probably isn't an issue.. it's an interesting thing to be aware of though. If someone using windows is able to figure out the issue I'll happily take a pull request.\n. I don't see anything obvious in your code.  I might check to see if you have everything setup in your config.\nHere's a working example of a mocha test: https://github.com/jejacks0n/mercury/blob/mercury2/spec/mercury/initializer_spec.coffee\n. it's in the config.ru\nhttps://github.com/jejacks0n/mercury/blob/mercury2/config.ru#L32\n. My god man!  I'd say to read the readme.  All of this is covered there, and I'd ask you not to use github issues as a stream of consciousness logger. :)\n\nJeremy Jackson\n\nOn Dec 12, 2013, at 8:59 AM, nikolas notifications@github.com wrote:\nClosed #143.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice!  You might also want to add this information as well:\n\nYou can add teaspoon to the default rake tasks by clearing out the defaults (this is sometimes not required), and then adding teaspoon in the chain where you want. So with rspec and cucumber, you get the rspec specs running first, then the javascript specs, and then cucumber (or whatever integration specs you have).  This is what I do personally, and then I don't have to do any CI setup.\n``` ruby\nRake::Task['default'].prerequisites.clear\nRake::Task['default'].clear\ntask default: [:spec, :teaspoon, :cucumber]\n```\n. Thanks!  Sorry it took me so long to get it merged.\n. Interesting.. So, I'd look into PhantomJS and see if supports what you're using, and if not, you can use the selenium driver which fires up firefox and runs them that way.\n. Please let me know how this turns out -- I'd be curious.\n. Awesome, thanks so much for contributing.\nDo you think it might simplify if you provided command line args in terms of a string?  Give me some background I guess so I understand.\nThanks again!\n. Cheers!  Happy holidays too. :)\n. I'm looking into this.\n. so, if I put an invalid call, or syntax error in my spec_helper my specs still run.. I see the exception, but everything runs fine.  you think we should exit on the first exception with a none-zero value in these cases?\n. My point is that I can't tell if some tests run or if all tests run.. I think.\nSome syntax errors (in a file that's not important) might or might not impact the ability for the specs to run and pass.\nHow do you tell if it's one that impacts specs or not?\nWith that being said, I can adjust to exit(1) if there are errors in loading the entire suite (eg. an error that happens in rails)\n. Yup, that's what I'm thinking is the only thing we can do.\n. That's a good suggestion.  I think having that at the end would be useful in general -- along with any failures potentially?  It can get really spammy on a lot of failures (eg. something not right in spec helper, or something), but it seems like something we could play around with.\nAnother idea, is to use the fail_fast configuration in this.. if there's an unhandled exception it could stop immediately with exit(1).\n. @jayzes, additional info: if assets fail to compile you get an exception, which is then processed by the console/runner and will exit.. it's only in the case where you have a javascript exception -- eg. a call to an undefined function or something that this issue references.\n. After further thought, I feel this is generally undesired.  It results in behavior that isn't seen in the browser (depending on test framework).. So, Jasmine doesn't care about exceptions that are outside of it, so all your tests will pass and you'll be green in the browser. QUnit, and Mocha (I'm pretty sure) allows capturing all exceptions, and will fail the run based on that.\nThe problem I see with this is basically that it should be up to the test framework to declare a failure, and not up to teaspoon.  I grappled with doing this in a nice way for a while and I'm not confident we can.\nSo for now, it will never be a failing run unless the test framework declares it as such. Sorry @rickmzp, but I don't think it will be added in, but I'll leave you with the suggestion to check out another test framework if you feel any exception should be counted as a failure.\n. by test framework, I mean mocha, or qunit.. I didn't mean to say you should go use a different \"test runner\" such as teaspoon is.\n. another thought as to how you could do this independently, is to capture all exceptions and have a spec at the end of the suite that asserts that that array is empty. Try something along the lines of:\n``` javascript\nwindow.unhandledErrors = []\nwindow.onerror = function ErrorHandler(errorMsg, url, lineNumber) {\n  window.unhandledErrors.push(errorMsg, url, lineNumber)\n  // maybe re-throw?\n}\n// last spec?\ndescribe(\"unhandled errors\", function() {\n  it(\"should be empty\", function() {\n     expect(window.unhandledErrors).toEqual([])\n  });\n});\n```\nI coded that in the browser, but you get the idea.. that's how I would add the concept of any unhandled error as being a test failure.\n. As an aside, I've rewritten the runner so it can more easily be extended.. it will look for \"on_{event}\" methods and call them, so doing this in your teaspoon env would also work:\nruby\nrequire 'teaspoon/runner'\nclass Teaspoon::Runner\n  def on_error(result)\n    raise Teaspoon::Failure, \"Unhandled javascript error: #{result.message}\"\n  end\nend\n. no, it seems to work for everyone else.  I assume you're running a really old install of phantom, or that you've somehow (unknown to me) setup things incorrectly.\n. btw, the driver is intentionally coffeescript, because phantomjs can parse coffeescript in every scenario I've ever been exposed to.\n. Can you tell me if passing it a js works? https://gist.github.com/jejacks0n/8286446\n. Closing it then, since it's unreproducible to anyone else. Sorry you had to deal with the frustration.\n. meh, they're more or less the same.\n. I'll probably circle back and clean up that javascript a bit more, but give it a shot and let me know. Thank you for doing the background to identify the issue -- since it's so OS specific it's hard for us to identify. =)\n. This should be fixed in 0.8.\n. Thanks for the commit.\nCan you roll back your edits to the wiki though.. the page you edited specifically says it's for Jasmine, not mocha.. if you want to create a second copy for mocha, that would be cool though.\n. I'll look into this more this afternoon.  Thanks. =)\n. So, it may pass in the browser, but you probably see the same exception if you open the debug console.. correct?  I'll move forward with that assumption, but it may be incorrect. I've never seen the get$ method, but it may exist in one of your dependencies, or it could be a typo? @gvarela took a quick look, and thinks it may be a closure issue.\nIf you want advice about what you're using to test with, you may consider jasmine over qunit.\nEither way, let me know what you figure out.\n. Oh, to clarify, it's not an errant test, it's an exception that qunit captures.. you'll notice it's a \"global failure\" -- meaning you shouldn't have any exceptions.\n. Good.  It's worth mentioning, that phantomjs (the default runner) is pretty much the same as a browser, but it's not entirely 1:1.. If you want to use those, try using the selenium runner, because it will fire up firefox and run your tests in a full browser.  If you're curious you can give that a shot, and see if it has something to do with phantomjs vs a real browser.\n. Ah, I've seen this issue before -- and it has nothing to do with Teaspoon etc.. I'll help by clarifying, but in the future please be kind to open source devs and do the digging before creating an issue. =)  Not meant to be a dig, but I do have a day job.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n.bind in your case is binding the function scope, but that's not available everywhere.. phantomjs is safari more or less, so it's good that you are checking there -- it will give you the same results 99% of the time.  The link I provide has a polyfill, so you may want to use that to get it behaving everywhere. That's your problem.\n. see #139 as well.\n. Well, this is going to be tough.. at least from my initial spike on it.\nThe problem is basically that the architecture was mostly written for Jasmine 1, and I adapted that for Mocha and QUnit.. but Jasmine 2 doesn't fit into it as well -- and @jcoglan had some feedback about it being too coupled.   I'm sort of lost with a better way to do it, that's not coupled, and so would love comments about how we could make that better -- and easier to do this sort of thing in the future.\nSo, I think we need a conversation about ideas on how to do this, how to make it better, and then we can probably move forward with whatever ideas we can come up with.\nI'll provide more information if it's worthwhile.\n. You are.  I haven't finished it.\n\nJeremy Jackson\n\nOn Apr 23, 2014, at 9:50 AM, Todd Hansberger notifications@github.com wrote:\nFrom the documentation it looks like Jasmine 2.0.0 is supported but this issue makes me think it is not. I have not been able to get Jasmine 2.0.0 working locally and just wanted to check if I am wasting my time.\n\u2014\nReply to this email directly or view it on GitHub.\n. So, it works for me, and I'll provide you the relevant examples so you can see how I'm using them.. you'll notice in this example that I preload it, because I'm stubbing ajax requests, which impedes the ability to load the fixture.  You may need to do the same thing?\n\nPreload the fixture (this is only needed if you plan on stubbing ajax):\nhttps://github.com/jejacks0n/mercury/blob/mercury2/spec/mercury/views/modules/form_handler_spec.coffee#L6\nLoad the fixture:\nhttps://github.com/jejacks0n/mercury/blob/mercury2/spec/mercury/views/modules/form_handler_spec.coffee#L107\nMy fixture:\nhttps://github.com/jejacks0n/mercury/blob/mercury2/spec/fixtures/form.html\nWhere I override the default Teaspoon fixture path:\nhttps://github.com/jejacks0n/mercury/blob/mercury2/config.ru#L34\nHope that helps.\n. I'd love to accept that as a reason, but it works for me, so that reasoning doesn't make sense.\nhttps://github.com/jejacks0n/mercury/blob/mercury2/Gemfile.lock#L86\n. Wait.. one sec.. so, you think that they're being loaded via the asset pipeline I think -- this is not true.\nRack::Zippy may be the problem, but I tend to think not.  Here's why:\nhttps://github.com/modeset/teaspoon/blob/master/config/routes.rb#L2\nhttps://github.com/modeset/teaspoon/blob/master/app/controllers/teaspoon/spec_controller.rb#L27\nYou can see that it's not serving them as assets at all -- it's using a controller and route to serve those (the readme explicitly states this so you can use things like haml, erb, etc.).  I thought that was clear, but that's ok.. I'd close your issue over on Rack::Zippy potentially, unless you're absolutely sure that it's causing an issue, though I think it may not be the case.\nWhat path are you accessing your fixture at?  It should be relative to whatever path you've configured for your fixtures.. since that route is being hit, and no assets are being served this may make more sense to you.\n. Also worth noting, that teaspoon routes are prepended, but it may be true that Rack::Zippy is doing something odd, since it's middleware.  So I don't know. =)\n. Yup, the fixture path is under a path registered as an asset path.. I might change your fixture path to something outside of spec/javascripts ... maybe spec/javascript_fixtures, or spec/fixtures/javascript?  That would allow you to get around the issue, because it seems pretty core to Rack::Zippy.\n. Thanks again for sorting out the issue. much appreciated. =)  Sorry.\n. Nice, thanks!  So, I just started on 0.8 (might become 1.0) and I'm changing a lot about configuration and trying to simplify some of the existing configuration.  Since this effects that, it won't be able to merge correctly.\nI'll integrate this into my new branch (that I haven't pushed yet), and after more review I'll merge this into 0.7.  Just checking to see if you want it merged on 0.7 and have it changed for 0.8 or if you'd rather have it go in once with a consistent API for 0.8?\n. The implementation looks solid.  I was out earlier, so I wasn't able to look at it until now.\nHere's some thoughts, and think about them for a bit while I do the same.  I totally understand the need for this, and I think the approach is fine (though, I would change the lambda to a proc -- not the stabby kind, just cause that's how I roll. ;-P), and I think this implementation is good as well.\nIn the past year I've merged a lot of PRs that add to the configuration, and while this is fine, I've noticed it getting cluttered and dirty -- which is one of the primary things I'm trying to improve on now, so understand my hesitation when there's \"yet another configuration added\".\nI'm wondering if you think this will be a common thing?  I haven't seen it up until this point, but it doesn't seem wrong to do it.  I guess my point, is that if I'd structured that method nicer, would you have been ok with overriding it from the initializer by reopening the class?  You can see the things that I'm trying to balance, and so I'm curious what your thoughts are.  Let's say I broke off the filename.gsub calls into a single line method so it can be easily overridden.\nTrying to figure out if there's a less \"easy\" way, but also a less \"configuration-y\" way.  I'm pretty on the fence, but if there's a way to do it without more configuration I'd be happy.. still trying to keep the barrier to entry low with teaspoon.\n. Awesome, yes, and that's a great suggestion.  I think I may play around with that idea, so you can use a custom Suite class if you want, which would give you pretty much full access to whatever you wanted.  I'll think on your ideas, and see what I can come up with.\nI won't be releasing the gem, but I'll merge this and revise for 0.8.\n. Thanks. =)  Can you give me some background so I understand why you want this?  Before I dig into it, I want to understand what this provides or solves for you.\n. Can I ask why none of the existing build artifact/formats worked?  eg. TeamCity, jUnit, or TAP?\n. I played around with this concept in the 0.8 branch, and I think we can do it more efficiently using phantomjs/selenium instead of wget.\nI'll see if this can go in cleanly.\nI had a question though -- you mention saving all the assets -- is this needed, or can they be re-served from the CI box?  As in, I would rather just save the index.html and not all the assets that were loaded.  I'll have to look at what you did there.\n. Getting this into 0.8.. thanks. =)\n. Do path helpers utilize this custom context root? after dealing with this in a different way, I think I may make some adjustments to the javascript / views to have more of this work being done in rails -- e.g. using path helpers.\nI initially avoided that to some degree, because I wasn't sure the directions it might go, but at this point it seems like we should consider a better approach.\nJust probing for some thoughts.\n. Yeah, I came across a lot of the same info.  I'm planning on doing this in areas where it's possible for now, and doing this by other means (which I wanted to fix because they're ugly) where that's not possible (for the time being).\nThanks for the info.  Would you mind giving the 0.8 branch a look over to make sure this is handled well when I feel that's ready to be looked at? I would appreciate the help.\n. Or help by providing a some steps to setup the spec/dummy app in this way so it can be tested easily and we can make sure everything passes with relative_url_root enabled?\n. I fixed this in 0.8 by using window.location.pathname.  I want to move away from this concept of \"context\" as much as possible, so thanks for bringing it to my attention and helping me sort out what it solves. Your time is much appreciated.\n. There was considerably more to this, and so I've adjusted the dummy app to be setup in such a way that this works. The key here (in general) is that asset paths have to be adjusted as well.\nAnd then if you need teaspoon to be within that same relative_url_root (it's not needed) you can set the mount_at configuration to \"/relative/path/teaspoon\"\n. Ah, are you using the new \"use_framework\" directive?  Check the readme for it.\n. https://github.com/modeset/teaspoon/blob/master/spec/dummy/config/application.rb#L30\nAlso, in general you have to configure the asset prefix along with the relative URL root, but assume you knew this.\n. Ok, so a few things.. this is obviously confusing, and I think you have some basic rails setup incorrect.. so let me know if this isn't the case -- it took me some toying around to get it sorted.\nFirst, you'll notice that the spec/dummy app in teaspoon doesn't do the wrap that you have in your config.ru.. this seems like it's a legacy thing, and is incorrect so I believe it should be removed.\nSecond, the asset prefix MUST be set, it's not even related to Teaspoon, that shit just seems wonky and can't be resolved by Teaspoon alone.  Literally, your asset paths will be wrong everywhere if you set relative_url_root and not the asset.prefix.  I dug into the code for this, and it makes some sense for when the assets are precompiled, but it doesn't seem to take into account when assets aren't precompiled.  I wasn't compelled to fix it it sprockets-rails.\nOk, so with all of that said, it looks like your project is doing too much.. I found that proper setup (at least with rails 4, and that's all I'm caring about here), is to set config.relative_url_root in your application -- or via the ENV[\"RAILS_RELATIVE_URL_ROOT\"], and then simply set your assets.prefix to relative_url_root + \"/assets\".\nThat's it in a nutshell. There should be nothing else you need to, so remove the extra stuff as I bet your project won't work properly, Teaspoon or not.\nAs a follow up, if you want Teaspoon to be nested within that same path, just adjust your config.mount_at to be relative_url_root + \"/teaspoon\". I almost put this into the routes file, but liked the fact that you can do it yourself -- or not.\n. point 1: partially correct. a. the dummy app is not nested within a subdirectory, though all urls act as though it were, so it doesn't matter where the root of it is. b. as mentioned a few times in documentation, as well as this thread, teaspoon can be, placed within this relative url root by adjusting the mount_at configuration.. I chose not to do it because as I work on it I don't feel like typing /relative/teaspoon.\npoint 2: you can also wrap your routes within a scope, or just configure it how it seems like it wants to be configured via http://guides.rubyonrails.org/configuring.html. I went by that, and I did come across the config.ru thing, but it seemed like that was a bit legacy.\nThe problem, after adjusting the dummy app to be setup like yours, is that teaspoon doesn't fire up your server using the config.ru file.. it fires it up directly through rack, and that's why I feel like putting that map call inside of config.ru is wrong -- at least it complicates things to a pretty insane degree from teaspoons perspective -- in how it starts the server. And this is why I ended with the solution I provided.  Can you explain to me where my suggested configuration and setup falls down for you so I can better understand why you want to do it that way?\n. The only configuration that I could get to work for both the console, and in the browser was to set the asset.prefix conditionally based on if Teaspoon::Console was defined.  This class is only loaded in the case that it's being run via the console, and thus allows for it to be different between the two environment.\nruby\nconfig.assets.prefix = \"/relative/assets\" if defined?(Teaspoon::Console)\nThough, what I recommend is to remove the map call in the config.ru file and if for some reason you need some additional behavior that the recommended configuration doesn't provide, wrap your routes in a scope:\nruby\nscope Rails.application.config.relative_url_root do\n   # your routes\nend\nIt should also be mentioned that I haven't used relative_url_root in rails, nor have I ever needed to -- and really have no expertise or deep understanding of this aspect. I just prefer simple solutions, and the one I came to fit the bill.\n. Configure your server type?\n\nJeremy Jackson\n\nOn Mar 6, 2014, at 2:58 PM, Marek Kowalcze notifications@github.com wrote:\nI've tried again on fresh rails 4 application, this time I simply used Trinidad server to run application in sub directory. Almost everything works fine :)\nTo sum up:\nRails 4.0.1, Teaspoon branch 0.8\nSet up rails in config/application.rb\nconfig.relative_url_root = \"/relative\"\nthis must be set for any asset paths to be correct!\nconfig.assets.prefix = \"/relative/assets\" if defined?(Teaspoon::Console)\nSet up Trinidad in config/trinidad.yml\ncontext_path: /relative\nRun app via rails s trinidad\nResults:\nWeb UI at http://localhost:3000/relative/teaspoon/default - OK\nteaspoon / bundle exec teaspoon - OK\nrake teaspoon - ERROR:\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n # http://127.0.0.1:57969/teaspoon/default?reporter=Console:13\n...\nLet's forget legacy config.ru hack. The only thing left to fix is the difference between rake task and teaspoon binary.\nI've pushed all this into new repo at https://github.com/kowal/rails4_on_trinidad.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, so you start rails with trinidad, right?  Teaspoon also starts rails behind the scenes from the command line.  How is teaspoon to know what server type you want it to start rails with?\n\nSo, check the configuration for server.  Set it to trinidad.  I have no idea if this works, but it should in theory. :)\n\nJeremy Jackson\n303-507-6846\n\nOn Mar 7, 2014, at 12:42 AM, Marek Kowalcze notifications@github.com wrote:\nConfigure your server type?\nSorry, but I don't get what you are asking about?\n\u2014\nReply to this email directly or view it on GitHub.\n. It's the same code path for both rake and the cli. I'm not sure why it would behave differently. I'd be happy to accept a pull request that fixes it, or you can create project that exhibits the behavior.\n. Thanks!\n. It uses git, which is actually nicer.  I would love it if you wanted to jump in and maintain a changelog though.\n\nWith that being said, you can get this information pretty easily by using the little branch/tag control from the project root -- then you can click on \"commits\" and see what happened in that tag, and since the last tag.\nYou could generate a list of things (even review changes) for each one of those commits (aka changes) in that tag, and compile them into a changelog.\nHere are some links:\nhttps://github.com/modeset/teaspoon/commits/v0.7.6\nhttps://github.com/modeset/teaspoon/commits/v0.7.7\nhttps://github.com/modeset/teaspoon/commits/v0.7.8\nhttps://github.com/modeset/teaspoon/commits/v0.7.9\nIn our example you can track all the changes from the date that 0.7.6 was released, through to what was included in 0.7.9.\n. I agree with you, and I'm redoing the coverage v0.8 -- I merged it without fully vetting it.  So thanks for the heads up.\n. If both versions were being loaded it would cause this.  The route is prepended in the engine to avoid any catch-all routes.  Do you see a way to avoid this if both gems were being loaded?  I assume this was the case.  If you try upgrading to 0.7.9 in your current gemfile do you see the same issue?\n\nJeremy Jackson\n\nOn Jan 29, 2014, at 5:33 AM, pareeohnos notifications@github.com wrote:\nI'm currently trying to migrate my project over to jRuby, and in the process got the latest version of teaspoon (0.7.9) in my jRuby gemset, but still had 0.7.8 in the standard ruby gemset. After trying to launch my app, I was given an error stating that the route named \"teaspoon\" already exists, and the app failed.\nAfter having downgraded teaspoon back to 0.7.8 however, it seems to be working again. Not sure what changed to cause this?\n\u2014\nReply to this email directly or view it on GitHub.\n. So you're saying you see the error when teaspoon is not installed?\n. ok, I'll look into it further.  I was using it fine the other day, but I'll double check.\n. Any updates?\n. the 0.8 branch changes how things are loaded, but I'd be curious if this is resolved, or still lingering on that branch.\n. 0.8 should take this into account now, though it's still a larger concern.. if this doesn't work, I'd appreciate it if you wanted to hop into the gem on your end and see what does resolve it.\n. waiting to get feedback.. so this helps. =)\n. Yay! Thanks for the info @nowhereman.  I was never able to track down why that was happening, so it's good to know it was just a regression in rails.\n. I haven't seen this.  More info or checking out why would be great.\n. I guess any info on how to reproduce would be great.  I would love to be able to tell you why, but need the reasons it happens distilled down to its most basic form.\n\n\nJeremy Jackson\n\nOn Feb 4, 2014, at 10:39 PM, Brandon Weaver notifications@github.com wrote:\nThe second I remove tests that happen to manipulate fixtures, and confirm that those fixtures were properly manipulated, this stops. I'd think this is due to a seriously ad-hoc attempt at integration testing, which Jasmine flat out doesn't support. I'm moving to get Integration testing added as a substitute to this form of tests to make this issue irrelevant.\nAny thoughts on this matter? I've still got a fair amount of research to do to confirm that integration testing is the proper route here, but any advice would be great.\nThanks for your time in looking into this!\n\u2014\nReply to this email directly or view it on GitHub.\n. If you want to provide how to reproduce I'll look into this further.\n. wouldn't it be bad if the thread was dead?\n. Fair enough.. thanks for helping to clarify.\n. I'm redoing a major portion of this, and would love you to jump in and contribute to this if you'd like.  I won't merge this as I think it may only confuse matters, but I've been working to create a better api for teaspoon, which will make guard-teaspoon much easier to implement, and may make it a little more clear.\n\nLet me know if you'd like to be involved in this and I can grant commit privs to teaspoon and guard-teaspoon after a short conversation.\n. I'm using it rails 4 and it works fine. Can I see your gemfile?\n. It could be the last slash?  Where did you get the URL from?\n. Then I don't understand.. If you look, I'm testing against rails 4.0.0 (https://github.com/modeset/teaspoon/blob/master/Gemfile#L11), and just updated locally to rails 4.0.2, and everything continues to work fine.. there's something conflicting with it, or a rails config that I'm unaware of... I don't know, but it works for everybody that I'm aware of, so I'd encourage you to identify it -- as I can't fix it if I can't reproduce it. \n. I can reproduce it.. but it seems like a regression in rails, no?\nI've since removed it, but it's in the non-existent teaspoon 0.8 branch (I haven't pushed it yet).\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/suite.rb#L69\nCan you find any documentation change that would explain why that route behavior would change? And if not, do you want to open an issue on Rails?  Seems odd that a route that works in major releases (and a relatively common thing to do) should break on master.\n. Yup, I think I came across the same issue today.\n. Hard to say.  I want people to use it and report any issues they're seeing and there's no way to determine how many people are using it.\nIt's why it's nice to hear if everything is ok.\n. You have a parse error in your js.  Consider loading it in the browser to review, it might help you sort it out.\n. Not with that.. qunit logs them as a global exception.. are you familiar with qunit?\n. hmm.. is there something wrong with the qunit spec_helper?\n. I believe it's in the initializer that's generated for qunit.. it's setting the helper to \"spec_helper\", which should read \"test_helper\".. I came across that while I was working on 0.8 last night.  try changing that and see.\n. https://github.com/modeset/teaspoon/blob/master/lib/generators/teaspoon/install/templates/qunit/initializer.rb#L36\nIt's been there for a long time.\n. Thanks!\n. Yeah, sorry. Thanks for the input though -- glad I'm getting it in there.. it's pretty long overdue.\n. merging this because it may be a few days before I get to jasmine2.\n. Thank you.\n. Two things:\nfirst, the output to a file is only in master.\nsecond, you would have to wrap the --format=\"junit>tmp/output.xml\" in a string -- otherwise you're piping everything to that file -- as it's a standard shell way to do that.\n. Thanks!  And I bet that's still a problem.  I'll check it when I get some time.\n\nJeremy Jackson\n\nOn Feb 23, 2014, at 2:55 PM, Joe Fiorini notifications@github.com wrote:\nI noticed on 0.7.9 that my hooks are running twice even though they're only called once. I was able to trace it down to this code (still there in master). It looks like it's running the block for default and then yielding to the block handed in, which according to the calling method is the same block that was just run. I was able to fix it by passing the suite name to the initializer and stopping the block from running if it's \"default\".\nIf this was fixed in the hooks refactoring, please feel free to close. Just bringing to your attention just in case you weren't aware.\n\u2014\nReply to this email directly or view it on GitHub.\n. This isn't a feature of Teaspoon, but rather a feature of the test frameworks -- eg. jasmine/mocha/etc.\n\nSpoiler: none of them support it.\nhttps://github.com/visionmedia/mocha/issues/902\nhttps://github.com/pivotal/jasmine/issues/171\n. 30 minutes?  or 30 seconds?\n. bad compile of phantomjs or istanbul?  what's the behavior like without the reports -- working fine otherwise?\n. can you run istanbul via the command line?  eg. istanbul help\n. Not sure then. I can't really replicate your setup and see it.  It just shells out to istanbul with the output from the test run.  That must be bombing in istanbul, as I can't really see any exceptions raised from teaspoon.\n. yeah, there's some room for improvement in istanbul.  I have seen it fail, and sadly it doesn't fail gracefully.  Though it's the best solution I could find.\n. Also -- you could consider using jquery-rails, as it will be automatically ignored since the source file will be in gems.\n. it's still running really long?  I thought you said it hung when you ran istanbul.\n. I thought you said you had it figured out.\n. I don't know how else to help you.. it seems like istanbul is breaking on some of your javascripts.. you should remove all but the code that you're testing and implementing.. are you testing jquery?  No, probably not, because that would just be silly.\nSo it shouldn't be included in the coverage reports.  As far as teaspoon taking a long time, it's not.. it sounds like istanbul is taking a long time.  And for that, I'm sorry, but also not responsible.\nYou can do something like this in your teaspoon_env:\n``` ruby\nrequire \"teaspoon/coverage\"\nmodule Teaspoon\n  class Coverage\n    def generate_reports(&block)\n       File.open(\"coverage.json\", \"w\") { |f| f.write(@data.to_json) }\n       puts \"coverage was generated.. go check it and run it with istanbul manually.\"\n    end\n  end\nend\n```\n. @Sanjith That's a bummer. It sounds like it runs fine without coverage reports. correct?  If so that's great, and I'll stop trying to help you figure out why your coverage reports bomb out.\n. Thanks.  I was hoping someone would check this out and resolve anything outstanding.\n. I personally don't want to maintain two different structures, which requirejs needs to function.  It's on the todo list to get proper specs for this in place so we can avoid breaking it in the future, so if you want to be an awesome open source contributor, you're welcome to add that. =)  It would be appreciated.\n. Appreciate it.  Hopefully you came across the wiki page.\n. Cool, you want to create issues with an explanation and use case so I can understand what you want fixed.  it makes it easier and requires less time dedication to sort out what's going on. =)  I can then focus more on making it work the way it's expected.\n. Hmmm\u2026 I added that because for some reason it was being loaded twice for some people. Booo! Engine stuff seems vaguely broken for rails 4, and obviously needs some attention.\n\nJeremy Jackson\nOn Mar 11, 2014, at 8:53 AM, psharpNumerex notifications@github.com wrote:\n\nUpgraded to 8 and it seems that the routes are not being prepended.\nI tracked it down to engine.rb:43\nreturn if Teaspoon::Engine.routes.recognize_path('/') rescue nil\noutputting the results of Teaspoon::Engine.routes.recognize_path('/') gives me\n{:controller=>\"teaspoon/suite\", :action=>\"index\"}\nI'm using Rails 3.2.17\n\u2014\nReply to this email directly or view it on GitHub.\n. I think I may take that whole configuration out and require mounting it manually.. that's a bummer, but seems to be the only solution. we have cases where it's mounted twice (jruby), and cases when it's not mounted.\n. @bfcoder, thanks. I guess I assume people are checking master before submitting an issue, but that's probably not always true.\n. That's probably true because we use that \"event\" as the time to hook in.\n\n\nJeremy Jackson\n\nOn Jan 20, 2015, at 6:38 AM, hlascelles notifications@github.com wrote:\nWe did a cleanup of some engines and saw this error arise (with 0.8.0). It turns out that our Combustion folders needed a NOOP routes.rb file to trigger the correct append to take place.\nThat is to say, adding the following file to spec/internal/config/routes.rb solved the problem:\nRails.application.routes.draw do\n   # Do nothing, except trigger automatic teaspoon engine mount\nend\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks! I'll keep this around for information.\n. Checked it out and it looks good.. Any way you can add me as a collaborator if for some reason you disappeared?  Also, some specs would be nice to make sure it stays working. =)\n. Thanks!\n. Aww, can't merge from my phone when the build is failing.  I'll merge it in a bit.\n. Thanks! Is there any readme updates that need to happen?\n. Can you explain why you have dev/test set to precompile -- or why you want to include teaspoon in production?\n. Hmm.. I've used teaspoon with rails 4.1.0. @jayzes did you have this issue?\n. can you do me a favor and put this in your teaspoon_env and report back on what it says.\n\nputs \"!Env: #{Rails.env}:#{RAILS_ENV}\"\nTechnically speaking, the engine will run in development when you browse to /teaspoon (since that's the server that's running), and should normally be in development from the CLI, but I want to confirm.\n. Having them both run in development actually simplifies a lot of the differences that exist with configuration like this.\n. Hmm.. Ok, so if I'm not mistaken, you have test using precompiled assets? Correct me if I'm wrong.\n. Thanks for identifying the issue.. I also noticed that in another issue on guard-teaspoon you're using 0.7.9.  Wondering if this is different in 0.8.  Can you update to what's on master and let me know -- removing the fix you put in?  I would appreciate the help since I'm kinda bogged down in other work.\n. Fair enough. to fix that you need to follow the instructions for updating.. I broke some things on purpose to make it better for the long run. Just run the install generator again and make whatever changes you made.\nrails g teaspoon:install --framework=qunit\n. I think this might be cleaned up / fixed. Let me know if that's not the case.\n. Could be how the instrumentation hooks into sprockets. Or more likely an issue in sprockets-rails directly?\n\nJeremy Jackson\n\nOn Jul 28, 2014, at 5:53 AM, Orion Delwaterman notifications@github.com wrote:\nBrand new install with Rails 4.1, following step-by-step install instructions, get the same issue here.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yup, we identified it a few weeks back, but haven't put in a proper fix for it. I need to experiment a bit to make sure it works nicely for all javascript/css files that could be used.\n. Confirmed this is fixed in master (with some minor tweaks), and will be included in the next release.\n. https://github.com/modeset/teaspoon/issues/443\n. I assume you didn't want me to merge this.. you want to provide some background on this and discuss?\n. 0.8 allows you to specify this configuration.. if that helps.\n. Thanks!\n\nThough, the problem is probably in guard-teaspoon.. I'd rather not merge this because it makes for confusing code -- since we're not using those args, what are they?\nI'd rather get the fix in guard-teaspoon where it calls execute and see if there's maybe a bigger issue.. Do you want to check it out?\n. I think I merged that with options.  Are you using 0.7 or 0.8, and what guard-teaspoon version.\n. Ok, so the proper fix is to merge files: files into options in guard-teaspoon. I thought that I had done that but must've been wrong. Thanks for catching it, and I'll accept a pull request on guard-teaspoon.\nUnless I'm wrong. Thanks again.\n. Sure, I'll try it.\n. Hmm.. so check here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs/runner.js#L85\nSo, I would assume there's something that's making that hit more than once, or something like that?\n. I understand it's frustrating. are you doing anything odd with window.load, or long lived incomplete ajax or image loads? I've not seen this issue come up before.\n. If you track it down to something I can fix, I will fix it. =)  It's a complex issue.\nI do appreciate your effort and ability to communicate what you're experiencing and why.\n. are you preloading your fixtures?  might want to try that.\n. Let me guess, rails 4.1?\n. Coverage is a beast.\nAs far as your question goes, that solution seems reasonable for now, but I'm open to suggestions on how to simplify that and make it a configuration.\nQuestion: when you're running your server normally with teaspoon, can you hit /assets/some_asset.js?instrument=true and tell me if that gets instrumented?\nAs far as I can tell, that should be the case, and if that's the case, then it is being instrumented when run from guard as well which should give you coverage reports, though there's several moving parts in that so maybe something is being lost.\n. Thanks.\n. I think we should be good without this now since this helper has been removed. Thanks for the work, and let me know if any of it is still applicable.\n. it should not, you're correct.\n. fixed.\n. They were both updated, so I assume you can take the versions form 0.7.9 and put them in your own test/javascripts/support path and be ok.  The new suite.framework config will make this easier in the future and is why I switched that up.\n. This arises often, and the only solution has been to not upgrade these libraries.. that's why I added the suite.framework config, and will start to upgrade the versions of the support libraries with versions in the filename. So it's a painpoint that we're aware of, and working to resolve, but you're part of the process where we're trying to resolve it. Sorry.\n. Thanks for all the version info, that's always useful. So, one question.. which version of rails?\nAnd what I assume is happening.. The instrumentation probably isn't loading or working because assets are getting precompiled. For the coverage to work, it must instrument the javascripts that are being tested, and for that to happen, there's a middleware/sprockets hack in the instrumentation part of teaspoon. So, precompiling assets for tests is probably not the best case if you need coverage reports.\n. try:\nRAILS_ENV=test bundle exec teaspoon\n. I'm planning on working on this more, and have a branch I haven't pushed yet. But I had to put my dog down yesterday, and am feeling a little off. When I have more time I will get something working pushed.\n. No updates at this time, sorry.\n. Thanks for the info. Yeah, this is a known problem, but poorly understood. Something changed in how assets work in development with rails 4.1. What I think has changed is that assets from gems aren't treated the same -- I remember commenting on an issue in sprockets about the difference between development and production, and I believe they've fixed it so gem assets aren't available in all environments now. I believe if we put more or less that line in the gem it will work, but I'm unsure how to make it not effect other things.\nFor instance, we can't say we want to compile all .js files, because that would mess up other things. But we also don't want to maintain a list of assets that could be used from the gem -- that also sucks. So... unsure how we can solve it.\n. note how https://github.com/modeset/teaspoon/blob/master/spec/teaspoon_env.rb looks with the require at the top.\nand how https://github.com/modeset/teaspoon/blob/master/spec/dummy/config/boot.rb points to the gemfile in the root path.\nIn general teaspoon is a good example of how to set that up, because that's how it's setup. Feel free to update the wiki if you find that anything has changed.\n. It does not.. there's a pull request I was working on that I haven't finished.\n. You may, but I a pull request to remove it from the available list would be more appreciated. I thought it would be easier than it is to add support, and decided I'd do it more iteratively -- and haven't had the time to finish it.\n. for the record, Jasmine 2 makes it impossible to do a few things, and I'll have to submit pull requests on that project to make it viable with teaspoon.\n. It's painful, but I'll try to get back into it sometime soon.\n. closing this.. we may get to this before a 1.0 release.\n. does it work if you don't specify?\n. So I assume this is a rack-handlers issue.. worth noting.\n. Thanks for the heads up.. qunit specs are still running on our end though, so I'm unsure how to reproduce. closing for now.\n. man, this is old. but since you never closed it I assume you just abandoned it. obviously, per the rails docs, and the error that you likely saw, require_tree needs a relative path.\n. So do your specs continue to run and simply fail?\n. Technically speaking this isn't possible. Javascript can continue execution even in the case of an exception, so it's not possible as far as I'm aware.\n. Given that I'm not a fan of requireJS, I won't be trying to figure this out. However, I'm willing to provide the information needed while someone attempts it.\nFirst things first.. when you have instrumenting enabled, can you get an instrumented file and does calling a method in that file change the coverage information? Removing teaspoon from the equation, I would suggest using istanbul directly for this.\nSecond thing.. I suspect that RequireJS simply doesn't work when instrumented without some work. Instrumenting for coverage reports literally rewrites your js files so they're entirely unreadable. A good way to check this is to run one of your files through istanbul to see the output.. then run that file and see if you have access to the instrumented data. This is what I did when I added coverage.\n. This is sort of in the works, but we have to figure out how best to do it.. check #277 if you want to track that conversation.\n. Thanks.\n. not sure.. it would take a change to the instrumentation.rb and probably need to do something different with coverage.rb -- since that shells out to istanbul.\n. Add to the stylesheets configuration.  Also fixtures can include CSS in a style tag.\n. On purpose. But you can freely add a fixture to the dom.\n. Are you using the built in fixtures?\n. @bradrobertson Check the suite configuration for stylesheets.\n1. create a fixtures.scss and put it in spec/javascripts/stylesheets (should already be an asset path)\n2. suite.stylesheets << 'fixtures.css'\n3. require or import the files you want to include in fixtures.scss\n4. hope styles don't collide and make teaspoon look bad\n@brewster1134 What you're asking makes no sense.. you want to apply styles to a fixture but you don't want it in the DOM? How's that work? Also, I believe the fixture does append itself to the DOM automatically FYI, if it doesn't it's a bug. Note the documentation about the fixture element being #teaspoon-fixtures -- which should be styled off screen so it doesn't impact the tests.. however, there are times when you need to put a fixture into visible area, but it's pretty rare. Just a tip on CSS in general, position: absolute, opacity: 0; pointer-events: none will leave things alone and still apply all other styles properly.\n. @brewster1134 If I wasn't clear enough, styles aren't applied unless an element is in the DOM, which is the browser behavior that makes sense.\n. Thanks @brewster1134!\nThat seems like a good way to use it -- the css fixtures were never fleshed out because it's not super common. It was mostly about providing a place to put them, and how they're used is primarily up to the test harness that you create to handle those sorts of things.\n. Thanks for the info. =) And yeah, I've mostly needed it for transition overrides as well, and in integration (cucumber features) showing elements that need to be \"visible\" to interact with.\n. That's the framework you use, not teaspoon.\n. The exception you're seeing is that \"equal\" isn't defined. tried \"equals\"? if it's not that, I'm unsure.\n. qunit is the bastard child of teaspoon, and there's some work on that to get it better.\n. thanks. I'll update the docs for this.\n. What did you do to get it sorted -- it's useful for others if you provide the info.\nThanks.\n. I don't see why not. Sounds interesting, and would welcome a pull request.\n. awesome!\n. Any news on this?\n. sorry I never got around to this.. I assume you figured out that rails displays the paths in which it was looking for the missing partial below the exception.. you should try the partial without the / and see what that does as well -- it's more reasonable.\n. I'm confused.. there doesn't seem to be any changes.  But yeah, just update it and make sure the tests pass.. it's pretty hard to ensure it doesn't cause problems. As far as the bower thing, sure, I guess, but it's still kinda a joke, and to get them to build into the right place and not have a bunch of unwanted files I don't think it'll be much of an improvement in terms of maintenance.  Generally unhappy with that stuff still.\n. Looks good, and at a glance I'm fine with it and will merge it when there's specs. This is something I must insist on, otherwise I take on a large maintenance risk.\n. Planning on finishing this up?\n. Well, I think it's a good idea, I struggle to merge it. The reason is because it should be up to the test framework (eg. qunit) to make useful messages. The reason this is exclusive to qunit is because it doesn't provide useful messages. Is there a way to accomplish this without changing teaspoon? eg. calling a message helper function that you define in your spec helper?\nThe reason I struggle with this is that it's a feature for only one library, and I don't want to go down that path simply for the sake of maintenance.\n. The recommended solution is a custom expect method that builds the message and then calls the original expect method.\n. To be clear, you're saying that qunit is able to provide more information, not that it in fact does usefully from the start.\nForgive me here, I'm just pseudo coding, but you can tell me what's wrong with this two line fix that goes in your spec helper.\ncoffee\nmy_equal = (actual, expected, message) ->\n  equal(actual, expected, \"Actual: #{actual}\\nExpected: #{expected}\\n#{message)\")\nThis is what I think it should be if you want that support. Do you see why I would be apprehensive about merging something that only works for one framework?\n[edit] I used expect, not equal.. my bad.\n. @chancancode actually, no, I really dislike the lack of nesting, pending, and expressiveness that the spec frameworks have. Take a look at a mocha spec and see what I mean. They convey much more than I can accomplish in a \"test_something\" function name.\n. Also, I use rspec, so the specs read the same between ruby and javascript.. if I used mini_test or test_unit, I might agree with you though.\n. Don't get me wrong, I appreciate your work. It's just hard to merge something that I won't be able to track easily.\n. A few things if this is to be merged then.\n- #inspect should go away. I would prefer that JSON call be inline.\n- we need to call #htmlSafe on the expected and actual -- even if it's in a code, it can still break layout if it includes html, also information can get lost that way.\n- there's an absence of specs for this.\n- this should happen for the console reporter as well.\n- it should be used when the full report is enabled since that mode is the default.\n. JSON.stringify is naive, and will error if it's an instance that's self referential etc. That's partly why I think the test framework, or assertion library should handle that stuff. Displaying a diff is much more useful than actual vs. expected, and to me that should be part of the message, but since qunit doesn't do it nicely, it seems fine to add it.. though, I might suggest as a follow up, that we put it only in the qunit subclasses and not the base class.\n. you're free to try it out and let me know how it works for you.\nthe problem I see with it, and the reason I didn't merge is the JSON stuff.. it seems too brittle and would likely cause additional support issues.\n. So, I see two basic paths for this.. Teaspoon is really intended for unit tests, which involves having a fixture that implements only what's relevant for your specs.\nI'd say you should look into some more BDD style tools like cucumber, or rspec-capybara for full integration tests. I find that they're both useful and provide different levels of confidence.\n. It runs in development to use the cache.  You can set RAILS_ENV in the teaspoon env if you don't want it to run in dev.\n\nJeremy Jackson\n\nOn Jun 7, 2014, at 10:43 PM, Jeremy Apthorp notifications@github.com wrote:\nwith the rack-mini-profiler gem installed, I see this error on the console when I run bundle exec teaspoon:\nStarted GET \"/teaspoon/mini-profiler-resources/includes.js?v=898a13ca6797c6bc1fee313e17d388b0\" for 127.0.0.1 at 2014-06-07 21:38:47 -0700\nProcessing by Teaspoon::SuiteController#hook as JS\n  Parameters: {\"v\"=>\"898a13ca6797c6bc1fee313e17d388b0\", \"suite\"=>\"mini-profiler-resources\", \"hook\"=>\"includes\"}\nCompleted 500 Internal Server Error in 2ms\nSyntaxError: Parse error\nI haven't been able to figure out how to configure rack-mini-profiler not to run when teaspoon tests are being run, but this problem would be solved if teaspoon didn't run tests in the development environment. RAILS_ENV=test bundle exec teaspoon works fine.\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks!\n. I appreciate the work, but I'm sorry, I can't merge this as it is.\n\nI moved away from this structure because it's slow and I wanted to use the built in functionality as much as possible, because it's a pain to maintain the hacks that were there / this pull request adds back.\nI don't use requirejs, so you'll have to help me through this. I personally don't care for requirejs, but that's a different topic.\nAre you loading files async with requirejs? If so, you will need to see if requirejs allows you to modify those urls to include the instrument param.\nIf not, then I assume any sprockets #= require statement should work as expected.\nIn general, the lack of consistency with requirejs and how people are using it has made this really hard, but sadly this commit doesn't fix it.\n. I would like to get something good in, and I'm down with the conversation.  I have just found it to be painful and hackish thus far, but would love a proper and clean solution that I don't have to think about again. =)\n. Awesome, thank you for providing those details. Can someone come up with a plan of implementation and documentation as to avoid this stuff in the future? If there's an implementation aspect we need to include requirejs into the dummy app and have proper specs.\nIt will require someone who has better knowledge of how people use requirejs than I have, since it seems to be very disparate in how it's being used.\n. I don't know for sure if Teaspoon works well with puma.. I don't see why it wouldn't but maybe try thin?\n. Thank you.\n. Interesting.. can you provide some more background?  As in, is there something we can do to help mitigate the confusion?\n. You can add your own \"fixture\" controller, and do whatever you like -- since it's running the rails server next to the teaspoon suite, you can feel free to load whatever you want, wherever it exists, and then request that via ajax -- though you may have to provide your own routes and controller to achieve that.\nI believe the fixtures do allow loading things from a different paths, but if it doesn't, you're free to load things via ajax however you feel appropriate -- teaspoon just provides a consistent and easy to document structure for this, but doesn't have to be used.\n. Use the same version of qunit that you were using? Covered in the readme on how to do this.\n\nJeremy Jackson\n\nOn Jul 11, 2014, at 12:10 PM, Zack Warburg notifications@github.com wrote:\nI could really use some help on this.\n\u2014\nReply to this email directly or view it on GitHub.\n. You can't really.. with sprockets the files can be combined into different files, so the filename is a) not always accurate, b) impossible to get without raising an exception (and even still unreliable with passing that around).\n\nIf you know of a way to accomplish this in javascript I'd be interested in how you can accomplish it.\n. done. v0.8.0\n. you need to run bundle with --full-index.\n. Thanks. Does teaspoon work properly with both versions of Istanbul? You say there's API changes, and if it is broken it'd like to know.\n. I updated the istanbul interface to 0.3, but suspect it won't work nicely with version 0.2.*, so... thoughts?\n. Maybe something to do with load order? Take the head tags from both teaspoon and otherwise and confirm the script tags are the same.\nThen look into whatever framework you're using to make sure it's not clobbering it.\nAn alternate is that phantomjs doesn't support whatever feature you're using and you haven't diagnosed it properly.\n\nJeremy Jackson\n\nOn Jul 28, 2014, at 6:56 AM, eugene-ku notifications@github.com wrote:\nHello! This is a complex bug which: I have a script which setup a global 'store' variable and it's working fine untile FileSaver.js is included, then it became undefined.\nThis is only in teaspoon environment. Any ideas?\n\u2014\nReply to this email directly or view it on GitHub.\n. I said to check the output. There were bugs in rails and I want to make sure that's not it.\n\nDoes it work in the browser when running the tests?\n\nJeremy Jackson\n\nOn Jul 29, 2014, at 4:22 AM, eugene-ku notifications@github.com wrote:\n1) all the scripts are located in application.js.coffee and are loaded from <%= javascript_include_tag *@suite.spec_assets %>, so order is preserved\n2) everything is fine outside teaspoon environment, so framework can be involved but in a very subtle way.\ncan you give some tips for debugging?\n\u2014\nReply to this email directly or view it on GitHub.\n. I was unaware that you could easily map coffeescript source lines to those of javascript.\n\nThis question comes up from time to time, but the honest truth is that it's actually hard to get the javascript exception stack trace reliably, and so I find it hard to believe what you propose is technically possible or feasible.\nWith that being said, we'd happily take a (clean and tested) pull request that has a simple prototype of what you're looking to accomplish.\nSo, for a first pass, I'd be interested in seeing your idea to extract the source code surrounding the file location of a failed spec, and an exception. You can start with the command line reporter, or the browser runner, either is fine.\n. Awesome! No, I haven't had time to look, but I've got a reminder.  Will try to look at it this weekend or next week. Impressive effort from a glance though, so thumbs up.\n\nJeremy Jackson\n\nOn Aug 14, 2014, at 11:55 PM, Mark Burns notifications@github.com wrote:\n@jejacks0n - not sure how github mentions work, so apologies if you've already seen my mention at markburns#1 - anyway, I've proved the feasibility of extracting source code from an exception. I've not done a pull request here, as it's not worthy yet and more of an exploratory proof of concept.\nI've got a couple of questions over there, that I wouldn't mind you taking a look at.\n\u2014\nReply to this email directly or view it on GitHub.\n. RAILS_ENV=test rake teaspoon isn't working for you?\n. You should be able to put it before line 3 in your teaspoon_env.\n\nhttps://github.com/modeset/teaspoon/blob/master/lib/generators/teaspoon/install/templates/jasmine/env_comments.rb#L3\nI suspect that will work, but I'm curious why you want to run them in two different environments? caching and whatnot are totally different, and it causes issues with what you might be expecting. You're welcome to try it, but it's slower because the compilation cache is different.\n. That's fine, did you try the solution I provided? If you read the if above it you would understand, it will not set it if it's being loaded from rails. When you run via the command line rails is not loaded until after teaspoon, if you run it via the engine (in the browser) teaspoon has been loaded after rails.\nYou're free to do whatever you want, run it in test, but you're missing some important aspects of performance. First, if you're viewing things in the browser they're being time-stamp checked and cached until they're changed, so then if you run teaspoon in the command line in the same env you get the benefit of them being already compiled and cached. So regardless of what you might think you will be getting less performance, but I expect you're willing to make that trade based on some other requirement.\n. fair enough.\n. Thank you.\n. Probably best to leave it out. In general I think data should be mocked, and the server shouldn't be accessed from JavaScript specs.\nAt the same time, I know there are reasons to deviate from that, so I want it to be supported, but I don't want it to give people more rope.\n. Which teaspoon_env do you mean? Link to code?\n. Thanks. That's fine, but would you update the docs?\n. I'm unsure on the JSON bit, but since I've never used the hooks, it's kinda up to you, and for others to contribute to.\nAs for tests, yes, coverage stayed the same, but if you don't want me or someone else to break it later you should have a test (at least a unit test). In general terms I try not to break specs, but if it's not tested I'm known to \"clean it up\". :)\n. Looks good. Thanks. Let's just get some unit tests around it so I don't break it later. :)\n. Thanks!\n. Hmmm. Your setup has a lot to do with that. Technically speaking there are two phases on coverage. This may help you track down why, and hopefully you can share what you find.\nFirst, the files have to be instrumented, and this happens with a layer that hooks into sprockets (technically rack, but also sprockets). Because of the nature of how complex sprockets is, and how heavily it caches files, this is hard.\nAfter a file is instrumented, when it's then \"run\", and code is executed the instrumentation code builds up an object with information about methods, ifs, etc.\nThat object is then passed back to the server, and teaspoon routes that though eventually to the resolve_coverage method.\nIf you want to spend some time on it, it would be appreciated. First check that the js files being loaded in the browser are being instrumented.  The easiest way to do that is to console.log a function def as a string. If it looks normal it's not being instrumented (at least I think).\n. Bonus points, figure out why it's not being instrumented. :)\n. Thanks again.\n. Thanks for sorting that out.. that was a really useful contribution. =)\n. since I couldn't easily merge this, and it was a simple change I've made the change and will see where net out. thanks.\n. aggg! how is that happening? I just did a quick check and can reproduce.\nSo, the weird thing, is that I thought it was because of this line having a slash at the beginning, but it's not.\nThen I thought it could be with some bad code around the prepend_fixture_paths, but that's not it either.\nSo, I thought rails would not go looking anywhere other than your view path, or one that you've registered for views, so do you have any idea on why that's able to be rendered??\n. No, that's the behavior of rails apparently.. gaah. wtf?\nI just did the same thing in a different project, and rails renders things outside the view path.\n. I found this, which seems related, but it still seems like a security issue in rails proper, and I don't understand why view paths are even there, if it honestly renders things outside of them regardless.\nhttp://blog.flowdock.com/2014/05/07/how-we-found-a-directory-traversal-vulnerability-in-rails-routes/\n. I'm closing this for now, but will address shortly.\n. Should be fixed, and also, it annoyed me enough that I submitted a PR to rails.\nhttps://github.com/rails/rails/pull/16888\nFeel free to provide your opinions and insight. I realize I was using it wrong, but the default behavior is kinda scary. Seems like it should be the other way around, so we'll see.\n. Use guard-teaspoon.\n. Nice! Will merge if you update the README and the install generators -- specifically the teaspoon_env stuff. Thanks.\n. Yes, almost. =)\nWill you do an interactive rebase to get it into one commit? It's easier to track what changed in regards to that if it's in one commit.\ngit rebase -i HEAD~3\npick the first one, change the other two commits from pick to s (to squash)\nthen adjust the commit message in the second step\ngit push -f origin [branch_name]\nAlso, if you've never done one, it's worth learning. =)\n. Thank you!\n. this should be fixed now.\n. No, that's actually really interesting, so thanks for the heads up.. Hmm.. If there's a way to tell rack-mini-profiler not to do it's thing you could put that in the teaspoon_env.rb, but I didn't see anything in their readme, and assume it's just a \"if loaded do it\" sort of gem.\nThe reason Teaspoon prefers development is because of caching and a few other minor things, but you're welcome to change the env to test. You can set it in the teaspoon_env.rb or with the rake command RAILS_ENV=test rake teaspoon.\nHopefully that gets you down the right path.. I'm tagging this as info though. Thanks.\n. cool.. so, it's a long long story.. but the way assets work in the browser (eg. /teaspoon), and how they work in the test environment can be configured in a vastly different way.\nSo I'll just give you one example of that. In test, assets are configured by default to be combined, so you would get a line number of application.js:4572 instead of the actual.js:24. If that's what you're shooting for that's ok, but it's a struggle to get it to behave in any consistent way with the various asset configuration options that can exist in dev and test environments. Like I said, you can opt into that, and it's not forced, but you will see differences and experience confusion because of it, so it's an opt in, not an opt out.\nThanks for the info though, that's good to know.\n. Absolutely! thanks so much for the info. You want to submit a PR, or have me do it? It might be a week or two before I can get around to it.\n. yeah, I believe that was a PR for a windows fix, but it broke things elsewhere. I think we'll release teaspoon in the next month or so. Sorry about that.\n. I believe I've resolved this.. I am not using shellescape anymore however, just wrap things in quotes.\n. They should be rendered through the standard asset chain, so I'm unsure why it's not working for you. Like, you can render sass from a normal url, right? Teaspoon just adds an additional path to assets, so same rules should apply.\n. Thanks! that's good to know from my end as well.\nIf you want to submit a PR with added version it'd get merged. Specifically documenting it in the install generator templates, and readme.\nI've been slammed on other things, but it's always appreciated when someone is doing checks for version updates.\n. Why did you close it?\n\nJeremy Jackson\n\nOn Feb 4, 2015, at 6:32 AM, Daniel Shannon notifications@github.com wrote:\nClosed #276.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'll give this a try and revert if needed.\n. I removed the stuff you had shifted out of suite, because it was only using the default configuration -- which broke some specs, and seems short sighted.\n. I now understand what the changes were, but don't fully understand the need for them.. can you explain further?\n. If I understand correctly, you need to instrument files that are being loaded via requirejs, and thus the instrument=1 param isn't present. I'll poke around a bit, and understand the desire for it, but absolutely abhor having to do shims in teaspoon to support requirejs -- it's at an entirely different level, and one I happen to disagree with.\n\nIf it can come at a different layer, it would be better. So the ideas I've kicked around, but can't quite resolve are to add an additional configuration -- but even that doesn't work well, and the core reason is that the instrumentation determination has to come at the level when a file is included for load -- with all the context of the configuration used during the test run -- which is not possible when an asset is requested.. though I'll investigate that.\n. Move all specs out of the dummy app, into the engine root/specs.  Are you testing the dummy app, or is the dummy app the means to test your engine? The former should be your answer fwiw, which makes my recommendation make more sense.\n\nJeremy Jackson\n\nOn Nov 3, 2014, at 12:26 PM, Jordan May(Intern2) notifications@github.com wrote:\nFollowing the instructions here: https://github.com/modeset/teaspoon/wiki/Testing-Engine-Assets\nIf I start the rails server in the dummy app, the web interface runs the tests that are outside the dummy directory propertly. If I run 'rake teaspoon' in the dummy directory everything is also good.\nBut if I run 'rake teaspoon' at the root of my engine it says \nTeaspoon::EnvironmentNotFound: Unable to load Teaspoon environment in {spec/teaspoon_env.rb, test/teaspoon_env.rb, teaspoon_env.rb}\nThat file is in dummy/spec. How do I get it to be seen by my engine's rake task?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the heads up! :+1: Just as an aside, teaspoon is tested with teaspoon, and the teaspoon specs aren't in the dummy app -- they're in the engine top level specs. That's the official recommendation, but settings the envs works as well. I guess the reasoning behind putting them at the engine spec level, is because the dummy app is just the stub used to test your engine, and I don't put things like the rspec specs or capybara features in the dummy app either. That same logic seemed to apply to the javascript ones as well.\n. Glad it worked. Feel free to check out the dummy app from teaspoon, it's lightweight, and I think there's a few specific changes that are needed in general?\n\n\nJeremy Jackson\n\nOn Aug 26, 2015, at 8:16 AM, Joel Oliveira notifications@github.com wrote:\n@jejacks0n yeah I would have to agree with that. My first attempt had it situated as such but I couldn't figure out what was going on so I went with the instructions in the wiki until I got it to work. Now that I have a better working knowledge of its internals I'm going to do just that - move the js specs from within the dummy app to the engine specs dir.\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: thanks!\n. https://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n. I'm not opposed to this at all, but I don't know if I follow.\n. The reason I put in selenium was because it's about as broad of support as you could ask for. You can use it with safari, or IE, though I can't imagine the setup for IE is anything easy.\n. Seems reasonable, I've been pretty busy lately. If you would create a wiki page that matches the selenium/phantom ones that'd be awesome. I'd like to capture whatever details there are, and have a place to expand the concept should it need additional information.\n. Test results aren't stored for memory reasons, they're dumped to STDOUT and cleaned up.. I'm not opposed to this idea though, so let me know what you find. Sorry I've been MIA on work stuff.\n. Would accept a PR for integration with sauce labs, but have not needed it thus far. Seems like an interesting challenge though.\n. I'll take a deeper look at this in a bit.. I don't think you caused them either -- dependencies need to be updated, and I intentionally do this.\n. I don't see how that's possible, so the answer is probably not. Just the nature of the translation from coffeescript to javascript.. there's no way to accurately convert it back to coffeescript without heavy instrumentation.\n. would consider a thoughtful PR.\n. Yeah, would merge a PR with an update to the readme. =) Thanks!\n. So I was willing to help, but your last comment indicates that you're probably not open to it being something other than teaspoon. I'll try anyway.\n\nI structure my JavaScript dependencies, and recommend it in general. Eg. The spec file requires the implementation it's going to test, and the implementation requires its dependencies. I don't use one monolithic application.js to build everything. I'm guessing you're doing the later?\nThe reason for this is because I can run a single spec and load a minimum of JavaScript. If you use one monolithic manifest, rails has to re-generate that file even if only one file changed.\n\nJeremy Jackson\n\nOn Jan 19, 2015, at 5:19 PM, Bram Whillock notifications@github.com wrote:\nActually not much better. What are you guys doing? my CPU is absolutely hammered.\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you running it in dev mode? That's why teaspoon runs in dev mode by default -- you're convoluting how rails behaves with teaspoon, which is fair because it's complicated, but it sounds like you're running it in test/prod env.\n. it's being expanded because a line number and file name for an exception is pretty useless in one monolithic file, don't you think? What version of rails are you on, there's a known issue of slowness in sprockets that I submitted a PR for -- and has been fixed as of 3.2.13 or something like that -- http://weblog.rubyonrails.org/2013/2/27/Rails-3-2-13-rc1-has-been-released (search for Jeremy Jackson)\n. I wish I had a good solution for you, but not knowing literally anything about your setup, you're free to add some profiling tools and whatnot -- you'll see that the majority of time is not within teaspoon, but rather, within sprockets/rails.\n. Out of curiosity, how many files are you talking about here? 100+? If you look at a project like https://github.com/jejacks0n/mercury/tree/mercury2 you'll see that there's over 1k specs, and many many lines of code and files -- in coffeescript. This compiles and loads from scratch within 10 seconds on my 2012ish macbook pro, and additional changes to various files results in only those files being compiled, so subsequent loads take closer to 2-3 seconds. The specs run in less time than it takes to load usually. I'm still unsure why your files are being forced to concatenate as you say you're running in dev -- do you have some really strange asset configuration in dev? Like, they're never supposed to concat in dev, so something must be overridden that is making you experience it. Those are my final thoughts, let me know what you find.\n. there's a suppress_log flag, which is to be used in conjunction. -q\n. (I think this works to disable all output except the spec output)\n. fix the other output -- teaspoon can't fix everything. ;-P\n. there is an output file thing in the formatters -- I mean, they can log to a file -- I just don't remember the details!\n. oh, I remember -- this was in rspec I think, so I mimicked that.. it's part of the formatter, so put it in a string -- it splits on the \">\". This is covered in the readme, if you want to be pedantic.\n\nteaspoon -f \"junit>/path/to/output.xml\"\n. ah, I think this is due to asset stuff? related to #197 \n. I believe you can solve this by overriding Teaspoon::Server.url..\nruby\nmodule Teaspoon::Server\n  def url\n    \"http://127.0.0.1:#{port}/namespace\"\n  end\nend\n. They're failing because of updates to dependencies. Thanks for this PR, I'll review and merge when I get some time.\n. Can you provide documentation updates -- and an option to override/provide the option from the command line interface?\n. Poke -- You should be good to get this rebased and the specs should pass. Still just waiting for the configuration option to be fully baked into the project.\n. Have you loaded require.js, and read the documentation for the libraries you're using?\n\nJeremy Jackson\n\nOn Jan 26, 2015, at 7:24 AM, Jeremy Venezia notifications@github.com wrote:\nI'm using teaspoon with qunit to test my ember.js application, which uses i18n.js for internationalization.\nWhen I run tests I get :\nUncaught ReferenceError: require is not defined\nIt is called in this file, line 5.\nAny clue on this?\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. But I see a require call in the library, so I'm unsure how it works without the dependency. Sorry it's not what you want to hear, but it seems to be the problem.\n\n\nJeremy Jackson\n\nOn Jan 26, 2015, at 10:30 AM, Jeremy Venezia notifications@github.com wrote:\nYes, I know what I'm doing, and I searched for similar problems before submitting an issue.\nI don't need require.js since i'm using rails witch uses sprockets to require files.\nI've just realized that Qunit's module may be the problem. So this condition is true, but it should not.\nSo It may be a I18n.js issue, and not teaspoon...\nI'm closing this issue and checking this out...\n\u2014\nReply to this email directly or view it on GitHub.\n. No, I'm not sure -- and it's not been reported that I know of before. would be curious if you can get to the bottom of it and provide an actionable though.\n. Yeah, phantom is sort of lagging behind, and that's a bummer because it's far more efficient. Let me know what you find, I'd be interested.\n. I haven't really seen it before, but I'm tagging the issue as information and closing it for now. Could be an odd setup or bad phantomjs build?\n. looks like teaspoon isn't loaded in your environment. configure is defined on the base Teaspoon module, and if for some reason you're not loading that (you've only loaded teaspoon in your test group for instance) it won't be defined.\n. You're probably right. Do you want to submit a PR?\n\n\nJeremy Jackson\n\nOn Jan 27, 2015, at 6:45 PM, Kareem Amin notifications@github.com wrote:\nIn the default spec_helper.js file if you decide to use Chai and uncomment the following variable assignment:\n// window.assert = chai.assert;\n   window.expect = chai.expect;\n// window.should = chai.should();\nThen the following section which loads all js in the rails app seems to be unreachable i.e. the files that I expect to be loaded that are in application.js are not loaded.\n// You can require your own javascript files here. By default this will include everything in application,      however you\n// may get better load performance if you require the specific files that are being used in the spec that tests them.\n//= require application\nHowever, if I move the require application directive to the top of the file it loads the correct files. Not sure if the preprocessor stops once it sees js code but if I comment the variable assignment for Chai it loads the file as expected.\nI think it's worthwhile to move the loading of other js files to the top along with the require directives for support libraries to avoid this problem.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for helping sort out the confusion!\n. yeah, I think that's probably it.. thanks @coderjonny.\n\nIt's an array because multiple formatters can be used -- to generate artifacts and console output.\n. :-/ hmmmm... I wrote the guard-teaspoon gem as a helper for people to get started, but it seems like it requires more maintenance than the community that uses it can provide. I don't use guard, and so only took an initial stab at it.\nMy guess is that the options that make it through to teaspoon are not correct, or are being overridden by guard -- which I believe is probably the case.\n. I think the guard-teaspoon project is overriding those things, so you may be able to configure it differently on that end.\n. This is not within the concern of teaspoon, as teaspoon supports what the framework supports.\n. actually, I take that back -- it might be possible, and we'd accept a PR with this implemented.\n. Thanks!\n. I can't tell without seeing it, so try and base your boot partial off the one in the gem. Load that, see what's loaded, make a small adjustment, see if it works, etc.. my guess is that you're not telling teaspoon to execute though.\n. Consider preloading your fixtures? That's in the docs, and I think works how you want.\n\nJeremy Jackson\n\nOn Feb 9, 2015, at 7:41 PM, Roger Studner notifications@github.com wrote:\nReally simple.\nI have some .js files that have the canonical $(document).ready(function() { // do some stuff }\nI have a fixture file with a bit O static HTML in it.\nSo, the problem is insanely simple.. the order of loading/running is this:\nmy .js file & its document onready 100% run\n.\n.\n.\n.\n.\nthe fixture gets loaded.\nThus, if my document.ready expects anything to be in the DOM from the fixture file at all -- it isn't there.\nApp works 100% fine outside of tests :)\nWhat the heck :)?\n\u2014\nReply to this email directly or view it on GitHub.\n. Consider using the jQuery(function() {}) style instead of the document ready style as well. Reads nice imo.\n\n\nJeremy Jackson\n\nOn Feb 9, 2015, at 7:41 PM, Roger Studner notifications@github.com wrote:\nReally simple.\nI have some .js files that have the canonical $(document).ready(function() { // do some stuff }\nI have a fixture file with a bit O static HTML in it.\nSo, the problem is insanely simple.. the order of loading/running is this:\nmy .js file & its document onready 100% run\n.\n.\n.\n.\n.\nthe fixture gets loaded.\nThus, if my document.ready expects anything to be in the DOM from the fixture file at all -- it isn't there.\nApp works 100% fine outside of tests :)\nWhat the heck :)?\n\u2014\nReply to this email directly or view it on GitHub.\n. Not sure, loading is entirely up to you. I recommend writing your tests with proper dependency requirements. For instance, your spec helper should only load library code (eg. jQuery/moment/underscore etc.) and then your spec files should require what they use. That way your spec_helper is loaded, then your spec files (or spec file if running a focused spec), then any fixtures, then any implementation files. If you're loading everything from application.js or something similar you may have complications. I prefer the scalpel and load only what's need for a spec to pass, but understand a lot of people use a hammer. I don't have a solution for the hammer approach, which is sort of why I dislike it and don't use it.\n. It looks like you want to load your fixture into the dom before the beforeEach is called, fwiw.. how do you accomplish that? You may be able to accomplish that by injecting it when the file is executed, and not before the test is run -- like, before your test even runs you're already doing a bunch of setup in your application, no?\n\nSo that means your current situation is, javascripts are parsed, application is initialized, test run begins. After which point, your beforeEach is called.\nLooks like you'll need to inject your dom manipulations before the application is initialized. You can experiment with manipulating the dom at the time the spec file is being executed, and not when the specs are being run -- if that makes sense. Try adding something to the dom at the base of the file and not within the beforeEach.\nAnother approach, and one that I'd recommend, is to not initialize your application until you need it. For the most part teaspoon is a unit test framework, but you can use it for more integration level tests if you want -- you just need to know the issues that can arise by doing so.\n. No, teaspoon is very raw, and in fact clones copies of various global variables (things defined on window) to avoid any stubbing messing things up.\nThere is one small place where teaspoon does use $, and so can give you back a jQuery object.\nhttps://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/base/fixture.coffee#L77\nUnsure what else I can do to help without more information. Would love to have angular support added properly, but that was attempted, but was not polished enough for me to continue to support. None of the maintainers have used Angular on a project yet, and so that too makes maintaining it difficult -- without being very knowledgeable in a thing, it's hard to support it at a test level you know? \n. Thanks, but please adjust this to only shift the application require to not be above any dependency loads.. you've put it above the bind-poly in some cases, and it should not be above any other dependency.\n. I believe this is fixed in master, so if anyone wants to give it a shot to see if they can reproduce it that'd be awesome. @jedschneider?\nI'm unsure if it's related, but it may be, and it had to do with file order on linux not being the same as os x.\n. @jedschneider you never checked back in about this. Closing it, but feel free to provide your results. Master now is considerably different, but that problem should've been fixed with the ordering of files.\n. Whoa! That's an excellent solve. If it works how I assume, yeah, it won't bother starting a second instance if something responds and is available at the specified url/port.\n. Seems reasonable. I don't disagree with where you have it, but is it maybe better suited for the CLI area of the documentation? I guess the reason is that if the env is not where it's expected, it can be manually required within the rails pipeline so the browser interface still works, but the env is one of the first things loaded from the CLI, and so that's when the override comes into play.\n. That's true it would. Point taken.\n. Yay! this is totally better, IMHO. I'll merge, and you can confirm that your setup is working on master?\nThanks for this.\n. that should be correct to generate reports.. there was a difference of instanbul arguments (if I recall correctly) and I could not find a way to resolve the versions. You should be running the latest istanbul for the command to work correctly.\n. I never added a version check because there had been a pretty long lived deprecation warning from istanbul directly.. and also, it was hard to check version (I think this too had changed with the versions), and so would've been ugly and painful.\n. I'm guessing that doesn't work on windows. heh. ;-P\nWe should probably indicate the required istanbul version in the readme though, so point taken. If it's working correctly, do you want to provide a follow up PR that specifies the required istanbul version?\nThanks again for your help in resolving this -- I want to support requirejs, but don't use it myself, and that makes supporting a thing much harder than otherwise.\n. Also, want to make sure the wiki is up to date.. Would you do a quick review and add anything that might be wrong/left out?\nhttps://github.com/modeset/teaspoon/wiki/RequireJS-with-Teaspoon\n. let's discuss adding a global ignored_files to the coverage configuration. I think this will allow suite level overrides, but will provide a basic set that will resolve this specific problem.\n. The other way we may experiment with, is setting the current suite into the configuration -- though this gives me pause. If the current suite being rendered is accessible globally, then we can use that configuration directly in the instrumentation layer. This is the less optimal approach, but might provide a simpler mechanism to achieve the desired result in the current architecture.\n. yeah, there is that, but the question has to be asked at the time the files are being linked, as the suite is not known at the time that assets are requested.. does that make sense? usually, when we build out the manifest of files to load, we have the suite config in hand, but at the time the assets are loaded, it's expecting the instrument param to be present or not -- and there's not an easy way to ask that question at the time that the asset is being loaded -- nor does that fit the current flow cleanly.\n. There's 1.10 in there. You can also add whatever support libraries you want.\n. @mikepack I'm going to merge this and start structuring the client code.. do you want me to merge the Jasmine2 stuff first, or is that not ready yet? My next steps will probably create several conflicts with your stuff.\n. Looks like a good start.. can we put this in the coverage specific configuration? Seems like it's pretty much directly tied to that.\n. I appreciate the effort, and will merge it when it's moved into that area of the configuration. =)\n. haha, fair enough. I hadn't thought about that. pfff... thinking on that, but thanks for making the point.\n. @mikepack how do you feel about this conversation? Do you think it's really bad if we set the current_suite at a Teaspoon level from within the controller so the instrumentation can determine what files to instrument or not? We're hobbled by how sprockets hooks work.\n. Because you can specify a coverage config at runtime, or by configuring one within your suite. It gets complicated. @davestevens how about I leave this open for a bit, and when we're working on it for the v1.0 release, we'll try and figure out how to do this nicely, so it just works. Are you cool with that?\n. I'm thinking setting the current_suite is really the only way to accomplish it.. so, I dislike requirejs, have I said that already? haha. ;-P\n. Ok, so I appreciate your effort on this, and sorry I haven't merged it yet.\nThere seems to be a solution that'll work better than this, and you have my apology for leading you down a less optimal path. I'm happy to do this work myself now, but I'll explain it anyway in case you want to give it a shot -- it's not far from this implementation really.\nOk, so instead of putting it at a top level configuration, it should be a coverage configuration option.. essentially just moving no_config from suite to coverage. The reason for this, is that the coverage configuration is known globally, and so after some thought it seems like it should technically belong within the coverage configuration anyway. This change does involve more changes than what's in this PR to make the suite understand these concepts through the coverage configuration.\n. It's not associated to the suite. It's set at the global use_coverage configuration level. That configuration can be specified at run time as well.\n\nJeremy Jackson\n\nOn Mar 5, 2015, at 2:22 AM, Dave Stevens notifications@github.com wrote:\nThats fine, and it does make sense to have this option on the coverage configuration.\nThis is where I had originally put the option, but I ran into the issue of being unaware of which suite was currently being run when Teaspoon:: Instrumentation.add? was executed. What is your idea for this?\n\u2014\nReply to this email directly or view it on GitHub.\n. @mikepack this is what I'm going to tackle next. You should be good to go on the javascript changes you want to make.\n. I haven't thought about it much, but it doesn't need to be as complex as the ruby framework implementation -- because the ruby side determines which javascripts, and thus which framework to load.\n\nThat makes me think we can do a single interface for registering the setup (initializer) and the reporters. If we do that nicely, by specifying a scope or something, teaspoon can figure out which reporter to use given it's core setup (in the current case that's just specifying the reporter=Console param, but we could change that to make more sense -- to scope=console or something), and then load the reporter that was specified for the given scope. To be honest, it might be worth having a discussion about restructuring that so we're not using that param on the client as well but that might not have much value.\nThe implementation is up to you, and those are just my thoughts.\n. We just need to move as much of the messaging to the exception classes themselves (in exceptions.rb). I'm happy to take this on too.\n. Done in fd7d4442d90fb1982f08efe2cc32e96c1ed69fea\n. Are you requiring teaspoon in your gemfile, and if so, in which groups? it needs to be in :development and :test.\n. ah, interesting.. I think I know why, which seems like it's not a new issue.\n. Can you let me know if this is fixed? It's really difficult to have a test for this kind of case.\n. it can't determine the file that a spec exists within.. if you can figure that crucial aspect out it might be doable -- from the command line however, you can specify a specific spec file to run, and as long as you've setup your dependencies correctly (eg. requiring only the files that are needed for a given spec file) you get the best speed and load times.\n. you can't determine that from the spec \"title\" -- the file is unknown at that time, and javascript has no way to reference the file that a given function is defined within -- as far as I'm aware in the browser.\n. I see what you're getting at.. if you're focused to a specific file, it should retain that file and add the grep param. That's a valid point, and would not be too difficult. Would accept a PR with that for sure.\n. so the answer is yes, you can give that a shot manually and it should work as you'd expect. I am unsure why that wasn't something that was added initially, but the concept of the suite page was a bit of an afterthought and so may not have been fully baked at the time.\n. To be honest, I thought I added this concept -- which is why I provide an interface to remove one.\n. interestingly you can do this from the CLI by providing a filter (-g or --filter), and specify a file/files to limit that to.\nshell\nteaspoon -g \"bar\" spec/javascripts/foo_spec.js\n. :+1: This looks good, but I'm going to have many conflicts with this one.\n. You want to hold off with doing this for all frameworks while I finish tidying up #321?\n. Yeah, let's do it, I'll rebase again and then get #321 in shortly there after. Then we should be in a good place to move forwards. I've been spending some time here and there figuring out how best to make specs easier within the framework gems, but I have yet to figure out how to get bundler to install the development dependencies for a gem, and thus, can't quite get it working smoothly.\n. cool, I'm on gitter if you want to chat more real time.. I'm finishing up a few things right now.\n. you can't load javascript with the fixtures.. it doesn't eval it, and so your var won't get processed. either load your js file in your test run like you would load any other javascript, or use a proper json format.\n. you mean here: https://github.com/modeset/teaspoon#example-usage -- where it clearly uses .json and not .js?\n. sorry if it comes across that way, just trying to give you the most concise information. if you have javascript, load it as a dependency of your test. if you have json data, load it via fixtures.\n. either works in your case depending on what you want, but when I say the fixtures don't eval javascript, it should be clear what the intent is. it's to load raw data, not javascript that is parsed.\n. ok, if the documentation isn't clear, I don't know how to help you.\ndata.json\njson\n{\n  'dates': ['2014-04', '2014-05', '2014-06', '2014-07', '2014-08',\n    '2014-08', '2014-10', '2014-11', '2014-12', '2015-01', '2015-02', '2015-03'],\n  'high': {\n    'org': [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2],\n    'all_average': [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2]\n  },\n  'medium': {\n    'org': [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2],\n    'all_average': [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2]\n  },\n  'low': {\n    'org': [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2],\n    'all_average': [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2]\n  }\n}\njavascript\nfixture.load('data.json')\n// within your tests you will have fixture.json[0] -- which is that variable.\nas you can see, your js is not valid json -- double quotes are required for string variables. http://json.org/\n. Answered on stack overflow. Something like cucumber or capybara+rspec works better for these sorts of things.\n. so, secretly, you can do this by making an ajax request to your endpoint and inserting that into the fixture element, but this is not advisable.\n. Yup, no worries.. teaspoon is primarily for unit testing javascript -- with some integration level things by the nature of what javascript usually does and how that intersects with what we typically consider integration tests. It's advisable to do unit tests for javascript, in a scenario that you can run against various browsers potentially (using selenium-webdriver you can accomplish this).\nAnyway, javascript unit specs are blazingly fast in comparison to capybara/cucumber/etc and allow you to cover more cases without having to have a unique integration feature for each one, and is just another layer for you to utilize for good coverage and good speed.\n. Fixtures or hooks? Thanks for the detailed info.\n. I'm a little unsure what you're asking. The test you're looking at in teaspoon is a capybara test, and is just testing teaspoon usage and has nothing to do with what you may be trying to do.\nIf I were to take a stab at what you're trying to do, you're calling a method in javascript that in turn calls alert -- what you probably want to do is to to stub (spy, whatever) window.alert -- then assert that the value of the alert is what you expect to see -- or don't that's up to you.\nTeaspoon has nothing to do with capybara, which is what that thoughtbot article is about, and runs strictly in the browser.\nMaybe a better example of spying on window.alert can be found here? https://github.com/jejacks0n/mercury/blob/1cc637b0bccea19085f824d2881c6513ed5ee8ae/spec/javascripts/mercury/mercury_spec.js.coffee#L35\n. hey @thejamespinto! thanks, this is nice.\nI can't really merge this cleanly right now, but I'll revisit it when I get a chance, does that work for you? I will probably take an approach that doesn't include the various gemspecs as well -- I've found it confuses some people, especially if they inadvertently make it into the gem package.\n. I'll leave this open for the time being until I can revisit it.\n. That\u2019s fair. I think the way I\u2019ve seen it before that I liked was setting a RAILS_VERSION env that is used in the Gemfile (with a fallback). Then you can set a matrix of those versions pretty much the same way you have in the .travis.yml.\nThe problem I see with teaspoon is that it\u2019s been generally painful because of sprockets updates, not rails updates \u2014 but not isolated to sprockets entirely, but yes, I agree that testing it on multiple versions of rails is critical. Additionally, it\u2019s not going to be so much a part of teaspoon proper, but rather something that each of the frameworks will focus on, since those are the \u201cend to end\u201d implementations of jasmine, mocha, etc.\nI very much appreciate your work, it was just bad timing on when it went in \u2014 and we\u2019ll try and address this and get the concept in where it fits as soon as we\u2019re done with the 1.0.0 push. Thanks again!\n\nJeremy Jackson\n\nOn Apr 4, 2015, at 9:22 PM, James Pinto notifications@github.com wrote:\n@jejacks0n https://github.com/jejacks0n hey, well, having separate files seems like the most logical and organized thing for me, whereas having a crazy conditional dependency structure seems like hell\nYes, the approach works for me, I wouldn't have created a bad PR on purpose.\nHowever, there was one single spec that failed, so I assumed you would know how to fix it.\nI loved this gem, just do me a favor and make it run on various Rails versions so people will always be able to adopt it and update it \n\u2014\nReply to this email directly or view it on GitHub https://github.com/modeset/teaspoon/pull/335#issuecomment-89710465.\n. Thanks for the kind words.\n\nThe exception should show up in your console if you're running teaspoon in the browser -- you have to check for these, and I don't have a better solution for this because a parse error comes long before teaspoon can do much -- as far as I understand parse errors to be handled.\nAdditionally, if you were to run it from the command line it should display an error there, though I know that there's maybe a conflict with the better_errors gem. Hope that helps, and let me know what you end up finding -- this has been a pretty consistent issue, but based on how browsers work, and how better_errors tries to take everything over at the rack level I don't have a good solution for the potential issues that can be present.\n. This isn't quite the same @mikepack -- I think what's being described here is this is an exception at parse time, which halts all further javascript execution, and so Teaspoon can't do anything at that point really, other than try to override window.onerror, but that seems like an area we probably want to avoid.\n. What you're thinking about @mikepack is the ability to toggle the try/catch button so exceptions provide a more useful stack trace, and one where execution can be halted for debugging purposes -- instead of masking them behind a try/catch that may only provide you vague insight into what might be happening to cause the error.\n. That's what it does. It exits with a non zero exit code, which is the standard, and so may cause rake to not execute the next task. That's pretty much how every example of a test runner seems to work.\n\nJeremy Jackson\n\nOn Apr 1, 2015, at 9:50 AM, andyl notifications@github.com wrote:\nIs there a way to make Teaspoon stop execution immediately after a failing example?\nI am using the option fail_fast = true, but that seems to prevent the execution of follow-on test suites. I'd like to be able to stop execution immediately after a single failing example. Is this possible?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmm.. Guard. I don't know if that's supported in guard, you didn't specify that. =)\n. That's interesting. You seem to know plenty of ruby, so would do you want to take a look and see if you can submit a proposed functional change or write a spec that exhibits the improper behavior? That'd be nice if you can help point me in the right direction -- minus guard.\n. Let's just pull this out and put it in a configuration -- then you can add a wiki article about it if you'd like. I'll include es6 in the default value too. I'll merge this and then refactor to configuration.\n\nThanks!\n. :+1: The only thing I'm so-so on is the class << self -- reason being it's more difficult in terms of readability to someone not super experienced in ruby. Up to you on if you want to change it though.\nNice work!\n. @mikepack I honestly don't mind it, that was just feedback.\n. haha\n. Fair enough. Somewhat related, we should move away from active_support as we go too. Feel free to do that in other PRs.\n. There's no tests for this, because it's kinda hard to craft a specific setup for this, but in master you can't run teaspoon via teaspoon anymore, and so we can use that as a testbed.\n. I'm not opposed to this, but let me screw around with it to see how easy it would be to take rails out as a dependency for a bit. It kinda plays into supporting middleman, and potentially providing a simple rack middleware layer that teaspoon uses if rails isn't present -- though that sounds particularly unpleasant. heh.\n. did jasmine 2.2.0 ship with 0.8, or 0.9?\n. @sp1117, then I don't think you're using jasmine 2.2.0 -- which is probably the problem. Probably want to stick to the version you were using before.\n. 1. what version of phantomjs are you running?\n2. have you considered locating and fixing memory leaks within your application?\n3. is it always the same spec, or does it happen at different times?\n4. have you reported the issue as phantomjs asks in the crash output?\nAn alternative to 2 is to fork the repo and implement what you're looking for. This is definitely outside the scope of teaspoon, and I've not heard of the issue before, but it seems reasonable to assume that it's a memory leak and phantom failing. The amount of time that we have as a team to dedicate to a memory leak problem in your application is minimal, though if you can track it down to something in teaspoon we'd definitely take a look!\n. Ah, gotcha, I must've misunderstood the request.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs_driver.rb#L33\nI'd probably try adding some rescue statements there, and add some recursion. That would at least fire up phantomjs again -- all speculation of course.\nThat might keep things contained within one \"run\", but the problem is really that it doesn't know where you left off, since the \"browser\" crashed. You'd probably have to add some way to track the last spec run, and then somehow add the concept of \"run everything after this spec\" to each of the frameworks (e.g. jasmine, mocha, qunit -- or just the one that you're using). Hope that helps.\n. No worries, sorry it doesn't really handle what you're looking for. Hopefully it's easy for you to sort out -- these things can be a bear.\n. In thinking through my theoretical solution, it won't really work.. when you load the \"browser\" up again, all your coverage information would be gone. There's really no way to keep that between runs -- it's a large amount of data, and so teaspoon doesn't report it until the end of the run. It would have to be sent along with each spec, and then stored on the ruby level and then somehow merged together when restarting the \"browser\" and getting more of them.\n. My guess is that it's not in the precompile list?\n. That's fixed in latest.\n\nJeremy Jackson\n\nOn Feb 12, 2016, at 7:24 AM, Steve Richert notifications@github.com wrote:\nI'm having a similar problem and it seems to be due to the \"sprockets\" gem version. Locally, everything works with sprockets 2.12.4 but the build server has 3.5.2 installed. For me this can happen because Gemfile.lock is not checked in since I'm developing a gem so the build server fetches the latest version of sprockets that will satisfy the requirement.\nI've confirmed that in my scenario, the jump from 2.12.4 (the last 2.x version) to 3.0.0 (the first 3.0 version) is enough to trigger the error.\n\u2014\nReply to this email directly or view it on GitHub.\n. Release of teaspoon perhaps? The repo you opened this issue on... :)\n\n\nJeremy Jackson\n\nOn Feb 12, 2016, at 9:14 AM, Steve Richert notifications@github.com wrote:\nLatest what?\n\u2014\nReply to this email directly or view it on GitHub.\n. If I were to have to take a guess, it seems like there's nothing resetting the internal references to elements that PortalAppliances has.\n\nBasically, I see an init call, which I'd guess is finding an element and initializing some things with that element, but I don't see anyplace where that element reference is unset, and so without seeing more of your code, are you certain that you're not keeping an internal reference when you don't intend to?\n. FWIW, I'm like 95% certain that the fixture is in fact being cleared out, and so suggest you move past that as the likely issue you're seeing and investigate further about the internal references that might exist in your implementation logic.\n. I don't see you removing any bindings from anything. does knockout keep an internal reference? so while you say that's all of your code, there's obviously a lot happening in ko that's probably important for you to be aware of.\n. phantomjs is an implementation of a browser without the UI layer.. part of teaspoon starts this server and then browses to the determined url -- then another part of teaspoon runs within this browser instance. For more clarification you could use something like selenium-webdriver and watch teaspoon run in a browser that's visible. Also, browsing to /teaspoon in your development server exposes what the first part of teaspoon is loading in phantomjs.\nYou're not taking my advice very well though, which is to say that it's not a fixture problem, it's a cleanup problem. Something is not being released within your application (and to be clear, your application is not just the code that you've written, but is comprised of all of your application dependencies), because how would it? There's no cleanup code that I've seen. A simple way to test my assertion is to try calling PortalAppliances.init() several times within your applications setup script (or wherever this is happening) -- do you not get the same behavior you're seeing in the tests?\nIf you get the same behavior, then I am correct, if you do not get the same behavior then I might spend more time trying to see what might be broken in regards to the fixtures.\n. Yup, that's basically it.. so teaspoon does have a view that becomes the \"DOM\" at the time of browser load -- and the fixture element (where fixtures are loaded into) is part of that. So when you load a fixture, it gets put into the larger dom and does not replace the existing dom.\nSo basically yes, the root dom doesn't change, so scoping that init to the element that is created, and then removed would fix it. Perfect.\n. try it with something like selenium webdriver (covered in the wiki). I'd guess that your version of phantomjs might not support something that you're trying to handle -- a polyfill will usually fix this.\n. Redundant curly braces around a hash parameter.\nLooks good aside from that.\nWe should also consider adding a notice in the deprecation saying that no_coverage no longer works, with instructions on how to get the same behavior.\n. Basically what @mikepack says. Development dependencies are not installed and known about via bundler -- and there isn't a way to tell bundler to include them. This is easy to confirm by looking at your Gemfile.lock file and noting that teaspoon-mocha will not be listed -- then shift your gemspec to include it as a add_dependency instead of add_development_dependency -- it will be listed.\nThe way most people resolve this sort of thing is to put it in your Gemfile under a :development group as well as the gemspec, though I personally don't bother putting it in the gemspec at that point.\nThere's a wiki about testing engines -- @mikepack is this still accurate? https://github.com/modeset/teaspoon/wiki/Testing-Engine-Assets\n. I'm not sure what the best approach here is, but I've used this setup before and it provides some useful tooling that is otherwise still kind of a shit show with grunt and friends. Coffeescript, sass, slim (or haml etc.), and rake tasks to build javascripts etc. This takes me about 2 minutes to setup, and I kinda wrote teaspoon to allow for these simplistic setups that I personally enjoy.\nI'm wondering if we just continue on if unable to find the standard rails environment, and let it fail over if rails is still undefined after locating/loading the teaspoon env?\n. For the record, I view this a little bit like a more familiar middleman development pipeline.\n. I'm using 0.9 in the interim -- I couldn't find a simple/good fix.\n. @mikepack ping.\n. They are displayed as yellow when the full report is viewed, but the count is unaffected.\n. Worth noting, the pending state is propagated upwards (the same way failures are), but that's not desired and may be related.\n\nThe desired appearance would match the screenshot in the readme. \n. Hmm.. so, there is the ability to run teaspoon against an already running server -- it's not the solution potentially, but gets you a working version in the interim... start the server on whatever port you want, and you can then specify the already running server port in the CLI arguments. You may also want to look at configuring/setting your server (aka server type -- thin, mongrel, etc.) via the CLI or configuration:\nhttps://github.com/modeset/teaspoon/wiki/Teaspoon-Configuration#console-runner-specific\nI'd guess you must've set it to unicorn in your configuration? I'm unsure what you're getting by doing that, and so letting it run with something like thin (or even Rack::Server) would probably fix your problem. Any reason you need it to run with unicorn, or is it just improperly configured?\n. oh, didn't read the issue fully. heh, sorry about that. Yeah, rack doesn't know about unicorn, cause that's not how unicorn and rack interact because of the nature of unicorn. I'd say don't set your configuration to something that doesn't work. ;-P\n. Looks good, but let me think on it. Here's my train of thought thus far... Initially I thought it's too white, and I don't like the large margins unless they do something nice at lower resolutions.\nI often run teaspoon with the dev tab to the right, and the margins just eat into space that's useful. But on the other hand, it kinda grows on me, so I can't decide just yet. I'm unsure what the [?] is at the bottom as well -- can you explain?\n. Oh, I'd also need to see the alternate views (only failures), and results for pending and failures when the full report is generated. \n. Yeah, the code to accomplish what I wanted in css was uglier than the canvas approach (a simpler design would fix that, but not as is). If you want to design it, and provide the things outlined, I'm happy to consider and potentially implement it with potential adjustments.\n. I think we can just swap out that href with a base64 encoded url.. though, favicons are cached heavily, but that's where we can start. Do you want me to look at it, or is it something that interests you?\n. I'll actually look into this tomorrow.\n. I clearly never looked into this, so I'm going to sweep this failure under the rug. ;-P\n. What I usually do is setup a different suite that inherits from the default (let's call that one CI). Then the standard CLI behaves like the browser so there's no surprises there, and if you specify the suite as CI via the command line you get the reporting as desired. There's plans to make this easier to accomplish via the rake task interface, but until that happens this is the best solution.\nThat's my official recommendation. FWIW, I don't think your idea is flawed or anything, I just want to avoid confusion where possible.\n. it looks like teaspoon isn't being required -- like by bundle exec, or binstubs -- highly depends on your setup though.\n. We try to support up to two versions ago -- deprecation warnings etc. We went through version 8, 9, and we're currently at 1.0.x. I would hound the maintainers of the Rails-Angular to update it and resolve what you need.\nAs a guess, try pulling teaspoon out of the test/dev group.\n. :+1: Thanks Elliot. =) Ignore the failing specs, istanbul changed something in their output.\n. fwiw, I wish mocha had this capability too.\n. It's removed when inserted into the DOM/converted to elements via jquery. It's not really a fixture thing, it's a valid HTML thing.\nI'll think on a way to circumvent that.\n\nJeremy Jackson\n303-507-6846\n\nOn Jun 26, 2015, at 2:52 PM, Brett G. Giles notifications@github.com wrote:\nI often return HTML partials, such as a table row, in ajax interactions.\nGiven a fixture named 'whatever.html' that looks like:\n\nSome thing\n\nThen, when calling loadFixture('whatever.html') the tr and tds are stripped, leaving only Some thing.\nIs it possible to return the verbatim html?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmmm.. I'll have to think about this, but thanks for raising the issue and looking at a fix.\n. Can you rebase master to make sure it's passing? A change to istanbul output broke a few specs.\n. I'm cool with that.\n. It'll take a new release to pick that up, and I'm not sure we're ready for that just yet, but with the next release.\n. That's because fixtures are served by the teaspoon engine. You'd have to prefix your path helpers with your app \"mainapp\" or something? I don't recall. What you're doing isn't wrong, but it starts to fall into integration tests maybe? Where something like capybara-rspec or cucumber serves you better. Can you explain why you need real links in your fixtures?\n\n\nJeremy Jackson\n\nOn Jul 7, 2015, at 7:17 AM, hlascelles notifications@github.com wrote:\nWe are using link_to tags in our pages, which work fine in development and deployed.\nBut running teaspoon tests we're getting undefined local variable or method for them.\nChanging them back to an explicit <a href works fine.\nCan I confirm they are supposed to work before I dig deep in the teaspoon code?\n\u2014\nReply to this email directly or view it on GitHub.\n. I think jquery is available to our repo through jquery-rails, fwiw. So I think a spec is possible.\n. Code looks good. I'm a bit skeptical that it's a good change though. Like, can I now make an invalid fixture, get a passing spec, and get different results in the real world if I used .insert or .html?\n\nThis was my struggle with the issue. I guess we'll find out. :)\n. If make sure your paths are correct in the confit. You can generate the qunit setup using the generator, which is confirmed as working.\n\nJeremy Jackson\n\nOn Jul 13, 2015, at 7:18 PM, klenwell notifications@github.com wrote:\nFollowing instructions in README and wiki. Tests run in browser with qunit as expected.\nWhen I set up teaspoon with jasmine and run tests from the command line, they run ok. I see the following output:\n$ xvfb-run bundle exec rake teaspoon DRIVER=capybara_webkit suite=default\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:34088/teaspoon/default\n..\nFinished in 0.00800 seconds\n2 examples, 0 failures\n$\nBut when I run the tests from the command line with qunit, I get nothing:\n$ xvfb-run bundle exec rake teaspoon DRIVER=capybara_webkit suite=default\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:47364/teaspoon/default\n$\nNote: I set up qunit and jasmine in separate branches. In my qunit branch, my test file is located at test/javascripts/spike_test.js.\nHave I missed something?\n\u2014\nReply to this email directly or view it on GitHub.\n. Check the project specs then? We can run them from an empty rails app, so you should be able to as well.\n\n\nJeremy Jackson\n\nOn Jul 13, 2015, at 7:39 PM, klenwell notifications@github.com wrote:\n@jejacks0n Yes, I generated the setup for both qunit and jasmine with the generator.\nIf make sure your paths are correct in the confit.\nDo you mean that I should double check my paths in the teaspoon_env.rb file? I used the defaults, which look sane.\n\u2014\nReply to this email directly or view it on GitHub.\n. Term = repo -- sorry, on mobile.\n\n\nJeremy Jackson\n\nOn Jul 13, 2015, at 9:11 PM, klenwell notifications@github.com wrote:\nI'd expect the project specs to be consistent between the qunit and jasmine branches I set up. So I don't think that would explain the issue. Unless I'm misunderstanding what is mean by term project specs.\nIn any event, I'm ready to accept that it's something peculiar to my current project setup. I just wanted to raise the issue here in case there was something obvious that I had missed and as a record in the event somebody else experience the same issue.\n\u2014\nReply to this email directly or view it on GitHub.\n. @plongyear, thanks for this.\n\n@mikepack, we could move that regex to an undocumented, or lightly documented configuration? It feels dirty to me, but I don't see another way around it. Thoughts, ideas?\n. I think a single regex is fine, but is up to whoever gets around to it, which will probably be you. It just is a bummer because we have to resolve files to sprockets urls.\n. @mikepack addressed this, so it's now possible via #418. Thanks for the insight and help figuring out what we could to resolve it!\n. :+1:\n. Yeah, my oversight -- haven't had that sort of setup before, but seems reasonable.\n. I'm not convinced this is a teaspoon thing, and think it's a jasmine thing. Test it out with raw jasmine to be sure. But based on how teaspoon is written, it outputs what is reported to the reporter in general terms, so if it's not being reported, it's probably because the reporter (aka this is primarily teaspoons job) is not being told.\nI agree it's not ideal. Would be curious how mocha handles this.\n. Check your test env, it's probably oddly configured. Only thing that makes sense.\n\nJeremy Jackson\n\nOn Aug 7, 2015, at 7:55 AM, Agis Anastasopoulos notifications@github.com wrote:\nJust tried running teaspoon without the RAILS_ENV=test part and it works!\nAre we supposed to run this command on development or test environment? Note that this was running with RAILS_ENV=test up until 1.7.x and on our CI server.\n\u2014\nReply to this email directly or view it on GitHub.\n. Do you have any integration tests? Like cucumber or capybara? Those wouldn't work either, because your asset host does not exist. How is that a correct configuration? Locally, and via the browser it should run using the dev env because you get the shared asset cache. On CI, it should be test. To be honest, I don't see how it ever worked.\n\n\nJeremy Jackson\n\nOn Aug 7, 2015, at 7:59 AM, Agis Anastasopoulos notifications@github.com wrote:\nYep, just found out that we're doing this in config/environments/test.rb:\nconfig.action_controller.asset_host = \"http://assets.test.host\"\nWhich is not wrong in terms of the Rails app but it breaks up with teaspoon. However, the question is: what is the standard way to run the command (supposing this is about a CI server)? With RAILS_ENV='test' or without it?\n\u2014\nReply to this email directly or view it on GitHub.\n. I'd say you can put them in any place that you are serving assets from -- remembering that you can add any paths to your assets path, including those that are within specs (obviously not in prod environments though). Typically you would need to load those files differently than a fixture would load (as in, it doesn't make sense to put them in the DOM or try to parse them, so go ahead and implement what you need in your project. I'd say a simple ajax request should give you a binary file, or in the case of images, putting the url to it as the source of an image tag that's in a fixture. In general though, that's all that makes sense, and adopting more code for a semi-rare use case probably wouldn't be useful.\n\nSo, to summarize, if you want it as a \"fixture\", put an image or anchor tag with a reference to the file you want to load as a src, or href attribute, and then load them within your test, however you think you should.\nThe one outlier to this is the file input, but since you're within the confines of javascript, you can't do anything here anyway.\n. I don't know if I'm a fan of the spec helper being instrumented by default. Can you give me some examples of the code in it that you want to make sure are covered? I've never put enough code in there that had logic that I could change without breaking specs.\n\nJeremy Jackson\n\nOn Aug 18, 2015, at 12:17 AM, Andr\u00e9s Bravo notifications@github.com wrote:\nFinally it was related to default coverage ignore regex that includes %r{(+.)_helper.} ignoring the spec_helper file.\nJust created a PR solving this :)\n\u2014\nReply to this email directly or view it on GitHub.\n. But see, that's just a lazy way of managing dependencies and one that impacts performance when focus running individual spec files. We figured out what you were after and you have a solution to it that you can configure. Can we just add a note to the readme or the wiki, along with your results in the open issue for others to learn from? This PR  forces people who manage dependency trees (requiring their implementation files in their spec files) to have to always add the spec helper to their ignore list. Maybe there's a change to the config to make removing them easier, but I don't think this is the one to merge.\n\n\nJeremy Jackson\n\nOn Aug 18, 2015, at 3:03 AM, Andr\u00e9s Bravo notifications@github.com wrote:\n@jejacks0n\nWell the default spec_helper stands for:\nYou can require your own javascript files here. By default this will include everything in application, however you\nmay get better load performance if you require the specific files that are being used in the spec that tests them.\n= require application\nSo by default all my application code is loaded there, that's why I want it to be instrumented.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm not promoting requirejs, I'm promoting having an implementation file, and a spec file that requires that using #= require implementation.coffee. The spec helper should be used for dependencies and only dependencies -- though the generator includes the #= require application as a default to help people get started with testing.\n\nI believe the default does work with coverage -- you have a modified version (maybe with config.expand_assets=false?, and if you restored it, I'm pretty sure it would work. If this is not the case please let me know.\n. It's Istanbul, and the fact that it's not cached. I saw your other comment about using the test env, which doesn't use the development cache. So in dev, files that haven't changed are cached, and that makes requiring those files super fast. It even makes instrumenting them faster. That's point 1, point 2 is that instrumenting takes your files and wraps a ton of addition JavaScript around it so call counts etc. ca be tracked. That's not a super fast process, but the way that's written in teaspoon, it should also (I think) be cached for the next test run. Usually I only generate coverage reports on ci.\nAdditionally, make sure your dependency files (eg jQuery etc.) are excluded from within your instrumentation/no coverage rules.\n. worth looking into -- not sure why coffee_script would be needed -- I think it's specifically optional?\n. Sounds like maybe we missed a file in precompilation. Knowing that we can figure it out and get a new release.\n\nOn Feb 29, 2016, at 6:20 AM, Iain Beeston notifications@github.com wrote:\nShould the published version of teaspoon have a dependency on coffee script? Couldn't those files be precompiled in the published version of the gem?\n\u2014\nReply to this email directly or view it on GitHub.\n. It was, and thanks. :)\n\n\nJeremy Jackson\n\nOn Feb 29, 2016, at 9:28 AM, Iain Beeston notifications@github.com wrote:\n@jejacks0n By my own debugging that might be app/assets/javascripts/teaspoon/error.coffee (in case that wasn't clear in all the messages above)\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you confirm that the breakage isn't from your addition? It doesn't appear to be directly tied, but would appreciate your time.\n. Thanks!\n. There's not an easy way, no. Sorry.\n\n\nJeremy Jackson\n\nOn Sep 20, 2015, at 11:40 AM, Qiang Han notifications@github.com wrote:\nIs there a way to disable default suite since I only use named suites? AFAK the default suite exists so that named suites can inherit from it.\nOr maybe I should restructure my tests?\n\u2014\nReply to this email directly or view it on GitHub.\n. Does it have to do with the fail fast configuration? Is there more than one suite?\n\nWithout more info, I can't be of much help, but it hasn't been reported before. Would be happy if you wanted to dive in and see if you can figure it out and provide some resolution.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/formatter/junit.rb\n. Any updates?\n. I wonder if google maps doesn't load via phantomjs for some reason... I don't have a quick solve for you, but I'd double check that you're using your correct access tokens? Are they even needed for those apis?\nA good thing to check, would be to switch the driver to selenium -- this is pretty easy, and there's a wiki article for it. That would be my first check. If it works, I assume it must be something to do with phantomjs, or that google maps won't load when requested from phantom.  If I recall, we may set the client string to something for teaspoon.\n. Yup, read up on istanbul, and teaspoon configuration (specifically coverage). You can generate html output that you can browse to see what is covered and what isn't covered. If you're not improving on what lines are being executed, it doesn't matter how many specs you add. I use the html output almost exclusively during development, because that's what actually matters if you want to improve it.\n. That's useful to know.. does the normal focus behavior of Teaspoon work correctly? The funny thing is, I didn't know this was a thing until just now, but it seems like support should be added for it.\n. I think it has to be within the asset path -- there should be an exception if the file fails to load (90% sure on this).\n\nJeremy Jackson\n\nOn Oct 3, 2015, at 9:22 AM, Mike Pack notifications@github.com wrote:\nRequiring files from a spec follows the same rules as requiring files from implementation. They both use the asset pipeline.\nI noticed your file has a .erb extension. Is it in app/assets/javascripts or somewhere in you config.assets.paths?\nSince the test actually runs, it looks like the asset pipeline is functioning and you have something wrong within your code. You're calling new userValidate without parenthesis. Do you mean to say new userValidate()?\n\u2014\nReply to this email directly or view it on GitHub.\n. :) I enjoy seeing people solve their issues, no worries.\n\n\nJeremy Jackson\n\nOn Oct 2, 2015, at 8:31 PM, Michael Toppa notifications@github.com wrote:\nAnd I resolved it by reworking the app structure a bit so all the class names are unique. Now my test suite is running fine. I am my own rubber duck.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good to me. Side note about documenting in the wiki so it's captured there.\n. happy to get a PR.\n. Thanks! :+1:\n. This was technically to support some of the micro libraries that use $, but it's worth merging to see if it impacts anybody. Cheers!\n. Nah, I think this is good. :+1:\n. That is faster. Haha.\n. Ah, so you can switch to the non-static files if you want (in your config), but it requires coffeescript and takes a bit longer to process.\n. We get these issues from time to time. It's because the order of how JavaScript is loaded and parsed. If there's a parse error, it's long before any JavaScript has the opportunity to do anything, and regardless, there's not a JavaScript exception raised or anything.\n\nWe could punt on execution of the specs (maybe), but a parse error is not indicative of if your javascript execute in the real world or not. So in stead you get the message.\n. I'm willing to entertain it. Feel free to submit a pr.\n. Hmm.. I think this has shown up before, but I don't fully understand it, can't remember the resolution, and don't use CircleCI often.\nWhat I would assume is that the teaspoon assets aren't available in whatever environment circleCI is running the specs within.. locally try running RAILS_ENV=test rake teaspoon, and see if you get the same results, we can work from there.\n. It's kinda rough to debug from this angle since the output is just kinda missing, because Teaspoon can't do much unless it's loading the javascript. haha.\nI think it must have to do with the assets not being loadable in that environment, but don't understand why they wouldn't be. There's also a lot of causes for this -- a quick search in the issues results in some pretty hefty issue threads, and it seems to usually be related to rails not understanding that the teaspoon assets should be precompiled/available.\n. It would be great to get a resolution from CircleCI. I'd love to have easy out of the box support for it if there's something that we can adjust.\n. If this isn't working it should probably be -- if for nothing other than parity. If there's any time available we'll look into it.. thanks for the heads up.\n. Please try that branch and report back. I have only tested it on the latest capybara-webkit (1.10.1 as of writing) and it appears to work -- no idea about previous versions.\ngem \"teaspoon-[framework]\", github: \"modeset/teaspoon\", branch: \"capybara-webkit-fixes\"\n. Thanks @starsirius, that's likely because of the capybara-webkit version (I think).. can you make sure you're using 1.10.1 for me as a follow up? That layer changed a lot between versions of capybara-webkit, and so I expected some hassles there. Please provide the version you're using, and what the results are with 1.10.1 if you have the time.\n. The timing of them is a bit odd as well. So I don't fully understand why capybara-webkit has it setup the way they do, but I'm using it as best as seems possible at that layer and it 1. doesn't behave as expected, 2. seems to be an area of heavy flux and probably isn't worth trying to maintain compatibility (at least for me -- keeping up with sprockets breakage is hard enough).\nSo I'll close the issue without complete resolution, but will leave the branch so someone else can potentially dive into it further and see if they can make more sense of how capybara-webkit wants a library like teaspoon to handle that.\n. Decided I'd check with the capybara-webkit team before closing it entirely.\n. figure you determined it was because you didn't change your version of jasmine?\n. if they're part of sprockets, they get transpiled.\n. Ah, sorry. You can read about it in the Teaspoon configuration, specifically the matcher configuration directive.\n. I'm unsure why your spec would be a .jsx, but have at it. =)\n. Sounds cool. I haven't had the opportunity to get into React yet. Hope you're sorted now though. =)\n. Yeah man, feel free to create a wiki article for it -- would be super valuable to others I'm sure.\n. I understand the desire, but it seems unlikely that your application would be able to load that data via a similar method. Can you provide me with some reasoning for why, and how you would use that information returned from the server -- and a hook implementation that would not give you reliable and known values?\n. Yeah, pretty much what @mikepack said. We discussed it, and I knew the PR to introduce hooks was something of a smell, but there were some compelling reasons for it, and at the time I was unsure the direction Teaspoon might take. Over time, what I've determined is that hooks are a last resort sort of thing -- and providing other tooling has proved more useful. The customizable boot partial for instance was another way to provide similar functionality where the server IS actually useful, like with loading initial configuration or state.\n. Well, it's not a Teaspoon limitation, it's a limitation of jasmine, mocha, and qunit.. And the inevitable breakdown of JavaScript limitations imposed by the browser. It also creates a coupling of your client tests to your server implementation, which in the long run is a bad idea -- but a lesson well learned yourself.\nThe JavaScript limitations for instance are, you can't navigate to a different url from within teaspoon. You can't answer a confirmation, or close an alert without hacking their real implementations. You can't select a file in a file input. Those are just a few of the limitations of integration testing from within JavaScript. You can sometimes work around these things, but what you'll end up with is a simulation that can never be 100% real and may have to run in an iframe or similar.\nOn top of that there's very little tooling in any of the test frameworks for integration level testing. Yes, you can do integration like tests because you happen to be within the context of the \"view\" layer by having access to the DOM, but it will eventually break down. \nAll that's to explain the reasons why teaspoon is not an integration testing framework. You can use it for integration like tests, but from my experiences it's ill advised to take that too far. And using the hooks heavily is where I've chosen to draw that line.\nYou also asked why you would write them in a different language -- but you're already doing that by writing your hooks in ruby. If you're testing ruby through JavaScript or JavaScript through ruby, you've got the same scenario either way.\nAt the end of the day though, what you're doing isn't particularly bad, but for fundamental reasons I have to decline because I wouldn't want to lead others down a road that I've seen fail long term. For now at least.\nThanks for your thoughts, and the idea.\n. So it sounds like a problem when phantomjs 2.0.1? That's helpful. I'll update and see if it's reproducible, and see if it's resolvable. Thanks. For now, I'd say use 2.0.0 if that's working correctly.\n\nJeremy Jackson\n\nOn Jan 13, 2016, at 12:36 PM, Pierre notifications@github.com wrote:\nI did check, I searched the whole filesystem for a phantomjs binary and the only one coming up is the one installed by brew that I replaced with the version I linked above.\nBesodes, using the installed phantomjs in its 2.0.1 version from the brew command triggers the problem discussed in this issue. Replacing the binary with the one linked above lets teaspoon run without issues.\n\u2014\nReply to this email directly or view it on GitHub.\n. well, it's clearly not a teaspoon issue directly, but I'll still try to figure it out.\n\nif you have npm installed, consider sudo npm -g install phantomjs2 as an alternative.. looks like brew is failing, but npm just installs the binary precompiled.\n. 2.0.0, or 2.0.1?\n. ah, I wonder if something changed about the XHR implementation or something.. ugg. browsers.\n. That's great, thanks so much for checking in and resolving it!\n\nJeremy Jackson\n\nOn Jan 14, 2016, at 11:13 PM, Vitaly Slobodin notifications@github.com wrote:\nHi guys. Someone mentioned me in a comment. PhantomJS dev here.\nI found the problem yesterday. And can confirm that the problem is in AJAX requests.\nNew feature for capturing the content of requests sometimes breaks AJAX requests. It removes the body and status codes.\nI'll fix it ASAP.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm closing this, as it will probably be resolved shortly and will only effect a small amount of people who have installed the version where ajax isn't behaving. Thanks everybody for the info, and thanks @Vitallium for checking in before I had to really dig into it. =)\n. That's good info. Can I understand why you want to do this? I don't know that things will work when you change this, and am curious how you're using it.\n\n\nJeremy Jackson\n\nOn Dec 5, 2015, at 5:12 PM, Christian Schulze notifications@github.com wrote:\nHave found a solution. With some pocking around window.env by adding (console.log prop + ': ' + value) for prop, value of window.env to spec_helper.coffee, I found:\nui: function (ui) {\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n}\nCalling window.env.ui('bdd-lazy-var') in spec_helper.coffee works perfectly.\nPerhaps this could be added to the Mocha wiki page to help future developers?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the info!\n. Well, I can tell you that teaspoon doesn't have a spec.$injector, so it's something about angular mocks and likely isn't teaspoon directly.\n. Closing, unless more information can be provided.\n. https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/utility.rb\n\nIt simply looks for external commands that are accessible in your path, so you can add your custom instanbul path if you don't want it global.\nWhat you're asking for was added at one point and removed. It makes it far more confusing, and made istanbul the outlier with checking in multiple places. Because it can exist in multiple places the problem becomes \"which one is it using?\". So being a dependency, we treat it as a dependency, and expect the system to dictate where it is and which one to use via the path.\n. which version of teaspoon? Have you checked master yet?\nnote to self: add teaspoon version display to the output so I don't have to ask.\n. http://stackoverflow.com/questions/34344094/after-gem-update-test-fail-with-asset-was-not-declared-to-be-precompiled-in-pr\nThe interesting thing is that teaspoon does register assets for precompilation as seen here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/configuration.rb#L24\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb#L49\nSo my guess is that 1. teaspoon may be adding the precompile stuff at the wrong time (or it's being cleared out somehow?), 2. sprockets is looking at an incorrect environment (with production being noted in the exception?)\nThose are my best guesses, so for now the work around would be to drop your sprockets version and we'll try to get to this when time permits. I've opened an issue on sprockets-rails as well.\n. Thanks @rafaelfranca!  Teaspoon does the lookup at the time of execution, not at the time the engine is loaded -- this is so new files can be added and they'll show up.\nCan we register assets without them stacking after the initial load -- at the time of execution basically? If so, we can add that call in the controller which should mean they're registered before trying to serve them. We'd collect all the \"root\" paths for assets that we're going to load, and register those.\nWe could also do something similar to what you've done and introduce it at load time, but it's not as simple because the configuration uses a glob path for where to look for spec files, and so would have to parse the paths out of that and register them in sprockets.\n. @rafaelfranca since you're here. =) Is there a way that we could move to help Teaspoon be less coupled to sprockets? There's been breaking changes with most releases of sprockets -- which is reasonable given that Teaspoon is an outlier in usage patterns. We haven't yet found the right balance to keep things functional and capture the feature set desired for a test runner and I'm curious if you have any advice or ideas.\n. Ah, thanks for the info. Will try this week to get that implemented on my end.\nYou get what I'm getting at with the coupling though? Even that precompiled_asset_checker method isn't part of an external API, so if that gets changed it will break Teaspoon.\nMy objective is to try and get a more complete/robust API from sprockets that can be more stable. I can provide a write up of areas of pain, and work towards that by contributing back to sprockets.\n. Worth noting, the coupling has been better recently, and we were able to remove most (if not all) areas where we had to branch based on the sprockets-rails version.\n. The recommended fix is to drop the sprockets version until this is addressed in master and released.\n. @sb8244 that's a great solution. Would you be willing to submit a PR where that is injected from within engine.rb? I would merge it and release. I've been out for the holidays and sick. :-/\n. that sounds perfect.\n. @mikepack just brought up a good point.. that path, is a glob path, and can be test/javascripts, or anything else you wanted it to be.\n. I think Teaspoon.configuration.asset_paths would be essentially that. That's an array of paths that are rails root relative. It seems like doing what you're doing for each of those paths would work, though I don't know how that would impact performance. Let's give that a shot.\n. To clarify, the glob path in conjunction with the asset paths configuration in teaspoon env is what enables putting test/spec files where you want them. I think we can use the asset paths configuration to determine if they're servable in an asset path teaspoon knows about, but they can also exist within your application asset paths, and teaspoon wouldn't know about those.\n. Digging into the code a bit I found what seems to be a relatively easy fix, but the proposed solution may need some review and discussion first.. it may also leave teaspoon sort of broken with a specific version combination, which we'll have to probably work around anyway.\nIf you want to keep up on that part of the discussion, check https://github.com/rails/sprockets-rails/issues/297\nI'm using that one, because it's more tied to rails, as the proposed code change is in action_view.\n. Teaspoon 1.1.2 was released. Update and see if it's working for you.\n. @ajb, that doesn't seem related. If you're not getting an error when trying to load files that aren't in your precompile list I'd suggest looking at other issues, or creating a different one.\n. @psharpNumerex fixed as of #450, released version 1.1.3 so update and test. =)\n. So, funny thing.. I released the rails_5 branch as Teaspoon 1.1.3.. dang.\nI'm releasing 1.1.4 before I leave today.\n. Looks good to me. Can you please confirm that the broken specs aren't related to changing sinon? They may be trying to load an incorrect version now -- if you think they're unrelated, we'll look at them internally and merge this as-is.\n. Never mind, it would seem they are not related based on your commit.\n. The 500 is probably related to https://github.com/modeset/teaspoon/issues/443\n. They don't, but we've thus far decided that it's not a failure directly.. I'd rather it be caught by the developer when the tests are run.. a Parse Error doesn't always mean that the javascript won't execute, so if the test coverage is \"good enough\", it should capture this, as well as it being visible in the ways you show.\nI could be convinced otherwise, and every time it comes up I find myself being pretty much on the fence about it.\n. I'll look at it today @connorshea.\n. Your comment did remind me to lighten up the version in the gemfile for travis -- this is sort of how we figure out when a new version is breaking something.\n. I don't think the build will work anyway, haha, but yeah, I wasn't sure about that and figured I'd find out. =)\n. @connorshea how likely is it that you're able to test out master and make sure things are good before we release 1.1.5?\n. No worries, and thanks. There's higher value in making sure that it's working correctly in a large project with Rails 4 first -- Rails 5 fixes can roll out as they solidify that release. Follow up question for you -- why track this PR if you didn't directly need Rails 5 support yet? =) Just curious about how you're handling that process generally.\n. Cheers, and yes, you have more heart than myself. =) It's been hard enough to keep one gem updated promptly with Rails+Sprockets over the years. Will release a new version shortly, so you can probably update later today and be good rolling forward (unless there's a big change between now and final release of Rails 5).\n. It seems likely to be related to some recent changes required by sprockets, but only a few people have reported it, so I'd like others to chime in if this is the case, so I can try and resolve it and capture it in a spec. More details are needed.\n. if you check https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb#L99 you'll see a kinda ugly hack in there to work around the restrictions of sprockets 3+ -- I have an open issue (https://github.com/rails/sprockets-rails/issues/297) on sprockets-rails to see if @rafaelfranca has thoughts, but haven't heard back yet.\n. Yeah, I agree with the changes they've made with sprockets 3.0.0, but it'll probably throw a few kinks in for engines that were utilizing the less strict behavior in development environments.\n. I still don't know what's happening, and have not seen it as of yet.. any ideas on what's happening? like, literally, you get a js file served to you where you can see //= require [file]?\n. I'm not seeing this, so am closing it.. if someone else has more to add it would be great.\n. The info is appreciated. I would rename it to matches? or name_matches? etc, and I would merge a PR to resolve that.\n. As a follow up, is this because teaspoon isn't working in Rubinius? If so, I appreciate your efforts here.\n. Ah, were you doing an audit for Rubinius using github search or something?\n. Thanks. =)\n. Thank you.\n. I wasn't planning on it, but yeah, can you ping me tomorrow and I will update the changelog and release a new version? can't this evening. Thanks again. :+1: \n. released 1.1.3, thanks all.\n. Cheers!\n. Thanks! Yeah, this is why we broke them off into separate \"sub\" gems.. at some point later we'll probably extract them and have different repos, but this makes life easier for now. I'll merge, leave this on master for a bit, and then release it after some testing has happened.\n. Can you give me some background? I specifically took this out a long while back because it wasn't very good with OS level support, and I didn't want it as a dependency.\n. Can you update the wiki or readme based on where you would like this to be documented please?\n. Yeah, sadly we know, long story, name collision. If you know anybody at rubygems, or of a place where an issue can be opened, it would be nice to remove the abandoned gem to open the namespace back up.\n\nOn Feb 26, 2016, at 2:08 AM, Ewan McDougall notifications@github.com wrote:\nhttps://rubygems.org/gems/teaspoon has incorrect links for Source Code and Documentation. They both point to https://github.com/mintdigital/teaspoon\n\u2014\nReply to this email directly or view it on GitHub.\n. It appears one just needs to click edit and adjust them.. anyhow, got that resolved. Thanks for the heads up.\n. Thanks! This is great, and all your work here looks really good. I'll do an in depth dive later today or this weekend, but from a glance it looks like you've done some really hard and good work here. You noticed hound is doing its job trying to keep up some code consistency rules, and it looks like you're cleaning those up.\n\nFor this to be merged, I'd like to see a unit test of the new BrowserStack implementation so we can make sure not to break it in the future (an example: https://github.com/modeset/teaspoon/blob/master/spec/teaspoon/driver/selenium_spec.rb), and it looks like there's a broken spec around the CLI help -- the new browserstack driver correctly appears in the options displayed when running teaspoon --help, so the expectation in that spec should change to ensure it stays there. =)\nAs a follow up to this PR, I'd appreciate it if you updated the README, and added a wiki article with similar information to your PR description -- any third party things like browserstack can be complex to setup, so any information you have would be really valuable there.\nIf there's anything I can do to help, let me know.\n. As a follow up, when this is merged, I will update things like the repo description to include BrowserStack as a viable driver setup.\n. Ok, I'm out for a few days (surgery), but will review after that. I really appreciate your time.\nTo answer your questions:\nLet's use option 3. That's the same as we do for selenium, phantom etc. There's some tooling in util that allows us to find that binary if it's in the path, so probably want to use that same process here.\nNo, there's no a nice way to check code styles without hound -- I have the rubocop config locally I think, but never pushed that up. Don't worry about them, it's not a bad thing, we just want to keep relatively consistent code style so you can just clean them up as you want. Those emails don't bother me; just it doing its job. :)\n\n\nOn Feb 29, 2016, at 3:31 AM, Harish Ved notifications@github.com wrote:\nThank you for being patient.\nI have added the unit tests for the added driver. You might want to go through those.\nRegarding the BrowserStackLocal binary -\nThere are some ways to go about this.\nIssue - The tests require this platform specific binary running in the background.\nThere will be a published gem for this purpose. The source code is here. It does start the binary, stops it and adds the logs of the binary to a file. Will be efficient to use. But it might take some time for it to be published on rubygems.org and we will have to add it as a dependency.\nA thin version of the gem file can be implemented here which downloads the binary (according to the platform its running on) and starts it before and stops it after tests.\nWe can just add a word of warning that this requires a specific binary running. But running the tests for the users won't be automatic and will require setup from user's part.\nPending: The wiki page for using browserstack driver. Will proceed after the above discussion is clear.\nPS: Is there a way to run the houndci tests locally? (Before doing an actual push). I couldn't find one.\n\u2014\nReply to this email directly or view it on GitHub.\n. My last response was truncated, please expand it to see the hound comments.\n\n\n\nOn Feb 29, 2016, at 3:31 AM, Harish Ved notifications@github.com wrote:\nThank you for being patient.\nI have added the unit tests for the added driver. You might want to go through those.\nRegarding the BrowserStackLocal binary -\nThere are some ways to go about this.\nIssue - The tests require this platform specific binary running in the background.\nThere will be a published gem for this purpose. The source code is here. It does start the binary, stops it and adds the logs of the binary to a file. Will be efficient to use. But it might take some time for it to be published on rubygems.org and we will have to add it as a dependency.\nA thin version of the gem file can be implemented here which downloads the binary (according to the platform its running on) and starts it before and stops it after tests.\nWe can just add a word of warning that this requires a specific binary running. But running the tests for the users won't be automatic and will require setup from user's part.\nPending: The wiki page for using browserstack driver. Will proceed after the above discussion is clear.\nPS: Is there a way to run the houndci tests locally? (Before doing an actual push). I couldn't find one.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good! Thanks for the initial work, and being flexible and accommodating with the follow up requests.\n\nI'll merge, give it some time on master, and then release the new gem version.\nFollow up question: Do you work for BrowserStack, or was this something you wanted personally and were willing to share?\n. Did you ever get that wiki page created? =)\n. @mockdeep -- It's near impossible to have it be future proof since it's based on a third party that has changed things fairly consistently throughout the life of teaspoon. =)\n. There's some lines in the spec helper to enable the mocha matchers. It has a few options, so we don't specify enable one by default. The getting started article is written for jasmine, but it looks like you're using mocha fwiw.\n\nJeremy Jackson\n\nOn Mar 10, 2016, at 7:39 AM, Derek Johnson notifications@github.com wrote:\nOne more note: when viewing /teaspoon, the error is slightly different:\nexpect is not defined\nReferenceError: expect is not defined\n\u2014\nReply to this email directly or view it on GitHub.\n. You may want to run the generator again.\nOn Mar 10, 2016, at 8:10 AM, Derek Johnson notifications@github.com wrote:\n@jejacks0n Oh, I definitely intended to use Jasmine. I was paying complete attention when I copied the \"use this version for Rails 5\" line, which switches to Mocha:\nDeveloper Note\nWe've added experimental Rails 5 support. If you're looking to use Teaspoon with Rails 5, please try out the rails_5 branch.\ngem \"teaspoon-mocha\", github: \"modeset/teaspoon\", branch: \"rails_5\"\nChanged gem to teaspoon-jasmine, all good now. Thanks.\n\u2014\nReply to this email directly or view it on GitHub.\n. it's not the default anymore, you have to opt in to the framework you'd like to use, but it's fair.. I also updated the wiki article since that might be part of it.\n. if you dig further into the code, the IO.popen call is only running a shell command -- in this case, it's phantomjs. The reason it takes longer to run with coverage is several fold, so I'll explain what's happening and you can dig into that further if you feel there's still something in Teaspoon that is running \"very slow\".\n\nWhen you run Teaspoon locally, it'll use the dev environment by default, specifically to take advantage of the dev env asset caching -- this is to make load times better, but the load times are always about the time it takes to transpile/concat your asset files.\nNow, when you run with coverage, there's no way to actually tell which lines are being executed in javascript, and so the javascript must be wrapped in some crazy looking code to enable call tracking, statement call counts etc. For this, istanbul is used, and if you're interested in what that looks like, or how long it might take to instrument one of your files, please use istanbul to instrument one of your javascript files and check the output.\nOk, so now you know what's happening.\nNow, because istanbul is not being used for all of your assets in development, instrumented versions of your assets obviously won't be cached, and so when you run Teaspoon with coverage you're negating the potential dev env asset cache that you've built up locally.\nIf you're not excluding assets that you don't want instrumented, consider adding them to the ignore rules that are outlined in the coverage configuration documentation as well.\nHope that gives you some insight into the project and how you can dig in deeper.\n. Haha, that's because I didn't fully understand private at the time -- lessons learned over the years. =)\nOk, so hey, that broke all the builds, so do you want to look into it further? It can't be merged in the current state, but I don't disagree with this directly.\nCan you give me some background on why you want this change, and what it's intended to directly resolve?\n. That's fair, and I appreciate your explanation. Have you tried running teaspoon with a specified port via the CLI? This won't start a server internally and will look at the specified port to see if there's already a server running there (at least that's how the code reads in server.rb) -- try it and see if that works?\n. have you checked with master?\n. Cheers for checking in.. I'll try to get a new version pushed this weekend.\n. Try it with master?\nSo, I think it may be two fold -- Rake may be throwing an extra kink in there, but what's probably happening is that it fails because of issues around sprockets. In addition, it sounds like rake is gobbling up some information that used to be presented, but I have no idea how at this point.\n. Well, that's how this all works right? I'll use this as an opportunity to explain. =) You see an issue, as a step one, you always try master, if that doesn't fix it you can open a PR with your fix, or open an issue -- the former being the better of the two -- obviously. Now, here's the important bit: if master is working, and is a notable improvement from the latest gem version, it's helpful to let us know by searching closed issues and adding a comment there so we know.\nI don't have a plan to release the next version this weekend, but maybe early next week.\n. I'll keep this around, but it probably won't be merged as is. So initially I think Teaspoon handled these things well, by telling Rails to convert the rendered output to a javascript exception, but that seems to not work anymore. I'd rather handle this at the suite_controller level and handle exceptions by rendering that exception as a javascript_tag \"throw [exception]\" sort of statement.  That's probably a bit more elegant and robust.  But thanks for bringing it to our attention -- it definitely needs some love there.\nWorth noting, some gems, like better_errors can make this stuff not work. Are you using anything like that?\n. That's fair. I understand what you're trying to solve. There's likely a better way to do this, and I'd like to investigate that before considering your solution. Also, there aren't any specs here and it seems to have broken the build, but instead of saying that, I figured it might be worth looking into alternate approaches to help you resolve the problem without asking you for additional work.\nI'm sorry Teaspoon fell down on you here, but it's really about how better_errors hooks in (or doesn't really hook in, but tends to stomp all over) how rails handles exceptions normally. That seems like a better thing to look into from my perspective.\n. This looks good, and thank you for spending the time on it.\nI added some comments for changes. And I'd like to see a new spec.\n. Thanks for resolving that, and spending the time on it. :+1: \n. If anyone from the issue would like to dive into this further, it might be useful to get more eyes on it.\n. Thanks! Generally looks good, but I had some questions.\n. In theory it does, but I wasn't certain about the version of sprockets in the Rails 3 build. Thanks for clarifying.\n. Please provide more information. What's the pattern? Is it completely arbitrary, or can you figure out how to reproduce it?\n. and it doesn't happen when you don't use coverage?\n. no worries. =) So if it's only happening when generating reports, my best guess would be that it's an issue with how Istanbul is processing your javascript (or not processing). Teaspoon shells out to Istanbul and off loads that stuff and awaits a response.. you can find the relevant line here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/coverage.rb#L61\nYou can see it's using $?.exitstatus, which apparently is nil. I'd drop in a pry (or otherwise debug) on that line and see what the output is like from Istanbul. Potentially you have a bad install, or outdated version or something?\n. It's the only thing that makes sense unless you have some threaded setup or something -- and I'm not even sure about if that would cause an issue or not.\n. That doesn't seem like a good solution. You'd be here with the same issue, different result.. e.g. \"Teaspoon arbitrarily fails to generate my text reports on some runs\". =)\nWhat you probably should do is figure out why Istanbul fails to return a result sometimes. I'm trying to help you get to the root cause, which seems to only be afflicting you thus far.\n. It's looking good -- thanks for the time you've put into it. Can you provide a link so I understand why $? with %x{} can lead to missing exit status code issues? Just want to learn from it.  Also, in a few other places I use IO.popen -- is there a reason not to do the same here? Again, mostly just trying to figure out the subtle differences.\n. I find this new behavior of Sprockets to be confusing, but I'm willing to roll with this and see.\n. At some point when sprockets changes slow back down, I'd like to lock it to a minimum version and remove the hacks we have in place for various versions.\n. Thanks @liseki. Sounds like this should wait until sprockets is ready? If so, do you want me to wait until you check back in?\n. I appreciate all your work on this. \ud83d\udc4d \n. No worries, go ahead and squash.  There's always been a bit of an issue with the expand_assets configuration, but I couldn't get both scenarios working well initially, and haven't had the opportunity to go back and see if there's a better option.. Generally speaking any failed test/stack traces are much more useful when you DO expand assets, but for performance reasons some people want to avoid expanding their assets. My point being that it will probably need additional attention at some point.\n. I was super confused by the hack for allow_non_precompiled and how that makes it through the chain (or didn't as far as I could tell).. e.g. the debug option does several different things, and isn't consistent.\n. Status check @liseki.. Feel free to disregard if nothing has changed.\n. Thanks for your efforts here. Much appreciated.\n. Yeah, I've been torn on this because it doesn't indicate a real failure directly. That being said, it's an easy fix with phantomjs, but may not be true elsewhere.\nIf you decide to look into this I tend to think we might need to do this at the controller level (suite_controller) and handle that exception by ending everything.\n\nJeremy Jackson\n\nOn May 5, 2016, at 9:13 AM, Bouke van der Bijl notifications@github.com wrote:\nThis seems to have been discussed before in previous issues, but we've ran into multiple problems at Shopify where something in our javascript bundle throw a SyntaxError or ReferenceError or whatever, which would then not make Teaspoon fail and instead cause our CI to silently succeed and us to miss it.\nI propose that we make Teaspoon fail the test run if there's an error before Teaspoon.execute is ran, as that will make it non-disrupting when there's errors in asynchronous things, but still makes sure this doesn't silently let errors slip through.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Hey @bouk, thanks for taking this on, and sorry I've been absent from it a bit. I'll merge this when you resolve CI.\n\nThe CI failure: ReferenceError: Can't find variable: msg, seems to be related to your change here,\nhttps://github.com/modeset/teaspoon/pull/480/files#diff-4630ab299de0b26c012329264476c8a5R69 where msg is not defined in the function arguments. I'd say roll that line back since it's unrelated to your other changes, no?\n. An easy place to start is to unit testing the new setup method.. Check the base teaspoon spec and there'll be some examples. I assume you can call window.onerror directly without having to raise an exception, so that would be my first pass. This may not be possible, and if it's not, I'd extract the logic from within the window.onerror function, move it to a different method and test that individually.. then just make sure window.onerror is the function you expect.\nAs a follow up, I realized that we could be clobbering an existing window.onerror handler.. you should capture that and call it if it's defined in our own implementation -- pseudo code.\nexistingHandler = window.onerror\nwindow.onerror = =>\n   # our logic\n   existingHandler?()\nThis also breaks some existing stuff, which is tested.. I have a call to foo() in the integration tests which can be found in the spec dummy app assets.. it behaves differently now, and so the output is different.\nA few questions now that I thought this through a bit more... when you run jasmine you can disable it's try/catch logic so exceptions are raised -- this makes debugging really nice sometimes. how does this window.onerror handle things now? Should this go only in the console reporters, since that's really the only place we want the behavior?\n. To be clear this is why I took the stance I did. When you have an exception it doesn't necessarily break the world -- things can continue running, it's just important to know that it's an issue that you may not have a test for. Anyway, that's the background. =)\nIf you could remove it and put it into a different test that covers what your error handling accomplishes that would be awesome. So, I'm fine with accepting the adjustment to the behavior, but the tests accurately reflect the change in behavior so we should 1. remove the case that breaks the integration tests (e.g. the call to an undefined function), and add one that ensures that when something like that does happen it fails the build as it does now.\n. To give you some more info, if you check in https://github.com/modeset/teaspoon/blob/c9786f54c487a78e55686f76cf93f199654fea53/teaspoon-jasmine/spec/javascripts/integration/first_integration.coffee you'll see an example of that.. so you'll need to adjust the behavior in each of the different frameworks -- e.g. jasmine, mocha, and qunit.\nadditionally https://github.com/modeset/teaspoon/blob/c9786f54c487a78e55686f76cf93f199654fea53/teaspoon-jasmine/spec/integration_spec.rb you'll find where we basically configure teaspoon on the fly to get those \"real\" integration tests into the dummy application.\nThat's how you'd create a new one basically.. so adjust the existing ones to pass, and then create three new ones (one for each framework) that has a \"broken_integration\" setup similar to what's already in place.\n. Thanks for taking this on btw.\n. I need to exclude the js from hound apparently now that coffeescript -> javascript causes so many issues.\n. Cool, looks good.. will merge after CI is done.\nThanks again for all your work here, much appreciated.\n. I'm not planning on releasing today because I'm pairing on some other things, but hit me up in a few days if I've forgotten.\n. Cheers! Pobody's nerfect. =)\n. https://github.com/modeset/teaspoon#hooks\n. Hey man, got the email notification for the comment you added and came here to check it out.. Looks like it's gone, so hopefully that means you got things working.\n. These are all due to changes in the default behavior in sprockets. Have you tried with master? If master doesn't work, I'll need to come up with a workaround, but I have personal life things going on that are keeping me from being able to work on Teaspoon at the moment.\n. Thank you. Please provide any details you find when investigating the issue with Teaspoon and in general. The change to sprockets, and the seemingly inability to opt in to allowing assets that are not defined in the precompile list when requesting assets is burdensome on gems like Teaspoon, but that's not your fault. =)\n. Cheers!\n. Yeah, we just use your configuration to start a server (in a thread), so if starting that server forces others to restart, it would also potentially be an issue in capybara too (though I think it might default harder to webrick).\nAnyway, thanks for the info @arrbee. I'll leave this around for others if it's a confirmed fix.\n. Huh? It shouldn't be, so I'll look into it.\n\nJeremy Jackson\n\nOn Jun 29, 2016, at 6:46 PM, Zach Collins notifications@github.com wrote:\nFrom my Gemfile.lock\nteaspoon (1.1.5)\n  railties (>= 3.2.5, < 6)\nteaspoon-jasmine (2.3.4)\n  teaspoon (>= 1.0.0)\nSass::SyntaxError: File to import not found or unreadable: bourbon.\n...\n./bundle/ruby/2.3.0/gems/teaspoon-jasmine-2.3.4/lib/teaspoon/jasmine/assets\nIt seems that https://github.com/thoughtbot/bourbon is an implicit dependency of teaspoon-jasmine, although it hadn't been in the past (just a random upgrade). Can we get this dependency stated explicitly in the teaaspoon-jasmine gem?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Check where the teaspoon_env is in the teaspoon repo. And its contents. That might help?\n\n\nJeremy Jackson\n\nOn Jul 13, 2016, at 5:22 AM, Angel notifications@github.com wrote:\nAny idea? Sorry but i can't get it to work and i'm run out of ideas.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. so, it looks like this:\n\nhttps://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/hook.coffee#L22\nThat will let you know (and will in theory break a test) if the response isn't a 200.. but it's using a variable that's not defined url.\nI'll try and get to this today.\n. ah, yes.. it's :ok, not :success.\n. but the underlying problem is still there with the url variable.\n. It depends on how you\u2019re running teaspoon on CI. Via the CLI I believe you can put RAILS_ENV=test in your env. if you\u2019re running rake, the rails app has already been started by the time teaspoon env is executed, so\u2026 with rake, you must set the environment variable before executing rake, with the CLI you can probably put it in your teaspoon_env.rb.\n\nOn Jul 18, 2016, at 10:20 AM, Sebastian Zillessen notifications@github.com wrote:\nWell, that would work but it would as well require, that I do this on all CI instances for all projects... \ud83d\ude04 Thats why I thought of a solution that I can check in into my central teaspoon_config.rb and then apply it automatically to all projects.\nIs that somehow possible?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/modeset/teaspoon/issues/495#issuecomment-233379269, or mute the thread https://github.com/notifications/unsubscribe-auth/AAA1xf6PYvW1xCeFNc_SqA2twu2Yn7Llks5qW6eygaJpZM4JMMsi.\n. :+1:\n. Thanks!\n. There is. =)\n. rake db:test:prepare ?\n\n\nJeremy Jackson\n\nOn Oct 28, 2016, at 1:20 PM, Sujay Sudheendra notifications@github.com wrote:\nI am trying to run teaspoon tests in rails app. instead of running in test environment teaspoon is trying to run on dev environment and asks for missing database migrations.\nI have specified \nENV['RAILS_ENV'] = 'test' in first line of teaspoon_env.rb file\nusing gem 'teaspoon-jasmine', '~> 2.3.4'\nError: ActiveRecord::PendingMigrationError:\nMigrations are pending. To resolve this issue, run:\nbin/rake db:migrate RAILS_ENV=development\ngems/activerecord-4.2.7.1/lib/active_record/migration.rb:392:in check_pending!'\ngems/activerecord-4.2.7.1/lib/active_record/migration.rb:373:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/callbacks.rb:29:in block in call'\ngems/activesupport-4.2.7.1/lib/active_support/callbacks.rb:88:inrun_callbacks'\ngems/activesupport-4.2.7.1/lib/active_support/callbacks.rb:778:in _run_call_callbacks'\ngems/activesupport-4.2.7.1/lib/active_support/callbacks.rb:81:inrun_callbacks'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/callbacks.rb:27:in call'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/reloader.rb:73:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/remote_ip.rb:78:in call'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/debug_exceptions.rb:17:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/show_exceptions.rb:30:in call'\ngems/railties-4.2.7.1/lib/rails/rack/logger.rb:38:incall_app'\ngems/railties-4.2.7.1/lib/rails/rack/logger.rb:22:in call'\ngems/request_store-1.2.1/lib/request_store/middleware.rb:8:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/request_id.rb:21:in call'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/methodoverride.rb:22:incall'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/runtime.rb:18:in call'\ngems/activesupport-4.2.7.1/lib/active_support/cache/strategy/local_cache_middleware.rb:28:incall'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/lock.rb:17:in call'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/static.rb:120:incall'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/sendfile.rb:113:in call'\ngems/railties-4.2.7.1/lib/rails/engine.rb:518:incall'\ngems/railties-4.2.7.1/lib/rails/application.rb:165:in call'\ngems/puma-3.6.0/lib/puma/configuration.rb:225:incall'\ngems/puma-3.6.0/lib/puma/server.rb:578:in handle_request'\ngems/puma-3.6.0/lib/puma/server.rb:415:inprocess_client'\ngems/puma-3.6.0/lib/puma/server.rb:275:in block in run'\ngems/puma-3.6.0/lib/puma/thread_pool.rb:116:incall'\ngems/puma-3.6.0/lib/puma/thread_pool.rb:116:in `block in spawn_thread'\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It's mentioned in the documentation that teaspoon by default runs in the development env. If you want to change this and not take advantage of the optimizations this provides, by all means do as you wish. Though it's not the default setup, so any issues you come across in the test env are for you to resolve.\n\n\nJeremy Jackson\n\nOn Nov 26, 2016, at 12:23 PM, Wes Sheldahl notifications@github.com wrote:\nI have a similar problem:\nWhen I run \"bin/teaspoon\", logging goes to log/development.log.\nWhen I run \"RAILS_ENV=test bin/teaspoon\", logging goes to log/test.log.\nI doublechecked, and by default RAILS_ENV is unset, so that isn't the problem. In my Gemfile, teaspoon-jasmine is in the 'development, test' block.\nRails 4.2.7.1, teaspoon 1.1.5, teaspoon-jasmine 2.3.4\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Do you have whatever defines define required in your spec helper?. potentially related? https://github.com/puma/puma/issues/1154. What runner are you setup to use? phantom, selenium, etc.\n\nI've not seen this behavior exactly, but the runner would probably be the biggest factor in that.. I'm a little lost -- can someone explain like I'm 5? I'm slammed at work, so if you just give me a clean PR with an explanation and reasonable certainty that it takes everything needed into account I'll merge it.. it should error out.. are you using any error handling gems in rails?. interesting, hmm, wow. I think I kinda understand. I'll look into it.. for the life of me I can't see anyplace where you require jquery.. am I missing something? I see third_party/terra/jquery/globalize/globalize.min.js -- is jQuery defined inside of that?. //= require jquery\nbefore other things? As I said, how would jQuery be loaded if you're not loading it?. https://github.com/jejacks0n/teaspoon/wiki/Teaspoon-Configuration\nsearch for server_port. Yup, did you pull?  I spied on something important outside an 'it'. \n\nJeremy Jackson\n303-507-6846\nOn Dec 13, 2012, at 8:08 AM, Jed Schneider notifications@github.com wrote:\n\ngetting an uncaught exception\nUncaught TypeError: Cannot set property 'innerHTML' of null\nBaseView.prototype.setHtml = function(id, value, add) {\n  var el;\n  if (add == null) {\n    add = false;\n  }\n  el = this.findEl(id);\n  if (add) {\n    return el.innerHTML += value;\n  } else {\n    return el.innerHTML = value;\n  Uncaught TypeError: Cannot set property 'innerHTML' of null\n  }\n};\n\u2014\nReply to this email directly or view it on GitHub.\n. awesome! looks good.. I'm going to make a few changes -- I see a /jasmine instead of /teabag, but that's it.  thanks. =)\n. Thanks, and that seems do-able.\n\nSo, with these types of formatters are you writing them to files, or?\n\nJeremy Jackson\nOn Dec 21, 2012, at 8:48 AM, 7rans notifications@github.com wrote:\n\nVery nice looking project!\nI'd like to see TAP-Y/J reporters --a next gen TAP format.\nSee https://github.com/rubyworks/tapout/wiki/TAP-Y-J-Specification\n\u2014\nReply to this email directly or view it on GitHub.\n. I played around with adding tapout support this evening.. it looks good, and will only require some minor refactorings.  I've committed some initial setup requirements for this and have it working -- but will need to do a little more work before I'm comfortable pushing it.\n. A few things worth noting -- it's pretty impossible to know the file / line number of the errors, and the stack trace in safari (aka phantomjs) is weak, so some information is just not available to us from the javascript stack and can't be provided to tapout.\n. Just submitted a pull request -- so other folks can potentially review.  You're welcome to point your gem to that branch and see how it works out for you.\n. As far as improvements for the TAP-Y/J format, it looks solid.  I potentially should've used that from the start.\n. Awesome, let me know your thoughts -- I expect there to be a few things that I missed, but for now I merged the changes into master, and will likely bump the version later today if all seems well.\n\nClosing the issue, but feel free to provide additional feedback.\n. ;-P\n. After playing around with this concept it has one big issue.. loading the environment for rails is not easy and can't be automated very well.\nThe potential fixes are to guess (bad), or to have a dependency on an rspec style spec_helper.rb where someone can provide/tweak those variables.\nI'd say it's a no go for this feature unless someone has alternate ideas.\n. Done.\n. Booo!.. well, thanks for the heads up.. I'll take a look at it/fix it.\n. fixed.\n@skarlcf -- thanks for your help, I wasn't motivated to look at it unless it wasn't working.\n. I had a chance to get this wrapped up while I waited for my wife to get ready for dinner. sigh (don't tell her I posted this)\n. I'll go ahead and pull this for now -- it's preliminary still, and there still needs to be logic to run focus tests.. also, Merry Christmas. =)\n. include the phantomjs-linux gem in your Gemfile.. not sure why phantomjs.rb isn't properly adding it as a dependency.\noh, are you including teabag in a \"development\", or \"asset\" group in your Gemfile?\n. hmm.. ok.. that's odd -- it's working for us (check our gemfile in this project) on travis-ci.\nI do assume you're running on Linux, and if you say everything is being required correctly in your Gemspec I trust you.\nIf you can't find an easy solution (or it requires something on our end) please let us know.\nAnd if all else fails, you can use selenium if you want -- https://github.com/modeset/teabag/wiki/Using-Selenium-WebDriver\n. Interesting to know.  I think we probably need to add some info about installing phantomjs vs the phantomjs.rb gem on Linux but I don't think I know enough to write anything about it.\n. I just added some info to the readme and a wiki article.\nI am literally one of the worst people to contribute information on the topic, so if you would like to contribute to the wiki article, that would be immensely appreciated: https://github.com/modeset/teabag/wiki/PhantomJS-on-Linux\nThanks for the heads up as well.\n. When I understood what the issue was I looked into adding a \"fallback\" scenario to phantomjs.rb -- if neither gem was found, then the execution path could be specified, but I couldn't find an elegant solution.\nI'll poke around more and let you know.\n. Ok, so no.. I don't have a good solution for this, but this adds the ability to override the phantomjs bin path.\nSo the problem I see with this is that it lacks the ability to keep this sort of override system specific -- you're on Ubuntu, I'm on OS X, we're both working on the same project.. we're screwed.. that's the down side to this implementation.\nI would actually recommend doing this instead..\nIn an initializer that you add to gitignore:\nruby\nrequire \"phantomjs\"\nmodule Phantomjs\n  def get_executable\n    \"your path\"\n  end\nend\n. Just to clarify, you want to keep the phantomjs_bin configuration?\nIf that's the case I'll make the changes that Jay suggested, and provide the information on the wiki article.. It will likely not get documented anywhere but on the wiki -- as it raises the chances of shooting one's self in the foot.\n. Updated wiki, and released the change we discussed.  Hopefully that will make it nicer for others.\nThanks again for your help.\n. We've provided a better interface for this now.. The PHANTOMJS_BIN env allows you to specify your own installed version -- this also improves flexibility on CI (specifically Travis CI).  You can specify this globally in your environment, or you can specify it when you run the rake task or teabag command.\n. Thank you, much appreciated.. I also added the link back to the wiki home.\n. Ah, so we specifically have TAP-Y(aml).. which I don't know if it has -- I considered adding TAP output proper, but didn't.\n. Do you think we should add standard TAP output?  I like it better than XML. =)\n. I'm adding this now -- as JUnit XML.\n. Closing because it probably won't ever be added unless someone else needs it.\n. It was initially discussed and this was the issue to track it -- nobody ever felt like doing it, and since there's TAP support in Teabag you should be able to format that in all sorts of ways. The link that @jayzes posted is about TAP support in Jenkins.\n. I'd take a pull request -- since we don't use Bamboo it would be hard to ensure it works, so if you're using it and think it's worth it, you might consider adding it. Sorry we can't help you here.\n. That's awesome.  You can check the existing formatters for examples, but the answer is not really. :)\n. I'll try to publish by the weekend.. =) Also this may be a nicer way to add the dependency:\nruby\ngem 'teaspoon', '>= 0.7.7', github: 'modeset/teaspoon', ref: '6f390361'\nWhen it's released you would only have to remove the extra info and bundle update teaspoon\n. Thanks, have you personally tried it out?\n. As an fyi, master is currently working in Rails 4.. I've also attempted to push some bug fixes to rails/rails and rails/sprocket-rails that address some of the issues I came across.\n. Thanks for the heads up -- I'll fix it if you can tell me what's going on.\nTry something like this, and let me know:\njavascript\nbeforeEach(function() {\n    Backbone.history = new Backbone.History()\n    Backbone.history.start(silent: true)\n});\n. and potentially:\n``` javascript\nafterEach(function() {\n  Backbone.history.stop()\n});\n```\n. Update?  The one calling submit on a form will always reload the page unless you stop the event.\nQuestion: these sound like tests that you already have, correct?  What were you using before?\nThe reason I ask is because I considered using an iframe for the fixtures for this reason, but I thought it better for people to see those things so they can be properly stubbed or fixed.\n. Glad you got it sorted.. I assume that you were using a way outdated version of the gem -- and I did see the reloading thing and was able to fix it a while ago.\nThanks for the follow up.\n. Not sure @Gowiem -- anything that sets the url will .... change the url. ;-P\nIf Ember.Test#visit is changing the browsers location (via location.href= or location.reload()), then the browser will reload, and that seems like it would be wrong.  I don't know enough about Ember to be able to say what's going on there.  Sorry.\n. Thanks man.. and I appreciate your contributions to the pull requests on rails/rails and rails/sprockets-rails.\n. Thanks for the feedback.. It does say that, but more in regards to serving spec files through the asset pipeline -- thus allowing the require directive etc.\nIt's limiting to assume that everything worth testing is required through application.js -- and that's why there are no assumptions made in regards to the javascript structure.\nI can understand your confusion, so do you think we can clarify that more -- and if so, what are your thoughts?\n. Oh, on a side note, just use:\njavascript\n//= require application\nSince Teabag does use the asset pipeline everything works just like it would if the spec files were in app/assets/javascripts.\n. Perfect.  I'll add it/and a note to the spec helper that gets generated. :).  Thanks.\n. It should already be released.  Are you seeing it on the current release?\n\nJeremy Jackson\nOn Jan 18, 2013, at 7:34 PM, Jared Sartin notifications@github.com wrote:\n\nMakes sense, I have some test working with YouTube embed - when will this hit the Gem? \n\nJared Sartin \n[Ph] +1 269 364 1735 \nOn Friday, January 18, 2013 at 9:32 PM, Gabe Varela wrote: \n\nI think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it. \nGabe Varela \n303-638-6576 \nOn Jan 18, 2013, at 7:00 PM, Jared Sartin  wrote: \n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\" \nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too. \nAny way to provide better feedback? And get tests passing? Could this be a cache thing? \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014 \nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449229). \n\u2014\nReply to this email directly or view it on GitHub.\n. Put the Teabag.defer somewhere at a high level.. like maybe in your spec helper.\n\n\nIf you defer execution, it requires that you call Teabag.execute yourself at some later point (eg. after the files you need are loaded.)\nHow you determine when you're ready to begin executing your tests is up to you, and since I don't personally use RequireJS or other AMD libraries, I don't know the best ways to accomplish that, but assume if you're using RequireJS you can sort it out and let others know.\n. Any solutions to share?\n. I'm actually working on a solution now.. I played around with it and it's not fun.\n. Well, to clarify it's easy to get working if you don't care to run specs limited to a file -- but I worked hard at making that work and think it's important.  I think AMD is a bit silly if you're using coffeescript + rails, but I'd like to support it anyway.\n. I've updated the readme and added a wiki article about this.\nhttps://github.com/modeset/teabag/wiki/RequireJS-with-Teabag\nRead that and let me know if you have any issues.. be sure to update to the latest (0.5.4) before attempting, as it utilizes a new Teabag.resolveDependenciesFromParams method.\n. How else would require know what you had defined and wanted to load? :)\n\nJeremy Jackson\nOn Feb 3, 2013, at 11:42 PM, olivier-o notifications@github.com wrote:\n\nLooks great. I read the wiki, does it mean that I need to add an entry for every spec file in spec_helper.js?\n\u2014\nReply to this email directly or view it on GitHub.\n. So yes.  Sadly.\n. Right, and within this file you have all of your implementation files defined?  Where do you have your specs defined?  You should define them in your spec helper, but you're welcome to add something to Teabag that does what you're looking for.\n\nIn my experiments you must define your specs within a \"define\".. and when you do that you will then need to \"require\" them somewhere.  You could probably add a js.erb to do something like that, but I don't feel it should come bundled with Teabag because it's overly complex and has few benefits -- AMD in general provides little when you have the asset pipeline, and adds complication.\n\nJeremy Jackson\nhttps://github.com/jejacks0n\nOn Feb 4, 2013, at 12:23 AM, olivier-o notifications@github.com wrote:\n\ncould teabag discover the files under spec/javascript and then run Teabag.execute? ...my app as already a config.js that contains path for requirejs, could Teabag take have a setting for consuming it?\n\u2014\nReply to this email directly or view it on GitHub.\n. To clarify, it doesn't just pick a random port.. it finds an available port using the system.\n. 026efdd9aa2b63e5cbb07e85b731f0a6b065f116\n. /cc @prashantrajan\n\nThis is based on a suggestion from prashantrajan.  It's the first step to getting coverage reports generated using istanbul -- though we might consider doing a simplistic report in the browser as well if that's simple enough.\n. So, I'd like some feedback on this -- specifically which files get instrumented.\nIt's really hard to determine which files should be instrumented and which should not.  Since Teabag is so flexible with what your specs can be named and where they exist, we have to ask the suite if it's a spec.  If it's not a spec it will instrument the file -- which includes the spec helpers and all dependencies.\nSo let's say I'm using jasmine-jquery for instance -- that file will get instrumented and will count against the total coverage statistics -- which may or may not be desirable.\nIf require allowed specifying something like #= require implementation.js?instrument=true it would all be awesome.. you would specify which files you wanted to instrument from your spec helper / specs.. but alas, that doesn't work.\nSo I think if we don't want spec_helper, and some of the files that might be required in it to be instrumented we'll have to provide a way to specify which files not to instrument in Teabag.configuration.\nThoughts?\n. I'm trying to hack sprockets so that params can make it through to the tilt template, as well as avoid caching for these requests.  This is for the instrumented/non-instrumented javacripts..\nAnyhow, long story short -- that's pretty horrendous.\n. Yeah, it's all in the instrumentation.rb file -- what's in there works but busts caching for all files all the time.  And since send :include doesn't work as expected....\n. So instead of using a Tilt::Template and register_postprocessor in the engine (basically telling sprockets that it should do something) it's been adjusted to just mix in a bit with Sprockets::Environment.\nThis is because sprockets doesn't allow any sensible way to accomplish this.  I won't bore anyone with my rant, but yeah.. :-/\nAnyhow, it should be good to go -- I'm doing a little testing on other projects, so if you're inclined:\npoint your project to this branch\nrun bundle exec teabag --coverage-reports=text,html and you should be able to check out the report that's generated in [root]/coverage.\n. Looks good to me.. performance is good (doesn't seem to slow down requests or caching).  I'll merge tomorrow if there's not any issues.\n. Ah!  Good catch, and thanks for the heads up.  I'll add better support and build an options hash that can be serialized into query params nicer.\n. fixed in 2964bab2396f8f61f1b711495d038e4cdc834930\n. I'll be releasing 0.5.5 shortly.\n. We'll talk about it.  Here's some alternate methods:\nIn a beforeEach:\nthis.el = $(fixture.load('foo')[0])\nOr in my specs I use it as a scope:\nexpect( $('em', fixture.el).length ).to.eq(2)\n. /cc @mkitt \n. Ah... so, the source you link to is total bullshit, and I hate it, but sprockets + the railtie are such crap that it requires us to do that.  Honestly, it drives me nuts.\nAnd yes, external scripts are an oversight.  How would you like it to be implemented?  To include external libraries like this in your suite.javascripts configuration, or some other means?\n. I went with adding the ability from within the suite config.. hopefully that covers the need.\nI wish sprockets supported it itself though: https://github.com/sstephenson/sprockets/issues/289\n. you should be able to put them in the configuration in 0.8 (master)\nsuite.javascripts << ['//cdn.com/jquery']\n. Update teabag.  We did a broken release there if you don't have more tha one suite.\n\nJeremy Jackson\nOn Mar 13, 2013, at 8:09 AM, LiquidMark notifications@github.com wrote:\n\n(Note: I originally submitted this under teabag-demo, but decided it may reflect a problem in teabag itself, so am submitting it here as well.)\nI am very keen to use teabag -- exactly what I need for testing my rails with JavaScript, from the looks of it!\nHowever, I can't get even the simplest test to work. Thinking I must have some incompatibility with my version of Ruby or some gem, I tried cloning the teabag demo, built it, ran the rails server, and navigated to http://localhost:3000/teabag. What it shows is \"passes: 0 failures: 0 skipped: 0 duration: \u221e\". As best I know how, teabag-demo is using the exact versions of Ruby and all gems as specified by the .rvmrc and Gemfile/Gemfile.lock.\nNo errors are shown from the rails server, but using Firefox, I looked at the console and see the error\nTypeError: this.findEl(...) is null\n[Break On This Error]   \nthis.findEl(\"suite-select\").onchange = this.changeSuite;\nteabag...?body=1 (line 2815)\nRuby is 1.9.3p392:\nruby -v\nruby 1.9.3p392 (2013-02-22 revision 39386) [i686-linux]\nI'll include my Gemfile and Gemfile.lock here too in case that helps:\nGemfile:\nsource 'https://rubygems.org'\ngem 'rails', '3.2.9'\nBundle edge Rails instead:\ngem 'rails', :git => 'git://github.com/rails/rails.git'\ngem 'sqlite3'\nGems used only for assets and not required\nin production environments by default.\ngroup :assets do\n  gem 'sass-rails',   '~> 3.2.3'\n  gem 'coffee-rails', '~> 3.2.1'\n# See https://github.com/sstephenson/execjs#readme for more supported runtimes\n  # gem 'therubyracer', :platforms => :ruby\ngem 'uglifier', '>= 1.0.3'\n  gem \"teabag\"\nend\ngem 'phantomjs-linux'\ngem 'jquery-rails'\nTo use ActiveModel has_secure_password\ngem 'bcrypt-ruby', '~> 3.0.0'\nTo use Jbuilder templates for JSON\ngem 'jbuilder'\nUse unicorn as the app server\ngem 'unicorn'\nDeploy with Capistrano\ngem 'capistrano'\nTo use debugger\ngem 'debugger'\nGemfile.lock:\nGEM\n  remote: https://rubygems.org/\n  specs:\n    actionmailer (3.2.9)\n      actionpack (= 3.2.9)\n      mail (~> 2.4.4)\n    actionpack (3.2.9)\n      activemodel (= 3.2.9)\n      activesupport (= 3.2.9)\n      builder (~> 3.0.0)\n      erubis (~> 2.7.0)\n      journey (~> 1.0.4)\n      rack (~> 1.4.0)\n      rack-cache (~> 1.2)\n      rack-test (~> 0.6.1)\n      sprockets (~> 2.2.1)\n    activemodel (3.2.9)\n      activesupport (= 3.2.9)\n      builder (~> 3.0.0)\n    activerecord (3.2.9)\n      activemodel (= 3.2.9)\n      activesupport (= 3.2.9)\n      arel (~> 3.0.2)\n      tzinfo (~> 0.3.29)\n    activeresource (3.2.9)\n      activemodel (= 3.2.9)\n      activesupport (= 3.2.9)\n    activesupport (3.2.9)\n      i18n (~> 0.6)\n      multi_json (~> 1.0)\n    arel (3.0.2)\n    builder (3.0.4)\n    coffee-rails (3.2.2)\n      coffee-script (>= 2.2.0)\n      railties (~> 3.2.0)\n    coffee-script (2.2.0)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.4.0)\n    erubis (2.7.0)\n    execjs (1.4.0)\n      multi_json (~> 1.0)\n    hike (1.2.1)\n    i18n (0.6.1)\n    journey (1.0.4)\n    jquery-rails (2.1.4)\n      railties (>= 3.0, < 5.0)\n      thor (>= 0.14, < 2.0)\n    json (1.7.5)\n    mail (2.4.4)\n      i18n (>= 0.4.0)\n      mime-types (~> 1.16)\n      treetop (~> 1.4.8)\n    mime-types (1.19)\n    multi_json (1.5.0)\n    phantomjs-linux (0.0.2)\n    phantomjs-mac (0.0.3)\n    phantomjs.rb (0.0.5)\n      phantomjs-mac\n    polyglot (0.3.3)\n    rack (1.4.1)\n    rack-cache (1.2)\n      rack (>= 0.4)\n    rack-ssl (1.3.2)\n      rack\n    rack-test (0.6.2)\n      rack (>= 1.0)\n    rails (3.2.9)\n      actionmailer (= 3.2.9)\n      actionpack (= 3.2.9)\n      activerecord (= 3.2.9)\n      activeresource (= 3.2.9)\n      activesupport (= 3.2.9)\n      bundler (~> 1.0)\n      railties (= 3.2.9)\n    railties (3.2.9)\n      actionpack (= 3.2.9)\n      activesupport (= 3.2.9)\n      rack-ssl (~> 1.3.2)\n      rake (>= 0.8.7)\n      rdoc (~> 3.4)\n      thor (>= 0.14.6, < 2.0)\n    rake (10.0.3)\n    rdoc (3.12)\n      json (~> 1.4)\n    sass (3.2.4)\n    sass-rails (3.2.5)\n      railties (~> 3.2.0)\n      sass (>= 3.1.10)\n      tilt (~> 1.3)\n    sprockets (2.2.2)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sqlite3 (1.3.6)\n    teabag (0.4.1)\n      phantomjs.rb (~> 0.0.5)\n      railties (~> 3.2.5)\n    thor (0.16.0)\n    tilt (1.3.3)\n    treetop (1.4.12)\n      polyglot\n      polyglot (>= 0.3.1)\n    tzinfo (0.3.35)\n    uglifier (1.3.0)\n      execjs (>= 0.3.0)\n      multi_json (~> 1.0, >= 1.0.2)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  coffee-rails (~> 3.2.1)\n  jquery-rails\n  phantomjs-linux\n  rails (= 3.2.9)\n  sass-rails (~> 3.2.3)\n  sqlite3\n  teabag\n  uglifier (>= 1.0.3)\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you explain more? I haven't used angular yet, so I need more info on what you mean.\n\n\nJeremy Jackson\nOn Mar 14, 2013, at 7:37 AM, Julien Portalier notifications@github.com wrote:\n\nHow hard do you think it would be to have an adapter for angular scenario, so that we could have an E2E testing suite in teabag?\n\u2014\nReply to this email directly or view it on GitHub.\n. Sweet, I'll look into it.  Thanks for the example stuff too. =)\n. Awesome!  And yeah, but they're actually not too bad -- often times it's about getting the right callbacks from the runner, and normalizing specs and \"suites\" (which are collections of specs). I'm at the office at the moment, but I will be spending some time on this in the next few days.  I may have some questions for you.\n\nOn Mar 14, 2013, at 11:15 AM, Julien Portalier notifications@github.com wrote:\n\nI just updated the gist: tests are running, passes/failures counters are updated, and errors are reported, but the full report still won't display.\nI guess a console reporter is required to run tests through phantomjs?\n\u2014\nReply to this email directly or view it on GitHub.\n. It looks great! =) What can I do to help?  I probably won't have time to get everything setup with angular until this weekend though.\n\nOn Mar 14, 2013, at 7:25 PM, Julien Portalier notifications@github.com wrote:\n\nHere comes a proper integration: ysbaddaden@099e4a0\nProper tests are lacking. There are just basic tests for Teabag.Spec and Teabag.Suite\n\u2014\nReply to this email directly or view it on GitHub.\n. It's hard to test your test runner using your test runner. Heh. I had to do soom backflips in some places to get as much as I could test.\n\nSubmit a pull request.  I can write a few specs now that the required assets are there. Right?\n. Thanks again for this addition!\n. So this is likely because Teabag does some setup to Jasmine initially (specifying reporter, etc), and requiring jasmine again would overwrites that setup.  Understandable mistake, but yeah, not really a fixable one. =)  Thanks for the info -- I tagged this appropriately and will leave it around.\n. @kenglishhi, the name is based on the association with the Jasmine library.  The Jasmine flower is used to flavor some teas, so this seemed like an appropriate and sensible association to make.  Also, Mocha could be considered a \"tea\" by some serious coffee drinkers.\nSome background -- I was going to use this image as the logo, and the photographer allowed me to do so, but it never quite fit into the designs. http://goo.gl/f6Kay\nAs far as the urban dictionary definition goes, you may want to block urban dictionary or turn safe search on within google -- the only thing we can do to combat that issue would be to become a more popular definition, as a name change is not likely.\n. I actually like the kettle suggestion (I generally like the word), but as I said, a name change isn't likely simply because the association is a non-issue from my perspective. Look, it's understood that Teabag is a euphemism, but it's just as telling that there's such a juvenile level of humor in our industry. I'm not trying to be harsh here, but it's a bit silly, right? Am I crazy?\nI left this issue open so people would see my explanation and the real association if they were in question.\nOne can make literally anything into a euphemism, and that's not the intention with the name of the project. Sure, get a chuckle out of it, but we also have to respect that our industry has all genders, cultures, orientations and backgrounds. Teabag isn't making light of that because any inference is solely on the individual making it.\n. @monkseal aka @kenglishhi -- really, the word Erector[http://www.thefreedictionary.com/erector], a totally legitimate english word, and century old toy for children offends you?\n. I'm sorry you work with people who aren't sensitive and who can't behave like grown ups, and I'm sorry you don't feel like my several attempts at clarifying the issue are sufficient for you to not post childish comments. I've already clarified that I named the project after a bag of tea, not what you describe. One is a noun, and one is a verb. Now grow up --  I'm not down with you posting crap like this to (I can only assume) get your rocks off.\n. @bigtunacan I've also reported your comment with github as being abusive and inappropriate.\n. 1. I don't think you can read -- because I say that myself up at the top of this long thread.\n2. You're offensive -- bigtunacan[urbandictionary.com]\nNow, taking into account how insensitive and offensive the name you've chosen to code under is, that it doesn't matter what I say.. you'll continue to be juvenile and offensive. I'm done here.\n. Oh, so you're suggesting I name it Testacular now that that name is available? Pfff.\n. I've discussed with coworkers and one suggestion was Steap -- does anyone here have issues with that? I'm not saying that there's a name change in order, I have to sleep on it and consider just how inappropriate the comments posted here tonight were. I'm disappointed in the community for not understanding, or caring enough, to see that it's not an inappropriate name.\nLiterally, this makes me sick, and I think people like you @bigtunacan are the problem, not a useful and well written and thought out project. If I had a solution for fixing people like you man, I would employ it. I don't care what you say about your nick, I find it offensive, no matter what you say to \"clarify\" it. You're sad.\n. @bigtunacan Since you deleted your comment, I figured I'd provide the screen shot that I reported you for.. I stand behind what I say, and I don't delete my comments, and I think it's revealing of your character that you would delete it.\n\n\n. @ngan thank you, I appreciate your comments. =)\n. @bigtunacan I don't understand why you try to clarify your stance when you don't show the respect to understand mine. shrug, I proposed a name change, but you failed to respond to that. You failed to read my thoughts and reasonable responses on the matter and bullied through an argument that's ridiculous, you failed to notice that I'm open to a name change -- even in light of your rudeness and inappropriateness, and you failed to contribute anything useful in general to the conversation. You failed.\n. @bigtunacan thanks.\n. Some alternatives provided today:\n- BagOfTea (no urban dictionary entry, no gem with this name)\n- Teasac/Teasack (no urban dictionary entry, no gem with this name)\n- Teaball (urban dictionary entry, but as @bigtunacan claims the number of upvotes matters -- has 1 upvote, no gem with this name)\n- Teaspoon (my personal favorite, has an urban dictionary definition, but again only a few upvotes, has a gem named this).\nAt this point Teaspoon is all I would accept, but we would need to try and acquire the name from: http://rubygems.org/gems/teaspoon\n. It's a spoon of a specific size and shape that is used to measure and stir tea.\n. @bigtunacan I'm hoping you can take care of trying to open up the namespace?  If you can CC me on the conversation with the author that would be awesome. Thanks!\n. Awesome, thanks @bigtunacan. I'm ready over here, and the new repo redirect stuff that the github team added last week (https://github.com/blog/1508-repository-redirects-are-here) should make that easy.\n. Of course, we'll take care of releasing and all aspects that entails. I would accept a pull request with the name change. Teaspoon (no camelcase for the namespace) / teaspoon (lowercase for cli/routes/etc). We'll also have to rename the guard-teabag project.\n. Just waiting for a pull request. I figured it was an opportunity.\n. @adityamenon I don't think you have anything to apologize for -- I think what you contributed was actually quite eloquent in contrast. =)\n. No worries, I appreciate the work, so thanks. I consider it in my court now, and the timing will probably have to be sometime over the weekend.  I'll keep you posted.\n. I updated the wiki and other things (screenshots etc.)  It would be useful if some people go through the upgrade process -- first using bundle update teabag to ensure that the deprecation notice is there and useful,\nThen changing your Gemfile as suggested, running teabag vs teaspoon as both the rake task and bin command to see the notices there and see how it behaves.. I provided those so it doesn't immediately break CI setups, since people will have to update their rake tasks on them potentially.\nChances are you'll have to update your initializer first, but I did add some help for migrating the teabag_env.rb to teaspoon_env.rb.\nIt's be interesting to know what you encounter, so we can potentially add that to the readme.\nI also wanted to clarify that I don't believe Teabag is an inappropriate name, and that it's more telling of the maturity level in our industry in general. I can say Teabag in front of anyone with a straight face, either as the name of a project, or when I'm steeping my tea, and have come to believe that it's a litmus test for an individuals personal maturity, but whatever, it is what it is.\nPerhaps the experience can shed some light on that and have us all move forward with a better knowledge and awareness of how we as individuals, and as a community address these things.\n. I have an 8 year old step daughter (and 10 year old step son) -- neither believe that programming is at all related to gender. I've been teaching both of them how to program and at a more basic level, how to think through problems logically.\nSorry to the people who are put out by the name change, and as @randallb suggests, this conversation should stop here.\n. @bigtunacan, thanks for taking the time to do that -- and this is also the reason I think the conversation should end.\nYou put the time in to fix the thing that you took issue with, so I consider it done and over with. My bad for letting it get a bit flame-ish in the first place, so you have my apologies.\nNow, it's been renamed, that's the reality.. let's all move on with contributing good things for the community -- this thread is now detracting from it.\nThanks all, now go have some Tea!\n. :+1: would merge.\n. Thanks man!\n. Can you explain why this is needed?\n. It's currently a limitation of phantomjs, but let me know more -- what version of phantomjs are you using?\n\nJeremy Jackson\nOn Mar 23, 2013, at 11:56 PM, Ngan Pham notifications@github.com wrote:\n\nMy spec pass when they are run in a browser but they fail on console with rake teabag and phantomjs.\nI'm trying to debug the issue...but the trace isn't very helpful...\n1) Foo submits form when uploading\n     Failure/Error: ReferenceError: Can't find variable: page\nThat's basically all I get...no file and line number.\nAny tips on getting better traces? Or is this a limitation of teabag/phantomjs?\n\u2014\nReply to this email directly or view it on GitHub.\n. Try installing a system version.  If you're using brew: brew install phantomjs\n\nThen make sure it's in your path (teabag uses the system one first).  The gem is current, but phantomjs is older in the gem.\n\nJeremy Jackson\nOn Mar 24, 2013, at 12:21 AM, Ngan Pham notifications@github.com wrote:\n\nphantomjs-mac (0.0.3)\nphantomjs.rb (0.0.5)\n\u2014\nReply to this email directly or view it on GitHub.\n. I agree with @gvarela -- so you don't really uncomment the require.\n\nhttp://guides.rubyonrails.org/asset_pipeline.html\n. This is something that we would take as a pull request -- if you ever need it.\n. It looks like it fails outside of teabag.. I would expect it to fail because phantomjs clearly fails to start, but it's not.  Hmm.  I'll have to try and make phantomjs bomb and see.  Is there any way you can give trying to figure it out a shot? As it's not going to be easy to replicate...\nAlso, you may want to install phantomjs -- I expect that would fix the actual issue you have.  There's a wiki article about Linux/phantomjs.\n. Thanks man!\n. I like the addition and will merge it.. can you double check the failure on CI -- seems related.\n. Please do, I would like to merge this. =)\n. Yup, I'll look into that.\n. The failure was due to poltergeist -- switched back to webdriver and fixed it.\n. Thanks for this addition.\n. Cheers!  Thanks for this fix, I learned something new. =)\n. Yes, we would.\n. Thanks for your other pull request.. I'll try and get to fixing the build this weekend and get the pull requests merged in.\n. The build is fixed.  Are you planning on doing this?\n. This is in now btw. Thanks to @trevmex.\n. I honestly don't know. I assume you could just write specs however you wanted.  That's sort of why the issue is here -- in case someone wants to own it -- since I haven't yet had the chance to use angular.\n. Awesome.  I think our next project here at the office will use angular, so hopefully that will allow us to understand it better.\nI assume you're on Rails 3.2.13? The slow loading is a regression in that version of rails, and I provide a link to fix in another issue. Annoying, but solvable.\n. That would be awesome. please do. =)\n. Nice! I have no idea, so I'm deferring to your judgment. =) Thanks for the information.\n. So, I don't use angular for anything -- I want to, but I haven't had a project where it made sense, so until that point it's really hard for me to do anything for it.. I don't fully understand it, so I'm not a good person to tackle those challenges. I'm hoping someone will step up and embrace maintaining that.  If someone shows the acumen needed, I'd make them a collaborator.\n. Notice: I will do my best to get to this, but it's rather hard since I have't used angular yet.  If this doesn't get attention from myself or someone else in the next week I'll be removing it -- and then someone can work with me to get it back in fully -- and properly.  I have higher standards than what's currently provided, and I'm unwilling to leave it linger in the state that it's in.\n. Removed angular support a while back and nobody has said anything. Updating wiki to remove it.\n. Spring came up the other day for rspec and rake, and it was pretty slick.. I was considering adding support for that in spring directly, but haven't landed anywhere on that.\n. The other thought I had was this. Throw this in your teabag_env.rb:\n``` ruby\nmodule Teabag\n  class Server\n    def start; end\ndef url\n  'http://localhost' # or something.dev if you're using pow\nend\n\ndef find_available_port\n  '3000'\nend\n\nend\nend\n```\nThat gives you the behavior you're looking for -- because I'm not sure how to accomplish this feature without making things considerably more complex.. eg. port, url, etc.. how would one configure that easily?  If you wrote that to use ENV vars it seems like something your entire team could use, but unless you have a convincing argument it seems outside of what Teabag should worry about.\n. Seems reasonable. Might look into it.\n. It's worth mentioning that you won't need to require rails from within your teabag_env if you take this route.\n. That's not entirely true, but I expect you can work around that fairly easily.  I will look into this more for a proper solution.\n. I plan on doing this shortly.. but I'm pretty focused on another project at the moment -- the reason I wanted Teabag for to begin with.  You're right though, it's a rabbit hole, and I think using things from active support instead of all of rails will make it better and more reliable for things like this in the future.\n. I take that back, I probably won't be able to do this at this point.. maybe at some later time.\n. Ah, so it's looking for phantomjs, using a sort of \"which\" type of functionality.. I expect the error is coming from this, but I'm not sure: https://github.com/modeset/teabag/blob/master/lib/teabag/utility.rb\nIs phantomjs in your path?\n. Awesome, thank you!\nAs an aside, I have a javascript project called Mercury Editor, and the level of questions/support needs between people writing specs for their projects vs. people wanting to use a javascript library is considerably different. It's really rewarding to support a project for folks that read documentation and are able to clarify issues. Cheers! =)\n. with jasmine you can disable the try/catch, which lets the browser handle the stack trace.  In chrome you can use this to jump to code lines.\n. You can speed everything up by disabling the progress, and full reporting.. I've only observed this on safari using mocha, but yeah, it does exist -- the progress is using canvas to draw the circle and safari doesn't like the speed at which mocha is reporting specs.\nDoes this sound familiar?\n. I would assume looking at resource response times in your browser would help identify what's responding slowly.  Can you provide a screen or paste of the asset load times as provided by your debug tool?\n\nJeremy Jackson\nOn Apr 22, 2013, at 2:43 PM, Jed Schneider notifications@github.com wrote:\n\nI missed the original comment on this in my inbox. probably not related to loading tons of assets. sorry.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yeah, so, teabag forces debug to false when run from the command line because the asset pipeline handles file load errors (404s) differently, and to be able to display those errors in a useful way in the console it needs to tell javascript there was a 404.\n\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/console.rb#L13\nThis is a shortcoming of how that's handled in sprockets-rails, as it should really be two configs and not one. So that's relavant, but potentially not related.\nThe helper you link to is another hack to fix bugs in sprockets-rails as well -- I submitted a patch for that, which was accepted, but until that's in the wild and reliably used we still need that (I think rails ~3.2.13).  You're welcome to override that helper method for your own case, but sadly because of how sprockets is setup and integrated with rails we need to do that hackiness -- for now at least.  If you're not using the code coverage features and are on something > 3.2.13 you're probably good to just call through to javascript_include_tag -- don't quote me on that though.\n. Also, it appears Jed was correct -- even though you have a small spec, if you're requiring all of your assets for that single spec it's going to be bad.\nA better approach might be to have your spec require the file that's being tested, instead of requiring application.js.. This is why I think putting //= require application.js into the spec helper is a horrible horrible idea.  Take a look at this project for how you should setup your specs:\nhttps://github.com/jejacks0n/mercury/tree/mercury2/spec\n. Too many questions\u2026 first -- this is why we need the javascript_include_tag hack:\nhttps://github.com/rails/rails/pull/8735\nhttps://github.com/rails/sprockets-rails/pull/33\nAlso -- a fix for Rails 4:\nhttps://github.com/rails/rails/pull/8712\nSo, as you can see, to get around both of those bugs we had to wrap our own.. sadly, they were major deal breakers for functionality.\nTo answer your other question it doesn't do anything with the debug configuration when you're not running it from the console, and as you can see, I've done plenty to try and get things fixed up so we can use it reliably and with the support we need.\nI've closed the issue because it's not something we can fix -- I understand you may find the lack of concatenation a problem, but I've already proposed a solution -- if redefining javascript_include_tag_for_teabag to call through to javascript_include_tag is too much of a pain, I'm sorry, but pass the blame to sprockets.\n. I explained that it's a combination of bugs in previous versions of rails and because of instrumentation / code coverage reports.\nLooks like you solved it, so like I said before, if you don't care about coverage reports and you're above 3.2.11 you're fine.\n. And you're right, the shorter hack is nicer, but it doesn't work on previous versions of rails and it doesn't have support for coverage reports. =)\n. No worries.\n. You ran the generator and haven't modified your teabag_env?\n. Well, it looks like active_support isn't being required before the configuration is being loaded.. if rails is being required before, which is how it works for every case I've ever seen, you wouldn't be seeing that.\n. So the answer to the problem is to ensure that rails is being loaded.. is there anything odd with your setup?\n. Your server isn't starting.. does it start when you run rails server?\n. Thanks for the info!\n. I'm curious about this.. I assume you have some time to dedicate to it since you're asking.\nTry this:\ncopy this view https://github.com/modeset/teabag/blob/master/app/views/teabag/spec/runner.html.erb into your project and replace the javascript_include_tag_for_teabag calls with javascript_include_tag (removing the options for the second call).\nDoes this improve the speed, and if so, by how much?\nThanks.\n. fail how?\n. Are files being loaded more than once?\n. So, I assume you're on something less than rails 3.2.11.  Can you confirm?\n. This has been a thorn in my side, but here's some background / where I fixed that in Rails.. I think it made it in version 3.2.13.\nhttps://github.com/rails/rails/pull/8735\nI also fixed it in sprockets-rails for Rails 4.  You can see that what I had to do in Teabag is total crap, but required for assets to be loaded correctly.  If the three seconds matters enough to you, you can use the manifest style in your spec_helper -- which makes it more like jasminerice, replace the helper to call through to javascript_include_tag instead of the hackery it does now, and be careful not to ever double require a file.\n. Please also check https://github.com/modeset/teabag/issues/57\n. Thanks for the info.. it's a bummer, but I will eventually be able to remove the hacks that are in there.\n. It was also brought to our attention that rails 3.2.13 has a regression where asset loading is way slowed down.\nYou can read more and find a solution at http://stackoverflow.com/questions/15501354/what-causes-the-extreme-slowness-when-changing-from-rails-3-2-12-to-3-2-13\n. Looks great, thanks a ton.\n. Awesome!  I don't use require.js, so this is helpful.  Can you do two things for me?  Squash the commits so its easier to review, and update the docs/wiki to help others get a good understanding of how to do it now.\n. Can you update the docs/wiki so there's not any lingering confusion about that? Thanks again for the work!\n:+1: \n. Hmmm, I expect your hypothesis is correct.  I'm not sure how a post might work, but I don't really love the idea.  Could a different suite (even a temporary one) do what you're looking for?  You can even use a file matcher to simplify the list if it's applicable.\n. Why do they have to be different every time, out of curiousity?\n\nJeremy Jackson\nOn May 1, 2013, at 5:20 PM, Ngan Pham notifications@github.com wrote:\n\nCan you explain the \"temporary suite\" concept? Basically what I'm trying to do is distribute my javascript specs across multiple machines and I need certain machines to run certain files. The batch of files each machine runs is assigned on-the-fly every time, so there's no way for me to batch them in suites. Unless there's a way to quickly and temporally allocate certain files to a suite and run that temp suite.\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmm, ok, seems sensible for sure.  Let me think on it.  Seems like something that would be nice to add.\n. @Ngan, so a hypothetical issue isn't really an issue imho.. You're welcome to address this how you want, and it will get merged if the tests and implementation look solid.\n\nWe also didn't include support for Netscape Navigator but would happily take a pull request for it should someone need it.\n. Well, it looks fine, but the thing is that it complicates things for an addition that nobody really needs yet.  I'd say keep it in the gist there, but link to it on a wiki page so others can benefit from it should they need it -- but it feels like putting it in isn't worth it at this point.  Thoughts?\n. Assumed you've linked to the gist in the wiki, so closing.\n. Yup, that's true, and they shouldn't be there.. So, I specify in the gemspec that it should include the spec directory, but in this day and age, I would assume someone to pop into the repo here to see specs if they want to know more about it.  Thanks for the heads up -- I'll remove it for the next release.\n. No worries, it should be fixed in the next release. =)\n. this should be fixed in 0.7.8.  Thanks for the heads up.  It was including all the logs/tmp etc. from the dummy app in specs.\n. Well, to add coverage Istanbul must generate a file with instrumentation, and you probably don't want those hanging around.  I've not ever checked it on windows, so the path replacement that happens in the report might need a fix?  Since I don't use windows it would be great if you/someone could check it out.  Look at the lib/teabag instrument.rb and coverage.rb files -- we may not be doing an OS safe path regexp in coverage, or it could be where we add instrumentation.\n. Yes, in instrumentation.rb, in the process_and_instrument method.  Looks legit to me, so I'm not sure what would be going on differently on windows.  One using / and another using \\ I would assume though.  Note the path replacement in there.\n\nJeremy Jackson\nOn May 15, 2013, at 9:57 AM, Derk-Jan Karrenbeld notifications@github.com wrote:\n\nI understand how that happens then.\nIt's not only in the report, it's also in the console [which is where the report gets its data from off course]. What should I look for? Needless to say, on UNIX-based systems ( the rest of my project ) the folder structure is maintained, where on windows it is completely flattened.\n\u2014\nReply to this email directly or view it on GitHub.\n. Awesome!  Thank you. :+1: \n. I'd like to get a fix for #66 in the next release.  If I don't have time for that this weekend I'll release sunday/monday regardless.\n. Closed as a duplicate of #40 \n. Looks good, thanks! :)\n. I don't have a solution for you -- the RequireJS support was added by @inlineblock, but aside from that, I don't believe the current gem (0.7.2) has that in it yet. As a rule of thumb, it's always good to check master. Also, you don't need jasmine -- the javascripts come with Teabag\n\nTry pointing your gem to github instead of the release and let us know how that works out.\n. It's pretty tied to activesupport, which is a bummer and a regret.. At some point it would be nice to remove some of those things, but yes, at this point it's pretty tied to rails/activesupport/railties.. I agree that it would be nice to use in sinatra, but the project wasn't written to attempt to solve the issue for everyone and is more about testing assets in rails -- my development environment.\nIt was released, and is open source, so you could fork it and go about making this happen, or you could take the code as a learning tool and adapt it in your own ways to provide a good solution for sinatra.\nI also wanted to keep the installation simple -- falling somewhere between a braindead simple setup, that can expand to a more full feature test setup, and having different installation steps / dependencies based on framework only makes that more complex. Sorry man.\n. How about this.. When I have time I'll try and strip down so it works better without rails -- this needs to happen so people can use their own servers in general (and is valuable to us as well).\nAfter that it should be easier for you to figure out what needs to happen for it to be useful in a sinatra app. Thoughts?\n. This all looks good, but can you adjust the suite_spec?\n. Cheers! Have a great weekend. =)\n. Thanks for the offer! =)  There's one that I've been meaning to get on so I can release 0.7.2 -- but it's a little involved and may require a windows setup/vm. I haven't had the time to set something up to check that the fix works.. you could probably take a crack at it without windows though maybe?\n66 could probably be fixed by doing some path tweaking on https://github.com/modeset/teabag/blob/master/lib/teabag/instrumentation.rb#L49\nI think the problem is that windows uses \\ for path parts, and everybody else uses /, but I'm not positive.. seems like it should work as is, but it's not.\n. If you felt like taking that on, it would be rad.. I could release the gem as soon as you thought it was fixed, but this isn't intended to feel like an obligation. =)\n. Good call, thanks. =)\n. Blah, thanks for that.\n. Teabag doesn't do any of the coffeescript conversion for you and relies on the asset pipeline that Rails provides.. can confirm that you have coffeescript setup in Rails -- eg. \"gem 'coffee-rails'\" in your Gemfile?\nAnd that you can load a converted coffeescript file as js in the browser?  Try loading one of your coffeescript files in  by the url (/assets/your_file.js) and see if it serves it.\n. no, you shouldn't.. is it serving files from that path at all?\n. It should be adding /test/javascripts to your asset paths:\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/configuration.rb#L10\nwhich is then added to the asset paths in the engine:\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/engine.rb#L11\nCan you confirm this is happening?\n. Try /assets/my_test.js\n. No worries, thanks for the follow up.\n. This doesn't seem to attract much attention, so closing. Still welcome to accept pull requests.\n. Don't require expect -- it's a different library, for those that don't want to use chai.\n\nJeremy Jackson\nOn Jun 21, 2013, at 5:25 AM, Jean-Denis Vauguet notifications@github.com wrote:\n\nHi,\nUsing teaspoon and\n= require support/chai\n= require support/expect\nI end up having weird errors such as Object # has no method 'throw' coming from an expect(fn).to.throw Error (which passes under Konacha, for instance). Some other chai helpers are \"missing\" as well, such as instanceof. The majority of them are present, though\u2026 so it's kind of weird.\nI'm feeling this could be more a chai-related issue, but you may have encountered the issue already.\n\u2014\nReply to this email directly or view it on GitHub.\n. re: Chai 1.7.0 -- I updated it 5 days ago, but to 1.6.1.. feel free to submit a pull request.\n. Thank you for figuring it out.  Much appreciated.  Do you want to submit a pull request?  I may not have time this week.  Sorry!\n. Cheers!  And also good to know.\n. Thanks!\n. I appreciate all the work you've been putting in. =)\n. Those are from console.[debug|log|info] lines in your javascript. We output that stuff so you can see them for debugging, or just to catch ones you didn't intend to leave in.\n\nYou can turn this off in the configuration, but I find it useful to have.. What I usually do is create a global log/trace method ... here's an example \nhttps://github.com/jejacks0n/mercury/blob/mercury2/lib/javascripts/mercury/core/logger.coffee#L9\nThen I can stub that for my specs (in spec_helper), and I can catch any console.log that made it in unintentionally that's not using the proper logging method that I've provided.  console.log can cause errors in older browsers, so leaving them around can be bad.\n. Word!\n. try:\n``` ruby\nrunner = Teaspoon::Console.new\nrunner.execute(suite: 'editor')\n...\nrunner.execute(suite: 'app')\n```\nThis will use the same server, and not wait for anything to start.\n. I'd be curious to understand why you're using it that way though.. why not run via rake?\n. Yes, so for a proper answer.. It's there in case someone overrides console in their specs.. without console.log the phantomjs console reporter can't report -- that log output is what's processed by ruby.\nHowever, the selenium driver does it differently -- it collects the messages and pulls them from selenium at a set interval.\nAnyway, yes, that probably could be adjusted, but I struggle to see how to do it easily.. I'd say a shim in your spec helper is probably the best solution for the time being..\njavascript\nconsole.log = console.log || function() {}\nInterested in your thoughts.. if you look into it more you'll see what I mean:\nselenium driver:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/selenium_driver.rb#L20\n. that shim is only an example.. chances are you'll have to define console as an object first.\n. What seems to be blocking it after that?  I'm assuming it would be the progress (which uses a canvas) -- which can be turned off.\n. I updated the config to allow passing through json.. Check that out -- I figured it might be a useful first step for accomplishing this sort of thing.\n\nJeremy Jackson\nOn Jul 20, 2013, at 5:48 AM, Tom Meier notifications@github.com wrote:\n\nHi @jejacks0n , Sorry, I got slammed at work, I'll hopefully have a chance to dig deeper into this soon (not forgotten).\n\u2014\nReply to this email directly or view it on GitHub.\n. Yes, sort of. If it's run via CLI using selenium+ie it would simply not generate any output. That fail is there because it technically can't use anything that doesn't have console.log when run via CLI.\n\n\nJeremy Jackson\n\nOn Jul 14, 2015, at 3:36 PM, Mike Pack notifications@github.com wrote:\nI didn't realize you were running IE8 tests from the CLI. I think what's happening here is that Teaspoon attempts to console.log, it fails, and Teaspoon throws an exception. IIRC, IE8 just stops executing all future JS after encountering an exception. This seems like the offending lines:\ntry console.log(arguments...)\ncatch e\n  throw new Error(\"Unable to use console.log for logging\")\nI would imagine the error being thrown is because it's fatal in most browsers not to have console.log when running on the CLI, but this is not the case with Selenium-driven browsers.\n@jejacks0n do you think failing silently here would cause us other headaches? eg:\nconsole?.log?(arguments...)\n\u2014\nReply to this email directly or view it on GitHub.\n. Good point. How do the messages make it into Teaspoon.getMessages? I honestly don't recall and can't easily check.\n\n\nJeremy Jackson\n\nOn Jul 14, 2015, at 9:14 PM, Mike Pack notifications@github.com wrote:\nExcept for Selenium, which polls for Teaspoon.getMessages(), no? Doesn't seem like a need for console.log there.\n\u2014\nReply to this email directly or view it on GitHub.\n. Sweet. :+1:\n. Thanks!\n. Browse to /teaspoon in your browser.  Look at the console to figure out why files aren't being loaded.\n\n\nJeremy Jackson\nOn Jul 22, 2013, at 4:22 PM, Devin Walters notifications@github.com wrote:\n\nAny ideas?\n\u2623 (solo)> rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:49295/teaspoon/default\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:12\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:50\nReferenceError: Can't find variable: jQuery\n  # http://127.0.0.1:49295/asset-detail/mini-profiler-resources/includes.js?v=e777c6e0fdfb9a725e857c8ca3eab18f:897\nError: Failed to load: http://127.0.0.1:49295/teaspoon/default?reporter=Console\nrake aborted!\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/teaspoon-0.7.4/lib/tasks/teaspoon.rake:4:in block in <top (required)>'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:ineval'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:in `'\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n\u2014\nReply to this email directly or view it on GitHub.\n. Also jquery isn't part of teaspoon, so I'm assuming your stuff is broken or not compiling correctly.\n\n\nJeremy Jackson\nOn Jul 22, 2013, at 4:22 PM, Devin Walters notifications@github.com wrote:\n\nAny ideas?\n\u2623 (solo)> rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:49295/teaspoon/default\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:12\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:49295/teaspoon/default?reporter=Console:50\nReferenceError: Can't find variable: jQuery\n  # http://127.0.0.1:49295/asset-detail/mini-profiler-resources/includes.js?v=e777c6e0fdfb9a725e857c8ca3eab18f:897\nError: Failed to load: http://127.0.0.1:49295/teaspoon/default?reporter=Console\nrake aborted!\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/teaspoon-0.7.4/lib/tasks/teaspoon.rake:4:in block in <top (required)>'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:ineval'\n/Users/dmw/.rvm/gems/ruby-1.9.3-p194@unisporkal/bin/ruby_noexec_wrapper:14:in `'\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you joking?  It's the namespace and is used all over the place.\n\nMy bet, since it works for almost everybody, is that you have a javascript or coffeescript syntax error that breaks execution.\nI can't be more specific with the steps required to identify what's wrong.  Files not loading, bad syntax, etc.  the place where it tries to access teaspoon for the first time outside of js is in the view. That's probably where it's failing, because it never gets defined , because there's a problem in the scripts before teaspoon loads.\n\nJeremy Jackson\nOn Jul 22, 2013, at 5:41 PM, Devin Walters notifications@github.com wrote:\n\nCould you be more specific? Where is it looking for that var?\n\u2014\nReply to this email directly or view it on GitHub.\n. Have you opened it up in the browser like I've mentioned?  http://localhost:3000/teaspoon\n. Do you have a basic Teaspoon install? Is the spec_helper loading what it's supposed to? What have you changed about the script files being loaded? This usually only happens if your server is failing to load js files, which is outside the scope of what I can easily help with.\n. comment out your suite.javascripts = [\"support/expect\", \"support/sinon\"] -- read the comments there, and then note that those files are also required by your spec_helper.\n\nload /teaspoon up in your browser and see if it loads.. if you see errors in the console you've done something else wrong.\nAlso, why are you using selenium?\n. The readme includes this, right?  Is there a way I could make it more clear?\n. Love it!  Will check it out tomorrow, but looks good.  We've been meaning to do this as well, but it's complicated with knowing which suite to load for a given spec/specs.\n. Thank you, I didn't feel up to fixing it today.\n. Everything in coffeescript is wrapped within a closure.  To get something \"globally\".\nso like\ncoffeescript\nwindow.fixture = window.navigator = null\nOr something, based on your needs.\nDoes that help?\n. As an aside, I don't use window unless I specifically need to.. often times, at the top of a file, or in my case a spec helper, I use the this identifier (which inside a top level coffeescript closure, is window):\n(this is psuedocode based on what you're trying to do -- I don't actually recall what getCurrentPosition actually returns)\ncoffeescript\n@navigator.geolocation = {getCurrentPosition: -> setTimeout((-> [-36.0, 150]), 1)}\nYou can check the spec helper for mercury2.\nAlso, phantomjs isn't anything crazy, I picture it as a compiled version of safari that doesn't have any GUI.. it's rendering content, just into a buffer or something -- you can screen shot the rendered output if you want, and you can debug the dom etc.. so if you picture it as a browser that you don't have to look at, that's about as accurate as you could be.\n. related, since @jayzes asked:  https://github.com/ariya/phantomjs/wiki/Screen-Capture\n. Teaspoon has fixtures.  Have you tried using a fixture?\n. Have you read up on it and does it make sense how you could use it?\n. It's just an element that teaspoon helps you create.. you're familiar with the DOM? a fixture is simply an element that you can put elements/content within and teaspoon provides an api to do that and check it nicely.\n. It already works this way.. It will attempt to locate a phantomjs bin within your path, and uses that one if possible.  \nIt installs the gem for people who don't care to understand how to install phantomjs so they don't have to worry about it, but those that care, can install phantomjs manually to get a more recent version.  The down side is that teaspoon installs the phantomjs gem even if you don't want it (which is large).\nI wanted to see what people thought, but the reporting is skewed a bit because only those with a relatively advanced understanding would care.\n. That's a valid point.  I was unaware of the dependency issues.  I'll remove it shortly and update the docs.\n. It's a rails config thing.  Check dev asset config vs test/production.\n\nJeremy Jackson\nOn Aug 7, 2013, at 7:34 PM, Emerson Lackey notifications@github.com wrote:\n\nHowdy,\nI like the idea of running my javascript integration tests against my test database which has all my fixtures in it. I can easily boot up the app in the testing environment by using the rails s -e test command - and the browser based teaspoon tests work great. However, it appears that my javascript is cached, and in order to reload all the tests I need to kill the server and restart it.\nDo you guys know of any way to reload my javascript every request within the test environment? Is this a Rails thing or something that needs to be adjusted within Teaspoon itself?\nAny help would be much appreciated.\n\u2014\nReply to this email directly or view it on GitHub.\n. Relatively soon.. I find it hard to release immediately after a merge of a pull request.. hit it up again in a few days.\n. Yup.\n. Should be released as 0.7.5.\n\nbundle update teaspoon --full-index should work for you now.\n. Can you access it directly in the browser when your server is running normally (http://localhost:port/teaspoon)?  eg. not via the command line tools.\nOn Aug 8, 2013, at 8:32 AM, Dimitrios Arethas notifications@github.com wrote:\n\nHello everyone,\njust seeing if anyone has had success running teaspoon with an ssl rails server. I see that there is a CLI option to pass to phantomjs, but my issue is I cannot go to localhost/teaspoon due to a malformed http request (ssl I am assuming). Are there any extra configuration options I can set for using teaspoon with ssl?\nusing jRuby 1.7.4 with 1.9.3 engine\n\u2014\nReply to this email directly or view it on GitHub.\n. Which SSL protocol are you using?  Check the docs for phantomjs (search for ssl).\n\nAdditionally, if PhantomJS isn't working for you, you could try the selenium-webdriver. \nhttps://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n. I think you're not using Teaspoon for what it's intended for.\nYou should consider using a more BDD style approach for something like that -- eg. cucumber-rails, or rspec features.\nTeaspoon isn't meant to test your pages, it's meant to unit test your javascript.  If you need more clarification on how to use teaspoon please refer to the Quick Start Walkthrough.\n. I initially hardcoded this value to three minutes (180 seconds I think), but there are some scenarios where Phantom doesn't receive an error and doesn't begin execution (these are rare, but can happen). I added the timeout so in those cases it will only sit there for 3 minutes before registering it as an error.\nIt's likely this is to enable longer running tests.  I remember adding a todo (https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs/runner.coffee#L8)\nSo this completes that todo. =)\n@tmandke, if you could remove that todo line I'll merge.\n:+1: \n. Can you merge master and force push this branch so I can merge this in?\n. Hey, this is a follow up.. do you want to merge master so I can merge this nicely?\n. I'm going to close this and implement something similar.  Thanks for the pull request, and sorry I wasn't able to utilize it.\n. I haven't needed it -- like you say, I typically use chrome for debugging simply because it's easy.. however, there's a pretty interesting opportunity to figure this out.  I did a quick google search and came up with this:\nhttps://github.com/ariya/phantomjs/wiki/Troubleshooting#remote-debugging\nI don't have the time currently to look into it more, but I'll be able to answer some questions if you have any.. I'd bet you can pass that flag to phantomjs (using the driver_cli_options configuration) and see how it turns out.  Would appreciate you sharing your results. =)\n. you can edit the configuration to allow console.log through to std out. if that makes it easier.. also, since things run in the browser, you should be able to use the browser.\n. I expect Jed is correct. I've found that Phantom is pretty dang close to safari -- so another option is to open it up in safari and see if it passes there (and I suspect it will not).\n. To clarify a little more about what Jed explained.. What you're probably seeing here is local caching.  You've probably cached this image locally in your browser so it loads fast enough for this to pass, but PhantomJS being more for testing doesn't have caching like that enabled.\n. There's two states, and I think you're missing one.  There is skipped (I don't care about it) and pending (I need to see this so I don't forget).\nYou're right, jasmine allows skipping tests.  It doesn't allow pending, so we did in fact add the support.  Do you have info I don't have?\n. Haha, no worries.. I think there were two lines, and they can be found here: https://github.com/modeset/teaspoon/blob/master/vendor/assets/javascripts/jasmine-1.3.1.js#L868\nThis lets the reporter understand that it wasn't skipped, but there was no function to execute there, thus no assertions.\n. What version of phantomjs are you using?  This is likely due to older versions of phantomjs not being able to pass exceptions/stacktraces around.\n. If you haven't solved this I'm going to assume it's an issue of the browser/test framework not being able to pass around the exception properly.. this is a complex issue that I (and others) haven't really found a good fix for.  If I'm wrong on this I apologize.\n. I appreciate the work! Thanks. =)\nOne thing -- can you remove the second commit, it looks like a merge that has a bunch of changes from master.  You want to remove that one and rebase master instead?\n. I did the same thing on a rails commit once.. I hated it.  If I had the skills I could probably help, but I don't.. so just be aware that I'm not judging, cause it's happened to me.\n. Cool, thanks. =)  I'll let CI do it's thing and then merge. Thanks again!\n. released 0.7.7\n. Thanks.\n. What version are you on?  That's been fixed for a while now, or that's what it seems like.\nhttps://github.com/modeset/teaspoon/blob/master/lib/generators/teaspoon/install/POST_INSTALL\n. The only guess I have for you is that you have an old version of teabag installed, and when you run the generator not using bundler that may be getting loaded instead of teaspoon? try uninstalling any teabag gem you have.\n. Straight from the docs on http://chaijs.com/guide/styles/\njavascript\nvar should = require('chai').should() //actually call the the function\nit sounds like you'll want to do something like window.should = chai.should() in your spec_helper, but you probably want to read about chai anyway, so I recommend that.\n. I tend to think not, because having to know things like that encourages a better understanding of your test framework -- and while not super important, this type of knowledge is valuable and I'd like to encourage it.  I haven't seen many issues like this, and while handholding is nice, I don't think it's the test runners responsibility to do it.  Make sense?\n. Sure, but understand that there's nothing that teaspoon is doing to expose chai, it's literally only providing the javascript file so you don't have to manually add it to your own support path.. so the chai documentation is correct, if you're using require.js the line would read require('support/chai').should() (which is pretty much what the chai documentation says), and this is the level of understanding that I encourage people to have -- it helps you choose your test framework at a minimum.  if we put too much sugar on top of things like that we're impacting things that a runner should not be impacting.\n. Basically, you would be facing these same challenges with or without Teaspoon, and I think Konacha did a bad thing with doing this for you -- exposed by the issue you're having now.  I want to help people write tests, but I also want them to learn what exactly is happening when they're writing their tests.\n. Definitely value there, since it's caused confusion for more than one.\nIt may just be useful to document in the generator template instead: https://github.com/modeset/teaspoon/tree/master/lib/generators/teaspoon/install/templates/mocha\nYou can update that with whatever examples you think would be useful for mocha.  That would be much appreciated. =)\n. Thanks!\n. Yes, there's code in there for that that used to work in rails 3.2.x, so I assume it must've broken with 4?\nThis was important for that to work:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/console.rb#L13\n\nJeremy Jackson\n\nOn Oct 11, 2013, at 4:18 AM, Nicklas Gummesson notifications@github.com wrote:\nI noticed that if one of my spec files (or spec_helper) contains a faulty require, e.g.:\n//= require broken_file.js\ndescribe(\"My great feature\", function() {\nit(\"will change the world\", function() {\n    expect(true).toBe(true);\n    expect(jQuery).toBeDefined();\n  });\n});\nThen teaspoon yields:\n$ bundle exec rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:61696/teaspoon/default\nError: Failed to load: http://127.0.0.1:61696/teaspoon/default?reporter=Console\nrake aborted!\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/teaspoon-0.7.7/lib/tasks/teaspoon.rake:5:in block in <top (required)>\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n$ bundle exec rake teaspoon --trace\n* Invoke teaspoon (first_time)\n* Invoke environment (first_time)\n* Invoke db:load_config (first_time)\n* Execute db:load_config\n* Execute environment\n* Execute teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:61715/teaspoon/default\nError: Failed to load: http://127.0.0.1:61715/teaspoon/default?reporter=Console\nrake aborted!\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/teaspoon-0.7.7/lib/tasks/teaspoon.rake:5:in block in <top (required)>'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:236:incall'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:236:in block in execute'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:231:ineach'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:231:in execute'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:175:inblock in invoke_with_call_chain'\n/opt/boxen/rbenv/versions/2.0.0-p247/lib/ruby/2.0.0/monitor.rb:211:in mon_synchronize'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:168:ininvoke_with_call_chain'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/task.rb:161:in invoke'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:149:ininvoke_task'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:106:in block (2 levels) in top_level'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:106:ineach'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:106:in block in top_level'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:115:inrun_with_threads'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:100:in top_level'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:78:inblock in run'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:165:in standard_exception_handling'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/lib/rake/application.rb:75:inrun'\n/Users/viddo/src/project/vendor/ruby/2.0.0/gems/rake-10.1.0/bin/rake:33:in <top (required)>'\n/Users/viddo/src/project/vendor/ruby/2.0.0/bin/rake:23:inload'\n/Users/viddo/src/project/vendor/ruby/2.0.0/bin/rake:23:in `'\nTasks: TOP => teaspoon\nIs it be possible for teaspoon to give something more useful to identify this kind of error rather than just saying \"Failed to load\"? I would not mind to help out to implement this but wanted to see if this is a known issue, and if there are some efforts to solve this before.\n\u2014\nReply to this email directly or view it on GitHub.\n. Basically if an exception is thrown before the tests starts, teaspoon will display that and exit.  So if you can figure out how to get sprockets-rails to generate the exception (outside of teaspoon) instead of a serving a 404 it will work how you'd expect.\n\nSame goes for coffeescript that can't compile.\n\nJeremy Jackson\n\nOn Oct 11, 2013, at 9:39 AM, Nicklas Gummesson notifications@github.com wrote:\nAh ok, I use Rails 4. I'll see if I can fix this.\nThanks for the prompt answer!\n\u2014\nReply to this email directly or view it on GitHub.\n. @all, please check this by pointing your gem at master -- it at least handles migration exceptions, and I assume all others that happen before making it to the specs controller.\n\nIf possible, and for bonus point (nothing else really), it would be great to check this in rails 3 as well -- to make sure nothing blows up.  If everything works well I'll release it.\n. Try requiring teaspoon/exception_handling at the bottom of your initializer.  This shouldn't make a difference, but I would like to know.\n\nJeremy Jackson\n303-507-6846\n\nOn Oct 22, 2013, at 5:07 AM, Nicklas Gummesson notifications@github.com wrote:\nMore or less same error message as before, but w/o the rake aborted message:\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:62202/teaspoon/default\nError: Failed to load: http://127.0.0.1:62202/teaspoon/default?reporter=Console\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmmm.  I don't want you to have to include that file manually.  Could you privately email me your application.rb and development.rb files?  Assuming you're running teaspoon in the Dev env.\n\n\nJeremy Jackson\n\nOn Oct 22, 2013, at 10:15 AM, Nicklas Gummesson notifications@github.com wrote:\nThat seemed to do the trick:\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:51554/teaspoon/default\nError: Sprockets::FileNotFound: couldn't find file 'broken_file.js'\n  (in /Users/viddo/src/project/app/assets/javascripts/application.js:1)\n  # http://127.0.0.1:51554/teaspoon/default?reporter=Console:1\nError: Failed to load: http://127.0.0.1:51554/teaspoon/default?reporter=Console\n\u2014\nReply to this email directly or view it on GitHub.\n. That would make sense.. the better_errors gem is hooking into the same area teaspoon tries to hook into. I'm hooking into the rails middleware that displays the errors, and if something else is changing that out from under teaspoon then there's not really much to do about it.  In your specific case with better_errors, you're going to have to manually require the file, but people not using better_errors should be fine without it.\n\nThanks much for helping me clarify why it wasn't working for you out of the box.. It may be worth a mention in the wiki or something.\n. That would be nice.  I considered doing it at some point, but have you investigated tapout? \nIt may work to pipe the output out using the teaspoon tap-y formatter, and then using tapout to build something else.\n. there's not an easy way to get the html from the browser to ruby.. we use json in the console reporter, pass it through to phantomjs or selenium, and then use that information in the formatters.\nI'd say it's probably better to provide a custom formatter -- they're pretty simple, and if you look at the existing ones you'll see how they work pretty easily.  I'd take a pull request for this if it makes sense to do so.\n. Cool, I'll be around this weekend -- if you need any guidance. Hit up my email and I can get on skype if you need.\n. I'm closing this assuming that you'll be submitting a pull request. Thanks!\n. I'll have to take a look.  I've never seen it before.\n\nJeremy Jackson\n\nOn Oct 17, 2013, at 2:04 AM, Ivo Wever notifications@github.com wrote:\nI upgraded to 0.7.7 today and am currently seeing the following output when I run bundle exec rake teaspoon:\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:42137/teaspoon/default\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\nafter which the specs are executed successfully.\nI would like to get rid of this superfluous output (I know I don't have phantomjs installed: it is provided by the gem). My goal is to create a situation where a glance at a failed build immediately tells me what is wrong and I don't have to ignore any 'informational' warnings.\nIs there a way to suppress this output by setting an appropriate option? If not, can we consider this a bug or feature request?\n\u2014\nReply to this email directly or view it on GitHub.\n. Phantomjs not in path or something?\n\n\nJeremy Jackson\n\nOn Oct 17, 2013, at 9:01 AM, Gabe Varela notifications@github.com wrote:\nI've seen it on our CI before. \n\nGabe Varela \nOn Thursday, October 17, 2013 at 8:15 AM, jejacks0n wrote: \n\nI'll have to take a look. I've never seen it before. \n\nJeremy Jackson \n\nOn Oct 17, 2013, at 2:04 AM, Ivo Wever  wrote: \nI upgraded to 0.7.7 today and am currently seeing the following output when I run bundle exec rake teaspoon: \nStarting the Teaspoon server... \nTeaspoon running default suite at http://127.0.0.1:42137/teaspoon/default \n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs \n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs \nafter which the specs are executed successfully. \nI would like to get rid of this superfluous output (I know I don't have phantomjs installed: it is provided by the gem). My goal is to create a situation where a glance at a failed build immediately tells me what is wrong and I don't have to ignore any 'informational' warnings. \nIs there a way to suppress this output by setting an appropriate option? If not, can we consider this a bug or feature request? \n\u2014 \nReply to this email directly or view it on GitHub. \n\n\u2014 \nReply to this email directly or view it on GitHub (https://github.com/modeset/teaspoon/issues/122#issuecomment-26509224). \n\u2014\nReply to this email directly or view it on GitHub.\n. I just changed how the gem / phantomjs needs to be installed.. closing this for now until someone can provide more useful information about how to reproduce.\n. Thanks much!\n. So, that's there for two reasons.  The first is because sprockets had a bug (I think this was in rails 3.2.12, and I fixed it there, and in sprocket-rails for rails 4), where in it would load the same file more than once.. so if you required the same file in multiple sources it would load that many times -- often times overwriting things and causing unexpected behavior.  There are other issues here where I go into this in more detail.\n\n\nThe second reason is for stack traces.. if all files are combined into one, the stack traces aren't very useful, but this is up to you to determine.\nWith those things being explained, you're welcome to provide your own layout where you call javascript_include_tag directly.  That's easy, just copy the one from the gem and put it in your own application.  Now that you're aware of the entire picture you're welcome to do whatever you like.\n. I would take a pull request for a generator that copies the layout into the application.. that way I can update the readme to explain this, and how to get around it.\n. Interesting.. Yes, if you could provide a fix or point me to what the fix would be that would be great.\nThat gsub there on line 123 is for windows support I believe.. :-/\n. Eh, it looks great to me.  Thanks much!\nMy only feedback is to try and match the style of specs a little more -- I'm OCD, so the spacing around context blocks in the specs is noticeable.  Regardless, I appreciate the fact that you identified the issue and provided a fix, so I'm willing to adjust myself if I ever come across it later. Thanks again. =)  I'm merging as-is.\n. I appreciate your issue, and I understand what you're saying.. The reason I won't merge this is because jasmine-jquery is a library outside of the scope of Teaspoon, and gets updated periodically (so your changes would be overridden).  It's only included as a convenience.\nA better way to fix this, and to not have to work from your own fork, is to copy the jasmine-jquery library into your own project -- putting it in spec/javascripts/support, you should be able to require it from within your spec helper (as you are now), but it will be your own modified version.\n. If you feel like this should be changed, I would suggest checking here: https://github.com/velesin/jasmine-jquery -- cause I kind of agree with you, but I don't think changing it in Teaspoon is the right place.\n. I changed this a bit, so let me know if that works out.  I hesitate, because I'm not absolutely sure why I didn't require it if rails was defined, but it may have been an oversight?..\n. Thanks!\n. I'd love to see an example.  I'm struggling to understand, but I vaguely get what you mean.. can you mock up a project so I can clone it and see if I have a good solution?\n. Everything looks ok.. It runs locally?  My guess would be that something is wrong with files being loaded or something.. can you make sure you're running it with the master branch?  I did some work for Rails 4 and better exception notifications, so that might help us sort out what's wrong.\n. It looks like rails isn't auto loading the engines controllers.  We don't know why this is the case, but have confirmed that requiring that controller fixes it.  So, the really odd thing is that this happens with consistency when it happens, but only happens on a few projects.\n. Well, I added a \"fix\" for this, but it still seems fishy to me.\n. it now requires the controller that it uses.. it seems like an engine should be able to resolve that, but I suspect some other gem or setup is breaking that.  does it work in your development env?  does it work in test env?  I still don't know the culprit.\n. I fixed it in the repo, so use master.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb#L1\n. @jayzes and I just made a change that will make this better (we hope).  If you're not suppressing logs, then it should display why the server failed to start.. This might be a good place to start to identify.  In our case, it was because we didn't provide the ENV for the secret_key_base, which was keeping things from starting successfully.  Let us know what you see in your logs when you use github: 'modeset/teaspoon' for your gem.\n. @tommoor: check your logs?\n. your rails logs.  are you using thin, out of curiosity?  if you're not, add it to your gemfile and report please.\n. assuming it's working for people now since I haven't heard back for a while.\n. I need to dedicate some time to understanding it.  It's much appreciated though, I just haven't yet. :)\n. I intentionally left this out of the 0.7.8 update, but merged it to master.. we'll see if there's any issues and go from there.  Thanks again, and I never fully understood it. =)\n. Can you explain what you want to solve?  I don't understand your suggestions without more context.\n. Ah, I see.  Yeah, would take a PR with that adjusted as well, and should only impact the layout -- putting the relative root instead of root, right?\n. I'm addressing this in 0.8.. can you explain why this needs to be configurable?  eg. wouldn't it always just be whatever the relative root is?\n. Do you think it's ok to just use the Rails relative URL root config in the few places where it's needed?  I'll make the adjustment for 0.8 if that works for you.  Thanks again for pointing it out.\n\nJeremy Jackson\n303-507-6846\n\nOn Jan 28, 2014, at 12:34 AM, Marek Kowalcze notifications@github.com wrote:\nI think you are right, if Teaspoon has to consider relative root it always should be the same root as in application so making it configurable doesn't make much sense. I've added  Taspoon.configuration.context just to have all path/URL related variable in one place. I guess it should be stored somewhere anyway, but can be read only.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks man!\n. :+1:  I like this, and will merge it when specs are passing. =)\n\nThanks!\n. @rjackson, nope, everything looked pretty good from my review.\nThanks again!  I'm thankful for good pull requests with good specs. =)\n. Well, I'm not sure what the problem is.. I'll take a guess, but I'll also make a recommendation.  First, I'm not saying you're doing it wrong, and I encourage you to try and identify exactly what's happening so we can address it with a fix or solution that others can benefit from. My guess is that the page may be reloaded, or some other thing is changing the DOM without you noticing -- that may not be accurate, but it's where I'd start.. Try a global beforeEach (or whatever) that checks for the element before each test.  You should be able to see when it goes away and narrow down your search.\nI usually don't rely on the DOM to be anything in the test environment -- it's sort of a can of worms in my experience.. instead, I prefer (and recommend) using a fixture for this sort of thing.  And there's a ton of ways to accomplish this.  Where you use $('meta[name=app_id]').attr('content'), you may consider putting that into a method that can be stubbed.  It's sort of a structural thing, and again, I'm not saying you're doing it wrong, but I've found that writing code that can be stubbed easily for tests, not only creates nice clean tests, it also encourages some good design patterns that I've found useful later -- my point being that I don't encourage writing code so it can be tested easily, rather that code that's easy to test is also easy to maintain -- and having that be a method you can stub will make it easier to test, and will probably encourage more structure which can be better in the long run.\n. No worries, thanks for closing the issue and explaining what was happening -- you'd be surprised at how helpful these issues can be for others in the future.\n. https://metacpan.org/pod/release/PETDANCE/Test-Harness-2.64/lib/Test/Harness/TAP.pod#Anything-else\nSo, I considered that, but it seems wrong to have that output in the same area as the TAP plan output. TAP is intended to be parsed by something else, like Hudson to generate metrics.  If you output coverage with TAP, while it says it's ignored, the spec doesn't sound like it wants anything other than plan output.\nYou can accomplish matching the spec and outputting the coverage reports by using the html output, which also generates a cobertura-coverage.xml file.  Do you see a different way to accomplish this?\n. I just poked around a bit, and I think the problem is in here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/formatters/base_formatter.rb#L55\nIt doesn't generate the reports if logs are suppressed, which is the case with the TAP formatter.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/formatters/tap_formatter.rb#L23\nI think that may need a revisit based on this feedback.\n. This should be resolved now.  It doesn't display text or text-summary when run with a formatter that suppresses logs still, but this seems reasonable as it can break the output generated for such consumers.\n. Thanks!  Can you tell why CI is failing?\n. Haha, no worries.. thanks. =)\n. How is this Teaspoon?  You say \"Teaspoon is not happy about passing .bind()\", yet I see nothing in your code that's at all related to Teaspoon.\nWhat it looks like, is that bind isn't being loaded into your test environment.  So the question should be:\nWhere is the bind method coming from, and why isn't it defined?\nIf you figure that out, you will solve your issue.  Again, this doesn't seem like anything related to Teaspoon, and I apologize if you can show me otherwise.\n. Ok, I did some quick research.. I'd guess you're trying to use the ECMA-5.1 implementation.. which isn't supported everywhere -- and apparently not in phantomjs yet either?\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\nThat link provides a polyfill, which you'll need to load.  And you should consider loading that anyway, otherwise your JS won't work properly in some clients.\nIf you don't want to load the polyfill, you might want to consider using selenium as your driver (instead of phantomjs), as that might give you more expected results since I'd also guess you're only checking things in FF.\nAm I at least close to understanding your issue?\n. No ideas.. :-/  Have you figured out what was going on?\n. I suspect this is due to an update to qunit, but would love someone to confirm this as I don't personally use qunit and all the spec specs for qunit are still passing.\n. I guess I'd do a window.location.reload instead?  Or you can work what you need in, but I don't believe I provided any teardown -- since I wasn't foreseeing that as being needed.\n. I just tried adding this, and it's not something that we can easily accommodate.  This is because the test frameworks (jasmine, mocha) at least don't support it natively (at least jasmine doesn't), so without some hacks for that it's not feasible.  I'll stick with my original recommendation of window.location.reload() being what you should call.\n. Just added the ability to use execute again -- it just reloads the page.\n. I don't, and I don't personally use windows, so fixing that is rough.  I'd happily take a pull request if you figure it out.  Sorry it doesn't work for you. :-/\n. you know, it could be where paths are joined.. with a /, vs .. I don't recall windows considering that a command, but it could be something like that.\n. If you have a full setup using cygwin etc. (which is what I used to do), this probably isn't an issue.. it's an interesting thing to be aware of though. If someone using windows is able to figure out the issue I'll happily take a pull request.\n. I don't see anything obvious in your code.  I might check to see if you have everything setup in your config.\nHere's a working example of a mocha test: https://github.com/jejacks0n/mercury/blob/mercury2/spec/mercury/initializer_spec.coffee\n. it's in the config.ru\nhttps://github.com/jejacks0n/mercury/blob/mercury2/config.ru#L32\n. My god man!  I'd say to read the readme.  All of this is covered there, and I'd ask you not to use github issues as a stream of consciousness logger. :)\n\nJeremy Jackson\n\nOn Dec 12, 2013, at 8:59 AM, nikolas notifications@github.com wrote:\nClosed #143.\n\u2014\nReply to this email directly or view it on GitHub.\n. Nice!  You might also want to add this information as well:\n\nYou can add teaspoon to the default rake tasks by clearing out the defaults (this is sometimes not required), and then adding teaspoon in the chain where you want. So with rspec and cucumber, you get the rspec specs running first, then the javascript specs, and then cucumber (or whatever integration specs you have).  This is what I do personally, and then I don't have to do any CI setup.\n``` ruby\nRake::Task['default'].prerequisites.clear\nRake::Task['default'].clear\ntask default: [:spec, :teaspoon, :cucumber]\n```\n. Thanks!  Sorry it took me so long to get it merged.\n. Interesting.. So, I'd look into PhantomJS and see if supports what you're using, and if not, you can use the selenium driver which fires up firefox and runs them that way.\n. Please let me know how this turns out -- I'd be curious.\n. Awesome, thanks so much for contributing.\nDo you think it might simplify if you provided command line args in terms of a string?  Give me some background I guess so I understand.\nThanks again!\n. Cheers!  Happy holidays too. :)\n. I'm looking into this.\n. so, if I put an invalid call, or syntax error in my spec_helper my specs still run.. I see the exception, but everything runs fine.  you think we should exit on the first exception with a none-zero value in these cases?\n. My point is that I can't tell if some tests run or if all tests run.. I think.\nSome syntax errors (in a file that's not important) might or might not impact the ability for the specs to run and pass.\nHow do you tell if it's one that impacts specs or not?\nWith that being said, I can adjust to exit(1) if there are errors in loading the entire suite (eg. an error that happens in rails)\n. Yup, that's what I'm thinking is the only thing we can do.\n. That's a good suggestion.  I think having that at the end would be useful in general -- along with any failures potentially?  It can get really spammy on a lot of failures (eg. something not right in spec helper, or something), but it seems like something we could play around with.\nAnother idea, is to use the fail_fast configuration in this.. if there's an unhandled exception it could stop immediately with exit(1).\n. @jayzes, additional info: if assets fail to compile you get an exception, which is then processed by the console/runner and will exit.. it's only in the case where you have a javascript exception -- eg. a call to an undefined function or something that this issue references.\n. After further thought, I feel this is generally undesired.  It results in behavior that isn't seen in the browser (depending on test framework).. So, Jasmine doesn't care about exceptions that are outside of it, so all your tests will pass and you'll be green in the browser. QUnit, and Mocha (I'm pretty sure) allows capturing all exceptions, and will fail the run based on that.\nThe problem I see with this is basically that it should be up to the test framework to declare a failure, and not up to teaspoon.  I grappled with doing this in a nice way for a while and I'm not confident we can.\nSo for now, it will never be a failing run unless the test framework declares it as such. Sorry @rickmzp, but I don't think it will be added in, but I'll leave you with the suggestion to check out another test framework if you feel any exception should be counted as a failure.\n. by test framework, I mean mocha, or qunit.. I didn't mean to say you should go use a different \"test runner\" such as teaspoon is.\n. another thought as to how you could do this independently, is to capture all exceptions and have a spec at the end of the suite that asserts that that array is empty. Try something along the lines of:\n``` javascript\nwindow.unhandledErrors = []\nwindow.onerror = function ErrorHandler(errorMsg, url, lineNumber) {\n  window.unhandledErrors.push(errorMsg, url, lineNumber)\n  // maybe re-throw?\n}\n// last spec?\ndescribe(\"unhandled errors\", function() {\n  it(\"should be empty\", function() {\n     expect(window.unhandledErrors).toEqual([])\n  });\n});\n```\nI coded that in the browser, but you get the idea.. that's how I would add the concept of any unhandled error as being a test failure.\n. As an aside, I've rewritten the runner so it can more easily be extended.. it will look for \"on_{event}\" methods and call them, so doing this in your teaspoon env would also work:\nruby\nrequire 'teaspoon/runner'\nclass Teaspoon::Runner\n  def on_error(result)\n    raise Teaspoon::Failure, \"Unhandled javascript error: #{result.message}\"\n  end\nend\n. no, it seems to work for everyone else.  I assume you're running a really old install of phantom, or that you've somehow (unknown to me) setup things incorrectly.\n. btw, the driver is intentionally coffeescript, because phantomjs can parse coffeescript in every scenario I've ever been exposed to.\n. Can you tell me if passing it a js works? https://gist.github.com/jejacks0n/8286446\n. Closing it then, since it's unreproducible to anyone else. Sorry you had to deal with the frustration.\n. meh, they're more or less the same.\n. I'll probably circle back and clean up that javascript a bit more, but give it a shot and let me know. Thank you for doing the background to identify the issue -- since it's so OS specific it's hard for us to identify. =)\n. This should be fixed in 0.8.\n. Thanks for the commit.\nCan you roll back your edits to the wiki though.. the page you edited specifically says it's for Jasmine, not mocha.. if you want to create a second copy for mocha, that would be cool though.\n. I'll look into this more this afternoon.  Thanks. =)\n. So, it may pass in the browser, but you probably see the same exception if you open the debug console.. correct?  I'll move forward with that assumption, but it may be incorrect. I've never seen the get$ method, but it may exist in one of your dependencies, or it could be a typo? @gvarela took a quick look, and thinks it may be a closure issue.\nIf you want advice about what you're using to test with, you may consider jasmine over qunit.\nEither way, let me know what you figure out.\n. Oh, to clarify, it's not an errant test, it's an exception that qunit captures.. you'll notice it's a \"global failure\" -- meaning you shouldn't have any exceptions.\n. Good.  It's worth mentioning, that phantomjs (the default runner) is pretty much the same as a browser, but it's not entirely 1:1.. If you want to use those, try using the selenium runner, because it will fire up firefox and run your tests in a full browser.  If you're curious you can give that a shot, and see if it has something to do with phantomjs vs a real browser.\n. Ah, I've seen this issue before -- and it has nothing to do with Teaspoon etc.. I'll help by clarifying, but in the future please be kind to open source devs and do the digging before creating an issue. =)  Not meant to be a dig, but I do have a day job.\nhttps://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\n.bind in your case is binding the function scope, but that's not available everywhere.. phantomjs is safari more or less, so it's good that you are checking there -- it will give you the same results 99% of the time.  The link I provide has a polyfill, so you may want to use that to get it behaving everywhere. That's your problem.\n. see #139 as well.\n. Well, this is going to be tough.. at least from my initial spike on it.\nThe problem is basically that the architecture was mostly written for Jasmine 1, and I adapted that for Mocha and QUnit.. but Jasmine 2 doesn't fit into it as well -- and @jcoglan had some feedback about it being too coupled.   I'm sort of lost with a better way to do it, that's not coupled, and so would love comments about how we could make that better -- and easier to do this sort of thing in the future.\nSo, I think we need a conversation about ideas on how to do this, how to make it better, and then we can probably move forward with whatever ideas we can come up with.\nI'll provide more information if it's worthwhile.\n. You are.  I haven't finished it.\n\nJeremy Jackson\n\nOn Apr 23, 2014, at 9:50 AM, Todd Hansberger notifications@github.com wrote:\nFrom the documentation it looks like Jasmine 2.0.0 is supported but this issue makes me think it is not. I have not been able to get Jasmine 2.0.0 working locally and just wanted to check if I am wasting my time.\n\u2014\nReply to this email directly or view it on GitHub.\n. So, it works for me, and I'll provide you the relevant examples so you can see how I'm using them.. you'll notice in this example that I preload it, because I'm stubbing ajax requests, which impedes the ability to load the fixture.  You may need to do the same thing?\n\nPreload the fixture (this is only needed if you plan on stubbing ajax):\nhttps://github.com/jejacks0n/mercury/blob/mercury2/spec/mercury/views/modules/form_handler_spec.coffee#L6\nLoad the fixture:\nhttps://github.com/jejacks0n/mercury/blob/mercury2/spec/mercury/views/modules/form_handler_spec.coffee#L107\nMy fixture:\nhttps://github.com/jejacks0n/mercury/blob/mercury2/spec/fixtures/form.html\nWhere I override the default Teaspoon fixture path:\nhttps://github.com/jejacks0n/mercury/blob/mercury2/config.ru#L34\nHope that helps.\n. I'd love to accept that as a reason, but it works for me, so that reasoning doesn't make sense.\nhttps://github.com/jejacks0n/mercury/blob/mercury2/Gemfile.lock#L86\n. Wait.. one sec.. so, you think that they're being loaded via the asset pipeline I think -- this is not true.\nRack::Zippy may be the problem, but I tend to think not.  Here's why:\nhttps://github.com/modeset/teaspoon/blob/master/config/routes.rb#L2\nhttps://github.com/modeset/teaspoon/blob/master/app/controllers/teaspoon/spec_controller.rb#L27\nYou can see that it's not serving them as assets at all -- it's using a controller and route to serve those (the readme explicitly states this so you can use things like haml, erb, etc.).  I thought that was clear, but that's ok.. I'd close your issue over on Rack::Zippy potentially, unless you're absolutely sure that it's causing an issue, though I think it may not be the case.\nWhat path are you accessing your fixture at?  It should be relative to whatever path you've configured for your fixtures.. since that route is being hit, and no assets are being served this may make more sense to you.\n. Also worth noting, that teaspoon routes are prepended, but it may be true that Rack::Zippy is doing something odd, since it's middleware.  So I don't know. =)\n. Yup, the fixture path is under a path registered as an asset path.. I might change your fixture path to something outside of spec/javascripts ... maybe spec/javascript_fixtures, or spec/fixtures/javascript?  That would allow you to get around the issue, because it seems pretty core to Rack::Zippy.\n. Thanks again for sorting out the issue. much appreciated. =)  Sorry.\n. Nice, thanks!  So, I just started on 0.8 (might become 1.0) and I'm changing a lot about configuration and trying to simplify some of the existing configuration.  Since this effects that, it won't be able to merge correctly.\nI'll integrate this into my new branch (that I haven't pushed yet), and after more review I'll merge this into 0.7.  Just checking to see if you want it merged on 0.7 and have it changed for 0.8 or if you'd rather have it go in once with a consistent API for 0.8?\n. The implementation looks solid.  I was out earlier, so I wasn't able to look at it until now.\nHere's some thoughts, and think about them for a bit while I do the same.  I totally understand the need for this, and I think the approach is fine (though, I would change the lambda to a proc -- not the stabby kind, just cause that's how I roll. ;-P), and I think this implementation is good as well.\nIn the past year I've merged a lot of PRs that add to the configuration, and while this is fine, I've noticed it getting cluttered and dirty -- which is one of the primary things I'm trying to improve on now, so understand my hesitation when there's \"yet another configuration added\".\nI'm wondering if you think this will be a common thing?  I haven't seen it up until this point, but it doesn't seem wrong to do it.  I guess my point, is that if I'd structured that method nicer, would you have been ok with overriding it from the initializer by reopening the class?  You can see the things that I'm trying to balance, and so I'm curious what your thoughts are.  Let's say I broke off the filename.gsub calls into a single line method so it can be easily overridden.\nTrying to figure out if there's a less \"easy\" way, but also a less \"configuration-y\" way.  I'm pretty on the fence, but if there's a way to do it without more configuration I'd be happy.. still trying to keep the barrier to entry low with teaspoon.\n. Awesome, yes, and that's a great suggestion.  I think I may play around with that idea, so you can use a custom Suite class if you want, which would give you pretty much full access to whatever you wanted.  I'll think on your ideas, and see what I can come up with.\nI won't be releasing the gem, but I'll merge this and revise for 0.8.\n. Thanks. =)  Can you give me some background so I understand why you want this?  Before I dig into it, I want to understand what this provides or solves for you.\n. Can I ask why none of the existing build artifact/formats worked?  eg. TeamCity, jUnit, or TAP?\n. I played around with this concept in the 0.8 branch, and I think we can do it more efficiently using phantomjs/selenium instead of wget.\nI'll see if this can go in cleanly.\nI had a question though -- you mention saving all the assets -- is this needed, or can they be re-served from the CI box?  As in, I would rather just save the index.html and not all the assets that were loaded.  I'll have to look at what you did there.\n. Getting this into 0.8.. thanks. =)\n. Do path helpers utilize this custom context root? after dealing with this in a different way, I think I may make some adjustments to the javascript / views to have more of this work being done in rails -- e.g. using path helpers.\nI initially avoided that to some degree, because I wasn't sure the directions it might go, but at this point it seems like we should consider a better approach.\nJust probing for some thoughts.\n. Yeah, I came across a lot of the same info.  I'm planning on doing this in areas where it's possible for now, and doing this by other means (which I wanted to fix because they're ugly) where that's not possible (for the time being).\nThanks for the info.  Would you mind giving the 0.8 branch a look over to make sure this is handled well when I feel that's ready to be looked at? I would appreciate the help.\n. Or help by providing a some steps to setup the spec/dummy app in this way so it can be tested easily and we can make sure everything passes with relative_url_root enabled?\n. I fixed this in 0.8 by using window.location.pathname.  I want to move away from this concept of \"context\" as much as possible, so thanks for bringing it to my attention and helping me sort out what it solves. Your time is much appreciated.\n. There was considerably more to this, and so I've adjusted the dummy app to be setup in such a way that this works. The key here (in general) is that asset paths have to be adjusted as well.\nAnd then if you need teaspoon to be within that same relative_url_root (it's not needed) you can set the mount_at configuration to \"/relative/path/teaspoon\"\n. Ah, are you using the new \"use_framework\" directive?  Check the readme for it.\n. https://github.com/modeset/teaspoon/blob/master/spec/dummy/config/application.rb#L30\nAlso, in general you have to configure the asset prefix along with the relative URL root, but assume you knew this.\n. Ok, so a few things.. this is obviously confusing, and I think you have some basic rails setup incorrect.. so let me know if this isn't the case -- it took me some toying around to get it sorted.\nFirst, you'll notice that the spec/dummy app in teaspoon doesn't do the wrap that you have in your config.ru.. this seems like it's a legacy thing, and is incorrect so I believe it should be removed.\nSecond, the asset prefix MUST be set, it's not even related to Teaspoon, that shit just seems wonky and can't be resolved by Teaspoon alone.  Literally, your asset paths will be wrong everywhere if you set relative_url_root and not the asset.prefix.  I dug into the code for this, and it makes some sense for when the assets are precompiled, but it doesn't seem to take into account when assets aren't precompiled.  I wasn't compelled to fix it it sprockets-rails.\nOk, so with all of that said, it looks like your project is doing too much.. I found that proper setup (at least with rails 4, and that's all I'm caring about here), is to set config.relative_url_root in your application -- or via the ENV[\"RAILS_RELATIVE_URL_ROOT\"], and then simply set your assets.prefix to relative_url_root + \"/assets\".\nThat's it in a nutshell. There should be nothing else you need to, so remove the extra stuff as I bet your project won't work properly, Teaspoon or not.\nAs a follow up, if you want Teaspoon to be nested within that same path, just adjust your config.mount_at to be relative_url_root + \"/teaspoon\". I almost put this into the routes file, but liked the fact that you can do it yourself -- or not.\n. point 1: partially correct. a. the dummy app is not nested within a subdirectory, though all urls act as though it were, so it doesn't matter where the root of it is. b. as mentioned a few times in documentation, as well as this thread, teaspoon can be, placed within this relative url root by adjusting the mount_at configuration.. I chose not to do it because as I work on it I don't feel like typing /relative/teaspoon.\npoint 2: you can also wrap your routes within a scope, or just configure it how it seems like it wants to be configured via http://guides.rubyonrails.org/configuring.html. I went by that, and I did come across the config.ru thing, but it seemed like that was a bit legacy.\nThe problem, after adjusting the dummy app to be setup like yours, is that teaspoon doesn't fire up your server using the config.ru file.. it fires it up directly through rack, and that's why I feel like putting that map call inside of config.ru is wrong -- at least it complicates things to a pretty insane degree from teaspoons perspective -- in how it starts the server. And this is why I ended with the solution I provided.  Can you explain to me where my suggested configuration and setup falls down for you so I can better understand why you want to do it that way?\n. The only configuration that I could get to work for both the console, and in the browser was to set the asset.prefix conditionally based on if Teaspoon::Console was defined.  This class is only loaded in the case that it's being run via the console, and thus allows for it to be different between the two environment.\nruby\nconfig.assets.prefix = \"/relative/assets\" if defined?(Teaspoon::Console)\nThough, what I recommend is to remove the map call in the config.ru file and if for some reason you need some additional behavior that the recommended configuration doesn't provide, wrap your routes in a scope:\nruby\nscope Rails.application.config.relative_url_root do\n   # your routes\nend\nIt should also be mentioned that I haven't used relative_url_root in rails, nor have I ever needed to -- and really have no expertise or deep understanding of this aspect. I just prefer simple solutions, and the one I came to fit the bill.\n. Configure your server type?\n\nJeremy Jackson\n\nOn Mar 6, 2014, at 2:58 PM, Marek Kowalcze notifications@github.com wrote:\nI've tried again on fresh rails 4 application, this time I simply used Trinidad server to run application in sub directory. Almost everything works fine :)\nTo sum up:\nRails 4.0.1, Teaspoon branch 0.8\nSet up rails in config/application.rb\nconfig.relative_url_root = \"/relative\"\nthis must be set for any asset paths to be correct!\nconfig.assets.prefix = \"/relative/assets\" if defined?(Teaspoon::Console)\nSet up Trinidad in config/trinidad.yml\ncontext_path: /relative\nRun app via rails s trinidad\nResults:\nWeb UI at http://localhost:3000/relative/teaspoon/default - OK\nteaspoon / bundle exec teaspoon - OK\nrake teaspoon - ERROR:\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n # http://127.0.0.1:57969/teaspoon/default?reporter=Console:13\n...\nLet's forget legacy config.ru hack. The only thing left to fix is the difference between rake task and teaspoon binary.\nI've pushed all this into new repo at https://github.com/kowal/rails4_on_trinidad.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ok, so you start rails with trinidad, right?  Teaspoon also starts rails behind the scenes from the command line.  How is teaspoon to know what server type you want it to start rails with?\n\nSo, check the configuration for server.  Set it to trinidad.  I have no idea if this works, but it should in theory. :)\n\nJeremy Jackson\n303-507-6846\n\nOn Mar 7, 2014, at 12:42 AM, Marek Kowalcze notifications@github.com wrote:\nConfigure your server type?\nSorry, but I don't get what you are asking about?\n\u2014\nReply to this email directly or view it on GitHub.\n. It's the same code path for both rake and the cli. I'm not sure why it would behave differently. I'd be happy to accept a pull request that fixes it, or you can create project that exhibits the behavior.\n. Thanks!\n. It uses git, which is actually nicer.  I would love it if you wanted to jump in and maintain a changelog though.\n\nWith that being said, you can get this information pretty easily by using the little branch/tag control from the project root -- then you can click on \"commits\" and see what happened in that tag, and since the last tag.\nYou could generate a list of things (even review changes) for each one of those commits (aka changes) in that tag, and compile them into a changelog.\nHere are some links:\nhttps://github.com/modeset/teaspoon/commits/v0.7.6\nhttps://github.com/modeset/teaspoon/commits/v0.7.7\nhttps://github.com/modeset/teaspoon/commits/v0.7.8\nhttps://github.com/modeset/teaspoon/commits/v0.7.9\nIn our example you can track all the changes from the date that 0.7.6 was released, through to what was included in 0.7.9.\n. I agree with you, and I'm redoing the coverage v0.8 -- I merged it without fully vetting it.  So thanks for the heads up.\n. If both versions were being loaded it would cause this.  The route is prepended in the engine to avoid any catch-all routes.  Do you see a way to avoid this if both gems were being loaded?  I assume this was the case.  If you try upgrading to 0.7.9 in your current gemfile do you see the same issue?\n\nJeremy Jackson\n\nOn Jan 29, 2014, at 5:33 AM, pareeohnos notifications@github.com wrote:\nI'm currently trying to migrate my project over to jRuby, and in the process got the latest version of teaspoon (0.7.9) in my jRuby gemset, but still had 0.7.8 in the standard ruby gemset. After trying to launch my app, I was given an error stating that the route named \"teaspoon\" already exists, and the app failed.\nAfter having downgraded teaspoon back to 0.7.8 however, it seems to be working again. Not sure what changed to cause this?\n\u2014\nReply to this email directly or view it on GitHub.\n. So you're saying you see the error when teaspoon is not installed?\n. ok, I'll look into it further.  I was using it fine the other day, but I'll double check.\n. Any updates?\n. the 0.8 branch changes how things are loaded, but I'd be curious if this is resolved, or still lingering on that branch.\n. 0.8 should take this into account now, though it's still a larger concern.. if this doesn't work, I'd appreciate it if you wanted to hop into the gem on your end and see what does resolve it.\n. waiting to get feedback.. so this helps. =)\n. Yay! Thanks for the info @nowhereman.  I was never able to track down why that was happening, so it's good to know it was just a regression in rails.\n. I haven't seen this.  More info or checking out why would be great.\n. I guess any info on how to reproduce would be great.  I would love to be able to tell you why, but need the reasons it happens distilled down to its most basic form.\n\n\nJeremy Jackson\n\nOn Feb 4, 2014, at 10:39 PM, Brandon Weaver notifications@github.com wrote:\nThe second I remove tests that happen to manipulate fixtures, and confirm that those fixtures were properly manipulated, this stops. I'd think this is due to a seriously ad-hoc attempt at integration testing, which Jasmine flat out doesn't support. I'm moving to get Integration testing added as a substitute to this form of tests to make this issue irrelevant.\nAny thoughts on this matter? I've still got a fair amount of research to do to confirm that integration testing is the proper route here, but any advice would be great.\nThanks for your time in looking into this!\n\u2014\nReply to this email directly or view it on GitHub.\n. If you want to provide how to reproduce I'll look into this further.\n. wouldn't it be bad if the thread was dead?\n. Fair enough.. thanks for helping to clarify.\n. I'm redoing a major portion of this, and would love you to jump in and contribute to this if you'd like.  I won't merge this as I think it may only confuse matters, but I've been working to create a better api for teaspoon, which will make guard-teaspoon much easier to implement, and may make it a little more clear.\n\nLet me know if you'd like to be involved in this and I can grant commit privs to teaspoon and guard-teaspoon after a short conversation.\n. I'm using it rails 4 and it works fine. Can I see your gemfile?\n. It could be the last slash?  Where did you get the URL from?\n. Then I don't understand.. If you look, I'm testing against rails 4.0.0 (https://github.com/modeset/teaspoon/blob/master/Gemfile#L11), and just updated locally to rails 4.0.2, and everything continues to work fine.. there's something conflicting with it, or a rails config that I'm unaware of... I don't know, but it works for everybody that I'm aware of, so I'd encourage you to identify it -- as I can't fix it if I can't reproduce it. \n. I can reproduce it.. but it seems like a regression in rails, no?\nI've since removed it, but it's in the non-existent teaspoon 0.8 branch (I haven't pushed it yet).\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/suite.rb#L69\nCan you find any documentation change that would explain why that route behavior would change? And if not, do you want to open an issue on Rails?  Seems odd that a route that works in major releases (and a relatively common thing to do) should break on master.\n. Yup, I think I came across the same issue today.\n. Hard to say.  I want people to use it and report any issues they're seeing and there's no way to determine how many people are using it.\nIt's why it's nice to hear if everything is ok.\n. You have a parse error in your js.  Consider loading it in the browser to review, it might help you sort it out.\n. Not with that.. qunit logs them as a global exception.. are you familiar with qunit?\n. hmm.. is there something wrong with the qunit spec_helper?\n. I believe it's in the initializer that's generated for qunit.. it's setting the helper to \"spec_helper\", which should read \"test_helper\".. I came across that while I was working on 0.8 last night.  try changing that and see.\n. https://github.com/modeset/teaspoon/blob/master/lib/generators/teaspoon/install/templates/qunit/initializer.rb#L36\nIt's been there for a long time.\n. Thanks!\n. Yeah, sorry. Thanks for the input though -- glad I'm getting it in there.. it's pretty long overdue.\n. merging this because it may be a few days before I get to jasmine2.\n. Thank you.\n. Two things:\nfirst, the output to a file is only in master.\nsecond, you would have to wrap the --format=\"junit>tmp/output.xml\" in a string -- otherwise you're piping everything to that file -- as it's a standard shell way to do that.\n. Thanks!  And I bet that's still a problem.  I'll check it when I get some time.\n\nJeremy Jackson\n\nOn Feb 23, 2014, at 2:55 PM, Joe Fiorini notifications@github.com wrote:\nI noticed on 0.7.9 that my hooks are running twice even though they're only called once. I was able to trace it down to this code (still there in master). It looks like it's running the block for default and then yielding to the block handed in, which according to the calling method is the same block that was just run. I was able to fix it by passing the suite name to the initializer and stopping the block from running if it's \"default\".\nIf this was fixed in the hooks refactoring, please feel free to close. Just bringing to your attention just in case you weren't aware.\n\u2014\nReply to this email directly or view it on GitHub.\n. This isn't a feature of Teaspoon, but rather a feature of the test frameworks -- eg. jasmine/mocha/etc.\n\nSpoiler: none of them support it.\nhttps://github.com/visionmedia/mocha/issues/902\nhttps://github.com/pivotal/jasmine/issues/171\n. 30 minutes?  or 30 seconds?\n. bad compile of phantomjs or istanbul?  what's the behavior like without the reports -- working fine otherwise?\n. can you run istanbul via the command line?  eg. istanbul help\n. Not sure then. I can't really replicate your setup and see it.  It just shells out to istanbul with the output from the test run.  That must be bombing in istanbul, as I can't really see any exceptions raised from teaspoon.\n. yeah, there's some room for improvement in istanbul.  I have seen it fail, and sadly it doesn't fail gracefully.  Though it's the best solution I could find.\n. Also -- you could consider using jquery-rails, as it will be automatically ignored since the source file will be in gems.\n. it's still running really long?  I thought you said it hung when you ran istanbul.\n. I thought you said you had it figured out.\n. I don't know how else to help you.. it seems like istanbul is breaking on some of your javascripts.. you should remove all but the code that you're testing and implementing.. are you testing jquery?  No, probably not, because that would just be silly.\nSo it shouldn't be included in the coverage reports.  As far as teaspoon taking a long time, it's not.. it sounds like istanbul is taking a long time.  And for that, I'm sorry, but also not responsible.\nYou can do something like this in your teaspoon_env:\n``` ruby\nrequire \"teaspoon/coverage\"\nmodule Teaspoon\n  class Coverage\n    def generate_reports(&block)\n       File.open(\"coverage.json\", \"w\") { |f| f.write(@data.to_json) }\n       puts \"coverage was generated.. go check it and run it with istanbul manually.\"\n    end\n  end\nend\n```\n. @Sanjith That's a bummer. It sounds like it runs fine without coverage reports. correct?  If so that's great, and I'll stop trying to help you figure out why your coverage reports bomb out.\n. Thanks.  I was hoping someone would check this out and resolve anything outstanding.\n. I personally don't want to maintain two different structures, which requirejs needs to function.  It's on the todo list to get proper specs for this in place so we can avoid breaking it in the future, so if you want to be an awesome open source contributor, you're welcome to add that. =)  It would be appreciated.\n. Appreciate it.  Hopefully you came across the wiki page.\n. Cool, you want to create issues with an explanation and use case so I can understand what you want fixed.  it makes it easier and requires less time dedication to sort out what's going on. =)  I can then focus more on making it work the way it's expected.\n. Hmmm\u2026 I added that because for some reason it was being loaded twice for some people. Booo! Engine stuff seems vaguely broken for rails 4, and obviously needs some attention.\n\nJeremy Jackson\nOn Mar 11, 2014, at 8:53 AM, psharpNumerex notifications@github.com wrote:\n\nUpgraded to 8 and it seems that the routes are not being prepended.\nI tracked it down to engine.rb:43\nreturn if Teaspoon::Engine.routes.recognize_path('/') rescue nil\noutputting the results of Teaspoon::Engine.routes.recognize_path('/') gives me\n{:controller=>\"teaspoon/suite\", :action=>\"index\"}\nI'm using Rails 3.2.17\n\u2014\nReply to this email directly or view it on GitHub.\n. I think I may take that whole configuration out and require mounting it manually.. that's a bummer, but seems to be the only solution. we have cases where it's mounted twice (jruby), and cases when it's not mounted.\n. @bfcoder, thanks. I guess I assume people are checking master before submitting an issue, but that's probably not always true.\n. That's probably true because we use that \"event\" as the time to hook in.\n\n\nJeremy Jackson\n\nOn Jan 20, 2015, at 6:38 AM, hlascelles notifications@github.com wrote:\nWe did a cleanup of some engines and saw this error arise (with 0.8.0). It turns out that our Combustion folders needed a NOOP routes.rb file to trigger the correct append to take place.\nThat is to say, adding the following file to spec/internal/config/routes.rb solved the problem:\nRails.application.routes.draw do\n   # Do nothing, except trigger automatic teaspoon engine mount\nend\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks! I'll keep this around for information.\n. Checked it out and it looks good.. Any way you can add me as a collaborator if for some reason you disappeared?  Also, some specs would be nice to make sure it stays working. =)\n. Thanks!\n. Aww, can't merge from my phone when the build is failing.  I'll merge it in a bit.\n. Thanks! Is there any readme updates that need to happen?\n. Can you explain why you have dev/test set to precompile -- or why you want to include teaspoon in production?\n. Hmm.. I've used teaspoon with rails 4.1.0. @jayzes did you have this issue?\n. can you do me a favor and put this in your teaspoon_env and report back on what it says.\n\nputs \"!Env: #{Rails.env}:#{RAILS_ENV}\"\nTechnically speaking, the engine will run in development when you browse to /teaspoon (since that's the server that's running), and should normally be in development from the CLI, but I want to confirm.\n. Having them both run in development actually simplifies a lot of the differences that exist with configuration like this.\n. Hmm.. Ok, so if I'm not mistaken, you have test using precompiled assets? Correct me if I'm wrong.\n. Thanks for identifying the issue.. I also noticed that in another issue on guard-teaspoon you're using 0.7.9.  Wondering if this is different in 0.8.  Can you update to what's on master and let me know -- removing the fix you put in?  I would appreciate the help since I'm kinda bogged down in other work.\n. Fair enough. to fix that you need to follow the instructions for updating.. I broke some things on purpose to make it better for the long run. Just run the install generator again and make whatever changes you made.\nrails g teaspoon:install --framework=qunit\n. I think this might be cleaned up / fixed. Let me know if that's not the case.\n. Could be how the instrumentation hooks into sprockets. Or more likely an issue in sprockets-rails directly?\n\nJeremy Jackson\n\nOn Jul 28, 2014, at 5:53 AM, Orion Delwaterman notifications@github.com wrote:\nBrand new install with Rails 4.1, following step-by-step install instructions, get the same issue here.\n\u2014\nReply to this email directly or view it on GitHub.\n. Yup, we identified it a few weeks back, but haven't put in a proper fix for it. I need to experiment a bit to make sure it works nicely for all javascript/css files that could be used.\n. Confirmed this is fixed in master (with some minor tweaks), and will be included in the next release.\n. https://github.com/modeset/teaspoon/issues/443\n. I assume you didn't want me to merge this.. you want to provide some background on this and discuss?\n. 0.8 allows you to specify this configuration.. if that helps.\n. Thanks!\n\nThough, the problem is probably in guard-teaspoon.. I'd rather not merge this because it makes for confusing code -- since we're not using those args, what are they?\nI'd rather get the fix in guard-teaspoon where it calls execute and see if there's maybe a bigger issue.. Do you want to check it out?\n. I think I merged that with options.  Are you using 0.7 or 0.8, and what guard-teaspoon version.\n. Ok, so the proper fix is to merge files: files into options in guard-teaspoon. I thought that I had done that but must've been wrong. Thanks for catching it, and I'll accept a pull request on guard-teaspoon.\nUnless I'm wrong. Thanks again.\n. Sure, I'll try it.\n. Hmm.. so check here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs/runner.js#L85\nSo, I would assume there's something that's making that hit more than once, or something like that?\n. I understand it's frustrating. are you doing anything odd with window.load, or long lived incomplete ajax or image loads? I've not seen this issue come up before.\n. If you track it down to something I can fix, I will fix it. =)  It's a complex issue.\nI do appreciate your effort and ability to communicate what you're experiencing and why.\n. are you preloading your fixtures?  might want to try that.\n. Let me guess, rails 4.1?\n. Coverage is a beast.\nAs far as your question goes, that solution seems reasonable for now, but I'm open to suggestions on how to simplify that and make it a configuration.\nQuestion: when you're running your server normally with teaspoon, can you hit /assets/some_asset.js?instrument=true and tell me if that gets instrumented?\nAs far as I can tell, that should be the case, and if that's the case, then it is being instrumented when run from guard as well which should give you coverage reports, though there's several moving parts in that so maybe something is being lost.\n. Thanks.\n. I think we should be good without this now since this helper has been removed. Thanks for the work, and let me know if any of it is still applicable.\n. it should not, you're correct.\n. fixed.\n. They were both updated, so I assume you can take the versions form 0.7.9 and put them in your own test/javascripts/support path and be ok.  The new suite.framework config will make this easier in the future and is why I switched that up.\n. This arises often, and the only solution has been to not upgrade these libraries.. that's why I added the suite.framework config, and will start to upgrade the versions of the support libraries with versions in the filename. So it's a painpoint that we're aware of, and working to resolve, but you're part of the process where we're trying to resolve it. Sorry.\n. Thanks for all the version info, that's always useful. So, one question.. which version of rails?\nAnd what I assume is happening.. The instrumentation probably isn't loading or working because assets are getting precompiled. For the coverage to work, it must instrument the javascripts that are being tested, and for that to happen, there's a middleware/sprockets hack in the instrumentation part of teaspoon. So, precompiling assets for tests is probably not the best case if you need coverage reports.\n. try:\nRAILS_ENV=test bundle exec teaspoon\n. I'm planning on working on this more, and have a branch I haven't pushed yet. But I had to put my dog down yesterday, and am feeling a little off. When I have more time I will get something working pushed.\n. No updates at this time, sorry.\n. Thanks for the info. Yeah, this is a known problem, but poorly understood. Something changed in how assets work in development with rails 4.1. What I think has changed is that assets from gems aren't treated the same -- I remember commenting on an issue in sprockets about the difference between development and production, and I believe they've fixed it so gem assets aren't available in all environments now. I believe if we put more or less that line in the gem it will work, but I'm unsure how to make it not effect other things.\nFor instance, we can't say we want to compile all .js files, because that would mess up other things. But we also don't want to maintain a list of assets that could be used from the gem -- that also sucks. So... unsure how we can solve it.\n. note how https://github.com/modeset/teaspoon/blob/master/spec/teaspoon_env.rb looks with the require at the top.\nand how https://github.com/modeset/teaspoon/blob/master/spec/dummy/config/boot.rb points to the gemfile in the root path.\nIn general teaspoon is a good example of how to set that up, because that's how it's setup. Feel free to update the wiki if you find that anything has changed.\n. It does not.. there's a pull request I was working on that I haven't finished.\n. You may, but I a pull request to remove it from the available list would be more appreciated. I thought it would be easier than it is to add support, and decided I'd do it more iteratively -- and haven't had the time to finish it.\n. for the record, Jasmine 2 makes it impossible to do a few things, and I'll have to submit pull requests on that project to make it viable with teaspoon.\n. It's painful, but I'll try to get back into it sometime soon.\n. closing this.. we may get to this before a 1.0 release.\n. does it work if you don't specify?\n. So I assume this is a rack-handlers issue.. worth noting.\n. Thanks for the heads up.. qunit specs are still running on our end though, so I'm unsure how to reproduce. closing for now.\n. man, this is old. but since you never closed it I assume you just abandoned it. obviously, per the rails docs, and the error that you likely saw, require_tree needs a relative path.\n. So do your specs continue to run and simply fail?\n. Technically speaking this isn't possible. Javascript can continue execution even in the case of an exception, so it's not possible as far as I'm aware.\n. Given that I'm not a fan of requireJS, I won't be trying to figure this out. However, I'm willing to provide the information needed while someone attempts it.\nFirst things first.. when you have instrumenting enabled, can you get an instrumented file and does calling a method in that file change the coverage information? Removing teaspoon from the equation, I would suggest using istanbul directly for this.\nSecond thing.. I suspect that RequireJS simply doesn't work when instrumented without some work. Instrumenting for coverage reports literally rewrites your js files so they're entirely unreadable. A good way to check this is to run one of your files through istanbul to see the output.. then run that file and see if you have access to the instrumented data. This is what I did when I added coverage.\n. This is sort of in the works, but we have to figure out how best to do it.. check #277 if you want to track that conversation.\n. Thanks.\n. not sure.. it would take a change to the instrumentation.rb and probably need to do something different with coverage.rb -- since that shells out to istanbul.\n. Add to the stylesheets configuration.  Also fixtures can include CSS in a style tag.\n. On purpose. But you can freely add a fixture to the dom.\n. Are you using the built in fixtures?\n. @bradrobertson Check the suite configuration for stylesheets.\n1. create a fixtures.scss and put it in spec/javascripts/stylesheets (should already be an asset path)\n2. suite.stylesheets << 'fixtures.css'\n3. require or import the files you want to include in fixtures.scss\n4. hope styles don't collide and make teaspoon look bad\n@brewster1134 What you're asking makes no sense.. you want to apply styles to a fixture but you don't want it in the DOM? How's that work? Also, I believe the fixture does append itself to the DOM automatically FYI, if it doesn't it's a bug. Note the documentation about the fixture element being #teaspoon-fixtures -- which should be styled off screen so it doesn't impact the tests.. however, there are times when you need to put a fixture into visible area, but it's pretty rare. Just a tip on CSS in general, position: absolute, opacity: 0; pointer-events: none will leave things alone and still apply all other styles properly.\n. @brewster1134 If I wasn't clear enough, styles aren't applied unless an element is in the DOM, which is the browser behavior that makes sense.\n. Thanks @brewster1134!\nThat seems like a good way to use it -- the css fixtures were never fleshed out because it's not super common. It was mostly about providing a place to put them, and how they're used is primarily up to the test harness that you create to handle those sorts of things.\n. Thanks for the info. =) And yeah, I've mostly needed it for transition overrides as well, and in integration (cucumber features) showing elements that need to be \"visible\" to interact with.\n. That's the framework you use, not teaspoon.\n. The exception you're seeing is that \"equal\" isn't defined. tried \"equals\"? if it's not that, I'm unsure.\n. qunit is the bastard child of teaspoon, and there's some work on that to get it better.\n. thanks. I'll update the docs for this.\n. What did you do to get it sorted -- it's useful for others if you provide the info.\nThanks.\n. I don't see why not. Sounds interesting, and would welcome a pull request.\n. awesome!\n. Any news on this?\n. sorry I never got around to this.. I assume you figured out that rails displays the paths in which it was looking for the missing partial below the exception.. you should try the partial without the / and see what that does as well -- it's more reasonable.\n. I'm confused.. there doesn't seem to be any changes.  But yeah, just update it and make sure the tests pass.. it's pretty hard to ensure it doesn't cause problems. As far as the bower thing, sure, I guess, but it's still kinda a joke, and to get them to build into the right place and not have a bunch of unwanted files I don't think it'll be much of an improvement in terms of maintenance.  Generally unhappy with that stuff still.\n. Looks good, and at a glance I'm fine with it and will merge it when there's specs. This is something I must insist on, otherwise I take on a large maintenance risk.\n. Planning on finishing this up?\n. Well, I think it's a good idea, I struggle to merge it. The reason is because it should be up to the test framework (eg. qunit) to make useful messages. The reason this is exclusive to qunit is because it doesn't provide useful messages. Is there a way to accomplish this without changing teaspoon? eg. calling a message helper function that you define in your spec helper?\nThe reason I struggle with this is that it's a feature for only one library, and I don't want to go down that path simply for the sake of maintenance.\n. The recommended solution is a custom expect method that builds the message and then calls the original expect method.\n. To be clear, you're saying that qunit is able to provide more information, not that it in fact does usefully from the start.\nForgive me here, I'm just pseudo coding, but you can tell me what's wrong with this two line fix that goes in your spec helper.\ncoffee\nmy_equal = (actual, expected, message) ->\n  equal(actual, expected, \"Actual: #{actual}\\nExpected: #{expected}\\n#{message)\")\nThis is what I think it should be if you want that support. Do you see why I would be apprehensive about merging something that only works for one framework?\n[edit] I used expect, not equal.. my bad.\n. @chancancode actually, no, I really dislike the lack of nesting, pending, and expressiveness that the spec frameworks have. Take a look at a mocha spec and see what I mean. They convey much more than I can accomplish in a \"test_something\" function name.\n. Also, I use rspec, so the specs read the same between ruby and javascript.. if I used mini_test or test_unit, I might agree with you though.\n. Don't get me wrong, I appreciate your work. It's just hard to merge something that I won't be able to track easily.\n. A few things if this is to be merged then.\n- #inspect should go away. I would prefer that JSON call be inline.\n- we need to call #htmlSafe on the expected and actual -- even if it's in a code, it can still break layout if it includes html, also information can get lost that way.\n- there's an absence of specs for this.\n- this should happen for the console reporter as well.\n- it should be used when the full report is enabled since that mode is the default.\n. JSON.stringify is naive, and will error if it's an instance that's self referential etc. That's partly why I think the test framework, or assertion library should handle that stuff. Displaying a diff is much more useful than actual vs. expected, and to me that should be part of the message, but since qunit doesn't do it nicely, it seems fine to add it.. though, I might suggest as a follow up, that we put it only in the qunit subclasses and not the base class.\n. you're free to try it out and let me know how it works for you.\nthe problem I see with it, and the reason I didn't merge is the JSON stuff.. it seems too brittle and would likely cause additional support issues.\n. So, I see two basic paths for this.. Teaspoon is really intended for unit tests, which involves having a fixture that implements only what's relevant for your specs.\nI'd say you should look into some more BDD style tools like cucumber, or rspec-capybara for full integration tests. I find that they're both useful and provide different levels of confidence.\n. It runs in development to use the cache.  You can set RAILS_ENV in the teaspoon env if you don't want it to run in dev.\n\nJeremy Jackson\n\nOn Jun 7, 2014, at 10:43 PM, Jeremy Apthorp notifications@github.com wrote:\nwith the rack-mini-profiler gem installed, I see this error on the console when I run bundle exec teaspoon:\nStarted GET \"/teaspoon/mini-profiler-resources/includes.js?v=898a13ca6797c6bc1fee313e17d388b0\" for 127.0.0.1 at 2014-06-07 21:38:47 -0700\nProcessing by Teaspoon::SuiteController#hook as JS\n  Parameters: {\"v\"=>\"898a13ca6797c6bc1fee313e17d388b0\", \"suite\"=>\"mini-profiler-resources\", \"hook\"=>\"includes\"}\nCompleted 500 Internal Server Error in 2ms\nSyntaxError: Parse error\nI haven't been able to figure out how to configure rack-mini-profiler not to run when teaspoon tests are being run, but this problem would be solved if teaspoon didn't run tests in the development environment. RAILS_ENV=test bundle exec teaspoon works fine.\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks!\n. I appreciate the work, but I'm sorry, I can't merge this as it is.\n\nI moved away from this structure because it's slow and I wanted to use the built in functionality as much as possible, because it's a pain to maintain the hacks that were there / this pull request adds back.\nI don't use requirejs, so you'll have to help me through this. I personally don't care for requirejs, but that's a different topic.\nAre you loading files async with requirejs? If so, you will need to see if requirejs allows you to modify those urls to include the instrument param.\nIf not, then I assume any sprockets #= require statement should work as expected.\nIn general, the lack of consistency with requirejs and how people are using it has made this really hard, but sadly this commit doesn't fix it.\n. I would like to get something good in, and I'm down with the conversation.  I have just found it to be painful and hackish thus far, but would love a proper and clean solution that I don't have to think about again. =)\n. Awesome, thank you for providing those details. Can someone come up with a plan of implementation and documentation as to avoid this stuff in the future? If there's an implementation aspect we need to include requirejs into the dummy app and have proper specs.\nIt will require someone who has better knowledge of how people use requirejs than I have, since it seems to be very disparate in how it's being used.\n. I don't know for sure if Teaspoon works well with puma.. I don't see why it wouldn't but maybe try thin?\n. Thank you.\n. Interesting.. can you provide some more background?  As in, is there something we can do to help mitigate the confusion?\n. You can add your own \"fixture\" controller, and do whatever you like -- since it's running the rails server next to the teaspoon suite, you can feel free to load whatever you want, wherever it exists, and then request that via ajax -- though you may have to provide your own routes and controller to achieve that.\nI believe the fixtures do allow loading things from a different paths, but if it doesn't, you're free to load things via ajax however you feel appropriate -- teaspoon just provides a consistent and easy to document structure for this, but doesn't have to be used.\n. Use the same version of qunit that you were using? Covered in the readme on how to do this.\n\nJeremy Jackson\n\nOn Jul 11, 2014, at 12:10 PM, Zack Warburg notifications@github.com wrote:\nI could really use some help on this.\n\u2014\nReply to this email directly or view it on GitHub.\n. You can't really.. with sprockets the files can be combined into different files, so the filename is a) not always accurate, b) impossible to get without raising an exception (and even still unreliable with passing that around).\n\nIf you know of a way to accomplish this in javascript I'd be interested in how you can accomplish it.\n. done. v0.8.0\n. you need to run bundle with --full-index.\n. Thanks. Does teaspoon work properly with both versions of Istanbul? You say there's API changes, and if it is broken it'd like to know.\n. I updated the istanbul interface to 0.3, but suspect it won't work nicely with version 0.2.*, so... thoughts?\n. Maybe something to do with load order? Take the head tags from both teaspoon and otherwise and confirm the script tags are the same.\nThen look into whatever framework you're using to make sure it's not clobbering it.\nAn alternate is that phantomjs doesn't support whatever feature you're using and you haven't diagnosed it properly.\n\nJeremy Jackson\n\nOn Jul 28, 2014, at 6:56 AM, eugene-ku notifications@github.com wrote:\nHello! This is a complex bug which: I have a script which setup a global 'store' variable and it's working fine untile FileSaver.js is included, then it became undefined.\nThis is only in teaspoon environment. Any ideas?\n\u2014\nReply to this email directly or view it on GitHub.\n. I said to check the output. There were bugs in rails and I want to make sure that's not it.\n\nDoes it work in the browser when running the tests?\n\nJeremy Jackson\n\nOn Jul 29, 2014, at 4:22 AM, eugene-ku notifications@github.com wrote:\n1) all the scripts are located in application.js.coffee and are loaded from <%= javascript_include_tag *@suite.spec_assets %>, so order is preserved\n2) everything is fine outside teaspoon environment, so framework can be involved but in a very subtle way.\ncan you give some tips for debugging?\n\u2014\nReply to this email directly or view it on GitHub.\n. I was unaware that you could easily map coffeescript source lines to those of javascript.\n\nThis question comes up from time to time, but the honest truth is that it's actually hard to get the javascript exception stack trace reliably, and so I find it hard to believe what you propose is technically possible or feasible.\nWith that being said, we'd happily take a (clean and tested) pull request that has a simple prototype of what you're looking to accomplish.\nSo, for a first pass, I'd be interested in seeing your idea to extract the source code surrounding the file location of a failed spec, and an exception. You can start with the command line reporter, or the browser runner, either is fine.\n. Awesome! No, I haven't had time to look, but I've got a reminder.  Will try to look at it this weekend or next week. Impressive effort from a glance though, so thumbs up.\n\nJeremy Jackson\n\nOn Aug 14, 2014, at 11:55 PM, Mark Burns notifications@github.com wrote:\n@jejacks0n - not sure how github mentions work, so apologies if you've already seen my mention at markburns#1 - anyway, I've proved the feasibility of extracting source code from an exception. I've not done a pull request here, as it's not worthy yet and more of an exploratory proof of concept.\nI've got a couple of questions over there, that I wouldn't mind you taking a look at.\n\u2014\nReply to this email directly or view it on GitHub.\n. RAILS_ENV=test rake teaspoon isn't working for you?\n. You should be able to put it before line 3 in your teaspoon_env.\n\nhttps://github.com/modeset/teaspoon/blob/master/lib/generators/teaspoon/install/templates/jasmine/env_comments.rb#L3\nI suspect that will work, but I'm curious why you want to run them in two different environments? caching and whatnot are totally different, and it causes issues with what you might be expecting. You're welcome to try it, but it's slower because the compilation cache is different.\n. That's fine, did you try the solution I provided? If you read the if above it you would understand, it will not set it if it's being loaded from rails. When you run via the command line rails is not loaded until after teaspoon, if you run it via the engine (in the browser) teaspoon has been loaded after rails.\nYou're free to do whatever you want, run it in test, but you're missing some important aspects of performance. First, if you're viewing things in the browser they're being time-stamp checked and cached until they're changed, so then if you run teaspoon in the command line in the same env you get the benefit of them being already compiled and cached. So regardless of what you might think you will be getting less performance, but I expect you're willing to make that trade based on some other requirement.\n. fair enough.\n. Thank you.\n. Probably best to leave it out. In general I think data should be mocked, and the server shouldn't be accessed from JavaScript specs.\nAt the same time, I know there are reasons to deviate from that, so I want it to be supported, but I don't want it to give people more rope.\n. Which teaspoon_env do you mean? Link to code?\n. Thanks. That's fine, but would you update the docs?\n. I'm unsure on the JSON bit, but since I've never used the hooks, it's kinda up to you, and for others to contribute to.\nAs for tests, yes, coverage stayed the same, but if you don't want me or someone else to break it later you should have a test (at least a unit test). In general terms I try not to break specs, but if it's not tested I'm known to \"clean it up\". :)\n. Looks good. Thanks. Let's just get some unit tests around it so I don't break it later. :)\n. Thanks!\n. Hmmm. Your setup has a lot to do with that. Technically speaking there are two phases on coverage. This may help you track down why, and hopefully you can share what you find.\nFirst, the files have to be instrumented, and this happens with a layer that hooks into sprockets (technically rack, but also sprockets). Because of the nature of how complex sprockets is, and how heavily it caches files, this is hard.\nAfter a file is instrumented, when it's then \"run\", and code is executed the instrumentation code builds up an object with information about methods, ifs, etc.\nThat object is then passed back to the server, and teaspoon routes that though eventually to the resolve_coverage method.\nIf you want to spend some time on it, it would be appreciated. First check that the js files being loaded in the browser are being instrumented.  The easiest way to do that is to console.log a function def as a string. If it looks normal it's not being instrumented (at least I think).\n. Bonus points, figure out why it's not being instrumented. :)\n. Thanks again.\n. Thanks for sorting that out.. that was a really useful contribution. =)\n. since I couldn't easily merge this, and it was a simple change I've made the change and will see where net out. thanks.\n. aggg! how is that happening? I just did a quick check and can reproduce.\nSo, the weird thing, is that I thought it was because of this line having a slash at the beginning, but it's not.\nThen I thought it could be with some bad code around the prepend_fixture_paths, but that's not it either.\nSo, I thought rails would not go looking anywhere other than your view path, or one that you've registered for views, so do you have any idea on why that's able to be rendered??\n. No, that's the behavior of rails apparently.. gaah. wtf?\nI just did the same thing in a different project, and rails renders things outside the view path.\n. I found this, which seems related, but it still seems like a security issue in rails proper, and I don't understand why view paths are even there, if it honestly renders things outside of them regardless.\nhttp://blog.flowdock.com/2014/05/07/how-we-found-a-directory-traversal-vulnerability-in-rails-routes/\n. I'm closing this for now, but will address shortly.\n. Should be fixed, and also, it annoyed me enough that I submitted a PR to rails.\nhttps://github.com/rails/rails/pull/16888\nFeel free to provide your opinions and insight. I realize I was using it wrong, but the default behavior is kinda scary. Seems like it should be the other way around, so we'll see.\n. Use guard-teaspoon.\n. Nice! Will merge if you update the README and the install generators -- specifically the teaspoon_env stuff. Thanks.\n. Yes, almost. =)\nWill you do an interactive rebase to get it into one commit? It's easier to track what changed in regards to that if it's in one commit.\ngit rebase -i HEAD~3\npick the first one, change the other two commits from pick to s (to squash)\nthen adjust the commit message in the second step\ngit push -f origin [branch_name]\nAlso, if you've never done one, it's worth learning. =)\n. Thank you!\n. this should be fixed now.\n. No, that's actually really interesting, so thanks for the heads up.. Hmm.. If there's a way to tell rack-mini-profiler not to do it's thing you could put that in the teaspoon_env.rb, but I didn't see anything in their readme, and assume it's just a \"if loaded do it\" sort of gem.\nThe reason Teaspoon prefers development is because of caching and a few other minor things, but you're welcome to change the env to test. You can set it in the teaspoon_env.rb or with the rake command RAILS_ENV=test rake teaspoon.\nHopefully that gets you down the right path.. I'm tagging this as info though. Thanks.\n. cool.. so, it's a long long story.. but the way assets work in the browser (eg. /teaspoon), and how they work in the test environment can be configured in a vastly different way.\nSo I'll just give you one example of that. In test, assets are configured by default to be combined, so you would get a line number of application.js:4572 instead of the actual.js:24. If that's what you're shooting for that's ok, but it's a struggle to get it to behave in any consistent way with the various asset configuration options that can exist in dev and test environments. Like I said, you can opt into that, and it's not forced, but you will see differences and experience confusion because of it, so it's an opt in, not an opt out.\nThanks for the info though, that's good to know.\n. Absolutely! thanks so much for the info. You want to submit a PR, or have me do it? It might be a week or two before I can get around to it.\n. yeah, I believe that was a PR for a windows fix, but it broke things elsewhere. I think we'll release teaspoon in the next month or so. Sorry about that.\n. I believe I've resolved this.. I am not using shellescape anymore however, just wrap things in quotes.\n. They should be rendered through the standard asset chain, so I'm unsure why it's not working for you. Like, you can render sass from a normal url, right? Teaspoon just adds an additional path to assets, so same rules should apply.\n. Thanks! that's good to know from my end as well.\nIf you want to submit a PR with added version it'd get merged. Specifically documenting it in the install generator templates, and readme.\nI've been slammed on other things, but it's always appreciated when someone is doing checks for version updates.\n. Why did you close it?\n\nJeremy Jackson\n\nOn Feb 4, 2015, at 6:32 AM, Daniel Shannon notifications@github.com wrote:\nClosed #276.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'll give this a try and revert if needed.\n. I removed the stuff you had shifted out of suite, because it was only using the default configuration -- which broke some specs, and seems short sighted.\n. I now understand what the changes were, but don't fully understand the need for them.. can you explain further?\n. If I understand correctly, you need to instrument files that are being loaded via requirejs, and thus the instrument=1 param isn't present. I'll poke around a bit, and understand the desire for it, but absolutely abhor having to do shims in teaspoon to support requirejs -- it's at an entirely different level, and one I happen to disagree with.\n\nIf it can come at a different layer, it would be better. So the ideas I've kicked around, but can't quite resolve are to add an additional configuration -- but even that doesn't work well, and the core reason is that the instrumentation determination has to come at the level when a file is included for load -- with all the context of the configuration used during the test run -- which is not possible when an asset is requested.. though I'll investigate that.\n. Move all specs out of the dummy app, into the engine root/specs.  Are you testing the dummy app, or is the dummy app the means to test your engine? The former should be your answer fwiw, which makes my recommendation make more sense.\n\nJeremy Jackson\n\nOn Nov 3, 2014, at 12:26 PM, Jordan May(Intern2) notifications@github.com wrote:\nFollowing the instructions here: https://github.com/modeset/teaspoon/wiki/Testing-Engine-Assets\nIf I start the rails server in the dummy app, the web interface runs the tests that are outside the dummy directory propertly. If I run 'rake teaspoon' in the dummy directory everything is also good.\nBut if I run 'rake teaspoon' at the root of my engine it says \nTeaspoon::EnvironmentNotFound: Unable to load Teaspoon environment in {spec/teaspoon_env.rb, test/teaspoon_env.rb, teaspoon_env.rb}\nThat file is in dummy/spec. How do I get it to be seen by my engine's rake task?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the heads up! :+1: Just as an aside, teaspoon is tested with teaspoon, and the teaspoon specs aren't in the dummy app -- they're in the engine top level specs. That's the official recommendation, but settings the envs works as well. I guess the reasoning behind putting them at the engine spec level, is because the dummy app is just the stub used to test your engine, and I don't put things like the rspec specs or capybara features in the dummy app either. That same logic seemed to apply to the javascript ones as well.\n. Glad it worked. Feel free to check out the dummy app from teaspoon, it's lightweight, and I think there's a few specific changes that are needed in general?\n\n\nJeremy Jackson\n\nOn Aug 26, 2015, at 8:16 AM, Joel Oliveira notifications@github.com wrote:\n@jejacks0n yeah I would have to agree with that. My first attempt had it situated as such but I couldn't figure out what was going on so I went with the instructions in the wiki until I got it to work. Now that I have a better working knowledge of its internals I'm going to do just that - move the js specs from within the dummy app to the engine specs dir.\n\u2014\nReply to this email directly or view it on GitHub.\n. :+1: thanks!\n. https://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n. I'm not opposed to this at all, but I don't know if I follow.\n. The reason I put in selenium was because it's about as broad of support as you could ask for. You can use it with safari, or IE, though I can't imagine the setup for IE is anything easy.\n. Seems reasonable, I've been pretty busy lately. If you would create a wiki page that matches the selenium/phantom ones that'd be awesome. I'd like to capture whatever details there are, and have a place to expand the concept should it need additional information.\n. Test results aren't stored for memory reasons, they're dumped to STDOUT and cleaned up.. I'm not opposed to this idea though, so let me know what you find. Sorry I've been MIA on work stuff.\n. Would accept a PR for integration with sauce labs, but have not needed it thus far. Seems like an interesting challenge though.\n. I'll take a deeper look at this in a bit.. I don't think you caused them either -- dependencies need to be updated, and I intentionally do this.\n. I don't see how that's possible, so the answer is probably not. Just the nature of the translation from coffeescript to javascript.. there's no way to accurately convert it back to coffeescript without heavy instrumentation.\n. would consider a thoughtful PR.\n. Yeah, would merge a PR with an update to the readme. =) Thanks!\n. So I was willing to help, but your last comment indicates that you're probably not open to it being something other than teaspoon. I'll try anyway.\n\nI structure my JavaScript dependencies, and recommend it in general. Eg. The spec file requires the implementation it's going to test, and the implementation requires its dependencies. I don't use one monolithic application.js to build everything. I'm guessing you're doing the later?\nThe reason for this is because I can run a single spec and load a minimum of JavaScript. If you use one monolithic manifest, rails has to re-generate that file even if only one file changed.\n\nJeremy Jackson\n\nOn Jan 19, 2015, at 5:19 PM, Bram Whillock notifications@github.com wrote:\nActually not much better. What are you guys doing? my CPU is absolutely hammered.\n\u2014\nReply to this email directly or view it on GitHub.\n. Are you running it in dev mode? That's why teaspoon runs in dev mode by default -- you're convoluting how rails behaves with teaspoon, which is fair because it's complicated, but it sounds like you're running it in test/prod env.\n. it's being expanded because a line number and file name for an exception is pretty useless in one monolithic file, don't you think? What version of rails are you on, there's a known issue of slowness in sprockets that I submitted a PR for -- and has been fixed as of 3.2.13 or something like that -- http://weblog.rubyonrails.org/2013/2/27/Rails-3-2-13-rc1-has-been-released (search for Jeremy Jackson)\n. I wish I had a good solution for you, but not knowing literally anything about your setup, you're free to add some profiling tools and whatnot -- you'll see that the majority of time is not within teaspoon, but rather, within sprockets/rails.\n. Out of curiosity, how many files are you talking about here? 100+? If you look at a project like https://github.com/jejacks0n/mercury/tree/mercury2 you'll see that there's over 1k specs, and many many lines of code and files -- in coffeescript. This compiles and loads from scratch within 10 seconds on my 2012ish macbook pro, and additional changes to various files results in only those files being compiled, so subsequent loads take closer to 2-3 seconds. The specs run in less time than it takes to load usually. I'm still unsure why your files are being forced to concatenate as you say you're running in dev -- do you have some really strange asset configuration in dev? Like, they're never supposed to concat in dev, so something must be overridden that is making you experience it. Those are my final thoughts, let me know what you find.\n. there's a suppress_log flag, which is to be used in conjunction. -q\n. (I think this works to disable all output except the spec output)\n. fix the other output -- teaspoon can't fix everything. ;-P\n. there is an output file thing in the formatters -- I mean, they can log to a file -- I just don't remember the details!\n. oh, I remember -- this was in rspec I think, so I mimicked that.. it's part of the formatter, so put it in a string -- it splits on the \">\". This is covered in the readme, if you want to be pedantic.\n\nteaspoon -f \"junit>/path/to/output.xml\"\n. ah, I think this is due to asset stuff? related to #197 \n. I believe you can solve this by overriding Teaspoon::Server.url..\nruby\nmodule Teaspoon::Server\n  def url\n    \"http://127.0.0.1:#{port}/namespace\"\n  end\nend\n. They're failing because of updates to dependencies. Thanks for this PR, I'll review and merge when I get some time.\n. Can you provide documentation updates -- and an option to override/provide the option from the command line interface?\n. Poke -- You should be good to get this rebased and the specs should pass. Still just waiting for the configuration option to be fully baked into the project.\n. Have you loaded require.js, and read the documentation for the libraries you're using?\n\nJeremy Jackson\n\nOn Jan 26, 2015, at 7:24 AM, Jeremy Venezia notifications@github.com wrote:\nI'm using teaspoon with qunit to test my ember.js application, which uses i18n.js for internationalization.\nWhen I run tests I get :\nUncaught ReferenceError: require is not defined\nIt is called in this file, line 5.\nAny clue on this?\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. But I see a require call in the library, so I'm unsure how it works without the dependency. Sorry it's not what you want to hear, but it seems to be the problem.\n\n\nJeremy Jackson\n\nOn Jan 26, 2015, at 10:30 AM, Jeremy Venezia notifications@github.com wrote:\nYes, I know what I'm doing, and I searched for similar problems before submitting an issue.\nI don't need require.js since i'm using rails witch uses sprockets to require files.\nI've just realized that Qunit's module may be the problem. So this condition is true, but it should not.\nSo It may be a I18n.js issue, and not teaspoon...\nI'm closing this issue and checking this out...\n\u2014\nReply to this email directly or view it on GitHub.\n. No, I'm not sure -- and it's not been reported that I know of before. would be curious if you can get to the bottom of it and provide an actionable though.\n. Yeah, phantom is sort of lagging behind, and that's a bummer because it's far more efficient. Let me know what you find, I'd be interested.\n. I haven't really seen it before, but I'm tagging the issue as information and closing it for now. Could be an odd setup or bad phantomjs build?\n. looks like teaspoon isn't loaded in your environment. configure is defined on the base Teaspoon module, and if for some reason you're not loading that (you've only loaded teaspoon in your test group for instance) it won't be defined.\n. You're probably right. Do you want to submit a PR?\n\n\nJeremy Jackson\n\nOn Jan 27, 2015, at 6:45 PM, Kareem Amin notifications@github.com wrote:\nIn the default spec_helper.js file if you decide to use Chai and uncomment the following variable assignment:\n// window.assert = chai.assert;\n   window.expect = chai.expect;\n// window.should = chai.should();\nThen the following section which loads all js in the rails app seems to be unreachable i.e. the files that I expect to be loaded that are in application.js are not loaded.\n// You can require your own javascript files here. By default this will include everything in application,      however you\n// may get better load performance if you require the specific files that are being used in the spec that tests them.\n//= require application\nHowever, if I move the require application directive to the top of the file it loads the correct files. Not sure if the preprocessor stops once it sees js code but if I comment the variable assignment for Chai it loads the file as expected.\nI think it's worthwhile to move the loading of other js files to the top along with the require directives for support libraries to avoid this problem.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for helping sort out the confusion!\n. yeah, I think that's probably it.. thanks @coderjonny.\n\nIt's an array because multiple formatters can be used -- to generate artifacts and console output.\n. :-/ hmmmm... I wrote the guard-teaspoon gem as a helper for people to get started, but it seems like it requires more maintenance than the community that uses it can provide. I don't use guard, and so only took an initial stab at it.\nMy guess is that the options that make it through to teaspoon are not correct, or are being overridden by guard -- which I believe is probably the case.\n. I think the guard-teaspoon project is overriding those things, so you may be able to configure it differently on that end.\n. This is not within the concern of teaspoon, as teaspoon supports what the framework supports.\n. actually, I take that back -- it might be possible, and we'd accept a PR with this implemented.\n. Thanks!\n. I can't tell without seeing it, so try and base your boot partial off the one in the gem. Load that, see what's loaded, make a small adjustment, see if it works, etc.. my guess is that you're not telling teaspoon to execute though.\n. Consider preloading your fixtures? That's in the docs, and I think works how you want.\n\nJeremy Jackson\n\nOn Feb 9, 2015, at 7:41 PM, Roger Studner notifications@github.com wrote:\nReally simple.\nI have some .js files that have the canonical $(document).ready(function() { // do some stuff }\nI have a fixture file with a bit O static HTML in it.\nSo, the problem is insanely simple.. the order of loading/running is this:\nmy .js file & its document onready 100% run\n.\n.\n.\n.\n.\nthe fixture gets loaded.\nThus, if my document.ready expects anything to be in the DOM from the fixture file at all -- it isn't there.\nApp works 100% fine outside of tests :)\nWhat the heck :)?\n\u2014\nReply to this email directly or view it on GitHub.\n. Consider using the jQuery(function() {}) style instead of the document ready style as well. Reads nice imo.\n\n\nJeremy Jackson\n\nOn Feb 9, 2015, at 7:41 PM, Roger Studner notifications@github.com wrote:\nReally simple.\nI have some .js files that have the canonical $(document).ready(function() { // do some stuff }\nI have a fixture file with a bit O static HTML in it.\nSo, the problem is insanely simple.. the order of loading/running is this:\nmy .js file & its document onready 100% run\n.\n.\n.\n.\n.\nthe fixture gets loaded.\nThus, if my document.ready expects anything to be in the DOM from the fixture file at all -- it isn't there.\nApp works 100% fine outside of tests :)\nWhat the heck :)?\n\u2014\nReply to this email directly or view it on GitHub.\n. Not sure, loading is entirely up to you. I recommend writing your tests with proper dependency requirements. For instance, your spec helper should only load library code (eg. jQuery/moment/underscore etc.) and then your spec files should require what they use. That way your spec_helper is loaded, then your spec files (or spec file if running a focused spec), then any fixtures, then any implementation files. If you're loading everything from application.js or something similar you may have complications. I prefer the scalpel and load only what's need for a spec to pass, but understand a lot of people use a hammer. I don't have a solution for the hammer approach, which is sort of why I dislike it and don't use it.\n. It looks like you want to load your fixture into the dom before the beforeEach is called, fwiw.. how do you accomplish that? You may be able to accomplish that by injecting it when the file is executed, and not before the test is run -- like, before your test even runs you're already doing a bunch of setup in your application, no?\n\nSo that means your current situation is, javascripts are parsed, application is initialized, test run begins. After which point, your beforeEach is called.\nLooks like you'll need to inject your dom manipulations before the application is initialized. You can experiment with manipulating the dom at the time the spec file is being executed, and not when the specs are being run -- if that makes sense. Try adding something to the dom at the base of the file and not within the beforeEach.\nAnother approach, and one that I'd recommend, is to not initialize your application until you need it. For the most part teaspoon is a unit test framework, but you can use it for more integration level tests if you want -- you just need to know the issues that can arise by doing so.\n. No, teaspoon is very raw, and in fact clones copies of various global variables (things defined on window) to avoid any stubbing messing things up.\nThere is one small place where teaspoon does use $, and so can give you back a jQuery object.\nhttps://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/base/fixture.coffee#L77\nUnsure what else I can do to help without more information. Would love to have angular support added properly, but that was attempted, but was not polished enough for me to continue to support. None of the maintainers have used Angular on a project yet, and so that too makes maintaining it difficult -- without being very knowledgeable in a thing, it's hard to support it at a test level you know? \n. Thanks, but please adjust this to only shift the application require to not be above any dependency loads.. you've put it above the bind-poly in some cases, and it should not be above any other dependency.\n. I believe this is fixed in master, so if anyone wants to give it a shot to see if they can reproduce it that'd be awesome. @jedschneider?\nI'm unsure if it's related, but it may be, and it had to do with file order on linux not being the same as os x.\n. @jedschneider you never checked back in about this. Closing it, but feel free to provide your results. Master now is considerably different, but that problem should've been fixed with the ordering of files.\n. Whoa! That's an excellent solve. If it works how I assume, yeah, it won't bother starting a second instance if something responds and is available at the specified url/port.\n. Seems reasonable. I don't disagree with where you have it, but is it maybe better suited for the CLI area of the documentation? I guess the reason is that if the env is not where it's expected, it can be manually required within the rails pipeline so the browser interface still works, but the env is one of the first things loaded from the CLI, and so that's when the override comes into play.\n. That's true it would. Point taken.\n. Yay! this is totally better, IMHO. I'll merge, and you can confirm that your setup is working on master?\nThanks for this.\n. that should be correct to generate reports.. there was a difference of instanbul arguments (if I recall correctly) and I could not find a way to resolve the versions. You should be running the latest istanbul for the command to work correctly.\n. I never added a version check because there had been a pretty long lived deprecation warning from istanbul directly.. and also, it was hard to check version (I think this too had changed with the versions), and so would've been ugly and painful.\n. I'm guessing that doesn't work on windows. heh. ;-P\nWe should probably indicate the required istanbul version in the readme though, so point taken. If it's working correctly, do you want to provide a follow up PR that specifies the required istanbul version?\nThanks again for your help in resolving this -- I want to support requirejs, but don't use it myself, and that makes supporting a thing much harder than otherwise.\n. Also, want to make sure the wiki is up to date.. Would you do a quick review and add anything that might be wrong/left out?\nhttps://github.com/modeset/teaspoon/wiki/RequireJS-with-Teaspoon\n. let's discuss adding a global ignored_files to the coverage configuration. I think this will allow suite level overrides, but will provide a basic set that will resolve this specific problem.\n. The other way we may experiment with, is setting the current suite into the configuration -- though this gives me pause. If the current suite being rendered is accessible globally, then we can use that configuration directly in the instrumentation layer. This is the less optimal approach, but might provide a simpler mechanism to achieve the desired result in the current architecture.\n. yeah, there is that, but the question has to be asked at the time the files are being linked, as the suite is not known at the time that assets are requested.. does that make sense? usually, when we build out the manifest of files to load, we have the suite config in hand, but at the time the assets are loaded, it's expecting the instrument param to be present or not -- and there's not an easy way to ask that question at the time that the asset is being loaded -- nor does that fit the current flow cleanly.\n. There's 1.10 in there. You can also add whatever support libraries you want.\n. @mikepack I'm going to merge this and start structuring the client code.. do you want me to merge the Jasmine2 stuff first, or is that not ready yet? My next steps will probably create several conflicts with your stuff.\n. Looks like a good start.. can we put this in the coverage specific configuration? Seems like it's pretty much directly tied to that.\n. I appreciate the effort, and will merge it when it's moved into that area of the configuration. =)\n. haha, fair enough. I hadn't thought about that. pfff... thinking on that, but thanks for making the point.\n. @mikepack how do you feel about this conversation? Do you think it's really bad if we set the current_suite at a Teaspoon level from within the controller so the instrumentation can determine what files to instrument or not? We're hobbled by how sprockets hooks work.\n. Because you can specify a coverage config at runtime, or by configuring one within your suite. It gets complicated. @davestevens how about I leave this open for a bit, and when we're working on it for the v1.0 release, we'll try and figure out how to do this nicely, so it just works. Are you cool with that?\n. I'm thinking setting the current_suite is really the only way to accomplish it.. so, I dislike requirejs, have I said that already? haha. ;-P\n. Ok, so I appreciate your effort on this, and sorry I haven't merged it yet.\nThere seems to be a solution that'll work better than this, and you have my apology for leading you down a less optimal path. I'm happy to do this work myself now, but I'll explain it anyway in case you want to give it a shot -- it's not far from this implementation really.\nOk, so instead of putting it at a top level configuration, it should be a coverage configuration option.. essentially just moving no_config from suite to coverage. The reason for this, is that the coverage configuration is known globally, and so after some thought it seems like it should technically belong within the coverage configuration anyway. This change does involve more changes than what's in this PR to make the suite understand these concepts through the coverage configuration.\n. It's not associated to the suite. It's set at the global use_coverage configuration level. That configuration can be specified at run time as well.\n\nJeremy Jackson\n\nOn Mar 5, 2015, at 2:22 AM, Dave Stevens notifications@github.com wrote:\nThats fine, and it does make sense to have this option on the coverage configuration.\nThis is where I had originally put the option, but I ran into the issue of being unaware of which suite was currently being run when Teaspoon:: Instrumentation.add? was executed. What is your idea for this?\n\u2014\nReply to this email directly or view it on GitHub.\n. @mikepack this is what I'm going to tackle next. You should be good to go on the javascript changes you want to make.\n. I haven't thought about it much, but it doesn't need to be as complex as the ruby framework implementation -- because the ruby side determines which javascripts, and thus which framework to load.\n\nThat makes me think we can do a single interface for registering the setup (initializer) and the reporters. If we do that nicely, by specifying a scope or something, teaspoon can figure out which reporter to use given it's core setup (in the current case that's just specifying the reporter=Console param, but we could change that to make more sense -- to scope=console or something), and then load the reporter that was specified for the given scope. To be honest, it might be worth having a discussion about restructuring that so we're not using that param on the client as well but that might not have much value.\nThe implementation is up to you, and those are just my thoughts.\n. We just need to move as much of the messaging to the exception classes themselves (in exceptions.rb). I'm happy to take this on too.\n. Done in fd7d4442d90fb1982f08efe2cc32e96c1ed69fea\n. Are you requiring teaspoon in your gemfile, and if so, in which groups? it needs to be in :development and :test.\n. ah, interesting.. I think I know why, which seems like it's not a new issue.\n. Can you let me know if this is fixed? It's really difficult to have a test for this kind of case.\n. it can't determine the file that a spec exists within.. if you can figure that crucial aspect out it might be doable -- from the command line however, you can specify a specific spec file to run, and as long as you've setup your dependencies correctly (eg. requiring only the files that are needed for a given spec file) you get the best speed and load times.\n. you can't determine that from the spec \"title\" -- the file is unknown at that time, and javascript has no way to reference the file that a given function is defined within -- as far as I'm aware in the browser.\n. I see what you're getting at.. if you're focused to a specific file, it should retain that file and add the grep param. That's a valid point, and would not be too difficult. Would accept a PR with that for sure.\n. so the answer is yes, you can give that a shot manually and it should work as you'd expect. I am unsure why that wasn't something that was added initially, but the concept of the suite page was a bit of an afterthought and so may not have been fully baked at the time.\n. To be honest, I thought I added this concept -- which is why I provide an interface to remove one.\n. interestingly you can do this from the CLI by providing a filter (-g or --filter), and specify a file/files to limit that to.\nshell\nteaspoon -g \"bar\" spec/javascripts/foo_spec.js\n. :+1: This looks good, but I'm going to have many conflicts with this one.\n. You want to hold off with doing this for all frameworks while I finish tidying up #321?\n. Yeah, let's do it, I'll rebase again and then get #321 in shortly there after. Then we should be in a good place to move forwards. I've been spending some time here and there figuring out how best to make specs easier within the framework gems, but I have yet to figure out how to get bundler to install the development dependencies for a gem, and thus, can't quite get it working smoothly.\n. cool, I'm on gitter if you want to chat more real time.. I'm finishing up a few things right now.\n. you can't load javascript with the fixtures.. it doesn't eval it, and so your var won't get processed. either load your js file in your test run like you would load any other javascript, or use a proper json format.\n. you mean here: https://github.com/modeset/teaspoon#example-usage -- where it clearly uses .json and not .js?\n. sorry if it comes across that way, just trying to give you the most concise information. if you have javascript, load it as a dependency of your test. if you have json data, load it via fixtures.\n. either works in your case depending on what you want, but when I say the fixtures don't eval javascript, it should be clear what the intent is. it's to load raw data, not javascript that is parsed.\n. ok, if the documentation isn't clear, I don't know how to help you.\ndata.json\njson\n{\n  'dates': ['2014-04', '2014-05', '2014-06', '2014-07', '2014-08',\n    '2014-08', '2014-10', '2014-11', '2014-12', '2015-01', '2015-02', '2015-03'],\n  'high': {\n    'org': [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2],\n    'all_average': [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2]\n  },\n  'medium': {\n    'org': [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2],\n    'all_average': [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2]\n  },\n  'low': {\n    'org': [1, 2, 3, 2, 1, 2, 3, 2, 1, 2, 3, 2],\n    'all_average': [3, 2, 1, 2, 3, 2, 1, 2, 3, 2, 1, 2]\n  }\n}\njavascript\nfixture.load('data.json')\n// within your tests you will have fixture.json[0] -- which is that variable.\nas you can see, your js is not valid json -- double quotes are required for string variables. http://json.org/\n. Answered on stack overflow. Something like cucumber or capybara+rspec works better for these sorts of things.\n. so, secretly, you can do this by making an ajax request to your endpoint and inserting that into the fixture element, but this is not advisable.\n. Yup, no worries.. teaspoon is primarily for unit testing javascript -- with some integration level things by the nature of what javascript usually does and how that intersects with what we typically consider integration tests. It's advisable to do unit tests for javascript, in a scenario that you can run against various browsers potentially (using selenium-webdriver you can accomplish this).\nAnyway, javascript unit specs are blazingly fast in comparison to capybara/cucumber/etc and allow you to cover more cases without having to have a unique integration feature for each one, and is just another layer for you to utilize for good coverage and good speed.\n. Fixtures or hooks? Thanks for the detailed info.\n. I'm a little unsure what you're asking. The test you're looking at in teaspoon is a capybara test, and is just testing teaspoon usage and has nothing to do with what you may be trying to do.\nIf I were to take a stab at what you're trying to do, you're calling a method in javascript that in turn calls alert -- what you probably want to do is to to stub (spy, whatever) window.alert -- then assert that the value of the alert is what you expect to see -- or don't that's up to you.\nTeaspoon has nothing to do with capybara, which is what that thoughtbot article is about, and runs strictly in the browser.\nMaybe a better example of spying on window.alert can be found here? https://github.com/jejacks0n/mercury/blob/1cc637b0bccea19085f824d2881c6513ed5ee8ae/spec/javascripts/mercury/mercury_spec.js.coffee#L35\n. hey @thejamespinto! thanks, this is nice.\nI can't really merge this cleanly right now, but I'll revisit it when I get a chance, does that work for you? I will probably take an approach that doesn't include the various gemspecs as well -- I've found it confuses some people, especially if they inadvertently make it into the gem package.\n. I'll leave this open for the time being until I can revisit it.\n. That\u2019s fair. I think the way I\u2019ve seen it before that I liked was setting a RAILS_VERSION env that is used in the Gemfile (with a fallback). Then you can set a matrix of those versions pretty much the same way you have in the .travis.yml.\nThe problem I see with teaspoon is that it\u2019s been generally painful because of sprockets updates, not rails updates \u2014 but not isolated to sprockets entirely, but yes, I agree that testing it on multiple versions of rails is critical. Additionally, it\u2019s not going to be so much a part of teaspoon proper, but rather something that each of the frameworks will focus on, since those are the \u201cend to end\u201d implementations of jasmine, mocha, etc.\nI very much appreciate your work, it was just bad timing on when it went in \u2014 and we\u2019ll try and address this and get the concept in where it fits as soon as we\u2019re done with the 1.0.0 push. Thanks again!\n\nJeremy Jackson\n\nOn Apr 4, 2015, at 9:22 PM, James Pinto notifications@github.com wrote:\n@jejacks0n https://github.com/jejacks0n hey, well, having separate files seems like the most logical and organized thing for me, whereas having a crazy conditional dependency structure seems like hell\nYes, the approach works for me, I wouldn't have created a bad PR on purpose.\nHowever, there was one single spec that failed, so I assumed you would know how to fix it.\nI loved this gem, just do me a favor and make it run on various Rails versions so people will always be able to adopt it and update it \n\u2014\nReply to this email directly or view it on GitHub https://github.com/modeset/teaspoon/pull/335#issuecomment-89710465.\n. Thanks for the kind words.\n\nThe exception should show up in your console if you're running teaspoon in the browser -- you have to check for these, and I don't have a better solution for this because a parse error comes long before teaspoon can do much -- as far as I understand parse errors to be handled.\nAdditionally, if you were to run it from the command line it should display an error there, though I know that there's maybe a conflict with the better_errors gem. Hope that helps, and let me know what you end up finding -- this has been a pretty consistent issue, but based on how browsers work, and how better_errors tries to take everything over at the rack level I don't have a good solution for the potential issues that can be present.\n. This isn't quite the same @mikepack -- I think what's being described here is this is an exception at parse time, which halts all further javascript execution, and so Teaspoon can't do anything at that point really, other than try to override window.onerror, but that seems like an area we probably want to avoid.\n. What you're thinking about @mikepack is the ability to toggle the try/catch button so exceptions provide a more useful stack trace, and one where execution can be halted for debugging purposes -- instead of masking them behind a try/catch that may only provide you vague insight into what might be happening to cause the error.\n. That's what it does. It exits with a non zero exit code, which is the standard, and so may cause rake to not execute the next task. That's pretty much how every example of a test runner seems to work.\n\nJeremy Jackson\n\nOn Apr 1, 2015, at 9:50 AM, andyl notifications@github.com wrote:\nIs there a way to make Teaspoon stop execution immediately after a failing example?\nI am using the option fail_fast = true, but that seems to prevent the execution of follow-on test suites. I'd like to be able to stop execution immediately after a single failing example. Is this possible?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmm.. Guard. I don't know if that's supported in guard, you didn't specify that. =)\n. That's interesting. You seem to know plenty of ruby, so would do you want to take a look and see if you can submit a proposed functional change or write a spec that exhibits the improper behavior? That'd be nice if you can help point me in the right direction -- minus guard.\n. Let's just pull this out and put it in a configuration -- then you can add a wiki article about it if you'd like. I'll include es6 in the default value too. I'll merge this and then refactor to configuration.\n\nThanks!\n. :+1: The only thing I'm so-so on is the class << self -- reason being it's more difficult in terms of readability to someone not super experienced in ruby. Up to you on if you want to change it though.\nNice work!\n. @mikepack I honestly don't mind it, that was just feedback.\n. haha\n. Fair enough. Somewhat related, we should move away from active_support as we go too. Feel free to do that in other PRs.\n. There's no tests for this, because it's kinda hard to craft a specific setup for this, but in master you can't run teaspoon via teaspoon anymore, and so we can use that as a testbed.\n. I'm not opposed to this, but let me screw around with it to see how easy it would be to take rails out as a dependency for a bit. It kinda plays into supporting middleman, and potentially providing a simple rack middleware layer that teaspoon uses if rails isn't present -- though that sounds particularly unpleasant. heh.\n. did jasmine 2.2.0 ship with 0.8, or 0.9?\n. @sp1117, then I don't think you're using jasmine 2.2.0 -- which is probably the problem. Probably want to stick to the version you were using before.\n. 1. what version of phantomjs are you running?\n2. have you considered locating and fixing memory leaks within your application?\n3. is it always the same spec, or does it happen at different times?\n4. have you reported the issue as phantomjs asks in the crash output?\nAn alternative to 2 is to fork the repo and implement what you're looking for. This is definitely outside the scope of teaspoon, and I've not heard of the issue before, but it seems reasonable to assume that it's a memory leak and phantom failing. The amount of time that we have as a team to dedicate to a memory leak problem in your application is minimal, though if you can track it down to something in teaspoon we'd definitely take a look!\n. Ah, gotcha, I must've misunderstood the request.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs_driver.rb#L33\nI'd probably try adding some rescue statements there, and add some recursion. That would at least fire up phantomjs again -- all speculation of course.\nThat might keep things contained within one \"run\", but the problem is really that it doesn't know where you left off, since the \"browser\" crashed. You'd probably have to add some way to track the last spec run, and then somehow add the concept of \"run everything after this spec\" to each of the frameworks (e.g. jasmine, mocha, qunit -- or just the one that you're using). Hope that helps.\n. No worries, sorry it doesn't really handle what you're looking for. Hopefully it's easy for you to sort out -- these things can be a bear.\n. In thinking through my theoretical solution, it won't really work.. when you load the \"browser\" up again, all your coverage information would be gone. There's really no way to keep that between runs -- it's a large amount of data, and so teaspoon doesn't report it until the end of the run. It would have to be sent along with each spec, and then stored on the ruby level and then somehow merged together when restarting the \"browser\" and getting more of them.\n. My guess is that it's not in the precompile list?\n. That's fixed in latest.\n\nJeremy Jackson\n\nOn Feb 12, 2016, at 7:24 AM, Steve Richert notifications@github.com wrote:\nI'm having a similar problem and it seems to be due to the \"sprockets\" gem version. Locally, everything works with sprockets 2.12.4 but the build server has 3.5.2 installed. For me this can happen because Gemfile.lock is not checked in since I'm developing a gem so the build server fetches the latest version of sprockets that will satisfy the requirement.\nI've confirmed that in my scenario, the jump from 2.12.4 (the last 2.x version) to 3.0.0 (the first 3.0 version) is enough to trigger the error.\n\u2014\nReply to this email directly or view it on GitHub.\n. Release of teaspoon perhaps? The repo you opened this issue on... :)\n\n\nJeremy Jackson\n\nOn Feb 12, 2016, at 9:14 AM, Steve Richert notifications@github.com wrote:\nLatest what?\n\u2014\nReply to this email directly or view it on GitHub.\n. If I were to have to take a guess, it seems like there's nothing resetting the internal references to elements that PortalAppliances has.\n\nBasically, I see an init call, which I'd guess is finding an element and initializing some things with that element, but I don't see anyplace where that element reference is unset, and so without seeing more of your code, are you certain that you're not keeping an internal reference when you don't intend to?\n. FWIW, I'm like 95% certain that the fixture is in fact being cleared out, and so suggest you move past that as the likely issue you're seeing and investigate further about the internal references that might exist in your implementation logic.\n. I don't see you removing any bindings from anything. does knockout keep an internal reference? so while you say that's all of your code, there's obviously a lot happening in ko that's probably important for you to be aware of.\n. phantomjs is an implementation of a browser without the UI layer.. part of teaspoon starts this server and then browses to the determined url -- then another part of teaspoon runs within this browser instance. For more clarification you could use something like selenium-webdriver and watch teaspoon run in a browser that's visible. Also, browsing to /teaspoon in your development server exposes what the first part of teaspoon is loading in phantomjs.\nYou're not taking my advice very well though, which is to say that it's not a fixture problem, it's a cleanup problem. Something is not being released within your application (and to be clear, your application is not just the code that you've written, but is comprised of all of your application dependencies), because how would it? There's no cleanup code that I've seen. A simple way to test my assertion is to try calling PortalAppliances.init() several times within your applications setup script (or wherever this is happening) -- do you not get the same behavior you're seeing in the tests?\nIf you get the same behavior, then I am correct, if you do not get the same behavior then I might spend more time trying to see what might be broken in regards to the fixtures.\n. Yup, that's basically it.. so teaspoon does have a view that becomes the \"DOM\" at the time of browser load -- and the fixture element (where fixtures are loaded into) is part of that. So when you load a fixture, it gets put into the larger dom and does not replace the existing dom.\nSo basically yes, the root dom doesn't change, so scoping that init to the element that is created, and then removed would fix it. Perfect.\n. try it with something like selenium webdriver (covered in the wiki). I'd guess that your version of phantomjs might not support something that you're trying to handle -- a polyfill will usually fix this.\n. Redundant curly braces around a hash parameter.\nLooks good aside from that.\nWe should also consider adding a notice in the deprecation saying that no_coverage no longer works, with instructions on how to get the same behavior.\n. Basically what @mikepack says. Development dependencies are not installed and known about via bundler -- and there isn't a way to tell bundler to include them. This is easy to confirm by looking at your Gemfile.lock file and noting that teaspoon-mocha will not be listed -- then shift your gemspec to include it as a add_dependency instead of add_development_dependency -- it will be listed.\nThe way most people resolve this sort of thing is to put it in your Gemfile under a :development group as well as the gemspec, though I personally don't bother putting it in the gemspec at that point.\nThere's a wiki about testing engines -- @mikepack is this still accurate? https://github.com/modeset/teaspoon/wiki/Testing-Engine-Assets\n. I'm not sure what the best approach here is, but I've used this setup before and it provides some useful tooling that is otherwise still kind of a shit show with grunt and friends. Coffeescript, sass, slim (or haml etc.), and rake tasks to build javascripts etc. This takes me about 2 minutes to setup, and I kinda wrote teaspoon to allow for these simplistic setups that I personally enjoy.\nI'm wondering if we just continue on if unable to find the standard rails environment, and let it fail over if rails is still undefined after locating/loading the teaspoon env?\n. For the record, I view this a little bit like a more familiar middleman development pipeline.\n. I'm using 0.9 in the interim -- I couldn't find a simple/good fix.\n. @mikepack ping.\n. They are displayed as yellow when the full report is viewed, but the count is unaffected.\n. Worth noting, the pending state is propagated upwards (the same way failures are), but that's not desired and may be related.\n\nThe desired appearance would match the screenshot in the readme. \n. Hmm.. so, there is the ability to run teaspoon against an already running server -- it's not the solution potentially, but gets you a working version in the interim... start the server on whatever port you want, and you can then specify the already running server port in the CLI arguments. You may also want to look at configuring/setting your server (aka server type -- thin, mongrel, etc.) via the CLI or configuration:\nhttps://github.com/modeset/teaspoon/wiki/Teaspoon-Configuration#console-runner-specific\nI'd guess you must've set it to unicorn in your configuration? I'm unsure what you're getting by doing that, and so letting it run with something like thin (or even Rack::Server) would probably fix your problem. Any reason you need it to run with unicorn, or is it just improperly configured?\n. oh, didn't read the issue fully. heh, sorry about that. Yeah, rack doesn't know about unicorn, cause that's not how unicorn and rack interact because of the nature of unicorn. I'd say don't set your configuration to something that doesn't work. ;-P\n. Looks good, but let me think on it. Here's my train of thought thus far... Initially I thought it's too white, and I don't like the large margins unless they do something nice at lower resolutions.\nI often run teaspoon with the dev tab to the right, and the margins just eat into space that's useful. But on the other hand, it kinda grows on me, so I can't decide just yet. I'm unsure what the [?] is at the bottom as well -- can you explain?\n. Oh, I'd also need to see the alternate views (only failures), and results for pending and failures when the full report is generated. \n. Yeah, the code to accomplish what I wanted in css was uglier than the canvas approach (a simpler design would fix that, but not as is). If you want to design it, and provide the things outlined, I'm happy to consider and potentially implement it with potential adjustments.\n. I think we can just swap out that href with a base64 encoded url.. though, favicons are cached heavily, but that's where we can start. Do you want me to look at it, or is it something that interests you?\n. I'll actually look into this tomorrow.\n. I clearly never looked into this, so I'm going to sweep this failure under the rug. ;-P\n. What I usually do is setup a different suite that inherits from the default (let's call that one CI). Then the standard CLI behaves like the browser so there's no surprises there, and if you specify the suite as CI via the command line you get the reporting as desired. There's plans to make this easier to accomplish via the rake task interface, but until that happens this is the best solution.\nThat's my official recommendation. FWIW, I don't think your idea is flawed or anything, I just want to avoid confusion where possible.\n. it looks like teaspoon isn't being required -- like by bundle exec, or binstubs -- highly depends on your setup though.\n. We try to support up to two versions ago -- deprecation warnings etc. We went through version 8, 9, and we're currently at 1.0.x. I would hound the maintainers of the Rails-Angular to update it and resolve what you need.\nAs a guess, try pulling teaspoon out of the test/dev group.\n. :+1: Thanks Elliot. =) Ignore the failing specs, istanbul changed something in their output.\n. fwiw, I wish mocha had this capability too.\n. It's removed when inserted into the DOM/converted to elements via jquery. It's not really a fixture thing, it's a valid HTML thing.\nI'll think on a way to circumvent that.\n\nJeremy Jackson\n303-507-6846\n\nOn Jun 26, 2015, at 2:52 PM, Brett G. Giles notifications@github.com wrote:\nI often return HTML partials, such as a table row, in ajax interactions.\nGiven a fixture named 'whatever.html' that looks like:\n\nSome thing\n\nThen, when calling loadFixture('whatever.html') the tr and tds are stripped, leaving only Some thing.\nIs it possible to return the verbatim html?\n\u2014\nReply to this email directly or view it on GitHub.\n. Hmmm.. I'll have to think about this, but thanks for raising the issue and looking at a fix.\n. Can you rebase master to make sure it's passing? A change to istanbul output broke a few specs.\n. I'm cool with that.\n. It'll take a new release to pick that up, and I'm not sure we're ready for that just yet, but with the next release.\n. That's because fixtures are served by the teaspoon engine. You'd have to prefix your path helpers with your app \"mainapp\" or something? I don't recall. What you're doing isn't wrong, but it starts to fall into integration tests maybe? Where something like capybara-rspec or cucumber serves you better. Can you explain why you need real links in your fixtures?\n\n\nJeremy Jackson\n\nOn Jul 7, 2015, at 7:17 AM, hlascelles notifications@github.com wrote:\nWe are using link_to tags in our pages, which work fine in development and deployed.\nBut running teaspoon tests we're getting undefined local variable or method for them.\nChanging them back to an explicit <a href works fine.\nCan I confirm they are supposed to work before I dig deep in the teaspoon code?\n\u2014\nReply to this email directly or view it on GitHub.\n. I think jquery is available to our repo through jquery-rails, fwiw. So I think a spec is possible.\n. Code looks good. I'm a bit skeptical that it's a good change though. Like, can I now make an invalid fixture, get a passing spec, and get different results in the real world if I used .insert or .html?\n\nThis was my struggle with the issue. I guess we'll find out. :)\n. If make sure your paths are correct in the confit. You can generate the qunit setup using the generator, which is confirmed as working.\n\nJeremy Jackson\n\nOn Jul 13, 2015, at 7:18 PM, klenwell notifications@github.com wrote:\nFollowing instructions in README and wiki. Tests run in browser with qunit as expected.\nWhen I set up teaspoon with jasmine and run tests from the command line, they run ok. I see the following output:\n$ xvfb-run bundle exec rake teaspoon DRIVER=capybara_webkit suite=default\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:34088/teaspoon/default\n..\nFinished in 0.00800 seconds\n2 examples, 0 failures\n$\nBut when I run the tests from the command line with qunit, I get nothing:\n$ xvfb-run bundle exec rake teaspoon DRIVER=capybara_webkit suite=default\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:47364/teaspoon/default\n$\nNote: I set up qunit and jasmine in separate branches. In my qunit branch, my test file is located at test/javascripts/spike_test.js.\nHave I missed something?\n\u2014\nReply to this email directly or view it on GitHub.\n. Check the project specs then? We can run them from an empty rails app, so you should be able to as well.\n\n\nJeremy Jackson\n\nOn Jul 13, 2015, at 7:39 PM, klenwell notifications@github.com wrote:\n@jejacks0n Yes, I generated the setup for both qunit and jasmine with the generator.\nIf make sure your paths are correct in the confit.\nDo you mean that I should double check my paths in the teaspoon_env.rb file? I used the defaults, which look sane.\n\u2014\nReply to this email directly or view it on GitHub.\n. Term = repo -- sorry, on mobile.\n\n\nJeremy Jackson\n\nOn Jul 13, 2015, at 9:11 PM, klenwell notifications@github.com wrote:\nI'd expect the project specs to be consistent between the qunit and jasmine branches I set up. So I don't think that would explain the issue. Unless I'm misunderstanding what is mean by term project specs.\nIn any event, I'm ready to accept that it's something peculiar to my current project setup. I just wanted to raise the issue here in case there was something obvious that I had missed and as a record in the event somebody else experience the same issue.\n\u2014\nReply to this email directly or view it on GitHub.\n. @plongyear, thanks for this.\n\n@mikepack, we could move that regex to an undocumented, or lightly documented configuration? It feels dirty to me, but I don't see another way around it. Thoughts, ideas?\n. I think a single regex is fine, but is up to whoever gets around to it, which will probably be you. It just is a bummer because we have to resolve files to sprockets urls.\n. @mikepack addressed this, so it's now possible via #418. Thanks for the insight and help figuring out what we could to resolve it!\n. :+1:\n. Yeah, my oversight -- haven't had that sort of setup before, but seems reasonable.\n. I'm not convinced this is a teaspoon thing, and think it's a jasmine thing. Test it out with raw jasmine to be sure. But based on how teaspoon is written, it outputs what is reported to the reporter in general terms, so if it's not being reported, it's probably because the reporter (aka this is primarily teaspoons job) is not being told.\nI agree it's not ideal. Would be curious how mocha handles this.\n. Check your test env, it's probably oddly configured. Only thing that makes sense.\n\nJeremy Jackson\n\nOn Aug 7, 2015, at 7:55 AM, Agis Anastasopoulos notifications@github.com wrote:\nJust tried running teaspoon without the RAILS_ENV=test part and it works!\nAre we supposed to run this command on development or test environment? Note that this was running with RAILS_ENV=test up until 1.7.x and on our CI server.\n\u2014\nReply to this email directly or view it on GitHub.\n. Do you have any integration tests? Like cucumber or capybara? Those wouldn't work either, because your asset host does not exist. How is that a correct configuration? Locally, and via the browser it should run using the dev env because you get the shared asset cache. On CI, it should be test. To be honest, I don't see how it ever worked.\n\n\nJeremy Jackson\n\nOn Aug 7, 2015, at 7:59 AM, Agis Anastasopoulos notifications@github.com wrote:\nYep, just found out that we're doing this in config/environments/test.rb:\nconfig.action_controller.asset_host = \"http://assets.test.host\"\nWhich is not wrong in terms of the Rails app but it breaks up with teaspoon. However, the question is: what is the standard way to run the command (supposing this is about a CI server)? With RAILS_ENV='test' or without it?\n\u2014\nReply to this email directly or view it on GitHub.\n. I'd say you can put them in any place that you are serving assets from -- remembering that you can add any paths to your assets path, including those that are within specs (obviously not in prod environments though). Typically you would need to load those files differently than a fixture would load (as in, it doesn't make sense to put them in the DOM or try to parse them, so go ahead and implement what you need in your project. I'd say a simple ajax request should give you a binary file, or in the case of images, putting the url to it as the source of an image tag that's in a fixture. In general though, that's all that makes sense, and adopting more code for a semi-rare use case probably wouldn't be useful.\n\nSo, to summarize, if you want it as a \"fixture\", put an image or anchor tag with a reference to the file you want to load as a src, or href attribute, and then load them within your test, however you think you should.\nThe one outlier to this is the file input, but since you're within the confines of javascript, you can't do anything here anyway.\n. I don't know if I'm a fan of the spec helper being instrumented by default. Can you give me some examples of the code in it that you want to make sure are covered? I've never put enough code in there that had logic that I could change without breaking specs.\n\nJeremy Jackson\n\nOn Aug 18, 2015, at 12:17 AM, Andr\u00e9s Bravo notifications@github.com wrote:\nFinally it was related to default coverage ignore regex that includes %r{(+.)_helper.} ignoring the spec_helper file.\nJust created a PR solving this :)\n\u2014\nReply to this email directly or view it on GitHub.\n. But see, that's just a lazy way of managing dependencies and one that impacts performance when focus running individual spec files. We figured out what you were after and you have a solution to it that you can configure. Can we just add a note to the readme or the wiki, along with your results in the open issue for others to learn from? This PR  forces people who manage dependency trees (requiring their implementation files in their spec files) to have to always add the spec helper to their ignore list. Maybe there's a change to the config to make removing them easier, but I don't think this is the one to merge.\n\n\nJeremy Jackson\n\nOn Aug 18, 2015, at 3:03 AM, Andr\u00e9s Bravo notifications@github.com wrote:\n@jejacks0n\nWell the default spec_helper stands for:\nYou can require your own javascript files here. By default this will include everything in application, however you\nmay get better load performance if you require the specific files that are being used in the spec that tests them.\n= require application\nSo by default all my application code is loaded there, that's why I want it to be instrumented.\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm not promoting requirejs, I'm promoting having an implementation file, and a spec file that requires that using #= require implementation.coffee. The spec helper should be used for dependencies and only dependencies -- though the generator includes the #= require application as a default to help people get started with testing.\n\nI believe the default does work with coverage -- you have a modified version (maybe with config.expand_assets=false?, and if you restored it, I'm pretty sure it would work. If this is not the case please let me know.\n. It's Istanbul, and the fact that it's not cached. I saw your other comment about using the test env, which doesn't use the development cache. So in dev, files that haven't changed are cached, and that makes requiring those files super fast. It even makes instrumenting them faster. That's point 1, point 2 is that instrumenting takes your files and wraps a ton of addition JavaScript around it so call counts etc. ca be tracked. That's not a super fast process, but the way that's written in teaspoon, it should also (I think) be cached for the next test run. Usually I only generate coverage reports on ci.\nAdditionally, make sure your dependency files (eg jQuery etc.) are excluded from within your instrumentation/no coverage rules.\n. worth looking into -- not sure why coffee_script would be needed -- I think it's specifically optional?\n. Sounds like maybe we missed a file in precompilation. Knowing that we can figure it out and get a new release.\n\nOn Feb 29, 2016, at 6:20 AM, Iain Beeston notifications@github.com wrote:\nShould the published version of teaspoon have a dependency on coffee script? Couldn't those files be precompiled in the published version of the gem?\n\u2014\nReply to this email directly or view it on GitHub.\n. It was, and thanks. :)\n\n\nJeremy Jackson\n\nOn Feb 29, 2016, at 9:28 AM, Iain Beeston notifications@github.com wrote:\n@jejacks0n By my own debugging that might be app/assets/javascripts/teaspoon/error.coffee (in case that wasn't clear in all the messages above)\n\u2014\nReply to this email directly or view it on GitHub.\n. Can you confirm that the breakage isn't from your addition? It doesn't appear to be directly tied, but would appreciate your time.\n. Thanks!\n. There's not an easy way, no. Sorry.\n\n\nJeremy Jackson\n\nOn Sep 20, 2015, at 11:40 AM, Qiang Han notifications@github.com wrote:\nIs there a way to disable default suite since I only use named suites? AFAK the default suite exists so that named suites can inherit from it.\nOr maybe I should restructure my tests?\n\u2014\nReply to this email directly or view it on GitHub.\n. Does it have to do with the fail fast configuration? Is there more than one suite?\n\nWithout more info, I can't be of much help, but it hasn't been reported before. Would be happy if you wanted to dive in and see if you can figure it out and provide some resolution.\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/formatter/junit.rb\n. Any updates?\n. I wonder if google maps doesn't load via phantomjs for some reason... I don't have a quick solve for you, but I'd double check that you're using your correct access tokens? Are they even needed for those apis?\nA good thing to check, would be to switch the driver to selenium -- this is pretty easy, and there's a wiki article for it. That would be my first check. If it works, I assume it must be something to do with phantomjs, or that google maps won't load when requested from phantom.  If I recall, we may set the client string to something for teaspoon.\n. Yup, read up on istanbul, and teaspoon configuration (specifically coverage). You can generate html output that you can browse to see what is covered and what isn't covered. If you're not improving on what lines are being executed, it doesn't matter how many specs you add. I use the html output almost exclusively during development, because that's what actually matters if you want to improve it.\n. That's useful to know.. does the normal focus behavior of Teaspoon work correctly? The funny thing is, I didn't know this was a thing until just now, but it seems like support should be added for it.\n. I think it has to be within the asset path -- there should be an exception if the file fails to load (90% sure on this).\n\nJeremy Jackson\n\nOn Oct 3, 2015, at 9:22 AM, Mike Pack notifications@github.com wrote:\nRequiring files from a spec follows the same rules as requiring files from implementation. They both use the asset pipeline.\nI noticed your file has a .erb extension. Is it in app/assets/javascripts or somewhere in you config.assets.paths?\nSince the test actually runs, it looks like the asset pipeline is functioning and you have something wrong within your code. You're calling new userValidate without parenthesis. Do you mean to say new userValidate()?\n\u2014\nReply to this email directly or view it on GitHub.\n. :) I enjoy seeing people solve their issues, no worries.\n\n\nJeremy Jackson\n\nOn Oct 2, 2015, at 8:31 PM, Michael Toppa notifications@github.com wrote:\nAnd I resolved it by reworking the app structure a bit so all the class names are unique. Now my test suite is running fine. I am my own rubber duck.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good to me. Side note about documenting in the wiki so it's captured there.\n. happy to get a PR.\n. Thanks! :+1:\n. This was technically to support some of the micro libraries that use $, but it's worth merging to see if it impacts anybody. Cheers!\n. Nah, I think this is good. :+1:\n. That is faster. Haha.\n. Ah, so you can switch to the non-static files if you want (in your config), but it requires coffeescript and takes a bit longer to process.\n. We get these issues from time to time. It's because the order of how JavaScript is loaded and parsed. If there's a parse error, it's long before any JavaScript has the opportunity to do anything, and regardless, there's not a JavaScript exception raised or anything.\n\nWe could punt on execution of the specs (maybe), but a parse error is not indicative of if your javascript execute in the real world or not. So in stead you get the message.\n. I'm willing to entertain it. Feel free to submit a pr.\n. Hmm.. I think this has shown up before, but I don't fully understand it, can't remember the resolution, and don't use CircleCI often.\nWhat I would assume is that the teaspoon assets aren't available in whatever environment circleCI is running the specs within.. locally try running RAILS_ENV=test rake teaspoon, and see if you get the same results, we can work from there.\n. It's kinda rough to debug from this angle since the output is just kinda missing, because Teaspoon can't do much unless it's loading the javascript. haha.\nI think it must have to do with the assets not being loadable in that environment, but don't understand why they wouldn't be. There's also a lot of causes for this -- a quick search in the issues results in some pretty hefty issue threads, and it seems to usually be related to rails not understanding that the teaspoon assets should be precompiled/available.\n. It would be great to get a resolution from CircleCI. I'd love to have easy out of the box support for it if there's something that we can adjust.\n. If this isn't working it should probably be -- if for nothing other than parity. If there's any time available we'll look into it.. thanks for the heads up.\n. Please try that branch and report back. I have only tested it on the latest capybara-webkit (1.10.1 as of writing) and it appears to work -- no idea about previous versions.\ngem \"teaspoon-[framework]\", github: \"modeset/teaspoon\", branch: \"capybara-webkit-fixes\"\n. Thanks @starsirius, that's likely because of the capybara-webkit version (I think).. can you make sure you're using 1.10.1 for me as a follow up? That layer changed a lot between versions of capybara-webkit, and so I expected some hassles there. Please provide the version you're using, and what the results are with 1.10.1 if you have the time.\n. The timing of them is a bit odd as well. So I don't fully understand why capybara-webkit has it setup the way they do, but I'm using it as best as seems possible at that layer and it 1. doesn't behave as expected, 2. seems to be an area of heavy flux and probably isn't worth trying to maintain compatibility (at least for me -- keeping up with sprockets breakage is hard enough).\nSo I'll close the issue without complete resolution, but will leave the branch so someone else can potentially dive into it further and see if they can make more sense of how capybara-webkit wants a library like teaspoon to handle that.\n. Decided I'd check with the capybara-webkit team before closing it entirely.\n. figure you determined it was because you didn't change your version of jasmine?\n. if they're part of sprockets, they get transpiled.\n. Ah, sorry. You can read about it in the Teaspoon configuration, specifically the matcher configuration directive.\n. I'm unsure why your spec would be a .jsx, but have at it. =)\n. Sounds cool. I haven't had the opportunity to get into React yet. Hope you're sorted now though. =)\n. Yeah man, feel free to create a wiki article for it -- would be super valuable to others I'm sure.\n. I understand the desire, but it seems unlikely that your application would be able to load that data via a similar method. Can you provide me with some reasoning for why, and how you would use that information returned from the server -- and a hook implementation that would not give you reliable and known values?\n. Yeah, pretty much what @mikepack said. We discussed it, and I knew the PR to introduce hooks was something of a smell, but there were some compelling reasons for it, and at the time I was unsure the direction Teaspoon might take. Over time, what I've determined is that hooks are a last resort sort of thing -- and providing other tooling has proved more useful. The customizable boot partial for instance was another way to provide similar functionality where the server IS actually useful, like with loading initial configuration or state.\n. Well, it's not a Teaspoon limitation, it's a limitation of jasmine, mocha, and qunit.. And the inevitable breakdown of JavaScript limitations imposed by the browser. It also creates a coupling of your client tests to your server implementation, which in the long run is a bad idea -- but a lesson well learned yourself.\nThe JavaScript limitations for instance are, you can't navigate to a different url from within teaspoon. You can't answer a confirmation, or close an alert without hacking their real implementations. You can't select a file in a file input. Those are just a few of the limitations of integration testing from within JavaScript. You can sometimes work around these things, but what you'll end up with is a simulation that can never be 100% real and may have to run in an iframe or similar.\nOn top of that there's very little tooling in any of the test frameworks for integration level testing. Yes, you can do integration like tests because you happen to be within the context of the \"view\" layer by having access to the DOM, but it will eventually break down. \nAll that's to explain the reasons why teaspoon is not an integration testing framework. You can use it for integration like tests, but from my experiences it's ill advised to take that too far. And using the hooks heavily is where I've chosen to draw that line.\nYou also asked why you would write them in a different language -- but you're already doing that by writing your hooks in ruby. If you're testing ruby through JavaScript or JavaScript through ruby, you've got the same scenario either way.\nAt the end of the day though, what you're doing isn't particularly bad, but for fundamental reasons I have to decline because I wouldn't want to lead others down a road that I've seen fail long term. For now at least.\nThanks for your thoughts, and the idea.\n. So it sounds like a problem when phantomjs 2.0.1? That's helpful. I'll update and see if it's reproducible, and see if it's resolvable. Thanks. For now, I'd say use 2.0.0 if that's working correctly.\n\nJeremy Jackson\n\nOn Jan 13, 2016, at 12:36 PM, Pierre notifications@github.com wrote:\nI did check, I searched the whole filesystem for a phantomjs binary and the only one coming up is the one installed by brew that I replaced with the version I linked above.\nBesodes, using the installed phantomjs in its 2.0.1 version from the brew command triggers the problem discussed in this issue. Replacing the binary with the one linked above lets teaspoon run without issues.\n\u2014\nReply to this email directly or view it on GitHub.\n. well, it's clearly not a teaspoon issue directly, but I'll still try to figure it out.\n\nif you have npm installed, consider sudo npm -g install phantomjs2 as an alternative.. looks like brew is failing, but npm just installs the binary precompiled.\n. 2.0.0, or 2.0.1?\n. ah, I wonder if something changed about the XHR implementation or something.. ugg. browsers.\n. That's great, thanks so much for checking in and resolving it!\n\nJeremy Jackson\n\nOn Jan 14, 2016, at 11:13 PM, Vitaly Slobodin notifications@github.com wrote:\nHi guys. Someone mentioned me in a comment. PhantomJS dev here.\nI found the problem yesterday. And can confirm that the problem is in AJAX requests.\nNew feature for capturing the content of requests sometimes breaks AJAX requests. It removes the body and status codes.\nI'll fix it ASAP.\nThanks!\n\u2014\nReply to this email directly or view it on GitHub.\n. I'm closing this, as it will probably be resolved shortly and will only effect a small amount of people who have installed the version where ajax isn't behaving. Thanks everybody for the info, and thanks @Vitallium for checking in before I had to really dig into it. =)\n. That's good info. Can I understand why you want to do this? I don't know that things will work when you change this, and am curious how you're using it.\n\n\nJeremy Jackson\n\nOn Dec 5, 2015, at 5:12 PM, Christian Schulze notifications@github.com wrote:\nHave found a solution. With some pocking around window.env by adding (console.log prop + ': ' + value) for prop, value of window.env to spec_helper.coffee, I found:\nui: function (ui) {\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n}\nCalling window.env.ui('bdd-lazy-var') in spec_helper.coffee works perfectly.\nPerhaps this could be added to the Mocha wiki page to help future developers?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks for the info!\n. Well, I can tell you that teaspoon doesn't have a spec.$injector, so it's something about angular mocks and likely isn't teaspoon directly.\n. Closing, unless more information can be provided.\n. https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/utility.rb\n\nIt simply looks for external commands that are accessible in your path, so you can add your custom instanbul path if you don't want it global.\nWhat you're asking for was added at one point and removed. It makes it far more confusing, and made istanbul the outlier with checking in multiple places. Because it can exist in multiple places the problem becomes \"which one is it using?\". So being a dependency, we treat it as a dependency, and expect the system to dictate where it is and which one to use via the path.\n. which version of teaspoon? Have you checked master yet?\nnote to self: add teaspoon version display to the output so I don't have to ask.\n. http://stackoverflow.com/questions/34344094/after-gem-update-test-fail-with-asset-was-not-declared-to-be-precompiled-in-pr\nThe interesting thing is that teaspoon does register assets for precompilation as seen here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/configuration.rb#L24\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb#L49\nSo my guess is that 1. teaspoon may be adding the precompile stuff at the wrong time (or it's being cleared out somehow?), 2. sprockets is looking at an incorrect environment (with production being noted in the exception?)\nThose are my best guesses, so for now the work around would be to drop your sprockets version and we'll try to get to this when time permits. I've opened an issue on sprockets-rails as well.\n. Thanks @rafaelfranca!  Teaspoon does the lookup at the time of execution, not at the time the engine is loaded -- this is so new files can be added and they'll show up.\nCan we register assets without them stacking after the initial load -- at the time of execution basically? If so, we can add that call in the controller which should mean they're registered before trying to serve them. We'd collect all the \"root\" paths for assets that we're going to load, and register those.\nWe could also do something similar to what you've done and introduce it at load time, but it's not as simple because the configuration uses a glob path for where to look for spec files, and so would have to parse the paths out of that and register them in sprockets.\n. @rafaelfranca since you're here. =) Is there a way that we could move to help Teaspoon be less coupled to sprockets? There's been breaking changes with most releases of sprockets -- which is reasonable given that Teaspoon is an outlier in usage patterns. We haven't yet found the right balance to keep things functional and capture the feature set desired for a test runner and I'm curious if you have any advice or ideas.\n. Ah, thanks for the info. Will try this week to get that implemented on my end.\nYou get what I'm getting at with the coupling though? Even that precompiled_asset_checker method isn't part of an external API, so if that gets changed it will break Teaspoon.\nMy objective is to try and get a more complete/robust API from sprockets that can be more stable. I can provide a write up of areas of pain, and work towards that by contributing back to sprockets.\n. Worth noting, the coupling has been better recently, and we were able to remove most (if not all) areas where we had to branch based on the sprockets-rails version.\n. The recommended fix is to drop the sprockets version until this is addressed in master and released.\n. @sb8244 that's a great solution. Would you be willing to submit a PR where that is injected from within engine.rb? I would merge it and release. I've been out for the holidays and sick. :-/\n. that sounds perfect.\n. @mikepack just brought up a good point.. that path, is a glob path, and can be test/javascripts, or anything else you wanted it to be.\n. I think Teaspoon.configuration.asset_paths would be essentially that. That's an array of paths that are rails root relative. It seems like doing what you're doing for each of those paths would work, though I don't know how that would impact performance. Let's give that a shot.\n. To clarify, the glob path in conjunction with the asset paths configuration in teaspoon env is what enables putting test/spec files where you want them. I think we can use the asset paths configuration to determine if they're servable in an asset path teaspoon knows about, but they can also exist within your application asset paths, and teaspoon wouldn't know about those.\n. Digging into the code a bit I found what seems to be a relatively easy fix, but the proposed solution may need some review and discussion first.. it may also leave teaspoon sort of broken with a specific version combination, which we'll have to probably work around anyway.\nIf you want to keep up on that part of the discussion, check https://github.com/rails/sprockets-rails/issues/297\nI'm using that one, because it's more tied to rails, as the proposed code change is in action_view.\n. Teaspoon 1.1.2 was released. Update and see if it's working for you.\n. @ajb, that doesn't seem related. If you're not getting an error when trying to load files that aren't in your precompile list I'd suggest looking at other issues, or creating a different one.\n. @psharpNumerex fixed as of #450, released version 1.1.3 so update and test. =)\n. So, funny thing.. I released the rails_5 branch as Teaspoon 1.1.3.. dang.\nI'm releasing 1.1.4 before I leave today.\n. Looks good to me. Can you please confirm that the broken specs aren't related to changing sinon? They may be trying to load an incorrect version now -- if you think they're unrelated, we'll look at them internally and merge this as-is.\n. Never mind, it would seem they are not related based on your commit.\n. The 500 is probably related to https://github.com/modeset/teaspoon/issues/443\n. They don't, but we've thus far decided that it's not a failure directly.. I'd rather it be caught by the developer when the tests are run.. a Parse Error doesn't always mean that the javascript won't execute, so if the test coverage is \"good enough\", it should capture this, as well as it being visible in the ways you show.\nI could be convinced otherwise, and every time it comes up I find myself being pretty much on the fence about it.\n. I'll look at it today @connorshea.\n. Your comment did remind me to lighten up the version in the gemfile for travis -- this is sort of how we figure out when a new version is breaking something.\n. I don't think the build will work anyway, haha, but yeah, I wasn't sure about that and figured I'd find out. =)\n. @connorshea how likely is it that you're able to test out master and make sure things are good before we release 1.1.5?\n. No worries, and thanks. There's higher value in making sure that it's working correctly in a large project with Rails 4 first -- Rails 5 fixes can roll out as they solidify that release. Follow up question for you -- why track this PR if you didn't directly need Rails 5 support yet? =) Just curious about how you're handling that process generally.\n. Cheers, and yes, you have more heart than myself. =) It's been hard enough to keep one gem updated promptly with Rails+Sprockets over the years. Will release a new version shortly, so you can probably update later today and be good rolling forward (unless there's a big change between now and final release of Rails 5).\n. It seems likely to be related to some recent changes required by sprockets, but only a few people have reported it, so I'd like others to chime in if this is the case, so I can try and resolve it and capture it in a spec. More details are needed.\n. if you check https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb#L99 you'll see a kinda ugly hack in there to work around the restrictions of sprockets 3+ -- I have an open issue (https://github.com/rails/sprockets-rails/issues/297) on sprockets-rails to see if @rafaelfranca has thoughts, but haven't heard back yet.\n. Yeah, I agree with the changes they've made with sprockets 3.0.0, but it'll probably throw a few kinks in for engines that were utilizing the less strict behavior in development environments.\n. I still don't know what's happening, and have not seen it as of yet.. any ideas on what's happening? like, literally, you get a js file served to you where you can see //= require [file]?\n. I'm not seeing this, so am closing it.. if someone else has more to add it would be great.\n. The info is appreciated. I would rename it to matches? or name_matches? etc, and I would merge a PR to resolve that.\n. As a follow up, is this because teaspoon isn't working in Rubinius? If so, I appreciate your efforts here.\n. Ah, were you doing an audit for Rubinius using github search or something?\n. Thanks. =)\n. Thank you.\n. I wasn't planning on it, but yeah, can you ping me tomorrow and I will update the changelog and release a new version? can't this evening. Thanks again. :+1: \n. released 1.1.3, thanks all.\n. Cheers!\n. Thanks! Yeah, this is why we broke them off into separate \"sub\" gems.. at some point later we'll probably extract them and have different repos, but this makes life easier for now. I'll merge, leave this on master for a bit, and then release it after some testing has happened.\n. Can you give me some background? I specifically took this out a long while back because it wasn't very good with OS level support, and I didn't want it as a dependency.\n. Can you update the wiki or readme based on where you would like this to be documented please?\n. Yeah, sadly we know, long story, name collision. If you know anybody at rubygems, or of a place where an issue can be opened, it would be nice to remove the abandoned gem to open the namespace back up.\n\nOn Feb 26, 2016, at 2:08 AM, Ewan McDougall notifications@github.com wrote:\nhttps://rubygems.org/gems/teaspoon has incorrect links for Source Code and Documentation. They both point to https://github.com/mintdigital/teaspoon\n\u2014\nReply to this email directly or view it on GitHub.\n. It appears one just needs to click edit and adjust them.. anyhow, got that resolved. Thanks for the heads up.\n. Thanks! This is great, and all your work here looks really good. I'll do an in depth dive later today or this weekend, but from a glance it looks like you've done some really hard and good work here. You noticed hound is doing its job trying to keep up some code consistency rules, and it looks like you're cleaning those up.\n\nFor this to be merged, I'd like to see a unit test of the new BrowserStack implementation so we can make sure not to break it in the future (an example: https://github.com/modeset/teaspoon/blob/master/spec/teaspoon/driver/selenium_spec.rb), and it looks like there's a broken spec around the CLI help -- the new browserstack driver correctly appears in the options displayed when running teaspoon --help, so the expectation in that spec should change to ensure it stays there. =)\nAs a follow up to this PR, I'd appreciate it if you updated the README, and added a wiki article with similar information to your PR description -- any third party things like browserstack can be complex to setup, so any information you have would be really valuable there.\nIf there's anything I can do to help, let me know.\n. As a follow up, when this is merged, I will update things like the repo description to include BrowserStack as a viable driver setup.\n. Ok, I'm out for a few days (surgery), but will review after that. I really appreciate your time.\nTo answer your questions:\nLet's use option 3. That's the same as we do for selenium, phantom etc. There's some tooling in util that allows us to find that binary if it's in the path, so probably want to use that same process here.\nNo, there's no a nice way to check code styles without hound -- I have the rubocop config locally I think, but never pushed that up. Don't worry about them, it's not a bad thing, we just want to keep relatively consistent code style so you can just clean them up as you want. Those emails don't bother me; just it doing its job. :)\n\n\nOn Feb 29, 2016, at 3:31 AM, Harish Ved notifications@github.com wrote:\nThank you for being patient.\nI have added the unit tests for the added driver. You might want to go through those.\nRegarding the BrowserStackLocal binary -\nThere are some ways to go about this.\nIssue - The tests require this platform specific binary running in the background.\nThere will be a published gem for this purpose. The source code is here. It does start the binary, stops it and adds the logs of the binary to a file. Will be efficient to use. But it might take some time for it to be published on rubygems.org and we will have to add it as a dependency.\nA thin version of the gem file can be implemented here which downloads the binary (according to the platform its running on) and starts it before and stops it after tests.\nWe can just add a word of warning that this requires a specific binary running. But running the tests for the users won't be automatic and will require setup from user's part.\nPending: The wiki page for using browserstack driver. Will proceed after the above discussion is clear.\nPS: Is there a way to run the houndci tests locally? (Before doing an actual push). I couldn't find one.\n\u2014\nReply to this email directly or view it on GitHub.\n. My last response was truncated, please expand it to see the hound comments.\n\n\n\nOn Feb 29, 2016, at 3:31 AM, Harish Ved notifications@github.com wrote:\nThank you for being patient.\nI have added the unit tests for the added driver. You might want to go through those.\nRegarding the BrowserStackLocal binary -\nThere are some ways to go about this.\nIssue - The tests require this platform specific binary running in the background.\nThere will be a published gem for this purpose. The source code is here. It does start the binary, stops it and adds the logs of the binary to a file. Will be efficient to use. But it might take some time for it to be published on rubygems.org and we will have to add it as a dependency.\nA thin version of the gem file can be implemented here which downloads the binary (according to the platform its running on) and starts it before and stops it after tests.\nWe can just add a word of warning that this requires a specific binary running. But running the tests for the users won't be automatic and will require setup from user's part.\nPending: The wiki page for using browserstack driver. Will proceed after the above discussion is clear.\nPS: Is there a way to run the houndci tests locally? (Before doing an actual push). I couldn't find one.\n\u2014\nReply to this email directly or view it on GitHub.\n. Looks good! Thanks for the initial work, and being flexible and accommodating with the follow up requests.\n\nI'll merge, give it some time on master, and then release the new gem version.\nFollow up question: Do you work for BrowserStack, or was this something you wanted personally and were willing to share?\n. Did you ever get that wiki page created? =)\n. @mockdeep -- It's near impossible to have it be future proof since it's based on a third party that has changed things fairly consistently throughout the life of teaspoon. =)\n. There's some lines in the spec helper to enable the mocha matchers. It has a few options, so we don't specify enable one by default. The getting started article is written for jasmine, but it looks like you're using mocha fwiw.\n\nJeremy Jackson\n\nOn Mar 10, 2016, at 7:39 AM, Derek Johnson notifications@github.com wrote:\nOne more note: when viewing /teaspoon, the error is slightly different:\nexpect is not defined\nReferenceError: expect is not defined\n\u2014\nReply to this email directly or view it on GitHub.\n. You may want to run the generator again.\nOn Mar 10, 2016, at 8:10 AM, Derek Johnson notifications@github.com wrote:\n@jejacks0n Oh, I definitely intended to use Jasmine. I was paying complete attention when I copied the \"use this version for Rails 5\" line, which switches to Mocha:\nDeveloper Note\nWe've added experimental Rails 5 support. If you're looking to use Teaspoon with Rails 5, please try out the rails_5 branch.\ngem \"teaspoon-mocha\", github: \"modeset/teaspoon\", branch: \"rails_5\"\nChanged gem to teaspoon-jasmine, all good now. Thanks.\n\u2014\nReply to this email directly or view it on GitHub.\n. it's not the default anymore, you have to opt in to the framework you'd like to use, but it's fair.. I also updated the wiki article since that might be part of it.\n. if you dig further into the code, the IO.popen call is only running a shell command -- in this case, it's phantomjs. The reason it takes longer to run with coverage is several fold, so I'll explain what's happening and you can dig into that further if you feel there's still something in Teaspoon that is running \"very slow\".\n\nWhen you run Teaspoon locally, it'll use the dev environment by default, specifically to take advantage of the dev env asset caching -- this is to make load times better, but the load times are always about the time it takes to transpile/concat your asset files.\nNow, when you run with coverage, there's no way to actually tell which lines are being executed in javascript, and so the javascript must be wrapped in some crazy looking code to enable call tracking, statement call counts etc. For this, istanbul is used, and if you're interested in what that looks like, or how long it might take to instrument one of your files, please use istanbul to instrument one of your javascript files and check the output.\nOk, so now you know what's happening.\nNow, because istanbul is not being used for all of your assets in development, instrumented versions of your assets obviously won't be cached, and so when you run Teaspoon with coverage you're negating the potential dev env asset cache that you've built up locally.\nIf you're not excluding assets that you don't want instrumented, consider adding them to the ignore rules that are outlined in the coverage configuration documentation as well.\nHope that gives you some insight into the project and how you can dig in deeper.\n. Haha, that's because I didn't fully understand private at the time -- lessons learned over the years. =)\nOk, so hey, that broke all the builds, so do you want to look into it further? It can't be merged in the current state, but I don't disagree with this directly.\nCan you give me some background on why you want this change, and what it's intended to directly resolve?\n. That's fair, and I appreciate your explanation. Have you tried running teaspoon with a specified port via the CLI? This won't start a server internally and will look at the specified port to see if there's already a server running there (at least that's how the code reads in server.rb) -- try it and see if that works?\n. have you checked with master?\n. Cheers for checking in.. I'll try to get a new version pushed this weekend.\n. Try it with master?\nSo, I think it may be two fold -- Rake may be throwing an extra kink in there, but what's probably happening is that it fails because of issues around sprockets. In addition, it sounds like rake is gobbling up some information that used to be presented, but I have no idea how at this point.\n. Well, that's how this all works right? I'll use this as an opportunity to explain. =) You see an issue, as a step one, you always try master, if that doesn't fix it you can open a PR with your fix, or open an issue -- the former being the better of the two -- obviously. Now, here's the important bit: if master is working, and is a notable improvement from the latest gem version, it's helpful to let us know by searching closed issues and adding a comment there so we know.\nI don't have a plan to release the next version this weekend, but maybe early next week.\n. I'll keep this around, but it probably won't be merged as is. So initially I think Teaspoon handled these things well, by telling Rails to convert the rendered output to a javascript exception, but that seems to not work anymore. I'd rather handle this at the suite_controller level and handle exceptions by rendering that exception as a javascript_tag \"throw [exception]\" sort of statement.  That's probably a bit more elegant and robust.  But thanks for bringing it to our attention -- it definitely needs some love there.\nWorth noting, some gems, like better_errors can make this stuff not work. Are you using anything like that?\n. That's fair. I understand what you're trying to solve. There's likely a better way to do this, and I'd like to investigate that before considering your solution. Also, there aren't any specs here and it seems to have broken the build, but instead of saying that, I figured it might be worth looking into alternate approaches to help you resolve the problem without asking you for additional work.\nI'm sorry Teaspoon fell down on you here, but it's really about how better_errors hooks in (or doesn't really hook in, but tends to stomp all over) how rails handles exceptions normally. That seems like a better thing to look into from my perspective.\n. This looks good, and thank you for spending the time on it.\nI added some comments for changes. And I'd like to see a new spec.\n. Thanks for resolving that, and spending the time on it. :+1: \n. If anyone from the issue would like to dive into this further, it might be useful to get more eyes on it.\n. Thanks! Generally looks good, but I had some questions.\n. In theory it does, but I wasn't certain about the version of sprockets in the Rails 3 build. Thanks for clarifying.\n. Please provide more information. What's the pattern? Is it completely arbitrary, or can you figure out how to reproduce it?\n. and it doesn't happen when you don't use coverage?\n. no worries. =) So if it's only happening when generating reports, my best guess would be that it's an issue with how Istanbul is processing your javascript (or not processing). Teaspoon shells out to Istanbul and off loads that stuff and awaits a response.. you can find the relevant line here:\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/coverage.rb#L61\nYou can see it's using $?.exitstatus, which apparently is nil. I'd drop in a pry (or otherwise debug) on that line and see what the output is like from Istanbul. Potentially you have a bad install, or outdated version or something?\n. It's the only thing that makes sense unless you have some threaded setup or something -- and I'm not even sure about if that would cause an issue or not.\n. That doesn't seem like a good solution. You'd be here with the same issue, different result.. e.g. \"Teaspoon arbitrarily fails to generate my text reports on some runs\". =)\nWhat you probably should do is figure out why Istanbul fails to return a result sometimes. I'm trying to help you get to the root cause, which seems to only be afflicting you thus far.\n. It's looking good -- thanks for the time you've put into it. Can you provide a link so I understand why $? with %x{} can lead to missing exit status code issues? Just want to learn from it.  Also, in a few other places I use IO.popen -- is there a reason not to do the same here? Again, mostly just trying to figure out the subtle differences.\n. I find this new behavior of Sprockets to be confusing, but I'm willing to roll with this and see.\n. At some point when sprockets changes slow back down, I'd like to lock it to a minimum version and remove the hacks we have in place for various versions.\n. Thanks @liseki. Sounds like this should wait until sprockets is ready? If so, do you want me to wait until you check back in?\n. I appreciate all your work on this. \ud83d\udc4d \n. No worries, go ahead and squash.  There's always been a bit of an issue with the expand_assets configuration, but I couldn't get both scenarios working well initially, and haven't had the opportunity to go back and see if there's a better option.. Generally speaking any failed test/stack traces are much more useful when you DO expand assets, but for performance reasons some people want to avoid expanding their assets. My point being that it will probably need additional attention at some point.\n. I was super confused by the hack for allow_non_precompiled and how that makes it through the chain (or didn't as far as I could tell).. e.g. the debug option does several different things, and isn't consistent.\n. Status check @liseki.. Feel free to disregard if nothing has changed.\n. Thanks for your efforts here. Much appreciated.\n. Yeah, I've been torn on this because it doesn't indicate a real failure directly. That being said, it's an easy fix with phantomjs, but may not be true elsewhere.\nIf you decide to look into this I tend to think we might need to do this at the controller level (suite_controller) and handle that exception by ending everything.\n\nJeremy Jackson\n\nOn May 5, 2016, at 9:13 AM, Bouke van der Bijl notifications@github.com wrote:\nThis seems to have been discussed before in previous issues, but we've ran into multiple problems at Shopify where something in our javascript bundle throw a SyntaxError or ReferenceError or whatever, which would then not make Teaspoon fail and instead cause our CI to silently succeed and us to miss it.\nI propose that we make Teaspoon fail the test run if there's an error before Teaspoon.execute is ran, as that will make it non-disrupting when there's errors in asynchronous things, but still makes sure this doesn't silently let errors slip through.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\n. Hey @bouk, thanks for taking this on, and sorry I've been absent from it a bit. I'll merge this when you resolve CI.\n\nThe CI failure: ReferenceError: Can't find variable: msg, seems to be related to your change here,\nhttps://github.com/modeset/teaspoon/pull/480/files#diff-4630ab299de0b26c012329264476c8a5R69 where msg is not defined in the function arguments. I'd say roll that line back since it's unrelated to your other changes, no?\n. An easy place to start is to unit testing the new setup method.. Check the base teaspoon spec and there'll be some examples. I assume you can call window.onerror directly without having to raise an exception, so that would be my first pass. This may not be possible, and if it's not, I'd extract the logic from within the window.onerror function, move it to a different method and test that individually.. then just make sure window.onerror is the function you expect.\nAs a follow up, I realized that we could be clobbering an existing window.onerror handler.. you should capture that and call it if it's defined in our own implementation -- pseudo code.\nexistingHandler = window.onerror\nwindow.onerror = =>\n   # our logic\n   existingHandler?()\nThis also breaks some existing stuff, which is tested.. I have a call to foo() in the integration tests which can be found in the spec dummy app assets.. it behaves differently now, and so the output is different.\nA few questions now that I thought this through a bit more... when you run jasmine you can disable it's try/catch logic so exceptions are raised -- this makes debugging really nice sometimes. how does this window.onerror handle things now? Should this go only in the console reporters, since that's really the only place we want the behavior?\n. To be clear this is why I took the stance I did. When you have an exception it doesn't necessarily break the world -- things can continue running, it's just important to know that it's an issue that you may not have a test for. Anyway, that's the background. =)\nIf you could remove it and put it into a different test that covers what your error handling accomplishes that would be awesome. So, I'm fine with accepting the adjustment to the behavior, but the tests accurately reflect the change in behavior so we should 1. remove the case that breaks the integration tests (e.g. the call to an undefined function), and add one that ensures that when something like that does happen it fails the build as it does now.\n. To give you some more info, if you check in https://github.com/modeset/teaspoon/blob/c9786f54c487a78e55686f76cf93f199654fea53/teaspoon-jasmine/spec/javascripts/integration/first_integration.coffee you'll see an example of that.. so you'll need to adjust the behavior in each of the different frameworks -- e.g. jasmine, mocha, and qunit.\nadditionally https://github.com/modeset/teaspoon/blob/c9786f54c487a78e55686f76cf93f199654fea53/teaspoon-jasmine/spec/integration_spec.rb you'll find where we basically configure teaspoon on the fly to get those \"real\" integration tests into the dummy application.\nThat's how you'd create a new one basically.. so adjust the existing ones to pass, and then create three new ones (one for each framework) that has a \"broken_integration\" setup similar to what's already in place.\n. Thanks for taking this on btw.\n. I need to exclude the js from hound apparently now that coffeescript -> javascript causes so many issues.\n. Cool, looks good.. will merge after CI is done.\nThanks again for all your work here, much appreciated.\n. I'm not planning on releasing today because I'm pairing on some other things, but hit me up in a few days if I've forgotten.\n. Cheers! Pobody's nerfect. =)\n. https://github.com/modeset/teaspoon#hooks\n. Hey man, got the email notification for the comment you added and came here to check it out.. Looks like it's gone, so hopefully that means you got things working.\n. These are all due to changes in the default behavior in sprockets. Have you tried with master? If master doesn't work, I'll need to come up with a workaround, but I have personal life things going on that are keeping me from being able to work on Teaspoon at the moment.\n. Thank you. Please provide any details you find when investigating the issue with Teaspoon and in general. The change to sprockets, and the seemingly inability to opt in to allowing assets that are not defined in the precompile list when requesting assets is burdensome on gems like Teaspoon, but that's not your fault. =)\n. Cheers!\n. Yeah, we just use your configuration to start a server (in a thread), so if starting that server forces others to restart, it would also potentially be an issue in capybara too (though I think it might default harder to webrick).\nAnyway, thanks for the info @arrbee. I'll leave this around for others if it's a confirmed fix.\n. Huh? It shouldn't be, so I'll look into it.\n\nJeremy Jackson\n\nOn Jun 29, 2016, at 6:46 PM, Zach Collins notifications@github.com wrote:\nFrom my Gemfile.lock\nteaspoon (1.1.5)\n  railties (>= 3.2.5, < 6)\nteaspoon-jasmine (2.3.4)\n  teaspoon (>= 1.0.0)\nSass::SyntaxError: File to import not found or unreadable: bourbon.\n...\n./bundle/ruby/2.3.0/gems/teaspoon-jasmine-2.3.4/lib/teaspoon/jasmine/assets\nIt seems that https://github.com/thoughtbot/bourbon is an implicit dependency of teaspoon-jasmine, although it hadn't been in the past (just a random upgrade). Can we get this dependency stated explicitly in the teaaspoon-jasmine gem?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Check where the teaspoon_env is in the teaspoon repo. And its contents. That might help?\n\n\nJeremy Jackson\n\nOn Jul 13, 2016, at 5:22 AM, Angel notifications@github.com wrote:\nAny idea? Sorry but i can't get it to work and i'm run out of ideas.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. so, it looks like this:\n\nhttps://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/hook.coffee#L22\nThat will let you know (and will in theory break a test) if the response isn't a 200.. but it's using a variable that's not defined url.\nI'll try and get to this today.\n. ah, yes.. it's :ok, not :success.\n. but the underlying problem is still there with the url variable.\n. It depends on how you\u2019re running teaspoon on CI. Via the CLI I believe you can put RAILS_ENV=test in your env. if you\u2019re running rake, the rails app has already been started by the time teaspoon env is executed, so\u2026 with rake, you must set the environment variable before executing rake, with the CLI you can probably put it in your teaspoon_env.rb.\n\nOn Jul 18, 2016, at 10:20 AM, Sebastian Zillessen notifications@github.com wrote:\nWell, that would work but it would as well require, that I do this on all CI instances for all projects... \ud83d\ude04 Thats why I thought of a solution that I can check in into my central teaspoon_config.rb and then apply it automatically to all projects.\nIs that somehow possible?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub https://github.com/modeset/teaspoon/issues/495#issuecomment-233379269, or mute the thread https://github.com/notifications/unsubscribe-auth/AAA1xf6PYvW1xCeFNc_SqA2twu2Yn7Llks5qW6eygaJpZM4JMMsi.\n. :+1:\n. Thanks!\n. There is. =)\n. rake db:test:prepare ?\n\n\nJeremy Jackson\n\nOn Oct 28, 2016, at 1:20 PM, Sujay Sudheendra notifications@github.com wrote:\nI am trying to run teaspoon tests in rails app. instead of running in test environment teaspoon is trying to run on dev environment and asks for missing database migrations.\nI have specified \nENV['RAILS_ENV'] = 'test' in first line of teaspoon_env.rb file\nusing gem 'teaspoon-jasmine', '~> 2.3.4'\nError: ActiveRecord::PendingMigrationError:\nMigrations are pending. To resolve this issue, run:\nbin/rake db:migrate RAILS_ENV=development\ngems/activerecord-4.2.7.1/lib/active_record/migration.rb:392:in check_pending!'\ngems/activerecord-4.2.7.1/lib/active_record/migration.rb:373:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/callbacks.rb:29:in block in call'\ngems/activesupport-4.2.7.1/lib/active_support/callbacks.rb:88:inrun_callbacks'\ngems/activesupport-4.2.7.1/lib/active_support/callbacks.rb:778:in _run_call_callbacks'\ngems/activesupport-4.2.7.1/lib/active_support/callbacks.rb:81:inrun_callbacks'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/callbacks.rb:27:in call'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/reloader.rb:73:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/remote_ip.rb:78:in call'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/debug_exceptions.rb:17:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/show_exceptions.rb:30:in call'\ngems/railties-4.2.7.1/lib/rails/rack/logger.rb:38:incall_app'\ngems/railties-4.2.7.1/lib/rails/rack/logger.rb:22:in call'\ngems/request_store-1.2.1/lib/request_store/middleware.rb:8:incall'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/request_id.rb:21:in call'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/methodoverride.rb:22:incall'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/runtime.rb:18:in call'\ngems/activesupport-4.2.7.1/lib/active_support/cache/strategy/local_cache_middleware.rb:28:incall'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/lock.rb:17:in call'\ngems/actionpack-4.2.7.1/lib/action_dispatch/middleware/static.rb:120:incall'\n51/.rvm/gems/ruby-2.2.3@global/gems/rack-1.6.4/lib/rack/sendfile.rb:113:in call'\ngems/railties-4.2.7.1/lib/rails/engine.rb:518:incall'\ngems/railties-4.2.7.1/lib/rails/application.rb:165:in call'\ngems/puma-3.6.0/lib/puma/configuration.rb:225:incall'\ngems/puma-3.6.0/lib/puma/server.rb:578:in handle_request'\ngems/puma-3.6.0/lib/puma/server.rb:415:inprocess_client'\ngems/puma-3.6.0/lib/puma/server.rb:275:in block in run'\ngems/puma-3.6.0/lib/puma/thread_pool.rb:116:incall'\ngems/puma-3.6.0/lib/puma/thread_pool.rb:116:in `block in spawn_thread'\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. It's mentioned in the documentation that teaspoon by default runs in the development env. If you want to change this and not take advantage of the optimizations this provides, by all means do as you wish. Though it's not the default setup, so any issues you come across in the test env are for you to resolve.\n\n\nJeremy Jackson\n\nOn Nov 26, 2016, at 12:23 PM, Wes Sheldahl notifications@github.com wrote:\nI have a similar problem:\nWhen I run \"bin/teaspoon\", logging goes to log/development.log.\nWhen I run \"RAILS_ENV=test bin/teaspoon\", logging goes to log/test.log.\nI doublechecked, and by default RAILS_ENV is unset, so that isn't the problem. In my Gemfile, teaspoon-jasmine is in the 'development, test' block.\nRails 4.2.7.1, teaspoon 1.1.5, teaspoon-jasmine 2.3.4\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Do you have whatever defines define required in your spec helper?. potentially related? https://github.com/puma/puma/issues/1154. What runner are you setup to use? phantom, selenium, etc.\n\nI've not seen this behavior exactly, but the runner would probably be the biggest factor in that.. I'm a little lost -- can someone explain like I'm 5? I'm slammed at work, so if you just give me a clean PR with an explanation and reasonable certainty that it takes everything needed into account I'll merge it.. it should error out.. are you using any error handling gems in rails?. interesting, hmm, wow. I think I kinda understand. I'll look into it.. for the life of me I can't see anyplace where you require jquery.. am I missing something? I see third_party/terra/jquery/globalize/globalize.min.js -- is jQuery defined inside of that?. //= require jquery\nbefore other things? As I said, how would jQuery be loaded if you're not loading it?. https://github.com/jejacks0n/teaspoon/wiki/Teaspoon-Configuration\nsearch for server_port. ",
    "jedschneider": "no, havent had a chance to retry but i'm assuming you got it fixed so closing this.\n. haha. good point and good catch. thanks\n. @jejacks0n you are a machine.\n. make sure your editor/ide is not building the coffee file for you. we've seen that happen to several folks.\n\nJed Schneider\n\"I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.\"\n- Alan Kay\nOn Thursday, September 26, 2013 at 1:13 PM, John Davison wrote:\n\n@jejacks0n (https://github.com/jejacks0n) discovering this tool for the first time, very nice, thanks. having trouble getting js files to load correctly in jasmine but considering on a shaky codebase, i'm gonna assume it is a local problem.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teaspoon/issues/24#issuecomment-25185583).\n. it comes with 1.3.1. \n\nhttps://github.com/modeset/teabag/blob/master/vendor/assets/javascripts/jasmine-1.3.1.js\nDo you need something different?\n. What about an exclude data structure in the helper or config? Eg { exclude : [ 'lib/vendor/*.js', 'spec/spec_helper.coffee',...]}\nOn Feb 11, 2013, at 2:21 AM, jejacks0n notifications@github.com wrote:\n\nSo, I'd like some feedback on this -- specifically which files get instrumented.\nIt's really hard to determine which files should be instrumented and which should not. Since Teabag is so flexible with what your specs can be named and where they exist, we have to ask the suite if it's a spec. If it's not a spec it will instrument the file -- which includes the spec helpers and all dependencies.\nSo let's say I'm using jasmine-jquery for instance -- that file will get instrumented and will count against the total coverage statistics -- which may or may not be desirable.\nIf require allowed specifying something like #= require implementation.js?instrument=true it would all be awesome.. you would specify which files you wanted to instrument from your spec helper / specs.. but alas, that doesn't work.\nSo I think if we don't want spec_helper, and some of the files that might be required in it to be instrumented we'll have to provide a way to specify which files not to instrument in Teabag.configuration.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub..\n. I suggest 'JavaScript Test Runner, Enterprise Edition 3.0'. 3.0 is not the version number, just part of the name. Then we could have 'JavaScript Test Runner, Enterprise Edition 3.0 v0.1' That would be fun, and totally non-offensive to anyone. Also, there's no possibility that anyone will laugh when they see the name, nor remember it. \n\nOk, enough with the sarcasm.\nI find it interesting that @bigtunacan seems concerned about gender equality in the profession, and yet there is also need to improve cultural, racial, and LGBT diversity as well. He probably realizes this but his cultural bias (and mine too because I am addressing him as a him) immediately makes it a gender issue for him. So I think its important to realize that just because one person sees something sexual in a name doesn't mean all do. I certainly can't speak for these communities but I think a potentially offensively named library, for a niche process where the only external presence is the name in a Gemfile, is really the smallest barrier to bringing true diversity to our development community.\nThese are just my personal comments, but since the project is under the modeset organization, I also think it is relevant to point out that out of 4 interns we currently have working with us, 3 are women. We have a paid staff of 8 people, so yes, the internship to employee ratio is 2:1. We support and host, in our office, code camps specifically organized for women, by women. Two of the 7 developers in house routinely teach development at a local college. These internships and sponsorships are not cheap, but they are very, very important. To this degree, I think the organization's actions speak louder than words when it comes to being inclusive, respectful, and actively working towards a greater future for our community. \n. so, closing this then?\n. Is it possible this is an asset pipeline issue? If, for example, you have a pretty large assets load and you are simply requiring the entire tree, I would expect the response time outside of the production environment to be quite slow. I notice this very much when I am remote pairing and have to wait for the assets to compile on each page load. You may try only requiring the specific files you need for each spec and see if that helps out.\n\nJed Schneider\n\"I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.\"\n- Alan Kay\nOn Monday, April 22, 2013 at 4:19 PM, thedeeno wrote:\n\nThe duration is in the browser is 0.073 s. So I think the actual page is running very fast. It's the server side code that seems to be slow. How long does it take for the server to respond in your test suite? Does on the order of seconds sound right?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/57#issuecomment-16820484).\n. I missed the original comment on this in my inbox. probably not related to loading tons of assets. sorry.\n. @ngan just curious, 28 files doesn't seem like a super huge test suite, is there a specific use case you are trying to solve by distributing them on multiple machines? My personal experience is that js tests run so fast in comparison to 'full stack' ruby tests that I haven't ever considered distributing them.\n. @phiggins thanks for reaching out. I have a good friend that had a product's initial build out done at Substantial in Seattle, maybe you worked on it? \n\nas you can probably tell from the directory structure the spec/dummy dir is an embedded rails app. afaik we do need the dummy rails app, it is the standard practice for programmatically testing Rails engines, but I am much less of an expert in gem distribution and packaging; eg, if this should be setup and torn down on a dev machine such that it doesn't make its way into the distributed package. (I am imagining the horrors of dealing with rvm, bundler, rbenv, and rubygems on any given dev machine to install the right version of a rails app... ) \nat the very least though we should be ignoring or somehow not distributing the contents of the log and tmp dirs within the dummy app. good catch.\nI'll let @jejacks0n make the call, but if its git surgery thats needed, I'll scrub in for that!\n. @phiggins no worries. I was more hallway chatting anyway. Thank you for contributing!\n. Might be able to safetify that with methods in FileUtils or the Dir classes.\n\nJed Schneider\n\"I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.\"\n- Alan Kay\nOn Wednesday, May 15, 2013 at 3:55 PM, jejacks0n wrote:\n\nYes, in instrumentation.rb, in the process_and_instrument method. Looks legit to me, so I'm not sure what would be going on differently on windows. One using / and another using \\ I would assume though. Note the path replacement in there.  \n\nJeremy Jackson  \nOn May 15, 2013, at 9:57 AM, Derk-Jan Karrenbeld  wrote:  \n\nI understand how that happens then.  \nIt's not only in the report, it's also in the console [which is where the report gets its data from off course]. What should I look for? Needless to say, on UNIX-based systems ( the rest of my project ) the folder structure is maintained, where on windows it is completely flattened.  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/66#issuecomment-17962149).\n. pull requests for this will be considered\n. We'd accept a pull request for this functionality.\n. IIRC, you have to add any bin's that you want cli access to within the development group. I don' think that is a Teaspoon problem. If I'm wrong, you're welcome to reopen the issue. Thanks.\n. Hmm. I felt like in my trials phantomjs wasn't supporting the global window object but perhaps i am mistaken. Thats basically what i was asking though was what the name for the gloabal would be. Will take a further look.\u00a0\n\u2014\nSent from Mailbox for iPhone\n\nOn Fri, Aug 2, 2013 at 5:55 PM, jejacks0n notifications@github.com\nwrote:\n\nEverything in coffeescript is wrapped within a closure.  To get something \"globally\".\nso like\ncoffeescript\nwindow.fixture = window.navigator = null\nOr something, based on your needs.\nDoes that help?\nReply to this email directly or view it on GitHub:\nhttps://github.com/modeset/teaspoon/issues/100#issuecomment-22038537\n. yah i figured out that the main issue is that the navigator object on window doesn't have the geoposition object so where i was looking for the failure was too high in the chain.\n. Maybe we could include it in the gemspec and install by default, but provide a hook in order to use a different phantomjs executable via configuration via cli or otherwise. possible?...\n. Is the primary purpose of this to help CI bail out of a bad run? Are there other use cases I'm missing?\n. i think you have a timing issue here. this looks like jasmine, so I'll show you the jasmine api for this, but if its mocha, just double check the language for this or with mocha, set it up as an asynchronous test.\n\ncoffeescript\nel = $(\"<img src='https://www.google.com/images/srpr/logo4w.png'/>\")\nruns ->\n  $(document.body).append(el)\n  el.show()\nwaitsfor ->\n  $(el).is(':visible')\nruns ->\n  expect(el.height()).toBe 190\n  expect(el.width()).toBe 550\n. sidenotes:\nany time you modify state of the dom, you should probably write your specs to handle them as async tests. they will be more stable that way. \nalso it probably is not advisable to write tests to expect specific sizes of elements. if you really feel compelled to test this, maybe just checking visibility will keep you specs more resilient to change. expect(el).toBeVisible()\nFurther, you might just spy on whatever action fires the visibility and test that that action fires when the desired action happens. That way you don't actually care about dom manipulations.\n``` coffeescript\nclass Gymnastics\n  constructor: (el)->\n    @el = el\n  makeItShow: (event)->\n    @el.show() # make dom manipulation events in their own function so you can spy\n  handstandAndHoldIt: ->\n    @makeItShow()\nit 'becomes visible when i do a handstand', ->\n  el = new Gymnastics $(\"\")\n  spyOn(el, 'makeItShow')\n  el.handstandAndHoldIt()\n  expect(spy).toHaveBeenCalled()\n```\n. FWIW, personally, I'd have a really hard justifying maintaining tests that validate the properties of an image (your original test). Imagine that the viewport is set for a mobile device. Is you spec still valid? Probably not. The image probably is proportional to the viewport. Just an example of how that spec provides low value to maintenance time. Again, from a personal take on it (and I've written a lot of valueless tests I wish I hand't) what you want to test is the interactions; eg when I click this, this image shows up. Whether that image is cached, encoded, or fetched on demand from the server, changing the DOM is an asynchronous process.  As nice as it would be to treat it synchronously, its not. So I'd still recommend that you write such a test in the runs, waits, runs style even if the images are encoded. \nBut expanding on what I mentioned in my sidenotes, writing such a test is not a unit level test, its more of an integration level test. Refer back to my Gymnastics class example. You want to isolate DOM changing events into methods that can be mocked and then assert the method is called. Testing the DOM manipulation (jQuery#show in this case) is testing jQuery, the same as writing to a database for an AcitveRecord model test is testing Rails. \n. I think you have unbalanced html brackets. try\nfixture_value = '<div id=\"base\"><div id=\"content\"> </div></div>'\n. haha. i know the feeling. Glad it helped :smile: \n. @jejacks0n the better reporting gets us a step closer:\nError: ActionController::RoutingError: uninitialized constant Teaspoon::SpecController\nSo, does that mean the engine is not getting routed properly?\n. is it possible that this is an asynchronous issue, eg, this does not have the proper method at runtime but when you log it out, the method has resolved on the context of this by the time you are looking for it?\n. Also missing would be the log statement to 'hi' in your before each, so maybe the whole suite is not executing?\n. is it possible that you have a symlink in your rails project?\n. goodness gracious.\n. @Emerson can you bundle from @bramski's github fork and tell us if it seems to improve your load time as well. Thanks!\n. It seemed this was an issue on travis for a while as well but it seemed to resolved with some upgrades to travis CI.\nI made a 5 minute effort to figure out what had changed on travis, but they stopped updating their changelog over a year ago. This run is from 3 months ago:\n```\nFinished in 1 minute 29.07 seconds\n1145 examples, 0 failures, 5 pending\n Invoke teaspoon (first_time)\n Invoke environment \n** Execute teaspoon\nStarting the Teaspoon server...\n\n\nThin web server (v1.3.1 codename Triple Espresso)\nMaximum connections set to 1024\nListening on 0.0.0.0:50391, CTRL+C to stop\nTeaspoon running default suite at http://127.0.0.1:50391/teaspoon/default\nError: ActionView::Template::Error: execution expired\n```\n. ~~my guess is that they upgraded the selenium driver.~~ - EDIT - its still happening on Travis, though more reliable, the most recent build failed in the same way. Will bundle with HEAD and see if it makes a difference. Using Rails 3.2.21.\n. no, havent had a chance to retry but i'm assuming you got it fixed so closing this.\n. haha. good point and good catch. thanks\n. @jejacks0n you are a machine.\n. make sure your editor/ide is not building the coffee file for you. we've seen that happen to several folks.\n\n\n\nJed Schneider\n\"I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.\"\n- Alan Kay\nOn Thursday, September 26, 2013 at 1:13 PM, John Davison wrote:\n\n@jejacks0n (https://github.com/jejacks0n) discovering this tool for the first time, very nice, thanks. having trouble getting js files to load correctly in jasmine but considering on a shaky codebase, i'm gonna assume it is a local problem.  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teaspoon/issues/24#issuecomment-25185583).\n. it comes with 1.3.1. \n\nhttps://github.com/modeset/teabag/blob/master/vendor/assets/javascripts/jasmine-1.3.1.js\nDo you need something different?\n. What about an exclude data structure in the helper or config? Eg { exclude : [ 'lib/vendor/*.js', 'spec/spec_helper.coffee',...]}\nOn Feb 11, 2013, at 2:21 AM, jejacks0n notifications@github.com wrote:\n\nSo, I'd like some feedback on this -- specifically which files get instrumented.\nIt's really hard to determine which files should be instrumented and which should not. Since Teabag is so flexible with what your specs can be named and where they exist, we have to ask the suite if it's a spec. If it's not a spec it will instrument the file -- which includes the spec helpers and all dependencies.\nSo let's say I'm using jasmine-jquery for instance -- that file will get instrumented and will count against the total coverage statistics -- which may or may not be desirable.\nIf require allowed specifying something like #= require implementation.js?instrument=true it would all be awesome.. you would specify which files you wanted to instrument from your spec helper / specs.. but alas, that doesn't work.\nSo I think if we don't want spec_helper, and some of the files that might be required in it to be instrumented we'll have to provide a way to specify which files not to instrument in Teabag.configuration.\nThoughts?\n\u2014\nReply to this email directly or view it on GitHub..\n. I suggest 'JavaScript Test Runner, Enterprise Edition 3.0'. 3.0 is not the version number, just part of the name. Then we could have 'JavaScript Test Runner, Enterprise Edition 3.0 v0.1' That would be fun, and totally non-offensive to anyone. Also, there's no possibility that anyone will laugh when they see the name, nor remember it. \n\nOk, enough with the sarcasm.\nI find it interesting that @bigtunacan seems concerned about gender equality in the profession, and yet there is also need to improve cultural, racial, and LGBT diversity as well. He probably realizes this but his cultural bias (and mine too because I am addressing him as a him) immediately makes it a gender issue for him. So I think its important to realize that just because one person sees something sexual in a name doesn't mean all do. I certainly can't speak for these communities but I think a potentially offensively named library, for a niche process where the only external presence is the name in a Gemfile, is really the smallest barrier to bringing true diversity to our development community.\nThese are just my personal comments, but since the project is under the modeset organization, I also think it is relevant to point out that out of 4 interns we currently have working with us, 3 are women. We have a paid staff of 8 people, so yes, the internship to employee ratio is 2:1. We support and host, in our office, code camps specifically organized for women, by women. Two of the 7 developers in house routinely teach development at a local college. These internships and sponsorships are not cheap, but they are very, very important. To this degree, I think the organization's actions speak louder than words when it comes to being inclusive, respectful, and actively working towards a greater future for our community. \n. so, closing this then?\n. Is it possible this is an asset pipeline issue? If, for example, you have a pretty large assets load and you are simply requiring the entire tree, I would expect the response time outside of the production environment to be quite slow. I notice this very much when I am remote pairing and have to wait for the assets to compile on each page load. You may try only requiring the specific files you need for each spec and see if that helps out.\n\nJed Schneider\n\"I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.\"\n- Alan Kay\nOn Monday, April 22, 2013 at 4:19 PM, thedeeno wrote:\n\nThe duration is in the browser is 0.073 s. So I think the actual page is running very fast. It's the server side code that seems to be slow. How long does it take for the server to respond in your test suite? Does on the order of seconds sound right?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/57#issuecomment-16820484).\n. I missed the original comment on this in my inbox. probably not related to loading tons of assets. sorry.\n. @ngan just curious, 28 files doesn't seem like a super huge test suite, is there a specific use case you are trying to solve by distributing them on multiple machines? My personal experience is that js tests run so fast in comparison to 'full stack' ruby tests that I haven't ever considered distributing them.\n. @phiggins thanks for reaching out. I have a good friend that had a product's initial build out done at Substantial in Seattle, maybe you worked on it? \n\nas you can probably tell from the directory structure the spec/dummy dir is an embedded rails app. afaik we do need the dummy rails app, it is the standard practice for programmatically testing Rails engines, but I am much less of an expert in gem distribution and packaging; eg, if this should be setup and torn down on a dev machine such that it doesn't make its way into the distributed package. (I am imagining the horrors of dealing with rvm, bundler, rbenv, and rubygems on any given dev machine to install the right version of a rails app... ) \nat the very least though we should be ignoring or somehow not distributing the contents of the log and tmp dirs within the dummy app. good catch.\nI'll let @jejacks0n make the call, but if its git surgery thats needed, I'll scrub in for that!\n. @phiggins no worries. I was more hallway chatting anyway. Thank you for contributing!\n. Might be able to safetify that with methods in FileUtils or the Dir classes.\n\nJed Schneider\n\"I invented the term 'Object-Oriented', and I can tell you I did not have C++ in mind.\"\n- Alan Kay\nOn Wednesday, May 15, 2013 at 3:55 PM, jejacks0n wrote:\n\nYes, in instrumentation.rb, in the process_and_instrument method. Looks legit to me, so I'm not sure what would be going on differently on windows. One using / and another using \\ I would assume though. Note the path replacement in there.  \n\nJeremy Jackson  \nOn May 15, 2013, at 9:57 AM, Derk-Jan Karrenbeld  wrote:  \n\nI understand how that happens then.  \nIt's not only in the report, it's also in the console [which is where the report gets its data from off course]. What should I look for? Needless to say, on UNIX-based systems ( the rest of my project ) the folder structure is maintained, where on windows it is completely flattened.  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/66#issuecomment-17962149).\n. pull requests for this will be considered\n. We'd accept a pull request for this functionality.\n. IIRC, you have to add any bin's that you want cli access to within the development group. I don' think that is a Teaspoon problem. If I'm wrong, you're welcome to reopen the issue. Thanks.\n. Hmm. I felt like in my trials phantomjs wasn't supporting the global window object but perhaps i am mistaken. Thats basically what i was asking though was what the name for the gloabal would be. Will take a further look.\u00a0\n\u2014\nSent from Mailbox for iPhone\n\nOn Fri, Aug 2, 2013 at 5:55 PM, jejacks0n notifications@github.com\nwrote:\n\nEverything in coffeescript is wrapped within a closure.  To get something \"globally\".\nso like\ncoffeescript\nwindow.fixture = window.navigator = null\nOr something, based on your needs.\nDoes that help?\nReply to this email directly or view it on GitHub:\nhttps://github.com/modeset/teaspoon/issues/100#issuecomment-22038537\n. yah i figured out that the main issue is that the navigator object on window doesn't have the geoposition object so where i was looking for the failure was too high in the chain.\n. Maybe we could include it in the gemspec and install by default, but provide a hook in order to use a different phantomjs executable via configuration via cli or otherwise. possible?...\n. Is the primary purpose of this to help CI bail out of a bad run? Are there other use cases I'm missing?\n. i think you have a timing issue here. this looks like jasmine, so I'll show you the jasmine api for this, but if its mocha, just double check the language for this or with mocha, set it up as an asynchronous test.\n\ncoffeescript\nel = $(\"<img src='https://www.google.com/images/srpr/logo4w.png'/>\")\nruns ->\n  $(document.body).append(el)\n  el.show()\nwaitsfor ->\n  $(el).is(':visible')\nruns ->\n  expect(el.height()).toBe 190\n  expect(el.width()).toBe 550\n. sidenotes:\nany time you modify state of the dom, you should probably write your specs to handle them as async tests. they will be more stable that way. \nalso it probably is not advisable to write tests to expect specific sizes of elements. if you really feel compelled to test this, maybe just checking visibility will keep you specs more resilient to change. expect(el).toBeVisible()\nFurther, you might just spy on whatever action fires the visibility and test that that action fires when the desired action happens. That way you don't actually care about dom manipulations.\n``` coffeescript\nclass Gymnastics\n  constructor: (el)->\n    @el = el\n  makeItShow: (event)->\n    @el.show() # make dom manipulation events in their own function so you can spy\n  handstandAndHoldIt: ->\n    @makeItShow()\nit 'becomes visible when i do a handstand', ->\n  el = new Gymnastics $(\"\")\n  spyOn(el, 'makeItShow')\n  el.handstandAndHoldIt()\n  expect(spy).toHaveBeenCalled()\n```\n. FWIW, personally, I'd have a really hard justifying maintaining tests that validate the properties of an image (your original test). Imagine that the viewport is set for a mobile device. Is you spec still valid? Probably not. The image probably is proportional to the viewport. Just an example of how that spec provides low value to maintenance time. Again, from a personal take on it (and I've written a lot of valueless tests I wish I hand't) what you want to test is the interactions; eg when I click this, this image shows up. Whether that image is cached, encoded, or fetched on demand from the server, changing the DOM is an asynchronous process.  As nice as it would be to treat it synchronously, its not. So I'd still recommend that you write such a test in the runs, waits, runs style even if the images are encoded. \nBut expanding on what I mentioned in my sidenotes, writing such a test is not a unit level test, its more of an integration level test. Refer back to my Gymnastics class example. You want to isolate DOM changing events into methods that can be mocked and then assert the method is called. Testing the DOM manipulation (jQuery#show in this case) is testing jQuery, the same as writing to a database for an AcitveRecord model test is testing Rails. \n. I think you have unbalanced html brackets. try\nfixture_value = '<div id=\"base\"><div id=\"content\"> </div></div>'\n. haha. i know the feeling. Glad it helped :smile: \n. @jejacks0n the better reporting gets us a step closer:\nError: ActionController::RoutingError: uninitialized constant Teaspoon::SpecController\nSo, does that mean the engine is not getting routed properly?\n. is it possible that this is an asynchronous issue, eg, this does not have the proper method at runtime but when you log it out, the method has resolved on the context of this by the time you are looking for it?\n. Also missing would be the log statement to 'hi' in your before each, so maybe the whole suite is not executing?\n. is it possible that you have a symlink in your rails project?\n. goodness gracious.\n. @Emerson can you bundle from @bramski's github fork and tell us if it seems to improve your load time as well. Thanks!\n. It seemed this was an issue on travis for a while as well but it seemed to resolved with some upgrades to travis CI.\nI made a 5 minute effort to figure out what had changed on travis, but they stopped updating their changelog over a year ago. This run is from 3 months ago:\n```\nFinished in 1 minute 29.07 seconds\n1145 examples, 0 failures, 5 pending\n Invoke teaspoon (first_time)\n Invoke environment \n** Execute teaspoon\nStarting the Teaspoon server...\n\n\nThin web server (v1.3.1 codename Triple Espresso)\nMaximum connections set to 1024\nListening on 0.0.0.0:50391, CTRL+C to stop\nTeaspoon running default suite at http://127.0.0.1:50391/teaspoon/default\nError: ActionView::Template::Error: execution expired\n```\n. ~~my guess is that they upgraded the selenium driver.~~ - EDIT - its still happening on Travis, though more reliable, the most recent build failed in the same way. Will bundle with HEAD and see if it makes a difference. Using Rails 3.2.21.\n. \n\n",
    "trans": "Wow! That was fast! I went to sleep and woke up and voila! There it was! :+1: \nTo your first question, yes that's one use case. The idea is to have an intermediate data format that can be stored, sent over the wire and/or transformed into other formats for viewing.\nThat's unfortunate about the line/file. It can really helps elucidate errors. Hopefully that situation will improve in the future. \nLooking forward to giving it a whirl later today.\n. Wow! That was fast! I went to sleep and woke up and voila! There it was! :+1: \nTo your first question, yes that's one use case. The idea is to have an intermediate data format that can be stored, sent over the wire and/or transformed into other formats for viewing.\nThat's unfortunate about the line/file. It can really helps elucidate errors. Hopefully that situation will improve in the future. \nLooking forward to giving it a whirl later today.\n. ",
    "skarlcf": "In IE6 HTML reporter (I hope you mean it) does not look the best...\n\nThere is an error:\n\nRow: 2890\nCharacter: 7\nError: Object does not support this property or method\nCode: 0\n. In IE6 HTML reporter (I hope you mean it) does not look the best...\n\nThere is an error:\n\nRow: 2890\nCharacter: 7\nError: Object does not support this property or method\nCode: 0\n. ",
    "pschuegr": "I am, in development and test groups.  phantomjs-linux is in my Gemfile.lock.\n. Thanks for the near-instant responses.  It looks like a result of running Ubuntu x64, \nsudo apt-get install ia32-libs\nseems to have fixed it.  I guess the phantomjs-linux is 32bit.\n. I've opened a bug on phantomjs.rb (https://github.com/westoque/phantomjs.rb/issues/6), but it looks there's not much that can be done about it, sadly.  It may be necessary to add the sub-version (phantomjs-linux or phantomjs-mac) to your gemfile manually.  Is it possible to add a setting to teabag to allow you to specify the path to phantomjs or to use the system version?\n. Well, at least with this version you can switch on the platform, using RUBY_PLATFORM.  So you don't really need to gitignore that initializer, if you have some standardization between developers.   The ideal solution would be if the gemspec for phantomjs.rb could be evaluated at run-time - I guess this could be done by adding it to your gemfile next to teabag and pointing to the github version, but that leaves you no version control.\nThanks for your quick responses.\n. Your call, of course.  I think it's nice to allow usage of an already existing phantom install, but on the other hand, if it's going to install phantomjs.rb anyway, I'm not sure it matters.\n. That's right.  Version is 0.7.1.  Any ideas?\n. Not that strange ;).  I'll dig into it, but this is from running \nbundle exec teabag\nbundle exec rake teabag gave me this (which is why i was trying just the teabag executable):\n```\nStarting the Teabag server...\nTeabag running default suite at http://127.0.0.1:56044/teabag/default\nError: Failed to load: http://127.0.0.1:56044/teabag/default?reporter=Console\nrake aborted!\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/teabag-0.7.1/lib/tasks/teabag.rake:4:in block in <top (required)>'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/bin/ruby_noexec_wrapper:14:ineval'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/bin/ruby_noexec_wrapper:14:in `'\nTasks: TOP => teabag\n(See full trace by running task with --trace)\n```\n. Yes, no problems there.  I'm using Thin though - any potential issues there?  \nAlso, fyi:  localhost:3000/teabag works great :)  just the cli doesn't seem to work.\n. Is there a way to run the teabag specs on my system?  It looks like the console formatter is throwing some kind of exception.\n. I upgraded my phantomjs to 1.9 and now the \nbundle exec rake teabag\nworks :), but I still have the same error related to cattr_accessor when running\nbundle exec teabag\n. I am, in development and test groups.  phantomjs-linux is in my Gemfile.lock.\n. Thanks for the near-instant responses.  It looks like a result of running Ubuntu x64, \nsudo apt-get install ia32-libs\nseems to have fixed it.  I guess the phantomjs-linux is 32bit.\n. I've opened a bug on phantomjs.rb (https://github.com/westoque/phantomjs.rb/issues/6), but it looks there's not much that can be done about it, sadly.  It may be necessary to add the sub-version (phantomjs-linux or phantomjs-mac) to your gemfile manually.  Is it possible to add a setting to teabag to allow you to specify the path to phantomjs or to use the system version?\n. Well, at least with this version you can switch on the platform, using RUBY_PLATFORM.  So you don't really need to gitignore that initializer, if you have some standardization between developers.   The ideal solution would be if the gemspec for phantomjs.rb could be evaluated at run-time - I guess this could be done by adding it to your gemfile next to teabag and pointing to the github version, but that leaves you no version control.\nThanks for your quick responses.\n. Your call, of course.  I think it's nice to allow usage of an already existing phantom install, but on the other hand, if it's going to install phantomjs.rb anyway, I'm not sure it matters.\n. That's right.  Version is 0.7.1.  Any ideas?\n. Not that strange ;).  I'll dig into it, but this is from running \nbundle exec teabag\nbundle exec rake teabag gave me this (which is why i was trying just the teabag executable):\n```\nStarting the Teabag server...\nTeabag running default suite at http://127.0.0.1:56044/teabag/default\nError: Failed to load: http://127.0.0.1:56044/teabag/default?reporter=Console\nrake aborted!\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/teabag-0.7.1/lib/tasks/teabag.rake:4:in block in <top (required)>'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:246:incall'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:246:in block in execute'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:241:ineach'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:241:in execute'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:184:inblock in invoke_with_call_chain'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:177:in invoke_with_call_chain'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/task.rb:170:ininvoke'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:143:in invoke_task'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:101:inblock (2 levels) in top_level'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:101:in each'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:101:inblock in top_level'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:110:in run_with_threads'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:95:intop_level'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:73:in block in run'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:160:instandard_exception_handling'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/gems/rake-10.0.4/lib/rake/application.rb:70:in run'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/bin/ruby_noexec_wrapper:14:ineval'\n/home/paul/.rvm/gems/ruby-1.9.3-p374@blah/bin/ruby_noexec_wrapper:14:in `'\nTasks: TOP => teabag\n(See full trace by running task with --trace)\n```\n. Yes, no problems there.  I'm using Thin though - any potential issues there?  \nAlso, fyi:  localhost:3000/teabag works great :)  just the cli doesn't seem to work.\n. Is there a way to run the teabag specs on my system?  It looks like the console formatter is throwing some kind of exception.\n. I upgraded my phantomjs to 1.9 and now the \nbundle exec rake teabag\nworks :), but I still have the same error related to cattr_accessor when running\nbundle exec teabag\n. ",
    "namick": "Hey guys, thanks for this great library.  I hope you don't mind that I took the liberty of adding back the wiki page on phantomjs.  It was still linked from the main readme file and I kept wishing it was there as I fought with this exact problem for way too long.  :-)\nenv variable is a nice solution by the way.\n. Hey guys, thanks for this great library.  I hope you don't mind that I took the liberty of adding back the wiki page on phantomjs.  It was still linked from the main readme file and I kept wishing it was there as I fought with this exact problem for way too long.  :-)\nenv variable is a nice solution by the way.\n. ",
    "jayzes": "With the TAP output in place, this might be unnecessary. See https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin\n. @jejacks0n do you have any starter code for the sprockets stuff done already? was thinking of taking a stab at the middleware approach we talked about the other day but didn't want to duplicate effort.\n. It would be pretty straightforward to add a configuration option to https://github.com/modeset/teabag/blob/master/lib/teabag/drivers/selenium_driver.rb to let the Selenium driver be specified at runtime/via the overall Teabag config - though it might take us a bit to get around to it as it's not something we have an internal need for currently. Patches/pull requests are always welcome, though!\n. Testing things like that that are bound to the markup is definitely tricky. Usually what I end up doing is having a very simple entrypoint to the application that's hooked to document.ready, frequently in the application layout itself. That layout never gets loaded in Teabag, however, so there's no autostarting of the JS to interfere with my test runs. Then I can still test my JS in isolation (using fixtures as necessary), and have minimal coupling to the overall application templates being loaded/run.\n. @theworkerant would you be able to gist your gemfile/gemfile.lock for that new project? Curious if there are any commonalities with projects we have that are failing.\n. Thanks!\n. That seems like a reasonable middle ground. If assets fail to compile, exit(1) ?\n. Rack::Zippy doe a weird thing where it takes over all of the asset-looking requests in the application via middleware, so it wouldn't be 100% surprising if that was the issue here. At least, it's bitten me before. See https://github.com/eliotsykes/rack-zippy/blob/master/lib/rack-zippy.rb#L87\n. I didn't, no. What does your Gemfile look like?\n. Thanks!\n. Also, do you have any thoughts on converting the bundled JS dependencies to use Bower for easy updating in the future?\n. Thanks!\n. This is by design - see #124 for the history. The short version is that the stack traces are way less meaningful if the files are concatenated together, making development difficult.\n. @alisnic just realized you were the same one who opened #124 initially - so you're aware of the history there.\n. @taboularasa no, that's fine in integration specs...but Teaspoon isn't really a tool for those. Capybara and the like are much better suited for integration testing than Jasmine/Mocha/QUnit.\n. With the TAP output in place, this might be unnecessary. See https://wiki.jenkins-ci.org/display/JENKINS/TAP+Plugin\n. @jejacks0n do you have any starter code for the sprockets stuff done already? was thinking of taking a stab at the middleware approach we talked about the other day but didn't want to duplicate effort.\n. It would be pretty straightforward to add a configuration option to https://github.com/modeset/teabag/blob/master/lib/teabag/drivers/selenium_driver.rb to let the Selenium driver be specified at runtime/via the overall Teabag config - though it might take us a bit to get around to it as it's not something we have an internal need for currently. Patches/pull requests are always welcome, though!\n. Testing things like that that are bound to the markup is definitely tricky. Usually what I end up doing is having a very simple entrypoint to the application that's hooked to document.ready, frequently in the application layout itself. That layout never gets loaded in Teabag, however, so there's no autostarting of the JS to interfere with my test runs. Then I can still test my JS in isolation (using fixtures as necessary), and have minimal coupling to the overall application templates being loaded/run.\n. @theworkerant would you be able to gist your gemfile/gemfile.lock for that new project? Curious if there are any commonalities with projects we have that are failing.\n. Thanks!\n. That seems like a reasonable middle ground. If assets fail to compile, exit(1) ?\n. Rack::Zippy doe a weird thing where it takes over all of the asset-looking requests in the application via middleware, so it wouldn't be 100% surprising if that was the issue here. At least, it's bitten me before. See https://github.com/eliotsykes/rack-zippy/blob/master/lib/rack-zippy.rb#L87\n. I didn't, no. What does your Gemfile look like?\n. Thanks!\n. Also, do you have any thoughts on converting the bundled JS dependencies to use Bower for easy updating in the future?\n. Thanks!\n. This is by design - see #124 for the history. The short version is that the stack traces are way less meaningful if the files are concatenated together, making development difficult.\n. @alisnic just realized you were the same one who opened #124 initially - so you're aware of the history there.\n. @taboularasa no, that's fine in integration specs...but Teaspoon isn't really a tool for those. Capybara and the like are much better suited for integration testing than Jasmine/Mocha/QUnit.\n. ",
    "DannyJF": "I'm confused by the comments. Did JUnit XML get added or abandoned? It would be good to have for reporting in sonar.\n. I think I'm going to work on this. Does teaspoon have a preferred convention to specify and output file?\n. I'd love this feature as well.\n. I'm confused by the comments. Did JUnit XML get added or abandoned? It would be good to have for reporting in sonar.\n. I think I'm going to work on this. Does teaspoon have a preferred convention to specify and output file?\n. I'd love this feature as well.\n. ",
    "razum2um": "Please, reopen this since Bamboo still not supporting TAP - the only option is junit\nhttps://jira.atlassian.com/browse/BAM-10955\n. Thanks for fast answer, I will consider a pull request.\nFor those who needed it: now it can be achieved via external converting like http://search.cpan.org/dist/TAP-Formatter-JUnit/bin/tap2junit\n. Please, reopen this since Bamboo still not supporting TAP - the only option is junit\nhttps://jira.atlassian.com/browse/BAM-10955\n. Thanks for fast answer, I will consider a pull request.\nFor those who needed it: now it can be achieved via external converting like http://search.cpan.org/dist/TAP-Formatter-JUnit/bin/tap2junit\n. ",
    "axyjo": "Hi all -- I've added a PR for this issue. I'd appreciate it if you guys could take a look at it. Thanks!\n. @skawtus Until then, gem 'teaspoon',                     '~> 0.7.7', :git => \"https://github.com/modeset/teaspoon.git\", :ref => '6f390361357ca47358f936fa3d56e245babdee45' works!\n. No worries! :)\n. Hi all -- I've added a PR for this issue. I'd appreciate it if you guys could take a look at it. Thanks!\n. @skawtus Until then, gem 'teaspoon',                     '~> 0.7.7', :git => \"https://github.com/modeset/teaspoon.git\", :ref => '6f390361357ca47358f936fa3d56e245babdee45' works!\n. No worries! :)\n. ",
    "scottleedavis": "Will you please publish this updated gem... :)\n. Will you please publish this updated gem... :)\n. ",
    "pboling": "not yet, but soon!\n. I saw your commits!  Great work!\n. not yet, but soon!\n. I saw your commits!  Great work!\n. ",
    "JaredSartin": "So, as I said in my edit, I was thinking it was not the backbone router system. I have narrowed it down to 2 tests in my 1,400 tests. One that loads TinyMCE to the page and checks the elements for TinyMCE exist and one that calls $('form').submit()\nI will keep you posted with what I find.\n. We are migrating over from Evergreen. The $.submit() one is an AJAX call made by jquery, so it shouldn't refresh the page. I have another developer joining me today to look at them, maybe we can pinpoint what it is.\nEDIT: Evergreen with Sinon, jasmine-jquery, jasmine-sinon, jasmine-behaves-like\n. went back to the master branch of the app, reinstalled the gem and did got back to almost 100% passing. The specs no longer restart. I will keep an eye out for it still.\nI have not changed anything on the computer, not even a reboot to the machine.\n. Makes sense, I have some test working with YouTube embed - when will this hit the Gem?\n\nJared Sartin\n[Ph] +1 269 364 1735\nOn Friday, January 18, 2013 at 9:32 PM, Gabe Varela wrote:\n\nI think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it.  \nGabe Varela\n303-638-6576  \nOn Jan 18, 2013, at 7:00 PM, Jared Sartin  wrote:  \n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\"  \nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too.  \nAny way to provide better feedback? And get tests passing? Could this be a cache thing?  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449229).\n. I just installed the 0.5.2 gem - fixed! thanks!\n\n\nJared Sartin\n[Ph] +1 269 364 1735\nOn Friday, January 18, 2013 at 9:46 PM, jejacks0n wrote:\n\nIt should already be released. Are you seeing it on the current release?  \n\nJeremy Jackson  \nOn Jan 18, 2013, at 7:34 PM, Jared Sartin  wrote:  \n\nMakes sense, I have some test working with YouTube embed - when will this hit the Gem?  \n\nJared Sartin  \n[Ph] +1 269 364 1735  \nOn Friday, January 18, 2013 at 9:32 PM, Gabe Varela wrote:  \n\nI think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it.  \nGabe Varela\n303-638-6576  \nOn Jan 18, 2013, at 7:00 PM, Jared Sartin  wrote:  \n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\"  \nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too.  \nAny way to provide better feedback? And get tests passing? Could this be a cache thing?  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449229).  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449401).\n. So, as I said in my edit, I was thinking it was not the backbone router system. I have narrowed it down to 2 tests in my 1,400 tests. One that loads TinyMCE to the page and checks the elements for TinyMCE exist and one that calls $('form').submit()\n\nI will keep you posted with what I find.\n. We are migrating over from Evergreen. The $.submit() one is an AJAX call made by jquery, so it shouldn't refresh the page. I have another developer joining me today to look at them, maybe we can pinpoint what it is.\nEDIT: Evergreen with Sinon, jasmine-jquery, jasmine-sinon, jasmine-behaves-like\n. went back to the master branch of the app, reinstalled the gem and did got back to almost 100% passing. The specs no longer restart. I will keep an eye out for it still.\nI have not changed anything on the computer, not even a reboot to the machine.\n. Makes sense, I have some test working with YouTube embed - when will this hit the Gem?\n\nJared Sartin\n[Ph] +1 269 364 1735\nOn Friday, January 18, 2013 at 9:32 PM, Gabe Varela wrote:\n\nI think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it.  \nGabe Varela\n303-638-6576  \nOn Jan 18, 2013, at 7:00 PM, Jared Sartin  wrote:  \n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\"  \nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too.  \nAny way to provide better feedback? And get tests passing? Could this be a cache thing?  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449229).\n. I just installed the 0.5.2 gem - fixed! thanks!\n\n\nJared Sartin\n[Ph] +1 269 364 1735\nOn Friday, January 18, 2013 at 9:46 PM, jejacks0n wrote:\n\nIt should already be released. Are you seeing it on the current release?  \n\nJeremy Jackson  \nOn Jan 18, 2013, at 7:34 PM, Jared Sartin  wrote:  \n\nMakes sense, I have some test working with YouTube embed - when will this hit the Gem?  \n\nJared Sartin  \n[Ph] +1 269 364 1735  \nOn Friday, January 18, 2013 at 9:32 PM, Gabe Varela wrote:  \n\nI think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it.  \nGabe Varela\n303-638-6576  \nOn Jan 18, 2013, at 7:00 PM, Jared Sartin  wrote:  \n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\"  \nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too.  \nAny way to provide better feedback? And get tests passing? Could this be a cache thing?  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449229).  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/issues/27#issuecomment-12449401).\n. \n",
    "Gowiem": "@jejacks0n Do you know what the root cause of this type of issue is? I'm seeing the same type of restarting happen in my ember test suite and it's a bit hard to nail down as it happens immediately. You brought up backbone's use of the history API and I'm wondering if Ember.Test#visit is causing my issue. Any ideas would be helpful. \n. @jejacks0n Gotcha. I'll just have to keep digging. Thanks for the input. \n. Hey, thanks for the quick reply. Sorry it's taken me so long to get back to you on this. You were right about it being an issue with the DOM being changes without me noticing. I was using some copy/pasted code which used document.write() in my setup method, which was clearing the dom. That my was my fault on not RTFM. \nI also agree with you on using fixtures to not pollute the testing DOM. I'm still pretty new to JavaScript testing, but I'll definitely keep that in mind from now on. Thanks.\n. Issue has seemed to have gone away suddenly. Never figured out what the issue was. Sorry about that. \n. +1\n. @jejacks0n Do you know what the root cause of this type of issue is? I'm seeing the same type of restarting happen in my ember test suite and it's a bit hard to nail down as it happens immediately. You brought up backbone's use of the history API and I'm wondering if Ember.Test#visit is causing my issue. Any ideas would be helpful. \n. @jejacks0n Gotcha. I'll just have to keep digging. Thanks for the input. \n. Hey, thanks for the quick reply. Sorry it's taken me so long to get back to you on this. You were right about it being an issue with the DOM being changes without me noticing. I was using some copy/pasted code which used document.write() in my setup method, which was clearing the dom. That my was my fault on not RTFM. \nI also agree with you on using fixtures to not pollute the testing DOM. I'm still pretty new to JavaScript testing, but I'll definitely keep that in mind from now on. Thanks.\n. Issue has seemed to have gone away suddenly. Never figured out what the issue was. Sorry about that. \n. +1\n. ",
    "gvarela": "You have to require the files you want to test in a given suite. This is accomplished by requiring them in your spec/javascripts/spec_helper.js file.\nSo if there's something that you want to test within application.js you should require it in your spec helper.\nAlternately if you had a separate implementation of a color picker -- you may want to require that file specifically from your color picker spec directly. Teabag makes no assumptions about where your files are, or how you've set them up in terms of pre-compilation.\n. I think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it.\nGabe Varela\n303-638-6576\nOn Jan 18, 2013, at 7:00 PM, Jared Sartin notifications@github.com wrote:\n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\"\nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too.\nAny way to provide better feedback? And get tests passing? Could this be a cache thing?\n\u2014\nReply to this email directly or view it on GitHub.\n. Is this something that should be made configurable. e.g. providing an easy api to tap into the fixtures?\n. it fixes a security vulnerability with rubygems.org  \n\n\nGabe Varela\nOn Thursday, March 21, 2013 at 1:47 PM, jejacks0n wrote:\n\nCan you explain why this is needed?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/pull/42#issuecomment-15261133).\n. Yes I believe you are missing something. Teabag assumes the Rails asset pipeline which uses Sprockets. The #= require application is a sprockets directive. I believe we would need more information from you to help you out. Why do you believe this isn't working for you?\n. The goal of Teaspoon is to make JS testing brain dead simple for rails applications. It has been documented how to bypass this in the wiki https://github.com/modeset/teaspoon/wiki/Using-phantomjs. If this does not meet your needs we would be happy to accept a pull request.\n. Understood. But, it's a tough balance. Not everyone trying to use Teaspoon understands ruby gem dependency management well. It's a tough problem to solve for everyone. If you are able to offer any recommendations we would love to have them.\n. The problem there is it assumes people will read the manual and know they have to add that dependency to the Gemfile. As maintainers that creates a lot of unnecessary support. It should be an install and use without having to know how to install phantomjs.\n. I've seen it on our CI before.  \n\n\nGabe Varela\nOn Thursday, October 17, 2013 at 8:15 AM, jejacks0n wrote:\n\nI'll have to take a look. I've never seen it before.  \n\nJeremy Jackson  \n\nOn Oct 17, 2013, at 2:04 AM, Ivo Wever  wrote:  \nI upgraded to 0.7.7 today and am currently seeing the following output when I run bundle exec rake teaspoon:  \nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:42137/teaspoon/default\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\nafter which the specs are executed successfully.  \nI would like to get rid of this superfluous output (I know I don't have phantomjs installed: it is provided by the gem). My goal is to create a situation where a glance at a failed build immediately tells me what is wrong and I don't have to ignore any 'informational' warnings.  \nIs there a way to suppress this output by setting an appropriate option? If not, can we consider this a bug or feature request?  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teaspoon/issues/122#issuecomment-26509224).\n. @jejacks0n I just ran into this issue on a fresh Rails 4.1 app. Resetting the compile flags fixed the issue.\n\nruby\n  config.assets.compile = true\n  config.assets.compress = false\n  config.assets.debug = false\n  config.assets.digest = false\nWhen I get a chance I will try to dig in and see why latest Rails 4 changed the behavior.\n. You have to require the files you want to test in a given suite. This is accomplished by requiring them in your spec/javascripts/spec_helper.js file.\nSo if there's something that you want to test within application.js you should require it in your spec helper.\nAlternately if you had a separate implementation of a color picker -- you may want to require that file specifically from your color picker spec directly. Teabag makes no assumptions about where your files are, or how you've set them up in terms of pre-compilation.\n. I think this is fixed in master. It has to do with something external loading and triggering a phantomjs load event. For us it was an iframe that triggered it.\nGabe Varela\n303-638-6576\nOn Jan 18, 2013, at 7:00 PM, Jared Sartin notifications@github.com wrote:\n\nI have a fully passing test suite in the browser, but on rake teabag it gets a majority of the we through tests and stops with this message printed: \"Error: Failed to load: http://127.0.0.1:50701/teabag/default/?\"\nI was working on tests and caused a fail then this happened. I reverted my changes to my code base and it never went away... it gets to different points in the tests when it fails too.\nAny way to provide better feedback? And get tests passing? Could this be a cache thing?\n\u2014\nReply to this email directly or view it on GitHub.\n. Is this something that should be made configurable. e.g. providing an easy api to tap into the fixtures?\n. it fixes a security vulnerability with rubygems.org  \n\n\nGabe Varela\nOn Thursday, March 21, 2013 at 1:47 PM, jejacks0n wrote:\n\nCan you explain why this is needed?\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teabag/pull/42#issuecomment-15261133).\n. Yes I believe you are missing something. Teabag assumes the Rails asset pipeline which uses Sprockets. The #= require application is a sprockets directive. I believe we would need more information from you to help you out. Why do you believe this isn't working for you?\n. The goal of Teaspoon is to make JS testing brain dead simple for rails applications. It has been documented how to bypass this in the wiki https://github.com/modeset/teaspoon/wiki/Using-phantomjs. If this does not meet your needs we would be happy to accept a pull request.\n. Understood. But, it's a tough balance. Not everyone trying to use Teaspoon understands ruby gem dependency management well. It's a tough problem to solve for everyone. If you are able to offer any recommendations we would love to have them.\n. The problem there is it assumes people will read the manual and know they have to add that dependency to the Gemfile. As maintainers that creates a lot of unnecessary support. It should be an install and use without having to know how to install phantomjs.\n. I've seen it on our CI before.  \n\n\nGabe Varela\nOn Thursday, October 17, 2013 at 8:15 AM, jejacks0n wrote:\n\nI'll have to take a look. I've never seen it before.  \n\nJeremy Jackson  \n\nOn Oct 17, 2013, at 2:04 AM, Ivo Wever  wrote:  \nI upgraded to 0.7.7 today and am currently seeing the following output when I run bundle exec rake teaspoon:  \nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:42137/teaspoon/default\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\n$PROJECT/vendor/bundle/ruby/2.0.0/bin/rake: No such file or directory - phantomjs\nafter which the specs are executed successfully.  \nI would like to get rid of this superfluous output (I know I don't have phantomjs installed: it is provided by the gem). My goal is to create a situation where a glance at a failed build immediately tells me what is wrong and I don't have to ignore any 'informational' warnings.  \nIs there a way to suppress this output by setting an appropriate option? If not, can we consider this a bug or feature request?  \n\u2014\nReply to this email directly or view it on GitHub.  \n\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/modeset/teaspoon/issues/122#issuecomment-26509224).\n. @jejacks0n I just ran into this issue on a fresh Rails 4.1 app. Resetting the compile flags fixed the issue.\n\nruby\n  config.assets.compile = true\n  config.assets.compress = false\n  config.assets.debug = false\n  config.assets.digest = false\nWhen I get a chance I will try to dig in and see why latest Rails 4 changed the behavior.\n. ",
    "wulftone": "Ah-ha.  I was expecting it to include all of my app/assets/javascripts files by default--because in the README there's this line:\n\"Teabag takes full advantage of the asset pipeline\"\nI put the following into my spec_helper.js, and it appears to work now:\n//= require ../../app/assets/javascripts/application\n//= require support/jasmine-jquery\n//= require support/sinon\n. > It's limiting to assume that everything worth testing is required through application.js -- and that's why there are no assumptions made in regards to the javascript structure.\n\nI can understand your confusion, so do you think we can clarify that more -- and if so, what are your thoughts?\n\nOf course, that makes sense.  However, I'd think that most projects have a lot of javascript that needs to get required in order for a modern js-heavy web application to even be testable, much less function at all.  Mine needs jQuery, underscore, and backbone, at the least.  The code I'm testing relies on those modules to exist.  In that case, requiring application.js is, well, required!\nI'd think a little note about this in the README or in spec_helper.js would be all that's needed to clear up how to use teabag.  Or people can just come and look at this issue.  : )\n. Ah-ha.  I was expecting it to include all of my app/assets/javascripts files by default--because in the README there's this line:\n\"Teabag takes full advantage of the asset pipeline\"\nI put the following into my spec_helper.js, and it appears to work now:\n//= require ../../app/assets/javascripts/application\n//= require support/jasmine-jquery\n//= require support/sinon\n. > It's limiting to assume that everything worth testing is required through application.js -- and that's why there are no assumptions made in regards to the javascript structure.\n\nI can understand your confusion, so do you think we can clarify that more -- and if so, what are your thoughts?\n\nOf course, that makes sense.  However, I'd think that most projects have a lot of javascript that needs to get required in order for a modern js-heavy web application to even be testable, much less function at all.  Mine needs jQuery, underscore, and backbone, at the least.  The code I'm testing relies on those modules to exist.  In that case, requiring application.js is, well, required!\nI'd think a little note about this in the README or in spec_helper.js would be all that's needed to clear up how to use teabag.  Or people can just come and look at this issue.  : )\n. ",
    "rubyonrailstutor": "@jejacks0n discovering this tool for the first time, very nice, thanks.  having trouble getting js files to load correctly in jasmine but i'm gonna assume it is a local problem.\n. @jejacks0n discovering this tool for the first time, very nice, thanks.  having trouble getting js files to load correctly in jasmine but i'm gonna assume it is a local problem.\n. ",
    "wchenvr": "Yeah, we're using 1.3.1, thanks.\n. Yeah, we're using 1.3.1, thanks.\n. ",
    "snuggs": "LOL @ teabag.\n. LOL @ teabag.\n. ",
    "olivier-o": "I will share it when found no worries!\n. Looks great. I read the wiki, does it mean that I need to add an entry for every spec file in spec_helper.js? \n. could teabag discover the files under spec/javascript and then run Teabag.execute? ...my app as already a config.js that contains path for requirejs, could Teabag take have a setting for consuming it?\nI would be happy to help you out in this task, if Teabag doesn't support it for now\n. I will share it when found no worries!\n. Looks great. I read the wiki, does it mean that I need to add an entry for every spec file in spec_helper.js? \n. could teabag discover the files under spec/javascript and then run Teabag.execute? ...my app as already a config.js that contains path for requirejs, could Teabag take have a setting for consuming it?\nI would be happy to help you out in this task, if Teabag doesn't support it for now\n. ",
    "prashantrajan": "my obligatory :+1:\n. Yeah, a configuration option to specify excluded paths (with globbing support) should work.\nEverything is included by default to keep things simple.\nReally excited to see this get in. \n. my obligatory :+1:\n. Yeah, a configuration option to specify excluded paths (with globbing support) should work.\nEverything is included by default to keep things simple.\nReally excited to see this get in. \n. ",
    "patrickbajao": "Nice! :+1:\nJust updated to 0.5.5 and it works. Thanks! :)\n. Nice! :+1:\nJust updated to 0.5.5 and it works. Thanks! :)\n. ",
    "ngan": "\nIn a beforeEach:\nthis.el = $(fixture.load('foo')[0])\n\nDoing this really supports the fact that one always need this...\n\nOr in my specs I use it as a scope:\nexpect( $('em', fixture.el).length ).to.eq(2)\n\nI'm rarely doing this as my fixture usually only contains 1 DOM element.\nI can understand why you'd be hesitant supply this though...but I really think it's a matter of \"if you build it, they will come\" situation...hehe.\n. > Or in my specs I use it as a scope:\n\nexpect( $('em', fixture.el).length ).to.eq(2)\n\nAlso, I think this is (subjectively) much nicer:\nexpect(fixture.$el.find('em').length).to.eq(2)\n:smile:\n. I got nothing against teabag.  Although, our office did a have quite a laugh when I added this gem into our Gemfile.  But while we're in the spirit of throwing out names...how about kettle?\n. > One can make literally anything into a euphemism, and that's not the intention with the name of the project. Sure, get a chuckle out of it, but we also have to respect that our industry has all genders, cultures, orientations and backgrounds. Teabag isn't making light of that because any inference is solely on the individual making it.\nWell put :clap:\n. In light of all the negativity this thread is generating...I just want to point out that this is an awesome open-sourced project.  @jejacks0n et al, you guys should be proud of your work.  Unfortunately, great publicity sometimes comes with some criticisms (constructive or not).  I really hope you guys still feel that you're making in a huge difference in the lives of the people who use your software--that's how I feel.  Thanks!\n. phantomjs-mac (0.0.3)\nphantomjs.rb (0.0.5)\n. I've found the problem, error on our part. Thanks!\n. Just my 2 cents... :smile:\nYou should check out: http://railscasts.com/episodes/412-fast-rails-commands\nFor me, I think it makes sense to boot up a server every time since it will pick up all the changes that you've made to your application (including environment files) to run the test suite.  I also think offloading the responsibility of making the environment booting up faster (if that is the problem you're having) to another tool would be the best for teabag as far as maintainability.\n. Can you explain the \"temporary suite\" concept? Basically what I'm trying to do is distribute my javascript specs across multiple machines and I need certain machines to run certain files.  The batch of files each machine runs is assigned on-the-fly every time, so there's no way for me to batch them in suites.  Unless there's a way to quickly and temporally allocate certain files to a suite and run that temp suite.\n. The specs can/will change over time (new ones are added), so the next build might distribute the specs differently than the last.\n. Not sure if this is possible (or makes sense), but instead of loading the runner URL, it would load a \"loader\" page that is essentially a form that has all the files as <input type=\"hidden\" ...> fields and submits the form to the runner URL?  This would work universally for any driver.\n. You're right, they run super fast--which is why is issue isn't really blocking me. However, there is still a gotcha that one isn't able to run a specific set of files if the number of files is too large.\n. Hey @jejacks0n, here's a proof of concept that works for me.  https://gist.github.com/ngan/5625707 If you think this is worth including into the project, I will gladly clean it up for merge.  Let me know, thanks!\n. @jejacks0n any thoughts on this?\n. > In a beforeEach:\n\nthis.el = $(fixture.load('foo')[0])\n\nDoing this really supports the fact that one always need this...\n\nOr in my specs I use it as a scope:\nexpect( $('em', fixture.el).length ).to.eq(2)\n\nI'm rarely doing this as my fixture usually only contains 1 DOM element.\nI can understand why you'd be hesitant supply this though...but I really think it's a matter of \"if you build it, they will come\" situation...hehe.\n. > Or in my specs I use it as a scope:\n\nexpect( $('em', fixture.el).length ).to.eq(2)\n\nAlso, I think this is (subjectively) much nicer:\nexpect(fixture.$el.find('em').length).to.eq(2)\n:smile:\n. I got nothing against teabag.  Although, our office did a have quite a laugh when I added this gem into our Gemfile.  But while we're in the spirit of throwing out names...how about kettle?\n. > One can make literally anything into a euphemism, and that's not the intention with the name of the project. Sure, get a chuckle out of it, but we also have to respect that our industry has all genders, cultures, orientations and backgrounds. Teabag isn't making light of that because any inference is solely on the individual making it.\nWell put :clap:\n. In light of all the negativity this thread is generating...I just want to point out that this is an awesome open-sourced project.  @jejacks0n et al, you guys should be proud of your work.  Unfortunately, great publicity sometimes comes with some criticisms (constructive or not).  I really hope you guys still feel that you're making in a huge difference in the lives of the people who use your software--that's how I feel.  Thanks!\n. phantomjs-mac (0.0.3)\nphantomjs.rb (0.0.5)\n. I've found the problem, error on our part. Thanks!\n. Just my 2 cents... :smile:\nYou should check out: http://railscasts.com/episodes/412-fast-rails-commands\nFor me, I think it makes sense to boot up a server every time since it will pick up all the changes that you've made to your application (including environment files) to run the test suite.  I also think offloading the responsibility of making the environment booting up faster (if that is the problem you're having) to another tool would be the best for teabag as far as maintainability.\n. Can you explain the \"temporary suite\" concept? Basically what I'm trying to do is distribute my javascript specs across multiple machines and I need certain machines to run certain files.  The batch of files each machine runs is assigned on-the-fly every time, so there's no way for me to batch them in suites.  Unless there's a way to quickly and temporally allocate certain files to a suite and run that temp suite.\n. The specs can/will change over time (new ones are added), so the next build might distribute the specs differently than the last.\n. Not sure if this is possible (or makes sense), but instead of loading the runner URL, it would load a \"loader\" page that is essentially a form that has all the files as <input type=\"hidden\" ...> fields and submits the form to the runner URL?  This would work universally for any driver.\n. You're right, they run super fast--which is why is issue isn't really blocking me. However, there is still a gotcha that one isn't able to run a specific set of files if the number of files is too large.\n. Hey @jejacks0n, here's a proof of concept that works for me.  https://gist.github.com/ngan/5625707 If you think this is worth including into the project, I will gladly clean it up for merge.  Let me know, thanks!\n. @jejacks0n any thoughts on this?\n. ",
    "mkitt": "I'm storing common lookups in the beforeEach as well like @jejacks0n is doing:\nthis.dom = $(fixture.el)\nthis.lists = this.dom.find('li')\nthis.links = this.dom.find('a')\nThis doesn't really bother me (since its generally stubbed out from a generator anyways), but I can see having a $el variable passed along from Teabag as a nice way to cut down on some of this.\nThe only potential issue I can think of is, how does Teabag bail out when $ (jQuery, Zepto, Angular, etc...) is not available? @jejacks0n would that hinder performance and/or speed of the tests if you have to check existence before setting $el?\n. I'm storing common lookups in the beforeEach as well like @jejacks0n is doing:\nthis.dom = $(fixture.el)\nthis.lists = this.dom.find('li')\nthis.links = this.dom.find('a')\nThis doesn't really bother me (since its generally stubbed out from a generator anyways), but I can see having a $el variable passed along from Teabag as a nice way to cut down on some of this.\nThe only potential issue I can think of is, how does Teabag bail out when $ (jQuery, Zepto, Angular, etc...) is not available? @jejacks0n would that hinder performance and/or speed of the tests if you have to check existence before setting $el?\n. ",
    "iainbeeston": "Looking at my own projects, it seems like it'd have to be either in the suite config or in spec_helper.\nThe advantage of putting it in the suite config is that it'd be clean. The advantage of spec_helper is that I'm already putting my other dependencies in spec_helper, so it'd seem a natural place to put external libraries (although it's markedly different to what people are used to with sprockets)\nAnother option might just be asynchronously loading the external dependencies (by adding a script tag to the page) in spec_helper, which (I think) would work without any changes to teabag itself.\n. I'm getting this issue too. I have teaspoon in both my dev and test environments (so I can access the rails generators). It seems to occur because sprockets is trying to process teaspoon-1.1.4/app/assets/javascripts/teaspoon/error.coffee\n. @mikepack I'm afraid Rails includes coffee script in the gemfile by default (both via coffee-script rails and tubolinks), so you need to remove these from the default app that rails generates. I can reliably reproduce by using the following:\n```\n$ rails -v\nRails 4.2.5.1\n$ rails new --skip-turbolinks --skip-bundle teaspoon-precompile\n      create\n      create  README.rdoc\n      ...\n$ cd teaspoon-precompile/\n$ sed -i '' '/.coffee-rails./d' Gemfile\n$ echo \"gem 'teaspoon-mocha', groups: [:development, :test]\" >> Gemfile\n$ bundle install\nFetching gem metadata from https://rubygems.org/...........\n...\n$ teaspoon -v\n1.1.4\n$ rails generate teaspoon:install\n      create  spec/teaspoon_env.rb\n      ...\n$ rake assets:precompile\nI, [2016-02-29T11:06:20.624666 #36671]  INFO -- : Writing /Users/iain/Work/teaspoon-precompile/public/assets/teaspoon-6e7be868738f20e0ca2ab731d5f577e0dd6bed588b1660eb2b2dc6b0328341dd.css\nI, [2016-02-29T11:06:20.631700 #36671]  INFO -- : Writing /Users/iain/Work/teaspoon-precompile/public/assets/teaspoon-6e7be868738f20e0ca2ab731d5f577e0dd6bed588b1660eb2b2dc6b0328341dd.css.gz\n...\nrake aborted!\nLoadError: cannot load such file -- coffee_script\n/Users/iain/.gem/ruby/2.3.0/gems/activesupport-4.2.5.1/lib/active_support/dependencies.rb:274:in `require'\n```\nCould you please try looking into this again?\n. Should the published version of teaspoon have a dependency on coffee script? Couldn't those files be precompiled in the published version of the gem?\n. @jejacks0n By my own debugging that might be app/assets/javascripts/teaspoon/error.coffee (in case that wasn't clear in all the messages above)\n. Looking at my own projects, it seems like it'd have to be either in the suite config or in spec_helper.\nThe advantage of putting it in the suite config is that it'd be clean. The advantage of spec_helper is that I'm already putting my other dependencies in spec_helper, so it'd seem a natural place to put external libraries (although it's markedly different to what people are used to with sprockets)\nAnother option might just be asynchronously loading the external dependencies (by adding a script tag to the page) in spec_helper, which (I think) would work without any changes to teabag itself.\n. I'm getting this issue too. I have teaspoon in both my dev and test environments (so I can access the rails generators). It seems to occur because sprockets is trying to process teaspoon-1.1.4/app/assets/javascripts/teaspoon/error.coffee\n. @mikepack I'm afraid Rails includes coffee script in the gemfile by default (both via coffee-script rails and tubolinks), so you need to remove these from the default app that rails generates. I can reliably reproduce by using the following:\n```\n$ rails -v\nRails 4.2.5.1\n$ rails new --skip-turbolinks --skip-bundle teaspoon-precompile\n      create\n      create  README.rdoc\n      ...\n$ cd teaspoon-precompile/\n$ sed -i '' '/.coffee-rails./d' Gemfile\n$ echo \"gem 'teaspoon-mocha', groups: [:development, :test]\" >> Gemfile\n$ bundle install\nFetching gem metadata from https://rubygems.org/...........\n...\n$ teaspoon -v\n1.1.4\n$ rails generate teaspoon:install\n      create  spec/teaspoon_env.rb\n      ...\n$ rake assets:precompile\nI, [2016-02-29T11:06:20.624666 #36671]  INFO -- : Writing /Users/iain/Work/teaspoon-precompile/public/assets/teaspoon-6e7be868738f20e0ca2ab731d5f577e0dd6bed588b1660eb2b2dc6b0328341dd.css\nI, [2016-02-29T11:06:20.631700 #36671]  INFO -- : Writing /Users/iain/Work/teaspoon-precompile/public/assets/teaspoon-6e7be868738f20e0ca2ab731d5f577e0dd6bed588b1660eb2b2dc6b0328341dd.css.gz\n...\nrake aborted!\nLoadError: cannot load such file -- coffee_script\n/Users/iain/.gem/ruby/2.3.0/gems/activesupport-4.2.5.1/lib/active_support/dependencies.rb:274:in `require'\n```\nCould you please try looking into this again?\n. Should the published version of teaspoon have a dependency on coffee script? Couldn't those files be precompiled in the published version of the gem?\n. @jejacks0n By my own debugging that might be app/assets/javascripts/teaspoon/error.coffee (in case that wasn't clear in all the messages above)\n. ",
    "jkarmel": "Can you give an example of how this works?\n. For example, if I want to include externally hosted javascript files on every suite, what do I need to do to get this up and running with teaspoon?\n. Hey sorry I figured this out, didn't read the docs carefully enough!\n. Can you give an example of how this works?\n. For example, if I want to include externally hosted javascript files on every suite, what do I need to do to get this up and running with teaspoon?\n. Hey sorry I figured this out, didn't read the docs carefully enough!\n. ",
    "equiet": "What is the solution here? I know I can make a boot partial where I can download what I need, but it's far from ideal.\n. What is the solution here? I know I can make a boot partial where I can download what I need, but it's far from ideal.\n. ",
    "LiquidMark": "Thanks, that's fixed it, at least for my cloned copy of teabag-demo.  Will\ntry out on my real project shortly.\nPS: Am I supposed to mark the ticket closed? I don't see how to do so...\n-Mark\nOn Wed, Mar 13, 2013 at 10:38 AM, jejacks0n notifications@github.comwrote:\n\nUpdate teabag. We did a broken release there if you don't have more tha\none suite.\n\nJeremy Jackson\nOn Mar 13, 2013, at 8:09 AM, LiquidMark notifications@github.com wrote:\n\n(Note: I originally submitted this under teabag-demo, but decided it may\nreflect a problem in teabag itself, so am submitting it here as well.)\nI am very keen to use teabag -- exactly what I need for testing my rails\nwith JavaScript, from the looks of it!\nHowever, I can't get even the simplest test to work. Thinking I must\nhave some incompatibility with my version of Ruby or some gem, I tried\ncloning the teabag demo, built it, ran the rails server, and navigated to\nhttp://localhost:3000/teabag. What it shows is \"passes: 0 failures: 0\nskipped: 0 duration: \u221e\". As best I know how, teabag-demo is using the exact\nversions of Ruby and all gems as specified by the .rvmrc and\nGemfile/Gemfile.lock.\nNo errors are shown from the rails server, but using Firefox, I looked\nat the console and see the error\nTypeError: this.findEl(...) is null\n[Break On This Error]\nthis.findEl(\"suite-select\").onchange = this.changeSuite;\nteabag...?body=1 (line 2815)\nRuby is 1.9.3p392:\nruby -v\nruby 1.9.3p392 (2013-02-22 revision 39386) [i686-linux]\nI'll include my Gemfile and Gemfile.lock here too in case that helps:\nGemfile:\nsource 'https://rubygems.org'\ngem 'rails', '3.2.9'\nBundle edge Rails instead:\ngem 'rails', :git => 'git://github.com/rails/rails.git'\ngem 'sqlite3'\nGems used only for assets and not required\nin production environments by default.\ngroup :assets do\ngem 'sass-rails', '~> 3.2.3'\ngem 'coffee-rails', '~> 3.2.1'\nSee https://github.com/sstephenson/execjs#readme for more supported\nruntimes\ngem 'therubyracer', :platforms => :ruby\ngem 'uglifier', '>= 1.0.3'\ngem \"teabag\"\nend\ngem 'phantomjs-linux'\ngem 'jquery-rails'\nTo use ActiveModel has_secure_password\ngem 'bcrypt-ruby', '~> 3.0.0'\nTo use Jbuilder templates for JSON\ngem 'jbuilder'\nUse unicorn as the app server\ngem 'unicorn'\nDeploy with Capistrano\ngem 'capistrano'\nTo use debugger\ngem 'debugger'\nGemfile.lock:\nGEM\nremote: https://rubygems.org/\nspecs:\nactionmailer (3.2.9)\nactionpack (= 3.2.9)\nmail (~> 2.4.4)\nactionpack (3.2.9)\nactivemodel (= 3.2.9)\nactivesupport (= 3.2.9)\nbuilder (~> 3.0.0)\nerubis (~> 2.7.0)\njourney (~> 1.0.4)\nrack (~> 1.4.0)\nrack-cache (~> 1.2)\nrack-test (~> 0.6.1)\nsprockets (~> 2.2.1)\nactivemodel (3.2.9)\nactivesupport (= 3.2.9)\nbuilder (~> 3.0.0)\nactiverecord (3.2.9)\nactivemodel (= 3.2.9)\nactivesupport (= 3.2.9)\narel (~> 3.0.2)\ntzinfo (~> 0.3.29)\nactiveresource (3.2.9)\nactivemodel (= 3.2.9)\nactivesupport (= 3.2.9)\nactivesupport (3.2.9)\ni18n (~> 0.6)\nmulti_json (~> 1.0)\narel (3.0.2)\nbuilder (3.0.4)\ncoffee-rails (3.2.2)\ncoffee-script (>= 2.2.0)\nrailties (~> 3.2.0)\ncoffee-script (2.2.0)\ncoffee-script-source\nexecjs\ncoffee-script-source (1.4.0)\nerubis (2.7.0)\nexecjs (1.4.0)\nmulti_json (~> 1.0)\nhike (1.2.1)\ni18n (0.6.1)\njourney (1.0.4)\njquery-rails (2.1.4)\nrailties (>= 3.0, < 5.0)\nthor (>= 0.14, < 2.0)\njson (1.7.5)\nmail (2.4.4)\ni18n (>= 0.4.0)\nmime-types (~> 1.16)\ntreetop (~> 1.4.8)\nmime-types (1.19)\nmulti_json (1.5.0)\nphantomjs-linux (0.0.2)\nphantomjs-mac (0.0.3)\nphantomjs.rb (0.0.5)\nphantomjs-mac\npolyglot (0.3.3)\nrack (1.4.1)\nrack-cache (1.2)\nrack (>= 0.4)\nrack-ssl (1.3.2)\nrack\nrack-test (0.6.2)\nrack (>= 1.0)\nrails (3.2.9)\nactionmailer (= 3.2.9)\nactionpack (= 3.2.9)\nactiverecord (= 3.2.9)\nactiveresource (= 3.2.9)\nactivesupport (= 3.2.9)\nbundler (~> 1.0)\nrailties (= 3.2.9)\nrailties (3.2.9)\nactionpack (= 3.2.9)\nactivesupport (= 3.2.9)\nrack-ssl (~> 1.3.2)\nrake (>= 0.8.7)\nrdoc (~> 3.4)\nthor (>= 0.14.6, < 2.0)\nrake (10.0.3)\nrdoc (3.12)\njson (~> 1.4)\nsass (3.2.4)\nsass-rails (3.2.5)\nrailties (~> 3.2.0)\nsass (>= 3.1.10)\ntilt (~> 1.3)\nsprockets (2.2.2)\nhike (~> 1.2)\nmulti_json (~> 1.0)\nrack (~> 1.0)\ntilt (~> 1.1, != 1.3.0)\nsqlite3 (1.3.6)\nteabag (0.4.1)\nphantomjs.rb (~> 0.0.5)\nrailties (~> 3.2.5)\nthor (0.16.0)\ntilt (1.3.3)\ntreetop (1.4.12)\npolyglot\npolyglot (>= 0.3.1)\ntzinfo (0.3.35)\nuglifier (1.3.0)\nexecjs (>= 0.3.0)\nmulti_json (~> 1.0, >= 1.0.2)\nPLATFORMS\nruby\nDEPENDENCIES\ncoffee-rails (~> 3.2.1)\njquery-rails\nphantomjs-linux\nrails (= 3.2.9)\nsass-rails (~> 3.2.3)\nsqlite3\nteabag\nuglifier (>= 1.0.3)\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teabag/issues/35#issuecomment-14848568\n.\n\n\n\nMark Molloy\n  (641)218-8265\n. Thanks, that's fixed it, at least for my cloned copy of teabag-demo.  Will\ntry out on my real project shortly.\n\nPS: Am I supposed to mark the ticket closed? I don't see how to do so...\n-Mark\nOn Wed, Mar 13, 2013 at 10:38 AM, jejacks0n notifications@github.comwrote:\n\nUpdate teabag. We did a broken release there if you don't have more tha\none suite.\n\nJeremy Jackson\nOn Mar 13, 2013, at 8:09 AM, LiquidMark notifications@github.com wrote:\n\n(Note: I originally submitted this under teabag-demo, but decided it may\nreflect a problem in teabag itself, so am submitting it here as well.)\nI am very keen to use teabag -- exactly what I need for testing my rails\nwith JavaScript, from the looks of it!\nHowever, I can't get even the simplest test to work. Thinking I must\nhave some incompatibility with my version of Ruby or some gem, I tried\ncloning the teabag demo, built it, ran the rails server, and navigated to\nhttp://localhost:3000/teabag. What it shows is \"passes: 0 failures: 0\nskipped: 0 duration: \u221e\". As best I know how, teabag-demo is using the exact\nversions of Ruby and all gems as specified by the .rvmrc and\nGemfile/Gemfile.lock.\nNo errors are shown from the rails server, but using Firefox, I looked\nat the console and see the error\nTypeError: this.findEl(...) is null\n[Break On This Error]\nthis.findEl(\"suite-select\").onchange = this.changeSuite;\nteabag...?body=1 (line 2815)\nRuby is 1.9.3p392:\nruby -v\nruby 1.9.3p392 (2013-02-22 revision 39386) [i686-linux]\nI'll include my Gemfile and Gemfile.lock here too in case that helps:\nGemfile:\nsource 'https://rubygems.org'\ngem 'rails', '3.2.9'\nBundle edge Rails instead:\ngem 'rails', :git => 'git://github.com/rails/rails.git'\ngem 'sqlite3'\nGems used only for assets and not required\nin production environments by default.\ngroup :assets do\ngem 'sass-rails', '~> 3.2.3'\ngem 'coffee-rails', '~> 3.2.1'\nSee https://github.com/sstephenson/execjs#readme for more supported\nruntimes\ngem 'therubyracer', :platforms => :ruby\ngem 'uglifier', '>= 1.0.3'\ngem \"teabag\"\nend\ngem 'phantomjs-linux'\ngem 'jquery-rails'\nTo use ActiveModel has_secure_password\ngem 'bcrypt-ruby', '~> 3.0.0'\nTo use Jbuilder templates for JSON\ngem 'jbuilder'\nUse unicorn as the app server\ngem 'unicorn'\nDeploy with Capistrano\ngem 'capistrano'\nTo use debugger\ngem 'debugger'\nGemfile.lock:\nGEM\nremote: https://rubygems.org/\nspecs:\nactionmailer (3.2.9)\nactionpack (= 3.2.9)\nmail (~> 2.4.4)\nactionpack (3.2.9)\nactivemodel (= 3.2.9)\nactivesupport (= 3.2.9)\nbuilder (~> 3.0.0)\nerubis (~> 2.7.0)\njourney (~> 1.0.4)\nrack (~> 1.4.0)\nrack-cache (~> 1.2)\nrack-test (~> 0.6.1)\nsprockets (~> 2.2.1)\nactivemodel (3.2.9)\nactivesupport (= 3.2.9)\nbuilder (~> 3.0.0)\nactiverecord (3.2.9)\nactivemodel (= 3.2.9)\nactivesupport (= 3.2.9)\narel (~> 3.0.2)\ntzinfo (~> 0.3.29)\nactiveresource (3.2.9)\nactivemodel (= 3.2.9)\nactivesupport (= 3.2.9)\nactivesupport (3.2.9)\ni18n (~> 0.6)\nmulti_json (~> 1.0)\narel (3.0.2)\nbuilder (3.0.4)\ncoffee-rails (3.2.2)\ncoffee-script (>= 2.2.0)\nrailties (~> 3.2.0)\ncoffee-script (2.2.0)\ncoffee-script-source\nexecjs\ncoffee-script-source (1.4.0)\nerubis (2.7.0)\nexecjs (1.4.0)\nmulti_json (~> 1.0)\nhike (1.2.1)\ni18n (0.6.1)\njourney (1.0.4)\njquery-rails (2.1.4)\nrailties (>= 3.0, < 5.0)\nthor (>= 0.14, < 2.0)\njson (1.7.5)\nmail (2.4.4)\ni18n (>= 0.4.0)\nmime-types (~> 1.16)\ntreetop (~> 1.4.8)\nmime-types (1.19)\nmulti_json (1.5.0)\nphantomjs-linux (0.0.2)\nphantomjs-mac (0.0.3)\nphantomjs.rb (0.0.5)\nphantomjs-mac\npolyglot (0.3.3)\nrack (1.4.1)\nrack-cache (1.2)\nrack (>= 0.4)\nrack-ssl (1.3.2)\nrack\nrack-test (0.6.2)\nrack (>= 1.0)\nrails (3.2.9)\nactionmailer (= 3.2.9)\nactionpack (= 3.2.9)\nactiverecord (= 3.2.9)\nactiveresource (= 3.2.9)\nactivesupport (= 3.2.9)\nbundler (~> 1.0)\nrailties (= 3.2.9)\nrailties (3.2.9)\nactionpack (= 3.2.9)\nactivesupport (= 3.2.9)\nrack-ssl (~> 1.3.2)\nrake (>= 0.8.7)\nrdoc (~> 3.4)\nthor (>= 0.14.6, < 2.0)\nrake (10.0.3)\nrdoc (3.12)\njson (~> 1.4)\nsass (3.2.4)\nsass-rails (3.2.5)\nrailties (~> 3.2.0)\nsass (>= 3.1.10)\ntilt (~> 1.3)\nsprockets (2.2.2)\nhike (~> 1.2)\nmulti_json (~> 1.0)\nrack (~> 1.0)\ntilt (~> 1.1, != 1.3.0)\nsqlite3 (1.3.6)\nteabag (0.4.1)\nphantomjs.rb (~> 0.0.5)\nrailties (~> 3.2.5)\nthor (0.16.0)\ntilt (1.3.3)\ntreetop (1.4.12)\npolyglot\npolyglot (>= 0.3.1)\ntzinfo (0.3.35)\nuglifier (1.3.0)\nexecjs (>= 0.3.0)\nmulti_json (~> 1.0, >= 1.0.2)\nPLATFORMS\nruby\nDEPENDENCIES\ncoffee-rails (~> 3.2.1)\njquery-rails\nphantomjs-linux\nrails (= 3.2.9)\nsass-rails (~> 3.2.3)\nsqlite3\nteabag\nuglifier (>= 1.0.3)\n\u2014\nReply to this email directly or view it on GitHub.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teabag/issues/35#issuecomment-14848568\n.\n\n\n\nMark Molloy\n  (641)218-8265\n. \n",
    "ysbaddaden": "Sure:\nAn Angular app can be unit tested easily with any testing framework, and teabag with either jasmine or mocha/chai does the job very well. But Angular also permits to run end-to-end tests, using the angular-scenario framework. It loads pages and data from the remote server, and offers a nice DSL to write integration tests. That part requires a specific adapter.\nI tinkered with teabag and angular-scenario today using the testacular adapter as a reference, and did come up with something. I haven't implemented the errors method yet, and teabag won't display the full report (because there ain't no parent I guess), but tests are running.\nSee https://gist.github.com/ysbaddaden/5162789\n. I just updated the gist: tests are running, passes/failures counters are updated, and errors are reported, but the full report still won't display.\nI guess a console reporter is required to run tests through phantomjs?\n. Got it: I had to listen for SpecBegin then call reportSpecStarting for the full report to display something. But now the suite's description is undefined for some reason. I'll investigate later.\n. Here comes a proper integration: https://github.com/ysbaddaden/teabag/commit/099e4a00ed21d4be28bf6e7d199d2569eb9c1c04\nProper tests are lacking. There are just basic tests for Teabag.Spec and Teabag.Suite\n. What's missing now, is a spec for the runner.\nAlso I don't know much about spies, but see them used in the reporters specs? The current html reporter spec creates a second reporter, while maybe it should be mocked.\n. Here it comes: #37 \n. I'm coming late to this discussion, but just to clarify:\nThe teaspoon-angular adapter is for end-to-end (E2E) testing using angular-scenario, which is an acceptance test runner (like capybara but running right into the browser).\nYou may use whatever you want for unit tests. I'm using mocha + chai myself, and I sure expect Jasmine to work too. Thought you can't use teaspoon-angular to unit test your app, of course.\nFor example, to test my angular app, I configured two tests suites with teaspoon:\n- unit (teaspoon-mocha + chaijs): unit tests for controllers, directives, etc.\n- e2e (teaspoon-angular): acceptance tests for UI behavior and backend interaction.\nI hope it clarifies things a bit!\nBTW: you can use teaspoon fixtures the regular way when unit testing; but it gets complicated with e2e tests, where mocks and fixtures must happen in the iframe created by angular scenario (which itself is running in the main page).\n. I didn't know about protractor  before you mentioned it.\nProtractor doesn't run a test suite on the browser, it also controls where\nit runs then executes the tests through webdriver. Like a\npromised/angular-aware capybara.\nIntegrating with teaspoon looks impossible. I hope it won't replace\nngScenario completely :/\n. Hello @kakoni. My guess is that $httpBackend is creating you problems here. If you are unit-testing, then just inline the minimal template required in your test; you're testing the directive anyway, not it's integration into the whole project \u2014that you will test it using angular-scenario.\nThis is how I unit test my directives:\n``` coffeescript\nmyapp.directive \"my-directive\", ->\n  return (scope, element, attr) ->\n    attr.$addClass('my-class-name')\ndescribe \"myDirective\", ->\n  beforeEach module(\"myapp\")\nbeforeEach inject ($compile, $rootScope) ->\n    template = ''\n    @element = angular.element(template)\n    @scope = $rootScope.$new()\n    $compile(@element)(@scope)\nit \"must add class\", ->\n    expect(@element).to.have.class('my-class-name')\n```\n@jejacks0n I guess the wiki page is misleading. You don't need anything particular for unit testing; just use teaspoon-mocha or teaspoon-jasmine, include angular-mocks then start writing your tests. What teaspoon-angular provides is integration of angular-scenario for end-to-end (e2e) / integration tests, where angular loads the website in a iframe and provides methods to test how your website is reacting to clicks, inputs, etc.\n. Just thought about it: when a directive itself uses a templateUrl that it must compile, I manually populate $templateCache so I still control the template from my test. For example:\ncoffeescript\nbeforeEach inject ($templateCache) ->\n  $templateCache.put(\"modal.html\", \"<div modal>...</div>\")\nNote: this is angularjs peculiarities, it has nothing to do with teaspoon actually.\n. I just tested v0.8 on my application, and I've got one bug: the teaspoon engine is now added at the end of the routes, while it used to be the first one. The difference is tiny, but my application uses a catch-all route to render my angular application (whatever the URL), and it now kicks in before teaspoon's, so I can't load /teaspoon anymore.\n. No problem for me with current master (using jasmine) :)\n. Closing since this is already implemented in the next release as --driver--timeout.\n. Sure:\nAn Angular app can be unit tested easily with any testing framework, and teabag with either jasmine or mocha/chai does the job very well. But Angular also permits to run end-to-end tests, using the angular-scenario framework. It loads pages and data from the remote server, and offers a nice DSL to write integration tests. That part requires a specific adapter.\nI tinkered with teabag and angular-scenario today using the testacular adapter as a reference, and did come up with something. I haven't implemented the errors method yet, and teabag won't display the full report (because there ain't no parent I guess), but tests are running.\nSee https://gist.github.com/ysbaddaden/5162789\n. I just updated the gist: tests are running, passes/failures counters are updated, and errors are reported, but the full report still won't display.\nI guess a console reporter is required to run tests through phantomjs?\n. Got it: I had to listen for SpecBegin then call reportSpecStarting for the full report to display something. But now the suite's description is undefined for some reason. I'll investigate later.\n. Here comes a proper integration: https://github.com/ysbaddaden/teabag/commit/099e4a00ed21d4be28bf6e7d199d2569eb9c1c04\nProper tests are lacking. There are just basic tests for Teabag.Spec and Teabag.Suite\n. What's missing now, is a spec for the runner.\nAlso I don't know much about spies, but see them used in the reporters specs? The current html reporter spec creates a second reporter, while maybe it should be mocked.\n. Here it comes: #37 \n. I'm coming late to this discussion, but just to clarify:\nThe teaspoon-angular adapter is for end-to-end (E2E) testing using angular-scenario, which is an acceptance test runner (like capybara but running right into the browser).\nYou may use whatever you want for unit tests. I'm using mocha + chai myself, and I sure expect Jasmine to work too. Thought you can't use teaspoon-angular to unit test your app, of course.\nFor example, to test my angular app, I configured two tests suites with teaspoon:\n- unit (teaspoon-mocha + chaijs): unit tests for controllers, directives, etc.\n- e2e (teaspoon-angular): acceptance tests for UI behavior and backend interaction.\nI hope it clarifies things a bit!\nBTW: you can use teaspoon fixtures the regular way when unit testing; but it gets complicated with e2e tests, where mocks and fixtures must happen in the iframe created by angular scenario (which itself is running in the main page).\n. I didn't know about protractor  before you mentioned it.\nProtractor doesn't run a test suite on the browser, it also controls where\nit runs then executes the tests through webdriver. Like a\npromised/angular-aware capybara.\nIntegrating with teaspoon looks impossible. I hope it won't replace\nngScenario completely :/\n. Hello @kakoni. My guess is that $httpBackend is creating you problems here. If you are unit-testing, then just inline the minimal template required in your test; you're testing the directive anyway, not it's integration into the whole project \u2014that you will test it using angular-scenario.\nThis is how I unit test my directives:\n``` coffeescript\nmyapp.directive \"my-directive\", ->\n  return (scope, element, attr) ->\n    attr.$addClass('my-class-name')\ndescribe \"myDirective\", ->\n  beforeEach module(\"myapp\")\nbeforeEach inject ($compile, $rootScope) ->\n    template = ''\n    @element = angular.element(template)\n    @scope = $rootScope.$new()\n    $compile(@element)(@scope)\nit \"must add class\", ->\n    expect(@element).to.have.class('my-class-name')\n```\n@jejacks0n I guess the wiki page is misleading. You don't need anything particular for unit testing; just use teaspoon-mocha or teaspoon-jasmine, include angular-mocks then start writing your tests. What teaspoon-angular provides is integration of angular-scenario for end-to-end (e2e) / integration tests, where angular loads the website in a iframe and provides methods to test how your website is reacting to clicks, inputs, etc.\n. Just thought about it: when a directive itself uses a templateUrl that it must compile, I manually populate $templateCache so I still control the template from my test. For example:\ncoffeescript\nbeforeEach inject ($templateCache) ->\n  $templateCache.put(\"modal.html\", \"<div modal>...</div>\")\nNote: this is angularjs peculiarities, it has nothing to do with teaspoon actually.\n. I just tested v0.8 on my application, and I've got one bug: the teaspoon engine is now added at the end of the routes, while it used to be the first one. The difference is tiny, but my application uses a catch-all route to render my angular application (whatever the URL), and it now kicks in before teaspoon's, so I can't load /teaspoon anymore.\n. No problem for me with current master (using jasmine) :)\n. Closing since this is already implemented in the next release as --driver--timeout.\n. ",
    "andyl": "Dear @ysbaddaqden and @jejacks0n - I'm starting to use AngularJS and TeaSpoon in my Rails app.\nCurrently I use rspec/capybara to do end-to-end integration testing.\nI'm curious if you have an opinion on integration testing: should I continue to use rspec/capybara, or should I use the angular e2e test suite.\nps. sorry for asking this question on the issue tracker - if there is a better forum for a question like this, let me know and I will use it !!\n. Last night my teabag config broke during an upgrade - ninety minutes wasted. After some investigation I find that the root cause of the breakage is a shakedown by moralizers who can't control their own bevis-and-butthead mental imagery.\nSo I guess the new norm is zero tolerance towards names with alternate connotations.  In that spirit, I demand that the username @bigtunacan be changed.  When I google the term, I get something awful and upsetting.  Since its fair to demand that @jejacks0n change his project name, it is also fair to demand that @bigtunacan be excised, so that it can never upset anyone's sensibilities, especially females or youth.\n. OK so - the phantomjs from the apt-get repo was at version 1.4.  I downloaded the newest phantomJS (version 1.9), installed it on my path, and everything looks great.\nI added a little blurb to the wiki page in case someone else runs into this issue.  \nThanks very much for Teabag - excited to try this on my project!\n. @jejacks0n - yeah I had seen that remote-debugging config.  It requires a browser, and there is configuration complexity.  This seems like a more complicated version of the browser debugging that we already have.\nI couldn't find any docco describing how to run the debugger in the CLI.  I guess its not possible.\n. Yeah I was able to get console.log output on the CLI - super helpful.\nLooked into the debug stuff some more & no luck.  The browser-based 'remote-debugger' option that PhantomJS provides seems more complex than just running in the browser as we can do now.  \nPhantomJS has a nice command-line REPL.  If there were a way to pop into the REPL in the context of a test, that would do the trick.  But I couldn't figure out how.  I studied Poltergiest to see if they had a debug/repl strategy, but no luck.  Looking thru the PhantomJS issue tracker shows lots of discussion about the REPL, but couldn't find a way to enter the REPL during the execution of JS code.\n. One last comment - I asked about REPL/Debugger on the PhantomJS mailing list and didn't get any good answers, other than to use remote debugging.  I found that Poltergiest supports remote debugging (https://github.com/teampoltergeist/poltergeist#remote-debugging-experimental), tried it and didn't find it to be better than running specs in the browser using Jasmine.  So there still doesn't seem to be a good answer for using a PhantomJS debugger on the command line.\n. @jejacks0n @jedschneider - thanks a lot for taking the time to explain the async technique.  I made the changes you suggest and everything is working perfectly.\n. One last comment - I converted all of my image files to data-encoded URI's.  This way the images are embedded directly in the tests, and do not have to be retrieved from a webserver.\nI'm not sure if this is best-practice - I suppose some sort of mocking/stubbing probably would be.  But for my purposes the data-encoded images were very handy.\nHere is a gist with my test images.  Hopefully this will be helpful to someone who stumbles across this post in the future.\n. I agree that in most cases I would not deal with image properties.  But I am writing an image editing component that does cropping, rotating, resizing etc.  So in this situation the image properties are important! \nAlso - the editing component relies on javascript objects that perform the image manipulation calculations. I've got a suite of unit tests that work on the javascript objects, then some integration tests that use the images and exercise the whole stack.  I think my technique is similar to what you recommend, except that I'm not yet using mocking/stubbing.\n. Duplicates my own question! (#109)\n. Hmm ok.  I've attached a screenshot of my console output which shows that it keeps running after the first failing spec.  I've tried config.fail_fast=true in the config file, and I've tried using -F and --fail-fast=true` on the command line.  No luck.  In fact it is not even preventing follow-on suites from running.\nI'm using Jasmine 1.3.1.  Could that be the issue??  (also using: teaspoon 0.9.1, ubuntu 14.04, guard 2.6.1, spring 1.1.3, ruby 2.2.1)\n\n. Well - it seems to behave the same way, whether run from Guard or from the command line.\nI have come up with a hack that solves my problem - I filter the teaspoon output.  FYI here is the script...\n``` ruby\n!/usr/bin/env ruby\nThis script removes unwanted teaspoon text\nRead from stdin: teaspoon | filter_teaspoon_output\nSHOW_PATTERNS = [      # switch to 'show' mode when a pattern is detected\n  \"^Teaspoon\",\n  \"^Finished\"\n]\nHIDE_PATTERNS = [      # skip printing if these patterns are detected\n  \"^Starting\" , \n  \"^Puma\"     , \n  \"^\\*\"      , \n  \"^  2\\)\"   ,\n  \"^Failed examples:\"\n]\ndef set_mode(string, mode)\n  return :show if SHOW_PATTERNS.find {|reg| string =~ Regexp.new(reg)} \n  return :hide if HIDE_PATTERNS.find {|reg| string =~ Regexp.new(reg)} \n  mode\nend\nbuffer = \"\"\nmode   = :show\nwhile buffer = STDIN.gets do\n  mode = set_mode(buffer, mode)\n  print buffer if mode == :show\n  STDOUT.flush\n  buffer = \"\"\nend\n```\n. Dear @ysbaddaqden and @jejacks0n - I'm starting to use AngularJS and TeaSpoon in my Rails app.\nCurrently I use rspec/capybara to do end-to-end integration testing.\nI'm curious if you have an opinion on integration testing: should I continue to use rspec/capybara, or should I use the angular e2e test suite.\nps. sorry for asking this question on the issue tracker - if there is a better forum for a question like this, let me know and I will use it !!\n. Last night my teabag config broke during an upgrade - ninety minutes wasted. After some investigation I find that the root cause of the breakage is a shakedown by moralizers who can't control their own bevis-and-butthead mental imagery.\nSo I guess the new norm is zero tolerance towards names with alternate connotations.  In that spirit, I demand that the username @bigtunacan be changed.  When I google the term, I get something awful and upsetting.  Since its fair to demand that @jejacks0n change his project name, it is also fair to demand that @bigtunacan be excised, so that it can never upset anyone's sensibilities, especially females or youth.\n. OK so - the phantomjs from the apt-get repo was at version 1.4.  I downloaded the newest phantomJS (version 1.9), installed it on my path, and everything looks great.\nI added a little blurb to the wiki page in case someone else runs into this issue.  \nThanks very much for Teabag - excited to try this on my project!\n. @jejacks0n - yeah I had seen that remote-debugging config.  It requires a browser, and there is configuration complexity.  This seems like a more complicated version of the browser debugging that we already have.\nI couldn't find any docco describing how to run the debugger in the CLI.  I guess its not possible.\n. Yeah I was able to get console.log output on the CLI - super helpful.\nLooked into the debug stuff some more & no luck.  The browser-based 'remote-debugger' option that PhantomJS provides seems more complex than just running in the browser as we can do now.  \nPhantomJS has a nice command-line REPL.  If there were a way to pop into the REPL in the context of a test, that would do the trick.  But I couldn't figure out how.  I studied Poltergiest to see if they had a debug/repl strategy, but no luck.  Looking thru the PhantomJS issue tracker shows lots of discussion about the REPL, but couldn't find a way to enter the REPL during the execution of JS code.\n. One last comment - I asked about REPL/Debugger on the PhantomJS mailing list and didn't get any good answers, other than to use remote debugging.  I found that Poltergiest supports remote debugging (https://github.com/teampoltergeist/poltergeist#remote-debugging-experimental), tried it and didn't find it to be better than running specs in the browser using Jasmine.  So there still doesn't seem to be a good answer for using a PhantomJS debugger on the command line.\n. @jejacks0n @jedschneider - thanks a lot for taking the time to explain the async technique.  I made the changes you suggest and everything is working perfectly.\n. One last comment - I converted all of my image files to data-encoded URI's.  This way the images are embedded directly in the tests, and do not have to be retrieved from a webserver.\nI'm not sure if this is best-practice - I suppose some sort of mocking/stubbing probably would be.  But for my purposes the data-encoded images were very handy.\nHere is a gist with my test images.  Hopefully this will be helpful to someone who stumbles across this post in the future.\n. I agree that in most cases I would not deal with image properties.  But I am writing an image editing component that does cropping, rotating, resizing etc.  So in this situation the image properties are important! \nAlso - the editing component relies on javascript objects that perform the image manipulation calculations. I've got a suite of unit tests that work on the javascript objects, then some integration tests that use the images and exercise the whole stack.  I think my technique is similar to what you recommend, except that I'm not yet using mocking/stubbing.\n. Duplicates my own question! (#109)\n. Hmm ok.  I've attached a screenshot of my console output which shows that it keeps running after the first failing spec.  I've tried config.fail_fast=true in the config file, and I've tried using -F and --fail-fast=true` on the command line.  No luck.  In fact it is not even preventing follow-on suites from running.\nI'm using Jasmine 1.3.1.  Could that be the issue??  (also using: teaspoon 0.9.1, ubuntu 14.04, guard 2.6.1, spring 1.1.3, ruby 2.2.1)\n\n. Well - it seems to behave the same way, whether run from Guard or from the command line.\nI have come up with a hack that solves my problem - I filter the teaspoon output.  FYI here is the script...\n``` ruby\n!/usr/bin/env ruby\nThis script removes unwanted teaspoon text\nRead from stdin: teaspoon | filter_teaspoon_output\nSHOW_PATTERNS = [      # switch to 'show' mode when a pattern is detected\n  \"^Teaspoon\",\n  \"^Finished\"\n]\nHIDE_PATTERNS = [      # skip printing if these patterns are detected\n  \"^Starting\" , \n  \"^Puma\"     , \n  \"^\\*\"      , \n  \"^  2\\)\"   ,\n  \"^Failed examples:\"\n]\ndef set_mode(string, mode)\n  return :show if SHOW_PATTERNS.find {|reg| string =~ Regexp.new(reg)} \n  return :hide if HIDE_PATTERNS.find {|reg| string =~ Regexp.new(reg)} \n  mode\nend\nbuffer = \"\"\nmode   = :show\nwhile buffer = STDIN.gets do\n  mode = set_mode(buffer, mode)\n  print buffer if mode == :show\n  STDOUT.flush\n  buffer = \"\"\nend\n```\n. ",
    "jdickey": "(giggle)\nGoogle has been a potent antidote to \"young and innocent\" for years now. Most browsers nowadays have a 'parental advisory' filter\u2026\n\u2026and I love the should-be-the-logo photo.\n. Oops\u2026 you stare at something for an hour and you see what you expect to see, not what's actually there. This job is getting to me.\nSorry, guys.\n. (giggle)\nGoogle has been a potent antidote to \"young and innocent\" for years now. Most browsers nowadays have a 'parental advisory' filter\u2026\n\u2026and I love the should-be-the-logo photo.\n. Oops\u2026 you stare at something for an hour and you see what you expect to see, not what's actually there. This job is getting to me.\nSorry, guys.\n. ",
    "jabr": "Maybe \"tea-packet\" would work as a compromise?\n. Odd. The tests all pass locally, but I'll see if I can sort it out.\n. That fixed the server-related spec failure. The html reporter spec is still failing, but I'm not seeing how it could be related to my change.\n. I'm seeing the same problems with the current teaspoon master. The only thing that works for me is to use spring teaspoon. The current guard-teaspoon doesn't work, either, even with a cmd: 'spring teaspoon' option.\n. Maybe \"tea-packet\" would work as a compromise?\n. Odd. The tests all pass locally, but I'll see if I can sort it out.\n. That fixed the server-related spec failure. The html reporter spec is still failing, but I'm not seeing how it could be related to my change.\n. I'm seeing the same problems with the current teaspoon master. The only thing that works for me is to use spring teaspoon. The current guard-teaspoon doesn't work, either, even with a cmd: 'spring teaspoon' option.\n. ",
    "bigtunacan": "Heh; didn't see there was already an issue related to this when I opened the other.  I mentioned it because it really turned into a huge issue over on the Testacular (now Karma) project.  Personally, I didn't pick up on the inference on that project until seeing it was an issue.  Instead I just naturally thought Tests + Spectacular.  Many people were very upset by the name however; several women developers found it offensive.  Some people even went so far as to say they were not able to use the project due to the issue with the naming.\nThe flip-side of that name connection; when I saw the name of this project I realized it was innocent, but I still couldn't help but chuckle a little because of the quite obvious slang usage of teabag within Americanized English.\n. My last comment was quite harsh and lewd, but it was to make it quite explicit what people think when they see the name of this project.  I went ahead and deleted the post, because the point was not to \"get my rocks off\" as you put it, but for you to really realize the offensive nature of the project name.\nUnfortunately, it does not matter what the intent of the name was; it is an offensive term.  Like I said in my original post that was quite complimentary; this looks like a great project.  I found this project while doing a comparison of available tools in this space for my workplace so I could make a recommendation as to what tool to use.  In the list I will present of options, this project won't be included. The reason is not because the people I work with \"can't behave like grown ups\"; it is because we do not want to alienate women in the tech work force or offend them.  I work in a very diverse workplace where we respect each other and we don't want to do things that could knowingly offend.\n. The problem is that whether you intend to offend or alienate people, or your intentions are quite innocent, it will still happen.  Again, in my very first post related to this issue I said that I personally did not believe you intended to offend.  It is quite sad though that you instantly made the opposite and worst assumptions about me based on my post to you.  My post was to make sure you actually knew what the term meant; as it was possible you were unaware.  I have no idea of your nationality or awareness of certain American slang terminology.  To give you a better idea though; maybe you should take the time to visit the link to the discussion that surrounded the original name of the Karma (formerly Testacular) project, as it does better justice and discussion for why you might consider a name change.\nhttps://github.com/karma-runner/karma/issues/376?source=c\n. Wow, this is just sad.  I was suggesting you name it anything other than Teabag.  Quite frankly I liked the former comment to possibly call it Kettle.  Similar reference to Tea, with a tie back to Jasmine as you had originally intended.  The link to the thread on Karma, was to show some very good arguments as relates to alienating women in tech culture, whether intentionally or unintentionally.  \nAlso, your post saying my username is offensive is quite the stretch.  Your urban dictionary link to that shows 2 thumbs up from people agreeing with that definition.  My username is actually a reference to the fact that I frequently eat large cans of Starkist tuna.  Not only that; my username will not be used as a \"project\" within teams.  If however anyone that I were to work with found it offensive I wouldn't hesitate to change it.\nThis is unlike the almost 8000 up votes on urban dictionary for teabag found here http://www.urbandictionary.com/define.php?term=teabag.\nFurther this term is also available on the much more authoritative Wikipedia as well.\nhttp://en.wikipedia.org/wiki/Tea_bag_%28disambiguation%29\nIt makes it all the more disturbing and off putting that not only is teabag a highly offensive and suggestive term, but one that is often used to imply an act of non consent on an unconscious person, thus implying a form of rape.\n. I agree it is revealing of my character; just not in the light you are trying to put it.  As I said before; I wanted to make sure that you understood what the term means, but I didn't want to put it on display to offend everyone that comes along later.  But by all means; show your upstanding character by adding it right back in for everyone to see.  It doesn't surprise me that someone that thinks it is ok to name their project Teabag also thinks it is ok to just leave that posted on here as well :)\nOriginally I made the assumption that you were somehow unaware of what teabag meant, now I would say you knew from the beginning and you really just don't care how many people it offends.  So good luck with that.\n. @jejacks0n, reread my comments from earlier.  I said in an earlier post that I liked the Kettle name that was suggested.  \nI don't really care what you name the project overall.  The name you suggested, Steap, that also is a great option.  Both of those maintain an association to Jasmine by way of having a relation to preparing tea.  And both are non-offensive.  Either is an equally good option.\n. @jedschneider \nI agree that there improvements to be made in all areas of diversity.  Also, just to be clear, I am not personally offended by the name of this project.  \nI do however try to be aware of what may considered offensive to co-workers; regardless of the race, gender, sexual orientation, age, or any other differences that sets them apart.  Due to that and things I have seen offend others, within the work place (some of which surprised me; others where it where I was not at all surprised they took offense), I try to be aware and sensitive to how my co-workers may take things. \nI was very complimentary of the project that you have here with my original post.  I'm sure some hard work has gone into it; and it really does look like a great project.  If I had come across the project and thought it was garbage that no one would want to use; I would have moved on and not posted anything.  As I stated earlier, I have to take a pass on using this project personally within the workplace; and I will not be the only that ends up doing that.  I personally just hate to see that decision being made for what is social/cultural reasons as opposed to what should be the real issue, technical reasons.\nMy post earlier, which @jejacks0n took offense too, just stated what is one quite well known definition of the name of this project.  A definition that is going to turn up in Google search certainly ahead of this project, as mentioned by the user that originally opened this thread.  Yet when I posted the definition directly on the thread he took offense to the extent that he then reported my post to Github, and made erroneous claims to why I posted it.  The point there was certainly to offend, but also to enlighten, albeit through shock value.  To say, \"Look here does this offend even you?\"  Which it certainly did offend him; and that is the very definition and act that some people are going to call to mind, regardless of gender, race, or sexual orientation.  Some of those people will be offended, some will not.  It is your project; do what you think is best.\n. Teaspoon is a great name.  Looks like the existing gem with that name has not been updated in a long time either.  \nI think the urban dictionary up votes does give some metric to how innocent/offensive a term may be, but that that Google SEO metric is even far more important.  A quick Google of Teaspoon in fact turns up, quite innocently enough, teaspoons.\n. @jejacks0n Will do.\n. @jejacks0n I've opened a line of discussion with the author of the current teaspoon gem.\nhttps://github.com/mintdigital/teaspoon/issues/2\nI will follow up with him in a few days if there is no response.\nThanks.\n. @jejacks0n The Teaspoon name is now available on RubyGems.\n. @jejacks0n I'll leave it to you to register under the new gem name on RubyGems to make sure you maintain control over that.  I can update the readme and source to reference the new name and issue a pull request for that if you want.\n. @jejacks0n @monkseal sorry for the delay, I was out of town for a week at the O'Reilly Fluent Conference for a week, and then one of our top developers quit so things have been hectic the last couple of weeks.\nI stayed up tonight to get this updated and just finished issuing a pull request.\nI'll start looking at the guard-teabag project tomorrow night.\nhttps://github.com/modeset/teabag/pull/76\n. @andyl It sucks that you lost time on your project due to something like this.  \nI strongly suggested a name change, not \"demanded\", due to seeing a very similar problem come up on the Testacular (now Karma) project.  A project that I personally use.  As the project became more and more popular; the name became a larger and larger issue.  I stayed out of the conversation on that project as I did not care; I felt it was a non-issue.  The same as many people feel about this project as well.  But eventually it was a big enough issue that it could no longer be ignored, especially considering how some people reflected on it so poorly.  At that point, close to 2000 of us were impacted; I was one of them.  Right now; this project has only a few hundred users; it is better now than later.\nI also love how your \"When I google the term\" link is instead a direct link to a not all that popular Urban Dictionary definition, that is actually a variation, rather than the same exact term.  When in fact actually googling bigtunacan will just return results about me for at least the first 4 pages... or even googling big tuna can returns results related to actual cans of tuna, or results related to the size of the fish, etc...\nAs I said previously I was not personally offended by the name of the project before; but the name, without a doubt has a connotation to it.  In an industry where women often feel alienated; I would think we would want to help that out.  As a father of 2 girls; one who already at only age 9 tells me \"programming is for boys\" and a person that just as a rule doesn't go around offending other people without cause I was honestly quite shocked by the sheer outrage and vitriol that so many doled out over me suggesting a name change for this.\nNext time I will just pass on by the project without saying anything; and everyone else can just happily enjoy their righteous indignation that anyone could ever be offended by anything they were ever to say.  And I will tell my daughters, \"You are right; you are bested served to find a career outside of programming.  Somewhere you can be treated as an equal and with respect.  Somewhere that 90 minutes of @andyl's time is not more important than not having to put up with sexual innuendo and intolerance in the work place.\"\n. @monkseal I agree you have been supportive, and also that I wasn't even the one who opened this issue in the first place!  Unfortunately though where there have been personal attacks on this issue; like with @andyl's post; they have all been directed at me.  \nI also feel like by putting in the time to make the updates myself, rather than just complaining and then leaving; I put my \"money where my mouth is\" to show that if I believe something is good I'm willing to step up and make the change and not expect someone else to invest their time to make me happy when they may or may not agree with my perspective.\n. Heh; didn't see there was already an issue related to this when I opened the other.  I mentioned it because it really turned into a huge issue over on the Testacular (now Karma) project.  Personally, I didn't pick up on the inference on that project until seeing it was an issue.  Instead I just naturally thought Tests + Spectacular.  Many people were very upset by the name however; several women developers found it offensive.  Some people even went so far as to say they were not able to use the project due to the issue with the naming.\nThe flip-side of that name connection; when I saw the name of this project I realized it was innocent, but I still couldn't help but chuckle a little because of the quite obvious slang usage of teabag within Americanized English.\n. My last comment was quite harsh and lewd, but it was to make it quite explicit what people think when they see the name of this project.  I went ahead and deleted the post, because the point was not to \"get my rocks off\" as you put it, but for you to really realize the offensive nature of the project name.\nUnfortunately, it does not matter what the intent of the name was; it is an offensive term.  Like I said in my original post that was quite complimentary; this looks like a great project.  I found this project while doing a comparison of available tools in this space for my workplace so I could make a recommendation as to what tool to use.  In the list I will present of options, this project won't be included. The reason is not because the people I work with \"can't behave like grown ups\"; it is because we do not want to alienate women in the tech work force or offend them.  I work in a very diverse workplace where we respect each other and we don't want to do things that could knowingly offend.\n. The problem is that whether you intend to offend or alienate people, or your intentions are quite innocent, it will still happen.  Again, in my very first post related to this issue I said that I personally did not believe you intended to offend.  It is quite sad though that you instantly made the opposite and worst assumptions about me based on my post to you.  My post was to make sure you actually knew what the term meant; as it was possible you were unaware.  I have no idea of your nationality or awareness of certain American slang terminology.  To give you a better idea though; maybe you should take the time to visit the link to the discussion that surrounded the original name of the Karma (formerly Testacular) project, as it does better justice and discussion for why you might consider a name change.\nhttps://github.com/karma-runner/karma/issues/376?source=c\n. Wow, this is just sad.  I was suggesting you name it anything other than Teabag.  Quite frankly I liked the former comment to possibly call it Kettle.  Similar reference to Tea, with a tie back to Jasmine as you had originally intended.  The link to the thread on Karma, was to show some very good arguments as relates to alienating women in tech culture, whether intentionally or unintentionally.  \nAlso, your post saying my username is offensive is quite the stretch.  Your urban dictionary link to that shows 2 thumbs up from people agreeing with that definition.  My username is actually a reference to the fact that I frequently eat large cans of Starkist tuna.  Not only that; my username will not be used as a \"project\" within teams.  If however anyone that I were to work with found it offensive I wouldn't hesitate to change it.\nThis is unlike the almost 8000 up votes on urban dictionary for teabag found here http://www.urbandictionary.com/define.php?term=teabag.\nFurther this term is also available on the much more authoritative Wikipedia as well.\nhttp://en.wikipedia.org/wiki/Tea_bag_%28disambiguation%29\nIt makes it all the more disturbing and off putting that not only is teabag a highly offensive and suggestive term, but one that is often used to imply an act of non consent on an unconscious person, thus implying a form of rape.\n. I agree it is revealing of my character; just not in the light you are trying to put it.  As I said before; I wanted to make sure that you understood what the term means, but I didn't want to put it on display to offend everyone that comes along later.  But by all means; show your upstanding character by adding it right back in for everyone to see.  It doesn't surprise me that someone that thinks it is ok to name their project Teabag also thinks it is ok to just leave that posted on here as well :)\nOriginally I made the assumption that you were somehow unaware of what teabag meant, now I would say you knew from the beginning and you really just don't care how many people it offends.  So good luck with that.\n. @jejacks0n, reread my comments from earlier.  I said in an earlier post that I liked the Kettle name that was suggested.  \nI don't really care what you name the project overall.  The name you suggested, Steap, that also is a great option.  Both of those maintain an association to Jasmine by way of having a relation to preparing tea.  And both are non-offensive.  Either is an equally good option.\n. @jedschneider \nI agree that there improvements to be made in all areas of diversity.  Also, just to be clear, I am not personally offended by the name of this project.  \nI do however try to be aware of what may considered offensive to co-workers; regardless of the race, gender, sexual orientation, age, or any other differences that sets them apart.  Due to that and things I have seen offend others, within the work place (some of which surprised me; others where it where I was not at all surprised they took offense), I try to be aware and sensitive to how my co-workers may take things. \nI was very complimentary of the project that you have here with my original post.  I'm sure some hard work has gone into it; and it really does look like a great project.  If I had come across the project and thought it was garbage that no one would want to use; I would have moved on and not posted anything.  As I stated earlier, I have to take a pass on using this project personally within the workplace; and I will not be the only that ends up doing that.  I personally just hate to see that decision being made for what is social/cultural reasons as opposed to what should be the real issue, technical reasons.\nMy post earlier, which @jejacks0n took offense too, just stated what is one quite well known definition of the name of this project.  A definition that is going to turn up in Google search certainly ahead of this project, as mentioned by the user that originally opened this thread.  Yet when I posted the definition directly on the thread he took offense to the extent that he then reported my post to Github, and made erroneous claims to why I posted it.  The point there was certainly to offend, but also to enlighten, albeit through shock value.  To say, \"Look here does this offend even you?\"  Which it certainly did offend him; and that is the very definition and act that some people are going to call to mind, regardless of gender, race, or sexual orientation.  Some of those people will be offended, some will not.  It is your project; do what you think is best.\n. Teaspoon is a great name.  Looks like the existing gem with that name has not been updated in a long time either.  \nI think the urban dictionary up votes does give some metric to how innocent/offensive a term may be, but that that Google SEO metric is even far more important.  A quick Google of Teaspoon in fact turns up, quite innocently enough, teaspoons.\n. @jejacks0n Will do.\n. @jejacks0n I've opened a line of discussion with the author of the current teaspoon gem.\nhttps://github.com/mintdigital/teaspoon/issues/2\nI will follow up with him in a few days if there is no response.\nThanks.\n. @jejacks0n The Teaspoon name is now available on RubyGems.\n. @jejacks0n I'll leave it to you to register under the new gem name on RubyGems to make sure you maintain control over that.  I can update the readme and source to reference the new name and issue a pull request for that if you want.\n. @jejacks0n @monkseal sorry for the delay, I was out of town for a week at the O'Reilly Fluent Conference for a week, and then one of our top developers quit so things have been hectic the last couple of weeks.\nI stayed up tonight to get this updated and just finished issuing a pull request.\nI'll start looking at the guard-teabag project tomorrow night.\nhttps://github.com/modeset/teabag/pull/76\n. @andyl It sucks that you lost time on your project due to something like this.  \nI strongly suggested a name change, not \"demanded\", due to seeing a very similar problem come up on the Testacular (now Karma) project.  A project that I personally use.  As the project became more and more popular; the name became a larger and larger issue.  I stayed out of the conversation on that project as I did not care; I felt it was a non-issue.  The same as many people feel about this project as well.  But eventually it was a big enough issue that it could no longer be ignored, especially considering how some people reflected on it so poorly.  At that point, close to 2000 of us were impacted; I was one of them.  Right now; this project has only a few hundred users; it is better now than later.\nI also love how your \"When I google the term\" link is instead a direct link to a not all that popular Urban Dictionary definition, that is actually a variation, rather than the same exact term.  When in fact actually googling bigtunacan will just return results about me for at least the first 4 pages... or even googling big tuna can returns results related to actual cans of tuna, or results related to the size of the fish, etc...\nAs I said previously I was not personally offended by the name of the project before; but the name, without a doubt has a connotation to it.  In an industry where women often feel alienated; I would think we would want to help that out.  As a father of 2 girls; one who already at only age 9 tells me \"programming is for boys\" and a person that just as a rule doesn't go around offending other people without cause I was honestly quite shocked by the sheer outrage and vitriol that so many doled out over me suggesting a name change for this.\nNext time I will just pass on by the project without saying anything; and everyone else can just happily enjoy their righteous indignation that anyone could ever be offended by anything they were ever to say.  And I will tell my daughters, \"You are right; you are bested served to find a career outside of programming.  Somewhere you can be treated as an equal and with respect.  Somewhere that 90 minutes of @andyl's time is not more important than not having to put up with sexual innuendo and intolerance in the work place.\"\n. @monkseal I agree you have been supportive, and also that I wasn't even the one who opened this issue in the first place!  Unfortunately though where there have been personal attacks on this issue; like with @andyl's post; they have all been directed at me.  \nI also feel like by putting in the time to make the updates myself, rather than just complaining and then leaving; I put my \"money where my mouth is\" to show that if I believe something is good I'm willing to step up and make the change and not expect someone else to invest their time to make me happy when they may or may not agree with my perspective.\n. ",
    "monkseal": "I think the one that takes the cake for offensive names is Erector. If women in your company overhear you talking about that, you will definitely be in some trouble. However, Teabag is still a close second in my mind. \n. I vote 1 for the name change Steep. Or Kettle.\nIMHO, it's definitely worth it to Google the project name and see it has the hint of offensiveness to avoid this kind of problem..\nThis reminds me of the time that I explained Google images to my grandmother. \n\"Pick anything to search for\" I told her. \n\"What about a nice cream pie?\" She asked.\n\"Except that!\" I said\n. @davidallison I agree, Teaspoon is a great name. How did you come up with\nit?\n. @jejacks0n @bigtunacan any idea when this is happening? It will be nice to talk about this gem without having the women in our office roll their eyes...\n. @bigtunacan Per your comment:\n\"I was honestly quite shocked by the sheer outrage and vitriol that so many doled out over me suggesting a name change for this.\"\nI'd like to point out that it was actually @kenglishhi that first suggested the name change. And FWIW, we have been quite supportive of the suggestion of the name change...\n. I have a 10 year old niece and this weekend I asked her if she would like to do some Kids Ruby exercises with me. She said that was stupid and went back to playing \"Just Dance 4\" on the Wii. \nI should note that I think this problem is beyond the scope of the issue: \"Consider renaming the project?\" which has already been resolved. Perhaps we should open a separate issue somewhere else to deal with this.... :bowtie:\n. I think the one that takes the cake for offensive names is Erector. If women in your company overhear you talking about that, you will definitely be in some trouble. However, Teabag is still a close second in my mind. \n. I vote 1 for the name change Steep. Or Kettle.\nIMHO, it's definitely worth it to Google the project name and see it has the hint of offensiveness to avoid this kind of problem..\nThis reminds me of the time that I explained Google images to my grandmother. \n\"Pick anything to search for\" I told her. \n\"What about a nice cream pie?\" She asked.\n\"Except that!\" I said\n. @davidallison I agree, Teaspoon is a great name. How did you come up with\nit?\n. @jejacks0n @bigtunacan any idea when this is happening? It will be nice to talk about this gem without having the women in our office roll their eyes...\n. @bigtunacan Per your comment:\n\"I was honestly quite shocked by the sheer outrage and vitriol that so many doled out over me suggesting a name change for this.\"\nI'd like to point out that it was actually @kenglishhi that first suggested the name change. And FWIW, we have been quite supportive of the suggestion of the name change...\n. I have a 10 year old niece and this weekend I asked her if she would like to do some Kids Ruby exercises with me. She said that was stupid and went back to playing \"Just Dance 4\" on the Wii. \nI should note that I think this problem is beyond the scope of the issue: \"Consider renaming the project?\" which has already been resolved. Perhaps we should open a separate issue somewhere else to deal with this.... :bowtie:\n. ",
    "adityamenon": "I feel dirty for commenting here because I don't really use this project nor have I contributed it. But since github has no 'follow issue' feature, this will have to do.\n@jejacks0n, if you give in and decide to rename this project, it would be great if you make a comment here about it, so I would know. This way, I can ensure that I start a project called 'teabag' and though I'm not as great as you guys are, I'm sure I can build something semi-useful for the name.\nI don't understand exactly when our industry has become a perpetual party for hypersensitive nincompoops.\n. Hey guys, just wanted to say that, I now understand what people meant when they talk about 'offensive' project names. I was really combative at the beginning of this thread (and in this one: https://github.com/karma-runner/karma/issues/376), but I never had any experience working with a lot of women in person (being a loner freelancer).\nLast night I met a couple of ladies from Germany and while conversing about this pretentious book, the word \"circlejerk\" came automatically to my lips but I couldn't bring myself to utter it. A bunch of other really offensive reddit-origin words came too but the pressure on my lungs made it impossible to really say them.\nI now know what it must feel like to talk in front of women about projects like \"teabag\" or \"testacular\". I'd argue that one must have some knowledge of game culture to know what teabagging is, but hey we're working in software so that's almost a given.\nSo, yeah. Sorry about what I said.\n. I feel dirty for commenting here because I don't really use this project nor have I contributed it. But since github has no 'follow issue' feature, this will have to do.\n@jejacks0n, if you give in and decide to rename this project, it would be great if you make a comment here about it, so I would know. This way, I can ensure that I start a project called 'teabag' and though I'm not as great as you guys are, I'm sure I can build something semi-useful for the name.\nI don't understand exactly when our industry has become a perpetual party for hypersensitive nincompoops.\n. Hey guys, just wanted to say that, I now understand what people meant when they talk about 'offensive' project names. I was really combative at the beginning of this thread (and in this one: https://github.com/karma-runner/karma/issues/376), but I never had any experience working with a lot of women in person (being a loner freelancer).\nLast night I met a couple of ladies from Germany and while conversing about this pretentious book, the word \"circlejerk\" came automatically to my lips but I couldn't bring myself to utter it. A bunch of other really offensive reddit-origin words came too but the pressure on my lungs made it impossible to really say them.\nI now know what it must feel like to talk in front of women about projects like \"teabag\" or \"testacular\". I'd argue that one must have some knowledge of game culture to know what teabagging is, but hey we're working in software so that's almost a given.\nSo, yeah. Sorry about what I said.\n. ",
    "mwitek": "for what its worth I like the name. I think of JS as a cup of hot water, teabag (earl gray, english breakfast) makes that hot water much tastier.\nOn May 22, 2013, at 7:20 AM, Jed Schneider notifications@github.com wrote:\n\nI suggest 'JavaScript Test Runner, Enterprise Edition 3.0'. 3.0 is not the version number, just part of the name. Then we could have 'JavaScript Test Runner, Enterprise Edition 3.0 v0.1' That would be fun, and totally non-offensive to anyone. Also, there's no possibility that anyone will laugh when they see the name, nor remember it.\nOk, enough with the sarcasm.\nI find it interesting that @bigtunacan seems concerned about gender equality in the profession, and yet there is also need to improve cultural, racial, and LBT diversity as well. He probably realizes this but his cultural bias (and mine too because I am addressing him as a him) immediately makes it a gender issue for him. So I think its important to realize that just because one person sees something sexual in a name doesn't mean all do. I certainly can't speak for these communities but I think a potentially offensively named library, for a niche process where the only external presence is the name in a Gemfile, is really the smallest barrier to bringing true diversity to our development community.\nThese are just my personal comments, but since the project is under the modeset organization, I also think it is relevant to point out that out of 4 interns we currently have working with us, 3 are women. We have a paid staff of 8 people, so yes, the internship to employee ratio is 2:1. We support and host, in our office, code camps specifically organized for women, by women. Two of the 7 developers in house routinely teach development at a local college. These internships and sponsorships are not cheap, but they are very, very important. To this degree, I think the organization's actions speak louder than words when it comes to being inclusive, respectful, and actively working towards a greater future for our community.\n\u2014\nReply to this email directly or view it on GitHub.\n. lol,@monkseal good point :+1: to those names as well\n. for what its worth I like the name. I think of JS as a cup of hot water, teabag (earl gray, english breakfast) makes that hot water much tastier.\nOn May 22, 2013, at 7:20 AM, Jed Schneider notifications@github.com wrote:\nI suggest 'JavaScript Test Runner, Enterprise Edition 3.0'. 3.0 is not the version number, just part of the name. Then we could have 'JavaScript Test Runner, Enterprise Edition 3.0 v0.1' That would be fun, and totally non-offensive to anyone. Also, there's no possibility that anyone will laugh when they see the name, nor remember it.\nOk, enough with the sarcasm.\nI find it interesting that @bigtunacan seems concerned about gender equality in the profession, and yet there is also need to improve cultural, racial, and LBT diversity as well. He probably realizes this but his cultural bias (and mine too because I am addressing him as a him) immediately makes it a gender issue for him. So I think its important to realize that just because one person sees something sexual in a name doesn't mean all do. I certainly can't speak for these communities but I think a potentially offensively named library, for a niche process where the only external presence is the name in a Gemfile, is really the smallest barrier to bringing true diversity to our development community.\nThese are just my personal comments, but since the project is under the modeset organization, I also think it is relevant to point out that out of 4 interns we currently have working with us, 3 are women. We have a paid staff of 8 people, so yes, the internship to employee ratio is 2:1. We support and host, in our office, code camps specifically organized for women, by women. Two of the 7 developers in house routinely teach development at a local college. These internships and sponsorships are not cheap, but they are very, very important. To this degree, I think the organization's actions speak louder than words when it comes to being inclusive, respectful, and actively working towards a greater future for our community.\n\u2014\nReply to this email directly or view it on GitHub.\n. lol,@monkseal good point :+1: to those names as well\n. \n",
    "DavidAllison": "@jejacks0n It's too bad that there was a lot of negativity in this thread, but I think your comments were really quite reasonable. The name you suggested, Steep, seems like a great alternative name if you choose to rename the project. I think it's entirely up to you what you decide, and I wanted to thank you again for a great piece of software that you've contributed to the community.\n. I like teaspoon --\nOn May 22, 2013, at 12:52 PM, jejacks0n notifications@github.com wrote:\n\nSome alternatives provided today:\nBagOfTea (no urban dictionary entry, no gem with this name)\nTeasac/Teasack (no urban dictionary entry, no gem with this name)\nTeaball (urban dictionary entry, but as @bigtunacan claims the number of upvotes matters -- has 1 upvote, no gem with this name)\nTeaspoon (my personal favorite, has an urban dictionary definition, but again only a few upvotes, has a gem named this).\nAt this point Teaspoon is all I would accept, but we would need to try and acquire the name from: http://rubygems.org/gems/teaspoon\n\u2014\nReply to this email directly or view it on GitHub.\n. @jejacks0n It's too bad that there was a lot of negativity in this thread, but I think your comments were really quite reasonable. The name you suggested, Steep, seems like a great alternative name if you choose to rename the project. I think it's entirely up to you what you decide, and I wanted to thank you again for a great piece of software that you've contributed to the community.\n. I like teaspoon --\n\nOn May 22, 2013, at 12:52 PM, jejacks0n notifications@github.com wrote:\n\nSome alternatives provided today:\nBagOfTea (no urban dictionary entry, no gem with this name)\nTeasac/Teasack (no urban dictionary entry, no gem with this name)\nTeaball (urban dictionary entry, but as @bigtunacan claims the number of upvotes matters -- has 1 upvote, no gem with this name)\nTeaspoon (my personal favorite, has an urban dictionary definition, but again only a few upvotes, has a gem named this).\nAt this point Teaspoon is all I would accept, but we would need to try and acquire the name from: http://rubygems.org/gems/teaspoon\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "randallb": "So glad this is happening. :) Make the library even better.\n. OK. Now that everyone subscribed to this issue has seen both sides of the\nflamewar, I'd suggest this should end peacefully now, with the issue being\nclosed.\nSorry about your 90 minutes @andyl.\nOn Mon, Jun 24, 2013 at 9:25 AM, bigtunacan notifications@github.comwrote:\n\n@andyl https://github.com/andyl It sucks that you lost time on your\nproject due to something like this.\nI strongly suggested a name change, not \"demanded\", due to seeing a very\nsimilar problem come up on the Testacular (now Karma) project. A project\nthat I personally use. As the project became more and more popular; the\nname became a larger and larger issue. I stayed out of the conversation on\nthat project as I did not care; I felt it was a non-issue. The same as many\npeople feel about this project as well. But eventually it was a big enough\nissue that it could no longer be ignored, especially considering how some\npeople reflected on it so poorly. At that point, close to 2000 of us were\nimpacted; I was one of them. Right now; this project has only a few hundred\nusers; it is better now than later.\nI also love how your \"When I google the term\" link is instead a direct\nlink to a not all that popular Urban Dictionary definition, that is\nactually a variation, rather than the same exact term. When in fact\nactually googling bigtunacanhttps://www.google.com/search?q=bigtunacan&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a#client=firefox-a&hs=OS&rls=org.mozilla:en-US:official&q=bigtunacan&nfpr=1&sa=X&ei=6WnIUcSLLIuMrQHj4IHoDQ&ved=0CCwQvgUoAQ&bav=on.2,or.r_cp.r_qf.&bvm=bv.48293060,d.aWM&fp=6366f2f3fc068b5b&biw=2144&bih=1154will just return results about me for at least the first 4 pages... or even googling\nbig tuna canhttps://www.google.com/search?q=bigtunacan&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-areturns results related to actual cans of tuna, or results related to the\nsize of the fish, etc...\nAs I said previously I was not personally offended by the name of the\nproject before; but the name, without a doubt has a connotation to it. In\nan industry where women often feel alienated; I would think we would want\nto help that out. As a father of 2 girls; one who already at only age 9\ntells me \"programming is for boys\" and a person that just as a rule doesn't\ngo around offending other people without cause I was honestly quite shocked\nby the sheer outrage and vitriol that so many doled out over me suggesting\na name change for this.\nNext time I will just pass on by the project without saying anything; and\neveryone else can just happily enjoy their righteous indignation that\nanyone could ever be offended by anything they were ever to say. And I will\ntell my daughters, \"You are right; you are bested served to find a career\noutside of programming. Somewhere you can be treated as an equal and with\nrespect. Somewhere that 90 minutes of @andyl https://github.com/andyl's\ntime is not more important than not having to put up with sexual innuendo\nand intolerance in the work place.\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/issues/40#issuecomment-19918156\n.\n. I had previously tested factories in Jasmine, @megalithic do you think it makes sense to add that to the wiki? Or is it just clear enough without explanation?\n. OK. Once we get our env up and going, and I figure out fixtures, I'll throw it in there.\n. So glad this is happening. :) Make the library even better.\n. OK. Now that everyone subscribed to this issue has seen both sides of the\nflamewar, I'd suggest this should end peacefully now, with the issue being\nclosed.\n\nSorry about your 90 minutes @andyl.\nOn Mon, Jun 24, 2013 at 9:25 AM, bigtunacan notifications@github.comwrote:\n\n@andyl https://github.com/andyl It sucks that you lost time on your\nproject due to something like this.\nI strongly suggested a name change, not \"demanded\", due to seeing a very\nsimilar problem come up on the Testacular (now Karma) project. A project\nthat I personally use. As the project became more and more popular; the\nname became a larger and larger issue. I stayed out of the conversation on\nthat project as I did not care; I felt it was a non-issue. The same as many\npeople feel about this project as well. But eventually it was a big enough\nissue that it could no longer be ignored, especially considering how some\npeople reflected on it so poorly. At that point, close to 2000 of us were\nimpacted; I was one of them. Right now; this project has only a few hundred\nusers; it is better now than later.\nI also love how your \"When I google the term\" link is instead a direct\nlink to a not all that popular Urban Dictionary definition, that is\nactually a variation, rather than the same exact term. When in fact\nactually googling bigtunacanhttps://www.google.com/search?q=bigtunacan&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-a#client=firefox-a&hs=OS&rls=org.mozilla:en-US:official&q=bigtunacan&nfpr=1&sa=X&ei=6WnIUcSLLIuMrQHj4IHoDQ&ved=0CCwQvgUoAQ&bav=on.2,or.r_cp.r_qf.&bvm=bv.48293060,d.aWM&fp=6366f2f3fc068b5b&biw=2144&bih=1154will just return results about me for at least the first 4 pages... or even googling\nbig tuna canhttps://www.google.com/search?q=bigtunacan&ie=utf-8&oe=utf-8&aq=t&rls=org.mozilla:en-US:official&client=firefox-areturns results related to actual cans of tuna, or results related to the\nsize of the fish, etc...\nAs I said previously I was not personally offended by the name of the\nproject before; but the name, without a doubt has a connotation to it. In\nan industry where women often feel alienated; I would think we would want\nto help that out. As a father of 2 girls; one who already at only age 9\ntells me \"programming is for boys\" and a person that just as a rule doesn't\ngo around offending other people without cause I was honestly quite shocked\nby the sheer outrage and vitriol that so many doled out over me suggesting\na name change for this.\nNext time I will just pass on by the project without saying anything; and\neveryone else can just happily enjoy their righteous indignation that\nanyone could ever be offended by anything they were ever to say. And I will\ntell my daughters, \"You are right; you are bested served to find a career\noutside of programming. Somewhere you can be treated as an equal and with\nrespect. Somewhere that 90 minutes of @andyl https://github.com/andyl's\ntime is not more important than not having to put up with sexual innuendo\nand intolerance in the work place.\"\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/issues/40#issuecomment-19918156\n.\n. I had previously tested factories in Jasmine, @megalithic do you think it makes sense to add that to the wiki? Or is it just clear enough without explanation?\n. OK. Once we get our env up and going, and I figure out fixtures, I'll throw it in there.\n. \n",
    "kenglishhi": "@bigtunacan the women in @monkseal's office counting on you to make this project less offensive...\nFWIW, Teabag does work really. \n. @bigtunacan the women in @monkseal's office counting on you to make this project less offensive...\nFWIW, Teabag does work really. \n. ",
    "ptb": "One more: the github description still has \"Teabag\".  Fantastic project -- thanks so much guys.\n. I removed the jasmine gem from the Gemfile, and changed the gem teabag line to:\nruby\ngem 'teabag', github: 'modeset/teabag'\nand my test file to:\ncoffee\ndefine ['calculator'], (calc) ->\n  describe 'Calculator', ->\n    it 'should add two digits', ->\n      expect(calc.add(4,4)).toBe(8)\nAnd the test passes now! Thank you so much.\n. One more: the github description still has \"Teabag\".  Fantastic project -- thanks so much guys.\n. I removed the jasmine gem from the Gemfile, and changed the gem teabag line to:\nruby\ngem 'teabag', github: 'modeset/teabag'\nand my test file to:\ncoffee\ndefine ['calculator'], (calc) ->\n  describe 'Calculator', ->\n    it 'should add two digits', ->\n      expect(calc.add(4,4)).toBe(8)\nAnd the test passes now! Thank you so much.\n. ",
    "turadg": "@jejacks0n :+1: to the old name being fine. For me it conjured an image of a bag of tea. It's unfortunate that Urban Dictionary has the top google result for the prior name.\nI am slightly irked to have to edit my project to accommodate the change, but I recognize that the new name will save some awkward moments for people who recommend the project to others.\n. @jejacks0n :+1: to the old name being fine. For me it conjured an image of a bag of tea. It's unfortunate that Urban Dictionary has the top google result for the prior name.\nI am slightly irked to have to edit my project to accommodate the change, but I recognize that the new name will save some awkward moments for people who recommend the project to others.\n. ",
    "mikepack": "Can we please reopen this issue? I'm proposing we change the name back to Teabag.\n. @mcasimir can you provide a stack trace pointing back to Teaspoon? Also, what version of Teaspoon are you running?\n. I didn't realize you were running IE8 tests from the CLI. I think what's happening here is that Teaspoon attempts to console.log, it fails, and Teaspoon throws an exception. IIRC, IE8 just stops executing all future JS after encountering an exception. This seems like the offending lines:\ncoffeescript\ntry console.log(arguments...)\ncatch e\n  throw new Error(\"Unable to use console.log for logging\")\nI would imagine the error being thrown is because it's fatal in most browsers not to have console.log when running on the CLI, but this is not the case with Selenium-driven browsers.\n@jejacks0n do you think failing silently here would cause us other headaches? eg:\ncoffeescript\nconsole?.log?(arguments...)\n. Except for Selenium, which polls for Teaspoon.getMessages(), no? Doesn't seem like a need for console.log there.\n. The same logging mechanism is used for both console-based and non-console-based drivers:\ncoffeescript\n@log: ->\n  Teaspoon.messages.push(arguments[0])\n  try console.log(arguments...)\n  catch e\n    throw new Error(\"Unable to use console.log for logging\")\nIf the driver is fetching the messages, like Selenium or CapybaraWebkit, it calls:\ncoffeescript\n@getMessages: ->\n  messages = Teaspoon.messages\n  Teaspoon.messages = []\n  messages\nperiodically via:\ncoffeescript\nTeaspoon.getMessages();\nIf the driver is listening for console.log, it never calls Teaspoon.getMessages(). So message polling drivers effectively don't need console.log at all, so it seems safe to fail silently instead of throw an exception.\n. I will apply a fix and it will need to go through the release process. What you have is what @jejacks0n suggested higher up in this thread. Seems like the only intermediary fix for right now.\n. Closing. On the roadmap for 1.0. Would gladly accept a PR.\n. 1.0 has been released and support for Jasmine 2 has been added.\n. @jejacks0n should we take a stab at this pre 1.0? What was holding it up before?\n. Going to close this. After some thought, we won't be able to support support Middleman, Sinatra or any Rails-less environment until we do some major refactoring to pull Rails out of Teaspoon, which is non-trivial. This will eventually happen, but not for the foreseeable future.\n. Jasmine 2 support is in Teaspoon 1.0.\n. Closing. Addressed in #316.\n. Thanks for the notice. Going to close this as it's an issue with Chai. In future versions of Teaspoon, we'll allow multiple versions of libraries, so upgrading Teaspoon won't force your hand in upgrading assertion libraries. You can, of course, put any version of Chai in your project's vendor/assets and require them in your spec_helper.coffee.\n. We don't have any immediate plans to work on this, but would gladly accept a PR.\n. Closing. Would happily accept a PR or jsbin reproducing the problem.\n. Documented in #314 \n. Closing this out and carrying the discussion over at #296 \n. You can currently accomplish this by specifying the server_port:\n$ teaspoon --server-port 3000\nOr in teaspoon_env.rb:\nruby\nconfig.server_port = 3000\n. Closing and moving discussion to #318\n. This override wouldn't affect the browser runner? I would suspect putting this in a .env would have it affect all uses of Teaspoon.\n. Worth noting: QUnit produces decent error messages in other cases, just not with #equal.\n. @jejacks0n tests added\n. @chancancode not a problem, thanks for all your work on this. We'll be releasing 0.9 soon, and this change will go out with that release.\n. @bramski we'll be releasing either today or tomorrow.\n. Going to merge this and clean it up in master so I'm not blocking you.\n. :+1:\n. @jejacks0n feel free to merge this. I'm going to spend some time today on getting j2 merged.\n. @jejacks0n I'm very unfamiliar with this part of the codebase. We should stay away from a current_suite, IMO. What prevents us from calling Teaspoon.coverage_configs? Is it that we need to know what coverage config is being used (eg default or CI)?\n. @davestevens thanks to this PR, we've had some discussions internally and have plans to rework the coverage configuration for our 1.0 release (#308). We're thinking of removing all coverage options at the suite level, ie. moving the no_coverage to the coverage block.\nGoing to close this PR. Happy to reopen if you want to take a stab at getting this into the coverage block. Otherwise, we'll address it in the not-so-distant future.\n. You have most of the ruby side done, right? I'm getting to the point where I need to register the framework in JS. I'm wondering if we should keep it super simple:\nOn boot (initialize.coffee), the framework registers itself with core via something like:\njs\nTeaspoon.framework = Teaspoon.Jasmine2\nCore would then assume a conventional structure for the framework, so:\njs\nreporter = Teaspoon.framework.Console\nand eg:\ncoffeescript\nif Teaspoon.framework.Reporters?.HTML?.SpecView\n  @reportView = new Teaspoon.framework.Reporters.HTML.SpecView(spec, @)\nelse\n  @reportView = new Teaspoon.Reporters.HTML.SpecView(spec, @)\nThe alternative seems way more complicated where each class type of registered with core or core provides a series of hooks for all situations where a framework might override a default.\nThoughts?\n. What would the API look like when we want to raise a custom exception?\n. :+1: \n. Cool, thanks for the quick review. I'll hold off or I can branch off your branch. Cool to merge this though?\n. Got it. I'm happy to review #321 as soon as you feel comfortable or just ping me if you want any input/help.\n. Fixed on master. Can you give it a try? Details on how to use master can be found here: https://github.com/modeset/teaspoon#status\n. Have you considered using appraisal to handle the Gemfile creation?\nFYI: I foresee this conflicting with @jejacks0n WIP branch: https://github.com/modeset/teaspoon/pulls\n. Hey @thejamespinto. I'm going to close this for now. I've added an issue (#348) that we will eventually get to once things have stabilized a bit more (read: post-1.0 release).\nYour contribution is hugely appreciated, and we'll probably reference this PR when we work this into the codebase. :heart: :heart: :heart:\n. This is a known problem in Mocha: https://github.com/mochajs/mocha/issues/553\n. Word. I'll change that and merge.\n. It sounds like you really hate it, so I'm going to remove it and never do it in the future. :trollface: \n. FYI, couldn't completely remove class << self as it's the only want to define an attr_accessor on a module.\n. Addressed here: 1f204b638a432189ca25349bd4a8b097288c0a34\n. @sp1117 you're using quite an old version of Teaspoon (0.7.9). Can you please try upgrading? There are some upgrade notes in the README: https://github.com/modeset/teaspoon#upgrading\nClosing this for now, will happily reopen if you're still experiencing issues after upgrading.\n. I don't believe so. @jejacks0n are you aware of anything?\n. Nope.\n. Hi Arin. My gut tells me it is not Teaspoon that is causing the random failures, but the tests within your application. If Teaspoon reported a failure and you're seeing a failure in your suite, Teaspoon has done its job at that point and the test is truly failing. If you're seeing a dropped or missing test, then it could be Teaspoon.\nRandom failures are often due to the order in which the tests run. When trying to debug them, I usually look for some global state that could be corrupt when the tests run in a specific order. Things like storing data on classes instead of instances, or on the prototype that is shared between objects, or some underlying persistent store, like Local Storage.\nCan you confirm that you are seeing a test failure and not a dropped test? Are other tests passing?\n. Closing. Will happily reopen if you can provide some insight as to whether the tests are truly dropped or just failing.\n. What is the actual JavaScript file that can't be loaded (in place of blah/Blah)? Is it a teaspoon requirement or one of your app's requirements?\n. Going to close this. Will happily reopen if you can provide more insight into the actual file names.\n. The file names are important so I can distinguish whether your setup is having trouble loading a teaspoon JS file or your application's JS file.\nCan you paste the portion of your code that requires blah/Blah.js?\n. I'd actually like to see if we can determine a routing error without depending on the name of the action. I'll do some poking around and let you know what I come up with.\n. @ahorner what version of Rails are you on?\n. @ahorner I'm having a hard time reproducing. Specifically, app.routes.recognize_path(mount_at) always throws an exception for me, so there is never a check against the :action.\nMaybe you can fill in some details. What is special about your usage of Teaspoon or your app's configuration or routes? Can you paste applicable code from your app here?\n. Related: #191 \n. So, I have a test app that is running Rails 4.2.1 and Teaspoon 0.9.1. I have this as the last route in my routes.rb:\nruby\nget '*path', to: \"errors#not_found\"\nWhen I debug into the suspect line, app.routes.recognize_path(mount_at), it always throws an exception.\nWhat could be differing? Are you able to reproduce this in an entirely new app?\n. No problem. I appreciate your time trying to track this down!\n. Hey @ahorner, I'm going to close this issue for now. Happy to reopen if you find anything on your end.\n. If you're running Teaspoon >= 0.9, you can use the expand_assets suite configuration to speed things up. The downside is it makes code harder to debug as the stack traces all point to one monolithic file.\nhttps://github.com/modeset/teaspoon/wiki/Teaspoon-Configuration#suite-configuration-directives\n. Because Teaspoon runs in the development Rails environment, and we want to provide a consistent experience regardless of whether the host app's config.assets.debug is set to true or false.\n. I'm not very familiar with Knockout, but Teaspoon should be cleaning up the fixtures between test runs. Can you paste the test that uses fixtures here? If you're able, it would be extremely helpful if you could create a test app with just Teaspoon, Knockout, and a test that represents the problem you're seeing.\nMaybe @jejacks0n has some insight?\n. It might be worthwhile to try to clean up the fixtures manually. You can call fixture.cleanup(), but Teaspoon should do this for you automatically. Worth a shot.\n. @davestevens Teaspoon 1.0 (unreleased) should fix your issue with RequireJS #322\n. No bother. I like being employed :)\nTeaspoon requires the framework libraries to provide a consistent experience for people at any level. For the conventional cases, Teaspoon requiring the framework makes it easier to get started, makes Teaspoon core simpler and more performant, and fails faster when things are misconfigured. I agree it would be more transparent if they were required from spec_helper, though.\n:beers: \n. Coverage is not recognized because _helper is included in coverage.ignore by default, and application (and everything else) gets required from there.\nInstrumentation is still not added because the logic here is not correct. If expand_assets is turned on, instrument=1 is never added to any file. Should probably be something more like:\n``` ruby\nunless asset && asset.respond_to?(:logical_path)\n  return source.blank? ? nil : source\nend\nif config.expand_assets\n  asset.to_a.map { |a| asset_url(a) }\nelse\n  asset_url(asset)\nend\n``\n. Fixed in 1fdfaae3c8a85d3b65c1895147d5a38ecefd6cdd\n. Excellent! 1.0.1 should be on RubyGems now.\n. I've updated the recommended polyfill to usephantomjs-shims.js. After reviewing the differences, the code looks a bit more robust. Teaspoon won't ship withphantomjs-shims.jsuntil a new version is cut, but you can use it now by adding it to your project manually (which it sounds like you're already doing).\n. Thanks for taking the time to review 1.x :smiley: \n. Version 1.0.2 should fix this. Run a bundle update.\n. @jejacks0n can I get some :eyes: on this?\n. There are very few differences between the two. What are the commands you're running and what are the failures?\n. What type of output are you looking for? You can runteaspoon --format documentation` to output your spec details, but I assume that's not what you're looking for.\n. I've never used Magic Lamp but if you can create an app that reproduces the problem I'll happily take a look.\n. The word \"framework\" should be replaced with the name of the testing framework you're using. From the changelog, check the second line:\nChange your Gemfile to use \"teaspoon-framework\" instead of \"teaspoon\".\neg: If you are using Mocha, this would be gem 'teaspoon-mocha'\n. The available gems are teaspoon-jasmine, teaspoon-mocha and teaspoon-qunit.\n. Thanks so much! Sorry for the delay \ud83c\udf7b\ud83d\ude4c\ud83c\udf89\n. Correct. It also checks for checks in test/javascripts. This is configurable via asset_paths (see the config options)\nIf you want to specify where to find teaspoon_env.rb, you can use the TEASPOON_ENV environment variable, eg:\nbash\nTEASPOON_ENV=jstests/teaspoon_env.rb teaspoon\n. For test dependencies, I'd recommend you put them in your Gemfile. Bundler doesn't have great integration for gemspec dev dependencies. In other words, dev deps aren't loaded when you run bundle exec.\n. To answer your question about testing Rails engines, yes. You'll also want to adjust your config.root to point to your engine's root.\n. @jejacks0n looks current.\n. Take a look at the next line in the changelog that indicates that you need to use teaspoon-jasmine, teaspoon-mocha or teaspoon-qunit. Substitute the word \"framework\" in that sentence for the framework you're using.\n. Dig it. I wouldn't mind an updated look. @jejacks0n, what do you think?\n. Going to close for now, but would love to see progress on this in the form of a PR.\n. I like the changing favicon idea. Can we use the svgs we have to create the icons?\n. If you could look into that, it would be awesome. You seem to have a strong grasp on how to accomplish it.\n. Thanks for the report @crgee. I've pushed a fix up to master to solve this. It will go out with the 1.0.3 release (no date set yet). In the meantime, you can point your Gemfile at master.\n. I don't think there's a good way around this other than restructuring the markup you're returning. Even innerHTML suffers from this problem.\n. @drogar, if you have jQuery in your project (Teaspoon doesn't ship with it), this should work for you once #389 lands.\n. In what version did we have a server_host config? I can't find it looking all the way back to 0.5. Also, what's your use case? The booted server is for headless testing, but are you using it for something other than that?\n. I've opened #389 to fix this, but it will only work if the host project uses jQuery. Teaspoon does not ship with jQuery and therefor cannot rely on it. Thank you for the succinct solution!\n. @jejacks0n :eyes: :pray:\n. Yeah, I'm struggling with that as well. It seems like a bad way of using fixtures, unless I'm misunderstanding the use case. Pulling JS down through a fixture seems poor for performance (because of script download/parse blocking), in the case of #387. Testing just the contents of an invalid element, without caring about the surrounding elements that make it valid, also seems like a bad idea and the tests should be moved to a higher level where it's tested against something valid, in the case of #382.\n\u00af\\_(\u30c4)_/\u00af\n. I see you're using capybara webkit and you may have run into this now-resolved issue: #403. Could you point your Gemfile at teaspoon master and see if it's fixed?\nruby\ngem 'teaspoon', github: 'modeset/teaspoon'\ngem 'teaspoon-qunit'\ngem 'capybara-webkit'\n. Closing but will reopen if #403 does not fix the issue.\n. @jejacks0n seems reasonable as a config, even with full documentation. Though as a config it should be an array of regexes instead of a single regex with ors. Why's it feel dirty?\n. @plongyear I'd say it's probably best to point your Gemfile at your fork until we're able to address this correctly.\n. Did you require it after requiring chai? I just set up a new app with chai-datetime, and it worked. I did nothing more than add the chai-datetime library to spec/javascripts/support, and put //=require support/chai-datetime in spec_helper.js, right below //=require support/chai-datetime.\n. Thanks a ton for submitting this issue, Jason. It should be resolved on master and will go out with the next release.\n. Good catch, and sorry about the yak shaving. Programming, right?\nI don't think it would be wise to straight remove the alias, as this would introduce a breaking change. We should define use_framework=, provide the correct functionality, and deprecate the method.\n. Thanks. We try to isolate deprecations here via monkey patching. It seems like you could remove the alias, and define the method there.\n. Seems reasonable to keep this open for now and just push changes to this PR.\n. Damn, that Aruba upgrade was painful.\nThanks so much for this high quality PR :heart: \n. Closing as this is a TeamCity bug, as you've referenced.\n. Teaspoon does not influence the stack trace provided by Jasmine. This looks like an issue with angular-mocks.js, and your stack trace may not include your test file due to some asynchrony.\n. Does this happen when run in your browser with /teaspoon? You can access a stack trace from there. Have you followed the upgrade notes?\n. Have you followed the upgrade notes?\n. Phantom is a black box, which makes debugging issues like this difficult.\nI see you're using thin on port 5000. Can you please provide any other details specific to how you're running teaspoon CLI?\nWorth trying: bundle open teaspoon and put a debugger/pry after this line to pause the teaspoon CLI. Grab the URL it provides you and open that in your browser.\n. Can you please post the contents of your teaspoon_env.rb file?\n. @rafaelfranca absolutely. The port is configurable, so it should be pretty easy follow that pattern.\n. This test doesn't suffice? https://github.com/modeset/teaspoon/blob/master/spec/teaspoon/suite_spec.rb#L111-L116\n. Hey Andr\u00e9s, thanks so much for your efforts clarifying this issue. We've decided that the best default behavior is to exclude spec_helper from coverage as it remains today, and recommend that people avoid requiring application from within spec_helper. We've updated the README to reflect this caveat and provide the desired workaround: https://github.com/modeset/teaspoon#caveats\n. Thanks Ryan. This code makes sense and I understand where you're going with it, but I don't understand the problem. What was your expected behavior and what didn't work correctly? There are no new test cases added, so I'm not sure what problem you're solving.\n. Got it. So, to clarify, you have a test that should fail, but is passing? This test is passing because the evaluation script does not rerun?\n. Or, is the result of the test not being captured? It's neither passing nor failing. More like skipped. This is what I'd expect, not that the test actually passes.\n. Thanks Ryan!\n. Thanks for the issue. Can I ask why you're precompiling assets in the dev environment?\n. Thanks again for the issue Ben. Sadly, I'm not able to reproduce. Closing for now, but happy to keep digging. Here're my steps:\n```\n$ rails -v\nRails 4.2.4\n$ rails new teaspoon-precompile\n      create  README.rdoc\n      ...\n$ cd teaspoon-precompile/\n$ rake assets:precompile\nI, [2015-10-09T11:20:02.693928 #79126]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/application-d4d603d0ff049a3ecfbf019b468bf1a62a50b9fdafe41213c300fa071342b600.js\nI, [2015-10-09T11:20:02.704990 #79126]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/application-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css\n$ echo \"gem 'teaspoon', groups: [:development, :test]\" >> Gemfile\n$ bundle\nResolving dependencies...\n...\nUsing teaspoon 1.0.2\n...\n$ rake assets:precompile\nI, [2015-10-09T11:20:24.386129 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon-5a63f1400783e117b9e55161f53688b6530615d285f32af0abde8f252706d140.css\nI, [2015-10-09T11:20:24.392571 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon-filterer-65c5f62e0af566bf9d24f413533144277cb7d2fa9461e8307332fede303af366.js\nI, [2015-10-09T11:20:24.524173 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/support/bind-poly-c89d2f5f622318bb7bd38eb36472131e70bdb95e45431cd9397a192fa3fd24f7.js\nI, [2015-10-09T11:20:24.535279 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/support/phantomjs-shims-f6867d3adaf9c1a659d0ca8e170f147e97bbde37736890cf05d84e7b5020fed4.js\nI, [2015-10-09T11:20:24.577333 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/support/sinon-3dade19b521c697425009cf3586fe148d7ef3cae04beb8561ce9efd984a50242.js\nI, [2015-10-09T11:20:24.785584 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/error-ed40c173b6c340f9f88aa29f298fc370041a4a9bb4aaac5c2df778e3acc38c23.js\nI, [2015-10-09T11:20:24.946151 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/fixture-c6bad5902c8c1c3410601161b17bdb9f9e84d895b9dd133776e7333f35c5be34.js\nI, [2015-10-09T11:20:25.076314 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/hook-3773a6e284673901a8e760af7bb34aab7c0e102d5491d65767e254e85b340e5b.js\nI, [2015-10-09T11:20:25.228349 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/console-99b89bb14547a9319e24015fcfd37ff25f397075d97a46f7288285a00d37bb53.js\nI, [2015-10-09T11:20:25.365552 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/base_view-54bde87f8b590ea172add9df2a359baefdc0eb070e83b1f665b5b1d249f48d0a.js\nI, [2015-10-09T11:20:25.498467 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/failure_view-abd3e946408c91f53c0bd91aba0b84f81e5cbf26eecfdc7879b31b61d7bf659c.js\nI, [2015-10-09T11:20:25.625227 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/progress_view-d1b347af3952c1071537f62c62e6c16f6e836bc7025336dd850939ccbbd9f780.js\nI, [2015-10-09T11:20:25.756505 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/radial_progress_view-f4a66cc1be87f0f30d151820f778f1358c00e43fa72e60026efbdffc43e0f155.js\nI, [2015-10-09T11:20:25.878579 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/simple_progress_view-40fe2b0a3e3d2a2050ed512822f389a7e1e2b38ea6a0521026c06e72630a08d5.js\nI, [2015-10-09T11:20:26.072945 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/spec_view-b9e2ff602e48343bc943f1e9c2248e37a68664d7462b3cc1e57e62d2ec093145.js\nI, [2015-10-09T11:20:26.210769 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/suite_view-575eb8e0c83c87db9a490f41259a215bd112f84a2cb53f759f128f07943750ef.js\nI, [2015-10-09T11:20:26.327344 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/template-e15ab6124990c3d9620fe993674b221f7414191e73bcaff69f78c4db34bc9964.js\nI, [2015-10-09T11:20:26.524770 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html-4b9df3c34b24a8a7a885e23963c69597ed5f032fe7065d03e4fac654a64a88d4.js\nI, [2015-10-09T11:20:26.662281 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/runner-372c32fa19323633724027319fd4d3239912deb0b4f149f9c16c7a8f0c73f1f2.js\nI, [2015-10-09T11:20:26.811670 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/teaspoon-262deac805d9d64bc9749e577078cacd7282d8ce7a0c898bb200787fca6ba0bf.js\n``\n. Thanks Iain!\n. I've pushed a commit to add expect.js 0.3.1. It will go out with the next release of teaspoon-mocha. To reduce upgrade surprises, I have not replaced the existing version of expect.js. So,//= require support/expectwill still load 0.1.2, while//= require support/expect-0.3.1will load 0.3.1.\n. Thanks for submitting this issue, Alexis. A fix is in master if you'd like to give it a try, or it will go out with the next release.\n. Thanks for submitting this issue, Thibaut! It should be fixed in [this commit](https://github.com/modeset/teaspoon/commit/f5e2ae25217ef2465d62f51eda8a10cfc4128c9c). Unlike Mocha, when focusing a spec in Jasmine, it does not also run the suite (ie surroundingdescribe`). The Teaspoon code was assuming every spec has a suite. Can you point your Gemfile at master and see if everything has been fixed?\n. @thbar \ud83c\udf7b thanks for checking. Have a great weekend!\n. Requiring files from a spec follows the same rules as requiring files from implementation. They both use the asset pipeline.\nI noticed your file has a .erb extension. Is it in app/assets/javascripts or somewhere in you config.assets.paths?\nSince the test actually runs, it looks like the asset pipeline is functioning and you have something wrong within your code. You're calling new userValidate without parenthesis. Do you mean to say new userValidate()?\n. Thanks a ton for submitting this issue. Teaspoon is used pretty heavily and this has never come up. Since the asset seems to be loaded properly (you're not getting a asset pipeline compilation error), this feel like it's something with your code. I'm happy to keep thinking about this issue, but will close for now. \nIf you could set up a new Rails app, add the Teaspoon gem, reproduce this issue in the app, open source it, and point me to your app, I would be happy to review.\n. \ud83c\udf7a\n\nOn Oct 2, 2015, at 9:16 PM, Jeremy Jackson notifications@github.com wrote:\n:) I enjoy seeing people solve their issues, no worries.\n\nJeremy Jackson\n\nOn Oct 2, 2015, at 8:31 PM, Michael Toppa notifications@github.com wrote:\nAnd I resolved it by reworking the app structure a bit so all the class names are unique. Now my test suite is running fine. I am my own rubber duck.\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n. Chai is still there. I'll look into this. Thanks for reporting.\n. Oh, sorry, noticing you're using teaspoon-jasmine. Chai ships with teaspoon-mocha. Which framework were you using prior to upgrading?\n. Upgrade notes to 1.0: https://github.com/modeset/teaspoon/blob/master/CHANGELOG.md#100-5415\n. Thanks Rafael!\n. How are you producing the parse error? The success or failure of a build is determined by whether you have any failing specs. In your example, nothing failed, so that's why it's a successful build.\n. I still don't understand how this error is being produced. Syntax errors in the specs or implementation bubble up as errors in the console output. @pratik60 can you explain how to produce this error?\n. Mocha doesn't ship with an assertion syntax. You'll need to add Chai and enable expect.\n\n\nIn your spec_helper.coffee:\n``` coffeescript\n= require support/chai\nwindow.expect = chai.expect\n``\n. Thanks for the issue. Can you please provide the entirety of yourteaspoon_env.rb`?\n. Thanks!\n. If I understand correctly, here is a use case:\n1. Fire the hook in the spec\n2. Create a record on the server\n3. Return the record (as JSON to the client)\n4. Use the returned data to make an assertion in the test\n@hakunin using hooks is a smell. In retrospect it should not have been added. Hooks tie your JS tests to your server, making the tests much more stateful. Once tied to the server, making the tests server-less would be difficult.\nThere are great acceptance testing tools in Ruby (eg Capybara), and Teaspoon does not try to compete with these tools, meaning that Teaspoon should be used for unit testing only. The recommended approach is to stub your AJAX responses with a tool like Sinon, and generally not rely on the state of the server to get your tests passing.\nThat said, if you decide to use hooks, you can pass arguments to the hooks to control the data on your server:\n``` coffeescript\nTeaspoon.hook('createRecord', {name: 'Mike Pack'})\nDo something to fetch the data on the server\nexpect(something).to.eq('Mike Pack')\n```\nOn the server\nruby\nsuite.hook :createRecord do |data|\n  create(:user, name: data['name'])\nend\n. @mockdeep thanks for reporting this bug. I'll try to spend some turkey time looking into it. Do you know if it's specific to .jxs extensions?\n. The reason this is happening is because Teaspoon calls #logical_path on a sprockets asset in order to get a file URL that can be requested from the browser. We assume this returns a .js extension every time (like it does in Sprockets 2.x), but this is not the case with .js.jsx extensions in Sprockets 3.x, in which case it returns .jsx.\nThis seems like it could be one of two things:\n- Teaspoon should not use #logical_path but I'm not currently aware of another way to determine the URL for a sprockets asset.\n- It's upstream in the react-rails asset pipeline integration and they need specify a .js extension for #logical_path.\n. It's mostly handled by sprockets. Sorry, I didn't provide a good resolution for the interim. If you're on Teaspoon 1.1.x, try setting this configuration:\nruby\nconfig.suite do |suite|\n  suite.js_extensions = [/(\\.js)?.coffee/, /(\\.js)?.es6/, \".es6.js\", \".js.jsx\"]\nend\n. :+1:\n. @jaredmoody thanks for reporting this bug. I'll try to spend some turkey time looking into it.\n. @jaredmoody can you confirm this isn't related to any of the issues here? https://github.com/modeset/teaspoon/search?q=Can%27t+find+variable%3A+Teaspoon&type=Issues&utf8=%E2%9C%93\n. Thank you for the excellent bug report. If you point your Gemfile at master, you should see a more friendly error message. The error you're seeing indicates the results could not be found because no files had been instrumented. In your case, they couldn't be found because you have /spec/javascripts in your ignore list and your helper is at .../spec/javascripts/spec_helper_desktop.js.\n. Under what cases will $? be nil? Can you explain how to reproduce this, or write a spec? Are you missing a phantomjs binary?\n. Can you please verify that this isn't related to any past CircleCI issues? https://github.com/modeset/teaspoon/issues?utf8=%E2%9C%93&q=CircleCI\n. Thanks!\n. Thanks!\n. Can we please reopen this issue? I'm proposing we change the name back to Teabag.\n. @mcasimir can you provide a stack trace pointing back to Teaspoon? Also, what version of Teaspoon are you running?\n. I didn't realize you were running IE8 tests from the CLI. I think what's happening here is that Teaspoon attempts to console.log, it fails, and Teaspoon throws an exception. IIRC, IE8 just stops executing all future JS after encountering an exception. This seems like the offending lines:\ncoffeescript\ntry console.log(arguments...)\ncatch e\n  throw new Error(\"Unable to use console.log for logging\")\nI would imagine the error being thrown is because it's fatal in most browsers not to have console.log when running on the CLI, but this is not the case with Selenium-driven browsers.\n@jejacks0n do you think failing silently here would cause us other headaches? eg:\ncoffeescript\nconsole?.log?(arguments...)\n. Except for Selenium, which polls for Teaspoon.getMessages(), no? Doesn't seem like a need for console.log there.\n. The same logging mechanism is used for both console-based and non-console-based drivers:\ncoffeescript\n@log: ->\n  Teaspoon.messages.push(arguments[0])\n  try console.log(arguments...)\n  catch e\n    throw new Error(\"Unable to use console.log for logging\")\nIf the driver is fetching the messages, like Selenium or CapybaraWebkit, it calls:\ncoffeescript\n@getMessages: ->\n  messages = Teaspoon.messages\n  Teaspoon.messages = []\n  messages\nperiodically via:\ncoffeescript\nTeaspoon.getMessages();\nIf the driver is listening for console.log, it never calls Teaspoon.getMessages(). So message polling drivers effectively don't need console.log at all, so it seems safe to fail silently instead of throw an exception.\n. I will apply a fix and it will need to go through the release process. What you have is what @jejacks0n suggested higher up in this thread. Seems like the only intermediary fix for right now.\n. Closing. On the roadmap for 1.0. Would gladly accept a PR.\n. 1.0 has been released and support for Jasmine 2 has been added.\n. @jejacks0n should we take a stab at this pre 1.0? What was holding it up before?\n. Going to close this. After some thought, we won't be able to support support Middleman, Sinatra or any Rails-less environment until we do some major refactoring to pull Rails out of Teaspoon, which is non-trivial. This will eventually happen, but not for the foreseeable future.\n. Jasmine 2 support is in Teaspoon 1.0.\n. Closing. Addressed in #316.\n. Thanks for the notice. Going to close this as it's an issue with Chai. In future versions of Teaspoon, we'll allow multiple versions of libraries, so upgrading Teaspoon won't force your hand in upgrading assertion libraries. You can, of course, put any version of Chai in your project's vendor/assets and require them in your spec_helper.coffee.\n. We don't have any immediate plans to work on this, but would gladly accept a PR.\n. Closing. Would happily accept a PR or jsbin reproducing the problem.\n. Documented in #314 \n. Closing this out and carrying the discussion over at #296 \n. You can currently accomplish this by specifying the server_port:\n$ teaspoon --server-port 3000\nOr in teaspoon_env.rb:\nruby\nconfig.server_port = 3000\n. Closing and moving discussion to #318\n. This override wouldn't affect the browser runner? I would suspect putting this in a .env would have it affect all uses of Teaspoon.\n. Worth noting: QUnit produces decent error messages in other cases, just not with #equal.\n. @jejacks0n tests added\n. @chancancode not a problem, thanks for all your work on this. We'll be releasing 0.9 soon, and this change will go out with that release.\n. @bramski we'll be releasing either today or tomorrow.\n. Going to merge this and clean it up in master so I'm not blocking you.\n. :+1:\n. @jejacks0n feel free to merge this. I'm going to spend some time today on getting j2 merged.\n. @jejacks0n I'm very unfamiliar with this part of the codebase. We should stay away from a current_suite, IMO. What prevents us from calling Teaspoon.coverage_configs? Is it that we need to know what coverage config is being used (eg default or CI)?\n. @davestevens thanks to this PR, we've had some discussions internally and have plans to rework the coverage configuration for our 1.0 release (#308). We're thinking of removing all coverage options at the suite level, ie. moving the no_coverage to the coverage block.\nGoing to close this PR. Happy to reopen if you want to take a stab at getting this into the coverage block. Otherwise, we'll address it in the not-so-distant future.\n. You have most of the ruby side done, right? I'm getting to the point where I need to register the framework in JS. I'm wondering if we should keep it super simple:\nOn boot (initialize.coffee), the framework registers itself with core via something like:\njs\nTeaspoon.framework = Teaspoon.Jasmine2\nCore would then assume a conventional structure for the framework, so:\njs\nreporter = Teaspoon.framework.Console\nand eg:\ncoffeescript\nif Teaspoon.framework.Reporters?.HTML?.SpecView\n  @reportView = new Teaspoon.framework.Reporters.HTML.SpecView(spec, @)\nelse\n  @reportView = new Teaspoon.Reporters.HTML.SpecView(spec, @)\nThe alternative seems way more complicated where each class type of registered with core or core provides a series of hooks for all situations where a framework might override a default.\nThoughts?\n. What would the API look like when we want to raise a custom exception?\n. :+1: \n. Cool, thanks for the quick review. I'll hold off or I can branch off your branch. Cool to merge this though?\n. Got it. I'm happy to review #321 as soon as you feel comfortable or just ping me if you want any input/help.\n. Fixed on master. Can you give it a try? Details on how to use master can be found here: https://github.com/modeset/teaspoon#status\n. Have you considered using appraisal to handle the Gemfile creation?\nFYI: I foresee this conflicting with @jejacks0n WIP branch: https://github.com/modeset/teaspoon/pulls\n. Hey @thejamespinto. I'm going to close this for now. I've added an issue (#348) that we will eventually get to once things have stabilized a bit more (read: post-1.0 release).\nYour contribution is hugely appreciated, and we'll probably reference this PR when we work this into the codebase. :heart: :heart: :heart:\n. This is a known problem in Mocha: https://github.com/mochajs/mocha/issues/553\n. Word. I'll change that and merge.\n. It sounds like you really hate it, so I'm going to remove it and never do it in the future. :trollface: \n. FYI, couldn't completely remove class << self as it's the only want to define an attr_accessor on a module.\n. Addressed here: 1f204b638a432189ca25349bd4a8b097288c0a34\n. @sp1117 you're using quite an old version of Teaspoon (0.7.9). Can you please try upgrading? There are some upgrade notes in the README: https://github.com/modeset/teaspoon#upgrading\nClosing this for now, will happily reopen if you're still experiencing issues after upgrading.\n. I don't believe so. @jejacks0n are you aware of anything?\n. Nope.\n. Hi Arin. My gut tells me it is not Teaspoon that is causing the random failures, but the tests within your application. If Teaspoon reported a failure and you're seeing a failure in your suite, Teaspoon has done its job at that point and the test is truly failing. If you're seeing a dropped or missing test, then it could be Teaspoon.\nRandom failures are often due to the order in which the tests run. When trying to debug them, I usually look for some global state that could be corrupt when the tests run in a specific order. Things like storing data on classes instead of instances, or on the prototype that is shared between objects, or some underlying persistent store, like Local Storage.\nCan you confirm that you are seeing a test failure and not a dropped test? Are other tests passing?\n. Closing. Will happily reopen if you can provide some insight as to whether the tests are truly dropped or just failing.\n. What is the actual JavaScript file that can't be loaded (in place of blah/Blah)? Is it a teaspoon requirement or one of your app's requirements?\n. Going to close this. Will happily reopen if you can provide more insight into the actual file names.\n. The file names are important so I can distinguish whether your setup is having trouble loading a teaspoon JS file or your application's JS file.\nCan you paste the portion of your code that requires blah/Blah.js?\n. I'd actually like to see if we can determine a routing error without depending on the name of the action. I'll do some poking around and let you know what I come up with.\n. @ahorner what version of Rails are you on?\n. @ahorner I'm having a hard time reproducing. Specifically, app.routes.recognize_path(mount_at) always throws an exception for me, so there is never a check against the :action.\nMaybe you can fill in some details. What is special about your usage of Teaspoon or your app's configuration or routes? Can you paste applicable code from your app here?\n. Related: #191 \n. So, I have a test app that is running Rails 4.2.1 and Teaspoon 0.9.1. I have this as the last route in my routes.rb:\nruby\nget '*path', to: \"errors#not_found\"\nWhen I debug into the suspect line, app.routes.recognize_path(mount_at), it always throws an exception.\nWhat could be differing? Are you able to reproduce this in an entirely new app?\n. No problem. I appreciate your time trying to track this down!\n. Hey @ahorner, I'm going to close this issue for now. Happy to reopen if you find anything on your end.\n. If you're running Teaspoon >= 0.9, you can use the expand_assets suite configuration to speed things up. The downside is it makes code harder to debug as the stack traces all point to one monolithic file.\nhttps://github.com/modeset/teaspoon/wiki/Teaspoon-Configuration#suite-configuration-directives\n. Because Teaspoon runs in the development Rails environment, and we want to provide a consistent experience regardless of whether the host app's config.assets.debug is set to true or false.\n. I'm not very familiar with Knockout, but Teaspoon should be cleaning up the fixtures between test runs. Can you paste the test that uses fixtures here? If you're able, it would be extremely helpful if you could create a test app with just Teaspoon, Knockout, and a test that represents the problem you're seeing.\nMaybe @jejacks0n has some insight?\n. It might be worthwhile to try to clean up the fixtures manually. You can call fixture.cleanup(), but Teaspoon should do this for you automatically. Worth a shot.\n. @davestevens Teaspoon 1.0 (unreleased) should fix your issue with RequireJS #322\n. No bother. I like being employed :)\nTeaspoon requires the framework libraries to provide a consistent experience for people at any level. For the conventional cases, Teaspoon requiring the framework makes it easier to get started, makes Teaspoon core simpler and more performant, and fails faster when things are misconfigured. I agree it would be more transparent if they were required from spec_helper, though.\n:beers: \n. Coverage is not recognized because _helper is included in coverage.ignore by default, and application (and everything else) gets required from there.\nInstrumentation is still not added because the logic here is not correct. If expand_assets is turned on, instrument=1 is never added to any file. Should probably be something more like:\n``` ruby\nunless asset && asset.respond_to?(:logical_path)\n  return source.blank? ? nil : source\nend\nif config.expand_assets\n  asset.to_a.map { |a| asset_url(a) }\nelse\n  asset_url(asset)\nend\n``\n. Fixed in 1fdfaae3c8a85d3b65c1895147d5a38ecefd6cdd\n. Excellent! 1.0.1 should be on RubyGems now.\n. I've updated the recommended polyfill to usephantomjs-shims.js. After reviewing the differences, the code looks a bit more robust. Teaspoon won't ship withphantomjs-shims.jsuntil a new version is cut, but you can use it now by adding it to your project manually (which it sounds like you're already doing).\n. Thanks for taking the time to review 1.x :smiley: \n. Version 1.0.2 should fix this. Run a bundle update.\n. @jejacks0n can I get some :eyes: on this?\n. There are very few differences between the two. What are the commands you're running and what are the failures?\n. What type of output are you looking for? You can runteaspoon --format documentation` to output your spec details, but I assume that's not what you're looking for.\n. I've never used Magic Lamp but if you can create an app that reproduces the problem I'll happily take a look.\n. The word \"framework\" should be replaced with the name of the testing framework you're using. From the changelog, check the second line:\nChange your Gemfile to use \"teaspoon-framework\" instead of \"teaspoon\".\neg: If you are using Mocha, this would be gem 'teaspoon-mocha'\n. The available gems are teaspoon-jasmine, teaspoon-mocha and teaspoon-qunit.\n. Thanks so much! Sorry for the delay \ud83c\udf7b\ud83d\ude4c\ud83c\udf89\n. Correct. It also checks for checks in test/javascripts. This is configurable via asset_paths (see the config options)\nIf you want to specify where to find teaspoon_env.rb, you can use the TEASPOON_ENV environment variable, eg:\nbash\nTEASPOON_ENV=jstests/teaspoon_env.rb teaspoon\n. For test dependencies, I'd recommend you put them in your Gemfile. Bundler doesn't have great integration for gemspec dev dependencies. In other words, dev deps aren't loaded when you run bundle exec.\n. To answer your question about testing Rails engines, yes. You'll also want to adjust your config.root to point to your engine's root.\n. @jejacks0n looks current.\n. Take a look at the next line in the changelog that indicates that you need to use teaspoon-jasmine, teaspoon-mocha or teaspoon-qunit. Substitute the word \"framework\" in that sentence for the framework you're using.\n. Dig it. I wouldn't mind an updated look. @jejacks0n, what do you think?\n. Going to close for now, but would love to see progress on this in the form of a PR.\n. I like the changing favicon idea. Can we use the svgs we have to create the icons?\n. If you could look into that, it would be awesome. You seem to have a strong grasp on how to accomplish it.\n. Thanks for the report @crgee. I've pushed a fix up to master to solve this. It will go out with the 1.0.3 release (no date set yet). In the meantime, you can point your Gemfile at master.\n. I don't think there's a good way around this other than restructuring the markup you're returning. Even innerHTML suffers from this problem.\n. @drogar, if you have jQuery in your project (Teaspoon doesn't ship with it), this should work for you once #389 lands.\n. In what version did we have a server_host config? I can't find it looking all the way back to 0.5. Also, what's your use case? The booted server is for headless testing, but are you using it for something other than that?\n. I've opened #389 to fix this, but it will only work if the host project uses jQuery. Teaspoon does not ship with jQuery and therefor cannot rely on it. Thank you for the succinct solution!\n. @jejacks0n :eyes: :pray:\n. Yeah, I'm struggling with that as well. It seems like a bad way of using fixtures, unless I'm misunderstanding the use case. Pulling JS down through a fixture seems poor for performance (because of script download/parse blocking), in the case of #387. Testing just the contents of an invalid element, without caring about the surrounding elements that make it valid, also seems like a bad idea and the tests should be moved to a higher level where it's tested against something valid, in the case of #382.\n\u00af\\_(\u30c4)_/\u00af\n. I see you're using capybara webkit and you may have run into this now-resolved issue: #403. Could you point your Gemfile at teaspoon master and see if it's fixed?\nruby\ngem 'teaspoon', github: 'modeset/teaspoon'\ngem 'teaspoon-qunit'\ngem 'capybara-webkit'\n. Closing but will reopen if #403 does not fix the issue.\n. @jejacks0n seems reasonable as a config, even with full documentation. Though as a config it should be an array of regexes instead of a single regex with ors. Why's it feel dirty?\n. @plongyear I'd say it's probably best to point your Gemfile at your fork until we're able to address this correctly.\n. Did you require it after requiring chai? I just set up a new app with chai-datetime, and it worked. I did nothing more than add the chai-datetime library to spec/javascripts/support, and put //=require support/chai-datetime in spec_helper.js, right below //=require support/chai-datetime.\n. Thanks a ton for submitting this issue, Jason. It should be resolved on master and will go out with the next release.\n. Good catch, and sorry about the yak shaving. Programming, right?\nI don't think it would be wise to straight remove the alias, as this would introduce a breaking change. We should define use_framework=, provide the correct functionality, and deprecate the method.\n. Thanks. We try to isolate deprecations here via monkey patching. It seems like you could remove the alias, and define the method there.\n. Seems reasonable to keep this open for now and just push changes to this PR.\n. Damn, that Aruba upgrade was painful.\nThanks so much for this high quality PR :heart: \n. Closing as this is a TeamCity bug, as you've referenced.\n. Teaspoon does not influence the stack trace provided by Jasmine. This looks like an issue with angular-mocks.js, and your stack trace may not include your test file due to some asynchrony.\n. Does this happen when run in your browser with /teaspoon? You can access a stack trace from there. Have you followed the upgrade notes?\n. Have you followed the upgrade notes?\n. Phantom is a black box, which makes debugging issues like this difficult.\nI see you're using thin on port 5000. Can you please provide any other details specific to how you're running teaspoon CLI?\nWorth trying: bundle open teaspoon and put a debugger/pry after this line to pause the teaspoon CLI. Grab the URL it provides you and open that in your browser.\n. Can you please post the contents of your teaspoon_env.rb file?\n. @rafaelfranca absolutely. The port is configurable, so it should be pretty easy follow that pattern.\n. This test doesn't suffice? https://github.com/modeset/teaspoon/blob/master/spec/teaspoon/suite_spec.rb#L111-L116\n. Hey Andr\u00e9s, thanks so much for your efforts clarifying this issue. We've decided that the best default behavior is to exclude spec_helper from coverage as it remains today, and recommend that people avoid requiring application from within spec_helper. We've updated the README to reflect this caveat and provide the desired workaround: https://github.com/modeset/teaspoon#caveats\n. Thanks Ryan. This code makes sense and I understand where you're going with it, but I don't understand the problem. What was your expected behavior and what didn't work correctly? There are no new test cases added, so I'm not sure what problem you're solving.\n. Got it. So, to clarify, you have a test that should fail, but is passing? This test is passing because the evaluation script does not rerun?\n. Or, is the result of the test not being captured? It's neither passing nor failing. More like skipped. This is what I'd expect, not that the test actually passes.\n. Thanks Ryan!\n. Thanks for the issue. Can I ask why you're precompiling assets in the dev environment?\n. Thanks again for the issue Ben. Sadly, I'm not able to reproduce. Closing for now, but happy to keep digging. Here're my steps:\n```\n$ rails -v\nRails 4.2.4\n$ rails new teaspoon-precompile\n      create  README.rdoc\n      ...\n$ cd teaspoon-precompile/\n$ rake assets:precompile\nI, [2015-10-09T11:20:02.693928 #79126]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/application-d4d603d0ff049a3ecfbf019b468bf1a62a50b9fdafe41213c300fa071342b600.js\nI, [2015-10-09T11:20:02.704990 #79126]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/application-e80e8f2318043e8af94dddc2adad5a4f09739a8ebb323b3ab31cd71d45fd9113.css\n$ echo \"gem 'teaspoon', groups: [:development, :test]\" >> Gemfile\n$ bundle\nResolving dependencies...\n...\nUsing teaspoon 1.0.2\n...\n$ rake assets:precompile\nI, [2015-10-09T11:20:24.386129 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon-5a63f1400783e117b9e55161f53688b6530615d285f32af0abde8f252706d140.css\nI, [2015-10-09T11:20:24.392571 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon-filterer-65c5f62e0af566bf9d24f413533144277cb7d2fa9461e8307332fede303af366.js\nI, [2015-10-09T11:20:24.524173 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/support/bind-poly-c89d2f5f622318bb7bd38eb36472131e70bdb95e45431cd9397a192fa3fd24f7.js\nI, [2015-10-09T11:20:24.535279 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/support/phantomjs-shims-f6867d3adaf9c1a659d0ca8e170f147e97bbde37736890cf05d84e7b5020fed4.js\nI, [2015-10-09T11:20:24.577333 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/support/sinon-3dade19b521c697425009cf3586fe148d7ef3cae04beb8561ce9efd984a50242.js\nI, [2015-10-09T11:20:24.785584 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/error-ed40c173b6c340f9f88aa29f298fc370041a4a9bb4aaac5c2df778e3acc38c23.js\nI, [2015-10-09T11:20:24.946151 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/fixture-c6bad5902c8c1c3410601161b17bdb9f9e84d895b9dd133776e7333f35c5be34.js\nI, [2015-10-09T11:20:25.076314 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/hook-3773a6e284673901a8e760af7bb34aab7c0e102d5491d65767e254e85b340e5b.js\nI, [2015-10-09T11:20:25.228349 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/console-99b89bb14547a9319e24015fcfd37ff25f397075d97a46f7288285a00d37bb53.js\nI, [2015-10-09T11:20:25.365552 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/base_view-54bde87f8b590ea172add9df2a359baefdc0eb070e83b1f665b5b1d249f48d0a.js\nI, [2015-10-09T11:20:25.498467 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/failure_view-abd3e946408c91f53c0bd91aba0b84f81e5cbf26eecfdc7879b31b61d7bf659c.js\nI, [2015-10-09T11:20:25.625227 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/progress_view-d1b347af3952c1071537f62c62e6c16f6e836bc7025336dd850939ccbbd9f780.js\nI, [2015-10-09T11:20:25.756505 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/radial_progress_view-f4a66cc1be87f0f30d151820f778f1358c00e43fa72e60026efbdffc43e0f155.js\nI, [2015-10-09T11:20:25.878579 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/simple_progress_view-40fe2b0a3e3d2a2050ed512822f389a7e1e2b38ea6a0521026c06e72630a08d5.js\nI, [2015-10-09T11:20:26.072945 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/spec_view-b9e2ff602e48343bc943f1e9c2248e37a68664d7462b3cc1e57e62d2ec093145.js\nI, [2015-10-09T11:20:26.210769 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/suite_view-575eb8e0c83c87db9a490f41259a215bd112f84a2cb53f759f128f07943750ef.js\nI, [2015-10-09T11:20:26.327344 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html/template-e15ab6124990c3d9620fe993674b221f7414191e73bcaff69f78c4db34bc9964.js\nI, [2015-10-09T11:20:26.524770 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/reporters/html-4b9df3c34b24a8a7a885e23963c69597ed5f032fe7065d03e4fac654a64a88d4.js\nI, [2015-10-09T11:20:26.662281 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/runner-372c32fa19323633724027319fd4d3239912deb0b4f149f9c16c7a8f0c73f1f2.js\nI, [2015-10-09T11:20:26.811670 #79132]  INFO -- : Writing /Users/mikepack/Documents/Work/teaspoon-precompile/public/assets/teaspoon/teaspoon-262deac805d9d64bc9749e577078cacd7282d8ce7a0c898bb200787fca6ba0bf.js\n``\n. Thanks Iain!\n. I've pushed a commit to add expect.js 0.3.1. It will go out with the next release of teaspoon-mocha. To reduce upgrade surprises, I have not replaced the existing version of expect.js. So,//= require support/expectwill still load 0.1.2, while//= require support/expect-0.3.1will load 0.3.1.\n. Thanks for submitting this issue, Alexis. A fix is in master if you'd like to give it a try, or it will go out with the next release.\n. Thanks for submitting this issue, Thibaut! It should be fixed in [this commit](https://github.com/modeset/teaspoon/commit/f5e2ae25217ef2465d62f51eda8a10cfc4128c9c). Unlike Mocha, when focusing a spec in Jasmine, it does not also run the suite (ie surroundingdescribe`). The Teaspoon code was assuming every spec has a suite. Can you point your Gemfile at master and see if everything has been fixed?\n. @thbar \ud83c\udf7b thanks for checking. Have a great weekend!\n. Requiring files from a spec follows the same rules as requiring files from implementation. They both use the asset pipeline.\nI noticed your file has a .erb extension. Is it in app/assets/javascripts or somewhere in you config.assets.paths?\nSince the test actually runs, it looks like the asset pipeline is functioning and you have something wrong within your code. You're calling new userValidate without parenthesis. Do you mean to say new userValidate()?\n. Thanks a ton for submitting this issue. Teaspoon is used pretty heavily and this has never come up. Since the asset seems to be loaded properly (you're not getting a asset pipeline compilation error), this feel like it's something with your code. I'm happy to keep thinking about this issue, but will close for now. \nIf you could set up a new Rails app, add the Teaspoon gem, reproduce this issue in the app, open source it, and point me to your app, I would be happy to review.\n. \ud83c\udf7a\n\nOn Oct 2, 2015, at 9:16 PM, Jeremy Jackson notifications@github.com wrote:\n:) I enjoy seeing people solve their issues, no worries.\n\nJeremy Jackson\n\nOn Oct 2, 2015, at 8:31 PM, Michael Toppa notifications@github.com wrote:\nAnd I resolved it by reworking the app structure a bit so all the class names are unique. Now my test suite is running fine. I am my own rubber duck.\n\u2014\nReply to this email directly or view it on GitHub.\n\u2014\nReply to this email directly or view it on GitHub.\n. Chai is still there. I'll look into this. Thanks for reporting.\n. Oh, sorry, noticing you're using teaspoon-jasmine. Chai ships with teaspoon-mocha. Which framework were you using prior to upgrading?\n. Upgrade notes to 1.0: https://github.com/modeset/teaspoon/blob/master/CHANGELOG.md#100-5415\n. Thanks Rafael!\n. How are you producing the parse error? The success or failure of a build is determined by whether you have any failing specs. In your example, nothing failed, so that's why it's a successful build.\n. I still don't understand how this error is being produced. Syntax errors in the specs or implementation bubble up as errors in the console output. @pratik60 can you explain how to produce this error?\n. Mocha doesn't ship with an assertion syntax. You'll need to add Chai and enable expect.\n\n\nIn your spec_helper.coffee:\n``` coffeescript\n= require support/chai\nwindow.expect = chai.expect\n``\n. Thanks for the issue. Can you please provide the entirety of yourteaspoon_env.rb`?\n. Thanks!\n. If I understand correctly, here is a use case:\n1. Fire the hook in the spec\n2. Create a record on the server\n3. Return the record (as JSON to the client)\n4. Use the returned data to make an assertion in the test\n@hakunin using hooks is a smell. In retrospect it should not have been added. Hooks tie your JS tests to your server, making the tests much more stateful. Once tied to the server, making the tests server-less would be difficult.\nThere are great acceptance testing tools in Ruby (eg Capybara), and Teaspoon does not try to compete with these tools, meaning that Teaspoon should be used for unit testing only. The recommended approach is to stub your AJAX responses with a tool like Sinon, and generally not rely on the state of the server to get your tests passing.\nThat said, if you decide to use hooks, you can pass arguments to the hooks to control the data on your server:\n``` coffeescript\nTeaspoon.hook('createRecord', {name: 'Mike Pack'})\nDo something to fetch the data on the server\nexpect(something).to.eq('Mike Pack')\n```\nOn the server\nruby\nsuite.hook :createRecord do |data|\n  create(:user, name: data['name'])\nend\n. @mockdeep thanks for reporting this bug. I'll try to spend some turkey time looking into it. Do you know if it's specific to .jxs extensions?\n. The reason this is happening is because Teaspoon calls #logical_path on a sprockets asset in order to get a file URL that can be requested from the browser. We assume this returns a .js extension every time (like it does in Sprockets 2.x), but this is not the case with .js.jsx extensions in Sprockets 3.x, in which case it returns .jsx.\nThis seems like it could be one of two things:\n- Teaspoon should not use #logical_path but I'm not currently aware of another way to determine the URL for a sprockets asset.\n- It's upstream in the react-rails asset pipeline integration and they need specify a .js extension for #logical_path.\n. It's mostly handled by sprockets. Sorry, I didn't provide a good resolution for the interim. If you're on Teaspoon 1.1.x, try setting this configuration:\nruby\nconfig.suite do |suite|\n  suite.js_extensions = [/(\\.js)?.coffee/, /(\\.js)?.es6/, \".es6.js\", \".js.jsx\"]\nend\n. :+1:\n. @jaredmoody thanks for reporting this bug. I'll try to spend some turkey time looking into it.\n. @jaredmoody can you confirm this isn't related to any of the issues here? https://github.com/modeset/teaspoon/search?q=Can%27t+find+variable%3A+Teaspoon&type=Issues&utf8=%E2%9C%93\n. Thank you for the excellent bug report. If you point your Gemfile at master, you should see a more friendly error message. The error you're seeing indicates the results could not be found because no files had been instrumented. In your case, they couldn't be found because you have /spec/javascripts in your ignore list and your helper is at .../spec/javascripts/spec_helper_desktop.js.\n. Under what cases will $? be nil? Can you explain how to reproduce this, or write a spec? Are you missing a phantomjs binary?\n. Can you please verify that this isn't related to any past CircleCI issues? https://github.com/modeset/teaspoon/issues?utf8=%E2%9C%93&q=CircleCI\n. Thanks!\n. Thanks!\n. ",
    "bradobro": "Sorry for the bogus fix guys! I think I was expecting too much complexity, coming from some other Jasmine runners. I woke up at 3 last night and realized, \"Duh! It's just another asset file run through sprockets, so stick in the '=' and get going! Beautiful!\"\nNice stuff, guys! Thanks for the great work!\n. Sorry for the bogus fix guys! I think I was expecting too much complexity, coming from some other Jasmine runners. I woke up at 3 last night and realized, \"Duh! It's just another asset file run through sprockets, so stick in the '=' and get going! Beautiful!\"\nNice stuff, guys! Thanks for the great work!\n. ",
    "lenntt": "I found out phantomjs works pretty ok out of the box, so I'll give it a go and therefore dont necessarily need it for now, though it would be welcome\n. Thanks!\n. Thanks, I indeed solved my problem by installing PhantomJS.\nI didn't realise this might be a PhantomJS problem.\nUnfortunately, I dont have a CentOS local VM available at the moment to quickly reproduce the problem.\n. Thanks for clearing that up, didn't know github had this tag filter builtin.\n. apparently, I should've set config.coverage_reports and config.coverage_output_dir for coverage. I think a default value or a better error would have helped here.\nHowever, setting config.lines_coverage_threshold      = 100 still gives me the same error. How does this work?\n. I found out phantomjs works pretty ok out of the box, so I'll give it a go and therefore dont necessarily need it for now, though it would be welcome\n. Thanks!\n. Thanks, I indeed solved my problem by installing PhantomJS.\nI didn't realise this might be a PhantomJS problem.\nUnfortunately, I dont have a CentOS local VM available at the moment to quickly reproduce the problem.\n. Thanks for clearing that up, didn't know github had this tag filter builtin.\n. apparently, I should've set config.coverage_reports and config.coverage_output_dir for coverage. I think a default value or a better error would have helped here.\nHowever, setting config.lines_coverage_threshold      = 100 still gives me the same error. How does this work?\n. ",
    "dkubb": "Hmm, travis seems to be reporting an error unrelated to my change. I see in https://github.com/modeset/teabag/pull/50 there are attempts to fix it too, so I won't duplicate that effort unless it gets blocked.\n. @jejacks0n it probably won't be right away. I made a note in our project tracker to revisit this in a later sprint (for us), assuming someone hasn't beat me to it.\n. Hmm, travis seems to be reporting an error unrelated to my change. I see in https://github.com/modeset/teabag/pull/50 there are attempts to fix it too, so I won't duplicate that effort unless it gets blocked.\n. @jejacks0n it probably won't be right away. I made a note in our project tracker to revisit this in a later sprint (for us), assuming someone hasn't beat me to it.\n. ",
    "megalithic": "I'm very new to your project and to RoR in general, but have been using AngularJS daily for the past couple months. I noticed that you say to enable teabag-angular instead of teabag-jasmine in the teabag.rb initializer. This seems odd to me since Jasmine is the default testing framework used by the AngularJS team when they use the Karma/Testacular test-runner. Since the suite-javascripts entry accepts an array,should we be passing in both teabag-angular and teabag-jasmine (or teabag-mocha if it suites the user's fancy)?\n. So, some good news. \nI've got Teabag setup to run all of my existing model and controller unit tests (they were already using Jasmine) and they all pass. Since I was already leveraging Sprockets to handle my asset loading, etc, everything just worked. (spent a bit of time having to configure the suite block, but once that was all set, all was golden).\nI left suite.javascripts set to \"teabag-jasmine\".\nThe only issues I'm having now are testing AngularJS directives. This is where a test runner built specifically FOR Angular comes into play. Karma (the defacto test runner for Angular) already has several hooks in place, specifically for Jasmine (mocks, etc) to handle some of the mocking heavy-lifting.\nOnce I get passed those final nagging issues between Teabag/Angular/haml templates for my directives, I'll post back with my findings and updates.\nMy only other \"annoyances\", and this is minor, but the startup of Teabag is poor, and I saw there was already some chatter around that in another issue log. I'll give those a read and try the suggested solutions.\nThanks again for this project.\n. @jejacks0n yeah 3.2.13 is where we're at. thanks much for the response. i'll give that link a read.\n. @jejacks0n Great news, I got past all of my template issues with directive testing and successfully using Teabag. Is it ok if I update the Using Angular section of the wiki with a contrived, but accurate example of directive testing with Jasmine?\n. @jejacks0n Done! Please give it a look-through.. https://github.com/modeset/teabag/wiki/Using-Angular\n. @randallb that'd be awesome if you could add some examples of that.\n. I'm very new to your project and to RoR in general, but have been using AngularJS daily for the past couple months. I noticed that you say to enable teabag-angular instead of teabag-jasmine in the teabag.rb initializer. This seems odd to me since Jasmine is the default testing framework used by the AngularJS team when they use the Karma/Testacular test-runner. Since the suite-javascripts entry accepts an array,should we be passing in both teabag-angular and teabag-jasmine (or teabag-mocha if it suites the user's fancy)?\n. So, some good news. \nI've got Teabag setup to run all of my existing model and controller unit tests (they were already using Jasmine) and they all pass. Since I was already leveraging Sprockets to handle my asset loading, etc, everything just worked. (spent a bit of time having to configure the suite block, but once that was all set, all was golden).\nI left suite.javascripts set to \"teabag-jasmine\".\nThe only issues I'm having now are testing AngularJS directives. This is where a test runner built specifically FOR Angular comes into play. Karma (the defacto test runner for Angular) already has several hooks in place, specifically for Jasmine (mocks, etc) to handle some of the mocking heavy-lifting.\nOnce I get passed those final nagging issues between Teabag/Angular/haml templates for my directives, I'll post back with my findings and updates.\nMy only other \"annoyances\", and this is minor, but the startup of Teabag is poor, and I saw there was already some chatter around that in another issue log. I'll give those a read and try the suggested solutions.\nThanks again for this project.\n. @jejacks0n yeah 3.2.13 is where we're at. thanks much for the response. i'll give that link a read.\n. @jejacks0n Great news, I got past all of my template issues with directive testing and successfully using Teabag. Is it ok if I update the Using Angular section of the wiki with a contrived, but accurate example of directive testing with Jasmine?\n. @jejacks0n Done! Please give it a look-through.. https://github.com/modeset/teabag/wiki/Using-Angular\n. @randallb that'd be awesome if you could add some examples of that.\n. ",
    "mattschultz": "Are there any plans to support Protractor? It's going to replace ngScenario for e2e testing.\nhttps://github.com/angular/protractor/\n. Are there any plans to support Protractor? It's going to replace ngScenario for e2e testing.\nhttps://github.com/angular/protractor/\n. ",
    "kakoni": "Hi! So I'm on rails 4 / angular 1.2\nHaving hard time getting directive specs to work (=well simple ones work ok, but if theres templateurl then things get ugly). I've tried to follow instruction as per Using-angular wiki-page, no luck. \n. @ysbaddaden Yes, ended up manually inserting those templates using templatecache. Does the job, but extra work;)\nTwo things came to my mind\n1) Would it be possible to combine https://github.com/karma-runner/karma-ng-html2js-preprocessor and teaspoon somehow?\nor\n2) Something like this is cooking up (https://github.com/dmathieu/angular-rails-templates) (Well, didnt get that to work with r4 yet)\n. Hi! So I'm on rails 4 / angular 1.2\nHaving hard time getting directive specs to work (=well simple ones work ok, but if theres templateurl then things get ugly). I've tried to follow instruction as per Using-angular wiki-page, no luck. \n. @ysbaddaden Yes, ended up manually inserting those templates using templatecache. Does the job, but extra work;)\nTwo things came to my mind\n1) Would it be possible to combine https://github.com/karma-runner/karma-ng-html2js-preprocessor and teaspoon somehow?\nor\n2) Something like this is cooking up (https://github.com/dmathieu/angular-rails-templates) (Well, didnt get that to work with r4 yet)\n. ",
    "aaronjensen": "@ngan thanks for the suggestion. We do use zeus already and our server is restarted automatically when configuration files change so spring won't actually help us. I think spring and/or zeus support for teabag would be great, but @jejacks0n's suggestion of the fake server seems perfect for our usage. I'll give it a shot.\n. Looks like I got it working, for posterity, this is what worked for me:\n``` ruby\nrequire 'teabag/server'\nTeabag::Server.class_eval do\n  def start; end\ndef url\n    'http://localhost:3000'\n  end\nend\n``\n. as for how to support it in a more flexible way @jejacks0n, you may take a look at how guard-jasmine does it, it supports specifying the server asnone` along w/ a port. This works out pretty well.\n. Looks like teabag loads the rails environment any way, so this doesn't actually help much right now. To work around it using zeus I've added this to my plan (I'm sure there's a good way to parse the args and such I just haven't looked into it yet):\n``` ruby\n  def teabag_console\n    require 'teabag/console'\n    @console = ::Teabag::Console.new({})\n  end\ndef teabag(argv=ARGV)\n    @console.execute({}, [argv[0]])\n  end\n```\nand in zeus.json within development_environment:\njson\n          \"teabag_console\": {\n            \"teabag\": []\n          }\n. Removing the rails dependency from teabag_env seemed to be quite the rabbit hole. The gem wants to use rails in a few places at least, I stopped going down the rabbit hole and used zeus instead which worked just fine. It's still slower than I'd like (it takes about 2 seconds to run a spec end to end) but it seems almost a second of that is phantomjs starting up.\n. It looks like the majority of the time is spent in javascript_include_tag:\n96.52%   0.16%   9.74    0.02    0.00    9.72    1486    Sprockets::Helpers::RailsHelper#javascript_include_tag\nIt is not slow if I run it in the test environment. I'm wondering if it is related to the body=1/debug expansion sprockets does\n. Yes, that helps quite a bit. It runs in 800ms now vs 4000ms. All my tests fail though.\n. they seem to be missing dependencies. maybe some sort of load order problem. \n. Ah, yes. Several times.\n. No, I'm on 3.2.12\n. Thanks. For posterity, if you're on Rails 3.2.12, this monkey patch will sort you out. I'm not sure how it plays into the teabag coverage stuff but we're not using it.\n``` ruby\n  Sprockets::Helpers::RailsHelper.module_eval do\n    def javascript_include_tag(*sources)\n      options = sources.extract_options!\n      debug = options.key?(:debug) ? options.delete(:debug) : debug_assets?\n      body  = options.key?(:body)  ? options.delete(:body)  : false\n      digest  = options.key?(:digest)  ? options.delete(:digest)  : digest_assets?\n  sources.collect do |source|\n    if debug && asset = asset_paths.asset_for(source, 'js')\n      asset.to_a.map { |dep|\n        super(dep.pathname.to_s, { :src => path_to_asset(dep, :ext => 'js', :body => true, :digest => digest) }.merge!(options))\n      }\n    else\n      super(source.to_s, { :src => path_to_asset(source, :ext => 'js', :body => body, :digest => digest) }.merge!(options))\n    end\n  end.flatten.uniq.join(\"\\n\").html_safe\nend\n\ndef stylesheet_link_tag(*sources)\n  options = sources.extract_options!\n  debug   = options.key?(:debug) ? options.delete(:debug) : debug_assets?\n  body    = options.key?(:body)  ? options.delete(:body)  : false\n  digest  = options.key?(:digest)  ? options.delete(:digest)  : digest_assets?\n\n  sources.collect do |source|\n    if debug && asset = asset_paths.asset_for(source, 'css')\n      asset.to_a.map { |dep|\n        super(dep.pathname.to_s, { :href => path_to_asset(dep, :ext => 'css', :body => true, :protocol => :request, :digest => digest) }.merge!(options))\n      }\n    else\n      super(source.to_s, { :href => path_to_asset(source, :ext => 'css', :body => body, :protocol => :request, :digest => digest) }.merge!(options))\n    end\n  end.flatten.uniq.join(\"\\n\").html_safe\nend\n\nend\nTeabag::SpecHelper.module_eval do\n    def javascript_include_tag_for_teabag(sources)\n      options = sources.extract_options!\n      javascript_include_tag(sources, :debug => true)\n    end\n  end\n```\nedit: updated to add :debug => true\n. I'll see what I can do. The problem isn't actually using the right version phantomjs, it's depending on optional gems, especially ones that have poor dependency management.\n. My recommendation is in the original issue, suggest adding gem 'phantomjs' to the gemfile along with gem 'teaspoon' and remove it from the gemspec.\n. Yeah, I hear you. Something as simple as an error when they run the command line tool that tells them what to do if it can't find phantomjs would work just fine I think. \n. I can appreciate the desire to make things easier for users. I think though that you're hearing feedback from people for which this has actually made things significantly more difficult. Unnecessary gem dependencies, in my experience, are always a bad idea. It is better to put both gems in your gemfile, which you document in your readme and/or notify the user when they try to use it if the optional gem or other dependency is missing.\nTo put this in concrete terms:\nUsers of your gem CANNOT use Capybara 2.1, which is the latest version of capybara.\nThere is a workaround, but the users must discover it (listed here for their convenience):\nruby\n  # https://github.com/colszowka/phantomjs-gem/commit/f8f79e898c2942398ba8949e11c198193d50d9a3\n  # https://github.com/modeset/teaspoon/issues/102\n  # Necessary because teaspoon requires it and the released version\n  # of phantomjs locks us to capybara 2.0\n  gem 'phantomjs', github: 'colszowka/phantomjs-gem'\nPoltergeist is a successful user of phantomjs, they require it, but they do not require the phantomjs gem in their gemspec. There are other examples as well I'm sure. \nI'm probably not going to get around to submitting a pull request for this as I said I might. We've worked around the issue for now so we don't have an immediate need, but I would guess there are other users of Teaspoon would like to be able to use Capybara 2.1.\nBy the way, here is the commit to phantomjs-gem that fixed the issue: https://github.com/colszowka/phantomjs-gem/commit/f8f79e898c2942398ba8949e11c198193d50d9a3\n. awesome, thanks. any chance of a new gem release? Thanks :)\n. @ngan thanks for the suggestion. We do use zeus already and our server is restarted automatically when configuration files change so spring won't actually help us. I think spring and/or zeus support for teabag would be great, but @jejacks0n's suggestion of the fake server seems perfect for our usage. I'll give it a shot.\n. Looks like I got it working, for posterity, this is what worked for me:\n``` ruby\nrequire 'teabag/server'\nTeabag::Server.class_eval do\n  def start; end\ndef url\n    'http://localhost:3000'\n  end\nend\n``\n. as for how to support it in a more flexible way @jejacks0n, you may take a look at how guard-jasmine does it, it supports specifying the server asnone` along w/ a port. This works out pretty well.\n. Looks like teabag loads the rails environment any way, so this doesn't actually help much right now. To work around it using zeus I've added this to my plan (I'm sure there's a good way to parse the args and such I just haven't looked into it yet):\n``` ruby\n  def teabag_console\n    require 'teabag/console'\n    @console = ::Teabag::Console.new({})\n  end\ndef teabag(argv=ARGV)\n    @console.execute({}, [argv[0]])\n  end\n```\nand in zeus.json within development_environment:\njson\n          \"teabag_console\": {\n            \"teabag\": []\n          }\n. Removing the rails dependency from teabag_env seemed to be quite the rabbit hole. The gem wants to use rails in a few places at least, I stopped going down the rabbit hole and used zeus instead which worked just fine. It's still slower than I'd like (it takes about 2 seconds to run a spec end to end) but it seems almost a second of that is phantomjs starting up.\n. It looks like the majority of the time is spent in javascript_include_tag:\n96.52%   0.16%   9.74    0.02    0.00    9.72    1486    Sprockets::Helpers::RailsHelper#javascript_include_tag\nIt is not slow if I run it in the test environment. I'm wondering if it is related to the body=1/debug expansion sprockets does\n. Yes, that helps quite a bit. It runs in 800ms now vs 4000ms. All my tests fail though.\n. they seem to be missing dependencies. maybe some sort of load order problem. \n. Ah, yes. Several times.\n. No, I'm on 3.2.12\n. Thanks. For posterity, if you're on Rails 3.2.12, this monkey patch will sort you out. I'm not sure how it plays into the teabag coverage stuff but we're not using it.\n``` ruby\n  Sprockets::Helpers::RailsHelper.module_eval do\n    def javascript_include_tag(*sources)\n      options = sources.extract_options!\n      debug = options.key?(:debug) ? options.delete(:debug) : debug_assets?\n      body  = options.key?(:body)  ? options.delete(:body)  : false\n      digest  = options.key?(:digest)  ? options.delete(:digest)  : digest_assets?\n  sources.collect do |source|\n    if debug && asset = asset_paths.asset_for(source, 'js')\n      asset.to_a.map { |dep|\n        super(dep.pathname.to_s, { :src => path_to_asset(dep, :ext => 'js', :body => true, :digest => digest) }.merge!(options))\n      }\n    else\n      super(source.to_s, { :src => path_to_asset(source, :ext => 'js', :body => body, :digest => digest) }.merge!(options))\n    end\n  end.flatten.uniq.join(\"\\n\").html_safe\nend\n\ndef stylesheet_link_tag(*sources)\n  options = sources.extract_options!\n  debug   = options.key?(:debug) ? options.delete(:debug) : debug_assets?\n  body    = options.key?(:body)  ? options.delete(:body)  : false\n  digest  = options.key?(:digest)  ? options.delete(:digest)  : digest_assets?\n\n  sources.collect do |source|\n    if debug && asset = asset_paths.asset_for(source, 'css')\n      asset.to_a.map { |dep|\n        super(dep.pathname.to_s, { :href => path_to_asset(dep, :ext => 'css', :body => true, :protocol => :request, :digest => digest) }.merge!(options))\n      }\n    else\n      super(source.to_s, { :href => path_to_asset(source, :ext => 'css', :body => body, :protocol => :request, :digest => digest) }.merge!(options))\n    end\n  end.flatten.uniq.join(\"\\n\").html_safe\nend\n\nend\nTeabag::SpecHelper.module_eval do\n    def javascript_include_tag_for_teabag(sources)\n      options = sources.extract_options!\n      javascript_include_tag(sources, :debug => true)\n    end\n  end\n```\nedit: updated to add :debug => true\n. I'll see what I can do. The problem isn't actually using the right version phantomjs, it's depending on optional gems, especially ones that have poor dependency management.\n. My recommendation is in the original issue, suggest adding gem 'phantomjs' to the gemfile along with gem 'teaspoon' and remove it from the gemspec.\n. Yeah, I hear you. Something as simple as an error when they run the command line tool that tells them what to do if it can't find phantomjs would work just fine I think. \n. I can appreciate the desire to make things easier for users. I think though that you're hearing feedback from people for which this has actually made things significantly more difficult. Unnecessary gem dependencies, in my experience, are always a bad idea. It is better to put both gems in your gemfile, which you document in your readme and/or notify the user when they try to use it if the optional gem or other dependency is missing.\nTo put this in concrete terms:\nUsers of your gem CANNOT use Capybara 2.1, which is the latest version of capybara.\nThere is a workaround, but the users must discover it (listed here for their convenience):\nruby\n  # https://github.com/colszowka/phantomjs-gem/commit/f8f79e898c2942398ba8949e11c198193d50d9a3\n  # https://github.com/modeset/teaspoon/issues/102\n  # Necessary because teaspoon requires it and the released version\n  # of phantomjs locks us to capybara 2.0\n  gem 'phantomjs', github: 'colszowka/phantomjs-gem'\nPoltergeist is a successful user of phantomjs, they require it, but they do not require the phantomjs gem in their gemspec. There are other examples as well I'm sure. \nI'm probably not going to get around to submitting a pull request for this as I said I might. We've worked around the issue for now so we don't have an immediate need, but I would guess there are other users of Teaspoon would like to be able to use Capybara 2.1.\nBy the way, here is the commit to phantomjs-gem that fixed the issue: https://github.com/colszowka/phantomjs-gem/commit/f8f79e898c2942398ba8949e11c198193d50d9a3\n. awesome, thanks. any chance of a new gem release? Thanks :)\n. ",
    "brett-richardson": "Using this solution, is it possible to have istanbul coverage reported?\nI've played around with different settings but can't seem to figure out how the istanbul data is getting passed around.\n. Have you tried precompiling assets beforehand?\n. No, Rails 3.2.14\n. Using this solution, is it possible to have istanbul coverage reported?\nI've played around with different settings but can't seem to figure out how the istanbul data is getting passed around.\n. Have you tried precompiling assets beforehand?\n. No, Rails 3.2.14\n. ",
    "thedeeno": "Perfect!\nThank you\n. I tried disabling logging, didn't speed things up at all.\n. The duration is in the browser is 0.073 s. So I think the actual page is running very fast. It's the server side code that seems to be slow. How long does it take for the server to respond in your test suite? Does the order of seconds sound right?\n. Aha, it appears teabag isn't honoring config.assets.debug = false in my environment file. So I'm making 100s of requests for tiny files. Is there a way to configure teabag so it concatenates (but does not compress) my javascripts? My app already does this in development/test mode, but teabag is sidestepping this pipeline configuration.\nIt looks like this helper is where the magic happens. I've tried to monkey patch it but my attempts have failed thus far; it always creates script tags for every single file.\nThoughts?\n@jedschneider You're right, it's an asset load issue. I missed it because teabag is sidestepping my configuration and didn't notice at first. @jejacks0n's suggestion to watch response times revealed this.\n. I understand the issue when running form the console, but does debug need to be false for the browser runner?\nWhat's the point of the hack for javascript_include_tag?\nWhile I agree that including everything for each spec is a bad idea, the problem still remains. If I have many dependencies for a spec I'll suffer slowness from requesting - a side effect of the test harness, not the test themselves. At the core, teabag is removing the concatenation feature from the asset pipeline, but I don't really understand why. Is it just for clean 404 errors?\n. Thanks for getting back to me and taking the time to help me wrap my head around this.\n\nit doesn't do anything with the debug configuration when you're not running it from the console\n\nI'm using the browser runner and setting config.assets.debug = false does nothing. Is that expected?\nIf I shorten the hack so that is looks like this:\nruby\ndef javascript_include_tag_for_teabag(*sources)\n  options = sources.extract_options!\n  sources.collect do |source|\n    javascript_include_tag(source) unless source.blank?\n  end.flatten.uniq.join(\"\\n\").html_safe\nend\ndebug = false works as expected. \nWhat's the point of the below (which I removed)? It seems to be doing what the asset pipeline is supposed to do - calculate and include dependencies.\n``` ruby\njavascript_include_tag_for_teabag\n...\nasset = defined?(lookup_asset_for_path) ? lookup_asset_for_path(source, type: :javascript) : asset_paths.asset_for(source, \"js\")\nif asset.respond_to?(:logical_path)\n  asset.to_a.map do |dep|\n    javascript_include_tag(dep.pathname.to_s, src: asset_src(dep, options[:instrument]), type: \"text/javascript\").split(\"\\n\")\n  end\nend\n...\n```\nexcept it's doing it manually one by one, so there's no way for the pipeline to concatenate. Is that needed for the console runner or something?\n. Oh I see. It's the coverage reports that this change breaks. I'm not looking at them yet so didn't notice any difference.\n. Cool, just making sure this wasn't something that you could use. Thanks for helping me understand!\n. Perfect!\nThank you\n. I tried disabling logging, didn't speed things up at all.\n. The duration is in the browser is 0.073 s. So I think the actual page is running very fast. It's the server side code that seems to be slow. How long does it take for the server to respond in your test suite? Does the order of seconds sound right?\n. Aha, it appears teabag isn't honoring config.assets.debug = false in my environment file. So I'm making 100s of requests for tiny files. Is there a way to configure teabag so it concatenates (but does not compress) my javascripts? My app already does this in development/test mode, but teabag is sidestepping this pipeline configuration.\nIt looks like this helper is where the magic happens. I've tried to monkey patch it but my attempts have failed thus far; it always creates script tags for every single file.\nThoughts?\n@jedschneider You're right, it's an asset load issue. I missed it because teabag is sidestepping my configuration and didn't notice at first. @jejacks0n's suggestion to watch response times revealed this.\n. I understand the issue when running form the console, but does debug need to be false for the browser runner?\nWhat's the point of the hack for javascript_include_tag?\nWhile I agree that including everything for each spec is a bad idea, the problem still remains. If I have many dependencies for a spec I'll suffer slowness from requesting - a side effect of the test harness, not the test themselves. At the core, teabag is removing the concatenation feature from the asset pipeline, but I don't really understand why. Is it just for clean 404 errors?\n. Thanks for getting back to me and taking the time to help me wrap my head around this.\n\nit doesn't do anything with the debug configuration when you're not running it from the console\n\nI'm using the browser runner and setting config.assets.debug = false does nothing. Is that expected?\nIf I shorten the hack so that is looks like this:\nruby\ndef javascript_include_tag_for_teabag(*sources)\n  options = sources.extract_options!\n  sources.collect do |source|\n    javascript_include_tag(source) unless source.blank?\n  end.flatten.uniq.join(\"\\n\").html_safe\nend\ndebug = false works as expected. \nWhat's the point of the below (which I removed)? It seems to be doing what the asset pipeline is supposed to do - calculate and include dependencies.\n``` ruby\njavascript_include_tag_for_teabag\n...\nasset = defined?(lookup_asset_for_path) ? lookup_asset_for_path(source, type: :javascript) : asset_paths.asset_for(source, \"js\")\nif asset.respond_to?(:logical_path)\n  asset.to_a.map do |dep|\n    javascript_include_tag(dep.pathname.to_s, src: asset_src(dep, options[:instrument]), type: \"text/javascript\").split(\"\\n\")\n  end\nend\n...\n```\nexcept it's doing it manually one by one, so there's no way for the pipeline to concatenate. Is that needed for the console runner or something?\n. Oh I see. It's the coverage reports that this change breaks. I'm not looking at them yet so didn't notice any difference.\n. Cool, just making sure this wasn't something that you could use. Thanks for helping me understand!\n. ",
    "inlineblock": "Squashed into one commit now. The README.md file is updated. When/if the pull request is completed, i'll updated the wiki.\n. well that squash didn't work. haha\n. Hahah, yeah well i fixed it. Sorry about that previous explosion!\n. Thats all it is. The configuration was when I was running 0.7.4, then i merged in 0.7.6 and undid my stuff since its no longer needed. So to override, you still need that config to your suite, in my first comment, but the actual code that makes it work is a single liner.\n. Fixed it. Turns out my test implementation of Rails config wasn't valid one and I initially coded it to an invalid one. The prefix should start with a /.\n. Also I deserve a slap on the wrists for not running the specs afterwards.\n. Squashed into one commit now. The README.md file is updated. When/if the pull request is completed, i'll updated the wiki.\n. well that squash didn't work. haha\n. Hahah, yeah well i fixed it. Sorry about that previous explosion!\n. Thats all it is. The configuration was when I was running 0.7.4, then i merged in 0.7.6 and undid my stuff since its no longer needed. So to override, you still need that config to your suite, in my first comment, but the actual code that makes it work is a single liner.\n. Fixed it. Turns out my test implementation of Rails config wasn't valid one and I initially coded it to an invalid one. The prefix should start with a /.\n. Also I deserve a slap on the wrists for not running the specs afterwards.\n. ",
    "phiggins": "\nI have a good friend that had a product's initial build out done at Substantial in Seattle, maybe you worked on it?\n\nHehe, if it was in the last year or probably not, but cool to know!\n\nafaik we do need the dummy rails app, it is the standard practice for programmatically testing Rails engines\n\nYeah I understand that, what I was trying to point out in my first message is that the gem packaged version leaves out several other files that would be necessary to run the tests, so including the spec/ directory in the gem seems unnecessary.\nThe standard practice for gems packaged with Bundler is to let git keep track of the files to include so that extra files don't creep in like this. Here's the first example I could find: https://github.com/rspec/rspec-core/blob/master/rspec-core.gemspec#L18-20\n. @jejacks0n I was typing my reply to @jedschneider as you posted, didn't mean to belabor the issue. Thanks guys!\n. >  I have a good friend that had a product's initial build out done at Substantial in Seattle, maybe you worked on it?\nHehe, if it was in the last year or probably not, but cool to know!\n\nafaik we do need the dummy rails app, it is the standard practice for programmatically testing Rails engines\n\nYeah I understand that, what I was trying to point out in my first message is that the gem packaged version leaves out several other files that would be necessary to run the tests, so including the spec/ directory in the gem seems unnecessary.\nThe standard practice for gems packaged with Bundler is to let git keep track of the files to include so that extra files don't creep in like this. Here's the first example I could find: https://github.com/rspec/rspec-core/blob/master/rspec-core.gemspec#L18-20\n. @jejacks0n I was typing my reply to @jedschneider as you posted, didn't mean to belabor the issue. Thanks guys!\n. ",
    "kowal": "@jejacks0n I think this still isn't fixed in 0.7.7:\n$ du -h vendor/cache/teaspoon-0.7.7.gem \n$ 11M   teaspoon-0.7.7.gem\ngem package still includes spec and test directories.\n. Rails application can be run on some application servers in context, let's say /app, so it is accessible in development at http://localhost:3000/app/. To configure it this way we're using relative_url_root [1] option.\nConfiguring it for production is different subject [2], important thing to note is that we want to have the same context root in all environments.\nGiven assumptions above, I created fresh Rails 4 application, configured to be visible at http://localhost:3000/app/ and added example spec [3].\nWhen I hit http://localhost:3000/app/teaspoon I'm seeing request to Teaspoon::SpecController#suites ended with 200, however URLs to teaspon.css, teaspoon-teaspoon.js and all suites/examples on the page are missing /app prefix. Page looks ugly and doesn't work :)\nI tried using Teaspoon.setup.mount_at option but I guess it wasn't created for such case.\n[1] http://edgeguides.rubyonrails.org/configuring.html#deploy-to-a-subdirectory-relative-url-root\n[2] http://stevesaarinen.com/blog/2013/05/16/mounting-rails-in-a-subdirectory-with-nginx-and-unicorn/\n[3] https://github.com/kowal/rails4_teaspoon_test_app\n. @jejacks0n , I've updated my branch. I'm starting to think that this could be actually rails engine issue. I've found several examples that engine authors struggle with generating proper URL when user app is deployed into sub directory. See https://github.com/rails/rails/issues/9058 and:\n- https://github.com/spohlenz/tinymce-rails/issues/96\n- https://github.com/apotonick/cells/pull/158\n- http://stackoverflow.com/questions/5401842/why-cant-i-set-actioncontroller-relative-url-root-in-a-jruby-on-rails-app-runni\nI think my fix might not work with Rails 3.1.x, I'll check over the weekend :)\n. This patch works fine with rails 3.2.12.\n. @jejacks0n , any update with this one?\n. Thanks! We're using same patch with 0.7.7 and everything works fine so far.\n. I've noticed that \"remove\" filter link is loosing context.\nI guess we also have to update each usage of Teaspoon.root (to prepend new context option) in CoffeeScript files. Is it enough to set it properly in runner.html.erb and it just propagates to all required places?\nTeaspoon.root = <%=raw Teaspoon.configuration.mount_at.inspect %>;\nIt might be better to add some new method to Teaspoon.configuration instead of joining context and mount_at in the runner template.\n. This is still connected with original issue..\nCurrently with this PR included in our version of teaspoon, we can use it in app deployed under custom context root - let's say http://localhost:3000/some-app/teaspoon/default. However when I want to return from filtered specs, using 'remove' link - it returns to http://localhost:3000/teaspoon/default, which is wrong.\n. Created #166 for issue with 'Remove' link.\n. I think you are right, if Teaspoon has to consider relative root it always should be the same root as in application so making it configurable doesn't make much sense. I've added  Taspoon.configuration.context just to have all path/URL related variable in one place. I guess it should be stored somewhere anyway, but can be read only.\n. Yes, it should be fine I guess. To summarize all work on this so far - I've changed:\n- Teaspoon::Suite#link\n- Teaspoon::SpecHelper#asset_src\n- runner.html.erb (in #166)\nYesterday I've also found that I couldn't run bundle exec teaspoon (or rake) in my fresh test rails application. First issue was missing relative url root in Teaspoon::Console#url, however after fixing that it failed because Teaspoon::Server was starting without relative root set properly.\n. See https://github.com/modeset/teaspoon/pull/133#issuecomment-33458040 for all path helpers in  teaspoon which uses context root.\nOn the other hand, there are https://github.com/rails/rails/issues/9058, https://github.com/rails/rails/issues/4308 or https://github.com/rails/rails/issues/5122 - which indicate that this is problem in all rals engines and it might be fixed in Rails some day..\n. Cool. I'll check 0.8 branch and let you know if everything works fine.\n. @jejacks0n, I update my test rails application (it's pushed to https://github.com/kowal/rails4_teaspoon_test_app) and indeed hitting http://localhost:3000/app/teaspoon/ works fine (I can see test suites list, no errors), however hitting http://localhost:3000/app/teaspoon/default ends up with errors in JS console:\nUncaught ReferenceError: jasmine is not defined teaspoon-jasmine.js:1153\n(anonymous function) teaspoon-jasmine.js:1153\n(anonymous function) teaspoon-jasmine.js:1335\nUncaught ReferenceError: describe is not defined application_spec.js:2\n(anonymous function) application_spec.js:2\nAny idea why this isn't working?\n. Yes, I've regenerated teaspoon files and now I can successfully run specs in browser. Yay!\nHowever, I'm getting this only when I do not set config.assets.prefix. My setup in Rails is:\n```\ndevelopment.rb\n..\nconfig.relative_url_root = \"/app\"\nconfig.ru\nrequire ::File.expand_path('../config/environment',  FILE)\nmap TeaspoonTest::Application.config.relative_url_root || \"/\" do\n  run Rails.application\nend\n```\nAlso, running via CLI still doesn't work (either rake or binary):\n```\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:56797/teaspoon/default\nSyntaxError: Parse error\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:56797/teaspoon/default?reporter=Console:13\nSyntaxError: Parse error\n...\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:56797/teaspoon/default?reporter=Console:25\nFailed to load: http://127.0.0.1:56797/teaspoon/default?reporter=Console\n``\n. Everyting is pushed to https://github.com/kowal/rails4_teaspoon_test_app\n. See also my https://github.com/modeset/teaspoon/pull/133#issuecomment-33458040 - about error in command line.\n. Thanks for your patience with this one :) Correct me if I'm wrong:\n- dummy app in teaspoon specs (in master branch) is actually not running in '/relative' sub directory, it only respects that setting if app will be deployed under such directory. You can see in capybara that URL in browser is something likehttp://127.0.0.1:60623/teaspoon/default.\n- wrapping in config.ru is required to actually start application and see it underhttp://localhost:3000/relative/teaspoon/default` - if you manage to start rails 4 app with only setting this https://github.com/modeset/teaspoon/blob/master/spec/dummy/config/application.rb#L30, how do you start it? You have to tell rack to rewrite all request from '/relative' to your app, in development one way to do it is wrapping in config.ru, in production it can be done by app container (Tomcat) and Rails does not even know about it.\nI think we can close it for now and I have to investigate something else than wrapping in config.ru, which does not break teaspoon in command line.\nAgain, thanks!\n. I've tried again on fresh rails 4 application, this time I simply used Trinidad server to run application in sub directory. Almost everything works fine :)\nTo sum up:\n- Rails 4.0.1, Teaspoon branch 0.8\n- Set up rails in config/application.rb\n``` ruby\nconfig.relative_url_root = \"/relative\"\nthis must be set for any asset paths to be correct!\nconfig.assets.prefix = \"/relative/assets\" if defined?(Teaspoon::Console)\n```\n- Set up Trinidad in config/trinidad.yml\n```\ncontext_path: /relative\n``\n- Run app viarails s trinidad`\nResults:\n- Web UI at http://localhost:3000/relative/teaspoon/default - OK\n- teaspoon / bundle exec teaspoon - OK\n- rake teaspoon - ERROR:\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n # http://127.0.0.1:57969/teaspoon/default?reporter=Console:13\n...\nLet's forget legacy config.ru hack. The only thing left to fix is the difference between rake task and teaspoon binary.\nI've pushed all this into new repo at https://github.com/kowal/rails4_on_trinidad.\n. > Configure your server type?\nSorry, but I don't get what you are asking about?\n. I'm getting SyntaxError: Parse error only when running rake teaspoon. In browser everything is OK, teaspoon binary also works fine.\nBoth Teaspoon::CommandLine and teaspoon.rake invokes at some point Teaspoon::Console.new(options).failures? with same arguments and somehow rake is doing things differently - is this expected behaviour? Are you saying that server might be configured differently in those two cases?\nAlso:\n- using bundle exec .. doesn't change anything - same error only for rake\n- switching to selenium also fails only for rake - this time however with timeout\nSo the issue I'm complaining about now is inconsistency between running rake and bin/teaspoon script when rails are configured with relative_url_root (this is important to reproduce it).\nI was trying to debug it more closely, unfortunately without any results... :(\n. @jejacks0n I think this still isn't fixed in 0.7.7:\n$ du -h vendor/cache/teaspoon-0.7.7.gem \n$ 11M   teaspoon-0.7.7.gem\ngem package still includes spec and test directories.\n. Rails application can be run on some application servers in context, let's say /app, so it is accessible in development at http://localhost:3000/app/. To configure it this way we're using relative_url_root [1] option.\nConfiguring it for production is different subject [2], important thing to note is that we want to have the same context root in all environments.\nGiven assumptions above, I created fresh Rails 4 application, configured to be visible at http://localhost:3000/app/ and added example spec [3].\nWhen I hit http://localhost:3000/app/teaspoon I'm seeing request to Teaspoon::SpecController#suites ended with 200, however URLs to teaspon.css, teaspoon-teaspoon.js and all suites/examples on the page are missing /app prefix. Page looks ugly and doesn't work :)\nI tried using Teaspoon.setup.mount_at option but I guess it wasn't created for such case.\n[1] http://edgeguides.rubyonrails.org/configuring.html#deploy-to-a-subdirectory-relative-url-root\n[2] http://stevesaarinen.com/blog/2013/05/16/mounting-rails-in-a-subdirectory-with-nginx-and-unicorn/\n[3] https://github.com/kowal/rails4_teaspoon_test_app\n. @jejacks0n , I've updated my branch. I'm starting to think that this could be actually rails engine issue. I've found several examples that engine authors struggle with generating proper URL when user app is deployed into sub directory. See https://github.com/rails/rails/issues/9058 and:\n- https://github.com/spohlenz/tinymce-rails/issues/96\n- https://github.com/apotonick/cells/pull/158\n- http://stackoverflow.com/questions/5401842/why-cant-i-set-actioncontroller-relative-url-root-in-a-jruby-on-rails-app-runni\nI think my fix might not work with Rails 3.1.x, I'll check over the weekend :)\n. This patch works fine with rails 3.2.12.\n. @jejacks0n , any update with this one?\n. Thanks! We're using same patch with 0.7.7 and everything works fine so far.\n. I've noticed that \"remove\" filter link is loosing context.\nI guess we also have to update each usage of Teaspoon.root (to prepend new context option) in CoffeeScript files. Is it enough to set it properly in runner.html.erb and it just propagates to all required places?\nTeaspoon.root = <%=raw Teaspoon.configuration.mount_at.inspect %>;\nIt might be better to add some new method to Teaspoon.configuration instead of joining context and mount_at in the runner template.\n. This is still connected with original issue..\nCurrently with this PR included in our version of teaspoon, we can use it in app deployed under custom context root - let's say http://localhost:3000/some-app/teaspoon/default. However when I want to return from filtered specs, using 'remove' link - it returns to http://localhost:3000/teaspoon/default, which is wrong.\n. Created #166 for issue with 'Remove' link.\n. I think you are right, if Teaspoon has to consider relative root it always should be the same root as in application so making it configurable doesn't make much sense. I've added  Taspoon.configuration.context just to have all path/URL related variable in one place. I guess it should be stored somewhere anyway, but can be read only.\n. Yes, it should be fine I guess. To summarize all work on this so far - I've changed:\n- Teaspoon::Suite#link\n- Teaspoon::SpecHelper#asset_src\n- runner.html.erb (in #166)\nYesterday I've also found that I couldn't run bundle exec teaspoon (or rake) in my fresh test rails application. First issue was missing relative url root in Teaspoon::Console#url, however after fixing that it failed because Teaspoon::Server was starting without relative root set properly.\n. See https://github.com/modeset/teaspoon/pull/133#issuecomment-33458040 for all path helpers in  teaspoon which uses context root.\nOn the other hand, there are https://github.com/rails/rails/issues/9058, https://github.com/rails/rails/issues/4308 or https://github.com/rails/rails/issues/5122 - which indicate that this is problem in all rals engines and it might be fixed in Rails some day..\n. Cool. I'll check 0.8 branch and let you know if everything works fine.\n. @jejacks0n, I update my test rails application (it's pushed to https://github.com/kowal/rails4_teaspoon_test_app) and indeed hitting http://localhost:3000/app/teaspoon/ works fine (I can see test suites list, no errors), however hitting http://localhost:3000/app/teaspoon/default ends up with errors in JS console:\nUncaught ReferenceError: jasmine is not defined teaspoon-jasmine.js:1153\n(anonymous function) teaspoon-jasmine.js:1153\n(anonymous function) teaspoon-jasmine.js:1335\nUncaught ReferenceError: describe is not defined application_spec.js:2\n(anonymous function) application_spec.js:2\nAny idea why this isn't working?\n. Yes, I've regenerated teaspoon files and now I can successfully run specs in browser. Yay!\nHowever, I'm getting this only when I do not set config.assets.prefix. My setup in Rails is:\n```\ndevelopment.rb\n..\nconfig.relative_url_root = \"/app\"\nconfig.ru\nrequire ::File.expand_path('../config/environment',  FILE)\nmap TeaspoonTest::Application.config.relative_url_root || \"/\" do\n  run Rails.application\nend\n```\nAlso, running via CLI still doesn't work (either rake or binary):\n```\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:56797/teaspoon/default\nSyntaxError: Parse error\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:56797/teaspoon/default?reporter=Console:13\nSyntaxError: Parse error\n...\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:56797/teaspoon/default?reporter=Console:25\nFailed to load: http://127.0.0.1:56797/teaspoon/default?reporter=Console\n``\n. Everyting is pushed to https://github.com/kowal/rails4_teaspoon_test_app\n. See also my https://github.com/modeset/teaspoon/pull/133#issuecomment-33458040 - about error in command line.\n. Thanks for your patience with this one :) Correct me if I'm wrong:\n- dummy app in teaspoon specs (in master branch) is actually not running in '/relative' sub directory, it only respects that setting if app will be deployed under such directory. You can see in capybara that URL in browser is something likehttp://127.0.0.1:60623/teaspoon/default.\n- wrapping in config.ru is required to actually start application and see it underhttp://localhost:3000/relative/teaspoon/default` - if you manage to start rails 4 app with only setting this https://github.com/modeset/teaspoon/blob/master/spec/dummy/config/application.rb#L30, how do you start it? You have to tell rack to rewrite all request from '/relative' to your app, in development one way to do it is wrapping in config.ru, in production it can be done by app container (Tomcat) and Rails does not even know about it.\nI think we can close it for now and I have to investigate something else than wrapping in config.ru, which does not break teaspoon in command line.\nAgain, thanks!\n. I've tried again on fresh rails 4 application, this time I simply used Trinidad server to run application in sub directory. Almost everything works fine :)\nTo sum up:\n- Rails 4.0.1, Teaspoon branch 0.8\n- Set up rails in config/application.rb\n``` ruby\nconfig.relative_url_root = \"/relative\"\nthis must be set for any asset paths to be correct!\nconfig.assets.prefix = \"/relative/assets\" if defined?(Teaspoon::Console)\n```\n- Set up Trinidad in config/trinidad.yml\n```\ncontext_path: /relative\n``\n- Run app viarails s trinidad`\nResults:\n- Web UI at http://localhost:3000/relative/teaspoon/default - OK\n- teaspoon / bundle exec teaspoon - OK\n- rake teaspoon - ERROR:\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n # http://127.0.0.1:57969/teaspoon/default?reporter=Console:13\n...\nLet's forget legacy config.ru hack. The only thing left to fix is the difference between rake task and teaspoon binary.\nI've pushed all this into new repo at https://github.com/kowal/rails4_on_trinidad.\n. > Configure your server type?\nSorry, but I don't get what you are asking about?\n. I'm getting SyntaxError: Parse error only when running rake teaspoon. In browser everything is OK, teaspoon binary also works fine.\nBoth Teaspoon::CommandLine and teaspoon.rake invokes at some point Teaspoon::Console.new(options).failures? with same arguments and somehow rake is doing things differently - is this expected behaviour? Are you saying that server might be configured differently in those two cases?\nAlso:\n- using bundle exec .. doesn't change anything - same error only for rake\n- switching to selenium also fails only for rake - this time however with timeout\nSo the issue I'm complaining about now is inconsistency between running rake and bin/teaspoon script when rails are configured with relative_url_root (this is important to reproduce it).\nI was trying to debug it more closely, unfortunately without any results... :(\n. ",
    "zorbash": "+1\n. We have a similar issue: \n```\n\u21d2  RAILS_ENV=test ./bin/rake teaspoon   \nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:34666/teaspoon/default\nSyntaxError: Parse error\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:34666/teaspoon/default?reporter=Console:12\n``\n- rails version: 4.1.7\n- ruby version: 1.9.3p392\n- phantomjs version: 1.9.8\n- Teaspoon generator options:bin/rails generate teaspoon:install --framework=mocha --coffee`\nThe browser part works, but the cli isn't. \nIn our case the cli is more important as we plan to use it with our CI. \nNote that in order to make the browser interface work we had to add \nconfig.assets.raise_runtime_errors = false in config/environments/development.rb as mentioned in #197 \nIs the project supposed to work out of the box with a new rails 4.1 app?\nIf not, how can we help for that to be achieved?\n. https://github.com/dockyard/ember-appkit-rails\n\nWe have sunset this gem. Patches will continue to be applied but no new features will be added. If you wish to fork and maintain please feel free.\n\nI guess ember-appkit-rails support shouldn't be important anymore. \n. @eugene-ku have you solved your problem?\n. +1\n. We have a similar issue: \n```\n\u21d2  RAILS_ENV=test ./bin/rake teaspoon   \nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:34666/teaspoon/default\nSyntaxError: Parse error\nSyntaxError: Parse error\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:34666/teaspoon/default?reporter=Console:12\n``\n- rails version: 4.1.7\n- ruby version: 1.9.3p392\n- phantomjs version: 1.9.8\n- Teaspoon generator options:bin/rails generate teaspoon:install --framework=mocha --coffee`\nThe browser part works, but the cli isn't. \nIn our case the cli is more important as we plan to use it with our CI. \nNote that in order to make the browser interface work we had to add \nconfig.assets.raise_runtime_errors = false in config/environments/development.rb as mentioned in #197 \nIs the project supposed to work out of the box with a new rails 4.1 app?\nIf not, how can we help for that to be achieved?\n. https://github.com/dockyard/ember-appkit-rails\n\nWe have sunset this gem. Patches will continue to be applied but no new features will be added. If you wish to fork and maintain please feel free.\n\nI guess ember-appkit-rails support shouldn't be important anymore. \n. @eugene-ku have you solved your problem?\n. ",
    "SleeplessByte": "I understand.\nIt's not only in the report, it's also in the console [which is where the report gets its data from off course]. What should I look for? Needless to say, on UNIX-based systems ( the rest of my projectgroup ) the folder structure is maintained, where on windows it is completely flattened.\n. Here is some output for you.\nI outputed @asset.pathname which goes great and the resulting input path.\nAll is valid, but I think the resulting path should be BACK-translated to the original path. \nWhat happens on Linux?\n``` console\nMicrosoft Windows [Version 6.2.9200]\n(c) 2012 Microsoft Corporation. All rights reserved.\nStarting the Teabag server...\nTeabag running models suite at http://127.0.0.1:29484/teabag/models\nC:/Users/Derk-Jan/Documents/GitHub/programming-life/app/assets/javascripts/model\ns/action.js.coffee\nC:/Users/Derk-Jan/AppData/Local/Temp/d20130516-13136-189agds/action.js\nC:/Users/Derk-Jan/Documents/GitHub/programming-life/app/assets/javascripts/model\ns/cell.js.coffee\nC:/Users/Derk-Jan/AppData/Local/Temp/d20130516-13136-1lrys3i/cell.js\n[...]\n```\nResulting in the unreadable:\nconsole\n----------------------------+-----------+-----------+-----------+-----------+\nFile                        |   % Stmts |% Branches |   % Funcs |   % Lines |\n----------------------------+-----------+-----------+-----------+-----------+\n   d20130516-13136-189agds\\ |       100 |        60 |       100 |       100 |\n      action.js             |       100 |        60 |       100 |       100 |\n   d20130516-13136-19rwdbo\\ |     95.56 |     71.43 |       100 |       100 |\n      undotree.js           |     95.56 |     71.43 |       100 |       100 |\n   d20130516-13136-1b0lctq\\ |     72.53 |     57.89 |     67.39 |     70.93 |\n      module._.js           |     72.53 |     57.89 |     67.39 |     70.93 |\n  [....]\n----------------------------+-----------+-----------+-----------+-----------+\nAll files                   |     80.46 |      61.4 |     78.95 |     79.22 |\n----------------------------+-----------+-----------+-----------+-----------+\n. On a side note, this problem also quickly fills up the coverage folder instead of overwriting the old files :(\n. @jejacks0n Is there anything else I can check? I don't have the time ( or rather the priority ) to figure out the complete program flow, else I would try to fix it myself. If you need other output, tests, whatever, just mention me.\n. I understand.\nIt's not only in the report, it's also in the console [which is where the report gets its data from off course]. What should I look for? Needless to say, on UNIX-based systems ( the rest of my projectgroup ) the folder structure is maintained, where on windows it is completely flattened.\n. Here is some output for you.\nI outputed @asset.pathname which goes great and the resulting input path.\nAll is valid, but I think the resulting path should be BACK-translated to the original path. \nWhat happens on Linux?\n``` console\nMicrosoft Windows [Version 6.2.9200]\n(c) 2012 Microsoft Corporation. All rights reserved.\nStarting the Teabag server...\nTeabag running models suite at http://127.0.0.1:29484/teabag/models\nC:/Users/Derk-Jan/Documents/GitHub/programming-life/app/assets/javascripts/model\ns/action.js.coffee\nC:/Users/Derk-Jan/AppData/Local/Temp/d20130516-13136-189agds/action.js\nC:/Users/Derk-Jan/Documents/GitHub/programming-life/app/assets/javascripts/model\ns/cell.js.coffee\nC:/Users/Derk-Jan/AppData/Local/Temp/d20130516-13136-1lrys3i/cell.js\n[...]\n```\nResulting in the unreadable:\nconsole\n----------------------------+-----------+-----------+-----------+-----------+\nFile                        |   % Stmts |% Branches |   % Funcs |   % Lines |\n----------------------------+-----------+-----------+-----------+-----------+\n   d20130516-13136-189agds\\ |       100 |        60 |       100 |       100 |\n      action.js             |       100 |        60 |       100 |       100 |\n   d20130516-13136-19rwdbo\\ |     95.56 |     71.43 |       100 |       100 |\n      undotree.js           |     95.56 |     71.43 |       100 |       100 |\n   d20130516-13136-1b0lctq\\ |     72.53 |     57.89 |     67.39 |     70.93 |\n      module._.js           |     72.53 |     57.89 |     67.39 |     70.93 |\n  [....]\n----------------------------+-----------+-----------+-----------+-----------+\nAll files                   |     80.46 |      61.4 |     78.95 |     79.22 |\n----------------------------+-----------+-----------+-----------+-----------+\n. On a side note, this problem also quickly fills up the coverage folder instead of overwriting the old files :(\n. @jejacks0n Is there anything else I can check? I don't have the time ( or rather the priority ) to figure out the complete program flow, else I would try to fix it myself. If you need other output, tests, whatever, just mention me.\n. ",
    "virginia-rodriguez": "Are you planning to release a new version to RubyGems soon?\nThanks!\n. Are you planning to release a new version to RubyGems soon?\nThanks!\n. ",
    "hilios": "NP @jejacks0n, but I still think we could achieve this goal of simple setup and everything else, the activesupport dependencie it's not a great deal, I use this gem a lot in my Sinatra apps.\nBut you really got a good point about this being an open source software, so I will do my homework and will fork the project and put my vision to work, then we could talk again and see if the benefits are worth for the future of this gem. Regards!\n. NP @jejacks0n, but I still think we could achieve this goal of simple setup and everything else, the activesupport dependencie it's not a great deal, I use this gem a lot in my Sinatra apps.\nBut you really got a good point about this being an open source software, so I will do my homework and will fork the project and put my vision to work, then we could talk again and see if the benefits are worth for the future of this gem. Regards!\n. ",
    "BlueHotDog": "done, refreshed commit :)\n. Thanks man. Love contributing to this project.. If you have any open tasks\nthats need to be done, let me know.\nLe 27 mai 2013 00:13, \"jejacks0n\" notifications@github.com a \u00e9crit :\n\nCheers! Have a great weekend. =)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teabag/pull/72#issuecomment-18469819\n.\n. Will try to give it a go tomorrow, wanted to test\nhttp://www.vagrantup.com/for quite some time now(working on osx\nnatively)\n\nOn Mon, May 27, 2013 at 12:26 AM, jejacks0n notifications@github.comwrote:\n\nThanks for the offer! =) There's one that I've been meaning to get on so I\ncan release 0.7.2 -- but it's a little involved and may require a windows\nsetup/vm. I haven't had the time to set something up to check that the fix\nworks.. you could probably take a crack at it without windows though maybe?\n66 https://github.com/modeset/teabag/issues/66 could probably be fixed\nby doing some path tweaking on\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/instrumentation.rb#L49\nI think the problem is that windows uses \\ for path parts, and everybody\nelse uses /, but I'm not positive.. seems like it should work as is, but\nit's not.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teabag/pull/72#issuecomment-18469991\n.\n\n\nDanni Friedland\n+972-54-7764415\n. done, refreshed commit :)\n. Thanks man. Love contributing to this project.. If you have any open tasks\nthats need to be done, let me know.\nLe 27 mai 2013 00:13, \"jejacks0n\" notifications@github.com a \u00e9crit :\n\nCheers! Have a great weekend. =)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teabag/pull/72#issuecomment-18469819\n.\n. Will try to give it a go tomorrow, wanted to test\nhttp://www.vagrantup.com/for quite some time now(working on osx\nnatively)\n\nOn Mon, May 27, 2013 at 12:26 AM, jejacks0n notifications@github.comwrote:\n\nThanks for the offer! =) There's one that I've been meaning to get on so I\ncan release 0.7.2 -- but it's a little involved and may require a windows\nsetup/vm. I haven't had the time to set something up to check that the fix\nworks.. you could probably take a crack at it without windows though maybe?\n66 https://github.com/modeset/teabag/issues/66 could probably be fixed\nby doing some path tweaking on\nhttps://github.com/modeset/teabag/blob/master/lib/teabag/instrumentation.rb#L49\nI think the problem is that windows uses \\ for path parts, and everybody\nelse uses /, but I'm not positive.. seems like it should work as is, but\nit's not.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teabag/pull/72#issuecomment-18469991\n.\n\n\nDanni Friedland\n+972-54-7764415\n. ",
    "brandonparsons": "Thanks for the quick reply!!\nCoffeescript is working just fine in the rest of rails (i.e. for coffeescript files in the standard directories).\nDo I have to somehow tell rails to compile coffee files in the test/javascripts directory?\n. Nope...\nlocalhost:3000/assets/application.js --> works\nlocalhost:3000/assets/test/javascripts/my_test.js --> does not work (there is a test/javascripts/my_test.coffee file)\nSomething that may lead in the right direction.... The teabag support files are in coffeescript, and seem to be working just fine. It's just the tests that aren't being compiled.... Not sure if that helps?\n. Ugh.  I'm so sorry. I had a syntax error in my coffeescript, and it was throwing an error.... \n. It turned out that I had a syntax error in my coffeescript. Should work\nafter that!\nOn Thu, Jun 20, 2013 at 6:21 PM, Jean-Denis Vauguet \nnotifications@github.com wrote:\n\n@jejacks0n https://github.com/jejacks0n I actually have the same kind\nof issue with .coffee files under spec/javascripts. Unlike coffee files\nunder app/assets/javascripts, they are not compiled at runtime and, in\nparticular, the #= require directives are not expanded so specs just fail.\nIf I understood it well by reading the source code, the asset pipeline\nshould be aware of spec/javascripts as a location for compiling, so no\nexplicit setting is required. Do you have an idea about what could be going\nwrong here?\nThank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/issues/75#issuecomment-19792134\n.\n. Thanks for the quick reply!!\n\nCoffeescript is working just fine in the rest of rails (i.e. for coffeescript files in the standard directories).\nDo I have to somehow tell rails to compile coffee files in the test/javascripts directory?\n. Nope...\nlocalhost:3000/assets/application.js --> works\nlocalhost:3000/assets/test/javascripts/my_test.js --> does not work (there is a test/javascripts/my_test.coffee file)\nSomething that may lead in the right direction.... The teabag support files are in coffeescript, and seem to be working just fine. It's just the tests that aren't being compiled.... Not sure if that helps?\n. Ugh.  I'm so sorry. I had a syntax error in my coffeescript, and it was throwing an error.... \n. It turned out that I had a syntax error in my coffeescript. Should work\nafter that!\nOn Thu, Jun 20, 2013 at 6:21 PM, Jean-Denis Vauguet \nnotifications@github.com wrote:\n\n@jejacks0n https://github.com/jejacks0n I actually have the same kind\nof issue with .coffee files under spec/javascripts. Unlike coffee files\nunder app/assets/javascripts, they are not compiled at runtime and, in\nparticular, the #= require directives are not expanded so specs just fail.\nIf I understood it well by reading the source code, the asset pipeline\nshould be aware of spec/javascripts as a location for compiling, so no\nexplicit setting is required. Do you have an idea about what could be going\nwrong here?\nThank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/issues/75#issuecomment-19792134\n.\n. \n",
    "chikamichi": "@jejacks0n I actually have the same kind of issue with .coffee files under spec/javascripts (using Mocha, with expect and chai). Unlike coffee files under app/assets/javascripts, they are not compiled at runtime and, in particular, the #= require directives are not expanded so specs just fail.\nIf I understood it well by reading the source code, the asset pipeline should be aware of spec/javascripts as a location for compiling, so no explicit setting is required. Do you have an idea about what could be going wrong here?\nThank you!\n\nedit: I saw that it actually generates .js files, but for some reasons, the dependencies are not loaded. When I delete the .js file and run the spec again, it passes. This ends up generating the .js file again, and then the spec fails. This looks like an issue unrelated to teaspoon, but rather involving the asset pipeline (but you may have a hint about it!).\n. Well, the thing is, it works smoothly when running the website. The broken behavior is specific to running the spec. If I find something, I'll share the insight with you here :)\n. I fixed the issue. It was unrelated to teaspoon, as eventually expected: a setting in my .vimrc was triggering auto-compilation of .coffee edited files. Thank you for your help!\n. Thank you. One must not forget to declare expect if it is to be used on the \"global\" namespace (not through chai.expect):\n``` coffee\n= require support/chai\nexpect = chai.expect\n```\n@jejacks0n chai has released its 1.7.0 version, you way want to upgrade the vendorized one :)\n. My spec_helper.js is:\n``` javascript\n//= require chai/index\n//= require jquery/jquery\n//= require chai-jquery/chai-jquery\n//= require sinon\nvar expect = chai.expect;\n```\nWe upgraded chai and sinon (through bower) to use their latest version and some custom behaviors (for sinon), but the failure is the same when using teaspoon's vendorized versions throught support/*.\nThe test backend is teaspoon-mocha, configured in config/initializers/teaspoon.rb:\nruby\nsuite.javascripts = [\"teaspoon-mocha\"]\n. @jejacks0n This simple edit fixes the issue for us: https://github.com/AF83/teaspoon/commit/06133b6213ebe22494a9b8a750152fa8781afcf2\n. @jejacks0n I wil do that tomorrow :)\n. @jejacks0n I actually have the same kind of issue with .coffee files under spec/javascripts (using Mocha, with expect and chai). Unlike coffee files under app/assets/javascripts, they are not compiled at runtime and, in particular, the #= require directives are not expanded so specs just fail.\nIf I understood it well by reading the source code, the asset pipeline should be aware of spec/javascripts as a location for compiling, so no explicit setting is required. Do you have an idea about what could be going wrong here?\nThank you!\n\nedit: I saw that it actually generates .js files, but for some reasons, the dependencies are not loaded. When I delete the .js file and run the spec again, it passes. This ends up generating the .js file again, and then the spec fails. This looks like an issue unrelated to teaspoon, but rather involving the asset pipeline (but you may have a hint about it!).\n. Well, the thing is, it works smoothly when running the website. The broken behavior is specific to running the spec. If I find something, I'll share the insight with you here :)\n. I fixed the issue. It was unrelated to teaspoon, as eventually expected: a setting in my .vimrc was triggering auto-compilation of .coffee edited files. Thank you for your help!\n. Thank you. One must not forget to declare expect if it is to be used on the \"global\" namespace (not through chai.expect):\n``` coffee\n= require support/chai\nexpect = chai.expect\n```\n@jejacks0n chai has released its 1.7.0 version, you way want to upgrade the vendorized one :)\n. My spec_helper.js is:\n``` javascript\n//= require chai/index\n//= require jquery/jquery\n//= require chai-jquery/chai-jquery\n//= require sinon\nvar expect = chai.expect;\n```\nWe upgraded chai and sinon (through bower) to use their latest version and some custom behaviors (for sinon), but the failure is the same when using teaspoon's vendorized versions throught support/*.\nThe test backend is teaspoon-mocha, configured in config/initializers/teaspoon.rb:\nruby\nsuite.javascripts = [\"teaspoon-mocha\"]\n. @jejacks0n This simple edit fixes the issue for us: https://github.com/AF83/teaspoon/commit/06133b6213ebe22494a9b8a750152fa8781afcf2\n. @jejacks0n I wil do that tomorrow :)\n. ",
    "garysweaver": "Note: the reason for the conditional I added: driver.quit if driver was that when I had added additional options to Selenium::WebDriver.for(...) that were invalid, the ensure was raising an error because driver was nil in the ensure block. It is likely that at some point someone may try to do the same, so thought a conditional would be a good idea to keep in there.\n. Note: the reason for the conditional I added: driver.quit if driver was that when I had added additional options to Selenium::WebDriver.for(...) that were invalid, the ensure was raising an error because driver was nil in the ensure block. It is likely that at some point someone may try to do the same, so thought a conditional would be a good idea to keep in there.\n. ",
    "marcoow": ":+1: \n. :+1: \n. ",
    "leppert": "No problem. Enjoying Teaspoon as an alternative to Konacha.\nOn Jul 3, 2013, at 2:08 AM, jejacks0n notifications@github.com wrote:\n\nI appreciate all the work you've been putting in. =)\n\u2014\nReply to this email directly or view it on GitHub.\n. FWIW, the tapout formatting, using bundle exec teaspoon -q --format=tap_y | tapout progress, looks as expected.\n. Ah, I see the -q flag suppresses most of this, though I'm still getting things like ......F[object Object].\n\nI'm not sure if there's a bug to be fixed here so much as the opportunity for better defaults out of the box. Thoughts?\n. This all makes sense. Many thanks for the helpful explanation.\nOn Jul 3, 2013, at 1:04 PM, jejacks0n notifications@github.com wrote:\n\nThose are from console.[debug|log|info] lines in your javascript. We output that stuff so you can see them for debugging, or just to catch ones you didn't intend to leave in.\nYou can turn this off in the configuration, but I find it useful to have.. What I usually do is create a global log/trace method ... here's an example\nhttps://github.com/jejacks0n/mercury/blob/mercury2/lib/javascripts/mercury/core/logger.coffee#L9\nThen I can stub that for my specs (in spec_helper), and I can catch any console.log that made it in unintentionally that's not using the proper logging method that I've provided. console.log can cause errors in older browsers, so leaving them around can be bad.\n\u2014\nReply to this email directly or view it on GitHub.\n. No problem. Enjoying Teaspoon as an alternative to Konacha.\n\nOn Jul 3, 2013, at 2:08 AM, jejacks0n notifications@github.com wrote:\n\nI appreciate all the work you've been putting in. =)\n\u2014\nReply to this email directly or view it on GitHub.\n. FWIW, the tapout formatting, using bundle exec teaspoon -q --format=tap_y | tapout progress, looks as expected.\n. Ah, I see the -q flag suppresses most of this, though I'm still getting things like ......F[object Object].\n\nI'm not sure if there's a bug to be fixed here so much as the opportunity for better defaults out of the box. Thoughts?\n. This all makes sense. Many thanks for the helpful explanation.\nOn Jul 3, 2013, at 1:04 PM, jejacks0n notifications@github.com wrote:\n\nThose are from console.[debug|log|info] lines in your javascript. We output that stuff so you can see them for debugging, or just to catch ones you didn't intend to leave in.\nYou can turn this off in the configuration, but I find it useful to have.. What I usually do is create a global log/trace method ... here's an example\nhttps://github.com/jejacks0n/mercury/blob/mercury2/lib/javascripts/mercury/core/logger.coffee#L9\nThen I can stub that for my specs (in spec_helper), and I can catch any console.log that made it in unintentionally that's not using the proper logging method that I've provided. console.log can cause errors in older browsers, so leaving them around can be bad.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "btelles": "JeJacks0n, that worked beautifully! Thanks!\n. JeJacks0n, that worked beautifully! Thanks!\n. ",
    "tommeier": "Hmm... Yeah, i've tried with stubs and with things like the console log wrapper such as https://github.com/cpatik/console.log-wrapper, but unfortunately still blows up on console.log.apply (such as in: https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon-jasmine.js#L2678).\nDamn, so close, it all works with Jasmine straight, so I guess its a pretty big change to handle IE console selectively or pass the messages around. I created a subdriver like your selenium one for handling multiple browsers (chromedriver etc), but IE is going to be the elusive one (as always).\n. If you comment out the following in teaspoon (for our specs usage with jasmine): \n- https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon-jasmine.js#L2678\n- https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/base/teaspoon.coffee#L47\nIt appears to get us further, and seems to run through most of the specs ok. Will need to investigate more later.\n. Hi @jejacks0n , Sorry, I got slammed at work, I'll hopefully have a chance to dig deeper into this soon (not forgotten).\n. In master? \n. I'm not having much luck unfortunately, at the end of the tests in IE8, it is redirecting me back to root, but only in IE8, safari, firefox and chrome are all fine and remain on the teaspoon page. Bit bizarre really.\nI noticed your config changes here: https://github.com/modeset/teaspoon/commit/dda2154d9cb25747b5cae8253ace2fd5fb63bed3 and loaded off master but no real luck.\nAt the end of the test suite it is redirecting to the root, instead of the mount point (/jasmine/default), so it is redirecting to http://192.168.1.4:3000/#jasmine/default instead of http://192.168.1.4:3000/jasmine/default and thus raising auth errors in the base app.\nBut ignoring that its erroring many times with 'stack trace is unavailable' everywhere.\n. Hmm... Yeah, i've tried with stubs and with things like the console log wrapper such as https://github.com/cpatik/console.log-wrapper, but unfortunately still blows up on console.log.apply (such as in: https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon-jasmine.js#L2678).\nDamn, so close, it all works with Jasmine straight, so I guess its a pretty big change to handle IE console selectively or pass the messages around. I created a subdriver like your selenium one for handling multiple browsers (chromedriver etc), but IE is going to be the elusive one (as always).\n. If you comment out the following in teaspoon (for our specs usage with jasmine): \n- https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon-jasmine.js#L2678\n- https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/base/teaspoon.coffee#L47\nIt appears to get us further, and seems to run through most of the specs ok. Will need to investigate more later.\n. Hi @jejacks0n , Sorry, I got slammed at work, I'll hopefully have a chance to dig deeper into this soon (not forgotten).\n. In master? \n. I'm not having much luck unfortunately, at the end of the tests in IE8, it is redirecting me back to root, but only in IE8, safari, firefox and chrome are all fine and remain on the teaspoon page. Bit bizarre really.\nI noticed your config changes here: https://github.com/modeset/teaspoon/commit/dda2154d9cb25747b5cae8253ace2fd5fb63bed3 and loaded off master but no real luck.\nAt the end of the test suite it is redirecting to the root, instead of the mount point (/jasmine/default), so it is redirecting to http://192.168.1.4:3000/#jasmine/default instead of http://192.168.1.4:3000/jasmine/default and thus raising auth errors in the base app.\nBut ignoring that its erroring many times with 'stack trace is unavailable' everywhere.\n. ",
    "mcasimir": "Sorry i'm stuck here too. Is there a way to report to teaspoon independently from console? Any weird workaround would help here. I need to test IE8 somehow.\n. \nHere tests are all done. I polyfilled both console and JSON, no luck\n. teaspoon --version\n1.0.2\nSelenium::WebDriver::Error::TimeOutError: Timed out\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/selenium-webdriver-2.46.2/lib/selenium/webdriver/common/wait.rb:76:in `until'\n/Users/maurizio/Sites/iub/lib/teaspoon/driver/browserstack.rb:73:in `run_specs'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:55:in `run_specs'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:44:in `block in execute_without_handling'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:42:in `each'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:42:in `inject'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:42:in `execute_without_handling'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:27:in `execute'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:23:in `failures?'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/tasks/teaspoon.rake:12:in `block in <top (required)>'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/bin/ruby_executable_hooks:15:in `eval'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/bin/ruby_executable_hooks:15:in\nbrowserstack.rb is pretty much the same then Teaspoon's selenium driver. It works for other browsers it just does not report anything for IE8.\n. @mikepack @jejacks0n So what u suggest? \nI'm gonna add a driver.execute \"console = { log: function(){} }\" before to load the page. \nNothing else comes in my mind.\nThanks\n. ## Update\nSince IE8 support is a must for our project i patched teaspoon fixture to use jquery.parseHTML, it worked perfectly. You can provide a similar solution. Sorry for vanilla js:\n``` js\n  addContent = function(content) {\n    if (!window.fixture.el) {\n      create();\n    }\n    var parsed = $($.parseHTML(content, document, true));\n    for (var i = 0; i < parsed.length; i++) {\n      window.fixture.el.appendChild(parsed[i]);\n    }\n  };\nputContent = function(content) {\n    cleanup();\n    addContent(content);\n  };\n```\nNotice the 3rd parameter that specifies wether you want to run scripts or just append to the dom.\n. Sorry i'm stuck here too. Is there a way to report to teaspoon independently from console? Any weird workaround would help here. I need to test IE8 somehow.\n. \nHere tests are all done. I polyfilled both console and JSON, no luck\n. teaspoon --version\n1.0.2\nSelenium::WebDriver::Error::TimeOutError: Timed out\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/selenium-webdriver-2.46.2/lib/selenium/webdriver/common/wait.rb:76:in `until'\n/Users/maurizio/Sites/iub/lib/teaspoon/driver/browserstack.rb:73:in `run_specs'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:55:in `run_specs'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:44:in `block in execute_without_handling'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:42:in `each'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:42:in `inject'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:42:in `execute_without_handling'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:27:in `execute'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/teaspoon/console.rb:23:in `failures?'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/gems/teaspoon-1.0.2/lib/tasks/teaspoon.rake:12:in `block in <top (required)>'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/bin/ruby_executable_hooks:15:in `eval'\n/Users/maurizio/.rvm/gems/ruby-1.9.3-p545@iub/bin/ruby_executable_hooks:15:in\nbrowserstack.rb is pretty much the same then Teaspoon's selenium driver. It works for other browsers it just does not report anything for IE8.\n. @mikepack @jejacks0n So what u suggest? \nI'm gonna add a driver.execute \"console = { log: function(){} }\" before to load the page. \nNothing else comes in my mind.\nThanks\n. ## Update\nSince IE8 support is a must for our project i patched teaspoon fixture to use jquery.parseHTML, it worked perfectly. You can provide a similar solution. Sorry for vanilla js:\n``` js\n  addContent = function(content) {\n    if (!window.fixture.el) {\n      create();\n    }\n    var parsed = $($.parseHTML(content, document, true));\n    for (var i = 0; i < parsed.length; i++) {\n      window.fixture.el.appendChild(parsed[i]);\n    }\n  };\nputContent = function(content) {\n    cleanup();\n    addContent(content);\n  };\n```\nNotice the 3rd parameter that specifies wether you want to run scripts or just append to the dom.\n. ",
    "devn": "Could you be more specific? Where is it looking for that var?\n. I really wasn't joking, but I'll keep poking at it. I am not disputing that this works out of the box for lots of people, just trying to figure out why I'm having trouble adding it to an existing project.\n. @jejacks0n yeah, and that helped me diagnose. It took me awhile to find it, but ultimately there were a couple of vars being set in the layout which were undefined inside teaspoon (not a surprise). Thanks for your help and patience. It's running like a dream now.\n. Could you be more specific? Where is it looking for that var?\n. I really wasn't joking, but I'll keep poking at it. I am not disputing that this works out of the box for lots of people, just trying to figure out why I'm having trouble adding it to an existing project.\n. @jejacks0n yeah, and that helped me diagnose. It took me awhile to find it, but ultimately there were a couple of vars being set in the layout which were undefined inside teaspoon (not a surprise). Thanks for your help and patience. It's running like a dream now.\n. ",
    "phoet": "just ran into a similar error: \n```\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:58518/teaspoon/default?reporter=Console:12\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:58518/teaspoon/default?reporter=Console:77\n```\nproblem was, that config.asset_host was missing the port and so no javascript was loaded.\nSERVER_PORT=5000 bundle exec rake teaspoon\n. just ran into a similar error: \n```\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:58518/teaspoon/default?reporter=Console:12\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:58518/teaspoon/default?reporter=Console:77\n```\nproblem was, that config.asset_host was missing the port and so no javascript was loaded.\nSERVER_PORT=5000 bundle exec rake teaspoon\n. ",
    "bernardogalindo": "I'm getting the same error:\n``` ruby\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:5000/teaspoon/default?reporter=Console:13\nReferenceError: Can't find variable: $\n  # merchant_applications.js.js:387\n  # merchant_applications.js.js:1209\nReferenceError: Can't find variable: describe\n  # merchant_applications_spec.js.js:7\n  # merchant_applications_spec.js.js:9\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:5000/teaspoon/default?reporter=Console:24\n```\nI've already try to run with @phoet suggestion and I still getting the error\n. let me paste the spec_helper.coffee file, I've just installed the gem, I'm trying to use mocka, with chai and with expect install. I'm using selenium like driver. \nspec_helper.coffee file:\n``` ruby\nTeaspoon includes some support files, but you can use anything from your own support path too.\n=require support/expect\n=require support/sinon\n=require support/chai\nrequire support/your-support-file\n\nPhantomJS (Teaspoons default driver) doesn't have support for Function.prototype.bind, which has caused confusion.\nUse this polyfill to avoid the confusion.\n= require support/bind-poly\n\nDeferring execution\nIf you're using CommonJS, RequireJS or some other asynchronous library you can defer execution. Call\nTeaspoon.execute() after everything has been loaded. Simple example of a timeout:\n\nTeaspoon.defer = true\nsetTimeout(Teaspoon.execute, 1000)\n\nMatching files\nBy default Teaspoon will look for files that match _spec.{js,js.coffee,.coffee}. Add a filename_spec.js file in your\nspec path and it'll be included in the default suite automatically. If you want to customize suites, check out the\nconfiguration in config/initializers/teaspoon.rb\n\nManifest\nIf you'd rather require your spec files manually (to control order for instance) you can disable the suite matcher in\nthe configuration and use this file as a manifest.\n\nFor more information: http://github.com/modeset/teaspoon\n\nChai\nIf you're using Chai, you'll probably want to initialize your preferred assertion style. You can read more about Chai\nat: http://chaijs.com/guide/styles\n\nwindow.assert = chai.assert\nwindow.expect = chai.expect\nwindow.should = chai.should()\n\nYou can require your own javascript files here. By default this will include everything in application, however you\nmay get better load performance if you require the specific files that are being used in the spec that tests them.\n= require application\n```\nteaspoon_env.rb file:\n``` ruby\nSet RAILS_ROOT and load the environment if it's not already loaded.\nunless defined?(Rails)\n  ENV[\"RAILS_ROOT\"] = File.expand_path(\"../../\", FILE)\n  require File.expand_path(\"../../config/environment\", FILE)\nend\nTeaspoon.configure do |config|\n# Determines where the Teaspoon routes will be mounted. Changing this to \"/jasmine\" would allow you to browse to\n  # http://localhost:3000/jasmine to run your tests.\n  #config.mount_at = \"/teaspoon\"\n# Specifies the root where Teaspoon will look for files. If you're testing an engine using a dummy application it can\n  # be useful to set this to your engines root (e.g. Teaspoon::Engine.root).\n  # Note: Defaults to Rails.root if nil.\n  #config.root = nil\n# Paths that will be appended to the Rails assets paths\n  # Note: Relative to config.root.\n  config.asset_paths = [\"spec/javascripts\", \"spec/javascripts/stylesheets\"]\n# Fixtures are rendered through a controller, which allows using HAML, RABL/JBuilder, etc. Files in these paths will\n  # be rendered as fixtures.\n  config.fixture_paths = [\"spec/javascripts/fixtures\"]\n# SUITES\n  #\n  # You can modify the default suite configuration and create new suites here. Suites are isolated from one another.\n  #\n  # When defining a suite you can provide a name and a block. If the name is left blank, :default is assumed. You can\n  # omit various directives and the ones defined in the default suite will be used.\n  #\n  # To run a specific suite\n  # - in the browser: http://localhost/teaspoon/[suite_name]\n  # - with the rake task: rake teaspoon suite=[suite_name]\n  # - with the cli: teaspoon --suite=[suite_name]\n  config.suite do |suite|\n# Specify the framework you would like to use. This allows you to select versions, and will do some basic setup for\n# you -- which you can override with the directives below. This should be specified first, as it can override other\n# directives.\n# Note: If no version is specified, the latest is assumed.\n#\n# Available: jasmine[1.3.1, 2.0.0], mocha[1.10.0, 1.17.1] qunit[1.12.0, 1.14.0]\nsuite.use_framework :mocha\n\n# Specify a file matcher as a regular expression and all matching files will be loaded when the suite is run. These\n# files need to be within an asset path. You can add asset paths using the `config.asset_paths`.\n#suite.matcher = \"{spec/javascripts,app/assets}/**/*_spec.{js,js.coffee,coffee}\"\n\n# This suites spec helper, which can require additional support files. This file is loaded before any of your test\n# files are loaded.\nsuite.helper = \"spec_helper\"\n\n# The core Teaspoon javascripts. It's recommended to include only the base files here, as you can require support\n# libraries from your spec helper.\n# Note: For CoffeeScript files use `\"teaspoon/jasmine\"` etc.\n#\n# Available: teaspoon-jasmine, teaspoon-mocha, teaspoon-qunit\nsuite.javascripts = [\"support/expect\", \"support/sinon\"]\n\n# You can include your own stylesheets if you want to change how Teaspoon looks.\n# Note: Spec related CSS can and should be loaded using fixtures.\n#suite.stylesheets = [\"teaspoon\"]\n\n# Partial to be rendered in the head tag of the runner. You can use the provided ones or define your own by creating\n# a `_boot.html.erb` in your fixtures path, and adjust the config to `\"/boot\"` for instance.\n#\n# Available: boot, boot_require_js\n#suite.boot_partial = \"boot\"\n\n# Partial to be rendered in the body tag of the runner. You can define your own to create a custom body structure.\n#suite.body_partial = \"body\"\n\n# Assets to be ignored when generating coverage reports. Accepts an array of filenames or regular expressions. The\n# default excludes assets from vendor, gems and support libraries.<br/><br/>\n#suite.no_coverage = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}]\n\n# Hooks allow you to use `Teaspoon.hook(\"fixtures\")` before, after, or during your spec run. This will make a\n# synchronous Ajax request to the server that will call all of the blocks you've defined for that hook name.\n#suite.hook :fixtures, proc{ }\n\nend\n# Example suite. Since we're just filtering to files already within the root test/javascripts, these files will also\n  # be run in the default suite -- but can be focused into a more specific suite.\n  #config.suite :targeted do |suite|\n  #  suite.matcher = \"test/javascripts/targeted/*_test.{js,js.coffee,coffee}\"\n  #end\n# CONSOLE RUNNER SPECIFIC\n  #\n  # These configuration directives are applicable only when running via the rake task or command line interface. These\n  # directives can be overridden using the command line interface arguments or with ENV variables when using the rake\n  # task.\n  #\n  # Command Line Interface:\n  # teaspoon --driver=phantomjs --server-port=31337 --fail-fast=true --format=junit --suite=my_suite /spec/file_spec.js\n  #\n  # Rake:\n  # teaspoon DRIVER=phantomjs SERVER_PORT=31337 FAIL_FAST=true FORMATTERS=junit suite=my_suite\n# Specify which headless driver to use. Supports PhantomJS and Selenium Webdriver.\n  #\n  # Available: phantomjs, selenium\n  # PhantomJS: https://github.com/modeset/teaspoon/wiki/Using-PhantomJS\n  # Selenium Webdriver: https://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n  #config.driver = \"phantomjs\"\n# Specify additional options for the driver.\n  #\n  # PhantomJS: https://github.com/modeset/teaspoon/wiki/Using-PhantomJS\n  # Selenium Webdriver: https://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n  config.driver_options = \"selenium\"\n# Specify the timeout for the driver. Specs are expected to complete within this time frame or the run will be\n  # considered a failure. This is to avoid issues that can arise where tests stall.\n  #config.driver_timeout = 180\n# Specify a server to use with Rack (e.g. thin, mongrel). If nil is provided Rack::Server is used.\n  #config.server = nil\n# Specify a port to run on a specific port, otherwise Teaspoon will use a random available port.\n  #config.server_port = nil\n# Timeout for starting the server in seconds. If your server is slow to start you may have to bump this, or you may\n  # want to lower this if you know it shouldn't take long to start.\n  #config.server_timeout = 20\n# Force Teaspoon to fail immediately after a failing suite. Can be useful to make Teaspoon fail early if you have\n  # several suites, but in environments like CI this may not be desirable.\n  #config.fail_fast = true\n# Specify the formatters to use when outputting the results.\n  # Note: Output files can be specified by using \"junit>/path/to/output.xml\".\n  #\n  # Available: dot, documentation, clean, json, junit, pride, snowday, swayze_or_oprah, tap, tap_y, teamcity\n  #config.formatters = [\"dot\"]\n# Specify if you want color output from the formatters.\n  #config.color = true\n# Teaspoon pipes all console[log/debug/error] to $stdout. This is useful to catch places where you've forgotten to\n  # remove them, but in verbose applications this may not be desirable.\n  #config.suppress_log = false\n# COVERAGE REPORTS / THRESHOLD ASSERTIONS\n  #\n  # Coverage reports requires Istanbul (https://github.com/gotwarlost/istanbul) to add instrumentation to your code and\n  # display coverage statistics.\n  #\n  # Coverage configurations are similar to suites. You can define several, and use different ones under different\n  # conditions.\n  #\n  # To run with a specific coverage configuration\n  # - with the rake task: rake teaspoon USE_COVERAGE=[coverage_name]\n  # - with the cli: teaspoon --coverage=[coverage_name]\n# Specify that you always want a coverage configuration to be used.\n  #config.use_coverage = nil\nconfig.coverage do |coverage|\n# Which coverage reports Instanbul should generate. Correlates directly to what Istanbul supports.\n#\n# Available: text-summary, text, html, lcov, lcovonly, cobertura, teamcity\n#coverage.reports = [\"text-summary\", \"html\"]\n\n# The path that the coverage should be written to - when there's an artifact to write to disk.\n# Note: Relative to `config.root`.\n#coverage.output_dir = \"coverage\"\n\n# Various thresholds requirements can be defined, and those thresholds will be checked at the end of a run. If any\n# aren't met the run will fail with a message. Thresholds can be defined as a percentage (0-100), or nil.\n#coverage.statements = nil\n#coverage.functions = nil\n#coverage.branches = nil\n#coverage.lines = nil\n\nend\nend\n```\n. thank you @jejacks0n you right! The server works now, thank you\n. I'm getting the same error:\n``` ruby\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:5000/teaspoon/default?reporter=Console:13\nReferenceError: Can't find variable: $\n  # merchant_applications.js.js:387\n  # merchant_applications.js.js:1209\nReferenceError: Can't find variable: describe\n  # merchant_applications_spec.js.js:7\n  # merchant_applications_spec.js.js:9\nReferenceError: Can't find variable: Teaspoon\n  # http://127.0.0.1:5000/teaspoon/default?reporter=Console:24\n```\nI've already try to run with @phoet suggestion and I still getting the error\n. let me paste the spec_helper.coffee file, I've just installed the gem, I'm trying to use mocka, with chai and with expect install. I'm using selenium like driver. \nspec_helper.coffee file:\n``` ruby\nTeaspoon includes some support files, but you can use anything from your own support path too.\n=require support/expect\n=require support/sinon\n=require support/chai\nrequire support/your-support-file\n\nPhantomJS (Teaspoons default driver) doesn't have support for Function.prototype.bind, which has caused confusion.\nUse this polyfill to avoid the confusion.\n= require support/bind-poly\n\nDeferring execution\nIf you're using CommonJS, RequireJS or some other asynchronous library you can defer execution. Call\nTeaspoon.execute() after everything has been loaded. Simple example of a timeout:\n\nTeaspoon.defer = true\nsetTimeout(Teaspoon.execute, 1000)\n\nMatching files\nBy default Teaspoon will look for files that match _spec.{js,js.coffee,.coffee}. Add a filename_spec.js file in your\nspec path and it'll be included in the default suite automatically. If you want to customize suites, check out the\nconfiguration in config/initializers/teaspoon.rb\n\nManifest\nIf you'd rather require your spec files manually (to control order for instance) you can disable the suite matcher in\nthe configuration and use this file as a manifest.\n\nFor more information: http://github.com/modeset/teaspoon\n\nChai\nIf you're using Chai, you'll probably want to initialize your preferred assertion style. You can read more about Chai\nat: http://chaijs.com/guide/styles\n\nwindow.assert = chai.assert\nwindow.expect = chai.expect\nwindow.should = chai.should()\n\nYou can require your own javascript files here. By default this will include everything in application, however you\nmay get better load performance if you require the specific files that are being used in the spec that tests them.\n= require application\n```\nteaspoon_env.rb file:\n``` ruby\nSet RAILS_ROOT and load the environment if it's not already loaded.\nunless defined?(Rails)\n  ENV[\"RAILS_ROOT\"] = File.expand_path(\"../../\", FILE)\n  require File.expand_path(\"../../config/environment\", FILE)\nend\nTeaspoon.configure do |config|\n# Determines where the Teaspoon routes will be mounted. Changing this to \"/jasmine\" would allow you to browse to\n  # http://localhost:3000/jasmine to run your tests.\n  #config.mount_at = \"/teaspoon\"\n# Specifies the root where Teaspoon will look for files. If you're testing an engine using a dummy application it can\n  # be useful to set this to your engines root (e.g. Teaspoon::Engine.root).\n  # Note: Defaults to Rails.root if nil.\n  #config.root = nil\n# Paths that will be appended to the Rails assets paths\n  # Note: Relative to config.root.\n  config.asset_paths = [\"spec/javascripts\", \"spec/javascripts/stylesheets\"]\n# Fixtures are rendered through a controller, which allows using HAML, RABL/JBuilder, etc. Files in these paths will\n  # be rendered as fixtures.\n  config.fixture_paths = [\"spec/javascripts/fixtures\"]\n# SUITES\n  #\n  # You can modify the default suite configuration and create new suites here. Suites are isolated from one another.\n  #\n  # When defining a suite you can provide a name and a block. If the name is left blank, :default is assumed. You can\n  # omit various directives and the ones defined in the default suite will be used.\n  #\n  # To run a specific suite\n  # - in the browser: http://localhost/teaspoon/[suite_name]\n  # - with the rake task: rake teaspoon suite=[suite_name]\n  # - with the cli: teaspoon --suite=[suite_name]\n  config.suite do |suite|\n# Specify the framework you would like to use. This allows you to select versions, and will do some basic setup for\n# you -- which you can override with the directives below. This should be specified first, as it can override other\n# directives.\n# Note: If no version is specified, the latest is assumed.\n#\n# Available: jasmine[1.3.1, 2.0.0], mocha[1.10.0, 1.17.1] qunit[1.12.0, 1.14.0]\nsuite.use_framework :mocha\n\n# Specify a file matcher as a regular expression and all matching files will be loaded when the suite is run. These\n# files need to be within an asset path. You can add asset paths using the `config.asset_paths`.\n#suite.matcher = \"{spec/javascripts,app/assets}/**/*_spec.{js,js.coffee,coffee}\"\n\n# This suites spec helper, which can require additional support files. This file is loaded before any of your test\n# files are loaded.\nsuite.helper = \"spec_helper\"\n\n# The core Teaspoon javascripts. It's recommended to include only the base files here, as you can require support\n# libraries from your spec helper.\n# Note: For CoffeeScript files use `\"teaspoon/jasmine\"` etc.\n#\n# Available: teaspoon-jasmine, teaspoon-mocha, teaspoon-qunit\nsuite.javascripts = [\"support/expect\", \"support/sinon\"]\n\n# You can include your own stylesheets if you want to change how Teaspoon looks.\n# Note: Spec related CSS can and should be loaded using fixtures.\n#suite.stylesheets = [\"teaspoon\"]\n\n# Partial to be rendered in the head tag of the runner. You can use the provided ones or define your own by creating\n# a `_boot.html.erb` in your fixtures path, and adjust the config to `\"/boot\"` for instance.\n#\n# Available: boot, boot_require_js\n#suite.boot_partial = \"boot\"\n\n# Partial to be rendered in the body tag of the runner. You can define your own to create a custom body structure.\n#suite.body_partial = \"body\"\n\n# Assets to be ignored when generating coverage reports. Accepts an array of filenames or regular expressions. The\n# default excludes assets from vendor, gems and support libraries.<br/><br/>\n#suite.no_coverage = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}]\n\n# Hooks allow you to use `Teaspoon.hook(\"fixtures\")` before, after, or during your spec run. This will make a\n# synchronous Ajax request to the server that will call all of the blocks you've defined for that hook name.\n#suite.hook :fixtures, proc{ }\n\nend\n# Example suite. Since we're just filtering to files already within the root test/javascripts, these files will also\n  # be run in the default suite -- but can be focused into a more specific suite.\n  #config.suite :targeted do |suite|\n  #  suite.matcher = \"test/javascripts/targeted/*_test.{js,js.coffee,coffee}\"\n  #end\n# CONSOLE RUNNER SPECIFIC\n  #\n  # These configuration directives are applicable only when running via the rake task or command line interface. These\n  # directives can be overridden using the command line interface arguments or with ENV variables when using the rake\n  # task.\n  #\n  # Command Line Interface:\n  # teaspoon --driver=phantomjs --server-port=31337 --fail-fast=true --format=junit --suite=my_suite /spec/file_spec.js\n  #\n  # Rake:\n  # teaspoon DRIVER=phantomjs SERVER_PORT=31337 FAIL_FAST=true FORMATTERS=junit suite=my_suite\n# Specify which headless driver to use. Supports PhantomJS and Selenium Webdriver.\n  #\n  # Available: phantomjs, selenium\n  # PhantomJS: https://github.com/modeset/teaspoon/wiki/Using-PhantomJS\n  # Selenium Webdriver: https://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n  #config.driver = \"phantomjs\"\n# Specify additional options for the driver.\n  #\n  # PhantomJS: https://github.com/modeset/teaspoon/wiki/Using-PhantomJS\n  # Selenium Webdriver: https://github.com/modeset/teaspoon/wiki/Using-Selenium-WebDriver\n  config.driver_options = \"selenium\"\n# Specify the timeout for the driver. Specs are expected to complete within this time frame or the run will be\n  # considered a failure. This is to avoid issues that can arise where tests stall.\n  #config.driver_timeout = 180\n# Specify a server to use with Rack (e.g. thin, mongrel). If nil is provided Rack::Server is used.\n  #config.server = nil\n# Specify a port to run on a specific port, otherwise Teaspoon will use a random available port.\n  #config.server_port = nil\n# Timeout for starting the server in seconds. If your server is slow to start you may have to bump this, or you may\n  # want to lower this if you know it shouldn't take long to start.\n  #config.server_timeout = 20\n# Force Teaspoon to fail immediately after a failing suite. Can be useful to make Teaspoon fail early if you have\n  # several suites, but in environments like CI this may not be desirable.\n  #config.fail_fast = true\n# Specify the formatters to use when outputting the results.\n  # Note: Output files can be specified by using \"junit>/path/to/output.xml\".\n  #\n  # Available: dot, documentation, clean, json, junit, pride, snowday, swayze_or_oprah, tap, tap_y, teamcity\n  #config.formatters = [\"dot\"]\n# Specify if you want color output from the formatters.\n  #config.color = true\n# Teaspoon pipes all console[log/debug/error] to $stdout. This is useful to catch places where you've forgotten to\n  # remove them, but in verbose applications this may not be desirable.\n  #config.suppress_log = false\n# COVERAGE REPORTS / THRESHOLD ASSERTIONS\n  #\n  # Coverage reports requires Istanbul (https://github.com/gotwarlost/istanbul) to add instrumentation to your code and\n  # display coverage statistics.\n  #\n  # Coverage configurations are similar to suites. You can define several, and use different ones under different\n  # conditions.\n  #\n  # To run with a specific coverage configuration\n  # - with the rake task: rake teaspoon USE_COVERAGE=[coverage_name]\n  # - with the cli: teaspoon --coverage=[coverage_name]\n# Specify that you always want a coverage configuration to be used.\n  #config.use_coverage = nil\nconfig.coverage do |coverage|\n# Which coverage reports Instanbul should generate. Correlates directly to what Istanbul supports.\n#\n# Available: text-summary, text, html, lcov, lcovonly, cobertura, teamcity\n#coverage.reports = [\"text-summary\", \"html\"]\n\n# The path that the coverage should be written to - when there's an artifact to write to disk.\n# Note: Relative to `config.root`.\n#coverage.output_dir = \"coverage\"\n\n# Various thresholds requirements can be defined, and those thresholds will be checked at the end of a run. If any\n# aren't met the run will fail with a message. Thresholds can be defined as a percentage (0-100), or nil.\n#coverage.statements = nil\n#coverage.functions = nil\n#coverage.branches = nil\n#coverage.lines = nil\n\nend\nend\n```\n. thank you @jejacks0n you right! The server works now, thank you\n. ",
    "chaomao": "I have the same error, and try add the RAILS_ENV=test before teaspoon, then it works\nI don't know whether it is related with spring or other preloader\n. thank you for reply.\nIs there some way to make it fast? add one issue for istanbul to enable cache?\n. I have the same error, and try add the RAILS_ENV=test before teaspoon, then it works\nI don't know whether it is related with spring or other preloader\n. thank you for reply.\nIs there some way to make it fast? add one issue for istanbul to enable cache?\n. ",
    "mebibou": "@chaomao you are right it solved this for me too. The strange thing is that it was working yesterday, and suddenly not anymore. What is the cause?\n. @chaomao you are right it solved this for me too. The strange thing is that it was working yesterday, and suddenly not anymore. What is the cause?\n. ",
    "sbkok": "+1 on this one\n. +1 on this one\n. ",
    "antonysastre": "+1, anyone with clues?\n. Okej in my case it was an issue with the Gemfile. Make sure teaspoon is loaded under group :development, :test.\nAlso I was only using 'guard-teaspoon' and expecting 'teaspoon' to be included as a requirement, which won't work, I had to add 'teaspoon' as well in the Gemfile.\n. +1, anyone with clues?\n. Okej in my case it was an issue with the Gemfile. Make sure teaspoon is loaded under group :development, :test.\nAlso I was only using 'guard-teaspoon' and expecting 'teaspoon' to be included as a requirement, which won't work, I had to add 'teaspoon' as well in the Gemfile.\n. ",
    "j-a-m-l": "Thanks @antonysastre! I've exactly the same problem.\n. I think it should warn explicitly this possible problem.\n. Thanks @antonysastre! I've exactly the same problem.\n. I think it should warn explicitly this possible problem.\n. ",
    "mraaroncruz": "Solved by @antonysastre as well\n. The problem with what you already have in the README is that I am so used to just seeing\ngem \"some_gem\"\nthat it is hard to notice when something different is there. Like reading an iTunes terms notice.  \nThe underlying problem is that the group :test idiom is a leaky abstraction when dealing with testing tools. \nI really shouldn't have to add teaspoon to my development group.\nI think you should be fine not changing anything. People who use this kind of tool are generally savvy enough to search google or the teaspoon issues for the solution. Or if @noijd's solution is possible, that would be best IMO.\n. Solved by @antonysastre as well\n. The problem with what you already have in the README is that I am so used to just seeing\ngem \"some_gem\"\nthat it is hard to notice when something different is there. Like reading an iTunes terms notice.  \nThe underlying problem is that the group :test idiom is a leaky abstraction when dealing with testing tools. \nI really shouldn't have to add teaspoon to my development group.\nI think you should be fine not changing anything. People who use this kind of tool are generally savvy enough to search google or the teaspoon issues for the solution. Or if @noijd's solution is possible, that would be best IMO.\n. ",
    "full-of-foo": "@antonysastre Thank you! That worked :+1: \n. @antonysastre Thank you! That worked :+1: \n. ",
    "sebfie": "No, I did not. I did not understand what is it for. It will insert element in the DOM ?\n. I used it this way and it worked. thank you\n```\nuse require to load any .js file available to the asset pipeline\ndescribe \"Unit testing great quotes\", ->\n  $compile = undefined\n  $rootScope = undefined\n  $timeout = undefined\n  element = undefined\n# Load the myApp module, which contains the directive\n  beforeEach module(\"Perspective\")\n# Store references to $rootScope and $compile\n  # so they are available to all tests in this describe block\n  beforeEach inject(($compile, $rootScope, Application, $timeout ) ->\n# The injector unwraps the underscores (_) from around the parameter names when matching\n$compile = _$compile_\n$rootScope = _$rootScope_\n$timeout = _$timeout_\nApplication = _Application_\n\n$rootScope.application = new Application({ name: 'myApp', allowed_users: [\"sf@test.com\", \"test@lol.com\"] })\n\nfixture.set(\"<input id='tags' name='tags' class='tagsinput tagsinput-primary' user_autocomplete='' value='#{$rootScope.application.allowed_users.join(',')}' application='application' />\")\n\nelement = fixture.$el.find('input')\n\n$compile(element)($rootScope)\n\n)\nit \"Replaces the element with the appropriate content\", ->\n    # We flush timout to clear the queue\n    $timeout.flush()\n# Check that the compiled element contains the templated content\nexpect(element.val()).toBe $rootScope.application.allowed_users\n\n```\nBut I am not sure to understood what a fixture really is !\n. Thank you for explanation ! \n. No, I did not. I did not understand what is it for. It will insert element in the DOM ?\n. I used it this way and it worked. thank you\n```\nuse require to load any .js file available to the asset pipeline\ndescribe \"Unit testing great quotes\", ->\n  $compile = undefined\n  $rootScope = undefined\n  $timeout = undefined\n  element = undefined\n# Load the myApp module, which contains the directive\n  beforeEach module(\"Perspective\")\n# Store references to $rootScope and $compile\n  # so they are available to all tests in this describe block\n  beforeEach inject(($compile, $rootScope, Application, $timeout ) ->\n# The injector unwraps the underscores (_) from around the parameter names when matching\n$compile = _$compile_\n$rootScope = _$rootScope_\n$timeout = _$timeout_\nApplication = _Application_\n\n$rootScope.application = new Application({ name: 'myApp', allowed_users: [\"sf@test.com\", \"test@lol.com\"] })\n\nfixture.set(\"<input id='tags' name='tags' class='tagsinput tagsinput-primary' user_autocomplete='' value='#{$rootScope.application.allowed_users.join(',')}' application='application' />\")\n\nelement = fixture.$el.find('input')\n\n$compile(element)($rootScope)\n\n)\nit \"Replaces the element with the appropriate content\", ->\n    # We flush timout to clear the queue\n    $timeout.flush()\n# Check that the compiled element contains the templated content\nexpect(element.val()).toBe $rootScope.application.allowed_users\n\n```\nBut I am not sure to understood what a fixture really is !\n. Thank you for explanation ! \n. ",
    "mrjoshuak": "I'd like to add my vote to removing phantomjs from the gemspec. Other projects seem to agree that the gem is not the canonical release of phantomjs and therefore unreliable.  Due to the instructions of a different package we use we already had it installed, and the gem became a debugging concern since it was not immediately clear which version teaspoon was using.\n. I'd like to add my vote to removing phantomjs from the gemspec. Other projects seem to agree that the gem is not the canonical release of phantomjs and therefore unreliable.  Due to the instructions of a different package we use we already had it installed, and the gem became a debugging concern since it was not immediately clear which version teaspoon was using.\n. ",
    "Emerson": "@jejacks0n - you are correct! Just got it working by disabling all the caching options in the test environment. Thanks :+1: \n. Closing. After playing around with suite.stylesheets and suite.helper in the teaspoon_env.rb file I was able to resolve the issue. Also had to do a number of \"hard refreshes\".\n. Also experiencing super slow tests and would appreciate this being merged if possible :-)\n. Hmm, still pretty slow - but I found the issue and it's specific to my application. My app is built in Ember and loads a ton of JS files (491 to be exact). In my development environment, I just serve up a single application.js file, which has obvious drawbacks, but provides me with the speed I need to develop efficiently.\nIs there any way to tell Teaspoon to concat my assets into one file?\n. @bramski - ah, silly me - forgot to actually disable asset expansion. Is that just a config setting like:\nconfig.expand_assets = false?\n. yup, just got it - but now every test is loading my entire merged JS - think I'm going to throw in the towel for now - this problem is specific to my app and the fact that I have so much JS.\n. @jejacks0n - you are correct! Just got it working by disabling all the caching options in the test environment. Thanks :+1: \n. Closing. After playing around with suite.stylesheets and suite.helper in the teaspoon_env.rb file I was able to resolve the issue. Also had to do a number of \"hard refreshes\".\n. Also experiencing super slow tests and would appreciate this being merged if possible :-)\n. Hmm, still pretty slow - but I found the issue and it's specific to my application. My app is built in Ember and loads a ton of JS files (491 to be exact). In my development environment, I just serve up a single application.js file, which has obvious drawbacks, but provides me with the speed I need to develop efficiently.\nIs there any way to tell Teaspoon to concat my assets into one file?\n. @bramski - ah, silly me - forgot to actually disable asset expansion. Is that just a config setting like:\nconfig.expand_assets = false?\n. yup, just got it - but now every test is loading my entire merged JS - think I'm going to throw in the towel for now - this problem is specific to my app and the fact that I have so much JS.\n. ",
    "nono": "Thanks! By the way, when do you think you will release a new version of teaspoon?\n. Hi, are you more confident now to release a new version?\n. Thanks :)\n. Thanks! By the way, when do you think you will release a new version of teaspoon?\n. Hi, are you more confident now to release a new version?\n. Thanks :)\n. ",
    "darethas": "Yes, I can access it in the browser with http://localhost:port/teaspoon\n. Yep, you are correct. I set the config to use selenium and it works just fine. Thank you for your time\n. Yes, I can access it in the browser with http://localhost:port/teaspoon\n. Yep, you are correct. I set the config to use selenium and it works just fine. Thank you for your time\n. ",
    "dhruvparmar372": "I am currently using Teaspoon to unit test my Ember App. I have to unit test my models. For that I need to get data(test data) from the server (rails server) into my application. The problem is I cannot get the data until I am logged in due to design of the application. \nThe login part is handle by devise. When using rspec for testing backend stuff I can use a devise helper to login and get the data. I cannot implement the same in Teaspoon. I have tried changing the config file but I am getting errors. \nWhat my question was that is there any way to run a piece of code before I enter the /teaspoon route. So that I can get my authentication helper to log me in and then when the app in teaspoon requests for data I don't get the unauthorized error from the server. \nI believe Teaspoon is meant to test models in your javascript app. I know I can always have fixtures to load my data instead of getting test data from the server but I currently don't want to do that. \n. I am currently using Teaspoon to unit test my Ember App. I have to unit test my models. For that I need to get data(test data) from the server (rails server) into my application. The problem is I cannot get the data until I am logged in due to design of the application. \nThe login part is handle by devise. When using rspec for testing backend stuff I can use a devise helper to login and get the data. I cannot implement the same in Teaspoon. I have tried changing the config file but I am getting errors. \nWhat my question was that is there any way to run a piece of code before I enter the /teaspoon route. So that I can get my authentication helper to log me in and then when the app in teaspoon requests for data I don't get the unauthorized error from the server. \nI believe Teaspoon is meant to test models in your javascript app. I know I can always have fixtures to load my data instead of getting test data from the server but I currently don't want to do that. \n. ",
    "martco": "You're right I missed a state. I don't have info you don't have. Feel free to reject with furious anger.\n. You're right I missed a state. I don't have info you don't have. Feel free to reject with furious anger.\n. ",
    "kurko": "I'm using 1.9.1, which is pretty recent. I updated to 1.9.2 and it persists. I downgraded to 1.7.0, but it persists too.\n. I'm using 1.9.1, which is pretty recent. I updated to 1.9.2 and it persists. I downgraded to 1.7.0, but it persists too.\n. ",
    "bf4": "Thank you! :rainbow: \n. Thank you! :rainbow: \n. ",
    "denisw": "OK, while I ran bundle install today but probably an older version was in my Gemfile.lock.\n. OK, while I ran bundle install today but probably an older version was in my Gemfile.lock.\n. ",
    "jaredmoody": "DOH thanks. I was coming from konacha where I didn't have to do that require step.\nWould something similar be valuable here, where if you require the chai support library, should and expect get setup?\n. Sure, makes sense. However, even with the chai documentation, I wouldn't have known that chai was being exposed as chai by teaspoon so wouldn't have known to do window.should = chai.should()\nI'd like to add that information to the mocha wiki page where chai is mentioned, would that be ok?\n. Ok, I understand more now, thanks!\n. Updated to remove the beforeEach calls in the example.\n. @mikepack I don't think so. The only cases that seemed like they might be the same were the issues with assets, but I don't have an asset host in the test environment and both RAILS_ENV=test teaspoon and RAILS_ENV=test rake teaspoon fail with the same \"undefined method Split\" error. \nI may be having one of those issues as well in the development environment, but looks like a different issue in test environment to me.\n. ~~FWIW I'm getting this error with phantomjs 2.0.0~~\nSorry, it's confusing because 2.0.1 from homebrew prints out 2.0.0 for phantomjs -v\nConfirmed that 2.0.0 works for me and 2.0.1 gives this error.\n. DOH thanks. I was coming from konacha where I didn't have to do that require step.\nWould something similar be valuable here, where if you require the chai support library, should and expect get setup?\n. Sure, makes sense. However, even with the chai documentation, I wouldn't have known that chai was being exposed as chai by teaspoon so wouldn't have known to do window.should = chai.should()\nI'd like to add that information to the mocha wiki page where chai is mentioned, would that be ok?\n. Ok, I understand more now, thanks!\n. Updated to remove the beforeEach calls in the example.\n. @mikepack I don't think so. The only cases that seemed like they might be the same were the issues with assets, but I don't have an asset host in the test environment and both RAILS_ENV=test teaspoon and RAILS_ENV=test rake teaspoon fail with the same \"undefined method Split\" error. \nI may be having one of those issues as well in the development environment, but looks like a different issue in test environment to me.\n. ~~FWIW I'm getting this error with phantomjs 2.0.0~~\nSorry, it's confusing because 2.0.1 from homebrew prints out 2.0.0 for phantomjs -v\nConfirmed that 2.0.0 works for me and 2.0.1 gives this error.\n. ",
    "mguterl": "I ran into this same issue. I wonder if there'd be value in some type of \"migrating from konacha\" documentation?\n. I ran into this same issue. I wonder if there'd be value in some type of \"migrating from konacha\" documentation?\n. ",
    "viddo": "Ah ok, I use Rails 4. I'll see if I can fix this.\nThanks for the prompt answer!\n. More or less same error message as before, but w/o the rake aborted message:\nsh\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:62202/teaspoon/default\nError: Failed to load: http://127.0.0.1:62202/teaspoon/default?reporter=Console\n. That seemed to do the trick:\n``` sh\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:51554/teaspoon/default\nError: Sprockets::FileNotFound: couldn't find file 'broken_file.js'\n  (in /Users/viddo/src/project/app/assets/javascripts/application.js:1)\n  # http://127.0.0.1:51554/teaspoon/default?reporter=Console:1\nError: Failed to load: http://127.0.0.1:51554/teaspoon/default?reporter=Console\n``\n. Running in dev env yes. I managed to narrow down the cause to be related to the [better_errors gem](https://github.com/charliesome/better_errors) and having settingconfig.eager_load = true`.\nYou should be able to reproduce it by setting up a fresh Rails 4 project and apply this patch: https://gist.github.com/viddo/7104245 (the rest of application.rb and development.rb are the default settings).\n. Ah ok, I use Rails 4. I'll see if I can fix this.\nThanks for the prompt answer!\n. More or less same error message as before, but w/o the rake aborted message:\nsh\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:62202/teaspoon/default\nError: Failed to load: http://127.0.0.1:62202/teaspoon/default?reporter=Console\n. That seemed to do the trick:\n``` sh\n$ bundle exec teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:51554/teaspoon/default\nError: Sprockets::FileNotFound: couldn't find file 'broken_file.js'\n  (in /Users/viddo/src/project/app/assets/javascripts/application.js:1)\n  # http://127.0.0.1:51554/teaspoon/default?reporter=Console:1\nError: Failed to load: http://127.0.0.1:51554/teaspoon/default?reporter=Console\n``\n. Running in dev env yes. I managed to narrow down the cause to be related to the [better_errors gem](https://github.com/charliesome/better_errors) and having settingconfig.eager_load = true`.\nYou should be able to reproduce it by setting up a fresh Rails 4 project and apply this patch: https://gist.github.com/viddo/7104245 (the rest of application.rb and development.rb are the default settings).\n. ",
    "alisnic": "Also rails 4 complains with an error page if the db migrations were not applied, that causes bundle exec teaspoon to fail. Maybe there should be an option to display the html of the response on fail?\n. Modifying teaspoon spec views to use javascript_include_tag instead of using javascript_include_tag_for_teaspoon made /teaspoon orders of magnitude faster. It seems that javascript_include_tag_for_teaspoon is ignoring config.assets.debug\n. thanks for the explanation, i found out how to do it. indeed a custom\nlayout did the thing.\nOn Oct 28, 2013 5:40 PM, \"jejacks0n\" notifications@github.com wrote:\n\nI would take a pull request for a generator that copies the layout into\nthe application.. that way I can update the readme to explain this, and how\nto get around it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/issues/124#issuecomment-27222807\n.\n. Oh, silly me. Sorry I wasted your time. I completely forgot about that.\n. Also rails 4 complains with an error page if the db migrations were not applied, that causes bundle exec teaspoon to fail. Maybe there should be an option to display the html of the response on fail?\n. Modifying teaspoon spec views to use javascript_include_tag instead of using javascript_include_tag_for_teaspoon made /teaspoon orders of magnitude faster. It seems that javascript_include_tag_for_teaspoon is ignoring config.assets.debug\n. thanks for the explanation, i found out how to do it. indeed a custom\nlayout did the thing.\nOn Oct 28, 2013 5:40 PM, \"jejacks0n\" notifications@github.com wrote:\nI would take a pull request for a generator that copies the layout into\nthe application.. that way I can update the readme to explain this, and how\nto get around it.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/issues/124#issuecomment-27222807\n.\n. Oh, silly me. Sorry I wasted your time. I completely forgot about that.\n. \n",
    "bradrobertson": "We're getting the same error, just removed better_errors from our Gemfile and it still happens. The output we get when running bundle exec teaspoon is merely:\nbash\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:51237/teaspoon/default\ncache: [GET /teaspoon/default?reporter=Console] miss\nFailed to load: http://127.0.0.1:51237/teaspoon/default?reporter=Console\nWe're in the process of upgrading to rails 4, and we couldn't get the Konacha runner working on our CI machine so we're attempting a switch over to Teaspoon. Specs pass through the browser, but the runner just doesn't load up a server.\nCan you suggest anything that would give us a bit more output about why it's failing?\n. nm sorry, we've got some custom middleware that was blocking the runner.\nIt might be useful to document that the test runner is still mounted inside your normal rails app, so any custom middleware might affect the request to /teaspoon\n. This sort of relates to something we're interested in. We've had to just add some styles to a generic styles.css as a fixture that contains a <style> tag with all the css in it. What we really want though is our asset_pipeline scss files to be available in our test suite. Some of those styles actually affect the outcome of our tests (ie checking visibility) and it'd be ideal if we didn't have to repeat the css code.\nIs this possible in any way? We couldn't figure it out.\n. @jejacks0n thanks for the quick response. I might suggest updating the docs then as the Spec related CSS can and should be loaded using fixtures note is a bit unclear. Our application stylesheets are in a sense spec related since they contain things like utility classes that hide/show based on js actions. Happy to submit a PR if you're fine with doco updates.\nAlso, I assume @brewster1134 is looking for something akin to what Konacha does, where the test runner itself runs in the parent window, and all tests are in an iframe, thus the runner css is kept separate from the actual test css. Correct me if I'm wrong @brewster1134. I don't think this is really possible with teaspoon as it all runs on the same page.\n. ya i didn't really understand eager_load to begin with. we've fixed it to set it to false and it works\n. We're getting the same error, just removed better_errors from our Gemfile and it still happens. The output we get when running bundle exec teaspoon is merely:\nbash\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:51237/teaspoon/default\ncache: [GET /teaspoon/default?reporter=Console] miss\nFailed to load: http://127.0.0.1:51237/teaspoon/default?reporter=Console\nWe're in the process of upgrading to rails 4, and we couldn't get the Konacha runner working on our CI machine so we're attempting a switch over to Teaspoon. Specs pass through the browser, but the runner just doesn't load up a server.\nCan you suggest anything that would give us a bit more output about why it's failing?\n. nm sorry, we've got some custom middleware that was blocking the runner.\nIt might be useful to document that the test runner is still mounted inside your normal rails app, so any custom middleware might affect the request to /teaspoon\n. This sort of relates to something we're interested in. We've had to just add some styles to a generic styles.css as a fixture that contains a <style> tag with all the css in it. What we really want though is our asset_pipeline scss files to be available in our test suite. Some of those styles actually affect the outcome of our tests (ie checking visibility) and it'd be ideal if we didn't have to repeat the css code.\nIs this possible in any way? We couldn't figure it out.\n. @jejacks0n thanks for the quick response. I might suggest updating the docs then as the Spec related CSS can and should be loaded using fixtures note is a bit unclear. Our application stylesheets are in a sense spec related since they contain things like utility classes that hide/show based on js actions. Happy to submit a PR if you're fine with doco updates.\nAlso, I assume @brewster1134 is looking for something akin to what Konacha does, where the test runner itself runs in the parent window, and all tests are in an iframe, thus the runner css is kept separate from the actual test css. Correct me if I'm wrong @brewster1134. I don't think this is really possible with teaspoon as it all runs on the same page.\n. ya i didn't really understand eager_load to begin with. we've fixed it to set it to false and it works\n. ",
    "nilbus": "Interesting idea, though I'm really looking to get the same output format as the HTML reporter.\nNow that I think about it, maybe for this kind of output, I shouldn't be using the Console reporter at all, and just grab the output directly from /teaspoon/default from the server it starts up. What do you think?\n. If that's not easily done, I don't know that it's worth the effort. For my\npurposes, I think it'll work to just redirect the dot formatter to stdout\nand use a text file for the report.\nFeel free to close this if you don't think it'll happen.\nThanks!\n. I actually may attack this after all.\n. Good question. In addition to running the tests, our Jenkins CI builds\ncreate build artifacts that give us an HTML representation of each of our\ntest suites' results (rspec, java dbunit, etc., and now teaspoon) and save\nthem for later viewing. This is useful because our test suites run\nconcurrently, and some generate lots and lots of output in the build log\nthat is not usually helpful when trying to examine the test results.\nTeaspoon was the odd one out that was only able to output the test results\nto the CI build log and not an HTML file.\n. I really like the HTML format that Teaspoon already provides. I considered\ntrying to recreate something similar, translating from TAP data, but I have\na hard time trying to justify the work to recreate that when I can instead\ncapture what is already provided.\nThere's an important difference too in that the HTML export is an active\ntest, whereas HTML output that translated from TAP data would be static.\nSince the export is actually running the test against the javascript code\non each load, it can be investigated in different browsers right on the\nexport page rather than having to check out the right branch and run\nteaspoon locally.\nMostly I just wanted artifacts that look and act like the Teaspoon web\ninterface itself.\n. They cannot be re-served from the CI box. Every build has a different\nbranch or commit with potentially different versions of assets. Once the CI\nbuild is complete, not only does the server stop, but the build tree is\ndeleted. This is why we need to save a copy of all the assets.\nAs far as I can tell, phantom has no mechanism for downloading a page's\nassets and rewriting the URLs on the page so that it can load the assets\nlocally. You would have to implement that yourself, which would be quite an\nundertaking.\n. Interesting idea, though I'm really looking to get the same output format as the HTML reporter.\nNow that I think about it, maybe for this kind of output, I shouldn't be using the Console reporter at all, and just grab the output directly from /teaspoon/default from the server it starts up. What do you think?\n. If that's not easily done, I don't know that it's worth the effort. For my\npurposes, I think it'll work to just redirect the dot formatter to stdout\nand use a text file for the report.\nFeel free to close this if you don't think it'll happen.\nThanks!\n. I actually may attack this after all.\n. Good question. In addition to running the tests, our Jenkins CI builds\ncreate build artifacts that give us an HTML representation of each of our\ntest suites' results (rspec, java dbunit, etc., and now teaspoon) and save\nthem for later viewing. This is useful because our test suites run\nconcurrently, and some generate lots and lots of output in the build log\nthat is not usually helpful when trying to examine the test results.\nTeaspoon was the odd one out that was only able to output the test results\nto the CI build log and not an HTML file.\n. I really like the HTML format that Teaspoon already provides. I considered\ntrying to recreate something similar, translating from TAP data, but I have\na hard time trying to justify the work to recreate that when I can instead\ncapture what is already provided.\nThere's an important difference too in that the HTML export is an active\ntest, whereas HTML output that translated from TAP data would be static.\nSince the export is actually running the test against the javascript code\non each load, it can be investigated in different browsers right on the\nexport page rather than having to check out the right branch and run\nteaspoon locally.\nMostly I just wanted artifacts that look and act like the Teaspoon web\ninterface itself.\n. They cannot be re-served from the CI box. Every build has a different\nbranch or commit with potentially different versions of assets. Once the CI\nbuild is complete, not only does the server stop, but the build tree is\ndeleted. This is why we need to save a copy of all the assets.\nAs far as I can tell, phantom has no mechanism for downloading a page's\nassets and rewriting the URLs on the page so that it can load the assets\nlocally. You would have to implement that yourself, which would be quite an\nundertaking.\n. ",
    "epylinkn": "Awesome, I'll keep that in mind for next time.\nI'm probably more OCD but in the opposite way with spacing. =P\n. Awesome, I'll keep that in mind for next time.\nI'm probably more OCD but in the opposite way with spacing. =P\n. ",
    "TheMetalCode": "I understand - thanks for your consideration! I'm working with my own\nhacked jasmine-jquery in spec/javascripts/support for now.\nOn Fri, Nov 1, 2013 at 5:20 PM, jejacks0n notifications@github.com wrote:\n\nIf you feel like this should be changed, I would suggest checking here:\nhttps://github.com/velesin/jasmine-jquery\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/pull/127#issuecomment-27610511\n.\n. I understand - thanks for your consideration! I'm working with my own\nhacked jasmine-jquery in spec/javascripts/support for now.\n\nOn Fri, Nov 1, 2013 at 5:20 PM, jejacks0n notifications@github.com wrote:\n\nIf you feel like this should be changed, I would suggest checking here:\nhttps://github.com/velesin/jasmine-jquery\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/modeset/teaspoon/pull/127#issuecomment-27610511\n.\n. \n",
    "theworkerant": "I get the same on Travis with my new project, no tests even written.\n. @jayzes Sure thing.\nhttps://gist.github.com/theworkerant/e5b78c5403466b320493#file-gemfile-rb\n. I get the same on Travis with my new project, no tests even written.\n. @jayzes Sure thing.\nhttps://gist.github.com/theworkerant/e5b78c5403466b320493#file-gemfile-rb\n. ",
    "tommoor": "same issue here, what fix did you add?\n. It works in the test environment fine but not travis. I think it would be helpful if you posted the changes you made for others that stumble across this issue :) :beers: \n. Ah okay, tried that and realised I'm getting a slightly different error actually - will continue to investigate:\n```\n$ bundle exec teaspoon\n** [Raven] Raven 0.7.0 ready to catch errors\nStarting the Teaspoon server...\n\n\nThin web server (v1.5.1 codename Straight Razor)\nMaximum connections set to 1024\nListening on 0.0.0.0:43971, CTRL+C to stop\nTeaspoon running default suite at http://127.0.0.1:43971/teaspoon/default\nError: Timeout::Error: execution expired\n  # http://127.0.0.1:43971/teaspoon/default?reporter=Console:1\nError: Failed to load: http://127.0.0.1:43971/teaspoon/default?reporter=Console\n```\n. I still can't get to the bottom of this, is there a way to make the output more verbose?\n. Tried this again using github as source, doesn't seem to have made a difference to the output for me?\n\n\n\n. You mean the hamburger button in the top right? Displays the same thing, is there somewhere else I should look? Btw - I'm using the hosted version on travis-ci.com if that makes any difference\n\n. same issue here, what fix did you add?\n. It works in the test environment fine but not travis. I think it would be helpful if you posted the changes you made for others that stumble across this issue :) :beers: \n. Ah okay, tried that and realised I'm getting a slightly different error actually - will continue to investigate:\n```\n$ bundle exec teaspoon\n** [Raven] Raven 0.7.0 ready to catch errors\nStarting the Teaspoon server...\n\n\nThin web server (v1.5.1 codename Straight Razor)\nMaximum connections set to 1024\nListening on 0.0.0.0:43971, CTRL+C to stop\nTeaspoon running default suite at http://127.0.0.1:43971/teaspoon/default\nError: Timeout::Error: execution expired\n  # http://127.0.0.1:43971/teaspoon/default?reporter=Console:1\nError: Failed to load: http://127.0.0.1:43971/teaspoon/default?reporter=Console\n```\n. I still can't get to the bottom of this, is there a way to make the output more verbose?\n. Tried this again using github as source, doesn't seem to have made a difference to the output for me?\n\n\n\n. You mean the hamburger button in the top right? Displays the same thing, is there somewhere else I should look? Btw - I'm using the hosted version on travis-ci.com if that makes any difference\n\n. ",
    "KarlGl": "Using the latest on master fixed this issue for me.\n. Using the latest on master fixed this issue for me.\n. ",
    "rwjblue": "The test failure has been fixed (I forgot that the tmp/ directory was not present in the repo so writing to it throws an error when run by Travis).\n@jejacks0n - Please let me know if there is anything else that needs tweaking/modification...\n. Awesome, thank you!\n. As it is now, we have to use a fork to use a custom extension. If you don't mind (and there are no issues to address after further review) I'd like to get it in on master (current 0.7 series) for now, and then update/upgrade to the new API once its ready. I'd prefer to point folks to the main repo vs using a fork (and forgetting to swap after 0.8/1.0 is out)...\n@jejacks0n - Ultimately it is totally up to you, we can make it work either way.\n. I completely agree with the less is more (configuration wise) direction that you seem to be going in. The reason that I implemented this as I have is mostly due to the way the existing configuration has been done. I would personally prefer a more API based approach that would allow my to create a class that has all of the required methods (or inherit from the default), and only override the specific methods that I needed to tweak. \nThe issue in this case was that the method that needed to be changed actually had more than one function (or at least combined two smaller functions): 1) Lookup the requested object in the asset pipeline, and 2) normalize the filename returned.  If these parts were split out into separate functions, I would have been perfectly happy to monkey-patch to override the individual part that I needed to modify (frankly we may still monkey-patch in our gem depending on the timing of a release with these changes).\n@jejacks0n - I am unsure if this clarifies the issue or makes it muddier, but I certainly hope that it is more of the former. I would definitely be happy to help hack out a public API that could be used for custom runners/configurations etc. Feel free to reach out (my contact email is in my profile) if you'd like.\n. The test failure has been fixed (I forgot that the tmp/ directory was not present in the repo so writing to it throws an error when run by Travis).\n@jejacks0n - Please let me know if there is anything else that needs tweaking/modification...\n. Awesome, thank you!\n. As it is now, we have to use a fork to use a custom extension. If you don't mind (and there are no issues to address after further review) I'd like to get it in on master (current 0.7 series) for now, and then update/upgrade to the new API once its ready. I'd prefer to point folks to the main repo vs using a fork (and forgetting to swap after 0.8/1.0 is out)...\n@jejacks0n - Ultimately it is totally up to you, we can make it work either way.\n. I completely agree with the less is more (configuration wise) direction that you seem to be going in. The reason that I implemented this as I have is mostly due to the way the existing configuration has been done. I would personally prefer a more API based approach that would allow my to create a class that has all of the required methods (or inherit from the default), and only override the specific methods that I needed to tweak. \nThe issue in this case was that the method that needed to be changed actually had more than one function (or at least combined two smaller functions): 1) Lookup the requested object in the asset pipeline, and 2) normalize the filename returned.  If these parts were split out into separate functions, I would have been perfectly happy to monkey-patch to override the individual part that I needed to modify (frankly we may still monkey-patch in our gem depending on the timing of a release with these changes).\n@jejacks0n - I am unsure if this clarifies the issue or makes it muddier, but I certainly hope that it is more of the former. I would definitely be happy to help hack out a public API that could be used for custom runners/configurations etc. Feel free to reach out (my contact email is in my profile) if you'd like.\n. ",
    "tstirrat": "I just ran into this issue too.. absolutely cannot get TAP formatting and cobertura coverage to work. I've tried setting options in the teaspoon_env.rb and specifying via command line. Tried also combinations of setting format in config and coverage-reports via command line (and vice versa). Nothing works.\n. I just ran into this issue too.. absolutely cannot get TAP formatting and cobertura coverage to work. I've tried setting options in the teaspoon_env.rb and specifying via command line. Tried also combinations of setting format in config and coverage-reports via command line (and vice versa). Nothing works.\n. ",
    "gotoAndBliss": "Hmm.. how could I find out? The console is produced by Teaspoon itself, so I figured that this would be the same one that it fails on.\n. You were totes justified to close it before. With good reason. Its not Teaspoon's fault. It's my driver. \nBut nonetheless, I can't thank you enough for the advice. I am absolutely grateful. Thank you very very much!\n. Hmm.. how could I find out? The console is produced by Teaspoon itself, so I figured that this would be the same one that it fails on.\n. You were totes justified to close it before. With good reason. Its not Teaspoon's fault. It's my driver. \nBut nonetheless, I can't thank you enough for the advice. I am absolutely grateful. Thank you very very much!\n. ",
    "revskill10": "Thank you for reminding.\nI could use teaspoon when i change driver to selenium.\n. Thank you for reminding.\nI could use teaspoon when i change driver to selenium.\n. ",
    "nikolas": "@jedschneider That's true. It's interesting that the describe block is in fact running, then.\n. @jejacks0n Thanks for that. I'm trying to run a slimmed down version of the mercury spec and I'm having the same issues. I'm looking at mercury's teaspoon config now.\n. I found it -- I'm using //= require_tree ./support/ in my spec_helper.js instead of putting it in the suite config. Also my test suite is in spec/javascripts instead of spec/ so maybe there's a path issue.\n. I don't get it though.. because teaspoon is finding the files, it's just not running the test. Where in mercury are you including mocha.js?\n. Oh mocha is already included in teaspoon - nevermind.\n. In fact, my whole problem was caused by including mocha.js manually in spec/javascripts/support! I'll close this issue.\n. Haha okay, I'll think before I leave 4 different comments next time.\n. I added this to my circle.yml we'll see if it works:\ntest:\n  post:\n    - bundle exec teaspoon\n. Cool I just added that info as well to this commit.\n. @jedschneider That's true. It's interesting that the describe block is in fact running, then.\n. @jejacks0n Thanks for that. I'm trying to run a slimmed down version of the mercury spec and I'm having the same issues. I'm looking at mercury's teaspoon config now.\n. I found it -- I'm using //= require_tree ./support/ in my spec_helper.js instead of putting it in the suite config. Also my test suite is in spec/javascripts instead of spec/ so maybe there's a path issue.\n. I don't get it though.. because teaspoon is finding the files, it's just not running the test. Where in mercury are you including mocha.js?\n. Oh mocha is already included in teaspoon - nevermind.\n. In fact, my whole problem was caused by including mocha.js manually in spec/javascripts/support! I'll close this issue.\n. Haha okay, I'll think before I leave 4 different comments next time.\n. I added this to my circle.yml we'll see if it works:\ntest:\n  post:\n    - bundle exec teaspoon\n. Cool I just added that info as well to this commit.\n. ",
    "benrudolph": "Ah OK great thanks for the pointer. I'll let you know. Closing since this doesn't look to be an issue with teaspoon\n. Not been too successful with this, just going with the selenium solution. Thanks for the tip\n. Ah OK great thanks for the pointer. I'll let you know. Closing since this doesn't look to be an issue with teaspoon\n. Not been too successful with this, just going with the selenium solution. Thanks for the tip\n. ",
    "trevmex": "This is addressed by pull request #149 (https://github.com/modeset/teaspoon/pull/149)\n. Good call, I'll add command-line args right now.\n. @jejacks0n check out the latest commits, they add the command line options for coverage thresholds (as well as a description of what they are doing).\nLet me know if you have any more questions!\n. To be clear, these thresholds are there so I can have my CI server break the build when JavaScript code coverage drops below a certain point. It is a very handy way of ensuring that we all write tests.\n. This is addressed by pull request #149 (https://github.com/modeset/teaspoon/pull/149)\n. Good call, I'll add command-line args right now.\n. @jejacks0n check out the latest commits, they add the command line options for coverage thresholds (as well as a description of what they are doing).\nLet me know if you have any more questions!\n. To be clear, these thresholds are there so I can have my CI server break the build when JavaScript code coverage drops below a certain point. It is a very handy way of ensuring that we all write tests.\n. ",
    "rickmzp": "Same to you! :)\n. Sorry I didn't reply earlier. Yes, I do think that is what should happen. At least that's what I'm used to with ruby + rspec. I think it should test that it runs properly first (no syntax/ref errors on init), and only if that works, then start test the behavior via the test suite.\n. Oh that's an interesting point about unimportant JS files. A more ideal solution could be to set a strict flag or something like poltergeist does: https://github.com/jonleighton/poltergeist/blob/master/lib/capybara/poltergeist/errors.rb#L48-L54\nIn legacy projects I turn js_errors off, but for my production projects I like being hyperaware of anything generating exceptions in my code base :)\n. Same to you! :)\n. Sorry I didn't reply earlier. Yes, I do think that is what should happen. At least that's what I'm used to with ruby + rspec. I think it should test that it runs properly first (no syntax/ref errors on init), and only if that works, then start test the behavior via the test suite.\n. Oh that's an interesting point about unimportant JS files. A more ideal solution could be to set a strict flag or something like poltergeist does: https://github.com/jonleighton/poltergeist/blob/master/lib/capybara/poltergeist/errors.rb#L48-L54\nIn legacy projects I turn js_errors off, but for my production projects I like being hyperaware of anything generating exceptions in my code base :)\n. ",
    "jalcine": "I should note that I'm using guard-teaspoon as well. I decided to drop the use of it and just go straight with using it in the Web browser.\n. Yup, it's right on https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs_driver.rb#L47.\nTrying to invoke this from the command line just reports from PhantomJS an ability to load a file. I'm guessing this is still a bit raw :)\n. I'm running PhantomJS 1.9.0 on a Debian machine. My setup is quite vanilla, and I haven't made any modifications to the configuration made by guard init teaspoon.\n. I should note that I'm using guard-teaspoon as well. I decided to drop the use of it and just go straight with using it in the Web browser.\n. Yup, it's right on https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/drivers/phantomjs_driver.rb#L47.\nTrying to invoke this from the command line just reports from PhantomJS an ability to load a file. I'm guessing this is still a bit raw :)\n. I'm running PhantomJS 1.9.0 on a Debian machine. My setup is quite vanilla, and I haven't made any modifications to the configuration made by guard init teaspoon.\n. ",
    "simsalabim": "The same thing here, phantomjs v 1.9.0, Ubuntu 13.10 64bit, teaspoon v. 0.7.7\nI came with runner.js from @jejacks0n's  gist above and succeed. \nI have no idea what caused the issue but think it worth switching to js implementation of runner. Those who neither have any idea nor time and willing to investigate the issue can follow the same way, the only limitation is updating the gem and having the same problem again.\n. Update:\nFound this issue reported - http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=730087\nI think it would be better to switch driver to js implementation from the gist in the repository. Since teaspoon depnds on phantom which cannot be bugless it would be better to reduce probability of such issues, moreover coffeescript is just a preprocessor and eventually javascript code is being executed. @jejacks0n ?\n. I mean the teaspoon team can keep writing runner in coffeescript but compile it into js before releasing the gem in production. It would be nice.\n. Recent version gem 'teaspoon', github: 'modeset/teaspoon' with js driver works fine for me.\n. For some reason install_generator_spec.rb fails for me even on current master.\n. The same thing here, phantomjs v 1.9.0, Ubuntu 13.10 64bit, teaspoon v. 0.7.7\nI came with runner.js from @jejacks0n's  gist above and succeed. \nI have no idea what caused the issue but think it worth switching to js implementation of runner. Those who neither have any idea nor time and willing to investigate the issue can follow the same way, the only limitation is updating the gem and having the same problem again.\n. Update:\nFound this issue reported - http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=730087\nI think it would be better to switch driver to js implementation from the gist in the repository. Since teaspoon depnds on phantom which cannot be bugless it would be better to reduce probability of such issues, moreover coffeescript is just a preprocessor and eventually javascript code is being executed. @jejacks0n ?\n. I mean the teaspoon team can keep writing runner in coffeescript but compile it into js before releasing the gem in production. It would be nice.\n. Recent version gem 'teaspoon', github: 'modeset/teaspoon' with js driver works fine for me.\n. For some reason install_generator_spec.rb fails for me even on current master.\n. ",
    "tkriplean": "You're right, my fault. I reverted. \n. You're right, my fault. I reverted. \n. ",
    "mykoweb": "I do not see the same exception in the debug console which is weird.\nI found the get$ method in the ember-auth-* gems. When I removed these gems from the manifest, the test passes without the global failure.\nI'll dig some more to see why this is failing the way it is. Closing this issue.\nThanks\n. I dug some more and it looks like it may be a browser issue.\nThe piece of code causing the error is from one of the ember-auth gems (ember-auth-module-ember-data):\nget$(this, 'auth').addHandler('signInSuccess', get$(this, 'findUser').bind(this));\nThis code is automatically generated by EmberScript.\nAnyway, when I debug in the Chrome console (btw, the tests are passing in Chrome without errors), it looks like my tests are properly parsing native code provided by Chrome. Here is the output from the debug console:\n\n> get$(this, 'findUser').bind(this).toString()\n  \"function () { [native code] }\"\n\nHowever, when doing the same thing in Safari (where the tests are passing, but I see an error in the debug console), this is what I get:\n\n> get$(this, 'findUser').bind(this).toString()\n  TypeError: 'undefined' is not an object (evaluating 'get$(this, 'findUser').bind')\n    line: 2\n    message: \"'undefined' is not an object (evaluating 'get$(this, 'findUser').bind')\"\n    stack: \"eval code\u21b5eval@[native code]\u21b5_evaluateOn\u21b5\u21b5_evaluateAndWrap\u21b5\u21b5evaluate\u21b5\u21b5[native code]\"\n    __proto__: Error\n      constructor: function TypeError() {\n      message: \"\"\n      name: \"TypeError\"\n      toString: function toString() {\n      __proto__: Error\n\nIn PhantomJS, I get the same 'undefined' error.\nAt least I have tests working in Chrome. Switching to Selenium won't help since this error also occurs in Firefox.\nAny ideas on how I could resolve this would be greatly appreciated, other than just running my tests in Chrome.\nThanks.\n. Thanks @jejacks0n, and apologies for the bother. Cheers\n. BTW, I added the polyfill and it resolved the issue.\nMany thanks @jejacks0n !\n. I do not see the same exception in the debug console which is weird.\nI found the get$ method in the ember-auth-* gems. When I removed these gems from the manifest, the test passes without the global failure.\nI'll dig some more to see why this is failing the way it is. Closing this issue.\nThanks\n. I dug some more and it looks like it may be a browser issue.\nThe piece of code causing the error is from one of the ember-auth gems (ember-auth-module-ember-data):\nget$(this, 'auth').addHandler('signInSuccess', get$(this, 'findUser').bind(this));\nThis code is automatically generated by EmberScript.\nAnyway, when I debug in the Chrome console (btw, the tests are passing in Chrome without errors), it looks like my tests are properly parsing native code provided by Chrome. Here is the output from the debug console:\n\n> get$(this, 'findUser').bind(this).toString()\n  \"function () { [native code] }\"\n\nHowever, when doing the same thing in Safari (where the tests are passing, but I see an error in the debug console), this is what I get:\n\n> get$(this, 'findUser').bind(this).toString()\n  TypeError: 'undefined' is not an object (evaluating 'get$(this, 'findUser').bind')\n    line: 2\n    message: \"'undefined' is not an object (evaluating 'get$(this, 'findUser').bind')\"\n    stack: \"eval code\u21b5eval@[native code]\u21b5_evaluateOn\u21b5\u21b5_evaluateAndWrap\u21b5\u21b5evaluate\u21b5\u21b5[native code]\"\n    __proto__: Error\n      constructor: function TypeError() {\n      message: \"\"\n      name: \"TypeError\"\n      toString: function toString() {\n      __proto__: Error\n\nIn PhantomJS, I get the same 'undefined' error.\nAt least I have tests working in Chrome. Switching to Selenium won't help since this error also occurs in Firefox.\nAny ideas on how I could resolve this would be greatly appreciated, other than just running my tests in Chrome.\nThanks.\n. Thanks @jejacks0n, and apologies for the bother. Cheers\n. BTW, I added the polyfill and it resolved the issue.\nMany thanks @jejacks0n !\n. ",
    "thansber": "From the documentation it looks like Jasmine 2.0.0 is supported but this issue makes me think it is not.  I have not been able to get Jasmine 2.0.0 working locally and just wanted to check if I am wasting my time.\n. From the documentation it looks like Jasmine 2.0.0 is supported but this issue makes me think it is not.  I have not been able to get Jasmine 2.0.0 working locally and just wanted to check if I am wasting my time.\n. ",
    "michael-harrison": "@jejacks0n will be happy to help in my somewhat limited free time :)  I've just done a pull request for jasminerice (https://github.com/bradphelan/jasminerice/pull/124) however I can see that this picking up where jasminerice left off.\n. @jejacks0n will be happy to help in my somewhat limited free time :)  I've just done a pull request for jasminerice (https://github.com/bradphelan/jasminerice/pull/124) however I can see that this picking up where jasminerice left off.\n. ",
    "ekryski": "Hmm. Yep unfortunately I have pretty much the exact same setup, and it still doesn't work. In fact it seems to be an issue with .js, .css, and .html extensions. If I do .html.erb it works, .json works. I think this is the behaviour of rails that it looks to find your \"static\" assets inside of public. This may explain why https://github.com/thoughtbot/high_voltage expects you to give your static pages .html.erb extensions.\n. Yep. You are totally right. I found out now that we are using Rack::Zippy in place of Action::Dispatch which forces those files to the public directory. Not your problem :smiley:. I've created an issue over there https://github.com/eliotsykes/rack-zippy/issues/7\n. I'm 100% sure rack zippy is the issue. Moving the middleware swap to only our production config allowed me to load the fixtures through teaspoon no problem. @jejacks0n I had already looked into the routes :wink:. Put binding.pry's all over the place.\n. @jejacks0n I already tried switching my fixtures_path to spec/fixtures/javascript when using rack zippy. Didn't change anything. Gonna stick with what works here. Thanks for the attention. Much appreciated!\n. Hmm. Yep unfortunately I have pretty much the exact same setup, and it still doesn't work. In fact it seems to be an issue with .js, .css, and .html extensions. If I do .html.erb it works, .json works. I think this is the behaviour of rails that it looks to find your \"static\" assets inside of public. This may explain why https://github.com/thoughtbot/high_voltage expects you to give your static pages .html.erb extensions.\n. Yep. You are totally right. I found out now that we are using Rack::Zippy in place of Action::Dispatch which forces those files to the public directory. Not your problem :smiley:. I've created an issue over there https://github.com/eliotsykes/rack-zippy/issues/7\n. I'm 100% sure rack zippy is the issue. Moving the middleware swap to only our production config allowed me to load the fixtures through teaspoon no problem. @jejacks0n I had already looked into the routes :wink:. Put binding.pry's all over the place.\n. @jejacks0n I already tried switching my fixtures_path to spec/fixtures/javascript when using rack zippy. Didn't change anything. Gonna stick with what works here. Thanks for the attention. Much appreciated!\n. ",
    "eliotsykes": "Rack-zippy dev here, just wanted to drop in and say thanks for the discussion of the issue, it looks like it might be a problem for quite a few people but I expect we can do something about it. Discussion for those interested is at the issue @ekryski kindly opened: https://github.com/eliotsykes/rack-zippy/issues/7\n. Rack-zippy dev here, just wanted to drop in and say thanks for the discussion of the issue, it looks like it might be a problem for quite a few people but I expect we can do something about it. Discussion for those interested is at the issue @ekryski kindly opened: https://github.com/eliotsykes/rack-zippy/issues/7\n. ",
    "bcardarella": ":+1:\n. :+1:\n. ",
    "joefiorini": ":thumbsup:\n. :thumbsup:\n. ",
    "pareeohnos": "hmm didn't think about it loading both. Assumed it'd replaced the old version when I switched, but still no joy. I've just done the following\ngem uninstall teaspoon\n    (removed version 0.7.8)\nrails s\n    (produced same error)\ngem uninstall teaspoon\n    (removed anything left)\nbundle install\nrails s\n    (produced same error)\nIt seems to still be breaking even after having completely removed all versions of the gem and reinstalling. Dropping back down to 0.7.8 fixes it again.\n. Not when it's uninstalled no, but after uninstalling entirely and reinstalling it still breaks. If I removed it I just get an error saying it's not installed (still in gemfile) which I expect. Then doing a bundle install causes it to give me the error unless I specified version 0.7.8\n. Great thanks. Not sure if this happens when using just plain ol' ruby. I've switched over to jRuby and that's when I first noticed the problem, but the plain version of ruby was running on 0.7.8 so I can't be sure if it only broke because of the upgrade, or because it's now in jRuby\n. Nope, no progress on this, still running on 0.7.8\n. Seems to be working without an error now on the 0.8-followup branch. I get a couple of deprecation warnings but this seems to be more to do with my configuration file so I'm assuming something else has changed, but the original issue seems to be resolved :)\n. hmm didn't think about it loading both. Assumed it'd replaced the old version when I switched, but still no joy. I've just done the following\ngem uninstall teaspoon\n    (removed version 0.7.8)\nrails s\n    (produced same error)\ngem uninstall teaspoon\n    (removed anything left)\nbundle install\nrails s\n    (produced same error)\nIt seems to still be breaking even after having completely removed all versions of the gem and reinstalling. Dropping back down to 0.7.8 fixes it again.\n. Not when it's uninstalled no, but after uninstalling entirely and reinstalling it still breaks. If I removed it I just get an error saying it's not installed (still in gemfile) which I expect. Then doing a bundle install causes it to give me the error unless I specified version 0.7.8\n. Great thanks. Not sure if this happens when using just plain ol' ruby. I've switched over to jRuby and that's when I first noticed the problem, but the plain version of ruby was running on 0.7.8 so I can't be sure if it only broke because of the upgrade, or because it's now in jRuby\n. Nope, no progress on this, still running on 0.7.8\n. Seems to be working without an error now on the 0.8-followup branch. I get a couple of deprecation warnings but this seems to be more to do with my configuration file so I'm assuming something else has changed, but the original issue seems to be resolved :)\n. ",
    "ddarren": "I'm seeing the same route error when using the  \"rails generate teaspoon:install\" generator in 0.7.9 in a jRuby Rails app.\n. I'm getting a similar but different error with the 0.8 branch:\nArgumentError: Invalid route name, already in use: 'teaspoon'\nYou may have defined two routes with the same name using the `:as` option, or you may be overriding a route already defined by a resource with the same naming. For the latter, you can restrict the routes created with `resources` as explained here:\nhttp://guides.rubyonrails.org/routing.html#restricting-the-routes-created\n                               add_route at /Users/dsmith/.rvm/gems/jruby-1.7.8@orchestrate/gems/actionpack-4.0.1/lib/action_dispatch/routing/route_set.rb:434\n                               add_route at /Users/dsmith/.rvm/gems/jruby-1.7.8@orchestrate/gems/actionpack-4.0.1/lib/action_dispatch/routing/mapper.rb:1445\n. I'm seeing the same route error when using the  \"rails generate teaspoon:install\" generator in 0.7.9 in a jRuby Rails app.\n. I'm getting a similar but different error with the 0.8 branch:\nArgumentError: Invalid route name, already in use: 'teaspoon'\nYou may have defined two routes with the same name using the `:as` option, or you may be overriding a route already defined by a resource with the same naming. For the latter, you can restrict the routes created with `resources` as explained here:\nhttp://guides.rubyonrails.org/routing.html#restricting-the-routes-created\n                               add_route at /Users/dsmith/.rvm/gems/jruby-1.7.8@orchestrate/gems/actionpack-4.0.1/lib/action_dispatch/routing/route_set.rb:434\n                               add_route at /Users/dsmith/.rvm/gems/jruby-1.7.8@orchestrate/gems/actionpack-4.0.1/lib/action_dispatch/routing/mapper.rb:1445\n. ",
    "nathany": "I see this error when switching from MRI to JRuby with teaspoon (0.7.9).\nUsing master doesn't have this issue. Is 0.8.0 near release?\n. Oh, maybe a release candidate would be a good idea?\n. I see this error when switching from MRI to JRuby with teaspoon (0.7.9).\nUsing master doesn't have this issue. Is 0.8.0 near release?\n. Oh, maybe a release candidate would be a good idea?\n. ",
    "Gonzih": "On JRuby I'm getting this error on rails generate teaspoon:install command. Gem version is 0.8.0.\n. On JRuby I'm getting this error on rails generate teaspoon:install command. Gem version is 0.8.0.\n. ",
    "nowhereman": "@Gonzih Same for me, on JRuby 1.7.12 with Rails 4.0.2, Teaspoon 0.7.9 and 0.8.0 said that all my routes are duplicated ... I need to stay on Teaspoon 0.7.8 for now\n. With Rails 4.0.5, this issue is gone.\n. @Gonzih Same for me, on JRuby 1.7.12 with Rails 4.0.2, Teaspoon 0.7.9 and 0.8.0 said that all my routes are duplicated ... I need to stay on Teaspoon 0.7.8 for now\n. With Rails 4.0.5, this issue is gone.\n. ",
    "baweaver": "The second I remove tests that happen to manipulate fixtures, and confirm that those fixtures were properly manipulated, this stops. I'd think this is due to a seriously ad-hoc attempt at integration testing, which Jasmine flat out doesn't support. I'm moving to get Integration testing added as a substitute to this form of tests to make this issue irrelevant.\nAny thoughts on this matter? I've still got a fair amount of research to do to confirm that integration testing is the proper route here, but any advice would be great.\nThanks for your time in looking into this!\n. Yeah, looks like the issue ended up being improper stubbing of methods using spies. We've managed to find the issue.\n. The second I remove tests that happen to manipulate fixtures, and confirm that those fixtures were properly manipulated, this stops. I'd think this is due to a seriously ad-hoc attempt at integration testing, which Jasmine flat out doesn't support. I'm moving to get Integration testing added as a substitute to this form of tests to make this issue irrelevant.\nAny thoughts on this matter? I've still got a fair amount of research to do to confirm that integration testing is the proper route here, but any advice would be great.\nThanks for your time in looking into this!\n. Yeah, looks like the issue ended up being improper stubbing of methods using spies. We've managed to find the issue.\n. ",
    "chrisnicola": "Not if the server was spawned as a process which I believe is what is happening when Guard is running. Either way it checks if the server is running. It either is or it isn't.\nWhen I debug through what's happening using guard-teaspoon Rack::Server#start just returns true and so the thread completes and exits, however the server is still running.\n. Thanks @jejacks0n I saw your branch and I'm going to try to put aside some time to look at it.\n. Seems to be another problem, not sure if I should fix it here. If the runner throws an exception for any reason (e.g. syntax error in coffeescript) it will exit and Guard can't continue to run. A few ways we could deal with this.\n- Guard-Teaspoon should spawn a new console for each run (problem is that's a new server each time too.\n- Guard-Teaspoon shouldn't use the console runner at all.\n- Teaspoon console shouldn't exit on these errors. \n. I'll add a commit to this PR showing you the fix and you can decide from there.\n. Not if the server was spawned as a process which I believe is what is happening when Guard is running. Either way it checks if the server is running. It either is or it isn't.\nWhen I debug through what's happening using guard-teaspoon Rack::Server#start just returns true and so the thread completes and exits, however the server is still running.\n. Thanks @jejacks0n I saw your branch and I'm going to try to put aside some time to look at it.\n. Seems to be another problem, not sure if I should fix it here. If the runner throws an exception for any reason (e.g. syntax error in coffeescript) it will exit and Guard can't continue to run. A few ways we could deal with this.\n- Guard-Teaspoon should spawn a new console for each run (problem is that's a new server each time too.\n- Guard-Teaspoon shouldn't use the console runner at all.\n- Teaspoon console shouldn't exit on these errors. \n. I'll add a commit to this PR showing you the fix and you can decide from there.\n. ",
    "OpakAlex": "Yes, problem in last slash. Url is: \n\n. I am using Rails from master:\nremote: git://github.com/rails/rails.git\n  revision: e66c148571ff86144e49f23c43e5dd686e67da29\n. I will up rails and test for it. I think now it's issue has been fixed.\n. Yes, problem in last slash. Url is: \n\n. I am using Rails from master:\nremote: git://github.com/rails/rails.git\n  revision: e66c148571ff86144e49f23c43e5dd686e67da29\n. I will up rails and test for it. I think now it's issue has been fixed.\n. ",
    "psharpNumerex": "Is there any timeline for a rubygems.org release for 0.8.0?\n. Having the engine mount itself is nice, but would having the apps be responsible for the mount placement remove this issue?\n. It's clearly something within that test suite causing it, but I'm having trouble narrowing it down.\nWhat frustrating is that the behavior is different on our Bamboo CI server.\nTeaspoon running mobile_tests suite at http://127.0.0.1:57287/teaspoon/mobile_tests\n......................................................................................................\nFinished in 0.96800 seconds\n102 examples, 0 failures\nTeaspoon running web_tests suite at http://127.0.0.1:57287/teaspoon/web_tests\nFailed to load: http://127.0.0.1:57287/teaspoon/web_tests?reporter=Console\nHowever, if I run just the web_tests suite on Bamboo then I see the same behavior as local, where it outputs the Failure to load message AFTER the tests have run.\n. Bingo, I think you hit it.  Or at least part of it.  I tracked it down to a fixture.load by commenting out all actual tests in the file and just leaving that statement.  I removed the two img tags in the file and the offending (and empty) file now runs w/out the Failure to load.  \nThe images are not that terribly large, however\n. Interesting.\nRemoved tests from suite until it would run the suite w/out the error.\nRun the file on its own and consistently see the error.\nRemove the img tags from the fixture, consistently run the file on its own w/out the error.\nRun the suite again and the error is still there.\nRemove the file from the suite and the error disappears.\nSomething funky clashing with the requires, possibly?\n. I imagine there's a hidden land mine somewhere in the testing code we've written.\nSeeing some of this in the logs:\nStarted GET \"/teaspoon/undefined\" for 127.0.0.1 at 2014-04-18 17:01:17 -0500\nProcessing by Teaspoon::SuiteController#show as /\n  Parameters: {\"suite\"=>\"undefined\"}\nCompleted 500 Internal Server Error in 0.6ms\nSo I'm thinking a fixture loading may be getting munged somewhere, but the inconsistent behavior of running the file vs the suite is a head scratcher\n. Tracked it down, it was an ajax call on a js file load.  Thanks for all the help!  \nWould there be any way to get more info out of the Failed to load?  I was trying to think of a clean way to have it output at least the test file that was the culprit.\n. The rails 4.2.5.1 upgrade seems to have broken the fix.\nTeaspoon tests were working fine prior to upgrading this morning, broken with:\nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nAdd Rails.application.config.assets.precompile += %w( support/bind-poly.self.js ) to config/initializers/assets.rb and restart your server\nimmediately after\n. Updated, still fails and when I look at the source in bundle show teaspoon, I see this in engine.rb:\nif ActionView::VERSION::STRING == \"4.2.5\" || ActionView::VERSION::MAJOR >= 5\nedit:  looks like the 1.1.3 tag is off the rails_5 branch\n. Is there any timeline for a rubygems.org release for 0.8.0?\n. Having the engine mount itself is nice, but would having the apps be responsible for the mount placement remove this issue?\n. It's clearly something within that test suite causing it, but I'm having trouble narrowing it down.\nWhat frustrating is that the behavior is different on our Bamboo CI server.\nTeaspoon running mobile_tests suite at http://127.0.0.1:57287/teaspoon/mobile_tests\n......................................................................................................\nFinished in 0.96800 seconds\n102 examples, 0 failures\nTeaspoon running web_tests suite at http://127.0.0.1:57287/teaspoon/web_tests\nFailed to load: http://127.0.0.1:57287/teaspoon/web_tests?reporter=Console\nHowever, if I run just the web_tests suite on Bamboo then I see the same behavior as local, where it outputs the Failure to load message AFTER the tests have run.\n. Bingo, I think you hit it.  Or at least part of it.  I tracked it down to a fixture.load by commenting out all actual tests in the file and just leaving that statement.  I removed the two img tags in the file and the offending (and empty) file now runs w/out the Failure to load.  \nThe images are not that terribly large, however\n. Interesting.\nRemoved tests from suite until it would run the suite w/out the error.\nRun the file on its own and consistently see the error.\nRemove the img tags from the fixture, consistently run the file on its own w/out the error.\nRun the suite again and the error is still there.\nRemove the file from the suite and the error disappears.\nSomething funky clashing with the requires, possibly?\n. I imagine there's a hidden land mine somewhere in the testing code we've written.\nSeeing some of this in the logs:\nStarted GET \"/teaspoon/undefined\" for 127.0.0.1 at 2014-04-18 17:01:17 -0500\nProcessing by Teaspoon::SuiteController#show as /\n  Parameters: {\"suite\"=>\"undefined\"}\nCompleted 500 Internal Server Error in 0.6ms\nSo I'm thinking a fixture loading may be getting munged somewhere, but the inconsistent behavior of running the file vs the suite is a head scratcher\n. Tracked it down, it was an ajax call on a js file load.  Thanks for all the help!  \nWould there be any way to get more info out of the Failed to load?  I was trying to think of a clean way to have it output at least the test file that was the culprit.\n. The rails 4.2.5.1 upgrade seems to have broken the fix.\nTeaspoon tests were working fine prior to upgrading this morning, broken with:\nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nAdd Rails.application.config.assets.precompile += %w( support/bind-poly.self.js ) to config/initializers/assets.rb and restart your server\nimmediately after\n. Updated, still fails and when I look at the source in bundle show teaspoon, I see this in engine.rb:\nif ActionView::VERSION::STRING == \"4.2.5\" || ActionView::VERSION::MAJOR >= 5\nedit:  looks like the 1.1.3 tag is off the rails_5 branch\n. ",
    "MartinElvar": "@jejacks0n I don't get any errors in my browser. Also, it still fails when i comment.\n= require application\n->\nrequire application\nIs there i way i can get a verbose output, like a stacktrace?\n. @jejacks0n Hmm i tried to run rails generate teaspoon:install --coffee, and then manually change to qunit, which seems to do the trick. \nThank you for time @jejacks0n, and my apologies for the noise.\n. @jejacks0n That could very well be, i tried to start a new rails app, and add teaspoon, still same issue. Maybe you can confirm?\n. @jejacks0n That was indeed the issue. :smiley: \nBefore and After\nhttp://cl.ly/image/1J0y0i3i1K0q\n. @jejacks0n I don't get any errors in my browser. Also, it still fails when i comment.\n= require application\n->\nrequire application\nIs there i way i can get a verbose output, like a stacktrace?\n. @jejacks0n Hmm i tried to run rails generate teaspoon:install --coffee, and then manually change to qunit, which seems to do the trick. \nThank you for time @jejacks0n, and my apologies for the noise.\n. @jejacks0n That could very well be, i tried to start a new rails app, and add teaspoon, still same issue. Maybe you can confirm?\n. @jejacks0n That was indeed the issue. :smiley: \nBefore and After\nhttp://cl.ly/image/1J0y0i3i1K0q\n. ",
    "nathanpalmer": "I'm noticing the same thing. Updated to rev 1d6c9b7b94213379ffb32e18c08f2906ec60392c from 3ad92a26680e94b32d2d879dec9134609442d3fb and it seems the same.\n\n. Forgot to mention that I'm running off of master, although I've tried several different revisions to see if an older version works.\n. @jejacks0n We're using rails 4.0.4\n. CircleCI is referencing this bug ticket on selenium (which was resolved as not a bug.) Basically referencing that it's because nothing is showing up that is clickable within 60 seconds so it times out.\n- https://code.google.com/p/selenium/issues/detail?id=5759\nDoing X11 forwarding so I can see the firefox browser starting up I see two different results.\n- Blank content in the browser. Just sits there until the timeout\n- Several of the initial tests run and then it stops and sits there until timeout\n. We just added an asset precompile to the post-dependency section on CircleCI and it seems to have solved the problem. (thanks @brett-richardson)\nCan't say the same for CodeShip though, precompiling assets still gets a timeout. Slightly different stack for that one though.\nrake aborted!\nTimed out\n/home/rof/cache/bundler/ruby/2.0.0/gems/selenium-webdriver-2.40.0/lib/selenium/webdriver/common/wait.rb:57:in `until'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/drivers/selenium_driver.rb:28:in `run_specs'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:45:in `run_specs'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:35:in `block in execute_without_handling'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:33:in `each'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:33:in `inject'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:33:in `execute_without_handling'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:21:in `execute'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:17:in `failures?'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/tasks/teaspoon.rake:12:in `block in <top (required)>'\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n. So it seems CodeShip is running under the development environment. Checking FF through X11 forwarding shows it's stopping on a rails migration error. It doesn't seem to be setting any environment variables ('RAILS_ENV','RACK_ENV')\nCalling it good for now though since I don't think we'll continue using CodeShip. However adding something to the docs about the precompile would be useful. \n. I'm noticing the same thing. Updated to rev 1d6c9b7b94213379ffb32e18c08f2906ec60392c from 3ad92a26680e94b32d2d879dec9134609442d3fb and it seems the same.\n\n. Forgot to mention that I'm running off of master, although I've tried several different revisions to see if an older version works.\n. @jejacks0n We're using rails 4.0.4\n. CircleCI is referencing this bug ticket on selenium (which was resolved as not a bug.) Basically referencing that it's because nothing is showing up that is clickable within 60 seconds so it times out.\n- https://code.google.com/p/selenium/issues/detail?id=5759\nDoing X11 forwarding so I can see the firefox browser starting up I see two different results.\n- Blank content in the browser. Just sits there until the timeout\n- Several of the initial tests run and then it stops and sits there until timeout\n. We just added an asset precompile to the post-dependency section on CircleCI and it seems to have solved the problem. (thanks @brett-richardson)\nCan't say the same for CodeShip though, precompiling assets still gets a timeout. Slightly different stack for that one though.\nrake aborted!\nTimed out\n/home/rof/cache/bundler/ruby/2.0.0/gems/selenium-webdriver-2.40.0/lib/selenium/webdriver/common/wait.rb:57:in `until'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/drivers/selenium_driver.rb:28:in `run_specs'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:45:in `run_specs'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:35:in `block in execute_without_handling'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:33:in `each'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:33:in `inject'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:33:in `execute_without_handling'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:21:in `execute'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/teaspoon/console.rb:17:in `failures?'\n/home/rof/cache/bundler/ruby/2.0.0/bundler/gems/teaspoon-3ad92a26680e/lib/tasks/teaspoon.rake:12:in `block in <top (required)>'\nTasks: TOP => teaspoon\n(See full trace by running task with --trace)\n. So it seems CodeShip is running under the development environment. Checking FF through X11 forwarding shows it's stopping on a rails migration error. It doesn't seem to be setting any environment variables ('RAILS_ENV','RACK_ENV')\nCalling it good for now though since I don't think we'll continue using CodeShip. However adding something to the docs about the precompile would be useful. \n. ",
    "Sanjith": "30 minutes or some times it hung up.\n. and also I'm getting this type of error after generating coverage\n[BUG] Segmentation fault\nruby 1.9.3p429 (2013-05-15 revision 40747) [x86_64-linux]\n-- Control frame information -----------------------------------------------\n-- C level backtrace information -------------------------------------------\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x1904e6) [0x7f0d75d754e6] vm_dump.c:796\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x62931) [0x7f0d75c47931] error.c:258\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(rb_bug+0xb3) [0x7f0d75c487d3] error.c:277\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x11e2d6) [0x7f0d75d032d6] signal.c:633\n/lib/x86_64-linux-gnu/libc.so.6(+0x364a0) [0x7f0d7585b4a0] array.c:1322\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(st_lookup+0xe) [0x7f0d75d0b13e] st.c:326\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x17e167) [0x7f0d75d63167] vm_method.c:374\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x185cbb) [0x7f0d75d6acbb] vm_insnhelper.c:1371\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x186399) [0x7f0d75d6b399] vm.c:1236\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x187211) [0x7f0d75d6c211] vm.c:686\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x189f5c) [0x7f0d75d6ef5c] vm_insnhelper.c:404\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x181cab) [0x7f0d75d66cab] insns.def:1018\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x186399) [0x7f0d75d6b399] vm.c:1236\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x187211) [0x7f0d75d6c211] vm.c:686\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(rb_exec_end_proc+0x1fa) [0x7f0d75c5034a] eval_jump.c:129\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x6b3fa) [0x7f0d75c503fa] eval.c:92\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(ruby_cleanup+0x131) [0x7f0d75c50571] eval.c:133\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x19654e) [0x7f0d75d7b54e] thread.c:549\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x19684c) [0x7f0d75d7b84c] thread_pthread.c:657\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x7e9a) [0x7f0d7560fe9a]\n/lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f0d759193fd] rational.c:1817\n-- Other runtime information -----------------------------------------------\n- Loaded script: teaspoon worker[0]\n- Loaded features:\n0 enumerator.so\n  1 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/x86_64-linux/enc/encdb.so\n  2 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/x86_64-linux/enc/trans/transdb.so\n  3 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/x86_64-linux/rbconfig.rb\n  4 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/compatibility.rb\n  5 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/defaults.rb\n  6 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/deprecate.rb\n  7 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/errors.rb\n  8 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/version.rb\nand so on...\n- Process memory map:\n00400000-00401000 r-xp 00000000 08:01 21639571                           /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/bin/ruby\n00600000-00601000 r--p 00000000 08:01 21639571                           /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/bin/ruby\n00601000-00602000 rw-p 00001000 08:01 21639571                           /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/bin/ruby\n008e5000-0496d000 rw-p 00000000 00:00 0                                  [heap]\n7f0d60000000-7f0d60021000 rw-p 00000000 00:00 0 \n7f0d60021000-7f0d64000000 ---p 00000000 00:00 0 \n7f0d679b9000-7f0d679be000 r-xp 00000000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d679be000-7f0d67bbd000 ---p 00005000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d67bbd000-7f0d67bbe000 r--p 00004000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d67bbe000-7f0d67bbf000 rw-p 00005000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d67bbf000-7f0d67bc1000 r-xp 00000000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67bc1000-7f0d67dc1000 ---p 00002000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67dc1000-7f0d67dc2000 r--p 00002000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67dc2000-7f0d67dc3000 rw-p 00003000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67dc3000-7f0d67dff000 r-xp 00000000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d67dff000-7f0d67ffe000 ---p 0003c000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d67ffe000-7f0d67fff000 r--p 0003b000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d67fff000-7f0d68000000 rw-p 0003c000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d68000000-7f0d687ab000 rw-p 00000000 00:00 0 \n7f0d687ab000-7f0d69fd4000 rw-p 00000000 00:00 0 \n7f0d69fd4000-7f0d6c000000 ---p 00000000 00:00 0 \n7f0d6c147000-7f0d6c164000 r-xp 00000000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c164000-7f0d6c363000 ---p 0001d000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c363000-7f0d6c364000 r--p 0001c000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c364000-7f0d6c365000 rw-p 0001d000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c365000-7f0d6c38b000 r-xp 00000000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c38b000-7f0d6c58b000 ---p 00026000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c58b000-7f0d6c58d000 r--p 00026000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c58d000-7f0d6c58e000 rw-p 00028000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c58e000-7f0d6c683000 r-xp 00000000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\n7f0d6c683000-7f0d6c882000 ---p 000f5000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\n7f0d6c882000-7f0d6c883000 r--p 000f4000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\n7f0d6c883000-7f0d6c884000 rw-p 000f5000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\nand so on...\n. yes, without reports it is working fine. What may be the solution for this bad compilation?\n. Yes, I did\n. Yeah, I found the failure case for this compilation..\nI have jquery related files under jQuery folder. For ignoring those files I put the suite.no_coverage like below..\nsuite.no_coverage = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}, %r{/jQuery/}, %r{/javascripts/jasmine_examples/}]\nWhen I removed jQuery from the suite.no_coverage then there is no compilation failure. But, coverage includes jquery files also.\nsuite.no_coverage = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}, %r{/javascripts/jasmine_examples/}]\n. Yeah, Now, I'm trying that one. And what about server running time?\n. No, when I ran teaspoon coverage (bundle exec teaspoon --coverage-reports=text,html), taking too much time to generate coverage. \n. I figured out bad compilation, which is giving lot of errors... but not the server running time...\n. Yeah, Thank you for your help here :-)\n. 30 minutes or some times it hung up.\n. and also I'm getting this type of error after generating coverage\n[BUG] Segmentation fault\nruby 1.9.3p429 (2013-05-15 revision 40747) [x86_64-linux]\n-- Control frame information -----------------------------------------------\n-- C level backtrace information -------------------------------------------\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x1904e6) [0x7f0d75d754e6] vm_dump.c:796\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x62931) [0x7f0d75c47931] error.c:258\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(rb_bug+0xb3) [0x7f0d75c487d3] error.c:277\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x11e2d6) [0x7f0d75d032d6] signal.c:633\n/lib/x86_64-linux-gnu/libc.so.6(+0x364a0) [0x7f0d7585b4a0] array.c:1322\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(st_lookup+0xe) [0x7f0d75d0b13e] st.c:326\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x17e167) [0x7f0d75d63167] vm_method.c:374\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x185cbb) [0x7f0d75d6acbb] vm_insnhelper.c:1371\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x186399) [0x7f0d75d6b399] vm.c:1236\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x187211) [0x7f0d75d6c211] vm.c:686\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x189f5c) [0x7f0d75d6ef5c] vm_insnhelper.c:404\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x181cab) [0x7f0d75d66cab] insns.def:1018\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x186399) [0x7f0d75d6b399] vm.c:1236\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x187211) [0x7f0d75d6c211] vm.c:686\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(rb_exec_end_proc+0x1fa) [0x7f0d75c5034a] eval_jump.c:129\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x6b3fa) [0x7f0d75c503fa] eval.c:92\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(ruby_cleanup+0x131) [0x7f0d75c50571] eval.c:133\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x19654e) [0x7f0d75d7b54e] thread.c:549\n/home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/libruby.so.1.9(+0x19684c) [0x7f0d75d7b84c] thread_pthread.c:657\n/lib/x86_64-linux-gnu/libpthread.so.0(+0x7e9a) [0x7f0d7560fe9a]\n/lib/x86_64-linux-gnu/libc.so.6(clone+0x6d) [0x7f0d759193fd] rational.c:1817\n-- Other runtime information -----------------------------------------------\n- Loaded script: teaspoon worker[0]\n- Loaded features:\n0 enumerator.so\n  1 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/x86_64-linux/enc/encdb.so\n  2 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/x86_64-linux/enc/trans/transdb.so\n  3 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/1.9.1/x86_64-linux/rbconfig.rb\n  4 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/compatibility.rb\n  5 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/defaults.rb\n  6 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/deprecate.rb\n  7 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/errors.rb\n  8 /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/lib/ruby/site_ruby/1.9.1/rubygems/version.rb\nand so on...\n- Process memory map:\n00400000-00401000 r-xp 00000000 08:01 21639571                           /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/bin/ruby\n00600000-00601000 r--p 00000000 08:01 21639571                           /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/bin/ruby\n00601000-00602000 rw-p 00001000 08:01 21639571                           /home/sanjithkumar/.rvm/rubies/ruby-1.9.3-p429/bin/ruby\n008e5000-0496d000 rw-p 00000000 00:00 0                                  [heap]\n7f0d60000000-7f0d60021000 rw-p 00000000 00:00 0 \n7f0d60021000-7f0d64000000 ---p 00000000 00:00 0 \n7f0d679b9000-7f0d679be000 r-xp 00000000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d679be000-7f0d67bbd000 ---p 00005000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d67bbd000-7f0d67bbe000 r--p 00004000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d67bbe000-7f0d67bbf000 rw-p 00005000 08:01 6036551                    /usr/lib/x86_64-linux-gnu/libXdmcp.so.6.0.0\n7f0d67bbf000-7f0d67bc1000 r-xp 00000000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67bc1000-7f0d67dc1000 ---p 00002000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67dc1000-7f0d67dc2000 r--p 00002000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67dc2000-7f0d67dc3000 rw-p 00003000 08:01 6036540                    /usr/lib/x86_64-linux-gnu/libXau.so.6.0.0\n7f0d67dc3000-7f0d67dff000 r-xp 00000000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d67dff000-7f0d67ffe000 ---p 0003c000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d67ffe000-7f0d67fff000 r--p 0003b000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d67fff000-7f0d68000000 rw-p 0003c000 08:01 2625038                    /lib/x86_64-linux-gnu/libpcre.so.3.13.1\n7f0d68000000-7f0d687ab000 rw-p 00000000 00:00 0 \n7f0d687ab000-7f0d69fd4000 rw-p 00000000 00:00 0 \n7f0d69fd4000-7f0d6c000000 ---p 00000000 00:00 0 \n7f0d6c147000-7f0d6c164000 r-xp 00000000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c164000-7f0d6c363000 ---p 0001d000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c363000-7f0d6c364000 r--p 0001c000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c364000-7f0d6c365000 rw-p 0001d000 08:01 6031799                    /usr/lib/x86_64-linux-gnu/libxcb.so.1.1.0\n7f0d6c365000-7f0d6c38b000 r-xp 00000000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c38b000-7f0d6c58b000 ---p 00026000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c58b000-7f0d6c58d000 r--p 00026000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c58d000-7f0d6c58e000 rw-p 00028000 08:01 2624971                    /lib/x86_64-linux-gnu/libexpat.so.1.6.0\n7f0d6c58e000-7f0d6c683000 r-xp 00000000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\n7f0d6c683000-7f0d6c882000 ---p 000f5000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\n7f0d6c882000-7f0d6c883000 r--p 000f4000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\n7f0d6c883000-7f0d6c884000 rw-p 000f5000 08:01 2622117                    /lib/x86_64-linux-gnu/libglib-2.0.so.0.3400.1\nand so on...\n. yes, without reports it is working fine. What may be the solution for this bad compilation?\n. Yes, I did\n. Yeah, I found the failure case for this compilation..\nI have jquery related files under jQuery folder. For ignoring those files I put the suite.no_coverage like below..\nsuite.no_coverage = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}, %r{/jQuery/}, %r{/javascripts/jasmine_examples/}]\nWhen I removed jQuery from the suite.no_coverage then there is no compilation failure. But, coverage includes jquery files also.\nsuite.no_coverage = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}, %r{/javascripts/jasmine_examples/}]\n. Yeah, Now, I'm trying that one. And what about server running time?\n. No, when I ran teaspoon coverage (bundle exec teaspoon --coverage-reports=text,html), taking too much time to generate coverage. \n. I figured out bad compilation, which is giving lot of errors... but not the server running time...\n. Yeah, Thank you for your help here :-)\n. ",
    "gylaz": "Any progress on this? This would be sweet!\n. Any progress on this? This would be sweet!\n. ",
    "coveralls": "\nCoverage remained the same when pulling b158574a65a0f459886f948c12bd7b60b4135a37 on paranoida:fix-boot-require-js into 268c00fa37e058a4bcf3e917f1a128a3bdb991c2 on modeset:master.\n. \nCoverage remained the same when pulling fb19a8898bfcfe352099b8e68b49edc4d90a7226 on paranoida:fix-specs-regexp-require-js into 268c00fa37e058a4bcf3e917f1a128a3bdb991c2 on modeset:master.\n. \nCoverage remained the same when pulling 7ed685be0638595bb282b6dbcbdc7e2fc4b9a1f2 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage remained the same when pulling 38bb54772514789429f04af00ab43bdb2b79850d on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling b7dd4cd81d57576b0ff3a2e290578c0158e15888 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling 8a9febfacf421ea88d5e87a3ef547cc53b543840 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling 7c92696bebc87c1bb240e00438a08e6cf07478bb on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling 558ef740a218677779b6e6d8a4ff59c3404fb2f6 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage remained the same when pulling e2a51f48cda5f007758d9708e78461bb4d5d179d on tpbowden:master into 9e022e7012234feb72233e889d03569b9e413889 on modeset:master.\n. \nCoverage remained the same when pulling c0006cc1bbb14f4ca76e76e424381f7cc820c15d on aasmith:master into 592c0dba4c1131f0107f773b483079cda61f5b06 on modeset:master.\n. \nCoverage remained the same when pulling df5223e28b4f6144940b25eb0b23983a8ca1138d on stevenmichaelthomas:chai_jq into 1931adc300892b9266986f58e837c8803d8e2e2b on modeset:master.\n. \nCoverage remained the same when pulling 3f9d8ed96059167e176d5efe596b77b30d785693 on stevenmichaelthomas:chai_jq into 1931adc300892b9266986f58e837c8803d8e2e2b on modeset:master.\n. \nCoverage remained the same when pulling 849514ebe64a7fd9d5a831d133509c41cc88f16c on stevenmichaelthomas:chai_jq into 1931adc300892b9266986f58e837c8803d8e2e2b on modeset:master.\n. \nCoverage remained the same when pulling cedbfeffb073fe9790fdf04ac320f305bb29a52a on kunalmawade:fix-istanbul-deprecation-warning into 8780a63767216b75d64249b93f46b18f4ee9c5db on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling b55dd5c7cf8e13a5579254f1e6fa77ee96d7a453 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling ddeced23070c842375abc4af198b1eca6373cd18 on BlakeSimpson:master into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling b0d5899f8e4a0b4c8a58dbd27a9ee4d0db34947f on phyllisstein:mocha-2.0.1 into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.59%) when pulling 50a35cb99d981d2a3a52b89b4256394b3f02999f on golmansax:master into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling fad043adc3ca6e3d6b4aa65b36fc36c201f81fe0 on Zorbash:patch-1 into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.61%) when pulling 005e165aaa045f1cffb3328c9c158c61c65a152a on brysgo:capybara-webkit-driver into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.66%) when pulling b2b012b9295484a93badf2fb7379aac46ebb28a0 on brysgo:capybara-webkit-driver into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.66%) when pulling 1b8ba6f2ed20a7c964fcce5c67db8384101e34ce on brysgo:capybara-webkit-driver into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling 1dbd849e770687852d7b5b906da13dd2b1300bd5 on GoodGuide:fix-junit-formatter-escaping-bug into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage increased (+0.05%) when pulling a473bc856c63151e0922c0ddb3b03baafeabcff1 on on-site:master into 65a399887b36717bd9006a03502cec2c5d3f9790 on modeset:master.\n. \nCoverage remained the same when pulling 0a65312a3fa724ed2b4bf6c865a2087726c5d441 on NicheProject:delwaterman/add_updated_chai_to_v_0_8 into 615690c2059a7397188bc9c8d76ef4c2894f2d4e on modeset:master.\n. \nCoverage remained the same when pulling 67a3d59eeab92c04727ad6748fc6218ed679edff on ronen:patch-1 into 615690c2059a7397188bc9c8d76ef4c2894f2d4e on modeset:master.\n. \nCoverage remained the same at 99.05% when pulling ea12f3c8e2967d4ca9ceb728e455c81d713da0b3 on bramski:speed-improvements into 83440f080185d495e48dfc35420cffeb8596c7b1 on modeset:master.\n. \nCoverage remained the same at 99.05% when pulling 7bb3b08a3685a70b42fffc5c2e9cac49b3c5c419 on TrangPham:master into 83440f080185d495e48dfc35420cffeb8596c7b1 on modeset:master.\n. \nCoverage remained the same at 99.54% when pulling 937487953f5cdeb8f44609c5a5ba09098ca49e0e on igwan:fix-require-application-comment-position into 84441c8ba42488ffe47b7e99833c38c3c8f71449 on modeset:master.\n. \nCoverage remained the same at 99.54% when pulling 033bd0f2576d1171a623bbb85c603e0527b6edca on igwan:fix-require-application-comment-position into 84441c8ba42488ffe47b7e99833c38c3c8f71449 on modeset:master.\n. \nCoverage remained the same when pulling b158574a65a0f459886f948c12bd7b60b4135a37 on paranoida:fix-boot-require-js into 268c00fa37e058a4bcf3e917f1a128a3bdb991c2 on modeset:master.\n. \nCoverage remained the same when pulling fb19a8898bfcfe352099b8e68b49edc4d90a7226 on paranoida:fix-specs-regexp-require-js into 268c00fa37e058a4bcf3e917f1a128a3bdb991c2 on modeset:master.\n. \nCoverage remained the same when pulling 7ed685be0638595bb282b6dbcbdc7e2fc4b9a1f2 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage remained the same when pulling 38bb54772514789429f04af00ab43bdb2b79850d on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling b7dd4cd81d57576b0ff3a2e290578c0158e15888 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling 8a9febfacf421ea88d5e87a3ef547cc53b543840 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling 7c92696bebc87c1bb240e00438a08e6cf07478bb on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage increased (+0.0%) when pulling 558ef740a218677779b6e6d8a4ff59c3404fb2f6 on taboularasa:master into d5d791e9587d124da886d8580d35409875235783 on modeset:master.\n. \nCoverage remained the same when pulling e2a51f48cda5f007758d9708e78461bb4d5d179d on tpbowden:master into 9e022e7012234feb72233e889d03569b9e413889 on modeset:master.\n. \nCoverage remained the same when pulling c0006cc1bbb14f4ca76e76e424381f7cc820c15d on aasmith:master into 592c0dba4c1131f0107f773b483079cda61f5b06 on modeset:master.\n. \nCoverage remained the same when pulling df5223e28b4f6144940b25eb0b23983a8ca1138d on stevenmichaelthomas:chai_jq into 1931adc300892b9266986f58e837c8803d8e2e2b on modeset:master.\n. \nCoverage remained the same when pulling 3f9d8ed96059167e176d5efe596b77b30d785693 on stevenmichaelthomas:chai_jq into 1931adc300892b9266986f58e837c8803d8e2e2b on modeset:master.\n. \nCoverage remained the same when pulling 849514ebe64a7fd9d5a831d133509c41cc88f16c on stevenmichaelthomas:chai_jq into 1931adc300892b9266986f58e837c8803d8e2e2b on modeset:master.\n. \nCoverage remained the same when pulling cedbfeffb073fe9790fdf04ac320f305bb29a52a on kunalmawade:fix-istanbul-deprecation-warning into 8780a63767216b75d64249b93f46b18f4ee9c5db on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling b55dd5c7cf8e13a5579254f1e6fa77ee96d7a453 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling d7833c0ec44a0e1a46c197d9f765c3377c7431d4 on simsalabim:feature/ignore-phantoimjs-operation-cancelled into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling ddeced23070c842375abc4af198b1eca6373cd18 on BlakeSimpson:master into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling b0d5899f8e4a0b4c8a58dbd27a9ee4d0db34947f on phyllisstein:mocha-2.0.1 into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.59%) when pulling 50a35cb99d981d2a3a52b89b4256394b3f02999f on golmansax:master into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling fad043adc3ca6e3d6b4aa65b36fc36c201f81fe0 on Zorbash:patch-1 into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.61%) when pulling 005e165aaa045f1cffb3328c9c158c61c65a152a on brysgo:capybara-webkit-driver into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.66%) when pulling b2b012b9295484a93badf2fb7379aac46ebb28a0 on brysgo:capybara-webkit-driver into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.66%) when pulling 1b8ba6f2ed20a7c964fcce5c67db8384101e34ce on brysgo:capybara-webkit-driver into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage decreased (-0.55%) when pulling 1dbd849e770687852d7b5b906da13dd2b1300bd5 on GoodGuide:fix-junit-formatter-escaping-bug into 32d3385042f2c5295e8f74955559e29c155b93e5 on modeset:master.\n. \nCoverage increased (+0.05%) when pulling a473bc856c63151e0922c0ddb3b03baafeabcff1 on on-site:master into 65a399887b36717bd9006a03502cec2c5d3f9790 on modeset:master.\n. \nCoverage remained the same when pulling 0a65312a3fa724ed2b4bf6c865a2087726c5d441 on NicheProject:delwaterman/add_updated_chai_to_v_0_8 into 615690c2059a7397188bc9c8d76ef4c2894f2d4e on modeset:master.\n. \nCoverage remained the same when pulling 67a3d59eeab92c04727ad6748fc6218ed679edff on ronen:patch-1 into 615690c2059a7397188bc9c8d76ef4c2894f2d4e on modeset:master.\n. \nCoverage remained the same at 99.05% when pulling ea12f3c8e2967d4ca9ceb728e455c81d713da0b3 on bramski:speed-improvements into 83440f080185d495e48dfc35420cffeb8596c7b1 on modeset:master.\n. \nCoverage remained the same at 99.05% when pulling 7bb3b08a3685a70b42fffc5c2e9cac49b3c5c419 on TrangPham:master into 83440f080185d495e48dfc35420cffeb8596c7b1 on modeset:master.\n. \nCoverage remained the same at 99.54% when pulling 937487953f5cdeb8f44609c5a5ba09098ca49e0e on igwan:fix-require-application-comment-position into 84441c8ba42488ffe47b7e99833c38c3c8f71449 on modeset:master.\n. \nCoverage remained the same at 99.54% when pulling 033bd0f2576d1171a623bbb85c603e0527b6edca on igwan:fix-require-application-comment-position into 84441c8ba42488ffe47b7e99833c38c3c8f71449 on modeset:master.\n. ",
    "rafalbromirski": "yeah, I know your pain. Right now I'm trying to migrate from jasminerice to teaspoon. It's not ready yet (still have a few issues with my requirejs & test setup) but if I find something that I can improve then I will create PR. \n. I already did it :) thx\n. you're welcome. If you want I can create PR but I am not a ruby dev so i didn't want to mess with your ruby code.\nI am really looking forward to this project.\n. yeah, I know your pain. Right now I'm trying to migrate from jasminerice to teaspoon. It's not ready yet (still have a few issues with my requirejs & test setup) but if I find something that I can improve then I will create PR. \n. I already did it :) thx\n. you're welcome. If you want I can create PR but I am not a ruby dev so i didn't want to mess with your ruby code.\nI am really looking forward to this project.\n. ",
    "lsthornt": "Ran into this issue as well on Rails 3.2.16, and ended up monkey-patching by recognizing on app.routes rather than Teaspoon::Engine.routes, which seemed to make more sense. Willing to submit the pull request, but I'm unable to test this against the original rails 4 bug\n. Ran into this issue as well on Rails 3.2.16, and ended up monkey-patching by recognizing on app.routes rather than Teaspoon::Engine.routes, which seemed to make more sense. Willing to submit the pull request, but I'm unable to test this against the original rails 4 bug\n. ",
    "bfcoder": "I am running rails 4.0.0 I was running my specs with teaspoon 0.7.9.\nAfter upgrading to 0.8.0 and with that line in the engine.rb line 43\nreturn if Teaspoon::Engine.routes.recognize_path('/') rescue nil\nI get a routing error\nActionController::RoutingError at /teaspoon\nteaspoon\nIf I comment it out, I can run all my specs as I could previously.\n. Looking at the monkey patch @lsthornt did\n```\n    def self.prepend_routes(app)\n      mount_at = Teaspoon.configuration.mount_at\n  return if app.routes.recognize_path(mount_at) rescue nil\n  require Teaspoon::Engine.root.join(\"app/controllers/teaspoon/suite_controller\")\n\n  app.routes.prepend do\n    mount Teaspoon::Engine => mount_at, as: \"teaspoon\"\n  end\nend\n\n```\nthat doesn't work either for rails 4.0.0 because the\napp.routes.recognize_path(mount_at)\nreturns the routing_error\n(byebug) app.routes.recognize_path(mount_at)\n{:controller=>\"application\", :action=>\"routing_error\", :path=>\"teaspoon\"}\nBut if we check for the routing error and rescue nil\n```\n    def self.prepend_routes(app)\n      mount_at = Teaspoon.configuration.mount_at\n  return if app.routes.recognize_path(mount_at)[:action] != 'routing_error' rescue nil\n  require Teaspoon::Engine.root.join(\"app/controllers/teaspoon/suite_controller\")\n\n  app.routes.prepend do\n    mount Teaspoon::Engine => mount_at, as: \"teaspoon\"\n  end\nend\n\n```\nThen that works well for me.\n. @tf and @sporto did you try using the latest code? If you use the latest (ie: gem \"teaspoon\", git: 'git@github.com:modeset/teaspoon.git') then I think you'll see it works. @jejacks0n I wouldn't go ripping it out until you know that it doesn't work with the improved code from above.\n. I am running rails 4.0.0 I was running my specs with teaspoon 0.7.9.\nAfter upgrading to 0.8.0 and with that line in the engine.rb line 43\nreturn if Teaspoon::Engine.routes.recognize_path('/') rescue nil\nI get a routing error\nActionController::RoutingError at /teaspoon\nteaspoon\nIf I comment it out, I can run all my specs as I could previously.\n. Looking at the monkey patch @lsthornt did\n```\n    def self.prepend_routes(app)\n      mount_at = Teaspoon.configuration.mount_at\n  return if app.routes.recognize_path(mount_at) rescue nil\n  require Teaspoon::Engine.root.join(\"app/controllers/teaspoon/suite_controller\")\n\n  app.routes.prepend do\n    mount Teaspoon::Engine => mount_at, as: \"teaspoon\"\n  end\nend\n\n```\nthat doesn't work either for rails 4.0.0 because the\napp.routes.recognize_path(mount_at)\nreturns the routing_error\n(byebug) app.routes.recognize_path(mount_at)\n{:controller=>\"application\", :action=>\"routing_error\", :path=>\"teaspoon\"}\nBut if we check for the routing error and rescue nil\n```\n    def self.prepend_routes(app)\n      mount_at = Teaspoon.configuration.mount_at\n  return if app.routes.recognize_path(mount_at)[:action] != 'routing_error' rescue nil\n  require Teaspoon::Engine.root.join(\"app/controllers/teaspoon/suite_controller\")\n\n  app.routes.prepend do\n    mount Teaspoon::Engine => mount_at, as: \"teaspoon\"\n  end\nend\n\n```\nThen that works well for me.\n. @tf and @sporto did you try using the latest code? If you use the latest (ie: gem \"teaspoon\", git: 'git@github.com:modeset/teaspoon.git') then I think you'll see it works. @jejacks0n I wouldn't go ripping it out until you know that it doesn't work with the improved code from above.\n. ",
    "sporto": "I'm having the same problem\nError: ActionController::RoutingError: No route matches [GET] \"/teaspoon/default\"\nWe are using Rails 3.2.18\nIf I add:\nmount Teaspoon::Engine => \"/teaspoon\"\nto my routes.rb then it works fine\n. @bfcoder @jejacks0n , I didn't try from master, just from the published gem. I will when I have some time and report back\n. This is working fine in Rails 4.1 using the master branch for me, no need to mount the routes manually\n. Some issue here, using Rails 4.1 and master branch of teaspoon. \nTeaspoon gem is only loaded in dev / test:\ngroup :development, :test do\n    ...\n    gem 'teaspoon',            github: 'modeset/teaspoon'\nend\nAssets settings are just as default installation on development.rb and test.rb\nGetting:\nAsset filtered out and will not be served: add `Rails.application.config.assets.precompile += %w( teaspoon.css )` to `config/initializers/assets.rb` and restart your server\nAdding this to initializers/assets fixes it:\nRails.application.config.assets.precompile += %w( teaspoon.css )\nRails.application.config.assets.precompile += %w( teaspoon-teaspoon.js )\n. I'm having the same problem\nError: ActionController::RoutingError: No route matches [GET] \"/teaspoon/default\"\nWe are using Rails 3.2.18\nIf I add:\nmount Teaspoon::Engine => \"/teaspoon\"\nto my routes.rb then it works fine\n. @bfcoder @jejacks0n , I didn't try from master, just from the published gem. I will when I have some time and report back\n. This is working fine in Rails 4.1 using the master branch for me, no need to mount the routes manually\n. Some issue here, using Rails 4.1 and master branch of teaspoon. \nTeaspoon gem is only loaded in dev / test:\ngroup :development, :test do\n    ...\n    gem 'teaspoon',            github: 'modeset/teaspoon'\nend\nAssets settings are just as default installation on development.rb and test.rb\nGetting:\nAsset filtered out and will not be served: add `Rails.application.config.assets.precompile += %w( teaspoon.css )` to `config/initializers/assets.rb` and restart your server\nAdding this to initializers/assets fixes it:\nRails.application.config.assets.precompile += %w( teaspoon.css )\nRails.application.config.assets.precompile += %w( teaspoon-teaspoon.js )\n. ",
    "tf": "Same problem with rails 4.0.4. Mounting manually in the dummy app solves the issue.\n. Ok. Should have read the whole discussion before jumping in. The problem does no longer occur on master.\nStill I'm a little bit skeptical whether it's safe to define routes like that. The issue seems to be caused by Rails reloading its routes when files change. Teabag on the other hand prepends its routes only on after_initialize which (from my understanding of the docs (section 6)) is not rerun when files have been reloaded (like to_prepare). \nBut since it works now, I guess there's no reason to change it.\n. Same problem with rails 4.0.4. Mounting manually in the dummy app solves the issue.\n. Ok. Should have read the whole discussion before jumping in. The problem does no longer occur on master.\nStill I'm a little bit skeptical whether it's safe to define routes like that. The issue seems to be caused by Rails reloading its routes when files change. Teabag on the other hand prepends its routes only on after_initialize which (from my understanding of the docs (section 6)) is not rerun when files have been reloaded (like to_prepare). \nBut since it works now, I guess there's no reason to change it.\n. ",
    "hlascelles": "We did a cleanup of some engines and saw this error arise (with 0.8.0). It turns out that our Combustion folders needed a NOOP routes.rb file to trigger the correct append to take place.\nThat is to say, adding the following file to spec/internal/config/routes.rb solved the problem:\nRails.application.routes.draw do\n   # Do nothing, except trigger automatic teaspoon engine mount\nend\n. Apologies @mikeantonelli I've just seen this! No we don't I'm afraid. Just rather a large and convoluted engine. If / when it is broken down I will post one...\n. OK, makes sense. In our case, our body_partial includes our Knockout JS templates - the real ones we use to render views in production. We want to make sure we can bind and manipulate the JS models and have it rendered correctly. As a result, we need real links.\nNo problem, we only have a few we can hard code them for now... Thanks!\n. A note to anyone coming to this PR wondering why their .js.es6 specs are not running... You have to set  your matcher to include them.\nsuite.matcher = '{spec/javascripts,app/assets}/**/*_spec.{js,js.es6,js.coffee,coffee}'\n@jejacks0n, I'd say this may be a bug, or at least unexpected. If you look in configuration.rb:69 you see\n@matcher       = \"{spec/javascripts,app/assets}/**/*_spec.{js,js.coffee,coffee}\"\nBut that disagrees with configuration.rb:79\n@js_extensions = [/(\\.js)?\\.coffee/, /(\\.js)?\\.es6/, \".es6.js\"]\nOne supports es6, and one doesn't. Shouldn't they both match the same suffixes?\n. Great, just checking I hadn't missed anything. Created: https://github.com/modeset/teaspoon/pull/488\n. We did a cleanup of some engines and saw this error arise (with 0.8.0). It turns out that our Combustion folders needed a NOOP routes.rb file to trigger the correct append to take place.\nThat is to say, adding the following file to spec/internal/config/routes.rb solved the problem:\nRails.application.routes.draw do\n   # Do nothing, except trigger automatic teaspoon engine mount\nend\n. Apologies @mikeantonelli I've just seen this! No we don't I'm afraid. Just rather a large and convoluted engine. If / when it is broken down I will post one...\n. OK, makes sense. In our case, our body_partial includes our Knockout JS templates - the real ones we use to render views in production. We want to make sure we can bind and manipulate the JS models and have it rendered correctly. As a result, we need real links.\nNo problem, we only have a few we can hard code them for now... Thanks!\n. A note to anyone coming to this PR wondering why their .js.es6 specs are not running... You have to set  your matcher to include them.\nsuite.matcher = '{spec/javascripts,app/assets}/**/*_spec.{js,js.es6,js.coffee,coffee}'\n@jejacks0n, I'd say this may be a bug, or at least unexpected. If you look in configuration.rb:69 you see\n@matcher       = \"{spec/javascripts,app/assets}/**/*_spec.{js,js.coffee,coffee}\"\nBut that disagrees with configuration.rb:79\n@js_extensions = [/(\\.js)?\\.coffee/, /(\\.js)?\\.es6/, \".es6.js\"]\nOne supports es6, and one doesn't. Shouldn't they both match the same suffixes?\n. Great, just checking I hadn't missed anything. Created: https://github.com/modeset/teaspoon/pull/488\n. ",
    "mikeantonelli": "@hlascelles do you have an example of using teaspoon and combustion to test a Rails engine?\n. @hlascelles do you have an example of using teaspoon and combustion to test a Rails engine?\n. ",
    "GetContented": "I have the same issue. Using Rails 4.1.0 I don't think either of us want to include it in production. I'm using guard and guard teaspoon. I just upgraded my app from 3.2.x (latest) to 4.1.0.\n. Here's my gemfile\n```\nsource 'https://rubygems.org'\nruby \"2.1.1\"\ngem 'rails', '4.1.0'\nBundle edge Rails instead:\ngem 'rails', :git => 'git://github.com/rails/rails.git'\ngem 'pg' # postgres\nto update ember using this version of ember-rails: rails generate ember:install --head\ngem 'ember-rails'\ngem 'ember-source', '1.5.0'\ngem 'ember-data-source', '1.0.0.beta.7'\ngem \"fog\", \"~> 1.3.1\" # for Amazon S3\ngem 'mail_form'\ngem 'newrelic_rpm'\ngem 'sass-rails', '~> 4.0.0'\ngem 'coffee-rails', '~> 4.0.0'\ngem 'uglifier', '>= 1.3.0'\nSee https://github.com/sstephenson/execjs#readme for more supported runtimes\ngem 'therubyracer',  platforms: :ruby\ngem 'jquery-rails', '= 3.0.3'\ngem 'jquery-ui-rails'\ngem 'carrierwave'\ngem 'paper_trail', '~>3.0.1'\ngem 'devise'\ngem 'seed-fu', '~> 2.3.0'\ngem 'pundit'\ngem 'thin'\ngem 'foreman' # instead of thin, use foreman and puma (precursor to rubinius)\ngem 'puma'\ngem 'rack-timeout' # also for puma - coz it doesn't \"get back\" properly otherwise\nsee: https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server\nBuild JSON APIs with ease. Read more: https://github.com/rails/jbuilder\ngem 'jbuilder', '~> 2.0'\nbundle exec rake doc:rails generates the API under doc/api.\ngem 'sdoc', '~> 0.4.0', group: :doc\ngroup :development, :test do\n  gem 'qunit-rails', '>= 0.0.6'\n  gem 'yui-rails'\n  gem 'rspec-rails', '>= 2.11.4'\n  gem \"teaspoon\"\n  gem 'guard'\n  gem 'rb-readline' # required for guard to work properly on OS/X\n  gem 'rb-fsevent' # required for guard\n  gem 'jasmine-rails'\n  gem 'jasmine-jquery-rails' # custom jasmine jquery matchers\n  gem 'guard-jasmine'\n  gem 'guard-teaspoon'\n  gem 'guard-rspec', '~> 3.0'\n  gem \"minitap\", \"~> 0.5\"\n  gem \"phantomjs\", \">= 1.8.1.1\"\nend\ngroup :test do\n  gem 'rspec-instafail'\n  gem 'factory_girl'\n  gem 'factory_girl_rails'\n  gem 'database_cleaner', '>= 1.2'\nend\nTo use ActiveModel has_secure_password\ngem 'bcrypt-ruby', '~> 3.1.7'\nTo use Jbuilder templates for JSON\ngem 'jbuilder'\nUse unicorn as the app server\ngem 'unicorn'\nDeploy with Capistrano\ngem 'capistrano'\nTo use debugger\ngem 'debugger'\n```\n. Quesiton... did you use a fresh Rails 4.1 install to test against? or were you using an upgraded one, because this is apparently the standard Rails 4.1 environments/test.rb file: (which I am using)\n``` ruby\nRails.application.configure do\n  # Settings specified here will take precedence over those in config/application.rb.\n# The test environment is used exclusively to run your application's\n  # test suite. You never need to work with it otherwise. Remember that\n  # your test database is \"scratch space\" for the test suite and is wiped\n  # and recreated between test runs. Don't rely on the data there!\n  config.cache_classes = true\n# Do not eager load code on boot. This avoids loading your whole application\n  # just for the purpose of running a single test. If you are using a tool that\n  # preloads Rails for running tests, you may have to set it to true.\n  config.eager_load = false\n# Configure static asset server for tests with Cache-Control for performance.\n  config.serve_static_assets  = true\n  config.static_cache_control = 'public, max-age=3600'\n# Show full error reports and disable caching.\n  config.consider_all_requests_local       = true\n  config.action_controller.perform_caching = false\n# Raise exceptions instead of rendering exception templates.\n  config.action_dispatch.show_exceptions = false\n# Disable request forgery protection in test environment.\n  config.action_controller.allow_forgery_protection  = false\n# Tell Action Mailer not to deliver emails to the real world.\n  # The :test delivery method accumulates sent emails in the\n  # ActionMailer::Base.deliveries array.\n  config.action_mailer.delivery_method = :test\n# Print deprecation notices to the stderr.\n  config.active_support.deprecation = :stderr\n# Raises error for missing translations\n  # config.action_view.raise_on_missing_translations = true\nconfig.ember.variant = :development\nend\n```\n(note I've added the config.ember.variant bit on the end because I'm using ember)\n. Hm... I hope not, because I'd be wanting to use a different DB in test vs development! Yeah, sure, though, I'll go print out the env and report back.\n. It said this:\n``` bash\n\n[#] uninitialized constant RAILS_ENV\n```\n\nSo I took out the errant constant and then it said this:\n``` bash\n!Env: development:\nStarting the Teaspoon server...\nPuma 2.8.2 starting...\n* Min threads: 0, max threads: 16\n* Environment: test\n* Listening on tcp://0.0.0.0:61667\n```\nthen errored as before.\n. I don't understand how if it's running in development environment, it manages to still use the test database?\n. Oh... sorry I'm silly, I just got totally confused between rspec running and teaspoon because guard drives them both... god what a noob error. \n. So yeah, interestingly, Puma is running as the server, and it's running in test, whereas Rails.env says development. \n. @jejacks0n Not that I know of, and if I am, then it's not on purpose. AFAIK I'm using the standard generated environments/test.rb file aside from my slight addition of ember stuff. I didn't consciously do anything to have test use precompiled assets. Can you point me to some specific places where I can either find out about this or give me some way to change it, or provide me with what an ideal environments/test.rb file should be such that teaspoon works?\nIf it doesn't work straight \"out of the box\", shouldn't there be some indication about what to change to make it work in the teaspoon documentation?\n. Guh... so I've been re-reading the asset pipeline guides just now and I found this, which is probably our issue by the sound of it:\nRails 4 no longer sets default config values for Sprockets in test.rb, so test.rb now requires Sprockets configuration. The old defaults in the test environment are: config.assets.compile = true, config.assets.compress =\nfalse, config.assets.debug = false and config.assets.digest = false.\nThat seems like a kind of strange thing to put in as a \"default\". \"Hey kids, it's up to you... so much for convention over configuration... bye\".\nI'm going to go and twiddle the settings and see if I can't get it working. Will report back if/when I get it working. \n. Okay that didn't immediately fix it, but then I remembered teaspoon is running in dev mode, not test... even though my server is running in test (guh?) so I tried setting my test.rb so it had this in it:\nruby\n  config.assets.compile = true\n  config.assets.compress = false\n  config.assets.debug = false\n  config.assets.digest = false\nand then running this:\nbash\nRAILS_ENV=test rake teaspoon\nand it worked fine.\nSo then I looked in my environments/development.rb file and realised it didn't have those settings either, so I tried just wacking them in to see if that fixed the default teaspoon run and it did.\nI'm not really sure why puma is running in a different env than teaspoon and it strikes me as being something pretty crap, but it obviously isn't really anything to do with teaspoon because teaspoon is behaving just fine.\nSo the problem was the standard rails environments/development.rb file now doesn't work straight up out of the box with teaspoon.\nIt's probably worth mentioning this in the documentation somewhere, IMHO.\nAnd by the way, thanks very much for making Teaspoon. It's freaking awesome. :) <3 \n. @jejacks0n Yeah I noticed the difference, but seeing as it hadn't propagated to the official gem servers I thought it was just alpha or not ready for primetime at least.\nSo I tried what you asked, and I got this: (I'm using qunit as well as jasmine for some tests because I'm halfway through migrating between them).\nconsole\nTeaspoonError: QUnit not found -- use `suite.use_framework :qunit` and adjust or remove the `suite.javascripts` directive.\n  # teaspoon-qunit.js:1302\n  # teaspoon-qunit.js:1408\nI'm kinda like you at the moment, I don't really have time to spend on this either unfortunately.\n. @jejacks0n  ah right... the process outlined in \"upgrading\". Sorry that wasn't very clear to me from which versions to which versions it was talking about.\nI think this line under 0.8.0 follow-ups / todos was what threw me:\n```\nHere's a short list of things that 0.8.0 might also address.\n```\n(because it sounds like 0.8.0 hasn't happened yet, so I wasn't sure which versions \"upgrading\" was talking about).\nAnyway, I'll try again later today. Thanks heaps.\n. Hey @jejacks0n ... so I tried to update again, but it keeps complaining that:\nbash\nTeaspoonError: Jasmine not found -- use `suite.use_framework :jasmine` and adjust or remove the `suite.javascripts` directive.\n  # teaspoon-jasmine.js:1158\n  # teaspoon-jasmine.js:1339\nI'm pretty sure that the reason is going to be that I'm using jasmine-rails so it can't seem to see jasmine because it appears to need to load jasmine and teaspoon-jasmine before it loads all the asset stuff, and I couldn't seem to work out how to put version 2 (which I'm using) in... seems to need to use 1.3.1 (ie there's a disparity between these two config options, the second of which I couldn't work out how to specify 2.0 in:\nruby\n    suite.use_framework :jasmine, \"2.0.0\"\nand\nruby\n    #suite.javascripts = [\"jasmine/1.3.1\", \"teaspoon-jasmine\"]\nI went through and re-config'd everything. Man... it's a lot of configuration.\nI just don't have hours to throw at this... so I'm going to revert for now. \n. Okay I'm going to have another crack at this... \n. Okay I've been trying to work this out for ages. It keeps saying\nTeaspoonError: Jasmine not found -- use `suite.use_framework :jasmine` and adjust or remove the `suite.javascripts` directive\nI've tried various configurations of the use_framework and the suite.javascripts settings. At the moment suite.javascripts is commented out and the only three lines I have in the default suite are below... have I missed something obvious?\nThe only thing I have in my suite is this:\nsuite.use_framework :jasmine, \"2.0.0\"\n    suite.matcher = \"{spec/javascripts,app/assets}/**/*_spec.{js,js.coffee,coffee}\"\n    suite.helper = \"spec_helper\"\nI feel like I'm somehow idiotic or I'm doing something really stupid.\n. Okay I got it pushed past this point... the thing that wasn't working was that I didn't have suite.javascripts supplied, so obviously it wasn't loading jasmine before teaspoon-jasmine.js, which is  a hard requirement on that file that it's loaded first... \nIn the past when I'd tried to use this, I had a weird reticence towards including something with 1.3.1 in its version given that I'm NOT using 1.3.1 - that REALLY confused me. Is it supposed to be like that?\nSo I \"fixed\" it by uncommenting this:\nsuite.javascripts = [\"jasmine/1.3.1\", \"teaspoon-jasmine\"]\nThis was totally non-obvious to me.\n. Okay the next \"gotcha\" for me was the fact that I'd left my spec_helper.js.coffee file in situ as my spec helper assuming teaspoon would just pick it up (because it's a bit automagic and lovely), but the auto-generated spec_helper.js was taking precedence. I completely missed that, and I really shouldn't have. This was just plain old fashioned stupidiy on my part. I noted that support/bind-poly is required, so I put that into my spec_helper.coffee.js and removed the default generated spec_helper.js file.\nThis now got me running again. Huzzah!\nOkay, so I'm at this point where I'd really like teaspoon to run in the test rails env. Is it possible to add this a CLI option to guard, or am I just barking up the wrong tree? I know I should use fixtures, etc. But when it comes to full stack integration tests (and I do need some of these), I really need to touch the rails app with my javascript code and I just can't do that without being in test env. \nThe other reason is I don't particularly want to turn my asset alerts off in my dev env and also until I've got this issue I've got sorted with the faster-json-generating-OJ gem and teaspoon not working, I want to box teaspoon into the test env.\n. Okay so the final issue I have around this (you're probably hating me right about now, aren't you?)... is when I save a file, guard-teaspoon kicks in (I updated it to point to the latest git version rather than the gem version because I wasn't 100% sure it wasn't just a version-mismatch thing)... but then it seems to be giving teaspoon the wrong number of arguments.\n```\n15:56:16 - ERROR - Guard::Teaspoon failed to achieve its , exception was:\n\n[#] ArgumentError: wrong number of arguments (2 for 0..1)\n[#] /Users/julian/.rvm/gems/ruby-2.1.1@rails3/gems/teaspoon-0.8.0/lib/teaspoon/console.rb:20:in `execute'\n```\n\nApologies in advance if this is just me being stupid. I hope not. Could you maybe shed some light?\nNote that this is only when I'm saving a file, not when it's running all the specs.\n. @samu oh yay I'm not an idiot :) I wonder why the modeset guys hadn't already picked this up as part of their general use of teaspoon. Also, I wonder why they didnt see the problems we were seeing with the debug mode on rails 4.1 already. Ah well :)\n. Yeah I retried, and had the same issue.\n. I have the same issue. Using Rails 4.1.0 I don't think either of us want to include it in production. I'm using guard and guard teaspoon. I just upgraded my app from 3.2.x (latest) to 4.1.0.\n. Here's my gemfile\n```\nsource 'https://rubygems.org'\nruby \"2.1.1\"\ngem 'rails', '4.1.0'\nBundle edge Rails instead:\ngem 'rails', :git => 'git://github.com/rails/rails.git'\ngem 'pg' # postgres\nto update ember using this version of ember-rails: rails generate ember:install --head\ngem 'ember-rails'\ngem 'ember-source', '1.5.0'\ngem 'ember-data-source', '1.0.0.beta.7'\ngem \"fog\", \"~> 1.3.1\" # for Amazon S3\ngem 'mail_form'\ngem 'newrelic_rpm'\ngem 'sass-rails', '~> 4.0.0'\ngem 'coffee-rails', '~> 4.0.0'\ngem 'uglifier', '>= 1.3.0'\nSee https://github.com/sstephenson/execjs#readme for more supported runtimes\ngem 'therubyracer',  platforms: :ruby\ngem 'jquery-rails', '= 3.0.3'\ngem 'jquery-ui-rails'\ngem 'carrierwave'\ngem 'paper_trail', '~>3.0.1'\ngem 'devise'\ngem 'seed-fu', '~> 2.3.0'\ngem 'pundit'\ngem 'thin'\ngem 'foreman' # instead of thin, use foreman and puma (precursor to rubinius)\ngem 'puma'\ngem 'rack-timeout' # also for puma - coz it doesn't \"get back\" properly otherwise\nsee: https://devcenter.heroku.com/articles/deploying-rails-applications-with-the-puma-web-server\nBuild JSON APIs with ease. Read more: https://github.com/rails/jbuilder\ngem 'jbuilder', '~> 2.0'\nbundle exec rake doc:rails generates the API under doc/api.\ngem 'sdoc', '~> 0.4.0', group: :doc\ngroup :development, :test do\n  gem 'qunit-rails', '>= 0.0.6'\n  gem 'yui-rails'\n  gem 'rspec-rails', '>= 2.11.4'\n  gem \"teaspoon\"\n  gem 'guard'\n  gem 'rb-readline' # required for guard to work properly on OS/X\n  gem 'rb-fsevent' # required for guard\n  gem 'jasmine-rails'\n  gem 'jasmine-jquery-rails' # custom jasmine jquery matchers\n  gem 'guard-jasmine'\n  gem 'guard-teaspoon'\n  gem 'guard-rspec', '~> 3.0'\n  gem \"minitap\", \"~> 0.5\"\n  gem \"phantomjs\", \">= 1.8.1.1\"\nend\ngroup :test do\n  gem 'rspec-instafail'\n  gem 'factory_girl'\n  gem 'factory_girl_rails'\n  gem 'database_cleaner', '>= 1.2'\nend\nTo use ActiveModel has_secure_password\ngem 'bcrypt-ruby', '~> 3.1.7'\nTo use Jbuilder templates for JSON\ngem 'jbuilder'\nUse unicorn as the app server\ngem 'unicorn'\nDeploy with Capistrano\ngem 'capistrano'\nTo use debugger\ngem 'debugger'\n```\n. Quesiton... did you use a fresh Rails 4.1 install to test against? or were you using an upgraded one, because this is apparently the standard Rails 4.1 environments/test.rb file: (which I am using)\n``` ruby\nRails.application.configure do\n  # Settings specified here will take precedence over those in config/application.rb.\n# The test environment is used exclusively to run your application's\n  # test suite. You never need to work with it otherwise. Remember that\n  # your test database is \"scratch space\" for the test suite and is wiped\n  # and recreated between test runs. Don't rely on the data there!\n  config.cache_classes = true\n# Do not eager load code on boot. This avoids loading your whole application\n  # just for the purpose of running a single test. If you are using a tool that\n  # preloads Rails for running tests, you may have to set it to true.\n  config.eager_load = false\n# Configure static asset server for tests with Cache-Control for performance.\n  config.serve_static_assets  = true\n  config.static_cache_control = 'public, max-age=3600'\n# Show full error reports and disable caching.\n  config.consider_all_requests_local       = true\n  config.action_controller.perform_caching = false\n# Raise exceptions instead of rendering exception templates.\n  config.action_dispatch.show_exceptions = false\n# Disable request forgery protection in test environment.\n  config.action_controller.allow_forgery_protection  = false\n# Tell Action Mailer not to deliver emails to the real world.\n  # The :test delivery method accumulates sent emails in the\n  # ActionMailer::Base.deliveries array.\n  config.action_mailer.delivery_method = :test\n# Print deprecation notices to the stderr.\n  config.active_support.deprecation = :stderr\n# Raises error for missing translations\n  # config.action_view.raise_on_missing_translations = true\nconfig.ember.variant = :development\nend\n```\n(note I've added the config.ember.variant bit on the end because I'm using ember)\n. Hm... I hope not, because I'd be wanting to use a different DB in test vs development! Yeah, sure, though, I'll go print out the env and report back.\n. It said this:\n``` bash\n\n[#] uninitialized constant RAILS_ENV\n```\n\nSo I took out the errant constant and then it said this:\n``` bash\n!Env: development:\nStarting the Teaspoon server...\nPuma 2.8.2 starting...\n* Min threads: 0, max threads: 16\n* Environment: test\n* Listening on tcp://0.0.0.0:61667\n```\nthen errored as before.\n. I don't understand how if it's running in development environment, it manages to still use the test database?\n. Oh... sorry I'm silly, I just got totally confused between rspec running and teaspoon because guard drives them both... god what a noob error. \n. So yeah, interestingly, Puma is running as the server, and it's running in test, whereas Rails.env says development. \n. @jejacks0n Not that I know of, and if I am, then it's not on purpose. AFAIK I'm using the standard generated environments/test.rb file aside from my slight addition of ember stuff. I didn't consciously do anything to have test use precompiled assets. Can you point me to some specific places where I can either find out about this or give me some way to change it, or provide me with what an ideal environments/test.rb file should be such that teaspoon works?\nIf it doesn't work straight \"out of the box\", shouldn't there be some indication about what to change to make it work in the teaspoon documentation?\n. Guh... so I've been re-reading the asset pipeline guides just now and I found this, which is probably our issue by the sound of it:\nRails 4 no longer sets default config values for Sprockets in test.rb, so test.rb now requires Sprockets configuration. The old defaults in the test environment are: config.assets.compile = true, config.assets.compress =\nfalse, config.assets.debug = false and config.assets.digest = false.\nThat seems like a kind of strange thing to put in as a \"default\". \"Hey kids, it's up to you... so much for convention over configuration... bye\".\nI'm going to go and twiddle the settings and see if I can't get it working. Will report back if/when I get it working. \n. Okay that didn't immediately fix it, but then I remembered teaspoon is running in dev mode, not test... even though my server is running in test (guh?) so I tried setting my test.rb so it had this in it:\nruby\n  config.assets.compile = true\n  config.assets.compress = false\n  config.assets.debug = false\n  config.assets.digest = false\nand then running this:\nbash\nRAILS_ENV=test rake teaspoon\nand it worked fine.\nSo then I looked in my environments/development.rb file and realised it didn't have those settings either, so I tried just wacking them in to see if that fixed the default teaspoon run and it did.\nI'm not really sure why puma is running in a different env than teaspoon and it strikes me as being something pretty crap, but it obviously isn't really anything to do with teaspoon because teaspoon is behaving just fine.\nSo the problem was the standard rails environments/development.rb file now doesn't work straight up out of the box with teaspoon.\nIt's probably worth mentioning this in the documentation somewhere, IMHO.\nAnd by the way, thanks very much for making Teaspoon. It's freaking awesome. :) <3 \n. @jejacks0n Yeah I noticed the difference, but seeing as it hadn't propagated to the official gem servers I thought it was just alpha or not ready for primetime at least.\nSo I tried what you asked, and I got this: (I'm using qunit as well as jasmine for some tests because I'm halfway through migrating between them).\nconsole\nTeaspoonError: QUnit not found -- use `suite.use_framework :qunit` and adjust or remove the `suite.javascripts` directive.\n  # teaspoon-qunit.js:1302\n  # teaspoon-qunit.js:1408\nI'm kinda like you at the moment, I don't really have time to spend on this either unfortunately.\n. @jejacks0n  ah right... the process outlined in \"upgrading\". Sorry that wasn't very clear to me from which versions to which versions it was talking about.\nI think this line under 0.8.0 follow-ups / todos was what threw me:\n```\nHere's a short list of things that 0.8.0 might also address.\n```\n(because it sounds like 0.8.0 hasn't happened yet, so I wasn't sure which versions \"upgrading\" was talking about).\nAnyway, I'll try again later today. Thanks heaps.\n. Hey @jejacks0n ... so I tried to update again, but it keeps complaining that:\nbash\nTeaspoonError: Jasmine not found -- use `suite.use_framework :jasmine` and adjust or remove the `suite.javascripts` directive.\n  # teaspoon-jasmine.js:1158\n  # teaspoon-jasmine.js:1339\nI'm pretty sure that the reason is going to be that I'm using jasmine-rails so it can't seem to see jasmine because it appears to need to load jasmine and teaspoon-jasmine before it loads all the asset stuff, and I couldn't seem to work out how to put version 2 (which I'm using) in... seems to need to use 1.3.1 (ie there's a disparity between these two config options, the second of which I couldn't work out how to specify 2.0 in:\nruby\n    suite.use_framework :jasmine, \"2.0.0\"\nand\nruby\n    #suite.javascripts = [\"jasmine/1.3.1\", \"teaspoon-jasmine\"]\nI went through and re-config'd everything. Man... it's a lot of configuration.\nI just don't have hours to throw at this... so I'm going to revert for now. \n. Okay I'm going to have another crack at this... \n. Okay I've been trying to work this out for ages. It keeps saying\nTeaspoonError: Jasmine not found -- use `suite.use_framework :jasmine` and adjust or remove the `suite.javascripts` directive\nI've tried various configurations of the use_framework and the suite.javascripts settings. At the moment suite.javascripts is commented out and the only three lines I have in the default suite are below... have I missed something obvious?\nThe only thing I have in my suite is this:\nsuite.use_framework :jasmine, \"2.0.0\"\n    suite.matcher = \"{spec/javascripts,app/assets}/**/*_spec.{js,js.coffee,coffee}\"\n    suite.helper = \"spec_helper\"\nI feel like I'm somehow idiotic or I'm doing something really stupid.\n. Okay I got it pushed past this point... the thing that wasn't working was that I didn't have suite.javascripts supplied, so obviously it wasn't loading jasmine before teaspoon-jasmine.js, which is  a hard requirement on that file that it's loaded first... \nIn the past when I'd tried to use this, I had a weird reticence towards including something with 1.3.1 in its version given that I'm NOT using 1.3.1 - that REALLY confused me. Is it supposed to be like that?\nSo I \"fixed\" it by uncommenting this:\nsuite.javascripts = [\"jasmine/1.3.1\", \"teaspoon-jasmine\"]\nThis was totally non-obvious to me.\n. Okay the next \"gotcha\" for me was the fact that I'd left my spec_helper.js.coffee file in situ as my spec helper assuming teaspoon would just pick it up (because it's a bit automagic and lovely), but the auto-generated spec_helper.js was taking precedence. I completely missed that, and I really shouldn't have. This was just plain old fashioned stupidiy on my part. I noted that support/bind-poly is required, so I put that into my spec_helper.coffee.js and removed the default generated spec_helper.js file.\nThis now got me running again. Huzzah!\nOkay, so I'm at this point where I'd really like teaspoon to run in the test rails env. Is it possible to add this a CLI option to guard, or am I just barking up the wrong tree? I know I should use fixtures, etc. But when it comes to full stack integration tests (and I do need some of these), I really need to touch the rails app with my javascript code and I just can't do that without being in test env. \nThe other reason is I don't particularly want to turn my asset alerts off in my dev env and also until I've got this issue I've got sorted with the faster-json-generating-OJ gem and teaspoon not working, I want to box teaspoon into the test env.\n. Okay so the final issue I have around this (you're probably hating me right about now, aren't you?)... is when I save a file, guard-teaspoon kicks in (I updated it to point to the latest git version rather than the gem version because I wasn't 100% sure it wasn't just a version-mismatch thing)... but then it seems to be giving teaspoon the wrong number of arguments.\n```\n15:56:16 - ERROR - Guard::Teaspoon failed to achieve its , exception was:\n\n[#] ArgumentError: wrong number of arguments (2 for 0..1)\n[#] /Users/julian/.rvm/gems/ruby-2.1.1@rails3/gems/teaspoon-0.8.0/lib/teaspoon/console.rb:20:in `execute'\n```\n\nApologies in advance if this is just me being stupid. I hope not. Could you maybe shed some light?\nNote that this is only when I'm saving a file, not when it's running all the specs.\n. @samu oh yay I'm not an idiot :) I wonder why the modeset guys hadn't already picked this up as part of their general use of teaspoon. Also, I wonder why they didnt see the problems we were seeing with the debug mode on rails 4.1 already. Ah well :)\n. Yeah I retried, and had the same issue.\n. ",
    "samu": "Here's my (rather simple) Gemfile:\n```\nsource 'https://rubygems.org'\ngem 'rails', '4.1.0'\ngem 'pg'\ngem 'sass-rails', '~> 4.0.3'\ngem 'uglifier', '>= 1.3.0'\ngem 'coffee-rails', '~> 4.0.0'\ngem 'haml'\ngem 'haml-rails'\ngem 'jquery-rails'\ngem 'turbolinks'\ngem 'jbuilder', '~> 2.0'\ngem 'sdoc', '~> 0.4.0', group: :doc\ngem 'spring', group: :development\ngem 'minitest-rails', '2.0.0.beta1'\ngem \"teaspoon\", :path => '~/Development/teaspoon'\n```\nWhen i originally opened this issue, i was using 0.7.9. I'm now pointing to a local clone of the master branch. The error message slightly changed:\nError: ActionView::Template::Error: Asset filtered out and will not be served: ...\nI'm not trying to run in production nor am i precompiling assets. I'm simply running rake teaspoon, which runs in development mode.\n. @jejacks0n  @JulianLeviston Thanks for your investigations. I tried to include those four lines Julian pointed out in the development.rb, without success. What works for me to fix the error is using this in the dev env:\nconfig.assets.raise_runtime_errors = false\nMore about it here.\nI don't fully understand the deal with runtime error checking, but i don't think setting this to false in order to make the teaspoon specs execute is the right approach. Would it make sense to use a separate environment configuration just for teaspoon?\n. @JulianLeviston i had the same problem, check out modeset/guard-teaspoon#29\n. Have you tried using the master branch? And, for a quick dirty fix to get going, you could try setting the following configuration in development.rb:\nconfig.assets.raise_runtime_errors = false\n. Here's the code in guard-teaspoon which calls execute:\ndef run(files = [], options = {})\n  return false if files.empty?\n  @console.execute(@options.merge(options), files)\nend\nfiles contains the changed files.\nDo you want me to change *argsto files? Or do you want me to fix it in guard-teaspoon?\n. I'm using clones of the master branch for both projects\n. :+1: @jejacks0n Is there any way we could help?\n. Here's my (rather simple) Gemfile:\n```\nsource 'https://rubygems.org'\ngem 'rails', '4.1.0'\ngem 'pg'\ngem 'sass-rails', '~> 4.0.3'\ngem 'uglifier', '>= 1.3.0'\ngem 'coffee-rails', '~> 4.0.0'\ngem 'haml'\ngem 'haml-rails'\ngem 'jquery-rails'\ngem 'turbolinks'\ngem 'jbuilder', '~> 2.0'\ngem 'sdoc', '~> 0.4.0', group: :doc\ngem 'spring', group: :development\ngem 'minitest-rails', '2.0.0.beta1'\ngem \"teaspoon\", :path => '~/Development/teaspoon'\n```\nWhen i originally opened this issue, i was using 0.7.9. I'm now pointing to a local clone of the master branch. The error message slightly changed:\nError: ActionView::Template::Error: Asset filtered out and will not be served: ...\nI'm not trying to run in production nor am i precompiling assets. I'm simply running rake teaspoon, which runs in development mode.\n. @jejacks0n  @JulianLeviston Thanks for your investigations. I tried to include those four lines Julian pointed out in the development.rb, without success. What works for me to fix the error is using this in the dev env:\nconfig.assets.raise_runtime_errors = false\nMore about it here.\nI don't fully understand the deal with runtime error checking, but i don't think setting this to false in order to make the teaspoon specs execute is the right approach. Would it make sense to use a separate environment configuration just for teaspoon?\n. @JulianLeviston i had the same problem, check out modeset/guard-teaspoon#29\n. Have you tried using the master branch? And, for a quick dirty fix to get going, you could try setting the following configuration in development.rb:\nconfig.assets.raise_runtime_errors = false\n. Here's the code in guard-teaspoon which calls execute:\ndef run(files = [], options = {})\n  return false if files.empty?\n  @console.execute(@options.merge(options), files)\nend\nfiles contains the changed files.\nDo you want me to change *argsto files? Or do you want me to fix it in guard-teaspoon?\n. I'm using clones of the master branch for both projects\n. :+1: @jejacks0n Is there any way we could help?\n. ",
    "delwaterman": "Brand new install with Rails 4.1, following step-by-step install instructions, get the same issue here.\n. Brand new install with Rails 4.1, following step-by-step install instructions, get the same issue here.\n. ",
    "appletonwebb": "Vanilla Rails 4.2beta1 app, followed the installation instructions, running bin/rake teaspoon gives: \nError: ActionView::Template::Error: Asset filtered out and will not be served: add `Rails.application.config.assets.precompile += %w( teaspoon.css )` to `config/initializers/assets.rb` and restart your server\n. I should also add that adding the following to confing/environments/test.rb:\nconfig.assets.compile = true\nconfig.assets.compress = false\nconfig.assets.debug = false\nconfig.assets.digest = false\nand running:\nRAILS_ENV=test bin/bundle exec teaspoon\nworks. If that's the right way to set-up and run teaspoon shouldn't it be added to the documentation? Otherwise, could you please suggest the right way to set-up and run it for a 4.1+ Rails app?\nThank you!\n. Vanilla Rails 4.2beta1 app, followed the installation instructions, running bin/rake teaspoon gives: \nError: ActionView::Template::Error: Asset filtered out and will not be served: add `Rails.application.config.assets.precompile += %w( teaspoon.css )` to `config/initializers/assets.rb` and restart your server\n. I should also add that adding the following to confing/environments/test.rb:\nconfig.assets.compile = true\nconfig.assets.compress = false\nconfig.assets.debug = false\nconfig.assets.digest = false\nand running:\nRAILS_ENV=test bin/bundle exec teaspoon\nworks. If that's the right way to set-up and run teaspoon shouldn't it be added to the documentation? Otherwise, could you please suggest the right way to set-up and run it for a 4.1+ Rails app?\nThank you!\n. ",
    "liseki": "Since a quick web search lead me here and the above discussion points at a few places, here's to those who come behind me.\nIn Rails 4.1 development mode, the asset pipeline now checks for whether or not an asset you reference in a template would actually be available in production (see https://github.com/rails/sprockets-rails/pull/84). If the asset has not been declared for pre-compilation, it throws the aforementioned AssetFilteredError exception. This was done to help those who have been bit by missing assets in production. This can be turned off in the appropriate environment file using:\nconfig.assets.raise_runtime_errors = false\nBe conscious of what you are giving up by doing that! If you only compile your assets into application.js and application.css, and one or two other files then you should be fine. However if you are juggling numerous assets files, having it on may be useful.\nWith that said, I think the appropriate solution is to add the particular assets files to the pre-compilation list. Since I do not want these files in production, I have the following in initializers/assets.rb:\nunless Rails.env.production?\n  Rails.application.config.assets.precompile += %w( teaspoon.css teaspoon-teaspoon.js jasmine/1.3.1.js teaspoon-jasmine.js )\nend\nI am using jasmine, so edit the list according to your testing framework. I think this is the best way to handle this in the meantime until it is perhaps handled by the gem in the future.\nThanks to the devs for teaspoon!\n. @mfazekas Sorry I was not able to see your comment before the commit happened. What you suggest would have been a bit more nuanced.\n. I did locally run the specs with appraisal and this works for Sprockets 2, 3, and 4 so there should be no back support breakage. I presume the CI also does this.\n. We can now close this with the advent of #478.\n. Reworked in modeset/teaspoon#478\n. We actually don't need this since the PR#478 reverts all the unneeded changes.\n. A few more important points:\n- In Sprockets 4 a debug asset (an asset run through the debug pipeline) concatenates all the included assets as declared by Sprockets directives and adds a sourcemap link at the bottom while a self asset (an asset run thought the self pipeline) includes just the source content without the included assets. Therefore we use self assets when running coverage tests and debug assets otherwise. This is a bit confusing since in Sprockets 2 & 3 a debug asset is what would be self asset in Sprockets 4.\n- In reworking the assets precompile list you will notice that I no longer add teaspoon/*.js assets. This is because we never actually loaded any. All the JavaScript assets in the Teaspoon engine's assets folder are required by the test library gems.\n. Sounds good. Dropping support for Sprockets 2 will give room for cleaning up.\n. @jejacks0n yes please. I'll wait for the sprockets-rails patch to go through and then I'll rebase and squash these commits and give you the heads up.\n. OK @jejacks0n, let's see if we can close this today!\nAs I was developing this patch I was also testing it out on this setup:\nrails 4.2.5\nsprockets 3.6.0\nsprockets-rails 3.0.4\nI kept thinking I was breaking Teaspoon in this setup when config.expand_assets = false but as it turns out Teaspoon is broken. I suspect this has not been a problem because config.expand_assets = true is the default and there is not much reason for users changing this. The problem with this setup is that ActionView::Helpers::AssetTagHelper#path_to_javascript is always passed the option debug = true from Teaspoon. This causes sprockets-rails to append the body query param which makes Sprockets serve a 'self' asset when we actually want the debug (bundled) one. Again part of the confusion here is the difference in meaning of a 'debug' asset between Sprockets 2 and 4 (with Sprockets 3 being somewhere in between). I am providing the explanation just for posterity because I decided to leave this as is; as long no one is having a problem with it then it isn't a problem :)\nHaving that out of the way, I simplified by using the allow_non_precomiled option which allows us the luxury of dropping the manifest file and the sprockets-rails patch. As with the previous attempt, we load \"debug\" assets by default and \"self\" assets when running coverage tests. All the appraisal tests are happy and I have tested this with both config.expand_assets = true and config.expand_assets = false in the following setups:\n```\nSetup 1:\nrails 3.2.22\nsprockets 2.2.3\nSetup 2:\nrails 4.2.5\nsprockets 3.6.0\nsprockets-rails 3.0.4\nSetup 3:\nrails 4.2.5\nsprockets 4.0.0.beta2\nsprockets-rails 3.0.4\n```\nAs mentioned above, Setup 2 still fails when config.expand_assets = false. Switching to rails 4.2.3 in Setup 2 still fails when config.expand_assets = false since we loose our debug/allow_non_precompiled option and now need to make sure all our assets are declared in precompile list.\nLet me know if you are happy with this and I'll squash for committing. Sorry that you'll end up with two consecutive git history entries on Sprockets 4 but I think now we can finally settle it.\n. Since I have most of this fresh in my mind I'll take a look at getting that setup to work towards the end of the week. I think part of the issue is the conflation of the asset helper options \"debug\" and \"allow_non_precompiled\" within ActionView.\nAs far as Sprocket 4 is concerned, this is a go. Thank you for this awesome tool!\n. Sorry, that conflation happens within sprockets-rails not ActionView.\n. This is good to go! :)\n. @jejacks0n I think this is safe to merge unless you have some other thoughts. Since the rails 4 + sprocket 3 issue precedes this change then we need not wait on fixing it. As far as Sprockets 4 goes, there is nothing else to add here.\n. It's a pleasure to help on this awesome tool!\n. The simplest way to solve this (and allow other gems to easily require assets not listed for pre-compilation) is to make sprockets-rails and action view respect both the 'debug' and 'allow_non_precompiled' flags to asset tag helpers. Once that happens we won't need to make any changes to Teaspoon, and we can even do away with Teaspoon's patch for later versions.\nAs a first step I have submitted rails/sprockets-rails#347. I will update here as progress is made.\n. @jejacks0n  Having those sprockets-rails and action view changes would allow us to close rails/sprockets-rails#297.\n. With the advent of sprockets-rails commit b4f9006c we have something to work with: it provides the global config option config.assets.check_precompiled_asset which defaults to true.\nTo firstly solve these Rails 4 issues we have to remove the javascript_include_tag override. When config.expand_assets = false this override still sets the 'debug' option to true and as I explained previously this makes sprockets return 'self' assets when we actually want the concatenated ones.\nSecondly, we need to tell sprockets not the throw exceptions about missing assets. We have two choices:\n1. Add a notice to the documentation that the developer should set config.assets.check_precompiled_asset = false. Developers will probably run into exceptions at some point if they have not set this option (and have config.expand_assets = false). This is a bit of an unpleasant developer experience.\n2. Set config.assets.check_precompiled_asset = false within Teaspoon and have everything just work for the developer. While this is a nice developer experience it is a bit sneaky that we have set a global option for the developer's app and they may well want and expect exceptions to be thrown when  assets are called that are not declared for precompilation.\nIt is a bit of a shame that rails/sprockets-rails#347 did not take because having a granular option would have allowed Teaspoon to solve this issue without changing the developer's app configuration. I have left my thoughts there for consideration.\nSo what do think @jejacks0n? How would you like to move forward with this?\n. @bouk what versions of sprockets and sprockets-rails are you running? And did you remember to clear your asset cache before trying the patch? I have tried it out with sprockets 3.6.0 and master sprockets-rails, and the issue is still the same with both rails 4.2.3 and 4.2.5.\n. Since a quick web search lead me here and the above discussion points at a few places, here's to those who come behind me.\nIn Rails 4.1 development mode, the asset pipeline now checks for whether or not an asset you reference in a template would actually be available in production (see https://github.com/rails/sprockets-rails/pull/84). If the asset has not been declared for pre-compilation, it throws the aforementioned AssetFilteredError exception. This was done to help those who have been bit by missing assets in production. This can be turned off in the appropriate environment file using:\nconfig.assets.raise_runtime_errors = false\nBe conscious of what you are giving up by doing that! If you only compile your assets into application.js and application.css, and one or two other files then you should be fine. However if you are juggling numerous assets files, having it on may be useful.\nWith that said, I think the appropriate solution is to add the particular assets files to the pre-compilation list. Since I do not want these files in production, I have the following in initializers/assets.rb:\nunless Rails.env.production?\n  Rails.application.config.assets.precompile += %w( teaspoon.css teaspoon-teaspoon.js jasmine/1.3.1.js teaspoon-jasmine.js )\nend\nI am using jasmine, so edit the list according to your testing framework. I think this is the best way to handle this in the meantime until it is perhaps handled by the gem in the future.\nThanks to the devs for teaspoon!\n. @mfazekas Sorry I was not able to see your comment before the commit happened. What you suggest would have been a bit more nuanced.\n. I did locally run the specs with appraisal and this works for Sprockets 2, 3, and 4 so there should be no back support breakage. I presume the CI also does this.\n. We can now close this with the advent of #478.\n. Reworked in modeset/teaspoon#478\n. We actually don't need this since the PR#478 reverts all the unneeded changes.\n. A few more important points:\n- In Sprockets 4 a debug asset (an asset run through the debug pipeline) concatenates all the included assets as declared by Sprockets directives and adds a sourcemap link at the bottom while a self asset (an asset run thought the self pipeline) includes just the source content without the included assets. Therefore we use self assets when running coverage tests and debug assets otherwise. This is a bit confusing since in Sprockets 2 & 3 a debug asset is what would be self asset in Sprockets 4.\n- In reworking the assets precompile list you will notice that I no longer add teaspoon/*.js assets. This is because we never actually loaded any. All the JavaScript assets in the Teaspoon engine's assets folder are required by the test library gems.\n. Sounds good. Dropping support for Sprockets 2 will give room for cleaning up.\n. @jejacks0n yes please. I'll wait for the sprockets-rails patch to go through and then I'll rebase and squash these commits and give you the heads up.\n. OK @jejacks0n, let's see if we can close this today!\nAs I was developing this patch I was also testing it out on this setup:\nrails 4.2.5\nsprockets 3.6.0\nsprockets-rails 3.0.4\nI kept thinking I was breaking Teaspoon in this setup when config.expand_assets = false but as it turns out Teaspoon is broken. I suspect this has not been a problem because config.expand_assets = true is the default and there is not much reason for users changing this. The problem with this setup is that ActionView::Helpers::AssetTagHelper#path_to_javascript is always passed the option debug = true from Teaspoon. This causes sprockets-rails to append the body query param which makes Sprockets serve a 'self' asset when we actually want the debug (bundled) one. Again part of the confusion here is the difference in meaning of a 'debug' asset between Sprockets 2 and 4 (with Sprockets 3 being somewhere in between). I am providing the explanation just for posterity because I decided to leave this as is; as long no one is having a problem with it then it isn't a problem :)\nHaving that out of the way, I simplified by using the allow_non_precomiled option which allows us the luxury of dropping the manifest file and the sprockets-rails patch. As with the previous attempt, we load \"debug\" assets by default and \"self\" assets when running coverage tests. All the appraisal tests are happy and I have tested this with both config.expand_assets = true and config.expand_assets = false in the following setups:\n```\nSetup 1:\nrails 3.2.22\nsprockets 2.2.3\nSetup 2:\nrails 4.2.5\nsprockets 3.6.0\nsprockets-rails 3.0.4\nSetup 3:\nrails 4.2.5\nsprockets 4.0.0.beta2\nsprockets-rails 3.0.4\n```\nAs mentioned above, Setup 2 still fails when config.expand_assets = false. Switching to rails 4.2.3 in Setup 2 still fails when config.expand_assets = false since we loose our debug/allow_non_precompiled option and now need to make sure all our assets are declared in precompile list.\nLet me know if you are happy with this and I'll squash for committing. Sorry that you'll end up with two consecutive git history entries on Sprockets 4 but I think now we can finally settle it.\n. Since I have most of this fresh in my mind I'll take a look at getting that setup to work towards the end of the week. I think part of the issue is the conflation of the asset helper options \"debug\" and \"allow_non_precompiled\" within ActionView.\nAs far as Sprocket 4 is concerned, this is a go. Thank you for this awesome tool!\n. Sorry, that conflation happens within sprockets-rails not ActionView.\n. This is good to go! :)\n. @jejacks0n I think this is safe to merge unless you have some other thoughts. Since the rails 4 + sprocket 3 issue precedes this change then we need not wait on fixing it. As far as Sprockets 4 goes, there is nothing else to add here.\n. It's a pleasure to help on this awesome tool!\n. The simplest way to solve this (and allow other gems to easily require assets not listed for pre-compilation) is to make sprockets-rails and action view respect both the 'debug' and 'allow_non_precompiled' flags to asset tag helpers. Once that happens we won't need to make any changes to Teaspoon, and we can even do away with Teaspoon's patch for later versions.\nAs a first step I have submitted rails/sprockets-rails#347. I will update here as progress is made.\n. @jejacks0n  Having those sprockets-rails and action view changes would allow us to close rails/sprockets-rails#297.\n. With the advent of sprockets-rails commit b4f9006c we have something to work with: it provides the global config option config.assets.check_precompiled_asset which defaults to true.\nTo firstly solve these Rails 4 issues we have to remove the javascript_include_tag override. When config.expand_assets = false this override still sets the 'debug' option to true and as I explained previously this makes sprockets return 'self' assets when we actually want the concatenated ones.\nSecondly, we need to tell sprockets not the throw exceptions about missing assets. We have two choices:\n1. Add a notice to the documentation that the developer should set config.assets.check_precompiled_asset = false. Developers will probably run into exceptions at some point if they have not set this option (and have config.expand_assets = false). This is a bit of an unpleasant developer experience.\n2. Set config.assets.check_precompiled_asset = false within Teaspoon and have everything just work for the developer. While this is a nice developer experience it is a bit sneaky that we have set a global option for the developer's app and they may well want and expect exceptions to be thrown when  assets are called that are not declared for precompilation.\nIt is a bit of a shame that rails/sprockets-rails#347 did not take because having a granular option would have allowed Teaspoon to solve this issue without changing the developer's app configuration. I have left my thoughts there for consideration.\nSo what do think @jejacks0n? How would you like to move forward with this?\n. @bouk what versions of sprockets and sprockets-rails are you running? And did you remember to clear your asset cache before trying the patch? I have tried it out with sprockets 3.6.0 and master sprockets-rails, and the issue is still the same with both rails 4.2.3 and 4.2.5.\n. ",
    "ballPointPenguin": "same problem here in virgin Rails 4.1.5 app.\nThank you, @liseki that fix seems reasonable and works for me.\n. same problem here in virgin Rails 4.1.5 app.\nThank you, @liseki that fix seems reasonable and works for me.\n. ",
    "grantgeorge": "I was able to fix this error by adding\nRails.application.config.assets.precompile += %w(\n  teaspoon.css\n  teaspoon-teaspoon.js\n  teaspoon-jasmine.js\n  # other assets\n)\nto config/initializers/assets.rb\n. I was able to fix this error by adding\nRails.application.config.assets.precompile += %w(\n  teaspoon.css\n  teaspoon-teaspoon.js\n  teaspoon-jasmine.js\n  # other assets\n)\nto config/initializers/assets.rb\n. ",
    "ccallebs": "After installing a fresh version I'm still getting this issue.\nGem versions\nteaspoon (1.1.1)\nteaspoon-jasmine (2.3.4)\nEverything else is in place from the install, except for removing\n``` coffeescript\n= require application\n```\nfrom spec_helper.coffee.\n. After installing a fresh version I'm still getting this issue.\nGem versions\nteaspoon (1.1.1)\nteaspoon-jasmine (2.3.4)\nEverything else is in place from the install, except for removing\n``` coffeescript\n= require application\n```\nfrom spec_helper.coffee.\n. ",
    "wanchic": "Using teaspoon without coffee-script, I too am getting these errors.\nGem versions\nruby\nteaspoon 1.1.1\nteaspoon-jasmine 2.3.4\nsprockets 3.5.2\nI discovered that the issue stems from this upgrade:\nruby\n-    sprockets-rails (2.3.3)\n-      actionpack (>= 3.0)\n-      activesupport (>= 3.0)\n-      sprockets (>= 2.8, < 4.0)\n+    sprockets-rails (3.0.0)\n+      actionpack (>= 4.0)\n+      activesupport (>= 4.0)\n+      sprockets (>= 3.0.0)\nAs long as sprockets-rails is kept at 2.3.3, you should be fine. v3.0.0 seems to conflict at the moment. \nHope this helps (^_^)\n. Using teaspoon without coffee-script, I too am getting these errors.\nGem versions\nruby\nteaspoon 1.1.1\nteaspoon-jasmine 2.3.4\nsprockets 3.5.2\nI discovered that the issue stems from this upgrade:\nruby\n-    sprockets-rails (2.3.3)\n-      actionpack (>= 3.0)\n-      activesupport (>= 3.0)\n-      sprockets (>= 2.8, < 4.0)\n+    sprockets-rails (3.0.0)\n+      actionpack (>= 4.0)\n+      activesupport (>= 4.0)\n+      sprockets (>= 3.0.0)\nAs long as sprockets-rails is kept at 2.3.3, you should be fine. v3.0.0 seems to conflict at the moment. \nHope this helps (^_^)\n. ",
    "ibawt": "yup sorry, we're getting timeouts on circle with the runner, was trying to experiment if this was the fix.   This wasn't meant to go back to you.\nDoesn't happen all the time, and I can't reproduce it locally.\nHere's a sample:\nrake teaspoon\nResque::Helpers will be gone with no replacement in Resque 2.0.0.\nDEPRECATION WARNING: Asset locations should be changed (js in /javascripts and css in /stylesheets) and this patch removed. (called from <top (required)> at /home/ubuntu/shopify/lib/extensions/action_view_ext.rb:1)\nStarting the Teaspoon server...\nThin web server (v1.6.1 codename Death Proof)\nMaximum connections set to 1024\nListening on 0.0.0.0:57331, CTRL+C to stop\n Teaspoon running default suite at http://127.0.0.1:57331/teaspoon/default\ncommand bundle exec ruby test/circle_runner.rb took more than 3 minutes since last output\n. yup sorry, we're getting timeouts on circle with the runner, was trying to experiment if this was the fix.   This wasn't meant to go back to you.\nDoesn't happen all the time, and I can't reproduce it locally.\nHere's a sample:\nrake teaspoon\nResque::Helpers will be gone with no replacement in Resque 2.0.0.\nDEPRECATION WARNING: Asset locations should be changed (js in /javascripts and css in /stylesheets) and this patch removed. (called from <top (required)> at /home/ubuntu/shopify/lib/extensions/action_view_ext.rb:1)\nStarting the Teaspoon server...\nThin web server (v1.6.1 codename Death Proof)\nMaximum connections set to 1024\nListening on 0.0.0.0:57331, CTRL+C to stop\n Teaspoon running default suite at http://127.0.0.1:57331/teaspoon/default\ncommand bundle exec ruby test/circle_runner.rb took more than 3 minutes since last output\n. ",
    "YoranBrondsema": "That solved it indeed. Thanks!\n. No it doesn't. I checked and it fails with this error from the moment that I add the unicorn gem to the Gemfile.\nEDIT: Sorry, I have to add both the unicorn and the rack-handlers gem for it to fail.\n. That solved it indeed. Thanks!\n. No it doesn't. I checked and it fails with this error from the moment that I add the unicorn gem to the Gemfile.\nEDIT: Sorry, I have to add both the unicorn and the rack-handlers gem for it to fail.\n. ",
    "kenips": ":+1: \n. :+1: \n. ",
    "artsyca": "So by the looks of it, this is a Sinon/QUnit issue independent of Teaspoon (i.e. the JS errors are not a result of a missing setting such as suite.boot_partial or anything like that?)\n. So definitely looks like a Sinon/QUnit issue and not related to Teaspoon per se, but as it stands Sinon is unusable with QUnit.\nI've submitted a PR to Sinon.JS and the issue I raised with them is here: https://github.com/cjohansen/Sinon.JS/issues/471\nI think this issue can be safely closed.\n. My apologies, on second thought I wonder if any action should be taken to mitigate this until a fix can be released?\n. OK Cool! I appreciate the Teaspoon framework very much and I'm glad to be involved even in a very small capacity. Still trying to get my bearings in the development process though as the history is very new to me and I still need to understand the subtler points. Thanks a lot!\n. So by the looks of it, this is a Sinon/QUnit issue independent of Teaspoon (i.e. the JS errors are not a result of a missing setting such as suite.boot_partial or anything like that?)\n. So definitely looks like a Sinon/QUnit issue and not related to Teaspoon per se, but as it stands Sinon is unusable with QUnit.\nI've submitted a PR to Sinon.JS and the issue I raised with them is here: https://github.com/cjohansen/Sinon.JS/issues/471\nI think this issue can be safely closed.\n. My apologies, on second thought I wonder if any action should be taken to mitigate this until a fix can be released?\n. OK Cool! I appreciate the Teaspoon framework very much and I'm glad to be involved even in a very small capacity. Still trying to get my bearings in the development process though as the history is very new to me and I still need to understand the subtler points. Thanks a lot!\n. ",
    "jhnvz": "Thanks for the quick response! We're running rails 4.0.3. I don't think assets are getting precompiled since the commands we run on our ci server are pretty much the same as locally.\n\n. Is there I way I can check/debug if instrumentation isn't loading/working correctly?\n. Already tried that. When I run RAILS_ENV=test bundle exec teaspoon locally it also doesn't generate coverage.\n. When your run bundle exec teaspoon (locally) the ENV['RAILS_ENV'] is nil. Rails defaults to the development environment so config/environments/development.rb is loaded.\nWhen your run bundle exec teaspoon on circleci ENV['RAILS_ENV'] is 'test' so config/environments/test.rb is loaded. When you change config.cache_classes to false in for the test environment instrumentation works.\nThanks for pointing me to the right direction.\n. Thanks for the quick response! We're running rails 4.0.3. I don't think assets are getting precompiled since the commands we run on our ci server are pretty much the same as locally.\n\n. Is there I way I can check/debug if instrumentation isn't loading/working correctly?\n. Already tried that. When I run RAILS_ENV=test bundle exec teaspoon locally it also doesn't generate coverage.\n. When your run bundle exec teaspoon (locally) the ENV['RAILS_ENV'] is nil. Rails defaults to the development environment so config/environments/development.rb is loaded.\nWhen your run bundle exec teaspoon on circleci ENV['RAILS_ENV'] is 'test' so config/environments/test.rb is loaded. When you change config.cache_classes to false in for the test environment instrumentation works.\nThanks for pointing me to the right direction.\n. ",
    "jcarlson": "I just spent too long trying to diagnose this same problem. Can anyone possibly explain to me why config.cache_classes = false in my test environment allows coverage to run properly? I don't see the connection. Cucumber emits a warning about class caching being enabled if I do this...\n. Discussion continues at #252.\n. I missed a spec, but fixed it. The build still fails because newer versions of istanbul have slightly different console output... namely the + in the table intersections has become a | in 0.2.12+, and starting in 0.3.0, there is a large deprecation notice, due to breaking API changes...\n. For now Istanbul seems to detect and support backwards compatibility, but it emits a large deprecation notice to the console. Using version 0.3.0 did work for me but I chose to stick with 0.2.16 to avoid the notice. \nYou can see more details here:\nhttps://github.com/gotwarlost/istanbul/blob/master/CHANGELOG.md\n\nOn Jul 27, 2014, at 12:28 AM, Jeremy Jackson notifications@github.com wrote:\nThanks. Does teaspoon work properly with both versions of Istanbul? You say there's API changes, and if it is broken it'd like to know.\n\u2014\nReply to this email directly or view it on GitHub.\n. Any change on this? You mention that you updated the interface to support istanbul 0.3.0, but this issue was really about allowing a project to configure the location of the istanbul executable...\n. I just spent too long trying to diagnose this same problem. Can anyone possibly explain to me why config.cache_classes = false in my test environment allows coverage to run properly? I don't see the connection. Cucumber emits a warning about class caching being enabled if I do this...\n. Discussion continues at #252.\n. I missed a spec, but fixed it. The build still fails because newer versions of istanbul have slightly different console output... namely the + in the table intersections has become a | in 0.2.12+, and starting in 0.3.0, there is a large deprecation notice, due to breaking API changes...\n. For now Istanbul seems to detect and support backwards compatibility, but it emits a large deprecation notice to the console. Using version 0.3.0 did work for me but I chose to stick with 0.2.16 to avoid the notice. \n\nYou can see more details here:\nhttps://github.com/gotwarlost/istanbul/blob/master/CHANGELOG.md\n\nOn Jul 27, 2014, at 12:28 AM, Jeremy Jackson notifications@github.com wrote:\nThanks. Does teaspoon work properly with both versions of Istanbul? You say there's API changes, and if it is broken it'd like to know.\n\u2014\nReply to this email directly or view it on GitHub.\n. Any change on this? You mention that you updated the interface to support istanbul 0.3.0, but this issue was really about allowing a project to configure the location of the istanbul executable...\n. \n",
    "bradgessler": ":+1:\nOur team had to hook up a bunch of stuff up manually to get working acceptance tests. Something that works out of the box from a Gemfile would be one less thing to think about.\n@steel or @mdiebolt may have ideas or opinions on how this could work.\n. :+1:\nOur team had to hook up a bunch of stuff up manually to get working acceptance tests. Something that works out of the box from a Gemfile would be one less thing to think about.\n@steel or @mdiebolt may have ideas or opinions on how this could work.\n. ",
    "steel": "Teaspoon looks pretty nice! We currently use https://github.com/mrship/middleman-jasmine to run our JS tests. It's pretty straight forward but does leave a lot to be desired.\n. Teaspoon looks pretty nice! We currently use https://github.com/mrship/middleman-jasmine to run our JS tests. It's pretty straight forward but does leave a lot to be desired.\n. ",
    "JohnRiv": "Sorry about your dog. Any update on this? Would you be willing to push the in-progress branch and mention what else needs to be done?\n. I'm close to getting this working. It worked in 0.7.8 but 0.8.0 broke it. All that is needed is to get the &instrument=1 query string added to the JS files included in _boot_require_js.html.erb via <%= javascript_include_tag @suite.helper %>. I assume bringing back the javascript_include_tag_for_teaspoon method for that partial will do the trick.\nOnce I get that working I'll submit a pull request. \n. Why are you setting eager_load=true in test? My understanding was the recommendation is to have that set to false in test\n. Yeah I didn't expect this to be merged on the first shot, was more hoping that it would help the conversation in getting require.js support fixed.\nRegarding my setup, I am not loading files async. Upon further investigation, I may actually be able to solve it with a separate boot file and some fixes to the define statements in our spec files. I'll see if that will work and report back.\n. OK so I was able to get coverage working without a pull request so I'm closing this. Here's my setup in case anyone else runs into a similar situation:\n1. Use require.js whenever possible, but don't asynchronously load the dependent JS files. Instead include them in the JS manifest(s)\n2. Define all modules with a name\n3. Define all specs with a name that matches the path to the file (view the source of the spec runner in a browser to verify the names you should use)\n4. Include the JS files using sprockets #= require statements in the manifests that are included in spec_helper.js.erb\n5. Create a custom boot file at spec/javascripts/fixtures/_boot_requirejs_sync.html.erb. See this gist for the contents: https://gist.github.com/JohnRiv/63bffffeacbf4dde3833\n   That is based on the _boot_require_js.html.erb in Teaspoon except it includes the JS files directly in the test runner instead of including require.js and having RequireJS asynchronously load the dependent JS files.\n6. In teaspoon_env.rb, set suite.boot_partial = \"/boot_requirejs_sync\"\n. Sorry about your dog. Any update on this? Would you be willing to push the in-progress branch and mention what else needs to be done?\n. I'm close to getting this working. It worked in 0.7.8 but 0.8.0 broke it. All that is needed is to get the &instrument=1 query string added to the JS files included in _boot_require_js.html.erb via <%= javascript_include_tag @suite.helper %>. I assume bringing back the javascript_include_tag_for_teaspoon method for that partial will do the trick.\nOnce I get that working I'll submit a pull request. \n. Why are you setting eager_load=true in test? My understanding was the recommendation is to have that set to false in test\n. Yeah I didn't expect this to be merged on the first shot, was more hoping that it would help the conversation in getting require.js support fixed.\nRegarding my setup, I am not loading files async. Upon further investigation, I may actually be able to solve it with a separate boot file and some fixes to the define statements in our spec files. I'll see if that will work and report back.\n. OK so I was able to get coverage working without a pull request so I'm closing this. Here's my setup in case anyone else runs into a similar situation:\n1. Use require.js whenever possible, but don't asynchronously load the dependent JS files. Instead include them in the JS manifest(s)\n2. Define all modules with a name\n3. Define all specs with a name that matches the path to the file (view the source of the spec runner in a browser to verify the names you should use)\n4. Include the JS files using sprockets #= require statements in the manifests that are included in spec_helper.js.erb\n5. Create a custom boot file at spec/javascripts/fixtures/_boot_requirejs_sync.html.erb. See this gist for the contents: https://gist.github.com/JohnRiv/63bffffeacbf4dde3833\n   That is based on the _boot_require_js.html.erb in Teaspoon except it includes the JS files directly in the test runner instead of including require.js and having RequireJS asynchronously load the dependent JS files.\n6. In teaspoon_env.rb, set suite.boot_partial = \"/boot_requirejs_sync\"\n. ",
    "Eptis": "Any progress on this? Or any way I could help?\n. Any progress on this? Or any way I could help?\n. ",
    "ahallock": "Never mind, I see this was fixed in #191 \n. Never mind, I see this was fixed in #191 \n. ",
    "agenteo": "I see, I'd like to give you my input but I want to confirm I understand how it used to work first.\nwas: https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb:18\nTeaspoon::Engine.append_asset_paths(app.config.assets)\nthe place in charge of loading the assets?\n. I see, I'd like to give you my input but I want to confirm I understand how it used to work first.\nwas: https://github.com/modeset/teaspoon/blob/master/lib/teaspoon/engine.rb:18\nTeaspoon::Engine.append_asset_paths(app.config.assets)\nthe place in charge of loading the assets?\n. ",
    "SoldierCoder": "The error message is telling you what to do -- remove the suite.javascripts directive\n. The error message is telling you what to do -- remove the suite.javascripts directive\n. ",
    "edariedl": "I have same problem, but I am using only suite.use_framework :jasmine, \"2.0.0\". It gives me the following error:\n``\n\u2192 rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:58558/teaspoon/default\nTeaspoonError: Jasmine not found -- usesuite.use_framework :jasmineand adjust or remove thesuite.javascripts` directive.\n  # teaspoon-jasmine.js:1158\n  # teaspoon-jasmine.js:1339\nExecution halted.\n``\n. If I change it tosuite.use_framework :jasmine, \"1.3.1\"everything works great.\n. I have same problem, but I am using onlysuite.use_framework :jasmine, \"2.0.0\"`. It gives me the following error:\n``\n\u2192 rake teaspoon\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:58558/teaspoon/default\nTeaspoonError: Jasmine not found -- usesuite.use_framework :jasmineand adjust or remove thesuite.javascripts` directive.\n  # teaspoon-jasmine.js:1158\n  # teaspoon-jasmine.js:1339\nExecution halted.\n``\n. If I change it tosuite.use_framework :jasmine, \"1.3.1\"` everything works great.\n. ",
    "skbailey": "That's the same fix I'm using for now, not sure why 2.0.0 doesn't work.  I tried removing that directive but same issue.\n. That's the same fix I'm using for now, not sure why 2.0.0 doesn't work.  I tried removing that directive but same issue.\n. ",
    "noelrappin": "I am having the same issue. Does Teaspoon work with Jasmine 2.0?\n. Might I humbly request that the current status be noted more prominently in the readme?\n. Pull request subitted\n. I am having the same issue. Does Teaspoon work with Jasmine 2.0?\n. Might I humbly request that the current status be noted more prominently in the readme?\n. Pull request subitted\n. ",
    "chriscabral": "@jejacks0n, how is the PR for jasmine 2.0 support coming? \n. @jejacks0n, how is the PR for jasmine 2.0 support coming? \n. ",
    "jwliechty": "+1\n. +1\n. ",
    "jrust": ":+1: \n. :+1: \n. ",
    "dgobaud": ":+1: 2.0 support would be great!\n. :+1: 2.0 support would be great!\n. ",
    "chip-miller": ":+1: @jejacks0n - thanks for taking this on!\nFYI - There are a lot of (misleading) references to Jasmine 2.0 in the generated teaspoon_env.rb\n. :+1: @jejacks0n - thanks for taking this on!\nFYI - There are a lot of (misleading) references to Jasmine 2.0 in the generated teaspoon_env.rb\n. ",
    "coderjonny": "+1 :+1: How's this coming along?\n. :+1: @samu ^\n. try\nconfig.formatters = [\"documentation\"]\n. Hmm it could have something to do with that guard cmd\nOn Monday, February 2, 2015, Ryan Linton notifications@github.com wrote:\n\nSwitching to config.formatters = [\"documentation\"] doesn't have any\neffect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/modeset/teaspoon/issues/302#issuecomment-72556077.\n\n\nJonathan Kang\nSoftware Engineer\nLos Angeles, California\nTweets http://twitter.com/zenjonny\nLinkedIn https://www.linkedin.com/pub/jonny-kang/55/456/289\n. I had to manually mount teaspoon route in routes.rb for a custom \"/jasmine\" route:\nbut not sure if that's necessary for rails 4. I'm still on rails 3.\nAnd not sure if that's necessary for the default. You can give it a try though.\nif Rails.env.test? || Rails.env.development?\n  mount Teaspoon::Engine => \"/jasmine\"\nend\nteaspoon_env.rb:\n```\nTeaspoon.configure do |config|\n# Determines where the Teaspoon routes will be mounted. Changing this to \"/jasmine\" would allow you to browse to\n  # http://localhost:3000/jasmine to run your tests.\n  config.mount_at = \"/jasmine\"\n```\n. +1 :+1: How's this coming along?\n. :+1: @samu ^\n. try\nconfig.formatters = [\"documentation\"]\n. Hmm it could have something to do with that guard cmd\nOn Monday, February 2, 2015, Ryan Linton notifications@github.com wrote:\n\nSwitching to config.formatters = [\"documentation\"] doesn't have any\neffect.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/modeset/teaspoon/issues/302#issuecomment-72556077.\n\n\nJonathan Kang\nSoftware Engineer\nLos Angeles, California\nTweets http://twitter.com/zenjonny\nLinkedIn https://www.linkedin.com/pub/jonny-kang/55/456/289\n. I had to manually mount teaspoon route in routes.rb for a custom \"/jasmine\" route:\nbut not sure if that's necessary for rails 4. I'm still on rails 3.\nAnd not sure if that's necessary for the default. You can give it a try though.\nif Rails.env.test? || Rails.env.development?\n  mount Teaspoon::Engine => \"/jasmine\"\nend\nteaspoon_env.rb:\n```\nTeaspoon.configure do |config|\n# Determines where the Teaspoon routes will be mounted. Changing this to \"/jasmine\" would allow you to browse to\n  # http://localhost:3000/jasmine to run your tests.\n  config.mount_at = \"/jasmine\"\n```\n. ",
    "VitorHP": ":+1: \n. :+1: \n. ",
    "rstudner": "+1 :)\n. I saw the preload docs and of course tried all that.  Had no effect on anything.\nWhen I look at the network tab, while doing localhost:3000/teaspoon I see this:\n...all my js loads.. (teaspoon, jasmine-jquery and ALL my application javascript -- since there is a DOM ready in teaspoon/jasmine, to goes ahead and runs, though there is no fixture DOM to work against)\n...fixture loads... (after the above, preload or not, every time)\nmy test has like:\n\n//= require support/jasmine-jquery\n//= require folder/myjs\npreload fixture\ndescribe\n  beforeEach\n    loadTheFixture\n  describe\n     it\n       test for something\n\nSo the issue, is that my javascript literally is just loading/running before the fixture ever gets into the DOM (at all).  But the \"document is ready\" because localhost:3000/teaspoon 'has a dom ready'\nJust seems like nothing I can do \"in the spec file and with teaspoon\" can possibly fix this.\nhrm.\n. \n$(document).ready(function () {\n  var checkState = function() {\n      if ($(\"#incident-header\").length == 0) {\n        console.debug($('div'));\n        setTimeout(checkState, 500);\n      } else {\n        //actual code would go here\n      }\n    };\n    setTimeout(checkState, 500);\n});\n\nAs an example.  The above works just fine if I just run my app normally. (of course i'd never bother to actually put this code in a real application js file of mine, but i'm trying to \"modify my entire app just to make it work with teaspoon\" ;)\nif I run a teaspoon test with the above, the $(\"#incident-header\") will fail, 100% of the time.   It will print out the \"teaspoon divs\" which exist on the page but that is it.\nIf I put in a debugger statement, and STOP execution.. and then hit \"go\" it will then work and find the div.  But, letting it check every 500ms \"forever\" -- the div is never found.\nThe fixture I both preloaded, and loaded, has a div with that ID in it.\nAnother 'tidbit', if I have (in my application's .js file for the page/concept i'm trying to test):\n\n  $(document).ready(function() {\n    console.debug(document.body);\n  });\n\nand I navtigate to localhost:3000/teaspoon and then run my test.\nThe entire body is ONLY the teaspoon interface.  My fixture HTML is 100% not at all on the page.  \nI just wrote another test, totally unrelated to the above.\n1 js file, 1 fixture\n\njQuery(function() {\n  setTimeout(function() {\n    console.log($(\"#header\").length);\n  },500);\n});\n\nThat will print \"1\".\nIf I lower that 500 down to 200, it will print 0.\nBecause, the fixture \"isn't actually available\" when the .js file is loaded and evaluated \"in the dom\"\n. Is the above normal -- that when I do localhost:3000/teaspoon and view my network tab, that all my javascript is loaded BEFORE the fixture  (and thus, no matter what, anything in $(document).ready will be run no matter what before the fixture is available \nOr is that not normal?  (trying to see if there is something about the rails app i'm working on that is doing something weird with asset loading order in general)\n. So in the documentation, when it demonstrates loading \"fixture.js\" what exactly was happening there?\n. Sure - what would be in that file for example, that a test then could reasonably expect to be able to use?\nJust trying to use this awesome framework and work and clarify how parts of it work -- not sure why you keep responding so aggressively.\n. Totally understand -- and this is opensource which means people (like me) should be happy with the docs we get (if they exist at all haha).\nI guess i'm just at a loss for how \"loading JSON as fixture data\" could actually/possibly help with a test if I can't set it to a javascript variable (i.e. javascript code) while i'm at it haha.  I don't get how 'load raw data'  helps with writing a test case, if I can't reference the raw data :) \nClearly i'm missing the obvious -- sorry.\nNo biggie -- I moved it into my tests, just always looking to explore more about what I can/can't pull off from a reuse POV etc.\n. I found in the pre block, of the preload function example, fixture.json[0].  I had missed that prior -- my bad.  (and searching the page for fixture.json[ doesn't find it either due to the pre block).\nSweet!  thanks :)\n. Also - this happens on teaspoon 0.7.9 and 0.9.1 (only two versions i've tried)\nmikepack - i'll try to recreate a new project with \"way the heck less\" to isolate it..  \nBasically if I run one test (out of the 234) it passes.  If I run 2+, then they both/all fail.  knockout seems to be quite certain it has \"already applied itself\" to the fixture.\nbasically i'll have:\nbeforeEach(function(){\n      this.fixtures = fixture.load('executive_dashboard/index.html');\n    });\n    it (\"blah\") { test some stuff }\nso if I do bundle exec teaspoon --filter \"just one test\" it is fine.  once multiple \"its\" (and therefore beforeEach runs multiple times).. it all blows up.\n. Still don't have the new example project, but here is an example test:\n```\n//= require support/jasmine-jquery-1.7.0\n//= require appliances\ndescribe('appliances', function() {\nbeforeEach(function(){\n    var available_appliances = {\n      appliances: ['ntap'],\n      critical: ['ntap'],\n      warning: []\n    };\n    var appliance_data = {\n      counts: {\n        goodCount: 1,\n        warningCount: 0,\n        criticalCount: 0,\n        totalCount: 1\n      },\n      data: []\n    };\n    spyOn($, 'getJSON').andCallFake(function(url,data){\n      if(url.match(/ntap.json$/)) {\n        data(appliance_data);\n      } else {\n        data(available_appliances);\n      }\n    });\n    this.fixtures = fixture.load('appliances/index.html');\n    PortalAppliances.init();\n  });\nit('should display available appliance tab', function() {\n    expect($('#ntap').is(':visible')).toBeTrue;\n  });\nit('should display available tab status', function(){\n    expect($('#ntap-status').is(':visible')).toBeTrue;\n  });\nit('should not display the non-available appliance tab', function() {\n    expect($('#hx').is(':visible')).toBeFalse;\n  });\nit('should update counts', function() {\n    expect($('#goodCount').text()).toBe('1');\n    expect($('#warningCount').text()).toBe('0');\n    expect($('#criticalCount').text()).toBe('0');\n    expect($('#totalCount').text()).toBe('1');\n  });\n});\n```\nSo, tht PortalAppliances.init() call in beforeEach.  That calls ko.applyBindings() on the \"fixture\".\nFirst test passes, and 2nd subsequest tests all fail, because it is \"applying the bindings more than once\" which means the fixture isn't truly being 'reset' between tests.\n. okay, if 100% of my javascript file is only this:\nvar PortalAppliances = {\n  init: function () {\n    ko.applyBindings(\n        {\n          selectedOrganization: 16,\n          goodCount: 0,\n          warningCount :0,\n          criticalCount: 0,\n          applianceLabel: 'foo',\n          totalCount: 0,\n          tabs: [],\n          appliances: []\n        }\n    );\n  }\n};\nit still fails with the same error.  i don't see how it gets any simpler than that :)\nNothing else in the app/this single page etc references that.. only in index.html:\n<script type=\"text/javascript\">\n  PortalAppliances.init();\n</script>\nNo other references in the entire codebase to it.\n. Yeah -- I hear what you are saying.  I think (think?) this is just a case of using teaspoon/jasmine to test something that capybara/some other framework is meant to test.  And -- because knockout didn't freak out about \"this\" in the old version I was using, once I upgraded, I started seeing it.\n. Question - when teaspoon runs from the command line (with phantomJS), does it create even a miniature \"DOM\" of its own, that it loads the fixture into?  (obviously the /teaspoon rails route has a big ole giant DOM of its own)\nI think knockout is getting tripped up, because it is somehow remembering \"teaspoon DOM\" versus JUST the fixture dom (which is being cleaned up correctly I believe).\n. jejacks0n - no no.. i'm taking your advice 100% well :)\nI think wht is going on, is that when someone (me) is saying:\nko.applyBindings(jsonObject) without qualifying to what, it is then applying itself to \"all of the DOM\".. only a part of which (albeit a large part) is the fixgture that is coming and going.\nThus, knockout says: \"Wait a second, i've been applied to this global space already\"\nAnd yes -- if I call PortalAppliances.init() \"twice\" in code on the same page, it gets the same error.  But in my application, nothing ever calls it twice.  but the beforeEach in my test called it \"each time\" thinking the fixture (i.e. the whole page) was coming/going, each time.\nSo, what i'm trying, to just wrapping the entire fixture in a div:\n<div id=\"appliancesExperience\">\n  the page that existed before is just in here wrapped now\n</div>\nand doing ko.applyBindings(jsonObject, document.getElementById('appliancesExperience'));\nThis, seems to make it happier.\nYou comment about fixture cleanup, that I listened to (hah) led me precisely to trying this.\n. Well, figured out the \"why\".. just have to figure out what to do\n(magic lamp creates it own div, and puts the fixture in there.. thus, I had 2 select's with the same ID lah lah)\nEvil!\n. Mike - yeah, not what I was looking for but thanks.  I started making use of Magic Lamp, and despite all the tests running on every developer box etc.. for some reason, on the jenkins centos box, all the tests that use magic lamp now fail.  And, since there is so little debugging/bootstrapping/I don't even know what I am looking for (hah) output, I can't seem to track down why this is the case.\n. I'll get more info pulled together today and post it up (sorry initial comment was sparse on that).\nIt is interesting, looking at the junit.rb, that somehow I ended up with testsuites name=\"jasmine\" at all (since that doesn't appear possible in the above code heh)\n. No.  I haven't been able to reproduce it.  The fact that it ever happened (since the .rb code doesn't seem to even allow for the possibility) is a head scratcher.  I'll close this and when I next see it, come back hah.\n. Yes hah.  Now of course I can't seem to change my version of jasmine, but I'm reading the docs\napparently this isn't it:\n# Note: If no version is specified, the latest is assumed.\n    #\n    # Available: jasmine[1.3.1], mocha[1.10.0, 1.17.1] qunit[1.12.0, 1.14.0]\n    suite.use_framework :jasmine, \"1.3.1\"\nChanging that to 2.0.0 didn't work, but leaving it blank worked (use the latest version per the docs).\nThanks:)\n. Hrm.  I'm having mixed results.\nI have a file:\nAjaxSuccessFailureButton_spec.js.jsx in spec/javascripts/components\nIt isn't in the list of tests.\nIf I rename it to just .js (no jsx)\nIt shows up in the list of tests.\nThoughts?\n. Hah yeah.. just for React stuff, especially with multiple components, it just way easier to render them into the DOM/configure their props using the JSX syntax.  The \"pure js\" React syntax is fine for doing really trivial things, but if you want to make a mock component (re: chunk of DOM) to use with a react widget (think \"yield\") it gets to be insane without JSX.\n. Yep, is working perfectly.  I had the default matcher (as you suspected) and just forgot about that entire part of the Docs since it'd been so long since I'd had to get in there.\nThanks for the prompt responses and help -- much appreciated.\nI'll try to update your docs (if you like) with a little subsection on 'setting up to test React' based on these little config tweaks etc.\n. +1 :)\n. I saw the preload docs and of course tried all that.  Had no effect on anything.\nWhen I look at the network tab, while doing localhost:3000/teaspoon I see this:\n...all my js loads.. (teaspoon, jasmine-jquery and ALL my application javascript -- since there is a DOM ready in teaspoon/jasmine, to goes ahead and runs, though there is no fixture DOM to work against)\n...fixture loads... (after the above, preload or not, every time)\nmy test has like:\n\n//= require support/jasmine-jquery\n//= require folder/myjs\npreload fixture\ndescribe\n  beforeEach\n    loadTheFixture\n  describe\n     it\n       test for something\n\nSo the issue, is that my javascript literally is just loading/running before the fixture ever gets into the DOM (at all).  But the \"document is ready\" because localhost:3000/teaspoon 'has a dom ready'\nJust seems like nothing I can do \"in the spec file and with teaspoon\" can possibly fix this.\nhrm.\n. \n$(document).ready(function () {\n  var checkState = function() {\n      if ($(\"#incident-header\").length == 0) {\n        console.debug($('div'));\n        setTimeout(checkState, 500);\n      } else {\n        //actual code would go here\n      }\n    };\n    setTimeout(checkState, 500);\n});\n\nAs an example.  The above works just fine if I just run my app normally. (of course i'd never bother to actually put this code in a real application js file of mine, but i'm trying to \"modify my entire app just to make it work with teaspoon\" ;)\nif I run a teaspoon test with the above, the $(\"#incident-header\") will fail, 100% of the time.   It will print out the \"teaspoon divs\" which exist on the page but that is it.\nIf I put in a debugger statement, and STOP execution.. and then hit \"go\" it will then work and find the div.  But, letting it check every 500ms \"forever\" -- the div is never found.\nThe fixture I both preloaded, and loaded, has a div with that ID in it.\nAnother 'tidbit', if I have (in my application's .js file for the page/concept i'm trying to test):\n\n  $(document).ready(function() {\n    console.debug(document.body);\n  });\n\nand I navtigate to localhost:3000/teaspoon and then run my test.\nThe entire body is ONLY the teaspoon interface.  My fixture HTML is 100% not at all on the page.  \nI just wrote another test, totally unrelated to the above.\n1 js file, 1 fixture\n\njQuery(function() {\n  setTimeout(function() {\n    console.log($(\"#header\").length);\n  },500);\n});\n\nThat will print \"1\".\nIf I lower that 500 down to 200, it will print 0.\nBecause, the fixture \"isn't actually available\" when the .js file is loaded and evaluated \"in the dom\"\n. Is the above normal -- that when I do localhost:3000/teaspoon and view my network tab, that all my javascript is loaded BEFORE the fixture  (and thus, no matter what, anything in $(document).ready will be run no matter what before the fixture is available \nOr is that not normal?  (trying to see if there is something about the rails app i'm working on that is doing something weird with asset loading order in general)\n. So in the documentation, when it demonstrates loading \"fixture.js\" what exactly was happening there?\n. Sure - what would be in that file for example, that a test then could reasonably expect to be able to use?\nJust trying to use this awesome framework and work and clarify how parts of it work -- not sure why you keep responding so aggressively.\n. Totally understand -- and this is opensource which means people (like me) should be happy with the docs we get (if they exist at all haha).\nI guess i'm just at a loss for how \"loading JSON as fixture data\" could actually/possibly help with a test if I can't set it to a javascript variable (i.e. javascript code) while i'm at it haha.  I don't get how 'load raw data'  helps with writing a test case, if I can't reference the raw data :) \nClearly i'm missing the obvious -- sorry.\nNo biggie -- I moved it into my tests, just always looking to explore more about what I can/can't pull off from a reuse POV etc.\n. I found in the pre block, of the preload function example, fixture.json[0].  I had missed that prior -- my bad.  (and searching the page for fixture.json[ doesn't find it either due to the pre block).\nSweet!  thanks :)\n. Also - this happens on teaspoon 0.7.9 and 0.9.1 (only two versions i've tried)\nmikepack - i'll try to recreate a new project with \"way the heck less\" to isolate it..  \nBasically if I run one test (out of the 234) it passes.  If I run 2+, then they both/all fail.  knockout seems to be quite certain it has \"already applied itself\" to the fixture.\nbasically i'll have:\nbeforeEach(function(){\n      this.fixtures = fixture.load('executive_dashboard/index.html');\n    });\n    it (\"blah\") { test some stuff }\nso if I do bundle exec teaspoon --filter \"just one test\" it is fine.  once multiple \"its\" (and therefore beforeEach runs multiple times).. it all blows up.\n. Still don't have the new example project, but here is an example test:\n```\n//= require support/jasmine-jquery-1.7.0\n//= require appliances\ndescribe('appliances', function() {\nbeforeEach(function(){\n    var available_appliances = {\n      appliances: ['ntap'],\n      critical: ['ntap'],\n      warning: []\n    };\n    var appliance_data = {\n      counts: {\n        goodCount: 1,\n        warningCount: 0,\n        criticalCount: 0,\n        totalCount: 1\n      },\n      data: []\n    };\n    spyOn($, 'getJSON').andCallFake(function(url,data){\n      if(url.match(/ntap.json$/)) {\n        data(appliance_data);\n      } else {\n        data(available_appliances);\n      }\n    });\n    this.fixtures = fixture.load('appliances/index.html');\n    PortalAppliances.init();\n  });\nit('should display available appliance tab', function() {\n    expect($('#ntap').is(':visible')).toBeTrue;\n  });\nit('should display available tab status', function(){\n    expect($('#ntap-status').is(':visible')).toBeTrue;\n  });\nit('should not display the non-available appliance tab', function() {\n    expect($('#hx').is(':visible')).toBeFalse;\n  });\nit('should update counts', function() {\n    expect($('#goodCount').text()).toBe('1');\n    expect($('#warningCount').text()).toBe('0');\n    expect($('#criticalCount').text()).toBe('0');\n    expect($('#totalCount').text()).toBe('1');\n  });\n});\n```\nSo, tht PortalAppliances.init() call in beforeEach.  That calls ko.applyBindings() on the \"fixture\".\nFirst test passes, and 2nd subsequest tests all fail, because it is \"applying the bindings more than once\" which means the fixture isn't truly being 'reset' between tests.\n. okay, if 100% of my javascript file is only this:\nvar PortalAppliances = {\n  init: function () {\n    ko.applyBindings(\n        {\n          selectedOrganization: 16,\n          goodCount: 0,\n          warningCount :0,\n          criticalCount: 0,\n          applianceLabel: 'foo',\n          totalCount: 0,\n          tabs: [],\n          appliances: []\n        }\n    );\n  }\n};\nit still fails with the same error.  i don't see how it gets any simpler than that :)\nNothing else in the app/this single page etc references that.. only in index.html:\n<script type=\"text/javascript\">\n  PortalAppliances.init();\n</script>\nNo other references in the entire codebase to it.\n. Yeah -- I hear what you are saying.  I think (think?) this is just a case of using teaspoon/jasmine to test something that capybara/some other framework is meant to test.  And -- because knockout didn't freak out about \"this\" in the old version I was using, once I upgraded, I started seeing it.\n. Question - when teaspoon runs from the command line (with phantomJS), does it create even a miniature \"DOM\" of its own, that it loads the fixture into?  (obviously the /teaspoon rails route has a big ole giant DOM of its own)\nI think knockout is getting tripped up, because it is somehow remembering \"teaspoon DOM\" versus JUST the fixture dom (which is being cleaned up correctly I believe).\n. jejacks0n - no no.. i'm taking your advice 100% well :)\nI think wht is going on, is that when someone (me) is saying:\nko.applyBindings(jsonObject) without qualifying to what, it is then applying itself to \"all of the DOM\".. only a part of which (albeit a large part) is the fixgture that is coming and going.\nThus, knockout says: \"Wait a second, i've been applied to this global space already\"\nAnd yes -- if I call PortalAppliances.init() \"twice\" in code on the same page, it gets the same error.  But in my application, nothing ever calls it twice.  but the beforeEach in my test called it \"each time\" thinking the fixture (i.e. the whole page) was coming/going, each time.\nSo, what i'm trying, to just wrapping the entire fixture in a div:\n<div id=\"appliancesExperience\">\n  the page that existed before is just in here wrapped now\n</div>\nand doing ko.applyBindings(jsonObject, document.getElementById('appliancesExperience'));\nThis, seems to make it happier.\nYou comment about fixture cleanup, that I listened to (hah) led me precisely to trying this.\n. Well, figured out the \"why\".. just have to figure out what to do\n(magic lamp creates it own div, and puts the fixture in there.. thus, I had 2 select's with the same ID lah lah)\nEvil!\n. Mike - yeah, not what I was looking for but thanks.  I started making use of Magic Lamp, and despite all the tests running on every developer box etc.. for some reason, on the jenkins centos box, all the tests that use magic lamp now fail.  And, since there is so little debugging/bootstrapping/I don't even know what I am looking for (hah) output, I can't seem to track down why this is the case.\n. I'll get more info pulled together today and post it up (sorry initial comment was sparse on that).\nIt is interesting, looking at the junit.rb, that somehow I ended up with testsuites name=\"jasmine\" at all (since that doesn't appear possible in the above code heh)\n. No.  I haven't been able to reproduce it.  The fact that it ever happened (since the .rb code doesn't seem to even allow for the possibility) is a head scratcher.  I'll close this and when I next see it, come back hah.\n. Yes hah.  Now of course I can't seem to change my version of jasmine, but I'm reading the docs\napparently this isn't it:\n# Note: If no version is specified, the latest is assumed.\n    #\n    # Available: jasmine[1.3.1], mocha[1.10.0, 1.17.1] qunit[1.12.0, 1.14.0]\n    suite.use_framework :jasmine, \"1.3.1\"\nChanging that to 2.0.0 didn't work, but leaving it blank worked (use the latest version per the docs).\nThanks:)\n. Hrm.  I'm having mixed results.\nI have a file:\nAjaxSuccessFailureButton_spec.js.jsx in spec/javascripts/components\nIt isn't in the list of tests.\nIf I rename it to just .js (no jsx)\nIt shows up in the list of tests.\nThoughts?\n. Hah yeah.. just for React stuff, especially with multiple components, it just way easier to render them into the DOM/configure their props using the JSX syntax.  The \"pure js\" React syntax is fine for doing really trivial things, but if you want to make a mock component (re: chunk of DOM) to use with a react widget (think \"yield\") it gets to be insane without JSX.\n. Yep, is working perfectly.  I had the default matcher (as you suspected) and just forgot about that entire part of the Docs since it'd been so long since I'd had to get in there.\nThanks for the prompt responses and help -- much appreciated.\nI'll try to update your docs (if you like) with a little subsection on 'setting up to test React' based on these little config tweaks etc.\n. ",
    "Sinetheta": "Thanks @mikepack, I saw that when I re-read and discovered that factories like gem 'teaspoon-jasmine are now separate.\n. Thanks @mikepack, I saw that when I re-read and discovered that factories like gem 'teaspoon-jasmine are now separate.\n. ",
    "bramski": "Our test suite on 0.8.0 seems to hang a lot as well.\n. \n. Hmmm.  I have managed to make this a little bit faster by adding a spec manifest and disabling file matching.  But the load time is still a bit less than desireable.\n. \n. Actually not much better.  What are you guys doing? my CPU is absolutely hammered.\n. It doesn't take me 2 minutes to compile application.js.\n. And yes, that WOULD be nice.  But it is a lot of work to eliminate the work of my terrible javascript predecessors on this application; but I do not feel that this is the fault of the application.js, because it takes 2 minutes even if zero files have changed.\n. And actually... application.js is fairly clean.  It's all the vendor requirements and then it spirals down into separate files.  Don't think thats the problem here.  I'm profiling teaspoon right now to see whats up.\n. Hmmm.  So I have identified the problem.  There's 125 javascript spec files, and ..\n<%= javascript_include_tag *@suite.spec_assets %>\nturns out to be very slow.  Rails (at least 3.2) is not well optimized for running javascript_include_tag on a large number of js and coffee files.  It more or less forces rails to go through and do the entire recompilation each time as it's ending up doing the whole recompilation at each render of _boot.html.erb.  WHY I am uncertain but I'm trying to dig into that.\n. Ahhhhh.  SO here is the problem.  Yes this is a curious difficulty with teaspoon.  You are taking away work from sprockets and I'm not sure why.  It has to do with this method:\ndef asset_tree(sources)\n      sources.collect do |source|\n        asset = @env.find_asset(source)\n        Rails.logger.debug(\"finding asset #{source}\")\n        if asset && asset.respond_to?(:logical_path)\n          asset.to_a.map { |a| asset_url(a) }\n        else\n          source unless source.blank?\n        end\n      end.flatten.compact.uniq\n    end\n. When you find the asset and then expand it, you get back ALL of the files then included by that.  and then you include them separately....\nIf the file is a manifest, would it not be effective to JUST include that file?  In this case I have specified my helper file and attached a manifest as specified in the README.md:\nsuite.use_framework :jasmine, \"1.3.1\"\n    suite.matcher = nil\n    suite.helper = \"spec_helper\"\n. BUT, this is causing teaspoon to expand my manifest and manually call javascript_include_tag for all files there contained and referenced by that.  Some of which intelligently include each other when they are referenced alone which is causing a massive explosion of assets.  Instead it should really just correctly reference the manifest I've specified and not expand my assets.\n. I'm in pure development.\n. Well, now I have a local fork with expansion of assets disabled when the matcher is not present, but that's likely not a good solution for the future.  But it will enable me to work with this for a while.  But I would like to try and get a solution into teaspoon so I can eliminate my fork later.\nThis line is the specific area of difficulty... why is the source file being expanded as such?\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/suite.rb#L59\n. This may be a curious difficulty with the nebulousness of the javascript in this project.  But I'd like to seek some configuration or determination within teaspoon so I can use it on our project.\n. Rails v3.2.21...\nSo in development mode, requesting a manifest file turns into rails including all the necessary files separately.  It doesn't compile one monolothic file until production.  So that's not really necessary in development.  You will get proper exception lines from that.\n. And yes, it's 127 files.\n. Our application doesn't actually compile slowly at all.  I have changed the title of this bug to be correct to what the problem is.\n. And there is a PR to fix it.\n. @Emerson if you disabled asset expansion then you're basically falling back onto how sprockets serves application.js in development or test mode, which is generally to add 491 includes.  You'll have to tell rails to precompile (essentially run the app in production mode) to get around this.\n. in teaspoon_env.rb:\nconfig.suite do |suite|\n    suite.expand_assets = false\n. Can any of the contributors tell me what's going on with tests in this project?\n. Poke.\n. Cool.  Haven't had many cycles to get back to this recently, thanks for picking up the torch.\n. We're trying selenium over here for a bunch of runs to see if that's the problem.  I have heard of occasional issues of PhantomJS hanging.  Most of our rails tests run on chrome, not headless.\n. Yes.  This is for sure PhantomJS causing problems.  We're getting no hangs running selenium.  I've updated the title.  Perhaps some documentation of this issue is all that's appropriate?  I'm uncertain if this will be the case for everyone.\n. :shipit: When will there be a release including this?\n. Our test suite on 0.8.0 seems to hang a lot as well.\n. \n. Hmmm.  I have managed to make this a little bit faster by adding a spec manifest and disabling file matching.  But the load time is still a bit less than desireable.\n. \n. Actually not much better.  What are you guys doing? my CPU is absolutely hammered.\n. It doesn't take me 2 minutes to compile application.js.\n. And yes, that WOULD be nice.  But it is a lot of work to eliminate the work of my terrible javascript predecessors on this application; but I do not feel that this is the fault of the application.js, because it takes 2 minutes even if zero files have changed.\n. And actually... application.js is fairly clean.  It's all the vendor requirements and then it spirals down into separate files.  Don't think thats the problem here.  I'm profiling teaspoon right now to see whats up.\n. Hmmm.  So I have identified the problem.  There's 125 javascript spec files, and ..\n<%= javascript_include_tag *@suite.spec_assets %>\nturns out to be very slow.  Rails (at least 3.2) is not well optimized for running javascript_include_tag on a large number of js and coffee files.  It more or less forces rails to go through and do the entire recompilation each time as it's ending up doing the whole recompilation at each render of _boot.html.erb.  WHY I am uncertain but I'm trying to dig into that.\n. Ahhhhh.  SO here is the problem.  Yes this is a curious difficulty with teaspoon.  You are taking away work from sprockets and I'm not sure why.  It has to do with this method:\ndef asset_tree(sources)\n      sources.collect do |source|\n        asset = @env.find_asset(source)\n        Rails.logger.debug(\"finding asset #{source}\")\n        if asset && asset.respond_to?(:logical_path)\n          asset.to_a.map { |a| asset_url(a) }\n        else\n          source unless source.blank?\n        end\n      end.flatten.compact.uniq\n    end\n. When you find the asset and then expand it, you get back ALL of the files then included by that.  and then you include them separately....\nIf the file is a manifest, would it not be effective to JUST include that file?  In this case I have specified my helper file and attached a manifest as specified in the README.md:\nsuite.use_framework :jasmine, \"1.3.1\"\n    suite.matcher = nil\n    suite.helper = \"spec_helper\"\n. BUT, this is causing teaspoon to expand my manifest and manually call javascript_include_tag for all files there contained and referenced by that.  Some of which intelligently include each other when they are referenced alone which is causing a massive explosion of assets.  Instead it should really just correctly reference the manifest I've specified and not expand my assets.\n. I'm in pure development.\n. Well, now I have a local fork with expansion of assets disabled when the matcher is not present, but that's likely not a good solution for the future.  But it will enable me to work with this for a while.  But I would like to try and get a solution into teaspoon so I can eliminate my fork later.\nThis line is the specific area of difficulty... why is the source file being expanded as such?\nhttps://github.com/modeset/teaspoon/blob/master/lib/teaspoon/suite.rb#L59\n. This may be a curious difficulty with the nebulousness of the javascript in this project.  But I'd like to seek some configuration or determination within teaspoon so I can use it on our project.\n. Rails v3.2.21...\nSo in development mode, requesting a manifest file turns into rails including all the necessary files separately.  It doesn't compile one monolothic file until production.  So that's not really necessary in development.  You will get proper exception lines from that.\n. And yes, it's 127 files.\n. Our application doesn't actually compile slowly at all.  I have changed the title of this bug to be correct to what the problem is.\n. And there is a PR to fix it.\n. @Emerson if you disabled asset expansion then you're basically falling back onto how sprockets serves application.js in development or test mode, which is generally to add 491 includes.  You'll have to tell rails to precompile (essentially run the app in production mode) to get around this.\n. in teaspoon_env.rb:\nconfig.suite do |suite|\n    suite.expand_assets = false\n. Can any of the contributors tell me what's going on with tests in this project?\n. Poke.\n. Cool.  Haven't had many cycles to get back to this recently, thanks for picking up the torch.\n. We're trying selenium over here for a bunch of runs to see if that's the problem.  I have heard of occasional issues of PhantomJS hanging.  Most of our rails tests run on chrome, not headless.\n. Yes.  This is for sure PhantomJS causing problems.  We're getting no hangs running selenium.  I've updated the title.  Perhaps some documentation of this issue is all that's appropriate?  I'm uncertain if this will be the case for everyone.\n. :shipit: When will there be a release including this?\n. ",
    "aaronmcadam": ":+1:\n. @jejacks0n Ok cool, thanks for the pointers!\n. :+1:\n. @jejacks0n Ok cool, thanks for the pointers!\n. ",
    "sparksp": ":+1: \n. :+1: \n. ",
    "davestevens": "Thanks for getting back about this, I've just made a pull request #315 which seems to allow requirejs to be used along with the coverage.\n. I've just opened #315 that simply adds an option to RequireJS from within the boot view which adds instrument=1 to all requests made through require.\n. Your last comment on #277 made sense, RequireJS shouldn't need modification deep down in your code. I'm just running though git bisect now to figure out where the coverage seems to be broken.\n. ```\n507ef1226be42fd1df140bf92f4dda1a6bef11e4 is the first bad commit\ncommit 507ef1226be42fd1df140bf92f4dda1a6bef11e4\nAuthor: jejacks0n jejacks0n@gmail.com\nDate:   Wed Aug 20 15:00:57 2014 -0600\nforces update of instanbul -- might cause problems, may need to do a version check.\n\n:040000 040000 28c319f39ba616ae9516e5360028f67b790b4ae4 ba3bfdf81bb467ee6dba976b200014716c50f197 M      lib\n:040000 040000 d6c58a40cd347005edcd96ec073b45df40dce0e2 7e5d4391464ecf3c3131edf4ef30f1c06bf46bd2 M      spec\n```\nAre the docs right regarding coverage? I've got\nruby\nTeaspoon.configure do |config|\n  ...\n  config.coverage do |coverage|\n    coverage.reports = ['text', 'html', 'cobertura']\n  end\n  ...\nend\nin the Teaspoon env file.\n. Okay, I was on 0.1.44, just upgraded to 0.3.6.\nI hacky way of getting the version is:\n$(which istanbul) help 2>&1 | grep \"version\" | cut -d \\: -f 2\n. Awesome, that works now.\nIt includes all of the spec files too, but all is better than nothing I guess.\nI'll have a look through the docs and update anything that needs doing.\nNo worries about the help, to be honest I can't believe I didn't think of this when I was looking before. It doesn't seem to matter if you use it or not, all of us who do didn't know how to get it working either!\nPS: good point about windows!\n. Thats probably the nicest way around it. As an example SimpleCov has an add_filter method that will not include any files based on the string defined: https://github.com/colszowka/simplecov#defining-custom-filters\n. I was just looking into adding an ignored_files option for the coverage config and realised that there is already a method of doing this.\nsuite.config.no_coverage << \"/spec\" works for what I want.\n. I did notice that I didn't have access to the suite in the instrumentation file.\nDoes this mean that all files will be instrumented but then the reports are filtered out as apposed to not instrumenting the files that are not not required, which should be quicker?\nI'll have another look at this over the week. What would you suggest? Putting an ignored_files option on the @@coverage_configs variable? That way its  global and doesn't depend on any suite.\n. I was unsure about where it would go in the coverage specific configurations.\nIf it goes within the Coverage class then its linked to a suite, which is unknown from within Instrumentation. Where do you think it should go? If it put it in Coverage and then look up the configuration assuming default as the suite name?\n. @jejacks0n thats fine with me. I'll make changes based on the way the matcher works and the other feedback.\n. Thats fine, and it does make sense to have this option on the coverage configuration.\nThis is where I had originally put the option, but I ran into the issue of being unaware of which suite was currently being run when Teaspoon:: Instrumentation.add? was executed. What is your idea for this?\n. Thanks for getting back about this, I've just made a pull request #315 which seems to allow requirejs to be used along with the coverage.\n. I've just opened #315 that simply adds an option to RequireJS from within the boot view which adds instrument=1 to all requests made through require.\n. Your last comment on #277 made sense, RequireJS shouldn't need modification deep down in your code. I'm just running though git bisect now to figure out where the coverage seems to be broken.\n. ```\n507ef1226be42fd1df140bf92f4dda1a6bef11e4 is the first bad commit\ncommit 507ef1226be42fd1df140bf92f4dda1a6bef11e4\nAuthor: jejacks0n jejacks0n@gmail.com\nDate:   Wed Aug 20 15:00:57 2014 -0600\nforces update of instanbul -- might cause problems, may need to do a version check.\n\n:040000 040000 28c319f39ba616ae9516e5360028f67b790b4ae4 ba3bfdf81bb467ee6dba976b200014716c50f197 M      lib\n:040000 040000 d6c58a40cd347005edcd96ec073b45df40dce0e2 7e5d4391464ecf3c3131edf4ef30f1c06bf46bd2 M      spec\n```\nAre the docs right regarding coverage? I've got\nruby\nTeaspoon.configure do |config|\n  ...\n  config.coverage do |coverage|\n    coverage.reports = ['text', 'html', 'cobertura']\n  end\n  ...\nend\nin the Teaspoon env file.\n. Okay, I was on 0.1.44, just upgraded to 0.3.6.\nI hacky way of getting the version is:\n$(which istanbul) help 2>&1 | grep \"version\" | cut -d \\: -f 2\n. Awesome, that works now.\nIt includes all of the spec files too, but all is better than nothing I guess.\nI'll have a look through the docs and update anything that needs doing.\nNo worries about the help, to be honest I can't believe I didn't think of this when I was looking before. It doesn't seem to matter if you use it or not, all of us who do didn't know how to get it working either!\nPS: good point about windows!\n. Thats probably the nicest way around it. As an example SimpleCov has an add_filter method that will not include any files based on the string defined: https://github.com/colszowka/simplecov#defining-custom-filters\n. I was just looking into adding an ignored_files option for the coverage config and realised that there is already a method of doing this.\nsuite.config.no_coverage << \"/spec\" works for what I want.\n. I did notice that I didn't have access to the suite in the instrumentation file.\nDoes this mean that all files will be instrumented but then the reports are filtered out as apposed to not instrumenting the files that are not not required, which should be quicker?\nI'll have another look at this over the week. What would you suggest? Putting an ignored_files option on the @@coverage_configs variable? That way its  global and doesn't depend on any suite.\n. I was unsure about where it would go in the coverage specific configurations.\nIf it goes within the Coverage class then its linked to a suite, which is unknown from within Instrumentation. Where do you think it should go? If it put it in Coverage and then look up the configuration assuming default as the suite name?\n. @jejacks0n thats fine with me. I'll make changes based on the way the matcher works and the other feedback.\n. Thats fine, and it does make sense to have this option on the coverage configuration.\nThis is where I had originally put the option, but I ran into the issue of being unaware of which suite was currently being run when Teaspoon:: Instrumentation.add? was executed. What is your idea for this?\n. ",
    "brewster1134": "sorry i had a typo in my example... i meant ",
    "eliotc1986": "@jejacks0n I'm having trouble including a fixture-specific stylesheet.\nI have a file in spec/javascripts/stylesheets where I define the path to the stylesheet\nhow do you include a path to that fixture file in the xxx_spec.js file?\n. @jejacks0n I'm having trouble including a fixture-specific stylesheet.\nI have a file in spec/javascripts/stylesheets where I define the path to the stylesheet\nhow do you include a path to that fixture file in the xxx_spec.js file?\n. ",
    "cwick": "no, equal is defined. Teaspoon is printing the value of the third argument to equal, which, in this example is undefined. Pass in a message as the third argument and you'll see that instead.\n. Nice! Unfortunately, it doesn't work when the \"Full Report\" button is pressed. See this line in base/reporters/html.coffee. It doesn't create a FailureView if build-full-report is true.\nIf it's not using FailureView, there must be some other view that's rendering just the message and stack trace (while omitting expected and actual) but I haven't found it yet. Any ideas?\n. Ah, yes, that looks promising. I should be able to make some improvements to this next week.\n. no, equal is defined. Teaspoon is printing the value of the third argument to equal, which, in this example is undefined. Pass in a message as the third argument and you'll see that instead.\n. Nice! Unfortunately, it doesn't work when the \"Full Report\" button is pressed. See this line in base/reporters/html.coffee. It doesn't create a FailureView if build-full-report is true.\nIf it's not using FailureView, there must be some other view that's rendering just the message and stack trace (while omitting expected and actual) but I haven't found it yet. Any ideas?\n. Ah, yes, that looks promising. I should be able to make some improvements to this next week.\n. ",
    "eugene-ku": "use boot partials:\nbash\ntest/javascripts\n\u251c\u2500\u2500 fixtures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _body.html.erb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 _boot.html.erb\n\u251c\u2500\u2500 support\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ember-qunit.js\n\u2514\u2500\u2500 test_helper.coffee\n``` ruby\nteaspoon_env.rb\nsuite.boot_partial = \"/boot\"\n```\ncopy these files manually or via '--partials' flag during install from $(dirname $(gem which teaspoon))/../app/views/teaspoon/suite/\n. @gabrieltomescu  see\nhttps://github.com/modeset/teaspoon/issues/228#issuecomment-46753624\n. 1) all the scripts are located in application.js.coffee and are loaded from <%= javascript_include_tag *@suite.spec_assets %>, so order is preserved\n2) everything is fine outside teaspoon environment, so framework can be involved but in a very subtle way.\ncan you give some tips for debugging? \n. There are no errors in the console and there is a global error when running tests\n. use boot partials:\nbash\ntest/javascripts\n\u251c\u2500\u2500 fixtures\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 _body.html.erb\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 _boot.html.erb\n\u251c\u2500\u2500 support\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ember-qunit.js\n\u2514\u2500\u2500 test_helper.coffee\n``` ruby\nteaspoon_env.rb\nsuite.boot_partial = \"/boot\"\n```\ncopy these files manually or via '--partials' flag during install from $(dirname $(gem which teaspoon))/../app/views/teaspoon/suite/\n. @gabrieltomescu  see\nhttps://github.com/modeset/teaspoon/issues/228#issuecomment-46753624\n. 1) all the scripts are located in application.js.coffee and are loaded from <%= javascript_include_tag *@suite.spec_assets %>, so order is preserved\n2) everything is fine outside teaspoon environment, so framework can be involved but in a very subtle way.\ncan you give some tips for debugging? \n. There are no errors in the console and there is a global error when running tests\n. ",
    "tarebyte": "The solution was that you had to whitelist the url and the port.\nThe overarching problem I didn't solve it though. I'm still having the issue, but it seems unrelated to teaspoon atm. I'm going to try and come up with a solution that doesn't need selenium. Or making http requests.\nI'd really like it if teaspoon could run the tests using phantom and then run the tests against something like slimerjs.\nIs that a possibility?\n. I'm working on a PR right now, it's going to take a little bit of weekend work to get it together. You may see something monday.\n. The solution was that you had to whitelist the url and the port.\nThe overarching problem I didn't solve it though. I'm still having the issue, but it seems unrelated to teaspoon atm. I'm going to try and come up with a solution that doesn't need selenium. Or making http requests.\nI'd really like it if teaspoon could run the tests using phantom and then run the tests against something like slimerjs.\nIs that a possibility?\n. I'm working on a PR right now, it's going to take a little bit of weekend work to get it together. You may see something monday.\n. ",
    "hakunin": "Hey @tarebyte, I am trying to make Teaspoon work with CircleCI and getting this, can you share some knowledge?\nhttps://github.com/modeset/teaspoon/issues/427\n. Thanks for the speedy reply. RAILS_ENV=test rake teaspoon produces regular console output. I'll ask CircleCI guys since that might be issue created by them and report back.\nThe readme did say though that it runs smoothly with CircleCI, hopefully we'll be able to make it so.\n. So I haven't heard back from CircleCI, but I stubled upon a precompile hint in their guides and now I am a little bit closer:\nmy circle.yml:\ntest:\n  post:\n    - bundle exec rake assets:precompile\n    - bundle exec teaspoon\nAh, I thought I was getting a different error, but its the same one.\n. I found the problem!!\nI had set the domain attributes in test environments, which overrided where the server was looking for the assets, making it impossible to find them, because CircleCI doesn't run the server on localhost:3000.\nSo in theory, if you don't have that set in your project, it should run with CircleCI just fine.\n. If Teaspoon is only unit testing framework, then I understand you don't want to go that direction.\nWhat I don't understand is why I should add another framework/testing setup just so I can do both unit and end-to-end tests of the same codebase and furthermore write them in a different language - Ruby instead of JavaScript.\nWhat makes you think Teaspoon should be unit only? Maybe there is something I am missing.\n. Hey @tarebyte, I am trying to make Teaspoon work with CircleCI and getting this, can you share some knowledge?\nhttps://github.com/modeset/teaspoon/issues/427\n. Thanks for the speedy reply. RAILS_ENV=test rake teaspoon produces regular console output. I'll ask CircleCI guys since that might be issue created by them and report back.\nThe readme did say though that it runs smoothly with CircleCI, hopefully we'll be able to make it so.\n. So I haven't heard back from CircleCI, but I stubled upon a precompile hint in their guides and now I am a little bit closer:\nmy circle.yml:\ntest:\n  post:\n    - bundle exec rake assets:precompile\n    - bundle exec teaspoon\nAh, I thought I was getting a different error, but its the same one.\n. I found the problem!!\nI had set the domain attributes in test environments, which overrided where the server was looking for the assets, making it impossible to find them, because CircleCI doesn't run the server on localhost:3000.\nSo in theory, if you don't have that set in your project, it should run with CircleCI just fine.\n. If Teaspoon is only unit testing framework, then I understand you don't want to go that direction.\nWhat I don't understand is why I should add another framework/testing setup just so I can do both unit and end-to-end tests of the same codebase and furthermore write them in a different language - Ruby instead of JavaScript.\nWhat makes you think Teaspoon should be unit only? Maybe there is something I am missing.\n. ",
    "amitamb": "I would love to see this feature get added to teaspoon. There seems to be slimerjs_driver_spec.rb but JS specs are missing. Are you talking about that?\n. I would love to see this feature get added to teaspoon. There seems to be slimerjs_driver_spec.rb but JS specs are missing. Are you talking about that?\n. ",
    "chancancode": "@cwick would it be this? :smile: https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/base/reporters/html.coffee#L75\nI also noticed that the console formatters need to be updated to show this as well... feel free to steal this and improve it :grin:\n. @jejacks0n Do you have any comments on the approach? :) Are you okay with adding expected and actual as global (but optional) properties to the error object?\n. @jejacks0n actually I'd say that qunit is providing more information here :)\nExamples of how it works in qunit:\n``` javascript\nequal(1, 2, \"I expect one and two to be equal!\") // => {actual: 1, expected: 2, message: \"I expect one and two to be equal!\", ...}\nequal(1, 2\") // => {actual: 1, expected: 2, message: undefined, ...}\nok(false) // => {message: undefined, ...}\nok(false, \"this fails\") // => {message: \"this fails\", ...}\n```\nIt is trivial to just construct a flat message from these in the qunit adapter. However, we would loose out on the opportunity to format it nicely.\nThoughts?\n. If you have used qunit for a while, the \"nice format\" is more than \"nice to have\" :) I'd even suggest extracting that information from other frameworks even, you guys are missing out ;)\n. @jejacks0n don't worry, I'm not trying to \"convert\" you to start using qunit, or argue that it is \"better\" :smile:\nMy last comment was strictly referring to the fact that it provides more information for the formatter to work with, and that I would suggest extracting those same information (i.e. actual, expected) out of other frameworks where possible :)\nThe reason why it is a good idea to provide those information for the formatters to work with (instead of flattening those into a string) is to possibility to format those nicely.\nIn the case of the HTML formatter, it made it possible to display display the content of actual/expected in fixed width font and to call \"inspect\" on them (the current implementation JSONifies it) for example.\nThis is helpful when, for example, actual is \"omg \" and expected is \"omg\".\n(To be fair, the \"inspect\" part is achievable even if we do flatten it. However, the fixed-width font part wouldn't be possible.)\nTo help you understand what the default qunit reporter was able to do with those extra information, here is a screenshot from the original issue:\n\n. Theoretically, the adapters could also just concat the stack trace into the message and just return a flat string as well :) This would work fine for the current formatters (the HTML one at least), but it would restrict the kind of formatters you will be able to write.\n. (To be clear, this doesn't change how other framework adapters work currently \u2013 if the expected and actual fields are absent, the formatter simply ignores it and renders the same output.)\n. Sounds reasonable :) Just want to check if you're okay with the overall feature before we proceed any further. Thanks for spending time reviewing this :heart:!\n@cwick, if you have time to follow up on this, please feel free to take it from here :grin: :heart: Otherwise I'll add this to my queue and get to it in the next (few) week(s). :see_no_evil: \n. (By the way, JSON.stringify is probably a super naive implementation of inspect that only works for basic primitive types)\n. What Jeremy said. And the console output is missing too iirc. Feel free to steal this code and resubmit an improved version :grin:\nFor the record we are still using teaspoon with this patch at work, and it's still working great for our purposes :+1: \n. :heart_eyes: @mikepack Thank you for doing this!\n. @cwick would it be this? :smile: https://github.com/modeset/teaspoon/blob/master/app/assets/javascripts/teaspoon/base/reporters/html.coffee#L75\nI also noticed that the console formatters need to be updated to show this as well... feel free to steal this and improve it :grin:\n. @jejacks0n Do you have any comments on the approach? :) Are you okay with adding expected and actual as global (but optional) properties to the error object?\n. @jejacks0n actually I'd say that qunit is providing more information here :)\nExamples of how it works in qunit:\n``` javascript\nequal(1, 2, \"I expect one and two to be equal!\") // => {actual: 1, expected: 2, message: \"I expect one and two to be equal!\", ...}\nequal(1, 2\") // => {actual: 1, expected: 2, message: undefined, ...}\nok(false) // => {message: undefined, ...}\nok(false, \"this fails\") // => {message: \"this fails\", ...}\n```\nIt is trivial to just construct a flat message from these in the qunit adapter. However, we would loose out on the opportunity to format it nicely.\nThoughts?\n. If you have used qunit for a while, the \"nice format\" is more than \"nice to have\" :) I'd even suggest extracting that information from other frameworks even, you guys are missing out ;)\n. @jejacks0n don't worry, I'm not trying to \"convert\" you to start using qunit, or argue that it is \"better\" :smile:\nMy last comment was strictly referring to the fact that it provides more information for the formatter to work with, and that I would suggest extracting those same information (i.e. actual, expected) out of other frameworks where possible :)\nThe reason why it is a good idea to provide those information for the formatters to work with (instead of flattening those into a string) is to possibility to format those nicely.\nIn the case of the HTML formatter, it made it possible to display display the content of actual/expected in fixed width font and to call \"inspect\" on them (the current implementation JSONifies it) for example.\nThis is helpful when, for example, actual is \"omg \" and expected is \"omg\".\n(To be fair, the \"inspect\" part is achievable even if we do flatten it. However, the fixed-width font part wouldn't be possible.)\nTo help you understand what the default qunit reporter was able to do with those extra information, here is a screenshot from the original issue:\n\n. Theoretically, the adapters could also just concat the stack trace into the message and just return a flat string as well :) This would work fine for the current formatters (the HTML one at least), but it would restrict the kind of formatters you will be able to write.\n. (To be clear, this doesn't change how other framework adapters work currently \u2013 if the expected and actual fields are absent, the formatter simply ignores it and renders the same output.)\n. Sounds reasonable :) Just want to check if you're okay with the overall feature before we proceed any further. Thanks for spending time reviewing this :heart:!\n@cwick, if you have time to follow up on this, please feel free to take it from here :grin: :heart: Otherwise I'll add this to my queue and get to it in the next (few) week(s). :see_no_evil: \n. (By the way, JSON.stringify is probably a super naive implementation of inspect that only works for basic primitive types)\n. What Jeremy said. And the console output is missing too iirc. Feel free to steal this code and resubmit an improved version :grin:\nFor the record we are still using teaspoon with this patch at work, and it's still working great for our purposes :+1: \n. :heart_eyes: @mikepack Thank you for doing this!\n. ",
    "briandunn": "What is the status here? How can I help?\n. What is the status here? How can I help?\n. ",
    "CiaranMcCann": "Is this going to get merged? \n. Is this going to get merged? \n. ",
    "alan-andrade": "This should get merged asap. It's discouraging to read that jasmine 2 is supported when its not.\n. This should get merged asap. It's discouraging to read that jasmine 2 is supported when its not.\n. ",
    "halo": "+1\n. +1\n. ",
    "ordiep": ":+1: I just sat here wondering what was wrong with 2.0.0 \n. :+1: I just sat here wondering what was wrong with 2.0.0 \n. ",
    "zwarburg": "I could really use some help on this. \n. @jejacks0n  I think part of the problem may be that the app doesn't directly use qunit. It uses qunit-rails. I am not just asking for help after 5 minutes of trying. I've been at this for days. Any help would be so appreciated. \n. The current error message I am getting is (and this is just a small snippet of it... \n``` bash\n~$ rake teaspoon\n(in /Users/zwarburg/src/production)\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:61414/teaspoon/default\nDEBUG: -------------------------------\nDEBUG: Ember      : 1.7.0-beta.1+canary.d047abcf\nDEBUG: Ember Data : 1.0.0-beta.9+canary.e9cf0016\nDEBUG: Handlebars : 1.3.0\nDEBUG: jQuery     : 1.10.2\nDEBUG: -------------------------------\ngenerated -> route:application [object Object]\ngenerated -> route:index [object Object]\ngenerated -> controller:application [object Object]\nCould not find \"application\" template or view. Nothing will be rendered [object Object]\ngenerated -> controller:index [object Object]\nCould not find \"index\" template or view. Nothing will be rendered [object Object]\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nFailures:\n1)  global failure (1, 0, 1)\n     Failure/Error: SyntaxError: Parse error\n2)  global failure (1, 0, 1)\n     Failure/Error: ReferenceError: Can't find variable: moduleForComponent\n3)  global failure (1, 0, 1)\n     Failure/Error: ReferenceError: Can't find variable: moduleForComponent\n```\nThe moduleForComponent call is being made from the first test in test/javascripts/ember_test/components/auto-complete.js.coffee\njavascript\nmoduleForComponent 'auto-complete', 'component:auto-complete',\n  setup: ->\n    window.dollarSign = window.$\n    window.$ = (object) -> object\n  teardown: ->\n    window.$ = window.dollarSign\n    App.reset()\nmoduleForComponent is defined in the ember-qunit.js file at test/javascripts/ember-qunit.js. I explicitly included this file in the config so I don't understand why it isn't being found. \nAs a side note all of these test pass when just using qunit by going to localhost:3000/qunit \n. Anybody willing to help?\n. I could really use some help on this. \n. @jejacks0n  I think part of the problem may be that the app doesn't directly use qunit. It uses qunit-rails. I am not just asking for help after 5 minutes of trying. I've been at this for days. Any help would be so appreciated. \n. The current error message I am getting is (and this is just a small snippet of it... \n``` bash\n~$ rake teaspoon\n(in /Users/zwarburg/src/production)\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:61414/teaspoon/default\nDEBUG: -------------------------------\nDEBUG: Ember      : 1.7.0-beta.1+canary.d047abcf\nDEBUG: Ember Data : 1.0.0-beta.9+canary.e9cf0016\nDEBUG: Handlebars : 1.3.0\nDEBUG: jQuery     : 1.10.2\nDEBUG: -------------------------------\ngenerated -> route:application [object Object]\ngenerated -> route:index [object Object]\ngenerated -> controller:application [object Object]\nCould not find \"application\" template or view. Nothing will be rendered [object Object]\ngenerated -> controller:index [object Object]\nCould not find \"index\" template or view. Nothing will be rendered [object Object]\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nFailures:\n1)  global failure (1, 0, 1)\n     Failure/Error: SyntaxError: Parse error\n2)  global failure (1, 0, 1)\n     Failure/Error: ReferenceError: Can't find variable: moduleForComponent\n3)  global failure (1, 0, 1)\n     Failure/Error: ReferenceError: Can't find variable: moduleForComponent\n```\nThe moduleForComponent call is being made from the first test in test/javascripts/ember_test/components/auto-complete.js.coffee\njavascript\nmoduleForComponent 'auto-complete', 'component:auto-complete',\n  setup: ->\n    window.dollarSign = window.$\n    window.$ = (object) -> object\n  teardown: ->\n    window.$ = window.dollarSign\n    App.reset()\nmoduleForComponent is defined in the ember-qunit.js file at test/javascripts/ember-qunit.js. I explicitly included this file in the config so I don't understand why it isn't being found. \nAs a side note all of these test pass when just using qunit by going to localhost:3000/qunit \n. Anybody willing to help?\n. ",
    "brandonjmckay": "@zwarburg Did you get any further with this? I'm just getting my toes wet as well with Ember/Teaspoon/Qunit.\n. @zwarburg Did you get any further with this? I'm just getting my toes wet as well with Ember/Teaspoon/Qunit.\n. ",
    "cameronlinden": "@zwarburg did you ever figure this out? I also had a very similar error.\n. @zwarburg did you ever figure this out? I also had a very similar error.\n. ",
    "mgharbik": "I had the same error but now it seemed like it works well, in spec_helper.js files I removed all the lines was generated automatically and kept only my setup. Hope this helps!\n. I had the same error but now it seemed like it works well, in spec_helper.js files I removed all the lines was generated automatically and kept only my setup. Hope this helps!\n. ",
    "SteveAquino": "I'd also like this option.  I'm able to hack around it, but it'd feel much nicer to know this is officially supported.  In my teaspoon_env.rb:\n```\nHack to tell Teaspoon to use a local\ninstal of Istanbul (for CI support)\nclass Teaspoon::Instrumentation\n  def self.executable\n    \"./node_modules/istanbul/lib/cli.js\"\n  end\nend\n``\n. I'd also like this option.  I'm able to hack around it, but it'd feel much nicer to know this is officially supported.  In myteaspoon_env.rb`:\n```\nHack to tell Teaspoon to use a local\ninstal of Istanbul (for CI support)\nclass Teaspoon::Instrumentation\n  def self.executable\n    \"./node_modules/istanbul/lib/cli.js\"\n  end\nend\n```\n. ",
    "derekpeterson": "I was going to work on adding support for this, and found this PR while looking for discussion, so I'm also curious about this feature's status.\nI would like to have this option to avoid relying on global installs. Another hack is to prepend node_modules/.bin to the PATH, but that's not really a great solution. Official support would be better.\n(Anyway, thanks for a great tool!)\n. Yeah, I had the same error when trying to upgrade. I'm using the phantomjs gem and resolved the issues related to changes listed in the release notes.\n. :+1: Just confirming that this resolved the issue for me. Thanks for the quick fix!\n. I was going to work on adding support for this, and found this PR while looking for discussion, so I'm also curious about this feature's status.\nI would like to have this option to avoid relying on global installs. Another hack is to prepend node_modules/.bin to the PATH, but that's not really a great solution. Official support would be better.\n(Anyway, thanks for a great tool!)\n. Yeah, I had the same error when trying to upgrade. I'm using the phantomjs gem and resolved the issues related to changes listed in the release notes.\n. :+1: Just confirming that this resolved the issue for me. Thanks for the quick fix!\n. ",
    "markburns": "I have no idea how easy it is, but if you mean that you were unaware of mapping, then you may be interested in looking at https://github.com/markbates/coffee-rails-source-maps I've found it an indispensable tool whilst debugging in the browser.\nI'll have to defer to your experience on the matter about reliable stacktraces, that being said, I still think there's a benefit to having the source code around them (and file links) for when the stacktrace is correct. But perhaps I've misunderstood your point here.\nI've not looked into source code mapping or any of the other things at all yet, but will take a look into your suggestion.\n. @jejacks0n - not sure how github mentions work, so apologies if you've already seen my mention at https://github.com/markburns/teaspoon/pull/1 - anyway, I've proved the feasibility of extracting source code from an exception. I've not done a pull request here, as it's not worthy yet and more of an exploratory proof of concept.\nI've got a couple of questions over there, that I wouldn't mind you taking a look at.\n. I have no idea how easy it is, but if you mean that you were unaware of mapping, then you may be interested in looking at https://github.com/markbates/coffee-rails-source-maps I've found it an indispensable tool whilst debugging in the browser.\nI'll have to defer to your experience on the matter about reliable stacktraces, that being said, I still think there's a benefit to having the source code around them (and file links) for when the stacktrace is correct. But perhaps I've misunderstood your point here.\nI've not looked into source code mapping or any of the other things at all yet, but will take a look into your suggestion.\n. @jejacks0n - not sure how github mentions work, so apologies if you've already seen my mention at https://github.com/markburns/teaspoon/pull/1 - anyway, I've proved the feasibility of extracting source code from an exception. I've not done a pull request here, as it's not worthy yet and more of an exploratory proof of concept.\nI've got a couple of questions over there, that I wouldn't mind you taking a look at.\n. ",
    "aharpervc": "That also works, but I'm asking how to record this in config, so it's not up to the system or person who runs the command to do it, but defined somewhere explicitly.\n. I don't want to run them in two different environments. I only want to run teaspoon in the test rails environment. That teaspoon runs tests in development is what I'm trying to work around. In the browser it's no big deal, but on the command line where teaspoon boots the app itself, it always needs to be test.\nSeparately, the test environment is nearly always faster than development due to asset compilation.\n. Setting the environment variable in teaspoon_env.rb seems to work, thanks. For the tests I'm writing, asset compilation before running the tests is pretty essential, so making sure teaspoon will run rails in test consistently is important.\n. That also works, but I'm asking how to record this in config, so it's not up to the system or person who runs the command to do it, but defined somewhere explicitly.\n. I don't want to run them in two different environments. I only want to run teaspoon in the test rails environment. That teaspoon runs tests in development is what I'm trying to work around. In the browser it's no big deal, but on the command line where teaspoon boots the app itself, it always needs to be test.\nSeparately, the test environment is nearly always faster than development due to asset compilation.\n. Setting the environment variable in teaspoon_env.rb seems to work, thanks. For the tests I'm writing, asset compilation before running the tests is pretty essential, so making sure teaspoon will run rails in test consistently is important.\n. ",
    "sc0ttman": "Yea, I need this as well since rack-mini-profiler doesn't work nicely with my javascript tests. Also I assumed running rake teaspoon would already be run in the test env.\n. Yea, I need this as well since rack-mini-profiler doesn't work nicely with my javascript tests. Also I assumed running rake teaspoon would already be run in the test env.\n. ",
    "anshul": "Corrected the tests.  The other failure is due to istanbul deprecation.\n. Corrected the tests.  The other failure is due to istanbul deprecation.\n. ",
    "taboularasa": "@jejacks0n Do you think the server should be mocked even in integration / feature specs?\n. @jayzes  thanks for the feedback. Just curious, would you still consider Capybara the preferable tool for driving the UI in the case of an Ember / Rails app? I've always found Capybara's handling of async timing issues a bit of a pain and I was under the impression that Ember's test helpers have a better handle on that situation \n. @jejacks0n sure thing. Do you care that I made Content-Type default to application/json? Also should I add test coverage to spec/features/hooks_spec.rb or elsewhere?\n. I'll try to wrap this up sometime today. \n. @jejacks0n this should be good to merge now. Let me know if theres anything else I need\n. :+1: thanks for teaspoon!\n. @jejacks0n Do you think the server should be mocked even in integration / feature specs?\n. @jayzes  thanks for the feedback. Just curious, would you still consider Capybara the preferable tool for driving the UI in the case of an Ember / Rails app? I've always found Capybara's handling of async timing issues a bit of a pain and I was under the impression that Ember's test helpers have a better handle on that situation \n. @jejacks0n sure thing. Do you care that I made Content-Type default to application/json? Also should I add test coverage to spec/features/hooks_spec.rb or elsewhere?\n. I'll try to wrap this up sometime today. \n. @jejacks0n this should be good to merge now. Let me know if theres anything else I need\n. :+1: thanks for teaspoon!\n. ",
    "crismali": "The environment override: https://github.com/modeset/teaspoon/blob/7a38bdd37df5c226dee56a472c80f4fa1890d4c8/lib/teaspoon/environment.rb#L21\n. I had a similar issue where when my teaspoon_env.rb was in the dummy app the rake task would fail and when it was in the engine root the in browser specs would fail. I ended up setting up dotenv in my dummy app and set TEASPOON_ENV=/absolute/path/to/teaspoon_env.rb. That solved the issue for me.\n. The environment override: https://github.com/modeset/teaspoon/blob/7a38bdd37df5c226dee56a472c80f4fa1890d4c8/lib/teaspoon/environment.rb#L21\n. I had a similar issue where when my teaspoon_env.rb was in the dummy app the rake task would fail and when it was in the engine root the in browser specs would fail. I ended up setting up dotenv in my dummy app and set TEASPOON_ENV=/absolute/path/to/teaspoon_env.rb. That solved the issue for me.\n. ",
    "tpbowden": "Just spent an hour or so trying to figure it out. The only real difference I can see so far is that when running rake,  Rails.application.assets is an instance of Sprockets::Index and when running rake teaspoon it is an instance of Sprockets::Environment  which is the class in which the module Teaspoon::SprocketsInstrumentation is injected into. I'll probably try see if that is the problem some time tomorrow.\n. Ok I can confirm that adding Sprockets::Index.send(:include, Teaspoon::SprocketsInstrumentation) to \nengine.rb fixes the problem, going to see if there's a cleaner solution now.\nI've created a pull request here #262 \n. Just spent an hour or so trying to figure it out. The only real difference I can see so far is that when running rake,  Rails.application.assets is an instance of Sprockets::Index and when running rake teaspoon it is an instance of Sprockets::Environment  which is the class in which the module Teaspoon::SprocketsInstrumentation is injected into. I'll probably try see if that is the problem some time tomorrow.\n. Ok I can confirm that adding Sprockets::Index.send(:include, Teaspoon::SprocketsInstrumentation) to \nengine.rb fixes the problem, going to see if there's a cleaner solution now.\nI've created a pull request here #262 \n. ",
    "RSO": "Thanks!\n. Thanks!\n. ",
    "felippenardi": "Thank you @jejacks0n !\n. Thank you @jejacks0n !\n. ",
    "stevenmichaelthomas": "@jejacks0n That's great news! I'll finish things off tomorrow morning. \n. I added the version number to the filename, updated the readme, and updated comments in mocha's spec_helpers (js and coffee). Didn't see any teaspoon_env stuff that needed updating in this case. \nThanks again. \n. @jejacks0n good to merge?\n. I'm a big fan of squashing things down as much as possible :) will take care of this shortly. Thanks again!\nOn Fri, Sep 19, 2014 at 9:52 PM, Jeremy Jackson notifications@github.com\nwrote:\n\nYes, almost. =)\nWill you do an interactive rebase to get it into one commit? It's easier to track what changed in regards to that if it's in one commit.\ngit rebase -i HEAD~3\npick the first one, change the other two commits from pick to s (to squash)\nthen adjust the commit message in the second step\ngit push -f origin [branch_name]\nAlso, if you've never done one, it's worth learning. =)\nReply to this email directly or view it on GitHub:\nhttps://github.com/modeset/teaspoon/pull/266#issuecomment-56253680\n. @jejacks0n That's great news! I'll finish things off tomorrow morning. \n. I added the version number to the filename, updated the readme, and updated comments in mocha's spec_helpers (js and coffee). Didn't see any teaspoon_env stuff that needed updating in this case. \n\nThanks again. \n. @jejacks0n good to merge?\n. I'm a big fan of squashing things down as much as possible :) will take care of this shortly. Thanks again!\nOn Fri, Sep 19, 2014 at 9:52 PM, Jeremy Jackson notifications@github.com\nwrote:\n\nYes, almost. =)\nWill you do an interactive rebase to get it into one commit? It's easier to track what changed in regards to that if it's in one commit.\ngit rebase -i HEAD~3\npick the first one, change the other two commits from pick to s (to squash)\nthen adjust the commit message in the second step\ngit push -f origin [branch_name]\nAlso, if you've never done one, it's worth learning. =)\nReply to this email directly or view it on GitHub:\nhttps://github.com/modeset/teaspoon/pull/266#issuecomment-56253680\n. \n",
    "siva3395": "Deprecation warning we got on usage of 0.7.9 version is \n\nDEPRECATION WARNING! You are probably using the old format of the report command\nThis will stop working soon, see istanbul help report for the new command format\nAssuming you meant: istanbul report --include=/tmp/d20140926-24899-1fyf4e2/coverage.json cobertura\n\n. Deprecation warning on latest version of teaspoon also? on upgrading teaspoon version i had an issue. Can you help me? here it is https://github.com/modeset/teaspoon/issues/267\n. '--include=' also fixed on my 0.7.9 version!!!! thanks @kunalmawade \n. Deprecation warning we got on usage of 0.7.9 version is \n\nDEPRECATION WARNING! You are probably using the old format of the report command\nThis will stop working soon, see istanbul help report for the new command format\nAssuming you meant: istanbul report --include=/tmp/d20140926-24899-1fyf4e2/coverage.json cobertura\n\n. Deprecation warning on latest version of teaspoon also? on upgrading teaspoon version i had an issue. Can you help me? here it is https://github.com/modeset/teaspoon/issues/267\n. '--include=' also fixed on my 0.7.9 version!!!! thanks @kunalmawade \n. ",
    "kunalmawade": "Found the solution. This statement should be this way\nresult = %x{#{@executable} report --include=#{input.shellescape} --dir #{output_path} #{format} 2>&1}\nI tested it and it does not throw deprecation warning after that.\n. Found the solution. This statement should be this way\nresult = %x{#{@executable} report --include=#{input.shellescape} --dir #{output_path} #{format} 2>&1}\nI tested it and it does not throw deprecation warning after that.\n. ",
    "skinofstars": "Ahhhhh!\nOk, so I missed a bit of info in the README. Namely, that the CLI runs in the development environment. That probably wouldn't be an issue, but I have the rack-mini-profiler gem installed, which is injecting some DOM elements which is messing things up. \nI'll be investigating further, but I'm guessing I'll have to take my fixes to that gem rather than here.\nFeel free to close this if you like.\nThanks \n. It's possible to disable rack-mini-profiler by hitting ?pp=disable first with PhantomJS (see ?pp=help for more options). \nThat said, I kinda would expect Teaspoon to use test env by default. It is a test runner after all :)\nIn my case, I just put this in my circle.yml and all was fine\ntest:\n  post:\n    - bundle exec teaspoon:\n        environment:\n          RAILS_ENV: test\n. Ahhhhh!\nOk, so I missed a bit of info in the README. Namely, that the CLI runs in the development environment. That probably wouldn't be an issue, but I have the rack-mini-profiler gem installed, which is injecting some DOM elements which is messing things up. \nI'll be investigating further, but I'm guessing I'll have to take my fixes to that gem rather than here.\nFeel free to close this if you like.\nThanks \n. It's possible to disable rack-mini-profiler by hitting ?pp=disable first with PhantomJS (see ?pp=help for more options). \nThat said, I kinda would expect Teaspoon to use test env by default. It is a test runner after all :)\nIn my case, I just put this in my circle.yml and all was fine\ntest:\n  post:\n    - bundle exec teaspoon:\n        environment:\n          RAILS_ENV: test\n. ",
    "tabolario": "@skinofstars I've found a seemingly much easier way to avoid Teaspoon and rack-mini-profiler clashing:\nruby\nRack::MiniProfiler.config.skip_paths << '/teaspoon'\nThrow that in an initializer and you should be good to go to use Teaspoon in the development environment.\n@jejacks0n Would it be worth putting this in the readme or FAQ?\n. @jejacks0n I'd be happy to submit a PR. Will set a reminder for myself to do that tomorrow!\n. @skinofstars I've found a seemingly much easier way to avoid Teaspoon and rack-mini-profiler clashing:\nruby\nRack::MiniProfiler.config.skip_paths << '/teaspoon'\nThrow that in an initializer and you should be good to go to use Teaspoon in the development environment.\n@jejacks0n Would it be worth putting this in the readme or FAQ?\n. @jejacks0n I'd be happy to submit a PR. Will set a reminder for myself to do that tomorrow!\n. ",
    "nalbion": "It seems that this issue has been fixed in https://github.com/modeset/teaspoon/commit/0c5dd7fbf76cb29ff4616c27ae731cdd6c301bb3, but not yet released.\n. It seems that this issue has been fixed in https://github.com/modeset/teaspoon/commit/0c5dd7fbf76cb29ff4616c27ae731cdd6c301bb3, but not yet released.\n. ",
    "phyllisstein": "Whoops, turned out to be way easier than I'd imagined. Apologies for the superfluous issue!\nIn case anyone else is trying to figure out the same thing, I just commented out suite.use_framework :mocha, and changed my suite.javascripts to point directly to Rails Assets' version, which is in the Asset Pipeline as mocha/mocha. I also had to add ;_mocha_version = '2.0.1' to the top of mocha.js, but that's no big deal. So I was left with what's in this gist, and it seems to work just beautifully.\n. Totally understandable, with the slamming. I'd be happy to fold in the latest version for pulling! It might take me a day or two to find the time and get it all together, but compared to the changes I was imagining making it'll be a breeze.\n. I did something dumb with Git---still not sure what!---while I was trying to update to Mocha 2.1.0, and GitHub started throwing warnings about being unable to merge. I figured I'd just start from scratch later tonight.\n. Sheepishly withdrawn---downgrading Istanbul considerably didn't help, so there must be something going on in my code after all.\n. Withdrawn, it was all ng-annotate's fault.  (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b\n. 100% sprockets-rails' fault. Color me surprised.\n. Whoops, turned out to be way easier than I'd imagined. Apologies for the superfluous issue!\nIn case anyone else is trying to figure out the same thing, I just commented out suite.use_framework :mocha, and changed my suite.javascripts to point directly to Rails Assets' version, which is in the Asset Pipeline as mocha/mocha. I also had to add ;_mocha_version = '2.0.1' to the top of mocha.js, but that's no big deal. So I was left with what's in this gist, and it seems to work just beautifully.\n. Totally understandable, with the slamming. I'd be happy to fold in the latest version for pulling! It might take me a day or two to find the time and get it all together, but compared to the changes I was imagining making it'll be a breeze.\n. I did something dumb with Git---still not sure what!---while I was trying to update to Mocha 2.1.0, and GitHub started throwing warnings about being unable to merge. I figured I'd just start from scratch later tonight.\n. Sheepishly withdrawn---downgrading Istanbul considerably didn't help, so there must be something going on in my code after all.\n. Withdrawn, it was all ng-annotate's fault.  (\u256f\u00b0\u25a1\u00b0\uff09\u256f\ufe35 \u253b\u2501\u253b\n. 100% sprockets-rails' fault. Color me surprised.\n. ",
    "golmansax": "I'm sorry I probably can't explain the reasoning as well as I could have, since I haven't looked at this code for a while now haha.  I think your analysis is pretty on point, here is my best guess to what I was thinking at the time:\n- I forget exactly why, but I believe the requirejs files didn't get the &instrument=1  through Teaspoon::Suite#asset_url.  However, you can around it in requirejs by adding instrument=1 to all files through the config like what @davestevens said\n- So then, all of the files have instrument=1, but the no_coverage files were not filtered out.  I guess this is why I switched the no_coverage check to Teaspoon::Instrumentation (which can filter the requirejs files because requirejs also goes through Sprockets)\nSorry for the code sloppiness - this was meant to be more of exploratory pull than one with production ready code.  Just wanted to get your thoughts on it because I wasn't really considering how this would impact the non-requirejs use cases of teaspoon.\n. I'm sorry I probably can't explain the reasoning as well as I could have, since I haven't looked at this code for a while now haha.  I think your analysis is pretty on point, here is my best guess to what I was thinking at the time:\n- I forget exactly why, but I believe the requirejs files didn't get the &instrument=1  through Teaspoon::Suite#asset_url.  However, you can around it in requirejs by adding instrument=1 to all files through the config like what @davestevens said\n- So then, all of the files have instrument=1, but the no_coverage files were not filtered out.  I guess this is why I switched the no_coverage check to Teaspoon::Instrumentation (which can filter the requirejs files because requirejs also goes through Sprockets)\nSorry for the code sloppiness - this was meant to be more of exploratory pull than one with production ready code.  Just wanted to get your thoughts on it because I wasn't really considering how this would impact the non-requirejs use cases of teaspoon.\n. ",
    "cicloon": "I had this same problem. My specs were properly placed into the engine specs/folder, but the teaspoon_env.rb file was in the dummy app as the wiki page pointed out. Running the specs from the dummy app worked fine, but from the engine it did try to look for the teaspoon_env.rb file in \"engine_root/spec/\". \nMoving the teaspoon_env.rb from the dummy to the engine solved the problem for me.\n. I had this same problem. My specs were properly placed into the engine specs/folder, but the teaspoon_env.rb file was in the dummy app as the wiki page pointed out. Running the specs from the dummy app worked fine, but from the engine it did try to look for the teaspoon_env.rb file in \"engine_root/spec/\". \nMoving the teaspoon_env.rb from the dummy to the engine solved the problem for me.\n. ",
    "jayroh": "Today I ran into this issue and played with a bunch of different things until I got this to work.\nFrom the root of an engine you should be able to run the app:teaspoon rake task, which will fail because it can't find the spec/teaspoon_env.rb or config/environment.rb. Since we are able to hook into those couple of ENV vars though, we can get in front of the app:teaspoon rake task being called with something like this in <engine root>/Rakefile\n``` ruby\ndesc 'Run the javascript specs'\ntask :teaspoon do\n  ENV['TEASPOON_ENV'] = File.expand_path('../spec/dummy/spec/teaspoon_env.rb', FILE)\n  ENV['TEASPOON_RAILS_ENV'] = File.expand_path('../spec/dummy/config/environment.rb', FILE)\nRake::Task[\"app:teaspoon\"].invoke\nend\n```\nAll looks good :) :+1: \n. @jejacks0n yeah I would have to agree with that. My first attempt had it situated as such but I couldn't figure out what was going on so I went with the instructions in the wiki until I got it to work. Now that I have a better working knowledge of its internals I'm going to do just that - move the js specs from within the dummy app to the engine specs dir.\n. Today I ran into this issue and played with a bunch of different things until I got this to work.\nFrom the root of an engine you should be able to run the app:teaspoon rake task, which will fail because it can't find the spec/teaspoon_env.rb or config/environment.rb. Since we are able to hook into those couple of ENV vars though, we can get in front of the app:teaspoon rake task being called with something like this in <engine root>/Rakefile\n``` ruby\ndesc 'Run the javascript specs'\ntask :teaspoon do\n  ENV['TEASPOON_ENV'] = File.expand_path('../spec/dummy/spec/teaspoon_env.rb', FILE)\n  ENV['TEASPOON_RAILS_ENV'] = File.expand_path('../spec/dummy/config/environment.rb', FILE)\nRake::Task[\"app:teaspoon\"].invoke\nend\n```\nAll looks good :) :+1: \n. @jejacks0n yeah I would have to agree with that. My first attempt had it situated as such but I couldn't figure out what was going on so I went with the instructions in the wiki until I got it to work. Now that I have a better working knowledge of its internals I'm going to do just that - move the js specs from within the dummy app to the engine specs dir.\n. ",
    "brysgo": "Actually, you can judge me. I didn't realize that you were using capybara elsewhere so stubbing out the session probably wasn't the best idea.\n. The reason for this is simply that phantom is hanging our test suite and selenium is much slower. So this is an alternative that I'm hoping won't hang on our CI server.\nI will resubmit this when I figure out a way to make my tests play nice with the capybara sweet in this project.\n. Do you have any idea why travis is failing? The tests pass locally for me and it seems unrelated.\n@jejacks0n \n. @jejacks0n - Can you take another look at this and tell me what I would need to do to get this merged? My team has been using it for a while now without any problems.\n. https://github.com/modeset/teaspoon/wiki/Using-Capybara-Webkit\n. Actually, you can judge me. I didn't realize that you were using capybara elsewhere so stubbing out the session probably wasn't the best idea.\n. The reason for this is simply that phantom is hanging our test suite and selenium is much slower. So this is an alternative that I'm hoping won't hang on our CI server.\nI will resubmit this when I figure out a way to make my tests play nice with the capybara sweet in this project.\n. Do you have any idea why travis is failing? The tests pass locally for me and it seems unrelated.\n@jejacks0n \n. @jejacks0n - Can you take another look at this and tell me what I would need to do to get this merged? My team has been using it for a while now without any problems.\n. https://github.com/modeset/teaspoon/wiki/Using-Capybara-Webkit\n. ",
    "smellsblue": "Looking at the failures in Travis, I'm pretty sure I didn't have anything to do with them :-) but I'd be happy to try to help if needed...\n. Looking at the failures in Travis, I'm pretty sure I didn't have anything to do with them :-) but I'd be happy to try to help if needed...\n. ",
    "schnittchen": "Maybe this could be solved with a --output-file option. One could also argue that the boot messages belong in stderr, but given that a lot of stuff can happen when rails is booted, I would prefer the --output-file option (I actually have another stupid debugging output on every Rails boot here in stdout...)\n. Wow crazy are you fast! Was just going to post this workaround:\nteaspoon -f junit | awk '/<?xml/{p=1}; p' > foo.xml\n. Thank you. -q would work in my case if there wasn't the other stupid debug output...\n. Oh cool!\nI did not get that at first, obviously. Also, it still needs -q, like\nteaspoon -q -f \"junit>/path/to/output.xml\"\nMaybe just link to this issue ;)\n. Cool! Thank you @Mikepack!\n. Maybe this could be solved with a --output-file option. One could also argue that the boot messages belong in stderr, but given that a lot of stuff can happen when rails is booted, I would prefer the --output-file option (I actually have another stupid debugging output on every Rails boot here in stdout...)\n. Wow crazy are you fast! Was just going to post this workaround:\nteaspoon -f junit | awk '/<?xml/{p=1}; p' > foo.xml\n. Thank you. -q would work in my case if there wasn't the other stupid debug output...\n. Oh cool!\nI did not get that at first, obviously. Also, it still needs -q, like\nteaspoon -q -f \"junit>/path/to/output.xml\"\nMaybe just link to this issue ;)\n. Cool! Thank you @Mikepack!\n. ",
    "ArtieReus": "Hi jejacks0n,\nthx to point me to that ticket. I found out, what is going on in my project. The project is running under a namespace and that means that the root path to the project looks like this:\nhttp://localhost:3000/namespace/...\nI suppose then that the teaspoon js can not be found by running teaspoon as a rake task. Let me see if i can fix it without removing the namespace.\nThx a lot.\n. Any Ideas how to solve this issue?\nThx!\n. Hi jejacks0n,\nthx to point me to that ticket. I found out, what is going on in my project. The project is running under a namespace and that means that the root path to the project looks like this:\nhttp://localhost:3000/namespace/...\nI suppose then that the teaspoon js can not be found by running teaspoon as a rake task. Let me see if i can fix it without removing the namespace.\nThx a lot.\n. Any Ideas how to solve this issue?\nThx!\n. ",
    "ajb": "Looks like it was recently added. You might want to try bundling teaspoon with github: 'modeset/teaspoon'.\n. Thanks for all the effort! Unfortunately this 1.1.2 is not working for us. It looks like the #= require directives are not actually resulting in the JS getting included.\n. Looks like it was recently added. You might want to try bundling teaspoon with github: 'modeset/teaspoon'.\n. Thanks for all the effort! Unfortunately this 1.1.2 is not working for us. It looks like the #= require directives are not actually resulting in the JS getting included.\n. ",
    "jvenezia": "Yep ! works with the lastest version. However I have no output when I run tests with capybara :/ But it's another problem, I'll check this out.\nThanks !\n. Yes, I know what I'm doing, and I searched for similar problems before submitting an issue.\nI don't need require.js since i'm using rails witch uses sprockets to require files.\nI've just realized that Qunit's module may be the problem. So this condition is true, but it should not.\nSo It may be a I18n.js issue, and not teaspoon...\nI'm closing this issue and checking this out...\n. Fixed here https://github.com/fnando/i18n-js/issues/294 !\nThe issue was from I18n.js\nThanks!\n. Yep ! works with the lastest version. However I have no output when I run tests with capybara :/ But it's another problem, I'll check this out.\nThanks !\n. Yes, I know what I'm doing, and I searched for similar problems before submitting an issue.\nI don't need require.js since i'm using rails witch uses sprockets to require files.\nI've just realized that Qunit's module may be the problem. So this condition is true, but it should not.\nSo It may be a I18n.js issue, and not teaspoon...\nI'm closing this issue and checking this out...\n. Fixed here https://github.com/fnando/i18n-js/issues/294 !\nThe issue was from I18n.js\nThanks!\n. ",
    "kareemamin": "Sounds good I'll do that\n. Sounds good I'll do that\n. ",
    "ryanlntn": "Switching to config.formatters = [\"documentation\"] doesn't have any effect.\n. I think you may be right. Running the same command outside of guard produces the correct format:\n\n. Yeah it looks like there's already an issue over there too: https://github.com/modeset/guard-teaspoon/issues/33\nIf I get some time I might take a look at it and see if I can figure out why the options aren't making it through. If not, dot format will have to do. :wink:\n. Switching to config.formatters = [\"documentation\"] doesn't have any effect.\n. I think you may be right. Running the same command outside of guard produces the correct format:\n\n. Yeah it looks like there's already an issue over there too: https://github.com/modeset/guard-teaspoon/issues/33\nIf I get some time I might take a look at it and see if I can figure out why the options aren't making it through. If not, dot format will have to do. :wink:\n. ",
    "TrangPham": "Ah Thank you!\n. @jejacks0n Ah thank you! Your advice helped me find the correct answer, which was to use sinon to stub out the confirm dialog as follows:\nsinon.stub(window, \"confirm\").returns(true);\n. Ah Thank you!\n. @jejacks0n Ah thank you! Your advice helped me find the correct answer, which was to use sinon to stub out the confirm dialog as follows:\nsinon.stub(window, \"confirm\").returns(true);\n. ",
    "Tekhne": "@jejacks0n I have teaspoon the Gemfile like this:\n``` ruby\n...\ngem 'teaspoon', '= 0.9.1', group: [:development, :test]\n...\n```\n. @jejacks0n I'll try to install the commit above and test as soon as I get a chance, and I'll post the result of that test here.\n. @jejacks0n Hmm, looks like I'm still getting the error:\n``` ruby\n$ grep teaspoon Gemfile\ngem 'teaspoon', git: 'git@github.com:modeset/teaspoon.git', ref: '825fd6b'\n$ bundle show teaspoon\n/Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/bundler/gems/teaspoon-825fd6b2c29d\n$ bundle exec rails g teaspoon:install\n      create  spec/teaspoon_env.rb\n(erb):142:in template': uninitialized constant Teaspoon::Formatters (NameError)\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/2.2.0/erb.rb:863:ineval'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/2.2.0/erb.rb:863:in result'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/file_manipulation.rb:116:inblock in template'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:53:in call'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:53:inrender'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:62:in block (2 levels) in invoke!'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:62:inopen'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:62:in block in invoke!'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/empty_directory.rb:116:incall'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/empty_directory.rb:116:in invoke_with_conflict_check'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:60:ininvoke!'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions.rb:94:in action'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:25:increate_file'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/file_manipulation.rb:115:in template'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/bundler/gems/teaspoon-825fd6b2c29d/lib/generators/teaspoon/install/install_generator.rb:43:incopy_environment'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/command.rb:27:in run'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:ininvoke_command'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:in block in invoke_all'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:ineach'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:in map'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:ininvoke_all'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/group.rb:232:in dispatch'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/base.rb:440:instart'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/gems/railties-4.1.6/lib/rails/generators.rb:157:in invoke'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/gems/railties-4.1.6/lib/rails/commands/generate.rb:11:in'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/gems/railties-4.1.6/lib/rails/engine/commands.rb:19:in <top (required)>'\n        from script/rails:8:inrequire'\n        from script/rails:8:in <main>'\n```\n. @jejacks0n I haveteaspoontheGemfile` like this:\n``` ruby\n...\ngem 'teaspoon', '= 0.9.1', group: [:development, :test]\n...\n```\n. @jejacks0n I'll try to install the commit above and test as soon as I get a chance, and I'll post the result of that test here.\n. @jejacks0n Hmm, looks like I'm still getting the error:\n``` ruby\n$ grep teaspoon Gemfile\ngem 'teaspoon', git: 'git@github.com:modeset/teaspoon.git', ref: '825fd6b'\n$ bundle show teaspoon\n/Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/bundler/gems/teaspoon-825fd6b2c29d\n$ bundle exec rails g teaspoon:install\n      create  spec/teaspoon_env.rb\n(erb):142:in template': uninitialized constant Teaspoon::Formatters (NameError)\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/2.2.0/erb.rb:863:ineval'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/2.2.0/erb.rb:863:in result'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/file_manipulation.rb:116:inblock in template'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:53:in call'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:53:inrender'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:62:in block (2 levels) in invoke!'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:62:inopen'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:62:in block in invoke!'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/empty_directory.rb:116:incall'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/empty_directory.rb:116:in invoke_with_conflict_check'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:60:ininvoke!'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions.rb:94:in action'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/create_file.rb:25:increate_file'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/actions/file_manipulation.rb:115:in template'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/bundler/gems/teaspoon-825fd6b2c29d/lib/generators/teaspoon/install/install_generator.rb:43:incopy_environment'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/command.rb:27:in run'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:126:ininvoke_command'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:in block in invoke_all'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:ineach'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:in map'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/invocation.rb:133:ininvoke_all'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/group.rb:232:in dispatch'\n        from /Users/$USER/.rbenv/versions/2.2.0/lib/ruby/gems/2.2.0/gems/thor-0.19.1/lib/thor/base.rb:440:instart'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/gems/railties-4.1.6/lib/rails/generators.rb:157:in invoke'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/gems/railties-4.1.6/lib/rails/commands/generate.rb:11:in'\n        from /Users/$USER/.rbenv/versions/2.2.0/gemsets/$GEMSET/gems/railties-4.1.6/lib/rails/engine/commands.rb:19:in <top (required)>'\n        from script/rails:8:inrequire'\n        from script/rails:8:in `'\n```\n. ",
    "nruth": "is there some way to add/remove the spec filters in place?\n. coffee\n@link = \"?grep=#{encodeURIComponent(\"#{@spec.module}: #{@spec.name}\")}\"\n@link = \"#{@link}&file=#{encodeURIComponent(fileFilter)}\" if fileFilter?\nthe missing part is getting the fileFilter string from the params or teaspoon somehow?\nMy point is that it doesn't need to figure out which file the spec is inside of, only keep using the file it's already been told to use by the user.\n. That's a shame, but if the user has clicked a specific file from the \"default\" page, and the file is in the url query params, is that available? That'd be enough.\n. Could you advise the right way to read the params from inside the Teaspoon.Spec class? I've not done any browser & terminal js dev before.\n. I've copy-pasted together the urls myself a couple of times so pretty sure teaspoon can handle it :) \n. I think Teaspoon.params is what I was looking for. \nI'll experiment a bit on my fork and when it's working and has tests (was thinking add to the ruby integration tests) I'll send a pr?\n. I'll come back to this and do a pr with tests when my computer's back from repairs (struggling with windows now). Probably a couple of weeks.\nWill see if I can do something more general than this params hack for qunit too.\n. is there some way to add/remove the spec filters in place?\n. coffee\n@link = \"?grep=#{encodeURIComponent(\"#{@spec.module}: #{@spec.name}\")}\"\n@link = \"#{@link}&file=#{encodeURIComponent(fileFilter)}\" if fileFilter?\nthe missing part is getting the fileFilter string from the params or teaspoon somehow?\nMy point is that it doesn't need to figure out which file the spec is inside of, only keep using the file it's already been told to use by the user.\n. That's a shame, but if the user has clicked a specific file from the \"default\" page, and the file is in the url query params, is that available? That'd be enough.\n. Could you advise the right way to read the params from inside the Teaspoon.Spec class? I've not done any browser & terminal js dev before.\n. I've copy-pasted together the urls myself a couple of times so pretty sure teaspoon can handle it :) \n. I think Teaspoon.params is what I was looking for. \nI'll experiment a bit on my fork and when it's working and has tests (was thinking add to the ruby integration tests) I'll send a pr?\n. I'll come back to this and do a pr with tests when my computer's back from repairs (struggling with windows now). Probably a couple of weeks.\nWill see if I can do something more general than this params hack for qunit too.\n. ",
    "ingolfured": "Sorry for late reply. Thanks for this mate! Didnt really understand what\nwas going on. I think Ill just stick with Capybara for feature tests.\nBest, Ingo\nOn Wed, Mar 11, 2015 at 4:45 PM, Jeremy Jackson notifications@github.com\nwrote:\n\nso, secretly, you can do this by making an ajax request to your endpoint\nand inserting that into the fixture element, but this is not advisable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/modeset/teaspoon/issues/331#issuecomment-78303244.\n. Sorry for late reply. Thanks for this mate! Didnt really understand what\nwas going on. I think Ill just stick with Capybara for feature tests.\n\nBest, Ingo\nOn Wed, Mar 11, 2015 at 4:45 PM, Jeremy Jackson notifications@github.com\nwrote:\n\nso, secretly, you can do this by making an ajax request to your endpoint\nand inserting that into the fixture element, but this is not advisable.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/modeset/teaspoon/issues/331#issuecomment-78303244.\n. \n",
    "arinhouck": "Sorry meant, \"Teaspoon.hook\".\n. Did you have any feedback or suggestions?\n. Sorry meant, \"Teaspoon.hook\".\n. Did you have any feedback or suggestions?\n. ",
    "thejamespinto": "@jejacks0n do you think you can take this from here?\n. Github was going through a DDOS attack, so would you also mind rerunning the travis build?\n\n. @mikepack  I didn't realize @jejacks0n had a WIP branch when I started this, when I saw it I threw the ball at him (if memory recalls, this is our fourth interaction in open source)\nI just came across this gem a few days ago and loved it so much I wanted to make sure it would optimize adoption rates.\nI am very proactive when it comes to secure things I care about.\nGreat work on this gem, front-end feels like back-end again :wink: \n. @mikepack yeah, @jejacks0n should be the one to merge this. We have a tiny history, I believe this is our fourth interaction in open source.\nGreat gem, I just learned about it a few days ago and I loved it.\nSo I wanted to make sure adoption rate is always optimal when it comes to version compatibility.\nGreat work ;)\n. @jejacks0n hey, well, having separate files seems like the most logical and organized thing for me, whereas having a crazy conditional dependency structure seems like hell :sweat_smile: \nYes, the approach works for me, I wouldn't have created a bad PR on purpose.\nHowever, there was one single spec that failed, so I assumed you would know how to fix it.\nI loved this gem, just do me a favor and make it run on various Rails versions so people will always be able to adopt it and update it :wink: \n. @jejacks0n do you think you can take this from here?\n. Github was going through a DDOS attack, so would you also mind rerunning the travis build?\n\n. @mikepack  I didn't realize @jejacks0n had a WIP branch when I started this, when I saw it I threw the ball at him (if memory recalls, this is our fourth interaction in open source)\nI just came across this gem a few days ago and loved it so much I wanted to make sure it would optimize adoption rates.\nI am very proactive when it comes to secure things I care about.\nGreat work on this gem, front-end feels like back-end again :wink: \n. @mikepack yeah, @jejacks0n should be the one to merge this. We have a tiny history, I believe this is our fourth interaction in open source.\nGreat gem, I just learned about it a few days ago and I loved it.\nSo I wanted to make sure adoption rate is always optimal when it comes to version compatibility.\nGreat work ;)\n. @jejacks0n hey, well, having separate files seems like the most logical and organized thing for me, whereas having a crazy conditional dependency structure seems like hell :sweat_smile: \nYes, the approach works for me, I wouldn't have created a bad PR on purpose.\nHowever, there was one single spec that failed, so I assumed you would know how to fix it.\nI loved this gem, just do me a favor and make it run on various Rails versions so people will always be able to adopt it and update it :wink: \n. ",
    "donald-s": "Sorry for the delay in getting back to you. \nThat makes sense. I though it would report errors when being run from the console as well. However, the behavior was the same both in the browser and in the console.\nI haven't had much of a chance to dig into it, but I'll let you know what I find when I am able to get to it. \n. Sorry for the delay in getting back to you. \nThat makes sense. I though it would report errors when being run from the console as well. However, the behavior was the same both in the browser and in the console.\nI haven't had much of a chance to dig into it, but I'll let you know what I find when I am able to get to it. \n. ",
    "mattscilipoti": "You may be looking to utilize a guard group.  I put rspec and teaspoon in a group with :halt_on_fail.  If either fails, it doesn't continue.\ngroup :specs, halt_on_fail: true do\n. You may be looking to utilize a guard group.  I put rspec and teaspoon in a group with :halt_on_fail.  If either fails, it doesn't continue.\ngroup :specs, halt_on_fail: true do\n. ",
    "sp1117": "Well, I upgraded teaspoon to 0.8.0 and I get this Failure/Error: Can't find variable: spyOn. Did anything change with spyOn after this upgrade?\n. Well, I upgraded teaspoon to 0.8.0 and I get this Failure/Error: Can't find variable: spyOn. Did anything change with spyOn after this upgrade?\n. ",
    "macgregordennis": "na\n. na\n. na\n.  na\n. na\n. na\n. ",
    "darbs": "Im sorry but why are the filenames relevant? I could name them blah/Blah.js the issue is still valid as long as the file exists.\nI also have them in my pre compile list.\nRails.application.config.assets.precompile += %w( blah/Blah.js )\nIn my gemfile\ngroup :development, :test do\n  gem 'rspec-rails', '~> 2.0'\n  gem 'factory_girl_rails'\n  gem 'teaspoon', '~> 0.9.0'\n  gem 'mocha'\n  gem 'selenium-webdriver'\nend\n```\ncommands ran on codeship\nrvm use 2.1.1\nbundle install\nbundle exec rake db:migrate\nbundle exec rake assets:precompile\nexport RAILS_ENV=test\nbundle exec rake db:schema:load\nbundle exec rake teaspoon\n```\nI also see Using teaspoon 0.9.1 when codeship ran bundle install.\n. Im sorry but why are the filenames relevant? I could name them blah/Blah.js the issue is still valid as long as the file exists.\nI also have them in my pre compile list.\nRails.application.config.assets.precompile += %w( blah/Blah.js )\nIn my gemfile\ngroup :development, :test do\n  gem 'rspec-rails', '~> 2.0'\n  gem 'factory_girl_rails'\n  gem 'teaspoon', '~> 0.9.0'\n  gem 'mocha'\n  gem 'selenium-webdriver'\nend\n```\ncommands ran on codeship\nrvm use 2.1.1\nbundle install\nbundle exec rake db:migrate\nbundle exec rake assets:precompile\nexport RAILS_ENV=test\nbundle exec rake db:schema:load\nbundle exec rake teaspoon\n```\nI also see Using teaspoon 0.9.1 when codeship ran bundle install.\n. ",
    "laserlemon": "I'm having a similar problem and it seems to be due to the \"sprockets\" gem version. Locally, everything works with sprockets 2.12.4 but the build server has 3.5.2 installed. For me this can happen because Gemfile.lock is not checked in since I'm developing a gem so the build server fetches the latest version of sprockets that will satisfy the requirement.\nI've confirmed that in my scenario, the jump from 2.12.4 (the last 2.x version) to 3.0.0 (the first 3.0 version) is enough to trigger the error.\n. Latest what?\n. I'm having a similar problem and it seems to be due to the \"sprockets\" gem version. Locally, everything works with sprockets 2.12.4 but the build server has 3.5.2 installed. For me this can happen because Gemfile.lock is not checked in since I'm developing a gem so the build server fetches the latest version of sprockets that will satisfy the requirement.\nI've confirmed that in my scenario, the jump from 2.12.4 (the last 2.x version) to 3.0.0 (the first 3.0 version) is enough to trigger the error.\n. Latest what?\n. ",
    "ahorner": "Sounds good. This was causing an immediate issue on a project, so I went with the band-aid approach.\n. 4.2.0\n. For my current project, we have a catch-all route defined at the end of the routes file like so:\nroutes.rb\nruby\n  get \"*unmatched_route\", unmatched_route: /(?!.*rails\\/mailers).*/, to: \"errors#not_found\"\nIn this case, recognize_path returns an action of not_found (the action for the catch-all route), and teaspoon just silently loads without attempting to prepend its routes. We've managed to avoid the issue for the time being by just adding teaspoon to our unmatched route regex, but it's sort of a weird interaction. \nThe approach in this PR is probably overkill, but we should at least touch up the documentation.\n. I'm not having any luck recreating the issue in an isolated test case, so the issue must be a weird interaction with something else in our stack. I poked around for a while without any success; I'll update this again once I figure out exactly where the problem is coming from. In the meantime, sorry for the wild goose chase.\n. Sounds good. This was causing an immediate issue on a project, so I went with the band-aid approach.\n. 4.2.0\n. For my current project, we have a catch-all route defined at the end of the routes file like so:\nroutes.rb\nruby\n  get \"*unmatched_route\", unmatched_route: /(?!.*rails\\/mailers).*/, to: \"errors#not_found\"\nIn this case, recognize_path returns an action of not_found (the action for the catch-all route), and teaspoon just silently loads without attempting to prepend its routes. We've managed to avoid the issue for the time being by just adding teaspoon to our unmatched route regex, but it's sort of a weird interaction. \nThe approach in this PR is probably overkill, but we should at least touch up the documentation.\n. I'm not having any luck recreating the issue in an isolated test case, so the issue must be a weird interaction with something else in our stack. I poked around for a while without any success; I'll update this again once I figure out exactly where the problem is coming from. In the meantime, sorry for the wild goose chase.\n. ",
    "francois2metz": "Why not speed up thinks for users that don't want to use expand_assets? Any reasons to append body=1 by default? Sprockets will do for you later.\n. Why not speed up thinks for users that don't want to use expand_assets? Any reasons to append body=1 by default? Sprockets will do for you later.\n. ",
    "davetron5000": "OK, nevermind.  Turns out that you don't need to require jasmine again\u2014somehow it's being brought in by teaspoon.  And if you do require it again, everything just silently fails.\nMy recommendation is to use JavaScript and its ecosystem for every possible software task, because this behavior (which I blame on asset pipeline and/or jasmin\u2014not teaspoon) is the sort of thing that'll keep us employed for decades.\nSorry for the bother.\n. Yeah, I think that call makes sense, and I have no reason for including it (again)\u2014the instructions don't say to.\nI guess it would've been nice if Jasmine had detected this and realized it was blowing away all the global state it sets up and warn me, but we can't have it all :)\n. Just lost about an hour to this.  Here's an example that might make it more clear why this is undesirable behavior:\n1. Clone https://github.com/madblkman/Shine\n2. bundle install\n3. bundle exec rake teaspoon\nYou'll see 1 spec ran, 1 passed.  But, if you look at spec/javascripts/customers_app/controllers/customer_search_controller_spec.js you'll see there are three more tests in there.  These don't get mentioned or even show up.\nNow, if you rails s and go to http://localhost:3000/teaspoon, you can see teaspoon/jasmine is picking it up, and shows there are 0 tests in that file, and all is good.\nOnly when you go to the console do you see syntax errors on line 78 and line 100.  Fixing these and both the web and CLI show 4 tests run, 4 tests passed.\nMy CLI output doesn't even show an error, so there's no indication that something is wrong.  And, it seems to me, something is terribly wrong if my spec files have syntax errors in them.\nFWIW, in most other languages, a failure to compile/interpret the test code causes some sort of obvious failure.\n. OK, nevermind.  Turns out that you don't need to require jasmine again\u2014somehow it's being brought in by teaspoon.  And if you do require it again, everything just silently fails.\nMy recommendation is to use JavaScript and its ecosystem for every possible software task, because this behavior (which I blame on asset pipeline and/or jasmin\u2014not teaspoon) is the sort of thing that'll keep us employed for decades.\nSorry for the bother.\n. Yeah, I think that call makes sense, and I have no reason for including it (again)\u2014the instructions don't say to.\nI guess it would've been nice if Jasmine had detected this and realized it was blowing away all the global state it sets up and warn me, but we can't have it all :)\n. Just lost about an hour to this.  Here's an example that might make it more clear why this is undesirable behavior:\n1. Clone https://github.com/madblkman/Shine\n2. bundle install\n3. bundle exec rake teaspoon\nYou'll see 1 spec ran, 1 passed.  But, if you look at spec/javascripts/customers_app/controllers/customer_search_controller_spec.js you'll see there are three more tests in there.  These don't get mentioned or even show up.\nNow, if you rails s and go to http://localhost:3000/teaspoon, you can see teaspoon/jasmine is picking it up, and shows there are 0 tests in that file, and all is good.\nOnly when you go to the console do you see syntax errors on line 78 and line 100.  Fixing these and both the web and CLI show 4 tests run, 4 tests passed.\nMy CLI output doesn't even show an error, so there's no indication that something is wrong.  And, it seems to me, something is terribly wrong if my spec files have syntax errors in them.\nFWIW, in most other languages, a failure to compile/interpret the test code causes some sort of obvious failure.\n. ",
    "andresbravog": "This is still happening. config.expand_assets = false makes the spec_helper to not be instrumented\n. I guess not.\nPlacing this in suite:\nRuby\n    def asset_url(asset)\n      params = []\n      params << \"body=1\" if config.expand_assets\n      puts '>> Loading ' + asset.pathname.to_s.split('myreponame').last\n      params << \"instrument=1\" if instrument_file?(asset.pathname.to_s)\n      url = asset.logical_path\n      url += \"?#{params.join(\"&\")}\" if params.any?\n      puts '>> |===> with url:  ' + url.split('myreponame').last\n      url\n    end\ngives the output\n``` bash\n\n\nLoading /spec/javascripts/spec_helper.coffee\n|===> with url:  spec_helper.js?instrument=1\nLoading /spec/javascripts/backbone/apps/profiles/edit/view/header_spec.coffee\n|===> with url:  backbone/apps/profiles/edit/view/header_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/basic_custom_field_header_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/basic_custom_field_header_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/contact_email_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/contact_email_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/contact_link_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/contact_link_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/contact_phone_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/contact_phone_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/current_experience_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/current_experience_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/experience_custom_fields_header_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/experience_custom_fields_header_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/layout_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/layout_spec.js\nLoading /spec/javascripts/backbone/apps/settings/settings_spec.coffee\n|===> with url:  backbone/apps/settings/settings_spec.js\nLoading /spec/javascripts/backbone/entities/filters/filters_spec.coffee\n|===> with url:  backbone/entities/filters/filters_spec.js\n.........................\n\n\nFinished in 0.09300 seconds\n25 examples, 0 failures\nUnable to generate cobertura coverage report.\n```\nso the instrumentation flag is required but it's not happening. Going back to config.expand_assests = true works nice.\nI'll keep investigating\n. Finally it was related to default coverage ignore regex that includes %r{(+.)_helper.} ignoring the spec_helper file.\nJust created a PR solving this :)\n. @jejacks0n\nWell the default spec_helper stands for:\n```\nYou can require your own javascript files here. By default this will include everything in application, however you\nmay get better load performance if you require the specific files that are being used in the spec that tests them.\n= require application\n```\nSo by default all my application code is loaded there, that's why I want it to be instrumented.\n. I understand your concerns, thing is:\nIf you want the coverage to work with the default values of this gem this is one way to go. Will appreciate any other idea, but IMO the the gem features should work with default values.\nThe current Readme does not work for coverage (at least if you are not using require.js). It took me several hours of gem debugging to understand that what was failing is the instrumentation and a little bit more to find the set of configuration options that makes them work. That knowledge should be more accessible as you said.\n. This is still happening. config.expand_assets = false makes the spec_helper to not be instrumented\n. I guess not.\nPlacing this in suite:\nRuby\n    def asset_url(asset)\n      params = []\n      params << \"body=1\" if config.expand_assets\n      puts '>> Loading ' + asset.pathname.to_s.split('myreponame').last\n      params << \"instrument=1\" if instrument_file?(asset.pathname.to_s)\n      url = asset.logical_path\n      url += \"?#{params.join(\"&\")}\" if params.any?\n      puts '>> |===> with url:  ' + url.split('myreponame').last\n      url\n    end\ngives the output\n``` bash\n\n\nLoading /spec/javascripts/spec_helper.coffee\n|===> with url:  spec_helper.js?instrument=1\nLoading /spec/javascripts/backbone/apps/profiles/edit/view/header_spec.coffee\n|===> with url:  backbone/apps/profiles/edit/view/header_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/basic_custom_field_header_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/basic_custom_field_header_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/contact_email_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/contact_email_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/contact_link_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/contact_link_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/contact_phone_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/contact_phone_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/current_experience_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/current_experience_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/experience_custom_fields_header_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/experience_custom_fields_header_spec.js\nLoading /spec/javascripts/backbone/apps/profiles/show/view/layout_spec.coffee\n|===> with url:  backbone/apps/profiles/show/view/layout_spec.js\nLoading /spec/javascripts/backbone/apps/settings/settings_spec.coffee\n|===> with url:  backbone/apps/settings/settings_spec.js\nLoading /spec/javascripts/backbone/entities/filters/filters_spec.coffee\n|===> with url:  backbone/entities/filters/filters_spec.js\n.........................\n\n\nFinished in 0.09300 seconds\n25 examples, 0 failures\nUnable to generate cobertura coverage report.\n```\nso the instrumentation flag is required but it's not happening. Going back to config.expand_assests = true works nice.\nI'll keep investigating\n. Finally it was related to default coverage ignore regex that includes %r{(+.)_helper.} ignoring the spec_helper file.\nJust created a PR solving this :)\n. @jejacks0n\nWell the default spec_helper stands for:\n```\nYou can require your own javascript files here. By default this will include everything in application, however you\nmay get better load performance if you require the specific files that are being used in the spec that tests them.\n= require application\n```\nSo by default all my application code is loaded there, that's why I want it to be instrumented.\n. I understand your concerns, thing is:\nIf you want the coverage to work with the default values of this gem this is one way to go. Will appreciate any other idea, but IMO the the gem features should work with default values.\nThe current Readme does not work for coverage (at least if you are not using require.js). It took me several hours of gem debugging to understand that what was failing is the instrumentation and a little bit more to find the set of configuration options that makes them work. That knowledge should be more accessible as you said.\n. ",
    "geoffharcourt": "This fix also resolved the issue for me. (Ran off master, as 1.0.1 isn't on Rubygems yet.) Thanks very much.\n. Thanks for two very quick updates today! Very excited about version 1.x.\n. This fix also resolved the issue for me. (Ran off master, as 1.0.1 isn't on Rubygems yet.) Thanks very much.\n. Thanks for two very quick updates today! Very excited about version 1.x.\n. ",
    "pbcomm": "Thanks, works great!\n. Thanks, works great!\n. ",
    "mariohmol": "Hi there!!\ni have teaspoon-mocha inside the lock file, all set.. but when i run generattor get same error.. opened a new issue as this is 1 year old https://github.com/modeset/teaspoon/issues/496\n. Sorry guys, i figure it out, this worked RAILS_ENV=test bundle exec rails g teaspoon:install\nwouldnt be good to have this rails_env with bundle in readme? \nbests\n. Hi there!!\ni have teaspoon-mocha inside the lock file, all set.. but when i run generattor get same error.. opened a new issue as this is 1 year old https://github.com/modeset/teaspoon/issues/496\n. Sorry guys, i figure it out, this worked RAILS_ENV=test bundle exec rails g teaspoon:install\nwouldnt be good to have this rails_env with bundle in readme? \nbests\n. ",
    "rstacruz": "The (?) at the bottom is just an artifact of our project's build... that's Intercom.io's button somehow making its way to our teaspoon tests haha.\nof course the margins are collapsible...  shouldn't be hard to make it responsive. btw, isn't the large \"Teaspoon\" text extraneous at this point?\n. there's a lot of work to get this working btw... CSS is the easy part, but the canvas progress bar would have to be modified a lot to make it render a simpler graph.\n(actually, i'm pretty confident it can be implemented without canvas... just plain CSS.)\nbtw, for reference, this is how Mocha looks like on its default HTML reporter: demo\n. The (?) at the bottom is just an artifact of our project's build... that's Intercom.io's button somehow making its way to our teaspoon tests haha.\nof course the margins are collapsible...  shouldn't be hard to make it responsive. btw, isn't the large \"Teaspoon\" text extraneous at this point?\n. there's a lot of work to get this working btw... CSS is the easy part, but the canvas progress bar would have to be modified a lot to make it render a simpler graph.\n(actually, i'm pretty confident it can be implemented without canvas... just plain CSS.)\nbtw, for reference, this is how Mocha looks like on its default HTML reporter: demo\n. ",
    "crgee": "Great, thanks\n. Great, thanks\n. ",
    "dancancro": "Sorry, I'm new to this. Could you point me in the right direction? I don't know what bundle exec or binstubs are. \nI posted all the code to the repo. Do you see anything out of place?\nMy Gemfile has this part that looks like a requirement to me:\ngroup :test, :development do\n  gem \"rspec\"\n  gem \"rspec-rails\"\n  gem \"factory_girl_rails\"\n  gem \"capybara\"\n  gem \"database_cleaner\"\n  gem \"selenium-webdriver\"\n  gem 'teaspoon', \"0.7.9\"\n  gem 'phantomjs'\nend\nThe same problem happens with the tutorial's finished product, which is here\n. Sorry, I'm new to this. Could you point me in the right direction? I don't know what bundle exec or binstubs are. \nI posted all the code to the repo. Do you see anything out of place?\nMy Gemfile has this part that looks like a requirement to me:\ngroup :test, :development do\n  gem \"rspec\"\n  gem \"rspec-rails\"\n  gem \"factory_girl_rails\"\n  gem \"capybara\"\n  gem \"database_cleaner\"\n  gem \"selenium-webdriver\"\n  gem 'teaspoon', \"0.7.9\"\n  gem 'phantomjs'\nend\nThe same problem happens with the tutorial's finished product, which is here\n. ",
    "mcmire": "Yeah, it's pretty useful!\n. Yeah, it's pretty useful!\n. ",
    "drogar": "OK - Thanks for trying!\n. OK - Thanks for trying!\n. ",
    "klenwell": "@jejacks0n Yes, I generated the setup for both qunit and jasmine with the generator.\n\nIf make sure your paths are correct in the confit.\n\nDo you mean that I should double check my paths in the teaspoon_env.rb file? I used the defaults, which look sane.\n. I'd expect the project specs to be consistent between the qunit and jasmine branches I set up. So I don't think that would explain the issue. Unless I'm misunderstanding what is mean by term project specs.\nIn any event, I'm ready to accept that it's something peculiar to my current project setup. I just wanted to raise the issue here in case there was something obvious that I had missed and as a record in the event somebody else experience the same issue.\n. @jejacks0n Yes, I generated the setup for both qunit and jasmine with the generator.\n\nIf make sure your paths are correct in the confit.\n\nDo you mean that I should double check my paths in the teaspoon_env.rb file? I used the defaults, which look sane.\n. I'd expect the project specs to be consistent between the qunit and jasmine branches I set up. So I don't think that would explain the issue. Unless I'm misunderstanding what is mean by term project specs.\nIn any event, I'm ready to accept that it's something peculiar to my current project setup. I just wanted to raise the issue here in case there was something obvious that I had missed and as a record in the event somebody else experience the same issue.\n. ",
    "plongyear": "@jejacks0n @mikepack - I agree, a config file sounds like a great idea.\nSince the inline regex is the current way file extensions are being resolved, do you think it makes sense to merge this for now until someone is able to get around to implementing the config approach? It would be great if we could get this in to get our specs to run properly.\n. I also added a commit that supports both the .js.jsx and .js.jsx.coffee extensions.\n. @mikepack thanks, will do.\n. @jejacks0n @mikepack - I agree, a config file sounds like a great idea.\nSince the inline regex is the current way file extensions are being resolved, do you think it makes sense to merge this for now until someone is able to get around to implementing the config approach? It would be great if we could get this in to get our specs to run properly.\n. I also added a commit that supports both the .js.jsx and .js.jsx.coffee extensions.\n. @mikepack thanks, will do.\n. ",
    "testzugang": "Thanks for your effort. I tried again with a very basic setup and found out that window.expect = chai.expect; in spec_helper.js had to be commented in to make it work with chai-datetime. Regular chai specs were working already before.\n. Thanks for your effort. I tried again with a very basic setup and found out that window.expect = chai.expect; in spec_helper.js had to be commented in to make it work with chai-datetime. Regular chai specs were working already before.\n. ",
    "sl4m": "Good point. I can work on explicitly defining use_framework= to handle my case and deprecate the method.\n. Sounds good. Shall I close this request and open a new one when ready?\n. I think aruba 0.8.x introduced some breaking changes that is causing the CI builds to fail.\n. Thanks for merging! :+1: \n. Good point. I can work on explicitly defining use_framework= to handle my case and deprecate the method.\n. Sounds good. Shall I close this request and open a new one when ready?\n. I think aruba 0.8.x introduced some breaking changes that is causing the CI builds to fail.\n. Thanks for merging! :+1: \n. ",
    "boskiv": "https://youtrack.jetbrains.com/issue/TW-36173\n. https://youtrack.jetbrains.com/issue/TW-36173\n. ",
    "arthurnn": "\nDoes this happen when run in your browser with /teaspoon\n\nNop, on the browser it works just fine.\n. > Have you followed the upgrade notes?\nyep.\n. I dont work for Shopify anymore, so I dont have access to the file.\n@rafaelfranca can you help out here?\n. > Does this happen when run in your browser with /teaspoon\nNop, on the browser it works just fine.\n. > Have you followed the upgrade notes?\nyep.\n. I dont work for Shopify anymore, so I dont have access to the file.\n@rafaelfranca can you help out here?\n. ",
    "rafaelfranca": "I upgraded teaspoon some weeks ago. Let me see if this issue still happen and I'll provide the file. @arthurnn thank you for the heads up.\n. Yeah, it still happen but only locally, not in the CI. Here is the content of the file:\n``` ruby\nSet RAILS_ROOT and load the environment if it's not already loaded.\nunless defined?(Rails)\n  ENV['RAILS_ENV']='test'\n  ENV[\"RAILS_ROOT\"] = File.expand_path(\"../../\", FILE)\n  require File.expand_path(\"../../config/environment\", FILE)\nend\nLoad mocha, so we can use stubs on magic lamps\nrequire 'mocha/setup'\nTeaspoon.configure do |config|\n  config.mount_at = \"/teaspoon\"\n  config.root = nil\n  config.asset_paths = [\"test/javascripts\"]\n  config.fixture_paths = [\"test/javascripts/fixtures\"]\n  config.asset_manifest += [/^unit\\//, /teaspoon/, /mocha/, /test_suite_polyfills/]\nconfig.suite(:default) do |suite|\n    suite.expand_assets = false\n    suite.use_framework :mocha\n    suite.matcher = \"{test/javascripts,app/assets}/*/_test.{js,js.coffee,coffee}\"\n    suite.helper = \"test_helper\"\n    suite.stylesheets = [\"teaspoon\"]\n  end\nconfig.asset_manifest += Teaspoon::Suite.all.map { |suite| \"#{suite.helper}.js\" }\nconfig.server_port=5000\nconfig.coverage do |coverage|\n    coverage.ignore = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}]\n  end\nend\n```\n. Ok. Now I know the reason of the error. Teaspoon starts the server with bind only in 127.0.0.1. This doesn't work for our case because we access our assets using the local CDN that don't use the loopback interface.\n@mikepack would you accept a PR to configure the Rack server host so we can bind to 0.0.0.0?\n. :+1: I'll work on it\n. I see. Maybe we can check the presence of parseHTML instead? My test suite is failing because parseHTML is undefined when $ is the browser selector helper.\n. Yeah, Zepto doesn't have parseHTML so it will fail anyway.\n. This speed up the tests matrix in almost 10 minutes.\nBefore: https://travis-ci.org/modeset/teaspoon/builds/85185407\nAfter: https://travis-ci.org/modeset/teaspoon/builds/85259893\n. @jejacks0n hi! I'm sprockets maintainer. What is happening is that teaspoon use javascript_tag to include the users' defined test files. Say you have the test/javascript/unit/home_test.js file. Teaspoon call javascript_tag with that as argument. That file is not registered for precompilation and sprockets-rails 3 now is strict about files that are being used as argument to javascript_tag and not being in the precompile list.\nDoes teaspoon maintain a list of all the test files? If so it is possible to register them?\nI'm using teaspoon with sprockets-rails 3 and we are correctly doing to workaround this problem is:\nruby\nconfig.asset_manifest += [%r{^unit/}]\nBut I'd love to get ride of it since teaspoon already know which files are being called in javascript_tag and can register them.\n. I think we can extend the precompiled_asset_checker in the view instance to use the controller information https://github.com/rails/sprockets-rails/blob/master/lib/sprockets/railtie.rb#L205.\nSomething like\nruby\nself.precompiled_asset_checker = -> logical_path { Rails.application.asset_precompiled? logical_path || @suite.spec_assets.include? logical_path }\n. We can consider that option as part of public API, but yeah, give me a write up with the areas of pain and we can find a solution together.\n. I upgraded teaspoon some weeks ago. Let me see if this issue still happen and I'll provide the file. @arthurnn thank you for the heads up.\n. Yeah, it still happen but only locally, not in the CI. Here is the content of the file:\n``` ruby\nSet RAILS_ROOT and load the environment if it's not already loaded.\nunless defined?(Rails)\n  ENV['RAILS_ENV']='test'\n  ENV[\"RAILS_ROOT\"] = File.expand_path(\"../../\", FILE)\n  require File.expand_path(\"../../config/environment\", FILE)\nend\nLoad mocha, so we can use stubs on magic lamps\nrequire 'mocha/setup'\nTeaspoon.configure do |config|\n  config.mount_at = \"/teaspoon\"\n  config.root = nil\n  config.asset_paths = [\"test/javascripts\"]\n  config.fixture_paths = [\"test/javascripts/fixtures\"]\n  config.asset_manifest += [/^unit\\//, /teaspoon/, /mocha/, /test_suite_polyfills/]\nconfig.suite(:default) do |suite|\n    suite.expand_assets = false\n    suite.use_framework :mocha\n    suite.matcher = \"{test/javascripts,app/assets}/*/_test.{js,js.coffee,coffee}\"\n    suite.helper = \"test_helper\"\n    suite.stylesheets = [\"teaspoon\"]\n  end\nconfig.asset_manifest += Teaspoon::Suite.all.map { |suite| \"#{suite.helper}.js\" }\nconfig.server_port=5000\nconfig.coverage do |coverage|\n    coverage.ignore = [%r{/lib/ruby/gems/}, %r{/vendor/assets/}, %r{/support/}, %r{/(.+)_helper.}]\n  end\nend\n```\n. Ok. Now I know the reason of the error. Teaspoon starts the server with bind only in 127.0.0.1. This doesn't work for our case because we access our assets using the local CDN that don't use the loopback interface.\n@mikepack would you accept a PR to configure the Rack server host so we can bind to 0.0.0.0?\n. :+1: I'll work on it\n. I see. Maybe we can check the presence of parseHTML instead? My test suite is failing because parseHTML is undefined when $ is the browser selector helper.\n. Yeah, Zepto doesn't have parseHTML so it will fail anyway.\n. This speed up the tests matrix in almost 10 minutes.\nBefore: https://travis-ci.org/modeset/teaspoon/builds/85185407\nAfter: https://travis-ci.org/modeset/teaspoon/builds/85259893\n. @jejacks0n hi! I'm sprockets maintainer. What is happening is that teaspoon use javascript_tag to include the users' defined test files. Say you have the test/javascript/unit/home_test.js file. Teaspoon call javascript_tag with that as argument. That file is not registered for precompilation and sprockets-rails 3 now is strict about files that are being used as argument to javascript_tag and not being in the precompile list.\nDoes teaspoon maintain a list of all the test files? If so it is possible to register them?\nI'm using teaspoon with sprockets-rails 3 and we are correctly doing to workaround this problem is:\nruby\nconfig.asset_manifest += [%r{^unit/}]\nBut I'd love to get ride of it since teaspoon already know which files are being called in javascript_tag and can register them.\n. I think we can extend the precompiled_asset_checker in the view instance to use the controller information https://github.com/rails/sprockets-rails/blob/master/lib/sprockets/railtie.rb#L205.\nSomething like\nruby\nself.precompiled_asset_checker = -> logical_path { Rails.application.asset_precompiled? logical_path || @suite.spec_assets.include? logical_path }\n. We can consider that option as part of public API, but yeah, give me a write up with the areas of pain and we can find a solution together.\n. ",
    "gmacdougall": "You are correct. Jasmine itself only reports one spec being run.\nThanks for your assistance.\n. You are correct. Jasmine itself only reports one spec being run.\nThanks for your assistance.\n. ",
    "agis": "I've followed the steps described in https://github.com/modeset/teaspoon/issues/397#issuecomment-127433338 and I get this page (I've slightly changed the paths; but they are correct anyway):\n\n. I think that I've found the issue but not sure why it's happening. The URIs Teaspoon asks the assets from  are wrong:\n\nNot sure why this happens thought, any ideas?\n. Just tried running teaspoon without the RAILS_ENV=test part and it works!\nAre we supposed to run this command on development or test environment? From the README I assume it should be on development but I want to just make sure, since we were running the command in the test environment until 1.7.x and this is about a CI server so..\ncc @jejacks0n @mikepack.\n. Yep, just found out that we're doing this in config/environments/test.rb:\nruby\nconfig.action_controller.asset_host = \"http://assets.test.host\"\nWhich is not wrong in terms of the Rails app but it breaks up with teaspoon.\nHowever, the question is: what is the standard way to run the command (supposing this is about a CI server)? With RAILS_ENV='test' or without it? In other words, should we run it in the development environment or in the test environment?\nThanks @jejacks0n!\n. Not sure but since it resolved I'm closing this. I've left the asset host to the default one. Thanks.\n. I've followed the steps described in https://github.com/modeset/teaspoon/issues/397#issuecomment-127433338 and I get this page (I've slightly changed the paths; but they are correct anyway):\n\n. I think that I've found the issue but not sure why it's happening. The URIs Teaspoon asks the assets from  are wrong:\n\nNot sure why this happens thought, any ideas?\n. Just tried running teaspoon without the RAILS_ENV=test part and it works!\nAre we supposed to run this command on development or test environment? From the README I assume it should be on development but I want to just make sure, since we were running the command in the test environment until 1.7.x and this is about a CI server so..\ncc @jejacks0n @mikepack.\n. Yep, just found out that we're doing this in config/environments/test.rb:\nruby\nconfig.action_controller.asset_host = \"http://assets.test.host\"\nWhich is not wrong in terms of the Rails app but it breaks up with teaspoon.\nHowever, the question is: what is the standard way to run the command (supposing this is about a CI server)? With RAILS_ENV='test' or without it? In other words, should we run it in the development environment or in the test environment?\nThanks @jejacks0n!\n. Not sure but since it resolved I'm closing this. I've left the asset host to the default one. Thanks.\n. ",
    "semanticart": "I'm not sure if \"fixture\" is the right word here, but I also could make use of a way to access static binary files from within teaspoon. I have some javascript that needs to reference some image files and I don't currently have a good place to put those files.\nCan you recommend a solution or workaround?\n. I'm not sure if \"fixture\" is the right word here, but I also could make use of a way to access static binary files from within teaspoon. I have some javascript that needs to reference some image files and I don't currently have a good place to put those files.\nCan you recommend a solution or workaround?\n. ",
    "ryanong": "Unfortunately the way this is tested ignores the actual capybara webkit code and would be quite difficult to actually do an integration test.\nThe problem is currently that the test will always return true no matter what because no error is raised. An error needs to be raised if the evaluated script is to be retried again.\n. more like skipped. The functionality that would make this fail is stubbed out and would only really fail if we added a 5 second sleep of some sort.\n. Unfortunately the way this is tested ignores the actual capybara webkit code and would be quite difficult to actually do an integration test.\nThe problem is currently that the test will always return true no matter what because no error is raised. An error needs to be raised if the evaluated script is to be retried again.\n. more like skipped. The functionality that would make this fail is stubbed out and would only really fail if we added a 5 second sleep of some sort.\n. ",
    "benpickles": "@mikepack that is a very good question... I don't really have an answer, it was just a surprise.\nI imagine those .../*s are the cause?\n2.2.3 :001 > Rails.application.config.assets.precompile\n => [#<Proc:0x007f81760db020@/Users/ben/.rvm/gems/ruby-2.2.3/gems/sprockets-rails-2.3.2/lib/sprockets/railtie.rb:60 (lambda)>, /(?:\\/|\\\\|\\A)application\\.(css|js)$/, \"teaspoon.css\", \"teaspoon-filterer.js\", \"teaspoon/*.js\", \"support/*.js\"]\n. @mikepack that is a very good question... I don't really have an answer, it was just a surprise.\nI imagine those .../*s are the cause?\n2.2.3 :001 > Rails.application.config.assets.precompile\n => [#<Proc:0x007f81760db020@/Users/ben/.rvm/gems/ruby-2.2.3/gems/sprockets-rails-2.3.2/lib/sprockets/railtie.rb:60 (lambda)>, /(?:\\/|\\\\|\\A)application\\.(css|js)$/, \"teaspoon.css\", \"teaspoon-filterer.js\", \"teaspoon/*.js\", \"support/*.js\"]\n. ",
    "ordinaryzelig": "Clearing the cache fixed it for me. https://github.com/rails/sprockets/issues/183#issuecomment-162203288\n. Not sure if the rake task is env-specific, but if it is, maybe it will help to throw in RAILS_ENV=test?\n. Clearing the cache fixed it for me. https://github.com/rails/sprockets/issues/183#issuecomment-162203288\n. Not sure if the rake task is env-specific, but if it is, maybe it will help to throw in RAILS_ENV=test?\n. ",
    "mihai-dinculescu": "I'm having the very same issue.\nClearing the cache does indeed fixes the rails app, but running tests throws \nFailure/Error: = stylesheet_link_tag    'application', media: 'all'\nLoadError:\n  cannot load such file -- coffee_script\nThe issue occurs with sprockets-rails 3.0.0 and teaspoon 1.1.2.\n. The tmp:clear task? I don't think so, but I have tried. I also manually deleted all the contents of the tmp folder, no luck.\nI can get it fixed only by:\na) Add gem 'coffee-rails' to the :test gem group.\nor\nb) Downgrade to sprockets-rails 2.3.3.\nTo me it looks like sprockets-rails 3.0.0 insists on requiring coffee-rails when used in conjunction with teaspoon.\n. To me it looks like teaspoon -needs- the coffee-rails gem when used in conjunction with sprockets-rails 3.X.\n. Minor note, locking sprockets-rails to the latest 2.X version should be enough for the workaround.\ngem 'sprockets-rails', '~> 2.0'\nThis will allow you to get security updates for both sprockets and sprockets-rails.\n. I'm having the very same issue.\nClearing the cache does indeed fixes the rails app, but running tests throws \nFailure/Error: = stylesheet_link_tag    'application', media: 'all'\nLoadError:\n  cannot load such file -- coffee_script\nThe issue occurs with sprockets-rails 3.0.0 and teaspoon 1.1.2.\n. The tmp:clear task? I don't think so, but I have tried. I also manually deleted all the contents of the tmp folder, no luck.\nI can get it fixed only by:\na) Add gem 'coffee-rails' to the :test gem group.\nor\nb) Downgrade to sprockets-rails 2.3.3.\nTo me it looks like sprockets-rails 3.0.0 insists on requiring coffee-rails when used in conjunction with teaspoon.\n. To me it looks like teaspoon -needs- the coffee-rails gem when used in conjunction with sprockets-rails 3.X.\n. Minor note, locking sprockets-rails to the latest 2.X version should be enough for the workaround.\ngem 'sprockets-rails', '~> 2.0'\nThis will allow you to get security updates for both sprockets and sprockets-rails.\n. ",
    "grantspeelman": "Adding gem coffee-script to the :test and :development gem group seems to fix it for me\n. Adding gem coffee-script to the :test and :development gem group seems to fix it for me\n. ",
    "sockmonk": "I found I only needed to add coffee-script to the :test gem group as a workaround. It's not needed in :development.\nWhy is this issue closed? Seems to still be an issue that needs to be resolved.\n. I've found that some specs run, but one spec sometimes gets ignored, depending on its contents. \nProgressively commenting things out will get the test to run; I haven't figured out yet what exactly it takes to trigger it.  When it does ignore the file, when running with the '-f documentation' flag, the output is:\n0 examples, 0 failures\nRunning Rails 4.2.7.1 and Teaspoon 1.1.5.\n. In my case, it was a subtle bug in the test file itself.  What was surprising was that it caused the whole file to be ignored, rather than show an error. That's javascript for ya.. I have a similar problem: \nWhen I run \"bin/teaspoon\", logging goes to log/development.log.\nWhen I run \"RAILS_ENV=test bin/teaspoon\", logging goes to log/test.log.\nI doublechecked, and by default RAILS_ENV is unset, so that isn't the problem. In my Gemfile, teaspoon-jasmine is in the 'development, test' block.\nRails 4.2.7.1, teaspoon 1.1.5, teaspoon-jasmine 2.3.4. I found I only needed to add coffee-script to the :test gem group as a workaround. It's not needed in :development.\nWhy is this issue closed? Seems to still be an issue that needs to be resolved.\n. I've found that some specs run, but one spec sometimes gets ignored, depending on its contents. \nProgressively commenting things out will get the test to run; I haven't figured out yet what exactly it takes to trigger it.  When it does ignore the file, when running with the '-f documentation' flag, the output is:\n0 examples, 0 failures\nRunning Rails 4.2.7.1 and Teaspoon 1.1.5.\n. In my case, it was a subtle bug in the test file itself.  What was surprising was that it caused the whole file to be ignored, rather than show an error. That's javascript for ya.. I have a similar problem: \nWhen I run \"bin/teaspoon\", logging goes to log/development.log.\nWhen I run \"RAILS_ENV=test bin/teaspoon\", logging goes to log/test.log.\nI doublechecked, and by default RAILS_ENV is unset, so that isn't the problem. In my Gemfile, teaspoon-jasmine is in the 'development, test' block.\nRails 4.2.7.1, teaspoon 1.1.5, teaspoon-jasmine 2.3.4. ",
    "yairgo": "I just ran into this also. I think this issue should be re-opened until there is a version of the gem that has coffee-script as a requirement. \n. I just ran into this also. I think this issue should be re-opened until there is a version of the gem that has coffee-script as a requirement. \n. ",
    "ktec": "Just installed teaspoon version 1.1.5 into a Rails 5.0.0 application, and have run into the same error as described when I run rake teaspoon and adding the coffee-script to the :test group worked for me.\n. Just installed teaspoon version 1.1.5 into a Rails 5.0.0 application, and have run into the same error as described when I run rake teaspoon and adding the coffee-script to the :test group worked for me.\n. ",
    "md5": "@mikepack The reason your test couldn't reproduce this is that a default scaffolded Rails app includes coffee-rails. I also don't think this problem is specifically related to assets:precompile.\nHere's a test that can reproduce this:\n```shell\n!/bin/sh\nset -e\nAPP=${1:-teaspoon-without-coffee}\nset -x\nrails new \"$APP\" --skip-spring --skip-coffee\ncd \"$APP\"\nbundle add --group development,test teaspoon-jasmine\nbundle exec rails generate teaspoon:install\necho 'describe(\"Coffee failure\", function() { it(\"fails\"); })' > spec/javascripts/coffee_failure_spec.js\nbundle exec rake teaspoon\n```\nHere's the output:\n``\n$ ./teaspoon_test.sh \n+ rails new teaspoon-without-coffee --skip-spring --skip-coffee\n      create  \n      create  README.md\n      create  Rakefile\n      create  config.ru\n      create  .gitignore\n      create  Gemfile\n         run  git init from \".\"\nInitialized empty Git repository in /tmp/teaspoon-without-coffee/.git/\n      create  app\n      create  app/assets/config/manifest.js\n      create  app/assets/javascripts/application.js\n      create  app/assets/javascripts/cable.js\n      create  app/assets/stylesheets/application.css\n      create  app/channels/application_cable/channel.rb\n      create  app/channels/application_cable/connection.rb\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/jobs/application_job.rb\n      create  app/mailers/application_mailer.rb\n      create  app/models/application_record.rb\n      create  app/views/layouts/application.html.erb\n      create  app/views/layouts/mailer.html.erb\n      create  app/views/layouts/mailer.text.erb\n      create  app/assets/images/.keep\n      create  app/assets/javascripts/channels\n      create  app/assets/javascripts/channels/.keep\n      create  app/controllers/concerns/.keep\n      create  app/models/concerns/.keep\n      create  bin\n      create  bin/bundle\n      create  bin/rails\n      create  bin/rake\n      create  bin/setup\n      create  bin/update\n      create  bin/yarn\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/secrets.yml\n      create  config/cable.yml\n      create  config/puma.rb\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/application_controller_renderer.rb\n      create  config/initializers/assets.rb\n      create  config/initializers/backtrace_silencers.rb\n      create  config/initializers/cookies_serializer.rb\n      create  config/initializers/cors.rb\n      create  config/initializers/filter_parameter_logging.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/mime_types.rb\n      create  config/initializers/new_framework_defaults_5_1.rb\n      create  config/initializers/wrap_parameters.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.keep\n      create  lib/assets\n      create  lib/assets/.keep\n      create  log\n      create  log/.keep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/apple-touch-icon-precomposed.png\n      create  public/apple-touch-icon.png\n      create  public/favicon.ico\n      create  public/robots.txt\n      create  test/fixtures\n      create  test/fixtures/.keep\n      create  test/fixtures/files\n      create  test/fixtures/files/.keep\n      create  test/controllers\n      create  test/controllers/.keep\n      create  test/mailers\n      create  test/mailers/.keep\n      create  test/models\n      create  test/models/.keep\n      create  test/helpers\n      create  test/helpers/.keep\n      create  test/integration\n      create  test/integration/.keep\n      create  test/test_helper.rb\n      create  test/system\n      create  test/system/.keep\n      create  test/application_system_test_case.rb\n      create  tmp\n      create  tmp/.keep\n      create  tmp/cache\n      create  tmp/cache/assets\n      create  vendor\n      create  vendor/.keep\n      create  package.json\n      remove  config/initializers/cors.rb\n      remove  config/initializers/new_framework_defaults_5_1.rb\n         run  bundle install\nThe dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, runbundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java.\nFetching gem metadata from https://rubygems.org/..........\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...\nUsing rake 12.0.0\nUsing concurrent-ruby 1.0.5\nUsing i18n 0.8.6\nUsing minitest 5.10.3\nUsing thread_safe 0.3.6\nUsing builder 3.2.3\nUsing erubi 1.6.1\nUsing mini_portile2 2.2.0\nUsing rack 2.0.3\nUsing nio4r 2.1.0\nUsing websocket-extensions 0.1.2\nUsing mime-types-data 3.2016.0521\nUsing arel 8.0.0\nUsing bundler 1.15.1\nUsing method_source 0.8.2\nUsing thor 0.20.0\nUsing sqlite3 1.3.13\nUsing puma 3.10.0\nUsing rb-fsevent 0.10.2\nUsing ffi 1.9.18\nUsing tilt 2.0.8\nUsing execjs 2.7.0\nUsing turbolinks-source 5.0.3\nUsing multi_json 1.12.1\nUsing byebug 9.0.6\nUsing public_suffix 2.0.5\nUsing mini_mime 0.1.4\nUsing rubyzip 1.2.1\nUsing bindex 0.5.0\nUsing ruby_dep 1.5.0\nUsing tzinfo 1.2.3\nUsing nokogiri 1.8.0\nUsing rack-test 0.6.3\nUsing sprockets 3.7.1\nUsing websocket-driver 0.6.5\nUsing mime-types 3.1\nUsing rb-inotify 0.9.10\nUsing childprocess 0.7.1\nUsing uglifier 3.2.0\nUsing turbolinks 5.0.1\nUsing addressable 2.5.1\nUsing activesupport 5.1.3\nUsing loofah 2.0.3\nUsing xpath 2.1.0\nUsing mail 2.6.6\nUsing sass-listen 4.0.0\nUsing listen 3.1.5\nUsing selenium-webdriver 3.5.1\nUsing rails-dom-testing 2.0.3\nUsing globalid 0.4.0\nUsing activemodel 5.1.3\nUsing jbuilder 2.7.0\nUsing rails-html-sanitizer 1.0.3\nUsing capybara 2.15.1\nUsing sass 3.5.1\nUsing activejob 5.1.3\nUsing activerecord 5.1.3\nUsing actionview 5.1.3\nUsing actionpack 5.1.3\nUsing actioncable 5.1.3\nUsing actionmailer 5.1.3\nUsing railties 5.1.3\nUsing sprockets-rails 3.2.0\nUsing web-console 3.5.1\nUsing rails 5.1.3\nUsing sass-rails 5.0.6\nBundle complete! 13 Gemfile dependencies, 66 gems now installed.\nUsebundle info [gemname]to see where a bundled gem is installed.\nThe latest bundler is 1.15.3, but you are currently running 1.15.1.\nTo update, rungem install bundler+ cd teaspoon-without-coffee\n+ bundle add --group development,test teaspoon-jasmine\nThe dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, runbundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java.\nFetching gem metadata from https://rubygems.org/.........\nFetching version metadata from https://rubygems.org/..\nFetching dependency metadata from https://rubygems.org/.\nResolving dependencies...\nResolving dependencies...\nUsing rake 12.0.0\nUsing concurrent-ruby 1.0.5\nUsing i18n 0.8.6\nUsing minitest 5.10.3\nUsing thread_safe 0.3.6\nUsing builder 3.2.3\nUsing erubi 1.6.1\nUsing mini_portile2 2.2.0\nUsing rack 2.0.3\nUsing nio4r 2.1.0\nUsing websocket-extensions 0.1.2\nUsing mime-types-data 3.2016.0521\nUsing arel 8.0.0\nUsing bundler 1.15.1\nUsing method_source 0.8.2\nUsing thor 0.20.0\nUsing sqlite3 1.3.13\nUsing puma 3.10.0\nUsing rb-fsevent 0.10.2\nUsing ffi 1.9.18\nUsing tilt 2.0.8\nUsing execjs 2.7.0\nUsing turbolinks-source 5.0.3\nUsing multi_json 1.12.1\nUsing byebug 9.0.6\nUsing public_suffix 2.0.5\nUsing mini_mime 0.1.4\nUsing rubyzip 1.2.1\nUsing bindex 0.5.0\nUsing ruby_dep 1.5.0\nUsing tzinfo 1.2.3\nUsing nokogiri 1.8.0\nUsing rack-test 0.6.3\nUsing sprockets 3.7.1\nUsing websocket-driver 0.6.5\nUsing mime-types 3.1\nUsing rb-inotify 0.9.10\nUsing childprocess 0.7.1\nUsing uglifier 3.2.0\nUsing turbolinks 5.0.1\nUsing addressable 2.5.1\nUsing activesupport 5.1.3\nUsing loofah 2.0.3\nUsing xpath 2.1.0\nUsing mail 2.6.6\nUsing sass-listen 4.0.0\nUsing listen 3.1.5\nUsing selenium-webdriver 3.5.1\nUsing rails-dom-testing 2.0.3\nUsing globalid 0.4.0\nUsing activemodel 5.1.3\nUsing jbuilder 2.7.0\nUsing rails-html-sanitizer 1.0.3\nUsing capybara 2.15.1\nUsing sass 3.5.1\nUsing activejob 5.1.3\nUsing activerecord 5.1.3\nUsing actionview 5.1.3\nUsing actionpack 5.1.3\nUsing actioncable 5.1.3\nUsing actionmailer 5.1.3\nUsing railties 5.1.3\nUsing sprockets-rails 3.2.0\nUsing web-console 3.5.1\nUsing teaspoon 1.1.5\nUsing rails 5.1.3\nUsing sass-rails 5.0.6\nUsing teaspoon-jasmine 2.3.4\nThe latest bundler is 1.15.3, but you are currently running 1.15.1.\nTo update, rungem install bundler`\n+ bundle exec rails generate teaspoon:install\n      create  spec/teaspoon_env.rb\n      create  spec/javascripts/support\n      create  spec/javascripts/fixtures\n      create  spec/javascripts/spec_helper.js\n+============================================================================+\nCongratulations!  Teaspoon was successfully installed.  Documentation and more\ncan be found at: https://github.com/modeset/teaspoon\n\necho 'describe(\"Coffee failure\", function() { it(\"fails\"); })'\nbundle exec rake teaspoon\nStarting the Teaspoon server...\nPuma starting in single mode...\nVersion 3.10.0 (ruby 2.3.1-p112), codename: Russell's Teapot\nMin threads: 5, max threads: 5\nEnvironment: test\nListening on tcp://127.0.0.1:64927\nUse Ctrl-C to stop\nTeaspoon running default suite at http://127.0.0.1:64927/teaspoon/default\nError: LoadError: cannot load such file -- coffee_script\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:inblock in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:258:in load_dependency'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:inrequire'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/autoload/coffee_script.rb:1:in <top (required)>'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:inrequire'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:in block in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:258:inload_dependency'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/coffee_script_processor.rb:15:incache_key'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/coffee_script_processor.rb:20:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:75:incall_processor'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:57:in block in call_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:inreverse_each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:in call_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:134:inload_from_unloaded'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:60:in block in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:317:infetch_asset_from_dependency_cache'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:44:in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:20:inblock in initialize'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:47:in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/bundle.rb:23:inblock in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/utils.rb:200:in dfs'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/bundle.rb:24:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:75:in call_processor'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:57:inblock in call_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:in reverse_each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:incall_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:134:in load_from_unloaded'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:60:inblock in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:317:in fetch_asset_from_dependency_cache'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:44:inload'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:20:in block in initialize'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:47:inload'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/base.rb:66:in find_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/base.rb:73:infind_all_linked_assets'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/manifest.rb:142:in block in find'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:114:inblock (2 levels) in logical_paths'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:228:in block in stat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:212:inblock in stat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:instat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:227:in stat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:231:inblock in stat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:212:in block in stat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:in stat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:227:instat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:105:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:105:inblock in logical_paths'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:104:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:104:inlogical_paths'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/manifest.rb:140:in find'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:50:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:50:in map'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:50:inprecompiled_assets'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:35:in asset_precompiled?'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:251:inblock (3 levels) in '\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:359:in precompiled?'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:363:inraise_unless_precompiled_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:348:in find_debug_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:229:inblock in lookup_debug_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:242:in block in resolve_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:241:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:241:in detect'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:241:inresolve_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:228:in lookup_debug_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:170:inblock in stylesheet_link_tag'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:169:in map'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:169:instylesheet_link_tag'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/teaspoon-1.1.5/app/views/teaspoon/suite/show.html.erb:8:in __usr_local_var_rbenv_versions_______lib_ruby_gems_______gems_teaspoon_______app_views_teaspoon_suite_show_html_erb___3307352600514365898_70224012487880'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/template.rb:157:inblock in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:168:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/template.rb:352:ininstrument_render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/template.rb:155:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:52:inblock (2 levels) in render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/abstract_renderer.rb:42:in block in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:inblock in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications/instrumenter.rb:21:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:ininstrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/abstract_renderer.rb:41:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:51:inblock in render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:59:in render_with_layout'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:50:inrender_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:14:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/renderer.rb:42:inrender_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/renderer.rb:23:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/rendering.rb:103:in_render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/streaming.rb:217:in _render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/rendering.rb:83:inrender_to_body'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rendering.rb:52:in render_to_body'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/renderers.rb:141:inrender_to_body'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/rendering.rb:24:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rendering.rb:36:inrender'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:44:in block (2 levels) in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/core_ext/benchmark.rb:12:inblock in ms'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/2.3.0/benchmark.rb:308:in realtime'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/core_ext/benchmark.rb:12:inms'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:44:in block in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:87:incleanup_view_runtime'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activerecord-5.1.3/lib/active_record/railties/controller_runtime.rb:34:in cleanup_view_runtime'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:43:inrender'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/implicit_render.rb:33:in default_render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/basic_implicit_render.rb:4:inblock in send_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/basic_implicit_render.rb:4:in tap'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/basic_implicit_render.rb:4:insend_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/base.rb:186:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rendering.rb:30:inprocess_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/callbacks.rb:20:in block in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/callbacks.rb:131:inrun_callbacks'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/callbacks.rb:19:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rescue.rb:20:inprocess_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:32:in block in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:inblock in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications/instrumenter.rb:21:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:ininstrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:30:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/params_wrapper.rb:252:inprocess_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activerecord-5.1.3/lib/active_record/railties/controller_runtime.rb:22:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/base.rb:124:inprocess'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/rendering.rb:30:in process'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal.rb:189:indispatch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal.rb:253:in dispatch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:49:indispatch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:31:in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:46:inblock in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:inserve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:834:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/engine.rb:522:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/railtie.rb:185:in public_send'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/railtie.rb:185:inmethod_missing'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/mapper.rb:17:in block in <class:Constraints>'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/mapper.rb:46:inserve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:46:in block in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:834:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/etag.rb:25:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/conditional_get.rb:25:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/head.rb:12:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/session/abstract/id.rb:232:incontext'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/session/abstract/id.rb:226:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/cookies.rb:613:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activerecord-5.1.3/lib/active_record/migration.rb:556:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/callbacks.rb:26:inblock in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/callbacks.rb:97:in run_callbacks'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/callbacks.rb:24:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/executor.rb:12:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/debug_exceptions.rb:59:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:135:in call_app'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:28:inblock in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:18:in catch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:18:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/show_exceptions.rb:31:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/rack/logger.rb:36:incall_app'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/rack/logger.rb:24:in block in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/tagged_logging.rb:69:inblock in tagged'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/tagged_logging.rb:26:in tagged'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/tagged_logging.rb:69:intagged'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/rack/logger.rb:24:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/quiet_assets.rb:13:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/remote_ip.rb:79:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/request_id.rb:25:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/method_override.rb:22:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/runtime.rb:22:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/cache/strategy/local_cache_middleware.rb:27:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/executor.rb:12:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/static.rb:125:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/sendfile.rb:111:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/engine.rb:522:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/configuration.rb:225:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/server.rb:605:in handle_request'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/server.rb:437:inprocess_client'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/server.rb:301:in block in run'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/thread_pool.rb:120:inblock in spawn_thread'\n  # /teaspoon/default?reporter=Console:1 -- global code\n\nFailed to load: http://127.0.0.1:64927/teaspoon/default?reporter=Console\nrake teaspoon failed\nThe latest bundler is 1.15.3, but you are currently running 1.15.1.\nTo update, run gem install bundler\n``. I've opened https://github.com/jejacks0n/teaspoon/pull/528 to fix this.. Looks like the Travis failures are not specific to this branch. I see the same failures for other recent PRs.. @mikepack The reason your test couldn't reproduce this is that a default scaffolded Rails app includescoffee-rails. I also don't think this problem is specifically related toassets:precompile`.\nHere's a test that can reproduce this:\n```shell\n!/bin/sh\nset -e\nAPP=${1:-teaspoon-without-coffee}\nset -x\nrails new \"$APP\" --skip-spring --skip-coffee\ncd \"$APP\"\nbundle add --group development,test teaspoon-jasmine\nbundle exec rails generate teaspoon:install\necho 'describe(\"Coffee failure\", function() { it(\"fails\"); })' > spec/javascripts/coffee_failure_spec.js\nbundle exec rake teaspoon\n```\nHere's the output:\n``\n$ ./teaspoon_test.sh \n+ rails new teaspoon-without-coffee --skip-spring --skip-coffee\n      create  \n      create  README.md\n      create  Rakefile\n      create  config.ru\n      create  .gitignore\n      create  Gemfile\n         run  git init from \".\"\nInitialized empty Git repository in /tmp/teaspoon-without-coffee/.git/\n      create  app\n      create  app/assets/config/manifest.js\n      create  app/assets/javascripts/application.js\n      create  app/assets/javascripts/cable.js\n      create  app/assets/stylesheets/application.css\n      create  app/channels/application_cable/channel.rb\n      create  app/channels/application_cable/connection.rb\n      create  app/controllers/application_controller.rb\n      create  app/helpers/application_helper.rb\n      create  app/jobs/application_job.rb\n      create  app/mailers/application_mailer.rb\n      create  app/models/application_record.rb\n      create  app/views/layouts/application.html.erb\n      create  app/views/layouts/mailer.html.erb\n      create  app/views/layouts/mailer.text.erb\n      create  app/assets/images/.keep\n      create  app/assets/javascripts/channels\n      create  app/assets/javascripts/channels/.keep\n      create  app/controllers/concerns/.keep\n      create  app/models/concerns/.keep\n      create  bin\n      create  bin/bundle\n      create  bin/rails\n      create  bin/rake\n      create  bin/setup\n      create  bin/update\n      create  bin/yarn\n      create  config\n      create  config/routes.rb\n      create  config/application.rb\n      create  config/environment.rb\n      create  config/secrets.yml\n      create  config/cable.yml\n      create  config/puma.rb\n      create  config/environments\n      create  config/environments/development.rb\n      create  config/environments/production.rb\n      create  config/environments/test.rb\n      create  config/initializers\n      create  config/initializers/application_controller_renderer.rb\n      create  config/initializers/assets.rb\n      create  config/initializers/backtrace_silencers.rb\n      create  config/initializers/cookies_serializer.rb\n      create  config/initializers/cors.rb\n      create  config/initializers/filter_parameter_logging.rb\n      create  config/initializers/inflections.rb\n      create  config/initializers/mime_types.rb\n      create  config/initializers/new_framework_defaults_5_1.rb\n      create  config/initializers/wrap_parameters.rb\n      create  config/locales\n      create  config/locales/en.yml\n      create  config/boot.rb\n      create  config/database.yml\n      create  db\n      create  db/seeds.rb\n      create  lib\n      create  lib/tasks\n      create  lib/tasks/.keep\n      create  lib/assets\n      create  lib/assets/.keep\n      create  log\n      create  log/.keep\n      create  public\n      create  public/404.html\n      create  public/422.html\n      create  public/500.html\n      create  public/apple-touch-icon-precomposed.png\n      create  public/apple-touch-icon.png\n      create  public/favicon.ico\n      create  public/robots.txt\n      create  test/fixtures\n      create  test/fixtures/.keep\n      create  test/fixtures/files\n      create  test/fixtures/files/.keep\n      create  test/controllers\n      create  test/controllers/.keep\n      create  test/mailers\n      create  test/mailers/.keep\n      create  test/models\n      create  test/models/.keep\n      create  test/helpers\n      create  test/helpers/.keep\n      create  test/integration\n      create  test/integration/.keep\n      create  test/test_helper.rb\n      create  test/system\n      create  test/system/.keep\n      create  test/application_system_test_case.rb\n      create  tmp\n      create  tmp/.keep\n      create  tmp/cache\n      create  tmp/cache/assets\n      create  vendor\n      create  vendor/.keep\n      create  package.json\n      remove  config/initializers/cors.rb\n      remove  config/initializers/new_framework_defaults_5_1.rb\n         run  bundle install\nThe dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, runbundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java.\nFetching gem metadata from https://rubygems.org/..........\nFetching version metadata from https://rubygems.org/...\nFetching dependency metadata from https://rubygems.org/..\nResolving dependencies...\nUsing rake 12.0.0\nUsing concurrent-ruby 1.0.5\nUsing i18n 0.8.6\nUsing minitest 5.10.3\nUsing thread_safe 0.3.6\nUsing builder 3.2.3\nUsing erubi 1.6.1\nUsing mini_portile2 2.2.0\nUsing rack 2.0.3\nUsing nio4r 2.1.0\nUsing websocket-extensions 0.1.2\nUsing mime-types-data 3.2016.0521\nUsing arel 8.0.0\nUsing bundler 1.15.1\nUsing method_source 0.8.2\nUsing thor 0.20.0\nUsing sqlite3 1.3.13\nUsing puma 3.10.0\nUsing rb-fsevent 0.10.2\nUsing ffi 1.9.18\nUsing tilt 2.0.8\nUsing execjs 2.7.0\nUsing turbolinks-source 5.0.3\nUsing multi_json 1.12.1\nUsing byebug 9.0.6\nUsing public_suffix 2.0.5\nUsing mini_mime 0.1.4\nUsing rubyzip 1.2.1\nUsing bindex 0.5.0\nUsing ruby_dep 1.5.0\nUsing tzinfo 1.2.3\nUsing nokogiri 1.8.0\nUsing rack-test 0.6.3\nUsing sprockets 3.7.1\nUsing websocket-driver 0.6.5\nUsing mime-types 3.1\nUsing rb-inotify 0.9.10\nUsing childprocess 0.7.1\nUsing uglifier 3.2.0\nUsing turbolinks 5.0.1\nUsing addressable 2.5.1\nUsing activesupport 5.1.3\nUsing loofah 2.0.3\nUsing xpath 2.1.0\nUsing mail 2.6.6\nUsing sass-listen 4.0.0\nUsing listen 3.1.5\nUsing selenium-webdriver 3.5.1\nUsing rails-dom-testing 2.0.3\nUsing globalid 0.4.0\nUsing activemodel 5.1.3\nUsing jbuilder 2.7.0\nUsing rails-html-sanitizer 1.0.3\nUsing capybara 2.15.1\nUsing sass 3.5.1\nUsing activejob 5.1.3\nUsing activerecord 5.1.3\nUsing actionview 5.1.3\nUsing actionpack 5.1.3\nUsing actioncable 5.1.3\nUsing actionmailer 5.1.3\nUsing railties 5.1.3\nUsing sprockets-rails 3.2.0\nUsing web-console 3.5.1\nUsing rails 5.1.3\nUsing sass-rails 5.0.6\nBundle complete! 13 Gemfile dependencies, 66 gems now installed.\nUsebundle info [gemname]to see where a bundled gem is installed.\nThe latest bundler is 1.15.3, but you are currently running 1.15.1.\nTo update, rungem install bundler+ cd teaspoon-without-coffee\n+ bundle add --group development,test teaspoon-jasmine\nThe dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing for ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, runbundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java.\nFetching gem metadata from https://rubygems.org/.........\nFetching version metadata from https://rubygems.org/..\nFetching dependency metadata from https://rubygems.org/.\nResolving dependencies...\nResolving dependencies...\nUsing rake 12.0.0\nUsing concurrent-ruby 1.0.5\nUsing i18n 0.8.6\nUsing minitest 5.10.3\nUsing thread_safe 0.3.6\nUsing builder 3.2.3\nUsing erubi 1.6.1\nUsing mini_portile2 2.2.0\nUsing rack 2.0.3\nUsing nio4r 2.1.0\nUsing websocket-extensions 0.1.2\nUsing mime-types-data 3.2016.0521\nUsing arel 8.0.0\nUsing bundler 1.15.1\nUsing method_source 0.8.2\nUsing thor 0.20.0\nUsing sqlite3 1.3.13\nUsing puma 3.10.0\nUsing rb-fsevent 0.10.2\nUsing ffi 1.9.18\nUsing tilt 2.0.8\nUsing execjs 2.7.0\nUsing turbolinks-source 5.0.3\nUsing multi_json 1.12.1\nUsing byebug 9.0.6\nUsing public_suffix 2.0.5\nUsing mini_mime 0.1.4\nUsing rubyzip 1.2.1\nUsing bindex 0.5.0\nUsing ruby_dep 1.5.0\nUsing tzinfo 1.2.3\nUsing nokogiri 1.8.0\nUsing rack-test 0.6.3\nUsing sprockets 3.7.1\nUsing websocket-driver 0.6.5\nUsing mime-types 3.1\nUsing rb-inotify 0.9.10\nUsing childprocess 0.7.1\nUsing uglifier 3.2.0\nUsing turbolinks 5.0.1\nUsing addressable 2.5.1\nUsing activesupport 5.1.3\nUsing loofah 2.0.3\nUsing xpath 2.1.0\nUsing mail 2.6.6\nUsing sass-listen 4.0.0\nUsing listen 3.1.5\nUsing selenium-webdriver 3.5.1\nUsing rails-dom-testing 2.0.3\nUsing globalid 0.4.0\nUsing activemodel 5.1.3\nUsing jbuilder 2.7.0\nUsing rails-html-sanitizer 1.0.3\nUsing capybara 2.15.1\nUsing sass 3.5.1\nUsing activejob 5.1.3\nUsing activerecord 5.1.3\nUsing actionview 5.1.3\nUsing actionpack 5.1.3\nUsing actioncable 5.1.3\nUsing actionmailer 5.1.3\nUsing railties 5.1.3\nUsing sprockets-rails 3.2.0\nUsing web-console 3.5.1\nUsing teaspoon 1.1.5\nUsing rails 5.1.3\nUsing sass-rails 5.0.6\nUsing teaspoon-jasmine 2.3.4\nThe latest bundler is 1.15.3, but you are currently running 1.15.1.\nTo update, rungem install bundler`\n+ bundle exec rails generate teaspoon:install\n      create  spec/teaspoon_env.rb\n      create  spec/javascripts/support\n      create  spec/javascripts/fixtures\n      create  spec/javascripts/spec_helper.js\n+============================================================================+\nCongratulations!  Teaspoon was successfully installed.  Documentation and more\ncan be found at: https://github.com/modeset/teaspoon\n\necho 'describe(\"Coffee failure\", function() { it(\"fails\"); })'\nbundle exec rake teaspoon\nStarting the Teaspoon server...\nPuma starting in single mode...\nVersion 3.10.0 (ruby 2.3.1-p112), codename: Russell's Teapot\nMin threads: 5, max threads: 5\nEnvironment: test\nListening on tcp://127.0.0.1:64927\nUse Ctrl-C to stop\nTeaspoon running default suite at http://127.0.0.1:64927/teaspoon/default\nError: LoadError: cannot load such file -- coffee_script\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:inblock in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:258:in load_dependency'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:inrequire'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/autoload/coffee_script.rb:1:in <top (required)>'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:inrequire'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:in block in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:258:inload_dependency'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/dependencies.rb:292:in require'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/coffee_script_processor.rb:15:incache_key'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/coffee_script_processor.rb:20:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:75:incall_processor'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:57:in block in call_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:inreverse_each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:in call_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:134:inload_from_unloaded'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:60:in block in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:317:infetch_asset_from_dependency_cache'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:44:in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:20:inblock in initialize'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:47:in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/bundle.rb:23:inblock in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/utils.rb:200:in dfs'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/bundle.rb:24:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:75:in call_processor'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:57:inblock in call_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:in reverse_each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/processor_utils.rb:56:incall_processors'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:134:in load_from_unloaded'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:60:inblock in load'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:317:in fetch_asset_from_dependency_cache'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/loader.rb:44:inload'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:20:in block in initialize'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/cached_environment.rb:47:inload'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/base.rb:66:in find_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/base.rb:73:infind_all_linked_assets'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/manifest.rb:142:in block in find'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:114:inblock (2 levels) in logical_paths'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:228:in block in stat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:212:inblock in stat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:instat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:227:in stat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:231:inblock in stat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:212:in block in stat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:209:in stat_directory'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/path_utils.rb:227:instat_tree'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:105:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:105:inblock in logical_paths'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:104:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/legacy.rb:104:inlogical_paths'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-3.7.1/lib/sprockets/manifest.rb:140:in find'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:50:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:50:in map'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:50:inprecompiled_assets'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:35:in asset_precompiled?'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/railtie.rb:251:inblock (3 levels) in '\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:359:in precompiled?'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:363:inraise_unless_precompiled_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:348:in find_debug_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:229:inblock in lookup_debug_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:242:in block in resolve_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:241:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:241:in detect'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:241:inresolve_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:228:in lookup_debug_asset'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:170:inblock in stylesheet_link_tag'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:169:in map'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/helper.rb:169:instylesheet_link_tag'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/teaspoon-1.1.5/app/views/teaspoon/suite/show.html.erb:8:in __usr_local_var_rbenv_versions_______lib_ruby_gems_______gems_teaspoon_______app_views_teaspoon_suite_show_html_erb___3307352600514365898_70224012487880'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/template.rb:157:inblock in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:168:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/template.rb:352:ininstrument_render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/template.rb:155:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:52:inblock (2 levels) in render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/abstract_renderer.rb:42:in block in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:inblock in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications/instrumenter.rb:21:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:ininstrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/abstract_renderer.rb:41:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:51:inblock in render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:59:in render_with_layout'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:50:inrender_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/template_renderer.rb:14:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/renderer.rb:42:inrender_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/renderer/renderer.rb:23:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/rendering.rb:103:in_render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/streaming.rb:217:in _render_template'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/rendering.rb:83:inrender_to_body'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rendering.rb:52:in render_to_body'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/renderers.rb:141:inrender_to_body'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/rendering.rb:24:in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rendering.rb:36:inrender'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:44:in block (2 levels) in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/core_ext/benchmark.rb:12:inblock in ms'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/2.3.0/benchmark.rb:308:in realtime'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/core_ext/benchmark.rb:12:inms'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:44:in block in render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:87:incleanup_view_runtime'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activerecord-5.1.3/lib/active_record/railties/controller_runtime.rb:34:in cleanup_view_runtime'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:43:inrender'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/implicit_render.rb:33:in default_render'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/basic_implicit_render.rb:4:inblock in send_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/basic_implicit_render.rb:4:in tap'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/basic_implicit_render.rb:4:insend_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/base.rb:186:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rendering.rb:30:inprocess_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/callbacks.rb:20:in block in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/callbacks.rb:131:inrun_callbacks'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/callbacks.rb:19:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/rescue.rb:20:inprocess_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:32:in block in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:inblock in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications/instrumenter.rb:21:in instrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/notifications.rb:166:ininstrument'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/instrumentation.rb:30:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal/params_wrapper.rb:252:inprocess_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activerecord-5.1.3/lib/active_record/railties/controller_runtime.rb:22:in process_action'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/abstract_controller/base.rb:124:inprocess'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionview-5.1.3/lib/action_view/rendering.rb:30:in process'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal.rb:189:indispatch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_controller/metal.rb:253:in dispatch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:49:indispatch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:31:in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:46:inblock in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:in each'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:inserve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:834:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/engine.rb:522:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/railtie.rb:185:in public_send'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/railtie.rb:185:inmethod_missing'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/mapper.rb:17:in block in <class:Constraints>'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/mapper.rb:46:inserve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:46:in block in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:ineach'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/journey/router.rb:33:in serve'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/routing/route_set.rb:834:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/etag.rb:25:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/conditional_get.rb:25:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/head.rb:12:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/session/abstract/id.rb:232:incontext'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/session/abstract/id.rb:226:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/cookies.rb:613:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activerecord-5.1.3/lib/active_record/migration.rb:556:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/callbacks.rb:26:inblock in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/callbacks.rb:97:in run_callbacks'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/callbacks.rb:24:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/executor.rb:12:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/debug_exceptions.rb:59:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:135:in call_app'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:28:inblock in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:18:in catch'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/web-console-3.5.1/lib/web_console/middleware.rb:18:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/show_exceptions.rb:31:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/rack/logger.rb:36:incall_app'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/rack/logger.rb:24:in block in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/tagged_logging.rb:69:inblock in tagged'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/tagged_logging.rb:26:in tagged'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/tagged_logging.rb:69:intagged'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/rack/logger.rb:24:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/sprockets-rails-3.2.0/lib/sprockets/rails/quiet_assets.rb:13:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/remote_ip.rb:79:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/request_id.rb:25:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/method_override.rb:22:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/runtime.rb:22:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/activesupport-5.1.3/lib/active_support/cache/strategy/local_cache_middleware.rb:27:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/executor.rb:12:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/actionpack-5.1.3/lib/action_dispatch/middleware/static.rb:125:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/rack-2.0.3/lib/rack/sendfile.rb:111:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/railties-5.1.3/lib/rails/engine.rb:522:in call'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/configuration.rb:225:incall'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/server.rb:605:in handle_request'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/server.rb:437:inprocess_client'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/server.rb:301:in block in run'\n/usr/local/var/rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/puma-3.10.0/lib/puma/thread_pool.rb:120:inblock in spawn_thread'\n  # /teaspoon/default?reporter=Console:1 -- global code\n\nFailed to load: http://127.0.0.1:64927/teaspoon/default?reporter=Console\nrake teaspoon failed\nThe latest bundler is 1.15.3, but you are currently running 1.15.1.\nTo update, run gem install bundler\n```. I've opened https://github.com/jejacks0n/teaspoon/pull/528 to fix this.. Looks like the Travis failures are not specific to this branch. I see the same failures for other recent PRs.. ",
    "JakeLaCombe": "I'm running into this issue as well. In fact, just adding teaspoon-jasmine to the gemfile and running bundle install causes the precompilation task to fail.. I'm running into this issue as well. In fact, just adding teaspoon-jasmine to the gemfile and running bundle install causes the precompilation task to fail.. ",
    "sumandroid": "clearly, clearing your cache does not fix the issue.\nyou need to include gem 'coffee-rails' in your assets group in your Gemfile run bundle install and everything will work fine.. clearly, clearing your cache does not fix the issue.\nyou need to include gem 'coffee-rails' in your assets group in your Gemfile run bundle install and everything will work fine.. ",
    "bouk": "@jejacks0n seemed to have been a fluke\n. previous issues; https://github.com/modeset/teaspoon/issues/445 https://github.com/modeset/teaspoon/issues/425 \n. fixed in #480\n. ah woops that's a copy paste error, fixed\n. I'm already handling when there is an existing onerror handler.\nI think for this to only do its thing when you're in a console report makes sense, but doesn't that mean just PhantomJS gets this right now? What if someone is using Selenium (which I would assume some people are for CI?)\nAlso, what do you want me to change about that integration test? Because it's behaving as expected with the new behaviour, do you want the call to foo() removed or the expected output to change?\n. @jejacks0n I've added a spec for the onerror handler\nWhat do you want me to do about the integration tests? Should I remove the foo() call that makes it fail?\n. @jejacks0n I've added a broken spec helper test and fixed the other tests, and it has passed CI!\n. @jejacks0n I've updated the hound config to exclude the generated files\n. CI is done, and no problem! I'd much appreciate it if you cut a release \ud83d\ude04 \n. @jejacks0n just checking in, don't think there's been a release yet\n. The best fix for the pipeline stuff is maybe just to do something different depending on the sprockets version. I have a hacky patch here: https://github.com/bouk/teaspoon/commit/9dab441203c5dcbf63bc203920dfa7ba1833d90c that only sets the pipeline to debug if the sprockets version is >= 4 and this fixes the issue of sprockets directives not working when expand_assets = false on master\n. for review @jejacks0n \n. @jejacks0n seemed to have been a fluke\n. previous issues; https://github.com/modeset/teaspoon/issues/445 https://github.com/modeset/teaspoon/issues/425 \n. fixed in #480\n. ah woops that's a copy paste error, fixed\n. I'm already handling when there is an existing onerror handler.\nI think for this to only do its thing when you're in a console report makes sense, but doesn't that mean just PhantomJS gets this right now? What if someone is using Selenium (which I would assume some people are for CI?)\nAlso, what do you want me to change about that integration test? Because it's behaving as expected with the new behaviour, do you want the call to foo() removed or the expected output to change?\n. @jejacks0n I've added a spec for the onerror handler\nWhat do you want me to do about the integration tests? Should I remove the foo() call that makes it fail?\n. @jejacks0n I've added a broken spec helper test and fixed the other tests, and it has passed CI!\n. @jejacks0n I've updated the hound config to exclude the generated files\n. CI is done, and no problem! I'd much appreciate it if you cut a release \ud83d\ude04 \n. @jejacks0n just checking in, don't think there's been a release yet\n. The best fix for the pipeline stuff is maybe just to do something different depending on the sprockets version. I have a hacky patch here: https://github.com/bouk/teaspoon/commit/9dab441203c5dcbf63bc203920dfa7ba1833d90c that only sets the pipeline to debug if the sprockets version is >= 4 and this fixes the issue of sprockets directives not working when expand_assets = false on master\n. for review @jejacks0n \n. ",
    "robinpokorny": "I had this problem as well. The default suite caused some problems when run.\nSo I set suite.matcher = nil in the default suite configuration and override the matcher in the named suites. This way default is still present but it is empty.\n. I had this problem as well. The default suite caused some problems when run.\nSo I set suite.matcher = nil in the default suite configuration and override the matcher in the named suites. This way default is still present but it is empty.\n. ",
    "lexi-lambda": "Yes, it appears to be a PhantomJS issue. Thanks! It seems that passing the --ignore-ssl-errors=yes flag fixed the problem, which is obviously preferable over using Selenium.\n...however, this did lead to my discovery of a separate problem, which I've noted in issue #413.\n. Yes, it appears to be a PhantomJS issue. Thanks! It seems that passing the --ignore-ssl-errors=yes flag fixed the problem, which is obviously preferable over using Selenium.\n...however, this did lead to my discovery of a separate problem, which I've noted in issue #413.\n. ",
    "thbar": "Closed this one in favor of #415 (I used the wrong github handle).\n. Hi!\n\ndoes the normal focus behavior of Teaspoon work correctly?\n\nI didn't know Teaspoon supported some sort of focus, so I looked at the readme. Do you mean this?\nIf so I just tested and indeed it works.\n\nThe funny thing is, I didn't know this was a thing until just now, but it seems like support should be added for it.\n\nI'm using RSpec a lot together with Guard (automatic spec running), and there focus: true is very nice to focus without leaving the editor (I just keep my Guard / RSpec output on half of the screen).\nFor Teaspoon I also use Guard, so being able to just save a file with fit in it would indeed be very convenient.\nAgain, not a blocker, but maybe something to add at some point!\n. @mikepack I just tested against e5e54a5f91876d13558d4d94fd82c53d9b50ed88 and both fit and fdescribe worked as expected. Thanks for the fix!\n. I faced the same issue with 1.1.4. Updating to master today (2.4.1) fixed it.\n. @thebravoman thanks for the report. Indeed it was complicated to track down and I was starting to wonder if it was an incompatibility with the most recent phantomjs, for instance.. Closed this one in favor of #415 (I used the wrong github handle).\n. Hi!\n\ndoes the normal focus behavior of Teaspoon work correctly?\n\nI didn't know Teaspoon supported some sort of focus, so I looked at the readme. Do you mean this?\nIf so I just tested and indeed it works.\n\nThe funny thing is, I didn't know this was a thing until just now, but it seems like support should be added for it.\n\nI'm using RSpec a lot together with Guard (automatic spec running), and there focus: true is very nice to focus without leaving the editor (I just keep my Guard / RSpec output on half of the screen).\nFor Teaspoon I also use Guard, so being able to just save a file with fit in it would indeed be very convenient.\nAgain, not a blocker, but maybe something to add at some point!\n. @mikepack I just tested against e5e54a5f91876d13558d4d94fd82c53d9b50ed88 and both fit and fdescribe worked as expected. Thanks for the fix!\n. I faced the same issue with 1.1.4. Updating to master today (2.4.1) fixed it.\n. @thebravoman thanks for the report. Indeed it was complicated to track down and I was starting to wonder if it was an incompatibility with the most recent phantomjs, for instance.. ",
    "terevos": "Not sure what other info you might need, but I'm happy to provide more.\n. Thanks for getting back to me so quickly.\nmikepack, \nusers/edit.js.erb is under app/assets/javascripts. It's not in the assets pipeline (for various reasons).\nThe test does run, yes, but it doesn't matter whether I use parens for userValidate or not. I get the same result. table_prep test returns true and userValidate gives the exception. Those two functions are very similar in the assets. \nI've even tried copy and pasting userValidate function into the table_prep.js - it then loaded up fine and returned true.\nSo only when it's outside the assets pipeline do I have trouble. If I manually require a javascript, it doesn't seem to make the functions in that js asset file available in the spec.\n. Not sure what other info you might need, but I'm happy to provide more.\n. Thanks for getting back to me so quickly.\nmikepack, \nusers/edit.js.erb is under app/assets/javascripts. It's not in the assets pipeline (for various reasons).\nThe test does run, yes, but it doesn't matter whether I use parens for userValidate or not. I get the same result. table_prep test returns true and userValidate gives the exception. Those two functions are very similar in the assets. \nI've even tried copy and pasting userValidate function into the table_prep.js - it then loaded up fine and returned true.\nSo only when it's outside the assets pipeline do I have trouble. If I manually require a javascript, it doesn't seem to make the functions in that js asset file available in the spec.\n. ",
    "toppa": "...And as soon as I posted that, I think I've realized the problem. I have a series of \"CustomerValueModel\" classes, and a test file for each one. The class files each live in different subdirectories, but they all have the same class name. In the web app, there is one loaded per page, so they never interfere with each other. I'm guessing in Teaspoon, when I run the suite, they are colliding with each other in some fashion (I require each class file at the top of its test file). All the errors happen in method calls, with \"Failure/Error: undefined is not a constructor\". Is there a way to isolate the runs of each test file from the others, short of making a separate Teaspoon suite for every test file?\n. And I resolved it by reworking the app structure a bit so all the class names are unique. Now my test suite is running fine. I am my own rubber duck.\n. ...And as soon as I posted that, I think I've realized the problem. I have a series of \"CustomerValueModel\" classes, and a test file for each one. The class files each live in different subdirectories, but they all have the same class name. In the web app, there is one loaded per page, so they never interfere with each other. I'm guessing in Teaspoon, when I run the suite, they are colliding with each other in some fashion (I require each class file at the top of its test file). All the errors happen in method calls, with \"Failure/Error: undefined is not a constructor\". Is there a way to isolate the runs of each test file from the others, short of making a separate Teaspoon suite for every test file?\n. And I resolved it by reworking the app structure a bit so all the class names are unique. Now my test suite is running fine. I am my own rubber duck.\n. ",
    "schneems": "That will probably do it, thanks for the quick response!\n. That will probably do it, thanks for the quick response!\n. ",
    "pratik60": "@mikepack @jejacks0n - We have 302 tests that are there...Because of a parse error, I'm assuming in the tests itself, some of them just didn't run! \nSurely that is something that should be caught by teaspoon?\n. @mikepack @jejacks0n - We have 302 tests that are there...Because of a parse error, I'm assuming in the tests itself, some of them just didn't run! \nSurely that is something that should be caught by teaspoon?\n. ",
    "kprinssu": "You'll need to run the webserver via rails s and go to http://localhost:3000/teaspoon to get console output. \n. You'll need to run the webserver via rails s and go to http://localhost:3000/teaspoon to get console output. \n. ",
    "starsirius": "+1\n. @jejacks0n Thanks for taking a look. I've tried using the above branch, but now it looks like not running the specs and just exits. Will try to take a closer look, but for your information, this is all I got now:\n```\n$ RAILS_ENV=test bundle exec teaspoon\nwarning: parser/current is loading parser/ruby22, which recognizes\nwarning: 2.2-compliant syntax, but you are running 2.3.0.\nwarning: please see https://github.com/whitequark/parser#compatibility-with-ruby-mri.\nI, [2016-04-11T16:14:28.244418 #11913]  INFO -- : ** [Raven] Raven 0.13.2 configured not to send errors.\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:54923/teaspoon/default\n$ \n``\n. @jejacks0n Confirmed that using capybara-webkit 1.10.1 works. It's running the tests and outputting theconsole.log`s as long as outputs from other libraries! \ud83d\udc4d  For example, the warning from React:\n\nWarning: React.render is deprecated. Please use ReactDOM.render from require('react-dom') instead.\n\nHowever, it seems like I can only get at most 2 outputs and the result is not reliable. For example, given the following test\ncoffeescript\nit 'outputs console.log', ->\n  console.log 777\n  console.log 'string'\n  console.log { a: 1, b: 2 }\n  console.log [{ a: 1, b: 2 }]\n  fixture.set(\"<h2>Another Title</h2>\")\nIt sometimes outputs\noutputs console.log\n  # 777\n  # string\nsometimes\noutputs console.log\n  # 777[object Object]\n. Thanks, @jejacks0n!\n. +1\n. @jejacks0n Thanks for taking a look. I've tried using the above branch, but now it looks like not running the specs and just exits. Will try to take a closer look, but for your information, this is all I got now:\n```\n$ RAILS_ENV=test bundle exec teaspoon\nwarning: parser/current is loading parser/ruby22, which recognizes\nwarning: 2.2-compliant syntax, but you are running 2.3.0.\nwarning: please see https://github.com/whitequark/parser#compatibility-with-ruby-mri.\nI, [2016-04-11T16:14:28.244418 #11913]  INFO -- : ** [Raven] Raven 0.13.2 configured not to send errors.\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:54923/teaspoon/default\n$ \n``\n. @jejacks0n Confirmed that using capybara-webkit 1.10.1 works. It's running the tests and outputting theconsole.log`s as long as outputs from other libraries! \ud83d\udc4d  For example, the warning from React:\n\nWarning: React.render is deprecated. Please use ReactDOM.render from require('react-dom') instead.\n\nHowever, it seems like I can only get at most 2 outputs and the result is not reliable. For example, given the following test\ncoffeescript\nit 'outputs console.log', ->\n  console.log 777\n  console.log 'string'\n  console.log { a: 1, b: 2 }\n  console.log [{ a: 1, b: 2 }]\n  fixture.set(\"<h2>Another Title</h2>\")\nIt sometimes outputs\noutputs console.log\n  # 777\n  # string\nsometimes\noutputs console.log\n  # 777[object Object]\n. Thanks, @jejacks0n!\n. ",
    "ronen": "Sure, pasted it into: https://gist.github.com/ronen/355938f8c68d87ee64fa\n. Sure, pasted it into: https://gist.github.com/ronen/355938f8c68d87ee64fa\n. ",
    "mockdeep": "We have our matcher configured as:\nruby\nsuite.matcher = 'spec/javascripts/**/*_spec.{js,js.jsx}'\n. @mikepack Sorry, we only use .js and .jsx in our javascripts folder, so not sure if other extensions are a problem. We are using haml in our fixtures, and those seem to be fine.\n. @mikepack how are other extensions like .coffee handled?\n. Thanks! At first blush it looks like that fixed it for me.\n. @jejacks0n can we get a release for this?\n. Ah, cool.\n. We just ran into this, too. It would be good to make sure it's future proof so that security releases aren't blocked by teaspoon.\n. We have our matcher configured as:\nruby\nsuite.matcher = 'spec/javascripts/**/*_spec.{js,js.jsx}'\n. @mikepack Sorry, we only use .js and .jsx in our javascripts folder, so not sure if other extensions are a problem. We are using haml in our fixtures, and those seem to be fine.\n. @mikepack how are other extensions like .coffee handled?\n. Thanks! At first blush it looks like that fixed it for me.\n. @jejacks0n can we get a release for this?\n. Ah, cool.\n. We just ran into this, too. It would be good to make sure it's future proof so that security releases aren't blocked by teaspoon.\n. ",
    "elad-maimon": "I have the same issue for quite a time actually.\nOne thing I noticed is that it happens only when I'm using phantomjs. If I switch to selenium it works.\nAnother wired symptom, which I'm not sure if it's related or not but may help, is that although I have only 25 tests in the file, when running from CLI it shows 68 tests (some are repeated). On the web UI or in the CLI with selenium it shows 25.\n. I have the same issue for quite a time actually.\nOne thing I noticed is that it happens only when I'm using phantomjs. If I switch to selenium it works.\nAnother wired symptom, which I'm not sure if it's related or not but may help, is that although I have only 25 tests in the file, when running from CLI it shows 68 tests (some are repeated). On the web UI or in the CLI with selenium it shows 25.\n. ",
    "estebanz01": "+1 Here. I found that if I use phantomjs version 2.0, I got the same error reported here:\nbash\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:55531/teaspoon/default\nswfobject failed to load to vhlarccontainer_content\nUnable to load fixture \"activity_item_player.html\".\n  # teaspoon-jasmine1.js:268\n/home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/base.rb:148:in `filename': undefined method `split' for nil:NilClass (NoMethodError)\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/modules/report_module.rb:13:in `block in log_error'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/modules/report_module.rb:11:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/modules/report_module.rb:11:in `log_error'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/base.rb:54:in `error'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:29:in `block in notify_formatters'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:29:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:29:in `notify_formatters'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:16:in `process'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:28:in `block in run_specs'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `block in run'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `popen'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `run'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:27:in `run_specs'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:55:in `run_specs'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:44:in `block in execute_without_handling'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:42:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:42:in `inject'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:42:in `execute_without_handling'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:27:in `execute'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:23:in `failures?'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/command_line.rb:15:in `initialize'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/bin/teaspoon:6:in `new'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/bin/teaspoon:6:in `<top (required)>'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/teaspoon:19:in `load'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/teaspoon:19:in `<main>'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/ruby_executable_hooks:15:in `eval'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/ruby_executable_hooks:15:in `<main>'\nbut if I change phantomjs to 1.9.8, spec runs as expected:\n``` bash\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:41005/teaspoon/default\nSyntaxError: Parse error\nswfobject failed to load to vhlarccontainer_content\n.....\nFinished in 0.13200 seconds\n5 examples, 0 failures\n```\nEDIT: Here's the uname -a command output in my Ubuntu 14.04 machine:\nbash\nLinux ezapata-vmachine 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 22:52:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n. When you put the binay in .../phantomjs/2.0.1/bin are you really sure that teaspoon is using that phantom version @Coaxial ?\n. you should check. Maybe is loading the phantomjs somewhere else\n. I built the phantomjs from source in Ubuntu and tested. Indeed is the 2.0.0 version with teaspoon in 1.1.1. I'll try later with 1.1.2 to see what would happen.\n. the latest tag version of phantom is 2.0.0 https://github.com/ariya/phantomjs/tags https://github.com/ariya/phantomjs/blob/master/src/consts.h#L38\n. I got the following output when updated to teaspoon 1.1.2\nbash\nUnable to load fixture \"activity_item_player.html\".\n  # teaspoon-jasmine1.js:268\n  # :0 -- send\n  # teaspoon-jasmine1.js:357 -- xhrRequest\n  # teaspoon-jasmine1.js:263 -- load\n  # teaspoon-jasmine1.js:217 -- load\n  # teaspoon-jasmine1.js:1215 -- load\n  # relative_path/to/spec_with_fixture.js:14\n  # jasmine/1.3.1.js:1066 -- execute\n  # jasmine/1.3.1.js:2098 -- next_\n  # jasmine/1.3.1.js:2051 -- start\n  # jasmine/1.3.1.js:2378 -- execute\n  # jasmine/1.3.1.js:2098 -- next_\n  # jasmine/1.3.1.js:2051 -- start\n  # jasmine/1.3.1.js:2523 -- execute\n  # jasmine/1.3.1.js:2098 -- next_\n  # jasmine/1.3.1.js:2094 -- onComplete\n  # jasmine/1.3.1.js:2480 -- finish\n  # jasmine/1.3.1.js:2524\n  # jasmine/1.3.1.js:2108 -- next_\n  # jasmine/1.3.1.js:2094 -- onComplete\n  # jasmine/1.3.1.js:2480 -- finish\n  # jasmine/1.3.1.js:2524\n  # jasmine/1.3.1.js:2108 -- next_\n  # jasmine/1.3.1.js:2094 -- onComplete\n  # jasmine/1.3.1.js:2480 -- finish\n  # jasmine/1.3.1.js:2524\n  # jasmine/1.3.1.js:2108 -- next_\n  # jasmine/1.3.1.js:2088\n. I just compiled from source https://github.com/Vitallium/phantomjs/releases/tag/2.0.1 and this error, for me in Ubuntu, still happening.\n. Thanks! That's awesome! :+1: \n. +1 Here. I found that if I use phantomjs version 2.0, I got the same error reported here:\nbash\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:55531/teaspoon/default\nswfobject failed to load to vhlarccontainer_content\nUnable to load fixture \"activity_item_player.html\".\n  # teaspoon-jasmine1.js:268\n/home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/base.rb:148:in `filename': undefined method `split' for nil:NilClass (NoMethodError)\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/modules/report_module.rb:13:in `block in log_error'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/modules/report_module.rb:11:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/modules/report_module.rb:11:in `log_error'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/formatter/base.rb:54:in `error'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:29:in `block in notify_formatters'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:29:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:29:in `notify_formatters'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/runner.rb:16:in `process'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:28:in `block in run_specs'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `block in run'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `popen'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:35:in `run'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/driver/phantomjs.rb:27:in `run_specs'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:55:in `run_specs'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:44:in `block in execute_without_handling'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:42:in `each'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:42:in `inject'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:42:in `execute_without_handling'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:27:in `execute'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/console.rb:23:in `failures?'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/lib/teaspoon/command_line.rb:15:in `initialize'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/bin/teaspoon:6:in `new'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/gems/teaspoon-1.1.1/bin/teaspoon:6:in `<top (required)>'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/teaspoon:19:in `load'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/teaspoon:19:in `<main>'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/ruby_executable_hooks:15:in `eval'\n        from /home/ezapata/.rvm/gems/ruby-1.9.3-p545-railsexpress@mae/bin/ruby_executable_hooks:15:in `<main>'\nbut if I change phantomjs to 1.9.8, spec runs as expected:\n``` bash\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:41005/teaspoon/default\nSyntaxError: Parse error\nswfobject failed to load to vhlarccontainer_content\n.....\nFinished in 0.13200 seconds\n5 examples, 0 failures\n```\nEDIT: Here's the uname -a command output in my Ubuntu 14.04 machine:\nbash\nLinux ezapata-vmachine 3.13.0-74-generic #118-Ubuntu SMP Thu Dec 17 22:52:10 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux\n. When you put the binay in .../phantomjs/2.0.1/bin are you really sure that teaspoon is using that phantom version @Coaxial ?\n. you should check. Maybe is loading the phantomjs somewhere else\n. I built the phantomjs from source in Ubuntu and tested. Indeed is the 2.0.0 version with teaspoon in 1.1.1. I'll try later with 1.1.2 to see what would happen.\n. the latest tag version of phantom is 2.0.0 https://github.com/ariya/phantomjs/tags https://github.com/ariya/phantomjs/blob/master/src/consts.h#L38\n. I got the following output when updated to teaspoon 1.1.2\nbash\nUnable to load fixture \"activity_item_player.html\".\n  # teaspoon-jasmine1.js:268\n  # :0 -- send\n  # teaspoon-jasmine1.js:357 -- xhrRequest\n  # teaspoon-jasmine1.js:263 -- load\n  # teaspoon-jasmine1.js:217 -- load\n  # teaspoon-jasmine1.js:1215 -- load\n  # relative_path/to/spec_with_fixture.js:14\n  # jasmine/1.3.1.js:1066 -- execute\n  # jasmine/1.3.1.js:2098 -- next_\n  # jasmine/1.3.1.js:2051 -- start\n  # jasmine/1.3.1.js:2378 -- execute\n  # jasmine/1.3.1.js:2098 -- next_\n  # jasmine/1.3.1.js:2051 -- start\n  # jasmine/1.3.1.js:2523 -- execute\n  # jasmine/1.3.1.js:2098 -- next_\n  # jasmine/1.3.1.js:2094 -- onComplete\n  # jasmine/1.3.1.js:2480 -- finish\n  # jasmine/1.3.1.js:2524\n  # jasmine/1.3.1.js:2108 -- next_\n  # jasmine/1.3.1.js:2094 -- onComplete\n  # jasmine/1.3.1.js:2480 -- finish\n  # jasmine/1.3.1.js:2524\n  # jasmine/1.3.1.js:2108 -- next_\n  # jasmine/1.3.1.js:2094 -- onComplete\n  # jasmine/1.3.1.js:2480 -- finish\n  # jasmine/1.3.1.js:2524\n  # jasmine/1.3.1.js:2108 -- next_\n  # jasmine/1.3.1.js:2088\n. I just compiled from source https://github.com/Vitallium/phantomjs/releases/tag/2.0.1 and this error, for me in Ubuntu, still happening.\n. Thanks! That's awesome! :+1: \n. ",
    "coaxial": "I ran into this issue and here is what I found:\nIt seems the issue lies somewhere with PhantomJS. This is a binary of phantomjs 2.0.0 from a machine where rake teaspoon worked: http://s000.tinyupload.com/index.php?file_id=42632369713235520993 (sorry for the host, feel free to check the file for viruses before running it).\nThis binary is not the latest phantomjs 2.0. If I install the latest with brew install phantomjs, it says it installs 2.0.1 although phantomjs -v still outputs 2.0.0. Anyway, with the latest 2.0, the fixtures can't be loaded just like in this issue. But if you drop the binary linked above in /usr/local/Cellar/phantomjs/2.0.1/bin/ and run rake teaspoon again, everything works fine.\n. There is no other phantomjs binary installed on my machine so if it uses phantom at all, it would have to be the binary in that directory\n. I did check, I searched the whole filesystem for a phantomjs binary and the only one coming up is the one installed by brew that I replaced with the version I linked above.\nBesides, using the installed phantomjs in its 2.0.1 version from the brew command triggers the problem discussed in this issue. Replacing the binary with the one linked above lets teaspoon run without issues.\n. I can't get 2.0.0 to compile on OS X 10.11, and the 2.0.0 from the official website doesn't uncompress with upx following their instructions. I give up, I'll just drop in the binary from tinyupload for now.\n. I think the 2.0.1 version is a fix by @Vitallium for compiling issues with brew: https://github.com/Vitallium/phantomjs/releases/tag/2.0.1 so users still have a phantomjs option when running El Capitan and waiting for 2.1.\n. phantomjs -v isn't reliable, it says 2.0.0 for both 2.0.0 and 2.0.1\n. Thanks!\n. I ran into this issue and here is what I found:\nIt seems the issue lies somewhere with PhantomJS. This is a binary of phantomjs 2.0.0 from a machine where rake teaspoon worked: http://s000.tinyupload.com/index.php?file_id=42632369713235520993 (sorry for the host, feel free to check the file for viruses before running it).\nThis binary is not the latest phantomjs 2.0. If I install the latest with brew install phantomjs, it says it installs 2.0.1 although phantomjs -v still outputs 2.0.0. Anyway, with the latest 2.0, the fixtures can't be loaded just like in this issue. But if you drop the binary linked above in /usr/local/Cellar/phantomjs/2.0.1/bin/ and run rake teaspoon again, everything works fine.\n. There is no other phantomjs binary installed on my machine so if it uses phantom at all, it would have to be the binary in that directory\n. I did check, I searched the whole filesystem for a phantomjs binary and the only one coming up is the one installed by brew that I replaced with the version I linked above.\nBesides, using the installed phantomjs in its 2.0.1 version from the brew command triggers the problem discussed in this issue. Replacing the binary with the one linked above lets teaspoon run without issues.\n. I can't get 2.0.0 to compile on OS X 10.11, and the 2.0.0 from the official website doesn't uncompress with upx following their instructions. I give up, I'll just drop in the binary from tinyupload for now.\n. I think the 2.0.1 version is a fix by @Vitallium for compiling issues with brew: https://github.com/Vitallium/phantomjs/releases/tag/2.0.1 so users still have a phantomjs option when running El Capitan and waiting for 2.1.\n. phantomjs -v isn't reliable, it says 2.0.0 for both 2.0.0 and 2.0.1\n. Thanks!\n. ",
    "Vitallium": "Hi guys. Someone mentioned me in a comment. PhantomJS dev here.\nI found the problem yesterday. And can confirm that the problem is in AJAX requests.\nNew feature for capturing the content of requests sometimes breaks AJAX requests. It removes the body and status codes.\nI'll fix it ASAP.\nThanks!\n. Hi guys. Someone mentioned me in a comment. PhantomJS dev here.\nI found the problem yesterday. And can confirm that the problem is in AJAX requests.\nNew feature for capturing the content of requests sometimes breaks AJAX requests. It removes the body and status codes.\nI'll fix it ASAP.\nThanks!\n. ",
    "christian-schulze": "Have found a solution. With some poking around window.env by adding (console.log prop + ': ' + value) for prop, value of window.env to spec_helper.coffee, I found:\njavascript\nui: function (ui) {\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n}\nCalling window.env.ui('bdd-lazy-var') in spec_helper.coffee works perfectly.\nPerhaps this could be added to the Mocha wiki page to help future developers?\n. I'm coming from an rspec background, where you can define lazy loaded variables using the let statement, and also assign a lazily loaded subject which you test in your assertions.\nWhether this sort of feature addition to Mocha is valid is up for debate, so lets leave that for another discussion.\nThe bdd-lazy-var module allows injecting this behaviour into Mocha via the ui interface, which is a well defined api. After which you can now write specs like this:\n``` coffeescript\ndescribe 'Widget', ->\n  subject ->\n    new Widget(get('color'), get('price'))\ndescribe '#build', ->\n    def 'color', -> 'black'\n    def 'price', -> 50\nit 'assigns the color', ->\n  expect(subject().color).to.equal('black')\n\nit 'assigns the price', ->\n  expect(subject().price).to.equal(50)\n\n```\nA very contrived example, but demonstrates how you can dry up the assertions.\nI've actually switched to using the lazy-bdd implementation as the projects code is cleaner and more easily understood. An example spec using lazy-bdd looks like:\n``` coffeescript\ndescribe 'Widget', ->\n  subject ->\n    new Widget(@color, @price)\ndescribe '#build', ->\n    lazy 'color', -> 'black'\n    lazy 'price', -> 50\nit 'assigns the color', ->\n  expect(@subject.color).to.equal('black')\n\nit 'assigns the price', ->\n  expect(@subject.price).to.equal(50)\n\n``\n. Will close this as everything is good.\n. Have found a solution. With some poking aroundwindow.envby adding(console.log prop + ': ' + value) for prop, value of window.envtospec_helper.coffee`, I found:\njavascript\nui: function (ui) {\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n}\nCalling window.env.ui('bdd-lazy-var') in spec_helper.coffee works perfectly.\nPerhaps this could be added to the Mocha wiki page to help future developers?\n. I'm coming from an rspec background, where you can define lazy loaded variables using the let statement, and also assign a lazily loaded subject which you test in your assertions.\nWhether this sort of feature addition to Mocha is valid is up for debate, so lets leave that for another discussion.\nThe bdd-lazy-var module allows injecting this behaviour into Mocha via the ui interface, which is a well defined api. After which you can now write specs like this:\n``` coffeescript\ndescribe 'Widget', ->\n  subject ->\n    new Widget(get('color'), get('price'))\ndescribe '#build', ->\n    def 'color', -> 'black'\n    def 'price', -> 50\nit 'assigns the color', ->\n  expect(subject().color).to.equal('black')\n\nit 'assigns the price', ->\n  expect(subject().price).to.equal(50)\n\n```\nA very contrived example, but demonstrates how you can dry up the assertions.\nI've actually switched to using the lazy-bdd implementation as the projects code is cleaner and more easily understood. An example spec using lazy-bdd looks like:\n``` coffeescript\ndescribe 'Widget', ->\n  subject ->\n    new Widget(@color, @price)\ndescribe '#build', ->\n    lazy 'color', -> 'black'\n    lazy 'price', -> 50\nit 'assigns the color', ->\n  expect(@subject.color).to.equal('black')\n\nit 'assigns the price', ->\n  expect(@subject.price).to.equal(50)\n\n```\n. Will close this as everything is good.\n. ",
    "udiudi": "I see.. thanks, I'll start looking elsewhere. \n. I see.. thanks, I'll start looking elsewhere. \n. ",
    "Capncavedan": "Hi @jejacks0n - this is teaspoon 1.1.1\n. I did try the master branch just now, and received the same results.\n. Hi @jejacks0n - this is teaspoon 1.1.1\n. I did try the master branch just now, and received the same results.\n. ",
    "evbots": "I'm experiencing the same issue. \nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nI'm on the teaspoon master branch\n. I'm experiencing the same issue. \nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nI'm on the teaspoon master branch\n. ",
    "mfazekas": "FWIW: As a workaround i'm having this horrible monkey patch in my taspoon_env.rb:\nruby\nmodule RaiseUnlessPrecompiledFixer # see https://github.com/modeset/teaspoon/issues/443\n  def raise_unless_precompiled_asset(path)\n    super unless path.split('.')[-2] == 'self'\n  end\nend\n...\nSprockets::Rails::HelperAssetResolvers::Environment.send(:prepend,RaiseUnlessPrecompiledFixer)\n. @jejacks0n any feedback on this?\nI've tried to fix travis as well, fixed clode climate codecov and used webdrivers gem so it installs geckodriver, etc correctly.. @jejacks0n ping, rails 5.1 is out now. @jejacks0n any update on this?. FWIW: As a workaround i'm having this horrible monkey patch in my taspoon_env.rb:\nruby\nmodule RaiseUnlessPrecompiledFixer # see https://github.com/modeset/teaspoon/issues/443\n  def raise_unless_precompiled_asset(path)\n    super unless path.split('.')[-2] == 'self'\n  end\nend\n...\nSprockets::Rails::HelperAssetResolvers::Environment.send(:prepend,RaiseUnlessPrecompiledFixer)\n. @jejacks0n any feedback on this?\nI've tried to fix travis as well, fixed clode climate codecov and used webdrivers gem so it installs geckodriver, etc correctly.. @jejacks0n ping, rails 5.1 is out now. @jejacks0n any update on this?. ",
    "sb8244": "We did this monkey patch:\nmodule ExcludeSpecFromPrecompile\n  def asset_needs_precompile?(source, filename)\n    super unless filename.include?(\"spec/javascripts\")\n  end\nend\nSprockets::Rails::Helper.prepend(ExcludeSpecFromPrecompile)\nThis is the least intrusive and obvious way we thought of doing it. It only happens when teaspoon is running, so won't be a production issue\n. @jejacks0n I would be happy to\nWhat do you think of creating a method in engine that does the little hack (sort of like is already there) and only executing that method when Sprockets::VERSION.split(\".\")[0].to_i >= 3. This way old sprockets won't be needlessly patched\n. Good point, a glob for standard names would be great.\nShould a configuration option be exposed as well? This would allow someone to specify their own exemptions \n. I'm getting the same issue as @ajb. The asset is \"compiling\" but it isn't actually requiring anything through sprockets. It is just generating an empty file. This is on the latest teaspoon, rails 4.2, and teaspoon-jasmine.\n. Confirmed that 1.1.5 isn't compiling my assets into the final product. 1.1.4 works correctly although has the issues previously mentioned above.\nI had to change the above (hacky) script to the following for the updated sprockets:\nmodule ExcludeSpecFromPrecompile\n  def precompiled?(path)\n    return true if path.include?(\"spec.js\") || path.include?(\"spec_helper.js\")\n    super\n  end\nend\nSprockets::Rails::HelperAssetResolvers::Environment.prepend(ExcludeSpecFromPrecompile)\n. We did this monkey patch:\nmodule ExcludeSpecFromPrecompile\n  def asset_needs_precompile?(source, filename)\n    super unless filename.include?(\"spec/javascripts\")\n  end\nend\nSprockets::Rails::Helper.prepend(ExcludeSpecFromPrecompile)\nThis is the least intrusive and obvious way we thought of doing it. It only happens when teaspoon is running, so won't be a production issue\n. @jejacks0n I would be happy to\nWhat do you think of creating a method in engine that does the little hack (sort of like is already there) and only executing that method when Sprockets::VERSION.split(\".\")[0].to_i >= 3. This way old sprockets won't be needlessly patched\n. Good point, a glob for standard names would be great.\nShould a configuration option be exposed as well? This would allow someone to specify their own exemptions \n. I'm getting the same issue as @ajb. The asset is \"compiling\" but it isn't actually requiring anything through sprockets. It is just generating an empty file. This is on the latest teaspoon, rails 4.2, and teaspoon-jasmine.\n. Confirmed that 1.1.5 isn't compiling my assets into the final product. 1.1.4 works correctly although has the issues previously mentioned above.\nI had to change the above (hacky) script to the following for the updated sprockets:\nmodule ExcludeSpecFromPrecompile\n  def precompiled?(path)\n    return true if path.include?(\"spec.js\") || path.include?(\"spec_helper.js\")\n    super\n  end\nend\nSprockets::Rails::HelperAssetResolvers::Environment.prepend(ExcludeSpecFromPrecompile)\n. ",
    "NealJMD": "We're experiencing this issue too. Thanks for working to address it!\n. We're experiencing this issue too. Thanks for working to address it!\n. ",
    "robgoodberry": "I was running into the same thing and after updating to 1.1.3 I received an error telling me to include teaspoon-qunit in my Gemfile. I did so and then received this again after:\nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nAdd `Rails.application.config.assets.precompile += %w( support/bind-poly.self.js )` to `config/initializers/assets.rb` and restart your server\n. @aneta-bielska that looks like the error I had with teaspoon <= 1.1.3. 1.1.4 is in your Gemfile.lock?\n. I was running into the same thing and after updating to 1.1.3 I received an error telling me to include teaspoon-qunit in my Gemfile. I did so and then received this again after:\nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nAdd `Rails.application.config.assets.precompile += %w( support/bind-poly.self.js )` to `config/initializers/assets.rb` and restart your server\n. @aneta-bielska that looks like the error I had with teaspoon <= 1.1.3. 1.1.4 is in your Gemfile.lock?\n. ",
    "merwan": "With v1.1.4 we don't need the monkey patch in teaspoon_env.rb anymore.\n. With v1.1.4 we don't need the monkey patch in teaspoon_env.rb anymore.\n. ",
    "aneta-bielska": "ruby 2.1.5, Rails 4.2.4, teaspoon 1.1.4, sprockets 3.5.2\nShould I use different versions or there is another reason why it's still filing? (should I open new issue?)\nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nAdd `Rails.application.config.assets.precompile += %w( support/bind-poly.self.js )` to `config/initializers/assets.rb` and restart your server\n. @robgoodberry yes, it is 1.1.4\n. ruby 2.1.5, Rails 4.2.4, teaspoon 1.1.4, sprockets 3.5.2\nShould I use different versions or there is another reason why it's still filing? (should I open new issue?)\nError: ActionView::Template::Error: Asset was not declared to be precompiled in production.\nAdd `Rails.application.config.assets.precompile += %w( support/bind-poly.self.js )` to `config/initializers/assets.rb` and restart your server\n. @robgoodberry yes, it is 1.1.4\n. ",
    "b1nary": "I am running into the same issues with 1.1.4. The monkey patch from @mfazekas is working for me. I've tried Sprockets 3.2 and 3.5.2. Rails is 4.2.2.\nMy Solution meanwhile\n```\nhttps://github.com/modeset/teaspoon/issues/443\ngem 'sprockets', '3.2.0'\ngem 'sprockets-rails', '2.3.1'\n```\n. I am running into the same issues with 1.1.4. The monkey patch from @mfazekas is working for me. I've tried Sprockets 3.2 and 3.5.2. Rails is 4.2.2.\nMy Solution meanwhile\n```\nhttps://github.com/modeset/teaspoon/issues/443\ngem 'sprockets', '3.2.0'\ngem 'sprockets-rails', '2.3.1'\n```\n. ",
    "ur5us": "Just upgraded an app from Rails 4.2.9 to 4.2.10 and this error started happening. Downgrading sprockets-rails to 2.x fixes the issue. For the moment, I don\u2019t see anything in Rails 4.2.10 related to the issue :(. Just upgraded an app from Rails 4.2.9 to 4.2.10 and this error started happening. Downgrading sprockets-rails to 2.x fixes the issue. For the moment, I don\u2019t see anything in Rails 4.2.10 related to the issue :(. ",
    "agrobbin": "@ur5us I'm not sure if you're still running into this issue, but after running into it myself with Rails 4.2.10, I narrowed it down to an issue with the version comparison for the javascript_include_tag patch last updated in #461. I issued #529 to fix the problem longer-term.\nWhile waiting for that fix to (hopefully) be merged and released in a new version of Teaspoon, copying the patch from lib/teaspoon/engine.rb should fix the problem (at least, it did for me)!. @ur5us I'm not sure if you're still running into this issue, but after running into it myself with Rails 4.2.10, I narrowed it down to an issue with the version comparison for the javascript_include_tag patch last updated in #461. I issued #529 to fix the problem longer-term.\nWhile waiting for that fix to (hopefully) be merged and released in a new version of Teaspoon, copying the patch from lib/teaspoon/engine.rb should fix the problem (at least, it did for me)!. ",
    "hwhelchel": "I'm also using angular js if that is helpful. Could be related but not sure.\n. I'm also using angular js if that is helpful. Could be related but not sure.\n. ",
    "maxhudson": "@jejacks0n Agreed that it is developer's responsibility to catch syntax errors in actual code, but syntax errors in test code are very easy to miss when the suite passes. The only way to tell is the test count changing, but it still is green and obviously passes if you're using CI. \nAs a code-reviewer, this is even harder to catch because you're not keeping track of the number of tests that are supposed to pass, and you don't want to have to check the CI run every time it runs.. @jejacks0n Agreed that it is developer's responsibility to catch syntax errors in actual code, but syntax errors in test code are very easy to miss when the suite passes. The only way to tell is the test count changing, but it still is green and obviously passes if you're using CI. \nAs a code-reviewer, this is even harder to catch because you're not keeping track of the number of tests that are supposed to pass, and you don't want to have to check the CI run every time it runs.. ",
    "connorshea": "We're interested in this for GitLab, any updates on this making it into a stable release?\n. ~~Can the Rails 5 Gemfile be modified to just rails < 5.1, that way the rc, final, and patch (5.0.1) releases won't need gem updates? That'd be the ideal solution, although I can understand why you'd be wary to support versions you haven't tested yet.~~\nNevermind, I mistook the Gemfile for a gemspec. Carry on!\n. I believe there's an issue with Bundler/RubyGems where ~> 5.0 doesn't include prerelease versions. This may have been fixed since I last ran into it a few months ago, but if the build doesn't work that's probably why :)\n< 5.1 should work if that doesn't.\n. Give me two hours and I can try it out on GitLab, mention me again if I haven't commented by late tonight/tomorrow morning.\n. Should also note that we're not on Rails 5 yet, unfortunately. So we can't actually test with Rails 5 at the moment :/\nI don't work on any other projects that are using Rails 5 and Teaspoon, so I'm not sure how useful my testing would be.\n. It's partly for us and partly for the good of the community overall :smiley:\nSo far I've found two gems that seem to be abandoned, and have commented on a few PRs/issues for a handful of others. I didn't want to try upgrading once Rails 5 proper comes out and be blindsided if we find that we have 6 gems that haven't had compatibility releases yet. \nI have a full list of all the gems that need updating in this comment thread. I've been doing a pretty comprehensive sweep of our Gemfile.lock for the last day or so to see if the gems that are locked to 4.x versions have had compatibility releases yet. Generally gems are updated one-at-a-time, so I've had to open a new Merge Request for every gem I've updated. Bit of a time consuming process, but better to do it now than deal with a dozen Bundler dependency conflicts when we're actually updating :D\ntl;dr I do it because I'm crazy\n. Anyway, here's the Teaspoon build for GitLab when using Teaspoon's master branch. Looks good to me!\nRails v4.2.5.2\n. Excellent, thank you very much for the help and for maintaining the gem :D\n. So we just ran into this, any updates?\n. We're interested in this for GitLab, any updates on this making it into a stable release?\n. ~~Can the Rails 5 Gemfile be modified to just rails < 5.1, that way the rc, final, and patch (5.0.1) releases won't need gem updates? That'd be the ideal solution, although I can understand why you'd be wary to support versions you haven't tested yet.~~\nNevermind, I mistook the Gemfile for a gemspec. Carry on!\n. I believe there's an issue with Bundler/RubyGems where ~> 5.0 doesn't include prerelease versions. This may have been fixed since I last ran into it a few months ago, but if the build doesn't work that's probably why :)\n< 5.1 should work if that doesn't.\n. Give me two hours and I can try it out on GitLab, mention me again if I haven't commented by late tonight/tomorrow morning.\n. Should also note that we're not on Rails 5 yet, unfortunately. So we can't actually test with Rails 5 at the moment :/\nI don't work on any other projects that are using Rails 5 and Teaspoon, so I'm not sure how useful my testing would be.\n. It's partly for us and partly for the good of the community overall :smiley:\nSo far I've found two gems that seem to be abandoned, and have commented on a few PRs/issues for a handful of others. I didn't want to try upgrading once Rails 5 proper comes out and be blindsided if we find that we have 6 gems that haven't had compatibility releases yet. \nI have a full list of all the gems that need updating in this comment thread. I've been doing a pretty comprehensive sweep of our Gemfile.lock for the last day or so to see if the gems that are locked to 4.x versions have had compatibility releases yet. Generally gems are updated one-at-a-time, so I've had to open a new Merge Request for every gem I've updated. Bit of a time consuming process, but better to do it now than deal with a dozen Bundler dependency conflicts when we're actually updating :D\ntl;dr I do it because I'm crazy\n. Anyway, here's the Teaspoon build for GitLab when using Teaspoon's master branch. Looks good to me!\nRails v4.2.5.2\n. Excellent, thank you very much for the help and for maintaining the gem :D\n. So we just ran into this, any updates?\n. ",
    "erichummel": "in my own testing I can confirm that require directives are not being used, however the flag that worked for me (admittedly Teaspoon 1.1.4) was the suite.expand_assets = true in teaspoon_env.rb\nThis dramatically slows down my jasmine suites, and I would very much like to be able to serve a concatenated javascript blob rather than each individual file.\n. Wow - quick response - thanks. I'll see if I can find some more information that would help.\n. my front end guy locked our sass-rails gem to an old version, which in turn was locking an old version of sprockets (2.3.3) - I suspect that this may have contributed to this issue (though not for @ajb's example repo). I'm gonna tinker some and let you know. \n. cool. I now understand why my front end guy tried the sass-rails upgrade and gave up, I've got some work on another thing I work on to do now so won't be able to finish my investigations til monday (i'm gonna be miles away from my computer over the weekend).\nthank you for being so responsive @jejacks0n, I will do my best to help out as best I can on monday. \n. heh yeah. judging by a few issues in their repo it does seem to be throwing some people for a loop.\n. in my own testing I can confirm that require directives are not being used, however the flag that worked for me (admittedly Teaspoon 1.1.4) was the suite.expand_assets = true in teaspoon_env.rb\nThis dramatically slows down my jasmine suites, and I would very much like to be able to serve a concatenated javascript blob rather than each individual file.\n. Wow - quick response - thanks. I'll see if I can find some more information that would help.\n. my front end guy locked our sass-rails gem to an old version, which in turn was locking an old version of sprockets (2.3.3) - I suspect that this may have contributed to this issue (though not for @ajb's example repo). I'm gonna tinker some and let you know. \n. cool. I now understand why my front end guy tried the sass-rails upgrade and gave up, I've got some work on another thing I work on to do now so won't be able to finish my investigations til monday (i'm gonna be miles away from my computer over the weekend).\nthank you for being so responsive @jejacks0n, I will do my best to help out as best I can on monday. \n. heh yeah. judging by a few issues in their repo it does seem to be throwing some people for a loop.\n. ",
    "YorickPeterse": "I can cook up a PR for this but I'd like to know if there are any suggestions as to what to rename this method to first.\n. @jejacks0n I haven't actually ran Teaspoon itself just yet but I'll see if it's working or not.\n. @jejacks0n No, at GitLab we might be interested in using Rubinius in the future. Since we're using Teaspoon I'm currently working on making sure everything at least works.\n. Any comments on this? Is this good to go?\n. I can cook up a PR for this but I'd like to know if there are any suggestions as to what to rename this method to first.\n. @jejacks0n I haven't actually ran Teaspoon itself just yet but I'll see if it's working or not.\n. @jejacks0n No, at GitLab we might be interested in using Rubinius in the future. Since we're using Teaspoon I'm currently working on making sure everything at least works.\n. Any comments on this? Is this good to go?\n. ",
    "sgringwe": "@jejacks0n YW. do you plan to release a new gem?\n. I'll point to master for now, so no need on my end, but I can see others being in same spot since it is a security update on rails-side.\n. @jejacks0n YW. do you plan to release a new gem?\n. I'll point to master for now, so no need on my end, but I can see others being in same spot since it is a security update on rails-side.\n. ",
    "97jaz": ":+1: Yes, same spot.\n. :+1: Yes, same spot.\n. ",
    "jbrowning": "Looks like this has already been fixed on master via https://github.com/modeset/teaspoon/pull/450.\n. Looks like this has already been fixed on master via https://github.com/modeset/teaspoon/pull/450.\n. ",
    "BrianHawley": "If you're using the Phantomjs gem, you are generally using it on purpose. It declares a specific version of the browser for compatibility, and installs that version when it isn't the one installed in the system. If the system installed phantomjs matches the requested version, it uses that one (similar to which, but with version checking).\nIf you don't want to use it (perhaps because you aren't using Linux or OSX), you don't have to. In that case ::Phantomjs won't be defined, and the which function will be called instead.\nThe only difference this change makes is to assume that if the developer has decided to use the gem, that their wishes should be respected, rather than trying the which function first.\n. Pushing up a new version without the style complaints.\n. We tend to use a few different testing environments around here, so we've found the phantomjs gem to be useful for managing compatibility with specific versions, especially when upgrades have to be tied to corresponding test changes. With the priorities set in teaspoon now, Phantomjs.path never gets called if there is a preinstalled version, even if that version doesn't match what you need.\nWe're evaluating switching over to using teaspoon, but not being able to use the gem is a deal breaker (the only one I can see so far though).\nI've also been looking into fixing some of the cross-platform compatibility issues you mentioned, but that's an issue for another day.\n. Sure, will do.\n. If you're using the Phantomjs gem, you are generally using it on purpose. It declares a specific version of the browser for compatibility, and installs that version when it isn't the one installed in the system. If the system installed phantomjs matches the requested version, it uses that one (similar to which, but with version checking).\nIf you don't want to use it (perhaps because you aren't using Linux or OSX), you don't have to. In that case ::Phantomjs won't be defined, and the which function will be called instead.\nThe only difference this change makes is to assume that if the developer has decided to use the gem, that their wishes should be respected, rather than trying the which function first.\n. Pushing up a new version without the style complaints.\n. We tend to use a few different testing environments around here, so we've found the phantomjs gem to be useful for managing compatibility with specific versions, especially when upgrades have to be tied to corresponding test changes. With the priorities set in teaspoon now, Phantomjs.path never gets called if there is a preinstalled version, even if that version doesn't match what you need.\nWe're evaluating switching over to using teaspoon, but not being able to use the gem is a deal breaker (the only one I can see so far though).\nI've also been looking into fixing some of the cross-platform compatibility issues you mentioned, but that's an issue for another day.\n. Sure, will do.\n. ",
    "sguha00": "Sorry, start is actually a String not a Time object. I made another pull request https://github.com/modeset/teaspoon/pull/456 to fix it\n. Sorry, start is actually a String not a Time object. I made another pull request https://github.com/modeset/teaspoon/pull/456 to fix it\n. ",
    "vedharish": "Thank you for being patient.\nI have added the unit tests for the added driver. You might want to go through those.\nRegarding the BrowserStackLocal binary -\nThere are some ways to go about this.\nIssue - The tests require this platform specific binary running in the background.\n- There will be a published gem for this purpose. The source code is here. It does start the binary, stops it and adds the logs of the binary to a file. Will be efficient to use. But it might take some time for it to be published on rubygems.org and we will have to add it as a dependency.\n- A thin version of the gem file can be implemented here which downloads the binary (according to the platform its running on) and starts it before and stops it after tests.\n- We can just add a word of warning that this requires a specific binary running. But running the tests for the users won't be automatic and will require setup from user's part.\nPending: The wiki page for using browserstack driver. Will proceed after the above discussion is clear.\nPS: Is there a way to run the houndci tests locally? (Before doing an actual push). I couldn't find one.\n. Will add this page as a follow-up to the PR\n. I work for BrowserStack :) Thanks! :+1: \n. Ohh.. Just realised. I added it as https://github.com/modeset/teaspoon/wiki/Using-BrowserStack-Driver Just renamed it to https://github.com/modeset/teaspoon/wiki/Using-BrowserStack-WebDriver and added to the sidebar. :+1: \n. Thank you for being patient.\nI have added the unit tests for the added driver. You might want to go through those.\nRegarding the BrowserStackLocal binary -\nThere are some ways to go about this.\nIssue - The tests require this platform specific binary running in the background.\n- There will be a published gem for this purpose. The source code is here. It does start the binary, stops it and adds the logs of the binary to a file. Will be efficient to use. But it might take some time for it to be published on rubygems.org and we will have to add it as a dependency.\n- A thin version of the gem file can be implemented here which downloads the binary (according to the platform its running on) and starts it before and stops it after tests.\n- We can just add a word of warning that this requires a specific binary running. But running the tests for the users won't be automatic and will require setup from user's part.\nPending: The wiki page for using browserstack driver. Will proceed after the above discussion is clear.\nPS: Is there a way to run the houndci tests locally? (Before doing an actual push). I couldn't find one.\n. Will add this page as a follow-up to the PR\n. I work for BrowserStack :) Thanks! :+1: \n. Ohh.. Just realised. I added it as https://github.com/modeset/teaspoon/wiki/Using-BrowserStack-Driver Just renamed it to https://github.com/modeset/teaspoon/wiki/Using-BrowserStack-WebDriver and added to the sidebar. :+1: \n. ",
    "imderek": "One more note: when browsing to /teaspoon, the failure is slightly different:\nexpect is not defined\nReferenceError: expect is not defined\n. @jejacks0n Oh, I definitely intended to use Jasmine.  I wasn't paying complete attention when I copied the \"use this version for Rails 5\" line, which switches to Mocha:\n\nDeveloper Note\nWe've added experimental Rails 5 support. If you're looking to use Teaspoon with Rails 5, please try out the rails_5 branch.\ngem \"teaspoon-mocha\", github: \"modeset/teaspoon\", branch: \"rails_5\" \n\nChanged gem to teaspoon-jasmine, all good now.  Thanks.\n. Yup, did.  Thanks again, @jejacks0n.\n. One more note: when browsing to /teaspoon, the failure is slightly different:\nexpect is not defined\nReferenceError: expect is not defined\n. @jejacks0n Oh, I definitely intended to use Jasmine.  I wasn't paying complete attention when I copied the \"use this version for Rails 5\" line, which switches to Mocha:\n\nDeveloper Note\nWe've added experimental Rails 5 support. If you're looking to use Teaspoon with Rails 5, please try out the rails_5 branch.\ngem \"teaspoon-mocha\", github: \"modeset/teaspoon\", branch: \"rails_5\" \n\nChanged gem to teaspoon-jasmine, all good now.  Thanks.\n. Yup, did.  Thanks again, @jejacks0n.\n. ",
    "apellizzn": "Thank you for your good explanation, i will try to figure out how to speed this up based on what you said\n. Thank you for your good explanation, i will try to figure out how to speed this up based on what you said\n. ",
    "bmulholland": "@jejacks0n Apologies, thought I had. Looks like master fixed it. Do you know when a new gem version will be released with that fix?\n. @jejacks0n Apologies, thought I had. Looks like master fixed it. Do you know when a new gem version will be released with that fix?\n. ",
    "gaganawhad": "\ud83d\udc4d \n. thanks a bunch @jejacks0n \n. \ud83d\udc4d \n. thanks a bunch @jejacks0n \n. ",
    "pjmelling": ":+1:\n. Awesome! Thank you so much!\n. :+1:\n. Awesome! Thank you so much!\n. ",
    "adamrmelnyk": "Experiencing the same issue and using rake 11.1.1 and rails 4.2.6\nTeaspoon fails silently after trying to start up.\nsh\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:59763/teaspoon/default\nFailed to load: http://127.0.0.1:59763/teaspoon/default?reporter=Console\n. Experiencing the same issue and using rake 11.1.1 and rails 4.2.6\nTeaspoon fails silently after trying to start up.\nsh\nStarting the Teaspoon server...\nTeaspoon running default suite at http://127.0.0.1:59763/teaspoon/default\nFailed to load: http://127.0.0.1:59763/teaspoon/default?reporter=Console\n. ",
    "mathias": "That works, but I'd really like to be on a version off rubygems. Any chance of cutting a release?\n. That works, but I'd really like to be on a version off rubygems. Any chance of cutting a release?\n. ",
    "sebastianzillessen": "Well, the thing is, it took me almost 3 hours to find the problem in my test suite, because teaspoon just tells u, it could not connect to the url ...:xx/teaspoon/suite if there exists any error on the page. \nThe problem for me was, that I used a require_tree in my spec_helper, which was (as it was empty) ignored by the CI while cloning the repository and therefore my specs failed. \nSo I think it could safe other people time if they are just using the console or a CI environment, by providing them better error explanations.\nAnd as it is only a problem in the Problem in the phantomjs/runner I think this is the right place for it.\nYes, we are indeed using better_errors, therefore I thought it would be more reliable to check it here as well, as the approach I took tackles the actual problem, namely that window.Teaspoon is not present in the page returned to phantomjs.\nSo to sum it up: I think we should include it, so that everyone sees error messages, if something goes wrong with the website while the tests are running.\n. Alright, always glad to help. Let me just know, how you fixed it. :+1: \n. Hi @jejacks0n unfortunately the PR has not resulted in a new version of teaspoon. When will u generate a new one so that we can use this feature?\nThanks!\n. Hey @jejacks0n When can we expect a new version with this feature included?\n. Well, that would work but it would as well require, that I do this on all CI instances for all projects... \ud83d\ude04 Thats why I thought of a solution that I can check in into my central teaspoon_config.rb and then apply it automatically to all projects.\nIs that somehow possible?\n. Ok, I'll give this a try.\n. Well, the thing is, it took me almost 3 hours to find the problem in my test suite, because teaspoon just tells u, it could not connect to the url ...:xx/teaspoon/suite if there exists any error on the page. \nThe problem for me was, that I used a require_tree in my spec_helper, which was (as it was empty) ignored by the CI while cloning the repository and therefore my specs failed. \nSo I think it could safe other people time if they are just using the console or a CI environment, by providing them better error explanations.\nAnd as it is only a problem in the Problem in the phantomjs/runner I think this is the right place for it.\nYes, we are indeed using better_errors, therefore I thought it would be more reliable to check it here as well, as the approach I took tackles the actual problem, namely that window.Teaspoon is not present in the page returned to phantomjs.\nSo to sum it up: I think we should include it, so that everyone sees error messages, if something goes wrong with the website while the tests are running.\n. Alright, always glad to help. Let me just know, how you fixed it. :+1: \n. Hi @jejacks0n unfortunately the PR has not resulted in a new version of teaspoon. When will u generate a new one so that we can use this feature?\nThanks!\n. Hey @jejacks0n When can we expect a new version with this feature included?\n. Well, that would work but it would as well require, that I do this on all CI instances for all projects... \ud83d\ude04 Thats why I thought of a solution that I can check in into my central teaspoon_config.rb and then apply it automatically to all projects.\nIs that somehow possible?\n. Ok, I'll give this a try.\n. ",
    "baburdick": "No rhyme or reason so far. It happens with both Ruby 2.2.4 and Ruby 2.1.8. I can run it successfully (but never reliably):\n```\n$ bundle exec teaspoon --suite=default\nStarting the Teaspoon server...\nI, [2016-04-12T20:16:11.932885 #68933]  INFO -- : listening on addr=127.0.0.1:55455 fd=17\nI, [2016-04-12T20:16:11.933000 #68933]  INFO -- : worker=0 spawning...\nI, [2016-04-12T20:16:11.934859 #68933]  INFO -- : master process ready\nI, [2016-04-12T20:16:11.936008 #68957]  INFO -- : worker=0 spawned pid=68957\nI, [2016-04-12T20:16:11.936441 #68957]  INFO -- : worker=0 ready\nTeaspoon running default suite at http://127.0.0.1:55455/teaspoon/default\n....\nFinished in 0.06000 seconds\n4 examples, 0 failures\nI, [2016-04-12T20:16:39.933504 #68933]  INFO -- : reaped # worker=unknown\n=============================== Coverage summary ===============================\nStatements   : 19.65% ( 190/967 )\nBranches     : 2.45% ( 5/204 )\nFunctions    : 23.75% ( 76/320 )\nLines        : 19.77% ( 190/961 )\n================================================================================\n```\n... And then immediately after that, run it again, and produce the failure (again, never reliably):\n```\n$ bundle exec teaspoon --suite=default\nStarting the Teaspoon server...\nI, [2016-04-12T20:16:57.290987 #69086]  INFO -- : listening on addr=127.0.0.1:55621 fd=17\nI, [2016-04-12T20:16:57.291119 #69086]  INFO -- : worker=0 spawning...\nI, [2016-04-12T20:16:57.292950 #69086]  INFO -- : master process ready\nI, [2016-04-12T20:16:57.294173 #69110]  INFO -- : worker=0 spawned pid=69110\nI, [2016-04-12T20:16:57.294616 #69110]  INFO -- : worker=0 ready\nTeaspoon running default suite at http://127.0.0.1:55621/teaspoon/default\n....\nFinished in 0.07200 seconds\n4 examples, 0 failures\nI, [2016-04-12T20:17:23.214124 #69086]  INFO -- : reaped # worker=unknown\nI, [2016-04-12T20:17:23.253225 #69086]  INFO -- : reaped # worker=unknown\n/Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:61:in generate_report': undefined methodexitstatus' for nil:NilClass (NoMethodError)\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:25:in block (2 levels) in generate_reports'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:24:ineach'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:24:in block in generate_reports'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:incall'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:in block in input_path'\n    from /Users/me/.rvm/rubies/ruby-2.1.8/lib/ruby/2.1.0/tmpdir.rb:88:inmktmpdir'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:51:in input_path'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:22:ingenerate_reports'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:62:in resolve_coverage'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:53:inon_result'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:30:in notify_formatters'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:16:inprocess'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:28:in block in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:ineach'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in block in run'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:inpopen'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in run'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:27:inrun_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:55:in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:44:inblock in execute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:in each'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:ininject'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:in execute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:27:inexecute'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:23:in failures?'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/command_line.rb:15:ininitialize'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:in new'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:in'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:in load'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:in'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:in eval'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:in'\n```\nIn the failure case, it seems there are always two reaped processes. In the successful runs, only one. But the text-summary can succeed or fail:\n```\n$ bundle exec teaspoon --suite=default\nStarting the Teaspoon server...\nI, [2016-04-12T20:23:36.673327 #69608]  INFO -- : listening on addr=127.0.0.1:56065 fd=17\nI, [2016-04-12T20:23:36.673455 #69608]  INFO -- : worker=0 spawning...\nI, [2016-04-12T20:23:36.675464 #69608]  INFO -- : master process ready\nI, [2016-04-12T20:23:36.676748 #69633]  INFO -- : worker=0 spawned pid=69633\nI, [2016-04-12T20:23:36.677231 #69633]  INFO -- : worker=0 ready\nTeaspoon running default suite at http://127.0.0.1:56065/teaspoon/default\n....\nFinished in 0.06000 seconds\n4 examples, 0 failures\nI, [2016-04-12T20:24:02.652953 #69608]  INFO -- : reaped # worker=unknown\n=============================== Coverage summary ===============================\nStatements   : 19.65% ( 190/967 )\nBranches     : 2.45% ( 5/204 )\nFunctions    : 23.75% ( 76/320 )\nLines        : 19.77% ( 190/961 )\n================================================================================\nI, [2016-04-12T20:24:03.450341 #69608]  INFO -- : reaped # worker=unknown\n/Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:37:in block in check_thresholds': undefined methodexitstatus' for nil:NilClass (NoMethodError)\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:in call'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:inblock in input_path'\n    from /Users/me/.rvm/rubies/ruby-2.1.8/lib/ruby/2.1.0/tmpdir.rb:88:in mktmpdir'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:51:ininput_path'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:35:in check_thresholds'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:63:inresolve_coverage'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:53:in on_result'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:30:innotify_formatters'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:16:in process'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:28:inblock in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in each'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:inblock in run'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in popen'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:inrun'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:27:in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:55:inrun_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:44:in block in execute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:ineach'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:in inject'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:inexecute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:27:in execute'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:23:infailures?'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/command_line.rb:15:in initialize'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:innew'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:in <top (required)>'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:inload'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:in <main>'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:ineval'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:in `'\n```\nI have these possibly relevant settings in my spec/teaspoon_env.rb:\n``` ruby\nconfig.use_coverage = true\ncoverage.reports = %w[ text-summary html ]\ncoverage.ignore << %r{/app/assets/javascripts/(?:app/views|templates)/}\nEarly stage thresholds:\ncoverage.statements = 19.65\ncoverage.branches   = 2.45\ncoverage.functions  = 23.75\ncoverage.lines      = 19.77\n```\nLooking back at this, it appears there are two similar errors, one in #generate_report and one in #check_thresholds. In each case they're trying to send #exitstatus to a non-existent exit status code.\n. To be clear, config.use_coverage = true precedes the config.coverage do |coverage| block. The other config lines are inside that block. I blurred that distinction when keying my last post here.\n. Correct. Can't make it happen when I disable coverage.\n. If I disable text-summary and the coverage thresholds, I can avoid the error.\n. Yep. If I enable either of them, I get intermittent errors.\nMay I suggest gracefully carrying on in the face of lost process adversity?\nruby\n    def check_thresholds(&block)\n      args = threshold_args\n      return if args.blank?\n      input_path do |input|\n        result = %x{#{@executable} check-coverage #{args.join(\" \")} #{input.shellescape} 2>&1}\n        begin\n          return if $?.exitstatus == 0\n        rescue NoMethodError\n          return\n        end\n        result = result.scan(/ERROR: .*$/).join(\"\\n\").gsub(\"ERROR: \", \"\")\n        block.call(result) unless result.blank?\n      end\n    end\nruby\n    def generate_report(input, format)\n      output_path = File.join(@config.output_path, @suite_name)\n      result = %x{#{@executable} report --include=#{input.shellescape} --dir #{output_path} #{format} 2>&1}\n      begin\n        return result.gsub(\"Done\", \"\").gsub(\"Using reporter [#{format}]\", \"\").strip if $?.exitstatus == 0\n      rescue NoMethodError\n        # Fall through to the following `raise`\n      end\n      raise Teaspoon::DependencyError.new(\"Unable to generate #{format} coverage report:\\n#{result}\")\n    end\n. (The only changes above are the begin;rescue;end blocks around the calls to #exitstatus.)\n. It appears to be a timing issue. If I rescue the NoMethodErrors and sleep 2 before I reference the result, I can see a proper result, but still can't get the exit status code via $?. Somehow the value of $? is either not yet set, or lost at the time we reference it. It's likely that my very busy laptop exposes this weakness in using %x{} and $?. Perhaps it could be replicated by stuffing the RAM of a VM full of apps, and heavily loading it before running bundle exec teaspoon --suite=default. And I may be the only one in that condition. :-(\nFortunately, there's an alternate way to shell out and get STDOUT, STDERR, and the exit status code, in one operation, while cleanly closing handles: use Open3.capture2e (http://stackoverflow.com/questions/690151/getting-output-of-system-calls-in-ruby/20001569#20001569).\nImplementing the methods with Open3.capture2e looks like this:\nruby\n    def check_thresholds(&block)\n      args = threshold_args\n      return if args.blank?\n      input_path do |input|\n        result, st = Open3.capture2e [@executable, \"check-coverage\", args.join(\" \"), input.shellescape].join(\" \")\n        return if st.exitstatus == 0\n        result = result.scan(/ERROR: .*$/).join(\"\\n\").gsub(\"ERROR: \", \"\")\n        block.call(result) unless result.blank?\n      end\n    end\nruby\n    def generate_report(input, format)\n      output_path = File.join(@config.output_path, @suite_name)\n      result, st = Open3.capture2e [@executable, \"report\", \"--include=#{input.shellescape}\", \"--dir #{output_path}\", format].join(\" \")\n      return result.gsub(\"Done\", \"\").gsub(\"Using reporter [#{format}]\", \"\").strip if st.exitstatus == 0\n      raise Teaspoon::DependencyError.new(\"Unable to generate #{format} coverage report:\\n#{result}\")\n    end\nI could not get it to fail using this alternate implementation. You could hardcode the joining of the arguments to Open3.capture2e. That's just an artifact of my testing.\n. Forgot to note: you need this at the top of coverage.rb:\nruby\nrequire \"open3\"\n. Dove a bit deeper into how Open3.capture2e relies ultimately on Process.spawn. So I can now simplify the args. Pull request coming shortly.\n. See modeset/teaspoon#476\n. Fixing hound-bot critiques ...\n. @jejacks0n: any thoughts on this PR?\n. I wish I could provide a link. And I wish I understood better what's at the core of the problem. But it's a conclusion I've drawn from this experience. On my machine, using pry, I was able to witness this issue, described in modeset/teaspoon#475 .\nUsing this solution, which returns STDOUT, STDERR, and the exit status code in a single array, I can't reproduce the issue.\nWith respect to IO.popen, I see that you're using it in these two files, and depending on Ruby on subsequent lines to put $? into the local scope:\n- lib/teaspoon/driver/phantomjs.rb\n- lib/teaspoon-devkit.rb\nIf IO.popen uses the same mechanism to put $? into the local scope, the same problem could manifest. But I haven't seen it in my environment. And so far I haven't seen anyone else report a similar issue (although my Google-foo may have failed me in that regard).\nUsing the standard library's Open3 and one of its capture* methods to return the subset of STDOUT, STDERR, and exit status code that you need definitely eliminates depending on Ruby's mechanism to insert the exit status code in to the local scope in $?.\nThe only thing I can further suggest is to take a look at my change to the \"generates coverage reports\" spec. If you agree that it is now testing for the proper output, given the inputs, then something is not working properly in master. But I'm not certain the cause is what's described above. My changes expose more of the implementation to testability. So that fix could just be a side-effect of the better testability.\nI wish I had an open-and-shut case that you could reproduce, or could point definitively to an existing bug in Ruby. But I have to depend on your judgement here. I hope my reasoning is clear and sensible to you.\n. Checking back in. It looks like Open3 provides alternatives to IO.popen: Open3.popen2, Open3.popen2e, and Open3.popen3. For your use of IO.popen and $?, it looks like you could substitute Open3.popen2e.\nAlso, here's a few links providing more insight into what the various forms of process spawning do and how and why:\n- http://unknownerror.org/opensource/ruby/ruby/q/stackoverflow/690151/getting-output-of-system-calls-in-ruby (Hat-tip: @albertosaurus)\n- http://stackoverflow.com/questions/7212573/when-to-use-each-method-of-launching-a-subprocess-in-ruby\n- http://unethicalblogger.com/2011/11/12/popen-can-suck-it.html (an older article, principally germane to Ruby 1.8 and 1.9, that sheds some light on the mingling of STDERR in the parent and child processes that does NOT happen in Open3.)\n. @jejacks0n: You may have missed my last post here. Please take a look. It may satisfy your curiosity.\n. @jejacks0n: Just checking in. Completely understood if you're very busy. Looking forward to when you can check this out and let me know if there's more you need from me. (Happy New Year, BTW.). Not sure what's breaking the build. It appears that merging in the most recent master and pushing caused current Travis to expose issues in most recent yet old master.. Thanks @agrobbin! I've confirmed this works for us.\n@jejacks0n: any chance of a pull request merge frenzy soon? :-). No rhyme or reason so far. It happens with both Ruby 2.2.4 and Ruby 2.1.8. I can run it successfully (but never reliably):\n```\n$ bundle exec teaspoon --suite=default\nStarting the Teaspoon server...\nI, [2016-04-12T20:16:11.932885 #68933]  INFO -- : listening on addr=127.0.0.1:55455 fd=17\nI, [2016-04-12T20:16:11.933000 #68933]  INFO -- : worker=0 spawning...\nI, [2016-04-12T20:16:11.934859 #68933]  INFO -- : master process ready\nI, [2016-04-12T20:16:11.936008 #68957]  INFO -- : worker=0 spawned pid=68957\nI, [2016-04-12T20:16:11.936441 #68957]  INFO -- : worker=0 ready\nTeaspoon running default suite at http://127.0.0.1:55455/teaspoon/default\n....\nFinished in 0.06000 seconds\n4 examples, 0 failures\nI, [2016-04-12T20:16:39.933504 #68933]  INFO -- : reaped # worker=unknown\n=============================== Coverage summary ===============================\nStatements   : 19.65% ( 190/967 )\nBranches     : 2.45% ( 5/204 )\nFunctions    : 23.75% ( 76/320 )\nLines        : 19.77% ( 190/961 )\n================================================================================\n```\n... And then immediately after that, run it again, and produce the failure (again, never reliably):\n```\n$ bundle exec teaspoon --suite=default\nStarting the Teaspoon server...\nI, [2016-04-12T20:16:57.290987 #69086]  INFO -- : listening on addr=127.0.0.1:55621 fd=17\nI, [2016-04-12T20:16:57.291119 #69086]  INFO -- : worker=0 spawning...\nI, [2016-04-12T20:16:57.292950 #69086]  INFO -- : master process ready\nI, [2016-04-12T20:16:57.294173 #69110]  INFO -- : worker=0 spawned pid=69110\nI, [2016-04-12T20:16:57.294616 #69110]  INFO -- : worker=0 ready\nTeaspoon running default suite at http://127.0.0.1:55621/teaspoon/default\n....\nFinished in 0.07200 seconds\n4 examples, 0 failures\nI, [2016-04-12T20:17:23.214124 #69086]  INFO -- : reaped # worker=unknown\nI, [2016-04-12T20:17:23.253225 #69086]  INFO -- : reaped # worker=unknown\n/Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:61:in generate_report': undefined methodexitstatus' for nil:NilClass (NoMethodError)\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:25:in block (2 levels) in generate_reports'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:24:ineach'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:24:in block in generate_reports'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:incall'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:in block in input_path'\n    from /Users/me/.rvm/rubies/ruby-2.1.8/lib/ruby/2.1.0/tmpdir.rb:88:inmktmpdir'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:51:in input_path'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:22:ingenerate_reports'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:62:in resolve_coverage'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:53:inon_result'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:30:in notify_formatters'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:16:inprocess'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:28:in block in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:ineach'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in block in run'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:inpopen'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in run'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:27:inrun_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:55:in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:44:inblock in execute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:in each'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:ininject'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:in execute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:27:inexecute'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:23:in failures?'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/command_line.rb:15:ininitialize'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:in new'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:in'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:in load'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:in'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:in eval'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:in'\n```\nIn the failure case, it seems there are always two reaped processes. In the successful runs, only one. But the text-summary can succeed or fail:\n```\n$ bundle exec teaspoon --suite=default\nStarting the Teaspoon server...\nI, [2016-04-12T20:23:36.673327 #69608]  INFO -- : listening on addr=127.0.0.1:56065 fd=17\nI, [2016-04-12T20:23:36.673455 #69608]  INFO -- : worker=0 spawning...\nI, [2016-04-12T20:23:36.675464 #69608]  INFO -- : master process ready\nI, [2016-04-12T20:23:36.676748 #69633]  INFO -- : worker=0 spawned pid=69633\nI, [2016-04-12T20:23:36.677231 #69633]  INFO -- : worker=0 ready\nTeaspoon running default suite at http://127.0.0.1:56065/teaspoon/default\n....\nFinished in 0.06000 seconds\n4 examples, 0 failures\nI, [2016-04-12T20:24:02.652953 #69608]  INFO -- : reaped # worker=unknown\n=============================== Coverage summary ===============================\nStatements   : 19.65% ( 190/967 )\nBranches     : 2.45% ( 5/204 )\nFunctions    : 23.75% ( 76/320 )\nLines        : 19.77% ( 190/961 )\n================================================================================\nI, [2016-04-12T20:24:03.450341 #69608]  INFO -- : reaped # worker=unknown\n/Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:37:in block in check_thresholds': undefined methodexitstatus' for nil:NilClass (NoMethodError)\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:in call'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:54:inblock in input_path'\n    from /Users/me/.rvm/rubies/ruby-2.1.8/lib/ruby/2.1.0/tmpdir.rb:88:in mktmpdir'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:51:ininput_path'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/coverage.rb:35:in check_thresholds'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:63:inresolve_coverage'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:53:in on_result'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:30:innotify_formatters'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/runner.rb:16:in process'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:28:inblock in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in each'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:inblock in run'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:in popen'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:35:inrun'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/driver/phantomjs.rb:27:in run_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:55:inrun_specs'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:44:in block in execute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:ineach'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:in inject'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:42:inexecute_without_handling'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:27:in execute'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/console.rb:23:infailures?'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/lib/teaspoon/command_line.rb:15:in initialize'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:innew'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/gems/teaspoon-1.1.5/bin/teaspoon:6:in <top (required)>'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:inload'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/teaspoon:23:in <main>'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:ineval'\n    from /Users/me/.rvm/gems/ruby-2.1.8@my_app/bin/ruby_executable_hooks:15:in `'\n```\nI have these possibly relevant settings in my spec/teaspoon_env.rb:\n``` ruby\nconfig.use_coverage = true\ncoverage.reports = %w[ text-summary html ]\ncoverage.ignore << %r{/app/assets/javascripts/(?:app/views|templates)/}\nEarly stage thresholds:\ncoverage.statements = 19.65\ncoverage.branches   = 2.45\ncoverage.functions  = 23.75\ncoverage.lines      = 19.77\n```\nLooking back at this, it appears there are two similar errors, one in #generate_report and one in #check_thresholds. In each case they're trying to send #exitstatus to a non-existent exit status code.\n. To be clear, config.use_coverage = true precedes the config.coverage do |coverage| block. The other config lines are inside that block. I blurred that distinction when keying my last post here.\n. Correct. Can't make it happen when I disable coverage.\n. If I disable text-summary and the coverage thresholds, I can avoid the error.\n. Yep. If I enable either of them, I get intermittent errors.\nMay I suggest gracefully carrying on in the face of lost process adversity?\nruby\n    def check_thresholds(&block)\n      args = threshold_args\n      return if args.blank?\n      input_path do |input|\n        result = %x{#{@executable} check-coverage #{args.join(\" \")} #{input.shellescape} 2>&1}\n        begin\n          return if $?.exitstatus == 0\n        rescue NoMethodError\n          return\n        end\n        result = result.scan(/ERROR: .*$/).join(\"\\n\").gsub(\"ERROR: \", \"\")\n        block.call(result) unless result.blank?\n      end\n    end\nruby\n    def generate_report(input, format)\n      output_path = File.join(@config.output_path, @suite_name)\n      result = %x{#{@executable} report --include=#{input.shellescape} --dir #{output_path} #{format} 2>&1}\n      begin\n        return result.gsub(\"Done\", \"\").gsub(\"Using reporter [#{format}]\", \"\").strip if $?.exitstatus == 0\n      rescue NoMethodError\n        # Fall through to the following `raise`\n      end\n      raise Teaspoon::DependencyError.new(\"Unable to generate #{format} coverage report:\\n#{result}\")\n    end\n. (The only changes above are the begin;rescue;end blocks around the calls to #exitstatus.)\n. It appears to be a timing issue. If I rescue the NoMethodErrors and sleep 2 before I reference the result, I can see a proper result, but still can't get the exit status code via $?. Somehow the value of $? is either not yet set, or lost at the time we reference it. It's likely that my very busy laptop exposes this weakness in using %x{} and $?. Perhaps it could be replicated by stuffing the RAM of a VM full of apps, and heavily loading it before running bundle exec teaspoon --suite=default. And I may be the only one in that condition. :-(\nFortunately, there's an alternate way to shell out and get STDOUT, STDERR, and the exit status code, in one operation, while cleanly closing handles: use Open3.capture2e (http://stackoverflow.com/questions/690151/getting-output-of-system-calls-in-ruby/20001569#20001569).\nImplementing the methods with Open3.capture2e looks like this:\nruby\n    def check_thresholds(&block)\n      args = threshold_args\n      return if args.blank?\n      input_path do |input|\n        result, st = Open3.capture2e [@executable, \"check-coverage\", args.join(\" \"), input.shellescape].join(\" \")\n        return if st.exitstatus == 0\n        result = result.scan(/ERROR: .*$/).join(\"\\n\").gsub(\"ERROR: \", \"\")\n        block.call(result) unless result.blank?\n      end\n    end\nruby\n    def generate_report(input, format)\n      output_path = File.join(@config.output_path, @suite_name)\n      result, st = Open3.capture2e [@executable, \"report\", \"--include=#{input.shellescape}\", \"--dir #{output_path}\", format].join(\" \")\n      return result.gsub(\"Done\", \"\").gsub(\"Using reporter [#{format}]\", \"\").strip if st.exitstatus == 0\n      raise Teaspoon::DependencyError.new(\"Unable to generate #{format} coverage report:\\n#{result}\")\n    end\nI could not get it to fail using this alternate implementation. You could hardcode the joining of the arguments to Open3.capture2e. That's just an artifact of my testing.\n. Forgot to note: you need this at the top of coverage.rb:\nruby\nrequire \"open3\"\n. Dove a bit deeper into how Open3.capture2e relies ultimately on Process.spawn. So I can now simplify the args. Pull request coming shortly.\n. See modeset/teaspoon#476\n. Fixing hound-bot critiques ...\n. @jejacks0n: any thoughts on this PR?\n. I wish I could provide a link. And I wish I understood better what's at the core of the problem. But it's a conclusion I've drawn from this experience. On my machine, using pry, I was able to witness this issue, described in modeset/teaspoon#475 .\nUsing this solution, which returns STDOUT, STDERR, and the exit status code in a single array, I can't reproduce the issue.\nWith respect to IO.popen, I see that you're using it in these two files, and depending on Ruby on subsequent lines to put $? into the local scope:\n- lib/teaspoon/driver/phantomjs.rb\n- lib/teaspoon-devkit.rb\nIf IO.popen uses the same mechanism to put $? into the local scope, the same problem could manifest. But I haven't seen it in my environment. And so far I haven't seen anyone else report a similar issue (although my Google-foo may have failed me in that regard).\nUsing the standard library's Open3 and one of its capture* methods to return the subset of STDOUT, STDERR, and exit status code that you need definitely eliminates depending on Ruby's mechanism to insert the exit status code in to the local scope in $?.\nThe only thing I can further suggest is to take a look at my change to the \"generates coverage reports\" spec. If you agree that it is now testing for the proper output, given the inputs, then something is not working properly in master. But I'm not certain the cause is what's described above. My changes expose more of the implementation to testability. So that fix could just be a side-effect of the better testability.\nI wish I had an open-and-shut case that you could reproduce, or could point definitively to an existing bug in Ruby. But I have to depend on your judgement here. I hope my reasoning is clear and sensible to you.\n. Checking back in. It looks like Open3 provides alternatives to IO.popen: Open3.popen2, Open3.popen2e, and Open3.popen3. For your use of IO.popen and $?, it looks like you could substitute Open3.popen2e.\nAlso, here's a few links providing more insight into what the various forms of process spawning do and how and why:\n- http://unknownerror.org/opensource/ruby/ruby/q/stackoverflow/690151/getting-output-of-system-calls-in-ruby (Hat-tip: @albertosaurus)\n- http://stackoverflow.com/questions/7212573/when-to-use-each-method-of-launching-a-subprocess-in-ruby\n- http://unethicalblogger.com/2011/11/12/popen-can-suck-it.html (an older article, principally germane to Ruby 1.8 and 1.9, that sheds some light on the mingling of STDERR in the parent and child processes that does NOT happen in Open3.)\n. @jejacks0n: You may have missed my last post here. Please take a look. It may satisfy your curiosity.\n. @jejacks0n: Just checking in. Completely understood if you're very busy. Looking forward to when you can check this out and let me know if there's more you need from me. (Happy New Year, BTW.). Not sure what's breaking the build. It appears that merging in the most recent master and pushing caused current Travis to expose issues in most recent yet old master.. Thanks @agrobbin! I've confirmed this works for us.\n@jejacks0n: any chance of a pull request merge frenzy soon? :-). ",
    "ivdma": "@jejacks0n this still isn't merged :(\n. @jejacks0n this still isn't merged :(\n. ",
    "patrickmclaren": "@jejacks0n Anything left for this to merge?\n. @jejacks0n Anything left for this to merge?\n. ",
    "winniehell": "@jejacks0n Do I get it right that there is still no release containing this? Judging from the changelog, 1.1.5 in March was the last release.\n. @jejacks0n Do I get it right that there is still no release containing this? Judging from the changelog, 1.1.5 in March was the last release.\n. ",
    "johnjmaguire": "Upon further investigation this was caused by starting Puma 3.x in Cluster Mode. Switching to Single Mode (by removing the workers config in Puma) allowed us to run the test suite as expected. Safe to close this up.\n. Upon further investigation this was caused by starting Puma 3.x in Cluster Mode. Switching to Single Mode (by removing the workers config in Puma) allowed us to run the test suite as expected. Safe to close this up.\n. ",
    "rbishop": "I'm experiencing this as well. We want to run teaspoon in the test RAILS_ENV (it seems that teaspoon runs in development by default,) and make use of our already precompiled assets on CI. We want our app assets precompiled but don't necessarily need to precompile the jasmine spec files.\n. Thanks for the quick reply! I thought that might be the case after finding another issue. We have some other gems that cause a stack overflow (still trying to narrow down which one is causing it) when we upgrade to latest Sprockets. If I can figure that out I'll just upgrade Sprockets.\nBest wishes with your personal life.\n. I'm experiencing this as well. We want to run teaspoon in the test RAILS_ENV (it seems that teaspoon runs in development by default,) and make use of our already precompiled assets on CI. We want our app assets precompiled but don't necessarily need to precompile the jasmine spec files.\n. Thanks for the quick reply! I thought that might be the case after finding another issue. We have some other gems that cause a stack overflow (still trying to narrow down which one is causing it) when we upgrade to latest Sprockets. If I can figure that out I'll just upgrade Sprockets.\nBest wishes with your personal life.\n. ",
    "snoblenet": "Hi @jejacks0n -- Thanks for your response and best wishes for your current issues.\nSince I posted this, I've got the raw Jasmine gem going. This has the advantage of being non-Rails specific, so it makes no particular assumption about the app using the assets pipeline. As it worked, we'll continue with that for the time being.\n. Hi @jejacks0n -- Thanks for your response and best wishes for your current issues.\nSince I posted this, I've got the raw Jasmine gem going. This has the advantage of being non-Rails specific, so it makes no particular assumption about the app using the assets pipeline. As it worked, we'll continue with that for the time being.\n. ",
    "joowh85": "+1\n. +1\n. ",
    "arrbee": "I was seeing the same problem. I believe I tracked it down to having plugin :tmp_restart at the bottom of my config/puma.rb file. I replaced that line with:\nruby\nif ENV[\"RAILS_ENV\"] != \"test\"\n  plugin :tmp_restart\nend\nand the problem seems to have gone away.\n. I was seeing the same problem. I believe I tracked it down to having plugin :tmp_restart at the bottom of my config/puma.rb file. I replaced that line with:\nruby\nif ENV[\"RAILS_ENV\"] != \"test\"\n  plugin :tmp_restart\nend\nand the problem seems to have gone away.\n. ",
    "chadrem": "@arrbee thanks for tracking it down! Jut to confirm your code works for me. One additional note... I have to run RAILS_ENV=test rake teaspoon for this to work. Or else the rails server in my other terminal dies. \n. @arrbee thanks for tracking it down! Jut to confirm your code works for me. One additional note... I have to run RAILS_ENV=test rake teaspoon for this to work. Or else the rails server in my other terminal dies. \n. ",
    "ngelx": "Any idea? Sorry but i can't get it to work and i'm run out of ideas. \n. I've double check it, but still running 0 examples. Also I've created an engine form strach and set up a very basic test, in order to check if the problem was some kind of weird configuration on main engine. No success either. It seems that i'm definitely missing something. \nThe test engine is here\nIn Particular, the commit that add the teaspoon test/config is this one\nAny help will be much appreciated.\n. Found it! The issue was that the spec was written with arrow functions. If it is re-write to old plain js it runs as expected.\nI've managed to test es6 code inside my app, but i'm just wondering if it is possible to write specs using es6. When i try to do something like \n```\n// spec/javascript/hello_spec.js\nimport Hello from \"hello\";\n...\n```\nI'm getting \n....\n Error: Cannot find module 'hello' from '/vagrant/engine_teaspoon_example/spec/javascripts' \n....\nYou can test the code in this example repo. es6 branch.\nTo reproduce it, just make sure you are on the right branch and run\nteaspoon spec/javascripts/hello_spec.js\n. Any idea? Sorry but i can't get it to work and i'm run out of ideas. \n. I've double check it, but still running 0 examples. Also I've created an engine form strach and set up a very basic test, in order to check if the problem was some kind of weird configuration on main engine. No success either. It seems that i'm definitely missing something. \nThe test engine is here\nIn Particular, the commit that add the teaspoon test/config is this one\nAny help will be much appreciated.\n. Found it! The issue was that the spec was written with arrow functions. If it is re-write to old plain js it runs as expected.\nI've managed to test es6 code inside my app, but i'm just wondering if it is possible to write specs using es6. When i try to do something like \n```\n// spec/javascript/hello_spec.js\nimport Hello from \"hello\";\n...\n```\nI'm getting \n....\n Error: Cannot find module 'hello' from '/vagrant/engine_teaspoon_example/spec/javascripts' \n....\nYou can test the code in this example repo. es6 branch.\nTo reproduce it, just make sure you are on the right branch and run\nteaspoon spec/javascripts/hello_spec.js\n. ",
    "RGreinacher": "I filed the issue using teaspoon-mocha. Today I tried to use teaspoon-jasmine and I still get the same error. Via CLI I tried to call Teaspoon.hook('test_hook') in my test_spec.coffee and got the following:\nReferenceError: Can't find variable: url\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:456\n  # :0 -- send\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:447 -- xhrRequest\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:451 -- hook\n  # support/annotation_document_manager_spec.self-3b741f4f9c671769efb6d88a542bc1349a97c04e75257ef128be885deaa25d67.js:3\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:1790 -- attemptSync\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:1778 -- run\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:1763 -- execute\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:628 -- queueRunnerFactory\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:2210 -- execute\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:679 -- execute\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:1462 -- Runner\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:35 -- execute\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:49 -- onload\nfor the following hook:\nsuite.hook :test_hook do\n  ap 'wow, such test!'\nend\nInteresting thing is that I nevertheless got the console output \"wow, such test!\" - so the hook is working, but throwing an error anyways.\n. I filed the issue using teaspoon-mocha. Today I tried to use teaspoon-jasmine and I still get the same error. Via CLI I tried to call Teaspoon.hook('test_hook') in my test_spec.coffee and got the following:\nReferenceError: Can't find variable: url\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:456\n  # :0 -- send\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:447 -- xhrRequest\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:451 -- hook\n  # support/annotation_document_manager_spec.self-3b741f4f9c671769efb6d88a542bc1349a97c04e75257ef128be885deaa25d67.js:3\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:1790 -- attemptSync\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:1778 -- run\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:1763 -- execute\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:628 -- queueRunnerFactory\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:2210 -- execute\n  # jasmine/2.3.4.self-aa35a2d6ef4c597846860937831b786d7a7b61cf7b7d860a06b484aa1b637276.js:679 -- execute\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:1462 -- Runner\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:35 -- execute\n  # teaspoon-jasmine2.self-193432e902b3943f7e511bf7ba322e1ce098119d180978aaff50918567da9361.js:49 -- onload\nfor the following hook:\nsuite.hook :test_hook do\n  ap 'wow, such test!'\nend\nInteresting thing is that I nevertheless got the console output \"wow, such test!\" - so the hook is working, but throwing an error anyways.\n. ",
    "ZackMattor": "Yeah, I get this same error... I'm trying to dive into it today. Its all working as expected but throws a TON of errors when i'm running my test suite. We've been just living with it for about 2 months now. \ud83d\udc3b \n. I solved my case. I will have a PR open when i get back from lunch.\n:success is not a valid status code symbol so the server always returns 500.\n. @jejacks0n, I'm thining about not relying on the url variable, but returning an error message from the server with a :not_found - 404 status code if there is no hook present (exactly what the hook.coffee throw was trying to show).\n```\n  def hook\n    hooks = Teaspoon::Suite.new(params).hooks[params[:hook].to_s]\nif hooks.present?\n  hooks.each { |hook| hook.call(hook_params(params[:args])) }\n  head(:ok)\nelse\n  render status: :not_found, json: {err: \"The `#{params[:hook].to_s}` hook is not defined in the `#{params[:suite].to_s}` suite \"}\nend\n\nend\n```\nThen just render that err from the response in the throw. If you agree i'll open up a PR.\n. Working error output.\n\n. There should probably be some tests around this... But that's all I can do today.\n. @jejacks0n I think we should handle 500 errors better. Because currently it tries to parse them as json and throws a json parse error. I'll see if I can come up with a good way to handle that. Probably just \nif(xhr.status === 500) throw \"Server returned a 500, check your hook's code.\"\n. Yeah, I get this same error... I'm trying to dive into it today. Its all working as expected but throws a TON of errors when i'm running my test suite. We've been just living with it for about 2 months now. \ud83d\udc3b \n. I solved my case. I will have a PR open when i get back from lunch.\n:success is not a valid status code symbol so the server always returns 500.\n. @jejacks0n, I'm thining about not relying on the url variable, but returning an error message from the server with a :not_found - 404 status code if there is no hook present (exactly what the hook.coffee throw was trying to show).\n```\n  def hook\n    hooks = Teaspoon::Suite.new(params).hooks[params[:hook].to_s]\nif hooks.present?\n  hooks.each { |hook| hook.call(hook_params(params[:args])) }\n  head(:ok)\nelse\n  render status: :not_found, json: {err: \"The `#{params[:hook].to_s}` hook is not defined in the `#{params[:suite].to_s}` suite \"}\nend\n\nend\n```\nThen just render that err from the response in the throw. If you agree i'll open up a PR.\n. Working error output.\n\n. There should probably be some tests around this... But that's all I can do today.\n. @jejacks0n I think we should handle 500 errors better. Because currently it tries to parse them as json and throws a json parse error. I'll see if I can come up with a good way to handle that. Probably just \nif(xhr.status === 500) throw \"Server returned a 500, check your hook's code.\"\n. ",
    "dany-kun": "What do you think of doing RAILS_ENV=test bundle exec teaspoon ?\n. What do you think of doing RAILS_ENV=test bundle exec teaspoon ?\n. ",
    "n0nick": "Any updates on this? I just ran into the same issue myself.. FWIW the problem on my end (running Rails 5) was related to a bug in the Puma server: It did not register to the same port that Teaspoon assigned it, and so Teaspoon was stuck. Fixed in latest Puma: https://github.com/puma/puma/issues/1154. Any updates on this? I just ran into the same issue myself.. FWIW the problem on my end (running Rails 5) was related to a bug in the Puma server: It did not register to the same port that Teaspoon assigned it, and so Teaspoon was stuck. Fixed in latest Puma: https://github.com/puma/puma/issues/1154. ",
    "ephracis": "I believe it was a small typo for me as well. Can't remember what it was, though. Closing this.. I believe it was a small typo for me as well. Can't remember what it was, though. Closing this.. ",
    "sujaysudheenda": "@jejacks0n I tried doing it before running the teaspoon tests. but it didnt seem to work. I still see the same error.\nedit:\nIf I specify rails env explicitly like sh 'RAILS_ENV=test bundle exec teaspoon'\nthen it picks up the right env\n. @jejacks0n I tried doing it before running the teaspoon tests. but it didnt seem to work. I still see the same error.\nedit:\nIf I specify rails env explicitly like sh 'RAILS_ENV=test bundle exec teaspoon'\nthen it picks up the right env\n. ",
    "ameykelkar": "@sujaysudheenda \nInstead of setting environment variable as ENV['RAILS_ENV'] = 'test', you could try setting the rails environment by specifying Rails.env = 'test' in first line of teaspoon_env.rb. @sujaysudheenda \nInstead of setting environment variable as ENV['RAILS_ENV'] = 'test', you could try setting the rails environment by specifying Rails.env = 'test' in first line of teaspoon_env.rb. ",
    "nebulousdog": "I wound up making a faux test application Webpack config entry.\nentry: {\n  '/spec/javascripts/faux_application': './spec/javascripts/tests/test_manifest.js.coffee'\n}\nand updated the teaspoon_env suite.matcher to be that output file. i.e. \"spec/javascripts/faux_application.js\" in this example.\nand other specific things to my project. Marking as closed, thanks!. I wound up making a faux test application Webpack config entry.\nentry: {\n  '/spec/javascripts/faux_application': './spec/javascripts/tests/test_manifest.js.coffee'\n}\nand updated the teaspoon_env suite.matcher to be that output file. i.e. \"spec/javascripts/faux_application.js\" in this example.\nand other specific things to my project. Marking as closed, thanks!. ",
    "ryanthemanuel": "This looks like it was a problem with coffee script and fixed here: https://github.com/jashkenas/coffeescript/issues/4403.  Closing this since it is no longer an issue.. This looks like it was a problem with coffee script and fixed here: https://github.com/jashkenas/coffeescript/issues/4403.  Closing this since it is no longer an issue.. ",
    "joannakim": "This was posted a while ago but did you figure out what was happening, and if so do you happen to remember how you resolved this? Thanks!. This was posted a while ago but did you figure out what was happening, and if so do you happen to remember how you resolved this? Thanks!. ",
    "thesauri": "@joannakim Unfortunately not. If I remember correctly we gave up on using teaspoon altogether... @joannakim Unfortunately not. If I remember correctly we gave up on using teaspoon altogether... ",
    "phuongnd08": "We use a catch all routes in our app but I guess teaspoon is supposed to deal with it.. So ignore /teaspoon from the catchall route solve the issue for us. I guess this should be documented.. We use a catch all routes in our app but I guess teaspoon is supposed to deal with it.. So ignore /teaspoon from the catchall route solve the issue for us. I guess this should be documented.. ",
    "jwhitmire": "I hit this issue as well and I think it is related to the port issue @jejacks0n referenced.  If I explicitly set config.server_port in my config file, then it worked for me.. I hit this issue as well and I think it is related to the port issue @jejacks0n referenced.  If I explicitly set config.server_port in my config file, then it worked for me.. ",
    "twalpole": "The issue is that puma attempts to load a configuration file if ones exists and gives any settings in that file  priority over whatever settings are passed into the method used to start puma.  The configuration files tried are   config/puma/<environment>.rb  and if that doesn't exist it will try for config/puma.rb  .  You should be able to workaround around this issue by either telling puma not to load any config files (by somehow passing in the config_files: ['-'] option), or set the settings you want teaspoon to use in  config/puma/test.rb. The issue is that puma attempts to load a configuration file if ones exists and gives any settings in that file  priority over whatever settings are passed into the method used to start puma.  The configuration files tried are   config/puma/<environment>.rb  and if that doesn't exist it will try for config/puma.rb  .  You should be able to workaround around this issue by either telling puma not to load any config files (by somehow passing in the config_files: ['-'] option), or set the settings you want teaspoon to use in  config/puma/test.rb. ",
    "jpparsons": "Im using phantomjs 2.1.1.0. I seem to have resolved this issue by running Puma in cluster mode, using 1 worker (was running it in single mode as the output shows above). You can close this issue.. Im using phantomjs 2.1.1.0. I seem to have resolved this issue by running Puma in cluster mode, using 1 worker (was running it in single mode as the output shows above). You can close this issue.. ",
    "jsilvestri": "I am not quite sure I understand what is failing in the tests.... I am not quite sure I understand what is failing in the tests.... ",
    "CyborgMaster": "I would love to get this merged.  We also would like to pass client options.  In this case, ours is to use chrome headless to run the tests using something like this:\noptions = ::Selenium::WebDriver::Chrome::Options.new\n  options.add_argument('--headless')\n  options.add_argument('--disable-gpu')\n  config.driver_options = { client_driver: :chrome, client_driver_ops: { options: options } }. Ok, in order to get things working for our use case, passing in the Chrome::Options as indicated above to activate headless mode, I had to modify things a little bit.   \nThe line in question in this PR is \nruby\ndriver = ::Selenium::WebDriver.for(driver_options[:client_driver], driver_options[:client_driver_opts] || {})\nCalling driver_options in this manner sets up a HashWithIndifferentAccess, but that causes problems inside Selenium, producing the following crash:\n```\n\n[#] ArgumentError: wrong number of arguments (given 1, expected 0)\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:43:in handshake'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/chrome/driver.rb:58:ininitialize'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:in new'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:infor'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver.rb:86:in for'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/bundler/gems/teaspoon-60c2f9a1a466/lib/teaspoon/driver/selenium.rb:26:inrun_specs'\nThis is trying to pass the options into this function:ruby\n        def self.handshake(**opts)\n```\n\nbut because the HashWithIndifferentAccess uses string keys, this fails.  It only works with hashes with symbol keys.  \nChanging the line to:\nruby\ndriver = ::Selenium::WebDriver.for(driver_options[:client_driver], @options[:client_driver_opts] || {})\nbypasses the HashWithIndifferentAccess creation and allows the tests to run, however, running them a second time using guard-teaspoon crashes with the following: \n```\n\n[#] Errno::ECONNREFUSED: Failed to open TCP connection to 127.0.0.1:9515 (Connection refused - connect(2) for \"127.0.0.1\" port 9515)\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:882:in rescue in block in connect'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:879:inblock in connect'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/timeout.rb:74:in timeout'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:878:inconnect'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:863:in do_start'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:852:instart'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:1398:in request'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/http/default.rb:124:inresponse_for'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/http/default.rb:78:in request'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/http/common.rb:61:incall'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:170:in execute'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:103:increate_session'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:54:in handshake'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/chrome/driver.rb:58:ininitialize'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:in new'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:infor'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver.rb:86:in for'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/bundler/gems/teaspoon-60c2f9a1a466/lib/teaspoon/driver/selenium.rb:26:inrun_specs'\n```\n\nThis can be solved by duping the options each time they are used.  My guess is that Selenium modifies the object on use somehow and expects a fresh Chrome::Options object each time.   \nThis gives us the final line (which is working for me) here:\nruby\ndriver = ::Selenium::WebDriver.for(driver_options[:client_driver], @options[:client_driver_opts]&.dup || {})\n@jsilvestri, do you want to modify your PR to match this, would you like me to open a PR to your repo to merge this change into yours, or should I just open my own PR?\n. I would love to get this merged.  We also would like to pass client options.  In this case, ours is to use chrome headless to run the tests using something like this:\noptions = ::Selenium::WebDriver::Chrome::Options.new\n  options.add_argument('--headless')\n  options.add_argument('--disable-gpu')\n  config.driver_options = { client_driver: :chrome, client_driver_ops: { options: options } }. Ok, in order to get things working for our use case, passing in the Chrome::Options as indicated above to activate headless mode, I had to modify things a little bit.   \nThe line in question in this PR is \nruby\ndriver = ::Selenium::WebDriver.for(driver_options[:client_driver], driver_options[:client_driver_opts] || {})\nCalling driver_options in this manner sets up a HashWithIndifferentAccess, but that causes problems inside Selenium, producing the following crash:\n```\n\n[#] ArgumentError: wrong number of arguments (given 1, expected 0)\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:43:in handshake'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/chrome/driver.rb:58:ininitialize'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:in new'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:infor'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver.rb:86:in for'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/bundler/gems/teaspoon-60c2f9a1a466/lib/teaspoon/driver/selenium.rb:26:inrun_specs'\nThis is trying to pass the options into this function:ruby\n        def self.handshake(**opts)\n```\n\nbut because the HashWithIndifferentAccess uses string keys, this fails.  It only works with hashes with symbol keys.  \nChanging the line to:\nruby\ndriver = ::Selenium::WebDriver.for(driver_options[:client_driver], @options[:client_driver_opts] || {})\nbypasses the HashWithIndifferentAccess creation and allows the tests to run, however, running them a second time using guard-teaspoon crashes with the following: \n```\n\n[#] Errno::ECONNREFUSED: Failed to open TCP connection to 127.0.0.1:9515 (Connection refused - connect(2) for \"127.0.0.1\" port 9515)\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:882:in rescue in block in connect'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:879:inblock in connect'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/timeout.rb:74:in timeout'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:878:inconnect'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:863:in do_start'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:852:instart'\n[#] /Users/jeremy/.rvm/rubies/ruby-2.3.1/lib/ruby/2.3.0/net/http.rb:1398:in request'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/http/default.rb:124:inresponse_for'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/http/default.rb:78:in request'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/http/common.rb:61:incall'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:170:in execute'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:103:increate_session'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/remote/bridge.rb:54:in handshake'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/chrome/driver.rb:58:ininitialize'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:in new'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver/common/driver.rb:46:infor'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/gems/selenium-webdriver-3.5.2/lib/selenium/webdriver.rb:86:in for'\n[#] /Users/jeremy/.rvm/gems/ruby-2.3.1@allynova/bundler/gems/teaspoon-60c2f9a1a466/lib/teaspoon/driver/selenium.rb:26:inrun_specs'\n```\n\nThis can be solved by duping the options each time they are used.  My guess is that Selenium modifies the object on use somehow and expects a fresh Chrome::Options object each time.   \nThis gives us the final line (which is working for me) here:\nruby\ndriver = ::Selenium::WebDriver.for(driver_options[:client_driver], @options[:client_driver_opts]&.dup || {})\n@jsilvestri, do you want to modify your PR to match this, would you like me to open a PR to your repo to merge this change into yours, or should I just open my own PR?\n. ",
    "tilsammans": "@CyborgMaster I would just open a new PR that contains all the needed changes.\nThen we can get some movement on this issue! If you need help with anything, don't be shy.. #530 opened which contains all the fixes.. @CyborgMaster I would just open a new PR that contains all the needed changes.\nThen we can get some movement on this issue! If you need help with anything, don't be shy.. #530 opened which contains all the fixes.. ",
    "thebravoman": "Found it.\nWhen there is a syntax error in on test non of the tests are run\nThe error was\nconsole.log(iterator.);\nAm I understanding it right? If there is an error in one of the tests, non of the tests are run?. exception_handler only.. Uff, it is toEquals and not toEqual.\nIt is awful. Took me a lot of time to spot this s. Can I configure in any way for this to be reported as  \"there is no function toEquals\" instead of \"undefined is not a function\" \n?. Found it.\nWhen there is a syntax error in on test non of the tests are run\nThe error was\nconsole.log(iterator.);\nAm I understanding it right? If there is an error in one of the tests, non of the tests are run?. exception_handler only.. Uff, it is toEquals and not toEqual.\nIt is awful. Took me a lot of time to spot this s. Can I configure in any way for this to be reported as  \"there is no function toEquals\" instead of \"undefined is not a function\" \n?. ",
    "soccerKevin": "I have the same problem.  it happens with console.log(\"1\") too.\nif you change it from an int to a definitive string, like console.log(\"a1\"), then it works\n. I have the same problem.  it happens with console.log(\"1\") too.\nif you change it from an int to a definitive string, like console.log(\"a1\"), then it works\n. ",
    "dalexander01": "\nfor the life of me I can't see anyplace where you require jquery.. am I missing something? I see third_party/terra/jquery/globalize/globalize.min.js -- is jQuery defined inside of that?\n\nI honestly have no idea. This is a legacy project that I have been assigned too and I have no idea what a lot of those third party dependencies are there for. If I wanted to require jquery on my own and not rely on a transitive dependency what would I need to do? . I've tried adding that to spec_helper.js and when I run teaspoon I get:\nError: ActionView::Template::Error: couldn't find file 'jquery'\n  (in /home/duane/orion-date_time_picker/spec/javascripts/spec_helper.js:27)\nShould it go in teaspoon_env.rb?. Here is my gemfile.lock in case that tells us anything:\n```\nPATH\n  remote: .\n  specs:\n    orion-date_time_picker (2.5.0.SNAPSHOT)\n      blue_steel (~> 9.3)\n      jquery-ui-rails (~> 6.0)\n      moment_timezone-rails (~> 0.5)\n      momentjs-rails (~> 2.15)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      terra-rails-view_models (~> 3.0)\nGEM\n  remote: https://rubygems.org/\n  remote: http://repo.release.cerner.corp/main/rubygems/\n  remote: http://repo.release.cerner.corp/internal/rubygems/\n  specs:\n    actionmailer (4.2.9)\n      actionpack (= 4.2.9)\n      actionview (= 4.2.9)\n      activejob (= 4.2.9)\n      mail (~> 2.5, >= 2.5.4)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n    actionpack (4.2.9)\n      actionview (= 4.2.9)\n      activesupport (= 4.2.9)\n      rack (~> 1.6)\n      rack-test (~> 0.6.2)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.2)\n    actionview (4.2.9)\n      activesupport (= 4.2.9)\n      builder (~> 3.1)\n      erubis (~> 2.7.0)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.3)\n    activejob (4.2.9)\n      activesupport (= 4.2.9)\n      globalid (>= 0.3.0)\n    activemodel (4.2.9)\n      activesupport (= 4.2.9)\n      builder (~> 3.1)\n    activerecord (4.2.9)\n      activemodel (= 4.2.9)\n      activesupport (= 4.2.9)\n      arel (~> 6.0)\n    activesupport (4.2.9)\n      i18n (~> 0.7)\n      minitest (~> 5.1)\n      thread_safe (~> 0.3, >= 0.3.4)\n      tzinfo (~> 1.1)\n    addressable (2.5.1)\n      public_suffix (~> 2.0, >= 2.0.2)\n    arel (6.0.4)\n    ast (2.3.0)\n    astrolabe (1.3.1)\n      parser (~> 2.2)\n    basset-client (2.1.1)\n      cerner-oauth1a (~> 1.0, >= 1.0.1)\n      cerner-timber (~> 2.1, >= 2.1.1)\n    binding_of_caller (0.7.2)\n      debug_inspector (>= 0.0.1)\n    blue_steel (9.5.0)\n      haml (~> 4.0.4)\n      haml-rails (~> 0.4)\n      hamlbars (~> 2.0.1)\n      handlebars_assets (= 0.14.1)\n      hi-format (>= 1.6)\n      less-rails (~> 2.7)\n      rails (~> 4.0)\n      sprockets-rails (~> 2.3)\n    brakeman (3.7.0)\n    builder (3.2.3)\n    bundler-audit (0.6.0)\n      bundler (~> 1.2)\n      thor (~> 0.18)\n    byebug (9.0.6)\n    capybara (2.14.4)\n      addressable\n      mime-types (>= 1.16)\n      nokogiri (>= 1.3.3)\n      rack (>= 1.0.0)\n      rack-test (>= 0.5.4)\n      xpath (~> 2.0)\n    cerner-oauth1a (1.0.1)\n    cerner-timber (2.1.1)\n      activesupport (>= 4.2.0)\n    childprocess (0.7.1)\n      ffi (~> 1.0, >= 1.0.11)\n    cliver (0.3.2)\n    coderay (1.1.1)\n    coffee-rails (4.2.2)\n      coffee-script (>= 2.2.0)\n      railties (>= 4.0.0)\n    coffee-script (2.4.1)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.12.2)\n    colorize (0.7.7)\n    combustion (0.7.0)\n      activesupport (>= 3.0.0)\n      railties (>= 3.0.0)\n      thor (>= 0.14.6)\n    commonjs (0.2.7)\n    connection_pool (2.2.1)\n    daemons (1.2.4)\n    debug_inspector (0.0.3)\n    diff-lcs (1.3)\n    docile (1.1.5)\n    erubis (2.7.0)\n    eventmachine (1.0.9.1)\n    execjs (2.7.0)\n    faraday (0.12.2)\n      multipart-post (>= 1.2, < 3)\n    ffi (1.9.18)\n    gc_stats (1.0.1)\n      rails (~> 4.1)\n    globalid (0.4.0)\n      activesupport (>= 4.2.0)\n    haml (4.0.7)\n      tilt\n    haml-rails (0.9.0)\n      actionpack (>= 4.0.1)\n      activesupport (>= 4.0.1)\n      haml (>= 4.0.6, < 5.0)\n      html2haml (>= 1.0.1)\n      railties (>= 4.0.1)\n    hamlbars (2.0.1)\n      execjs (>= 1.2)\n      haml\n      sprockets\n      tilt\n    handlebars_assets (0.14.1)\n      execjs (>= 1.2.9)\n      sprockets (>= 2.0.3)\n      tilt\n    hi-checkup (1.10.0)\n      rails (~> 4.0)\n    hi-date_time (1.3.0)\n      iso8601 (~> 0.8.5)\n    hi-format (1.10.0)\n      hi-date_time (~> 1.1)\n      i18n (~> 0.7.0)\n      rails (>= 4.0.0, < 6.0)\n    hike (1.2.3)\n    html2haml (2.2.0)\n      erubis (~> 2.7.0)\n      haml (>= 4.0, < 6)\n      nokogiri (>= 1.6.0)\n      ruby_parser (~> 3.5)\n    http_accept_language (1.0.2)\n    httparty (0.15.5)\n      multi_xml (>= 0.5.2)\n    i18n (0.7.0)\n    inline_svg (0.12.1)\n      activesupport (>= 3.0)\n      loofah (>= 2.0)\n      nokogiri (>= 1.6)\n    ion_common (4.3.2)\n      activesupport (~> 4.1)\n      basset-client (~> 2.1)\n      cerner-timber (~> 2.1, >= 2.1.1)\n      gc_stats (~> 1.0)\n      http_accept_language (~> 1.0)\n      i18n (~> 0.6)\n      ion_request_store_registry (~> 1.0)\n      millennium_service_discovery (~> 2.0)\n      thrift (~> 0.9)\n    ion_dcos (1.0.1)\n      activesupport (~> 4.0)\n      jwt (~> 1.5)\n      marathon-api (~> 2.0)\n      timber (~> 1.0)\n    ion_develop_rails (2.7.0)\n      activesupport (>= 3.0.0)\n      capybara (~> 2.7)\n      coffee-rails (~> 4.2)\n      combustion (~> 0.5)\n      hi-checkup (~> 1.8)\n      ion_dcos (~> 1.0)\n      orion-rails-layouts (~> 1.0)\n      philter (~> 1.5)\n      poltergeist (~> 1.8)\n      pry-byebug (~> 3.3)\n      rails (~> 4.1)\n      railties (>= 3.0.0)\n      rake (~> 0.9)\n      rdoc (~> 4.0)\n      roll_out (~> 1.10, < 1.14.0)\n      roll_out-capybara (~> 1.0)\n      roll_out-jira (~> 1.2)\n      roll_out-security (~> 1.4)\n      rspec (~> 3.0)\n      rspec-its (~> 1.0)\n      rspec-rails (~> 3.2)\n      selenium-webdriver (~> 2.50)\n      simplecov (~> 0.9)\n      sprockets (~> 2.12)\n      sprockets-rails (~> 2.3)\n      therubyracer (~> 0.12)\n      thin (~> 1.6)\n      thor (>= 0.14.6)\n    ion_errors (3.2.0)\n      blue_steel (~> 9.1)\n      ion_common (~> 4.0)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      sprockets-rails (~> 2.3)\n      terra-rails-view_model (~> 1.19)\n      therubyracer (~> 0.12)\n    ion_request_store_registry (1.1.0)\n      activesupport (~> 4.1)\n      request_store (~> 1.1)\n    iso8601 (0.8.7)\n    jquery-ui-rails (6.0.1)\n      railties (>= 3.2.16)\n    json (2.1.0)\n    jwt (1.5.6)\n    less (2.6.0)\n      commonjs (~> 0.2.7)\n    less-rails (2.8.0)\n      actionpack (>= 4.0)\n      less (~> 2.6.0)\n      sprockets (> 2, < 4)\n      tilt\n    libv8 (3.16.14.19)\n    loofah (2.0.3)\n      nokogiri (>= 1.5.9)\n    mail (2.6.6)\n      mime-types (>= 1.16, < 4)\n    marathon-api (2.1.0)\n      httparty (>= 0.11)\n      json\n      trollop (>= 2.0)\n    method_source (0.8.2)\n    millennia_discovery (2.0.0)\n      rails (~> 4.1)\n      ruby-openid (~> 2.5)\n    millennium_service_discovery (2.0.0)\n      millennia_discovery (~> 2.0)\n      rails (~> 4.1)\n    mime-types (2.4.3)\n    mini_portile2 (2.2.0)\n    minitest (5.10.2)\n    moment_timezone-rails (0.5.0)\n    momentjs-rails (2.17.1)\n      railties (>= 3.1)\n    multi_json (1.12.1)\n    multi_xml (0.6.0)\n    multipart-post (2.0.0)\n    nokogiri (1.8.0)\n      mini_portile2 (~> 2.2.0)\n    orion-rails-layouts (1.4.0)\n      blue_steel (~> 9.3)\n      rails (~> 4.1)\n      react_on_rails (= 7.0.4)\n    parser (2.4.0.0)\n      ast (~> 2.2)\n    philter (1.11.0)\n      colorize (~> 0.7.3)\n      execjs (~> 2.6)\n      multi_json (~> 1.6)\n      roll_out (~> 1.7)\n      rubocop (~> 0.27.1)\n      thor (~> 0.19.1)\n    poltergeist (1.15.0)\n      capybara (~> 2.1)\n      cliver (~> 0.3.1)\n      websocket-driver (>= 0.2.0)\n    powerpack (0.0.9)\n    pry (0.10.4)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    pry-byebug (3.4.2)\n      byebug (~> 9.0)\n      pry (~> 0.10)\n    pry-stack_explorer (0.4.9.2)\n      binding_of_caller (>= 0.7)\n      pry (>= 0.9.11)\n    public_suffix (2.0.5)\n    rack (1.6.8)\n    rack-test (0.6.3)\n      rack (>= 1.0)\n    rails (4.2.9)\n      actionmailer (= 4.2.9)\n      actionpack (= 4.2.9)\n      actionview (= 4.2.9)\n      activejob (= 4.2.9)\n      activemodel (= 4.2.9)\n      activerecord (= 4.2.9)\n      activesupport (= 4.2.9)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.2.9)\n      sprockets-rails\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (>= 4.2.0.alpha)\n    rails-dom-testing (1.0.8)\n      activesupport (>= 4.2.0.beta, < 5.0)\n      nokogiri (~> 1.6)\n      rails-deprecated_sanitizer (>= 1.0.1)\n    rails-html-sanitizer (1.0.3)\n      loofah (~> 2.0)\n    railties (4.2.9)\n      actionpack (= 4.2.9)\n      activesupport (= 4.2.9)\n      rake (>= 0.8.7)\n      thor (>= 0.18.1, < 2.0)\n    rainbow (2.2.2)\n      rake\n    rake (0.9.6)\n    rdoc (4.3.0)\n    react_on_rails (7.0.4)\n      addressable\n      connection_pool\n      execjs (~> 2.5)\n      rails (>= 3.2)\n      rainbow (~> 2.1)\n    redcarpet (3.2.3)\n    ref (2.0.0)\n    request_store (1.3.2)\n    rmagick (2.16.0)\n    roll_out (1.13.1)\n      faraday (~> 0.11)\n      haml (>= 3.1, < 5.0.0)\n      mime-types (~> 2.4.3)\n      rake\n      redcarpet (~> 3.2.2)\n    roll_out-capybara (1.3.0)\n      activesupport (>= 4.0, < 6.0)\n      rmagick (~> 2.16)\n      roll_out (~> 1.10)\n    roll_out-jira (1.4.0)\n      cerner-timber (~> 2.1)\n      roll_out (> 1.5)\n    roll_out-security (1.4.0)\n      brakeman (~> 3.0)\n      bundler-audit (~> 0.3)\n      roll_out (~> 1.6)\n    rspec (3.6.0)\n      rspec-core (~> 3.6.0)\n      rspec-expectations (~> 3.6.0)\n      rspec-mocks (~> 3.6.0)\n    rspec-core (3.6.0)\n      rspec-support (~> 3.6.0)\n    rspec-expectations (3.6.0)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.6.0)\n    rspec-its (1.2.0)\n      rspec-core (>= 3.0.0)\n      rspec-expectations (>= 3.0.0)\n    rspec-mocks (3.6.0)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.6.0)\n    rspec-rails (3.6.0)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      railties (>= 3.0)\n      rspec-core (~> 3.6.0)\n      rspec-expectations (~> 3.6.0)\n      rspec-mocks (~> 3.6.0)\n      rspec-support (~> 3.6.0)\n    rspec-support (3.6.0)\n    rubocop (0.27.1)\n      astrolabe (~> 1.3)\n      parser (>= 2.2.0.pre.7, < 3.0)\n      powerpack (~> 0.0.6)\n      rainbow (>= 1.99.1, < 3.0)\n      ruby-progressbar (~> 1.4)\n    ruby-openid (2.7.0)\n    ruby-progressbar (1.8.1)\n    ruby_parser (3.10.0)\n      sexp_processor (~> 4.9)\n    rubyzip (1.2.1)\n    selenium-webdriver (2.53.4)\n      childprocess (~> 0.5)\n      rubyzip (~> 1.0)\n      websocket (~> 1.0)\n    sexp_processor (4.10.0)\n    simplecov (0.14.1)\n      docile (~> 1.1.0)\n      json (>= 1.8, < 3)\n      simplecov-html (~> 0.10.0)\n    simplecov-html (0.10.1)\n    slop (3.6.0)\n    sprockets (2.12.4)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sprockets-rails (2.3.3)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      sprockets (>= 2.8, < 4.0)\n    teaspoon (1.1.5)\n      railties (>= 3.2.5, < 6)\n    teaspoon-jasmine (2.3.4)\n      teaspoon (>= 1.0.0)\n    terra-rails-renderable (1.1.0)\n      activesupport (~> 4.1)\n    terra-rails-view_model (1.19.0)\n      activesupport (~> 4.1)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      terra-rails-renderable (~> 1.0)\n    terra-rails-view_models (3.3.0)\n      blue_steel (~> 9.4)\n      inline_svg (~> 0.6)\n      ion_common (~> 4.0)\n      ion_errors (~> 3.1)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      react_on_rails (= 7.0.4)\n      terra-rails-view_model (~> 1.19)\n    therubyracer (0.12.3)\n      libv8 (~> 3.16.14.15)\n      ref\n    thin (1.7.2)\n      daemons (~> 1.0, >= 1.0.9)\n      eventmachine (~> 1.0, >= 1.0.4)\n      rack (>= 1, < 3)\n    thor (0.19.4)\n    thread_safe (0.3.6)\n    thrift (0.10.0.0)\n    tilt (1.4.1)\n    timber (1.9.0)\n      activesupport\n    trollop (2.1.2)\n    tzinfo (1.2.3)\n      thread_safe (~> 0.1)\n    uglifier (2.7.2)\n      execjs (>= 0.3.0)\n      json (>= 1.8.0)\n    websocket (1.2.4)\n    websocket-driver (0.6.5)\n      websocket-extensions (>= 0.1.0)\n    websocket-extensions (0.1.2)\n    xpath (2.1.0)\n      nokogiri (~> 1.3)\n    yui-compressor (0.12.0)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  eventmachine (= 1.0.9.1)\n  ion_develop_rails (~> 2.7.0)\n  orion-date_time_picker!\n  pry\n  pry-byebug\n  pry-stack_explorer\n  sprockets-rails (~> 2.3)\n  teaspoon-jasmine (~> 2.3)\n  uglifier (~> 2.5)\n  yui-compressor (~> 0.12)\nBUNDLED WITH\n   1.14.6\n```. I notice that jquery-ui-rails is being loaded. Is this causing any issue?. > for the life of me I can't see anyplace where you require jquery.. am I missing something? I see third_party/terra/jquery/globalize/globalize.min.js -- is jQuery defined inside of that?\nI honestly have no idea. This is a legacy project that I have been assigned too and I have no idea what a lot of those third party dependencies are there for. If I wanted to require jquery on my own and not rely on a transitive dependency what would I need to do? . I've tried adding that to spec_helper.js and when I run teaspoon I get:\nError: ActionView::Template::Error: couldn't find file 'jquery'\n  (in /home/duane/orion-date_time_picker/spec/javascripts/spec_helper.js:27)\nShould it go in teaspoon_env.rb?. Here is my gemfile.lock in case that tells us anything:\n```\nPATH\n  remote: .\n  specs:\n    orion-date_time_picker (2.5.0.SNAPSHOT)\n      blue_steel (~> 9.3)\n      jquery-ui-rails (~> 6.0)\n      moment_timezone-rails (~> 0.5)\n      momentjs-rails (~> 2.15)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      terra-rails-view_models (~> 3.0)\nGEM\n  remote: https://rubygems.org/\n  remote: http://repo.release.cerner.corp/main/rubygems/\n  remote: http://repo.release.cerner.corp/internal/rubygems/\n  specs:\n    actionmailer (4.2.9)\n      actionpack (= 4.2.9)\n      actionview (= 4.2.9)\n      activejob (= 4.2.9)\n      mail (~> 2.5, >= 2.5.4)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n    actionpack (4.2.9)\n      actionview (= 4.2.9)\n      activesupport (= 4.2.9)\n      rack (~> 1.6)\n      rack-test (~> 0.6.2)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.2)\n    actionview (4.2.9)\n      activesupport (= 4.2.9)\n      builder (~> 3.1)\n      erubis (~> 2.7.0)\n      rails-dom-testing (~> 1.0, >= 1.0.5)\n      rails-html-sanitizer (~> 1.0, >= 1.0.3)\n    activejob (4.2.9)\n      activesupport (= 4.2.9)\n      globalid (>= 0.3.0)\n    activemodel (4.2.9)\n      activesupport (= 4.2.9)\n      builder (~> 3.1)\n    activerecord (4.2.9)\n      activemodel (= 4.2.9)\n      activesupport (= 4.2.9)\n      arel (~> 6.0)\n    activesupport (4.2.9)\n      i18n (~> 0.7)\n      minitest (~> 5.1)\n      thread_safe (~> 0.3, >= 0.3.4)\n      tzinfo (~> 1.1)\n    addressable (2.5.1)\n      public_suffix (~> 2.0, >= 2.0.2)\n    arel (6.0.4)\n    ast (2.3.0)\n    astrolabe (1.3.1)\n      parser (~> 2.2)\n    basset-client (2.1.1)\n      cerner-oauth1a (~> 1.0, >= 1.0.1)\n      cerner-timber (~> 2.1, >= 2.1.1)\n    binding_of_caller (0.7.2)\n      debug_inspector (>= 0.0.1)\n    blue_steel (9.5.0)\n      haml (~> 4.0.4)\n      haml-rails (~> 0.4)\n      hamlbars (~> 2.0.1)\n      handlebars_assets (= 0.14.1)\n      hi-format (>= 1.6)\n      less-rails (~> 2.7)\n      rails (~> 4.0)\n      sprockets-rails (~> 2.3)\n    brakeman (3.7.0)\n    builder (3.2.3)\n    bundler-audit (0.6.0)\n      bundler (~> 1.2)\n      thor (~> 0.18)\n    byebug (9.0.6)\n    capybara (2.14.4)\n      addressable\n      mime-types (>= 1.16)\n      nokogiri (>= 1.3.3)\n      rack (>= 1.0.0)\n      rack-test (>= 0.5.4)\n      xpath (~> 2.0)\n    cerner-oauth1a (1.0.1)\n    cerner-timber (2.1.1)\n      activesupport (>= 4.2.0)\n    childprocess (0.7.1)\n      ffi (~> 1.0, >= 1.0.11)\n    cliver (0.3.2)\n    coderay (1.1.1)\n    coffee-rails (4.2.2)\n      coffee-script (>= 2.2.0)\n      railties (>= 4.0.0)\n    coffee-script (2.4.1)\n      coffee-script-source\n      execjs\n    coffee-script-source (1.12.2)\n    colorize (0.7.7)\n    combustion (0.7.0)\n      activesupport (>= 3.0.0)\n      railties (>= 3.0.0)\n      thor (>= 0.14.6)\n    commonjs (0.2.7)\n    connection_pool (2.2.1)\n    daemons (1.2.4)\n    debug_inspector (0.0.3)\n    diff-lcs (1.3)\n    docile (1.1.5)\n    erubis (2.7.0)\n    eventmachine (1.0.9.1)\n    execjs (2.7.0)\n    faraday (0.12.2)\n      multipart-post (>= 1.2, < 3)\n    ffi (1.9.18)\n    gc_stats (1.0.1)\n      rails (~> 4.1)\n    globalid (0.4.0)\n      activesupport (>= 4.2.0)\n    haml (4.0.7)\n      tilt\n    haml-rails (0.9.0)\n      actionpack (>= 4.0.1)\n      activesupport (>= 4.0.1)\n      haml (>= 4.0.6, < 5.0)\n      html2haml (>= 1.0.1)\n      railties (>= 4.0.1)\n    hamlbars (2.0.1)\n      execjs (>= 1.2)\n      haml\n      sprockets\n      tilt\n    handlebars_assets (0.14.1)\n      execjs (>= 1.2.9)\n      sprockets (>= 2.0.3)\n      tilt\n    hi-checkup (1.10.0)\n      rails (~> 4.0)\n    hi-date_time (1.3.0)\n      iso8601 (~> 0.8.5)\n    hi-format (1.10.0)\n      hi-date_time (~> 1.1)\n      i18n (~> 0.7.0)\n      rails (>= 4.0.0, < 6.0)\n    hike (1.2.3)\n    html2haml (2.2.0)\n      erubis (~> 2.7.0)\n      haml (>= 4.0, < 6)\n      nokogiri (>= 1.6.0)\n      ruby_parser (~> 3.5)\n    http_accept_language (1.0.2)\n    httparty (0.15.5)\n      multi_xml (>= 0.5.2)\n    i18n (0.7.0)\n    inline_svg (0.12.1)\n      activesupport (>= 3.0)\n      loofah (>= 2.0)\n      nokogiri (>= 1.6)\n    ion_common (4.3.2)\n      activesupport (~> 4.1)\n      basset-client (~> 2.1)\n      cerner-timber (~> 2.1, >= 2.1.1)\n      gc_stats (~> 1.0)\n      http_accept_language (~> 1.0)\n      i18n (~> 0.6)\n      ion_request_store_registry (~> 1.0)\n      millennium_service_discovery (~> 2.0)\n      thrift (~> 0.9)\n    ion_dcos (1.0.1)\n      activesupport (~> 4.0)\n      jwt (~> 1.5)\n      marathon-api (~> 2.0)\n      timber (~> 1.0)\n    ion_develop_rails (2.7.0)\n      activesupport (>= 3.0.0)\n      capybara (~> 2.7)\n      coffee-rails (~> 4.2)\n      combustion (~> 0.5)\n      hi-checkup (~> 1.8)\n      ion_dcos (~> 1.0)\n      orion-rails-layouts (~> 1.0)\n      philter (~> 1.5)\n      poltergeist (~> 1.8)\n      pry-byebug (~> 3.3)\n      rails (~> 4.1)\n      railties (>= 3.0.0)\n      rake (~> 0.9)\n      rdoc (~> 4.0)\n      roll_out (~> 1.10, < 1.14.0)\n      roll_out-capybara (~> 1.0)\n      roll_out-jira (~> 1.2)\n      roll_out-security (~> 1.4)\n      rspec (~> 3.0)\n      rspec-its (~> 1.0)\n      rspec-rails (~> 3.2)\n      selenium-webdriver (~> 2.50)\n      simplecov (~> 0.9)\n      sprockets (~> 2.12)\n      sprockets-rails (~> 2.3)\n      therubyracer (~> 0.12)\n      thin (~> 1.6)\n      thor (>= 0.14.6)\n    ion_errors (3.2.0)\n      blue_steel (~> 9.1)\n      ion_common (~> 4.0)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      sprockets-rails (~> 2.3)\n      terra-rails-view_model (~> 1.19)\n      therubyracer (~> 0.12)\n    ion_request_store_registry (1.1.0)\n      activesupport (~> 4.1)\n      request_store (~> 1.1)\n    iso8601 (0.8.7)\n    jquery-ui-rails (6.0.1)\n      railties (>= 3.2.16)\n    json (2.1.0)\n    jwt (1.5.6)\n    less (2.6.0)\n      commonjs (~> 0.2.7)\n    less-rails (2.8.0)\n      actionpack (>= 4.0)\n      less (~> 2.6.0)\n      sprockets (> 2, < 4)\n      tilt\n    libv8 (3.16.14.19)\n    loofah (2.0.3)\n      nokogiri (>= 1.5.9)\n    mail (2.6.6)\n      mime-types (>= 1.16, < 4)\n    marathon-api (2.1.0)\n      httparty (>= 0.11)\n      json\n      trollop (>= 2.0)\n    method_source (0.8.2)\n    millennia_discovery (2.0.0)\n      rails (~> 4.1)\n      ruby-openid (~> 2.5)\n    millennium_service_discovery (2.0.0)\n      millennia_discovery (~> 2.0)\n      rails (~> 4.1)\n    mime-types (2.4.3)\n    mini_portile2 (2.2.0)\n    minitest (5.10.2)\n    moment_timezone-rails (0.5.0)\n    momentjs-rails (2.17.1)\n      railties (>= 3.1)\n    multi_json (1.12.1)\n    multi_xml (0.6.0)\n    multipart-post (2.0.0)\n    nokogiri (1.8.0)\n      mini_portile2 (~> 2.2.0)\n    orion-rails-layouts (1.4.0)\n      blue_steel (~> 9.3)\n      rails (~> 4.1)\n      react_on_rails (= 7.0.4)\n    parser (2.4.0.0)\n      ast (~> 2.2)\n    philter (1.11.0)\n      colorize (~> 0.7.3)\n      execjs (~> 2.6)\n      multi_json (~> 1.6)\n      roll_out (~> 1.7)\n      rubocop (~> 0.27.1)\n      thor (~> 0.19.1)\n    poltergeist (1.15.0)\n      capybara (~> 2.1)\n      cliver (~> 0.3.1)\n      websocket-driver (>= 0.2.0)\n    powerpack (0.0.9)\n    pry (0.10.4)\n      coderay (~> 1.1.0)\n      method_source (~> 0.8.1)\n      slop (~> 3.4)\n    pry-byebug (3.4.2)\n      byebug (~> 9.0)\n      pry (~> 0.10)\n    pry-stack_explorer (0.4.9.2)\n      binding_of_caller (>= 0.7)\n      pry (>= 0.9.11)\n    public_suffix (2.0.5)\n    rack (1.6.8)\n    rack-test (0.6.3)\n      rack (>= 1.0)\n    rails (4.2.9)\n      actionmailer (= 4.2.9)\n      actionpack (= 4.2.9)\n      actionview (= 4.2.9)\n      activejob (= 4.2.9)\n      activemodel (= 4.2.9)\n      activerecord (= 4.2.9)\n      activesupport (= 4.2.9)\n      bundler (>= 1.3.0, < 2.0)\n      railties (= 4.2.9)\n      sprockets-rails\n    rails-deprecated_sanitizer (1.0.3)\n      activesupport (>= 4.2.0.alpha)\n    rails-dom-testing (1.0.8)\n      activesupport (>= 4.2.0.beta, < 5.0)\n      nokogiri (~> 1.6)\n      rails-deprecated_sanitizer (>= 1.0.1)\n    rails-html-sanitizer (1.0.3)\n      loofah (~> 2.0)\n    railties (4.2.9)\n      actionpack (= 4.2.9)\n      activesupport (= 4.2.9)\n      rake (>= 0.8.7)\n      thor (>= 0.18.1, < 2.0)\n    rainbow (2.2.2)\n      rake\n    rake (0.9.6)\n    rdoc (4.3.0)\n    react_on_rails (7.0.4)\n      addressable\n      connection_pool\n      execjs (~> 2.5)\n      rails (>= 3.2)\n      rainbow (~> 2.1)\n    redcarpet (3.2.3)\n    ref (2.0.0)\n    request_store (1.3.2)\n    rmagick (2.16.0)\n    roll_out (1.13.1)\n      faraday (~> 0.11)\n      haml (>= 3.1, < 5.0.0)\n      mime-types (~> 2.4.3)\n      rake\n      redcarpet (~> 3.2.2)\n    roll_out-capybara (1.3.0)\n      activesupport (>= 4.0, < 6.0)\n      rmagick (~> 2.16)\n      roll_out (~> 1.10)\n    roll_out-jira (1.4.0)\n      cerner-timber (~> 2.1)\n      roll_out (> 1.5)\n    roll_out-security (1.4.0)\n      brakeman (~> 3.0)\n      bundler-audit (~> 0.3)\n      roll_out (~> 1.6)\n    rspec (3.6.0)\n      rspec-core (~> 3.6.0)\n      rspec-expectations (~> 3.6.0)\n      rspec-mocks (~> 3.6.0)\n    rspec-core (3.6.0)\n      rspec-support (~> 3.6.0)\n    rspec-expectations (3.6.0)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.6.0)\n    rspec-its (1.2.0)\n      rspec-core (>= 3.0.0)\n      rspec-expectations (>= 3.0.0)\n    rspec-mocks (3.6.0)\n      diff-lcs (>= 1.2.0, < 2.0)\n      rspec-support (~> 3.6.0)\n    rspec-rails (3.6.0)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      railties (>= 3.0)\n      rspec-core (~> 3.6.0)\n      rspec-expectations (~> 3.6.0)\n      rspec-mocks (~> 3.6.0)\n      rspec-support (~> 3.6.0)\n    rspec-support (3.6.0)\n    rubocop (0.27.1)\n      astrolabe (~> 1.3)\n      parser (>= 2.2.0.pre.7, < 3.0)\n      powerpack (~> 0.0.6)\n      rainbow (>= 1.99.1, < 3.0)\n      ruby-progressbar (~> 1.4)\n    ruby-openid (2.7.0)\n    ruby-progressbar (1.8.1)\n    ruby_parser (3.10.0)\n      sexp_processor (~> 4.9)\n    rubyzip (1.2.1)\n    selenium-webdriver (2.53.4)\n      childprocess (~> 0.5)\n      rubyzip (~> 1.0)\n      websocket (~> 1.0)\n    sexp_processor (4.10.0)\n    simplecov (0.14.1)\n      docile (~> 1.1.0)\n      json (>= 1.8, < 3)\n      simplecov-html (~> 0.10.0)\n    simplecov-html (0.10.1)\n    slop (3.6.0)\n    sprockets (2.12.4)\n      hike (~> 1.2)\n      multi_json (~> 1.0)\n      rack (~> 1.0)\n      tilt (~> 1.1, != 1.3.0)\n    sprockets-rails (2.3.3)\n      actionpack (>= 3.0)\n      activesupport (>= 3.0)\n      sprockets (>= 2.8, < 4.0)\n    teaspoon (1.1.5)\n      railties (>= 3.2.5, < 6)\n    teaspoon-jasmine (2.3.4)\n      teaspoon (>= 1.0.0)\n    terra-rails-renderable (1.1.0)\n      activesupport (~> 4.1)\n    terra-rails-view_model (1.19.0)\n      activesupport (~> 4.1)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      terra-rails-renderable (~> 1.0)\n    terra-rails-view_models (3.3.0)\n      blue_steel (~> 9.4)\n      inline_svg (~> 0.6)\n      ion_common (~> 4.0)\n      ion_errors (~> 3.1)\n      orion-rails-layouts (~> 1.2)\n      rails (~> 4.1)\n      react_on_rails (= 7.0.4)\n      terra-rails-view_model (~> 1.19)\n    therubyracer (0.12.3)\n      libv8 (~> 3.16.14.15)\n      ref\n    thin (1.7.2)\n      daemons (~> 1.0, >= 1.0.9)\n      eventmachine (~> 1.0, >= 1.0.4)\n      rack (>= 1, < 3)\n    thor (0.19.4)\n    thread_safe (0.3.6)\n    thrift (0.10.0.0)\n    tilt (1.4.1)\n    timber (1.9.0)\n      activesupport\n    trollop (2.1.2)\n    tzinfo (1.2.3)\n      thread_safe (~> 0.1)\n    uglifier (2.7.2)\n      execjs (>= 0.3.0)\n      json (>= 1.8.0)\n    websocket (1.2.4)\n    websocket-driver (0.6.5)\n      websocket-extensions (>= 0.1.0)\n    websocket-extensions (0.1.2)\n    xpath (2.1.0)\n      nokogiri (~> 1.3)\n    yui-compressor (0.12.0)\nPLATFORMS\n  ruby\nDEPENDENCIES\n  eventmachine (= 1.0.9.1)\n  ion_develop_rails (~> 2.7.0)\n  orion-date_time_picker!\n  pry\n  pry-byebug\n  pry-stack_explorer\n  sprockets-rails (~> 2.3)\n  teaspoon-jasmine (~> 2.3)\n  uglifier (~> 2.5)\n  yui-compressor (~> 0.12)\nBUNDLED WITH\n   1.14.6\n```. I notice that jquery-ui-rails is being loaded. Is this causing any issue?. ",
    "jessedoyle": "We recently ran into this issue after updating to Rails 4.2.10. I can also confirm that this patch works for us as well.\nWhat needs to be done to get this merged?\nThanks!. We recently ran into this issue after updating to Rails 4.2.10. I can also confirm that this patch works for us as well.\nWhat needs to be done to get this merged?\nThanks!. ",
    "jnbt": "I can also confirm this fixes the problem for Rails 4.2.10. I can also confirm this fixes the problem for Rails 4.2.10. "
}