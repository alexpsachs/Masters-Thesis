{
    "skidding": "The Movie Database seems to base for this job http://docs.themoviedb.apiary.io/ - it supports JSONP and a quick demo should be done using just the API and same styled components\n. js\nCosmos.mixins.PreserveScroll = {\n  /**\n   * XXX\n   */\n  componentDidMount: function() {\n    // Still not fast enough\n    this._applyPreviousScroll();\n    $(Cosmos.getComponentContainer(this)).on('scroll', this._onScroll);\n  },\n  componentWillUnmount: function() {\n    $(Cosmos.getComponentContainer(this)).off('scroll', this._onScroll);\n  },\n  shouldComponentUpdate: function(nextProps, nextState) {\n    console.log(arguments);\n    return true;\n  },\n  componentDidUpdate: function() {\n    this._applyPreviousScroll();\n  },\n  _applyPreviousScroll: function() {\n    if (!this._userScrolled && this.state.scroll) {\n      $(Cosmos.getComponentContainer(this)).scrollLeft(this.state.scroll.x)\n                                           .scrollTop(this.state.scroll.y);\n    }\n  },\n  _onScroll: function(e) {\n    this._userScrolled = true;\n    this.setState({scroll: this._getContainerScroll()});\n  },\n  _getContainerScroll: function() {\n    // parent should be $(this.getDOMNode().parent())\n    var $parentContainer = $(Cosmos.getComponentContainer(this));\n    return {\n      x: $parentContainer.scrollLeft(),\n      y: $parentContainer.scrollTop()\n    };\n  }\n};\njs\ngetComponentContainer: function(componentInstance) {\n    // XXX not modular enough, what happens when you render with Cosmos.render?\n    var $componentNode = $(componentInstance.getDOMNode()),\n        $container = $componentNode.closest('.' + Cosmos.Router.CONTAINER_CLASS);\n    if ($container.length) {\n      return $container.get(0);\n    } else {\n      return document.body;\n    }\n  }\n. Working patch for PersistState:\njs\nCosmos.mixins.PersistState = {\n  /**\n   * Heart of the Cosmos framework. Enables dumping a state object into a\n   * Component and exporting the current state.\n   *\n   * Props:\n   *   - state: An object that will be poured inside the initial Component\n   *            state as soon as it loads (replacing any default state.)\n   */\n  generateSnapshot: function() {\n    /**\n     * Generate a snapshot of the Component props (including current state.)\n     * It excludes internal props set by React during run-time and props with\n     * default values.\n     */\n    var defaultProps = this.getDefaultProps ? this.getDefaultProps() : {},\n        scroll = this._getContainerScroll(),\n        props = {},\n        value;\n    for (var key in this.props) {\n      value = this.props[key];\n      // Ignore \"system\" props\n      if (key == '__owner__' ||\n        // Current state should be used instead of initial one\n        key == 'state') {\n        continue;\n      }\n      // No point in embedding default props\n      if (defaultProps.hasOwnProperty(key) && defaultProps[key] == value) {\n        continue;\n      }\n      props[key] = value;\n    }\n    props.state = _.clone(this.state) || {};\n    // Embed previous scroll positions, but only if they're not both 0\n    if (scroll && (scroll.x || scroll.y)) {\n      props.state._scroll = scroll;\n    }\n    return props;\n  },\n  componentWillMount: function() {\n    // Allow passing a serialized snapshot of a state through the props\n    if (this.props.state) {\n      this.replaceState(this.props.state);\n    }\n  },\n  componentDidMount: function() {\n    // Attempt a first scrolling to the previous offsets\n    this._applyPreviousScroll();\n    $(this._getParentContainer()).on('scroll', this._onScroll);\n  },\n  componentWillReceiveProps: function(nextProps) {\n    // A Component can have its configuration replaced at any time\n    if (nextProps.state) {\n      this.replaceState(nextProps.state);\n    }\n  },\n  componentDidUpdate: function() {\n    // We keep updating the previous scroll along with Component updates\n    // because it might need content before stretching as much as before, but\n    // not after the user herself triggers a scroll event.\n    this._applyPreviousScroll();\n  },\n  componentWillUnmount: function() {\n    if (!this._userScrolled) {\n      $(this._getParentContainer()).off('scroll', this._onScroll);\n    }\n  },\n  _getParentContainer: function() {\n    return container = $(this.getDOMNode()).parent().get(0);\n  },\n  _getContainerScroll: function() {\n    var $parentContainer = $(this._getParentContainer());\n    return {\n      x: $parentContainer.scrollLeft(),\n      y: $parentContainer.scrollTop()\n    };\n  },\n  _getPreviousScroll: function() {\n    return this.state ? this.state._scroll : null;\n  },\n  _applyPreviousScroll: function() {\n    var previousScroll = this._getPreviousScroll();\n    if (!this._userScrolled && previousScroll) {\n      $(this._getParentContainer()).scrollLeft(previousScroll.x)\n                                   .scrollTop(previousScroll.y);\n    }\n  },\n  _onScroll: function(e) {\n    this._userScrolled = true;\n    // Don't need to listen to the scroll event anymore\n    $(this._getParentContainer()).off('scroll', this._onScroll);\n  }\n};\n. No need, w/out transitions the browser will store and restore scroll on push state events #17 \n. Merging this because this became irrelevant. Project lost scope out of control, trimming it down severely #17 \n. Conclusion: we still need jQuery for the DataFetch mixin, but should be optional\n. React 0.10.0 wasn't compatible yet, throwing the following error on setProps when running Node tests\nError: Invariant Violation: setEnabled(...): Cannot toggle event listening in a Worker thread. This is likely a bug in the framework. Please report immediately.\nRelevant issue: https://github.com/facebook/react/issues/1287\n. Next step: Person Component with \"xxx is most known for [directing]...\"\n. Styling next... (maybe thumbnails should have background image...)\n. Only thing left is to try to render as much DOM as possible even before a Component has data, to make as few DOM operations as possible when transitioning between Components\n. > Must have JSONP support\n- trakt.tv does: http://api.trakt.tv/movie/related.json/368b0395732268808fa8d151d2484e8c/tt0468569/related?callback=paulinho\n- so does RT: http://api.rottentomatoes.com/api/public/v1.0/movies/770672122.json?apikey=q48uhfxwd8a75n4xcykmym6k&callback=ciprian\n. > See if you can fetch all Movie/Person data in one request\nTheMovieDB has something called append_to_response, which can be used to merge to API requests together, like movie summary + related movies. track.tv doesn't seem to, but the API responses seem pretty cool (cooler.) For example you can use imdb ids directly to target movies.\n- Main movie entry point http://trakt.tv/api-docs/movie-summary - Contains needed meta fields, images, ratings and cast/crew (just not related)\n- Related movies - http://trakt.tv/api-docs/movie-related - So we'd need two requests per movie... let's see if the content is better still\nRotten Tomatoes still can't aggregate more API calls in one, but they have a pretty cool movie summary and links to related API methods (which encourages hyper media and goes well with the principles of Cosmos)\n- Main movie entry point http://developer.rottentomatoes.com/docs/json/v10/Movie_Info - Contains needed meta fields, images, ratings and abridged cast and directors (no writers tho, but we can go without, sorry writters...)\n- Related movies http://developer.rottentomatoes.com/docs/json/v10/Movie_Similar- Still, two requests per movie... let's see if the content is better still\n. > See how good \"also see..\" movies are\nFirst 10 related movies for \"The Dark Knight (2008)\":\nThemoviedb:\n- Batman: Under the Red Hood (2010)\n- The Dark Knight Rises (2012)\n- Batman Begins (2005)\n- Justice League: The New Frontier (2008)\n- Batman (1989)\n- Reasonable Doubt (2014)\n- Batman Returns (1992)\n- Batman Forever (1995)\n- Batman & Robin (1997)\n- This Woman Is Dangerous (1952)\ntrackt:\n- Scarface (1983)\n- The Dark Knight Rises (2012)\n- Heat (1995)\n- Sherlock Holmes (2009)\n- Ronin (1998)\n- Hackers (1995)\n- Training Day (2001)\n- Drive (2011)\n- In Brudges (2008)\n- The Town (2010)\nThere are many things to consider here, and it's nice that themoviedb (I've seen examples with way more old movies show up in the related list for a contemporary movie), but the ones from trakt seem more varied and feel less like they were matched by a soulless computer algorythm..\nRT: http://api.rottentomatoes.com/api/public/v1.0/movies/769959054/similar.json?apikey=q48uhfxwd8a75n4xcykmym6k\nWeirdly, RT seems to only return 5 max similar movies.\n- Batman Begins (2005)\n- Batman (1989)\n- The Dark Knight Rises (2012)\n- Iron Man (2008)\n- Batman Returns (1992)\n. > See how good \"know for\" movies for person are\nOK, it turns out trakt.tv doesn't really have a rich Person API. You can barely request info about a person, searching them by name http://api.trakt.tv/search/people.json/368b0395732268808fa8d151d2484e8c?query=Wes+Anderson&limit=1, but there's no way to list their associated movies. Nor do most of people have an associated photo.\nSo far trakt would only be an option if we gave up browsing people altogether.\n. Let's throw Rotten Tomatoes API in the mix as well: http://developer.rottentomatoes.com/, will update comments\n. Turns out themoviedb is the only API providing extensive info on People as well, not just Movies. trakt.tv, RT and http://www.omdbapi.com/ as well, don't. Even though trakt.tv and RT seems to have nicer APIs, we'll stick to themoviedb because they make more data available and through the use of a single API call.\n. Since themoviedb is the winner, only going to mention their rate limit policy:\n\nWe do enforce a small amount of rate limiting. Please be aware that should you exceed these limits, you will receive a 503 error.\n- 30 requests every 10 seconds per IP\n- Maximum 20 simultaneous connections per IP\n. Contact themoviedb admin to make sure api key won't be shut down on traffic or public visibility\n. Abandoning for now because it requires coupling between DataFetch and PersistState mixins\n. This requires architectural decisions that involve Component events that the router can subscribe to. At the moment the Router fetches a Component's snapshot when changing the url, sending props to History from Component feels like it breaks its encapsulation as it has to know it's a Root Component and communicate with the Router directly. TBD\n. Router now extracts snapshot in render callback\n. Fixed by #29 \n. Interesting idea. It would be even cooler if the API could support more than one request in a HTTP connection (something like django-superbulk).\n\nBut I'm not sure how you can trace all the components to be loaded all the way from the root component to the tree leaves. The component props can either come from an already fetched and parsed request or from the DOM, which is hardcoded inside the render method.\n. A similar but reversed idea that I've been thinking about is for generateSnapshot to nest all the composed component props recursively. This has two benefits. 1. You can persist the entire state of a component including its children and it all will be loaded without the need of any request. 2. The cached history entry will also contain the entire nested props/state which will again render all the current hierarchy of components in a blink when going back in history.\n. As honored as I am for having an issue opened by @petehunt, this is no longer relevant as the Cosmos project evolved into something that supports React components instead of dictating their design (besides the need to be encapsulated).\nPete\u2013whatever you may be doing at the moment, if you ever get another chance to check out the new project mission feel free to check out the (simplified) README: https://github.com/skidding/cosmos/blob/master/README.md \n. lgtm\n. :+1: \n. > @skidding We need to toggle the state var if the request errors. However, the error callback will print to the console so in tests we'll see some extra output. Do we want to suppress it? If so, how? We could replace the console.error function and restore it at the end of the test.\nWell in the future we should create some user callback mechanism for error handling and can replace console.error altogether. But for the sake of respecting the current scope of the issue, if it's possible, yes, we should mock console.error in the tests to silence it.\n\n@skidding Also, to write unit tests for these events we need to unmock the fetchDataFromServer method which is mocked at the beginning of the spec. Which approach do you think is better?\n\n2, new spec.\n. This was already done.\n. CR @NiGhTTraX \n. npm install --save jquery :angry: \n. @NiGhTTraX review?\n. @NiGhTTraX fixed dependencies in header\n. Specs look good :+1: \nYou might also need to update previous tests as well.\n\nTo be sure I understand the code correctly. The reason for the following is:\n\nmove the check for dataUrl being the same into the componentWillReceiveProps method\n\nNo need to check previous dataUrls in componentWillMount as it's clearly the first one to arrive (previously it probably compared it to an undefined value of this.dataUrl)\n\ndo not store dataUrl on the instance\n\nSince you're only checking in componentWillReceiveProps you have both the current and the next props at hand to compare\nRight?\n. LGTM!\n. Nice find, sorry for that! \u2014 Merge at will\n. Done.\nOn Sun, Oct 5, 2014 at 9:26 AM, Andrei Picus notifications@github.com\nwrote:\n\n@skidding https://github.com/skidding can you please bump the npm\npackage?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/skidding/cosmos/pull/64#issuecomment-57943023.\n\n\nBest regards,\nOvidiu Chereche\u015f\n. Do you think it would make sense to add an is prefix? Like isFetchingData \nOtherwise LGTM!\nPS. You should be able to merge it yourself now\n. Bumped :dancer:\n. > The issue needs a lot more speccing. For instance, I don't like the headers param being the last and the callback being second to last. What if I don't want to pass a callback?\nI considered sending a callback but not headers is more popular than vice-versa. But it is ugly to not have the callback as the last argument indeed.\n\n@skidding The solution is actually the list of deliverables :)\n\nWell I want to validate those first.\n\nThe state changing methods seem to refer only to collections of objects. Can you provide more details?\n\nE.g.\njs\nfunction _getObjectIndexInState(object) {\n  return _.findIndex(this.state.data.objects, object);\n},\nfunction _updateObjectToState(object) {\n  var objectIndex = this._getObjectIndexInState(object);\n  var data = {};\n  data[objectIndex] = {$merge: object};\n  var newData = update(this.state.data, {objects: data});\n  this.setState({\n    data: newData\n  });\n}\n. Closing this for now because it seems it would make more sense to use a lib like https://github.com/request/request\n. Please review @NiGhTTraX @palcu \n. @NiGhTTraX what say you, mister?\n. @NiGhTTraX what do you think of the new updated and simplified specs? https://github.com/skidding/cosmos/blob/77-improve-docs/README.md#specs\n. @NiGhTTraX please review\n. Please review @NiGhTTraX \n. > Think about when shouldComponentUpdate returns false\nThere are two cases when state is flushed:\n1. componentDidMount\n2. componentDidUpdate\ncomponentDidMount\ncomponentDidMount will always be called, so shouldComponentUpdate returning false changes nothing here.\ncomponentDidUpdate\nHere is the worst case scenario:\nSay there is one component with children and it has shouldComponentUpdate returning false.\n1. Mount/render component\n2. Load nested state through setProps\n3. Change child state, either through refs.child.setState or by user interaction in the child\n4. Calling forceUpdate on component will result in the children receiving the state passed in 2. and overriding the one set in 3.\nConsidering props.state is usually only used when mounting, when loading a serialized state from a fixture or some snapshot, this is very unlikely to happen. I think it's way better than the previous compromises.\nWorst case, we remove the functionality to pass state after mounting altogether.\n. @NiGhTTraX check out the brand new bundle :swimmer::swimmer::swimmer: \n. Done https://gitter.im/skidding/cosmos \u2014 Thanks for the suggestion\n. https://github.com/skidding/react-component-playground/issues/6\n. @Azeirah I completely rewrote the readme to be more simple and concise: https://github.com/skidding/cosmos/blob/master/README.md \u2013 Let me know if you have any questions.\n. > Do you have any idea of how this should be implemented?\nLet's start by figuring out what part of the webpack config you need to customize.\n. > so I kinda like to have karma approach of being able to override default settings if needed.\nYou're right, all webpack arguments should be customizable.\nI was thinking of having something like an optional component-playground.config.js in the project root, where you run node_modules/.bin/component-playground\nAnd that config should extend the built-in webpack config. One question I faced so far: should it be shallow or deep extending? For output. you want it deep for sure, but not sure about the other keys where you'd rather reset the default value than extend it.\nAlso, the webpack config should be only a key inside component-playground.config.js, because you might want to customize other stuff as well, like the options for ReactQueryStringRouter. E.g.\njs\n// component-playground.config.js\n{\n  router: {\n    defaultProps: {\n      // ...\n    },\n  },\n  webpack: {\n    loaders: [\n      // ...\n    ]\n  }\n}\n. > What about having a function for each config section, that gets original config and returns modified, e.g.\nNice!\n. https://github.com/skidding/react-component-playground/issues/5\n. :hammer:\nFor the record: http://kangax.github.io/compat-table/es6/\n. Awesome!\nTested and it works great\n\nPlease bump the version to 0.6.2 and feel free to write a README paragraph about the react-hot-loader integration.\n. Patch is already on npm. Thanks! \n\nchanging a fixture will force a full reload.\n\nThat makes sense. At least for now, since it would interfere with the changes you make inside the playground fixture editor.\n\nIt may be possible to do hot reloading for fixtures too but to be honest I couldn't find where they were loaded in the source. :-)\n\nSome breadcrumbs...\n- (optional) Alias to fixtures folder in case you want a custom path\n- Tree of fixtures grouped per component sent to ComponentPlayground\n- An entire folder is mapped recursively using webpack context\n- The contents of each fixture is extracted\n. As long as your components are encapsulated, you're free to use whatever you want for styles. If you have the time to try out Cosmos with components that use smart-css it'd be pretty cool to confirm.\nI think the styles part from the README requirements is a bit confusing.\n\nwhich means you need to be using style-loader.\n\nshould be:\n\nwhich means you probably need to be using style-loader.\n. Closing this as smart-css is outside the scope of Cosmos.\n. Old description:\nA foundation for maintainable web applications. Powered by React.\n\nNew description:\n\nA development tool for designing and maintaining React components.\n. > I understand that there is a limitation in the current implementation, but are there any plans or ideas of supporting this?\n\nPositive.\nThe problem stems from they way the parsed fixture editor content extends the original fixture and the way unserializable fields are handled. I have a detailed plan for how to fix this, but it will take a couple of more days to get to it. I'll try to create a test very similar to your example to make sure it covers it.\n. @w0rm do you know of a way to determine weather or not a JS object is serializable?\nJSON.parse(JSON.stringify(obj)) is not reliable. E.g.\n``` js\nvar children = [\n  React.createElement('span', {\n    children: 'test child'\n  })\n];\n// deep strict comparison\n_.isEqual(children, JSON.parse(JSON.stringify(children)));\n// return true\n```\nOf course they are not equal, the serialized/deserialized object doesn't have any inherited prototype...\n. Low priority now that you can customize the webpack config. Let's see if others request for this default as well.\n. Cosmos is now a boilerplate. The webpack config is now part of your project.\n. Finished review, only details!\n. Awesome. Let's change the way web apps are built! :blossom:\n. Any idea why your commits are not linked to your GitHub profile?\n\n. > Oops, it's because I did this from work and my git is configured with a different email address there\nIt might link to your user if you add that email as well to your GH account, and get you on the contributors list ;)\nFYI: https://github.com/skidding/flatris/commit/a89cd823d39fde31abcf3cdc63e98e342f767b03\n. > Is there any way to prevent that?\nCurrently, not really. The only time when this stops is when you focus on the fixture editor. When you're not focused on the fixture editor ComponentPlayground polls the loaded component for state changes and updates the fixture contents every 100ms...\n... even when the state didn't change, which is were the problem lies.\nNow, the thing is the props for the loaded component don't change, but the component renders because the parent (ComponentPlayground) renders. Why does the parent render? Because of the setState (3rd link below). But it shouldn't re-render if the state is the same.\nSo a quick solution might be to implement a PureRenderMixin implementation for ComponentPlayground.shouldComponentPlayground, but with deep comparison. My only worry is that it might be less performant to deep compare entire fixture (props/state) trees every 100ms than to trickle down the render without DOM changes to apply as a result, but I might be wrong.\nFYI, here is the relevant code:\n- Where the interval is set\n- When the update is ignored\n- How fixture contents are updated with component state\n. > Perhaps we could represent the ComponentPlayground's state using something like Immutable.js, so that it would be trivial to implement shouldComponentUpdate?\nYes, that thought went through my mind more than once, but I have zero experience with immutability and until recently myself and the company I work at were the only Cosmos users.\nSound like a good time to learn. Let me know if you have any ideas or insights :dancers: \n. @moretti fixed this in react-component-playground@0.3.1: https://github.com/skidding/react-component-playground/pull/17\nRemove cosmos-js from node modules, install again and should no longer render endlessly. Let me know if doesn't work as extended.\n. > Reducing this further to:\n\nmodule.exports.webpack = function (webpackConfig) {\n  webpackConfig.module.loaders.push({\n    test   : /\\.scss$/,\n    loader : 'style!css!sass'\n  });\n  return webpackConfig;\n};\n\nYour example worked for me. All I did was create a component-playground.config.js file with the contents above and npm install sass-loader in the host project, and the playground was loading scss files successfully.\nCan you provide more context and the errors webpack is throwing?\n. @ksmth any update on this issue?\n. Cosmos is now a boilerplate. You should be able to install any loaders you want now.\n. This is pretty cool. It will create some false positives since some components require default props, but I still think it's worth it since it lowers the on-boarding barrier. Especially since you already have components in your project, while fixtures might be a new concept.\nOn top of the inline comments I added, please create a test for the created lib method. It's trivial, but I want to keep the coverage at 100% (besides the config files which are a bit hard to test atm :). Here's an example: https://github.com/skidding/cosmos/blob/master/tests/component-playground/lib/parse-fixture-path.js, but this should be even simpler.\n. @lapanoid let me know if I can help with anything to finish this. It's pretty useful.\n. @lapanoid I want to merge this as well, but you missed styling comment. Added another comment about the regexp as well, but after that we're good to go. Tested it locally and seems to work!\nPlease check the Github UI to see if there are any pending comments before asking for review again:\n\nThanks!\n. Why do you say the structure needs to be flat? You can nest the components with how many levels you want.\n1. The a look at the file structure example in the README: https://github.com/skidding/cosmos#file-structure\n2. The fixture path regexp supports nested components: https://github.com/skidding/cosmos/blob/master/component-playground/lib/parse-fixture-path.js#L3\n3. Here is a test for nested component fixtures: https://github.com/skidding/cosmos/blob/master/tests/component-playground/lib/parse-fixture-path.js#L12-L17\nCome to think of it, it's your PR that might break this. By the look of regexp in the parseComponentPath function it only supports one level of component hierarchy: https://github.com/lapanoid/cosmos/blob/master/component-playground/lib/parse-component-path.js#L3\n. I prefer the config more than the cli args. Out the back of my head, I'm thinking:\n1. Abstract the getUserConfig part into a lib so that it can be reused\n2. Use it in the bin file to override the localhost:8989 settings\n3. These settings could be set under userConfig.server.[hostname|port], except they would be just properties and not a method like the webpack config (hopefully it's not too confusing to be different)\nWhat do you think? I'm open to other suggestions as well.\n. Finished review\n. There's still a problem with this PR. You need to set the custom port for the HMR entry point as well: https://github.com/skidding/cosmos/blob/master/component-playground/config.js#L30\n. Everything seems in order now. Thanks for the contribution!\n. I'm glad you managed to make this work, it will be useful for users I'm sure! I only have one comment with the PR\n. Merged :tada: \n. > Can you check if you have multiple Reacts on one page? These errors definitely look like a \u201cduplicate React\u201d issue.\n+1\n\nIs there an easy way to test whether there are multiple reacts included in a webpack?\n\nLook for something unique from the React source in an unminified bundle and see if you find it twice or more. My quickest way to check is to see if the bundle is double the lines of code it usually is, because React is 99% of the bundle in a small project :)\n\nI'll add that I followed the Cosmos installation instructions on a clean package (though I did do a --save-dev for cosmos-js).\n\nCan you open source that setup if you started from scratch? It would be easier for us to investigate this way.\n. I managed to reproduce and find the source of the problem, but I don't have a solution yet.\nWhen we require the component class for a fixture, webpack creates a dynamic require context for all files from the components folder. It the require were require('components/' + componentName + '.jsx') we wouldn't have this problem, but some React components (namely ES6 classes) use .js extensions, and I can't think of a way to fit a .jsx? regexp in this require statement. \nWe could create a context by hand, like requireComponent = require.context('components', true, /\\.jsx?$/), but then we'd have to append the component file extension when we do requireComponent(componentName), because for some reason resolve extensions don't apply to context requires. So this doesn't work either.\nAny ideas?\n. This was probably solved by the latest changes. In any case, it can be improved by customizing get-component-fixture-tree.js. Check out the new docs: https://github.com/skidding/cosmos/tree/master/webpack-boilerplate/react-0.13\n. @faassen this patch should be a fix for your problem: https://github.com/skidding/cosmos/pull/180\n. Cosmos currently works with one component per module only. What you can do (though I'm not sure why you'd bundle more components into one module) is create your own Cosmos integration by working with the ComponentPlayground directly. You can parse your modules however you want and then construct the ComponentPlayground props manually.\n. You can now achieve this by customizing get-component-fixture-tree.js. Check out the new docs: https://github.com/skidding/cosmos/tree/master/webpack-boilerplate/react-0.13\n. Do you have a working example? It would be nice if you could post a screeenshot or gif. I'm currently on vacation and am not able to try it out myself. I return in 2 weeks so sorry in advance for not being responsive.\nA few notes:\n- Passing html through props seems a bit heavy, and makes the component playground a bit harder to serialize. One thing that I wanted to for a while is install Cosmos inside the playground repo to test the playground with itself. This might make it harder. Did you consider passing the JSON or the Markdown string to the playground, for it to turn it into HTML (a declaration markdown to HTML conversion in the render function would be cool if possible...).\n- Since the project already depends on Lodash, feel free to use it for brevity. It felt like there were some places where you could benefit from its functions. It also has a string template API which might make the markdown generating code more readable.\n. >  Maybe we could just require it from their package instead, although that might be a bit risky\nYeah, I think it's best to copy it since it's an example.\n\nBut I can refactor the code to make use of lodash to make it nicer if you feel like that's the way to go.\n\nI thought you wrote it by hand, but since it's taken from the react-docgen repo and needs no change there's no point in rewriting it.\n. @pekala while the repo has been through major changes since this PR, I still think it's a good idea. \nIt's also easier to implement this now. We could:\n1. Add component meta data along with components and fixtures in the webpack entry\n2. Create a Proxy that renders the props info next to the rendered component (see the ReduxProxy for a Proxy example)\n3. Bonus: Stop rendering component altogether if fixture is missing required props. This prevents nasty errors and can provide an onboarding experience for users, telling them which props are missing and overall instructions on creating fixtures.\nLet me know if this still interests you, I can provide more assistance.\n. Closing this due to inactivity. Feel free to revive.. The code here is definitely incompatible with the current state of RC, but I think it should be read by anyone looking to restart the same idea. Also keep in mind that react-docgen might've evolved since 2015. @ovidiubute A new issue that links to this PR would be best.. Progress on what? :)\n. > Just testing a simple component taken from the cosmos-example and I pulled out flux and the store leaving just the simple button.\nCan you please describe the steps to reproduce this more accurately? I removed the Flux button along with the dispatcher and store and the other components worked just fine.\n. Thanks.\n. Why would it conflict? It's only a peerDependency.\n\nbut it seems a new install suggestion for react, react-hot-loader, etc\n\nWhat do you mean by this?\n. Thanks for the heads-up, will have to read more about the peerDependency deprecation.\n. > They are not getting deprecated altogether, it's just that they will not be automatically installed,\nThat's good, it should be like this. React has a reputation for not working with more than one instance bundled together :)\n. > With Relay and the brave new world of colocated component query fragments, I was thinking Cosmos could get an interesting Relay extension...\nI like the Relay extension. Note that an advantage of the component playground is the offline/isolated dev env. Still, having both offline fixtures and the option to hook up to Relay endpoints would be double useful.\nThat being said, the easiest way to add this extension at the moment would be in the lib that generates the function tree for ComponentPlayground. There's already a PR to automatically generate an empty fixture if no fixtures are found for a component. So the trend to make previously defined fixtures optional is already emerging!\nThen there's the user config that we could extend for broader use.\n\nAnother idea. Be able to star and label particular objects that you could come back to e.g. an entity that's prone to bugginess. These could show up where fixtures are now. Store this information in a dot directory in the user's home directory...\n\nI like the concept of fixtures as \"bookmarks\" as well. But this could be a later stage, right now it's pretty easy to fire up the editor, copy the current props+state and create a fixture file out of it.\n\nOooooo... and what if could create a grid wall of component instances. Say assign each component to a 100x200 space and each one pulling in a random entity...\n\nAs for the grid, I can +1 that it's a real need. Especially for designer-types and CSS development. Not sure about the resizing, since you could do that via browser resize or dev tools viewport emulation, but viewing more states of the same component at the same time is gold.\nI see this as a different component alongside ComponentPlayground, (e.g. ComponentGrid). Then Cosmos could just integrate it and have more bin commands like node_modules/.bin/component-playground. The goal of the Cosmos project is to make UI development easier through component design and encapsulation. Sky is the limit :)\nGood stuff!\n. I'd love it if @KyleAMathews or somebody else revived this thread, but it's 2y old so I'm closing it for now.. I tried adding a getter to the http://github.com/skidding/cosmos-example repo to see if your error reproduces. Indeed, it crashes:\nUncaught TypeError: Cannot set property a of #<SimpleButton> which has only a getter\nBut if I'm not mistaken, it's triggered by https://github.com/gaearon/react-hot-loader. See https://github.com/gaearon/react-hot-loader/issues/131\n1. One quick fix is to create a corresponding setter, but it might still have side effects.\n2. Until the issue gets fixed, you can use a react-hot-loader fork. You can follow instructions here and then install cosmos-js again in your project. It worked for me.\n. Cosmos no longer uses react-hot-loader. It now extends react-transform-boilerplate. Check out the new docs: https://github.com/skidding/cosmos/tree/master/webpack-boilerplate/react-0.13\n. - Does the rendering happen continuously without doing anything with the component? If so, how often?\n- Does this happen for any component? Including ones from the cosmos-example repo?\nI didn't have time to test react-render-visualizer, but ComponentPlayground shouldn't re-render unless\n1. the component re-renders by itself\n2. you change the fixture in the editor\nHere's a gif I made that confirms this:\n\n. @AddictArts let me know if you have more data on this topic.\n. Thanks!\n. Ideally it should be applied to all files, because React classes can be .js as well, but we bumped into a problem where Highcharts was no longer working after going through the RHL loader. Right now you can configure to webpack config to meet your needs. Closing until we figure out the right way.\n. This needs more thought\n. Published on npm under cosmos-js@0.6.7\n. Stage 1 features are experimental and subject to change. They are cool, but I want Cosmos to be as accessible as possible by default. E.g. I'm using it at work and if I merged this I'd have to override the option because I don't want to enable my colleagues to use experimental features in Enterprise software.\nI am thinking, however, on a way to make the lib easier to configure, and that's something that will be improved in the future.\n. Cosmos is now a boilerplate. You can now easily config Babel per project.\n. Did it work? :)\n. > Anyway, my main point is this is still a really freaking awesome project!!!!\nThanks! A lot of work has been put into it but in a way it's just the beginning of what it can become :)\n\nMy component optimistically set the internal state's value when clicked. But, for some reason, shouldComponentUpdate is firing.\n\nI would need to see the source of that component. The component should not re-render unless you change the fixture or the fixture contents in the editor.\n. @ericclemmons is this still a problem?\n. Almost managed to make it work.\nThe only incompatibility is that Babel looks for plugins in the current directory, while the entire Cosmos setup is made to look for plugins inside the Cosmos package\nI wanted to make Cosmos work with as little setup as possible, but what it does with merging the user's webpack config with the one pre-packaged is most probably an anti-pattern and I've been meaning to change this for a while. Cosmos should give up trying to be a one-liner (node_modules/.bin/component-playground) and be turned into a boilerplate, like @gaearon's projects :). It's basically a setup of ComponentPlayground + Hot Reloading. It might be a bit less approachable at first but it would become more flexible, as a Browserify boilerplate would be almost just as easy to make as a webpack one. Currently it's tied to webpack.\n. Done. Check out the new docs: https://github.com/skidding/cosmos/tree/master/webpack-boilerplate/react-0.13\n. Cosmos is not yet up to speed with the new ReactDOM API. Did somebody test to see if the current version is still compatible with 0.14?\nThe change is pretty big and should come be made inside-out, starting with https://github.com/skidding/react-component-tree. Help is appreciated.\nI wouldn't want to remove the peerDependency blindly and then have people complain Cosmos is broken on 0.14.\n. > Just checked latest with React 0.14 and it seems to be working fine just spits out a few warnings.\nCosmos is now a boilerplate, so you can now upgrade React to 0.14 in your project if everything already works well.\nWill include a 0.14 boilerplate as well in the future.\n. There doesn't seem to be an official changelog yet, but 0.14 seems to have some serious API changes. Did you test Cosmos with a React 0.14 project to see if everything still works?\n. > @skidding @teosz This should be closed/changed I guess as react 14 officially released\nCosmos is now a boilerplate, so you can now upgrade your project to React 0.14.\nWill include a 0.14 boilerplate as well in the future.\n. How would you generate two HTML files and two .js bundles out of a single build task?\n. Cosmos is now a boilerplate and the devServer works for both your dev environment and the playground, based on an --env var. \n. Done.\n. Both. You can load any component in the playground as long as their props and/or state are serializable.\n. Well if you want to test the onChange handler you'll need to load the MyForm component in the playground. For the MyCheckBox component you can just do something like this:\njs\nonChange: function() {\n  console.log('Usually my parent deals with change'); // :)\n}\n``\n. > It's there a way to reference other fixtures directly like:\nIs it possible via require calls, but they won't be seen in the interface editor, which only shows serializable properties of the fixture.\nThe vision is replace the simple fixture editor with a fully featured editor which can read source files instead of just serializable JSON, then you'll be able to do requires between fixtures, even write adhoc functions for props. But this is still a bit far in the future for now.\n. Thanks! This is included in 0.6.9\n. @goatslacker wdyt?\n. > This is good I just have a note on React 0.14/0.13 compatibility. How about you support both?\nGood idea, created #179 for this.\n. :star2: \n. > You can then also conditionally load ReactDOM and use it to render. That seems to be all you're using React 0.14 for.\n@goatslacker Do you have any example for conditionally loading react-dom based on version?\nI'm not sure what should go in the peerDependencies of the smaller modules that Cosmos is built on.\n. Patch published under 0.7.1 :+1: \n. > Will put up a 'breaking' branch later today to illustrate.\nAny luck? It would be great to upgrade the boilerplate to Babel 6 altogether. If you already have the knowledge feel free to create a PR for it.\n. Fixed in #184\n. Well the docs do show an example of how the file structure works and the fact that this can be overridden by adapting get-component-fixture-tree.js to your project. But it doesn't say how... which is probably the hardest part, since that file is embedded in the cosmos-js package, not in the boilerplate.\nI think the best way here would be to make Cosmos configurable, by passing some optional RegExp objects or some callback functions. This would make it possible to configure the way components and fixtures are matched per project. What do you think?\n. Update: There's a new CLI in town that hides a lot of the ugly config. This use case is not yet supported but I think the project is more modular and support for the nested file structure can be implemented without too much sweat. I'll provide hints to make it easy for anyone to get started:\nThe component path is parsed like this \njs\nnew RegExp(`^${componentsRootPath}/(.+).jsx?$`)\nWe could add a config flag like componentsHaveOwnDir that changes this to\njs\nnew RegExp(`^${componentsRootPath}/(.+)/(.+).jsx?$`)\nThis would turn /path/to/components/dashboard/header/header.jsx into\n$0 /path/to/components/dashboard/header/header.jsx\n$1 dashboard/header\n$2 header\n${componentsRootPath}/$1 would be used to search for fixtures inside component's own dir, and also $1 (to include a possible namespace) for the component name (fixing the spinner/spinner issue @BrunoDF reported.\ncc @carloshpds @catalinmiron \n. Support for nested component structure (like @BrunoDF was using when starting this thread) has been added in #237 and released under react-cosmos-webpack2.0.0-beta2.\nLet me know if you try it out and/or have any problems with it. Thanks!. Hi @RaitoBezarius, thanks for your nice words!\nRegarding your situation, this PR is half the solution already: https://github.com/skidding/cosmos/pull/181, right?\nI would love to add support for this use case, I was just expecting a broken example before merging the fix, because I'm still using Babel 5 and ES6 classes already for for me. @narenranjit said he will provide this broken example, but probably didn't manage to get the time. Maybe the best solution is to upgrade to Babel 6 upfront. Either way, help is appreciated!\n. > On the another note, I have already made a fix on my fork, which is \"battle-tested\" and used in my code. Would you like me to open a PR for it?\nSounds good, yes.\n. > Due to the merge on Mar 3, can this issue be closed?\nYes!\n. > Drawback: What about others transpilers? Should we rely on an \"implementation detail\"? I would love to know the advice of a Babel developer here if possible.\nIt is an implementation detail but it is inside Cosmos' scope, so I'm OK with this. One thing I would recommend is adding a disclaimer comment on top of if (component.__esModule) {, something like XXX: This is an implementation detail of Babel [insert link to docs or even source code].\n\nI would argue that named exports first THEN default export is better when you have components, but that could be my own standard.\n\nUntil further data, this sounds like the best option. If we target the pure/dumb component via name in modules where a decorated component is exported, I think it works exactly as it should, since the decoration part is already tested elsewhere and is harder to mock.\n\nA cool thing added is that: even if you have invalid components (read: not React.createClass or React.DOM or React.Component stuff), Cosmos won't include them and ignore.\n\nAlso OK. Just checking to be string or function type might not cover all cases, but as long as it doesn't provide false negatives, it's better than nothing!\n\nIn my opinion, it makes DX++, we could add beautiful alerts like \"hey! there are strange components in your tree, pay attention to what you write!\" if we detect invalid components.\nOr if all components are invalid, we can just alert the developer of: \"Something is wrong with your architecture, look your components, do you export them? Is your Webpack config alright?\"\n\nDefinitely. Cosmos is a dev tool, but a user facing tool nonetheless. If you have ideas feel free to open up new discussions in separate threads. \n\nIf there are code style concerns, let me know and I'll do the changes.\n\nOnly one concern. While it's an open debate, this project uses semicolons and I think either convention is better for readability than a combination. So if you don't mind please add semicolons where appropriate. Other than that it seems like we're good to go!\nThank you for your effort!\n. @RaitoBezarius are you stilll interested in doing the last edits we\nmentioned? No pressure because I know how these things are, but you were\nreally close to getting this merged. Thanks!\nOn Fri, Mar 4, 2016 at 11:45 PM, Lahfa Ryan notifications@github.com\nwrote:\n\nIt is an implementation detail but it is inside Cosmos' scope, so I'm OK\nwith this. One thing I would recommend is adding a disclaimer comment on\ntop of if (component.__esModule) {, something like XXX: This is an\nimplementation detail of Babel [insert link to docs or even source code].\nYou're completely right!\nUntil further data, this sounds like the best option. If we target the\npure/dumb component via name in modules where a decorated component is\nexported, I think it works exactly as it should, since the decoration part\nis already tested elsewhere and is harder to mock.\nThat was what I thought, awesome!\nAlso OK. Just checking to be string or function type might not cover all\ncases, but as long as it doesn't provide false negatives, it's better than\nnothing!\nI should add a comment and double-check my assumptions so that we don't\nhave problems with this!\nDefinitely. Cosmos is a dev tool, but a user facing tool nonetheless. If\nyou have ideas feel free to open up new discussions in separate threads.\nYes, I believe that: DX is UX for developers. So we still need to be\ncareful about the UX and love to imagine that DX is what makes developers\nsmile in front of their screens rather than swear in front of their code.\nOnly one concern. While it's an open debate, this project uses semicolons\nand I think either convention is better for readability than a combination.\nSo if you don't mind please add semicolons where appropriate. Other than\nthat it seems like we're good to go!\nI have absolutely no problem with this, will add semicolons!\nAwesome, will edit with your remarks ASAP and [image: :rocket:] !\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/skidding/cosmos/pull/184#issuecomment-192482321.\n\n\nBest,\nOvidiu\n. Merged, your patch has been published under v0.7.2. Thanks!\n. Cosmos doesn't work with context at the moment. It was a design decision actually, as context wasn't (not sure if it got in the meantime) documented. You'd have to alter the boilerplate a bit to make it working, but I never had to so far as I avoided using context in all my projects.\n. Update: This can be solved now using Proxies. So far we only have a Redux-specific Proxy created, but we could create a generic Context Proxy to cover custom context scenarios (like themes). I'll document the steps here in case someone wants to contribute any make this happen.\nThe Proxy would look similar to the Redux Proxy, but much simpler because there's no subscribing to any changes and no store is involved. Here's a solution abstract (didn't test it):\n``` jsx\nimport React from 'react';\nconst defaults = {\n  fixtureKey: 'context',\n};\nexport default function createContextProxy(options) {\n  const {\n    fixtureKey,\n    childContextTypes,\n  } = { ...defaults, ...options };\nclass ContextProxy extends React.Component {\n    getChildContext() {\n      return this.props.fixture[fixtureKey] || {};\n    }\nrender() {\n  const {\n    nextProxy,\n    fixture,\n    onPreviewRef,\n  } = this.props;\n\n  return React.createElement(nextProxy.value, { ...this.props,\n    nextProxy: nextProxy.next(),\n    fixture,\n    onPreviewRef,\n  });\n}\n\n}\nContextProxy.propTypes = {\n    // ... usual proxy prop types\n  };\nContextProxy.childContextTypes = childContextTypes;\nreturn ContextProxy;\n}\n```\nThe only drawback is that childContextTypes must be defined to specify all context types that will be used in all fixtures combined. E.g. \njs\ncreateContextProxy({\n  childContextTypes: {\n    color: React.PropTypes.string,\n    backgroundColor: React.PropTypes.string,\n  }\n})\n. A generic context proxy has been added in #239 and released under react-cosmos-context-proxy2.0.0-beta2.\nAn example has also been added.\nLet me know if you try it out and/or have any problems with it. Thanks!. @jbyttow can you please explain the purpose of this PR? Your branch doesn't even start from latest master, hence the conflicts that need to be resolved. Thanks.\n. > This is clearly not an issue here, but it does impact the users of this project. Maybe have the version be pinned exactly?\n@bbirand actually, it is a problem here as well because the boilerplate doesn't work for newcomers. It would be great if you made a PR for pinning the redbox-react package version. Even more, I'd pin all dependencies (either allowing patches via ~ or fixed version altogether) to make sure the boilerplate will continue to work out of the box in the future. I've come to the conclusion that relying on everybody to respect semver is foolish.\nLet me know, if you don't have the time I'll try to do it myself as soon as I manage. Thanks!\n. Closing this per @catalinmiron's fix. @bbirand feel free to reopen if you continue to experience the problem. Thanks!\n. @catalinmiron just read about npm shrinkwrap. Cool stuff! \ud83d\udca1 \n. Update: Decided the LESS loader shouldn't be in the user land, so went back to bundling CP. This means the API is now exactly as before. Published the lastest change under react-cosmos@1.0.0-beta.1 react-component-playground@1.0.0-beta.1.\nNote: CP no lunger bundles any JS deps, which makes it lighter and no longer duplicate libs in the user build.\n. > +5,201 \u22121,847\n@RadValentin those numbers bear little importance. Most of the code is the source & tests copied from each satellite repo. Look at the file structure instead.\nThe most helpful thing right now would be to validate that the new packages ...@1.0.0-beta.1 work on your codebase(s) (hs-components is probably the easiest) without any intervention besides switching the package versions. If you do get the chance, please keep me posted. Thanks!\n. @bogdan-stefan-hs awesome!\n\nDoes the new react-cosmos package need testing as well?\n\nYes if you're using it internally, otherwise don't bother.\n. > @skidding The uberVU playground additions are all written in pre-ES6 code, to be in line with the rest of the repo. Can I suggest we ES6-fy it after we've merged those features? (I'm only talking about react-component-playground)\nMakes sense, I will restrain myself!\n\nAlso, shall I wait until you merge this, or can I submit PRs with react-cosmos as a base?\n\nWait for the merge. I'm on it. \ud83d\ude82 \n. @bogdan-stefan-hs done! The project will remain version as beta for a while, to make for a great 1.0 release, but everything is on master. Fire away! \ud83d\udca3 \nMuchas gracias, amigos!\n. > @skidding sorry for being late, but i think you also need to add react-addons-testutils to react-dom-polyfill. It has been separated to another package in React v0.14. \n\nBecause of this, npm test fails on React <0.14.\n\nI figure react-dom-polyfill is for libs, which only publish production code, which shouldn't include testing logic. It's the user's concern to know how to use those test utils in development, based on his or her React version.\nDoes the fact that it's no covered by react-dom-polyfill cause problems for you?\n. @bogdan-stefan-hs you're right, I forgot to mention that. To be frank, this is the current status:\n- The lib works with React 0.12 to 15\n- It can be built & live tested visually via the dev setup with React 0.12 to 15\n- The automated tests only run with React 0.14 and above. (This should be mentioned in the readme.)\nNot ideal, but you can:\n- Switch to 0.13\n- Develop with playground open for visual feedback and live testing\n- Switch back to 15 to run automated tests\nI'm thinking it's safe enough. If you think it's feasible to cover the test utils by react-dom-polyfill then feel free to come up with a solution (spec or code, we can keep an issue open for it). I wanted to see this mono repo done and skipped that step. :)\n. > The question here is: are you ok with using behavior: smooth\nSure. \nI was gonna say something about the missing whitespace...\n\n...but I remembered I'm gonna ES6 & lint all the repo soon. \nGg! \u270b \n. @a-x- and what is your suggested course of action?\n. It's not a direct dependency of Cosmos. It appears to be a dependency of fsevents which is a dependency of other libs Cosmos uses. \n\nIf it's not installed on npm install it means there's something wrong with the project that depends on node-pre-gyp directly.\nI've personally never experienced this error nor have I installed node-pre-gyp by hand. Also make sure you're using a recent version of node/npm. Thanks.\n. > ok, it seems node v6 fix the problem.\nCool.\n\nadd node v6 requirement note into readme and into the special field in package.json file, please\n\nfyi I'm on v5 now and it works as well.\n. This seems similar: https://github.com/jspm/jspm-cli/issues/636 \u2013 Try installing the latest node/npm.\n. > I forked the original react-split-pane package/repo and republished it to add custom classname support. This is because CP adds a hash to classes in the less-loader, to avoid conflicts with possible components, so styling is impossible on classes that don't abide to that rule.\nThis shouldn't be a problem anymore, since the LESS loader in the new webpack config only targets the react-component-playground/src folder.\n\nAnother problem that will arise now, with multiple React version support, is that these new packages will probably not work with any version. react-dom-polyfill won't be good either, since they use getDomNode() instead of findDomNode().\n\nI see the following options:\n1. Avoid using 3rd party React components in CP. Sounds harsh, but after all CP is designed to be a thin, lightweight wrapper that loads components from the user land. Not saying avoid 3rd party libs, just stuff that uses ReactDOM or new features of React. (Not sure what the complexity of react-split-pane is, so this might not be feasible in this case)\n2. Use a fork of 3rd party React component where you replace ReactDOM with react-dom-polyfill\n3. Submit a PR to 3rd party React component repo replacing ReactDOM with react-dom-polyfill, maybe they welcome it. After all, it makes their lib available for more React versions.\n\nSo the only solution I can think of is to install a different version of the package on npm install-react:vXX. This only leaves us with using the original react-split-pane, since it has multiple releases.\n\nThis doesn't sound like a solution to me. npm install-react:vXX is a dev command. The published libs will be the same for everyone, so they can't work for any user React version if not all dependencies do as well. Am I missing something?\n. Sounds good. If you start from the latest master and only integrate\nreact-dom-polyfill it's worth creating a PR on the original split pane\nproject as well after this is done.\nYour comments are very thoughtful! And publishing React components through\nnpm has always been tricky.\nOn Aug 26, 2016 13:26, \"Bogdan Stefan\" notifications@github.com wrote:\n\nCP is designed to be a thin, lightweight wrapper that loads components\nfrom the user land\nI agree with and respect that. react-split-pane is pretty light though,\nit seems ok to use it.\nUse a fork of 3rd party React component where you replace ReactDOM with\nreact-dom-polyfill\nI will do this for now, since i already published a fork and only need to\nupdate it and release a new version. In the future I'll try and avoid these\nReact libs.\nSorry if any of my comments are inappropriate, i'm still new to React and\nnpm land. \ud83d\ude0a\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/skidding/react-cosmos/issues/193#issuecomment-242693755,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPTfl2nPA99RSU0Q-dZI7yOnyrVz9Buks5qjr9agaJpZM4Jt1jE\n.\n. Finished review. Beautiful! \ud83c\udf37 \n\nFinal note: Did you get to test on other browsers besides Chrome? If would be valuable to know if it runs under (any) IE, because it's useful to load your components cross browser. Thanks.\n. > Redux has become pretty popular these days, and I believe it'll be a nice addition to react-cosmos.\nTotally agree. It's imperative Cosmos starts working nicely with things like Redux and context in general, in order to cover all real life scenarios of React components.\nNot that Redux is not big enough to be embedded in the Cosmos by default, but I think we can build something more generic that solves the Redux use case and many others. Composable middlewares (I kinda like the word proxies more because it's shorter) common in other projects as well, like Redux.  Here's what I have in mind:\nCP receives a new prop called proxies. When CP renders a component, instead of rendering it directly it composes these proxy, with the loaded component at the end of the chain. Pseudo example:\njsx\nconst renderPreview = (proxies, proxyIndex, props) => {\n  if (!proxies[renderIndex]) {\n    return loadChild('preview', props);\n  } else {\n    const proxyComponent = proxies[proxyIndex];\n    return React.createElement(proxyComponent, assign({}, props, {\n      children: renderProxy(proxies, proxyIndex + 1, props)\n    }));\n  } \n}\nProxy components need to follow a single strict rule: Always render this.props.children and sent it its props. Here's are two simple examples:\n``` jsx\n// Adding markup around loaded component\nconst ReactCosmosDumbProxy = () => (\n  \nI am dumb. Everything is dumb.\n    {this.props.children}\n  \n);\n// Altering fixture props\nconst ReactCosmosDumbProxy = (props) =>\n  React.createElement(this.props.children, assign({}, props, {\n    itR: 'dumb'\n  }));\n```\nIn the same format, you'd create a ReduxProvider that looks at props.store, creates the necessary context and passes it down to the loaded component (or the next proxy in line, for all it cares or knows.) Then we could publish packages like react-cosmos-redux-proxy for other to simply use like this:\njs\n// ... CP props\nproxies: [\n  require('react-cosmos-redux-proxy')\n]\nOr these proxies could be functions that generate the classes, based on a set of options. E.g.\njs\n// ... CP props\nproxies: [\n  require('react-cosmos-redux-proxy')({\n    storeFixtureKey: '__reduxStore'\n  });\n]\nI'm riffing here and I'm sure I overlooked some details, but I think the concept is powerful. What do you think?\n. > The only question I have is: how would you validate that a proxy renders the children? And what to do if it doesn't?\n\nI'm thinking of having a placeholder that simply calls loadChild, and replace every 'bad' proxy in the list with that placeholder. Does it make sense?\n\nFair point, but I wouldn't worry about this at this stage. So far we only have one in the making :). We'll see if this plugin system gets traction and more proxies are created. You could log something like \"Rendering stopped at react-cosmos-redux-proxy. Try removing it...\"\n. @bogdan-stefan-hs please review\n. Coverage is fine, that try catch is there for webpack's static analysis.\n. > Did you get the chance to test it with another bundler besides webpack to see how it behaves when react-dom is missing?\nNo. But good idea. I'll try a Browserify setup before we submit any external PR. \ud83d\udc4d \n. This is what I recommend for the CSS:\n- Make the first style loader (that only includes src) accept both .css and .less and use the :global CSS modules modifier in codemirror.css:\ncss\n:global {\n  .CodeMirror, .ReactCodeMirror {\n    width: 100%;\n    height: 100%;\n  }\n}\n- Make the 2nd loader only include node_modules.\n.  Finished review. Will take a look at the React CodeMirror fork.\n\n. @bogdanstefan this does the trick. Commit it yourself because it's your branch. GG @flaviusone for saying that the test is the problem! \n\nThe rest LGTM!\n. @bogdan-stefan-hs look what you made me do! At least give me a review. :P\ncc @NiGhTTraX @catalinmiron @flaviusone @RadValentin\n. Done!\n. @bogdanstefan how about reopening the PR into master, since eslint-takeover was already merged. Maybe merge master into it as well.\n. > @skidding How's this? Can't think of a cleaner way to test them, maybe use jQuery?\nLooking great! I only have one question left.\n. Sweet! \ud83c\udf6c \n@bogdanstefan Made you a collaborator so merge at will. Not relevant this time, since you have only 1 commit, but remember to Squash and merge (below) to minimise the noise and have meaningful commits looking back.\n\n. This PR should also come with:\n- One or more component/fixture examples using this proxy inside the dev folder.\n- Some unit testing for the proxy component.  This is what I think matters:\n  - Component creates Store using props.store (Redux store should probably be mocked)\n  - Component attaches that store instance in context\n  - Component renders children with right props\n. Please review @bogdanstefan @flaviusone @RadValentin\n. This was fixed.\n. @bogdanstefan cool. I put it in your branch, your problem now! \ud83c\udfc3 \n. > IMHO the CSS needs refactoring, though. But maybe it should be correlated with dividing component-playground.jsx into more files.\nDefinitely. Once everything is broken down into pieces it will become way nicer. The whole fixture craziness that happens should happen in a HoC, separated from the views.\n. Hi @samny,\nCan you please switch from cosmos-js@0.7.3 to react-cosmos@1.0.0-beta.1 (strict version, no ^ caret)? It should just work. Thanks.\n. @bogdanjsx this is it. Beautiful ~~JSX~~ (Redux\u2013your name brainwashed me) example and some changes to CP and the Redux proxy. Also, a million things to think about :). Please review. cc @flaviusone @RadValentin\nnpm start => http://localhost:8989/?component=FlatrisGame&fixture=new-game-running \n. Hi @raulanatol \nThere's no easy way to do it at the moment. @RadValentin was thinking of building a new configurable Proxy that would allow you to change colors or even add images (just like in your example), but I don't know if he managed to make any progress.\n@RadValentin you could start an issue with your notes on the idea and maybe even other people like @raulanatol are willing to provide feedback/contribute on the solution. I'm currently focused on finishing #212.\n. Closing due to inactivity.. @SimoneC we can put your proxy in this list if you're interested in publishing it. https://github.com/react-cosmos/react-cosmos/blob/master/README.md#more-proxies. Yay @SimeonC!\nMerged.\nMaybe put this line outside the component's render function to only call it once?\nAlso, the proxy seems to work great if you always want a background color. But since it doesn't do cleanup I think you'll get the last fixture's background color on a fixture without a background color. An alternative solution would be to wrap the NextProxy element in a div that's positioned absolute, stretched 100% and has the background color from the fixture.. Good stuff, thanks!. cc @bogdanpetru you might want to take a look as well\n. No longer relevant. Playground is transitioning towards no longer using user's copy of React.. Syntax errors are already caught and displayed by webpack-hot-middleware, while render run time errors can be caught and displayed using react-transform-catch-errors and redbox-react, depending on user's webpack.loaders config.\nErrors when required props are missing are still annoying, but they can be fixed with a Proxy that checks all props are in place before rendering (if we find a way to send propTypes meta data to CP, using react-docgen).\n. Indeed. children used to be handled differently, but is now sent as a simple prop via proxies. Might work either way but the right way is to separate children from props and use it properly as the 3rd arg of React.createElement in PropsProxy.. > This solution should make using fixtures more intuitive as well.\nAgreed. I'm still for this 100%. I removed the free for all label because I believe it requires more thought, but if anybody is willing to pick it up and I'm more than happy to assist.\nThe key thing here is backwards compatibility. Changing hundreds of fixtures in existing projects is a pain. A codemod would be nice, but not enough. The easiest way I can think of to make this change while provide backwards compatibility is via a Proxy. E.g. a NormalizePropsProxy, applied before all other proxies, which looks for the props fixture attribute, and puts all root-level attrs in it if it doesn't exist (except for state, context and reduxState \u2013 this list could even be configurable).\n@jlc467 wdyt?. > Since 2.0 is a major version, you are allowed to break the API, right?\nRight, but I want to avoid it as much as possible. People are already fatigued by JS tooling :).\n\nCode recipes for two upgrade paths (codemod or proxy) seems ample,\n\nAgreed.\n\nwith codemod being the preferred way (otherwise you have to maintain a list of proxies/magic attrs to exclude)\n\nAmen. I started prefixing my proxy fields with _ to avoid conflicts with props, which is not ideal.\n@jlc467 would you be interested in working on this? It'd be sweet to include it in the 2.0 release. . Awesome. You can find a few proxy examples in here.. This was actually done a while back in #312!. cc @flaviusone @RadValentin @bogdanjsx @catalinmiron \ud83d\ude4f \n\n. @flaviusone @radvalentin @bogdanjsx wdyt?\nNo code to review. Just an updated CONTRIBUTING guide and this baby:\n\n. @xyx2011 did this happen in one of the examples from this repo or in your own project? Please provide more details or your code so we can get to the bottom of this. Thanks.\n. > create cosmos.config.js\nCan you please tell me what's inside the config?\n. OK. I'll reproduce your steps & see what I find!\n. OK, I figured it out. It's because Cosmos doesn't know where to load the HTML from. Here are two solutions:\n1. Set the dist as the public path and Cosmos will statically serve it and use the index.html inside\ndiff\n   module.exports = {\n     componentPaths: ['src/components'], \n   +  publicPath: 'dist',\n   };\n2. Use HTML Webpack Plugin\nnpm install html-webpack-plugin\n``` diff\n   +const HtmlWebpackPlugin = require('html-webpack-plugin');\nmodule.exports = {\n     entry: [\n       \"webpack/hot/only-dev-server\", // \"only\" stops HMR on syntax errors\n       \"react-hot-loader/patch\", // make sure the HMR package is included\n       \"./src/index\" // our application entry point\n     ],\n     output: {\n       path: __dirname + \"/dist\",\n       filename: 'bundle.js'\n     },\n     contentBase: \"dist/\",\n     module: {\n       loaders: [\n         {\n           test: /.js$/,\n           exclude: /(node_modules)/,\n           loader: \"babel-loader\"\n         },\n         {\n           test: /.css$/,\n           loader: \"style-loader!css-loader\"\n         }\n       ]\n     },\n   +  plugins: [\n   +    new HtmlWebpackPlugin({\n   +      template: 'dist/index.html',\n   +    })\n   +  ]\n   }\n   ```\ndiff\n   <!doctype html>\n   <html>\n     <head>\n       <meta charset=\"utf-8\" />\n     </head>\n     <body>\n       <div id=\"a\"></div>\n   -    <script src=\"bundle.js\"></script>\n     </body>\n   </html>\nBoth solutions work and will yield this:\n\nThe problem is the HTML part is poorly documented. We need to make sure this doesn't happen to somebody else. Do you have any suggestions as to where this should be documented and how? Thanks.\n. > read the contentBase from webpack.conf.js\nThat's actually a good idea. Still needs documentation, but it will work out of the box for some of the users.\ncontentBase seems to be a webpack-dev-server setting and is used like this in the docs:\njs\n{\n  devServer: {\n    contentBase: \"./build\",\n  }\n}\nYet in your config contentBase is a root level property. Any idea why this works and did you find it documented somewhere?\n. @r24y glad to hear it worked out in the end. Let me know if you bump into any other roadblocks.\n. @BTMPL I believe this is what you had in mind. I'll work on docs in a separate PR. Wdyt?\ncc @xyx2011. Please review @xyx2011 @BTMPL.. > As a developer, I couldn't agree more that we should pay more attention to DX(developer experience) more than ever! I often found that writing/layout UI view itself is little tedious.\n\"a little tedious\" is a positive understatement :)\n\nI was wonder if this project could eventually grow or derive to a more awesome version, which will change our current workflow on implement UI, here's the new workflow look like:\n\nIt seems to me like you're envisioning a merger between prototyping tools like InVision or Moqups and the UI dev tool (where Cosmos comes it). I see how these two are connected and streamlining this entire flow is definitely something worth pursuing, but I don't think it's wise to attempt to rebuild what awesome prototyping tools already do. I don't have links at hand, but I've seem visual design  tools that split React components directly. \nWhile the flow is connected, I see a clear separation between the visual design and dev tools, considering how complex each of them get and how many things Cosmos still has to do to reach is potential solely as a dev tool.\n\nstrictly testing this view package on different devices, make sure it always in a good state.\n\nWhat do you think would make the Cosmos UI better for mobile testing? You can already share the URL in your local network. Exporting a static dump is not yet possible (although I managed to do it for react-cosmos.github.io with a few tweaks), but it's definitely on the roadmap and would welcome contributions in that area.\n\nThank you! let's improve DX together!\n\n\ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66. Closing this for inactivity.. Not that it means much, but Cosmos started 2y before Storybook. A comparison table would be nice, and we should probably throw others in the mix as well, like Carte Blanche or react-styleguidist.\nI mildly touch this subject in an article I wrote last month. You mind find it interesting.\n\n[...]  I\u2019m a fan of Storybook\u2019s friendly \u201cstories\u201d and Nik Graf\u2019s idea to generate random props, yet I find React Cosmos unique in its quest to surface the relation between raw input data and rich component output. [...]\n\nIn short, these are the things I've not seen in any other tool:\n- The \"fixture editor\" embedded in the UI, which allows you to quickly fiddle with input data and see state changes, making the experience interactive\n- The support for mocking component state (not just props), more recently Redux state as well\nHope this helps.. npmcompare is interesting, but it doesn't work so well with Cosmos and tools alike since they are composed of many npm packages without a designated \"main\" one. It might be the CLI, or the UI module, and at least in Cosmos' case the package names changed a few times along the years.\nI'm currently working on other PRs (e.g.), so I'll leave this open for now for anyone else who's asking the same question or wants to help document this better.. Added a README section on this.. Are you referring to the fact that webpack@2 users will have es2015 modules disabled in their .babelrc (and let webpack handle es2015 modules), like this?\njs\n{\n  \"presets\": [\n    [\"es2015\", { \"modules\": false }]\n  ]\n}\nThe react-cosmos modules are already published as es5, so the only problem I can anticipate is disabling Babel modules and using es2015 import inside cosmos.config.js, which isn't processed through webpack. Is this the problem you identified or something different?. > I am assuming this is because react-cosmos directly depends on webpack@1?\nYes, react-cosmos-webpack more specifically, has been built for and tested with webpack@1. We could make this explicit in the Requirements, but at the same time it would be great to find a way to make Cosmos work with both webpack 1 and 2. Publishing separate versions of react-cosmos-webpack for each webpack version is undesirable. \nOne solution would be to try to upgrade Cosmos to use webpack@2 internally and tell users when to turn off babel-plugin-transform-es2015-modules-commonjs. Another would be to move webpack to peerDependencies and rely on the user's webpack copy (provided that APIs match, of course). What do you think?. Fixed via #262. Good idea. Already started here, here and here. Want to deal with the remaining?. Added standalone example in #301 . Seems like the build failed due to a Lerna version mismatch. Can you freeze the Lerna version in package.json (by removing the ^ at https://github.com/react-cosmos/react-cosmos/blob/master/package.json#L65) to fix it and prevent future failures like this?\nI would but am currently on the road:\n\nCheers.\n. Thanks! \ud83c\udf84 . Done in #244 \ud83d\ude47 . Published under 2.0.0-beta.3\n\n\ud83d\udc4d \n. Hi @Planckit,\nCosmos changed a bit since 2016 and this issue is misleading because we reverted what was implemented in this issue down the road.\nThe config files are ran by Node natively. So if your local Node version supports ES modules it will work, otherwise you'll get the error you referenced.\nIf you want to use Babel features in your configs you can run Cosmos with babel-node. We do this in the monorepo https://github.com/react-cosmos/react-cosmos/blob/d9750e777eb9dfe8e1bc5f8c54fda70134b4deb9/package.json#L21. > Some suggestions on how to use webpack.config.js (webpack.config.babel.js) with es6 import?\nYes, I just said \"If you want to use Babel features in your configs you can run Cosmos with babel-node. We do this in the monorepo\"\nSo in your package.json scripts, provided you have babel-node installed in your project, you can change this:\ndiff\n-  \"cosmos\": \"cosmos\"\n+  \"cosmos\": \"babel-node cosmos\"\n\nNode@10.7.0\n\nES Modules might be available in 10.7, but they're experimental and need to be enabled via a flag. . @ovidiubute please review\nThis auto reloads the playground when a component or fixture is added or edited (if the patch can't be applied via hot reloading. i.e. all fixtures and stateless components).. I don't have experience with Yarn, but am behind this initiative if you can come up with an elegant workaround for Lerna.\nNot sure what the implications are and it seems the vision isn't clear either.. LGTM. The only downside is that v12 might come with additional changes that need to made throughout the codebase.. > The build target is error-prone since you need to call all of the above targets one by one \nGood idea. I forgot to update this long list more than once.\nHow would a targeted build command look with the new script? E.g. npm run build:webpack (used when working on a specific module). > Or, we could actually have npm run build webpack if the script checks its argument list and builds one package or all of them.\nLGTM!. Happy new year! \ud83c\udf86 . Yes!\n\nWhen you start the Playground for the first time, all components should be collapsed by default except the first one with at least 1 user-defined fixture\n\nNot sure about this. Maybe if we do a good job with oboarding #252 this isn't needed.\n\nAs you use Playground, the fixtures most often used could be tracked via local storage. Thus, when reloading the Playground, instead of having all of the fixtures collapsed, the most recently or most commonly used components (to be discussed) could have their fixture list expanded.\n\n\u2764\ufe0f it. I think the easiest implementation is to simply remember the last expanded components (list of name strings) between visits.\nExtra thoughts:\n- The CP is known to be a monster component. Now is a good time to extract a Nav component out of it. Besides the isolation of concerns, writing tests in the old suite is painful (it was designed poorly) and this is an opportunity to rewrite the nav UI part and make it an ES6 class tested with Jest.\n- One think I find misleading about the current search mechanism is how the selected component remains visible regardless of the search input. I think it should only show the matched fixtures and \"no results\" when there aren't any. Completely optional, but maybe we could bundle this improvement as well (unless you feel otherwise).. One more thing: It would be cool if we would separate components with fixtures from components without fixtures, in this order. The benefits are twofold:\n- You see the components you have created fixtures for first\n- The list buttons can diff between sections. E.g. components without fixtures shouldn't be collapsable and instead of having a \"no props (auto)\" fixture the component name itself could be the button.. > With this idea, does the component's location become a tooltip? \nMore than that. We'll show just the component name (without namespace), but components will be grouped per nested sections. Something like a tree view, since as you said you we can have 3 levels or more of nesting. How the tree view will look is up for debate. A classic tree view is straightforward, but you lose a lot of space with the padding from each indentation level. Another option would be to only show one nesting level at a time (except when searching), and have a sort of sliding navigation left to right as you open folders or go back.\nGlad you agree on the with/without split. We'll invest some time in making the left nav great after the 2.0 release.. Yes! I'll assign you to make sure nobody overlaps. \nreact-treebeard demo looks nice, we just need to make sure whatever lib we use is not bloated or buggy.. Wow, this looks exciting. Will review soon!. Happy to say this feature (the oldest issue) has been added in #448\n@maxsalven will likely add tree view persistence in a subsequent PR, and together with #469 will be part of a new major release. \ud83d\ude82. This would be a great addition, long overdue. I'd like to turn this welcome screen into a minimal onboarding flow, consisting of 3 possible states (more can be added later):\n1. Playground has no components and no fixtures. Either a new project or some error in configuration. Here's a draft I wrote a while ago:\n\nCongratulations! You're on your way to designing beautiful components.\nIt looks like you have no components. If you're just starting a new project, this is fine and I envy you. If this isn't a new project and your components aren't showing up, then your setup needs some tweaking. Try the following:\n- Adjust componentPaths in cosmos.config.js to match your file structure\n- Open up a GitHub issue and ask for help by sharing your config and file structure\n\n\nPlayground has components but no fixture created. The large majority of users land here. Instructions on how to create fixtures is the priority here. E.g.\n\n\nYour components are listed the left side. It looks like you haven't created fixtures for them yet. An empty fixture is available for each component, but chances are your components depend on one or more props to function.\nA fixture is a JSON-like object, except it contains functions and any other types components receive via props. \nHere's a guide for getting started with fixtures:...\n\n\nPlayground has components and fixtures created. At this step we assume the user understands how React Cosmos works and can inform them of navigation, advanced features and maybe encourage them to contribute, etc.\n\nWdyt?. Closed via #273. How do you see this mock server compared to mocking requests on the client-side, before being sent to the server?\nMy take:\nPros:\n- It works the same regardless of the API used to fetch/send data (XMLHttpRequest or fetch).\n- It's decoupled from the client and resembles real life scenarios better.\nCons:\n- Hard to create as a Proxy (part of the run time), because it needs to be integrated in the server. Either we extend the Proxy API or add this functionality into the Cosmos server directly.\n- There's already an xhr-proxy inside web-ui (created together with @RadValentin and @flaviusone) that can serve as a starting point. Maybe it can easily be ported for the fetch API as well.\n- The xhr-proxy took <30min to write (working prototype, no tests). I think the server approach is more complex.. > We should open-source the xhr-proxy and see about writing a fetch one too.\nFeel free to publish it, I can provide feedback to make it pretty. I wrote it directly on @RadValentin's laptop so I don't have the code myself. :D. Congrats, @ovidiubute! Tricky one but you made it \ud83c\udfc1 . TODO:\n- [ ] Upgrade to Jest@18. > Maybe you could open an issue for it?\nI'll keep this branch/PR open for this purpose. Not worth merging it before upgrading all deps.. cc @flavius-tirnacop-hs @ovidiubute @catalinmiron @RadValentin hot reloading fixtures!\n\n. In this PR:\n- Moved webpack to peerDependencies of react-cosmos-webpack, allowing users to use the webpack version from their project\n- Upgraded entire repo and examples to work with both webpack 1 and 2\n- Added mention about disabling Babel modules with webpack 2 (suggested in #234)\nPlease take a look @gajus @ovidiubute. - [x] Blocker https://github.com/ampedandwired/html-webpack-plugin/pull/555 (affects examples) \u2013 Using fork with fix until/if PR is merged. Correct, the button only clears the route. The idea was to have something like a logo that's also a home button. The \"play\" icon because the UI is a component playground and the electron because React's logo is an atom.\nFeel free to come up with ideas. Maybe the electron could stop when you're on the index page and rotate when a fixture is selected?\nGlad to hear you like Cosmos! FYI a new major version is in the making (currently v2.0.0-beta.4) and it'll be even better.. > Does ignoring paths still work?\nYes, forgot to add it in the initial spec.\n\nRight now there's a field that allows us to ignore those files (I forget the name of the field), is that going away?\n\nThe field is just ignore, a list of regular expressions. It stays the same.\nYou can see the use cases supported better in the test file. There's even a test that resembles to hs-components structure\n. @ovidiubute wasn't aware you're using the react-cosmos-webpack package for Insights. Any complaints? :). Would you be interested in Jest snapshot testing? This what I'm trying to accomplish. The idea is to add a single test with a call to a cosmos package inside a Jest test, and you automatically get a test suite for all components/fixtures. Like Mugshot, but comparing html markup instead of pixels.. You'd have to install Jest and run the Just CLI on a test file. The test file would do something like\n```js\nimport testSnapshots from 'react-cosmos-snapshot';\ntestSnapshots({\n  config: '/path/to/cosmos.config.js'\n});\n```\nWhat react-cosmos-snapshot would do is iterate through all your component/fixtures and do a test, knowing it's inside the Jest environment:\n```js\nimport renderer from 'react-test-renderer';\nimport { createElement } from 'react-cosmos';\n// for each component/fixture\ntest(Render ${component}/${fixture}, () => {\n  const tree = renderer.create(\n    createElement(component, fixture)\n  ).toJSON();\n  expect(tree).toMatchSnapshot();\n});\n```\n\ngenerate the snapshots and tests and update them later on?\n\nYes, Jest has built-in mechanism for this. It will use the __snapshots__ folder by default.. > I'm a bit worried that you can become totally dependent on the snapshot, to the point of not writing any tests and just checking the component that it always renders the same, but I'd still like to try it out.\nThat's up to the developer's will :)\nI'm looking forward to use it on pet projects where I don't have time or it's too early to unit test components, like illustrated-algorithms. Would give me extra confidence to make changes after taking a break and defamiliarizing myself with the repo.. @ovidiubute another tricky one, but the result is pretty awesome. Besides the separation of concern which enables stuff like Jest snapshotting, the webpack bundling has been redesign. In effect, the HMR is triggered on new components and fixtures as well, which means you don't even have to reload after creating a new component or fixture, let alone rebuild. Wanted to record a gif but LICEcap is failing on me.. @ovidiu-bute-hs are you aware of https://github.com/react-cosmos/react-cosmos-atom?. @ovidiubute one last stop before Jest snapshotting, would appreciate your thoughts as well.. The one with the white bg looks great! I think it would look even sexier if the white bg had 90% alpha  give or take.\nAlso, here's a more concise copy to use, split into paragraphs:\n```\nCongratulations! You're on your way to designing beautiful components. \nNo components found. If you're just starting a new project, this is fine and I envy you, otherwise your setup needs tweaking. Try the following:\n```. > Now, only if those stars were animated \nAMAZING!. You guys, this is turning out really cool. A few suggestions:\n@RadValentin,\n- How about a much slower movement? The initial version is cool but neurotic after a while.\n- Can we make the colors a bit greyish? That black feels too black :). I tried a couple of colors, even made the entire playground a bit more blueish, but the twinkling doesn't work with colors other than #000, do you know how to adjust it?\nI've committed what I tried so you can check it out on your devices. Let me know what do you think.\n@ovidiubute,\ndiff\n-You can search through fixtures and components? Try it, it's all warm and fuzzy.\n+You can search for components and fixtures? Try it, it's all warm and fuzzy.\nLove the \"warm and fuzzy\" mention, we can link to the github repo of the package we use.\ndiff\n-You can use Redux for your components with proxies\n+You can mock Redux state and build custom middleware using proxies\ndiff\n-You can load global CSS files in case you're using components within a larger app?\n+You can load CSS, polyfills, and any other files globally?\nBoth can link to Usage/configuration (for now).. @ovidiubute @RadValentin \ud83c\udf86 . \n. Published under 2.0.0-beta.6. @nik-kor Can you please tell me what version of React Cosmos were you using?\nThis shouldn't be a problem since v2.0.0-beta.5 because we moved webpack to peerDependencies and use the user's version of webpack (be it 1 or 2). Before\u2013and what I think you experienced\u2013you could have a webpack 2 config (using rules) passed to Cosmos which would run it using webpack 1 (only working with loaders).\nSorry to hear you wasted so much time on this. A much more stable 2.0 is almost here.. > hey, @skidding\nI use 2.0.0-beta.5. The thing is if you pass { module.rules } then final config will be something like { module: { rules: [], loaders: [] } }\nYou are correct about the output. I was under the impression that since webpack 2 supports both loaders (old) and rules (new), it would process both when found. But from your experience it seems like once it encounters loaders, it stops looking for rules. If this is so then that line you referenced needs to be changed to extending either rules or loaders based on what the user already defined. What do you think?. > i believe it will take the one https://github.com/webpack/webpack/blob/master/lib/NormalModuleFactory.js#L46\nIt seems so. Thanks for digging into this!\nWould you like to replace this PR with changing the logic here? They best way would be to see what is the user using\u2013loaders or rules\u2013and extend that with the cosmos loader, using the appropriate syntax according to the case.\nI'm wondering what's the best failing test we should create for this first...\nAlso, it might be worth worth waiting until I merge #274 today to avoid conflicts, because I refactored the server tests.\n. @nik-kor Thanks!. Published under 2.0.0-beta.6. Already made this work, now I need to wrap it up nicely.\n@catalinmiron @flaviusone @ovidiubute @RadValentin take a look at this\n\n\nAnd this is all the code that made it possible, that I'll hide in a new package:\n```js\nimport renderer from 'react-test-renderer';\nimport getCosmosConfig from '../../../../packages/react-cosmos-config';\nimport getFilePaths from '../../../../packages/react-cosmos-voyager';\nimport { createElement } from '../../../../packages/react-cosmos/src/start-loader';\nconst cosmosConfig = getCosmosConfig(require.resolve('../../webpack/cosmos.config'));\nconst filePaths = getFilePaths(cosmosConfig);\nconst { keys } = Object;\nconst importFileTree = filePaths => (\n  keys(filePaths).reduce((acc, name) => {\n    return {\n      ...acc,\n      [name]: require(filePaths[name]),\n    };\n  }, {})\n);\nconst proxies = cosmosConfig.proxies.map(proxy => require(proxy));\nconst components = importFileTree(filePaths.components);\nconst fixtures = keys(filePaths.fixtures).reduce((acc, component) => {\n  return {\n    ...acc,\n    [component]: importFileTree(filePaths.fixtures[component]),\n  };\n}, {});\nObject.keys(fixtures).forEach(component => {\n  const componentFixtures = fixtures[component];\n  Object.keys(componentFixtures).forEach(fixture => {\n    test(${component}:${fixture}, () => {\n      const tree = renderer.create(\n        createElement({\n          components,\n          fixtures,\n          proxies,\n          component,\n          fixture,\n        })\n      ).toJSON();\n      expect(tree).toMatchSnapshot();\n    });\n  });\n});\n``\n. Published under2.0.0-beta.7\u2013 get it while it's hot! \ud83e\udd56  \ud83c\udf5e . I see your point. Still leaning on keeping thereusable` since it's part of the philosophy (defining input via fixtures makes you think of components outside of their parent context).. It's all you @ganderzz!\nOn Apr 13, 2017 6:01 AM, \"Dylan\" notifications@github.com wrote:\n\n@skidding https://github.com/skidding If no one is opposed, I'll try my\nhand at this. \ud83d\ude04\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/282#issuecomment-293765270,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPTfpp7WVm4o4VsygWalhijJr71hRZuks5rvZAagaJpZM4L3N19\n.\n. Thank you @ganderzz! This has been a long time pain, especially when switching between projects.. There's no official API for it at the moment. I changed the source code of react-cosmos-webpack on my machine to save the bundle on disk instead of memory to create that export. Are you interested in playing with the source code (maybe even contribute) to achieve this? I can provide pointers to the minimum changes required and how to run a local copy of Cosmos on your codebase. Otherwise I'll keep this open as a feature request until somebody has the time to implement it properly. . I just read your PR, very cool! Are you planning to support code changes as well in the source editor?\n\nWill come back with instructions. \ud83d\udca8. The code that bundles webpack (currently into memory via webpack dev middleware) is inside server.js. Right off the bat, I'd start by duplicating this file into something like export.js\nInside export.js, you can get rid of webpack-dev-middleware, webpack-hot-middleware and express stuff, since you're not going to start any server.\nThis is the key part that you want to preserve (among other path-related logic):\njs\nconst cosmosWebpackConfig = getWebpackConfig(userWebpackConfig, cosmosConfigPath);\nconst compiler = webpack(cosmosWebpackConfig);\nNow, instead of passing that compiler instance to the dev middleware, you run it:\njs\ncompiler.run((err, stats) => {\n  // ...\n});\nExcept, the webpack config needs a tweak as well. Right now the publicPath is set to / and the reason for that is explained in the source comments. The easiest way to solve this (maybe not the most elegant so let me know if you can't think of anything else) is to add a 3rd (optional) outputPath param to getWebpackConfig. This way you could change the highlighted code to\njs\npath: outputPath || '/',\nThis means you'd have to come up with outputPath inside export.js, and ideally it could be an additional react-cosmos-config option, say exportPath, that defaults to something like join(dirname(cosmosConfigPath), '.cosmos').\nAt this point you have the proper webpack config compiled and ran to save the bundle on disk. A couple of additional tasks that the export operation needs to do:\n\nCopy static/index.html and static/favicon.ico in your export path.\nIf publicPath option is set, copy all static files to EXPORT_PATH/loader/\n\nThe contents of the export would looks something like this at this point:\n/path/to/project/cosmos.config.js\n/path/to/project/.export/index.html\n/path/to/project/.export/favicon.ico\n/path/to/project/.export/loader/bundle.js\n/path/to/project/.export/loader/some-user-asset.svg\nI can't guarantee I didn't miss anything as I just ran this in my head, but I think it should give you a good head start and I'm here if you bump into any roadblocks.. You sure like the number 22 :P\n\nI looked over your PR and it seems functional. Good stuff! There are a couple of remarks I want to make regarding the config handling:\n- outputPath can be put inside defaults config dict as a relative path since it's resolved afterwards\n- The extra webpack config options should be self contained inside getWebpackConfig function and not have the response mutated inside export-bundle.js\n- Come to think of it, getWebpackConfig should receive an export flag to decide whether to set the outputPath and whether to enable hot reloading. This should get rid of the process.env mess.\nAlso a couple of naming stuff:\n- export-bundle can be just export (we're not exporting anything other than bundles)\n- outputPath should default to something like cosmos-export or cosmos-dist instead of dist because dist might already be used inside the user's repo. \nI can give more detailed inline comments, but you'll have to wait 1-2 days for that. I've been working on a different project for the past hour and my brain is already overloaded. This is what my desk looks like:\n\nA couple of other things:\n- You should create a PR here instead of your fork\n- Tests will need to be updated/added\n- It seems you editor is removing trailing newlines from files. Please add them back if you wish to contribute upstream:\n\n. Hey @jlc467, happy to see you're still working on this. Looking very good, let me know if you want me to review.\nRegarding the other changes required for this to \"just work\", I started debugging on your branch and found all the missing pieces! Here are the changes that fixed every previous issue on my machine (tests not included):\n\nRemoved comments about saving to memory, because we now save to disk as well\nMake paths relative\nAdd production flag to minify/optimize bundle when exporting\n\n\n\nMore relative paths\n\n\n\nMore relative paths\nDisabled dev tools hook in production (export) because browser security yells at you when you try to access window.parent on the file:/// protocol\n\n\nNow, you have two options:\n- We leave these for a separate PR to keep diffs smaller \n- You integrate these changes into this PR and ship the complete feature (home run)\nUp to you. Also let me know if you need any more help. \nPS. This is going to make a great addition to the upcoming 2.0 release!\n. Congrats @jlc467! \ud83c\udf89  \ud83c\udf86 . Closing this because the description is out of date and will confuse more than help. This idea has already been added as Cosmos' 3rd long term goal and I will likely open another thread after more important milestones have been achieved.. > even if you can provide additional directories to scan for fixtures, there is no way to have fixtures inside your components directory and call it something else.\nYou should be able to achieve this using the getFixturePathsForComponent option, which is not documented:\n```js\n// cosmos.config.js\ngetFixturePathsForComponent: (componentName) => {\n  return glob.sync(src/components/custom-fixture-dir/${componentName}/**/*.js);\n}\n// or, if you keep fixtures per component\ngetFixturePathsForComponent: (componentName) => {\n  return glob.sync(src/components/${componentName}/custom-fixture-dir/**/*.js);\n}\n```\nWdyt? Shall we add some docs for this option? :) \nThere one test currently.\nNote that this doesn't disable reading fixtures from __fixtures__ dir, do you think that is a concern? I'm assuming the need is to name it differently and not to use it for something else.. @ovidiubute you're right. I'm OK with having something like fixturesDirName (defaulting to__fixtures__). Given how most users should go down this route and both fixturePaths and getFixturePathsForComponent are meant for edge cases, I wouldn't prefix the setting with \"inline\" nor \"relative\" because it would only confuse newcomers more.\n\nThis could also accommodate large projects that already have their own fixture structure and would never change it just to use react-cosmos.\n\nWas this the case with the people you talked you? I'm very curios what sort of fixtures did they have and what were they using them for. . Got it. So the reason behind this config is pure aesthetics. I'm OK with that. Keeping fixtures next to components (especially since we now support both componets/__fixtures__/Foo/blank.js and components/Foo/__fixtures__/blank.js out of the fox) should cover 99% of the cases. With this in mind, having the ability to customize how your project looks seems reasonable.. > This is going to non trivial impact, as it's used in quite a few places:\nNote: No need to change anything in the Flatris example as the default will remain the same.. Fixed in #368 . Hi @reinei \nThis is the right place. Unfortunately most of the users (myself included) are on OSX, so I apologize if the current version is broken on Windows. Maybe we can improve on this together while fixing your installation.\nI'll start with some off the top of my head suggestions:\n- What's weird about 'D:Developmentcentrum-syscontext-proxy.js' is that you only have ./redux-proxy.js in your cosmos.config.js, so where could ...context-proxy.js come from?\n- Can you try cloning react-cosmos and running one of the examples? This should tell us whether we have a generic problem on Windows or if we should debug your config more.\nThanks!. > The fact that the file only contains ./redux-proxy.js was my bad (didn't hit save in atom)\nJust to be sure, do you have a context-proxy.js file in the same dir as cosmos.config.js?. > Yes I have both proxies and sadly simply removing one of them does not solve my issue (both proxies are copies of the code from the readme.md)\nFor the purpose of pinning down the problem, does the build work if you remove them both (proxies: [])?. Can you please try resolving the proxy paths manually? E.g.\njs\n// cosmos.config.js\nproxies: [\n  require.resolve('./context-proxy.js'),\n  require.resolve('./redux-proxy.js'),\n]. > Manually resolving the paths does not change the error in any way (it still tries to load the proxies from node_modules\\react-cosmos-webpack\\lib\nWeird. I'm curious how those paths are built. Seeing the contents of your resolved config should give us some insight:\n\nTry the same in your repo and paste the output here, but please note that I'm using a custom config path in my example ./cosmos/cosmos.config.js so adjust it to match your structure.\n. OK, we're getting there...\nThe config looks good so the next step is the webpack loader which injects this paths into the bundle entry point. You can see the generated source for the entry point but opening node_modules/react-cosmos-webpack/lib/user-modules.js, going at the last line (105) and changing the code like this:\ndiff\n-return source.replace(/COMPONENTS/g, convertPathMapToRequireCalls(components)).replace(/FIXTURES/g, convertPathMapToRequireCalls(fixtures)).replace(/PROXIES/g, convertPathListToRequireCalls(proxies)).replace(/CONTEXTS/g, convertDirPathsToContextCalls(contexts));\n+var output = source.replace(/COMPONENTS/g, convertPathMapToRequireCalls(components)).replace(/FIXTURES/g, convertPathMapToRequireCalls(fixtures)).replace(/PROXIES/g, convertPathListToRequireCalls(proxies)).replace(/CONTEXTS/g, convertDirPathsToContextCalls(contexts));\n+console.log(output);\n+return output;\nLet me know what does webpack log when you run Cosmos afterwards.\nPS. Also let me know if you have any idea on how to better collaborate on this.. I see.\nWell the component/fixture paths are fine because they're generated using node-glob, which seems to work exclusively with forward slashes. It seems like the general solution is to do this with all paths, because Node on Windows supports it, even though it defaults to backward slashes.\nslash looks like the right tool for the job. It should probably be applied here. Before we do that, though, you could try this:\nbash\nnpm i -S slash\njs\n// cosmos.config.js\nvar slash = require('slash');\n// ...\nproxies: [\n  slash(require.resolve('./context-proxy.js')),\n  slash(require.resolve('./redux-proxy.js')),\n]. Reopening because this should be fixed for all Windows users.. Well, do we need to rely on env vars to build the build commands anymore? We should be able to replace the npm command to the babel cmd directlybabel -D --ignore '__tests__,__mocks__' packages/ACTUAL_PKG_NAME_CONCATENATED_IN_JS_SCRIPT/src -d packages/ACTUAL_PKG_NAME_CONCATENATED_IN_JS_SCRIPT/lib.\nBut we still need to develop this change on a Windows machine to ensure it fixes the problem. So yes, help us, @RadValentin! \ud83d\ude04 . @RadValentin awesome! Should've said something, man, I had no idea it's uninstallable on Windows. Let me know if you bump into any other problems, I can jump into a hangouts call to assist.. No worries, feel free to reach out for help/feedback!. Hi @mocheng,\nOnce 2.0.0 is released npm install will no longer break what previously worked. Sorry for going through this.\n\nIt takes an hour to detect why my \"Home\" component is displayed as \"ome\" component and no fixture is found. At last, it turns out to because componentPaths requires path not be prefixed with '/'.\n\nThis is the culprit. It assumes the path doesn't include a trailing slash so an extra character is removed on top of the base path length.\nThis is a viable option for fixing this (feel free to come up with something better):\ndiff\nconst extractComponentName = (filePath, rootPath) => {\n  let componentName = filePath\n-    .slice(rootPath.length + 1)\n+    .replace(new RegExp(`^${rootPath}/?(.+)$`), '$1')\n    .replace(/\\.jsx?$/, '');\nLet me know if this works for you as well. It would be great if you wanted to make a contribution for this and fix it for everyone. Also let me know if you need any assistance in adding a failing test case before applying the fix.\n\nBTW, the latest example in this repo doesn't work. It dumps a bunch of error message.\n\nDo you mean the local-storage example? I just tried it and it worked.\n. Great. I'll leave this open as a free for all bug for anybody who wants to put this into master.. @mocheng this was fixed in #366. Hi @newswim. I personally haven't, but am happy to help you get past those roadblocks and maybe improve on what created them in the first place. What sort of trouble did you run into and at what step?\nPS. Make sure you're using the latest release (2.0.0-beta.8). Hi @newswim,\nSorry to hear you lost so much time with this. Webpack projects can get hairy!\nI managed to make it work!\ud83d\udca1 \n\nI skipped the DLL plugin to save some time and because you found a temporary workaround\nThe parsing errors was due to the hmr plugin being applied twice, adding hmrPlugin: false to cosmos config fixes this\nThen Cosmos was detecting too many component files, so I improved on that by globbing component paths by hand (need to install glob)\n\nHere's my latest config\n```js\nconst glob = require('glob');\nconst components = glob.sync('app/components//index.js');\nconst containers = glob.sync('app/containers//index.js');\nmodule.exports = {\n  componentPaths: components.concat(containers),\n  getComponentName: (componentPath) =>\n    componentPath.match(/app\\/(?:components|containers)\\/(.+)\\/index.js$/)[1],\n  ignore: ['tests'],\n  webpackConfigPath: './internals/webpack/webpack.dev.babel',\n  hmrPlugin: false\n};\n```\nWhich looks like this \ud83c\udf89 \n\nNext stop: fixtures! \ud83d\ude8c \n. Right on! Let me know if there's anything else blocking you in the future.\nAlso, if you manage to get to the bottom of that DLLPlugin thing, I'd very curious to hear about it.. Now that I think of it, the DLLPlugin issue might be related to @reinei's comment from a different issue, which might be fixed if we go back to using the user's index.html for the playground frame as well.. @DJTB great! Looking forward to see https://github.com/react-boilerplate/react-boilerplate/pull/1849 merged so I can feature React Boilerplate next to the other popular integrations.. The PR was merged, but it's still on the dev branch. As soon as it hits master, a Cosmos config like this should do the trick:\nmodule.exports = {\n  componentPaths: ['app/components'],\n  ignore: ['tests', 'messages', /.+Styles/],\n  webpackConfigPath: './internals/webpack/webpack.dev.babel',\n};. RB 3.5 was released and it works as expected. Just pulled their master and followed these steps:\n\n\n\nAnd voila!\n\n. Let's see if I got this straight. You have an index.html in your publicPath, which serves as a template for html-webpack-plugin. Normally, webpack would use the index.html generated by the html-webpack-plugin but Cosmos instead uses the index.html template from your publicPath. Is this right?. I'm on vacation so I apologize for not being more thorough. This thing stood out:\n\nNow my problem comes from cosmos mounting the webpack-dev-middleware into /loader and serving its own static index.html\n\nCosmos doesn't have a dedicated index.html for the /loader path. It either\n1. uses the index.html generated by html-webpack-plugin, which should be identical with the one generated in your own build\n2. serves the index.html found in the public path (but I don't see why you'd have an index.html in your public path since you already use src/index.ejs\nWhich option do you think you fall into? Or more concretely, is there an index.html file in your public path?. It seems like you want your index.html for the playground frame. So / loads\nthe playground and /loader/ loads you components. The idea is that you\nshouldn't need your own index for the playground frame, because it doesn't\nrender user components. The problem is, however, that the playground does\nload user fixtures (for the editor), which is essentially user code and can\nimport anything from the user codebase. I wasn't sure if this would ever\ncause problems, but it seems to de so in your case.\nIn the past we'd use the same index.html for both the playground and the\nloader, but that also comes with a few problems. You might end up loading\nunnecessary things in the playground frame and you need to know where to\nrender the playground in the user's index.html file.\nNot sure how to fix this situation elegantly. Any further insights\nappreciated!. @reinei since this is a recurring theme, I'm considering a refactor to use the user's index.html for the playground frame as well, to include in the upcoming 2.0 release. Say we were to go down this route, how would you go about it?\nMinor issue: user's favicon would be used instead of the React Cosmos one.. Update: The purpose of this issue is to ensure that static assets are accessible inside the Cosmos playground as they are in development. Here are two popular scenarios that we're going to test against:\n\nCreate React App: Public URL is equal to root path, so /foo-asset.svg will be a sibling of /index.html (WDS.contentBase is set to public dir and process.env.PUBLIC_URL will always be '' in dev)\nNext.js: Public URL is different than root path, so /static/foo-asset.svg will not be a sibling of /index.html. \n\nCurrent conclusions: \n- Because /static/* is hardcoded in Next.js, we need a publicUrl config option\n- Because of CRA, the Loader index.js needs to be served from ${publicUrl}/index.html. Hey, I'd like to understand your use case before coming up with a solution.\n\nDo you have more than one component inside src/components/Home?\nIs src/components/Home/index.js a component?. @mocheng please review. @mocheng this addresses #240, please review.. @RadValentin I agree with https://github.com/react-cosmos/react-cosmos/pull/303#discussion_r104289808, otherwise looks good! Also, you have merge conflicts to solve. Sorry bout that! \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc67\u200d\ud83d\udc66 . @reinei can you please try @RadValentin's branch on your machine to make sure the initial issues were corrected. It would help confirm Cosmos works for Windows users. Thanks!. @reinei That's good enough, thanks! Let us know if you encounter any other issues in the future.\n\n@RadValentin saved the day!. Let us copy create-react-app, then! \ud83d\ude93  . Closing this due to inactivity. I'm not against doing it, but I realized:\n1. There's not a lot of value to it. Opening the URL is one click away from the terminal (see screenshot below)\n2. There are many corner cases to consider: A. If there are errors we might want to keep the user in the Terminal to read them, B. We don't want this to happen when running E2E tests in CI, etc.\n\n. @sapegin I'm not completely happy with Slack, but most people I've talked to preferred it and most devs already have the client installed on their devices.. Added sections about integration with Create React App & Next.js. > does Cosmos work in CRA bootstrapped projects without ejecting the webpack config outside of node_modules/react-scripts?\nYes! Check out Flatris. > Nice! I have a few projects running on create-react-app but hesitated using Cosmos, I'm going to go back and add it to see how it goes \ud83d\ude04 \n\ud83d\ude4c . One level deep (root props) is as good as before. Ideally the splitting would be recursive and would be any level deep. Wondering if there's an easy algorithm for this. The key here is how we merge the serializable/unserializable parts back, which until now was trivial.\nFinally, as further context, my wish is to someday add a notice at the bottom of the fixture editor like this:\n\nSome fixture attributes are unserializable and not shown here: props.onClick, foo.bar, baz. Discovered a problem with how fixture parts are merged. The problem is when you have one or more unserializable props and one or more serializable props, the unserializable props are overridden by the serializable ones. We need to merge the parts recursively. _.merge should do the trick.\n\nAdditionally, while trying to integrate in own projects I realized I had more magic fixture fields that aren't props (designed to be picked up by custom proxies), which are being normalized into props. It would help to make notProps customizable via proxy option (e.g. fixture key for context proxy). Is it possible to add this as well?\nThanks! \ud83d\ude4c . > Yeah, sure. No telling what kind of magical custom proxies people are running. To pass the options, the correct approach is to wrap the proxy, e.g. as seen here, correct?\nYes... but in that example we're composing proxies. I think the Redux proxy is also good inspiration. The idea is to put the whole proxy component inside a create function, in order to have access to the options passed to that create function.\n\n\nWill fix the bug too. Not totally clear on why the fixture is split and then merged again (why not just use the original fixture?), so will read more into that.\n\nBecause of the fixture editor. Users can edit the serializable part of the fixture, which is merged with the unserializable part (you could call that part immutable) to form the new fixture.\n\nLet me know if this makes sense. Thanks!\n. Oh, you're right about the proxy wrapping, that's how you pass options. It's also seen in the two proxy examples from the README: https://github.com/react-cosmos/react-cosmos#react-cosmos-redux-proxy\nIn the future we could allow proxy options inside cosmos.config (similar to webpack loader options), but I don't think Cosmos is popular enough yet for that sort of customization :P. > Yeah, I'm not sure the overall idea of developing components in isolation has hit mainstream yet. People seem more keen on the UI explorer/documentation aspect. Sometimes the killer feature of a project is misidentified early on, and it isn't until later that people realize that the better benefit is something else.\nYes, I couldn't agree more! \u2764\ufe0f \n\nPersonally, I'm only doing cosmos-first development from now on, where cosmos playground is the entry point and you delay writing nav / router type components that can distract from the app's idea.\n\nSame here! \ud83e\udd42 \n. I think this is great and ready for prime time. \ud83e\udd47 \n@ovidiubute @flaviusone @RadValentin you might want to take a look at this! It is breaking, so we need to make sure your react-cosmos version(s) are locked at 2.0.0-beta.8 until you upgrade, or be able to upgrade right away. Since I think think you have any custom proxies, adding react-cosmos-normalize-props-proxy to your proxy list should be enough. Let me know!. Great contribution @jlc467, thanks again making this happen! Oh, and I sent you an invitation to become a collaborator \ud83d\ude4c . @jlc467 Welcome on board! \u2694\ufe0f \nHere are two examples where I've already upgraded:\n- Flatris\n- Illustrated Algorithms\nRegarding docs, sure! I hope the latest structural README changes make it easier to contribute. You're also invited to join the Slack channel.. @ovidiubute any thoughts on this?. > I never really understood the appeal of having fixtures so complicated\n\nthat they need dependencies\n\nI'm with you on this one, but it's enough to include lodash to use a helper\nto hit this wall. If you also use DllPlugin to do code splitting (or add\nthe vendor script in your html by hand), that is.\n\nBut I still feel that this is totally breaking the isolation of the\ncomponents.\n\nWell, this is about the playground frame. The loader frame (which loads the\ncomponent) isn't affected by this change.\nOn Mar 15, 2017 20:29, \"Ovidiu Bute\" notifications@github.com wrote:\n\nI never really understood the appeal of having fixtures so complicated\nthat they need dependencies (the only time I kind of understood it was with\nrandom fixtures). I guess you could handle it in the same way we handle\nexternal CSS files: configure all of your \"externals\" in cosmos.config.js.\nYou could technically provide static links towards whatever files you want\nand the loader frame could inject them via script tags.\nBut I still feel that this is totally breaking the isolation of the\ncomponents.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/313#issuecomment-286836793,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPTfslwl-5KenglsIp5X5FjjZ5FwQ0Aks5rmC3tgaJpZM4MasX8\n.\n. @jlc467 based on your recent in depth experience with the RC architecture, do you have any thoughts on this?\n\nI've not had much time to work on this lately but I still feel it's somewhat of a blocker for the next major release and making RC more accessible at large.. It's pretty clear this is needed at this point. I've updated the issue body with some guidance and labelled this issue as free for all. It would be great if somebody offered to pick this up! \ud83c\udf96\nCan't find the time to do this myself, but I'm here to add any support needed. @flaviusone, since you also feel the pain, what say you, has the time finally come to add a contribution with your @flaviusone username? :P. Closed in favor of #360 (continue discussion there). Love it.\n\nExtracting the directory from the name of the components\n\nThis can already be done. Most of the time automatically, but we also have getComponentName when componentPaths contains file paths (which probably should be made to work for all cases, as @valer-cara suggested in a private thread)\n\nRendering more than one fixture into CP at a time (what happens to modals, for example, which render on the body and take over your screen?)\n\nVery good question. I'm sure there's a simple answer somewhere that we didn't find yet.\nHere's an idea for the mix:\nWhen you click on a component you see all the fixtures one after another, sorted alphabetically. But you could have a magic __fixtures__/COMPONENT_NAME/_list.js fixture that exports an array of fixture names, which allows you to only include the fixtures you want in the desired order. Later, this _list.js fixture could be generated from the UI by toggling/drag-n-droping (2020 \ud83d\ude80 ).. @maciej-ka so cool you started working on this!\nI wish I were more transparent on this, but I'm actually working hard on #364 and ended up refactoring both Playground and Loader. Component Playground has very old code so it was always something to avoid, especially since the tests are convoluted and use the Mocha/Karma setup. Besides what I already pushed on 360-separate-playground, I completely rewrote the Loader to be more robust and have atomic tests and am now in the progress of bringing the Component Playground to 2017 (Jest tests and split in smaller, better designed components). It's WIP so I didn't push code that isn't proper, but I'm hoping to do so this week. To have an idea, this is what the Playground-Loader communication looks like on my local branch:\n\nPlayground \u21c6 Loader communication\nThe Cosmos UI is built out of two frames (both conceptually but also literally\u2013components are loaded inside an iframe for full encapsulation). Because the Playground and the Loader aren't part of the same frame, we use postMessage to communicate back and forth.\nFrom Playground to Loader:\n\nUser selects fixture\n  js\n  {\n    type: 'fixtureSelect',\n    component: 'Message',\n    fixture: 'multiline'\n  }\nUser edits fixture body inside editor\n  js\n  {\n    type: 'fixtureEdit',\n    fixtureBody: {\n      // serializable stuff\n    }\n  }\n\nFrom Loader to Playground:\n\nLoader frame loads, sends user fixture list and is ready to receive messages (happens once per full browser refresh)\n  js\n  {\n    type: `loaderReady`,\n    fixtures: {\n      ComponentA: ['fixture1', 'fixture2'],\n    }\n  }\nFixture list updates due to changes on disk (received by Loader via webpack HMR)\n  js\n  {\n    type: `fixtureListUpdate`,\n    fixtures: {\n      ComponentA: ['fixture1', 'fixture2', 'fixture3']\n    }\n  }\nFixture is loaded and serializable fixture body is sent\n  js\n  {\n    type: `fixtureLoad`,\n    fixtureBody: {\n      // serializable stuff\n    }\n  }\nFixture updates due to state changes (local state, Redux or custom) or due\nto changes on disk (received by Loader via webpack HMR)\n  js\n  {\n    type: `fixtureUpdate`,\n    fixtureBody: {\n      // serializable stuff\n    }\n  }\n\nOrder of events at init:\n\nPlayground renders in loading state and Loader <iframe> is added to DOM\nLoader renders inside iframe and sends loaderReady event to window.parent, along with user fixture list\nPlayground receives loaderReady event, puts fixture list in state and exists the loading state\n\nOrder of events on selecting fixture:\n\nPlayground sends fixtureSelect event to Loader with the selected component + fixture pair\nLoader receives fixtureSelect and renders corresponding component fixture (wrapped in user configured Proxy chain)\nUser component renders, callback ref is bubbled up to Loader and fixtureLoad event is sent to Playground together with the serializable body of the selected fixture\nPlayground receives serializable fixture body, puts it in state and uses it as the JSON contents of the fixture editor\n\n\nA coupe of thoughts for this issue:\n- A new componentSelect event (Playground => Loader) would be needed\n   {\n    type: 'componentSelect',\n    component: 'Message'\n  }\n- I don't think the fixture editor make a lot of sense on the component page since you're dealing with multiple fixtures. Without thinking too much on this, I propose we disable the fixture editor on component pages. If the fixture editor button is selected we can show a tooltip message like \"Fixture editor is only available for independent\" fixtures. This means we don't need to send an additional event from Loader => Playground with fixture contents.\nI hate to have to say this, but you should probably pause your work on this until we finish #364. Would you be interested in helping with reviewing it when it's ready?. Hi @maciej-ka,\nUnfortunately (actually fortunately since it's going to be great :D), I went down the rabbit whole and ended up rewriting a lot of the old code to make it more robust, easier to understand and extend by contributors. See the highlights in this comment.\nWhile the branch is not ready to be merged, you should be able to start the groundwork for this as it requires some amount of planning and high level design. Just keep in mind that the CP is 100% rewritten on my branch, so best to take a look over it before coming up with any code.\nTo answer your question, when I finish work on my branch we'll still not have a way to load more fixtures at once, so we'll need to come up with a solution for that here. It's relevant to note that the communication has changed and the Loader has the fixture contents now, while the Playground is merely a remote control that has acess to component and fixture names. The Loader actually wires the serializable fixture contents to the Playground in order for it to be displayed in the fixture editor.\nThis said, here are the rough steps I see included in this feature:\n\nComponent names need to be turned into links (right now are static)\nComponent links need to point to a new type of URL (with component param but without fixture param)\nFixtureless component URLs need to render a new type of Component page (this is the bulk of this feature)\nNew Component page will go through all component fixtures (already has their names) and render a loader iframe for each.\nThis is the tricky part. So far we only had one loader iframe per page, we need to manage multiple instances and map them to dynamic refs, to be able to access their contentWindow and call postMessage on each iframe with its respective fixture\nEach loader iframe will receive a different fixtureSelect event and will act the same way a full screen loader does now (so no changes to the Loader)\nThere will be some CSS to figure out since the Loader is currently full screen and we need to create explicitly defined boxes now for fixture to be rendered one under the other.\nThere won't be any fixture editor on the component page (at least for now) for simplicity's sake. It would make things more complicated (both to implement but also for the user).\n\nThis should be enough to start the conversation while I'm still working on finishing the other branch. \n@maciej-ka what do you think? See any flaws in the plan above? Any additional ideas or mentions?\nPS. I wouldn't worry about the router because the current router simply maps the querystring params to props, which is ugly but straightforward. Or did you have a specific concern related to routing?. @maciej-ka #364 is merged. You're no longer blocked!. > However, could this proposal include the extra ability to define multiple fixtures in a single file?\nI'm currently having to generate a whole heap of single fixtures instead:\nThis would be a sweet! It's related to this, but can be implemented separately, after we have the functionality to render all fixtures of a component in a single page.\nAn elegant way would be to allow fixture files to export a list of objects, treating each of those objects as a separate fixture and rendering them in the new page being developed in this PR.. > My 2 cents: you could have a convention to name a fixture the same thing as the file that contains your React Component. That would mean it exports multiple fixtures. In order to still support multiple fixture names I would export an ES6 Map out of the fixture to easily determine at runtime if the fixture is a \"new\" fixture or not in order to keep backwards compatibility and not have to export weird domain specific objects or Arrays of fixtures.\nHmm, why not just export a bare [] (prettier to the eye) and internally distinguish single vs multiple fixtures file by Array.isArray()? A single fixture always returns an object, never an Array.\nEg.\n```js\n// Single fixture\nexport default {\n  props: {\n    foo: 'bar'\n  }\n}\n// Multi fixture\nexport default [\n  {\n    props: {\n      foo: 'bar'\n    }\n  },\n  {\n    props: {\n      baz: 'qux'\n    }\n  }\n]\n```. Interesting. I didn't imagine each fixture from a multi fixture file to have a name. \ud83e\udd14\nIt sounds cool, but we need to see it as a whole. What @maciej-ka is working now is to put all existing single fixtures in a page.\nSo if you had\nfixture1.js\nfixture2.js\nYou'll have a page like this\n```\nComponent Foo\nfixture1\n[ iframe ]\nfixture2\n[ iframe ]\n```\nThis means we render fixture names from file names. @ovidiubute you're proposing a way to name more fixtures in the same file. My only worry is how these two types of naming fit together.. > Why not add a title attribute to the fixture object? This would work for single fixtures as well.\nThis is also interesting. It means you could have friendlier names for single fixture files that show up in the component page (where all fixtures are listed).\nAnd you have a unified way of naming fixtures.... Big fan of @NiGhTTraX's idea of fixture.title. Morover, I'd also like to see fixture.description, an optional paragraph describing the use case that serves as A. code documentation and B. UI documentation.. > I think at this point you've gone so far off the initial idea of a fixture that this proposed format is basically a Cosmos specific DSL.\nYou could say so. You have fixture.url with the Router proxy, and fixture.fetch with Fetch proxy, so you could say the Cosmos fixture is a (pluggable) DSL. I think the potential for a general purpose UI dev tool is very promising. I agree intricate fixtures can turn into hell, but I'd argue than if your fixture gets out of hand the component it mocks might also have too much responsibility.\n\nOnce you've added sufficient Cosmos data into a fixture what is the point at which you need to maintain the fixture itself?\n\nHard to judge but I see your point. The question I think is if the benefits outweigh the cost.\n\nCan you still reliably use it in a unit-test?\n\nAs long as it's deterministic, I say yes. But truth be told Cosmos evolved into more of an integration tool. Depends on what you see as a unit. Is withRouter(connect(Component)) a unit?\nBut we've strayed from the initial topic and we should open different threads to explore these avenues.. Glad to hear this worked out for you @rchanou!. > I have the same issue with a next.js project.\n@vjpr Which version of Next.js?\nI recently upgraded from an older version to 4.3 and struggled a bit to get Babel to work. In the end this config works just right:\n.babelrc\n{\n  \"presets\": [\"env\", \"next/babel\"]\n}\ncosmos.config.js\nmodule.exports = {\n  publicPath: 'static',\n  publicUrl: '/static/'\n};\nBut if I recall correctly, if you reverse the order of presets to [\"next/babel\", \"env\"], which is what the Next.js docs recommend, it stops working.. Cool.\nI'd like to make integrating Cosmos a better experience for new users but unfortunately both Next.js and Cosmos are experimental tech, because they rely on so many new technologies that need to work well together across versions. I think this is the price that we'll continue to pay going forward, at least for the foreseeable future. Anyway, I'm happy you're on board!. Good to hear you solved it!\nWeird that it wasn't working before, though, as Cosmos is designed to work with both webpack 1 and 2. It might be useful to add your initial config to this issue if you still have it, for further investigation or if somebody else reports something similar. Thanks!. Thanks @jnishiyama!. > Implemented the fix + tests\nAwesome.\n\njust waiting for corporate approval\n\nWhat do you mean by corporate approval? \ud83e\udd14 . Haha. Well maybe they all get excited about the project and contribute as well! \ud83d\udc68\u200d\ud83d\udc69\u200d\ud83d\udc66\u200d\ud83d\udc66. Closed in #335 . You're right. This is breaking the build. Will take a look at your PR soon!. @JohnRowleySEL looking great! \n\n[ ] Can you please use kebab case and rename fixture_extensions.js to fixture-extensions.js? \n[x] ~~Optional: Could you pin the enzyme dep to 2.8.0 on this branch to solve the broken build until the problem is clarified?~~ No need, fixed in 2.8.2 https://github.com/react-cosmos/react-cosmos/commit/4f152aa8fa519c2ba906fd948a95e228a7ec2315. No need to worry about enzyme anymore!. @JohnRowleySEL looking forward to merge this as soon as you rename the new file using kebab case. Thanks!. Thanks!. @ovidiubute I like the implicit form because it saves key strokes, but I prefer keeping the explicit form in the docs because you never know the level of familiarity the user has with Yarn.  . @ovidiubute addressed comments!. @ovidiubute @flaviusone @RadValentin @catalinmiron thoughts? What React version are you rocking nowadays?. @flaviusone @RadValentin do we still need the ubervu-react-split-pane fork once react-dom-polyfill is gone?. @flaviusone I was wondering if you put any features into that fork (besides the 0.13 support) that we might lose now?. @flaviusone cool! Take a look over https://github.com/react-cosmos/react-cosmos/pull/342 if you have a few minutes then! \ud83d\ude47 . Will do if anybody asks. The npm package will not go away so nothing should break even if anybody used it outside RC. Onwards! \u2694\ufe0f . Keeping this in hold because 7.0.0 drops support for webpack 1 \ud83d\uded1 . @RadValentin addressed comments!\n\nCustomizable theme is a good idea. Another freebie! :). Published under v2.0.0-beta.11.. Did you by any chance check out this thread? Source maps with Webpack can be problematic, but it seems like cheap-module-source-map & cheap-module-inline-source-map are better alternatives so maybe you should give them a try. Please report your findings if you do. Thanks!. Hi @dfedynich, I'm currently away at JSHeroes (gave a talk yesterday and got more people interested in React Cosmos :D). I'll take a closer look next week to understand the problem and I'd be happy to include a fix for this.. Hmm. When #364 is merged the bundles (playground & loader) will be different and maybe it changes the situation.. I'll ask for code review some time next week. Thanks for the patience! \ud83e\udd1e . Hey @dfedynich. #364 has been merged and released under react-cosmos-webpack@2.0.0-beta.16. Please let me know if the source code issue is still present in the last version. Thanks!. It's not clear to me what redux-state does, but I understand where the problem occurs. Could you share the fixtureBody object somehow (screenshot if nothing better comes to mind) to analyze its contents?\nThe issue occurs inside splitUnserializableParts where we wrongly mark a part of the fixture as serializale, when in fact it appears unserializable. I'd like to understand what that is it your case so that we can mark it appropriately.. OK, this appears to be the problem: Your Redux state is unserializable and Cosmos cannot send unserializable state updates from the loader frame to the playground frame. I have a few solutions in mind but I need a way to test them on your example to make sure it fixes it completely. @dfedynich do you have the React Cosmos repo installed locally? I could show you how to run your project with your development copy of React Cosmos and then try a few fixes together. If we find the right one we can turn it into a proper PR afterwards.. @dfedynich please check if this is still a problem in react-cosmos-webpack@2.0.0-beta.16. It shouldn't crash anymore.. Please reopen if the issue still occurs.. Good catch! Your action items are sound. Feel free to take a stab at it \u2694\ufe0f  . This works well, but I think we can get away without making global classes. The content-frame class already has the desired behavior (left: 250px normally, left: 0 in full screen). We just need to wrap all content (Welcome screen and Error screen as well) inside content-frame in the playground code. Then we can set left: 0 to display-screen for all cases, as it will take the space of its parent node. What do you think?. \ud83d\udc4c . Relevant: ESLint 4.1 has glob-based config support: https://github.com/eslint/eslint/releases/tag/v4.1.0\nDocumentation: Configuration Based on Glob Patterns\nThis allows us to remove XO and rely on solely prettier-eslint instead. If it makes sense to do so.\n. @flaviusone this is all yours!\nAs a bonus, feel free to rename all .jsx files to .js for consistency. Or just the tests, as you see fit.. Hey, did you try any of the two options from Configuring index.html?. > Thanks, adding a custom webpack config with html-webpack-plugin worked.\nGreat!\n\nThere's no way to say \"don't use mine, use your default config please\".\n\nInteresting. Curious what the reasons for wanting this are. Feel free to open a new issue to propose an enhancement for this.. @reinei you might want to take a look. This should not longer require you to hack server.js to make it work for your setup. Thanks!. Update: for those of us watching this issue, I did not stop working on it. On the contrary, I went two extra levels deep to fix long standing issues and clean up ancient code. Since we're doing major changes, I figured now or never.\nThat said, here are the main areas I've refacored\n- Completely rewrote Loader. There's now Loader and RemoteLoader. The former is used for testing purposes (more on this later) and receives component and fixture via props. The latter is meant to be controlled remotely via window.postMessage (i.e. by Playground)\n- Completely rewrote Playground. Changing the Loader-Playground communication required changes to the Playground, which was always a pain because it was a monolithic component written like 2 years ago, tested wierdly using the old test framework. I've taken it into pieces and rewrote it via latest ES6 & React features, split into a number of smaller components and tested nicely using Jest. Moreover, I went the extra mile and added fixtures for CP, which means by the end of this we will work on CP inside CP!\nIn effect:\n- react-cosmos-tree will go away\n- Entire Mocha/Karma test suite will go away\nWIP:\n- [ ] Fixture editor is not yet added to new CP\n- [x] react-cosmos package will also disappear, because it contains both Loader & Playground logic. Most likely we'll have react-cosmos-loader and react-cosmos-playground, each with its own entry point. This also paves the way for non-React loaders.\nThere are even more goodies included, so stay tuned!. Guys, it's time! \u231b\ufe0f\n\nLooking at the diff is insane, although I encourage you to scan it for key parts (tests, fixtures, yarn.lock files, etc. can be ignored). Best to explore the branch and try it out locally.\nWarning: The fixture editor has not yet been added to the new Component Playground, but I wanted to unlock other issues like #314 by merging this gianormous branch first. There are two things that I will submit (small) separate PRs for after this:\n\nAdding FixtureEditor back (it won't take long, but I didn't want to rush it either since I want to add some enhancements along the way)\nUpdating the Contributing Guide (although this branch already adds to it)\n\nHere's an overview of what this branch includes:\n- Complete separation between Loader & Playground. Playground bundle is now served statically so we only have one build after all)\n  - No more react-cosmos package. Packages are now better defined with react-cosmos-loader and react-cosmos-component-playground.\n- Complete rewrite of Playground. yarn start:playground will fire up some Playground Inception right there! \ud83c\udf87)\n  - Removed react-component-tree dependency, and got rid of a lot of old code.\n- Loader rewrite. Split between RemoteLoader (using window.postMessage to communicate) and Loader (uses props). The latter is useful for unit test setup (see CP tests).\n- No more Mocha/Karma tests. Old test suite was removed along with old code, which makes for a cleaner repo and faster build times.\n  - Coverage dropped because of collectCoverageFrom Jest option. It probably increased, but we weren't properly calculating it before by ignoring files that weren't touched at all by tests. The new metric is fine since it includes new/experimental code like exporting or react-cosmos-telescope\n- Bonus: First key bindings to ComponentPlayground: s will focus on the fixture search input and ESC will clear & blur it. @flaviusone will like this.\nThere's probably more than what I mentioned so feel free to ask any questions. Looking forward to feedback. Thanks!. Merged & published under react-cosmos-webpack@2.0.0-beta.16 :tada: :sparkler:. @RadValentin @flaviusone @ovidiubute @NiGhTTraX @catalinmiron you might want to take a look, at least at the Cypress tests \u270c\ufe0f . Thanks @NiGhTTraX!. @maciej-ka thank you, this looks good!\nI wonder why didn't Travis got triggered on this PR. Looking at #353 and #332 it seems like it should work out outside PRs already. @ganderzz @jnishiyama did you do anything extra to ensure Travis ran on your fork PRs?. @maciej-ka how about adding a unit test for this? Tests for react-cosmos-voyager have a twist to them but are then very fun to write.\nHere are the use cases. After you add another use case to that map, you go to packages/react-cosmos-voyager and run yarn generate-use-cases. This will write the corresponding files to the disk. Then in the tests file you add a use case to match those files. I'd start from a simple example like relative-fixtures.. This is great. Will try it out locally and merge it this weekend.\n@maciej-ka maybe you need to have a Travis account (login via Github) in order for Travis to trigger builds when you open a PR.. Beautiful! \u2728 . Cheers! \ud83c\udf7b . Can't make anything out of this so I'll close it. @mikejonas let me know if I can help with anything.. Thanks!. I know it's a lot to ask, so I don't expect much, but this PR adds the FixtureEditor back and we have all previous functionality working (and more), so let me know if you spot anything here before I merge. \nCHECK THIS OUT\n\n. For some reason Cypress fails (type command in search input no longer triggers change event in FixtureList component, so the fixtures don't get filtered) due to some minor/patch package upgrades. See 724a17114f05386beacdf125e8f7909b73d8c1bf for the diff (from broken to passing). package.json is identical.. Never mind. I though I had downgraded React but the caret has failed me again, @^15.5.4 installed 15.6.1 \ud83d\ude21\nIt's probably this regression bug.. Hey @amrdraz. Can you please try this?\ncomponents/Board/index.js\ncomponents/Board/__fixtures__/initial.js\ncomponents/Board/components/BoardSquare/index.js\ncomponents/Board/components/BoardSquare/__fixtures__/even.js\ncomponents/Board/components/BoardSquare/__fixtures__/odd.js\ncomponents/Board/components/BoardSquare/components/Square/index.js\ncomponents/Board/components/BoardSquare/components/Square/__fixtures__/foo.js\ncomponents/Board/components/Knight/index.js\ncomponents/Board/components/Knight/__fixtures__/bar.js. Sounds great. Can't wait to review the PR on Monday. It might also fix #387\nOn Jul 22, 2017 17:56, \"Amr Draz\" notifications@github.com wrote:\n\nI updated the test case to reflect the argument and added another case for\nfixtures that are nested under components with fixtures which will fail\nunder the old way the regular expression was setup.\nnow all tests pass\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/382#issuecomment-317188868,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPTfvyeTGMGmsF3QJNZsGD10aRmY5O2ks5sQg2ugaJpZM4OJ8oV\n.\n. Fixed by #398. > 1.  where in source files is html that iframe points to\n\nThe iframe loads the index.html that is part of the user bundle. If the user doesn't specify a webpackConfigPath. This default config is used, which serves the index.html via HtmlWebpackPlugin.\nThis section explains how the index.html is configured in iframe contents (aka Loader).\n\n\nwhat is flow of control from a moment we render iframe to sending fixture data\n\n\nIn the latest code the fixture data is actually sent from inside the iframe to the playground (the other way around). Inside the iframe \u2013 the Loader \u2013 is part of the user bundle, which has all component and fixtures. Here is the code that runs when the iframe renders: react-cosmos-loader/src/mount.js\nHere is where the Loader sends the fixture contents to the Playground (outer frame): react-cosmos-loader/src/components/RemoteLoader/index.jsx\nTake a look at this updated list of events and let me know if it makes sense (or it there's any terminology that you don't understand): Order of events\n\nThanks!. Hi @maciej-ka, I see you updated your branch one day ago. I just merged some styling PRs (#409 and #410) so you have conflicts again \u2013 Sorry! \ud83d\ude48. That is annoying. It's right here. Anyway, https://registry.yarnpkg.com/@skidding/react-codemirror/-/react-codemirror-1.0.1.tgz doesn't 404 for me, so maybe it works now?. That's messed up. I just did a fresh install and it works, and Travis also works so it's definitely not a global thing. \nYou can just replace @skidding/react-codemirror with react-codemirror in your package.json and not commit it\u2013my patch fixes a bug that only affects the fixture editor which you wouldn't use in your work. We wouldn't even need the fork if https://github.com/JedWatson/react-codemirror/pull/107 got merged.... > While I was working on it, I realized, that this change maybe wasn't necessary, as those fixture bodies are sent to the editor. The visible component gets a fixture body from Loader.\nThat's true... Unless we want to show an editor for each fixture, which I don't think we do, we don't need to store the fixture bodies in the component page. Sorry for not saying something sooner!. Hi @maciej-ka,\nFirst of all, I want you to know that this PR is going to be monumental, so right back at you when it comes to patience! :)\n\nI wish the Playground would be able:\na. to scan a list of components and fixtures without a Loader.\n\nYes and no. The idea is this: The Playground must stay decoupled from the user codebase (aka Loader build). The reason for this is to enable:\n\nUser to use different version of React than the Playground component\nFuture: User to use different view layer (something else than React) than the Playground component (see Goals)\n\nIn other words, think of the Playground as a remote control.\nThat said, I just came up with a radical idea while writing this reply. How about this?\nThe whole idea of instantiating a Loader to receive the list of fixtures seems wrong, because if you have X Loaders, you need to have like a \"master\" Loader. Ugh. I think we agree so far. So if the Playground is a \"remote control\", not tied to the user bundle, how can it elegantly receive the list of fixtures only once? Maybe it doesn't receive them from the Loader. After all, the Loader is meant to do much more: Render proxies + component and then report back on state changes.\nSoo, if all we need is a large JSON object, why not talk to the Cosmos server instead? Cosmos already starts an Express server. We can attach a new method, something like localhost:8989/_fixtures, to return the complete list of component fixtures. The Playground could do a fetch request to there method first, add the data to its state (as it does now from the loaderReady event), and then carry on as usual.\nWhat do you think?\nPS. I will happily answer your specific questions as well after we decide on the core idea above.\nPPS. Regarding the loader pool iframe reusability thing: I'm not a big fan of that optimization to be honest. Feels like we're reinventing the Virtual DOM \ud83d\ude04. We can worry about optimizations later if it really makes sense, but iframes are cheap and for now we need to fix this architectural conundrum.. Even more futuristic: \n- We could attach Socket.IO to our Express server and keep a web socket connection open\n- Once we have a socket connection open, we can move the entire Playground \u21c6 Loader communication from window.postMessage to web sockets. This works even when we have more loaders open at the same time if we assigned an ID to each loader frame, like you suggested.\nWhy would this be even better? Going back to the #UniversalComponentPlayground goal, this could enable something like a React Native integration, where the Loader isn't an iframe in the same page with the Playground, but runs in a completely different client/platform.\nOf course this is cool stuff to think about, but for now a new GET method on the existing server is much more realistic.. > I have a son! (born this weekend) :). \nThat is great! Congratulations! \ud83d\udc76\ud83c\udf89\n\n/_fixtures endpoint is next task and we say bye bye to loader pool\nhiding the one in current source misled me that they are precious.\n\nThe reason why it's currently hidden is UX, so the screen doesn't flicker when you switch between fixtures. Not that I think of it your idea was in line with this \ud83e\udd14, so good thinking! Might be easier to keep the main loader hidden for ever and have a different grid of loaders for component page, but I'm not ruling out your initial idea, especially after we have the basics in place.\n\nUnder which user interaction Playground fixtureUpdate and fixtureListUpdate messages are triggered from Loader?\n\n\nfixtureUpdate comes from state changes captured by proxies. So component state change, or app state changes (when using Redux proxy), or URL changes (when using React Router proxy), etc. This would continue to be received from the Loader.\nfixtureListUpdate is tricker, and I've been thinking about this intensively last night. The fixture list can change if a component or fixture file is added/renamed/changed on disk. The Loader reloads on webpack HMR events, which generates fixtureListUpdate event in the end, updating the Playground with the latest components and fixtures. If we move to a new endpoint, like we discussed, we'll lose this and we'll have to restart the playground whenever adding a new fixture file. So it seems like a websocket connection as opposed to a plain endpoint might be required after all. The problem is we still need to watch the file system and effectively duplicate what webpack is doing, so I'm not yet sure of the best solution here. I have a few more thoughts on this but we should probably sync in greater detail before you invest more time on this. I'd happily talk more on Slack, including having a call to speed up the conversation.. So, I've been thinking about this some more. @maciej-ka I wish I could've guided you better from the beginning, but unfortunately this feature is outside the scope of the original design. Now, we can hack it, which is possible in more than one way I'm sure, or we can lay the foundation for a better, more flexible architecture. I would choose the latter.\n\nCosmos v2 has already entered feature freeze and I'm planing a release this month. Anything new is either 2.1 or 3 if needed. So no rush to get this out the door until we're comfortable with the outcome.\nUnless we come up with a better idea (feel free to propose), a web socket connection still sounds like the best approach. Here is a dump of things I imagine connected to this idea:\n- New package: react-cosmos-server. Node package that receives a cosmos.config, creates an Express server with a socket.io connection. It absorts a lot of what react-cosmos-webpack does now (minus the sockets), meaning that react-cosmos-webpack imports newly created react-cosmos-server, starts it and attaches the webpack compiler to it.\n- The socket.io client is present in both the playground and loader bundles. With this in place, the current window.postMessage communication turns into socket events. Existing events can be reused with little change.\n- If the communication becomes centralized, this means there will be two types of messages: global messages (like \"fixtureListUpdate\" when the fixture files change) and Loader messages (like \"selectFixture\"). This brings us back to something you mentioned, which is assigning ID to Loaders, so that each Loader message contains a loaderId.\n- Speaking of global messages, another thing that could later be implemented is opening source files into user's editor when clicking on a button in the playground (via opn, which would be called by the server). I already hacked a prototype of this and it feels amazing to click next to a component and have it pop up in the default code editor. This functionality fits perfectly with the socket server.\nBut, this is A LOT, and it's probably going to be a while until you get to actually finish the component page you started with. It's the only clean solution that I can imagine, though, and maybe you find it interesting as well. If you do, you should break this mammoth into pieces and implement it one by one. I'm also pretty sure there's more to it than what I described, so think about it deeply and ask anything.\nIf this plan actually comes to life, tho, it will have the highest impact as it opens many other doors.\nTake care!. Fixed by #398. Yes \ud83d\udc4c. Hey. Sorry it took so long to reply. I'm looking for an apartment these days :)\nI love the sketch, it looks very promising. You're right about the external paths, but you know what, I'd rather we don't support that use case since it's there for historical reasons (old codebases) and the flow is complicated enough. If user wants to create a fixture via this flow it will go in __fixtures__. What do you think?\nWe still have some complexity, because you can have components/__fixtures__/Button/standard.js and components/Button/__fixtures__/standard.js. I think we have to support these 2 forever because from what I saw only ~50% of users create a folder for each component.\nThe code looks good, but getFixtureFolder is a bit messy. It's maybe WIP, but I can't say I understand it completely after reading it 3 times. The truth is, paths in cosmos are a bit of a mess. I believe react-cosmos-voyager has great tests, but the implementation (this and this) is convoluted. This embarrassing bug is also proof: https://github.com/react-cosmos/react-cosmos/issues/387.\nPlease let me know if you have any ideas on how to simplify this. We should probably take some time to write a paragraph or two about how paths work in the CONTRIBUTING guide while we're at it. Finally, part of the paths confusion is also created by the fact that getComponentName is only called when componentPaths contains file paths and not dirs. Maybe we can clean up this situation.. > For some reason I thought external fixtures folder was a new feature, but I was actually confusing fixturesDir and fixturePaths\nYeah, naming is part of the confusion. componentPath can also be a path where components are found or a path to a specific component \ud83d\ude15 . @jlc467 GitHub is confusing me a bit, are you expecting a review on this or did the review request just remained there from a previous time? In any case, I'd be curious to find out your opinion on this proposal: https://github.com/react-cosmos/react-cosmos/issues/440 \u2013 It ties in into this and am hoping to find a future-proof solution for component discovery/configuration.. @flaviusone finally added a DllPlugin example. It works as expected!\nPS. Added a verbose example to become familiar with DllPlugin, but fyi there's now AutoDllPlugin with makes it much easier.. @jlc467 removed the word \"hoisted\" to avoid confusion with the hoist Lerna option: https://github.com/react-cosmos/react-cosmos/pull/391/commits/2242ab3cac5fb82abae3bf175c0eb5925381cf7c. cc @maxsalven. Good point!\nBut now I wonder why do we need .babelrc altogether. This  is connected. react-cosmos-webpack (server side) benefits from it. But it only reads cosmos.config.js and optionally the user's webpack config. The components and fixtures are ran using the user's webpack loaders. \ud83e\udd14. @jlc467 just tested this in the Flatris repo and it seems like .babelrc was only needed for cosmos.config.js to use ES modules, which we already stopped encouraging. I also removed the entire section on webpack 2 because it doesn't seem relevant to Cosmos. Wdyt?. > Trying to understand the benefit of CommonsChunkPlugin in cosmos. Since we replace output anyway, wouldn't a user webpack config with CommonsChunkPlugin work without cosmos supporting it? Maybe if they use their own index.html file with script references to the common chunks, but otherwise, I'm not understanding the benefit.\nFor the most part, you're right. Cosmos does replace entry and output, but webpack can still generate two chunks if you configure CommonsChunkPlugin to generate a separate chunk for the webpack manifest. See this section from the webpack docs. I wasn't familiar with it either.\n\nTo extract the webpack bootstrap logic into a separate file, use the CommonsChunkPlugin on a name which is not defined as entry. Commonly the name manifest is used. See the caching guide for details.\n\nThe example I created does just that.\n\n\nSeems like this PR gets rid of hmrPlugin option in cosmos.config and only adds HotModuleReplacementPlugin if it hasn't been added in user's config and hot is true. LGTM. I will try to check out and test tomorrow.\n\nCorrect!. - No more duplicate HMR plugin @NiGhTTraX \n- The instructions for integrating with React Redux Starter Kit are much smaller @Yustynn. Also added an example with source maps configured, to test if #346 is still a problem. All works well on my end\n\ncc @dfedynich @david-ogalego. > If this needs a code fix, I can open an issue and address is separately.\nDefinitely. That would be great. I think it's good UX to make it work without a web server, if possible.. See new README & CONTRIBUTING guide on refresh-docs branch. Any feedback appreciated!\ncc @jlc467 @flaviusone @ovidiubute @RadValentin @catalinmiron @NiGhTTraX @bogdanjsx @maciej-ka @sapegin @tkjone @maxsalven. Merging this to be able to build on the new docs in #402. Feel free to add comments later.. Thanks @amrdraz! \ud83d\udc4d \nPublished under 2.0.0-beta.19, please check if the new version works as expected.\nNow that you are a contributor, you might want to take a look at the docs rewrite PR.. He @sashafklein. You're very close. Wrap the fixture blob inside a props key.\njson\n{\n  \"props\": { }\n}\nLet me know if it works. The latest docs (WIP) might be more helpful https://github.com/react-cosmos/react-cosmos/blob/refresh-docs/README.md#fixtures (feedback appreciated). Hi @sashafklein \n\nDo you have any errors in the console?\nDid you add reduxState to the fixture? Like this\nCan you show me how your Redux proxy looks like?\n\n\nShould I be able to see my reducers in the Redux console anywhere?\n\nIt should work if Redux devtools is already configured in your project.. I think I got it!\nThere's an undocumented behavior where we look for named exports before the default one. So Cosmos uses the Dropdown class export instead of the connect HOC default export. \ud83d\ude43\nDo you need to export the class itself? The problem should go away if you replace export function Dropdown with function Dropdown.\nIf you set alwaysCreateStore: true you should no longer have to define reduxState in fixtures. E.g.\n```js\nimport createReduxProxy from 'react-cosmos-redux-proxy';\nimport createStore from 'store/createStore'; // See below file\nexport default () => createReduxProxy({\n  // Called when fixture loads with fixture.reduxState as initial state.\n  // See https://github.com/skidding/flatris/blob/master/cosmos/redux-proxy.js\n  createStore,\n  alwaysCreateStore: true\n});\n```\nLet me know if it works.. > Would it work if I renamed the named export?\nYes because Cosmos only looks for a named export equal to the file name.. This is a long time request. Please review!. @zaboco you might also be interested. Turns out fetch-mock was the way to go after all :). Published under 2.0.0-beta.20. @adelinaenache it seemed like you're not going to finish this, so I recreated your commit on a different branch (under your name and email address) and added the finishing touches. https://github.com/react-cosmos/react-cosmos/pull/439\nEdit: Actually the commit author was lost when I squashed the branch :(. @jlc467 bundled a fix for #397 as well, let me know if this is what you also had in mind. Although the React Router proxy itself is pretty small, but PR packs a bunch. Here are links to each important item:\n- Usage docs for Router proxy\n- Router proxy example\n- Route proxy source\n- Router proxy tests\nGeneral additions to the contributing guide:\n- Boilerplate for creating proxies\n- Test boilerplate for creating proxies\nAnd here it is in action:\n\n@tkjone check this out. This proxy also makes mocking Router-dependent components inside unit/integration tests a breeze.. @ovidiubute addressed you comments. Let me know if you have any other thoughts. Thanks!. @NiGhTTraX any ideas?\nDropping webpack 1.x is inevitable, but don't think it addresses the larger issue.. @NiGhTTraX this happens when you rely on Cosmos' default webpack config, right?\nSolution #1:\nWe prioritize for people with latest version of webpack/Babel and upgrade the babel-loader version, so that only people with webpack 1 will have this problem. For them, the solution is to use a custom webpack config and point to an older version of babel-loaded they installed locally.\nSolution #2\nRemove babel-loader from deps (as you say), but check if user has it installed in default-webpack-config and only add it to loaders if they do.\nWdyt?. I see what you mean. I'm thinking of removing all webpack loaders from react-cosmos-webpack deps. The only one I'm not sure about is json-loader, which is used for reading .json fixtures. Come to think of it, that could also be left for users to configure if they want it.... > Sounds like a plan. Those loaders are only there to support default-webpack-config, right? \nYes\n\nMy assumption is that while the config might be useful for very basic projects, most have a more complex config that they need to pass to cosmos.\n\nProbably true\n\nI think it would also reduce confusion for projects that use the default config and then add something to their project config which then makes cosmos stop working.\n\nIt would definitely be an improvement. My plan is to make the default config a smart config. I.e. it starts as a bare webpack config, and then does stuff like look into the user's node_modules and if babel-loader is found, it creates a modules.loaders entry with it (same for a bunch of popular loaders like css-loader or url-loader). This is possible because the config file runs on the server\u2013before we even start the dev server\u2013so we have access to the file system.. Yeah. resolveFrom.silent, makes it even easier. Besides not having to try/catch ourselves, we can set the resolve base to something like dirname(cosmosConfigPath), which work great in the monorepo or when linking a Cosmos-dependent codebase to a local clone of Cosmos (useful when hacking Cosmos) \u2013 thus ensuring that we look for the loaders in the user's node_modules and not in those of the remote Cosmos copy.\n~~Edit: import-from is even better.~~. aaaaaaaaand done. Please review.\nThe diff is a bit scary so here's a timeline of what happened:\n- Made default webpack config a \"smart\" config, importing loader modules at runtime and adding them to the config only when found\n- Same as above, but also for html-webpack-plugin\n- ^ is great, because now webpack can support webpack 1-3 even if loaders or html-webpack-plugin aren't backwards compatible (as a side note, Cosmos still depends on webpack-dev-middleware and webpack-hot-middleware, but fortunately they are backwards compatible)\n- To make the module resolving bullet proof, the user modules are imported relative to the user config file. The config path was resolved in react-cosmos-config so it had to be lifted to a place where it can be used by other modules (like getDefaultWebpackConfig)\n- Then I upgraded all deps, ran into some issue with Lerna+Yarn and had to tweak the Travis config :/\n- Then I was testing everything in an external repo and I realized Cosmos crashed badly when webpack wasn't installed, so I made wepback too a run time import with a safe check & informative warning message\n- Finally, added a safe check + message for when cosmos config is missing, which was also failing dramatically before\nIt's not that much code if you only look at the source code. @NiGhTTraX thanks!. @flaviusone this one's for you!. Good catch!\nI don't think setting the componentPaths to src is the best approach, because you're targeting all the user source (utils, constants, reducers and whatnot)\u2013which is why you have to start ignoring stuff like index.js and registerServiceWorker.js.\nHow about adding another bullet to \"Also make sure to\", saying something like\n\nCreate the src/components directory and place your components there, or change componentPaths option to match your existing structure\n\nIt's not ideal, but I still wouldn't include the entire app source in componentPaths as it's meant to target only component files. \nBeyond documentation, we should make sure the Cosmos isn't so fragile and it doesn't crash when component paths are missing. A check would be useful (probably here) warning the user that a path isn't valid, allowing the rest of the program to move on. If in the end Cosmos will find 0 components the UI onboarding will take if from there. We already have a \"you have no components yet\" screen.. Thank you, sir! \ud83d\ude47. The problem is your publicPath is set to ./playground and the export path (outputPath) is set to ./plaground/cosmos-export. So trying to copy ./playground in ./plaground/cosmos-export creates an infinite loop. Two things:\n\nI created this PR to prevent this in the future. Please take a look.\nWhy are you setting the publicPath to ./playground? The public path is meant for static files, of which you seem to have none. So you might as well remove the option altogether. Fun fact, did you know that you're statically serving the ./playground dir, along with the cosmos config? \ud83d\ude04 \n\n\n. > Huh, interesting. I thought publicPath acted like webpack's option which is used to set the CDN. For webpack it's relative to the page serving the files so that's why I set it to ./.\nIt's more like webpackDevServer's contentBase option.\n\nWhy do you need to copy the publicPath folder when exporting? Can you give me an example of how you would use the option in the playground?\n\nStatic assets that aren't loaded via webpack. Like a webfont that you put in public/MyWebfont.woff and then reference it in your index.html directly. It depends on each person's config and Create React App discourages it. But in Next.js for example you have /static/ serving the static directory. So you'd make that work with Cosmos like this:\njs\n// cosmos.config.js\npublicPath: 'static',\npublicUrl: '/static/',. > Ah ok, so it's just for stuff referenced outside of files parsed by webpack. Kinda like globalImports, right?\nIn concept, yeah, but stuff from the publicPath are static, unprocessed assets.\n\nSpeaking of which, how do you handle globalImports when exporting?\n\nThey will be part of the resulting bundle. The webpack bundle will have multiple entry points, same as it works in development.\n\nI think a different name would've avoided the confusion for me. staticPath, perhaps?\n\nGood idea. publicUrl should also become staticUrl, in this case. I'm open to this change but it needs a deprecation strategy.\n. > Code looks good. Didn't check it locally since I don't wanna imagine how many npm links I have to do.\nThanks for the review! If I'm not missing anything, you only need to have a Cosmos clone (and run yarn build inside) and then run the react-cosmos-webpack binary from that path in your project. E.g.\n```bash\ncwd in your project\n/path/to/cosmos/clone/packages/react-cosmos-webpack/bin/cosmos.js\n```. First of all, playing with this is fun! Good job getting this to work!\nHere are my thoughts:\nIs /components/ComponentA/components/ComponentB/ a known pattern? I find it repetitive because we keep adding \"components\" dirs. Doesn't look that good in the the playground either. How about putting the Tree component at the same level with FixtureList? Or is it possible to get rid of the \"components\" altogether and have components/ComponentA/ComponentB? I'm starting to see the value of nesting them, especially in the tree view...\nI couldn't read all the code yet, so I'll have to come back to it. I like that you didn't introduce a bloated lib and kept it minimal, but it's quite a lot of code for me to parse so can you please write a small description of the new abstractions (components, classes, etc) you added and what each does? It will be very useful in guiding me when reading the code (but also useful to add as documentation via comments).\nOne thing I noticed is that you keep derived data into state, like the filteredFixtures and selectedPath, which is an anti pattern. A core tenet of React is to keep state minimal, and anything that can be derived should be computed on render. If it ever becomes an optimization problem we can memoize. So, unless you have a reason I'm not aware of I'd like to go back to using this pattern.\nRegarding the design. Can we use the existing colors, spacings and hover please? The folder icon as well, it looks friendlier.\n\nThe new design is nice to play with, but has a bit of Win98 feel to it :)\n\nI know the tree view changes the markup, but here's an example from Atom where the selection bg goes all the way from left to right even in a nested structure:\n\nLet's use the same.\nThe yellow js icons looks cool on the Cosmos blue, but it gets redundant after a while. In Atom you have many types of files, so it makes more sense (although I hid the icons anyway), but here all non-folder items are fixtures, so I say we keep them clean.\nLet me know if there's anything I can help with. I'll probably add some inline comments as well after this.. > /components/ComponentA/components/ComponentB/ is pattern I picked up from this post.\nThanks for sharing the post. I read it and it I like it. And thanks for being flexible. I prefer using a flat structure in the CP for now to focus on the tree view functionality itself in this PR. You can open a subsequent PR to convert the entire CP package structure to the component/service pattern and link to the article in the contributing guide.\nCP doesn't have many files, but I'm more interested in how well #440 works with this pattern. It would make a great case study. Maybe even add a section to README/Usage, saying how the config should look like if you use that pattern, similar to Integration with popular tools. BUT, let's focus on this PR.\n\nI mainly kept it to keep a deeper tree when testing.\n\nMakes perfect sense! Feel free to keep it like this until we finish the review process.\n\nNode\n\n\nGiven the above, how about naming this TreeNode for now?\nactive: boolean, how about selected? It's more suggestive\nI only see onNodeClick passed in tests. If you inspect the components you see no node receives onNodeClick \u2013 Is this WIP?\n  \n\nBesides components and the tree class, it seems like we introduce types so let's define them. In the future it will allow us to use something like Flow or TS, but for now let's document them to organize data and keep a clear image in our heads.\nLike you said, we start from fixtures:\njs\n{\n  `componentA`: [`fixture1`, `fixture2`],\n  `componentA/B`: [`fixture1`],\n  `componentC`: []\n}\nThen we create an intermediary paths object:\njs\n{\n  `componentA/fixture1`: {\n     component: 'componentA',\n     fixture: 'fixture1'\n   },\n  `componentA/fixture2`: {\n     component: 'componentA',\n     fixture: 'fixture2'\n   },\n  `componentA/B/fixture1`: {\n     component: 'componentA/B',\n     fixture: 'fixture1'\n   },\n   `componentA/C`:  undefined\n}\nWe need to take #383 into account. If we don't prepare for it, we'll have to refactor soon. In the future we'll be able to select components as well. So we'll have non-leaf nodes that are also selectable. Maybe this?\njs\n{\n  `componentA/B`: {\n    component: 'componentA/B'\n  },\n  `componentA/fixture1`: {\n    component: 'componentA',\n    fixture: 'fixture1'\n  },\n  `componentA/fixture2`: {\n    component: 'componentA',\n    fixture: 'fixture2'\n  },\n  `componentA/B`: {\n    component: 'componentA/B'\n  },\n  `componentA/B/fixture1`: {\n    component: 'componentA/B',\n    fixture: 'fixture1'\n  },\n  `componentA/C`: {\n    component: 'componentA/C'\n  }\n}\nThen we have the TreeNode type, which I think is the most important one. We must prevent inconsistent and redundant data.\n\nFor example we might know a node is a leaf by checking if it has children. Please correct me if I'm wrong.\nProposal:\njs\n// TreeNode type\n{\n  children: [] // list of TreeNodes, always Array\n  open: true, // always boolean\n  selected: false, // always boolean\n  name: 'components',\n  value: {}\n}\n// isLeaf = !children.length\nThere's a lot of state duplication. The Tree service stores paths and the tree, but then you also keep paths and the tree in the Tree component, and sync the two using event listeners. We can get rid of so much code! \u2694\ufe0f \nSo here's my biggest ask for this review: Can you transform the Tree service from a class with event listeners into a functional service? I'm positive it's possible. I see one big function: createTreeFromPaths(paths, selectedPath) (or from fixtures directly, which ever is easier \u2013 it's not even clear yet to my why we need the intermediary paths but it probably makes sense to keep the tree service cleaner). This one returns a tree but you never really have to add it to state, as it can always be derived deterministically. Then you have selectedPath, which also doesn't need to be added to state, because you can derive it from urlParams.component and urlParams.fixture. So whenever a node is clicked, the event bubbles up to FixtureLoader, which updates urlParams from selected path, and then that will trickle down (Flux style), effectively rendering a different selectedPath and tree respectively.  What do you think, doable?\nThank you @amrdraz!\n. Closing this in favor of #448 \nThanks @amrdraz!. Maybe the element targeted by containerQuerySelector doesn't exist? Please share the template and cosmos.config to have a more accurate response. You can strip any business related parts.. @dfedynich does this still occur now that you upgraded?. I will close this due to inactivity. Please reply if the issue still exists and I'll reopen.. > Does it relate to Playground and Loader communication or their separate configuration?\nIt shouldn't. The separation prevents similar conflicts.\nCan you please share your configs? A minimal failing example would be great so I could debug on it, otherwise it's guesswork.. @dfedynich does this still occur now that you upgraded?. I will close this due to inactivity. Please reply if the issue still exists and I'll reopen.. Are you sure it's not an npm problem? I just installed in from scratch and it worked:\n\nWhat is your node/npm version?. Have you seen this thread? Most responses suggest upgrading node fixed it.. There's an example using Axios (which uses XHR underneath) here, and it seems to work just fine. You need to put the mocks inside fixture.xhr, as described here.\nCan you please share your code? I don't understand what you mean to be honest. I'm confident we'll figure this out if you share your proxy config and fixture.. I think this is because you're using react-cosmos-normalize-props-proxy \u2013 Can you remove it from your project? \nThe only requirement is to put props under fixture.props, then you never need to use react-cosmos-normalize-props-proxy again. It was meant for my previous company where we had hundreds of fixtures and we didn't have time to write a codemod to update all fixtures.\nI believe this is where the confusion from #432 comes.\nIf you look in your screenshot you can see xhr is found in fixture.props.xhr, when it should be fixture.xhr.\nPlease try this and let me know if it works. If not please share the source code of your fixture and proxies config. . @dfedynich in light of our recent discussions, is this still a problem?. Happy to help! \ud83d\ude4c . I completely agree. The issue is Cosmos v2 has been under beta for many months, so you could get a beta version bump with breaking changes. We're going to use proper semver once v2 is released (hopefully this month \ud83e\udd1e). I will compose a comprehensive v2 changelog (it's been a year of work) first, and then the following releases will be small and easy to add to changelog\u2013either manually or via a tool like you suggested. I'll keep this issue open until we put this practice into place.. I've added release notes for since 2.0 and will continue to do so for the time being. When the releases will increase in number we should consider automating the process. Note that Conventional Commits already makes it easy to compose the change log at the end of a release.. Good catch! Flagging this as a bug.\nA few notes:\n- Fetch proxy doesn't use xhr-mock, but fetch-mock, which doesn't interfere with XHR requests so HMR works just fine with Fetch proxy.\n- I agree we should wait until xhr-mock@2.0 becomes stable before upgrading. After that, it would be ideal if we can rely mainly on it to do the job and not have to maintain intricate customizations\n- It would be great if you could contribute to fix this! My only ask is to please describe the technical solution before implementing, to make sure we're on the same page.. Interesting. And then the constructor will run again and the mocks will continue to work?. Interested in making the patch yourself? Contributions are highly appreciated. . That would be great. I'm publishing the 2.0 release candidate very soon and this would make a great addition because it fixes a bug.. It isn't planned. Since it's a bug fix and not a breaking change in can be added at any time in the development cycle. I focused more on the fetch proxy which doesn't have this sort of problems. Are you using Axios (which uses XHR internally)?. I think I know what you mean, and I'm a fan!\nI've thought about this a couple of times and I've also touched on this subject a few months ago with @markdalgleish. If I'm not mistaken he already created something similar in their custom component explorer at SEEK.\nSo if I understand correctly, you're talking about a way to enable fixture handlers (callbacks) to mutate the fixture and essentially change the props as you interact with a stateless component. This is how I envision it:\n```js\n// ...inside a fixture file\nimport { fixtureUpdater } from 'react-cosmos-foo-bar';\nexport default {\n  props: {\n    name: 'Denis Fedynich',\n    onChange: fixtureUpdater((fixture, value) => ({\n      ...fixture,\n      props: {\n        ...fixture.props,\n        name: value\n      }\n    }))\n  }\n};\n```\nIs this how you see it, or differently?\nPS. This allows mutating the entire fixture, not just the props.. > You mentioned about some done groundwork for the idea to handle stateless components. Nice to hear, so I will leave aside with my quick implementation and will be looking forward when you turn your fixtureUpdate solution into a new proxy.\nI must've communicated poorly. There was no work done, just some discussions. I was emphasizing that I like the idea.\nThanks for coming up with an example already. Comments:\n\nNo need to store the updated fixture in the proxy. The Loader already handles the fixture state. All you have to do is call props.onFixtureUpdate({ props: newProps }) in any proxy and the state will be updated and it will trickle down back into the proxy that originated it \u2013 stateless style :)\nKeeping separate handlers adds to the Cosmos DSL, and fixtures + proxies is already a lot to chew for most people. I'm thinking of something like this:\n\njs\nexport default {\n  props: {\n    name: 'Denis Fedynich',\n    onChange: {\n       __PROP_UPDATER__: true\n      handler: (props, name) => ({\n        ...props,\n        name,\n      })\n    }\n  }\n};\nOf course we don't want to have ugly fixtures, so a propUpdater helper would come in handy.\n```js\n// Use a nice helper\nconst propUpdater = handler => ({\n  PROP_UPDATER: true,\n  handler\n});\n// Then we can write pretty fixtures\nexport default {\n  props: {\n    name: 'Denis Fedynich',\n    onChange: propUpdater((props, name) => ({\n      ...props,\n      name\n    }))\n  }\n};\n```\nThen the proxy intercepts all props that are objects with __PROP_UPDATER__ property and override them like this:\njs\nconst { onChange } = fixture.props;\nfixture.onChange = name => {\n  const newProps = onChange.handler(fixture.props, name);\n  onFixtureUpdate({ props: newProps });\n};\nPS. I reduced my example to just updating props (like your initial example) for now because I realize it makes things simpler and covers the main use case.. > Where did I mistake?\nNo mistake! Your solution is good!\nThe problem is we can't send non serializable values from Loader to Playground, so the editor won't update. But, before we find a solution for that (I'm thinking*), does the fixture update in the Loader? Does the component receive the updated props? That's the essential part.\n* The solutions is probably this: Only send the serializable props (we already have a lib for splitting a fixture in unserializable & serializable parts), and in the Playground merge the props by adding the ones received with the previous unserializable props.. There's been recent interest about this on Slack, so here's an update on how we could achieve this. @dfedynich's solution was good, but it was working around Cosmos, because currenty there's no proxy API for updating a fixture and triggering a re-mount, only for signaling an update which should mirror some internal state change that already happened, like a Redux action dispatched organically. This might sound confusing, but I'll try to clarify with some concrete references.\n\nThe enzyme context wrapper already has set and setProps methods, which allow us to mutate a loaded fixture, but only with the Enzyme Test API. See here\nWe need to add these methods to the low-level createContext API, which is at the base of both the Playground UI and the Test APIs. It would go here.\nThen we need to map this function to a proxy prop like setFixtureField. Here.\n\nOnce we nail this part, writing the proxy should be straightforward, especially with all the context in this thread. Anybody want to lead this effort?\n. @omarzion Looks great! Alternatively, you could put __controllers outside props? Eg.\njs\nexport default {\n  component: Wrap(Input),\n  props: {\n    value: ''\n  },\n  controllers: {\n    onChange: e => ({ value: e.target.value })\n  }\n}\nAlso, you may want to pass previous props to controller functions (as 1st arg), as you would to a reducer. Eg.\njs\nexport default {\n  component: Wrap(Input),\n  props: {\n    value: ''\n  },\n  controllers: {\n    onChange: (prevProps, e) => ({ ...prevProps, value: e.target.value })\n  }\n}\n\nDo you think this would be worth turning into a proxy?\n\nI think so. It's a good solution for the problem discussed in this thread. If you publish a proxy I'll link to it in the docs. But note that I plan to introduce a new API for proxies, probably next month. So it's up to you to decide if you want to invest into publishing this. That said, migration to the new APIs will take longer so it might still be valuable for others to reuse your proxy in the meantime.\n. > I got it working as a basic proxy.\n\nhttps://www.npmjs.com/package/react-cosmos-stateful-proxy\n\nCool. Feel free to send a PR to add it to this list.\n\nI'm not sure where to begin with getting it to update the editor.\n\nYou have to call onFixtureUpdate from the proxy's props. See this example from the router proxy.. @dfedynich What do you think of @omarzion's proxy, can we close this issue?. Great!. Well react-cosmos-normalize-props-proxy is only meant for users using old versions of Cosmos that didn't have time to upgrade to the latest fixture format. I would prefer people not use it because they would depend on deprecated behavior.\nTo elabore. In the past fixtures were written like this:\njs\n{\n  A: 1,\n  B: 2,\n  C: 3\n}\nA, B and C could be props, or magic fields expected by proxies. This was pretty annoying, because if you wanted to have a prop called state, or reduxState, or url, you couldn't, as it conflicted with proxies.\nNow you write fixtures like:\njs\n{\n  props: {\n    A: 1,\n    B: 2\n  },\n  C: 3\n}\nAnd we always know A & B are props, while C is a special field used by proxies. C never reaches the loaded component. In some cases you might only have props, but the convention is totally worth it because it enables a wide array of proxies and it's not error prone like before.\nSo my question would be, why are you still using react-cosmos-normalize-props-proxy?\n. That's for pointing this out! I should remove it from both those projects to avoid further confusion.. Removed from Illustrated Algorithms and removed from Flatris. Let me know if you still encounter problems.. > The code mirror will cut the property even if it will contain any invalid JSON property inside. So, xhr fixture property (for xhr proxy) will be always cut off, because it contains a mock function.\nIndeed that is the drawback of the fixture editor. It only works with the serializable parts of the fixture. The fixture editor is meant to show raw data instead of source code. Eg. if your fixture references several imports and generate data using loops, you still see the exact data generated in the editor. Doing this while also maintaining source code and styling definitely sounds good, but I think it would be 5x the effort compared to the actual functionality. It would involve AST manipulation and I can only imagine how many corner cases we could hit. A complex scenario that works currently is state changes. Notice that if your local state or Redux state changes, the fixture editor is updated with the new state. Not sure how we could do this if we put source code in the editor.\nThat's not to say that we can't be ambitions. If you have any ideas I'm happy to discuss. It's important to understand the current functionality. Most importantly, the fact that state updates are received from the Loader iframe and get merged into the initial fixture, updating the editor.\nBut, I do have a small idea that would make this better with very little effort. We already know which props are \"unserializable\" and do not display. We could show a yellow band at the bottom of the fixture editor saying\n\nThe following props could not be displayed: onChange. The reason for this is yata yata link to docs (or even this issue!)\n\nWhat do you think?. > It stops users think, why they lost some props in the fixture :)\nGood point :). @DJTB I agree. When we send the serialized fixture body from Loader to Playground, via fixtureLoad event here we could easily extract the names and types of the unserializable parts and add that information (which is serializable) to the event. Then, in the Playground, we could show a yellow band at the top of the fixture editor (similar to the red error band at the bottom when JSON has syntax errors) with this information.\nHappy to accept a PR on this one and to give more instructions if needed. Labeled this as a free for all feature request.. Hey @Izhaki,\n\nIs this the really working for reduxState?\n\nThe editor only works for serializable values. It looks like your state contains functions (eg. shouldFire), which make the whole redux state unserializable and thus hidden from the JSON editor.\nThis will improve in the mid/distant future, but for the moment you might want to consider making your state serializable, which is a best practice anyway. Anything else can be derived.. Oh, I forgot the files from /bin aren't compiled. My bad completely, I made this mistake recently.\nTravis only tests on Node 6, 7 and 8, so this is why this went through.\nIf you want to make a fast contribution, you can replace const with var in bin/cosmos and cosmos-export.\nStuff like this\nconst {\n  default: moduleExists\n} = require('react-cosmos-utils/lib/module-exists');\nBecomes\nvar moduleExists = require('react-cosmos-utils/lib/module-exists').default;. Actually const should work in Node 5 (even 4) as well. It's the destructuring that breaks. So just this and this needs to be replaced.. Fixed by #436. The latest versions are not backwards compatible with 2.0.0-beta.23. So instead of going back to 23, please upgrade to 27. I just pushed a patch to fix #434 and published 2.0.0-beta.27.\nA few notes:\n- The reason why we're not running Cosmos tests on Node 5 is because Jest doesn't work on Node 5. It's a long story but you need to pass Node 5 the --harmony-proxies flag to work, but this flag no longer exists in newer Node versions so it becomes complicated to maintain support.\n- The Contributing Guide actually mentions Node 6+ is required for Cosmos development\n- If you want to contribute to Cosmos, I advice using nvm to switch between Node version.\n- Already upgraded Illustrated Algorithms to 2.0.0-beta.27\nReopen if you still encounter problems.. What a crowd! I suspected this was of interest.\n\nCan't we detect component by scanning all files and folders starting the root for files that look like they are components\n\n@amrdraz Yup, there's potential here. Wouldn't rely on .jsx files since it's flaky, and you can have .jsx fixture as well. But with static analysis we should be able detect files with React components exported. \ud83d\udc4d\n\nSo far though, I seem to be the only one that finds creating fixtures tedious while creating a cosmos config a breeze\n\n@jlc467 I'm in the same boat with you, but we might be a minority. That's not to say that Cosmos should try to please everyone when constraints have a positive impact. To be clear, I wouldn't allow Level 0 to disable the ability to generate fixtures automatically. In fact, Level 0 is the actual data structure we use internally, as the result of file discovery. It's just a matter of cleaning up our architecture to make it available for the user to deliver this data structure by hand. Worse case scenario, automatic fixture generation can only work for configs using Level 1 and above, but Level 0 setup and fixture generation features are complementary.\n\nNo config files, no learning new concepts (i.e. fixtures) before seeing the playground in action.\n\nWhat if we could merry Level 0 with this?\nImagine cosmos.config.js being as verbose as possible, being able to customize as much as you can, but in most cases never having to change it manually. As you say, we can have auto detect and auto generate fixtures via the Playground UI, but then we can store it in the config so the user sees what happened in the back. Full transparency and customizability, with a UI layer on top. What do you think?\n\nAny chance of nested fixtures in Level 0? And collapsable folders (the open/closed state of which is persisted across sessions) in the component browser would be awesome :).\n\n@maxsalven Nested fixtures sounds good. Definitely worth keeping in mind. It will work great together with https://github.com/react-cosmos/react-cosmos/issues/251#issuecomment-327676696\n\nI've currently got a component with about 50 fixtures\n\n\ud83d\ude0d \n\nWould also love to be allowed to add a description to my fixtures which shows up below the fixture name.\n\nI've also been thinking about fixture.description, but my thinking was to show it above the Loader in a \"meta\" header, with possibly other data/actions in the future. Separate thread in any case.\n\nMakes everything simple and easy to understand. And it can also be used for a feature that lets you extend that config from the Cosmos UI itself (and save it on disk). That would imply having the config config in a separate file.\n\n@flaviusone now I realize you were saying what I mentioned the @jlc467 above. Love the idea of an explicit config that is generated by the UI (or scripts at first, then gradually to build UI around it).. > Now level 3 storing as level 0 is a different story\nWe're on to something here...\nI see this discussion converging into a broader, more exciting idea than the initial draft. I'll try to sum up my ideal outcome based on the ideas shared so far:\n\nFull control over file paths in config (more below regarding Level 0 vs Level 1)\nFile paths can be detected and automatically added to config via UI onboarding\nNext step: New fixtures can also be generated via UI and their paths will be automatically added to config based on the same logic (this is out of scope here, but needs to be taken into account)\n\nThis means a single way to config paths with complementary UI flows to automate the entire process. Thus, when fixture detection/generation falls short user can go into config and have complete control.\nA big benefit of this is: Component whitelisting, something that is painful to do now.\nThat said, I don't see any value in whitelisting fixtures. Components can exist for various purposes, but we only add files to fixture dirs if we want them to load inside Cosmos. So I think Level 1 would be a cleaner alternative where we don't have hundreds of needless file paths in our config.\nHow does everybody feel about this summary? Did I miss an important part?\n. > In the case I just mentioned, this is a loss because all the components provided out-of-the-box by react-create-app can be easily rendered inside of cosmos without proxies or any additional setup\n@tkjone good point, I didn't realize this.. OK, I'm going to build on my previous comment to start speccing this feature and get it closer to reality.\nIt seems like we're all psyched on config generation, and I've created a dedicated thread to start building a strategy in that direction #452. For the purpose of this thread, however, I say Level 2 and 3 go away. Until config generation becomes a thing, we can continue to rely on componentPaths if we want to avoid verbose path configuration.\nThe chief issue here is that it is currently impossible for many people to configure Cosmos. And if not impossible, it's at least annoying. So let's take another look at Level 0 and Level 1 and try to nail this part first.\nLevel 0\nThis is meant to be Plan B and will not be the recommended way to specify file paths. Why isn't this Plan A?\n- Because whitelisting fixtures is an improbable desire\n- Because configs will get huge and repetitive if we specify each fixture path\n- Because we don't benefit by new fixture files being added on the fly via hot reloading (instead, you'd need to restart the Cosmos process to see the new fixture)\nSo why are we still doing it then?\n- Because we want to ensure anything is possible. We've already made wrong assumptions about file paths in the past and don't want to have to return to this problem again\n- Because it doesn't cost us much. The goal is to accept a data structure for fixture paths that we also resolve to in Level 1. It would be a pity to not let the user skip some magic if they really need to. In other words, the pseudo-code looks like this\njs\n    const components = config.components;\n    const fixtures = config.fixtures || findFixtures(components);\nLevel 1\nThis is meant to be Plan A until we come up with config generation magic (again: componentsPaths will continue to work for existing users).\nSo, we already know it will look like this:\njs\n// cosmos.config.js\n{\n  components: {\n    Foo: './src/components/Foo',\n    Bar: './src/components/Foo'\n  }\n}\nAnd we've established that this allows us to:\n- Structure component files however we want\n- Whitelist components\n- Gradually adopt Cosmos (this is a big one, the current solution expects you to prepare all your components for Cosmos as soon as you start!)\nSo the big question remaining is: What about fixtures?\nIt would be nice to offer some flexibility without having to resort to Level 0. For example, I always use __tests__ with Jest, so I find __fixtures__ natural, but over time I've come to see that .test.js is more popular, so maybe we support .fixture.js as well.\nMoreover, building on what @flaviusone was saying earlier, it would be nice to follow the footsteps of Jest and support custom patterns for fixture paths. To be fair this is a more difficult problem since in Jest you only need to detect tests, whereas here we want to detect fixtures corresponding to a component. That said, I think it is still doable by using vars like <componentDir> and <componentFilename> in paths.\njs\nfixturePathPatterns: [\n  '<componentDir>/__fixtures__/<componentFilename>/**/*.{js,jsx,json}',\n  '<componentDir>/__fixtures__/**/*.{js,jsx,json}',\n  '<componentDir>/*.fixture.{js,jsx,json}'\n]\nLet's take a closer look at each of these:\nFlat __fixtures__\n<componentDir>/__fixtures__/<componentFilename>/**/*.{js,jsx,json}\ncomponents/Button.js\ncomponents/Dropdown.js\ncomponents/__fixtures__/Button/default.js\ncomponents/__fixtures__/Dropdown/default.js\nNested __fixtures__\n<componentDir>/__fixtures__/**/*.{js,jsx,json}\ncomponents/Button/index.js\ncomponents/Button/__fixtures__/default.js\ncomponents/Dropdown/index.js\ncomponents/Dropdown/__fixtures__/default.js\nNested *.fixture.js\n<componentDir>/*.fixture.{js,jsx,json}\ncomponents/Button/index.js\ncomponents/Button/default.fixture.js\ncomponents/Dropdown/index.js\ncomponents/Dropdown/default.fixture.js\nBut there's one unsolved problem with customizable fixturePathPatterns: How do we infer the fixture name? At the moment I only see two solutions:\n1. Don't allow nested fixtures (like @maxsalven proposed), and the fixture name will be the fixture file name\n2. Don't make fixturePathPatterns customizable, in which case we can hardcode these 3 patterns and infer differently per each (similar to the existing solution)\nNot very happy with either, but I'm leaning towards the 2nd compromise. In other words, embracing convention over configuration and enabling nested fixture files (which I also think is needed).\nWhat does everybody think? Maybe there's a better idea or insight that I'm missing.\n. Thanks @maxsalven for the radical ideas! Much needed.\nIt's funny but when we started off years ago the fixture format used to contain component as well. I like the idea of standalone fixtures: a single object that can be used to render a component in a given state, as opposed to a (component, fixture) pair as it is now. One concern is the redundant component imports between more fixtures for the same component, but I think it's worth it if we gain a lot on the usability front. Still, this solution raises some big questions:\n\nMore fixtures in the same file sounds like a great option, but is it a good idea to support it and no longer support one fixture per file? If we're thinking of the Jest metaphor, you can have as many test files as you want for the same component. Additionally, the big difference in Cosmos is we also have a hierarchy of components & fixtures (see #448). We already use a hierarchy to organize our code: the file system, so wouldn't be a pity to create a secondary hierarchy instead of reusing it? I find that part of what makes PHP and Next.js successful is their (re)use of the file system.\nIf the fixtures point to components, how are we going to infer the component name for the UI? Not saying anyone should, but it would even be possible to inline components in fixture files.\n\n\nYou can also easily generate these fixtures from the UI.\n\nI get most of the benefits of this approach, but how does it make it easier to generate fixtures from the UI? I find that the opposite is true: It's easier to generate files when there is convention.. @maxsalven I made a playground to experiment with the idea of detecting fixture files only and referencing components in fixtures. Check this out: https://github.com/react-cosmos/fs-playground.\nI added types and some tests to make it clear, but you can also see the fixture files laid out as randomly as possible. The '**/__fixture?(s)__/**/*.{js,jsx}', '**/?(*.)fixture?(s).{js,jsx}' patterns are fully configurable, so in the real world they would be mere defaults. \nOverview:\n- Fixtures reference components via fixture.component\n- Fixture name is read from fixture.name and defaults to default, default (1), default (2), etc.\n- Component name is read from function/Class name (it's easier than I expected)\n- Fixture files can be placed anywhere\n- Fixture files can export one or more fixtures (didn't use named exports because A. it felt like we're moving away from depending on the file system and B. we should only define the fixture name once via fixture.name, so the default export can be an Array instead)\nUnhandled:\n- Namespacing. Currently you could name a fixture namespace/fixture name, but components should also be able to define their namespace (maybe we can support a static property like Component.namespace or Component.label)\nWdyt?. Update \ud83e\udd41: I have a completed the experimental implementation for a new way of defining fixture files and I'm very excited about the result.\nHere are the benefits:\n- Fixtures can be placed anywhere, so no more constraints on the fixture file location. Fixture files no longer need to be correlated to component files. As @flaviusone suggested, fixtures are now detected using a Jest-like testMatch approach. Just like with Jest, I expect almost nobody to change the default value for this option. Per @jlc467's ideas, I think this also makes fixture generation easier since there are no more rigid rules for where to place fixture files.\n- Cosmos can be used without configuration. Right now the only mandatory config option is componentPaths. Unless we need to configure a webpack config path, Cosmos can be made to start working without cosmos.config.js because the new file matching works out of the box thru good enough defaults.\n- Fixtures are whitelisted by default. Because we only show components which have already fixtures, we'll never have to worry about hiding components because we'll never create fixtures for them in the first place. @tkjone I think you'll like this.\n- Fixture files can export one or more fixtures (for the same or for different components). @maxsalven I know you're a fan.\n- Fixtures can be named via fixture.name, defaulting to \"default\", \"default (1)\", \"default (2)\", etc. if unnamed.\n- Component names are inferred in a number of steps. First, Component.displayName or Component.name is checked. Which means component names can also be manually defined. But the idea is to detect the name and not ask the user to provide the names unless preferable. So if name isn't detected like this, it will be detected by checking the name of the component import from the fixture file, via static analysis. If the name still couldn't be detected (very improbable), it will default to \"Component\", \"Component (1)\", \"Component (2)\".\n- Component namespace is inferred from file path. So, like before, if we nest our components in subdirectories, Cosmos will be aware of the relative path to the common dir of all components. Except now it's done without having to specify component paths \ud83c\udfa9. This enables tree view nesting and will work great with the soon to be merged #448 from @maxsalven.\n- Fixture namespace is inferred from file path. Just like with components, fixture can now be nested in the tree view.\n- Both component paths and fixture paths are known and surfaced by the new API, which means we can implement a Playground feature to click on a component or fixture button and open the corresponding file in the native editor \u2013 A feature I already partially implemented in a late night session with @xavcz but never had time to properly ship cause bigger fish had to be fried first (like this monster issue).\nOK, so what's the catch?\nThe catch is that the fixture format changes to accommodate all these. A fixture looks exactly the same as before, except with an extra field pointing to the component it belongs to:\n```js\nimport Button from '../Button';\nexport default {\n   component: Button\n   props: {}\n}\n```\nThat's it.\nStill, this might be scary for people with dozens or hundreds of existing fixtures. To combat this I intend to keep Cosmos backwards compatible. Instead of refactoring react-cosmos-voyager, I'm thinking of doing something as blunt as creating a new package called react-cosmos-voyager2 for the new fs logic. I admit I was partially inspired by this talk. If the config uses any of the old options (componentPaths, fixturePaths and getComponentName) we use react-cosmos-voyager, otherwise react-cosmos-voyager2. The connecting modules need some extra work to map the old fixtures to the new format, but in theory it's just putting { component: Component, ...oldStyleFixture }. And if anyone wants to create a codemod to help with the transition, even better. I'm also curious to look into that, but I don't want to make it a requirement and break compatibility.\nThere's also an extra benefit to writing fixtures like this: The Cosmos loader becomes f(fixture) instead of f(component, fixture) which I think is more elegant as a general abstraction. Especially when using fixtures outside the playground UI, to mock component states in tests.\nFile system and AST\nI would like to clarify something. A main part of this change is to make fixtures more flexible by decoupling them from the file system, which I think is a good idea. But then I also made use of the file system (through static wizardry) to detect file paths, mainly to use them for generating namespaces which can be nicely turned into a deeply nested tree view mirroring the file system. This might sound contradictory. The reasoning for this is that fixtures are now fundamentally decoupled from the file system, but through the use of complementary file system processing we decorate them with extra properties which are 100% optional\u2013and degrade gracefully if they fail in the process. So if the file system logic fails the components won't have a namespace and will be rendered in a flat hierarchy, as before. @amrdraz you might like the AST part.\nAll the code is here: https://github.com/react-cosmos/fs-playground\nIt started out as an experiment but the code is now typed and has a shitload of tests for every scenario I could think of. It still needs some tuning, but for the most part it could be copy pasted into the monorepo and referenced as a separate module. It would be the first module with Flow types!\nHere are the main types to get a picture of the output generated:\n```js\ntype Fixture = {\n  name: string,\n  namespace: string,\n  filePath: string\n};\ntype Component = {\n  name: string,\n  namespace: string,\n  filePath: string | null, // It can be null because detection might fail\n  type: ComponentType<*>,\n  fixtures: Array\n};\n```\nThe root level API will return a list of Component objects, which contain Fixture objects. Feel free to browse the repo to see how the test cases or implementation looks.\nFeedback, please!\nWhile I'm very excited, I also recognize this a major change and want to make sure it's the done right.\nThis thread along with other feedback I received have revealed a lot and I've come to believe that the current state of file management in Cosmos is the primary obstacle in becoming a more accessible tool which can be of use for many more people. This is why I put so much thought and effort into it.\nSo, if anybody from this thread can find the time, I would be very grateful if you could let me know:\n- What do you think?\n- Am I missing something important? (I spent a lot of time with this so could be blind)\n- Could this be improved even more?\nThanks! \u2694\ufe0f\n. @amrdraz I don't know if it path detection can work with webpack's aliases, but it should be possible to make it work with babel-plugin-module-resolver, which seems to have an API for this. It will be nice to see compatibility grow for this in time. For example my POC works with ES modules, but not CommonJS. I left a TODO for that, which can be implemented and released later to broaden support. The dev experience is cool because the tests work with real files so creating new scenarios is straightforward.\nThe nice thing about it is that if the path detection fails:\n- Core functionality still works, except component.filePath will be null so component.namespace will always be ''.\n- Namespaces can still be manually set like Component.namespace = 'Admin/Header'.. Good point. Or maybe Cosmos can surface an cb option to manually resolve\nrelative paths (aliases) to absolute paths, and then you can forward that\nto babel-plugin-module resolver in cosmos.config. I think this is flexibile\nenough to work with other resolvers as well and adds almost 0 complexity to\nCosmos.. > Will I still be able to reuse the new format fixtures for my unit tests e.g. shallow rendering?\nYes, 100%. The only difference is that the (pseudo) API will be shallow(loader(fixture)) instead of shallow(loader(component, fixture)). So I would say it's even cleaner.. @maxsalven asked if he can try this prototype on his codebase, and maybe others are curious as well and want to help test this. It is now possible! \ud83d\udd25\nThree simple steps:\n1. yarn remove react-cosmos-webpack\n2. yarn add --dev @skidding/react-cosmos-webpack@^2.2.0-1\n3. Report what happened!\nHere is an example on me doing this with the Flatris repo:\n\nYou can see there is a nice warning about incompatible fixtures and they become available as soon as the component property is added. If only we had a codemod to automate this with a click, backwards compatibility might not be required after all... \ud83e\udd14. OK, my previous comment was nothing. Check this out: Automatic fixture upgrade! \ud83d\udea8\nThree simple steps:\n\nyarn add --dev @skidding/react-cosmos-webpack@^2.2.0-2 (bump from last time)\nyarn upgrade-fixtures\nReport what happened!\n\nJust look at these gifs:\n\n\nThe formatting isn't great yet. It's annoying that babel-generator removes the comments for example. Tried recast and wasn't very happy with that one either, but might be a better solution. \nEither way, I'm curious to see how it behaves for others, so please try it out!\n. Moved from babel to jscodeshift and the output is much better. An extra newline here and there but otherwise it's perfect. Latest version is @skidding/react-cosmos-webpack@^2.2.0-3.\n\nNote that the codemod currently works for ES modules. Does anybody here have CommonJS fixtures? cc @flaviusone \n. Thanks @maxsalven, that was very helpful. Found a fix for the transform which works well locally against a repo with similar nested files. \ud83d\udc4d\n3.0.0-alpha.1 coming soon with:\n- New fixture API\n- Backwards compatibility with old fixtures\n- Optional transform for upgrading fixtures (will not work in 100% cases, eg. when using aliases)\n- Brand new \ud83c\udf32 view!\nExcited!. ### The 3.0 alpha is here! \ud83e\udd41\ud83c\udfba\nTry out this branch by installing react-cosmos-webpack@next and react-cosmos-scripts@next (for the fixture upgrade codemod).\nHere's a rundown of the Cosmos upgrade in illustrated-algorithms:\nyarn add --dev react-cosmos-webpack@next react-cosmos-scripts@next\nyarn cosmos\nI get a small notice in the CLI:\n[Cosmos] Using `componentPaths` config is deprecated. Please consider upgrading.\nRight off the bat, all my previous fixtures are showing up, nicely listed in the new tree view (courtesy of @maxsalven)\n\nBut if I look closely in the browser console, I get this friendly message:\n[Cosmos] Successfully read 39 old school fixtures:\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/binary-search/beginning.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/binary-search/comparing.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/binary-search/found.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/binary-search/intro.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/quicksort/intro/blank.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/quicksort/outro/blank.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/quicksort/intro.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/raw-data/first-frame-wip.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-block/blank.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-block/empty.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-block/glow.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/bear.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/cat.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/dog.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/lion.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/no-entry.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/panda.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/emoji-icon/snail.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/label/pivot.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/ill/shared/number-var/max-5.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/menu/binary-search.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/page/bfs.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/page/binary-search.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/page/quicksort.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/playback-controls/finished.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/playback-controls/playing.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/playback-controls/stopped.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/player/binary-search-mid-way.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/player/binary-search.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/player/quicksort.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/source-code/bfs.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/source-code/binary-search.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/source-code/quicksort.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/stack-entry/binary-search-beginning.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/stack-entry/binary-search-finished.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/stack-entry/binary-search-first-assign.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/stack-entry/binary-search-intro.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/stack-entry/binary-search-last-check.js\n- /Users/skidding/Work/illustrated-algorithms/components/__fixtures__/stack-entry/binary-search-returning.js\n[Cosmos] Upgrade these fixtures by adding the `component` property.\n[Cosmos] More details at https://github.com/react-cosmos/react-cosmos/issues/440\nSo I go back to CLI to upgrade fixtures:\nyarn upgrade-fixtures --config cosmos/cosmos.config.js\nAaand, diffs are looking good, fixtures are up to date.\n\nGoing back to the UI after this change, everything works as before and I don't get any more runtime warnings in the console.\nBut I still get this CLI notice at compile time:\n[Cosmos] Using `componentPaths` config is deprecated. Please consider upgrading.\nSo now that the fixtures are upgraded, it's time to get rid of the componentPaths and ignore, and move to new auto config.\n\nNote that this config is a bit more complicated because the config isn't placed in the project root.\nAnyway, I restart the Cosmos server. No more CLI notice. Voila! \u2728\n\n\nI still have more things to iron out, but please try it out to help detect any hidden issues!\n. Hi @jlc467,\nMulti fixture files should export an Array as the default export instead of multi exports. Can you try this instead?\n```js\nimport Button from '../components/AsyncButton';\nimport React from 'react';\nexport default [\n  {\n    component: Button,\n    name: 'Default',\n    children: 'Save Item'\n  },\n  {\n    component: Button,\n    name: 'Loading',\n    props: { isLoading: true },\n    children: 'Save Item'\n  }\n];\n``. @jlc467 did you removecomponentPaths` from your config before upgrading fixtures? This is the only scenario that makes sense by reading your log. I still don't understand how you got that TypeError since that whole block of code is guarded by try/catch...\n\nIs it supposed to be read as an old school fixture and then upgraded on the fly? If so, doesn't that involve the AST parser?\n\nThis part doesn't involve AST. It just takes the existing fixture and does { ...fixture, component }. But this only works while you still have componentPaths in your config. Otherwise you need to upgrade your fixtures as well first, which is done by running the code mod. The code mod is pretty limited indeed, but it should work for old fixtures (eg. no Array exports).\nLet me know if I got this right or if you have any other insights.. > Never had componentPaths defined. Not sure why I should need it, or the code mod for that matter. I'm using newer fixture format, just exporting multiple in a single file. Why does that need to be upgraded?\nNo need. I just assumed you were upgrading old fixtures. My bad. \nOK I think I found the problem and fixed it in https://github.com/react-cosmos/react-cosmos/pull/469/commits/5322d9abbf1894036f2120bc9212fdc30d544aee. ~~Published react-cosmos-webpack@3.0.0-alpha.5 under the next tag.~~ Always try react-cosmos-webpack@next for the latest. Please try it out and report what happened.. Sorry if this was communicated poorly, but the default config has changed a while ago and it doesn't come pre packed with any the loaders it supports. This was because there were too many collisions possible so it's best to let each user install the version of the loaders they way. After all, Cosmos works with webpack 1 to 3. Here is the corresponding README section\n\nOnce you have all the loaders installed, the Cosmos default webpack config will detect and use them automatically. Relevant thread https://github.com/react-cosmos/react-cosmos/issues/407\n\nlead to cosmos running but a 404 error when I visited http://localhost:8989\nThe console stated GET 404 http://localhost:8989/loader/index.html\n\nThis is because the above also applies for html-webpack-plugin. Make sure to install it if you don't use a custom webpack config.\n\nbut I noticed some of the files where getting converted so I walked through them until I noticed that the codemod doesn't seem to work if the fixture is exported using module.exports\n\nIndeed, if you look at my comment 6 days ago it says\n\nNote that the codemod currently works for ES modules. Does anybody here have CommonJS fixtures?\n\nThis can be extended later (and anyone can pick this up, AST transforms are pretty straightforward to test and develop), but there was so much to do I tried to save time wherever I could. Plus I assumed there are existing transforms published for transforming ES modules into CJS modules, so upgrading fixtures could be achieved in two steps.\n@amrdraz hope this helps. Let me know if you hit any other roadblocks. I appreciate you testing this!. > I eventually got everything working, thank you for clarifying, everything went smooth for me after, should have noticed the new getting started\nAwesome sauce!\n\nregarding the commonjs were there any valid commonJS cases other than module.exports?\n\nNot that I'm aware of.\n\njust noticed folders that appear to be getting added from nothing in the tree view\n\nOK, just released 3.0.0-alpha.7 which fixes the tree nesting excess. Check it out @amrdraz @maxsalven \n\n. @amrdraz I'm still open to alternatives, but did you have a chance the latest version (3.0.0-alpha.10) with the component icons? It might seem more natural since folders are distinguished from components.. > it looks really good in distinguishing components inside folders\nIndeed, and we have @maxsalven to thank!\n\nthis is how my nested monster looks like now\n\nIn the future we could have an option to hook into the function that generates the namespace based on file path. In your case you could apply a transformation to trim components/ (I think you mentioned this in the past) and it would make the tree even nicer.\n\nBut I think those that don't distinguish between nested components with a components folder would start having a tree of components which may render the point of having icons useless.\n\nI'm sure we'll iterate on this in the future, but for know I like the distinction:\n- If you see a component icon you can expect fixtures inside\n- If you see a folder icon you can expect components and/or folders inside\n\nwell I'm satisfied with this so I think this is great \ud83d\udc4d\n\n\ud83d\udc4d\n. Please subscribe to Cosmos v3 BETA TESTING thread. Conversation will continue there.. Indeed this is annoying. Ignoring standard test files by default is a good idea!. It seems like the file is still included. How about /\\.spec\\.js$/?. And does it work now? If not, you can just try /spec/ to begin with, to see if it's not a bug with how Cosmos ignores files.. OK, sounds like a bug. It would be great if anyone can look into this and find a fix before we end the release candidate period for 2.0.. Closing this because in v3 only components with fixtures show up in the playground. See Cosmos v3 BETA TESTING thread.. This is great!\n\nAs a preface, I appreciate there is an existing PR (#423) for this feature. I don't want to step on anyone's toes, so if having two 'competing' PRs causes stress, I'm happy to delete this.\n\n@amrdraz I hope this doesn't cause frustration. The end goal is to deliver the best UX with the leanest code, so even though I have a lot of suggestions for improvement I like the simplicity of this PR and think it has a good change of getting merged. That said, I've learned a lot from #423 and I already used some insights from it to review this PR. I would love it we could all collaborate on this to create the best result.\n\nI stuck to the original styling as much as possible, as it already looks great.\n\nNow that both components and fixtures are clickable it feels a bit weird for components to take up more space and have a bigger font than fixtures. I tried setting components to 14px font and 30px height and find it more natural (besides saving space):\n\n\nWhen FixtureList mounts, we parse the fixtures prop into a tree structure, and store two copies of it in state (originalData and filteredData). There are two copies so that if we change the search filter, we can run our pruning against originalData, so we don't need to re-parse the fixtures again.\n\nGenerating originalData and storing it in the state makes sense, tho I would probably call it something like fixtureTree. But I don't think we need filteredData stored as it's easily derived from originalData. Did you keep it to be able to mutate it on expand/collapse? I'm sure there are elegant ways to functionally update a single tree node. I think it's called \"tree walk\".\n\nThe shape of the tree structure can be seen here, it's very simple and we use a little bit of redundancy to keep the rest of the code really clean:\n\nSince we don't mind redundant data I think we would benefit more from adding explicit urlParams: { component[, fixture] } to the tree structure. This way we don't have to do any inference like knowing whether a node is a component or fixture based on it having children or not. We just use this property to set the URL and we construct it when building the tree structure. E.g.\njs\n{\n  name: 'dirA',\n  expanded: true,\n  children: [\n    {\n      name: 'Component1',\n      // We won't add this for now tho since we don't have a component page yet\n      urlParams: { component: 'dirA/Component1' },\n      expanded: true,\n      children: [\n        {\n          name: 'fixtureA',\n          urlParams: { component: 'dirA/Component1', fixture: 'fixtureA' }\n        },\n        {\n          name: 'fixtureB',\n          urlParams: { component: 'dirA/Component1', fixture: 'fixtureB' }\n        }\n      ]\n    }\n  ]\n};\n\nA separate, stateless functional component TreeRenderer accepts this as a prop, along with a few others (selected, onSelect, searchText).\n\nI'm a bit confused by the onSelect handler. It seems to do two things: toggle tree node visibility and select a component (future) or fixture. These are two different actions and only some nodes have one while others have the other. One thing I dislike is that we send an expanded value for tree leaves, which don't have children. How about having two different actions?\n\nonToggle: Triggered only on nodes with children (aka folders). Bubbles up to tree root where tree nodes are recalculated and trickled back down.\nonSelect: Handled inside TreeItem by just merging node.urlParams (see my data proposal above) over the current url params. This means TreeItems receive onUrlChange via props and don't need to bubble up the event since they can handle the action themselves.\n\nThis model is future proof. Consider this scenario that I have in my git stash somewhere: Tree nodes have an additional filePath attribute. TreeItem gets a small external link icon button on the right side which fires a request to the node server with that file path, which opens up that file in your OS editor. Feels great when you play with it. Will adapt & publish that code after this refactoring is completed.\n\nI haven't used the fuzzy matcher here (although it'll be very easy to do so), as I really like the search highlighting feature, and I couldn't see how to extract from fuzz-aldrin which characters to highlight.\n\nDidn't take a close look at the API yet, but it would be nice to preserve at least a part of the fuzzy matcher. Namely, I like that you can now type: \"COMPONENT_NAMEFIXTURE_NAME\", since fixtures are often named the same across components and you can't target them otherwise.\nNonetheless, the new highlighting is badass. \ud83d\ude0e\n\nI had some strange bug with setting the ref on the component div, probably because I don't actually have a proper development environment set up. So for now, the 'scroll to selected Component on page load' isn't working. Update: I think this is because I'm using a stateless functional component, should work if I refactor it to a React.Component.\n\nWell at the moment it's trying to use refs in FixtureList, which don't exist anymore as the elements have been moved in TreeRenderer/TreeFolder/TreeItem. The scrollIntoView logic should probably be placed in the component that renders the item we want to scroll to.\nPS. Can we rename TreeRenderer to Tree? I feel like all components are \"renderers\" \ud83d\ude2c\n\nWe could add animation to the expand/collapse\nThe down/right arrows should be extracted to SvgIcon, they're currently just some poor CSS.\n\nI find line-based arrows like Atom uses more pleasant, it'd be cool we could use something similar\n\nWhat I did until now is find the material icons I like (https://material.io/icons/#ic_keyboard_arrow_right) and then copy the SVG path into a SvgIcon.\n\nWe currently only build the tree upon mounting. I imagine the fixtures prop can change over time however, so we should probably look to have a componentWillReceiveProps hook and recalculate the tree state, taking care to maintain the expanded/collapsed states for any components that persist across this prop change.\n\nIndeed. New fixtures show up via webpack hot module reloading.\n\nI think I saw somewhere that we want to be able to click on a component itself (soon), and not just a fixture, so I implemented this (but it's a one line change to disable). There'd need to be some UX/UI discussion around this, as currently it toggles the folder as well as remove the &fixture part of the query string.\n\nSee my comments above. We must support this but not enable it for now, since we don't have anything to show on component pages atm.\n\nI don't know about the overall architecture, but it may make more sense to have the tree-shaped fixture data as an actual prop into FixtureList rather than deriving it within the FixtureList. Unsure here.\n\nI wouldn't worry about this too much for now. Eventually we will merge this vision with the one from #440, since it's useful to circulate as few data structures as possible throughout the codebase. So once #440 is done we might even work with a nested structure (ie. folder.folder.component instead of folder/folder/component) from the get go, starting with user config. But I think it makes more sense to tackle this in #440 and carry on here as long as the new data structure makes sense for our rendering needs (including future ones).\n\nJust realized there's a simple bug where you can't type a space into the search bar, but given the fuzzy matcher is disabled, and I don't think component names or fixture names can have spaces(?), then typing in a space would just mean no matches anyway, so I'll postpone a fix for this until we have a bigger discussion around the matcher.\n\nIt's because we do const searchText = e.target.value.trim(); before updating the state. As a UX rule of thumb, we shouldn't ever alter user input but derive stuff from it before sending it to wherever we use it (in this case the tree filtering algorithm). It feels crippling to a user when they type something in an input and only part if it registers. Solution is to save searchText in state unaltered and then trim the search text and derive the filtered data on the fly (already suggested this above).\n\nMaybe we want to have some sort of 'collapse all' button at the root level?\n\nDefinitely, but in a subsequent PR to not make this one bigger.\n--\nOther:\n- I found a bug: Type something and then press ESC, the input is cleared but search results are kept (I think this automatically gets fixed if we move to deriving filtered tree on the fly instead of keeping it in state)\n- Added some inline comments but then changed my strategy to review high level stuff first (mostly data structures and data flow). I might point to some other, lower impact stuff in a 2nd review, but I think this comment covers the essentials.\n. > Is there a much cleaner CSS only solution you think we can use for this, rather than having to do dynamic height calcs?\nHonestly, no. I feel a bit guilty for suggesting it because I've done this many times in the past and every time I went through the same process as you and ended up using JS calc \ud83d\ude05. I was hoping maybe it became easier to do this nowadays (and maybe it has and neither of us sees it), but for now I say we keep it simple.\n\nLooking thru the rest of the changes now.. Finished review. @maxsalven this looks almost ready!\nI left a few small comments (hope you can find them, Github PRs can be confusing), but I think the main part is to fix the FixtureList and any other failing tests. Otherwise this looks functional and pretty. Is there anything else on your mind?. I was good with the 2nd option but it seems like the 3rd is even better, so I'd say keep that (2052ee1) especially if it's the latest. One small note, but maybe baseUrlParams should be called currentUrlParams (or just urlParams if you prefer brevity), since if I understand correctly they represent the current url params (including a different component/fixture pair that might be selected), as opposed to a subset of url params to extend.. Hello Tree View! \ud83c\udf34\ud83c\udf33\ud83c\udf89\nThanks @maxsalven!. Regarding tree view persistence. Feel free to start a new thread for this.\n\nI was thinking that it's a bit pointless having collapsible folders if every time I load the window, it'll all be super long and expanded again. So may as well build in this feature.\n\n\ud83d\udc4d\n\nIt's pretty naive, we just store an object in local storage that looks like:\n\nSounds good.\n\nIf you are working on two different projects, and have dirA in both of them, then collapsing in one cosmos will mean it's collapsed when you switch to the other cosmos. I'm not sure how we can namespace a project. Probably not a big concern.\n\nWe have a rootPath on the server side (derived from cosmos.config or process.cwd when config will be optional). We can surface that to client to namespace each state per project.\n\nBecause we don't have namespaced projects, we don't know when a fixture has been deleted, so we can't delete the appropriate items from the local storage object. Not a huge deal, just means the object might get a little 'big' but the total amount of cosmos UI folders a given user will click on in their lifetime is small enough to never be a real performance or storage space concern. We could make the object above thinner by only storing 'false' states, at the cost of some small amount of clarity.\n\nI think my previous point partly responds to this. So I'd say we should do a cleanup call whenever we receive the component/fixture tree.\n\nI guess that's because localForage is using IndexedDB? Time for a new proxy? :)\n\nThat would be best. Hopefully IndexDB can be overridden globally. This might help: https://github.com/dumbmatter/fakeIndexedDB. Hi @shadowmint,\nIt seems like Cosmos can't find an index.html for the Loader iframe. Please see Loader index.html and let me know if it works or have any other question.\n\nLoader index.html\nGET http://localhost:8989/loader/index.html 404 (Not Found)\nThe browser console might greet you with this error when using a custom webpack config. There are two methods for configuring the Loader index.html page:\n\nUse html-webpack-plugin\nPut a static index.html file in your public path (see publicPath option below)\n\nUsing html-webpack-plugin is recommended because it automatically injects the <script> tag in index.html. If you create your own index.html then make sure the script tag points to \"main.js\".\nhtml\n<script src=\"./main.js\"></script>. Please let us know if the issue persists.. For the record, I looked into this and here are my findings:\n- Using react-error-overlay requires replacing the webpack-hot-middleware/client with react-dev-utils/webpackHotDevClient, which only supports webpack 3.x. This means we can't use it for now since Cosmos supports webpack 1 & 2 as well.\n- A good strategy would be to check if the host project uses Create Create App and only use react-dev-utils/webpackHotDevClient in that case, defaulting to webpack-hot-middleware. This is great because we would know for sure CRA's error overlay works in a CRA project. Only problem is webpackHotDevClient works in tandem with webpack-dev-server, whereas Cosmos runs on a custom Express server with webpack-dev-middleware attached. Converting react-cosmos-webpack  to use webpack-dev-server might be good idea, but once again we're hit by compatibility issues. The latest WDS only works with webpack 2.x and above. The least intrusive strategy would be to conditionally use webpack-dev-server if host project already has it installed, maintaining the current implementation as a fallback. The nice think about webpack-dev-middleware is its webpack 1.x support. But I'm not sure if maintaining two server implementations is worth the effort, we might drop webpack 1.x before going to such lengths. Asking users to install a compatible version of webpack-dev-server on their own is also suboptimal, since some webpack frameworks (eg. Next.js) also don't use WDS.\n\nUseful links:\n- CRA entry\n- CRA dev server setup\nI'm putting this on hold, but I welcome any ideas or initiatives. It's a pity we can't just piggy back on CRA's outstanding error handling when present, especially since we already reuse the webpack config.. Closed by #484. First step included in v3: Generate config automatically for create-react-app #512\n. > Note that using the { ...spread } operator in the proxy config causes this silent crash (presumably due to a lack of transpilation).\nProxies are part of the user code and thus transpiled. Unless you use CRA and proxies.config.js is not placed inside Babel-whitelisted src. Is this the case?. Updated the docs: https://github.com/react-cosmos/react-cosmos/pull/454\n\nThe \"hardships\" about lack of accessible error messages was the main issue though :)\n\nNot sure how to approach this. Maybe #451 would help.. @maxsalven should we close this now that we have the fancy error modal?. So just for more context, run time errors are covered now. Eg.\n\nBut in your case it's a compile error that occurs initial build. Because a compile error after Loader afterwards (via HMR) is also properly caught:\n\nGood to know. The best approach I can think of now is for the Cosmos server to hook into webpack compiler's error handler and create a unique state when the build fails. FYI right now you get the panel suggesting you should install \"html-webpack-plugin\".\n. Hi @aurbano,\nI'm happy you brought this up. Components used to show up with an automatic empty fixture (another bad idea), and after a major refactor they ended up showing up without any action. I would like to get rid of this behavior and I am willing to push a patch release with the change because I'm 100% nobody depends on a list of actionless component names.\nIt would be great if somebody offered to create a PR for this. The solution is basically adding something like the following here\njs\ncomponents.filter(c => Object.keys(filteredFixtures[c]).length > 0)\nThanks!. > huh\nI was about to create an issue that after updating to 2.0.0 components without fixtures do not work\nSorry for the confusion. If you were relying on empty fixtures you'll have to create those empty fixtures by hand for now.\n\nHow am I supposed to test onChange handlers on inputs with fixtures? Is there a setState method somewhere? May be docs are not good enough...\n\nAll you can do at the moment is onChange: val => console.log('change', val) to see the selected value in your console log. This could be made better by https://github.com/react-cosmos/react-cosmos/issues/431, if @dfedynich or anybody else is able to make it happen.. @amrdraz Yes. But let's wait until #469 is merged, docs are updated and we move from v3 alpha to beta. Otherwise we might leave other people wondering the same thing hanging.... > I guess so. Would be great though if documentation mentioned that creating at least an empty fixture is required.\nI agree. Once we get the v3 beta out the door the docs will be property updated. Can't wait to remove the docs sections regarding to componentPaths \ud83d\ude08. Closing this because in v3 only components with fixtures show up in the playground. See Cosmos v3 BETA TESTING thread.. @joncass feel free to open a PR replacing npm install --dev with npm install --save-dev in docs and I will merge it.. Closed by #462 . Thanks @joncass!. @robbert229 thanks!. @dedan the docs aren't great for using the Loader programmatically, but luckily you're only one step away!\nThe State proxy already exists and is always added when using the UI. But, we need to manually pass it when using the <Loader /> component manually.\nYour code should look like this:\n```jsx\nimport createStateProxy from 'react-cosmos-state-proxy';\nconst StateProxy = createStateProxy();\nrender(\n  \n);\n```\nLet me know if this works.. Perfect! Happy to help.. In case it's not clear: This impacts the Cosmos repo. Cosmos will continue to be compatible with React 14 & 15.. Done! 2.1.0 is React 16 compatible.. > I'm curious to hear your thoughts on whether the advantages brought by Enzyme and Cypress are worth the tight coupling observed in this PR.\nCypress: Yeah, sure. It's a disposable piece. I only added one test file on purpose and it offers enough value as smoke tests: If somehow a bug slips through the cracks of unit tests, at least we know that the UI is standing are core actions work. It took me some time to debug the bug I mentioned, but the cost of maintenance is low since as I said it's just one test file. I was considering adding one end to end test for each example, which would make an awesome CI, but I don't plan to invest more in Cypress until it stabilizes.\nEnzyme: This is a tricky one. Tbh I asked myself a couple of times if I could do without. I don't even use shallow anymore*, so I guess I might as well render normally at this point. The selectors are the remaining valuable part in Enzyme. It's very easy to find children, filter through them, get props, etc. Are there any other libs for doing this? @NiGhTTraX what do you use, bare ReactTestUtils?\n* I gave up on shallow because it doesn't call lifecycle events which I often want to test organically. So instead of thinking whether to use shallow or whether to use mount, I just use mount all the time. It's fast enough and Cosmos fixture mock everything for children to work.\n. I don't expect anyone to review the 9000 LOC diff, but I did review it entirely myself and I wanted to point out any change I found interesting (besides the obvious API change discussed in length at #440 \ud83d\ude00):\n\nEnabled async/await and already used it in the newer modules.\nAdded first Flow types! Added some notes on this in the Monorepo section from the Contributing Guide.\nStarted enforcing a case convention for file names, found under \"Keep coding style consistent\" in the Contributing Guide.\nRenamed react-cosmos-component-playground to react-cosmos-playground for brevity.\nRemoved the component prop from Loader and all proxies, since component is now found under fixture.component.\nRefactored Cypress tests to make each test independent from the others\nMade cosmos.config.js optional (since componentPaths is no longer a hard requirement).\nUpdated all examples to new fixture format and removed cosmos.config from all, except for a new example meant exactly for old style fixtures.\nMoved from Lerna bootstraping to Yarn Workspaces! The Yarn team is still working on fixing a couple of bugs related to Workspaces, but this cleans up the repo a lot: A single yarn.lock root file. There are many other advantages, one of them being yarn upgrade-interactive working across packages.\nAdded component to list of \"special props\" in normalize-props-proxy cc @flaviusone\nRemoved all global Jest mocks from packages/__mocks__ to make packages less coupled. Mocking per package, better yet per test file, is preferred.\nA bunch of other bug fixes, package upgrades and refactors not worth going into detail\n\nI'm merging this branch because reviewing additional commits is impossible and it will keep creating conflicts with other PRs. Here are the next steps:\n\nOne or two extra PRs with small changes\nMoving from v3 alpha to v3 beta\nI'll prepare a README update to reflect the new API, but will refrain from merging until v3 RC goes out, to avoid confusing new users.\nPlease continue to test the next tag and come up with feedback and suggestions.\n\nThis was massive effort but I couldn't have done it without you @amrdraz @jlc467 @maxsalven @flaviusone @tkjone!. Merging this so I can update #469. Feel free to comment later.. > Would you prefer each project to have its own top level key in the local storage (which I think is what you have written above, __cosmos__some-project-tree-expansion-state, __cosmos__another-project-tree-expansion-state), or would you prefer us to use the key within the stored object (i.e. just one local storage key, __cosmos__tree-expansion-state, which then points to an object: { someProject: { state }, anotherProject: { state } })?\nThe former, because if something goes wrong in one project it should corrupt all. But it seems like you already went with this option.. >  I'm not sure if my fixtureTreeToPathArray function is as elegant as it could be.\nIt's actually clever! I made a small variation with commentary which makes it more readable for me, use it if you feel the same.\n```js\nfunction fixtureTreeToPathArray(fixtureTree) {\n  return flatMapDeep(fixtureTree, node => {\n    // Leaf nodes (fixtures) don't have a path because they don't have bear an\n    // expanded state\n    if (!node.path) {\n      return [];\n    }\nconst paths = [node.path];\n\nif (node.children) {\n  // Get all paths from current node's subtree\n  paths.push(fixtureTreeToPathArray(node.children));\n}\n\nreturn paths;\n\n});\n}\n```. > There's no tests yet, I wanted to get your feedback before doing any more work here.\nFinished review. I left a bunch of comments but the main functionality is solid imo. \ud83d\udc4d. Heads up, I merged the monster branch and you'll have some nasty conflicts. Namely:\n- I enforced a convention for file names\n- Renamed react-cosmos-component-playground to react-cosmos-playground\nLet me know if I can help in any way.. I know these changes are annoying, but I'm thinking of going back to using the react-cosmos package name in v3 and deprecate react-cosmos-webpack.\nI put webpack in the name initially to emphasize that Cosmos parts can be used with other bundlers. While it's still the case, it's clear that no other alternative caught on and the naming can do more harm than good at this point, because it brings up unnecessary questions and can lead some people to install react-cosmos (the obvious choice) and not understand what went wrong.\nPlease give this comment a \ud83d\udc4d if you agree or write a reply with the reason if not. Thanks!. Update: New tree view persistence and CRA error overlay published update 3.0.0-beta.5. Update: I merged #501 because I wanted to update the docs ASAP and stop confusing new users. Please take a look at the updated docs and feel free to provide any feedback. You can check the diff of #501 or read the whole thing.\nAlso renamed react-cosmos-webpack to react-cosmos since we all thought it's a good idea. This is how you upgrade (if you use Yarn):\nbash\nyarn remove react-cosmos-webpack\nyarn add --dev react-cosmos@next\n3.0 is 99% ready! \ud83e\udd41. @alp82 will do 1 & 2.\n\nwe created a proxy for glamorous themes, interested in adding it to 3.0?\n\nIt's hard to find the time to properly polish it with tests and all. If you want you can publish a good-enough package (the code that currently works for you) on a personal repo and I will reference it as a \"community proxy\" or something. \n. Update: Published 3.0.0-beta.13 with a bunch of improvements to namespace detection from file paths and the new httpProxy option courtesy of @maxsalven. \nIf nobody reports any new issues related to 3.0 functionality this is the last beta. Next I'll publish the release candidate. We'll keep the RC for a week or so to iron out any remaining bugs and update the repo with latest screenshots and exports. \nThanks to everyone for your help so far, v3 is an amazing improvement to the Cosmos project! (and I already have new features stashed \ud83d\ude04). > Is there any roadmap to see the mid-term and long-term goals?\nThere's a rough section here: https://github.com/react-cosmos/react-cosmos/blob/master/CONTRIBUTING.md#roadmap, but I will write down all my other ideas after this release. I'm mostly focused on architectural changes that enable new use cases and types of plugins, but I think it would be useful to curate a feature \"wish list\" as well. . IT'S TIME! \ud83d\ude80\nCosmos 3 functionality sealed and release candidate is out. Please make sure to use the latest (3.0.0-rc.2) and report any remaining bugs for the next week. I'll take care of updating last bits of outdated docs in the meantime. . @mbohgard \nCan you run node_modules/.bin/print-fixture-files please? You can paste the output here or share via Slack IM if you prefer to keep it private. It will help me understand why aren't all components properly grouped.. @mbohgard thanks. Can you also share the contents of any of the fixtures that have components[0].filePath equal to null?\nIt would be interesting to see both /app/packages/cosmos/__fixtures__/Molecules/FormInput/invalid.tsx and /app/packages/cosmos/__fixtures__/Molecules/FormInput/disabled.tsx, because they're for the same component but only one of the managed to detect the component path.. @mbohgard OK, it's probably because of the named exports. I'll create a failing test and try to submit a patch soon.\n\nMeanwhile:\n- [x] Documented how to use the codemod for upgrading old fixtures\n- [x] Updated the README gif to feature the new UI and awesome react-error-overlay integration (thanks again @Timer)\n- [x] Added @alp82's react-cosmos-glamorous-proxy in a new \"community proxies\" section \n- [x] Added fileMatch to options dump. @mbohgard check out 3.0.0-rc.5 please.. @mbohgard There was a TODO in place ready to implement \ud83d\ude04 \nYes, it's by design. It's useful in cases like Button/Button. Maybe in the future we can only do this if the component name matches the dir name. It's a bit tricky because component names often contain HoC decorations.. Onwards! \ud83d\udee4. Thanks for opening this. My first thought is that synchronizing fixture.url and fixture.location is a world of pain. The only clean option for keeping pathname, search and hash together while preserving the location state is something like this:\njs\n{\n  url: \"/my/url?foo=true#somehash\",\n  locationState: {\n    from: \"dashboard\"\n  }\n}\nThe router proxy can map url and locationState deterministically to the Router's location structure and vice versa.. Closed by #477. > @skidding any ideas on how to fix this?\nHow about this?\n\nAn alternative is to only ever show url and location.state, and only do so if it has a value.\nThis has the benefit of not having two competing 'sources of truth', but the downside of not being able to nicely see location.{pathname,search,hash}.\nIdeally I think we get the sync problem fixed instead. Or alternatively, we have 'read only' parts of the fixture (since location.pathname etc isn't really a prop, it's a function of the url).\n\nActually it seems like you reached the same conclusion before me. \ud83d\udc4d. > then I get an error when running yarn install in the root react-cosmos directory:\nThis is due to a Yarn bug that was fixed but a new version hasn't been published yet. Check out this comment for a temporary solution. I recommend the 2nd option because removing node_modules and re-installing every dep takes a lot of time.. Excellent! \ud83d\udc4c \nFound a Playground bug while debugging this: #493. @maxsalven does this look right? Thanks for pointing it out.. Playground no longer needs a hard reload after unhandled error in Loader!\ncc @maxsalven \n\nI also added some extra Flow typing. This is the first proxy with Flow-typed props instead of React propTypes. I'm pretty excited about the typing of the Proxy linked list.\nFirst there's the generic linked list type:\njs\nexport type LinkedItem<Item> = {\n  value: Item,\n  next: () => LinkedItem<Item>\n};\nThen the proxy props which use a LinkedItem type with a ComponentType argument, which also expects the same proxy props recursively...\njs\nexport type ProxyProps = {\n  nextProxy: LinkedItem<ComponentType<ProxyProps>>,\n  fixture: Object,\n  onComponentRef: Function,\n  onFixtureUpdate: Function\n};\nThis structure statically ensures that props.nextProxy.value is a Component (with the same props) and props.nextProxy.next is a function which returns the same structure recursively. @xavcz you might like this \ud83d\ude0e . Almost forgot, @tkjone I think you'll also find this interesting. First componentDidCatch implementation and Flow stuff.. Published under react-cosmos-webpack@3.0.0-beta.3. > The problem is that localForage.getItem always returns a promise, so || {} will never get reached. It doesn't look like localForage supports fallback/default values either. Is there anyway to wrap the localForage.getItem method so that their promise returns {} instead of null?\nMy bad for not paying attention. This should do it:\njs\nexport async function getSavedExpansionState(projectKey) {\n  const value = await localForage.getItem(`${TREE_EXPANSION_STATE}-${projectKey}`);\n  return value !== null ? value : {};\n}\nFYI, async/await is now enabled so you can use it anywhere you want to make code more readable, including component lifecycle methods.\n\nThe only thing pruning does is clear out the expansion state for directory paths that no longer exist, i.e. the user has moved the component or deleted the fixture. I think both these actions are fairly rare. Pruning doesn't have any impact/benefit on when a user adds a new fixture via HMR (it'll essentially be a noop in this scenario). The only benefit of pruning is clearing out a few bytes of storage in the user's indexedDB cache, and a microscopic speedup in our code that checks if a folder is expanded or not (as there will be less items to look through). Given this, I would say we don't even need to prune at all, and fairly infrequently would be fine. So I think pruning only on mount is plenty often enough, and there's no benefit to pruning every single time we load the fixture tree. Thoughts?\n\nWebpack sometimes fails on this, but HMR can be triggered by removing files as well, not just adding/changing. So in theory the fixture list can reduce while browsing the playground (updated via componentWillReceiveProps). That said, I get your point that pruning is the least of our concerns and could be just as well done once a month. I suggested we do it in both places because I thought it makes the code more modular with no extra cost. So my suggestion is to do whatever makes more sense from a code readability/maintainability standpoint.\n\nI view these as two separate things. If we ever remove the default prop, we still want to know that this is a required prop. So personally I think it's better coding hygiene to leave the required in there.\n\nGood point. I'll do the same in the future.\n\nExisting Tests: I wasn't able to get your suggestion regarding waiting for the localForage.getItem promise to return to work (react-cosmos/react-cosmos/compare/treeview-persist-2?expand=1#diff-14e33cea23c7b5a14667d77e126875d9R20). Please let me know if you can take a look, thanks.\n\nI'll check out the branch locally and report back what I find.\n\nNew Tests: To test the persistence.js file, do you think I should just mock out getSavedExpansionState and setSavedExpansionState? How would I test the actual FixtureList component, given the persistence relies on localForage/indexedDB?\n\nBy mocking localForage. \n- The mock itself already exists\n- Here's an example of activating the mock\n- Here's an example of setting the mock value\nDoes this answer your question?\n\nprojectKey. If we don't have a projectKey working before this gets merged in, then we should probably disable the pruning code for now, as otherwise everytime we switch projects, we'll lose all our saved folder expansion state. As someone who has multiple react-cosmos projects, this will be frustrating.\n\nAssume projectKey exists. I will add it quickly after you finish this and only publish next version after both are merged.. Found the issue with the test. It didn't have anything to do with async promises, but with the new Enzyme 3 API. We need to call wrapper.update after each action which changes the render tree (in this case the action is the setState call from componentDidMount which occurs while we wait \"afterOngoingPromises\"). This is how the passing beforeEach block looks like:\njs\nbeforeEach(async () => {\n  wrapper = mount(<Loader fixture={populatedFixture} />);\n  await afterOngoingPromises();\n  wrapper.update();\n});\nThis can be done without async/await...\njs\nbeforeEach(() => {\n  wrapper = mount(<Loader fixture={populatedFixture} />);\n  return afterOngoingPromises().then(() => {\n    wrapper.update();\n  });\n});\n... but who would want to go back to nesting callbacks? Ugh. \ud83d\ude04. Tests are looking great!\n\nI updated the localForage mock to return null instead of undefined if a key doesn't exist; this matches the library behaviour.\n\nGood idea!\n\nIs there a reason why you didn't mock it (and instead went for an internal method __setItemMocks? (I don't want to waste time trying to write a mock if you already spent some time and realized it wouldn't work for some reason).\n\nI don't think I had any good reason besides blindly applying the __setMocks pattern I've been using for mocking other modules which don't have a setter like localForage does. So unless you encountered any issue with it I say implementing the mock's setItem method to update itemMocks is a good idea. That said, I would keep __setItemMocks for two reasons:\n- Unlike setItem, it resets any existing mock data\n- Not having to update existing tests\nIs this it or did I miss any other outstanding issue?. Another great contribution from @maxsalven! \ud83e\udd18. PS. I predict we'll want to default to nothing expanded as the default state.. Cool!\nDidn't check the code yet, but regarding design: The starred folder is interesting, but makes me wonder if it's some sort of bookmark. I like the lighter/more transparent version because the folder matches the text color, which makes perfect sense. So I'd would go with the 2nd version without the star.. No other comments aside from the icon design. Code looks great!. Works & looks great! \ud83d\udc4c. @Timer what a wonderful surprise! \ud83d\ude0d\nI have a few questions:\n- The runtime error overlay doesn't auto close after a HMR update that fixes the problem. Is this the expected behavior? It probably is because of the X close button and it makes sense for runtime errors to stick because they might have corrupted something global, but I wanted to make sure this is how it works in CRA as well. Y/n?\n- CRA's runtime handler seems to render (pun intended) the root componentDidCatch handler I just merged useless. I don't mind of course because this is next level stuff, but I'm curious what's React's vision in general for this. In this case it seems componentDidCatch overlaps 100% with CRA's runtime handler. Is componentDidCatch meant more for graceful error handling in production and CRA will always overlap custom error states in development? cc @gaearon \n- It seems like react-error-overlay publishes ES modules, which is at the moment incompatible with Cosmos' packaging (react-dev-utils seems all CJS which is great). loader-entry is included in the user bundle and because Cosmos is meant to work with a wide range of setups we always publish CJS modules and make no assumptions about the user's loaders. Not sure how to handle this... \ud83e\udd14 It's the only real obstacle in merging this. Ideas welcome!. > It is the expected but not the best behavior.\nIn CRA we force a page reload on next save after a runtime error because of global corrupted state, so we should make that the default behavior here (doesn't do that currently).\nActually I think it's best not to hard reload in this case. The nice thing about Cosmos is that it keeps state outside of the user's render tree, so regardless of what crashes in the user code we can re-render from scratch after a HMR change and still preserve previous state.\nEven if it's Redux state, we create the store from scratch and flush all component instances on every render. It's a different take on hot reloading...\n\n\nWe can dual publish a CJS and ESM version (based on package.json toggle). Can you open an issue on CRA for this please?\n\nDone: https://github.com/facebookincubator/create-react-app/issues/3354\n. > If you'd like, you can open another issue for support for something like dismiss-runtime-error that way it can be automatically closed.\nSounds good, but we can definitely merge without that. \nIf you're interested in finishing the remaining bits, there are four outstanding ESLint errors and 3-4 falling Jest tests\u2014partly due to react-error-overlay ES syntax that Jest doesn't transform and thus understand, so best to tackle tests after facebookincubator/create-react-app#3354 is resolved.\nThanks again for your interest in this!. > I've rebased this so we don't fall behind -- did you want to tackle facebookincubator/create-react-app#3354 or do you want me to take care of it? \ud83d\ude04 No rush.\nI'll take a stab at it \ud83d\udd2a. @Timer is there a reason for using react-error-overlay@2.x (eg. webpack version compatibility)? Because react-error-overlay@3 is already published as a umd module and seems to work just fine out of the box. \nStill it seems like the API changed a bit because I get this warning after upgrading:\n\nindex.js:1783 Warning: startReportingRuntimeErrors doesn\u2019t accept launchEditorEndpoint argument anymore. Use listenToOpenInEditor instead with your own implementation to open errors in editor . I was eager to make the change but this is even better! \nI'll update this PR tonight and see where it puts us. Sorry for the run-around.\n\nExcellent. Let me know if you run into any trouble. Besides the 3 falling tests I have one minor ask: Can you put the CRO logic inside a separate file to keep loader-entry clean? Like ./react-devtools-hook. Thank you @Timer, this is a great improvement in Cosmos' DX!\nQuick question: Is there any difference/advantage in using import * as ErrorOverlay from instead of just import ErrorOverlay from?. @Timer Got it. Thanks again!. @Timer thinking of programmatically closing runtime error overlay in some cases. I noticed there's a dismissRuntimeErrors function but it isn't exported. Do you see any reasons why it shouldn't be called? Otherwise I'd like to submit a PR for exporting it.. @mbohgard if you already have the Babel loaders set up for TS it might work out of the box. Actually, what extension would you give your fixture files, plain .js or .ts / .tsx?. > Right now, for fixtures, it's not too important. Is it possible to use other extensions for fixtures than .js?\nYes. But let me know if you get to that point because the documentation now isn't ideal. We're in the progress of releasing 3.0 btw, so you might want to try react-cosmos-webpack@next.\n\nGET http://localhost:8989/loader/index.html 404 (Not Found)\n\nIt seems like you need to set up HtmlWebpackPlugin:\n\nIf you haven't add html-webpack-plugin to your dev dependencies.\nImport it in your config file: const HtmlWebpackPlugin = require('html-webpack-plugin');\nAdd it to the list of plugins: new HtmlWebpackPlugin()\n\nLet me know if this works.. Great. We're one step closer!\nCosmos <=2 had unintuitive conf for detecting fixtures. This is one the main things v3 fixes. So can you please upgrade to @next tag and see if your components/fixtures show up.\nNotes:\n- In v3 Cosmos detects any fixture file that is under __fixtures__ folder or named as *.fixture.js.\n- In v3 you no longer need to add componentPaths in cosmos.config\n- In v3 fixtures have to include component. Eg.\n```js\nimport Component from './Component.js';\nexport default {\n  component: Component,\n  props: {\n    foo: 'bar'\n  }\n}\n```\nThere's a codemod for upgrading old fixtures to this format, but I don't think you need it since you're just creating your first fixtures.. > All my components are in a package outside of the Cosmos package\nWell then, there's a new option in Cosmos 3 called rootPath. Can you set its value a directory that's parent to your fixture files?\njs\n// cosmos.config.js\nmodule.exports = {\n  rootPath: '../' // Go up as many levels as you need\n}\nWarning: All other relative paths from cosmos.config will be relative to rootPath!\n--\nThis is great because my current task is to write the docs for Cosmos 3 \ud83d\ude05. Awesome! \ud83e\udd18\nI'd do it but I'm already engaged in a few other PRs for now. If you have the time, open a tiny PR updating the following lines to something like:\njs\nconst defaultFileMatch = [\n  '**/__fixture?(s)__/**/*.{js,jsx,ts,tsx}',\n  '**/?(*.)fixture?(s).{js,jsx,ts,tsx}'\n];\nAnd I'll gladly merge it and publish 3.0.0-beta.4with it immediately.\nNo tests are needed because this is just a default value and current tests will ensure nothing's broken.\nEdit: OH, actually you can just set those values in your config under the fileMatch option. But I was kinda hoping we make this the default value to work out of the box for other TS users. Nobody wants to write those strings by hand \ud83d\ude01. \ud83c\udfbc\ud83c\udfb6\ud83d\udc42\ud83d\udc42\nYou're welcome @mbohgard. Let me know if you have any other questions.. > Also if cosmos.config.js is renamed to cosmos.config.ts, it fails to recognise it.\nThe cosmos config is read on the server side and isn't processed by webpack loaders. It needs to be Node compatible, similar to webpack.config.js.\n\nWas this done? I get\n\nNot sure that has anything to do with Cosmos, which relies on the user's webpack and Babel configuration. But if you can provide a reproducing repo I'll gladly inspect it.. Thank you @mbohgard! \nPublished under 3.0.0-beta.4. Please try it out and see if it works without having to define fileMatch in your config.. Approved. Also free for all since neither @alp82 nor me have the time to work on this at the moment.\nJust to add more context, the new default value for fileMatch would look like this:\njs\n[\n  '**/<fixturesDir>/**/*.{js,jsx,ts,tsx}',\n  '**/?(*.)fixture?(s).{js,jsx,ts,tsx}'\n]\n~~Also notable, for this improvement I would change the findFixtureFiles args to receive a complete cosmosConfig object. This way it would have access to the new fixturesDir and any other config option in the future.~~ Already improved on this in a different PR. Good idea. I think keeping them separate is more flexible. So I'm a fan of both fixtureDir and fixtureSuffix options (just realized singular \"fixture\" sounds more natural). Even more accurate might be fixtureFileSuffix.. Proxies are great for this. Here's an ad-hoc example:\n```js\nimport React from 'react';\nconst DEFAULT_PADDING = 50;\nconst PaddingProxy = props => {\n  const { value: NextProxy, next } = props.nextProxy;\n  const { padding = DEFAULT_PADDING } = props.fixture;\nreturn (\n    \n\n\n  );\n};\nexport default PaddingProxy;\n```\nNow, if you've not configured any other proxies so far, create cosmos.proxies.js next to your cosmos.config.js. Inside, put this:\n```js\nimport PaddingProxy from './wherever-you-want-to-put-it';\nexport default [PaddingProxy];\n```\nWorks?. Almost nothing changed in v3 regarding proxies, so you can check out the Proxies docs.\nThere's no way to select proxies per fixture, but proxies are usually activated via fixtures.\nI don't know if you realized, but in the proxy I put together the padding is read from fixture.padding, so you can set a different padding per fixture. Now if you wanted to make it opt-in, you could change the proxy to something like this:\n```js\nconst PaddingProxy = props => {\n  const { value: NextProxy, next } = props.nextProxy;\n  const { padded, padding = DEFAULT_PADDING } = props.fixture;\n// Proxy isn't activated unless fixture.padded is true\n  if (!padded) {\n    return ;\n  }\nreturn (\n    \n\n\n  );\n};\n```\nThen fixtures could look like this:\njs\n// Not padded\n{\n  props: {}\n}\njs\n// Padded with default 50px padding\n{\n  padded: true,\n  props: {}\n}\njs\n// Padded with custom 100px padding\n{\n  padded: true,\n  padding: 100,\n  props: {}\n}. Haha, v3 includes Flow types. Maybe we can include TS types on the side for Proxy props specifically.. Cool! Pretty similar. \nBut fixtures can contain more than strings, so maybe fixture: { [s: string]: any }? BTW, I know zero TS.\nAlso, might be a silly question, but how does React export both Flow & TS types. More specifically, where does React.ComponentType come from? \ud83e\udd14. Good to know. Did a bit of digging to understand how it works on the Flow side. It seems React types are  included in Flow itself and bundled in the standard Flow binary. Weird.\n\n. I think I found the fix for this. It's twopart:\n\nMade sure components with same name never overlap again (#497). Please install react-cosmos-webpack@3.0.0-beta.7 and see if all your fixtures show up without setting a custom displayName on each\nHoCs have the responsibility to extend a component's name. Here is an example from React Router. My suggestion is to do this:\n\n```diff\nconst FloatingLabelHOC = Field => {\n  class FloatingLabel extends Component {\n    static propTypes = {\n      name: PropTypes.string.isRequired,\n      label: PropTypes.string.isRequired,\n      value: PropTypes.string,\n    };\nstatic defaultProps = {\n  value: '',\n};\n\ncomponentWillMount() {\n  this.setState({\n    value: get(this, 'props.value', ''),\n  });\n}\n\nrender() {\n  const { name, label } = this.props;\n  const { value } = this.state;\n\n  return (\n    <div>\n      <Field\n        {...{\n          name,\n          value,\n          label,\n        }}\n      />\n      {label && (\n        <Label value={ value}>\n          <LabelText>{label}</LabelText>\n        </Label>\n      )}\n    </div>\n  );\n}\n\n}\n+ FloatingLabel.displayName = FloatingLabel(${Field.displayName || Field.name})\n  return FloatingLabel;\n};\n```\n... and you'll never have to set displayName by hand after that.\nDoes it work?. > Kinda, but not really:\nI might be subjective but this seems correct. Ugly, but correct. It tells you that the Input is wrapped in glamorous and FloatingLabel HoCs, which helps you understand its API (props, state, etc) better.\nI see a number of possible avenues from here:\n- Use the HoC2(HoC1(Component)) convention to render prettier component names. Component name could be big while HoC names on a smaller second line, or shown when hovering in a tooltip. But, the new version needs more mileage before investing into something so particular.\n- You can always override the name via displayName.\n- It's annoying to rename all components if you use many HoCs and don't like how the composed names look. There is another possibility. From this comment you can see we already gather component names statically. Those names are simpler, they are the names we give component imports in our fixtures. We could add a Cosmos config to rely on those instead of run time names. Eg. preferRuntimeComponentNames which I'd still keep true by default but you might prefer to set to false. Note: Component names gathered statically are even more experimental and can be confusing. If you do import MyComponent from './ActualComponentName.jsx' it will show up as MyComponent in the UI.\nWdyt?. > I would love to see the preferRuntimeComponentNames option implemented!\nIf it's not too much to ask, can you please open a new issue for this feature request specifically and close this one? Feel free to reference this issue and use our conversation is quotes in the description. Thanks!. It surprises me that this still happens with 3.x. I remember this only happened before the major fixture factor. To make it easier for me to debug this please run this (new) command and let me know what the output is:\n```bash\nnode_modules/.bin/print-fixture-files\nIf on a Mac\nnode_modules/.bin/print-fixture-files | pbcopy\n```\nOptionally, for your privacy:\n- Replace the root path with a foo path\n- Send the output to me via IM\nNote: print-fixture-files is only available since beta.7 (see this comment). I think it's from the import path. Two questions:\n- Are the nested and combined fixtures the only ones where you use import path aliases? (eg. ui/grid/Grid)\n- Are you using babel-plugin-module-resolver?\n. > all my components use that form of importing\nInteresting. I wonder how the other paths are detected...\nCan you please show me an example of a fixture that does have its file path properly detected, so I can compared it with the ones that don't. Eg. /my-project/ui/grid/GridItem/__cosmox__/simple.js. @alp82 please try react-cosmos@3.0.0-beta.10. @alp82 Sorry about that! I think I've fixed it in #509. Please try react-cosmos@3.0.0-beta.11. Cosmos determines the common dir between all components and removes it to keep the tree clean. \nDo you have any fixture in any other sibling of ui? As soon as you do, ui along with the sibling dir with components will show up.\nI think it's redundant to show a single dir. It's the same as Show all / Hide all (or Expand/Collapse), a feature I'd like to add in the future. \nThere are a number of ways Cosmos could be configured to achieve this:\n- A showParentDir bool option\n- A transformNamespace func option which could be useful in other situations as well. In this case it would be\n  transformNamespace: ns =>  ns ? `ui/${ns}` : 'ui'\nBut I personally don't find this very useful so unless someone offers to help I don't think it will be implemented very soon.. > I suspect this is related to #495.\nI agree. Unless a different bug is discovered, we can expect the tree to have the proper depth once the nesting of each fixture is properly determined. So I think we can close this for now and focus on #495. Sorry @jlc467 for summoning you by mistake! :D\nYou're free to review of course but it's minor tweaking of 3.0 functionality.. TODO:\n- [x] Add \"Loading...\" screen while bundling (Everyday I'm bundling, ev-everyday I'm bundling \ud83c\udfb6). Thanks for pointing it out, that was a typo! \ud83d\ude0a. This is tricky. Your solution is fair, but it looks like using webpack-dev-server is the best long term strategy. The problem is there is at least one large webpack 1 codebase depending on Cosmos and WDS depends on webpack 2.2+. While it's inevitable to move on, I would preserve this compatibility for Cosmos 3.0. Does CRA support a subset of WDS proxy options via package.json? Maybe we can mirror that for now.. > Would you be ok with moving forward with this PR and use a config setting for the really simple \"common use case\" whilst we await the move to webpack-dev-server?\nYes. Agreed! \ud83d\udc4d\nWe'll also add an excerpt of this discussion in the option's docs for full transparency.. Flawless!. \ud83d\udc4d . @dan-weaver please try react-cosmos@3.0.0-beta.10. Thanks!\nI will publish a new beta later today.. I think a more accurate name would be \"Option to prefer static vs dynamic component names\". We already have both data btw, but we don't have a way to switch between them and always prefer using dynamic component names.\nWhile I'm perfectly OK with having this option available, I think there's a lot more potential in formatting the dynamic name, because it's rich in information.\nEg. connect(glamorous(withRouter(Menu))) is an ugly name, but it tells a lot. If we become aware of the HoC(x) convention we can extract the component name and list of wrapping higher order components. Once we do this, we can show the HoCs with smaller font, under the component, or hidden in an tooltip. Better yet, we can build a list of known HoCs and map stuff like \"withRouter\" to \"React Router\" and \"connect\" to \"Redux\". I think it's important to know the HoCs that the loaded components is wrapped by. Here's an ugly sketch about it:\n\n. FYI Renamed this issue towards using the existing names but extracting the HoC names for cleaner names with meta data. I think the initial idea to optionally use the statically extracted component names is inferior and shouldn't be pursued for now. Prettifying the dynamic names provides more value and doesn't introduce another config users have to think about.\nFree for all.. Hey, this is done! \ud83c\udf8a . Thanks @TagoreS!. @xavcz I'm happy you say that because I wasn't sure if that idea is going to resonate with others. It took me a lot to realize something that seems obvious in retrospect.\nI don't have experience with Observables but I see what you mean. Not sure how they could be integrated at the Cosmos level, but they can definitely be used to complement this feature. until is a different topic, but a helper I think will reshape how I write a lot of async component tests. I've been using await afterOngoingPromises to wait for mocked async actions to resolve, but found that sometimes a component has a chain of async actions which take more than one micro loops (re JS's event loop), so I wouldn't know when the component is ready for assertions. This is where until comes in, a concept I borrowed from E2E testing. You give it a callback that returns a Boolean and it returns a promise that resolves the first time the callback response is true. It works great with await to \"pause\" execution. It's very agnostic. You might seem the source here https://github.com/skidding/async-until/blob/master/index.js. Coupled with the fact that onInit receives the component instance, you can wait until the component is in an actual state, which is a 100% guarantee you can start asserting on it. If you only got a confirmation that an API request completed it might still take an extra async step for that to reflect into the component's state (especially given how setState is now async and all), so we couldn't confidently follow up with assertions after a data event we subscribed to.. @maxsalven Sure. The philosophy was meant to provide more context but is probably more confusing than helpful at this point. Here's a concrete example.\nGoing back to the Playground fixture.\n```js\nexport default {\n  component: ComponentPlayground,\nprops: {\n    / not important /\n  },\nstate: {\n    loaderStatus: READY,\n    fixtures: {\n      ComponentA: ['foo', 'bar'],\n      ComponentB: ['baz', 'qux']\n    }\n  },\nfetch: [\n    {\n      matcher: 'end:/mock/loader/index.html',\n      response: 200\n    }\n  ]\n};\n```\nFlow: The playground does a fetch call to see if Loader html URL is responding positively. If it does, Playground renders the iframe and then expects for a message from inside the iframe.\nThe problem here is that the state needs to be applied LATER, after the component does (and responds to) the fetch call. Our \"ready\" state will be overridden as soon as the fetch call ends and Playground goes into an intermediary \"ok\" state. This ugly hack was added to make this fixture work.\nA first iteration with onInit would look like this:\n```js\nexport default {\n  component: ComponentPlayground,\nprops: {\n    / not important /\n  },\nfetch: [\n    {\n      matcher: 'end:/mock/loader/index.html',\n      response: 200\n    }\n  ],\nasync onInit(component) {\n    // fetch and setState is async, so we have to wait until loaderStatus has been updated\n    await until(() => component.state.loaderStatus === OK);\ncomponent.setState({\n  loaderStatus: READY,\n  fixtures: {\n    ComponentA: ['foo', 'bar'],\n    ComponentB: ['baz', 'qux']\n  }\n});\n\n}\n};\n```\nThis is better, but still not ideal. Instead of mocking the \"ready\" state, it's better to fake the postMessage event from the iframe and let the component react and generate its state. This provides more code coverage.\n```js\nexport default {\n  component: ComponentPlayground,\nprops: {\n    / not important /\n  },\nfetch: [\n    {\n      matcher: 'end:/mock/loader/index.html',\n      response: 200\n    }\n  ],\nasync onInit(component) {\n    // fetch and setState is async, so we have to wait until loaderStatus has been updated\n    await until(() => component.state.loaderStatus === OK);\nwindow.postMessage(\n  {\n    type: 'loaderReady',\n    fixtures: {\n      ComponentA: ['foo', 'bar'],\n      ComponentB: ['baz', 'qux']\n    }\n  },\n  '*'\n);\n\n}\n};\n```\nDoes this help?\nUpdate: I'm not happy with onInit naming. Suggestions welcome. It's basically a callback that allows imperative setup beyond the functional mocks, because sometimes order matters.. Update. I've completed the work for this in #528\nHere's the gist:\n- Renamed fixture.onInit to fixture.ref to make it more self explanatory and to emphasize it's a class component feature.\n- This feature allowed removing a hack in the Playground and shortened the Playground test files by aprox. 500 LOC, which I believe makes them a lot easier to follow and extend.\n- This paves the way for the createContext test API. It's already included in this PR but not as a public API.\n- Added a brief README section on this:\n\nStill, I'm aware this is too low level to understand if you're not as intimate with Cosmos as I am, so I don't expect any review at this point (tho any feedback is highly appreciated). The subsequent PR related to this will be more intuitive.. > Thanks, I think I actually wanted this because I often have a 'base' object in its own file (within fixtures) that all my actual fixtures extend, and often don't actually want this one to show up in the playground.\nWouldn't it be better for you to add /\\/base\\.js$/ to config.exclude? In time we might standardize this and provide some default exclude pattern.. > or automatically showing a helpful error message 'we notice your component relies on redux but you don't have the redux proxy installed'\nDefinitely a different PR, but this sounds amazing \u2764\ufe0f\n\nif one wanted to do something intelligent with e.g matching HOC names to proxies\n\nThis should be fairly easy to add from the get go, by maintaining a small dictionary. Eg.\nconst knownHocNames = {\n  connect: 'Redux',\n  withRouter: 'Router',\n};\nconst displayName = knownHocNames[name] || name;\nUnless it has some downsides I'm not aware of. Like maybe there are other libs that decorate the component with \"connect\".\n\nPR looks great. Comments:\n- I think the HoC names would look better with some transparancy rather than being gray (similar to fixture names).\n- No sure about this one, but how about reversing the HoCs order? \ud83e\udd14 The component name is on the left, so it starts from the \"inside\".\n- The ellipsis dots look a bit ugly \nI don't know if this can be changed, but I imagine most components will have \"...\" in a big app with many HoCs.\n . > Personally I strongly disagree with this. Given the styling, I mentally read it as \"The component is Component A, and the HOCs are withRouter, connect\". Having the HOCs in reverse would be very confusing to me personally. My brain may be backwards from the majority however!\n\ud83d\udc4d\n\nThe closest I could get with simple CSS was to have the ellipsis be styled with the HOC style if a HOC exists.\n\nNice. I wanted to suggest this but thought it's too crazy for something so small. Can't think of anything simpler, either.\n\nThe first and the third are correct. The second is 'wrong', as we are using the HOC ellipsis style when the ellipsis belongs to the component name.\n\nIt's good enough. If we want to rationalize it and make it \"a feature not a bug\" we can say the light \"...\" indicates that the component has HoC.\nUpdate: You reached the same conclusion :). > lint-staged only processes .js files\nThanks, will fix.. > @skidding if you're happy with the code as it is, then I'll put some tests together.\nYes. Looking good!. @maxsalven good stuff! I'll make for a neat 3.1 release. . @bugzpodder did you create a Cosmos config file or are running with the default config? Also, are you using any framework like CRA, Next, etc?. > ok fixed cosmos-config with the correct root element\nHappy to hear! \nBut I'm a bit curious about the initial error. If you don't specify a containerQuerySelector Cosmos should automatically create a new div and put everything there.\nSo maybe you had already set containerQuerySelector to an invalid value? Thanks!. Right, so you're using Create React App. Thanks for taking the time to explain and enjoy Cosmos! \u270c\ufe0f. Thanks @jozsi!. @xavcz thanks!. @bugzpodder this is the expected behavior. Proxies are optional and thus are only installed when/where needed. Do you think the docs are misleading? Feel free to suggest improvements.. OK, here we go. This is a big one so I'll try to be concise while also not missing something important. A compact part of this will get into the README, so please help me communicate this better if I don't get it right in the first try (most likely).\nQuick recap on the problem this is trying to solve\nFixtures already provide a way to reproduce a component's state thru state injection and mocking via proxies. This is useful in the Playground UI. So far so good. But when writing headless tests for components (eg. via Jest) the hardest part is the setup\u2014setting up the component's state. So why not reuse the fixtures here as well? Great. We've already been doing that by using the Loader component inside tests, but this solution came short in many ways. Most notably:\n- Proxies had to be imported in each test file\n- It didn't play so well with Enzyme, because both React's ref callback (which we sometimes use) and rendering Cosmos fixtures in general is inherently async, so we had to get our hands dirty with Promises regardless of how simple the test was\nBesides solving these two problems, writing a dedicated test API opened up the possibility for various other helpers I've found useful to reuse while writing component tests. A large part of these came from my experience consulting for @tkjone's company, where I'm grateful to have been able to test this solution on a large number of use cases). Additionally, all component tests from the Cosmos monorepo have been upgraded to the API I'm about to present, so you can explore the test-api branch to see over 100 working examples.\nAlmost there... just one more thing\nBefore we get into meat of it, I also want to mention the underlying refactor behind this branch. I used this opportunity to shift some parts from Cosmos' architecture more towards the long term goal of making Cosmos a general purpose UI dev tool.\nWhy is this relevant? The new test API means we now have two ways for rendering fixtures, so I wanted to make sure that the Playground and the Test API share as much code as possible. So I created a generic createContext abstraction that interfaces with a pluggable renderer which currently has two implementations (ReactDOM and Enzyme), but is on track to go beyond React or even the DOM. Long term vision aside, this also makes the new test API easy to use for people who don't use and don't want to use Enzyme.\nAlright, what is this thing?\nLet's say for now that we're using Enzyme and Jest, though neither is required. Here's is how a component test looks like:\n```js\nimport createContext from 'react-cosmos-test/enzyme';\nimport Button from './Button';\nimport fixture from './fixture';\nconst { mount, getWrapper } = createContext({ fixture });\nbeforeEach(mount);\ntest('renders hello', () => {\n  expect(getWrapper().text()).toContain('Hello World');\n});\n```\nLet's see what we have here:\n- createContext Receives the fixture (and other possible params irrelevant for now) and returns a \"context\"\u2014a set of functions that enable us to mount the fixture and retrieve information from it later. Calling it has not side effects, so it can be called at any time and in any function scope to suit our needs.\n- mount Async function that needs to be called for component to render. This is not done implicitly because usually we want to render from scratch before every test. In special cases you can call this once for more tests.\n- getWrapper Many things to mention here:\n  - It prevents us from having to hoist the wrapper var and populate it whenever we call mount.\n  - It has the extra benefit of automatically updating the wrapper before returning it, solving an annoying issue with Enzyme v3.\n  - It returns the component wrapper, not the wrapper of the first proxy. Essentially, it does wrapper.find(fixture.component).\n  - It accepts an optional selector argument (eg. getWrapper('.btn') or getWrapper(ChildComponent))\nLet's look at a more complex example. I'll put the fixture inline to get a better picture.\n```js\nimport async from 'async-until';\nimport createContext from 'react-cosmos-test/enzyme';\nimport Form from './Form';\nconst fixture = {\n  component: Form,\nfetch: [{\n    matcher: '/form-template',\n    response: {\n      formTitle: 'Dynamic Form'\n      // ...\n    }\n  }]\n};\nconst { mount, getWrapper } = createContext({ fixture });\nbeforeEach(async () => {\n  await mount();\n// We know the component will query /form-template and will\n  // render a form with response.formTitle, but due to async\n  // methods (like fetch or redux-thunk actions) it might take\n  // a couple of event loops for the component to get in the\n  // state we're interested in\n  await until(() => getWrapper().text().includes('Dynamic Form'))\n// Interested in testing stuff that happens after form is submitted\n  getWrapper('form').simulate('submit')\n});\ntest('something happened on submit', () => {\n  // ...\n});\n```\nuntil is an additional utility I find useful in this combination, but is not part of the Cosmos test API. Instead of running some assertions after one or more setImmediate or setTimeout(fn, 0) calls, we give up expectations regarding synchronicity and just focus on the order of events.\nHere are a bunch of other context methods:\n```js\nimport createContext from 'react-cosmos-test/enzyme';\nimport Form from './Form';\nimport fixture from './fixture';\nconst { mount, unmount, getWrapper, getRef, get } = createContext({ fixture });\nbeforeEach(mount);\ntest('check something on component instance', () => {\n  expect(getRef().something).to(/ ... /);\n});\ntest('check something in component state', () => {\n  expect(getRef().state.something).to(/ ... /);\n  // or\n  expect(get('state').something).to(/ ... /);\n});\ntest('something happened in Redux state', () => {\n  expect(get('reduxState').something).to(/ ... /);\n});\ntest('something happened in URL location', () => {\n  expect(get('url')).to(/ ... /);\n});\ntest('something happens after un-mounting', () => {\n  unmount();\n  // expect...\n});\n```\nIn case it's not obvious, get returns any fixture field, (which proxies keep up to date as component changes state).\nAuto mocking prop callbacks in Jest\nWhen using react-cosmos-test inside the Jest env, it automatically decorates prop callbacks. Eg:\n```js\nimport createContext from 'react-cosmos-test/enzyme';\nimport Button from './Button';\nconst fixture = {\n  component: Button,\n  props: {\n    label: 'Click me, yo!',\n    onClick: () => console.log('Alright, I was clicked.')\n  }\n};\nconst { mount, getWrapper, get } = createContext({ fixture });\nbeforeEach(mount);\ntest('renders hello', () => {\n  getWrapper('button').simulate('click');\n// props.onClick is automatically wrapped in jest.fn()!\n  expect(get('props').onClick).toHaveBeenCalled();\n});\n```\nTesting fixtures without Enzyme\nHere's an example using react-test-renderer instead of Enzyme:\n```js\nimport { create as renderer } from 'react-test-renderer';\nimport createContext from 'react-cosmos-test/generic';\nimport fixture from './fixture';\nconst { mount, getWrapper } = createContext({ renderer, fixture });\nbeforeEach(mount);\ntest('renders hello', () => {\n  // Careful, this is no longer an Enzyme wrapper, but a react-test-renderer wrapper\n  expect(getWrapper().toJSON()).toMatchSnapshot();\n});\n```\nIn short, the \"generic\" createContext function accepts a renderer option which is a function that, given a React element, has to return a wrapper with an unmount method.\nCan I try this?\nYes you can! Install react-cosmos-test@next.\n\nYou might have to also upgrade existing Cosmos packages to next release.\n\nFeedback, please!\nThank you for taking the time to read this and I appreciate any feedback. Special thanks to @tkjone and @xavcz who already contributed a lot to this.\nOther people I believe this is of interest to: @jozsi @maxsalven @dan-weaver @alp82 @flaviusone @NiGhTTraX \n. > Looks great. Is there a typo in section \"Auto mocking prop callbacks in Jest\"?\nYou're right. I corrected the typo. Thanks.\n\ncreateContext(fixture) is cool. Not sure about the name \"context\" but got no better alternative right now.\n\nRight. \"Context\" is one of those words, but I feel like in this case is really makes sense \u2014 as everyone else in this situation probably \ud83d\ude04. Open to suggestions.\n\nmount and unmount are obvious and easy to understand. Still one question though: What if i want to mount with slight modifications to any fixture field? For example some change in the state, url or prop. Am I required to have a fixture for each variation or can i use a fixture and manipulate it when mounting it?\n\nYou can run createContext more than once in the same test file. Eg. once in every describe block. And you can extend the fixture like this:\njs\nconst { mount /* ... */ } = createContext({\n  fixture: {\n    ...myFixture,\n    url: '/different'\n  }\n});\nYou can use something like lodash.merge for overriding more nested fixture attributes.\n\ngetWrapper(): is the name maybe a bit misleading? In fact we get the component inside all the HOC wrappers. Isn't getComponent() more obvious? Not sure though.\n\nInteresting. Wrapper doesn't refer to component wrapper (eg. an outer \\<div>), but rather to an API wrapper that adds methods on top of the component instance. Eg. .find, .unmount, etc. It's heavily inspired by how Enzyme works, but since this API is meant to be generic I'm open to other ideas as well.\n\nget(): i only understood what it does after your explanation \"get returns any fixture field\". I get that short function names are desired, but wouldn't getField() or even getFixtureField() be more understandable?\n\nI agree, \"get\" is misleading. The reason why I'm leaning towards something so short is that tests get very repetitive, and after you write \"getFixtureField\" the 199th time you might wish it was called \"get\". But maybe we could document the verbose one while also exposing a shorter alias. FYI in previous iterations I used specific getters for specific fixture fields. Eg. getUrl(), getReduxState(). I like these, but they are coupled with Proxies, so I don't know if it's a good idea to expose these methods by default. Curious what other people thing about this as well!. OK, looking to make this official. I wrote this documentation piece and would appreciate your feedback before incorporating it into the README.\nDisclaimer: This is meant to be an accurate representation of what the API does, without dwelling much on the motivation behind this and affiliated techniques. I plan to write a Medium article to expand more on that. But in the meantime I'd like to merge this (if everything works as expected) because it contains a rich diff and want to unblock future development.\nOK, here it goes. Let me know what you think!\n\nHeadless testing\n\nAdd react-cosmos-test to your dev dependencies for this API.\n\nBesides showing up in the Playground UI, fixtures can also be used independently with the createContext API.\nUsing Enzyme\nThe test API exposes an entry point specifically designed for Enzyme.\n```js\nimport createContext from 'react-cosmos-test/enzyme';\nimport fixture from './fixture';\nconst { mount, getWrapper } = createContext({ fixture });\nbeforeEach(mount);\ntest('renders hello', () => {\n  expect(getWrapper().text()).toContain('Hello World');\n});\n```\nBut this is not the only way. As we'll see below, createContext can also be used with a custom renderer.\nUsing a custom renderer\nHere's how to render a fixture with good ol' react-test-renderer.\n```js\nimport { create as renderer } from 'react-test-renderer';\nimport createContext from 'react-cosmos-test/generic';\nimport fixture from './fixture';\nconst { mount, getWrapper } = createContext({\n  renderer,\n  fixture\n});\nbeforeEach(mount);\ntest('renders hello', () => {\n  // Careful, this is no longer an Enzyme wrapper, but a react-test-renderer wrapper!\n  expect(getWrapper().toJSON()).toMatchSnapshot();\n});\n```\nCapturing state changes\nThe fixture does more than just defining component input. Like a sticky fly trap, it captures state changes that occur during the component's lifecycle, which we can then inspect. For example:\n\nIf Redux state changes, the latest state can be read via get('reduxState')\nIf Router URL changes, the latest URL can be read via get('url')\n\nInstead of polluting our tests with various store and provider initialization, we let the Proxies take care of it and then collect state changes from the fixture context. Hence the createContext name.\n\nThe following example assumes react-cosmos-router-proxy is configured.\n\n```js\nimport createContext from 'react-cosmos-test/enzyme';\nimport fixture from '../fixtures/logged-in';\nconst { mount, getWrapper, get } = createContext({ fixture });\nbeforeEach(mount);\ntest('redirects to home page after signing out', () => {\n  getWrapper('.logout-btn').simulate('click');\nexpect(get('url')).toBe('/');\n});\n```\ncreateContext API\nThe createContext API makes use of already configured proxies, which can be included in more ways.\n```js\n// Detect proxies automatically by reading cosmos config from cwd\n// or via --config CLI arg\nconst { mount } = createContext({ fixture });\n// Or point to a custom config path\nconst { mount } = createContext({\n  fixture,\n  cosmosConfigPath: '/path/to/my/special/config';\n});\n// Or pass proxies directly\nconst { mount } = createContext({ proxies, fixture });\n```\nContext methods\n\nasync mount Mounts component via renderer (usually called in beforeEach)\nunmount Calls unmount method of wrapper returned by renderer\ngetWrapper Returns wrapper returned by renderer\ngetRef Get component ref (exclusively for Class components)\ngetField (or get for brevity) Returns updated fixture field\n. @alp82 corrected, thanks! \n\nLet me know if you have any other ideas. I know the name createContext raises eyebrows because \"context\" is a generic term and thus considered bad practice. @maxsalven suggested createMockedComponent, and while I'm not particularly a fan because it sounds like we're returning a decorated component (when in fact we're returning a set of wrapper functions around the component and fixture data). But I do appreciate the attempt to make it more concrete, so I welcome any other thoughts on this.. Also added an example in the \"Capturing state changes\" section.. > createTestWrapper\n\ud83e\udd14\n\nIs wrapper more suggestive than context? Honest question, this is a learning experience for me...\nIs createTestContext better than createContext?\n\n\ncreateComponentApi\n\nThis is interesting because createContext is actually a lower level abstraction in Cosmos. It is not only used in react-cosmos-test, but also in react-cosmos-loader, where the renderer is effectively react-dom. And the vision is to make eventually extend the renderer interface to support other rendering engines besides React.\nOther variations:\n- createComponentWrapper\n- createComponentContext\nAnd maybe it would be useful to prefix each entry point separately:\n- createComponentContext for the lowest level method (not of public interest atm)\n- createTestContext for react-cosmos-test/generic\n- createEnzymeContext for react-cosmos-test/enzyme\nAlternatively:\n- createComponentWrapper\n- createTestWrapper\n- createEnzymeWrapper\nThe distinction ought to also make the examples and codebase easier to follow.. > createTestWrapper feels like a parent implementation of createEnzymeWrapper, but both are on the same level\nNot quite. The Enzyme implementation calls the generic one, so createTestWrapper is a parent, which is why you have to pass the renderer yourself.\nYou're right about wrapper.getWrapper.\nSo to recap one small variation from the current naming would be:\n```js\n// You'll only use this if you work with Cosmos internals\n// - Most logic is here, yet renderer-agnostic\n// - Works in any environment (eg browser), no Node deps\nimport { createComponentContext } from 'react-cosmos-loader';\n// You'll use this with react-test-renderer or to build a wrapper for an Enzyme-competitor\n// - Expected to be called in Node env, uses modules like fs or path\n// - Looks for cosmos config and tries to automatically include proxies\n// - Automatically wraps prop callbacks in jest.fn() when used in Jest env\nimport createTestContext for react-cosmos-test/generic;\n// You'll use this with Enzyme\n// - Includes Enzyme renderer\n// - Returns inner wrapper of fixture component instead of root wrapper of first proxy\n// - getWrapper can receive a selector as arg (eg. getWrapper('.btn'))\nimport createEnzymeContext for react-cosmos-test/enzyme;\n```\nThey all build on each other, from bottom to top.. I actually realized that createEnzymeContext was a bad idea. It's not an Enzyme context, it's the same Cosmos context in all cases, Enzyme is just the type of the returned wrapper. So anyway, I settled on createTestContext for now because it does some test-oriented heuristics and it's part of the test API. But, it the end we're talking about the default export which we can always rename later without breaking the API. It's just a matter of how we present examples, it can be named anything.\nDid the following:\n- [x] Added the README section\n- [x] Added getField alias to get\n- [x] Updated examples to use createTestContext\n- [x] Published latest to 3.1.0-3 (next dist)\nWill merge later today and release official 3.1. Thanks everyone!. > I'd like to not have to manually specify a special config path each time, but rather just 'all tests use this proxy config'\nOption 1: Create a thin wrapper where you pass the customConfigPath or import proxies and pass them directly via proxies. Drawback: Imports to this wrapper will be relative instead of react-cosmos-test/*. If you use aliases it's not a problem.\nOption 2: You could run the tests with --config /path/to/other.cosmos.config.js. Drawback: Maybe --config conflicts with Jest? I'd be happy to accept a PR where --cosmos-config is also supported as a CLI arg.. FYI, I wrote a post about the idea behind / into to the test API. You can read the draft and provide feedback here: https://medium.com/@skidding/testing-react-components-30516bc6a1b3\nHint: If you leave any comments using Medium your name will appear under credits. Thanks!. > react-error-overlay is imported in react-cosmos-loader but is in the dependency list of react-cosmos - should it be moved to react-cosmos-shared?\nI think the cleanest way would be to keep react-error-overlay as a react-cosmos dependency, and to pass the dismissRuntimeErrors function as a prop to RemoteLoader. Here and then here.\n\npreferably react-cosmos-loader shouldn't even know about react-error-overlay - how to tackle this?\n\nI agree, see above.\n\ntests?\n\n\nIn the RemoteLoader, you can add a test here. Basically you add a new prop that is the dismissErrorOverlay callback (eg. dismissErrorOverlayMock = jest.fn()) in the setup part and then expect(dismissErrorOverlayMock).toHaveBeenCalled()\nIn react-cosmos package it's even easier. Like this, but you check that the prop value is equal to the dismissRuntimeErrors, which you import normally from react-error-overlay in the test file.. Looks great. \n\nUnorthodox idea: You can replace the REO import with a dummy function in react-cosmos/src/client/mount.js and mark the test as test.skip so we can merge as is. I say this because I massacred RemoteLoader in #534 and it's best for me to adapt your code than to completely invalidate this PR if I complete my work before REO 3.1 is published. If you want to be more dramatic you can put a console.log in that dummy function saying that we're waiting for https://github.com/facebookincubator/create-react-app/pull/3414 to be published \ud83d\ude05. But no rush, it will likely take me a few more days to get there.. Looks good. \n\nInterestingly, some tests (unrelated to this PR) don't pass neither on my machine, nor Travis.\n\nI was confused at first as well, but those tests are related to this PR. You're not passing dismissRuntimeErrors to RemoteLoader in some of its test files. The confusing part is that it times out instead of showing the runtime errors. This is because it crashes inside a beforeEach Promise, which apparently doesn't do anything on the reject path, except to stall the test indefinitely. Sucks, but good to know.\nSolution: Either add an empty function as the default value for dismissRuntimeErrors in RemoteLoader, or pass a mock in every test file.. @jozsi congrats, you have just shipped a future feature! \ud83d\ude04. Thanks @bugzpodder!. This is great! \ud83d\ude0d\nI'll only answer the burning questions for now and leave the UX for later.\n\nHowever, I need some help from @skidding please. If you load a fixture that has props, and change the screen size, it crashes. Hopefully it's something obvious, any thoughts?\n\nThe fixtureEdit event expects the entire (serializable parts of) the fixture :). More on the serializable aspect some other time, but this small change should unblock you for now:\n\n\nWould also be great to know how hard it would be to have Cosmos render to multiple iFrames at once for that Sizzy style 'multiple devices at once' layout.\n\nYes. It ties into #383 and we definitely want to start rendering multiple Loader iframes at once. I've been talking with @xavcz about this and about the idea of porting the window.postMessage communication to a websockets connection via the server. But thinking of it I realize that while doing that sounds very cool we shouldn't need to do it to accomplish any of these goals. The websockets communication becomes truly relevant once we start thinking about React Native. So back to this. Yes, we should be able to render multiple iframes, but it's likely we'll need to convert the single channel communication between Playground and Loader to multi channel, by introducing a loaderId in each message. The way I see it, we can have the Loader pick up its ID from iframe url (eg. ?loaderId=5), and then use it in every message it sends to the parent. The Playground should also do some minimal state management to keep tabs of all its active loaders after assigning unique IDs to each frame.. > Is there currently active work on the multiple iFrame system? On a related note, I think as part of the 3.0 release you wanted to write some sort of roadmap?\nAaaand.. it's here https://github.com/react-cosmos/react-cosmos/issues/546. > Other quick question; in the current master, the ComponentPlayground fixtures show a \"Cannot GET /mock/loader/index.html\", is this intentional?\nForgot to answer this. Yes. We might be able to use the real Loader path in the loaded Playground, but then we'd get an infinite loop of Playground in Playground in Playground. \nWhich would actually pretty cool, but I remembered why it isn't possible at the moment. Because Loader communication is global, the Playground in Playground in Playground would send events to the root level Playground and confuse it. Once we have loaderId on Loader messages this will become possible.. > From a personal perspective with regards to my available time to work on this, I'd like to publish small, iterative updates to this feature, rather than try to do everything possible in one massive PR.\nGreat, this is preferable. \ud83d\udc4d\n\nAny requests for a different key name than responsive?\n\nHow about viewport?\nPS. It would be great if this property could also work in Jest/jsdom as well, somehow overriding window.width/height. I've done this once but I'm not sure how reliable it is, especially since the latest jsdom in Jest 22 seems breaking because it doesn't allow us to override stuff like window location anymore. Anyway, no need to worry about this, just something to consider. It's not uncommon to render different stuff based on viewport size so it would be useful to work in headless tests as well.\n\nAny desired UX (not UI) changes to this new menu bar?\n\nMaybe an apply button? It seems weird to change as I type. Eg. if the value is 0 and your selection is on the right you can't hit backspace to write a new number. Weird edge case but it's awkward.\n\nHowever, if the value that we default to actually exists in the responsiveDevices list, then clicking on Custom will break\n\nThe apply button could fix this. A state flag that isn't part of the fixture could show/hide the custom options, but once you click apply the width/height gets applied to the fixture and the corresponding button will be highlighted, be it the custom option or a specific resolution.\n\nOne outstanding issue is that the Responsive toggle button (the phone icon next to the full screen icon) stops working once your fixture has the responsive key in it, as we want to guarantee that the responsive mode is showing if you've got this specified in your fixture. Is this a big deal UX wise?\n\nI think this can be solved. The playground knows the serializable parts of the current fixture (and width/height are just numbers, so they will be received). The partial fixture body is received after fixture is selected and after every fixture update. Via fixtureLoad and fixtureUpdate events respectively. And the body of the current fixture is kept under ComponentPlayground.state.fixtureBody. So the new Responsive toggle can actually be driven by state.fixtureBody.viewport (or whatever we decide to call it). In this case, when you press on the Responsive button what should happen is the fixture is changed to contain a viewport field with an arbitrary resolution, and the user picks up from there.\n\nI think getting these basic issues cleaned up would be a great 'first release' of a responsive mode. @skidding would you agree, or would you want some other features?\n\nI agree. All other features are great but they can be added incrementally. Plus we'll gather more feedback once we start using it so we'll know what to focus on next.. Two details to consider:\n- The checkerboard is meant to reveal the parts the component that don't have a background (transparent). With this new additional frame I would argue that the checkerboard pattern should remain inside the viewport, and not around it. We can put a gray color or whatever looks good around it.\n- In the past I did my best to ensure that the Playground has the same element nesting even when fullscreen or with the fixture editor open, so that the Loader frame DOM element is preserved between transitions and the Loader content never flickers when opening panels or changing fixtures. I noticed that whenever you change a resolution the iframe gets destroyed and added to DOM again. If this is the case, is there a reason for this? . > If we purely have the 'show responsive layout' be a function of the state.fixtureBody.viewport, then when you switch between fixtures, the responsive layout might disappear. Whereas it should be sticky; if I'm in responsive view, switching between fixtures (including those without a specific viewport) should persist whatever responsive layout I've selected.\nThis is a classic multiple source of truth problem. If we want state.fixtureBody.viewport to automatically trigger a responsive view (which I still think is a good idea), we should make it the single source of truth. And if we also want the responsive layout toggle to be sticky, maybe we could apply this logic:\n\nAfter a fixture is selected (on fixtureLoad event), the Playground automatically adds the viewport field on the current fixture if the responsive URL param is true and if the fixture doesn't already have it (via fixtureEdit event). Fixture edits aren't persisted so no harm is done.\n\nBut this raises some questions:\n- Is the opposite flow problematic? User untoggles the responsive view and then clicks a fixture that has the viewport field, which re-enables the responsive view. Note that the \"responsive\" button in the Playground remains untoggled. Possible enhancements: Render a small responsive icon next to fixture name to make this more intuitive.\n- If the responsive mode is on (and sticky between fixtures), what viewport do we apply when we select a new fixture? The responsive=true URL param doesn't tell us the previous viewport width & height, which got lost when we discarded the prev fixture.\n. > Thanks. Does npm allow you to use whatever release tag you like? Maybe we can publish it under @responsive or something too if that's a better option than next.\nYes. Actually, just realized that I can publish without merging the branch. This way there won't be any pressure to finish this in order to merge & depoy other smaller PRs in the meantime. Take a look over this comment to see if it helps, and I will release under responsive afterwards anyway.. @maxsalven OK, I published this branch under the responsive npm tag to get the ball rolling. I skipped the git parts of the Lerna publish cmd (committing, tagging, and pushing git changes) to keep the branch cleaner. You can now run yarn add --dev react-cosmos@responsive in your project and work with this branch. Note that all other packages have also been published under this npm tag, but I don't think they are impacted in any way so you can still use their latest version.. Hi @eltonio450,\nI'm planning a bigger overhaul of the Cosmos UI which will surely include this feature, but I'm not sure if this branch will ever get merged or the code from it cherry picked instead. However, it's part of a bigger plan and the best estimation I can give is some time this summer.. @mpachin You're right. Rendering multiple loaders with different resolutions at the same time is the end game, and I'm confident it will be part of Cosmos in the future.\nIn the meantime, however, we can't rely on the browser dev tools' responsive capabilities because they only apply to the top frame and even in full screen mode Cosmos loads the component inside an iframe.\nWe could fix this by tweaking the current full screen mode. Instead of rendering a chromeless playground with the loader iframe in full screen mode, we can instead render the loader iframe contents directly: http://host:port/_loader.html?component=x&fixture=y. This is going to make the transition between regular and full screen modes less subtle, because the playground will reload completely when we go back, but it will allows us to use the entire set of responsive capabilities of any browser's dev tools. \nWdyt?. > Instead, I personally want to see just one view at a time. Just my personal use case, of course others may flow differently!\nGood point. I guess Sizzy covers another use case, which is a birds eye view post CSS changes, especially useful for small sized presentational components. But I agree this would be a secondary use case and the primary one is likely focused around a single resolution at a time.\n\nI think switching between fixtures might be a bit clunky in this situation? Exit full screen, exit Chrome responsive mode, pick new fixture, enter full screen, enter Chrome responsive mode\n\nCorrect. This would be an escape hatch. \n\n@skidding if I updated this PR to match the latest master branch, would it still be considered for inclusion?\n\nDefinitely.\n\nOccasionally, upon restarting Cosmos and only if you were in the responsive mode already, then it starts up showing your component in a tiny viewport and upside-down.\n\nI remember experiencing a bug where the viewport would become 0x0 until hard refresh. There might be more than one bug to fix, but I'm happy to help debug and maybe more people want to help beta test once the branch is brought up to date.. I think I found the issue with the tiny viewport. Here's a few logical steps that lead me to my conclusion:\n\nThe loader's width/height are calculated on mount (inside updateContainerDimensions)\nThe loader is always mounted, even on the home page (that's how we communicate with the user bundle)\nOn the home page the loader is hidden (thus 0x0 size)\nWhen we open a fixture, we need to re-trigger the viewport calculations because that's when the loader gets visible and gains width/height\nThis is why the responsive viewport works OK when we open a fixture directly but not through home page\n\nHaven't explored in depth, but here's a possible solution: Only send the fixture prop to ResponsiveLoader when a fixture is selected in ComponentPlayground. In ResponsiveLoader, you could check if !prevProps.fixture and props.fixture and call updateContainerDimensions. Note that I'm not familiar with all code from this branch so you might think of a more elegant solution.. Branch is looking good! Here are my thoughts.\nResponsive modes can cause overflow to the entire Cosmos UI:\n\nSolution ideas:\n- More favorable: Take both width and height into account when scaling\n- Less favorable: Overflow the ResponsiveLoader area only\nHere's a weird glitch:\n\nAfter responsive=forceHide is set on a fixture with viewport, moving to another fixture without a viewport shows the responsive chrome for a second and then closes it.\nUI territory:\n- In the future we'll have a scalable menu approach, but for now I say we increase the left nav's min width to 264px to accommodate the new button\n- Maybe put the responsive button in the middle, or first?\nOther notes:\n- The ComponentPlayground fixtures you added need to be updated with props.options.platform: 'web'.\n- No need to worry about tests (unless you feel like writing some), as long as the existing ones pass. As we've talked I want to make the UI pluggable so I'll likely dissect existing pieces to make them core plugins in the process.\n\nThe last thought I have is related to the design of the responsive URL param and the affiliated state. I respect that this has a lot of implication and the cost of changing the implementation might be higher than the benefit. But if you have a few minutes I would like to explore an alternative and at least come up with clear comparison between the approaches.\nHere's a sample of code that makes me uncomfortable:\nhttps://github.com/react-cosmos/react-cosmos/blob/38e8fa76bcc2dbf1e3fef52085e40b351f7f463a/packages/react-cosmos-playground/src/components/ComponentPlayground/index.js#L383-L395\nI get it after reading it a few times, but it's not quick to understand and the mixed boolean/string value definitely adds to the confusion.\nAgain, this might just make the current solution more clear in my head, but I'd like to explore an alternative solution and see if it at least matches the current functionality. Here's the gist:\n\nResponsive state is kept in/derived from URL. It can be viewport=400,300 or anything else that makes more sense.\nSelecting a fixture with viewport defined appends the viewport URL param\nClicking the responsive button either sets this URL param (gets values from current fixture or local storage), or clears it\nThe ResponsiveLoader/Header inputs are uncontrolled, and update the URL on change when the values are valid (eg. not an empty string), as well as updating the fixture and local storage, which it already does\nUntil we have a toggle for scaling, I believe scaling is always-on and can be derived without additional state \n\nHow do you think the current approach compares to the existing one?\nThanks!. @maxsalven Thanks for all the effort! Merged six months later \ud83c\udf89\nI'll make some tweaks starting from latest master and then publish a new pre release.. Hey @qooplmao @mpeyper,\nThanks for pointing this out. Here are my thoughts:\n\nWe can definitely improve the current messaging, but I don't think we'd find a one size fits all so it sounds like the best solution is to allow complete customization of the intro page.\nI'm not a big fan of the \"customize everything\" product philosophy, but I think this would be in line with another initiative I've been thinking about lately: Making the Playground screens markdown-powered. By doing this, I'd later want to somehow import the Github release notes and offer a change log inside the product. I think this would be a nice way to keep users up to date and suggest informed upgrades. \nSo if the Playground screens become markdown, this would be just another markdown page. Maybe we can add an introPage option pointing to a .md path, defaulting to cosmos.intro.md.\n\nWdyt?. Does anyone have experience with markdown libs and is able to recommend any, possibly with good React compatibility?. > Is the only screen we want to allow an override for the WelcomeScreen when \"You're all set!\", or are there other screens to consider?\nThis taps into a bigger question. Right now there are three onboarding screens. The first two are shown when configuration is incomplete and the last one sticks forever. Short term we can override the final onboarding page with the custom introPage. Long term we could add a persistence dimension to onboarding screens, meaning we should be able to click \"Got it\" and not see it again. Then we could stack onboarding screens, release new ones periodically, etc. and have the intro screen show when all onboarding screens are dismissed.\n\nHow much styling should we provide to the rendered elements?\n\nJust like with Markdown in general, styling should be standard. A single style for headers, paragraphs, links, bold, italics, code and that's about it.. > Where do you imagine the persistent state would be stored? If it's in the local storage then users would run into the same issue as my current one, in that they would have to deal with a bunch of a screens that they had no idea about.\nOK so maybe the problem is the current welcome screen is bad for everyone. Nevermind my idea of a more advanced onboarding flow. It's too abstract and doesn't help reach a solution here. Going back to what we have now. These are the existing screens:\n\nLoader index.html is missing (configuration error)\nNo fixtures\n\"You're all set! But did you know...\"\n\nIt seems like 1) is more troubleshooting than onboarding. So really the onboarding is split in two screens: Before and after you have fixtures.  Before \"no fixtures\" screen is probably fine as you'll only see it once and it provides useful instructions. But the \"You're all set!\" screen you see forever. I don't think it ages well nor does it apply to a wide array of people. How about we try to improve it for everyone before we try to make it customizable. We might find a common version that suits us all (at least for now).\nI personally learned to ignore it because I see it daily, but out the top of my head I can object to the following:\n\nYou're all set! But did you know...\n\n\"I'm all set!\" one year later, really?! :P\n\nYou can mock Redux state and build custom middleware using proxies?\n\nThis shows up even if I have proxies.\n\nYou can search for components and fixtures?\nTry it, it's all warm and fuzzy.\n\nUseful info, but it doesn't point to the left nav nor to the s shortcut.\n\nYou can load CSS, polyfills and other files globally?\n\nAlso doesn't check if I do this already. I do.\n\nBe a part of React Cosmos by becoming a contributor.\n\nMaybe this is too much for everyone to see on their dashboard?\n\nI guest we could compact the info on proxies, global imports and contributing into a link to the entire Cosmos documentation.\nSo, what would your ideal welcome page look like?\n. @qooplmao I agree with your vision. I propose this order of steps:\n\nFocus on the user-centric screen first (instructions on how to use the Playground).\nFind a set of instructions that appeal to the general public.\nIf this screen is not satisfactory for anybody involved in this convo we'll continue to consider the option to customize this screen.\nAt first this will replace the WelcomeScreen for both dev and export modes (I don't think we'll miss anything from the existing screen).\nSeparate thread: Replace the WelcomeScreen in the dev mode with a more elaborate system of dismissible hints and updates.\n\nWdyt?. @mpeyper interesting idea. I can see some variation of that work. FYI, I just published a draft of the entire Cosmos Roadmap in #546, which has an item related to this topic:\n\nSeparate install onboarding from usage onboarding (the former should only be shown in dev but not in static export)\n\nI'd like to continue the conversation in this context. I believe it's a good strategy to separate the onboarding flow meant for installing and configuring, versus the onboarding flow for using it. I also agree that the Cosmos export should have a basic onboarding for anybody to follow, also that the Playground should not show a useless messages for the 1000th time and focus on popular use cases instead (eg. quickly selecting fixture). \nBut my question is: Where does the separation between dev server and static export happen? Install onboarding has nothing to do in static export, but other than that is there any point in having separate communication? If it's about dismissable messages, the static export should be able to store to localStorage as well, at least if it's powered by a webserver.. We could use https://github.com/fitzgen/glob-to-regexp to convert config.filePaths globs to a regexp which we could send to require.context. The only issue is that config.filePaths is an array of globs. If we manage to merge the globs or the resulting regular expressions, and glob-to-regexp is reliable, we no longer have to watch for file changes ourselves and this becomes a much easier task.. Fixed by #876. Closing this as it served its purpose.\nTaking a more minimal approach going forward. A basic roadmap and more tasks-specific bullet points are tracked inside TODO.md, a technique I found quite enjoyable lately---keeping my TODOs in my code editor that is.\nFor anyone listening, here's a few things that changed since I composed this issue:\n- React Native is almost here\n- Responsive mode is also near\n- I still envision many new UI features but strategically, I will be creating a plugin system first and then allow easier extension of the UI through 3rd party plugins. I already have a nice API for this in my mind and I'll go for it after completing the RN integration.\n- Another big thing I want to explore is JSX fixtures. It fixes many long-standing issues (eg. mocking local state in connected components), but maybe even more important I think it will make Cosmos overall more appealing.\n- I got rid of the idea of \"goals\". They didn't seem to be providing much value in terms of planning or communication a vision. Maybe we'll bring them back much later. In any case, the one goal of the three that I demoted is \"UniversalPlayground\". I still dream of a Reactless Cosmos many years from now in the future, but realistically I'm still as excited about React as 4y ago, and since we can't pursue all directions at once I want to focus primarily on making React Cosmos awesome. This includes React Native, but no other platform for now.. Good to know. Instead of cluttering the docs, it'd be great to do a deep comparison before and after the createStore callback is called in the Redux proxy and throw an warning/error if a mutation occurred. I've never used it, but deep-freeze might also come in handy here.. Repurposed this issue into a feature. Feel free to adjust.. Hi @sergeydt,\nJust to clarify, does this work in 3.0 but not latest (3.1.1) or it only works in 2.x?. @sergeydt sorry you had to go through all of this. I think #545 is the PR that fixed this.\nLet us know if you experience any other issue in the future!. OK, it seems like something was fishy with hot reloading since I merged the Test API, so I put in some extra time to iron out every use case. Here are 4 hot reloading scenarios covered by this PR:\n\nFixture source changes apply immediately initially\nAfter component state changed fixture source changes are kept until fixture is re-selected\nAfter fixture is re-selected fixture source changes apply immediately again\n\n\n\nFixture source changes apply immediately initially\nAfter fixture has been edited fixture source changes are kept until fixture is re-selected\nAfter fixture is re-selected fixture source changes apply immediately again\n\n\n\nComponent source changes are always applied immediately, even when state updates are active\n\n\n\nComponent source changes are always applied immediately, even when edits are active\n\n\n\n@maxsalven can you please test this via react-cosmos@3.2.0-3?\nIt includes a fix for the rename fixture error. \ud83d\ude4f. > Ummm, I was sure that was what I did, but the process of recreating the issue for this ticket caused it to work. Very weird.\n\ud83d\ude04\nMaybe you had to restart the server. Happy to hear it works.. This looks cool!\nI'm not a real user so I can't give valuable user feedback. The raw cache seems a bit difficult to approach, so I don't see myself writing Apollo cache in fixture by hand, but in the end does the old (existing) proxy have any advantage over the newer one?\nI expect the \"live\" version to be popular, though. To quote @KyleAMathews from an ancient issue:\n\nWith Relay and the brave new world of colocated component query fragments, I was thinking Cosmos could get an interesting Relay extension.\nBasically, for many/most Relay-ified components, a Cosmo fixture wouldn't be necessary. Instead you could wire it directly to your GraphQL endpoint and use live production data.\nWhat would be fun/useful is if by default, Cosmos would load a random entity to populate the component. This would be a real-world stress test for components you're developing/tweaking.\n\n\n\n@maxsalven My initial reaction is that I'd still like to mock the actual GQL server response\n\nWhat would be the difference between this and mocking via fetch or XHR proxy?. Look great! Looking forward to feedback from experience GraphQL devs.. @xavcz I think I solved the CI issues in https://github.com/react-cosmos/react-cosmos/pull/619!\nFeel free to merge my patch or replicate the changes on your branch. But don't merge this PR just yet as I haven't reviewed all code yet. \ud83e\udd13. Thanks for making all the changes!\nI'll look closely at the fetch mock-related flaky test and see if I can make it solid.\nAny idea about the 1st mount vs 2nd mount inconsistency in the Cosmos UI with the Apollo proxy?\n\n. @cfnelson yes! I've been experiencing that as well. I tried to understand why that's happening but no luck. I appreciate any help getting to the bottom of this as I am not experienced with GraphQL. Thanks!. Hi @rohit-ravikoti,\nIs this a create-react-app thing? Any mention of it in the CRA docs? Thanks.. Cool. It'd be cool to load all vars from .env file in the future. Thanks!. Thanks @nwshane!. @andreypopp I see your point, and I believe at some point in Cosmos history children were read from fixture.props.children. But the thing is children are special in React. They are the 3rd argument to React.createElement, after type and props. That said, after pausing to dig a bit more on this it seems there's no other difference past element creation.\nAlso, avoiding user confusion is more important than mirroring the React.createElement API that probably few people think of when creating components. So I welcome ideas. We could:\n1. Warn on fixture.props.children and inform people that they might be looking for fixture.children\n2. Use either fixture.props.children and fixture.children as 3rd argument to React.createElement.\nBut still I have to wonder, what happens when you do <Component children={<span>YO</span>} /> instead of <Component><span>YO</span></Component>? If it's exactly the same then I don't see why we can't go with Option 2.. Happy to accept a PR to use fixture.props.children as children. Here is the relevant code. With the mention that fixture.children should continue to be supported and not break API for existing users.. OK, after going deeper with typed fixtures it's clear to me that children needs to be under fixture.props \ud83d\ude2c\nI'm green lighting this as a free for all task. I'd be great if someone is interested in doing a core yet relatively light contribution to Cosmos.. Done by @maxsalven and released under 3.4.0. > which provide a type witness to Flow/TS how props relates to component.\nIs that a working example? \nI've been wondering if there's a way to have a generic Fixture type that can be used like this: fixture: Fixture<Component> and it would know to expect fixture.props to match the Props type of Component. But I don't have enough experience with Flow/TS to understand if that's possible.\nBtw, I just typed some fixtures for the first time today :P\n```js\n// @flow\nimport MyComponent from '../../MyComponent';\nimport type { Props } from '../../MyComponent';\nconst fixture: { props: Props } = {\n  component: MyComponent,\n  props: {\n    // secret sauce...\n  }\n};\nexport default fixture;\n```\nNot ideal. Happy to continue discussion on making this more straightforward.. Closing this as it's now possible to use @andreypopp's createFixture function to typecheck fixture without experiencing the tree view issues that @maxsalven is mentioning above. That was fixed in #591. I've been actually using createFixture succesfully in my projects, but it's not part of the Cosmos APIs at the moment.. > My question is, when those issues are resolved. Do you believe that I could use the proxies and fixtures from react-cosmos?\nI hope so. In theory you should and I'd be happy to help investigate if something unexpected occurs.\nEnzyme or not, I'd be very curios to see how Cosmos behaves with RN. I don't have experience so I never got around to testing it. \nTo make the Playground UI work with RN requires some foundational work, as mentioned in this passage from the Roadmap discussion:\n\n\n\nBut, unless I'm missing something, the headless Loader should be fairly easy to set up. For example, here are the few lines that tie the Cosmos Loader to ReactDOM: packages/react-cosmos-loader/src/dom-renderer. The rest of that file is just finding a dom element based on an optional query selector or creating on the spot.. Hi @Jwhiles,\nThanks for this. I think it's valuable to surface this information, but here are my suggestions regarding content and styling:\n- How about mentioning the possibility of exporting a list of fixtures after the \"Where to put fixtures?\" sub-section, since it's related to the file system? I'd also like to keep the fixtures in that example as brief as possible, without state, name or namespace which will be explained later independently.\n- Maybe rename \"Other fixture Properties\" to \"Fixture name and namespace\" and focus on the following information:\n  - The name and namespace are detected automatically from the file name and file path respectively, but they can be overridden with custom values\n  - The name and namespace are used in the Tree View navigation of the Playground UI. I made the amendments myself. Thanks.. Hi @mmacaula, I just opened a PR #647 to add support for function webpack configs. I followed the specs from your link and the config function is called with (env, argv). Can you please take a look?. Interesting. It looks like you're trying to do \n<Route path=\"/user/:username\" component={User}/>\nwhen the Router Proxy does this\n<Route path=\"/user/:username\">\n  <User />\n</Route>\n\nRight now I'm getting around this by wrapping the component in withRouter, perhaps we could have React Cosmos do this itself when a route is provided?\n\nIt would work in your case (it seems like the components you're trying to load are probably root level components for each route, correct me if I'm wrong), but would be an extra wrapper for all the other cases when you have non-root level components already wrapped with withRouter throughout the app.\nWe could extend react-cosmos-router-proxy to respond to fixture.routerDecorator: true (feel free to propose other naming). @rpowelll what do you think?. @rhysforyou you can use @maxsalven's feature from #745 starting with version 4.6.0-2.. Awesome. \nWe need to do a better job at signaling missing \"peer dependencies\" in the future.\n  . Before addressing the bigger question about how to handle decorators in general, I'll tweak your example to try to make it work and see if I understood what you're trying to do.\n```diff\nimport React from \"react\";\nexport default () => {\n  const DecoratorProxy = (props: ProxyProps) => {\n    const { nextProxy, fixture } = props;\n    const { value: NextProxy, next } = nextProxy;\nconst nextProxyEl = <NextProxy {...props} nextProxy={next()} />;\n\nif (!fixture.decorator) {\n  return nextProxyEl;\n}\n\nconst Decorator = fixture.decorator;\n\n\nreturn {nextProxyEl};\nreturn {nextProxyEl};\n  };\n\nreturn DecoratorProxy;\n};\n```\nIn other words, the DecoratorProxy is creating the Decorator element and should pass it the props it needs (in this case fixture.props but you could also send it the entire fixture).\n@maxsalven Does this work?. @jozsi cool stuff!\nFor the record, I'll be drafting a new Cosmos API that might make the need for this proxy obsolete (sorry \ud83d\ude05), but for the moment it's very useful!. Yeah, it's annoying. It might be possible to read current folded lines and apply them again after a fixture change. See https://codemirror.net/doc/manual.html#addon_foldcode\nBut I personally won't work on this because I'm planning to design a control panel to replace the fixture editor. Broadly, I want each fixture section to have a separate (collapsable) section with plugin support. Which will gradually transform the JSON blob into custom UI controls for each fixture part.. > Could you specify the required version of NodeJS to be installed to run react-cosmos?\nUnfortunately we lost track of that. If anyone wants to do some testing that would be great. But it should work with old versions of Node. Cosmos repo requires Node >=6.x if you want to be a developer to Cosmos. As a user, Node 5 and older should work.\n\nCould you compile the final bundle according to ES5 syntax rules?\n\nAll packages are already compiled and published as ES5 on npm. If you look each package.json they point to packages/*/lib/*, which is where we generate the compiled src dirs.\n\nWe are using react-cosmos 2.0.0-beta.x (react-cosmos-webpack to be exactly) for now. It works almost fine. But we want to update it to the latest version.\n\nIt should continue to work. Please let us know if it doesn't.\n\nCould we assume, that react-cosmos final bundle will be fully compiled according to ES5 syntax rules in the future updates or did you decide to move to ECMAScript 2015 finally?\n\nThe former. Every Cosmos package is published as compiled ES5. \ud83d\udc4c. Closing this as there doesn't seem to be any issue. Let me know otherwise.. \ud83c\udf89 . Hi @razagill\nAt a glance it doesn't look like anything's wrong. The Proxy object is probably just a submit event, but it looks odd because React generates synthetic (custom) DOM events.\nI'm not experienced with redux-form, but it seems like form onSubmit should be bound to a specific prop generated by the reduxForm HoC. I was looking at this example: https://codesandbox.io/s/mZRjw05yp\n. @kfern I linked a CodeSandbox example in my previous message. It's taken from the redux-form README. Are you having trouble making Cosmos work with redux-form?. You're right. There used to be but now there isn't! \ud83e\udd15\nIf you don't mind, can you please create an issue for this? Myself or someone else can pick it up later. Thanks!. You need to give each fixture a name:\njs\nmount({\n  proxies: [],\n  fixtures: {\n    \"ComponentA\": {\n      \"fixtureA\": someFixture,\n      \"fixtureB\": someFixture\n    },\n    \"ComponentB\": {\n      \"fixtureA\": someFixture,\n      \"fixtureB\": someFixture\n    },\n    // etc.\n  }\n});\nLet me know if this helps.. It sounds like your fixtures are ES6 modules so maybe this will work:\njs\nmount({\n  proxies: [],\n  fixtures: {\n    \"ComponentA\": {\n      \"fixtureA\": someFixture.default\n    }\n  }\n});\nIf this works, you can use a helper we use throughout the Cosmos packages to normalize modules at run time:\n```js\nimport { importModule } from 'react-cosmos-shared';\nmount({\n  proxies: [],\n  fixtures: {\n    \"ComponentA\": {\n      \"fixtureA\": importModule(someFixture)\n    }\n  }\n});\n```. With pleasure!\n\nAny plans on adding that to the doc ?\n\nNot right now... \nI want to make sure the main APIs are clear enough before adding instructions on how to use the lower level primitives in Cosmos. Kudos for making it work btw, I don't think react-cosmos-loader is documented at all at the moment.\nOn the other hand, I never heard of FuseBox before so if you're interested it might be valuable to create an examples folder with a minimal setup extracted from yours.. @cal0610 can you tell me what you tried? Maybe I can help. @cal0610 Oh man, I get it, it's a painful process at first. But I have to say you did pretty well!\n\nCreating fixtures requires server restart - would've been nice to know this was the case rather than thinking something was wrong\n\nThis is something I'm thinking about actively and will address in the near future one way or another. Note that new fixtures for existing components will appear instantly, you need to restart only when you add a new component. Still sucks tho.\n\nthis did not work on cosmos even though my component was styled on localhost:3000/.\nI have my css import defined on app.js:\n\nYou should be able to add '@blueprintjs/core/dist/blueprint.css' to globalImports as well.\n\nAlso, I'd like to find out more information about createTestContext, mount, and getWrapper.  How is this different from shallow from enzyme?\n\nThe main diffference is you use Cosmos fixtures instead of JSX to set up your component. With JSX you mock props. With fixtures you mock EVERYTHING (once you figure out the sometimes annoying config of course).\n\nWhat can you call on getWrapper?\n\ncreateTestContext will use Enzyme's full rendering. getWrapper returns the enzyme wrapper and then you have the Enzyme API. There's some suger on top like getWrapper(selector) is equal to getWrapper().find(selector), but that's optional and maybe shouldn't worry at first. The docs could definitely be improved but Cosmos exposes so many APIs and there's not a lot of people working on it, so you have to be a bit patient here. We're slowly getting there...\n\nThe doc doesn't specify where to place this file\n\nHave you seen this?\n\n\nSearching through the docs, this is all I could find:\n\nWell that should be enough to get you started. Once you have the reduxState on your fixture and the proxy configured, your component will be automatically wrapped inside the Redux provider and you'll be able to mock any state via fixture.reduxState. Check out this Redux example.\n\nYou're so close, don't leave now! I believe you'll be fully rewarded once you get on the other side :). You might hit other roadbloacks in the future, but you only config the main parts once and then reap the benefits. \u270c\ufe0f\n. > Uncaught ReferenceError: regeneratorRuntime is not defined\nThis means Babel isn't configured properly. I think async/await gets compiled into generators, which require the regenerator runtime.\n\n@skidding I don't really understand why I have to include an unused 'import regenerator-runtime ' in \nmy saga.js file...\n\nYou shouldn't import it in the every saga file. Adding it to globalImports should do.\n\nAnd finally, this is the lovely error I get:\n\nThis is unfortunate. And what does the fixture look like?\nPS. Is your code by any chance open source? I could take a look.. OH, createTestContext doesn't work with fixture arrays because you can't test more fixtures at the same time.\nTry this:\n```diff\n-import fixture from '../fixtures/index.fixture';\n+import fixtures from '../fixtures/index.fixture';\n-const { mount, getWrapper } = createTestContext({ fixture });\n+const { mount, getWrapper } = createTestContext({ fixture: fixtures[0] });\n```. > Now there was no way I could've known that right? ;p\nYou are right. \ud83d\ude05\nWe need to add a warning message in place for this! \nWhen createTestContext gets called with fixture an array it should say something like\n\ncreateContext can't be called with an array of fixtures because you can only test one fixture at a time. If you imported a fixture file that returns an array, pick one fixture from that array to pass to createContext.\n\nAnd it should probable go here.\nIf you have some time and want to prevent this from bugging other people in the future, maybe you can add it! \ud83c\udf7b. > I need another coffee...\n\n'./node_modules/regenerator-runtime/runtime.js',\n\nWouldn't just 'regenerator-runtime/runtime' work?\nSame goes for all your global imports, I'd think ./node_modules/ prefix isn't required since webpack resolves modules to node_modules by default.. Hi @mmacaula,\nSetting props on the root wrapper doesn't work because the root wrapper is the Cosmos Loader component. createContext creates a structure like this: CosmosLoader(ReduxProxy(...otherProxies(YourComponent))). Which is why there's a distinction between getRootWrapper and getWrapper. Actually I don't think getRootWrapper is documented so I'm not sure how you came about it :)\nBut I'm thinking we should expose a set({ props: { foo: 'bar' }) method anyway, with an additional setProps({ foo: 'bar' }) for convenience. But are you interested in re-rendering the component from scratch, or it going through the componentWillReceiveProps lifecycle path? The former is fairly easy to do with how Cosmos works today, while the latter requires more work (tho it's still wanted eventually).\n. > Should I just clone my imported fixture with a new set of props, then create a new context and then test from there or is there a simpler way?\nYes, unfortunately there's no simpler way at the moment.\nIf you're interested in opening an issue for a feature request to add a setProps method to the fixture context, I welcome it gladly. I'm not able to dive into it in the near future, but I'd be happy to guide someone interested in contributing. In any case, I'm sure we'll get to it eventually because it sounds like a popular use case.. Thanks for opening this!\n\nI looked briefly at the source code here and was wondering if it would be ok to just update all the existing proxies to pass along the props down the component tree\n\nThe way createContext works now by default, it destroys  React instances whenever we change the fixture and mount again, to make sure that the contents of a fixture are deterministic (ie. they will yield the same output if we apply the updated fixture contents from scratch another time). We can't change this as all existing users of Cosmos rely on this at the moment.\nGood news, though. The mount method already has a clearPrevInstance argument that defaults to true, which frankly I've never set to false in any real life example of mine, but I added the option a while ago preparing for this scenario. So theoretically, you should be able to create a (highly verbose) proof of concept for your scenario. Eg.\n```js\nconst fixture = {\n  component: MyComponent,\n  props: {\n    foo: false\n  }\n}\nconst ctx1 = createContext({ fixture });\nctx1.mount();\n// Test scenario A\nconst updatedFixture = {\n  ...fixture,\n  props: {\n    foo: true\n  }\n};\nconst ctx2 = createContext({ fixture: updatedFixture });\n// clearPrevInstance=false is crucial here, to preserve the prev React instance\n// and trigger lifecycle path\nctx2.mount(false);\n// Test scenario B\n```\nCan you please adjust this example on your code and confirm this works? If it does, than all we need to do is write an API to not have to write so much boilerplate. Something like:\n```js\nconst fixture = {\n  component: MyComponent,\n  props: {\n    foo: false\n  }\n}\nconst { mount, setProps } = createContext({ fixture });\nmount();\n// Test scenario A\nsetProps({\n  foo: true\n})\n// clearPrevInstance=false is crucial here, to preserve the prev React instance\n// and trigger lifecycle path\nmount(false);\n// Test scenario B\n```\nThanks!. Thanks for checking!\nI replicated the same example and got the same result. So I investigated.\nIt turns out react-test-renderer doesn't work as the real life ReactDOM renderer does. If you render an identical same React element it doesn't preserve the old React instances (and thus doesn't end up calling lifecycle methods), as calling ReactDOM.render on the same React element does. This makes sense, because in the latter case you're rendering the same React element on the same DOM element, but the test renderer doesn't have a target DOM element, so it just decides to build everything from scratch every time.\nHow did I test this? Instead of using the test context API, I used the lower level context API:\n```js\nimport { createContext } from 'react-cosmos-loader';\nimport { createDomRenderer } from 'react-cosmos-loader/lib/dom-renderer';\nclass MyComponent extends Component {\n  constructor(props) {\n    super(props);\n    console.log('construct', props.foo);\n  }\ncomponentWillReceiveProps(nextProps) {\n    console.log('cWRP', nextProps.foo);\n  }\nrender() {\n    return 'span';\n  }\n}\nconst renderer = createDomRenderer();\nconst ctx1 = createContext({\n  renderer,\n  fixture: {\n    component: MyComponent,\n    props: {\n      foo: false\n    }\n  }\n});\nawait ctx1.mount();\n// console: construct false\nconst ctx2 = createContext({\n  renderer,\n  fixture: {\n    component: MyComponent,\n    props: {\n      foo: true\n    }\n  }\n});\nawait ctx2.mount(false);\n// console: cWRP true\n```\nBut this doesn't help us with the test API. A setProps method would allows us to abstract these inconsistencies between renderers, but until then I managed to test lifecycle methods with the createTestContext API like this:\n```js\nconst fixture = {\n  component: MyComponent,\n  props: {\n    foo: false\n  }\n};\nconst { mount, getRootWrapper } = createTestContext({ fixture });\nawait mount();\n// console: construct false\ngetRootWrapper().setProps({\n  fixture: {\n    ...fixture,\n    props: {\n      foo: true\n    }\n  }\n});\n// console: cWRP true\n```\nIt's actually very close to your initial example, but instead of setting the component props on the root wrapper, you're setting the Cosmos Loader props, one of which is the fixture, with your updated component props. @mmacaula does this work?\nSorry for the roundtrip, I had to understand how everything works again :). > Now on to improving the dev experience. Would be happy to help if you like. One idea i had was to expose a set method in the returned context that would immutably set any value in the fixture, then call getRootWrapper().setProps\nYes! I think exposing both a set and a setProps is the way to go in the long term, as both as useful on their own. The only question I have here is regarding overriding vs extending. Eg. I think set should completely override the specified part of the fixture, whereas setProps would be more natural to extend the previous fixture props with the new ones passed. This opens up the discussion of whether or not we want an additional replaceProps, or an additional extend=true argument to set and setProps.\n\nLet me know what you prefer and I can work on it if you like, or I could help with some documentation on it.\n\nThat would be great! Once we find an answer we're both happy with to the question above I'm happy to give you pointers to where the changes would take place and answer any other question you might have regarding the repo. \ud83d\udc4d. > IMO, a replacing set and a merging setProps would handle most use cases.\nAgreed. I see two potential avenues for the future:\n- People want to override props. We can add replaceProps or just tell them to use set('props', newProps)\n- People want to extend other parts of the fixture. We add an option to set that allows them to do set('reduxState', { override: false })\nIn both cases we can add extra functionality without breaking the initial API. So I'm on board with \"a replacing set and a merging setProps\". \ud83d\udc4d \n\nI've been pretty busy lately but hope to get to this in the next week!\n\nThat would be great. Let me know if I can provide more info.. @kfern This is great, thank you for taking care of such an important chore! \ud83d\udc4d \nHere are my thoughts:\n- Can you put the createStore function and reducer in a separate file? Eg. store.js or configureStore.js it's usually called. This reflects a real life example more and I believe would make the Cosmos parts from cosmos.proxies.js clearer.\n- You can safely remove cosmos.config.js. Cosmos is deliberately supporting not needing a config file when relying on defaults, and not all examples have a config file already.\nNo need for tests for this example. In the future I'd like to convert the Cypress tests, that currently run only over the \"local-state\" example, to spawn multiple jobs and run tests over all examples in parallel. But I don't know what the best approach for this is and it's definitely out of scope.\nFinally, a README explaining the contents of the example would be ideal, but also optional. I've seen this in other projects and I thought they were very useful, but we didn't do this for any of the existing examples so far, so it would be a first. Completely up to you.\n\ud83e\udd18. @kfern everything looks great! Let me know if you're done and I will merge.\nNote: It seems there's a git conflict on the yarn.lock file. In case you need help updating your fork here's a quick tutorial from GitHub: https://help.github.com/articles/syncing-a-fork/.. Thank you @kfern!. Great addition @mmacaula, thanks!. Published under 3.6.1 \ud83c\udf8a \nVersion has patch increment due to a glitch with npm publish and npm dist tags.. Published under 3.7.0. @xavcz @mysterycommand can you please take a look?\nThis issues seems to have been this: react-error-overlay is only initialized in development, yet we tried to call dismissErrorOverlay in any env.\nSee if my changes seem decent and I'll quickly publish a patch version. Thanks!. Published in 3.7.1. Let me know if this fixes your issue!. @mysterycommand \ud83e\udd18 . Thanks for bringing this up!\nOne solution would be to call mount internally. But this wouldn't work out of the box because mount uses the catched fixture contents (initialized on createContext and updated whenever proxies send updates).\nWhich brings me to the higher issue. set should reach the inner createContext abstraction, which handles the fixture cache and the mount method. It would be great if we could do this as it would open a whole number of possibilities. For example if we had setProps functionality for the generic createContext, which is at the base of the test helpers, but also of the Playground UI, we could later add UI controls in the fixture editor to simulate prop transitions. \nThere are three layers of abstraction:\n\nimport createEnzymeContext from 'react-cosmos-test/enzyme'\nimport createTestContext from 'react-cosmos-test/generic'\nimport { createContext } from 'react-cosmos-loader'\n\nThe enzyme context calls the generic test context with the Enzyme renderer, and the generic test context calls the base context with some server side sugar (eg. auto-mocking callbacks in jest environment and file detection for Cosmos proxies).\nAll core methods should be in the environment-agnostic createContext, and we must strive to move set, and even setProps there.\n@mmacaula let me know if this interests you and we can discuss further. It's probably more than you signed up for, but so is the impact. Reading packages/react-cosmos-loader/src/create-context.js (140 brief lines of code) is the best starting point to understand the underlying abstraction.. > Wouldn't calling mount again destroy and re-build the component from scratch with the updated reduxState? That would work for the UI where you do that all the time but for testing, if i want to test lifecycle methods, I'm not sure it would.\nNot if we call it like mount(clearPrevInstance = false). This way we'd end up following the componentWillReceiveProps => componentWillUpdate => componentDidUpdate render path of the Loader and all nested proxies.\n\nIf we wanted to do lifecycle testing, we'd have to get the redux-proxy to somehow replace the whole store with the passed in state somehow. Would it be possible to have the redux-proxy implement its own lifecycle method to determine that the fixture prop for reduxState has changed and therefore it should dump the current store, recreate it with the new state and pass that updated state down to child proxies? Or am I completely missing something?\n\nYou're right. To achieve lifecycle testing we have to implement lifecycle events in proxies. I guess one thing we want to establish is if all fixture setters should only test the \"update\" path. I was thinking that it is also useful to update a fixture and re-render everything from scratch, but since adding another option to the set method only makes things more conflusing, I'm okay with dedicating setters for the update path, and recommend creating a new fixture for a complete re-render (at least for now).. So, to bring back set and improve docs:\n- Redux proxy needs to \"listen\" for fixture changes in componentWillReceiveProps\n- set and setProps need to be labeled as Enzyme context-only, as they aren't available if we react-test-renderer or the DOM renderer\n- We should specify that these setters need to be implemented in proxies as well to work completely, and possibly add TODOs in other affected proxies\nTo add set and setProps to other renderers:\n- I don't think react-test-renderer allows updating the wrapper, so unless I'm wrong, we should specify that this functionality isn't supported with this renderer\n- For the DOM loader, instead of calling wrapper.setProps (where wrapper is the Cosmos Loader component), we just need to do update the fixture cache internally and implicitly call mount(false), and since the DOM container is the same the update lifecycle path will be triggered. > I'm working on the redux proxy now (with tests), I'll also try to take a stab at looking through the other renderers and adding TODOs or just fixing them.\nAwesome!\n\nWould you prefer smaller PRs for each of those as I find them?\n\nSmaller PRs are my preference, but feel free to go with the path you're most comfortable with.. > My naive attempt was to just recreate the store with the new state, but that doesn't quite work as the connect component grabs the store off context and holds onto it for its lifetime\nHow about invalidating the entire child tree by setting an incremental key to the next proxy?\nIn short:\n- state = { storeId: 0 } on the ReduxProxy component class\n- React.createElement(nextProxy.value, { key: this.state.storeId, ... in render\n- componentDidReceiveProps(nextProps) { if (oldReduxState !== newReduxState) { this.setState({ storeId: this.state.storeId + 1 })... (Wondering if we need to do shallow or deep comparison here, but we can worry about that later)\nWould this work?. You don't have to worry about connect transition. When you set a different key to a child element React re-creates all instances, so the connect constructor will be called again. It's like loading a different fixture from scratch. Does this info help?. The issue is that Cosmos can only access the outer-most component, which in the case of a Redux connected component is the connect decorator. Or some other HoC that the component is also wrapped in.\nI'm now thinking of a next-gen API for fixtures that solves this long-standing issue. But atm you can only inject local state if the fixture points to the component with the state, not to a parent wrapper.. Side note: This might work already with React 16.3+ if react-redux forwarded the ref. Relevant thread. @alexvpickering you forgot to add .js extension to your fixture file. \ud83d\ude43 . OH, just realized the docs are at fault. \nA small PR to correct this s/*.fixture/*.fixture.js would be appreciated!. Hey @alexvpickering \nconfig.globalImports is ignored by the test API. While I'm not sure of the full implications at the moment (ie. if we want the same globals in test environment as in Cosmos UI), it sounds like a good idea for a feature request. At the moment only proxiesPath is read from the cosmos config by the test API.\nThat said, I managed to make your repo work with the following changes:\n```diff\nsrc/include/jquery.js\n-import * as $ from \"jquery\";\n+import $ from \"jquery\";\ndiff\nsrc/setupTests.js\nimport { configure } from \"enzyme\";\n import Adapter from \"enzyme-adapter-react-16\";\n+import \"./include/jquery\";\n```\nimport * as $ from \"jquery\" worked in the browser only (probably due to webpack magic), but import $ from \"jquery\" works universally.\nLet me know if this helps.. A couple of things:\n\nUsing a global namespace is no longer valid when working with CommonJS modules  (webpack, CRA, etc.), so you should import jQuery wherever you use it instead of reading it from window\nI'm not sure what's the best practice when dealing with jQuery plugins and CommonJS, or if there is a consistent one, but I managed to make your example to work: https://github.com/alexvpickering/cosmos-example/pull/1\nThis is outside Cosmos' scope :). Thanks!. I agree, it would be more natural for the fixture to look like this:\n\njs\nexport default {\n  component: UnitsForm,\n  decorator: ModalContainer\n}\nThis feature is not yet available, but it's discussed in #568 and I'm more than happy to provide guidance if anyone is willing and has the time to contribute.. @maruware thanks for bringing this up, I wasn't aware of it!\n\nmicromatch with dot option\n\nSounds line an easy fix.\n\nglob with no absolute\n\nNot sure I understand how this would work. Do you have a favorite solution out of the two?. Hmm, that's bad. We have to check this for every Cosmos package. I was under the impression that only what's under package.files will be published to npm.\n@victormoukhortov thanks for reporting!. A few leads on this one:\n- Lerna doesn't seem to be the issue\n- Yarn seems to have a hard time respecting package.json:files\nWill keep you posted as soon as I learn anything new, and any outside help is appreciated.. Fixed this in #637. src dirs should no longer be present in 4.0.0-beta.11 and above. But of course you're getting the beta release with this version.. Hi @adamszeptycki,\nIs your project public, or can you provide a minimum reproducing repo that I can debug? Thanks!\nPS. I like your OS username ;). > Would using glob-to-regexp as mentioned in #555 would reduce the need of react-cosmos-voyager2?\nMaybe, but I remember trying it and it fell short in some way. I can't remember for sure, but I think it's the highlighted part from this passage:\n\nWe could use https://github.com/fitzgen/glob-to-regexp to convert config.filePaths globs to a regexp which we could send to require.context. The only issue is that config.filePaths is an array of globs. If we manage to merge the globs or the resulting regular expressions, and glob-to-regexp is reliable, we no longer have to watch for file changes ourselves and this becomes a much easier task.\n\nI believe I couldn't find a way to merge more than one regexp and send it to webpack, which expects one.\n\nBy the way, embedModules, where we watch files, still depends (source) on the deprecated react-cosmos-voyager(1) for getFilePath (voyager source). Is this a possible issue?\n\nShouldn't be an issue, this code path only activates when config.componentPaths is set up, which is still supported as backwards compatibility but removed from docs and those users shouldn't expect new features like \"Detect fixtures of new components without server reload\".. > What if we don't merge the regexp but actually uses multiple require.context? \ud83d\ude04\nMaybe... \nEventually we need to do some filesystem watching in the Cosmos server to not depend on webpack for this sort of thing. And sorting out this issue is on my personal short list for next month.\nBut if we can get this to work with multiple require.contexts, by joining the results (and maybe removing duplicates) than it could be a quicker win.\n. \ud83e\udd41\ud83e\udd41\ud83e\udd41\nI think I found a fix that was right under out nose all the time. I'll skip the details for now to make sure it works as expected.\n@xavczen @jozsi @maxsalven if you have a few minutes, can you please try v4.0.0-beta.13 (lucky number) in your project to see if one or both of two wonderful things happen:\n\nFixtures for new components, under any dir, show up in Cosmos without having to restart the process\nTest files (using react-cosmos-test) can be placed in the same dir with one or more fixtures, and the Playground doesn't pick them up and thus doesn't crash\n\nThanks!. Hi @fusionstrings,\nThis is more related to JSX/Babel than Cosmos. Babel compiles JSX into React.createElement() calls, which requires React to be imported in the same file to begin with. Yes, this is a confusing thing that the community hasn't figured out how to solve (to my knowledge).\nTry adding this at the beginning of the fixture (only if you have JSX):\njs\nimport React from 'react';\nAlso, if you're willing, it might be a good idea to submit a PR updating the children fixture example to:\ndiff\n+import React from 'react';\n+\nexport default {\n  component: Text,\n  props: {\n    someProp: true,\n    children: (\n      <div>\n        <p>Fixture ain't afraid of JSX</p>\n        <p>Fixture ain't afraid of nothin!</p>\n      </div>\n    )\n  }\n};. @fusionstrings thanks!. This is great! Just one mention: I see this more of a BREAKING CHANGE than fix, because for new (possibly unwanted) fixtures might pop up for existing users. I would've merged myself but wanted to see if you agree on this first and if so, set the semver prefix accordingly.\nPS. I think the same is valid for f480fd863e10ef4028dbdc09da397242fd0edaaa, because existing users might end up having StateProxy configured twice for test environemnts where they already set it up to compensate for the previous behavior. So I say we release a silent v4 after these PRs to stay true to semver.. > Should we try to include the Apollo PR into that too?\nYes!. > I'm guessing that the values for those keys aren't actually important to rendering/serving the site\nThe file path is completely arbitrary. We need projectKey to be able to identify separate Cosmos projects (that run on same machine/host/port) when we save UI state in localStorage. Eg. which components are expanded in the tree view.\n@neezer any ideas for a different identification source for projectKey that is identical across machines, but also doesn't change often (so that UI state is preserved)?\nIdeas:\n- package.json#name\n- package.json#repository.url\nNote that some projects might not have a name or repository in their package.json, so we either find a more consistent source or implement a fallback mechanism where the file path is used in case we can't rely on package.json data.. That said, that's only part of the \"make export deterministic\" issue. I just saw your comment and it's an interesting issue. It doesn't have anything to do with playgroundOptions.projectKey, but I think it's doable. \ud83e\udd14. Sure, name sounds good, although we should still fallback on project path, since it is possible for the name to be missing and we don't want to fail in that case.\nSo it seems like this boils down to two tasks:\n- Make index.html deterministic by using package.json#name as identifier.\n- Make main.js deterministic by embeding relative paths instead of absolute paths. Needs some research, but in theory we should be able to convert the absolute paths into relative paths before statically including them in the bundle. Unless I'm missing something, they should be relative to packages/react-cosmos/src/client/user-modules.js, which is where the files are injected. I'd be interested in seeing a prototype for this if anybody's interested to experiment.. @xavcz good idea putting the server locally. I went ahead and simplified it a bit as having a detached package.json/yarn.lock seemed error-prone.. @mmacaula thanks!\nReleased under 4.0.0-beta.1, install and try it out in your project! \ud83c\udf89\nPS. No need to rebase branches in the future as they will be squashed anyway upon merge, and it's easier to see post-review diff.. > For each package, they export everything needed for all other packages, and then for production, they have a main field in package.json that points to build/index.js.\n@ovidiubute are you sure about this?\nFrom what I'm seeing in the latest Jest master,\n- All package.json:main fields point to build/index.js by default, and thus require building all packages before they can reference each other\n- They also run yarn build at postinstall npm hook, which seems to confirm the above point\n- It doesn't seem like they generate a different package.json for publishing (like other monorepos do)\nThat said, there are still some great things we can borrow:\n- Exporting all public APIs inside the build/index.js file of each package, which gets rid of the awkward PKG/lib/* paths\n- Centralizing all Flow types, which will also serve as good documentation\n- Prettifying the build command console output using chalk \ud83d\ude0d \nHowever, when it comes to Flow types, I'm considering a react-cosmos-types package instead of putting them root level. There might be some roadblocks when trying to implement this, but I see two advantages:\n- Aliasing for free. import type { Foo } from 'react-cosmos-types/Foo' is very convenient, as opposed to relative '../../' paths. Jest codebase has custom module resolvers but I'd like to stay away from that for now as it adds complexity (you have to please Jest, ESLint, Flow, etc).\n- Can be used by Cosmos consumer repos. Eg. import type { ProxyProps } from 'react-cosmos-types/Proxy. Note: Maybe react-cosmos-flow is be a better name for this package.\nAny feedback is appreciated!\nLater edits: \n\nWhat about \"Flow types are lost between packages\"? Does the Jest codebase address this?\nAdditional goal: Make sure no Flow types end up in users' node_modules. Yes! This should be fixed.\n\nhttps://github.com/react-cosmos/react-cosmos/blob/0aea3ff15cb0321c0ffbd319168b2d564ab07f75/packages/react-cosmos/bin/cosmos.js#L4-L5\nand \nhttps://github.com/react-cosmos/react-cosmos/blob/0aea3ff15cb0321c0ffbd319168b2d564ab07f75/packages/react-cosmos/bin/cosmos-export.js#L4-L5\nShould be\ndiff\n-process.env.BABEL_ENV = 'development';\n+process.env.BABEL_ENV = process.env.BABEL_ENV || 'development';\n-process.env.NODE_ENV = 'development';\n+process.env.NODE_ENV = process.env.NODE_ENV || 'development';\nand \ndiff\n-process.env.BABEL_ENV = 'production';\n+process.env.BABEL_ENV = process.env.BABEL_ENV || 'production';\n-process.env.NODE_ENV = 'production';\n+process.env.NODE_ENV = process.env.NODE_ENV || 'production';\n@scottdickerson Would you be willing to submit a patch for this? I'd be happy to review and release it.. Thanks @scottdickerson! \nPublished under react-cosmos@4.0.0-beta.4, check it out. \ncc @NiGhTTraX I think you needed this as well.. Merged this because I want to release a new beta (under next npm dist) and test this in a bunch of repos. But please review if anyone is interested. cc @xavcz . Update: Released under react-cosmos@4.0.0-beta.2 or react-cosmos@next.\n\nStill works with webpack 1.15 in this repo \ud83d\udc4d\nFails with Flatris repo (Next.js), where it's relying on default webpack config and Next.js uses webpack <4 \ud83d\udc4e. Sorry, mate!\n\nCan you try react-cosmos@4.0.0-beta.3? Should be fine now. If not, worse case you go back to beta.1. Let me know.. > Is this line set to avoid parsing the \ud83d\udce6 node_modules rabbit hole?\nYes. But it might not be relevant for CSS. So I think we can safely remove exclude part for the CSS loader.\nMy only question is, is there any difference between\njs\n      {\n        // Preprocess both own and 3rd party CSS files\n        test: /\\.css$/,\n        use: ['style-loader', 'css-loader'],\n      },\nand (how react-boilerplate does it)\njs\n      {\n        // Preprocess our own .css files\n        // This is the place to add your own loaders (e.g. sass/less etc.)\n        // for a list of loaders, see https://webpack.js.org/loaders/#styling\n        test: /\\.css$/,\n        exclude: /node_modules/,\n        use: ['style-loader', 'css-loader'],\n      },\n      {\n        // Preprocess 3rd party .css files located in node_modules\n        test: /\\.css$/,\n        include: /node_modules/,\n        use: ['style-loader', 'css-loader'],\n      },\nI'm fine with either. The first is simpler (if it actually works) but the latter lets users know more about what's happening.. Great! This should prevent future confusion.. Cheers, mate!\nJust published 4.0.0-beta.5 with this. Try it out.. If the nwbConfig.webpack field takes in a regular webpack config, you could put your webpack config in a dedicated file and do this:\njs\n// nwb.config.js\nmodule.exports = {\n  // ...\n  webpack: require('./webpack.config')\n}\njs\n// cosmos.config.js\nmodule.exports = {\n  // ...\n  webpackConfigPath: './webpack.config'\n}\nAnd if the webpack config file is named webpack.config.js and is in the same dir as the cosmos.config, you don't need to specify it, it will be picked up automatically. You don't even need to create cosmos config file if the webpack config file is in the root project path.. Hey @Mensae,\nI used one in a project once. It's not polished but here is a minimalistic version extracted from that codebase:\n```js\nexport default function createIntlProxy({ messages }) {\n  const IntlProxy = props => {\n    const { nextProxy, fixture: { locale = 'en' } } = props;\n    const { value: NextProxy, next } = nextProxy;\nreturn (\n  <IntlProvider locale={locale} key={locale} messages={messages[locale]}>\n    <NextProxy {...props} nextProxy={next()} />\n  </IntlProvider>\n);\n\n};\nreturn IntlProxy;\n}\n```\nNote:\n- This code might have some errors as I simplified the original working one without running the new code\n- Not sure what the best way to pass the locale value. In this example it's read from fixture.locale, but in my project I was storing the locale in a Redux store, so the Proxy was also connected to Redux to read that value. But this made the whole setup a bit more convoluted as the IntlProxy didn't work without the Redux proxy.\nLet me know if this works and if you're interested in making an official IntlProxy out of this. It would be a great addition to Cosmos!. Added a link to the proxy above for now https://github.com/react-cosmos/react-cosmos/blob/master/README.md#more-proxies. OK, ready for review. I'm excited about this PR because it will make Cosmos development more enjoyable!\n@ovidiubute @xavcz @tkjone if you want to take a look and help, here are some pointers.\nA lot of it is chores related to adding Flow types, converting default exports to named exports, etc.\nBut the main part, which addresses all points from to the original Spectrum chat, is best explained in the rewritten CONTRIBUTING sections:\n\nCompiled vs source code\n\n\n\nSmall section about Flow\n\n\nOn top of that, I went ahead and made the script output more sexy. Namely, check out the build script:\n\n(Thanks @ovidiubute for creating the initial script, which served the repo well for a long time)\nIf you take a look at these you should be able to let me know if the new structure is clear and makes sense to you.\nAppreciate any feedback! \u270c\ufe0f. Thanks, guys!. @kekkeme can you provide a minimum reproducing repo or a public repo that I can clone and debug? I'd love to get to the bottom of this!. I added a working example here: https://react-testing-examples.com/#6-xhr\nAlso, your example probably didn't work because you need to call await mount() and make the test async.. > You can test this by setting the config hostname to null\nHow about setting hostname to 0.0.0.0?. Yeah, I've been in that situation once and it's ugly.\nUntil we find a better solution, would you be interested in contributing with a mention about using 0.0.0.0 when running Cosmos inside Docker, in the Option dump#hostname section?\n\nIt's not much, but I imagine some people will open readme and search for \"Docker\", and this will at least point them to a working solution. Or encourage them to tell us how to do it better. :)\n. @shahkashani your solution sounds like a better idea. If you want to make it happen I'm down with it!\nSo I see two parts to this:\n1. Making the default hostname undefined (or null, whichever you prefer)\n2. As you said, displaying \"localhost\" when hostname is empty\n. Fixed in 4.5.0. Host is now null by default and it will be displayed as a clickable localhost link.. @fnbk I'm glad you made your use case work!\nFYI, you can\n- Use the redux-proxy and your wrapped components can work inside Cosmos as they do in your app\n- Export the (unwrapped) component as well and use that in your fixtures if you want to mock the \"inner\" props\nCheers!. We have this nice error message that we show when the user webpack build fails to generate an index.html page. Which is usually because html-webpack-plugin is missing. But other times it's something like an error in the webpack config, and we used to show the same screen, further confusing users and overall looking silly as a tool.\n\nThe first step in communicating error messages it to make sure we never tell the user to install a package when they have it! So I added another default screen to show when the /loader/index.html isn't being served, but the user has html-webpack-plugin installed. We know this buy embedding some information related to user dependencies in the playground options (aka PlaygroundOpts). In the future we can use these meta data to respond to other situations like when user doesn't have Babel loader, etc.\n\n@xavczen if you have some time to take a look and tell me what you think I'd be very grateful! \ud83d\ude4f. @andreypopp can you please share your thoughts on this? It mainly uses the createFixture function you proposed. I tried to present its shortcomings as well.\nAlso, do you still use createFixture in your projects?\ncc @xavczen @maxsalven . Good question. But I'm afraid it goes outside Cosmos' scope, at least currently.\nCosmos for ensures components can be reused in the same project, and is mostly concerned with run time dependencies. What you're refering to is more related to build time dependencies. That is your Babel presets & plugins, your webpack config, loaders, plugins, etc. \nOne answer could be: Use create-react-app, or Next.js, or some other opinionated framework in all your projects. Then you should be able to copy paste components.\n@ComputerCarl does this make sense?. Feel free to open other issues for specific questions. Closing this for now because it's too broad to address.. > I wanted to open an issue about that, but figured I should ask here first if this feature request is already being tracked.\nNot being tracked elsewhere as far as I know, so we can keep this thread open around this topic.\nI don't have much insight into Apollo, so it's not clear to me how easy it would be to integrate latency into react-cosmos-apollo-proxy. @xavczen if you have any thoughts let us know.. Released @xavczen's PR under 4.7.0-3. Try it out!. Thank you @cbranch101!\nPublished under 4.0.0-rc.2. Sorry for the headache @SimeonC! \ud83d\ude07\nIf you can tell, does the error occur inside addJestWrapper or when the decorated prop is called?. Ideally we find the way to improve the \"magic\". But I admit it's a risky\nroad and don't want to grow frustration in the meantime.\nI agree with you and I welcome an option like autoMockProps for the\ncreateTestContext method. It should default to true for now, to not affect\nother users unwillingly.\nI'm deep into another Cosmos-related task at the moment so I can put much\ntime into this now. If you're interested in contributing I'll do my best to\nhelp with review, merge, etc. And we can change the silly comment too :).\nThanks for all your support!\nOn Thu, Apr 26, 2018, 09:59 Simeon Cheeseman notifications@github.com\nwrote:\n\nI used replicated this test in react-cosmos-test to play with it (need\nmobx in devDependencies), and tried several different ways of working\naround this with no success. Also I did some testing and it seems like it\ndoesn't even try to wrap functions defined on the class which kinda makes\nit a bit worthless to recurse into them. It's also near impossible to\ndetect this class compared to an object.\nit('should not apply jest.fn to getters/setters', () => {\n  const { decorate, observable } = require('mobx');\n  class TestClass {\n    value = [];\n    action = (value) => {      this.value = value;\n    }\n  }\n  decorate(TestClass, {    value: observable.shallow\n  });\n  createContext({ renderer, fixture: { props: { key: new TestClass() } }, cosmosConfigPath: '/foo/path' });\nexpect(getCosmosConfig).toHaveBeenCalledWith('/foo/path');\n});\nI'm fixing this locally by just removing the decorateFixture part (it's a\nlittle too automagic for my preferences anyway). Maybe the best solution\nwould be to give an option to turn this on and off depending on your use\ncase.\nMy Fix:\nexport function createContext(args: TestContextArgs): ContextFunctions {\n  const { fixture, proxies = detectUserProxies(args.cosmosConfigPath) } = args;\nreturn createLoaderContext({\n    ...args,\n    proxies,\n    fixture\n  });\n}\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/658#issuecomment-384497653,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAPTfk_iCy-1e2GMIX8aDglP3zG49U_wks5tsTf3gaJpZM4Ti78b\n.\n. Thanks @SimeonC for this!\n\nIt's a violation of semver, but I'm going to include this feature in the 4.0 release candidate, as it's more of a fix than a feature for people in the same situation, who are affected by the shortcomings of automocking.\n. Can you please try 4.0.0-rc.3?. Hey. The folder tree structure is based on components file path first and then on fixture file path, nested in the former. Is the TranslationRow component placed inside a fixtures directory? Can is see one of its fixtures?. Well, with that fixture Cosmos will think Wrapper is the component, and since it's placed in the fixture file it considers it the component file as well. (I realize this sounds logical to me because I'm intimate with the system, but might not from the outside.)\nSo you should make sure fixture.component points to your component. TranslationRow in your case.\nHow to add your wrapper?\nOption A: Create a proxy\nExample:\n```js\n// cosmos.proxies.js\nconst DEFAULT_BG_COLOR = 'transparent';\nconst BgColorProxy = ({ nextProxy, fixture, ...rest }) => {\n  const { value: NextProxy, next } = nextProxy;\n  return (\n    \n\n\n  );\n};\nexport default [BgColorProxy];\n```\nThen your fixture will look like this:\njs\nexport default {\n  name: \u2018basic render (empty)\u2019,\n  component: TranslationRow,\n  bgColor: 'white',\n  ...other fixture data\n};\nOption B: https://github.com/jozsi/react-cosmos-wrapper-proxy\n. You need to set mode with webpack 4 and higher, otherwise I think you end up bundling Cosmos using production settings, for which it is definitely not optimized so those warning are legit.\nCan you tell which is the file that triggers the webpack rebuild? Maybe if you set this to false https://github.com/react-cosmos/react-cosmos/blob/master/packages/react-cosmos/src/server/server.js#L66 webpack will log it. Maybe we make the webpack dev server configurable in Cosmos as well, but for now you'll have to open up that (compiled) file from node_modules to edit it. Let me know if it works!. \ud83d\ude4c. Hey, thanks for the tip!\nTwo comments:\n1. Might be a good idea to mention that Enzyme v3 requires you to call wrapper.update after a component updates (usually in response to an event, relevant thread), and the Cosmos Enzyme API tries to alleviate that by updating the wrapper whenever we request it. Which is \"magical\" indeed so totally worth mentioning.\n2. Can you put it in a block quote? It think it works good with notes/tips. Eg.\n\nI'm surprised getRootWrapper().update() didn't work, though. \n. Thanks!. Hi @p8952,\nThis appears to be a shortcoming of the xhr-proxy. Under the hood the proxy uses xhr-mock, which supports async responses. So ideally your example should just work.\nWhy doesn't it work?\nBecause the proxy component isn't aware that is has to wait, so the fixture is considered loaded instantly and the test runner goes to the next test.\nCan proxies halt fixture load execution?\nYes. \nProxies receive a prop called onComponentRef. It is passed down until the leaf proxy which essentially loads the user component and calls onComponentRef when the ref of the user component's element is called. When this reaches the root proxy, it is considered that the fixture is loaded.\nBy hooking in into onComponentRef we can choose wait for some proxy-related activity to finish before bubbling up the component ref up the proxy component tree. The state-proxy does this already.\nThis might be confusing as it has Cosmos jargon, but I'm confident it can be achieved easily.\nDo we know when the xhr mock responses have resolved?\nThis is the meat. At the moment we send the fixture responses blindly to xhr-mock.\nI'd have to do some experimentation, but I suspect we can wrap all responses in a Promise, and then attach a resolve callback to the xhr-proxy component instance. And inside the onComponentRef callback we send to the child proxy, we await for the xhr-related promises to be resolved and only then call props.onComponentRef.\n\nI'll try to give this a shot in a couple of days. But if you have the time and interest to tackle this yourself it would be even better and I'm here to assist.\nThanks for reporting this and sorry for the inconvenience!. I've thought about this some more and I don't understand how come this works without Cosmos, since the test still doesn't get any queue that it should wait until the request is resolved.\nI'll investigate in a few days and get to the bottom of it.. Good news @p8952, I figured it out.\n\nCosmos was using xhr-proxy 1.x, which didn't support async responses. Upgrade to react-cosmos-xhr-proxy@4.1.2 to get the latest xhr-proxy functionality.\nTests still won't wait until an async response is resolved, but you can tell them to!\n\nHere's an working example:\n- fixture\n- test\nI use async-until in most of my tests nowadays. You first need to identify something that is rendered by the component before the request is resolved, like a loading message or a blank state. Then you tell the test to await until that element dissapears (with a given timeout), and only then assert the ready/data state.\nEg.\njs\nit('renders data', async () => {\n  await until(() => getWrapper('.loading').length === 0);\n  // or \n  await until(() => !getWrapper().text().match('Loading'))\n  // expect(...\n});\nClosing this for now, but let me know if this works for you!. Thanks @SimeonC!\nWouldn't /ga-translate/ be enough for most cases? Or something more exact like /\\/user\\?/ in @Melocaster's case.. Interesting. So what's the url value that currently works for you?. Cool. I'm happy it worked out!\nPlease close the issue unless there's more you want to discuss on this topic.. Hi @josemontiel,\nIs that the entire error message? Can you share a repo (your own or a minimal reproduction) that I can debug? Thanks!. Cosmos isn't picking up Razzle's Babel config. Can you please try creating this .babelrc file in your project root?\n{\n  \"presets\": [\n    \"razzle/babel\"\n  ]\n}. Actually, after I added the .babelrc file the error changed:\n\nERROR in ./src/react.svg\nModule parse failed: Unexpected token (1:0)\nYou may need an appropriate loader to handle this file type.\n\nBecause the Cosmos config doesn't come equiped with loaders for every file type by default. In this situations it's good to reuse an existing config to avoid duplication. This is the first time I hear of Razzle, but after a quick check it doesn't seem to easily expose its webpack config.\nSo if you comment the import logo from './react.svg'; the setup works. But I've installed file-loader and added this to the Cosmos config:\njs\nmodule.exports = {\n  webpack(config) {\n    config.module.rules.push({\n      test: /\\.svg$/,\n      use: 'file-loader'\n    });\n    return config;\n  }\n};\nAnd now it works anyway. Depending on how many new loaders you'll need to add, this approach might or might not be suited for you, as you end up duplicating webpack config already built in in Razzle.\nIf you can't replicate this just give me access to the razzle-cosmos-example and I'll push my changes.. Hi @charliedotau,\nThanks for sharing your issue. You've understood namespace just fine. The thing is, at the moment we only support one level of nesting for fixtures. Components don't have this restriction, they can be nested as deep as the UI affords.\nThat said, what you were experiencing was a bug related to this functinality. Althogh we don't support deep fixture nesting, the slash from listview/actors was being processed incorrectly.\nI pushed a fix and in version 4.1.1 you should see this:\n\nCan you please upgrade and see if you get the same result?. Remaining tasks:\n- [x] Construct error overlay filename with config.publicUrl\n- [x] Ensure loader index loads instead of the index.html from publicPath\n- [x] Replace '/loader/' to '/' in tests and examples to avoid confusion\n  - [x] End publicUrl without slash, so replace '/' with ''\n  - [x] Research: Is it safe to set webpack.output.publicPath to ''? Where is webpack.output.publicPath used? Yes, webpack's default value is '' (docs)\n- [x] Rename playground bundle filename to _playground.js\n- [x] Add custom playground favicon path to avoid collision with user favicon\n- [x] Update export readme section to mention using a static server to serve to export\n- [x] Update webpack contributing guide section\n- [x] Heavy testing\n  - [x] webpack 1.x\n  - [x] webpack-related examples\n  - [x] with CRA\n  - [x] with Next.js \n  - Error overlay links\n    - [x] With default publicUrl\n    - [x] With custom publicUrl\n. @radhakri555 Yes, that would be great!. That's what it looks like. \nWhat we're trying is to have parity with webpack. \nSo to be 100% sure I recommend creating a dummy webpack config that returns a function and console logging the arguments webpack passes to that function when you're passing the dummy config to the webpack compiler. It's probably easiest using the webpack CLI.\n```js\n// dummy-webpack.config.js\nmodule.exports = env => {\n  console.log({ env });\nreturn {\n    // Webpack will complain about missing options but the env should be printed by then\n  };\n};\n```\nbash\nwebpack --config dummy-webpack.config.js\nwebpack --config dummy-webpack.config.js --mode=production\nThanks!. Hi @MattReimer,\nCan you try upgrading to 4.2 and see if changes anything?. Hmm,\nI clone the repo, run yarn and yarn cosmos and I see this\n\nEdit: Make sure it's not browser cache.... Anything in the browser console? Maybe a 404 request to the component loader iframe?. > Is there a secret verbose mode you know of that would give me more output?\nUnfortunately, no. But it seems like the server is running OK.\nThe logs in your original comment are server logs. I meant browser logs, from the client-side. \nThe Cosmos UI has two frames, the playground index.html and the component loader _loader.html. Before loading the iframe, the playground does a fetch request to _loader.html to see if it returns 200 OK, otherwise it tell you that the build isn't OK without knowing what when wrong without checking the server console. Maybe in this case the server is OK, but the fetch request fails from some other reason (browser security...?). So are you able to see the browser console? . > 499 Token Required (Esri)\n\nReturned by ArcGIS for Server. Code 499 indicates that a token is required but was not submitted.[72]\n\nMaybe when we do the fetch request we must include cookies via credentials: 'same-origin'.. @MattReimer Can you please try version 4.3.0-0? Make sure to clear cache.. \ud83d\ude4f. Hi @SimeonC,\nCan you provide a failing example? I tried this in the Axios example it seems like the proxy instance is created from scratch whenever the component is hot reloaded, thus attaching the mocks again.\n\n. @SimeonC have you tried narrowing down the watch dirs? Eg. watchDirs: ['src'] in cosmos.config.. \ud83c\udf7b\nMaybe in the future we find a way to have a better default for watchDirs. It'd be great if we could tell webpack to ignore a list of known files or file types from the watch list. I don't remember it being an option, though.. @SimeonC that sounds like a good idea. Would you be willing to draft a new issue for this so we don't forget it?. Thanks!. Do you get any error?\nI used Babel 7, Next 6 and Cosmos in react-testing-components.\nI do remember Next 6 and Babel 7.0.0-beta.46 were not working and I had to downgrade to Babel 7.0.0-beta.42, but maybe that was fixed with newer releases.. Please post any detailed conflicts with Babel 7 if they exist. Closing this as Babel is not a Cosmos dependency anyway, it's part of the user land and the Cosmos webpack conflict merely picks up babel-loader when it is installed by the user.. > Use puppeteer to navigate to say... http://localhost/MyComponent/{fixtureName} and get only the component (no cosmos UI)\nYou can already do this via http://host:port/?component=MyComponent&fixture=myFixture&fullScreen=true. Thanks @mpachin!. I welcome this!\nNote that there is already an ignore option which ends up as exclude in the findFixtureFiles function , to ignore certain files from the fixtures that have already been \"collected\". \nSince the current ignore option is a list of regular expressions, I doubt we can comfortably merge it with the new option you need. Although I'm open to discussion if you see a clear path.\nThe easier solution is a new option called something like fileMatchIgnore, specifically designed for the ignore option of the glob call, which defaults to '**/node_modules/**' to not affect backwards compatibility. Or ['**/node_modules/**'] if glob's ignore option supports a list of globs.. @mpachin are you interested in making this contribution?\nI can help with pointers and review.. Can you run yarn webpack --config packages/react-cosmos-playground/webpack.config.js independently to see if you get better logs?\nBuilding the playground works on my macOS machine.. It seems like ./packages/react-querystring-router/src/router.js is not being compiled by Babel, and maybe your Node version on the Window machine doesn't support spread operator.\nThis is odd, because the Playground's webpack config is configured to compile the router source as well. Maybe there's something wrong with that config that I'm missing.. @mentaman Thank for all your notes! I installed a Windows VM and confirm all you reported.\nWould you be interested in addressing both issues in one PR? I can test everything on unix (Mac).\n1. Playground build\nThis is the fix that I propose. It still targets the src dir only but accepts both types of slashes.\ndiff\n         include: [\n           src,\n           // Allow building playground from uncompiled monorepo deps\n-          /react-cosmos-.+\\/src\\//,\n-          /react-querystring-router\\/src\\//,\n+          // Note: Support both forward and back slashes in file paths for\n+          // cross OS compatibility\n+          /(react-cosmos-.+|react-querystring-router)(\\/|\\\\)src/,\n           /react-cosmos-flow/\n         ],\n         use: 'babel-loader'\n2. Start scripts\nMy takeaway is that npm binaries (node_modules/.bin/*) are platform specific, and we can't call babel-node node_module/.bin/foo reliably. Even thought it works on unix systems.\nSo I am on board with your \"start\": \"babel-node ../../packages/react-cosmos/bin/cosmos.js\" proposal, as long as we update all examples and the start script in the root package.json.. @mpachin This issue has been fixed. Can you please test latest master on your machine as well?. This is great!\nI only have two mentions:\n1. I appreciate the detailed README, but I'm afraid your scenario is too specific for the main README (it's already huge...). If you think it's valuable, you can move everything from \"If your projects directory tree looks like this:\" to a separate md file in the docs dir and link to it. Another option is to link to #687 as an example of where fileMatchIgnore can be useful.\n2. This is a pet peeve of mine and I apologize if it comes off annoying. I noticed you've always kept fileMatch, exclude and fileMatchIgnore in the same order, which is cool. But can you change the order as follows please? fileMatch, fileMatchIgnore and exclude. I find this makes more sense since fileMatchIgnore comes in effect before exclude and it looks better visually for fileMatch* options to be grouped.\nThanks!. @mpachin Please test your new option on 4.4.0! \ud83c\udf89. @xavczen can you take a look at this, please? The new declarative Query and Mutation components in react-apollo 2.1 look great so I wanted to update this example and learn how they work. Much cleaner!\nAlso, after updating a bunch of deps it seems the delayed error flushing issue is no longer present? \ud83d\ude4f. > Since React's context dramatically changed in React v16, and even official docs have been changed and do not warn now that context is experimental api, I think we should delete this notes.\nThat's true. But React 16 comes with a completely new Context API. So removing the notes that say that the context API is experimental wouldn't be enough. We need to create examples using the new Context API first.. That's right. We need a new proxy. Should be fairly simple, though. Eg. Pass the Provider in the config and the context value in the fixture.. > As a full solution, the proxy constructor would probably end up like taking a map of key:Provider\nGood idea!. > I've updated the gist with that idea \nLooks pretty good to me!\n\nfeel free to add this to react-cosmos, I'd create a PR but a bit short on time and not sure where you want it\n\nHere what I'm thinking: To be able to release it under a minor version, we add the new proxy under a new entry point in the existing package. Eg. react-cosmos-context-proxy/new.\nAnd in the next major version we swap entry points, exporting the new proxy as the index and the old one under react-cosmos-context-proxy/old. \nAs a bonus we avoid creating yet another Cosmos package.\nWhat do you think?\n\nI don't think it'd make much sense to make this an external proxy as context is kinda core to react.\n\nAgreed. Actually in the future I'd like to reduce the number of Cosmos packages and provide more core plugins as named exports. But no need to worry about this for now.. @vget98 For now you can use the \"wrapper component fixture pattern to wrap a component with a new-style context provider.\nIn the future it will be even easier but don't have an ETA for that.. @hudde91 Context providers are configured the same with or without hooks. Whether you use Context.Consumer with render prop or useContext hook in your component doesn't make a difference for Cosmos. See the comments above for putting the Provider in a proxy. But if you're using Cosmos Next it's even easier to put your context Provider(s) in a decorator.. Can you please provide a repo reproducing an error? If I could take a look I'll be able to point to a solution. Thanks!. @kfern I've not worked with react-dnd before, but you can make it work with these two changes:\nCreate src/cosmos.proxies.js\n```js\nimport React from 'react';\nimport HTML5Backend from 'react-dnd-html5-backend';\nimport { DragDropContext } from 'react-dnd';\n// Create plain wrapper with dnd context\nconst DDContext = DragDropContext(HTML5Backend)(props => props.children);\nfunction DDProxy(props) {\n  const { nextProxy, fixture } = props;\n  const children = ;\n// Apply wrapper when fixture.ddContext is true\n  return fixture.ddContext ? {children} : children;\n}\nexport default [DDProxy];\n```\nIn the Box fixture:\n```diff\nimport Box from '../../Components/Box';\nconst identity = el => el;\nexport default [\n  {\n    component: Box,\n+    ddContext: true,\n    props: {\n      connectDragSource: identity()\n    }\n  }\n];\n```\nAt first I wanted to apply the dnd context globally, without the need of fixture.ddContext, but then I realized App already has dnd context applied and there might be some conflicts if you apply it twice. Let me know if you need explanations.. This is very cool!\nHow about creating a proxy for this instead of putting it in the playground (which is not pluggable yet)?\nIt's as simple as putting this in cosmos.proxies.js\n```js\nimport React from 'react';\nfunction JSXPreview(props) {\n  const { nextProxy, fixture } = props;\nreturn (\n    \nGENERATE THE JSX PREVIEW HERE\n\n\n  );\n}\nexport default [JSXPreview];\n```. > Looking good. So you mean it would be a plugin and by default it wont show up?\nYes\n\nIf someone who is not me would want to use it, how would he do it? Or you think it would not be useful for the rest of the community?\n\nYou can publish your proxy as a package, and others can do\n```js\nimport createJSXPreviewProxy from 'your-proxy-package-name'\nexport default [createJSXPreviewProxy({ fooOption: 'barValue' })]\n```\nThis is a practice to support options. It can also be just\n```js\nimport JSXPreview from 'your-proxy-package-name'\nexport default [JSXPreview]\n```\n\nAlso from the playground I am able to edit the fixture, and update it with the \"onFixtureEditorChange\" function, is it possible to do it with a proxy too?\n\nNot at the moment. But there will likely be a similar API in the future.\n\nThis is what it looks like as a proxy.\n\nCool stuff!\n. Please make the root start script run the local-state example without changing directory. This should work:\n\"start\": \"babel-node ./packages/react-cosmos/bin/cosmos --config examples/local-state/cosmos.config.js\",\nYou can see the CI is failling at the moment.\nThanks!. Thanks @mentaman!. Those files are created automatically on Yarn install because of the react-cosmos* deps in the examples. We could remove those as all Cosmos packages are globally accessible within the monorepo anyway. Feel free to make the change if you're interested.. Hi @begedin,\nI think similar issues have been reported in the past as well with the Apollo proxy. There were also some console errors until recently, which revealed some statefulness, but maybe the underlying problem is still there even if the error disappeared.\nUnfortunately I have minimal Apollo experience so I don't have any insight at the moment. Any help getting to the bottom of this would be greatly appreciated.\nhttps://github.com/react-cosmos/react-cosmos/tree/master/packages/react-cosmos-apollo-proxy/src\nI can help explain any Cosmos related code from the Apollo proxy.\nThanks!. @JannesV re-creating the client seems much saner than overriding this.client.link indeed! \ud83d\ude2c\n@xavczen you may want to take a look at this.. Yes! \ud83d\udc4d . Hi @good-idea,\nIt seems like the component class/fn names are minified, which results in unintelligible labels inside Cosmos.\nTry setting NODE_ENV=development when running the export command. It defaults to \"production\", but it can be overridden.\n\nI have webpackConfigPath set to 'none' because I'm getting a bunch of other problems when trying to use it.\n\nnull would be a better value in this case. At the moment Cosmos tries to open a file called none and fails gracefully.\nStill can't wrap my head around the _extends is not defined error, especially since you're relying on the default webpack config (unless the \"none\" value does something unexpected). Try running the export in development mode and then we'll take it from there. And if you have a public repo I can inspect let me know, I'll happily investigate.. I bumped into this as well. Will publish a fix soon!. Fixed in 4.5.0. No need to manually override the NODE_ENV anymore.. Hi @rchamberlin,\nCan you point to a repo with this structure? Either your project is public\nor you can create a minimal reproducing repo. This way I can debug and see\nwhat the issue is.\nOn Tue, Jun 5, 2018, 04:29 rchamberlin notifications@github.com wrote:\n\nWhat's up?\nI have an Electron app that uses a two package.json structure. All of the\nscripts are in the root of the project, but the app itself lives in ./app,\nincluding all of its dependencies (React etc). Is there a way to set up the\nconfig so this will work? I've tried setting the rootPath to everything I\ncan think of but no luck. Thanks!\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/702, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAPTfgyDptWDbNqKNNDnMhmD2jQ1ZRsYks5t5d7ygaJpZM4UaBBv\n.\n. @rchamberlin Did you manage to get Cosmos working?. Hey @mpachin,\nSince proxiesPath is always relative to rootPath\n\nAll config paths are relative to rootPath. This is already mentioned in two places:\n\n\n\nso you can skip placing cosmos.proxies.js in src directory and instead keep it near config.\n\nThis can be misleading. The reason why we ever suggest putting cosmos.proxies.js in src is Create React App (and other similar setups) where only the src dir is compiled by Babel. In those cases, which are very popular, putting the cosmos.proxies file in a config dir fails.\nAnd I wouldn't want to overwhelm users with too much specification around where to place files. Again, Cosmos docs are already very stuffy.\nThat said, #703 is proof that something can be improved. I propose this: When no cosmos.proxies file is found, we check if there is one relative to the config file's dir. If true, we warn the user that proxiesPath should be relative to rootPath and give them an example of what the value should be. Wdyt?. > @skidding first of all thank you for your quick and thoughtful responses and your work on such great tool \u2764\ufe0f\nMy pleasure! And thanks for your contributions!\n\nMaybe sequence of checks should look like this?\n\nI like your ideas. Here's a few more insider info relevant to this flow.\nproxiesPath is always defined. Even if you don't specify it, it has a default. See here. This is useful when someone creates cosmos.proxies file but doesn't create cosmos.config, which is optional.\nBecause of the above, we currently don't warn if there's no file found at proxiesPath. We just move along.\nTo achieve what you're suggesting, I think we need to expose a new react-cosmos-config method, which returns the raw user config. Right now getCosmosConfig returns the user config merged with the default config, with all paths resolved to rootPath.\nI'm thinking we could call getRawCosmosConfig, which would be this part except it would return an empty object when the config is missing. Then we would be able to know that the user defined their proxiesPath to an invalid path.\nReading the raw config would also give us the raw proxiesPath value, which would allow us to construct resolve(dirname(getUserConfigPath()), rawConfig.proxiesPath) to determine if a proxies file has been created near the config file, like in your case when you stumbled into this issue.. @JannesV this looks promising! Can you please fix the failling build? Always make sure to run yarn test before creating a PR. Thanks.. @JannesV thanks!. @JannesV thanks for your diligent work on this!\nI'll merge now and publish an update today or tomorrow. Note that this is a breaking change, but for marketing (for lack of a better word) reasons I won't bump the whole Cosmos project to v5. Nor do I think we should wait until v5 comes to release this, as the Apollo proxy is currently broken as the migration path is minimal, as well I as the users of this proxy I suspect.\nThis is food for thought. Making monorepo package versions independent is a path I haven't explored yet, so for now I think I'll adopt some sort of \"experimental\" flag to some monorepo packages, which are subject to breaking changes outside the semver conventions.. Published under 4.5.0!. Hey @linonetwo,\nIt's possible that your matcher values are not working as expected. From the fetch-mock docs (we're using v5):\n\nmatcher: Function(url, opts): A function (returning a Boolean) that is passed the url and opts fetch() is called with (or, if fetch() was called with one, the Request instance)\n\nSo your URL strings are always evaluated as true, which results in the first mock being chosen all the time.\nTry this:\njs\nfetch: [\n  {\n    matcher: `${API}/stats`,\n    response: () =>\n      import('../../store/aggregation.data')\n        .then(({ statsData1 }) => statsData1)\n        .then(res => JSON.stringify(res)),\n  },\n  {\n    matcher: `${API}/block?page=0&size=${getDefaultPageSize()}`,\n    response: () =>\n      import('../../store/block.data')\n        .then(({ listData1 }) => listData1)\n        .then(res => JSON.stringify(res)),\n  },\n]. TODO:\n- [x] Why is CodeMirror syntax highlighting and code folding not working anymore?. I plan to create a plugin system for the Cosmos UI. Then all sorts of documenting features will be available, but I haven't considered mdx for Cosmos.. > It does feel like this is a bit outside the scope of the project, why not focus on being a dev tool?\nCosmos being an awesome dev tool comes first. A plugin system is a logical step which I'm very excited about. Then I'm sure people will come up with plugins for documenting components and I welcome that. It's definitely a popular need. But I will continue to prioritize dev tool features.\nKeeping this issue open to avoid duplicate threads on this topic.. I don't get that warning on my machine. But the fixture editor does indeed not update. Which is expected at the moment. Please see this thread.\nBut why would you like to put a handler in the state? Only data that can't be derived should normally be put into the state.. > Mainly because functions on state have access to this and don't need babel-plugin-transform-class-properties\nYou can also do this in the constructor\njs\nthis.state = {\n  name\n}\nthis.updateName = ({target: {value: name}}) => {\n  this.setState({\n    name\n  })\n}\n\nAlso I'm one of those weird guys who thinks state = data + actions.\n\nInteresting. I like to think of state as a serializable snapshot which can be persisted offline, and of actions as part of the program code which can transform state on events.. So I've recently learned that putting actions inside state is actually a pattern advocated by the React team, at least when using the new Context API.\nI think this issue and #433 should be merged.. Hi @extramuros,\nIt sounds like you have more buttons. Try logging getWrapper('button').length to see if this is the case.. In any case, if you got the Enzyme error it seems like the Cosmos+Enzyme integration is working just fine.\nYou have to narrow down the selector to a single button. Probably getWrapper('button:first-child') would work as a first step.\nLearn more about selectors here: http://airbnb.io/enzyme/docs/api/selector.html. Try something like console.log(getWrapper().html()) to check that Cosmos is rendering what you expect.. If you have a public repo I can take a look.. @extramuros the component doesn't render in Jest because Errors returns null. The Cosmos UI works because DEBUG somehow ends up being true in the client bundle, yet it's not defined in Jest environment. Not sure what the purpose of the Errors component is, but you might want to consider returning this.props.children instead of null.\nAlso, you can create src/setupTests.js (CRA specific) and put this there:\n```js\nimport Adapter from 'enzyme-adapter-react-16';\nimport { configure } from 'enzyme';\nconfigure({ adapter: new Adapter() });\n```\nSo you don't have to do it in every test.. This is a bug. An oversight of #656.\nAt the time it seemed like a good idea but I failed to recognize that the user bundle should be as unopinionated as possible. The fetch polyfill in react-cosmos-playground was a good idea, as that is already bundled when it reaches the user. But the polyfilling in loader-entry (which is synonym with \"user entry\") should be reverted. It's up to the user to customize its bundle based on its requirements, either via a custom webpack config or globalImports in Cosmos config.\n@extramuros @cbranch101 if any of you wants to open a PR to fix this I'd be grateful!. > Demoing how a responsive component looks at different available widths\nThis is being worked on and I suspect will be released soon.\nFor the rest you can create a custom proxy and customize its CSS via custom fixture attrs.\nHere's an example:\n```js\nclass ContainerProxy extends Component {\n  render() {\n    const {\n      nextProxy: { value: NextProxy, next },\n      fixture: { containerStyle }\n    } = this.props;\n    const nextEl = ;\nreturn containerStyle ? <div style={containerStyle}>{nextEl}</div> : nextEl;\n\n}\n}\n```\nIf you add this to your cosmos.proxies file then you'll be able to pass container style under fixture.containerStyles. \nThis is rudimentary, but I think from here you'll be able to extend with presets and more high level container constructs.. Hi @bslipek,\nFixture state doesn't work on connected components. Technically speaking, Cosmos injects state in the exported component and can't (easily) access the inner component that holds the state.\n\nNote that, in case you weren't aware, higher order components like withRouter create a new component that loads yours as a child.\n\nI am planning a big Cosmos change that will enable this, but realistically speaking that will come \"sometime this summer\".\nThere are still a few things you could do:\n\n\nExport the raw component as well and use it in state-related fixtures. Simple but kinda goes against Cosmos principles.\n\n\nMake use of wrapperComponentRef\n\n\n```js\nexport default {\n  component: Counter,\nprops: {\n    wrappedComponentRef(innerRef) {\n      if (innerRef) {\n        innerRef.setState({ count: 10 });\n      }\n    }\n  },\nurl: '/counter'\n};\n```\nBut this is ugly and you don't see the state in the fixture editor this way.\nHope this helps.. Hi @callumlocke,\nI recommend using async-await. I do stuff like:\njs\nawait until(() => get('state').something === 'somevalue')\nWhich also doubles as an assertion. If it times out you'll get a failed test with a customizable error message.. Great catch!\nJust to make sure I understand. Is the underlying issue the fact that we mutate the user's clientOptions inside the proxy?\nWould this also work?\njs\nif (isMockedFixture) {\n  options = {\n    ...options,\n    link: createFixtureLink({\n      apolloFixture,\n      cache,\n      fixture: this.props.fixture\n    });\n  }\n}\nAnd (only if needed), we can also do something like:\njs\nconst options = clientOptions ? clone(clientOptions) : {\n  cache,\n  link: new HttpLink({ uri: endpoint })\n};. Interesting!\nSo do we need to pass the cache instance to both ApolloClient.options as well as ApolloClient.options.link?. Looks good. @xavczen you have the primary vote!. Published v4.6.0-1 which includes this PR and #737.. RN 56 relies on Babel 7. Waiting until Babel 7 is official to upgrade both.. Disabled Greenkeeper until https://github.com/greenkeeperio/greenkeeper/issues/921 is fixed.. Hi @mitsuishihidemi, can you also check the browser console for errors? Thanks!. Also, what is the current version (can be stable or beta)? And what version was previously working for you?. Can you please tell me your webpack version as well? If you can share your full list of package.json dependencies/devDependencies even better.. It seems like you're using an older webpack version (pre v4), because you're using module.loaders. So I need your exact webpack version to replicate your setup.\nEven better if you can provide a public repository that reproduces this issue!. I tried to reproduce your issue but I get this build error\n\nModule build failed: Error: Plugin/Preset files are not allowed to export objects, only functions.\n\nAnd I'm not up to date with Babel 7 yet (which is still beta). Unfortunately I can't spend more time debugging like this. If you have a public repo that reproduces this issue I'll be able to understand it and come up with a solution.\nBut if we're lucky this issue is already fixed. Can you try installing react-cosmos@4.6.0-3 and see if anything changes? It contains a fix for a similar issue (#753).. @mitsuishihidemi Any luck? Let's close this issue if you managed to get Cosmos working.. Hi @jeznag,\nNot out of the box, but it's possible. By changing one line you could pass the shallow renderer to Cosmos.\nThe main issue with shallow rendering, and why I went with mounting by default, is that the component you're testing is usually decorated by a number of wrapper components.\nLike if you're testing a container, shallow rendering will only render the container and your component ends up being the child that is omitted. Moreover, Cosmos adds at least a wrapper component (and another one with each proxy configured), so to reach your component you have to go down a few levels down the rendering hierarchy. I believe you can keep calling .shallow() on a shallow Enzyme wrapper, but I didn't find that approach enjoyable while writing tests.\nFinally, I like mounting because it behaves as close as possible to production code.. @vitkon did you try setting proxiesPath: './cosmos.proxies.ts' in your Cosmos config?. > It would be nice to mention in the readme that the config provided with webpackConfigPath option does not get HtmlWebPackPlugin injected into plugins and you have to do it yourself.\nThis shouldn't be the case. This is a bug that has been reported a few times lately, so I'm really interested in tracking it down.\nThe webpack config should be enhanced, like your say, regardless of being the default or a custom one.\nCan you provide a public repository that reproduces this? It would be of great help and I'll make sure to find a fix and publish it in a few days.\nThanks!. @ktunkiewicz I re read the source and you're right, HtmlWebpackPlugin doesn't get added on top of a custom webpack plugin. Will rectify!. @ktunkiewicz can you please try react-cosmos@4.6.0-3?\nhtml-webpack-plugin should be added automatically to your custom webpack config now.. @xavczen Do you have any thoughts on this? Unfortunately I don't have knowledge into Apollo's InMemoryCache API. Thanks!. Many thanks @xavczen! \ud83d\udc4f. Hey @extramuros,\nCould you instead remove babel-polyfill from react-cosmos package altogether? It was a mistake to add it in the first place as it should be the user's decision. You solution also works, but adds a complexity that I'd prefer to avoid.\nAside from removing this line you must also do:\nbash\ncd packages/react-cosmos\nyarn remove babel-polyfill\nThanks!. Excellent. Congrats on your 1st contribution to Cosmos! \ud83c\udfa9. Thanks!. Great idea passing down the props! Somehow I missed this pattern completely till now.\nI suggest two changes:\n- Replace Component with Wrapper component, because \"Component\" sounds more like the primary use case, where you pass a component class.\n- Replace fixture.state from this example, because actually it won't work (although this will be supported in the next major version), with some example props, because they are correctly passed down to SearchBox.. Thanks!\n\nI'm not sure why you say the previous fixture.state won't work since it's used in the example right above it\n\nBecause the state would try to be applied to the props => (...) wrapper component, which is a stateless component and by definition can't hold state. And also because I think from that example one could imagine the state is being appled to the inner <SearchBox ...> component, which is not the case.. > Is the upcoming fix for this going to give (props, state) => (...) so state can be give to the correct component with ...state\nI wish it worked like this. But you can't inject state into a component using ...state. Part of what makes Cosmos cool is the ability to inject state into a component, which is otherwise unusual in the React land. The current API, however, only allows injecting state into a root component class attached to a fixture (ie. { component: MyComponent ... }). My plan is to use composition to be able to do stuff like this in the future:\njs\n// some-fixture.js\nexport default (\n  <Wrapper>\n    <ComponentState searchQuery=\"Who let the docs out?\">\n      <SearchBox />\n    </ComponentState>\n  </Wrapper>\n)\nBut this functionality is part of a bigger project I want to tackle: JSX fixtures \u2013 Being able to express Cosmos fixtures as regular JSX elements (like in the example above). It's the next big thing on my list after UI plugins, so stay tunned. See my roadmap for an overview.. Hi @sdgandhi,\nNote that when you wrap a component with Redux's connect, you're no longer exporting your component, but a \"higher order component\" that implicity renders your component with some props derived from various the global Redux store.\nIn React, you can only set the props of the top component you're rendering, the rest derive their props from their parent component, in cascading fashion.\nSo you have two options:\n- Recommended: Rely on Redux state mocks, because the Redux state controls entirly the props sent to your component, because what connect does is map Redux data to component props.\n- Export your unwrapped component under a named export, and use that in your fixture. Then you're free to mock any props that usually come from Redux's connect.. @sdgandhi Could you share a broader example of what you'd like to achieve? I don't quite understand what you mean. Thanks!. I read your initial post again and maybe, you want a way to stub the dispatch calls from inside the component, to avoid calling the actual action functions?. Well I'd say that the point of the redux proxy is to allow real dispatch functions to be called and not have to mock them. This leads to less time writing tests and, most importantly, tests cover more code paths than if everything was mocked, and thus less in touch with how to app runs in real life.\nIs there a reason why having the real dispatch functions run bothers you?. > So I've separated my UI tests (with cosmos) from unit tests (with jest). So I only want to test the UI component without having to worry about the rest of my redux stack.\nThis is also fine. Definitely simpler.\n\nAdditionally, by using redux-thunk, my redux dispatch calls out to external services and loads data from them. I would rather that not happen when testing UI in cosmos.\n\nXHR or Fetch requests can also be mocked in Cosmos, in case you want to go down this road in the future.\n\nPerhaps I'm not understanding redux proxy. I was under the impression that it is supposed to completely mock out the redux state, so none of the rest of the redux stack affects the component except for the redux state specified by the reduxState key in the fixture?\n\nNot quite. The purpose of the Redux proxy is so that all Redux side effects do occur outside your component, just as they would in a the entire app, except you're focusing on a single component. It's more tedious, but once set up can give you more confidence in your app. I try to explain this philosophy in this Medium article.\nBut it's more important to do what feels practical and you enjoy!. > Practically I would love to do the following:\nI understand, but it's not possible. \ud83d\ude05\nA React app is a tree of component, all derived from the root one. Each component converts their props into props for their children. You can't run your code and also interfere with this relationship.\nIf you want to control the props a component gives to one of its children (connect to the wrapped component in your case), you take the parent component out of the equation and render the child directly. If you render the parent you let its do its thing and decide what props its children get.\nIt's not a thing of principle, it's how React works.\nOn another note, you can mock your actions by mocking their connection to the outside. If an action does an API request, a get in localStorage, a read from the global window object, you can mock all of those.. I'll close this for now. Hope you got started one way or another, and feel free to open other threads.. @zach-albia You're pretty close to viable solution. It seems the Next.js Links call a global Router singleton. So I believe overriding Router/router is the way to go.\nHere's a (untested) draft of what the proxy would look like:\n```js\nclass NextProxy extends Component {\n  constructor(props) {\n    super(props);\nthis.__realRouter = Router.router;\nRouter.router = createRouterMock();\n\n}\ncomponentWillUnmount() {\n    if (this.__realRouter) {\n      Router.router = this.__realRouter;\n    }\n  }\nrender() {\n    const { nextProxy, ...rest } = this.props;\n    const { value: NextProxy, next } = nextProxy;\nreturn <NextProxy {...rest} nextProxy={next()} />;\n\n}\n}\nfunction createRouterMock() {\n  // This will probably evolve in time\n  return { push: () => {}, prefetch: () => {} };\n}\n```. Hey! Is anything from the react-is package that can help us detect this more elegantly?. Looking good!\nBefore merging:\n- Please resolve conflict, I just merged a branch.\n- Regarding tests, you may want to give it another try with the latest fork of enzyme react adaptor used in master. I started using the new Context API, which Enzyme also doesn't support yet, so I resorted to using that fork in the meantime. Maybe it also works with refs? Wild shot, but I'm ready to merge this anyway.. Nice! \ud83d\udc4f\nPublished under 4.6.0-6.. Hi @TwFlem,\nI ran into this as well. Have you seen this? https://github.com/react-cosmos/react-cosmos/commit/816cb94ff21449b9902cab22191f52c6eca9ba7b?short_path=04c6e90#diff-04c6e90faac2675aa89e2176d2eec7d8. @TwFlem any luck?\nYou have two options:\n1. Whitelist __fixtures__ in React Native\n2. Configure Cosmos to use a different file pattern via fileMatch. Hi @tdelang,\n\nHow can I have Cosmos understand where to find @components?\n\nWell, how does your app understand where to find @components?\n\nwebpackConfigPath: '/config/webpack.config.dev.js',\n\nMaybe your webpack config isn't loaded properly, as webpackConfigPath should be a relative path. Eg. './config/webpack.config.dev.js'or 'config/webpack.config.dev.js'. A path that begins / will likely be resolved from the root of your file system.\nIf your existing webpack config is loaded successfully by Cosmos you probably don't need the manual overriding via webpack option.. Just published a fix. Please try 4.6.3 and see if it works as expected.\nKeep publicUrl: './' in your config. I thought about making it the default, but decided against it as it can cause errors for other users. \n\nThere are edge cases when ./ is still not ideal. publicUrl also sets the value for PUBLIC_URL env var, which you may be using to construct URLs in your components. This is not recommended, but if you do and have nested routes in your app, it can create wrong URLs as they will always begin with ./ relative to current router path.. You're welcome!. Hi @SimeonC,\n\nGood idea!\n\nIs there any reason why you also changed the multi-vars/__fsmocks__/joined.fixture.js file? I think it belongs to a separate test case so I'd leave it as before.\nThe build is failing due to Flow errors. Do you need any help? Note that the type annotations in the AST code is far from ideal as I already used any types and $FlowFixMe in one place, so feel free to make some concessions as long as the return type is not compromised. Also, let me know if you have any issue running Flow or any repo command locally.. You patch is available under react-cosmos@4.6.4. \ud83d\udc4c. @jeznag Thanks for the link, it was cool to read about your testing journey!\n\nPersonally, I've lately tried to keep my tests as decoupled as possible from internals. So triggering actions and checking for changes in the render output (eg. Success message is shown).\nBut of course the testing style depends on each type of situation and there's no single right way to do it.. Stopping here before this issue sucks too much time from me. Left Apollo proxy in the monorepo for now.\nMoving to CircleCI sped up the CI a lot, and locally yarn installs faster without the whole Expo baggage. Cleaned up Jest and ESLint configs and merged two heavy tests. I'm happy for now.\nOn to features!. Hi @rkclark,\nThey are configurable, I just didn't get to documenting it yet. Let me know if the following works.\njs\n// cosmos.config\nmodule.exports = {\n  // other options...\n  plugin: {\n    responsivePreview: {\n      devices: [\n        { label: 'iPhone 5', width: 320, height: 568 },\n        { label: 'iPhone 6', width: 375, height: 667 },\n        { label: 'iPhone 6 Plus', width: 414, height: 736 }\n      ]\n    }\n  }\n}\nNote that this overrides all the default devices, so here's the original list in case you want to extend it:\njs\ndevices: [\n  { label: 'iPhone 5', width: 320, height: 568 },\n  { label: 'iPhone 6', width: 375, height: 667 },\n  { label: 'iPhone 6 Plus', width: 414, height: 736 },\n  { label: 'Medium', width: 1024, height: 768 },\n  { label: 'Large', width: 1440, height: 900 },\n  { label: '1080p', width: 1920, height: 1080 }\n]. > PS: I replaced Storybook with Cosmos in my team's front end app and everyone is loving it. Thanks for making it!\n\ud83c\udf89\n\nIs there a keyboard shortcut to enter/exit full screen mode? Once I'm in fullscreen mode, I can't get out without setting fullscreen to false in the URL.\n\nAt the moment you can only go back using the browser back button.\nThe only keyboard shortcuts at the moment are \"s\" and \"escape\" to focus/blur the fixture search box on the left. Adding another shortcut for full screen would be easy, but there is a catch.\nThe component renders in an iframe, and shortcuts are captured outside the iframe. When you go full screen, as soon as you click or focus on an element from your components the Cosmos UI will stop capturing key events, and there's no place to click outside to focus on the Cosmos UI since you're in full screen mode.\nThere is a possible solution that I've been pondering. We could capture key events in the component iframe as well and comunicate the keyCode via postMessage event as we do with all the other messages (eg. fixture loaded, runtime error, etc). But beside the extra work involved, I wonder if adding event listeners in the iframe where the user code runs can cause any conflict with user code.\nFeel free to share you thoughts on this!. > Can you position a browser element over an iframe? If so a non-intrusive exit (X) button could be added in one of the corners to allow the user to exit fullscreen with a mouse click. I realise that it would be preferable to not obstruct any of the screen when the user is viewing their component but if it was suitably small it might not be a problem.\nAn overlapping button is also an option. As well as a thin side bar on the left with a few key controls, similar to how most apps \"minimize\" their left nav.\nI'll leave this thread open and we should pursue one of these options at some point in the future. But for now I hope the back button is something you can work with.. > I'd try to avoid a left bar as usually when I go into fullscreen mode its to totally control the viewport width to test my component's responsiveness - guess it may be the same for others!\nHave you tried the lastest responsive controls added in Cosmos 4.6?. I mean the feature mentioned in the 2nd part of this article.\nI'm wondering if going full screen offers responsive capabilities not provided by the responsive controls available.. > @skidding not something I have bandwidth for at the moment, but perhaps making the responsive iframe resizable by dragging on an edge (just as if it were a window) might be a nice feature (the tab at the top would then switch to 'Custom' with live display of your iframe size whilst you're resizing it).\nDefinitely! I was thinking the same thing. Can't make any promises either but it's definitely on my radar. I also felt the need.. Please see https://github.com/react-cosmos/react-cosmos/issues/787#issuecomment-411355703\n. As @zach-albia pointed out, this is also the flow I generally use. For some reason selecting a DOM element sometimes doesn't get selected in the React panel, but usually the 2nd time it does.\n\nAlternatively, it is recommended to use the standalone react-devtools with iframes. But I tried it out and it provides a lesser experience. \n\nBesides a few hard-to-understand errors, the offseting of the selected element seems to be off, and the \"Inspect\" tool is missing altogether, so using the regular devtools React panel seems like the best option.\n\nThe only possible improvement I can imagine is this: Rendering the component in the root frame when going full screen. It will degrade the performance of going back and forth in the browser history, as currently the state is preserved when toggling full screen. But for some edge cases it offers the possiblity to render a component directly (no iframe) as a regular app is. \nStill, most of the time we'll develop with the Cosmos UI present and the component rendered in an iframe, and the iframe limitations of the react-devtools are something we have to live with for now.\n. The problem is that currently the TreeView only supports one level of nesting for fixtures. Components on the other hand support an infinite level of nesting.\nExample:\nA component named MyComp with namespace /path/to/comp will appear like this in the tree view\npath\n  to\n    comp\n      MyComp\nBut a fixture named myFixture with namespace /path/to/fixture will appear like this in the tree view\npath/to/fixture\n  myFixture\nI'll repurpose this issue into a feature request. Here is the relevant code\n. @terrierscript Sorry about that! I've fixed the example in #798.\nPlease try again on the latest master branch, and make sure to follow the special instructions for the Browserify example.\n\n. Thanks! \ud83d\ude05. @zach-albia Happy to hear you made it work!\nI've also got better results from not using Next's webpack config in Cosmos. The Next.js example doesn't use webpackConfigPath and as a matter of fact I don't even know how to import Next's webpack config.\nAnyway, is there anything we can add to the README to save people from digging on their own in the future? Maybe the resolve.extensions bit. It can be in the Next.js section or we can create a dedicated TypeScript section if it's not Next related.. @Rhagaer you need to add these two loaders to your webpack config as well:\n\nhttps://github.com/vanwagonet/img-loader#usage\nhttps://github.com/smitt04/gql-loader#config. > That said, it begs the question: do you think it's time for react-cosmos to have TS type declarations? Are they somewhere on the project roadmap BTW?\n\n@zach-albia It's not on the roadmap but it would be a great addition for sure. Note that while Cosmos has a lot of Flow types, they are for internal use. The only public types here https://github.com/react-cosmos/react-cosmos/blob/master/packages/react-cosmos/index.js.flow and they should be easy to reproduce in TS (they might work as is), but I don't have experience with publishing TS types. If you do let me know!. >  I actually just finished making some public-facing type declarations for Cosmos for use in my project based off of your flow typings. I also have typings for some out-of-the-box proxies that I've used, namely redux, context, and apollo proxies.\nSound great!\n\nAt any rate, would you rather have typings bundled with Cosmos' npm packages or have them published separately in DefinitelyTyped?\n\nWhichever you think is more suited based on your experience with TS. I'm open to both.. Thanks!. > Is this possible via https://github.com/react-cosmos/react-cosmos/tree/master/packages/react-querystring-router? I have been unable to implement the provided examples.\nWow, the docs on react-querystring-router are old. You do set the props via URL query string, but the props of the Cosmos UI\u2014which is also a component, not of the component you load\u2014which is rendered remotely in an iframe.\nIt wouldn't be that useful either as many prop values can't be serialized.\nThere are undocumented ways to remotely control the fixture, because this is how Cosmos works under the hood.  But before exploring uncharted territory, can you please share some test examples? It doesn't need to be real life data, but I'm curious about the use case. For example, why not create fixtures for prop combinations and just click through fixtures via Cypress?\n. Very nice!. CircleCI seems 50% to 100% faster, but I'll leave both CIs run in parallel for a couple of PRs before removing Travis.\n\n\n. Hi @JannesV,\nAs I understand, setting keyLength={0} means that the keys generated by history will be strings with 0 length, so \"\".\nCan you please add a comment explaining the effect and reason for doing this before the return line? I first thought it's related to the length of the entries and others might be similarly confused. Thanks!\nAnd just to make sure I understand: The first entry will always have the key set to \"mocked\", whereas any other entries (generated by test actions) will have the key set to \"\". Right? Ideally we would clear the initial key as well for consistency, but that would be a breaking change for people with existing snapshots so I'm good with your proposed solution.. Hi @ibrahimovfuad,\nComponents are loaded in an iframe to isolate from the Cosmos UI, and that's why mobile device emulation doesn't work as expected. Did you try the built in responsive controls in Cosmos?. Hmm, I think you're right. I didn't think this would work given that the component renders in an iframe. My bad.\nThis should be easy to add. This is where it should be added. Feel free to open a PR.\nIn what situations is shrink-to-fit useful? I've used the other values before but it's the first time I see this one.. You can create a pull request from a fork https://guides.github.com/activities/forking/. > Looking good. Can you please remove .idea from gitignore as it is not project specific? Add it to your global .gitignore if you need it. Meta tag looks good and I'll merge afterwards. Thanks!\nI'll do it to merge this quicker :). Released under 4.7.0-3. Thanks!. @Rhagaer happy to hear it worked out!\nHere's the existing docs:\n\nAny ideas to make it more obvious? Maybe a small code sample underneath like:\njs\n// cosmos.config.js\nmodule.exports = {\n  webpackConfigPath: './config/webpack.config.dev.js'\n};. @Rhagaer If you feel like making a contribution this PR should be very easy to make! :D. Done https://github.com/react-cosmos/react-cosmos#custom-webpack-config. @RPDeshaies Thanks for your detailed analysis! \nI've been thinking about earlier today actually. :)\nI'm currently deeply engaged in executing a roadmap. It's probably going to take another 2 months to complete and deliver the new APIs I'm working on. Afterwards I'll draft a new roadmap which will most likely include opening up a plugin API on the server side, extracting the current webpack support into a plugin and surely creating a core plugin for Parcel.\nLet's keep this thread open until we get there and if anybody wants to get on board with React Cosmos + Parcel sooner hopefully they can use your notes as inspiration.. > Also as a side note, thanks for this awesome project. We use it on a day to day basis at my job now.\n\ud83e\udd18\n\nBecause when you guys released the newest version of the app, I had to check the code diff in the source code of that project to realized that you added a platform and plugin.responsivePreview property to the object of mountPlayground that crashed react cosmos when undefined ! \n\nOuch! I'll be more careful the next time I introduce a change like this!\n\nMaybe for the time being, since those APIs are not ready, we could include more doc on how to spin up react cosmos with your own integration.\n\nGood idea. The only problem is I'm reshaping those building blocks at the moment and I would prefer documenting them afterwards.\nHere's another idea: Since you already figured out the Parcel integration, maybe we can create a parcel-example repo in the Cosmos organization to help people get started until better support arrives? I know we all have tons of things to do, but if you're interested in setting this up I'd be more than happy to create the repo and give you write permissions!. I'm down :) It's still pretty fresh in my mind it should not take me too much time.\nNice! https://github.com/react-cosmos/parcel-example\n\nI'll still create a PR to have your feedback if you don't mind !\n\nFor sure.. @kbirulia Can you please show me a screenshot of the error where it occurs? \nAs Cosmos has two separate builds (the first is built before being published on npm and the second is built using the user's configuration when running Cosmos), I'd like to understand which is the issue related to.\nThanks for your help!. Thanks @kbirulia!\nI tested in a Window VM and could confirm your experience. I also discovered a few other small problems when working on Cosmos on Windows that I'll address shortly.. @kbirulia This is fixed react-cosmos@4.7.0-4 (beta release). Let me know if all's good if you have the chance.. Hi @ibrahimovfuad,\nAt the moment you can create plugins through Proxies. To learn how to create one, check out the Proxy boilerplate. It also mentions a few key points on how proxies work. You can ignore the Flow types from the  example.\nAlso relevant, I'm working on opening up more powerful plugin API, but it's going take some time before those become available. To make my working agenda as tranparent as I can, I just added this banner on the README:\n\nMajor changes are afoot! In a nutshell, you'll get an easier, more flexible way to express fixtures, as well as a powerful plugin API for extending the Cosmos UI. The plan is outlined here.\nMeanwhile, I apologize if this creates a period of confusion. Soon I'll dark launch new functionality that Cosmos early adopters can enable to peak into the future and help shape it. Follow @ReactCosmos to get notified.\n\nI'll close this for now to prevent spending time on too many threads, but feel free to ask further questions. Thanks!. Hi @pungggi,\nCosmos can only show the correct name if the hoc \"forwards\" the name. In other words, Cosmos only has access to the root component (and its class name), which is what the hoc returns. \nHere's what the react-router hoc does this.\nWhere does Mutation come from? Maybe you can make it do the same.. @kbirulia Even the tests run on Windows now \ud83d\ude05\n\n. Dist file size diff between Babel 6 (red) and Babel 7 (green)\ndiff\n-     2486 Aug 29 03:27 packages/react-cosmos-apollo-proxy/dist/fixtureLink.js\n+     2418 Aug 29 03:21 packages/react-cosmos-apollo-proxy/dist/fixtureLink.js\n-     5230 Aug 29 03:27 packages/react-cosmos-apollo-proxy/dist/index.js\n+     5252 Aug 29 03:21 packages/react-cosmos-apollo-proxy/dist/index.js\n-      385 Aug 29 03:27 packages/react-cosmos-config/dist/config-templates.js\n+      440 Aug 29 03:21 packages/react-cosmos-config/dist/config-templates.js\n-     5349 Aug 29 03:27 packages/react-cosmos-config/dist/index.js\n+     5357 Aug 29 03:21 packages/react-cosmos-config/dist/index.js\n-      414 Aug 29 03:27 packages/react-cosmos-config/dist/log.js\n+      412 Aug 29 03:21 packages/react-cosmos-config/dist/log.js\n-     2602 Aug 29 03:27 packages/react-cosmos-context-proxy/dist/index.js\n+     2582 Aug 29 03:21 packages/react-cosmos-context-proxy/dist/index.js\n-     3941 Aug 29 03:27 packages/react-cosmos-fetch-proxy/dist/index.js\n+     3756 Aug 29 03:21 packages/react-cosmos-fetch-proxy/dist/index.js\n-     7147 Aug 29 03:27 packages/react-cosmos-fixture/dist/CaptureProps.js\n+     7058 Aug 29 03:21 packages/react-cosmos-fixture/dist/CaptureProps.js\n-    10558 Aug 29 03:27 packages/react-cosmos-fixture/dist/ComponentState.js\n+    11180 Aug 29 03:21 packages/react-cosmos-fixture/dist/ComponentState.js\n-      349 Aug 29 03:27 packages/react-cosmos-fixture/dist/FixtureContext.js\n+      361 Aug 29 03:21 packages/react-cosmos-fixture/dist/FixtureContext.js\n-    12110 Aug 29 03:27 packages/react-cosmos-loader/dist/connect-loader.js\n+    13224 Aug 29 03:21 packages/react-cosmos-loader/dist/connect-loader.js\n-     6236 Aug 29 03:27 packages/react-cosmos-loader/dist/create-context.js\n+     5982 Aug 29 03:21 packages/react-cosmos-loader/dist/create-context.js\n-     5808 Aug 29 03:27 packages/react-cosmos-loader/dist/native.js\n+     6130 Aug 29 03:21 packages/react-cosmos-loader/dist/native.js\n-     3153 Aug 29 03:27 packages/react-cosmos-localstorage-proxy/dist/index.js\n+     3601 Aug 29 03:21 packages/react-cosmos-localstorage-proxy/dist/index.js\n-     1786 Aug 29 03:27 packages/react-cosmos-localstorage-proxy/dist/local-storage-mock.js\n+     2008 Aug 29 03:21 packages/react-cosmos-localstorage-proxy/dist/local-storage-mock.js\n-     3151 Aug 29 03:27 packages/react-cosmos-normalize-props-proxy/dist/index.js\n+     3029 Aug 29 03:21 packages/react-cosmos-normalize-props-proxy/dist/index.js\n-      182 Aug 29 01:49 packages/react-cosmos-playground/dist/index.html\n+      182 Aug 29 01:49 packages/react-cosmos-playground/dist/index.html\n-  1010789 Aug 29 03:29 packages/react-cosmos-playground/dist/index.js\n+   998775 Aug 29 03:23 packages/react-cosmos-playground/dist/index.js\n-   721427 Aug 29 03:29 packages/react-cosmos-playground/dist/index.js.map\n+   721427 Aug 29 03:23 packages/react-cosmos-playground/dist/index.js.map\n-     5286 Aug 29 03:27 packages/react-cosmos-redux-proxy/dist/index.js\n+     5750 Aug 29 03:21 packages/react-cosmos-redux-proxy/dist/index.js\n-       13 Aug 29 03:27 packages/react-cosmos-redux-proxy/dist/redux-types.js\n+       13 Aug 29 03:21 packages/react-cosmos-redux-proxy/dist/redux-types.js\n-     2624 Aug 29 03:27 packages/react-cosmos-router-proxy/dist/LocationInterceptor.js\n+     2632 Aug 29 03:21 packages/react-cosmos-router-proxy/dist/LocationInterceptor.js\n-     3046 Aug 29 03:27 packages/react-cosmos-router-proxy/dist/index.js\n+     2990 Aug 29 03:21 packages/react-cosmos-router-proxy/dist/index.js\n-     2145 Aug 29 03:27 packages/react-cosmos-scripts/dist/upgrade-fixtures.js\n+     2027 Aug 29 03:21 packages/react-cosmos-scripts/dist/upgrade-fixtures.js\n-     4734 Aug 29 03:27 packages/react-cosmos-shared/dist/fixtures-format.js\n+     4736 Aug 29 03:21 packages/react-cosmos-shared/dist/fixtures-format.js\n-      572 Aug 29 03:27 packages/react-cosmos-shared/dist/import-module.js\n+      572 Aug 29 03:21 packages/react-cosmos-shared/dist/import-module.js\n-     1625 Aug 29 03:27 packages/react-cosmos-shared/dist/unserializable-parts.js\n+     1693 Aug 29 03:21 packages/react-cosmos-shared/dist/unserializable-parts.js\n-     7694 Aug 29 03:27 packages/react-cosmos-state-proxy/dist/index.js\n+     8324 Aug 29 03:21 packages/react-cosmos-state-proxy/dist/index.js\n-     6435 Aug 29 03:27 packages/react-cosmos-telescope/dist/run-tests.js\n+     6465 Aug 29 03:21 packages/react-cosmos-telescope/dist/run-tests.js\n-     2662 Aug 29 03:27 packages/react-cosmos-test/dist/enzyme.js\n+     2370 Aug 29 03:21 packages/react-cosmos-test/dist/enzyme.js\n-     2514 Aug 29 03:27 packages/react-cosmos-test/dist/generic.js\n+     2473 Aug 29 03:21 packages/react-cosmos-test/dist/generic.js\n-      535 Aug 29 03:27 packages/react-cosmos-voyager/dist/fixture-extensions.js\n+      845 Aug 29 03:21 packages/react-cosmos-voyager/dist/fixture-extensions.js\n-     5279 Aug 29 03:27 packages/react-cosmos-voyager/dist/get-file-paths.js\n+     5154 Aug 29 03:21 packages/react-cosmos-voyager/dist/get-file-paths.js\n-     1827 Aug 29 03:27 packages/react-cosmos-voyager/dist/match-fixture-path.js\n+     1955 Aug 29 03:21 packages/react-cosmos-voyager/dist/match-fixture-path.js\n-     4006 Aug 29 03:27 packages/react-cosmos-xhr-proxy/dist/index.js\n+     3935 Aug 29 03:21 packages/react-cosmos-xhr-proxy/dist/index.js\n-      172 Aug 29 03:27 packages/react-cosmos/dist/index.js\n+      173 Aug 29 03:21 packages/react-cosmos/dist/index.js\n-     3638 Aug 29 03:27 packages/react-querystring-router/dist/router.js\n+     3548 Aug 29 03:21 packages/react-querystring-router/dist/router.js\n-     2233 Aug 29 03:27 packages/react-querystring-router/dist/uri.js\n+     2070 Aug 29 03:21 packages/react-querystring-router/dist/uri.js\nMore or less the same.. > Dark launch ? \ud83d\ude31 \ud83d\udc7a\nYeah, meaning it will be in production, but nothing will change for existing users. However, if you set next: true in your config a brand new (experimental) universe will open up to you!\nI'll document how to use the new APIs once this is ready. \ud83e\udd18. Hi @wec84,\nThank you for the elaborate response! \nUnfortunately this is a known limitation (for now), so maybe we add this to the docs to inform people sooner.\nThe problem is this: Once you wrap a component, the instance of the inner component is no longer accessible, it's a private detail of the wrapper component, which what Cosmos receives when you have a fixture for a wrapped component.\nBut what about forwardRef, you might ask? Yes, that is the cure. But redux-connect does not use it yet.\nHere's a thread: https://github.com/reduxjs/react-redux/issues/914\nAnd here's a PR where they're working to add it in react-redux version 6.x https://github.com/reduxjs/react-redux/pull/1000. > @skidding just so you're aware it appears that they decided to release it in 5.1.0. I've upgraded my versions of redux and react-redux to the latest versions and it doesn't appear that this fixes the issue. Are you aware of changes that need to be made to this project in order for it to work?\nThanks for the heads-up, @adam8810!\nI didn't get my hands on react-redux 5.1 yet. If you share an example repo I'll look into it and report back with my findings!. I glanced quickly over this commit and connectAdvanced.js, and it seems forwardRef is opt-in. You may need to pass forwardRef: true to connect options. \nLet me know if it works.. Let me know if you have any update on this. Note that react-redux6+ isn't supported at the moment.. Hey @keyserfaty,\nDid you create any fixture?\nAnd can you please share the contents of the auto-generated cosmos.modules file?\nThanks!. Hmm, they both look right.\nNot getting any error/weird message in either the browser console of the React Native build log?\nIt's likely that the React Native runtime can't connect to the browser remotely. Most of my experience is with create-react-native-app (Expo), so maybe there's a blind spot in the current Cosmos integration with regards to the larger RN landscape.\nHere's how the websockets URL is constructed.\n```js\nimport parse from 'url-parse';\nfunction getSocketUrl(port: number) {\n  const host = parse(NativeModules.SourceCode.scriptURL).hostname;\nreturn ws://${host}:${port};\n}\n```\nIf you can, try logging the value returned by this function to see if the URL is valid and if it points to your local computer, where the Cosmos server and UI are running.. > Was able to do it. It prints out: ws://localhost:8989\nI'm not sure if it should be localhost, given that the Native code runs in a sandboxed environment.\nI just ran react-cosmos/create-react-native-app-example on my Android phone and the socket URL ends up being ws://10.0.1.4:8989.\nUntil we come up with a better idea, can you also try the example repo above to determine if the problem is project related or if you're getting a different experience on your system?\n. Unfortunately I'm afraid this is outside my area of knowledge. It would be great if someone with more React Native experience could pitch in.\nIf you think you can obtain the IP address some other way (if indeed this is the issue), I could add an option to CosmosNativeLoader to pass down the URL manually.. > BTW @keyserfaty do you know about https://github.com/jerolimov/react-native-cosmos ?\nThe project hasn't been updated in 2/3 years so I doubt it still works with latest react-cosmos.. No worries! Thanks for sharing. I just wanted to throw in my 2 cents and potentially save someone headaches from using outdated stuff :D. \ud83c\udfa9. @koggdal Good catch!\nDon't have time to get to this soon, but I'll leave this open as a bug in case anyone wants to lend a hand.\n\nUnfortunately I ran into build issues with Babel when trying to get the react-cosmos repo running locally, and I don't have time currently to dig deeper to fix it.\n\nI can help with this. Let me know what went wrong and I'll try to fix it.. @koggdal Turns out the examples were no longer working since upgrading to Babel 7. Maybe this is what you were experiencing it. FYI I fixed it in #839.. > Component path is broken in the cosmos playground tree when fixture data are generated on the fly.\nYou are right, this is a limitation. As you said, the namespace is inferred statically from the component file path. The static analysis done is limited and cannot understand complex dynamically-generated fixtures.\nThe manual namespace property exists as a backup plan. I see you already use it for the fixture, but note that you can also set it for the component. The entire tree path is composed like this: componentNamespace/componentName/fixtureNamespace/fixtureName. Since the componentNamespace can't be identified statically (and isn't accessible at runtime), you can set it manually as well.\nThis solution is not very pretty either, but if you set Icon.namespace = '@base' I believe you'll achieve the desired effect.. @shahkashani Great idea! Did you try the Global Jest snapshot? I think it can serve as overall fixture validation, diffing aside.. Hey @shahkashani!\nI agree this is an important feature. It's not quite in my top priority list right now, but depending on what solution we come with and how straightforward it is to implement I might accelerate this feature's priority.\nHere's the solutions I envison at the moment:\n1. UI button\nHave a \"check all\" button in the UI next to the tree view. When you press it, Cosmos traverses all fixtures and captures any runtime errors. As fixtures load, they can either be visible in the preview area (similar to e2e test runners) or invisible in an additional hidden iframe. As errors are captured a (!) icon can appear next to each fixture. The error state can be sticky (possibly remembered in browser storage like we do with other stuff already) until the fixture is loaded again without errors---either via \"check all\" button or by selecting that specific fixture normally.\nThis is useful in development because you find out about errors quickly. But not so easy to run from the CLI. More on this soon.\n2. CLI command\nHave a react-cosmos-check command, similar to what you proposed, that spins up a headless process, loads all fixtures and captures errors. This is neat, but I see two avenues here:\nA. Use something like Jest, which comes with a pre-configured jsdom environment. This would require less work but would couple Cosmos with Jest, something I'd like to avoid in the future. At this point this might as well be a 3rd party project that uses Cosmos + Jest to achieve this function. Also, and maybe more importantly, even with jsdom being near browser perfect there will undoubtedly be annoying cases where a fixture works in the browser but not in jsdom or viceversa. This might be the quickest approach but it smells danger to me.\nB. Wire up the headless browser manually and use proper DOM rendering. This removes the \"works here but not there\" issues, allows us more control over the user experience and doesn't couple Cosmos with Jest (or any other alternative). But this obviously requires more work.\n3. The Holy Grail (1 + 2)\nNow that I've layed down these two options, I'm thinking the ideal scenario is to have both. Add the UI functionality to validate fixtures and quickly see when a fixture no longer works. Then create a CLI script that spins up a headless browser, which opens the Cosmos UI and presses the \"check all\" button (either literally or triggers it through special URL route) and collects the names of the fixtures that errored. The script can display that information nicely and use it to determine the status code (brokenFixtures.length > 0 ? 1 : 0).\nI know it's a lot but I'd rather invest more in the right solution that waste time with shortcuts that will give us headaches later on.\nI'd love to hear your and other people's thoughts on this!. Hi @robhdawson,\nI'm happy you found a solution that works for you. The solutions I was discussing are meant for Cosmos Next anyway, and will likely take some time before becoming reality.\nMeanwhile, if you'd like to contribute to react-cosmos-telescope and enable other existing Cosmos users to benefit from your solution I welcome that!. Hi @koggdal,\nThanks for fixing this!\n\nThe file isn't tested very well, so 80% code coverage requirement forced me to add a test for some existing things as well.\n\nSorry about that hard requirement regarding coverage. I don't find it useful all the time so I think I'll disable it after this PR.  I find mocking console.error and process.exit overkill to be honest, so if you don't mind, it would be easier if you reverted the test changes and left the initial fix in this PR. Which, aside from stylistic comments, is good to merge.. > @skidding Okay sure! I find it a bit sad to not test important things though.\nThanks! What do you feel is important and not tested? I'm interested in broadening my testing philosophy and maybe we can add some tests later.. > Thanks for merging! :)\nThanks for your contribution! You can start using your code under v4.7.0-10\n\nThe fact that you now can rely on the process exiting with the right exit code is quite a nice thing to be able to rely on in a project's build tools.\n\nI agree. I recently started using process exit codes in some react-cosmos scripts, but this was an earlier code from when I didn't have this practice in mind.\n\nThe exact error messages maybe don't need to be tested, but it's nice if tests break when expected behavior (errors being logged) breaks.\n\nI believe error messages are a bit too much to test. I'm sure I did it in the past and I definitely see the appeal, but lately I've been cutting down on what I test because, based on previous experience, I found that testing a lot of trivial details can add a lot of overhead to refactoring. But I'm not against testing error codes, that's actually a good idea.\nBtw, I prefered reverting that commit because I'm busy this week so it was easier for me to review the first part and merge it quicker. Sorry if I came off as dismissive!\n. ({ ...config, ...nextConfig.webpack() }) does shallow merging, which is not enough for merging webpack configs. \nDoes this work?\njs\nwebpack: () => nextConfig.webpack()\nIe. Use Next's webpack config entirely.. Try this:\njs\nmodule.exports = {\n  globalImports: ['babel-polyfill', './global.css'],\n};. > I suggest updating the docs\nYes! babel-polyfill is maybe the most popular example.. @callumlocke Thanks!. Disabled Greenkeeper until https://github.com/greenkeeperio/greenkeeper/issues/921 is fixed.. Hi @cloudratha,\nProps transition is not possible in Cosmos at the moment. But it will be. I'm currently hard at work on the next major version which will, among other things, have this functionality. You'll be able to choose whether to reset or transition props. And it will be using nice inputs for each prop, instead of one big JSON editor.\nSee the README header and the included links for release information. I can't give exact estimations but I'm spending most of my time on this release.\nMeanwhile, I'll leave this open in case anybody else has the same question.\n. Hi @smesko85 \nWere you using Cosmos with React Native when it worked?. > Since the project is introducing breaking changes on minor versions update, this could be a problem.\nThis is the root problem. Sorry about the inconvenience!\nI plan to be more careful in the future, but in the past we tended to follow semver for react-cosmos package only, as very few people use the underlying packages directly.\nDo you have a custom setup? The playground component should receive props.options.platform: \"web\" and it seems like in your case it doesn't (after you upgrade). Due to a very silly logic, when it's missing it defaults to native \ud83d\ude1e.\nI'm asking because when using the Cosmos CLI these props are generated automatically.. > ...but in the past we tended to follow semver for react-cosmos package only, as very few people use the underlying packages directly.\nI realize that this doesn't necessarily address your point. Even so, you might want to pin react-cosmos to a patch version and still get patches and new features from Cosmos deps. You're right.. Please report if you have other problems in the future!. Hi @wongsynee,\nI think the easiest route is to use a custom html template. Do you already have an index.html template in your project?\nCosmos uses html-webpack-plugin, which creates a default html template. But you can override it. Not sure if you use a custom webpack config with Cosmos already, but you can customize Cosmos' webpack config to specify custom html-webpack-plugin options, which has loads and options of plugins for customizing the html output.\nLet me know this if you have further questions or hit another roadblock.\n\nMany thanks for this amazing project! It's really cool!\n\n\ud83d\ude4f. Hi @jpeyper,\nThanks for your thoughtful PR!\nI think Flow can't decide between the two cases because httpProxy.context can be present in each. You might get a passing result by changing the if to if (typeof httpProxy.context === 'string') {. If it still doesn't work let me know and I'll check out your branch and figure it out. Flow can be stubborn :)\nAs a minimal hint that this feature exists, I advise adding the following line in the README docs:\ndiff\n   // HTTP proxy specific requests to a different target\n+  // For advanced usage see https://github.com/react-cosmos/react-cosmos/pull/875\n   httpProxy: {\n     context: '/api',\n     target: 'http://localhost:4000/api'\n   },\n. Excellent @jpeyper! \ud83d\udc4f. This contribution has been released under react-cosmos@4.7.0-17 (beta channel).. Hi @tryggvigy,\nThis looks good! I do have some suggestions:\n\nYou can use regular expression to achieve the same thing. Eg. \njs\n   'connect(withRouter(MyComponent))'.replace(/^(.*\\()?(.+?)\\)*$/, '$2') // MyComponent\nThe regexp makes it bit harder to read, but I think you can make the function self explanatory by calling it something like stripHocNamesFromComponentName, which also makes the current comments redundant. Instead, it would be more interesting to add some comments with component name examples and their respective return value, so that the reader understands the possible function input and output. Like the ones used here to test the regexp.\n\n\nI want to get your thoughts on this before writing more code/tests.\n\nDon't worry too much about tests as I plan to refactor this part of the UI anyway.\n\n\nAnother approach could be to allow users to provide a sortComponentsBy: () =>{} function through cosmos.config.js.\n\nThis could perhaps be provided through the runtimeConfig introduced in https://github.com/react-cosmos/react-cosmos/pull/877\n\nWe can't put unserializable options (function in this case) in cosmos.config because it is not imported directly in the client bundle. cosmos.config uses Node code so isn't suited for bundling. Instead, some serialiable options are stringified and safely injected into the client bundle. But I'll address this in the other PR.. Excellent! \ud83d\udc4f. Try it out under react-cosmos@4.7.0-16. Passing UI options in the config is a good idea but has a lot of implications that I would prefer to avoid at the moment. Mainly because a great refactor is on the way and I'd like to wait and introduce this pattern along with the other main changes that are coming.\nThat said, I think preferring collapsing is a good default and I've always been annoyined by the current behavior. I hope this won't piss people off, but I say we just switch to collapsing fixtures by default for now. What do you think?\nWe can become more refined with configuration on the next version of Cosmos (that's mentioned in the root README).. Hi @tryggvigy,\nThe build is failling. Can you please update the tests to reflect your changes?. Oh, right! \ud83d\ude05\nThe Cypress tests that actually click through the interface expected all fixtures to be visible. They're all in this file. You should be able to add another step to toggle the component and then click on fixture.\nThanks!. Yeah, it got a bit tricker. The Cypress tests are no longer deterministic, because of how collapsed state is stored into LocalStorage. Initially components are collapsed, but after the first run they will be open. So toggling blindly isn't enough.\nHow about this? \ud83d\ude0e\n```diff\ndiff --git a/cypress/integration/example-local-state.js b/cypress/integration/example-local-state.js\nindex 627d72c2..433db058 100644\n--- a/cypress/integration/example-local-state.js\n+++ b/cypress/integration/example-local-state.js\n@@ -1,13 +1,26 @@\n import { getSelector } from '../support/utils/css-modules';\n+const componentButtonSel = getSelector('index__componentName');\n const fixtureButtonSel = getSelector('index__fixture');\n // The first menu button is the fixture editor toggle\n const editorButtonSel = ${getSelector('index__button')}:eq(1);\n-function selectFixture(fixtureName) {\n+function selectFixture(componentName, fixtureName) {\n   cy.get(fixtureButtonSel)\n     .contains(fixtureName)\n-    .click();\n+    .then($fixtureBtn => {\n+      if ($fixtureBtn.is(':visible')) {\n+        return $fixtureBtn.click();\n+      }\n+\n+      return cy\n+        .get(componentButtonSel)\n+        .contains(componentName)\n+        .then($componentBtn => {\n+          $componentBtn.click();\n+          $fixtureBtn.click();\n+        });\n+    });\n }\nfunction toggleFixtureEditor() {\n@@ -60,7 +73,7 @@ describe('Local state example', () => {\ncontext('select fixture', () => {\n     beforeEach(() => {\n-      selectFixture('one-two-three');\n+      selectFixture('CounterList', 'one-two-three');\n     });\n it('should add active class to fixture button', () => {\n\n@@ -82,7 +95,7 @@ describe('Local state example', () => {\ncontext('fixture editor', () => {\n     beforeEach(() => {\n-      selectFixture('one-two-three');\n+      selectFixture('CounterList', 'one-two-three');\n       toggleFixtureEditor();\n     });\n@@ -107,7 +120,7 @@ describe('Local state example', () => {\ncontext('fixture update', () => {\n     beforeEach(() => {\n-      selectFixture('one-two-three');\n+      selectFixture('CounterList', 'one-two-three');\n       toggleFixtureEditor();\n   // Click three times on the first button\n\n```. @tryggvigy Thanks!\n\nI marked this as a feature, although it does change existing behavior \ud83d\ude2c. This contribution has been released under react-cosmos@4.7.0-17 (beta channel).. Try it out under 4.7.0-16. Thanks!. Hi @alfredvaa,\n\nFixtures are grouped per component type. And each time you call CosmosWrapper you generate a new component type. Unless you pass different params to the HOC for each fixture, maybe you can do this?\n```js\nconst WrappedComponent = CosmosWrapper(UIInputText);\nexport default [\n  {\n    name: 'Default',\n    component: WrappedComponent,\n    props: {\n      placeholder: 'Placeholder',\n      title: 'Title',\n    },\n  },\n  {\n    name: 'No placeholder',\n    component: WrappedComponent,\n    props: {\n      title: 'Title',\n    },\n  },\n];\n```. Hi @justinglibert,\nThat is on purpose. The Redux proxy has a disableLocalState option that's enabled by default. You can set it to false in your cosmos proxies file.\nThe reason why this was done (a long time ago), was because the state of Redux-connected components is a big nasty, you see a lot of internal Redux state...\nOnce react-redux starts using forwardRef this problem will go away completely.. Hi @alfredvaa,\nAre you using React devtools? I think it's the easiest way to see if the Redux state gets populated.\nAlso, make sure testReducer is the state attribute the testReducer gets assigned to when you compose reducers into the root one. Feel free to share your store/reducer config and I'll be able to tell more.. I'd be great if someone could pick this up. \nFor what it's worth @react-mock/fetch uses fetch-mock@7.x so we can use that for inspiration.\nAs long as the proxy API doesn't change we can publish this with the next patch version.. This one was a bit of an indulgence on my part, but its implications on the long run are huge. Check this out:\n\n. Hi @furious-luke,\nThanks for reporting this. Odd behavior :)\nCould you share a minimal repo reproducing this? I'm willing to investigate, but unfortunately it would take more time than I have at the moment to create everything from scratch myself.. Thanks for the tip @nakedcity. I'm sure that old piece of code can be improved :). Would you be interested in submitting a PR?. Beautiful, thanks!. Excellent!. Hi @calldanfeng,\nThanks for reporting this, I can confirm it's true.\nReact Redux 6 switched from the old React context API to the new one (source). The Cosmos Redux proxy mimics the Redux provider, so it needs to be changed to use the new context API as well.\nI believe the best strategy is to fork the react-cosmos-redux-proxy package into react-cosmos-redux-proxy2 or react-cosmos-redux-proxy6 (to match react-redux's version), to not disturb users who still depend on older versions of react-redux.\nThe work is fairly straightforward, but it still requires time. Time that unfortunately I can't spare at the moment, because I'm putting all my time and energy into shipping Cosmos Next (which incidentally will make stuff like mocking Redux state more trivial, potentially without requiring any additional proxy).\nI'll leave this open in case anyone else wants to help. I think the easiest course of action to provide relief to anyone wanting to upgrade to react-redux6 is to fork (ie. copy paste from monorepo) react-cosmos-redux-proxy into a personal repo, and publish a separate package that only works with react-redux6 and above. I'm willing to provide guidance and review such a repo if anyone is interested!\nI've added a mention in the README about this.\n. Sneak peak \ud83d\ude0d\n\n. Hi @dep,\nDo you import react-cosmos-flow yourself in any file? It's hard to see from the stack trace because it's all Babel parse modules.. Good news,\nCan you try using import { createFixture } from 'react-cosmos' instead?\nFrom what I recall react-cosmos-flow was deprecated in favor of this simpler approach.. Did you config Cosmos to use CRA's webpack config? See https://github.com/react-cosmos/react-cosmos#create-react-app. This has to do with your webpack config and not Cosmos. It's likely that the wanted webpack config isn't passed to Cosmos correctly. Let me know if you still have this issue.. @stvmachine Thanks for looking into this! I think the webpack config path changed in CRA.\nThe Cosmos docs say you have to set webpackConfigPath: 'react-scripts/config/webpack.config.dev', but I think the webpack path changed in the last versions of CRA. Can you try setting webpackConfigPath: 'react-scripts/config/webpack.config' instead please?\nAnd in any case, check the terminal logs to see if Cosmos manages to pick up the CRA webpack config or uses a default one.. I've updated the docs to reflect this: https://github.com/react-cosmos/react-cosmos#create-react-app\nThank you both for reporting this!. Hi @andyrichardson,\nThanks for working on this, but some existing functionality has been removed in the process. One reason why the Redux store is created by hand at the moment is to be able to listen to changes and update the fixture (relevant piece of code).\nThe disableLocalState flag also has a purpose. Cosmos reads the loaded component's state automatically and shows it in the fixture editor. Redux-connected components (those generated by connect HoC) have state, but it's cached (I think) Redux state which shouldn't be shown to the user because the Redux state is already captured. So when use Redux-connected components we disable local state (pass down a flag to inner proxies) to avoid this duplication.\nYou can see the Redux state being updated in the the main README gif.\n. Maybe publish a separate package for react-redux6+ support. Eg. react-cosmos-redux-proxy2 or react-cosmos-redux-proxy6 (to match the version number). And if you want to skip the whole fixture update thing (which greatly simplifies this proxy) you can maintain this proxy in a personal repo and we'll link to it in the Redux part of the docs. I think this is the most effortless approach to add support for react-redux6+ users. And I wouldn't invest too much in this proxy anyway since Cosmos Next will require a different approach.. Hi @tomitrescak,\nThanks! \ud83d\ude4f\n\nNot possible yet. Could you help me understand your use case? I\u2019m gathering info for deciding on the next batch of features to add in Cosmos Next.\nIt\u2019s not directly portable, but I\u2019d say 80-90% of the Apollo proxy code is portable so we just need to adapt it to the new fixture format going forward. Note that I won\u2019t push Cosmos Next as the primary Cosmos version until we have ported the main 3rd party plugins (like the Apollo proxy).. > For example, when I export three fixtures from the same file each of them can represent a different state of the component.\n\nYou know what, I've been thinking about this lately too and now that you mention it I'm strongly considering adding this functionality in the next batch of Cosmos Next features.\nHow about this: Besides being able to export a fixture (ie. a JSX element) from  a fixture file, you can also export a dictionary with multiple fixtures and the key for each fixture in the dictionary becomes the name of its corresponding fixture in the tree view. This means that a multiple fixtures file will look like a folder in the UI.\nEg.\njs\n// myfixture.js\nexport default {\n  'Component With Error': <MyComponent ... />,\n  'Component Loading': <MyComponent ... />,\n  'Component Loaded Single Entry': <MyComponent ... />\n}\n\nmyfixture will become a dir with three items in the tree view.\n\nWhat do you think? Does this solve your needs?\n\nInitially I wanted to tackle this problem by allowing named exports in fixture files, where the name of the export becomes the name of the fixture. The named export solution is more elegant I think. But I now believe that the solution above has three advantages:\n\nIt's easier to implement. Handling named exports requires separate heuristics between ES6 and ES5 modules.\nNamed exports can't contain spaces (and probably other chars that you can put in an object key).\nPutting all fixtures in a single exports leaves the opportunity for a feature that I don't know if we're ever going to pursue, but it sounds cool so nice not to rule it out: Allow fixtures exported from files that also contain the source code. Eg. A button component with usage examples in the same file. Someone suggested this on Slack and I made the connection with this thread. Again, not planning to go in that direction but I like that this solution doesn't close that opportunity.\n\nHappy to hear any other thoughts on this!. The third type is very close to how Cosmos works in the stable version. The reason I'm moving away from that is because it's less natural than writing JSX, and you can put the \"other API props\" in decorators around the component. See https://github.com/skidding/react-mock. The disadvantage to JSX is the additional nesting every layer adds, but it has other advantages like type safety.\nEdit: Arrays also the advantage of enforcing a specific order, but so do object keys (in JS specifically) from what I've heard recently.. Hey @MattReimer, thanks for sharing this!\nWould you mind putting this info in the README somewhere? Either under Integration with popular tools or Exporting. Thanks!. Excellent. Thanks for sharing your wisdom!. @mentaman Check out how it's done in the Flatris repo https://github.com/skidding/flatris/blob/4014027ff38fcff64bf3197cc2f6356b6f66643d/web/components/pages/fixtures/Dashboard/games-added.js#L24-L29. You're welcome!. Is the component a connected component? If the compRef is undefined than the component appears to be a function component, which inherently doesn\u2019t have an instance and thus a ref.. Hi Ryan (awesome handle btw \ud83d\ude04)\nYou're right, containerQuerySelector isn't supported by Cosmos Next. I cut a lot of corners to release it as soon as possible and this was one of those corners.\nBut this is also something easy to add so I'm bookmarking this issue to fix it in the next release of Cosmos Next, which is going to include a bunch of other goodies like support for multiple named fixtures in a fixture file.. This is sketchy... Wouldn't it make it clear to have these two methods?\n1. resetData(props) \u2014 Uses props argument instead of relying on this.props. componentWillReceiveProps will continue to check for a change in dataUrl and call this.resetData(nextProps) when needed\n2. public refreshData() \u2014 Does this.resetData(this.props)\n// Updated name of second method\n. > The only reason this test fails on the old code is because React uses the isMounted internally when throwing that invariant error. If that changes in the future this test will no longer be relevant. This test is now coupled to the implementation of React.\nThis is correct if the test were called should not throw exception when aborting request, but it's called should not set state on unmounted components when aborting request, so it's fine for me to rely on the mounting API. The problem is that I didn't assert on a setState spy instead of looking for exceptions (this is how I started out but for some reason I went with the exception assert afterwards).\n\nDoing the above, you'll find out something very interesting. this.isMounted() returns true in componentWillUnmount http://jsbin.com/yemir/1/edit?js,console,output. Calling setState here will throw an invariant error. Therefore, you cannot guard that setState call with isMounted(). The new code would still crash in production.\n\nThis, however, is very important. Considering how fast we move between pages with dozens of concurrent requests the probability to abort a request between componentWillUnmount and componentDidMount is very real. It seems like a React flaw if you can't tell whether or not a component is unmounting (and, in this case, whether or not it's OK to setState).\n\nMaybe we can figure out if the request was aborted by checking the error code inside the callback and only do setState if the request wasn't aborted?\n\nSounds slick, but not very predictable.\n1. It becomes coupled to the way jQuery wraps Ajax requests\n2. It has the expectations that Ajax requests handled by DataFetch will only be aborted 1. by the DataFetch mixin (maybe there's a global way to abort Ajax requests) and 2. during unmounting (maybe someone adds functionality to DataFetch in the future and isn't aware of this)\nAt this point it seems the solution needs to be a clear and simple one: Add a flag like _componentIsUnmounting: true on the instance directly and check for it in the error callback. My only issue with this is that it feels wrong for a mixin like DataFetch to add a field so generic on components.\n. I think userConfig would be more suggestive for this var\n. Is there no reliable (sync) way to check if a file exists? I for one try to use try catch as a last resort.\nAfter doing a couple of searches on the topic, I noticed Node is deprecating most sync functions for check if a file exists, but maybe you have more recent experience with Node...\n. Any particular reason to use component-playground.config instead of component-playground.config.js?\n. The closing parenthesis should preferably sit at the end of the previous line\n. Why re-indent these lines? I prefer 4 line indenting when aligning multiline declarations or calls. It's part of the Google JS style guide that I follow. This applies for the lines you added above as well.\nPS. I'm in the process of composing a contributing guide to make the PR process smoother.\n. This is a bit long considering the relatively small width of the left nav. And \"-fixture\" is unnecessary since they're all fixtures :)\nHow about auto-empty?\n. This contains the user config plus all the Cosmos defaults, so let's call it just config.\n. This line has over 80 chars, and it failed the build: https://travis-ci.org/skidding/cosmos/builds/66354068#L401\n(Will probably be fixed once you rename to config, though)\n. Is this PR ready? This should be config.webpack.\n. You also need to replace localhost with ' + config.server.hostname + '.\nPlease test this yourself as well afterwards.\nPS. It's going to be > 80 chars so something like this would do:\njs\n    'webpack-dev-server/client?http://' + config.server.hostname + ':' + \n                                          config.server.port,\n. This example is a bit confusing, why would be the extra file be outside the project (../../..), since the config file is located in the root of your project, right?\nAlso, since you gave Bootstrap as an example, it might be useful to have the bootstrap file in the example as well. (unless you need many extra files and it looks ugly, I guess...)\n. > I suppose most use cases would include external file from CDN, in which case you need a custom JS file to inject actual script/style tags.\nSo webpack doesn't support external files as entry points?\n\nUsing ./injectStyleTag.js would look for the file in cosmos project inside node_modules. In this case the file injectStyleTag.js is actually in the root of my project. I agree it looks a bit odd, but I'm not sure how to get around it.\n\nMaybe you could use path.join(process.cwd(), 'injectStyleTag.js')\n. @lapanoid You forgot to fix the indentation here.\n. > PS. I'm in the process of composing a contributing guide to make the PR process smoother.\nAlso, I created the contributing guide in the meantime: https://github.com/skidding/cosmos/blob/master/CONTRIBUTING.md\n. Why is this the expected behavior? You do require('components/' + componentName), so you should return the entire component path (i.e. component-group/my-component)\n. Why the first ?? The path will always start with ./ so the regexp can be simpler: /^\\.\\/(.+)\\.jsx?$/ \u2013 Please correct me if I'm wrong.\n. The indentation here is wrong as well, see https://github.com/skidding/cosmos/pull/136/files#r32058142\n. This might actually be more efficient, stole it from the React source code a while ago. But I'm going to ES6 the s*it out of this repo before merging. Wanted to make sure everything works first before I \"celebrate\". :D\n. Pretty cool. Not sure if this repo would benefit, tho, since the test cases are pretty verbose and it doesn't have the crazy nesting you guys have (not to mention the repetitiveness between similar components).\n\n. How about more humane test cases? E.g. \"should save splitpane position in local storage on change\"\n. splitpane or SplitPane? Decide :)\n. @bogdan-stefan-hs why did you remove this test? Is it not relevant to test that the defaultSize is read from the local storage?\nI was just referring to humanising the test case strings in my previous comment.\n. Cool. Sorry for the confusion.\n. Let's name the argument better, it's no longer an event but a value.\n. Let's keep the react-code-mirror with minimum changes, besides the react-dom-polyfill integration, to be able to submit a PR upstream. I'll take a closer look on what you added in that fork as well.\n. Sounds good. I also think it was overkill and am \ud83d\udc4c  with removing it.\n. var nodeModules \ud83d\ude2c \n. This seems to work:\n\n\n\ud83d\ude0e \n. Why do you need this?\n. I think this is a bad move going forward. String refs are almost deprecated, so we should at least use callback refs. But callback refs also don't make sense here, because the CP shouldn't be aware of what proxies it is being passed, otherwise we might as well embed them inside. I suggest we only keep component classes/functions in the list of proxies. \nIs there any other reason besides tests to keep them? There must be a different way to check that the proxies are being loaded. E.g. Checking that their dom node(s) include the dom node(s) of the next proxy.\n. Do all three types of React components match React.PropTypes.func? (React.createClass, ES6Class and stateless functions)\n. Awesome. Cosmos becomes a platform for 3rd party middleware! \ud83d\udc6f \n. Any reason why this isn't also required?\n. This is odd. Isn't proxies a prop of the Component Playground and not a fixture property?\n. OK. I got it now, this is a fixture for CP, not one used by CP. My bad.\nThat being said, this means you can only send the contents of the store once to the ReduxProxy, global for all component/fixtures loaded? Is this correct?\nIf yes, I suggest the following alternative: Revert the props thing and continue to send the entire fixture to all proxies. This way, ReduxProxy continues to reads the contents of the store from props.store, but store will be a separate property on every fixture. Wdyt?\n. > What happens if another proxy needs a key named 'store' as well, for completely different reasons? It will use the same value.\nTo avoid this problem completely, we can make proxies be functions that return components, instead of components. E.g.\njs\nproxies: [\n  // Default \n  reactCosmosReduxProxy()\n  // Custom key\n  reactCosmosReduxProxy({ storeKey: '__reduxStore' }),\n]\nAnd inside the proxy:\njs\nconst reactCosmosReduxProxy = ({ storeKey }) =>\n  class ReduxProxy extends React.Component {\n    constructor(fixture) {\n      super();\n        this.store = createStore((state) => state, fixture[storeKey || 'reduxStore']);\n    }\nNotes:\n- We could default to \"reduxStore\" instead of \"store\", to minimize such conflicts from the onset. \n- I suggest using fixture instead of props inside proxies. It sounds unorthodox, but I think is easier to understand. After all, the props of the preview component just happen to be all the fixture keys minutes the magical ones (like \"state\", and now \"store\", or \"reduxStore\").\n  - Moreover, I think this proxy should omit the redux store key from the fixture when passing it down to children, just like ComponentTree does with \"state\" key. Children should receive just props (remaining fixture keys after magical ones).\n. Lodash appears to be needed in dependencies, not devDependencies.\n. You should be able to add the store in propTypes as well:\n``` js\n```\nAnd we either make it required or add defaultProps:\njs\nReduxProxy.defaultProps = {\n    [storeKey]: {},\n};\n. I've missed this the 1st time, but this needs further tweaking. We should be consistent in what we send to proxies vs what we send to the preview component. THIS is what we send to the preview component. We don't need all of those keys, but we need this.state.fixtureUnserializableProps merged with this.state.fixtureContents to get the latest fixture contents (possibly updated by the user via the shinny editor \ud83d\ude09 ). We might need the component class as well in the future, in case proxies want to, say, display meta data of components on top of previewing them. \nProposition: Create a method that returns the current fixture contents:\njs\nreturn _.assign({\n  component: this.constructor.getSelectedComponentClass(this.props)\n}, this.state.fixtureUnserializableProps, this.state.fixtureContents);\nThen use it as proxy props and inside preview() children function, where you add key, ref and omit state.\n. If the grids were cloned on every frame, yes. But I tried a more functional approach. The grid is only rebuilt on start and when a Tetrimino lands. The rest of the time the exact same object is kept. What you're looking at is a reference check, which is way faster than comparing the values.\n. extname  yes, but not basename, which a) contains the extension and b) is read from the last / to the right, whereas fixtures can be namespaced. E.g. __fixtures__/Button/simple-states/default.js, where matches[1] will be simple-states/default and basename will be default.js.\n. Yes! This has been on my mind for a while and has been raised by many people. I plan to approach this as well in the future, maybe even included in 1.0, but the current structure will need to continue to work as well.\nThis is where it can be integrated in the webpack CLI: https://github.com/skidding/react-cosmos/blob/1432aeb487aaae938d767f2de3e0b71309c23170/packages/react-cosmos-webpack/src/build-module-paths.js#L9\nE.g.\njs\n// Current structure\nconst fixturesRootPathA = `${componentsRootPath}/__fixtures__/${componentCleanPath}`;\n// Nested structure (like you proposed)\nconst fixturesRootPathB = `${componentsRootPath}/${componentCleanPath}/__fixtures__`;\nI want to merge this PR before adding that functionality because I want to integrate Cosmos in a repo where it already works. If you want we can work together on adding nested fixture func in a subsequent PR.  \ud83d\udc4d \n. > This will remove the ../../../../../../constants/my_awesome_constant.js\nWhere do you see paths like this in the Flatris example?\n. Why? It's a private affair, no body is gonna set an storeUnsubscribe property of a different type...\n. Tried using generators, but realised they work different. Tried my best to explain in this commit message: 3a02cfbe06d55ce39a6ec97bf1c9b3bf56dacd7e\n. \u00af(\u30c4)/\u00af\n. Is this new? I remember you had to use paths (e.g. lodash/omit) to benefit from this in the past.\n. This is odd, what must've I been thinking. Can you duplicate ReactComponent and remove these cloneDeep calls along with the peerDependency?. What is this? If it's not project-related best put it in your global gitignore.. No need to update versions. Lerna takes care of them automagically when running the publish cmd.. No need to update dep versions. Lerna takes care of them automagically when running the publish cmd.. Why replace imports with require calls?. I'd add a TODO comment to fix this, with a link to your comment: https://github.com/react-cosmos/react-cosmos/issues/217#issuecomment-269708146. How about putting this at the beginning of the component-playground.jsx file because it only occurs there?. This is odd. In some case you have to remove the parenthesis and in others (like here) you have to add it. Does it have smth to do with the curly brackets?. This is an error! Please replace | with ||. \ud83d\ude25 . Is this needed? ESLint doesn't render any errors for me when I remove it (because this). No need to clone children, because the fixture is never mutated. If we went down this road we'd have to clone props and other stuff as well. Let's just send fixture.children directly to React.createElement.. This needs a test. Check out how props are tested. The children() method from the Enzyme wrapper should do the trick.. We need to omit the children field from the fixture, otherwise it continues to be sent as a prop as well as the 3rd arg from createElement.  See how StateProxy omits state field.\nYou also need to add a test that checks that fixture.children is no longer sent as a prop.. I think the destructuring of children is optional: https://jsbin.com/yikulexefe/edit?js,output \u2013 which means the 3rd argument from createElement can be a list (or single element, or undefined).\nWith this in mind, do you see a problem with this?\njs\n    React.createElement(component, {\n      ...omit(fixture, 'children'),\n      ref: onComponentRef,\n    }, fixture.children);. > While writing the test I realized that children in React-Cosmos is not the same as children in React.\nNot really. fixture.children are React Elements, not object with props. Not a very used pattern at HS, but useful when you create fixtures for wrapper components like modal windows.\nI think you're thinking of the loadChild mixin where you define elements at the beginning of the component and then insert them in the render function using loadChild. That's just an optional utility, not used in any React Cosmos example.. That's not a valid fixture.\nThis is the type of fixture relevant to this PR: Mocking React children.\njsx\nconst fixture = {\n  foo: 'bar',\n  children: [\n     <p>I am wrapped inside a parent component</p>\n  ],\n};\nYou may be thinking about this: Mocking the state of child components (that have string refs).\njs\nconst fixture = {\n  foo: 'bar',\n  state: {\n    children: {\n      c1: {\n        baz: 42,\n      },\n    },\n  },\n};\nWe can use a different medium like Slack if you have further questions.. Shouldn't this be ./packages/react-*to only match packages that start with react?. This needs to be a bit smarter. I.e. packages bundled via webpack need to be built after other ones they depend on.\n\nSuggestion:\n1. Keep a list of packages bundled with webpack (just CP for now)\n2. Run packages that aren't included in that list before those that are\n3. Bonus: Use same list to check which task to run (line 11)\nAccepted limitation: This might still fail when more builds that bundle with webpack depend on each other. There's only one webpack build now (CP) and there are no plans for any other in the near/mid future.. > A config file with the dependencies would be useful for this\nAt scale, I agree, but here are few things to consider:\n1. The dependency graph doesn't matter between packages that are just Babel-compiled (all but the playground), because no bundling occurs and the dependencies are resolved later in the user's codebase\n2. There is only one package that bundles and there aren't any plans to add another (the reason why CP bundles with webpack is its use of CSS)\n3. This dep graph would still not be needed until we'd have a webpack-bundled package depend on another webpack-bundled package, which we can assume will never be the case\nThat said, I think we should go for the easy solution, even if that means another if for react-component-playground and dropping the list idea altogether. What would be useful is a comment leaving breadcrumbs for future generations, stating that this solution doesn't work when other packages start depending on each other to build (only one does now, see point 1.). This creates a lot of noise:\n\nLet's use console.error, it's much nicer:\n\nAnd to make it even nicer, let's do something like ${[''].concat(allPackagesNames).join('\\n -')}:\n\nI'd also replace \"Can only build the following packages:\" with \"These are the existing packages:\"\nWdyt?. Having these two scripts is confusing, it took me a bit to understand what happens. E.g.\n```bash\nBoth build only the react-cosmos-utils script, except in the first case the watch flag is ignored\nnpm run build react-cosmos-utils -- --watch\nnpm run build:package react-cosmos-utils -- --watch\n```\nLet's get rid of build:package. You can use rimraf (see example) to run wipe out ./packages/*/lib when targetPackage is missing.. You shouldn't compile all other packages every time you bundle CP.\nYou need to ensure order when we build all of them npm run build, but other than that you don't want to re-build other packages when you run npm run build react-component-playground when working exclusively on the playground. Not to mention that some packages are not deps of the playground such as react-cosmos and react-cosmos-webpack.\nHaving three separate cases seems like the clean solution. Wdyt?. Since all build cmds are now async and start at the same time, how can we know that the other packages are built when the playground starts bundling?. Maybe use child-process-promise, have runBuildTask return a promise, and then\njs\nPromise.all(\n  packageNames\n    .filter(pkg => pkg !== 'react-component-playground')\n    .map(packageName => runBuildTask({ packageName })\n).then(runBuildPlaygroundTask);. This is normal behavior so let's remove WARNING: prefix to decrease CLI anxiety \u270c\ufe0f . Sure. It also continues to support loaders, which is great because it allows Cosmos to build webpack configs that work universally without version checking.\nThat being said, I can start using rules here because it's part of the build process, not lib code (same with examples).. > I tried to build it locally and couldn't do it with webpack 1.14.\n@ovidiubute How? Flatris (all examples) use the webpack copy installed in the root dir, which is pinned to v2.. Really? :P. compo-\nnents\nlooks nasty. What's wrong with left align?. Interesting choice of fonts. Maybe stay consistent for now and later we can use some pretty web font.. We could do for webpack versioning what we did for React, but I wouldn't go that route tbh. I think it's safe to keep webpack 2 in the repo and examples as long as we maintain webpack 1 compatibility.. I'd go with rgba(255, 255, 255, 0.9), tweaking the alpha to make sure the text is readable. We need to see how it looks, though.. .9 \ud83d\udc4c . @ovidiubute I like 0 16px more because paragraphs already have v margin. I think this should end with a question mark. @RadValentin let me know what you think. If it can't be adapted then we must remove the twinkling or go back to black.... How about simplifying this to Read the [creating fixtures] guide to help you get started.?. Let's add max-width: 500px because it looks weird after a certain screen width .. This condition is weird. There can't be an auto fixture when length > 1. How about this?\njs\nconst hasUserFixtures = fixtureNames.filter(fixtureName => fixtureName.indexOf('(auto)') == -1);\nreturn acc || hasUserFixtures;\nActually, why check all components when you can stop after finding first user fixture? E.g.\n```js\n// good ol for\nconst { fixtures } = this.props;\nfor (let component of Object.keys(fixtures)) {\n  const fixtureNames = Object.keys(fixtures[component]);\n  if (fixtureNames.filter(f => f.indexOf('(auto)') === -1).length > 0) {\n    return true;\n  }\n}\nreturn false;\n```\nBonus: Imagine how clean everything would look like if you did this at the beginning of the file:\njs\nconst { keys } = Object;\n\ud83d\ude19 . Consider replacing this with width: 50% to make it work on Safari.. \n. LGTM!. It's beautiful \ud83d\ude2d . We do need it, there are other fields inside module (besides rules/loaders) which users might use and we want to preserve them.\nYou can install lodash.omit in packages/react-cosmos-webpack and do \n```js\nmodule: {\n  ...omit(userWebpackConfig.module, 'rules', 'loaders')\n}\n``. Can you please improve this comment to explain the reason behind this is to supporting webpack 1 and 2?. I guess they wanted old configs to still work while providing an improved loader API for those who have the time to upgrade.. Please move this test outside of the [without-hmr` describe block](https://github.com/nik-kor/react-cosmos/blob/7abc2236f024217690c6dcfa0b2e09004263ae40/packages/react-cosmos-webpack/src/tests/webpack-config.js#L51) as it doesn't benefit from the beforeEach setup. Best to put it at the end of the file.. Because you can't export a fat arrow function directly. Or can you?. Ouch, by mistake. The examples are fine.\nWhat I was saying is that you can do\njs\nexport const createProxy = () => {\nbut not\njs\nexport default const createProxy = () => {\nWhat am I missing?\n. I'm with you, already battled with ESLint and managed to remove most of them here. 1/2 You can also destructure outputPath here to use it below. 2/2 It's shorter to use outputPath from config destructured above. Same asa here. I think you also need to copy index.html of the playground, no?. Let's keep a consistent [Cosmos] prefixing of logs here and in all cases below.. This is a bit more tricky. Cosmos uses two index.htmls:\n- Index of the playground, used to render nav and controls (this one is missing from the export at the moment)\n- Index of the user, used for the contents of the loader frame (this one is generated by the export, but should be placed in the loader/ dir, next to the bundle.js file). This value mocks window.location.pathname, so it should be /loader/index.html. Tests should continue to pass.. It's annoying that I'm enforcing this without having an ESLint rule, but could you please add a newline between each describe and test blocks? The extra air improves readability.. > path.join already uses the platform specific separator\n@ovidiubute yes, but it doesn't normalize the existing slashes from the concatenated paths. Am I right?. Fixed!. Done 25a7bf9dab6a2cad5d764f7682ed257008fc1154. You can use lodash.omit to replace the reduce logic into a single line. Add reduxState and we might postpone making this an option indefinitely (unless anybody requests it).. context as well. Even if this list were configurable (which I don't recommend for now), it shouldn't be an option inside cosmos.config.js, but rather a Proxy option (see example of Proxy options in Redux Proxy).. How about NormalizePropsProxy?. I think this test case is useless and can be removed. This looks convoluted. Why not go back to just\njs\nconst serializable = {};\nconst unserializable = {};\n// ...\nreturn { serializable, unserializable };. Moreover, you could do something like \n```js\nconst propVal = obj.props[propKey];\nconst propHome = isSerializable(propVal) ? serializable : unserializable;\nif (!propHome.props) {\n  propHome.props = {};\n}\npropHome.props[propKey] = propVal;\n``. But it would be wise to add the new tests first and then beautify the implementation.. You can put this outside ofgetFixedFixture` since they never change.. How about\njs\nreturn {\n  ...pick(fixture, notProps),\n  props: omit(fixture, notProps)\n};. \"Proxy for backwards compatibility with old react-cosmos fixture format\". Remove line. No need for a TODO since examples are explicitly working with relative packages, but you should rely on the compiled lib by just pointing to '../../packages/react-cosmos-normalize-props-proxy' . These checks can become false positives in time. How about creating some constants like const mockContext = {}, use them when constructing the fixture in renderProxy calls and then do strict checks like expect(childProps.fixture.context).toBe(mockContext);. Is there any cause you can think of where fixtures would be null? If not I'd rather assume it's always an object and just keep the other checks. It's a required prop after all.. This is rather nit picky, but how you feel about naming this doesSelectedFixtureExist? isValid makes me think about the contents of the fixture, which this function isn't concerned with.. isValidComponentAndFixture is called in tandem with isFixtureSelected in other places, I think it would make sense to do the same here.. In the future it might make sense to merge them, but I'm fine with having them separate for now as their role is clear.. It's actually xo in this case, but yes people do that.. Will rename. I see them as smoke tests as they don't (and can't, because Cypress doesn't work with iframes \ud83d\ude1e ) cover all functionality.. Right.. They're not. I added a big warning at the top of the file.. It's going to change for sure when I revamp the CP.. Not very. They were just easy to write :). This suite is an experiment, I see it as a trial version. On the other hand, aren't all e2e test already checked through unit tests in theory (if you have 100% coverage)?. Shouldn't this be components/non-default-fixtures-dir/Foo/blank.js. Good catch!. Done in #380. Agreed, I also find it confusing. Also fixed in #380 . Added in #380. We're using the Loader as a test util here. And we're importing the compiled lib, not the source. Loader is similar to ComponentTree back in the day. It allows us to reuse fixtures as test setup. This is a simple scenario indeed but I wanted to use it consistently in all Component Playground tests to showcase its use internally (\"eating our own dog food\"). It becomes more useful when we use something like a Redux fixture to create a complex test setup in one line.. Done. Wouldn't it make more sense to put the onClick handler on the componentName div? This way you don't need stopPropagation anymore as the fixture buttons will no longer be contained in the component button.. It might look nicer to nest these\nless\n.componentSelected {\n  .componentName {. How about naming this something like ComponentPage? This page could do many things in the future:\n- If there are no fixtures it can be a landing page for that component\n- Could display component meta data like name, prop types and description extracted from source comments (e.g. JSDoc)\n- Could display a grid of loaders or a list of loaders, a \"view modes\". Excellent! \nI like LoadersGrid more than LoadersManager, although I'd opt for LoaderGrid (singular) as \"grid\" already suggests a list of items.. > Noob question here -- I'm not at all familiar with Lerna, so I checked out the docs for hoist which describe it as a flag (--hoist). However, I can't see that flag set anywhere in cosmos.\nWe're not using the hoist option because we hoisted these deps manually by just adding them to the root package.json. I think this is simpler than adding them to every package and then relying on Lerna to hoist them in the root. I wonder if it helps to specify this as others might have the same question.\n\nNot sure why the flag would be needed anyway, since, by default, node looks in the root folder's node_modules for packages? I guess it depends where you are running the example from.\n\nThe flag is needed if you prefer react to be in packages/foo/package.json but not in root package.json. But yeah, this is why I didn't complicate matters by using that option and just installed it once, globally. Otherwise whenever we want to upgrade React we go in every package do to so.\n. Forgot this . This wouldn't be very pretty, but what if we also added this rule?\njs\n`/${componentName}/src/${fixturesDir}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\nThis would keep the previous test passing (which is a real life scenario used by large code base using Cosmos), and still fix the problem. The only way this can backfire is if somebody names a component as lowercase \"src\", and nests it under another component. It's an edge case we can live with until we find a better solution to refactor this part.. @amrdraz one more \ud83d\ude02 . Just /user I think. It just passes it to xhr-mock. \nfetch-mock seems more flexible in this regard:\n\nIdeally both xhr and fetch requests would be mocked in the same way, but merging the APIs would've been risky business so I went for the simple approach\u2013just use their own API and avoid maintenance costs.. You must've indented these lines by mistake. Please remove one level of indentation and make sure yarn run lint doesn't fail \u2013 you can see the build is failing because of this:\n\n\n. isExistingFixtureSelected would be a better name because we check if a fixture is selected and if it exists.. No need for this empty line.. \ud83d\ude06 I just removed the slash without thinking \ud83d\udc11\ud83d\udc11\ud83d\udc11 \nThanks!. Fixed!. onFixtureUpdate updates the original fixture and sends it to the Playground, which updates the fixture editor. So if you look into the gif I posted, you'll notice that the route updates in the fixture editor as you click on links inside the component. Does that answer your question?\nPS. The actual postMessage event is fixtureUpdate, described here.. You're right. Addressed this in https://github.com/react-cosmos/react-cosmos/pull/406/commits/23445faf93fc3b305f2fc40185073adb27ebd33b\nI hesitated to use withRouter first because it adds another <Route> element, and I wanted to test that the Proxy renders exactly 1 or 0 Route elements, based on scenario. But I changed the assumptions and look for a Route with a specific prop.. The paths are resolved and absolute at this point, so it works. This is the output you've gotten in react-test-buffet with this patch:\n\n. The docs already describe publicPath as\n\nWhere to serve static files from. Like --content-base in webpack-dev-server.\n\nBut any suggestion is welcome!. @RadValentin added it to make it work on Windows https://github.com/react-cosmos/react-cosmos/commit/33e1e3ccbdff277c1d82895d3ca1cffd5531c5bd \u2013 to be honest I trusted his word \ud83d\ude04 . It doesn't trigger a deprecation notice, I think webpack will continue to support the old loaders syntax indefinitely... in which case why not use it. The new syntax is more powerful, but everyone is welcome to use it in their custom webpack config.. It's used here. The point is to enable Babel on the server and allow users to write export default { instead of module.exports ={ in cosmos.config.js. Not sure if it's worth it either, but a different story.. Cheers!. Should be fairly simple, something like Array.isArray(proxies) ? proxies : [proxies] somewhere in the codebase. My only worry if it doesn't add confusion when newcomes read the examples and in some places cosmos.proxies.js returns a list, while in others just a proxy. Maybe they'll think it's two different things. Also, my assumption is that any mature codebase will rely on more than one proxy. Any similar API examples from other projects?. Good point, will add.. Not really proud of acc2 and next2 tho \ud83d\ude05 . Hmm, what about the first example?. Rewrote the first example to have better annotations and to feature most popular proxies: Redux, React Router and Fetch.. Also with a link to the proxy boilerplate.\n\n. OH, so @xavcz already pointed this out but somehow I missed it \ud83d\ude43. No editor specific config files please. .vscode can go in your global gitignore.. No need for this, you can already run yarn run start:playground from the root project dir.. No need for this, test dependencies are installed globally in the root package.json to not have to add them in every package.. I think you need to make this 2.0.0-beta.28 for the tests to pass. The example references 2.0.0-beta.28 so it tries to download it from npm instead of linking from the monorepo.. Sorry, mate! This should also be 2.0.0-beta.24. Only packages that have changes get bumped on publish, so while latest is 2.0.0-beta.28, lower level packages sometimes stay behind.. Not sure if this is a case, but I think this change is due to Prettier. More trivia than anything, I added package.json to Prettier ignore list because Priettier's formatting differs from the npm/yarn one, which gets applied when installing a new package. So I would end up going back and forth with styling of package.json because of this.. Array is deduced from the type. How about nodes?. TIL prettierrc exists :). Since we never use another matcher and we don't open up this lib for outside consumption, we can reference the matcher directly and get rid of the 3rd param.. Not a fan of the multi purpose functions. node can be a list of nodes or a node, while the output can be a list of nodes or a single one. Couldn't we split it into two functions? We always start with a list of nodes when we do the root call from FixtureList, so we should know which function to use when.. \ud83d\ude06\nMaybe give more details: \"Mutates node from state.fixtureTree\". Looks like we need to add \"no-mixed-operators\": 0, to XO rules in package.json, because it's conflicting with Prettier which doesn't like superfluous brackets.. Took me a few seconds to realize why you put this here \ud83d\ude05. > Done, except we now have an XO issue due to circular function calls\nThis is because const foo = is a var declaration, and the right way to do it is to declare function foo for root level functions in a module. I've not be consistent with this myself as it's nicer to use arrow and to always write functions in a single way, but I'm planning to use function declarations for module exports from now on. So make them function declarations if it's not a big deal, otherwise I can live with since I'm sure there are plenty other similar cases in the codebase.\n\nI guess you don't want a global 'no-use-before-define' rule override, so I added // eslint-disable-next-line no-use-before-define. Is there an XO specific syntax I should use instead?\n\nNope, this is fine.. > Unfortunately there's another Prettier formatting issue.\nWhich one?\n\nNot sure how you want to deal with this (now and going forward).\n\nWouldn't want to bother you and this PR with it, but the long term plan is to cherry pick a few ESLint rules remove XO. Too many rules makes for a bad DX and Prettier already takes care of most of the linter's previous responsibilities.. OH, I think you meant this commit 78fbe50c0a75d99150bfd536fafad664650606ed\nWell, I think adding a file .prettierignore with the following fixes it once and for all...\npackage.json\npackages/*/package.json\nexamples/*/package.json. This doesn't have any effect for the moment, right? Unless you want to give animations another try I say we simplify and rely on good ol display: none/block. No need. I was already working on something else and put it on that branch.. You have to update line 28 to window.__changePlaygroundSearch = this.onSearchChange; for the Cypress smoke tests to pass. From what I've read this should be in componentDidMount.. The spread operator can make this entire block more elegant:\njs\nlocalForage.getItem(TREE_EXPANSION_STATE).then(currentState => {\n  localForage.setItem(TREE_EXPANSION_STATE, {\n    ...currentState,\n    [key]: expanded\n  });\n});\n. This might be annoying, but I'd like to start formalizing using function declarations for top level functions in a module. I started doing this on the new-fs branch and I might add it to the contributing guide by the end. Reason: Assigning a function to a var (or cont) will usually drive us to put the \"private\" functions at the top, because we want to be safe and have these functions declared before the ones that will call them (hence the annoying ESLint rule). But it is a general good practice to place the high level exports at the top of a module and place the lower level private functions at the bottom, which is always possible with function declarations because JS hoists them by definition.. How about returning a layout skeleton in this state?\nHaven't tried to see if this works, but I'm thinking of a disabled search input with a \"loading...\" placeholder\n<div className={styles.root}>\n  <div className={styles.searchInputContainer}>\n    <input\n      disabled\n      className={styles.searchInput}\n      placeholder=\"Loading fixtures...\"\n      value=\"\"\n    />\n    <SearchIcon />\n  </div>\n  <div className={styles.list} />\n</div>. Is there a benefit to this instead of just expanded: savedExpansionState[newPath] === true?. How about calling this property path? I get that it's self explanatory at the moment but the data mapper shouldn't care about how/where the expansion state is persisted.... There's no problem with spreading an undefined value as far as I know.\n\n. Good to know!. Fair enough. I usually do this for GET requests, but this is lower order of magnitude... . If we return || {} here we can always expect an Object and never have to do savedExpansionState || {} when consuming the expansion state.. Wouldn't it make sense to prune here as well? Fixtures can change via HMR. In which case it might make sense to bundle this logic and hide the entire expansion state business under a function like this:\n```js\nfunction getFixtureTree(fixtures) {\n  return getSavedExpansionState(projectKey).then(savedExpansionState => {\n    const fixtureTree = fixturesToTreeData(fixtures, savedExpansionState);\n    pruneUnusedExpansionState(projectKey, savedExpansionState, fixtureTree);\nreturn fixtureTree;\n\n});\n}\n```\nThen use it like:\njs\n// Call this in didMount and willReceiveProps\n// It has pruning built in\ngetFixtureTree(fixtures).then(fixtureTree => {\n  this.setState({ fixtureTree });\n});\nEdit: projectKey would also need to be a param.. Does a prop with default value need to be marked as required? \ud83e\udd14. My bad! \ud83d\udc12\n. Nitpicking: Destructuring const { pathname, search, hash } = urlParser.parse(url) would make for clean shorthand keys in the returned object. . Shouldn't this be an object type?. How about an informative log like we do for publicPath at line 65?. Hmm, Prettier doesn't add spaces after commas? . I hope you don't mind the nitpicking, but can you put componentsCommonDir = commondir(paths) here and then just return the contextCall from getContextCall, as the function name suggests. This way you also just need to send the context path to getContextCall instead of all the fixture files.. Does the consuming repo need this dependency?. \u2764\ufe0fing these verbose errors.. Feel free to make a PR \u00af_(\u30c4)_/\u00af. How about having another example with local mocks? It should also make development easier when testing all types of mocking.. > Actually, I'm thinking about removing the local mocks part!\nMakes sense!. \u2b06\ufe0f . \n. It seems like scaling is an always-on option for future implementation. Not sure how long in the future you intend to make it variable, but maybe leave a comment for now?. Why is this scheduled one second in the future?. Did you try calling it in the callback ref of the associated div? You're already fetching the div ref so you could turn it into:\njs\nref={el => {\n  this.scalableDiv = el;\n  if (el) {\n    this.updateContainerWidth()\n  }\n}}. I don't know why I did this lazy initialization in the past, but how about just doing const StateProxy = createStateProxy({ updateInterval: 50 }); once, outside createContext?. Can you please satisfy my OCD and:\n- Capitalize bullet points\n- Remove ; and : at the end\n\u270c\ufe0f. > and it .\n?. I know it's shitty we have such deep nesting, but please make this ##### to be in line with its sibling headers. Hehe, la touche de Xavier, love it!. FYI, it seems Apollo's compose ends up wrapping a component twice and the name becomes Apollo(Apollo(MyComponent))\n\nDon't think it has anything to do with this PR, just wanted to raise awareness because Apollo+Cosmos users will see this:\n\n:D. Hmm, doing a live call in tests can lead to lots of pain down the road, because all of a sudden the test suit doesn't down offline nor if gql.zone is down.\nCan we mock this endpoint using the FetchProxy in real data example? I think it would prove the same point except we'd mention in that fixture that \"the call is mocked by react-cosmos-fetch-proxy to avoid live calls in tests but the apollo proxy is unaware of this bla bla\". Point to \"react-cosmos\": \"^3.7.1\" like before?. Maybe put wrapper.update(); inside getWrappedComponent, before returning?. Seems like this test file is more related to rendering the other proxies and adding the ApolloProvider, so maybe rename to render.js?. Maybe rename to rebuildStore to be consistent with buildStore?. I know this is not your change, but can you change this componentDidMount because it's a better place for side effects? \nSide note: Afaik componentWillMount is considered harmful nowdays and doesn't have any proper use case.. @JannesV Can we unbury this test? Maybe we can check that parent.__APOLLO_CLIENT__ equals wrapper.instance().client.. Small typo: enable. s/;/:. Any reason to hoist the result variable here?. \ud83e\udd23. Can we remove this? I don't think it's needed and isn't consistent with the else branch anyway.. Maybe\nconsole.error(`\\n${error}`);\nis cleaner?. A few notes:\n- Please put this note inside the quote above, to keep mentions of 3rd party deps together\n- Babel packages are namespaces since 7.x, not 8.x (which doesn't exist, only for babel-loader which is webpack related)\n- You can say something like \"This example applies for Babel 7.x and above...\"\n- You may want to link to https://babeljs.io/docs/en/v7-migration as well. ",
    "NiGhTTraX": "@skidding please review.\n. @skidding We need to toggle the state var if the request errors. However, the error callback will print to the console so in tests we'll see some extra output. Do we want to suppress it? If so, how? We could replace the console.error function and restore it at the end of the test.\n. @skidding Also, to write unit tests for these events we need to unmock the fetchDataFromServer method which is mocked at the beginning of the spec. Which approach do you think is better?\n1. Unmock it in our new tests by calling and.callThrough().\n2. Write a new spec in which the function is not mocked.\nThe latter makes sense because the scope of our tests is different, while the former is more convenient.\n. LGTM.\n. Have a :cookie: \n. Seems legit.\n. @skidding what do you think of the specs?\n. @skidding correct!\n. @skidding please review.\n. @skidding addressed comment.\n. @skidding please review the last commit.\n. @skidding can you please bump the npm package?\n. @skidding please review.\n. @skidding bump it up :dancers: \n. @skidding The solution is actually the list of deliverables :)\nThe issue needs a lot more speccing. For instance, I don't like the headers param being the last and the callback being second to last. What if I don't want to pass a callback?\nThe state changing methods seem to refer only to collections of objects. Can you provide more details?\n. @skidding Merging this. No need to bump anything since these are just tests.\n. LGTM\n. LGTM\n. \n. > Because you've just lost the ability to give your fixtures friendly names\nWhy not add a title attribute to the fixture object? This would work for single fixtures as well. . Maybe peer depend on babel-loader? I know that at one point the idea was to encapsulate as much as possible into the package, to make usage easier, but I always felt the build chain should be provided by the host project.\nThe webpack config is optional so that in turn makes every build related dep optional as well. Babel is optional on latest Node. Seems to me building the components is the host's responsibility.. @skidding you're going to get the warning whether you use the default webpack config or not.\nMaybe I phrased the issue wrong, this is just an npm warning, it doesn't break anything.\nIt's just a matter of the cosmos package forcing the download of optional dependencies. You could use cosmos with Traceur and never want to download babel-loader. Same goes for the style loaders, maybe you never import CSS files in the components. I guess it's not the end of the world if you download some things you're never going to use, but with Babel you'll actually get a warning. One you can ignore but a warning nonetheless.. Sounds like a plan. Those loaders are only there to support default-webpack-config, right? My assumption is that while the config might be useful for very basic projects, most have a more complex config that they need to pass to cosmos. I think it would also reduce confusion for projects that use the default config and then add something to their project config which then makes cosmos stop working.. > My plan is to make the default config a smart config\nThat would be the best of both worlds. Wouldn't be hard either, just \ntry {\n  require('babel-loader');\n  config.module.loaders.push(...);\n} catch (e) { }. Huh, interesting. I thought publicPath acted like webpack's option which is used to set the CDN. For webpack it's relative to the page serving the files so that's why I set it to ./.\nWhy do you need to copy the publicPath folder when exporting? Can you give me an example of how you would use the option in the playground?. Ah ok, so it's just for stuff referenced outside of files parsed by webpack. Kinda like globalImports, right? Speaking of which, how do you handle globalImports when exporting?\nI think a different name would've avoided the confusion for me. staticPath, perhaps?. This looks scary to me. Don't you think the tests are too coupled to React/Enzyme details? I certainly can't compare the complexity of Cosmos to the complexity of my project, but upgrading React for me was a breeze. I'm curious to hear your thoughts on whether the advantages brought by Enzyme and Cypress are worth the tight coupling observed in this PR.. > I don't plan to invest more in Cypress until it stabilizes.\nHave you considered another tool, or does the roadmap for Cypress look orange? :tangerine: \nIn the brief time I used Enzyme I too didn't use shallow because it didn't exercise the entire component e.g. lifecycle methods and state and refs at one point (is this still the case?). For selectors I wrap the components in jQuery and use its API. It's probably the only place where I still enjoy using jQuery :smile: \nWhen it comes to querying children in tests I took a different approach.\nAt first it seems nice that Enzyme lets you easily check the props sent to a child component, going so far as to not render them to make the tests atomic. However, once I made it clear in tests that I'm interested in the data passing between a parent component and its children I also wanted to invert that dependency and make it more explicit.\nTherefore, I write components that accept other components through either children or props. Then I use mock components in tests and set expectations on them.\nI guess the pressure this puts on good design for components is about the same as when checking the props with Enzyme, although with my approach there is more emphasis on events coming from the children. The main advantage for me is that if I can easily pass a mock in a test then I can just as easily replace implementations in production code. My components become generic and composable and I can do more with less of them.\nIt seems verbose at first, but in the end I enjoyed being able to compose components in endless ways e.g. <Modal><Dialog><Survey Toggleable={Checkbox} /></Dialog></Modal> and having unit tests for each of them (and one screenshot for the cluster) instead of writing tests for a <ModalDialogSurveyWithCheckboxes /> component. You could still achieve the former with Enzyme, but IMHO the pressure to do so is not that great.\nP.S.: A/B tests become a delight - you just change 1 line of code.. Maybe you should change when data starts being fetched from WillMount time to DidMount time?\n. The conjunction but has no place here. Replace it with and.\n. The only reason this test fails on the old code is because React uses the isMounted internally when throwing that invariant error. If that changes in the future this test will no longer be relevant. This test is now coupled to the implementation of React.\nUse React.unmountComponentAtNode to actually unmount the component and check if everything is ok.\nDoing the above, you'll find out something very interesting. this.isMounted() returns true in componentWillUnmount http://jsbin.com/yemir/1/edit?js,console,output. Calling setState here will throw an invariant error. Therefore, you cannot guard that setState call with isMounted(). The new code would still crash in production. Since this test wasn't written correctly, you could not have caught this scenario.\nNow back to the drawing board. Maybe we can figure out if the request was aborted by checking the error code inside the callback and only do setState if the request wasn't aborted?\n. > Sounds slick, but not very predictable.\nFrom jQuery.ajax():\n\nerror\nType: Function( jqXHR jqXHR, String textStatus, String errorThrown )\nPossible values for the second argument (besides null) are \"timeout\", \"error\", \"abort\", and \"parsererror\".\n\nSeems to me like you can reliably tell if the request was aborted.\n\nIt becomes coupled to the way jQuery wraps Ajax requests\n\nYou're using jQuery to do requests, of course you're coupled to it.\n\nIt has the expectations that Ajax requests [...]\n\nThis is valid.\n\nIt seems like a React flaw if you can't tell whether or not a component is unmounting (and, in this case, whether or not it's OK to setState).\n\nMaybe React is missing that feature, but we're doing setState in a WillUnmount handler which is pretty crazy. And in all fairness, isMounted was doing its job -- the component still has DOM inside the WillUnmount handler.\n\nAt this point it seems the solution needs to be a clear and simple one: Add a flag like _componentIsUnmounting: true on the instance directly and check for it in the error callback.\n\nI think I found a better way to do this. Wrap the .abort() call in a setTimeout(0) call. This way, the abort action will go to the end of the event queue. Before that event is reached the component will finish unmounting because it's the current event in the queue. Now the response from the request can either come after the abort event, in which case it won't come at all, or it has just been queued after the unmount event, in which case it will execute before the abort event but after the component has been unmounted. This way you need to guard it as well with an isMounted() call. See http://jsbin.com/mufaye/1/edit?js,console,output for more details.\n. a capture of the\n. s/is/it\n. Triple equal :)\n. Because the list is filtered in the previous test? Are Cypress tests not atomic?. Maybe give it an identifier?. Are these tests valuable? Isn't this logic checked through unit tests?. This seems brittle. I don't think this test should check indentation.. Cypress is a detail, these are acceptance tests, are they not?. Is this the fad these days? To include .eslintrc in package.json?. Variantion? :grin: . Even though your unit tests cover unit A and unit B, there could be assumptions made on either side that become out of date (think mocks). e2e tests cover for that. They should also cover the app's composition root where you wire up the dependencies. In either case, they shouldn't check for correctness. They should only check the broad requirements.. I'm not sure if this will solve the case where publicPath is ./. Might need to use path.resolve first, or path.join.\nAnyway, check my comment surrounding publicPath. Maybe clearer docs would be better than this guard.. Ah, sweet.. Curious, why is this necessary?. Will this cause webpack to print a deprecation notice? I'm wondering if it's worth the trouble of having both a wepback 1 config and a webpack 2 one (probably with a little transformation to not duplicate things). You could import webpack and check its version to know which config to use. Probably not worth it though.. Is this still needed?. ",
    "catalinmiron": ":+1: \n. :+1: \n. @skidding there is an official doc but as you said, there are some serious API changes.\n. @skidding please review\n. @bbirand I've upgraded the dependecies https://github.com/skidding/cosmos/pull/188\n. What I've learned from you it's more important than shrinkwrap:) \nSent from my iPhone\n\nOn 30 Jul 2016, at 13:35, Ovidiu Chereche\u0219 notifications@github.com wrote:\n@catalinmiron just read about npm shrinkwrap. Cool stuff! \ud83d\udca1\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. LGTM. gg \ud83c\udf76\n. > I know that the airbnb wants it like this but it still hurts \ud83d\ude06.\n\nHurts because you're not writing javascript ma friend:) \ud83d\udc54 \ud83c\udf89 \nLE: Useful when supporting older browsers :) IE ftw (pritenii \"stie\" de ce)\n. :+1: \n. TODO for the future?\njavascript\nloadChild(childname, ...args) {\n  return loadChild.loadChild(this, childName, ...args);\n}\n. I made a loader that wraps each describe into a describe with file path, you can use it: https://www.npmjs.com/package/describe-loader\n```\n// npm install --save-dev describe-loader\npostLoaders: [{\n    test: /.js$/,\n    exclude: /node_modules/,\n    loader: 'describe'\n  }]\n```\n. From my POV, each component should have their own folder\nMyComponent/\n  __fixtures__\n    state_1.js\n    state_2.js\n  __tests__\n    state_1.spec.js\n    state_2.spec.js\n  index.js\n  index.less\n. This will also help you open sourcing the component with ease.\n. root: path.resolve('./path_to_root')\nReference: http://webpack.github.io/docs/configuration.html#resolve-modulesdirectories\nThis will remove the ../../../../../../constants/my_awesome_constant.js\n. you could use import {omit} from 'lodash' and webpack will bundle only omit function.\n. 80 chars? this is hard to read.\n. I know now:) cmd+d ftw. Lazy hax0r :)\n. StateProxy\n. maybe we'll use generators in a future release. wdyt?\n. import {omit, isEqual} from 'lodash'\n. props without this because you're taking the props above\n. typeof \"function\" and declare this.storeUnsubscribe = null in constructor?\n. ~\"calc(100% - @{left-nav-width})\". bottom: 0; right: 0; top: 0 and remove min-height and width.. you could also do flex: .5. Why do you need margin: auto?. I like the transparent background instead of white. cc: @skidding . ",
    "Azeirah": "Can you describe how to get started with the playground?\n. ",
    "w0rm": "I'd like to put this project into use, but this issue is a must to have for me and I am willing to contribute.\nDo you have any idea of how this should be implemented? \n. Right now I have hacked up a simple solution.\nI modified cosmos to accept config-path, then added this to webpack.config.js:\njavascript\nif (argv.configPath) {\n    config = require(resolvePath(argv.configPath))(config);\n}\nmodule.exports = config;\nThen I have created my cosmos.config.js\njavascript\nmodule.exports = function (config) {\n    config.module.loaders = [\n        {\n            loaders: ['style', 'css', 'postcss'],\n            test: /\\.css$/\n        },\n        {\n            exclude: /node_modules/,\n            loaders: ['react-hot', 'babel'],\n            test: /\\.jsx?$/\n        }\n    ];\n    config.postcss = require('./lib/postcss').processors;\n    return config;\n};\nTo start cosmos I use this command component-playground --config-path cosmos.config.js\n. So I basically needed to override css loader and add config entry for postcss. But I might need more in the future, so I kinda like to have karma approach of being able to override default settings if needed.\n. What about having a function for each config section, that gets original config and returns modified, e.g. \njavascript\n// component-playground.config.js\nmodule.exports = {\n    webpack: function (config) {\n        // modify and \n        return config\n    },\n    router: function (config) {\n        // modify and \n        return config\n    }\n}\n. Great, will make a pull request for this.\n. @skidding feel free to break my example, I can rewrite the stuff I'm working on.\n. Oops, it's because I did this from work and my git is configured with a different email address there\n. @skidding fixed port setting for HMR.\n. Sorry for not doing it right at the first time\n. I think it is not necessary  to specify extension when requiring module in common js.\n. Will do some research on this\n. There seems no way, but I improved my code, because it would suppress any syntax errors from the custom config file.\n. Oops, sorry for that. I've configured my atom with jscs linter plugin to avoid this in the future.\n. I'm sorry for this! \n. Sorry, I just don't have the whole thing at home, will try to clone your cosmos-example project and test with it\n. ",
    "gaearon": "Done!\n. I like that style-loader already has a built-in support for hot reloading.\n. Can you check if you have multiple Reacts on one page? These errors definitely look like a \u201cduplicate React\u201d issue.\n. This error means you had a duplicate React in the bundle, and different components were rendered with different versions.\n. We're going to support getters real soon, I promise.\nGive us a few more days.\n. cc @tharakawj @timer for awareness. >We can dual publish a CJS and ESM version (based on package.json toggle). Can you open an issue on CRA for this please?\nWe should.. ",
    "totty90": "@skidding Ok, thanks (:\n@gaearon I didn't used hot reloading yet, but it's on my list.\n. ",
    "moretti": "Thank you for the detailed response! Much appreciated!\nPerhaps we could represent the ComponentPlayground's state using something like Immutable.js, so that it would be trivial to implement shouldComponentUpdate?\n. ",
    "ksmth": "Webpack doesn't throw any errors, so I suspect some kind of infinite loop going on. I'll have to dig into it, but I have no idea how to debug this. \n. ",
    "dmitry": "Looks like again https://github.com/jtangelder/sass-loader/issues/100 issue. Lets together fix this bug, because there are a lot of developers are stuck with it. Currently I'm on sass-loader v0.5.0, but it would be nice to be on the edge.\n. ",
    "eugene1g": "A long shot, but in try changing the shebang at https://github.com/skidding/cosmos/blob/master/bin/component-playground.js#L1 to #!/usr/bin/env UV_THREADPOOL_SIZE=100 node\n(related report: https://github.com/jtangelder/sass-loader/issues/99#issuecomment-103281100)\n. ",
    "lapanoid": "@skidding sorry for such long PR. But if you merge this I have some other little enhancement I wish to be in cosmos, I promise to be more accurate)\n. @skidding I have fixed intendation and regexp.\n. What a lovely PR =)\n. Closing this, too many changes in cosmos, will try one more time maybe\n. My bad, it works fine. Need to read more carefully missed paragraph about file structure.\n. @skidding maybe there could be \"next\" branch which could be less conservative to contributions? There we could develop and iterate fast and merge at some point with master. I am thinking about io-node story as a successful example of such model. What do you think?\n. @skidding @teosz   This should be closed/changed I guess as react 14 officially released\n. Agreed\n. Sorry missed that, I also like 4 line.\n. ",
    "ovidiu-chereches-hs": "\"This branch has conflicts that must be resolved\" :)\nYou might want to start over or else squash the commits when you fix the conflicts.\n. Tell me about it :))\n. Included this feature in the next release: https://github.com/skidding/cosmos/blob/9e17ebc730a3f0b2c6f16e14b639c5592e4b46b4/webpack-boilerplate/react-0.13/playground/get-component-fixture-tree.js#L37-L39 \u2014 Will come up with a Cosmos update soon!\n. Hi @narenranjit,\nCan you tweak one of the components from the boilerplate to use the es6 exports default syntax, in a way that doesn't work without your patch?\nI tried something like\ndiff\n-module.exports = StatelessButton;\n+export default StatelessButton;\nand it worked out of the box, probably because Babel already defaults to the .default key. \njs\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\nBut maybe I'm missing something, or does your setup have some particularity?\n. Hi @BrunoDF,\nGrouping the component class with its style under a folder with the same name appears to be a common pattern, so I understand the problem. \nHowever, if we remove the namespace altogether, we'll run into another problem. Consider this scenario:\n```\n- components/dashboard/ProfilePic.jsx\n- components/profile/ProfilePic.jsx\n- components/Welcome.jsx\n\nfixtures/ProfilePic/default.js\nfixtures/ProfilePic/missing-image.js\n```\n\nYou have two components named ProfilePic under different namespaces (which usually correspond to routes), also a common pattern. How would you separate fixtures for one component from the ones for the other?\n. ",
    "faassen": "I'll add that I followed the Cosmos installation instructions on a clean package (though I did do a --save-dev for cosmos-js).\nI was using npm 2.5.1. I just updated it to npm 2.13.0 to see whether this makes any difference. Unfortunately it does not. (I do get a ton of exciting warnings involving peerDependencies now during the npm run)\nI tried installing without --save-dev, but this also has the same behavior.\nSo from my end it seems like installing cosmos as per instructions gives you these errors in a repeatable fashion.\n. I added issue #144 about cosmos not ignoring editor droppings. It's conceivable that this has something to do with these errors, though it seems unlikely, but I thought I'd mention it.\n. Is there an easy way to test whether there are multiple reacts included in a webpack?\n. ",
    "pekala": "\nPassing html through props seems a bit heavy, and makes the component playground a bit harder to serialize. [...] Did you consider passing the JSON or the Markdown string to the playground, for it to turn it into HTML (a declaration markdown to HTML conversion in the render function would be cool if possible...).\n\nSure, should be easy to defer conversion to component playground.\n\nSince the project already depends on Lodash, feel free to use it for brevity. It felt like there were some places where you could benefit from its functions. It also has a string template API which might make the markdown generating code more readable.\n\nThe markdown generation code is copied from react-docgen example project. Maybe we could just require it from their package instead, although that might be a bit risky. But I can refactor the code to make use of lodash to make it nicer if you feel like that's the way to go.\n. As specified in docs you can use CLI options to point to correct directories: \nnode_modules/.bin/component-playground --components-path src/components --fixtures-path tests/fixtures\n. They are not getting deprecated altogether, it's just that they will not be automatically installed, see here http://blog.npmjs.org/post/110924823920/npm-weekly-5\n. In that file just inject the script/style tags from JS, for example like so:\n``` js\nvar script = document.createElement('script');\nscript.setAttribute('src', '.js');\ndocument.body.appendChild(script);\nvar link = document.createElement('link');\nlink.type = 'text/css';\nlink.rel = 'stylesheet';\nlink.href = '.css';\ndocument.head.appendChild(link);\n```\nThis file will be added to the bundle. You might want to use unshift instead of push to make sure that the file gets at the beginning of the bundle.\n. It's looking in process.cwd() (current working directory)\n. > Also, since you gave Bootstrap as an example, it might be useful to have the bootstrap file in the example as well. (unless you need many extra files and it looks ugly, I guess...)\nI suppose most use cases would include external file from CDN, in which case you need a custom JS file to inject actual script/style tags.\n\nThis example is a bit confusing, why would be the extra file be outside the project (../../..), since the config file is located in the root of your project, right?\n\nUsing ./injectStyleTag.js would look for the file in cosmos project inside node_modules. In this case the file injectStyleTag.js is actually in the root of my project. I agree it looks a bit odd, but I'm not sure how to get around it.\n. > Maybe you could use path.join(process.cwd(), 'injectStyleTag.js')\nDuh, that will work :)\n\nSo webpack doesn't support external files as entry points?\n\nNot that I'm aware of. I tried to search for this, but couldn't find anything built in.\n. ",
    "ovidiubute": "I'd like to necro this PR, it's a very useful feature to have documentation alongside components. @skidding should we create a new issue? Do you feel that the code here is still a good starting point?. @skidding If I'm not mistaken, children is also a \"magic field\", correct?. @skidding please review. @skidding .idea is the project directory for WebStorm. I removed it from gitignore, and I also reverted the package versions, didn't realise you were using Lerna. Please review again.. @skidding please review . It would be something like npm run build:package webpack. Or, we could actually have npm run build webpack if the script checks its argument list and builds one package or all of them.. @skidding please review. Valid points. Happy new year! \ud83c\udf89\nOn Sat, 31 Dec 2016 at 18:11, Ovidiu Chereche\u0219 notifications@github.com\nwrote:\n\n@skidding requested changes on this pull request.\nYou are brave! \ud83d\udee1\nIn test/fixtures/component-playground/selected-fixture-and-editor.js\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470\n:\n\n@@ -1,4 +1,4 @@\n-import selectedFixture from './selected-fixture.js';\n+const selectedFixture = require('./selected-fixture');\n\nWhy replace imports with require calls?\nIn .eslintrc.js\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470\n:\n\n@@ -5,7 +5,16 @@ module.exports = {\n   rules: {\n     // React Cosmos is designed to work with React >= 0.13 and stateless\n     // functions were invented in 0.14\n-    \"react/prefer-stateless-function\": 0\n+    \"react/prefer-stateless-function\": 0,\n+    // Dynamic require is needed in Playground\n+    \"import/no-dynamic-require\": 0,\n+    // Object and Array are forbidden by default too\n+    \"react/forbid-prop-types\": [2, { \"forbid\": [ \"any\" ] }],\n+    // Passing children as prop is needed in React Cosmos\n+    \"react/no-children-prop\": 0,\n\nI'd add a TODO comment to fix this, with a link to your comment: #217\n(comment)\nhttps://github.com/react-cosmos/react-cosmos/issues/217#issuecomment-269708146\n\nIn .eslintrc.js\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470\n:\n\n@@ -5,7 +5,16 @@ module.exports = {\n   rules: {\n     // React Cosmos is designed to work with React >= 0.13 and stateless\n     // functions were invented in 0.14\n-    \"react/prefer-stateless-function\": 0\n+    \"react/prefer-stateless-function\": 0,\n+    // Dynamic require is needed in Playground\n+    \"import/no-dynamic-require\": 0,\n+    // Object and Array are forbidden by default too\n+    \"react/forbid-prop-types\": [2, { \"forbid\": [ \"any\" ] }],\n+    // Passing children as prop is needed in React Cosmos\n+    \"react/no-children-prop\": 0,\n+    // Defining unused props is required in Proxies\n+    \"react/no-unused-prop-types\": 0,\n+    \"jsx-a11y/anchor-has-content\": 0\n\nHow about putting this at the beginning of the component-playground.jsx\nfile because it only occurs there?\n\nIn examples/flatris/browserify/prepare-modules.js\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470\n:\n\n@@ -2,7 +2,7 @@\n\nconst prepareComponents = (modules) => {\n   const components = {};\n-  Object.keys(modules).forEach(componentName => {\n+  Object.keys(modules).forEach((componentName) => {\nThis is odd. In some case you have to remove the parenthesis and in others\n(like here) you have to add it. Does it have smth to do with the curly\nbrackets?\n\nIn packages/react-cosmos-utils/src/unserializable-parts.js\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470\n:\n\n@@ -1,3 +1,4 @@\n+/ eslint-disable no-bitwise /\n\nThis is an error! Please replace | with ||. \ud83d\ude25\nIn packages/react-cosmos/src/components/Loader.jsx\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470\n:\n\n@@ -1,3 +1,5 @@\n+/ global parent /\n\nIs this needed? ESLint doesn't render any errors for me when I remove it\n(because this\nhttps://github.com/react-cosmos/react-cosmos/blob/7a90876a11ea257a122c2d25295c482abef2e30c/packages/react-cosmos/src/.eslintrc.json#L3\n)\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/pull/248#pullrequestreview-14804470,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAcO4VaUU1V7lGReMyDKPt3vvGfZga5Yks5rNn63gaJpZM4LYjhI\n.\n. @skidding addressed review. @skidding please review. @skidding addressed review. @skidding please review. SGTM. @skidding please review. @skidding fixed everything but the watch. It doesn't work anymore so I'll have to bake that into the new script too.. To watch for changes, npm run build:react-component-playground -- --watch. Also switched to Node spawn which provides the benefit of building all the packages in parallel (except CP which is built at the end). @skidding please review.. I really should nvm install 5 \ud83d\ude04 . @skidding please review. \n. Team effort, @skidding \ud83d\ude04 \n\n\n. Does ignoring paths still work? We have Redux associated files under components, along with actual components. Right now there's a field that allows us to ignore those files (I forget the name of the field), is that going away?. Yup, the list of Regexes is the one we're using. All good \ud83d\ude04 . Sure, we integrated it right around the 1.0.0-beta release. The only issue I could find is sometimes the CSS is not hot reloaded. I didn't have time to investigate what's going on, so I don't know if it's a problem with the Playground or just the project setup.\nOther than that, it would be awesome to mock the backend requests, like I explained in issue #253, because right now you can't test certain components end-to-end.. How would it work? Would you run a CLI to generate the snapshots and tests and update them later on?. LGTM, it would have the advantage of being faster than any UI integration testing tool could ever be. I'm a bit worried that you can become totally dependent on the snapshot, to the point of not writing any tests and just checking the component that it always renders the same, but I'd still like to try it out.. Interestingly enough almost all of the components in ant.design are tested this way. That's a pretty big library so it's certainly feasible.. Yes, but I didn't have time to test it out. Probably will, soon.. I can see why this is needed, good call. Just a thought: the impact on the end users needs to be minimal, in order to speed up the migration from 1.0 to 2.0, so this needs to handled carefully.. @skidding please review the first screen from a design standpoint, I'd like to know if it looks OK so I have a feeling about how to proceed with the other screens. \ud83d\udc27 \n\n. @skidding preview:\n\n. Or without the white background:\n\n. Might be a good time to decide on the third and final text, guys. I'm thinking we need to introduce proxies to the user (this is the advanced case), and add a link to the Project roadmap in case he'd like to contribute. What do you think?. @RadValentin :\n\n. @RadValentin, It's so pretty \ud83e\udd13\n@skidding the copy for the third screen is all we need to wrap this up. I'm thinking:\n```\nYou're all set! But did you know...\n- You can use Redux for your components with proxies?\n- You can load global CSS files in case you're using components within a larger app?\n- You can search through fixtures and components? Try it, it's all warm and fuzzy.\nBe part of React Cosmos by becoming a contributor.\n``. @skidding please review. By the way [Travis is down](https://www.traviscistatus.com/incidents/v8ymr10glpf3) \ud83d\udca5 . ![](https://media.giphy.com/media/l0HlwzfNdXRdkDuKY/giphy.gif)\n.reusablebasically meanspurein functional terms, which is the hallmark of this project, in my opinion. LGTM from me to make the change \ud83d\udc4d. While certainly possible, I wouldn't be the one who tries to explain this workaround to a noobie developer. If we could have a flag insidecosmos.config.jsthat does just what you said, but behind the scenes, it would go a long way towards helping developers.. Also I'm not totally sold on this workaround if it doesn't actually ignorefixturesentirely. It just doesn't feel consistent to me, but that's not such a big deal as it could be fixed later.. No, that last case was just something I thought about. The people I spoke to just did not want to call the directoryfixturesbut still liked the idea of having the fixtures in the same place ascomponents`.. If you follow the example of create-react-app it never opens a new tab if\none is already opened. It will switch to the browser ti the correct tab.\nNot sure how it's done but it is definitely possible.\nOn Sun, 5 Mar 2017 at 20:14, Ovidiu Chereche\u0219 notifications@github.com\nwrote:\n\nWhat's up?\nIt'd be nice to not have to type/copy or click on the Cosmos URL whenever\nrunning the server\nMkay, tell me more...\nIt's a bit annoying if you already have the page opened, but I think\nthat's an edge case. We can add an option to not auto load later if it\nprovides enough value for a specific use case. Open to opinions, maybe it's\njust me.\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/304, or mute the\nthread\nhttps://github.com/notifications/unsubscribe-auth/AAcO4cAwe0bKsaDB_t6wWLTl_avB8UYfks5rivtngaJpZM4MTfjP\n.\n. Nice! I have a few projects running on create-react-app but hesitated using Cosmos, I'm going to go back and add it to see how it goes \ud83d\ude04 . I never really understood the appeal of having fixtures so complicated that they need dependencies (the only time I kind of understood it was with random fixtures). I guess you could handle it in the same way we handle external CSS files: configure all of your \"externals\" in cosmos.config.js. You could technically provide static links towards whatever files you want and the loader frame could inject them via script tags. \n\nBut I still feel that this is totally breaking the isolation of the components. . You're right, yeah, I was thinking about the loader frame. \ud83d\ude1e . My 2 cents: you could have a convention to name a fixture the same thing as the file that contains your React Component. That would mean it exports multiple fixtures. In order to still support multiple fixture names I would export an ES6 Map out of the fixture to easily determine at runtime if the fixture is a \"new\" fixture or not in order to keep backwards compatibility and not have to export weird domain specific objects or Arrays of fixtures.. Because you've just lost the ability to give your fixtures friendly names. With a Map the key used could represent the name.\n```\n// Single fixture\nconst fixtures = new Map();\nfixtures.set('with-data-type-null', {\n  'data-type': null\n});\nfixtures.set('with-data-type-3', {\n  'data-type': 3\n});\nexport default fixtures;\n```\nLater on...\nfixtures instanceof Map\n\ntrue. I think at this point you've gone so far off the initial idea of a fixture that this proposed format is basically a Cosmos specific DSL. Props are already split into their own property name, which may or may not be popular with users, but metadata like title/description is taking it a bit too far, in my opinion. Once you've added sufficient Cosmos data into a fixture what is the point at which you need to maintain the fixture itself? Can you still reliably use it in a unit-test?. This will be a huge improvement in speed when developing cosmos \ud83d\udc4d . @skidding the yarn docs list yarn install as an alternative way of installing deps, I'd say the idiomatic way is to just write yarn. For running targets, yeah, it may be clearer to use it the same way as you would npm.. Cool proposal, @skidding \ud83d\udc4d . FWIW you can still run lifecycle methods in Enzyme shallow rendering. Pass\n{ lifecycleExperimental: true } to shallow as 2nd argument. This will be\ndefault behavior in a future Enzyme release but we've been using this with\nsuccess for some time already.\nOn Sat, 7 Oct 2017 at 03:41, Andrei Picus notifications@github.com wrote:\nI don't plan to invest more in Cypress until it stabilizes.\nHave you considered another tool, or does the roadmap for Cypress look\norange? \ud83c\udf4a\nIn the brief time I used Enzyme I too didn't use shallow because it\ndidn't exercise the entire component e.g. lifecycle methods and state and\nrefs at one point (is this still the case?). For selectors I wrap the\ncomponents in jQuery and use its API\nhttps://github.com/NiGhTTraX/react-test-buffet/blob/6562f9a3624ccaf8983de90f3ffcdde09e89dc24/tests/unit/components/todo-filter.spec.js#L24.\nIt's probably the only place where I still enjoy using jQuery \ud83d\ude04\nWhen it comes to querying children in tests I took a different approach.\nAt first it seems nice that Enzyme lets you easily check the props sent to\na child component, going so far as to not render them to make the tests\natomic. However, once I made it clear in tests that I'm interested in the\ndata passing between a parent component and its children I also wanted to\ninvert that dependency and make it more explicit.\nTherefore, I write components that accept other components through either\nchildren or props. Then I use mock components\nhttps://github.com/NiGhTTraX/react-test-buffet/blob/6562f9a3624ccaf8983de90f3ffcdde09e89dc24/tests/unit/helpers/chai-react.js#L67-L131\nin tests and set expectations\nhttps://github.com/NiGhTTraX/react-test-buffet/blob/6562f9a3624ccaf8983de90f3ffcdde09e89dc24/tests/unit/components/list.spec.js#L27-L31\non them.\nI guess the pressure this puts on good design for components is about the\nsame as when checking the props with Enzyme, although with my approach\nthere is more emphasis on events coming from the children\nhttps://github.com/NiGhTTraX/react-test-buffet/blob/6562f9a3624ccaf8983de90f3ffcdde09e89dc24/tests/unit/components/list.spec.js#L33-L37.\nThe main advantage for me is that if I can easily pass a mock in a test\nthen I can just as easily replace implementations in production code\nhttps://github.com/NiGhTTraX/react-test-buffet/blob/6562f9a3624ccaf8983de90f3ffcdde09e89dc24/src/app-factory.js#L21.\nMy components become generic and composable and I can do more with less of\nthem.\nIt seems verbose at first, but in the end I enjoyed being able to compose\ncomponents in endless ways e.g.  and having unit tests for each\nof them (and one screenshot for the cluster) instead of writing tests for a  component.\nP.S.: A/B tests become a delight - you just change 1 line of code.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/pull/467#issuecomment-334898682,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAcO4S3g4wtQFoecj1ntHKP7G0xg7U77ks5spsilgaJpZM4PvAoW\n.\n. Sounds good to me, awesome work!. The rule is:\n- If you write a function that takes one argument, and its body does not have curly braces, then do not apply parenthesis to the argument. \n- If its body does have curly braces, then the argument must be surrounded by parenthesis.. The reason this code exists is because createElement takes a variable number of arguments, but children is an Array. Ideally you'd destructure it with ...children, but this fails if the fixture does not have the children field (you cannot destructure undefined). . Yeah, you're right, destructuring is optional. \ud83d\udc27 . While writing the test I realized that children in React-Cosmos is not the same as children in React. Those children need to be React Elements, not objects with props. Back to the drawing board. \ud83d\udcda  . My problem is due to a lack of experience using enzyme. I tried to modify the fixture to the following:\n\nconst fixture = {\n  foo: 'bar',\n  children: [{\n    c1: {\n      baz: 42,\n    },\n  }],\n};\nBut I get the following error:\nInvariant Violation: Objects are not valid as a React child (found: object with keys {c1}). If you meant to render a collection of children, use an array instead or wrap the object using createFragment(object) from the React add-ons.\nThat's why I assumed I was doing something wrong in createElement, but it's most likely to do with the shallow rendering of enzyme. . I'd change it to INFO: just to be clear on what's happening.. @skidding This makes Flatris impossible to build without webpack2. The peerDependency in react-cosmos-webpack specifies a version between 1.13 and 3, but that is no longer the case. I tried to build it locally and couldn't do it with webpack 1.14.. I realised this is the context config file, but you get my point \ud83d\ude04 . I guess I didn't delete the root node_modules before I started working and still had webpack version 1.14 installed. If you perform a clean install it should be fine.. The scrollbar has always been like that, I think it depends on your Mac settings and OSX version.. Sure, but I'll extract those variables into a separate LESS file, I wouldn't want to import the entire component-playground.less file into this new component.. The hyphens: auto is just something I thought would help since it works on all resolutions without awkward right padding.   . Just to conclude on the scroll-bar, this is the reason (Mac settings):\n\nSwitching it to default fixes it \ud83d\ude03 . With .9 alpha:\n\nWith .8 alpha:\n\n. Can't really use for of because it uses Symbol and PhantomJS does not support it. I guess we could polyfill it but how about just doing:\n```\nuserHasFixtures() {\n  return _.reduce(this.props.fixtures, (acc, compFixtures) => {\n    const fixtureNames = Object.keys(compFixtures);\nreturn acc || fixtureNames[0].indexOf('(auto)') === -1;\n\n}, false);\n},\n``. Sure. Flexbox has been supported in Safari since version 9, I don't get why this isn't working \ud83d\ude22 . Sure. Why not go all the way and use a fat arrow here? Everything else is ES6.. Sure you can, it'll just get transpiled tofunction ().. Why aren't you exportingdefault`, now that I think of it?. You can do \nexport default () => {. keys(fixtures).forEach(component => {. keys(componentFixtures).forEach(fixture => {. Should we still use file extensions in require? Maybe we can set the trend for removing it for good, I don't see the value in it at all.. You don't need to use slash for the entire branch. path.join already uses the platform specific separator. In this particular case you could call slash just for the userPath. Source. relPath seems to be the only possible offender, so call slash only on that.. > when component files sit next non-component files\nShould be: \"when component files sit next to non-component files\". Yeah I see what you mean, path.join is called with userPath which could have any combination of forward/back slashes. So slash is indeed required. \ud83d\udc4d . Maybe a link to flatris that is actually using CRA would be good?. \ud83c\udf86 . There is no need to use run when using yarn, it's implicit when providing parameters afaik.. You can simply call yarn, install is implicit.. Does this match /user* or just /user?. How about href={fixtureEditorUrl}. href={fullScreenUrl}. Unnecessary String interpolation.. Not enjoying this, being an internal API it could change whenever the maintainers feel like it \ud83d\ude22 . I think there's some context that I'm missing but what is onFixtureUpdate's role?. Cool, thanks for the info \ud83d\udc4d . Would it be too much trouble to support exporting a single proxy without wrapping it in an Array? I imagine someone will open an issue about trying that in the future.. \u2764\ufe0f  how \"functional\" this function is \ud83d\ude04 . As a user I would love to see an example with multiple proxies.. Maybe it's just weird that all examples have only one proxy. You're right this is already a pretty advanced topic \ud83d\udc4d . ",
    "derekr": "@skidding Meant to open this against a fork of ours, but I wanted to add a way to support globbing file paths so we could have a different tree structure for components.\n. ",
    "AddictArts": "I setup a new folder with and starter with my own webpack config plus react, css-loader, etc. Then I created the folders src/components, etc. Then installed cosmos-js and copied the simple button component from the example. That is what I remember and unfortunately can't reproduce it. So, you can close this. Thanks\n. Thank you. I must have missed it\n. Something after installing cosmos-js to an existing project installed a copy of react in its node_modules. That was what I got a conflict error on. Can't reproduce now though.\nWhat I meant is that peerDependencies are going away, so should the install instructions be something like: npm install react react-hot-loader cosmos-js\ninstead of depending on the deprecated peerDependency of npm.\n. Thanks, you can close this since I can't reproduce.\n. Ah that was a good read on it, so it is nice the installer will be told the peer dependency did not install. Thanks \n. ",
    "dzannotti": "+1\n. ",
    "KyleAMathews": "Another idea. Be able to star and label particular objects that you could come back to e.g. an entity that's prone to bugginess. These could show up where fixtures are now. Store this information in a dot directory in the user's home directory.\n. Oooooo... and what if could create a grid wall of component instances. Say assign each component to a 100x200 space and each one pulling in a random entity. Or test a component's responsive design by doing some sort of masonary-style layout where components are assigned random heights and widths (well... random within defined constraints). On a large screen you could have dozens or even hundreds of instances of a component loaded that you're hot-reload editing code and styles. That'd be pretty epic. Something with sliders like I'm doing on my demo here: http://kyleamathews.github.io/react-component-gallery/\nThis would make it really really easy to test components against tons of scenarios all at once. The brain is really good at picking out breaks in patterns so you could fine-tune components by loading one in this and then scanning for problems.\n. > Not sure about the resizing, since you could do that via browser resize or dev tools viewport emulation\nAgreed actually. Most components are responsive based on page width. I was thinking the slider as I have some that keep track of their own width using https://github.com/KyleAMathews/react-component-width-mixin so would render differently if they were full-width for example or if there were two or three in a row. This is easy to setup though so no need to build it into Cosmos.\n. And glad you like the proposal :) I'm at least several weeks (more likely a month+) from needing this so don't expect a PR from me anytime soon. If anyone wants to pick this idea up and run with it in the meantime, I'd be happy to help out in a limited fashion.\n. ",
    "joaomilho": "Apparently this is caused by using es6's get. Yo can try with:\n```\nimport React from 'react';\nexport default class C extends React.Component {\n  get a() {\n     return \"get is the problem\";\n  }\nrender() {\n    return ({ this.a });\n  }\n}\n```\nWhen I compile this component to es5, I get the problem above. If I change it to the following it works fine.\n```\nimport React from 'react';\nexport default class C extends React.Component {\n  a() {\n     return \"get is the problem\";\n  }\nrender() {\n    return ({ this.a() });\n  }\n}\n```\nTherefore, I think it's a bug and should be fixed, since I don't wanna remove the [cool] gets in my code. WDYT?\n. :+1: \n. ",
    "fabiobiondi": "I have a similar problem.\nI need to override the default CSS/LESS loaders in order to pass some parameters :\ni.e. \njavascript\n{\n  test: /\\.less/,\n  loader: 'style!css-loader?module&localIdentName=less_[name]__[local]___[hash:base64:5]!less'\n}\nI have used a different approach by @bbirand  and I have completely overwritten the loaders property.\nAnyway it works fine but although my custom loaders are used to load my css/less files the parameters seem to be ignored and my CSS/LESS don't work as I would.\njavascript\nconfig.module.loaders = [\n  ... my loaders ...\n]\nreturn config;\nThe reason I want to accomplish this is that in my components are using CSS in the following way:\njavascript\nimport classes from './panel.less';\n...\nrender() { \n  ...\n <span className={classes.title}>MyPanel 2</span>\n}\nThanks in advance for your support.\nAnyway, great work guys! I'm starting to love it!\n. ",
    "bbirand": "Brilliant, thank you so much for the answer!\nAlso, as another quick question, what folder does webpack server look for files? In your example, where should I place <filepath>.css?\nI added the CDN for bootstrap, but I have some other files I'd like to add.\n. OK, the offending package is redbox-react. When I change its version in package.json to be exactly \"1.1.1\", things seem to work.\nNot sure how to deal with this as far as cosmos is concerned. This is clearly not an issue here, but it does impact the users of this project. Maybe have the version be pinned exactly?\n. Hi @skidding, sorry for the late reply. As you may have imagined, I am fairly busy these days. So if you want to take a stab at it, please be my guest! I'll also try to get back to front-end work soon, I'll let you know if I can get to it!\n. ",
    "rrarunan": "This is just local experimentation with updating to react 0.14-beta1. Closing.\n. ",
    "ericclemmons": "You know what, I honestly don't know.  The components got rewritten & now not seeing it.\n:shrug:\n. ",
    "ladas-larry": "+1\n. What is missing to get it working?\n. ",
    "skovhus": ":+1: Yes, what is missing? \n. +1\n. ",
    "dmose": "+1\n. ",
    "eisisig": "+1\n. I don't think it makes sense using cosmos webpack setup to bundle your personal components. You would have to config webpack for multiple entries and config all your 3rd party libs as externals so they won't get bundled with your components. And would you bundle/build ALL components or just once that have matching fixtures?\nI think it's way easier to just add a babel script task and have cosmos and that run at the same time...\n// to build\nbabel src --out-dir lib\n// to watch\nbabel src --out-dir lib --watch\nI often use https://www.npmjs.com/package/concurrently when I need to run multiple npm scripts at once...\n. ",
    "goatslacker": "Just checked latest with React 0.14 and it seems to be working fine just spits out a few warnings.\n. This is good I just have a note on React 0.14/0.13 compatibility. How about you support both?\nYou can create a getDOMNode function like\njs\nfunction getDOMNode(node) {\n  return React.version.indexOf('0.14') > -1 ? node : node.getDOMNode();\n}\nYou can then also conditionally load ReactDOM and use it to render. That seems to be all you're using React 0.14 for.\nAlso need to update the peer dependency requirements. You can probably even get away with 0.12 support.\n. You wouldn't put reactdom in peer dependencies, just mention it in readme or something. \njs\nvar ReactDOM = React.version.indexOf('0.14') > -1 ? require('react-dom') : React;\n. ",
    "teosz": "166\n. ",
    "satahippy": "here is fixture for MyCheckBox:\njs\nexport default {\n    checked: false,\n    onChange: ?\n};\nbut the logic of onChange in the MyForm.\nwhat should i do?\n. ok, thnx!\n. ",
    "nivoc": "Thanks for the update. Yes require works for me :)\n. ",
    "narenranjit": "Seems to be a Babel 5 vs. Babel 6 thing - works fine in 5 but breaks in 6. I'm having trouble finding the behavior change documented in an official changelog strangely but this stackoverflow link seems to be the canonical source everyone is pointing to.\nOr of course you could just add a note saying babel 6 isn't completely supported in the readme instead.\n. Will put up a 'breaking' branch later today to illustrate.\n. ",
    "rcbitencourt": "+1\n. ",
    "carloshpds": "+1 :+1: \n. That's good @skidding, Let's do it? I can help @BrunoDF  :)\n. ",
    "BrunoDF": "Hey, @ovidiu-chereches-hs,\nYou're right. I get what you're saying. \nActually, thinking again, it makes sense having the 'spinner/spinner' pattern,\nsince it's a folder/file structure.\nWhat brought me here was that it wasn't clear exactly why my fixtures weren't working.\nMy team also got kinda confused about it, and then I went to the code to understand what was going on.\nMaybe just a note in the docs is enough.\n. ",
    "Diokuz": "+1\n. Well, then you do not support many redux and most of fluxible react components :)\nDocs is here https://facebook.github.io/react/docs/context.html\n. ",
    "TheSisb": "+1\n. ",
    "RaitoBezarius": "Yeah, it sounds like that it's half the solution.\nOn the another note, I have already made a fix on my fork, which is \"battle-tested\" and used in my code. Would you like me to open a PR for it?\nI'll try to look if I can reproduce easily in a minimal project!\n. > It is an implementation detail but it is inside Cosmos' scope, so I'm OK with this. One thing I would recommend is adding a disclaimer comment on top of if (component.__esModule) {, something like XXX: This is an implementation detail of Babel [insert link to docs or even source code].\nYou're completely right!\n\nUntil further data, this sounds like the best option. If we target the pure/dumb component via name in modules where a decorated component is exported, I think it works exactly as it should, since the decoration part is already tested elsewhere and is harder to mock.\n\nThat was what I thought, awesome!\n\nAlso OK. Just checking to be string or function type might not cover all cases, but as long as it doesn't provide false negatives, it's better than nothing!\n\nI should add a comment and double-check my assumptions so that we don't have problems with this!\n\nDefinitely. Cosmos is a dev tool, but a user facing tool nonetheless. If you have ideas feel free to open up new discussions in separate threads.\n\nYes, I believe that: DX is UX for developers. So we still need to be careful about the UX and love to imagine that DX is what makes developers smile in front of their screens rather than swear in front of their code.\n\nOnly one concern. While it's an open debate, this project uses semicolons and I think either convention is better for readability than a combination. So if you don't mind please add semicolons where appropriate. Other than that it seems like we're good to go!\n\nI have absolutely no problem with this, will add semicolons!\nAwesome, will edit with your remarks ASAP and :rocket: !\n. @skidding My bad! Will push the commit right away!\n. @skidding Could you double-check if I didn't miss one? Thanks for pinging me >_<\n. ",
    "patrick-mcdougle": "Due to the merge on Mar 3, can this issue be closed?\n. ",
    "jbyttow": "@skidding was accidental, sorry about that.\n. ",
    "RadValentin": "\n\n. Now, only if those stars were animated \ud83e\udd14 . @ovidiubute\n \nLet me know how you like it.. I think we can close this issue now, it was addressed in #303 cc: @skidding @reinei . \ud83d\udc4d  Sounds good, I'll take a look later today. It would definitely help me out as well as I wouldn't have to run on OSX VM on my pc for cosmos dev anymore. That Admin commit happened because of this :). Quick update: still working on this but haven't been able to come up with a clean solution so far and time has been limited to say the least. I'll try to open a PR towards the end of the week, sorry for the delay \ud83d\ude22 . @skidding @ovidiubute Can you guys take a look? Windows users should be OK now, the only thing that I couldn't get to work were the tests for the Flatris example as they reference an external node_modules but that should be fixed with #301.\n. @skidding @ovidiubute Adressed comments, can you take another look?. Adjusted in https://github.com/react-cosmos/react-cosmos/pull/273/commits/af5cdcc72c4b93ff8d00aaeaabe75f915264d553. Maybe assign these?\njs\nObject.assign(domContainer.style, {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  background: 'pink'\n});. Unfortunately what ends up happening is that path.join will try to use OS specific slashes so it will use backslashes for Windows but we're testing against paths that were processed via glob which insists on forward slashes. That's why I'm running everything through slash. ",
    "bogdan-stefan-hs": "@skidding I can confirm hs-components' playground environment is working with:\n- react-component-playground version 1.0.0-beta.1\n- react-querystring-router version 1.0.0-beta.0\n- react-component-tree version 1.0.0-beta.0\nDoes the new react-cosmos package need testing as well?\n. @skidding The uberVU playground additions are all written in pre-ES6 code, to be in line with the rest of the repo. Can I suggest we ES6-fy it after we've merged those features? (I'm only talking about react-component-playground) \nAlso, shall I wait until you merge this, or can I submit PRs with react-cosmos as a base?\n. @skidding sorry for being late, but i think you also need to add react-addons-testutils to react-dom-polyfill. It has been separated to another package in React v0.14. \nBecause of this, npm test fails on React <0.14.\n. > Does the fact that it's no covered by react-dom-polyfill cause problems for you?\nNot really, i can modify the code accordingly.\nIt's just the thing that this command sequence:\nnpm install\nnpm run bootstrap\nnpm run install-react:0.13\nnpm run test\nwill fail out of the box.\nMaybe something in the docs to warn the devs is enough, then?\n. @skidding \nThe question here is: are you ok with using behavior: smooth?\nIt's only supported in Firefox, but on other browsers it simply does nothing (only tested on Chrome).\n. @skidding I already wrote the code for this, but I have a few questions to ask/debate:\n- I forked the original react-split-pane package/repo and republished it to add custom classname support. This is because CP adds a hash to classes in the less-loader, to avoid conflicts with possible components, so styling is impossible on classes that don't abide to that rule.\nHowever, as I developed further and needed another package, the problem reappeared and I realized republishing packages is not a feasible solution.\nSo the solution I came up with was: add a new less loader for everything that is not a playground internal, and exclude from it everything loaded by the first loader.\nWIth this solution we can use either of react-split-pane and ubervu-react-split-pane, BUT a conflict can arise if someone loads a component with the exact classnames of the split pane DOM elements.\n- Another problem that will arise now, with multiple React version support, is that these new packages will probably not work with any version. react-dom-polyfill won't be good either, since they use getDomNode() instead of findDomNode().\nSo the only solution I can think of is to install a different version of the package on npm install-react:vXX. This only leaves us with using the original react-split-pane, since it has multiple releases.\nWDYT?\n. > CP is designed to be a thin, lightweight wrapper that loads components from the user land\nI agree with and respect that. react-split-pane is pretty light though, it seems ok to use it.\n\nUse a fork of 3rd party React component where you replace ReactDOM with react-dom-polyfill\n\nI will do this for now, since i already published a fork and only need to update it and release a new version. In the future I'll try and avoid these React libs.\nSorry if any of my comments are inappropriate, i'm still new to React and npm land. :blush: \n. @skidding \nPlease take a look at the code.\nTested on React 0.13 and 15.\nThe LESS is a bit of a mess with some selectors having '>' and some not, but after we merge everything from the uberVU fork we should separate it into more files (as well as the jsx), so i guess we shouldn't worry too much about it now.\n\n. @skidding\nI updated the tests.\nDidn't get the chance to test under IE, but I'll do so when I get access to a Windows machine and I'll keep you posted.\n. I've read the discussion on this issue, which is somehow related to this, and I agree fully logging Flux/Redux actions is a little too specific for a general purpose tool.\nHowever, this issue is only about being able to render a component storing its state higher up, in a Redux store. Actions dispatched by the component are simply ignored.\nRedux has become pretty popular these days, and I believe it'll be a nice addition to react-cosmos.\n. I like the idea, I really love the flexibility of it. It's kind of like a plugin system, I guess.\nIt shouldn't be too hard to implement, either.\nThe only question I have is: how would you validate that a proxy renders the children? And what to do if it doesn't?\nI'm thinking of having a placeholder that simply calls loadChild, and replace every 'bad' proxy in the list with that placeholder. Does it make sense?\nAnyway, let's leave this issue open till i finish merging what I've already done, and I'll start working on this afterwards.\n. Oh, I thought you meant testing the props isn't the way to go, so I added a new test for the onChange effects.\nThe two tests are only asserting that props are sent correctly. The new one asserts that splitPane actually calls that callback, but I guess this is react-split-pane's job, so we don't need to test that.\nI'm going back to the two initial tests now.\n. ",
    "flaviusone": "\u2764\ufe0f  the idea to turn this into a monolith. Amazing job! GG! \n\n. LGTM\n. \n. js\n/* eslint-env browser, mocha */\n/* eslint-disable\n  global-require,\n  no-unused-vars,\n  no-unused-expressions,\n  import/no-unresolved,\n  import/no-extraneous-dependencies\n*/\n/* global expect, sinon */\nIt seems that you have something like this in almost every test file. Why don't you make a custom eslintrc file just for the test folder that will dedupe a lot of this rules?\n. \n\nI know that the airbnb wants it like this but it still hurts :laughing:.\n. LGTM otherwise \u00af(\u30c4)/\u00af\n. Great!\n. LGTM\n. LGTM\n. Looking good \ud83d\udc4d \n. Looks great \ud83d\udc4d  \ud83d\udc83 \n. \ud83d\udc4d . @jlc467 are you planning to add anything else or is this ready? We are really excited and waiting for this feature!. I would also have something written in the Readme like Babel does. > To answer your first question: My current cosmos config uses my production webpack config, so compilation is just as fast as production (as well as to check that everything actually works)\n+1 for this. We recently wanted to speed-up our dev bundle build time and using the DllPlugin decreased our initial build time by around 18%. Unfortunately we can't use that yet with cosmos and we have to pop DllReferencePlugin from the config.plugins inside our playground.config.js.. I think we're good to go! We switched from 0.13 and also removed the react-dom-polyfill usages from our codebase. . > @flaviusone @RadValentin do we still need the ubervu-react-split-pane fork once react-dom-polyfill is gone?\nThat was only used by cosmos so I don't think we need it anymore.. @skidding no additional features besides the 0.13 support (using react-dom-polyfill). We should be ok \ud83d\udc4d .. I don't know how much usage react-dom-polyfill had out there but maybe you should have in mind moving the code to a separate legacy repo. The package served us well \ud83d\udde1 \nAnd now his watch is ended.. > Note: Boy, I sure do wish we could have a darker theme for the fixture editor so it integrates better with the whole Cosmos look and feel. Not sure how easy/possible it it at this point, good to keep in mind for the future.\nYou can do it by changing the codemirror theme here with something like this but it would be better to have that as an optional setting. I personally don't always like dark editor themes.. Also tested DllPlugin in our project and worked. LGTM.. Love level 0! Makes everything simple and easy to understand. And it can also be used for a feature that lets you extend that config from the Cosmos UI itself (and save it on disk). That would imply having the config config in a separate file.\nLevel 1 and 2 might be the thing that makes configuring cosmos hard to understand for new users as they have to setup their files by \"a convention\" and let cosmos do a lot of magic. Maybe something like Jest's testMatch or testRegex might be enough (with a default glob/regex set by \"convention\").\n@amrdraz's ideas for Level 3 sound good and you can model it as an experimental cli command that generates a config described in Level 0 (much easier to implement).. Will I still be able to reuse the new format fixtures for my unit tests e.g. shallow rendering?. > Does anybody here have CommonJS fixtures? cc @flaviusone\nYes we do and we also use react-cosmos-normalize-props-proxy.. I agree with keeping this theme for customisation but can't we move the other .css required into the react-code-mirror fork (as we did with the .js requires). WDYT? \n. @bogdan-stefan-hs had to move this js requires into the react-code-mirror fork because of some webpack reason. @bogdan-stefan-hs maybe you can explain what was happening there \ud83d\udc83\n. I think this will always be true because there are complex data structures that are compared. I think you should use some type of deep comparison like _.isEqual().\nEg for the grid:\n\nAm I wrong?\n. Nice\n. Maybe path.extname  along with path.basename can ease the work done here.\n. This* function\n. I think that only webpack 2 has support for tree-shaking. On the other hand I guess you can use https://www.npmjs.com/package/lodash.omit. \n. It would be nice to not render this all the time in the background (for any loaded component). StarryBg is nice but GPU is still working in the background for no reason:\n\n. I don't understand why did you chose to render DisplayScreen through 'react-cosmos-loader' (and maybe also other components in this PR). The DisplayScreen is a pretty basic component independent of the loader and this test will fail if someone breaks the loader. Maybe I'm missing something though.. I know this is old code but I vote that we remove matching for fixtureAndComponent. \nIn time I noticed that this doesn't work that well as it won't prioritize your specific search and the result you want will be further down the list. Also one-way matching (componentAndFixture) is how all major editors work (Sublime, VS Code etc).\nI don't know if this change will break a lot of tests but I it's a quick win I think we should do it. WDYT?. This kinda does the same thing as DisplayScreen (loads some children) but it doesn't seem to have any tests even if Jest coverage reports 100% (but that's because of the way coverage works). \nDoes anything stop us from adding Jest Snapshots?. I think we can also use toHaveLength() if you want something neater.. A fixture a JS object missing is I guess.. ",
    "a-x-": "hmm, is npm i -S node-pre-gyp not a way?\n. ok, it seems node v6 fix the problem.\nadd node v6 requirement note into readme and into the special field in package.json file, please\n. I used v4 when I faced with the issue\n. ",
    "flavius-tirnacop-hs": "Looking good \ud83d\udc4d \n. @skidding please review\nI didn't bother to replace all the lodash calls for now because most of them are in react-component-playground that is used only for dev purposes. Also the component-playground.jsx calls quite a lot of different lodash methods so we may get quite a lot of imports. Maybe when this gets split into components we can refactor those calls.. @skidding addressed comments. ",
    "bogdanjsx": "Looks great! \ud83d\udc4d \nDid you get the chance to test it with another bundler besides webpack to see how it behaves when react-dom is missing?\n. @skidding Please review the changes.\nYou also need to take a look at the changes in the react-codemirror fork, as I also needed to modify some things there to make playground and the tests work correctly.\nI pinned the npm package to that repo+branch, tell me if you want it otherwise.\nCoverage seems fine, it decreased because there's more code now.\n. Just curious, why disable no-unused-vars in tests and not remove them?\nAnyway, looks beautiful now. \ud83d\udc4f \n. @skidding Can you take a look, please?\n. @skidding How's this? Can't think of a cleaner way to test them, maybe use jQuery?\n. @skidding @flaviusone\nDo you guys like it better this way? Is the code alright?\n\n. @skidding \nCan you review this?\n. @skidding Yes, this does the trick. Nicely done!\n. Must've slipped by when I deleted the top and bottom parts not needed anymore because of SplitPane. Sorry.\nIMHO the CSS needs refactoring, though. But maybe it should be correlated with dividing component-playground.jsx into more files.\nThe code looks good, really nice that you added those tests, should prevent these things from happening in the future.\n. @skidding This was causing some trouble, as focusing the editor on fixture click would only provide it with the fixture contents. onFixtureUpdate wouldn't do anything, because it was focused. Then, on editor blur, it would also add the previewed component's serialization (things such as state, for example) and it looked pretty bad.\nAre you ok with removing it? Maybe I misunderstood it.\n. The thing is react-codemirror doesn't bundle any codemirror addons or styles, to keep the bundle size to a minimum.\nJS require calls (for syntax highlight keyword detection and code folding) inject code into the global codemirror object.\nHowever, webpack bundles codemirror twice, once for CP and once for react-codemirror and requires in CP are injecting code to the wrong instance. All I could come up with is move the require calls to react-codemirror, since we had the fork.\nMaybe some dedupe plugin would work, i am not sure though...\n. It's not needed right now (except in tests), but I'm thinking we should have a way to access these proxies in the future.\n. Yes, they do. Wasn't sure about ES6 classes but it seems they do too.\n. > That being said, this means you can only send the contents of the store once to the ReduxProxy, global for all component/fixtures loaded? Is this correct?\nYes, you're right, this is a problem.\n\nIf yes, I suggest the following alternative: Revert the props thing and continue to send the entire fixture to all proxies.\n\nIf we do this, aren't we decoupling props from the proxies too much?\nWhat happens if another proxy needs a key named 'store' as well, for completely different reasons? It will use the same value.\n. ",
    "adjohu": "please release!\n. It looks as if this was fixed 2 days ago.\n. Worked. Amazing, thank you.\n. ",
    "valentin-radulescu-hs": "\ud83d\udc4d  to what @flaviusone said, maybe you could do something about the annotations? Tests could do with a separate config. Other that that looks good!\n. \ud83d\udc4c \n. LGTM\n. Sounds good, didn't get time to finish last time I tried, will have another go at it this weekend.\n. LGTM. \ud83d\udcb5 . I'd go as far as even removing the reusable part as I feel it's the designing part that should stand out. Either way I think it's worthwhile improvement \ud83d\udc4d . We're good on our end, the other guys are still on 1.0.1 and we're locked to 2.0.0-beta.8 with yarn. Worst case we'll have to add the normalize proxy in one place which isn't a problem.\nFire away! \ud83d\udca3 . Even better if it could be a config option \ud83d\udc4d  . Can this rule be part of the global config?\n. How about making a tests config and including it for all test folders?\n. Let me see what can be done. Might as well get rid of twinkling-texture and clouds-texture variables and the corresponding files.. How about moving the font to /static and loading it through url-loader (already used for .png)?. Similar to fonts, this can be loaded with url-loader as well.. /\\.(png|woff)$/?. ",
    "samny": "Sweet! Thanks for the quick reply @skidding, works like a charm :)\n. ",
    "SimeonC": "For the others that find this issue I thought I'd share my custom emotion based proxy for doing this.\n```jsx\n/ eslint-disable react/prop-types /\nimport React from 'react';\nimport { injectGlobal, css } from 'emotion';\nexport default () => {\n  const BackgroundProxy = (props) => {\n    const { nextProxy, ...rest } = props;\n    const { value: NextProxy, next } = nextProxy;\n// this is my global styles require\nrequire('@ts-styling/Theme/lib/resetStyles');\n\nif (rest.fixture.background) {\n  // here body is the body of the playground iFrame so this happily sets the whole background white\n  injectGlobal`\n    body {\n      ${css(rest.fixture.background)}\n    }\n  `;\n}\nreturn <NextProxy {...rest} nextProxy={next()} />;\n\n};\nreturn BackgroundProxy;\n};\n```\njs\n// in fixture\n{\n  component: Something,\n  background: {\n    backgroundColor: 'white'\n  }\n}. @skidding PR and package created! \ud83d\ude04 \nSo to update my example above with the react-cosmos-background-proxy package I published would be:\n```js\n// in proxy setup file\nimport createBackgroundProxy from 'react-cosmos-background-proxy';\nexport default [\n  createBackgroundProxy(() => {\n    require('@ts-styling/Theme/lib/resetStyles');\n  })\n];\n// in fixture\n{\n  component: Something,\n  background: {\n    backgroundColor: 'white'\n  }\n}\n```. Ohhh, didn't think about cleanup. I kind of assumed the iframe was rebuilt every time.\nThanks for the tips, I'll make some improvements!. I've updated it to fix both issues you mentioned.\nI did try using an absolute div, but that caused some issues with some of my components using flexbox and occasionally I'd get the checkered background showing below the fixture content.\nApplying it to body ended up being the least destructive and most consistent solution.. Inside addJestWrapper I think. It looks like the test to wrap the function is picking up observables and trying to replace them with functions (they use get and set internally).\nI think it could work if you ignore ES6 class getters, setters and inits. Although I haven\u2019t tested what happens with the non class version mobx supports to see if that breaks as well/in a different way.. I used replicated this test in react-cosmos-test to play with it (need mobx in devDependencies), and tried several different ways of working around this with no success. Also I did some testing and it seems like it doesn't even try to wrap functions defined on the class which kinda makes it a bit worthless to recurse into them. It's also near impossible to detect this class compared to an object.\n```jsx\nit('should not apply jest.fn to getters/setters', () => {\n  const { decorate, observable } = require('mobx');\n  class TestClass {\n    value = [];\n    action = (value) => {\n      this.value = value;\n    }\n  }\n  decorate(TestClass, {\n    value: observable.shallow\n  });\n  createContext({ renderer, fixture: { props: { key: new TestClass() } }, cosmosConfigPath: '/foo/path' });\nexpect(getCosmosConfig).toHaveBeenCalledWith('/foo/path');\n});\n```\nI'm fixing this locally by just removing the decorateFixture part (it's a little too automagic for my preferences anyway). Maybe the best solution would be to give an option to turn this on and off depending on your use case.\nMy Fix:\n```js\nexport function createContext(args: TestContextArgs): ContextFunctions {\n  const { fixture, proxies = detectUserProxies(args.cosmosConfigPath) } = args;\nreturn createLoaderContext({\n    ...args,\n    proxies,\n    fixture\n  });\n}\n. I did that PR, seeing as it took me all that time to find the problem.. To add more fuel to the fire, I found that the jest auto-mocker breaks ES6 Map (and I assume Set) as well!\nLike a simple fixture of:\n{\n  props: {\n    map: new Map()\n  }\n}\n``\nIf you try dothis.props.map.keys()in your component you getError: Uncaught [TypeError: Method Map.prototype.keys called on incompatible receiver #]..4.0.0-rc.3worked for me with the new setting. Thanks! \ud83d\ude03 . The component isAdvancedEditor/Row.jsx.\nThis only started happening when I nested fixtures/Row/basic.jsx, when I had it asfixtures/basicRow.jsxit worked fine and appeared without the extra folders. I just didn\u2019t expectfixtures` to go appear in the cosmos UI just by adding a sub folder.\nI think the fixture went a bit like this (left laptop at work so this is from memory).\n```jsx\nconst Wrapper = (props) => (\n  \n);\nWrapper.displayName = TranslationRow.displayName;\nexport default {\n  name: \u2018basic render (empty)\u2019,\n  component: Wrapper,\n  ...other fixture data\n};\n```. Thanks for the clarity and solutions!. Thanks for the pointers, I had completely missed that that's what enzyme does now so that makes more sense. I've updated the tip to focus more on that information and added the block quote.\nMy theory of why getRootWrapper().update() didn't work is that the result of getWrapper() might be immutable so updating the wrapper still needs to get the new rendered one.. I'll copy paste my code here for handling it, basically you need to use regex not string.\n{\n    url: /\\/ga-translate\\?value=[^&]+&from=[a-z]+&to=[a-z]+$/i,\n    method: 'post',\n    response: ({ _url: { query } }, res) => {\n      const { value, to: targetLocale } = query;\n      const translatedText = `${targetLocale}-${value}`;\n      return res.status(200).body({\n        data: {\n          translation: translatedText\n        }\n      });\n    }\n  }. Yea, I couldn't replicate it in that example either (it definitely happens in my repo though).\nI'll have another poke around and see if I can replicate it when I have the time, I have a feeling this may be due to some other proxies I'm using or possibly MobX which prevents the re-render. (But this did get things working on my machine).\n(Actually thinking about it, it quite probably is MobX or something else playing with componentShouldUpdate but I'll confirm that).. Sorry to take so long to get back to this. Finally dug down into the problems - my setup was using webpack and babel v6. Upgrading to v7 fixes this issue so I'll close as it's not relevant anymore.. Ahhh, I found it. There seems to have been 2 issues. One of which was fixed by the upgrade, the other is considerably weirder - and I can actually reproduce it. So it looks like the webpack HMR was watching my <PROJECT_ROOT>/.gtm (git time manager) plugin file and triggering updates. This probably is pointing to some issue in my webpack setup that should be more discreet in watching for changes (I've also noticed <PROJECT_ROOT>/node_modules/.cache/* files triggering this same behaviour).\nTerminal\nsh\n[Cosmos] webpack build invalidated by .gtm/1528880846.event\nwebpack building...\nwebpack built 1266c0e27527f30f7adb in 452ms\nBrowser Console with following code in XHR Proxy:\n```jsx\nexport function createXhrProxy({ fixtureKey = 'xhr' }: Options = {}) {\n  class XhrProxy extends Component {\n    constructor(props: ProxyProps) {\n      super(props);\n  // webpack shiz\n  // $FlowFixMe\n  if (module.hot) {\n    module.hot.status(status => {\n      if (status === 'check') {\n        console.log('[XHR] teardown on check');\n        xhrMock.teardown();\n      }\n    });\n  }\n\n  console.log('[XHR] Constructor Mock');\n  this.mock();\n}\n\ncomponentWillUnmount() {\n  if (xhrMock.__prevProxy === this) {\n    console.log('[XHR] unmock on unmount');\n    this.unmock();\n  }\n}\n\nmock() {\n  // Clear mocks from a previous FetchProxy instance\n  // Warning: A page can only have one FetchProxy instance at the same time\n  console.log('[XHR] unmock in mock()');\n  this.unmock();\n  console.log('[XHR] Build Mocks');\n  const mocks = this.props.fixture[fixtureKey];\n  if (mocks) {\n    xhrMock.setup();\n\n    mocks.forEach(options => {\n      const { url, method, response } = { ...mockDefaults, ...options };\n      xhrMock[method.toLowerCase()](url, response);\n    });\n    xhrMock.__prevProxy = this;\n  }\n}\n\nunmock() {\n  xhrMock.teardown();\n}\n\nrender() { ... }\n\n}\nreturn XhrProxy;\n}\n```\n\n. I've reopened this MR, but I'm not sure in looking at it if this would be the best fix. Even in this case we would end up doing a lot more teardowns and setups than really necessary.. \ud83d\ude03 Thanks, that was it all along. I'll close this again - that's definitely the way to fix it.\nThanks for your patience!. There is a way of doing it - Create React App does it with a custom regex here https://github.com/facebook/create-react-app/blob/next/packages/react-scripts/config/webpackDevServer.config.js\nA good start might be .something files and folders. Normally they\u2019re just config/ide files in my projects which I don\u2019t really want being watched and would have protected against my problem.\n(I use my own fork of CRA so that was what I was starting to fidget with when I got your message about watchDirs). . I think this is the kind of thing that you have to customise per context.\nHere's an example of how I do it https://gist.github.com/SimeonC/0a4e21c0e5406d28bdde4d824986279f\nAs a full solution, the proxy constructor would probably end up like taking a map of key:Provider.\nNot sure how much time I have in the foreseeable future to run this up as a PR so probably a good one for someone else to do \ud83d\ude1c \njs\ncreateNewContextProxy({\n  shopsContext: Provider1,\n  otherContext: Provider2\n});. I've updated the gist with that idea - @skidding feel free to add this to react-cosmos, I'd create a PR but a bit short on time and not sure where you want it. I don't think it'd make much sense to make this an external proxy as context is kinda core to react.. Pushed an update with the review changes. \ud83d\udc4d . Cool, didn't know about that package. Looks like it would allow us to do it much cleaner - I'll give it a go.. So I can use some of that package to help out, but the functions are designed for use in TestRender apparently so don't detect forwardRef components here: https://github.com/facebook/react/blob/bc1ea9cd96c81467c574b134349eafc303835d0e/packages/react-is/src/ReactIs.js#L29-L33\nI've updated to make it a bit more consistent overall.. I couldn't write any tests due to this open PR on enzyme: https://github.com/airbnb/enzyme/pull/1592. Cool, looks like the latest fork of enzyme adapter does work (at least locally). Added tests and resolved conflicts.. Updated with fixes. 1 was just me not checking properly, 2 was forgetting to actually run the flow checker, forgot to set it up in my IDE so no errors were showing up. Should be fixed now.. Missed refactor - I'll change it. Along with trying to flatten the function down a bit more.. ",
    "jlc467": "This solution should make using fixtures more intuitive as well. New to fixtures, I took a glance at the local-state example and saw state: { } so assumed props was props: { }.. Since 2.0 is a major version, you are allowed to break the API, right? Code recipes for two upgrade paths (codemod or proxy) seems ample, with codemod being the preferred way (otherwise you have to maintain a list of proxies/magic attrs to exclude). Some fixtures won't have props on purpose, but I don't think that matters. That's all I can think of right now.. Sure...I'll take a crack at it this weekend. Never written a codemod before, or a proxy for that matter, so this will be a great exercise. I'll start with the fixture redesign first though, and see how it goes.. With this idea, does the component's location become a tooltip? Right now, the component's location is part of the item text, which doesn't take much to cut off (see below).\n\nI imagine the component location was included to avoid confusion when a component shares the name with another component in another folder. If I had to choose though, I'd rather see just the component name (with location as a tooltip), and use the search bar to narrow in a specific folder as pictured above. Just 2cents from someone that has a project with 3 level deep folder nesting.\nAs far as splitting between with/without fixtures... In my case, I had so many components that didn't make sense to show in cosmos at all without me adding fixtures and making them more \"independent.\" So what I ended up doing is using an exclude filter in the cosmos config to only include components with \"IC\" in the file name. Depending on implementation, splitting with/without would accomplish the same thing in a cleaner way.\n. Just gonna leave these tree view components here for reference later:\nhttp://alexcurtis.github.io/react-treebeard/\nhttps://ant.design/components/tree/#components-tree-demo-search\nhttps://cdn.rawgit.com/chenglou/react-treeview/aa72ed8b9e0b31fabc09e2f8bd4084947d48bb09/demos/index.html. > Are you interested in playing with the source code (maybe even contribute) to achieve this?\nSure. Any pointers are appreciated. I have the react-cosmos repo up and running locally. I added a view source button here, but it only really shines when you deploy the playground for viewing when the source isn't on your local.\n\nMy end goal is to use react-cosmos as more of a code notebook and less as a component testing solution.. Thanks for the instructions! Going to try this right now.\nRe: the view source button -- not planning on adding code editing to it. I will use the fixtures editor for playing with components, but beyond that I would miss my code editor too much. I have been dreaming of extending the search box to include searching the source code. Not fuzzy searching, but more like how editors implement find in files. The overall dream is to have a place where you keep code experiments, examples, recipes, or whatever you want. Cosmos auto-discovery and zero-config makes it an ideal solution for this \ud83d\ude04 . This PR seems to get the job done for me: https://github.com/jlc467/react-cosmos/pull/4\nHaven't tested with a custom webpack config yet, but I'm going to do that next with some file loaders and maybe UglifyJS plugin and see how it all works.\nLet me know if I can do more to help get this feature merged. I can make further changes as needed.. > I managed to tweak the URLs and make it work locally, but I'm still thinking of an elegant way to fix this. How is this working on your end?\nThe only way I could get it working is by redirecting everything to index.html with a web server. I tried by copying the export to my root and, while the playground shell would load correctly, the iframe would just show the directory browser which does have the index of the user in it. Sorry I can't be much help here.\nedit:\n\"The only way I could get it working is by redirecting everything to index.html with a web server.\" After playing with it more, I take it back. This was true when I didn't have the index of the user copied in the loader directory. Now that I have it there, I don't need to run the web server in \"SPA\" mode. Still can't get Chrome to load index.html in the iframe from file:// though.\nAlso, added some tests to cover the changes. Let me know what else I can help with. . @skidding Thanks! This has been educational and fun to work on. I'll implement these changes sometime within the next few days, after which i think it would be good for you to review so we can wrap this PR up! \ud83d\ude0e. @flaviusone @skidding  Ready for code review. @skidding Changes made \ud83d\ude0e. Well explained... I'll make these changes before the end of the weekend. Wondering how many levels deep I need to check to find unserializable props? I'll start with props root for starters.. Still todo:\n- [x]  Make NormalizeStateProps a working package (not sure what is needed here as far as lerna and tooling config)\n- [x]  Tests for NormalizeStateProps\n- [x]  More tests for StateProxy and splitUnserializableParts\n- [x]  Code review on latest changes (see below changes that I'm iffy about)\n\n[ ]  Finish backwards compatibility example (my vote is to move it in a folder separate from /examples to avoid confusion with old API)\nI use .pick + .omit in the proxy because I thought we don't want to leave behind what we transfer to fixture.props\nStateProxy passes fixture untouched to PropsProxy now\n. Awesome... looks like this is pretty close to done. Review makes sense to me, so I'll make the changes as suggested. Should be able to get it done during the week, if not definitely over next weekend.. @skidding Implemented feedback and added tests. Not sure where you want the NormalizePropsProxy example to live. I've seen projects split up the examples folder into e.g. simple-examples-start-here, advanced-examples, real-world. I think this is a real-world example of how to achieve backwards compatibility, but simple everything else. . >  It would help to make notProps customizable via proxy option (e.g. fixture key for context proxy). Is it possible to add this as well?\n\nYeah, sure. No telling what kind of magical custom proxies people are running. To pass the options, the correct approach is to wrap the proxy, e.g. as seen here, correct?\nWill fix the bug too. Not totally clear on why the fixture is split and then merged again (why not just use the original fixture?), so will read more into that.\nShould be able to get this done tomorrow.\n. > Because of the fixture editor. Users can edit the serializable part of the fixture, which is merged with the unserializable part (you could call that part immutable) to form the new fixture.\nMakes sense!\n\nYes... but in that example we're composing proxies. I think the Redux proxy is also good inspiration. The idea is to put the whole proxy component inside a create function, in order to have access to the options passed to that create function.\n\nI think my question is geared towards composing proxies. How would the user pass options to the new NormalizePropsProxy? I will definitely reference the Redux proxy to implement the ability to pass notProps option to NormalizePropsProxy\n. > In the future we could allow proxy options inside cosmos.config (similar to webpack loader options), but I don't think Cosmos is popular enough yet for that sort of customization :P\nYeah, I'm not sure the overall idea of developing components in isolation has hit mainstream yet. People seem more keen on the UI explorer/documentation aspect. Sometimes the killer feature of a project is misidentified early on, and it isn't until later that people realize that the better benefit is something else. Personally, I'm only doing cosmos-first development from now on, where cosmos playground is the entry point and you delay writing nav / router type components that can distract from the app's idea.. @skidding Let me know if you think of anything else. A new test to cover the serializable overwriting unserializable crossed my mind, but wasn't immediately obvious how to tackle that. I imagine such a test would live with the fixture editor tests. . @skidding Sweet! And thanks for helping me with the contributions \ud83d\ude4f.  I know README updates are still missing for both this and cosmos-export, so if that hasn't been picked up in the next couple weeks, I will try to contribute there. . Trying to see if I understand the issue. \n\nThis is only an issue for scripts loaded in the user's index.html that we want to make use of in a fixture\nFixtures can use modules imported from the user's node_modules with no issue in the current beta\n\nWith this understanding, my questions are:\n- Why would one use code splitting with cosmos? I would think that would be part of a prod webpack config, not a cosmos one.\n- Can we think of a better example besides lodash that someone would want to use in a fixture? Since fixtures aren't shipped to the user, I would be less concerned if fixtures imported their own version of lodash instead of wanting to use one in the index.html\n. @skidding Checked out your branch and tried some examples, as well as the cosmos export -- all good! Once this makes it into a beta, I can start testing it everyday.. > If user wants to create a fixture via this flow it will go in fixtures\nWorks for me. For some reason I thought external fixtures folder was a new feature, but I was actually confusing fixturesDir and fixturePaths\ngetFixtureFolder is definitely a WIP. The goal is to determine where to create the fixture. I might try to have getFilePaths return the components with missing fixtures, along with the path(s) the fixtures were looked for in. That way, create-fixtures does not need getFixturesFolder and is always creating fixtures where they will be found. This will require studying paths in voyager a little more, and I'll make comments as I go. The final approach may be to leave getFilePaths alone, but reuse some of the functions for finding fixtures as a way to get the fixture folder. Will play with it some more. Thanks!. Will open new pull request with new approach to fixture generation at some point in the future.. I tried the dll example and it seems to work.. \ud83d\udc4d\nSomewhat related... Even though we use module.exports in CRA cosmos.config example, do you think this line would confuse someone?\nCurrently:\nDefine .babelrc to enable ES6 in config & fixtures, using the CRA preset.\nProposing:\nDefine .babelrc with the CRA preset to enable ES6 for fixtures and components.\nI meant to address this in https://github.com/react-cosmos/react-cosmos/pull/379. CRA is so plug and play that I'm not sure people are taking note of the plugins included in the preset (myself included). \n. @skidding Think I understand. CRA's webpack config already defines the babel preset to use, so the .babelrc isn't required. \nAs for removing webpack 2 section -- it wasn't saying much beyond making sure to set { \"modules\": false } if you are using the es2015 preset, but users can decide on their own which preset they want to use.. Trying to understand the benefit of CommonsChunkPlugin in cosmos. Since we replace output anyway, wouldn't a user webpack config with CommonsChunkPlugin work without cosmos supporting it? Maybe if they use their own index.html file with script references to the common chunks, but otherwise, I'm not understanding the benefit.\nSeems like this PR gets rid of hmrPlugin option in cosmos.config and only adds HotModuleReplacementPlugin if it hasn't been added in user's config and hot is true. LGTM. I will try to check out and test tomorrow. . Source maps example working on my end too. Was looking for the .map file in the network tab... ended up finding it in chrome://net-internals/#events. On the topic of exporting, the playground seems to use root-relative links, resulting in:\n\nIf I change to relative, e.g. \n\neverything \"just works\" again.\nIf this needs a code fix, I can open an issue and address is separately. Otherwise, it might be worth adding the need for a web server to the documentation. What do you think?. Level 3 is nice, but #389 is lower hanging fruit IMO. Adding component directories to a config file is simple relative to creating fixtures so cosmos can render them.\nLevel 3 and #389 done together gives much improved first time experience:\n\nyarn add --dev react-cosmos-webpack (this is kind of confusing because the project is react-cosmos)\nAdd  \"cosmos\": \"NODE_ENV=development cosmos\" to scripts (weird step but worth it)\nyarn cosmos\nCosmos playground will auto detect component paths with level 3 and present user with a selectable list of components to create fixtures for with #389. \n\nNo config files, no learning new concepts (i.e. fixtures) before seeing the playground in action.\nThat said, I think #440 needs to be done before #389 since #389 uses code from react-cosmos-voyager whereas #440 will use nothing from #389.\nPersonally, I plan to use level 2, which is basically what i'm using today. Can't speak much for level 0-1 -- never had a need to target so selectively.\n. I like the idea of config generation along with fixture generation. So far though, I seem to be the only one that finds creating fixtures tedious while creating a cosmos config a breeze. I think both have value, but a CLI command to generate a cosmos config seems like helping someone to cross halfway across a busy street. You get them started like hey this is easy, but leave them stranded with components they can't render because they don't have fixtures yet. That is exaggerated because I have noticed the playground does a great job of pointing to the readme which explains fixtures.. I'm genuinely curious why people want the granularity of level 0. I think some example user stories would help me. Seems time consuming, high maintenance. Sometimes I want to hide certain components that don't have fixtures, so from that perspective I can see the benefit if it happened often enough.\n\nAs you say, we can have auto detect and auto generate fixtures via the Playground UI, but then we can store it in the config so the user sees what happened in the back. Full transparency and customizability, with a UI layer on top. What do you think?\n\nNow level 3 storing as level 0 is a different story. Deleting components from the config that you inadvertently added through the UI is often easier than deleting through UI. The UI would handle the heavy load of adding the components paths to the config, ideally with a chance to sub-select from the detected components. If we are detecting components, we can detect any existing fixtures too, and if not found, give the option to scaffold them. I like this idea the best so far.. @tkjone Thanks for the writeup. By maintenance I mean -- what if you move a component to another folder, rename a folder, etc -- my understanding is this would all require updating level 0 config. \nThese components on your ignore list -- I'm assuming you don't create fixtures for them -- what if components without fixtures were hidden from view? Would you still want level 0 control?\nI agree about create-react-app, it is an annoying step that could be replaced with something that contributes to learning cosmos. So how would a level 0 create-react-app config look..like this?\n{\n  components: {\n    App: './src/App'\n  },\n  fixtures: {\n    App: {\n      one: './src/__fixtures__/App'\n    }\n  }\n}\nIt actually looks nice with just one component.. trying to imagine 200.\nI can see a ui library that is shared across multiple teams wanting the explicit level 0 config for the sake of self-documentation and reliability (no surprise components added accidentally). Also, if I imagine my team growing in size, I could start to see level 0 making sense. More developers adding components, some of which aren't meant for cosmos -- could create clutter/confusion -- level 0 would ensure that components that are in cosmos are meant to be there.. Installed @skidding/react-cosmos-webpack@^2.2.0-2 and gave it a quick spin.. seems to work great.\nCouple observations:\n- The playground listed a fixture whose component was not in cosmos config componentPaths.\n- The new fixture format is intuitive/concise -- I like it. Biggest win for me is fixture folder/file structure freedom. It was one of the main things preventing me from writing fixtures.\nMy next cosmos experiment when I find the energy:Writing a script that you run inside a component folder that detects all the components and creates empty fixtures (using new format) for all of them, either co-located or in a path that is passed.. Trying out react-cosmos-webpack@next... working great. This is and the new tree view are both huge, amazing steps forward. \ud83d\udc4d\n\nFixture files can export one or more fixtures (for the same or for different components). \n\nI might be doing something wrong, but can't get this to go.\nHere is my fixture.\n```\nimport Button from '../components/AsyncButton';\nimport React from 'react';\nexport const defaultProps = {\n  component: Button,\n  name: 'Default',\n  children: 'Save Item'\n};\nexport const isLoading = {\n  component: Button,\n  name: 'Loading',\n  props: { isLoading: true },\n  children: 'Save Item'\n};\n```\nError:\n\nI tried to debug it a little and came up with this line which is calling importModule that takes a moduleName as 2nd parameter to support named es6 exports. However, I can't see that moduleName is being passed so it returns undefined.. @skidding \nResult when exporting an array like the example you gave:\nAt line 75  componentModule is undefined because deprecatedComponentModules is {}. When componentModule passed to importModule, causes the error below.\n\nI think the code maybe took a wrong turn because componentPaths has to be defined in cosmos config for deprecatedComponentModules to be defined. Any ideas?\nQuestion: Is it supposed to be read as an old school fixture and then upgraded on the fly? If so, doesn't that involve the AST parser? If so, it seems like there are lot of limitations with the parser.. for example, if the user exports like this: export default [fixtureOne, fixtureTwo],  I was  getting different results than if I exported as in your example. I can give more detail if this is the intended path for multi fixture files.\n. > I still don't understand how you got that TypeError since that whole block of code is guarded by try/catch...\nI logged it to try to understand what is going on.\n\ndid you remove componentPaths from your config before upgrading fixtures?\n\nNever had componentPaths defined. Not sure why I should need it, or the code mod for that matter. I'm using newer fixture format, just exporting multiple in a single file. Why does that need to be upgraded?\nhere is my cosmos config\njs\n// cosmos.config.js\nmodule.exports = {\n  webpackConfigPath: 'react-scripts/config/webpack.config.dev',\n  publicPath: 'public'\n};\nMy fixture\n```js\nimport App from './App';\nimport React from 'react';\nexport default [\n  {\n    component: App,\n    name: 'Default'\n  },\n  {\n    component: App,\n    name: 'Loading'\n  }\n];\n```. Hi @skidding,\nIn the first screenshot, is html-webpack-config the intended package name?\nAlso, what is the advantage of making the user install it separately when using default webpack config, versus installing it with react-cosmos-webpack?. \ud83d\udc4d Thanks for fixing that. . Noob question here -- I'm not at all familiar with Lerna, so I checked out the docs for hoist which describe it as a flag (--hoist). However,  I can't see that flag set anywhere in cosmos. Not sure why the flag would be needed anyway, since, by default, node looks in the root folder's node_modules for packages? I guess it depends where you are running the example from.. ",
    "coveralls": "\nChanges Unknown when pulling 254f582ce29b57b6c7c35763f13bc75e36b65e18 on unify-jest-tests into * on master*.\n. ",
    "BTMPL": "@skidding I'm running into the same issue. \n1. clone https://github.com/btmpl/react-hot-loader-example\n2. npm install\n3. npm install react-cosmos-webpack\n4. create cosmos.config.js\n5. node_modules/.bin/cosmos\nWhen accessing localhost:8989 all I see is \"Cannot GET /\"\nIn the console I only see \"Listening at ...\" - no bundling etc. happens\n. I've copy&pasted the example from readme, so:\nmodule.exports = {\n  componentPaths: ['src/components'],\n};\n. Briliant! That solves my issue.\nAs for where to document it - if you aren't able to read the contentBase from webpack.conf.js it might be worth adding the line in the example cosmos.config.js in your README.md and add a not to make it the same as webpack.config.js or maybe in the webpack example (as I now see it is explained in the full cosmos.config.js writeup).\n. Um, actually that might be an err on my side, as I still need to add --content-base=dist/ to my webpack-dev-server call - now I know why :)\ndevServer.contentBase is the correct key\n. Looks good to me. I know this will only be worth for people using webpack-dev-server, but it's still something good to have IMO :). Looks good! . ",
    "ryaninvents": "Never mind. I'm an idiot. I injected some styles improperly into the <head> and ended up breaking everything.\n. ",
    "nn8033": "Cool! That'll be a game changer!!! I'd love to know more about this idea. \nAs a UX/UI designer, I do need a place to document all visual/art assets, and make it more functional (not only the png files but also contains front-end code). That'll definitely improves my productivity, and makes the communication easier with front-end devs.\nLove it!. ",
    "gajus": "\nNot that it means much, but Cosmos started 2y before Storybook.\n\nI see. My impression was that react-cosmos is a new project. I saw it first few months ago on HN.\n\nA comparison table would be nice, and we should probably throw others in the mix as well, like Carte Blanche or react-styleguidist.\n\nGood idea. You can use https://npmcompare.com/compare/connect,express to start.\n\nHope this helps.\n\nThats very useful. Thank you. > Are you referring to the fact that webpack@2 users will have es2015 modules disabled in their .babelrc (and let webpack handle es2015 modules), like this?\nYes.\n\nThe react-cosmos modules are already published as es5, so the only problem I can anticipate is disabling Babel modules and using es2015 import inside cosmos.config.js, which isn't processed through webpack. Is this the problem you identified or something different?\n\nI have a component, e.g. src/components/TestComponent.js\n```js\nimport React from 'react';\nexport () => {\n  return Hello, World!;\n};\n```\nSuppose my .babelrc is:\njson\n{\n  \"presets\": [\n    [\"es2015\", { \"modules\": false }]\n  ]\n}\nWith this setup, if I use react-cosmos, I am getting an error on import React from 'react'; in the src/components/TestComponent.js.\nI am assuming this is because react-cosmos directly depends on webpack@1?\nhttps://github.com/react-cosmos/react-cosmos/blob/81ad59e73911faf8117ba3f02fb6786b316e2963/package.json#L74. > One solution would be to try to upgrade Cosmos to use webpack@2 internally and tell users when to turn off babel-plugin-transform-es2015-modules-commonjs.\nSounds reasonable.\n\nAnother would be to move webpack to peerDependencies and rely on the user's webpack copy (provided that APIs match, of course). What do you think?\n\nThis is preferred.. webpack v2 wraps this in rules configuration.. ",
    "mocheng": "Finally I get it worked by downgrading webpack from ^2.1.0-beta.25 to ^1.13.2.. BTW, the componentPaths with trailing '/' does work in early 2.0.0-betar release. I made it work a few weeks ago. Then, after a total refresh npm install, boooom!. @skidding good to know the info.\nI managed to make example work. The problem is that I have a globally installed webpack v1.x. After uninstall the global webpack and refresh npm install, all examples work fine.\n. @skidding I'm organizing code in feature-based way similar to ducks, which means Redux reducers, actions and React components of same feature in same folder.\n\nDo you have more than one component inside src/components/Home?\n\nYes, there are more than one component inside. And, there is a index.js file that is not actually not React component.\n\nIs src/components/Home/index.js a component?\n\nNo, src/components/Home/index.js is not a React component. It is just imports all reducers, actions and React component; and export them. So, it basically is public API for given feature.\n. @skidding Since we have getComponentName, it seems that, in my case, it would be better to specify compoentPaths to be exact file paths aside with getComponentName definition. Documentation on getComponentName would be helpful for other users.. +1. ",
    "ovidiu-bute-hs": "@mocheng Webpack 2 is not stable yet, I wouldn't recommend using it until it's released.. Didn't know about the xhr-proxy. It looks really good, and has the advantage of writing fixtures in pure JavaScript as opposed to a DSL like in my example. I agree the backend way is more difficult to do, and for the end user I think it would be about the same experience, as he still needs to write his fixtures. He'll need to add the proxy to his webpack.config.js but if we make the API friendly then that will be a no-brainer.\nWe should open-source the xhr-proxy and see about writing a fetch one too.. @skidding I already tried to upgrade Jest to 18 since I needed an equalsMatch helper. Unfortunately a lot of tests are failing. \ud83d\ude22  Maybe you could open an issue for it?. One step closer to IDE integration \ud83d\ude09 . We could use something like cross-env to solve the passing of environment variables. It's true that env variables in Windows are something like %PACKAGE% and not $PACKAGE, so it won't work out of the box. I have a Windows machine but I haven't turned it on in over a year \ud83d\ude04  Maybe @RadValentin can help out?. A config file with the dependencies would be useful for this. Example:\nmodule.exports = {\n  \"react-component-playground\": {\n    \"depenendents\": [\n        \"react-cosmos-utils\",\n        \"react-component-tree\",\n        ...\n      ] \n   }\n}. Agree.. Sure!. Passing arguments to npm run build was not intended. You could do that to the old target and pass watch to the last package build target. It's interesting how it turned out though, running just build would definitely be easier to understand \ud83d\udc4d . ",
    "Planckit": "Using es6 import export in webpack.config.js or webpack.config.babel.js isn`t working.\nreact-cosmos@4.5.0 \nwebpack@4.15.1\nGet SyntaxError: Unexpected token export\nwith es6 export in cosmos.config.js\nexport default {\nor without es6 in config SyntaxError: Unexpected token import in webpack.config.babel.js\n. Please Reopen. Tested under \nNode@10.7.0 <- latest at 24.07.18\n```\nD:\\Dev\\PrivateProjects\\workflow\\config\\webpack\\webpack.config.babel.js:1\n(function (exports, require, module, __filename, __dirname) { import general from './webpack.general.babel.js';\n                                                                     ^^^^^^^\nSyntaxError: Unexpected identifier\n```\nSome suggestions on how to use webpack.config.js (webpack.config.babel.js) with es6 import?\n. ",
    "amrdraz": "This is relevant to me, can I work on this over the weekend?\nI'm thinking of http://alexcurtis.github.io/react-treebeard/. Checkin update this weekend was spent on an urgent work related project ( my project is close to getting bloated enough in components to really need this though \ud83d\ude05  )\n. started a pull request with a prototype please review ui ux\n\ntree-bed was super bloated so I built the tree view myself and added it as a subcomponent\nI did not change the current search system nor save the state of tree or search\nchanging the search output is a matter of changing how fixtures are filtered (I can make it more like the tree-bed demo showing only the relevant fixtures)\nI support merging trees so it's possible to save the state of the tree (open foldersa and all)\nhowever I don't find it that useful yet\nI was thinking of being able to pin a folder such just under the search when focused on a specific area, but again though my project it didn't feel that much useful, maybe just saving search is sufficient.\nany node in the tree when clicked, will call the onNodeClick or onLeafClick hook, passing the node\ncontaining its name, path (up to this point), value (in case of leaf) and children etc\nright now I set as value for each leaf in the tree the fixtures and component, which is then used to update the url onClick.\nwhat else needs to happen in alignment with other changes?\nI intend on rewriting the tests for fixtureList since most of them are handled in the Tree component tests\n. just came across this\nhttps://github.com/farzher/fuzzysort. Greate that works, (for some reason I couldn't start the project so I started a new one)\nBut I found a small problem\nIt seems as though all files under fixtures in the same component get loaded, so in this example the slide fixture is being read twice under BannerCarousel\n\n\n\n\nInspecting the code I realized the reason is that getMatchingFixturesmatches the componentName against all available fixture paths\nand since the nested component by definition included the parent component\nthe nested component fixture appear in the parent component fixtures.\n```\nFor componentName:\"BannerCarousel/components/Slide\" fixtures paths match\nfalse '/Users/draz/web/cairousel-web/src/components/fixtures/Text/header.js'\nfalse '/Users/draz/web/cairousel-web/src/components/BannerCarousel/fixtures/default.js'\nslide /Users/draz/web/cairousel-web/src/components/BannerCarousel/components/Slide/fixtures/slide.js\nfalse '/Users/draz/web/cairousel-web/src/components/Button/fixtures/default.js'\nFor componentName:\"BannerCarousel\" fixtures paths match\nfalse '/Users/draz/web/cairousel-web/src/components/fixtures/Text/header.js'\ndefault /Users/draz/web/cairousel-web/src/components/BannerCarousel/fixtures/default.js\nslide /Users/draz/web/cairousel-web/src/components/BannerCarousel/components/Slide/fixtures/slide.js\nfalse '/Users/draz/web/cairousel-web/src/components/Button/fixtures/default.js'\n```\nThe culprit is the second regular expression in \njs\nconst buildPathMatchers = (componentName, fixturesDir) => [\n  `/${fixturesDir}/${componentName}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n  `/${componentName}/(?:.+/)?${fixturesDir}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n  `/${componentName}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n];\nI removed /(?:.+/)? from the second line which I believe more strictly matches the behavior that is expected \ndiff\nconst buildPathMatchers = (componentName, fixturesDir) => [\n  `/${fixturesDir}/${componentName}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n- `/${componentName}/(?:.+/)?${fixturesDir}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n+ `/${componentName}/${fixturesDir}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n  `/${componentName}/([^/]+)\\\\.(${FIXTURE_EXTENSIONS_REGEX})$`,\n];\nAnd everything works fine, I forked the repo and ran the tests after my modification and everything checks out.\nshould I create a pull request?\nupdate it seems I didn't notice the failure and am working on fixing it. ok so the separate-packages test fails because getComponentName when defined in the config file assumes that the fixture folder must lie under the component in general, but as pointed out by my issue  this behavior would leade to the component matching with it's nested component's fixtures.\nI believe the default behavior should be to match the componentName and only \nconsider fixtures as shown in the docs (ie not to match Foo/src/__fixtures as a default)\nsomething like capturing nested path should be handled by replacing the getMatchingFixtures which is already something that's possible in the config file. I updated the test case to reflect the argument and added another case for fixtures that are nested under components with fixtures which will fail under the old way the regular expression was setup.\nnow all tests pass. @skidding done. \n/components/ComponentA/components/ComponentB/ is pattern I picked up from this post. But I agree that while it helps keep things clean when I have other type of files that are specific to the component (reducer, actions, services etc..), it gets repetitive but. I'm not too attached to it, plus I try to conform to the projects conventions, I mainly kept it to keep a deeper tree when testing. (was even thinking of making the tree ignore it XD but then that would have invited all sorts of trouble)\n\nThe code is mostly tests actually there are 3 files that were introduced and a modification to the FixtureList to adapt the change.\nWe have the Tree component and its TreeService and we have a subcomponent of Tree called Node which renders each node in the tree. \nNode\nThe Node component takes props\njs\n{\n  name: string, // the name that appears next to the folder\n  path: string, // the path up until this point in the tree used in title and to trigger actions on this node\n open: boolean, // if this node is not a lead then if true it will show the children and the down arrow\n active: boolean, // is true when the node is selected\n isLeaf: boolean, // is true when node path matches the path used to construct this node and the path ends with a value\n value: any, // a value that is set for the leaf at the end of the path can be anything\n onLeafClick: (node)=>{}, // a function that is fired when a leaf is clicked\n onNodeClick: (node)=>{}, // a function that is fired when a non leaf is clicked\n treeService: TreeService, // an instance of the TreeService used to select and toggleOpen\n}\ninstance methods\njs\ntoggleOpen() // opens the node ats props.path\nselectNode() // selects the node at props.path\nTree\ninitializes the TreeService and subscribes to it's state\nupdates the TreeService with changes occur to props that may change the state\ncan take the following props\njs\n{\n  fixtures: object //  an object map of a path to the components with and array of fixture names used\n  paths: object // a processed paths object with path to fixture and value to be set on the leaf\n  tree: object // an initial tree state\n  selectedPath: string // path to be selected after the tree has been constructed\n  onLeafClick: (node)=>{} // a function that is fired when a leaf is clicked passed the node as argument\n}\nWhen rendering the tree will sort leafs at the beginning in order to place the fixtures right under the folder then subcomponents can show\nTreeService\nThis is where the tree's state is managed, it can be initialized with a tree state, a paths object, or a fixtures object\nThe tree is constructed using a paths object of the form { [path]: value }\nfor each path in paths, a node is created for every fragment of the path\nThe node with the last fragment in the path has the value attached to it.\nall nodes are initially open\n\na path fragment array is the results of splitting the path on / (with this be a cross platform issue?)\n\nif initialized with fixtures, fixtures are converted to the paths object form\njs\n{\n  `componentA`: [`fixture1`, `fixture2`],\n  `componentA/B`: [`fixture1`],\n  `componentC`: []\n}\nbecomes\n{\n  `componentA/fixture1`: {\n     component: 'componentA',\n     fixture: 'fixture1'\n   },\n  `componentA/fixture2`: {\n     component: 'componentA',\n     fixture: 'fixture2'\n   },\n  `componentA/B/fixture1`: {\n     component: 'componentA/B',\n     fixture: 'fixture1'\n   },\n   `componentA/B`:  undefined\n}\nthe tree is immutable and always updates the path the changed\nTreeService.select(path, multi)\nset the node at the end of the path to active:true\nmulti is a toggle option for multi path select, it is not needed, I was mostly playing around :P \nTreeService.toggleOpen(path)\ntoggle the open property of the node at the end of the path\nI will update the files to reflect documentation\nregarding the state upon reflection I agree there is no need to retain the fixture or selectedPath in the state I will move them back to be computed in render.\n\nI thought of a means to highlight the background and can change the folder icon\nI personally prefer having something to anchor my eye on regarding the fixture icon, but I'm not attached to it.\nI do not agree completely with regards to the spacing between elements, the font felt a bit large when in the tree view.\nWill apply updates on Monday night I think. Regarding Level 3\nCan't we detect component by scanning all files and folders starting the root for files that look like they are components\nexample files with JSX syntax using esprima\nor files that import React\ninitially I was thinking files that return a component but I don't think we should go beyond static analysis.\nso maybe use babel to fish out promising abstract syntax trees or something similar\ninspired by reading this\nso if react has codemods then it must be possible to detect a react component being exported as default\nany file with a react component exported as default?\nany file with React imported and a pure function being exported as default?\nmaybe I'm over engineering this, a regex that notices that React was imported/required would probably suffice as a pretty decent hint \ud83d\ude05 \ncertainly a .jsx file is a good hint as well. I'm loving the AST part \ud83d\ude0d \nwill using require resolve account for aliases? \nfor instance I use in one of my projects babel-module-resolver (using next.js)\nin another I use webapack's alias\nmainly to refer to the root of the project with example ~/components/x. I guess I can then just have a decorator that applies the namespace property to the component  using the babel-plugin-module resolver since it feels wrong to have support for as a specific babel plugin built in to this . for me it doesn't seem to work\nfirst I was getting for configuration\njs\nmodule.exports = {\n  componentPaths: [\"./components\"],\n  globalImports: [\"static/css/reset.css\"],\n  ignore: [\".test.\", /__test__/],\n  publicPath: \"./static\",\n }\n``\n[Cosmos] See you at http://localhost:8989/\n[Cosmos] UsingcomponentPaths` config is deprecated. Please consider upgrading.\nwebpack built 86ece583b4e300ec97bb in 11410ms\nHash: 86ece583b4e300ec97bb\nVersion: webpack 3.3.0\nTime: 11410ms\n  Asset     Size  Chunks  Chunk Names\n   0.js   148 kB       0  chunks/react_image_lightbox_65979c8056b2b266b92ff6a8853dd6eb.js\nmain.js  4.39 MB       1  main\n  [70] (webpack)/buildin/module.js 517 bytes {1} [built]\n  [88] ./node_modules/babel-runtime/helpers/extends.js 544 bytes {1} [built]\n [199] ./node_modules/querystring-es3/index.js 127 bytes {1} [built]\n [201] ./node_modules/react-cosmos-webpack/lib/client/mount.js 5.34 kB {1} [built]\n [459] multi ./static/css/reset.css (webpack)-hot-middleware/client.js?reload=true ./node_modules/react-cosmos-webpack/lib/client/loader-entry.js 52 bytes {1} [built]\n [460] ./static/css/reset.css 360 bytes {1} [built] [failed] [1 error]\n [461] (webpack)-hot-middleware/client.js?reload=true 6.68 kB {1} [built]\n [464] (webpack)-hot-middleware/node_modules/strip-ansi/index.js 161 bytes {1} [built]\n [466] (webpack)-hot-middleware/client-overlay.js 1.82 kB {1} [built]\n [467] ./node_modules/ansi-html/index.js 4.26 kB {1} [built]\n [471] (webpack)-hot-middleware/process-update.js 3.88 kB {1} [built]\n [472] ./node_modules/react-cosmos-webpack/lib/client/loader-entry.js 394 bytes {1} [built]\n [473] ./node_modules/react-cosmos-webpack/lib/client/react-devtools-hook.js 559 bytes {1} [built]\n [492] ./node_modules/react-cosmos-webpack/lib/client/user-modules.js 54.9 kB {1} [built]\n [886] ./node_modules/react-cosmos-loader/lib/index.js 744 bytes {1} [built]\n    + 898 hidden modules\nERROR in ./static/css/reset.css\nModule parse failed: /Users/draz/web/cairousel-web/static/css/reset.css Unexpected token (5:37)\nYou may need an appropriate loader to handle this file type.\n| a, abbr, acronym, address, big, cite, code,\n| del, dfn, em, img, ins, kbd, q, s, samp,\n| small, strike, strong, sub, sup, tt, var,\n| b, u, i, center,\n| dl, dt, dd, ol, ul, li,\n @ multi ./static/css/reset.css (webpack)-hot-middleware/client.js?reload=true ./node_modules/react-cosmos-webpack/lib/client/loader-entry.js\n```\nwhich implied the css loader isn't included which I figured is fine since I can allways wrap my components\ncommenting out globalImports leaving only \njs\nmodule.exports = {\n  componentPaths: [\"./components\"],\n  ignore: [\".test.\", /__test__/]\n}\nlead to cosmos running but a 404 error when I visited http://localhost:8989\nThe console stated GET 404  http://localhost:8989/loader/index.html\nthis was on a next.js project\nI tried starting a fresh next.js project using create-next-app, got the following in the terminal\n[Cosmos] Using defaults, no config file found\n[Cosmos] No webpack config found, using default config\n[Cosmos] Using defaults, no config file found\n[Cosmos] See you at http://localhost:8989/\n[Cosmos] Using defaults, no config file found\nwebpack built ccaba5f54325e5aec91f in 1681ms\nlooking at http://localhost:8989/ resulted in a similar result\n\nso I added \njs\n// cosmos.config.js\nmodule.exports = {\n  rootPath: \".\",\n  publicPath: \"static\",\n  publicUrl: \"/static/\"\n}\nbut still nothing\nI sense something is wrong with the default webpack config file?. also when I tried running \nnpm run upgrade-fixtures\nI would get\nError: You cannot call \"get\" on a collection with no paths. Instead, check the \"length\" property first to verify at least 1 path exists.\nbut I noticed some of the files where getting converted so I walked through them until I noticed that the codemod doesn't seem to work if the fixture is exported using module.exports\nrenamed it to export default and everything went well (in case anyone faces that problem). I'm realizing that the issue was apparently there for a while and I had not upgraded since 2.0.0-beta.19 so I'll be upgrading my configuration after reading through the release notes and working my way through there\nupdate so it seems that regardless of which version i pick using npm the loader insists on downloading 2.1.0 \nI did try a fresh create-react-app and it worked like a cham so now I'm thinking it's something related to the way I setup next.js. @skidding I eventually got everything working, thank you for clarifying, everything went smooth for me after, should have noticed the new getting started \ud83d\ude05 .\nI'm excited about being able to decorate fixtures now that I'm passing the component myself\nregarding the commonjs were there any valid commonJS cases other than module.exports?\nI noted an empty fixture file which caused the same error for fixture upgrade, though I don't think that was a valid case for a fixture to begin with.. @skidding just noticed folders that appear to be getting added from nothing in the tree view\nI haven't figured out why yet but I observe that given folder strucure\n\nI got an extra folder called NavigationTopBar inserted when it should have been just TopBar\n\nI also noticed that in general folders that host components show up as both a folder and a component for all components, but I guess this is just by design.\n\n\nfolders that are just folders appear once\n\n\n. @skidding works great for the leaf node of the tree, but doesn't seem to work for components in the middle ie. a component with fixtures defined and has another folder with other fixtures in them.\nonly the final component is shown as a single folder\n\nYou will notice OptionTitle is not repeated but OptionsHeader and OptionsList are because they have nested components\n\nI realised that NavigationTopBar was showing the way it was because that's what I called the component, this is also why in the screenshot OptionsHeader is repeated as OptionHeader which I am realizing is a typo in the class name, this is not an issue, if anything it's nice to notice \ud83d\ude05 .\n. @skidding nice!! \nit looks really good in distinguishing components inside folders\n\nthis is how my nested monster looks like now\n\nat first I wasn't so sure about the case with nested components not showing up as components\n\nbut after thinking about it I guess it creates a kind of distinction\nI would still prefer if a component shows up as a component even if it has nested content\nBut I think those that don't distinguish between nested components with a components folder would start having a tree of components which may render the point of having icons useless.\nthen again it would be an accurate representation of their system \ud83e\udd14 \nwell I'm satisfied with this so I think this is great \ud83d\udc4d \n. @skidding  I'm always happy to learn, I was having trouble (when I had time) to think of a leaner way of reducing the code to handle the open state so I'm excited to see/learn from this PR\nThis already looks far more promising thank you @maxsalven for your proposal . @skidding  Is this not effectively closed now? . I added a buildDepricatedPathMatchers function and made it so that this path is checked only after the others are rejected printing a warning.\nThe reason this should be deprecated in my opinion is because it really should not be the default behavior or at least until we have a more sophisticated matching where a fixture is captured by the closest matching component. but then that just feels wrong\nI did add getFixturePathsForComponent as a general option so that anyone can just override the way we resolve the FixturePaths even if when matching folders, though I can't think of any case where this would actually happen and be a valid case.\n. \ud83d\ude06 . ",
    "dmr": "Thank you very much. I really enjoy the new tree, great work!. ",
    "greenkeeper[bot]": "Version 2.0.1 just got published.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.0.1\n\nFix for publishing error\n\n\n\nCommits\nThe new version differs by 1 commits .\n\n24b3f3c chore(release): karma-webpack v2.0.1\n\nSee the full diff.\n\n. ## Version 2.0.0-beta.36 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits .\n\n20d9ee8 2.0.0-beta.36\n15d52df Fix rimraf bin resolution (#566)\n\nSee the full diff.\n\n. ## Version 2.0.0-beta.37 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv2.0.0-beta.37\nv2.0.0-beta.37 (2017-02-08)\n--include-filtered-dependencies now works with ls,exec,run as well!\n\nFixes an issue with --hoist (from previous release)\n\n\n\ud83d\ude80 Enhancement\n\n\n#581 Improve support for --include-filtered-dependencies. (@roblg)\n\n#576 Install with no arguments. (@gigabo)\n\n#569 Short-circuit out of install with no packages. (@gigabo)\n\n\n\ud83d\udc1b Bug Fix\n\n\n#574 Use correct logger method in Package method.. (@evocateur)\n\n#568 Check if directories exist before removing during hoist. (@gigabo)\n\n\n\ud83c\udfe0 Internal\n\n\n#562 Replace lodash.find, lodash.unionwith, and pad with lodash.. (@wtgtybhertgeghgtwtg)\n\n#584 Bump command-join.. (@wtgtybhertgeghgtwtg)\n\n#575 Add coverage report. (@doug-wade)\n\nCommitters: 5\n\nBo Borgerson (gigabo)\nDaniel Stockman (evocateur)\nDouglas Wade (doug-wade)\nRobert Gay (roblg)\nwtgtybhertgeghgtwtg\n\n\n\nCommits\nThe new version differs by 17 commits .\n\nbf16868 2.0.0-beta.37\ne95921a remove .only test\na88178d fixes [skip ci]\n9b79932 v2.0.0-beta.37 changelog [skip ci]\nceed21c Replace lodash.find, lodash.unionwith, and pad with lodash. (#562)\na3472d7 Bump command-join. (#584)\nd1ec2e1 v2.0.0-beta.36 changelog [skip ci]\neb02684 Improves support for --include-filtered-dependencies (#581)\n3e7637e Merge pull request #576 from gigabo/naked-install\n0516be7 Merge pull request #575 from doug-wade/add-nyc\n793f906 Add tests for FileSystemUtilities.rename*\n406015b Add tests for NpmUtilities.splitVersion\na87c76c Use correct logger method in Package method. (#574)\n4d3a6f5 Install with no arguments\nb6618f2 Add coverage report\n\nThere are 17 commits in total. See the full diff.\n\n. ## Version 0.27.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.14.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 6.10.2 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n\nRelease Notes\nv6.10.2\nFixed\n\nFix jsx-indent indentation calculation with nested JSX (#1117)\n\n\n\nCommits\nThe new version differs by 2 commits .\n\n5b75162 Update CHANGELOG and bump version\n41bdb58 Fix jsx-indent indentation calculation with nested JSX (fixes #1117)\n\nSee the full diff.\n\n. ## Version 6.10.3 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nRelease Notes\nv6.10.3\nFixed\n\nRevert #1057 due to issues with jsx-indent (#1117)\n\n\n\nCommits\nThe new version differs by 2 commits .\n\nb9cfdd6 Update CHANGELOG and bump version\ne9fb52d Revert \"[Fix] jsx-indent with tabs (fixes #1057)\"\n\nSee the full diff.\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.0.1\nBug Fixes\n\nwrong entry point in package.json (918bfe9), closes #161 #179 #177\n\n\n\nCommits\nThe new version differs by 3 commits .\n\n13dec00 chore(release): 4.0.1\n918bfe9 fix: wrong entry point in package.json\nde31619 chore: add missing syntax highlighting in README\n\nSee the full diff.\n\n. ## Version 4.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.0.2\nBug Fixes\n\nPlugin.install is not a function (f8ae245)\n\n\n\nCommits\nThe new version differs by 3 commits .\n\na482958 chore(release): 4.0.2\n16fe264 Merge pull request #182 from webpack-contrib/fix/plugins\nf8ae245 fix: Plugin.install is not a function\n\nSee the full diff.\n\n. ## Version 4.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.0.3\nBug Fixes\n\nsourcesContent missing in source maps (df28035)\n\n\n\nCommits\nThe new version differs by 5 commits .\n\ne8b7d48 chore(release): 4.0.3\n7a985cd Merge pull request #186 from webpack-contrib/fix/sources-content-missing\ndf28035 fix: sourcesContent missing in source maps\n786aa59 Merge pull request #185 from webpack-contrib/chore/update-deps\ne4e7863 chore: Update dependencies\n\nSee the full diff.\n\n. ## Version 0.16.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.16.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.11.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.0.0-rc.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 13 commits .\n\ne925c93 2.0.0-rc.2\n08ce858 Update CHANGELOG for v2.0.0-rc.2\nbed393e Use shell option when spawning lerna exec (#761)\nb9fa867 Fix durable option resolution (#762)\na201362 Use execa for child_process calls (#759)\nc70af88 Use temp-write for multi-line commit messages (#758)\n72de558 Use yargs to handle CLI args and subcommands (#719)\n0e9ec10 Update README.md and docs to better explain hoisting (#751)\ne0bb584 Reference conventionalcommits.org website in README (#748)\n607c7a0 Refactor fixture helpers to reduce duplication (#750)\n614e08a Convert eslint config to YAML (#749)\nd64f257 Add eslint-plugin-node (#745)\nd2f4f98 Fix bootstrap integration tests (#747)\n\nSee the full diff.\n\n. ## Version 2.8.2 just got published. \nYour tests are passing again with this version. Explicitly upgrade to this version \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits .\n\n901b783 2.8.2\n817a76d Merge pull request #896 from jwalton/master\nfcd245a Make enzyme work for react ^15.4.x.\n419478d [Docs] Update docs to use prop-types\n\nSee the full diff.\n\n. ## Version 7.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n7.1.0\n\ud83d\ude80 New Feature\n\nUpdate to support webpack 3 (#471) (Joe Lencioni)\nlook for babel options in package.json and .babelrc.js (babel 7) (#465) (Thomas Sileghem)\nWatch configuration files. (#460) (Evilebot Tnawi)\nYou can now change the babel config while webpack watch or dev-server is running and webpack will correctly recompile all files with babel.\n\n\ud83d\udc1b Bug Fix\n\nOnly base cache identifier on babel options from package.json (#468) (Daniel Tschinder)\n\n\ud83d\udcdd Documentation\n\nRemove outdated examples. (Daniel Tschinder)\n\n\ud83c\udfe0 Internal\n\nupdate eslint-config-babel to version 7.0.0 (#469) (greenkeeper[bot])\nupdate lint-staged to version 4.0.0 (#470) (greenkeeper[bot])\nAdd prettier eslint plugin (#466) (Daniel Tschinder)\nAdd node 8 to test matrix (#467) (Daniel Tschinder)\nUpgrade find-cache-dir to 1.0 and cross-env to 5.0 (#457) (Daniel Tschinder)\n\n\n\nCommits\nThe new version differs by 13 commits.\n\nd249119 7.1.0\nea9b4d4 Update yarn.lock\n7986787 chore(package): update eslint-config-babel to version 7.0.0 (#469)\nee40748 chore(package): update lint-staged to version 4.0.0 (#470)\n66784e4 Update to webpack 3 (#471)\n8544ffa Only base cache identifier on babel options from pkg.json (#468)\nea2eafa Add prettier eslint plugin (#466)\n4548169 Add node 8 to test matrix (#467)\nd8b73c0 fix(resolve-rc): look for babel in package.json and .babelrc.js (#465)\n8d96c1f Remove outdated examples.\n91f2658 Fixed: watch configuration files. (#460)\nde2d3f3 Upgrade dependencies\n37e63e3 Upgrade find-cache-dir to 1.0 and cross-env to 5.0 (#457)\n\nSee the full diff\n\n. ## Version 7.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n7.1.1\n\ud83d\udc1b Bug Fix\n\nDo not read .babelrc for cache identifier when babelrc=false (#483) (Russ Tyndall)\n\n\ud83d\udcdd Documentation\n\nUpdate README.md for webpack 3.x (#476) (Pierre Neter)\n\n\ud83c\udfe0 Internal\n\nUpdate eslint to the latest version \ud83d\ude80 (#482) (greenkeeper[bot])\nchore(package): update husky to version 0.14.0 (#475) (greenkeeper[bot])\n\n\n\nCommits\nThe new version differs by 6 commits.\n\n5953fcf 7.1.1\nf3cacd9 Update yarn.lock\n0815f48 Update eslint to the latest version \ud83d\ude80 (#482)\naefe583 Do not read .babelrc for cache identifier when babelrc=false (#483)\nc8924f3 chore(package): update husky to version 0.14.0 (#475)\n6063373 Update README.md for webpack 3.x (#476)\n\nSee the full diff\n\n. ## Version 7.1.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n7.1.2\n\ud83d\udc1b Bug Fix\n\nAdd the message in BabelLoaderError's stack trace on node 8 (#499)  (Stephen Jennings)\nDo not swallow errors in exists() and only call exists if option is string (#495) (Nelo Mitranim)\n\n\ud83d\udcdd Documentation\n\nREADME: fix typo (#498) (Piper Chester)\n\n\ud83c\udfe0 Internal\n\nUpdate ava to the latest version \ud83d\ude80 (#500)  (greenkeeper[bot])\nUpdate ava to the latest version \ud83d\ude80 (#491)  (greenkeeper[bot])\nUpdate ava to the latest version \ud83d\ude80 (#487)   (greenkeeper[bot])\n\n\n\nCommits\nThe new version differs by 8 commits.\n\n1ca5c78 7.1.2\n43543b7 Update dependencies\n8558593 Add the message in BabelLoaderError's stack trace (#499)\nffdf7f1 Update ava to the latest version \ud83d\ude80 (#500)\n87b91f0 README: fix typo (#498) [skip ci]\nf0bbb68 Do not swallow errors in exists() and only call exists if option is string (#495)\n62ae6cc Update ava to the latest version \ud83d\ude80 (#491)\n5e76bb7 Update ava to the latest version \ud83d\ude80 (#487)\n\nSee the full diff\n\n. ## Version 20.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.18.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.18.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. After pinning to 15.5.4 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 15.6.1 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n. ## Version 3.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.1.0\nFeatures:\n\nAllow different library names for UMD\nSupport for passing a defined identifier as this in a IIFE\nUse the new resolve performance option cacheWithContext: false by default when it's safe\nSupport array of functions as configuration\nadd sortModules to Chunk which is required in extract-text-plugin to support webpack 3\n\nBugfixes:\n\n! with truthy webpack identifier will evaluate correctly\nassets and dependencies are preserved in concatenated modules\nFix some internal usage of deprecated APIs\n\n\n\nCommits\nThe new version differs by 95 commits.\n\n4bb3018 3.1.0\n7e757cd Merge pull request #5194 from webpack/feature/hoist_regex_literals\n2879fb3 Merge pull request #5225 from hulkish/feature/added-chunk-sortModules-method\n5f08aa4 removed default params for node 4\ncadf9f7 added sortModules method to Chunk class\n70b7d2f fix(sp): spelling mistake in const name\n0ab36c4 Merge pull request #5196 from AndersDJohnson/multi-compiler-functions\n2eccb19 Merge pull request #5081 from KTruong888/4099_es6_refactor_lib_hot_module_replacement_plugin\ne365b2e Merge pull request #5210 from ematipico/master\n7913789 Merge pull request #5220 from liuyuanyangscript/master\n15becbd README.md bugfix\n2ccc1fd Changed statement 'var' to 'const'\na589a6c Merge pull request #5183 from kahwee/patch-1\nc2fa5d4 feat(perf): remove unneded regexp escape\n987a9f3 feat(perf): hoist final regexp\n\nThere are 95 commits in total.\nSee the full diff\n\n. ## Version 3.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.2.0\nBugfixes:\n\nfix duplicate entries in SourceMaps.\ncall imported functions with correct context.\nsupport strictThisContextOnImports in ConcatenatedModules.\nfix a bug which prevents parsing arguments for imported function calls when using strictThisContextOnImports.\nsupport nested .call() renames of this.\nfix typeof with require.resolve(Weak).\nfix hashing with ConcatenatedModules.\n\n\n\nCommits\nThe new version differs by 27 commits.\n\nd005990 3.2.0\n67c17a6 Merge pull request #5234 from webpack/bugfix/source-map-duplicate\n85ffe1e add test case\n5a64498 Merge pull request #5260 from ljqx/iife-nested-this-properties\na6c8362 Merge pull request #5261 from webpack/bugfix/import-context-strict-this\n6842d50 Call imports with the correct context.\n12a1352 [Parser] rename this in .call(this)\nbcde519 Merge pull request #5082 from KTruong888/4099_es6_refactor_lib_compiler\nedd6228 fix linting\n79926b3 - Edit PR to use normal functions again due to \u2018arguments\u2019 not working with arrow functions\n4266ab8 - Fix compiler test as discussed in PR\n13bc80b - Put Watching as a property on Compiler rather than a static method\n6dffcca - Remove \u2018self\u2019 references from lib/Compiler and use more arrow functions instead\n4378c92 - Add more tests\nbfd5ed9 - Fix linter issues\n\nThere are 27 commits in total.\nSee the full diff\n\n. ## Version 3.3.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.3.0\nFeatures:\n\nHMR logging now displays an expandable shorter module id.\n\nBugfixes:\n\nFix refactoring typo this.compiler.compiler is not a function\nNormalModule source can be cache between compilations (performance for incremental builds)\nwebpack now also watches when missing directories are added (i. e. when a module was missing and is installed)\n\n\n\nCommits\nThe new version differs by 23 commits.\n\n5b119e7 3.3.0\nb128db1 Merge pull request #5290 from webpack/bugfix/caching-module\na064968 Merge pull request #5297 from webpack/bugfix/watch-missing-directories\n329a805 add test case for error recovery while watching\nb4c74b2 allow watch cases to have errors per step\nf3ddcdd upgrade watchpack\ne72c3b2 missing dependencies could be files too\nc1a0244 store hash in depndencyTemplates Map instead of comparing identify\n981fd23 Merge pull request #5253 from rrharvey/feature/hmr-module-names\nb093f02 only group HMR module updates if name contains loaders\n6c5dc1b respect log level in HMR client log groups\nd312022 Merge pull request #5269 from huangc28/fix-compilerjs-error-undefined-compiler\n6c0e452 Fix typo that causes \"TypeError: this.compiler.compiler is not a function\" since compiler is undefined.\n95c7fa4 Merge pull request #3103 from kutyel/master\n43f967c Adjust style to es6 :tada:\n\nThere are 23 commits in total.\nSee the full diff\n\n. ## Version 3.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.4.0\nFeatures:\n\nImproved optimization bailout messages\nNamedModulesPlugins and HashedModuleIdsPlugin work now properly with delegated modules (DllReferencePlugin) and externals.\nadd --config-name option to choose a config by name for compiling a part of the config\nImproved error message when parsing in ModuleConcatenationPlugin fails\nUpgrade a lot of dependencies\nChild compilation names are not relative in stats\n\nBugfixes:\n\nFix setting boolean options in configuration (profile, bail)\nFix \"uncatched\" exception in HMR runtime code\nFix two cases where ModuleConcatenationPlugin crashes (missing internal name)\n\nConcatating delegated modules (from Dlls)\nreference to the default export of the root module\n\n\nFix --module-bind-pre and --module-bind-post\n\nPerformance:\n\nPerformance improvements in\n\nSourceMapDevToolPlugin\nAggressiveSplittingPlugin\nNormalModule variable injection\nParser\nRecordIdsPlugin\nStats\n\n\n\n\n\nCommits\nThe new version differs by 88 commits.\n\nc8732c8 3.4.0\nd1619d4 Merge pull request #4856 from matthewmeyer/hashDependantModuleIds\nb159ec2 Merge pull request #5180 from webpack/feature/improve-module-concat-bailout-messages\n32264b8 Merge branch 'master' into feature/improve-module-concat-bailout-messages\n4b12c56 Merge pull request #5369 from webpack/bugfix/scope-hoisting-dll\n440b5df use original request as libIdent for delegated modules\n35c8097 Make sure it's a real module when choosing for ModuleConcatenation\nd4f3bc3 Merge pull request #5150 from webpack/test/benchmark\nbb0f41a Merge pull request #5362 from webpack/deps/minor-updates\n544fee4 fix lint problem\n3598359 update stats test for larger file\n378ad46 update all dependencies to latest compatible version\n008ac78 Merge pull request #5353 from webpack/deps/extract-text-webpack-plugin\nee358bd Merge pull request #5351 from webpack/deps/supports-color\n91332b6 Merge pull request #5356 from webpack/deps/i18n-webpack-plugin\n\nThere are 88 commits in total.\nSee the full diff\n\n. ## Version 3.4.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.4.1\nBugfixes:\n\nfix incorrect warnings about exports when using the DllReferencePlugin\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n1f064bc 3.4.1\n8f4a9d2 Merge pull request #5375 from webpack/bugfix/delegated-exports\n9dbed73 integrate the delegated module better into the exports flagging process\n\nSee the full diff\n\n. ## Version 3.5.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.0\nFeatures:\n\nadd stats.excludeAssets to allow to filter assets in list (@ldrick)\nadd import(/* webpackMode: \"weak\" */ \"module\") to try to load a module without network request (@faceyspacey)\nadd 4. argument to require.context which is the context mode. Can be false, \"eager\", \"lazy-once\", \"weak\" and \"async-weak\". (@faceyspacey)\nrequire.resolveWeak now support expressions (@faceyspacey)\ngenerate only a single require for modules references in scope-hoisted modules (ModuleConcatenationPlugin)\n\nBugfixes:\n\nkeep correct import order when using the ModuleConcatenationPlugin\nGenerate shorter, more readable identifiers in ConcatenatedModule\n--help output is flushed before process exit (@esbenp)\nexit code is reliable reported for CLI validation error (@polomsky)\nstats options are now validated by schema (@esbenp)\nfixes problem when using the CommonsChunkPlugin in async mode without name argument\nfixes description of --resolve-extensions (@tomek-d)\nfixes has no internal name when using dependency variable in root of scope-hoisted modules (ModuleConcatenationPlugin)\n\nExamples:\n\nadd an example for dll + app (@aretecode)\n\n\n\nCommits\nThe new version differs by 68 commits.\n\n75a8ffe 3.5.0\nafa28c0 Merge pull request #5453 from webpack/bugfix/import-order-scope-hoisting\na569764 Merge pull request #5457 from tomek-d/resolve-extensions-typo\n0b8023a fixes #5096\n29d1336 Fixed bug in --resolve-extensions parameter documentation\n39051df update example\n7619c43 generate more pretty names for nested concatenation\n6607cfa remove ordering in ModuleConcatenationPlugin\n2bbbf50 Merge pull request #5437 from esbenp/fix-help-output-test-5345\n9f5bffa beautify\n334c1c4 remove unused variable\n8835751 fix conflict handling\n7099fcc update stats test case\nb77a52b add reserved words to avoid syntax errors\n16a5831 use old new Buffer api for node 4\n\nThere are 68 commits in total.\nSee the full diff\n\n. ## Version 3.5.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.1\nBugfixes:\n\nfix invalid syntax when using non-number ids with Scope Hoisting\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n5be9593 3.5.1\n43d877f Merge pull request #5460 from webpack/bugfix/stringify-concated\nb05b49b fix invalid generated code with scope hoisting and non-number ids\n\nSee the full diff\n\n. ## Version 3.5.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.2\nBugfixes:\n\nfixes stack overflow with circular dependencies (ModuleConcatenationPlugin)\n\n\n\nCommits\nThe new version differs by 12 commits.\n\n25302e5 3.5.2\nf04f066 Merge pull request #5471 from webpack/bugfix/stack-overflow-concat\n54fbfe0 Merge pull request #5467 from moschan/refactor-entry-option-plugin\nfb0ca64 Merge pull request #5466 from hzoo/patch-1\nb06d69f rollback travis to precise dist\nbc67522 fixes stack overflow with circular dependencies\n9a87824 Refactor \"EntryOptionPlugin.js\"\n4805027 add fix command for eslint\n0059bcf Merge pull request #5458 from samccone/sjs/remove-function-redeclare\na2601c3 update examples\n1869688 fix building of examples\n8b3772d Remove function redeclaration.\n\nSee the full diff\n\n. ## Version 3.5.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.3\nBugfixes\n\nfixes a name conflict with the ModuleConcatenationPlugin\n\n\n\nCommits\nThe new version differs by 7 commits.\n\n4b2b1ad 3.5.3\n4430af4 Merge pull request #5487 from webpack/bugfix/issue-5481\nb7c3491 Merge pull request #5485 from webpack/bot/inactive\ne1bfecf Merge pull request #5486 from webpack/bot/pr-pending\n0e73a24 also generate a new identifier for interop name\n0ad5d21 Wait for CI not pending until reporting CI status\n72420fa mark and close inactive issue after half a year\n\nSee the full diff\n\n. ## Version 3.5.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.4\nBugfixes\n\nWarnings and errors contribute to hash, which shows stats on warning-only change\nHMR: avoid crash when calling accept handler on disposed module\nHMR: disable Scope Hoisting for modules using HMR\nrestore backwards compatibility of ConcatenatedModule (@kisenka)\n\nFeatures:\n\nAdd option to limit the number of parallel processed modules (parallelism)\n\n\n\nCommits\nThe new version differs by 22 commits.\n\n990563f 3.5.4\n2475c6a Merge pull request #5506 from webpack/bugfix/concat-hmr\n0ea37a5 Disallow Scope Hoisting when using HMR\n287d587 Merge pull request #5480 from kisenka/concatenated-module-in-3.5-compat\n3d272ac fix: restore modules property of ConcatenatedModule (fixes #5477)\n7a36951 Merge branch 'master' of https://github.com/webpack/webpack into concatenated-module-in-3.5-compat\n839915c Merge pull request #5501 from webpack/bugfix/hash-watch-warnings-errors\n93af585 fix stats tests\n3820157 fix lint problem\n0925a9d Merge pull request #5502 from webpack/feature/limit-processed-modules\n09c34cf remove hash from stats test with error\n930c019 fix validation output test\nf9bf8a9 Limit the number of parallel processed modules\n7905bf5 Warnings and Errors contribute to hash\nf7bcba7 Merge pull request #5500 from webpack/bugfix/hmr-disposed-handler\n\nThere are 22 commits in total.\nSee the full diff\n\n. ## Version 3.5.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.5.5\nBugfixes:\n\nfixes a bug where modules where incorrectly removed from chunks resulting in call on undefined errors (can happen when using externals and CommonChunkPlugin)\nModules no longer loose __esModule flag on incremental build with ModuleConcatenationPlugin\n__esModule flag is now only set when needed with the ModuleConcatenationPlugin\n\n\n\nCommits\nThe new version differs by 5 commits.\n\nef6ab68 3.5.5\n6bdd9dc Merge pull request #5535 from webpack/bugfix/incremental-concat-compat\nf75418f Merge pull request #5534 from webpack/bugfix/incorrect-graph\nc5deb59 set compatiblity flag correctly even after incremental build\n99c2706 Ensure that graph structure stay consistent\n\nSee the full diff\n\n. After pinning to 2.3.4 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 0.8.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ## Version 0.8.3 just got published. \nYour tests are still failing with this version. Compare the changes \ud83d\udea8 \n. ## Version 1.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 21.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 21.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 21.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 3.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.6.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nRelease v0.6.2\n\n0.6.2 (2017-10-04)\nBug Fixes\n\nallow use limit as string (#96) (b31684d)\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n672ba80 chore(release): 0.6.2\nb31684d fix: allow use limit as string (#96)\n\nSee the full diff\n\n. ## Version 1.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.8.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.8.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 6.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv6.0.0\n\n6.0.0 (2017-12-01)\nFeatures\n\nAdd debug mode, deprecate verbose option (#344) (8f214f0)\n\nBREAKING CHANGES\n\nverbose config option has been deprecated and is superseded\nby the command line option --debug.\n\n\n\nCommits\nThe new version differs by 9 commits.\n\n8f214f0 feat: Add debug mode, deprecate verbose option (#344)\nc22fbc2 refactor: Cleanup code and tests for gitDir (#342)\nb0736ca chore(package): Add closing braces for maintainers (#343)\n9a74d0a docs(README.md): add imagemin-lint-staged section (#332)\nadbf25e test: Improve tests for resolveGitDir (#338)\n15f32be refactor: Remove unnecessary check in getConfig (#335)\n6975d98 docs(README): Document support for multi pkg projects (#337)\n80378f6 test: Optimise assertions, mocks and test hooks (#334)\n3250d5e chore(package): Bump dev-dependencies (#331)\n\nSee the full diff\n\n. ## Version 0.60.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n873a43a v0.60.1\n\nSee the full diff\n\n. ## Version 1.9.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.0.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.0.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.0.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.1.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.1.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 22.1.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.63.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\nd282505 v0.63.0\n\nSee the full diff\n\n. ## Version 0.63.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\nb6f2635 v0.63.1\n\nSee the full diff\n\n. ## Version 0.64.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n3b05529 v0.64.0\n\nSee the full diff\n\n. ## Version 11.0.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 5 commits.\n\n57a39cb chore(release): 11.0.0\na3ddacc feat: requiresArg is now simply an alias for nargs(1) (#1054)\n2b56812 fix: Set implicit nargs=1 when type=number requiresArg=true (#1050)\n6bad6a9 chore(release): 10.1.2\nfbf41ae fix: requiresArg should only be enforced if argument exists (#1043)\n\nSee the full diff\n\n. ## Version 1.10.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.10.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.20.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\nff2f3dc chore(release): 0.20.1\nb4642e7 fix(index): source code indentation (#299)\n\nSee the full diff\n\n. ## Version 0.20.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\nbf29ed8 0.20.1\n71036d1 Disable parsing of prettier CLI option (#298)\n\nSee the full diff\n\n. ## Version 0.20.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n3094538 0.20.2\n5a55cee Do not add indent rule when prettier option is true (#300)\n\nSee the full diff\n\n. ## Version 0.20.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\nf100021 0.20.3\n5f062e2 Simplify appveyor.yml\nc62345c Make Prettier confing take precedence over XO (#301)\n\nSee the full diff\n\n. ## Version 2.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.0.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 2.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 0.67.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n4255e2d v0.67.1\n\nSee the full diff\n\n. ## Version 0.68.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\naea9bb5 v0.68.0\n\nSee the full diff\n\n. ## Version 4.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.0.1\nFeatures\n\nadd version property to webpack exports\n\nBugfixes\n\nimport() with CJS now gives correct exports\nModule concatenation bailout messages now point to correct module\n\n\n\nCommits\nThe new version differs by 8 commits.\n\n5044762 4.0.1\n7fd5c6f Merge pull request #6585 from webpack/bugfix/bailout-messages\n8e592bf Merge pull request #6575 from nveenjain/addVersion\ne7aba18 fix incorrect optimization bailout messages\n9f9c3d1 Merge pull request #6583 from webpack/bugfix/import-cjs\n8bf1574 CJS fake namespace object contains exports now\nd50fa68 add newlines\n05174ae Added version to webpack's export property\n\nSee the full diff\n\n. ## Version 4.1.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.1.0\nFeatures\n\nadd filename option to optimization.splitChunks to modify the filename template for splitted chunks\nallow modules which doesn't emit code into the bundle\n\nBugfixes\n\nwatchpack updated to 1.5.0\nperformance fix for Module Concatenation (v8 bug)\nfix using this.xxx in ProvidePlugin\n\n\n\nCommits\nThe new version differs by 73 commits.\n\nf916fc0 4.1.0\n8eba694 Merge pull request #6650 from webpack/bump_watchpack\n00f70fc Merge pull request #6645 from zacanger/fix/6644\n2e3d319 Merge pull request #6648 from cheapsteak/patch-1\n01c18cc Merge pull request #6651 from webpack/feature/split-chunks-filename\n2e687d0 Merge pull request #6613 from brentwilton/improve-performance-of-module-concatenation-plugin\n3c5b104 Merge pull request #6663 from webpack/feature/support-non-js\n2c8ea60 expose stuff and all non-bundle modules\nb0e14df Set optimization.splitChunks to false in test webpack config.\necb65aa allow to configure filename for splitted chunks\n325038d Update watchpack to 1.5.0\na2fd80e Update downloads badge to point to graph of downloads\n3a41ca4 Fix #6644\n39095ef add todo for ModuleConcatenationPlugin for loop bugfix\nf6e366b Merge pull request #6611 from kvrlk/patch-1\n\nThere are 73 commits in total.\nSee the full diff\n\n. ## Version 4.1.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.1.1\nFeatures\n\nStats now displays the number of assets of a module\n\nBugfixes\n\nsourceMap option of the default UglifyJsPlugin now defaults to true when the SourceMapDevToolPlugin is used\nmodule.assets is now working again in the Stats\nchunk ids are not stringified on target node\ndevtoolNamespace default works now also for arrays passed to output.library\nFormat date with 2 digits in Stats for Build At\nfix a bug renaming classes incorrectly\nfix a bug where modules ignore the chunks option of optimization.splitChunks\n\n\n\nCommits\nThe new version differs by 27 commits.\n\n41bb63a 4.1.1\n37f7681 Merge pull request #6697 from webpack/bugfix/split-chunks\n4d68350 fix bug where modules are put into the wrong chunk\n8a59ef7 Merge pull request #6689 from webpack/bugfix/issue-6688\nedbb6f6 Merge pull request #6670 from SimenB/patch-1\n800e7f9 fix #6688\nc54df36 Merge pull request #6609 from marcalexiei/configuration-version-error\n4f39932 Merge pull request #6641 from tmilloff/master\n6879ab7 Merge pull request #6685 from webpack/bugfix/node_chunks\n71eff5d Merge pull request #6686 from webpack/bugfix/ccp-readme\n9eb4daa Remove CCP link\nf9e7a17 Escape module names\n1181c0e Remove accidental filename setting which wasn't needed and was breaking test\n57c6c43 Add requested changes from PR comments\nae2ae4e Merge pull request #6640 from clarkdo/module-assets\n\nThere are 27 commits in total.\nSee the full diff\n\n. ## Version 4.2.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv4.2.0\nFeatures\n\nadd splitChunks.automaticNameDelimiter to configure the name separator for automatic names\nstats.excludeModules now also accept booleans\nwebpack throws an error when trying to run in twice at a time\nperformance is disabled by default in non-web targets\nAMD parser plugins can now be extended by inheriting\n\nBugfixes\n\nFix a race condition when writing events.json in ProfilingPlugin\nHMR runtime code is reverted to ES5 style\nscript timeout is not correctly in seconds\nreexporting JSON exports works correctly now\nfix a bug when combining ProfilingPlugin with SourceMapDevToolPlugin\nadd a missing semicolon to the runtime code\n\n\n\nCommits\nThe new version differs by 74 commits.\n\nd668a23 4.2.0\n04d8188 Merge pull request #6754 from byzyk/fix/6742\n0d3063e Merge pull request #6810 from howdy39/add-end-of-statement-semicolon\nd628f90 Add end of statement semicolon\n3024078 Merge pull request #6788 from byzyk/fix/6779\nc6b9b9e Merge pull request #6806 from webpack/bugfix/json-reexport\ncda226a handle reexporting json default export correctly\nd061aba fix ProfilingPlugin\nf82beb3 Merge pull request #6789 from EugeneHlushko/issue/5964\nc4678e3 fix(bug) #5964 convert MS into S for scripts timeout attr: update expected bytes values\na534dfd add test\n422236f fix(bug) #5964 convert MS into S for scripts timeout attr\nf99f96d rename variable, use includes instead of indexOf\nae18a5a fix: default chunks to context when no context passed\n4428efe Merge pull request #6674 from chuckdumont/work\n\nThere are 74 commits in total.\nSee the full diff\n\n. ## Version 1.11.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n17b6f19 chore(release): 3.0.1\n57411a9 fix(package): Remove the extract-text-webpack-plugin peer dependency\n\nSee the full diff\n\n. ## Version 3.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 7 commits.\n\n44fcf14 chore(release): 3.0.3\n0558c18 refactor(performance): Reduce the generated chunk information to speed up build time\n256f990 Change in-line spelling (#777)\n2c8637c chore(release): 3.0.2 (#867)\n985654c docs(README): update template variables list (#840)\n1ff661c Add plugin to README.md (#853)\n7587754 Fix to work with loader-utils ^1.1.0 (#792)\n\nSee the full diff\n\n. ## Version 3.0.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n8038a17 chore(release): 3.0.4\n0348d6b fix(entries): Don't add css entries twice\ndc233b5 Fix typos, add links to issues and pull\n\nSee the full diff\n\n. ## Version 3.0.5 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 4 commits.\n\n422d828 chore(release): 3.0.5\n2288f20 fix(hooks): Remove deprecated tapable calls #879\n020b714 fix(entries): do not ignore JS if there is also CSS\n5711f16 Add a note about ordering first\n\nSee the full diff\n\n. ## Version 3.0.6 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 3 commits.\n\n1b2a71d chore(release): 3.0.6\nbcbb036 fix(hooks): Call tapable.apply directly #879\neb0b765 docs(readme): fix options table\n\nSee the full diff\n\n. ## Version 1.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv1.0.1\n2018-03-03\nBug Fixes\n\nindex: revert to CJS exports (module.exports) (#116) (7b60cc2)\n\n\n\nCommits\nThe new version differs by 3 commits.\n\n08135bc chore(release): 1.0.1\n7b60cc2 fix(index): revert to CJS exports (module.exports) (#116)\n18555fa docs(README): add missing badges (#117)\n\nSee the full diff\n\n. ## Version 0.71.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n89a4835 v0.71.0\n\nSee the full diff\n\n. ## Version 1.13.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.13.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.13.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.13.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 3.0.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.1\n\n3.0.1 (2018-06-02)\nBug Fixes\n\nfix path lookup & re-add infra docs (#480) (592fd11), closes #478\n\n\n\nCommits\nThe new version differs by 1 commits.\n\n592fd11 fix: fix path lookup & re-add infra docs (#480)\n\nSee the full diff\n\n. ## Version 3.0.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.2\n\n3.0.2 (2018-06-04)\nBug Fixes\n\nuse async / await for info command (#494) (6833db9)\n\n\n\nCommits\nThe new version differs by 4 commits.\n\n6833db9 fix: use async / await for info command (#494)\n6854bd6 cli(init): don't use uglify on prod config (#490)\n6b255c0 Merge pull request #481 from AviVahl/master\na1a796d Remove workspaces key, as yarn workspaces is not in use\n\nSee the full diff\n\n. ## Version 3.0.3 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.3\n\n3.0.3 (2018-06-06)\n\n\nCommits\nThe new version differs by 1 commits.\n\n945be4b chore(deps): update inquirer, commitlint packages (#496)\n\nSee the full diff\n\n. ## Version 3.0.4 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv3.0.4\n3.0.4 (2018-06-12)\n\n\nCommits\nThe new version differs by 1 commits.\n\n295d1e2 cli(add): support for webpack config file (#501)\n\nSee the full diff\n\n. ## Version 1.13.7 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n1.13.7\n\ud83d\udd17 Changelog\n\n. ## Version 0.56.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 2 commits.\n\n78f3de0 [0.56.1] Bump version numbers\n634c366 Fix currentlyFocusedField by Removing this usage in TextInputState (#19834)\n\nSee the full diff\n\n. - The devDependency react-native was updated from 0.55.4 to 0.57.0.\nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes for September 2018\nSee the changelog here\n\n\nCommits\nThe new version differs by 600 commits ahead by 600, behind by 54.\n\n3008c3c [0.57.0] Bump version numbers\n7b57b8c Remove view configs from JS\n967d478 Require that JS defined Component Attributes match Native ones in dev\n499e207 Put View ViewConfig in JS\n7525f38 Correct RCTAnimation import (#18050)\nb77d640 Add the new RCTWKWebView* files to build target on iOS (#21031)\n057d3ef Fix #18272 TextInput.setNativeProps({text: ''}) to work (#18278)\ncf5f3e9 React: Upgrade to react-devtools@3.3.4\n0b30129 React sync for revisions bc1ea9c...ade5e69\n7b1186c Require all Android View Attributes are defined in flow prop types\n3ccc141 Put View ViewConfig in JS\ncbad158 Adding a more complete type for ReactNativeBaseComponentViewConfig\n3c1ffd8 Fix Metro version\na88243a React: Upgrade to react-devtools@3.3.2\n8402c97 [0.57.0-rc.4] Bump version numbers\n\nThere are 250 commits in total.\nSee the full diff\n\n. - The devDependency react-native was updated from 0.55.4 to 0.57.1.\nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 14 commits.\n\nba89bf4 [0.57.1] Bump version numbers\n202bb14 Removing development team from Xcode project. (#20054)\n7bac056 bump metro 0.45.6\nbf84166 Update RCTLinkingManager.h to explicitly state the 'nullability' of parameters (#20798)\n0a5eefb Debug only code were leaking into release builds on iOS. (#21232)\n5f85b25 Way to register RCT_MODULE in Plugin2.0 instead of +load\n8dc8071 Expose AllowFileAccess property in WebView\nfb109e9 Fix ignored --projectRoot/watchFolders arguments (#21165)\n202715c Pass the maxWorkers config param correctly to Metro\n87b5672 Upgrade babel-eslint to 9.0.0\ne884d7f Making RCTIsIPhoneX() return true for the R and Max models\ne8345cc Give RNPM the ability to look for plugins in @scoped modules (#21082)\n4ea3ac7 fix RCTNetInfo first time connection status (#20820)\ncd091e8 Expose scrollEnabled as iOS prop for TextInput (#20719)\n\nSee the full diff\n\n. ## Version 0.22.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\nv0.22.1\n2018-08-08\nBug Fixes\n\naddStyles: use var instead of const (IE fix) (#338) (1ca12ab)\n\n\n\nCommits\nThe new version differs by 2 commits.\n\n4217bd1 chore(release): 0.22.1\n1ca12ab fix(addStyles): use var instead of const (IE fix) (#338)\n\nSee the full diff\n\n. ## Version 1.14.2 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nRelease Notes\n1.14.2\n\ud83d\udd17 Changelog\n\n. ## Version 0.79.1 just got published. \nUpdate to this version instead \ud83d\ude80 \n\nCommits\nThe new version differs by 1 commits.\n\n6c5ed41 v0.79.1\n\nSee the full diff\n\n. ## Version 1.4.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.7.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.8.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. ## Version 1.5.0 just got published. \nUpdate to this version instead \ud83d\ude80 \n. After pinning to 3.3.1 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 4.18.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. - The devDependency webpack was updated from 4.18.1 to 4.19.0.\nYour tests are still failing with this version. Compare changes\n\nRelease Notes for v4.19.0\nBugfixes\n\nCreate a hash of the whole runtime code for the chunk/contenthash of entry chunks\n\nBefore hash was (incorrectly) calculated from (some) inputs\n\n\n\n\n\nCommits\nThe new version differs by 5 commits.\n\n6bf8323 4.19.0\naecdeb3 Merge pull request #8029 from webpack/bugfix/hash-bootstrap\n13b2cdd hash content of bootstrap code\nc2cfa7e Merge pull request #8022 from antleblanc/readme-styling-typo\n96ffd27 docs(readme.styling): write correctly sass\n\nSee the full diff\n\n. After pinning to 3.3.2 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 4.19.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 16.5.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 2.50.0 your tests are still failing. The reported issue might not affect your project. These imprecisions are caused by inconsistent test results.. After pinning to 7.2.2 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 3.1.0 your tests are passing again. Downgrade this dependency \ud83d\udccc.. After pinning to 4.19.1 your tests are passing again. Downgrade this dependency \ud83d\udccc.. ",
    "nik-kor": "hey, @skidding \nI use 2.0.0-beta.5. The thing is if you pass { module.rules } then final config will be something like { module: { rules: [], loaders: [] } }. And also here https://github.com/nik-kor/react-cosmos/blob/v2.0.0-beta.5/packages/react-cosmos-webpack/src/webpack-config.js#L55 you expect  loaders. I got your point. Maybe the guess that it will process both is correct. I can check it. \nBut also the connection between the original problem(webpack cannot inline constants via DefinePlugin) and loader/rules is not obvious.  . i believe it will take the one https://github.com/webpack/webpack/blob/master/lib/NormalModuleFactory.js#L46. thank you too!\ngreat project btw!. not sure if we need it. But in current point it will make config invalid. why the webpack guys decided to use rules..... can't see any profit from this renaming. ",
    "ganderzz": "@skidding If no one is opposed, I'll try my hand at this. \ud83d\ude04 . @skidding Adjustments implemented!. Sounds good. I'll have a PR tonight! \ud83d\udc4d\nOn Wed, May 3, 2017 at 2:39 AM Ovidiu Chereche\u0219 notifications@github.com\nwrote:\n\nGood catch! Your action items are sound. Feel free to take a stab at it \u2694\ufe0f\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/351#issuecomment-298865245,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFTuZo1mz6Ib0rbt2gbcPGu21znfgd7Hks5r2EtYgaJpZM4NO9M0\n.\n. I'm all for removing the globals.\nLearning css-modules, so let me mess around with it some more, and I'll push the changes up!\n. @skidding Late to the party, but no, didn't have to do anything to trigger Travis. A newer PR has a build, so seems to be isolated to this PR..?. Valid point! Mostly there as a safe guard, but really isn't needed.. \n",
    "reinei": "Hey skidding,\n1. The fact that the file only contains ./redux-proxy.js was my bad (didn't hit save in atom)\n2. The npm i command in the main repository errors with the following log file\nnpm-debug.txt\nIt also says packages/$PACKAGE/src doesn't exist 4 times\n(yes it spits out the error from the log 4 times as well as the above line)\nQuick edit: It would appear that the build scripts are written primarily for OSX, yes\nThanks in advance for helping. Yes I have both proxies and sadly simply removing one of them does not solve my issue (both proxies are copies of the code from the readme.md). Yes (as stated) removing all proxies results in a successful build and execution in my own project. Manually resolving the paths does not change the error in any way (it still tries to load the proxies from\nnode_modules\\react-cosmos-webpack\\lib)\nI am getting the feeling this error is related to the proxy loading code that interacts with webpack. My output is\njs\n{\n        componentPaths: [ 'D:\\\\Development\\\\centrum-sys\\\\src\\\\components' ],\n        fixturePaths: [],\n        globalImports: [],\n        hmrPlugin: true,\n        hostname: 'localhost',\n        hot: true,\n        ignore: [],\n        port: 8989,\n        proxies: [\n             'D:\\\\Development\\\\centrum-sys\\\\redux-proxy.js',\n             'D:\\\\Development\\\\centrum-sys\\\\context-proxy.js'\n        ],\n        webpackConfigPath: 'D:\\\\Development\\\\centrum-sys\\\\webpack.config',\n        publicPath: 'D:\\\\Development\\\\centrum-sys\\\\public' \n}\n(github is refusing to format that nicely O.o)\nWhich is exactly what I expected for my windows (all slashes are escaped correctly ...)\nedit: fixed formatting. The output is\n```js\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n// The following constants are replaced at compile-time (through module-loader)\n// with a map of require calls with absolute paths, derived from user conf.\n// By the time webpack analyzes this file to build the dependency tree\n// all paths will be embedded and webpack will register watchers for each\n// context (which will update the bundle automatically when files are added or\n// changed).\n// eslint-disable-next-line no-undef, no-unused-expressions\n[require.context('D:/Development/centrum-sys/src/components/Localisation/LocalisedText', false),require.context('D:/Development/centrum-sys/src/components/Localisation/LocalisedText/fixtures', false)];\nvar getUserModules = function getUserModules() {\n  return {\n    / eslint-disable no-undef /\n    components: {'Localisation/LocalisedText':require('D:/Development/centrum-sys/src/components/Localisation/LocalisedText/LocalisedText.js')},\n    fixtures: {'Localisation/LocalisedText':{'LocalisedText':require('D:/Development/centrum-sys/src/components/Localisation/LocalisedText/fixtures/LocalisedText.js')}},\n    proxies: [require('D:\\Development\\centrum-sys\\redux-proxy.js'),require('D:\\Development\\centrum-sys\\context-proxy.js')]\n  };\n};\n```\nWhich has the wrong kind of slashes for the proxies (but the right kind for the components). Using slash as suggested above does indeed fix my issue.\nThanks for the help skidding (awesome project by the way). Another suggestion from my side would be to somehow check (maybe hasOwnKey?) if the webpack-dev-middleware can serve an index.html and rewrite requests to that address instead of serving your own static index.html .\nIn my use case I have 3 bundled files to serve and am using WebpackHtmlPlugin as well as the AddAsset plugin to build a nice index.html to load all required files in the required order, however simply executing npm run cosmos will serve the static index.html and thus fail due to my main bundle not containing the react libs (they are in a special vendor.dll chunk).\nSo I currently rigged my local copy of the server.js file to serve my own copy of index.html from the memory-fs instance, but as anyone can guess, this is a bad solution due to using private properties of the dev-middleware and requiring modification of files inside node_modules.. Not quite,\nI have the following Plugin stack:\nDllReferencePlugin(s)\nWebpackHtmlPlugin (using src/index.ejs and outputting to index.html in output dir)\nAddAssetPlugin (to add the required dll files)\nnow my src/index.ejs is pretty simple and looks like:\nhtml\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\"/>\n    <title><%= htmlWebpackPlugin.options.title %></title>\n  </head>\n  <body>\n    <div id=\"main\">\n    </div>\n  </body>\n</html>\nIts just there so I can deploy with my bundle instantly (my app renders into #main)\nNow my problem comes from cosmos mounting the webpack-dev-middleware into /loader and serving its own static index.html which (obviously) does not include my dll files and thus has no react loaded.\nI currently work around this by hacking the server.js by commenting out the index.html route and adding\njs\napp.get('*', function(req, res){\n    res.write(middleware.fileSystem.data['index.html']);\n    res.end();\n  });\nWith middleware being the instance of webpack-dev-middleware\nEdit:\nAnd this relates to a configurable public path because overriding that public path would allow me to simply say / was my public path and thus make express respond with the webpack-dev-middleware index.html instead of the static one. I should fall into the first category (and I kinda do), however this line in combination with line 65 & 66 result in cosmos serving its own index.html for the / path.\nI was now supporting this cause in order to change line 67 to (somehow, thats up to you guys) not mount the middleware at /loader/ but at my public path (which I could then change to / and circumvent your static index.html from ever being served). Well as a side note: serving my own index.html works incredibly well for the playground and as far as I can tell the extra  is harmless. npm install is successful on Windows 10 node v7.2.0 npm 3.10.9\nand I am able to start the context example without any problems. (If you want, I can see if the changes fixed my initial problems in my own repo as well, but I very much assume thats the case, seeing as I was using a context proxy as well.). To answer your first question: My current cosmos config uses my production webpack config, so compilation is just as fast as production (as well as to check that everything actually works)\nTowards the second question, a similar problem (though much more severe) is encountered when outsourcing react itself, because then the cosmos page won't even load to display the fixture frame\nI hope this helps clarify the problem a bit, but if not feel free to ask me more about my setup. ",
    "newswim": "Hey @skidding, I've started a fork of react-boilerplate with a feature/cosmos branch. The best way to install is with yarn install (there are some issues with running npm setup, though that's another thing...).\nIf you run npm run cosmos or yarnpkg cosmos, you'll notice the following error:\nUncaught ReferenceError: reactBoilerplateDeps is not defined\nIt's likely that this is coming from the DLLPlugin, which can be gotten around by removing these lines.\nIf you do that, and then run npm run cosmos again, you get a very interesting error stemming from node_modules/react-cosmos-webpack/lib/entry.js\n8020:56 Uncaught SyntaxError: missing ) after argument list\n    at Object../node_modules/react-cosmos-webpack/lib/entry.js (bundle.js:4310)\nThis is the code, which doesn't appear to have the syntax error, but this might be something with the compiled code..\njavascript\n// react-cosmos-webpack/lib/entry.js [54-59]\nif (module.hot) {\n  module.hot.accept('./user-modules', function () {\n    start();\n  });\n}\nComment that out, and you get a new error from Sagas which is complaining about not having access to the Regenerator runtime..\nUncaught ReferenceError: regeneratorRuntime is not defined\n    at eval (eval at ./app/containers/HomePage/sagas.js (bundle.js:1956)\nIf you look at that you'll see a generator function, and this is where my eyes start getting really tired. Also, I'm very new to Webpack, so I'm not in a place to make guesses, but I think there needs to maybe be a hook before cosmos starts to make sure webpack is transforming generators?\n/shrug. Progress! Added import regeneratorRuntime from \"regenerator-runtime\"; to the sagas.js file in containers/HomePage -- Now Cosmos is loading!\n.. just none of the components load \ud83e\udd26\u200d\u2642\ufe0f \nGetting a lot of errors about stateProxy. I'll have to pick this up tomorrow..\n`Warning: Failed prop type: The prop `component` is marked as required in `StateProxy`, but its value is `undefined`.\n. Cool!!!!!\nThat looks like a much more stable workaround, the components did actually load after exposing the Regenerator runtime to that sagas file, but no props and some additional errors were present, see: no fixtures. I'll work on adding some since it would be really nice to have a functioning Cosmos+React-Boilerplate put together.. Interesting \ud83e\udd14 . Awesome!! Thank you, can't wait to try it out.. ",
    "DJTB": "FYI: @skidding I'm using your config above, with your PR (1849) from RBP and the webpack 3 PR (1823) and everything is going great so far :+1: . Oh I'd love this...\nI currently have an Icon component that renders an svg based on name prop (alongside size, color etc) pulling the relevant data from a constants file.\nADD: {\n    viewBox: '0 0 24 24',\n    path: 'M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm5 11h-4v4h-2v-4H7v-2h4V7h2v4h4v2z',\n  },\nHaving all the possible icons on one screen would be fantastic.\nHowever, could this proposal include the extra ability to define multiple fixtures in a single file?\nI'm currently having to generate a whole heap of single fixtures instead:\n```\nimport { ICONS } from './constants';\nObject.keys(ICONS).forEach((name) => {\n  const fileName = __fixtures__/${name.toLowerCase()}.js;\n  const content = export default {\n      props: {\n        name: '${name}',\n        size: '5rem',\n      },\n    };;\n  fs.writeFile(fileName, content, (err) => err ? console.error(err) : console.log(${fileName} generated));\n});\n```. Having missing props would be very helpful, currently it's really confusing and misleading seeing components with empty props :sob: \nCould we type check and include that as well for unserialized props?\nThe following props could not be displayed:   \nrender: function\nsomeProp: Date. ",
    "sapegin": "The problem with Slack is that you have to register again for each new project ;-|. ",
    "maciej-ka": "Here is some progress to display all fixtures of a component in a single view: https://github.com/react-cosmos/react-cosmos/pull/371. Components can be clicked in the menu. The route used as a component page has a component part and no fixture part \"?component=Counter\".\nI'm making a plan for rendering several instances on one page. \nCurrently component-playground.jsx calls this.sendFixtureToLoader() which transports one fixture to Loader.jsx. If I understand correctly, because Loader lives in an iframe, it has separate DOM and this makes it harder for him to access fixtures, so he receives them by listening to fixture-loaded event.\nI think we could transport more than one fixture and introduce a new component that translates them into a list of loaders with single fixtures.\n\nOn component click, we send all fixtures to Layouter and he will render them one by one. In a next step, we could have all components view, which would require introducing a default fixture.\nMy biggest worry is that we may need more complex routing system at some point.. Sure, I will code review, probably just to dive into the related code. I will remove WIP PR for now. Thanks for the extended info about Playground - Loader protocol!. Hi @skidding, I've seen activity on a branch that you linked. Is it possible to pass many fixtures now and work on this (group components) task?. I was thinking about adding them too, big thanks for instructions. @skidding I tried to run yarn run test-smoke-ci locally and result was the same error as on Travis: You passed the --record flag but did not provide us your Record Key. Can I do something for it to pass?. @skidding I could use a little help:\n1. where in source files is html that iframe points to\n1. what is flow of control from a moment we render iframe to sending fixture data. That's nothing to worry. However, my problem is I cannot pass yarn anymore. Tried with few node, yarn and npm downgraded versions.\nError is: lerna ERR! execute error An unexpected error occurred: \"https://registry.yarnpkg.com/@skidding/react-codemirror/-/react-codemirror-1.0.1.tgz: Request failed \\\"404 Not Found\\\"\".\n> yarn --version && node --version && npm --version\n0.23.4\nv6.11.0\n5.3.0. Sadly it's still the same. I have this problem for around three weeks, all that time link was correct, I tried many versions of yarn between 0.23 and 0.28, yarn cache clean, rm -rf node_modules, yarn upgrade, node 6 and 8. Tried to install on a fresh clone of Cosmos repo. I have it on both of my computers. So frustrating.. Thanks! Build is passing now. I'll change ComponentPlayground.state.fixtureData into structure ComponentPlayground.state.fixturesData[component][fixtureName] to have bodies of several fixtures on one page and see what next move I can do.. In case anyone has this install error too:\nlerna ERR! execute error An unexpected error occurred: \"https://registry.yarnpkg.com/@skidding/react-codemirror/-/react-codemirror-1.0.1.tgz: Request failed \\\"404 Not Found\\\"\".\nDowngrade to yarn 0.23.4 and rm ~/.yarnrc may be solution (it was for me).. @skidding ComponentPlayground stores many fixture bodies in a structure now, organized by component and fixture name. While I was working on it, I realized, that this change maybe wasn't necessary, as those fixture bodies are sent to the editor. The visible component gets a fixture body from Loader.. Dear and patient @skidding,\nRecent fixtureBodies are reverted. Loader grid and separate component are removed too.\nI wish the Playground would be able:\na. to scan a list of components and fixtures without a Loader.\nb. to create iframes with syntax <CosmosFrame component={...} fixtureBody={...} />.\nSince we plan to have more than one Loader on a page, it's probably sound to move scanning to a different place.\nWhatever we change with iframes, I assume that initiating <iframe src={...}> will take some time if src is pointing to a remote server. Because of that, unused iframes are valuable and should be not removed from dom, but hidden.\nI restarted coding with an idea of Loader pool and this scenario in mind: \n1. I am on a single fixture page, one iframe with loader is created. \n2. I go to a component page with five fixtures. The previous iframe is reused plus four more are created.\n3. I go back to single fixture page. Four frames are hidden, one is reused and visible.\nI'm very interested in your opinion.\nAnd, traditionally, I have few questions: \n- where is a line of code that creates RemoteLoader component in an iframe?\n- where is a line of code that reads fixture body?\n- would it be possible to give iframes some kind of id, that they would report back when sending loader ready event?. I have a son! (born this weekend) :). I'll be back to this branch around one week. /_fixtures endpoint is next task and we say bye bye to loader pool, hiding the one in current source misled me that they are precious.\nOne more question to add to above:\nUnder which user interaction Playground fixtureUpdate and fixtureListUpdate messages are triggered from Loader?. Right, should be fixed now. I changed generated folder and forgot to update here.. Thanks for bringing this, I did need to talk about it. After your proposal I see two different sets of responsibility:\nLoadersGrid\nTo LoadersGrid you say: \"here is a list of [component, fixture, label] triples\" and it will:\n- create many iframes\n- take care of communication with them (send fixtures)\n- layout those iframes and display labels\n- provide an interface for changing from horizontal list to grid view\nWould LoadersManager be a better name?\nIt would be an abstract tool for handling group views, all situations where we render more than one component.\nComponentPage\n\nprepare data for LoadersGrid [{component, fixture, description}, ...]\nhandle information display for a component without fixtures\nhost other component page functionalities in the future. \n",
    "alp82": "Not sure if i followed everything in here correctly, but i am a huge fan of grouping fixtures on one page. This would be useful for:\n showing all variations of a specific property, e.g. all sizes of an input field or all colors of a button\n showing all components of a specific variation, e.g. all components in primary color or everything which is focusable to test tabbing via keyboard (that last example wouldn't work with multiple iframes though)\nBy the way, with version 3 this should be already possible with an ugly workaround. What you need is a component that is basically a layout wrapper (css flex or grid) which gets loaded in the fixture. Then you define an arbitrary complex component structure as children in the fixture (be sure to import React from 'react').\nExample:\n```js\nimport React from 'react';\nimport Flex from 'my/grid/Flex';\nimport Icon from 'my/icon/Icon';\nexport default {\n  component: Flex,\n  children: [\n    ,\n    ,\n  ],\n};\n```\nSince you write your own markup, you can layout everything as you want. But again, this is an ugly hack.. For anyone who got similar problems to get the new Filesystem API to work: The magic property you need to configure if you don't use the default setup is fileMatch.\nIn my case i needed it because i have changed the default fixtures folder to __cosmox__. Here is the whole config:\nmodule.exports = {\n  webpackConfigPath: 'webpack.config.js',\n  fileMatch: ['**/__cosmox__/**/*.js'],\n};\nMuch better than before!\nSince i think that fixturesDir would be still pretty handy to have i opened a new issue for that: #488. Nice! Feedback for docs:\n introduction gif is outdated\n option dump has no fileMatch\n* we created a proxy for glamorous themes, interested in adding it to 3.0?. There you go: https://github.com/alp82/react-cosmos-glamorous-proxy. Awesome work @skidding!\nIs there any roadmap to see the mid-term and long-term goals?. @mbohgard seems like a regression of #495. We could even go a step further and also introduce a fixturesSuffix property to use it in there:\n[\n  '**/<fixturesDir>/**/*.{js,jsx,ts,tsx}',\n  '**/?(*.)<fixturesSuffix>.{js,jsx,ts,tsx}'\n]\nOr does fixturesName make more sense to use it in both positions?\n[\n  '**/<fixturesName>/**/*.{js,jsx,ts,tsx}',\n  '**/?(*.)<fixturesName>.{js,jsx,ts,tsx}'\n]. 1. Yep, updating to beta7 solves the issue with overlapping names. I got two entries with a counter as suffix and all fixtures are selectable.\n\nKinda, but not really:\n\n. Yes this is reasonable.\n\nI would love to see the preferRuntimeComponentNames option implemented!. Overlapping issues are solved, further discussion in #508.. Here you go. I grepped for the grid folder only:\n[\n  {\n    \"filePath\": \"/my-project/ui/grid/Flex/__cosmox__/bigger.js\",\n    \"components\": [\n      {\n        \"name\": \"Flex\",\n        \"filePath\": \"/my-project/ui/grid/Flex/Flex.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/Flex/__cosmox__/huge-spaces.js\",\n    \"components\": [\n      {\n        \"name\": \"Flex\",\n        \"filePath\": \"/my-project/ui/grid/Flex/Flex.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/Flex/__cosmox__/smaller.js\",\n    \"components\": [\n      {\n        \"name\": \"Flex\",\n        \"filePath\": \"/my-project/ui/grid/Flex/Flex.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/FlexItem/__cosmox__/default.js\",\n    \"components\": [\n      {\n        \"name\": \"FlexItem\",\n        \"filePath\": \"/my-project/ui/grid/FlexItem/FlexItem.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/Grid/__cosmox__/nested.js\",\n    \"components\": [\n      {\n        \"name\": \"Grid\",\n        \"filePath\": null\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/GridItem/__cosmox__/simple.js\",\n    \"components\": [\n      {\n        \"name\": \"GridItem\",\n        \"filePath\": \"/my-project/ui/grid/GridItem/GridItem.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/Layout/__cosmox__/combined.js\",\n    \"components\": [\n      {\n        \"name\": \"Layout\",\n        \"filePath\": null\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/Layout/__cosmox__/main.js\",\n    \"components\": [\n      {\n        \"name\": \"Layout\",\n        \"filePath\": \"/my-project/ui/grid/Layout/Layout.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/Layout/__cosmox__/sidebar.js\",\n    \"components\": [\n      {\n        \"name\": \"Layout\",\n        \"filePath\": \"/my-project/ui/grid/Layout/Layout.js\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/my-project/ui/grid/LayoutItem/__cosmox__/simple.js\",\n    \"components\": [\n      {\n        \"name\": \"LayoutItem\",\n        \"filePath\": \"/my-project/ui/grid/LayoutItem/LayoutItem.js\"\n      }\n    ]\n  },\n]\n\"filePath\": null looks suspicious.\nHere is the nested.js fixture:\n```\nimport React from 'react';\nimport GridItem from 'ui/grid/GridItem';\nimport Grid from 'ui/grid/Grid';\nconst childCss1 = {\n  backgroundColor: 'red',\n  textAlign: 'center',\n  height: '5em',\n};\nconst childCss2 = {\n  backgroundColor: 'green',\n  textAlign: 'center',\n  height: '5em',\n};\nexport default {\n  component: Grid,\n  children: [\n    \n      cell 1\n    ,\n    \n      cell 2\n    ,\n    \n      cell 3\n    ,\n    \n      cell 4\n    ,\n    \n      cell 5\n    ,\n    \n\n\n          nested cell 1\n        \n\n          nested cell 2\n        \n\n          nested cell 3\n        \n\n          nested cell 4\n        \n\n          nested cell 5\n        \n\n,\n  ],\n};\n```\nAnd combined.js:\n```\nimport React from 'react';\nimport Layout from 'ui/grid/Layout';\nimport LayoutItem from 'ui/grid/LayoutItem';\nexport default {\n  component: Layout,\n  props: { template: 'main' },\n  children: [\n    \n      header\n    ,\n    \n\n\n          primary\n        \n\n          secondary\n        \n\n,\n    \n      footer\n    ,\n  ],\n};\n```\nI think it's quite obvious that the problem is that i use the component which is about to be tested as a nested child. Any ideas?. * I don't use any aliases. all my components use that form of importing. Maybe this is related:\n// webpack.config.js\n// ...\n  resolve: {\n    modules: [\n      path.resolve(__dirname),\n      'node_modules',\n    ],\n    extensions: ['.js'],\n  },\n* no. here is the babel config:\n```\n{\n  \"presets\": [\n    \"es2015\",\n    \"react\",\n    \"stage-1\",\n    \"env\"\n],\n  \"plugins\": [\n    \"react-hot-loader/babel\",\n    \"transform-class-properties\",\n    \"transform-react-jsx-source\",\n    \"glamorous-displayname\",\n    \"wildcard\"\n  ],\n  \"env\": {\n    \"development\": {\n      \"plugins\": [\n        [\"transform-runtime\", {\n          \"polyfill\": true\n        }]\n      ]\n    }\n  }\n}\n```\n/edit same with beta9. Sadly, i got an error page:\nError: relative path without a basedir\n\u25bc 15 stack frames were expanded.\n(anonymous function)\nnode_modules/commondir/index.js:15\n./node_modules/commondir/index.js.module.exports\nnode_modules/commondir/index.js:13\ngetCommonDirFromPaths\nnode_modules/react-cosmos-voyager2/lib/client/get-components.js:197\ngetCollapsedComponentNamespace\nnode_modules/react-cosmos-voyager2/lib/client/get-components.js:205\n_loop\nnode_modules/react-cosmos-voyager2/lib/client/get-components.js:138\ngetComponents\nnode_modules/react-cosmos-voyager2/lib/client/get-components.js:170\n./node_modules/react-cosmos/lib/client/mount.js.exports.default\nnode_modules/react-cosmos/lib/client/mount.js:38\nrun\nnode_modules/react-cosmos/lib/client/loader-entry.js:11\n./node_modules/react-cosmos/lib/client/loader-entry.js\nnode_modules/react-cosmos/lib/client/loader-entry.js:14\n__webpack_require__\n/my-project/webpack/bootstrap cd36c98bcc3e685f89c2:678\nfn\n/my-project/webpack/bootstrap cd36c98bcc3e685f89c2:88\n0\nhttp://localhost:8989/loader/main.js:148147:18\n__webpack_require__\n/my-project/webpack/bootstrap cd36c98bcc3e685f89c2:678\n./app/configure-store.js.Object.defineProperty.value\n/my-project/webpack/bootstrap cd36c98bcc3e685f89c2:724\n(anonymous function)\nhttp://localhost:8989/loader/main.js:728:10\n\u25b2 15 stack frames were expanded.\nThis screen is visible only in development. It will not appear if the app crashes in production.\nOpen your browser\u2019s developer console to further inspect this error.\nBrowser console:\nUncaught Error: relative path without a basedir\n    at :8989/loader/main.js:17871\n    at Array.reduce (<anonymous>)\n    at ./node_modules/commondir/index.js.module.exports (:8989/loader/main.js:17869)\n    at getCommonDirFromPaths (:8989/loader/main.js:83214)\n    at getCollapsedComponentNamespace (:8989/loader/main.js:83222)\n    at _loop (:8989/loader/main.js:83155)\n    at getComponents (:8989/loader/main.js:83187)\n    at ./node_modules/react-cosmos/lib/client/mount.js.exports.default (:8989/loader/main.js:83439)\n    at run (:8989/loader/main.js:83379)\n    at Object../node_modules/react-cosmos/lib/client/loader-entry.js (:8989/loader/main.js:83382)\n    at __webpack_require__ (:8989/loader/main.js:679)\n    at fn (:8989/loader/main.js:89)\n    at Object.0 (:8989/loader/main.js:148147)\n    at __webpack_require__ (:8989/loader/main.js:679)\n    at ./app/configure-store.js.Object.defineProperty.value (:8989/loader/main.js:725)\n    at :8989/loader/main.js:728. beta12 fixed all problems related with this issue. Thank you!. I completely agree with you that redundancy is not needed. However, there is one other component with  fixtures placed in another root folder modules. It is shown without any parent folder at all:\n\nCommentWithReplies should be in modules, everything else in ui.\nI suspect this is related to #495.. #495 indeed solved this one, this wasn't a problem after all and works as expected. This is a great idea!\nI think showing that information inline might be too cluttered. Tooltip is a good approach. Another possibility would be some place for showing meta information. That could be a header on top of the main content area where the active selection is shown with all wrapping HOCs around it.. Love it, looks great for a useful start.. Looks great. Is there a typo in section \"Auto mocking prop callbacks in Jest\"?\njs\nconst fixture = {\n  component: Button,\n  label: 'Click me, yo!',\n  onClick: () => console.log('Alright, I was clicked.')\n};\nShouldn't be that:\njs\nconst fixture = {\n  component: Button,\n  props: {\n    label: 'Click me, yo!',\n    onClick: () => console.log('Alright, I was clicked.')\n  }\n};\n. Some feedback regarding the API:\ncreateContext(fixture) is cool. Not sure about the name \"context\" but got no better alternative right now.\nmount and unmount are obvious and easy to understand. Still one question though: What if i want to mount with slight modifications to any fixture field? For example some change in the state, url or prop. Am I required to have a fixture for each variation or can i use a fixture and manipulate it when mounting it?\ngetWrapper(): is the name maybe a bit misleading? In fact we get the component inside all the HOC wrappers. Isn't getComponent() more obvious? Not sure though.\ngetRef() is obvious too, nice\nget(): i only understood what it does after your explanation \"get returns any fixture field\". I get that short function names are desired, but wouldn't getField() or even getFixtureField() be more understandable?. > But this is the only way.\nYou forgot a \"not\". createTestWrapper?\ncreateComponentApi?\ncomponentApiCreator?. createTestWrapper feels like a parent implementation of createEnzymeWrapper, but both are on the same level\nalso:\njs\nconst wrapper = createABCWrapper();`\nwrapper.getWrapper(); // that looks meh :/\n. ",
    "rchanou": "After many tears trying many different configurations to get this to work, I decided to follow the create-react-app instructions you recently (thankfully) added, and just port my project over and move on. Now I can finally load CSS with links to font files in globalImports \ud83d\ude0c Thanks again for the awesome project!. ",
    "vjpr": "I have the same issue with a next.js project.\nI tried adding a babel-loader to compile the exact file that said it required a loader. Didn't work. react-cosmos must be doing some magic I'm guessing.... > \"next\": \"^3.2.2\"\nGot it working!\nI am using a custom webpack config because I modify the Next webpack config in next.config.js.\nI am also using a custom babel preset (see babel-preset-foo below) which I keep in my project's monorepo.\nI added a babel-loader like so:\nconfig.module.rules.push({\n  test: /.js$/,\n  loader: 'babel-loader',\n  query: {\n    babelrc: true,\n    presets: [join(process.cwd(), './packages/babel-preset-foo')],\n    cacheDirectory: false,\n  }\n}). ",
    "mattiaocchiuto": "Update: Actually I solved the problem using the webpack 1 syntax in the loader configuration, so I replaced the use in favour of loaders.. ",
    "JohnRowleySEL": "@skidding, I can take this on. \n@robbert229 is my personal account, and this account is my work account.. Implemented the fix + tests, just waiting for corporate approval.. btw this usually takes a while.. My workplace requires that I get approval from my boss, my bosses boss, his boss, and a guy from legal before I can create a pull request with code that I wrote on the job. It usually just takes a while... but at least I can contribute and get paid for it! :smile: . @skidding That is the goal! :smile: . @skidding Looking at the CI error log it doesn't look like my changes are causing the test failure.... Sorry for the delay, been extra busy with my main duties. Renamed the file!. ",
    "chicoxyzzy": "\nKeeping this in hold because 7.0.0 drops support for webpack 1 \ud83d\uded1\n\nSeems like a good reason to publish react-cosmos 3.0 :). ",
    "dfedynich": "Hey, @skidding, thank you for the link with comparison of devtools for webpack. If we combine these knowledge with webpack official, we will get a real combo. However, I didn't manage to achieve a success - still can't fire breakpoints in cosmos environment. But I am still able to do that for my main project with the same webpack config.\nHere is my relevant webpack.config.js file\n```\n'use strict';\nvar merge = require('webpack-merge');\nvar devConfig = require('./webpack.dev');\nvar HtmlWebpackPlugin = require('html-webpack-plugin');\nvar config = merge(devConfig, {\n    devtool: '#cheap-module-source-map',\n    plugins: [\n        new HtmlWebpackPlugin({\n            filename: './index.html'\n        })\n    ]\n});\nmodule.exports = config;\n```\nHere is my cosmos.config.js file\n```\nmodule.exports = {\n    componentPaths: [\n           //my path to the components\n    ],\ngetComponentName: function (componentPath) {\n    return componentPath.match(/components\\/(.+)\\.js$/)[1]\n},\n\nglobalImports: [\n    './vendor',\n    './main'\n],\n\nproxies: [\n    'react-cosmos-normalize-props-proxy',\n    './redux-proxy'\n],\n\nhot: true,\nhmrPlugin: true,\n\nhostname: 'localhost',\nport: 8989,\nwebpackConfigPath: './webpack.config.js'\n\n};\n```\nDo you have any thoughts, why breakpoints are not fired?. Hello, @skidding, do you have any thoughts about this issue?\nCould you include the changes from @david-ogalego fork to resolve this issue?. Hey, @david-ogalego, you were right. bundle.js is loading twice. Here is the network from Chrome inspector.\n\n. Hey, team. Could you reveal you expectations when the merging process of #364 will be done?. @skidding, sorry for misunderstanding about redux-state. I mentioned this library for only one reason - to outline, that the redux state can contain data from vendor's library and I can't control that. \nI guess, that the clue of the issue in fields of function type. Here is the part of fixtureBody that is the most suspicious in my view.\n\n. Yes, updating node from 5.9.1 to 5.12.0 fixed the issue. Thank you.. Here is how my fixture looks like when we get it in xhr proxy constructor\n\n\nconst mocks = props.fixture[fixtureKey];\n\nreturn undefined, so xhr-mock will be never setup. \nThe fix is read fixtureKey from fxiture properties. Does it make sense?\nI use version 2.0.0-beta.23\n. Removing react-cosmos-normalize-props-proxy fixed the issue. Thanks a lot for the quick resolution.. Actually, you can add the next check to your xhr-proxy in the constructor\nif (module.hot) {\n  module.hot.status((status) => {\n    if (status === 'check') {\n      xhrMock.teardown();\n    }\n  });\n}\nmodule.hot.status is the part of management API of HMR. Yes, exactly.. I'd be delighted to make the patch. . Yes, you got the idea. We are on the same page, I think.\nI implemented the proxy in a quick way, so it gets the updated values from the specified handlers in the fixture prop and stores them in the state. Then it passes the values from the state to the appropriate component's props.\n```\nimport React from 'react';\nimport invariant from 'invariant'\nimport _isNil from 'lodash/isNil';\nconst defaults = {\n    fixtureKey: 'handlers'\n};\nexport default function updatePropsProxy(options) {\n    const { fixtureKey } = { ...defaults, ...options };\nclass UpdatePropsProxy extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {};\n\n        const handlers = props.fixture[fixtureKey];\n        this.newFixture = handlers\n            ? this.getNewFixture(props.fixture, handlers)\n            : props.fixture;\n    }\n\n    handleChange(propName, value) {\n        if (propName) {\n            this.setState({ [propName]: value });\n        } else {\n            invariant(!_isNil(value) && typeof value === 'object' , 'value must be a valid not empty object, otherwise \"propName\" must be specified for a handler in fixture');\n            this.setState(value);\n        }\n    }\n\n    getNewFixture(fixture, handlers) {\n        const passThoughHandlersProps = handlers.reduce((results, handler) => {\n            results[handler.name] = this.handleChange.bind(this, handler.propName);\n            return results;\n        }, {});\n\n        return {\n            ...fixture,\n            props: { ...fixture.props, ...passThoughHandlersProps }\n        };\n    };\n\n    render() {\n        const { nextProxy } = this.props;\n\n        return React.createElement(nextProxy.value, {\n            ...this.props,\n            nextProxy: nextProxy.next(),\n            fixture: {...this.newFixture, props: {...this.newFixture.props, ...this.state}}\n        });\n    }\n}\n\nreturn UpdatePropsProxy;\n\n}\n```\nThe fixture, according to your example, will be:\n```\n// ...inside a fixture file\nimport { fixtureUpdater } from 'react-cosmos-foo-bar';\nexport default {\n  props: {\n    name: 'Denis Fedynich'\n  }\n  handlers: [{\n        name: 'onChange',\n        propName: 'value'\n    }]\n};\n```\nHowever this way has a big drawback - props as such don't include handler name. It is defined in handlers section. So, your solution with fixtureUpdate seems to be clearer and more scalable for future proposals.\nYou mentioned about some done groundwork for the idea to handle stateless components. Nice to hear, so I will leave aside with my quick implementation and will be looking forward when you turn your fixtureUpdate solution into a new proxy or shared utility function. I tried to implement the proxy in the way, that you suggested. But I couldn't send fixture update because of parent DOMException: Failed to execute 'postMessage' on 'Window'. This error makes sense because there are some handlers in props, which are not serializable in JSON. So, do we have a chance to include any handlers in props and pass them in onFixtureUpdate method finally? As far as I understand this method tries to serialize props and stop execution if serialization fails.\nHere is the helper, as you suggested:\nexport default function propUpdater(handler) {\n    return {\n        __PROP_UPDATER__: true,\n        handler\n    }\n}\nHere is the fixture\nexport default {\n    props: {\n        name: 'John Doe',\n        onChange: propUpdater((props, name) => ({\n            ...props,\n            name\n        })),\n    }\nAnd here is the attempt to implement the proxy in the way, that you suggested:\n```\nimport React from 'react';\nimport _reduce from 'lodash/reduce';\nconst defaults = {\n    fixtureHandlerKey: 'handler',\n    fixtureMetaKey: 'PROP_UPDATER'\n};\nexport default function updatePropsProxy(options) {\n    const { fixtureMetaKey, fixtureHandlerKey } = { ...defaults, ...options };\nclass UpdatePropsProxy extends React.PureComponent {\n    constructor(props) {\n        super(props);\n\n        this.getUpdatePropHandler = this.getUpdatePropHandler.bind(this);\n\n        const handlers = _reduce(props.fixture.props, (results, propValue, propName) => {\n            if (propValue[fixtureMetaKey] && propValue[fixtureHandlerKey]) {\n                results[propName] = this.getUpdatePropHandler(propValue[fixtureHandlerKey]);\n            }\n            return results;\n        }, {});\n\n        this.newFixture = {\n            ...props.fixture,\n            props: { ...props.fixture.props, ...handlers }\n        };\n    }\n\n    getUpdatePropHandler(propHandler) {\n        return (handlerValue) => {\n            const newProps = propHandler(this.newFixture.props, handlerValue);\n            this.props.onFixtureUpdate({ props: newProps });\n        }\n    }\n\n    render() {\n        const { nextProxy } = this.props;\n        return React.createElement(nextProxy.value, {\n            ...this.props,\n            nextProxy: nextProxy.next(),\n            fixture: this.newFixture\n        });\n    }\n}\n\nreturn UpdatePropsProxy;\n\n}\n```\nWhen onChange method is executed, I get the next exception:\n\nIs there any way to resolve it? Where did I mistake?. Hi there! @skidding, the solution from @omarzion looks good. Here is the stamp of approval from me - \ud83d\udc4d . I didn't know, that you treat is as an obsolete proxy. I started my acquaintance with react-cosmos by exploring flatris and illustrated-algorithms this winter. react-cosmos-normalize-props-proxy was widely spread there. So, I still continue using it.\nAfter your explanation above, I understand, that this proxy is rudiment and will get rid of it.. I understand your concerns and your reasoning is clear. I think, that the rule of thumb is \"to make the understanding as simple as possible\". You have a good documentation about playground and loader communication, where users can get knowledge about how the code mirror gets the fixture. However, I suggest to update Readme to note about JSON restrictions in code mirror too.  \nYellow band at the bottom of the code mirror is a good idea as well. It will let users know, that the actual state of affairs is expected. It stops users think, why they lost some props in the fixture :). ",
    "david-ogalego": "I am having the same problem. Is it possible that as the bundle generated, is being loaded twice, the browser does not know how to link the sourcemap?. We make some changes in our fork in react-cosmos-webpack.\nhttps://github.com/BeezyInc/react-cosmos/commit/4b99394ecf5e4a3db490bf87d000aaf2ef3a0f83\nAnd in our custom webpack.config configuration inject one of this bundles:\nnew HtmlWebpackPlugin({\n            chunks: ['preview'],\n            inject: true,\n            template: paths.getConfigPaths().appHtml,\n        }),\nIt is working in our case.\n. ",
    "everdimension": "Thanks, adding a custom webpack config with html-webpack-plugin worked.\nBut I remember now that I have one problem with your library: it always bothered me that it tried to use my existing webpack config by default.\nI would prefer that this library used its own config by default.\nRight now, if I don't want it to use my config, I have to create another config and point to it with webpackConfigPath. There's no way to say \"don't use mine, use your default config please\".. > Components used to show up with an automatic empty fixture (another bad idea)\nhuh\nI was about to create an issue that after updating to 2.0.0 components without fixtures do not work\nHow am I supposed to test onChange handlers on inputs with fixtures? Is there a setState method somewhere? May be docs are not good enough.... I guess so. Would be great though if documentation mentioned that creating at least an empty fixture is required.. ",
    "jnishiyama": "@skidding Naw, Didn't do anything extra. Why don't you or someone else try making the PR to attempt to isolate the issue?. ",
    "adelinaenache": "May I take this?. ",
    "sashafklein": "Yes! Actually just saw that in the new docs. Thanks! Yeah. The old video on Fixtures didn't have that. . Thanks for the quick response @skidding !\nAfter some changes (adding reduxState and fiddling with the createStore in the proxy), I've got the reducers showing up correctly in Redux console now, but I'm still seeing prop warnings, and my mapStateToProps function still isn't being hit.\nSo specifically, I'm seeing:\nwarning.js:36 Warning: Failed prop type: The prop `onItemClick` is marked as required in `Dropdown`, but its value is `undefined`.\n    in Dropdown (created by PropsProxy)\n    in PropsProxy (created by StateProxy)\n    in StateProxy (created by ReduxProxy)\n    in ReduxProxy (created by RemoteLoader)\n    in RemoteLoader\nImage: \n\nI'll just paste in all the relevant files here:\nsrc/components/Dropdown/index.js\n```js\nimport { connect } from 'react-redux';\nimport React from 'react';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport { setOpenDropdownID, setDropdownValues } from 'store/actions';\nimport 'styles/components/Dropdown.scss';\n/\n * A basic dropdown. With the callbacks (onTitleClick and onItemClick) unspecified, will behave sensibly, allowing\n * a single item to be selected at a time, and storing that information in the Redux store.\n * Custom behavior can be tweaked through those components.\n * This dropdown also allows for simple or complex (object) items.\n \n * @param {Object} props\n * @param {Array} props.items Array of objects or strings representing a dropdown item\n * @param {string} props.items[].label String to show as dropdown option (req)\n * @param {string} props.items[].value String, object, or any other type representing the data to be stored if item selected\n * @param {string[]} props.items[].className Optional additional class to apply to each item\n * @param {string} props.title Title to display before a value is selected (or after, if replaceTitle is false)\n * @param {boolean} props.replaceTitle Whether to replace the title with the current selection\n * @param {boolean} props.multipleSelect Where more than one item can be selected at once\n * @param {Object[]} props.style Optional styles object\n * @param {boolean} props.open - Whether the dropdown is open\n * @param {string} props.className - Optional string of class to apply to Dropdown\n \n * @returns {React.Component} - A component representing a dropdown connected to the Redux store\n */\nexport function Dropdown (props) {\n  const { items, className, title, open, onTitleClick, style, selectedIndices, onItemClick, replaceTitle, multipleSelect } = props;\nconst finalItems = typeof items[0] === 'string'\n    ? items.map(item => ({ value: item, label: item }))\n    : items;\nconst titleIndex = selectedIndices[0];\nconst finalTitle = selectedIndices.length === 1 && replaceTitle && !multipleSelect\n    ? finalItems[titleIndex].label\n    : title;\nreturn (\n    \n\n{ finalTitle }\n\n\n      { open &&\n        \n\n            {\n              finalItems.map((item, index) => (\n                 onItemClick({ index, value: item.value || item.label }) }\n                >\n                  { item.label || item.value }\n                \n              ))\n            }\n          \n\n      }\n    \n  );\n}\nconst { object, bool, string, arrayOf, shape, any, func, number, oneOfType } = PropTypes;\nDropdown.propTypes = {\n  items: oneOfType([\n    arrayOf(shape({\n      label: string,\n      value: any,\n      className: string\n    })),\n    arrayOf(string)\n  ]).isRequired,\n  title: string.isRequired,\n  onTitleClick: func.isRequired,\n  onItemClick: func.isRequired,\n  selectedIndices: arrayOf(number).isRequired,\n  replaceTitle: bool,\n  open: bool,\n  className: string,\n  style: object,\n  multipleSelect: bool\n};\nDropdown.defaultProps = {\n  replaceTitle: true,\n  open: false,\n  title: 'Select One'\n};\nconst mapStateToProps = (state, ownProps) => {\n  debugger // Never hit!\n  const { dropID } = ownProps;\n  const open = state.openDropdownID === dropID;\n  const element = state.dropdowns.get(dropID) ? state.dropdowns.get(dropID).toJS() : [];\nreturn {\n    open,\n    element,\n    selectedIndices: element.map(obj => obj.index)\n  };\n};\nconst mergeProps = (stateProps, { dispatch }, ownProps) => ({\n  ...stateProps,\n  ...ownProps,\n  element: undefined,\n  onItemClick: (item) => {\n    let toDispatch = [item];\nif (ownProps.multipleSelect) {\n  const previousSelections = stateProps.element;\n  const preexisting = previousSelections.find(obj => obj.index === item.index);\n\n  toDispatch = preexisting\n    ? [...previousSelections, item].filter(i => i.index !== item.index)\n    : previousSelections.concat(item);\n}\n\ndispatch(setDropdownValues(ownProps.dropID, toDispatch));\ndispatch(setOpenDropdownID(null));\n\n},\n  onTitleClick: () => dispatch(setOpenDropdownID(stateProps.open ? null : ownProps.dropID))\n});\nexport default connect(mapStateToProps, undefined, mergeProps)(Dropdown);\n```\nsrc/components/fixtures/Dropdown/index.js \n```js\nimport { fromJS } from 'immutable';\nexport default {\n  props: {\n    open: true,\n    element: [],\n    selectedIndices: [],\n    dropID: 'whatever',\n    items: [\n      'Item 1',\n      'Item 2',\n      'Item 3'\n    ],\n    title: 'Whatever Dropdown',\n    replaceTitle: true\n  },\n  reduxState: {\n    dropdowns: fromJS({}),\n    openDropdownID: null\n  }\n};\n```\n\nI'll add more fixtures for other Dropdown types/states once I figure this out.\n\nconfig/cosmos.config.js\njs\nmodule.exports = {\n  componentPaths: ['../src/components'],\n  webpackConfigPath: '../build/webpack.config.js',\n  proxies: ['./proxies/redux-proxy.js']\n};\nconfig/proxies/redux-proxy.js\n```js\nimport createReduxProxy from 'react-cosmos-redux-proxy';\nimport createStore from 'store/createStore'; // See below file\nexport default () => createReduxProxy({\n  // Called when fixture loads with fixture.reduxState as initial state.\n  // See https://github.com/skidding/flatris/blob/master/cosmos/redux-proxy.js\n  createStore\n});\n```\nsrc/store/createStore.js\n```js\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { browserHistory } from 'react-router';\nimport thunk from 'redux-thunk';\nimport makeRootReducer from './reducers'; // Returns all reducers\nimport { updateLocation } from './actions';\n/*\n * Creates the Redux store\n * @param {Object} initialState Initial state for the app\n * @returns {Object} The Redux store\n /\nexport default function (initialState = {}) {\n  const middleware = [thunk];\n  const enhancers = [];\nlet composeEnhancers = compose;\nif (DEV) {\n    const composeWithDevToolsExtension = window.REDUX_DEVTOOLS_EXTENSION_COMPOSE;\n    if (typeof composeWithDevToolsExtension === 'function') {\n      composeEnhancers = composeWithDevToolsExtension;\n    }\n  }\n// ======================================================\n  // Store Instantiation and HMR Setup\n  // ======================================================\n  const store = createStore(\n    makeRootReducer(), // Returns all reducers\n    initialState,\n    composeEnhancers(\n      applyMiddleware(...middleware),\n      ...enhancers\n    )\n  );\n  store.asyncReducers = {};\n// To unsubscribe, invoke store.unsubscribeHistory() anytime\n  store.unsubscribeHistory = browserHistory.listen(updateLocation(store));\nif (module.hot) {\n    module.hot.accept('./reducers', () => {\n      const reducers = require('./reducers').default;\n      store.replaceReducer(reducers(store.asyncReducers));\n    });\n  }\nreturn store;\n}\n```\nSince adding initial reduxState and making some changes to the proxy, the Redux store has started showing up in Devtools correctly, but I'm still running into the same console warnings, and my mapStateToProps function still isn't getting hit.. @skidding -- Hmm. The reason I'm exporting the class directly is for tests - so that I can import the unconnected version and mock out Redux without the test attempting to \"connect\" to store. Is there a way to still export the component both by default and by name? Would it work if I renamed the named export? That could work for me.. To answer my own question, yes, exporting it under a different name from the file name works!\nI just ran into another issue, but I'll look into that and raise a separate issue if I can't figure it out. Thanks!. ",
    "tkjone": "LOVE  . Sounds good.  Updated the also make sure to section with your suggestions.. Background:\nI am working on a large enterprise react/redux application.  The project is greenfield, so we have it easier than most.  The project also requires us to build out a custom ui-library for internal use across a min of 5 other products.  We are following open source standards as best we can.\nWith this in mind, my preference is level 0\nPros:\n\nSupports all project structures\nClear expectations about what appears in the playground.  This is great when working with a large applications when you want to control exactly what appears in the playground as large applications, generally speaking, have more components and not all of them are expected to be rendered independently.  This is especially important for our app because its not just developers who are looking at this, it is business and design.  Making the folder structure easy to understand goes a long way in getting continued business support and assisting design.\nNo need to keep expanding my ignore list.  Consider; My ignore list is growing all the time as we develop components that are more containers than anything else.  This makes me wish I could just specify the exact structure I want.\nAvoids magic.  If you are new to react-cosmos, and maybe even new to React, and just want to play with cosmos in a react-create-app the current suggested cosmos.config.js won't actually work without the developer adjusting the project structure of their react-create-app (you have to add a components dir and add some components etc).  This is now a min of two extra steps to start using cosmos.  In the case I just mentioned, this is a loss because all the components provided out-of-the-box by react-create-app can be easily rendered inside of cosmos without proxies or any additional setup.  It would be helpful if people new to cosmos understood, from the beginning, how to get a component inside of react-cosmos which is what, I believe, would happen with level 0.  Please note I have left out the intermediate and advanced developers because my assumption (right or wrong) is that they are capable of figuring out how to make cosmos work and the current docs that are here will be enough for them to work with.  \n\nCons\n\nBoilerplate.  I don't actually think this is that much of an issue because there are other libraries, like Redux, which are interacted with all the time and people are generally fine with this.  Yes, people build out boilerplate reducing libraries, but even without libraries, its not so bad.\n\nThere was a comment about maintenance.  I am curious what this is in reference to.  Would you be able to expand @jlc467?  . ",
    "xavxyz": "Due for 3 weeks, docs added & code updated to fit beta-28 \ud83c\udf2e . I find this a really nice way to define proxies!\nI love the flexibility, especially for tests!. Hey Max! \ud83d\udc4b \nYeah, mocks at the fixture-level would be interesting! \nTo do that, let give me you some info on the current solution! \nMocks independent from the fixtures\n\u27a1\ufe0f  [Current Solution]\nThe goal of global mocks is to map the way we would mock a GraphQL API server-side, like when we create a GraphQL schema for a GraphQL API with apollo-server-*: we are mocking responses based on the schema (see docs).\n``js\n// somewhere in your app's API server, you create your GraphQL Schema\nconst typeDefs =\n  type Query {\n    hello(who: String): String\n  }\n`;\nconst mocks = {\n  Query: () => ({\n    hello: (root, { who }) => Hello ${who ? who : 'C O S M O S'},\n  }),\n};\nconst schema = makeExecutableSchema({ typeDefs });\naddMockFunctionsToSchema({ schema, mocks });\n```\nWith this in mind, let's take this assumption:\n\nworry about the proxy config and my fixtures getting out of sync (e.g. if I remove a component from cosmos, I now have to remember to modify the proxy config to remove the mock).\n\nAt the moment, you don't really need to update the proxy config when you modify components shown in Cosmos: we mock the \"interface\" where are sent the GraphQL requests. \nThis is done by allowing Cosmos to load a component enhanced with graphql higher-order component from react-apollo and to \"send\" its queries/mutations/subscriptions to a schema that will treat the request and return data based on the mock functions defined.\nWe mock the schema defined in the proxy config thanks to graphql-tools and its default mocking logic (see an example here).\nYou need to update the config only if you want custom return value for a query / mutation / subscription / type defined in your schema.\nMocks per fixtures\n\u27a1\ufe0f  [Proposed Improvement]\nLooks like having mock per fixtures is a different approach! \ud83e\udd14  \n\nI think this makes more sense and aligns better with the way the other proxies work.\n\nYeah, that would definitely be more aligned with the way Cosmos proxies are used \ud83d\udcaf \n\nIt would allow me to mock multiple different server responses by using different fixtures\n\nWe would be able to bypass the \"top-level mocks\" (defined in the config), and return a custom data object from a query/subscription or from a mutate function.\nIt would be much easier to display a component enhanced with a query in its loading state or to display an error (network failure, not allowed to do that, ...)!\nConclusion\n\u27a1\ufe0f  I would tend to make these approaches live together!  \ud83c\udf2e \nIn my honest opinion, having a top-level schema+mocks acting as the interface where GraphQL requests are sent from the client is required (it's the API contract after all).\nBy the way, if your schema is not written in JS or doesn't live \"nearby\" your client app, you can still mock it easily on the client using introspection:\n```js\nimport { buildClientSchema } from 'graphql';\nimport * as introspectionResult from 'schema.json';\nconst schema = buildClientSchema(introspectionResult);\naddMockFunctionsToSchema({schema});\n```\n(see Apollo docs)\nAnd having custom values at the level of the fixture is also important for flexibility and alignment on how we use Cosmos!\n\n\u27a1\ufe0f So what do you think? \ud83d\ude04 \nYou may have different use cases? How do you use currently the Apollo Proxy?\n. Yeah, you're right, the proxy only allows for raw type definitions, it should allow for a schema too!\nSo here are the improvements I'm going to work on:\n- [x] make it possible to pass a GraphQLSchema instance\n- [x] ~make it possible to pass a schema as a JSON file and build it thanks to introspection query~ up to you to pass a link to connect to the schema wherever it lives\n- [x] make it possible to mock what the graphql container returns\n- [x] update the proxy to use Apollo Client 2 and so links instead of networkInterface, it would open the door to pass custom links down the road!\n. Dude!! I'm STOKED, that is awesome developer experience!! \ud83d\udd25\nCan't wait to try it \ud83c\udf89. > fixtures should guide components as they follow their natural state transition path instead of injecting the final state\nThese are wise words (that resonate strongly with me): this makes a lot of sense!\nAs far as I'm concerned, using Cosmos mainly in the context of Apollo, I'm expecting an API like that to work really well to deal with loading / error / success states.\nUsing an API like until, could it also open the door to work with observables? Staying in the context of this component usually going from A (init) -> B (fetching) -> C (success) and an occasional state D (error), we could listen to these states with next/complete/error native observables methods and provide it the relevant fixture? I don't know if I'm clear here, does it make sense?. \ud83d\udc4b hey!\nThat is awesome!! \ud83d\ude80\nMaybe we could integrate with Sizzy?\n\nA tool for developing responsive websites crazy-fast\n\nThe code is open-source (repo) and it started as a Storybook plugin (story): there may still be a way to extract the core component and re-use it in the Loader! . > \ud83e\udd17 Thanks for all these feedbacks, folks! It gives a clearer picture!\nRecap\nThe goal of the Apollo proxy is to help developing components in association with a GraphQL API, backed by the Apollo Client and the React integration: \n- you can stress your components with live data, the results come from an external API;\n- you can prototype your components with local data, you define the shape of the results you'll get.\nFlow\nHere is a diagram representing the API I think it'll end up with:\n\n\"Easy-peasy\" config (proxy.config.js)\nThe most simple way to use the proxy is to pass a GraphQL endpoint. A client is created for you to send operations over HTTP (HttpLink) to this endpoint and it depends on a classic InMemoryCache.\n```js\n// proxy.config.js\nexport default [\n    createApolloProxy({\n      endpoint: 'https://1jzxrj179.lp.gql.zone/graphql'\n    }),\n    // ...other proxies\n]\n```\n\"Real-world\" config (proxy.config.js)\nA client used in a production app often uses multiple links (polling, retry, context, whatever...) and may have some specific options for the cache. We allow to overwrite the default client by your own:\n```js\n// proxy.config.js\nimport { client } from './src/client.js';\nexport default [\n  createApolloProxy({ \n    client\n  }),\n  // ...other proxies\n]\n```\n\"API Prototype\" config (proxy.config.js)\nYour API is no ready yet, no worries, prototype it directly in Cosmos! The proxy accepts a schema instance to run operations against. It uses the apollo-schema-link under the hood: direct execution against graphql-js.\n```js\n// proxy.config.js\nimport { makeExecutableSchema, addMockFunctionsToSchema } from 'graphql-tools';\nconst typeDefs = type Query {\n    hello(who: String): String\n  };\nconst mocks = {\n  Query: () => ({\n    hello: (root, { who }) => Hello ${who ? who : 'C O S M O S'}\n  })\n};\nconst schema = makeExecutableSchema({ typeDefs });\naddMockFunctionsToSchema({ schema, mocks });\nexport default [\n  createApolloProxy({\n    schema\n  }),\n  // ...other proxies\n];\n```\n\"Fine-tune\" fixture (xyz.fixture.js)\nLet's say that we have this component where we want to directly mock the GraphQL response (cc @maxsalven \ud83d\ude1b). We can do that by writing fixtures, yeah!\nLike we have this query:\ngraphql\nquery PostsForAuthor($authorId: Int!) {\n      author(id: $authorId) {\n        id\n        firstName\n        posts {\n          id\n          title\n          claps\n        }\n      }\n    }\n```js\n// MyComponent.fixture.js\nimport MyComponent from './MyComponent';\nexport default {\n    component: MyComponent,\n    apollo: {\n        resolveWith: {\n            author: {\n                id: 123,\n                firstName: 'Ovidiu',\n                posts: [\n                    { id: 456, title: 'Testing React Components', claps: 1234 },\n                    { id: 789, title: 'When to assert?', claps: 56 },\n                ]\n            } \n        }\n    }\n}\n```\nHow does these config live together?\nendpoint is the highest-level.\nendpoint is overwritten by client.\nclient is overwritten by schema.\nschema overwrites any config.. > If you have a schema in your proxy config (\"client is overwritten by schema\"), does this mean you can't simultaneously have fixtures that access live data?\n\ud83d\udc4d\nI guess we could stitch real data with the local schema, yes, good call!\n\nFor the fixtures with directly mocked responses, perhaps it would be better to somehow use the query name as the key under resolveWith [...] This means you could mock a component which performs multiple different queries.\n\n\ud83e\udd10\nresolveWith would be the result you expect to get under the data props. If you need multiple queries, I'd recommend to combine them like this:\n```graphql\ndefinition, api-side\ntype Query {\n    author: Author\n    pizzas: [Pizza]\n}\n\u2193 \u2193 \u2193 \u2193\nconsumption, ui-side\nquery twoQueriesInOneNetworkRequest {\n    author {\n        # ...\n    }\n    pizzas {\n        # ...\n    }\n}\n```\nYou'll get an object { data: { author: { ... }, pizzas: [ ... ], ... } } and have two queries sent in one network request. If however you really want to send two different queries as two network requests, well, you can test the HOC directly, the proxy wouldn't be useful for the composed component.\n\nIs there a way to mock the 'loading' state?\n\n\ud83e\udd10\nA component broadcasting GraphQL operations with Apollo is basically a component with a HOC around it. To test the \"loading state\", you can test the loading prop the inner component receives \ud83c\udf61 I see your point, maybe in terms of DX it could be cool to do that directly from the fixture, however it won't be included out-of-the-box in this PR.\n\nIn the 'direct mocking' approach, would also be cool if you could pass in a function that accepts the query's variables\n\n\ud83e\udd20\nOoh, nice! That would be pretty neat, however, we would lose the ability to see it in the fixture editor, right? \n. Updated the API to match my initial comment with a slightly different priority order.\nIn the proxy config\n1. Try to use client option, the real client you use in your app\n2. If no client, looks for an endpoint that you may want to consume\n3. If no client nor endpoint, create a link to fetch a local schema\nIf no client || endpoint || schema, the proxy throws: GraphQL is kind of a contract between your client and an API, and there is no way to know what is the contract.\nOn the way to send the operation, if apollo.resolveWith/failWith is defined in the component's fixture, replace the link by a \"fixture\" link inspired from this article that either give a result or an error. \nCould you give it a try and see how it feels? You can run the examples/apollo app.\n\nI guess we could stitch real data with the local schema, yes, good call!\n\nWe may run into problems when we have mock function in the local schema that are the same that the real one \ud83e\udd14 . Folks, thanks so much for your feedbacks! \u2764\ufe0f \n@dan-weaver By \"removing local mocks\" I'm thinking of getting rid of this part:\n```\n// proxy.config.js\nimport { makeExecutableSchema, addMockFunctionsToSchema } from 'graphql-tools';\nconst typeDefs = type Query {\n    hello(who: String): String\n  };\nconst mocks = {\n  Query: () => ({\n    hello: (root, { who }) => Hello ${who ? who : 'C O S M O S'}\n  })\n};\nconst schema = makeExecutableSchema({ typeDefs });\naddMockFunctionsToSchema({ schema, mocks });\n```\nYou shouldn't need to create an abstract layer above your existing API in your cosmos config. Mocking would happen only at the level of the fixture, like the code you highlighted \ud83d\ude0a \n@maxsalven that's super interesting! Yeah, the goal is to support sending operations and either get a mocked response or a live response. I imagine that with the fetchproxy solution, it would be harder to get mocks based on query variables or mocks for failing operations \ud83e\udd14\nI'll come up with some updates tomorrow, let's get this PR merged asap! \ud83d\ude01. > \ud83d\ude80 Ready to be merged! (4 months later, haha)\nI believe it's good now:\n- added tests around the proxy / custom link, \n- updated the docs\n- completed the example with live behavior / mocked (named) responses\n- rebased on latest master\nWhat do you think?. Oh mate, thanks a lot!\nMaybe having a look at the failing build on node 6? It fails because of async await in a dependency? \ud83d\ude10. Many thanks for this review!\nIt should be good to go now. \nHappy to give you a walkthrough before we merge it, if you are available (especially concerning this comment)!\nEdit-wtf: Node 6 build is passing now, but now fetchMock fails on node 8: it's trying to do real calls to http://xyz \ud83d\udca5 . Locally on Node 8.9.1, tests are passing and no real requests are made.... Discussion moved in #613 \ud83c\udd97 . Solved in #618, will be released under react-cosmos@4 asap \ud83d\udc4d. > I've found this pretty upsetting.\nYep, same! Another part of the discussion: https://github.com/react-cosmos/react-cosmos/issues/542. Would using glob-to-regexp as mentioned in https://github.com/react-cosmos/react-cosmos/issues/555 would reduce the need of react-cosmos-voyager2 ?\nrequire.context would be run from root directory with a regexp created from the glob pattern?\nBy the way, embedModules, where we watch files, still depends (source) on the deprecated react-cosmos-voyager(1) for getFilePath (voyager source). Is this a possible issue?\n. > I believe I couldn't find a way to merge more than one regexp and send it to webpack, which expects one.\nWhat if we don't merge the regexp but actually uses multiple require.context? \ud83d\ude04\nEDIT: hum. we actually do.\n. Wunderbar, it works!! \ud83c\udf2e \nGreat job, high five coaie!. \ud83d\udc4b, hey!\nProblem\nI figured out that the problem comes from this in your logs:\n\n[Cosmos] No config file found, using defaults\n[Cosmos] No webpack config found, using defaults\n\nCosmos tries to parse the fixture but doesn't know how to resolve the content of a .tsx file: it's using its default config.\nSolution\nAs you're using a starter based on create-react-app, you can use a Cosmos config as similar as the one recommended for CRA.\nThe only change is that you have react-scripts-ts instead of react-scripts, which gives you the following config:\njs\n// cosmos.config.js\nmodule.exports = {\n  containerQuerySelector: '#root',\n  webpackConfigPath: 'react-scripts-ts/config/webpack.config.dev',\n};\nWith such config file at the root of your app, you should get logs looking like:\nsh\n\u25b6 yarn cosmos\nyarn run v1.3.2\n$ cosmos\n[Cosmos] Using webpack config found at node_modules/react-scripts-ts/config/webpack.config.dev.js\nYou are now good to go with Typescript & Cosmos \ud83d\ude80 \nNote on additional logs\nEven if Cosmos is building with Typescript, you may get console output looking like that ones (at least I did):\nFailed to load tsconfig.json: Missing baseUrl in compilerOptions\nFound no baseUrl in tsconfig.json, not applying tsconfig-paths-webpack-plugin\nFound no baseUrl in tsconfig.json, not applying tsconfig-paths-webpack-plugin\n[Cosmos] Failed to parse ~/code/cosmos-ts/src/__fixtures__/HelloWorld.tsx\nts-loader: Using typescript@2.7.2 and /Users/xavier/code/cosmos-ts/tsconfig.json\nNo valid rules have been specified\nI have no idea why it tells that, cause in the end it works and if you mistype something, the compiler will tell you that you messed up \ud83e\udd14  . Ok, makes sense!\nShould we try to include the Apollo PR into that too? The new Apollo proxy introducing a breaking change compared to the initial Apollo proxy implementation. > Fails with Flatris repo (Next.js), where it's relying on default webpack config and Next.js uses webpack <4 \ud83d\udc4e\nAlso fails on my local setup, using Next.js\nJust noticed this PR, after 1h of banging my head.\nHaha. Haha no probs!\nWill try tomorrow (now = \ud83c\udf7b\ud83d\udca5)!\nThanks for releasing the next (pun intended) beta!. Yay, thanks Scott!. It looks like you are using a custom webpack config, the one from react-boilerplate (awesome project btw!), which is actually preprocessing 3rd party CSS separately: https://github.com/react-boilerplate/react-boilerplate/blob/5b58dd97d0e9dc39799c345f1bcbf1333bde92b1/internals/webpack/webpack.base.babel.js#L30-L43. The former works,  but the latter brings more clarity! I'll submit a PR tomorrow \u270c\ufe0f. Yeah man, that looks great!\nEspecially excited by the Flow types, I'm going to see how I can develop in a better way with that \ud83d\ude04 . \ud83d\ude80 it's excellent!. That seems doable! I imagine we could wrap this block (code) with a setTimeout whose value would be configured in the fixture!\nI'm going to look into it this week \ud83d\udc4d . PR opened, feedback welcomed #799 \ud83d\udcaf . @nickluger Yep that's possible, resolveWith can be resolved as a promise. Excellent! \ud83d\udc4f. Creating a new client instead of hardcorely replacing the link is a great move, @JannesV !. > Is the underlying issue the fact that we mutate the user's clientOptions inside the proxy?\nYep \ud83d\ude1e \nThanks for the recommendation of cloning, but even when cloning with different approaches (not just Object.assign), the cache is still mutated \ud83e\udd10 . > ApolloClient.options\nNeeds a cache to work \ud83d\udc4d \n\nApolloClient.options.link\n\nOnly the FixtureLink might need the cache to read data from it, for example when executing a mutation:\n```js\nexport default {\n  component: Author,\n  props: {\n    authorId: 123\n  },\n  apollo: {\n    // mocked response for the mutation named UpvotePost\n    UpvotePost: {\n      resolveWith: ({ cache, variables, fixture }) => {\n        // read data from the cache\n        const data = cache.readQuery({\n          query: QUERY,\n          variables: { authorId: fixture.props.authorId }\n        });\n    const post = data.author.posts.find(\n      post => post.id === variables.postId\n    );\n\n    return {\n      upvotePost: {\n        ...post,\n        votes: post.votes + 10\n      }\n    };\n  }\n}\n\n}\n};\n```\n. \ud83e\udd14 it looks good, I don't see what would be wrong.\nTo figure out what is going on, could you console.log the content of the cache before reading it in the update function with JSON.stringify(cache.extract()) and tell us what's inside?\nA minimal reproduction on a repo would be awesome \ud83d\ude4f . > Thanks for the reproduction @jeznag , I got it working thanks to that! \ud83d\udc4d \nPart of the problem\nIn the context of this fixture, the cache has never been filled with the result of a getAvailableOptions query, you can write manually result in the cache but this query is not watched. \nMy assumption is that the caches loose this data written manually when the mutation result is written in the cache (\"query watching invalidation\"?)\nIn addition to that, Apollo Client will filter anything that is different from the return value of the mutation:\n```js\n      resolveWith: apolloData => {\n       // ...\n       return {\n          // this will never be written to the cache,\n          // it doesn't fit what should be returned by the mutation\n          // availableOptions: fakeData,\n      // only return what the mutation *is supposed to return* \n      saveExportDataRequest: {\n        NoResponse: null,\n        __typename: 'saveExportDataRequest',\n      },\n    };\n  },\n\n```\nA possible solution\nWe need to get getAvailableOptions somewhere to have the mutation updater function to work (ie. use of cache.readQuery).\nIn the fixture, we can wrap SubmitForm with a <Query /> running getAvailableOptions and mock the data that would be returned by the API: no need to write the cache when running the mutation.\nThis gives something like this (tested on your reproduction):\n```jsx\nimport React from 'react';\nimport { Query } from 'react-apollo';\nimport SubmitForm from './SubmitForm';\nimport getAvailableOptions from '../graphql/queries/getAvailableOptions';\nclass SubmitFormFixture extends React.Component {\n  // note: just to make it show up in the fixture tree as \"SubmitForm\" \ud83d\ude05\n  static displayName = 'SubmitForm';\nrender() {\n    return (\n      {/ query that will be populated with an apollo fixture /}\n      \n        {() => }\n      \n    );\n  }\n}\nexport default {\n  component: SubmitForm,\n  apollo: {\n    // populate the cache with the data from  \n    getAvailableOptions: {\n      resolveWith: {\n        availableOptions: {\n          __typename: 'availableOptions',\n          availableAggregationLevels: [\n            // ...\n          ],\n          // ...\n        },\n      },\n    },\n    // populate the cache when the 's function is called\n    saveExportDataRequest: {\n      resolveWith: apolloData => {\n        return {\n          // only return what the mutation is supposed to return \n          saveExportDataRequest: {\n            NoResponse: null,\n            __typename: 'saveExportDataRequest',\n          },\n        };\n      },\n    },\n  },\n};\n```\nConclusion\nIf a fixture relies on other GraphQL operations result, these results should be mocked too, like in this example: https://github.com/react-cosmos/react-cosmos/blob/master/examples/apollo/components/fixtures/Author/mock-with-mutation.js\n\ud83d\udc46  The mutation depends on the result of a query, the query is mocked so the cache is populated when the mutation reads from it.\nIn the end, this isn't a bug from Cosmos, I'm closing this issue. \nHowever, this could be interesting to have a mechanism to populate the cache (start with an initial state for the cache (cache.restore() could do that! https://www.apollographql.com/docs/react/features/server-side-rendering.html#store-rehydration \ud83e\udd14). If you are interested in contributing, feel free to open another issue or even a PR referencing this one, I'll be glad to help!\nCheers. Oh yeah please do!. Interesting question! \ud83e\udd14 \nThe fixture value will never change, it may help to consider it as a description of what Apollo Client should give as a result of a query/mutation.\nWhat will change is the cache and the props received by your component if they depend on some query / mutation result.\nIf you really need to read from the cache directly, you could try to find the ApolloProvider in the tree and grab the client prop.\nOnce you have the cache, you can either cache.readQuery/readFragment to get data out of it or inspect the proxy object directly.\nIf I can give my 2 cents, asserting the result with the component props sounds like the best option if possible as it may test what's reflected in the UI and doesn't test implementation details. \ud83d\ude42\nI hope you'll find a solution that fits your application needs!. Wow, awesome!. Hey! Yeah, displayName is the key to this problem :+1: \nYou can create a separate variable for the wrapper component and assign it a displayName:\n```jsx\nconst WrapperComponent = props => (\n  \n\n\n\n\n);\n// The fixture will be shown in the tree as Carousel\nWrapperComponent.displayName = \"Carousel\";\n// separating names with a / will make the fixture Carousel \n// appear in a nested folder called \"styleguide\".\n// WrapperComponent.displayName = \"styleguide/Carousel\";\nexport default {\n  component: WrapperComponent,\n  // ...\n};\n```\nI'm going to make a PR to the docs to clarifiy that, thanks for opening this issue!. Dark launch ? :scream: :japanese_goblin: . :sweat_smile: The problem is not Cosmos, but your component!\nYou explicitly define a new instance of the Apollo Client in its render function, this client will not be mocked: https://github.com/COzero/cosmos-apollo-test/blob/27f16ea078c57a338b82043b76155dd1fdef1c3e/src/DataJunction/index.tsx#L23\nNote that this is the purpose of this proxy to \"replicate\" the behavior of the client, the client that should only exist once at the top level of your app: https://www.apollographql.com/docs/react/essentials/get-started.html#creating-provider. No bother!. The verb jumped out of the sentence in the refactor! \"A fixture is a JS object...\" \nLove this explanation of fixture. Should it be on the same line as 3.?. Oh, yes! Thanks for the heads up!. Haha, no probs!. I don't mind at all, that makes sense! Thought about it but didn't do anything. Thanks for the comment! . Surely not! Thanks! \ud83c\udfa9 . Actually, I'm thinking about removing the local mocks part!\nGraphQL is all about one source of truth, your schema, and creating local mocks in a separate client app feels like creating a second source of truth, that can easily drift off the alignment with the original API. Yep. Lol, I don't know \ud83d\ude31 . \ud83d\udc4d consistency!. \ud83d\udc4d consistency!. \ud83c\udfa9 . Yeah, it doesn't have a displayName by default, however we can add it thanks to an alias. It's actually one of the few (minor) feature I helped for!. \ud83d\udc4d consistency. Nice one, thanks!. Oooh!! \ud83d\udc4d  \ud83e\udd2f. > Hmm, doing a live call in tests can lead to lots of pain down the road, because all of a sudden the test suit doesn't down offline nor if gql.zone is down.\nVoice of the reason \ud83d\udcaf \n\nCan we mock this endpoint using the FetchProxy in real data example?\n\nI replicate the fetch-proxy behavior in the tests (they fetch http://xyz and no real call is made when running the tests).\nFor the fixture, the fetch-proxy wouldn't give the right granularity: it's not possible to mock in a clean way both the query & the mutation. In order to give the user a feeling of the real behavior, I'm going to download the live API to create a local GraphQL API and locate it in a .local-graphql-api directory, inside the example.\n\u263a\ufe0f This ensures pure encapsulation for the tests as well as high-fidelity example . \ud83d\ude80. ",
    "maxsalven": "Is this something that might make it into 3.0? Thanks :). Yes, am on Axios. I submitted a PR for this, thanks both.. @skidding awesome!\nAny chance of nested fixtures in Level 0? And collapsable folders (the open/closed state of which is persisted across sessions) in the component browser would be awesome :).\nI've currently got a component with about 50 fixtures, which I'd love to subcategorise.\nWould also love to be allowed to add a description to my fixtures which shows up below the fixture name.\nFurther dream: \"Display all\" next to folder name, and it shows me all my fixtures in that folder on the screen at once :)\n{\n  components: {\n    Foo: './src/components/Foo',\n    Bar: './src/components/Foo'\n  },\n  fixtures: {\n    Foo: {\n      one: './src/components/Foo/__fixtures__/one',\n      two: './src/components/Foo/__fixtures__/two'\n    },\n    Bar: {\n      green: {\n         big: './src/components/Bar/__fixtures__/green-big',\n         small: './src/components/Bar/__fixtures__/green-small',\n      },\n      blue: {\n         big: './src/components/Bar/__fixtures__/blue-big',\n         small: './src/components/Bar/__fixtures__/blue-small',\n    },\n  }\n}. I'd much prefer to name the fixture within the fixture data. I never really understood why I had to be limited to the hard to read formatting restraints of a filename. I want to see my fixture in the UI as \"Blue outline with gold flair\" and not \"blueOutlineWithGoldFlair\" or \"blue-outline-with-gold-flair\".\nAs discussed elsewhere, I'd love to be able to add a description as well.\nI may be in the minority here, but I'd prefer to have all my fixtures for a component be in one file, just like I can with jest tests. In fact, I'd love to mirror jest as much as possible.\ncomponents/Button/index.js\ncomponents/Button/index.fixtures.js\nIf there is no default export, we consider all the exports to be fixtures:\n```\nconst baseProps = { something: true }\nexport const fixture1 = {\n  name: \"Defaults\", // optional, can use 'fixture1' as name if no name attribute provided.\n  props: { ...baseProps },\n}\nexport const fixture2 = {\n  name: \"Blue Outline with Gold Flair\",\n  props: {\n    ...baseProps,\n    color: \"blue\",\n    flair: \"gold\",\n  },\n}\n```\nIf you want folders, then you can create a default export:\nexport default { fixtureFolder1: { fixture1 }, fixtureFolder2: { fixture 2 } }\nI'd also think 'zero setup' is doable using this method, just like in jest. Simply watch for all *.fixtures* files, and boom, that's what you show in cosmos.\nIt's basically zero-config, similar to what you discussed in your Death of Config issue. Install react-cosmos, specify your webpack config (or autodetect for common use cases), create a fixture (either manually or via a new UI). That's all there is to it. Want another component in cosmos? Just create a fixture for it. No need for component paths config, or whitelists, or ignores, or fixture paths, etc. If a valid fixture exists, it's in cosmos.\nI'd go one step further and get rid of folder/filename matching completely. It's just a source of headaches. Let's import the component we want inside the fixture, just like in Jest, then it doesn't matter where I put my fixture files, and I can move them around without having to change anything, anywhere.\n```\nimport MyComponent from \"src/somewhere/MyComponent\"\nexport const myFixture = {\n  component: MyComponent,\n  props: { },\n}\n```\nI appreciate this is a bit of a departure from the existing system, but I really think it's far superior. The fixture file 100% defines the fixture now (initialState in a redux reducer, notwithstanding). There is no dependency on config'd folder paths or names etc. There is almost zero room for user confusion or error. You can also easily generate these fixtures from the UI.. I have a somewhat unconventional existing setup, but it works perfectly in the existing release version of react-cosmos.\nI had essentially created my own 'level 0' config, by having a src/components/__cosmos__ directory, and a componentPaths: [\"src/components/__cosmos\"] in my config.\nIf I want to see a component in cosmos, then in my __cosmos__ directory, I might have something like this:\n```\n// components/ cosmos/ui/Modal/index.js\nimport Modal from \"components/ui/Modal\"; // the 'real' component\nexport default Modal;\n```\n```\n// components/ cosmos/ui/Modal/fixtures/open.js\nimport React from \"react\";\nexport default {\n  props: {\n    isOpen: true,\n    onDismiss: () => console.log(\"Closed Modal\"),\n  },\n  children: Children,\n};\n```\nHowever the codemod has created invalid code:\n```\nimport React from \"react\";\nimport ui/Modal from '../index';\nexport default {\n  component: ui/Modal,\nprops: {\n    isOpen: true,\n    onDismiss: () => console.log(\"Closed Modal\"),\n  },\nchildren: Children\n};\n```\nSpecifically, it has put a \"/\" in the import name which is not allowed. The code mod doesn't really apply to my case anyway (as I no longer need to have my workaround system) but just an FYI that there are scenarios where it produces invalid code.. Latest cosmos alpha worked perfectly for me with my existing fixtures and with the code mod!\nJust a small note on the codemod, it doesn't respect .prettierrc and would be cool if it did. Perhaps you can check if the file exists, and if so, run prettier before saving the fixture. Not a big deal at all, but if it's an easy win, maybe worth throwing in there.. Thanks, appreciate the thoughtful response and sorry for my slow feedback.\nUnfortunately I don't have much to say, as I'm very new to graphql/apollo.\nI guess what I'd like to do is in my cosmos fixture provide something like what I get back from a GraphQL network request:\n\"data\": {\n  \"currentUser\": {\n    \"name\": \"Max\",\n    \"__typename\": \"User\"\n  }\n}\nThen I can easily make multiple mocks for a single component with different responses.\nPerhaps you might want to go one level up the abstraction tree and instead of the raw network responses, mock what the graphql container returns:\n\"data\": {\n    \"variables\": {\n      \"userId\": \"1\"\n    },\n    \"loading\": false,\n    \"networkStatus\": 7,\n    \"currentUser\": {\n      \"name\": \"Max\",\n      \"__typename\": \"User\"\n    }\n  }\nThis way I don't have to worry about setting up any schemas etc.. I've pushed updates that deal with everything you raised, albeit a couple items could use a bit of improvement (the last two in this list). I think the code is clearer now, thanks for the great suggestions!\n\n[X] Renamed TreeRenderer to Tree\n[X] Better Icons\n[X] Adjust heights\n[X] Added fixtures\n[X] Make filteredFixtureTree derived data rather than state\n[X] Include urlParams in tree shape and don't include them for non-fixtures for now\n[X] Split out onToggle and onSelect methods\n[X] Support for scrolling selected item into view (includes fixture)\n[X] Highlighting/search improvements, deals with fuzzy search, spaces and fixes escape bug [WIP]\n[X] Basic support for receiving updated Fixtures props [WIP]\n\n\nGenerating originalData and storing it in the state makes sense, tho I would probably call it something like fixtureTree. But I don't think we need filteredData stored as it's easily derived from originalData. Did you keep it to be able to mutate it on expand/collapse? I'm sure there are elegant ways to functionally update a single tree node. I think it's called \"tree walk\".\n\nI've updated it to make the filteredFixtureTree as derived data. I originally kept the filteredFixtureTree in state because I was concerned mainly about:\nA) Re-calculating the filtered tree on every render. I assumed at the time that if you edit a component props in the Editor, that the filtered tree would recalculate per keystroke and may cause lag with large trees. However it doesn't seem to be the case that it re-renders per keystroke, so this is no longer a concern.\nB) Issues with expanding/collapsed folder state. Now that the filteredTree is derived, you can't actually toggle the folders when a filter is applied, they are all fixed in the open position. I'm not sure of an easy way to overcome this if we only have the 'original' tree in state. If we take the expanded fields from the (non-filtered) fixtureTree state, then we risk having the search filter match something that is currently collapsed, which I think would be poor UX. I personally think the current situation of locking everything into expanded whilst searching is OK. What do you think?\n\nSince we don't mind redundant data I think we would benefit more from adding explicit urlParams: { component[, fixture] } to the tree structure. This way we don't have to do any inference like knowing whether a node is a component or fixture based on it having children or not. We just use this property to set the URL and we construct it when building the tree structure. E.g.\n\nUpdated. I feel it makes Tree a little bit less independent (urlParams is a bit specific to react-cosmos rather than a generic concern of tree rendering) but it's not a big deal. If you wanted to be really clean about it, you'd probably want to pass in a isNodeSelected function into the Tree component, but I don't think it's worth the extra complexity.\n\nDidn't take a close look at the API yet, but it would be nice to preserve at least a part of the fuzzy matcher. Namely, I like that you can now type: \"COMPONENT_NAMEFIXTURE_NAME\", since fixtures are often named the same across components and you can't target them otherwise.\n\nI managed to get the fuzzy matcher to work, along with highlighting, kind of. \nYou can search with spaces and fuzzy matches now, and we highlight correctly:\n\nHowever, if the search spans two different things, then we lose highlighting at the moment:\n\nNote that the code is now pretty tightly coupled to fuzzaldrin, I'm not sure this is avoidable.\n\nWe currently only build the tree upon mounting. I imagine the fixtures prop can change over time however, so we should probably look to have a componentWillReceiveProps hook and recalculate the tree state, taking care to maintain the expanded/collapsed states for any components that persist across this prop change.\nIndeed. New fixtures show up via webpack hot module reloading.\n\nI added very basic support, which seems to work fine:\ncomponentWillReceiveProps(nextProps) {\n    if (\n      JSON.stringify(nextProps.fixtures) !== JSON.stringify(this.props.fixtures)\n    ) {\n      this.setState({ fixtureTree: fixturesToTreeData(nextProps.fixtures) });\n    }\n  }\nThe caveat is that you currently lose the expanded/collapsed state if you modify a fixture. We eventually want to walk the new tree, checking at every node if that node exists in the original tree, and if so, using the expanded value from the original tree. Don't think it's critical, but a TODO. We might want to consider this feature alongside a broader \"save expanded/collapsed state to local storage\".\n. I pushed a proof of concept for storing the expansion state locally:\nhttps://github.com/maxsalven/react-cosmos/tree/playground-tree-view-local-storage\nI was thinking that it's a bit pointless having collapsible folders if every time I load the window, it'll all be super long and expanded again. So may as well build in this feature.\nIt's pretty naive, we just store an object in local storage that looks like:\n{\n  dirB/Component2: false,\n  dirB/subdirA/Component4: true\n}\nWe also have a corresponding localStorageKey in the tree structure which we use to look up into the local storage object.\nVery simple, works well. Issues:\n- If you are working on two different projects, and have dirA in both of them, then collapsing in one cosmos will mean it's collapsed when you switch to the other cosmos. I'm not sure how we can namespace a project. Probably not a big concern.\n- Because we don't have namespaced projects, we don't know when a fixture has been deleted, so we can't delete the appropriate items from the local storage object. Not a huge deal, just means the object might get a little 'big' but the total amount of cosmos UI folders a given user will click on in their lifetime is small enough to never be a real performance or storage space concern. We could make the object above thinner by only storing 'false' states, at the cost of some small amount of clarity.\nNote: I wasn't able to get the local storage proxy to work whilst developing this. Please LMK if you can see what I did wrong, thanks. There's a fixture in FixtureList called nested-data-with-local-state.js. UPDATE: I guess that's because localForage is using IndexedDB? Time for a new proxy? :). I added a new fixture under Tree with an active search, and added the styling improvements. Also took care of cleaning up the filter related code, and fixed a bug with the text highlighter (if you searched for 'a', it would render e.g. 'A' instead of 'DirA').\n\nKeep everything folder rendered and hide it via CSS, this will only trigger componentDidMount once. This might also enable nice CSS transitions if we just change the height of a container div from 0 to full and vice versa.\n\nHave implemented this. The scrollIntoView bug is now fixed. However, I couldn't get the CSS transition to work. I did a bit of google, which suggested using max-height, but it doesn't work with auto. So then we'd have to dynamically traverse the subtree at each folder to find out the height of the children (a naive implementation would have to check all sub-branches and count the number of visible items). Is there a much cleaner CSS only solution you think we can use for this, rather than having to do dynamic height calcs?. I realized we had a bug in that the fullScreen and editor params weren't persisted when clicking on fixtures. \nI went through a few different stages fixing this, and I'm not sure what solution you like most.\nhttps://github.com/react-cosmos/react-cosmos/pull/448/commits/0981099165701fcbc22a36368d28606a54fb12d2\nHere, we ignore these global params in the actual fixture href attributes, so the status bar will show a URL without these (even though clicking on the link will correctly update the URL). Very simple code, but slightly wrong hrefs.\nhttps://github.com/react-cosmos/react-cosmos/pull/448/commits/09364d67658599477d062e1e625955b2a7d72acc\nHere we have the correct href attributes on the fixtures. Means we have to mess around a fair bit with the Tree code.\nhttps://github.com/react-cosmos/react-cosmos/pull/448/commits/2052ee12c0eb63aa73ed88caaa529cd0315b0ffd\nHere we make a slight change so that we pass the entire URL (including domain) to the onUrlChange function. This makes the last 2 failing tests pass, but perhaps is a bit too much leaning towards coding specifically to make tests pass, rather than 'the best code'.\nLet me know which of these three 'levels' you like most, and then I can adapt the tests to the desired level.\nNote these commits only make the existing tests green, there aren't any tests for the actual tree related code yet.. > One small note, but maybe baseUrlParams should be called currentUrlParams (or just urlParams if you prefer brevity), since if I understand correctly they represent the current url params (including a different component/fixture pair that might be selected), as opposed to a subset of url params to extend.\nUpdated to currentUrlParams.. I added some tests to the Tree component:\n\n[x] Renders component and fixture names\n[x] Indents things appropriately\n[x] Renders links and incorporates currentUrlParams\n[x] Allows you to select a fixture\n[x] Allow you to toggle a component\n[x] Highlights search text\n\nPlease let me know if there's anything else you'd like to see or if there's anything you'd change.. > Proxies are part of the user code and thus transpiled. Unless you use CRA and proxies.config.js is not placed inside Babel-whitelisted src. Is this the case?\nYep. From the docs:\n\nCreate cosmos.config.js in your project root\n...\ncreate cosmos.proxies.js (next to cosmos.config.js)\n\nI then checked in https://github.com/react-cosmos/react-cosmos#option-dump whether I could point to a proxy config elsewhere but it only had the outdated proxies attribute so I didn't know what the right attribute to use was. I see now that in the create-react-app section of the docs it mentions proxiesPath.\nThe \"hardships\" about lack of accessible error messages was the main issue though :)\n. I think the problem still exists. If you create a malformed proxy (e.g. export default [c r e a t e R o u t e r P r o x y()];), and then start cosmos, you get a blank starry background, no console errors, and an error buried in terminal scrollback.. Looks good, thanks.. Pushed updates to most of the comments. Still a WIP however, I haven't done the namespacing or pruning code yet.\nI wasn't able to get the tests to work. Please take a look at https://github.com/react-cosmos/react-cosmos/pull/471/commits/8cda92f83aff07d21c7265f6f8229e5bc9b99cb6. I only implemented it for the 'List' test block but that still fails. Thanks.. Just want to double check on this:\n\nIt's likely you'll finish this before I finish my branch, so you can't for now. If you want you can add a prop to ComponentPlayground (either rootPath or something more generic like projectKey) that gets sent to FixtureList, which uses it to construct a localStorage key (eg. cosmos-${projectKey}-tree-expansion-state. The prop would have a default value via defaultProps for now, and when I finish my big refactor the prop will begin receiving different values per project.\n\nWould you prefer each project to have its own top level key in the local storage (which I think is what you have written above, __cosmos__some-project-tree-expansion-state, __cosmos__another-project-tree-expansion-state), or would you prefer us to use the key within the stored object (i.e. just one local storage key, __cosmos__tree-expansion-state, which then points to an object: { someProject: { state }, anotherProject: { state } })?. Just added a commit (https://github.com/react-cosmos/react-cosmos/pull/471/commits/11400a875ce15f14a41797d6671747ec2f3e5bba) with support for namespacing and pruning.\nI refactored out all the persistence related code to a separate module, as it was getting a bit messy in the main FixtureList file.\nThe namespacing stuff is very straightforward, it uses the ${TREE_EXPANSION_STATE}-${projectKey} pattern at the localForage level.\nFor the pruning, we do this when the component mounts. It builds the fixtureTree, then fetches every single path into an array. We then iterate through the items in the saved expansion state, and if any of them are not in the current fixture tree, we delete them. I'm not sure if my fixtureTreeToPathArray function is as elegant as it could be.\nThere's no tests yet, I wanted to get your feedback before doing any more work here.. Just an FYI, that persistence refactor push has made several of the inline discussions in this PR hidden (\"show outdated\" link displays instead). An alternative is to only ever show url and location.state, and only do so if it has a value.\nThis has the benefit of not having two competing 'sources of truth', but the downside of not being able to nicely see location.{pathname,search,hash}.\nIdeally I think we get the sync problem fixed instead. Or alternatively, we have 'read only' parts of the fixture (since location.pathname etc isn't really a prop, it's a function of the url).. I've updated this to just use the url and (optional) locationState fixtures. Have added some basic tests as well.\nNote that we rely on the 'url' npm package. However if I add this as a dependency to https://github.com/react-cosmos/react-cosmos/blob/master/packages/react-cosmos-router-proxy/package.json\nthen I get an error when running yarn install in the root react-cosmos directory:\nBuild failed { Error: spawn webpack ENOENT\n    at _errnoException (util.js:1021:11)\n    at Process.ChildProcess._handle.onexit (internal/child_process.js:192:19)\n    at onErrorNT (internal/child_process.js:374:16)\n    at _combinedTickCallback (internal/process/next_tick.js:138:11)\n    at process._tickCallback (internal/process/next_tick.js:180:9)\n  code: 'ENOENT',\n  errno: 'ENOENT',\n  syscall: 'spawn webpack',\n  path: 'webpack',\n  spawnargs: \n   [ '--config',\n     'packages/react-cosmos-playground/webpack.config.js' ] }\nWhat should I do?. Looks good! :+1:. Thanks for the feedback, have pushed some updates. We're getting close!\nI updated the localForage mock to return null instead of undefined if a key doesn't exist; this matches the library behaviour.\nhttps://github.com/react-cosmos/react-cosmos/pull/482/commits/79b348b350cc976078f36c22d02cd18b68d45676#diff-2b32aef9f8b1bf9ef8191509a3bcccadR7\nI got the existing tests to work using the method you suggested. However it's not something I'm experienced in, so please take a close look to make sure you are happy:\nhttps://github.com/react-cosmos/react-cosmos/pull/482/commits/5011f189b8976248c571f3f3475c988e9ad07111\nI have a failing test because we don't currently mock localForage.setItem. Is there a reason why you didn't mock it (and instead went for an internal method __setItemMocks? (I don't want to waste time trying to write a mock if you already spent some time and realized it wouldn't work for some reason).\nIn the interim, we can't test the updateLocalToggleState method.\nhttps://github.com/react-cosmos/react-cosmos/pull/482/commits/e73c1a62583c84043584efbda19589d2658f3a24#diff-98dd3fe452d5da6f7ac8f0f22e79d300R15. I updated the localForage mock and upgraded the persistence tests.\nI also merged master and implemented persistence for the fixture folders.\nI think we're good to go here(?)!. > Another great contribution from @maxsalven! \ud83e\udd18\n:) Thanks for merging!\n\nPS. I predict we'll want to default to nothing expanded as the default state.\n\nYeah it's a tricky one. I think for first time users, it's nice to see your first ever fixture without having to expand any folders etc. For advanced users, you probably don't want 20 open folders. But now that we persist things, it's not a huge deal for an advanced user to close some folders as a one-off task. \nEither way, a very simple change to make if needed!. Perhaps we want to make the fixture directory color the same as the fixture color (i.e. grayish)?\nMockup:\n\n. Updated the styling and added some tests.. I think if we want to support the full range of proxy options that create-react-app supports, then I think we may need to match the very complicated config done in webpack-dev-server? Not sure if that's correct or not:\nhttps://github.com/webpack/webpack-dev-server/blob/d2fef5803a771a7de7e0f8f218d9c232b7754c05/lib/Server.js#L166\nInstead, I suggest we support a basic \"/api\" -> \"http://localhost:1234/api\" using a config option instead until someone requests something more complicated.\nEither httpProxy: \"http://localhost:1234/api\" or if you want people to be able to specify a different path to proxy: httpProxy: { from: \"/my/api\", to: \"http://localhost:1234/api\" }. It looks like CRA has two options from the end-user perspective:\n\n\nSpecify a proxy string (\"proxy\": \"http://localhost:4000\",), and all unmatched requests will get sent to the proxy, with a single caveat: \"The development server will only attempt to send requests without text/html in its Accept header to the proxy.\" I don't know what impact having all unmatched requests be proxied will have on react-cosmos (do you currently use a catch-all route in express for anything?)\n\n\nYou can specify a full-blown proxy config object: https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/README.md#configuring-the-proxy-manually\n\n\nThe code to parse the proxy in create-react-app is complex:\nhttps://github.com/facebookincubator/create-react-app/blob/2e82ebb3371731a5c4e346f310848ddb23fd0976/packages/react-dev-utils/WebpackDevServerUtils.js#L266\nPersonally I don't think it's worth spending time on flexible proxy setup options now given a future switch to webpack-dev-server. \nWould you be ok with moving forward with this PR and use a config setting for the really simple \"common use case\" whilst we await the move to webpack-dev-server? I.e. we only allow users to proxy from a given path to a given url. Given it's an explicit opt-in feature in CRA, I don't think it's a big deal to not autodetect it and instead ask users to opt-in here as well. I imagine anyone using a proxy is not a beginner to development and won't have major issues to figure out they need to tweak something in cosmos.\nJust to re-iterate my proposal, one extra optional setting in the config:\nOption 1. httpProxy: \"http://localhost:1234/api\"\nOption 2. httpProxy: { context: \"/api\", target \"http://localhost:1234\" }\nand a few extra lines in the source code.\nVery happy to look into (auto-)matching CRA config once we're on webpack-dev-server. Thanks!. Have updated the PR. Any thoughts on the best way to test this?. - [x] Added a brief example in the config options section of the docs.\n- [x] Added a test, but I'm not confident about this so please check.\n- [x] Added flow type in the appropriate place.. https://github.com/react-cosmos/react-cosmos/pull/523. @skidding I don't really understand what's being discussed here, sorry. Is it possible to get a real world style example of what you're talking about? Thanks!. Thanks, I think I actually wanted this because I often have a 'base' object in its own file (within __fixtures__) that all my actual fixtures extend, and often don't actually want this one to show up in the playground.\nThis functionality would be great for that, as well as the aforementioned headless test. However a comment syntax might be more useful for my specific case, as otherwise I will have to make sure to override ui in all my fixtures that extend the base object.. > Wouldn't it be better for you to add /\\/base.js$/ to config.exclude? In time we might standardize this and provide some default exclude pattern.\nI guess I prefer explicitness over config, but this method is totally good enough, thanks.. A related item, if you click on a fixture and get the overlay, then pressing escape doesn't clear the overlay until you click on the iframe. Would be nice to wire up an escape press in the FixtureList to close the overlay as well.. Have pushed some updates.\n\nI think the HoC names would look better with some transparancy rather than being gray (similar to fixture names).\n\nDone.\n\nNo sure about this one, but how about reversing the HoCs order? \ud83e\udd14 The component name is on the left, so it starts from the \"inside\".\n\nPersonally I strongly disagree with this. Given the styling, I mentally read it as \"The component is Component A, and the HOCs are withRouter, connect\". Having the HOCs in reverse would be very confusing to me personally. My brain may be backwards from the majority however!\n\nI don't know if this can be changed, but I imagine most components will have \"...\" in a big app with many HoCs.\n\nThe closest I could get with simple CSS was to have the ellipsis be styled with the HOC style if a HOC exists. I'm not super familiar with Less syntax, so it's possible that there's a nicer way to write the CSS. It's not quite perfect:\n\n\nThe first and the third are correct. The second is 'wrong', as we are using the HOC ellipsis style when the ellipsis belongs to the component name. I don't think it looks too bad, and I don't know how to do a better solution without Javascript. Open to PRs ;).\nUpdate: I actually think this might be the 'best' way to style it. You can tell that a truncated component has HOC information hidden.\nHappy to hear any feedback on the above.\nI'll try wrap up the PR this weekend by fixing the search functionality and adding some tests.. My IDE may not be set up for less, and your lint-staged only processes .js files.\n\nFrom: Ovidiu Chereche\u0219 notifications@github.com\nSent: Saturday, November 18, 2017 10:13:58 PM\nTo: react-cosmos/react-cosmos\nCc: Max Salv\u00e9n; Author\nSubject: Re: [react-cosmos/react-cosmos] Basic extraction of HOCs from component name (#523)\n@skidding commented on this pull request.\n\nIn packages/react-cosmos-playground/src/utils/common.lesshttps://github.com/react-cosmos/react-cosmos/pull/523#discussion_r151838617:\n\n@default-font-size: 14px;\n\n@left-nav-bgcolor: #0c293e;\n @left-nav-bgcolor-darker: rgb(10, 33, 50);\n @left-nav-bgcolor-selected: rgba(255, 255, 255, 0.1);\n @left-nav-color: #a5bed2;\n-@left-nav-color-selected: #f8fafc;\n+@left-nav-color-selected: rgb(248,250,252);\nHmm, Prettier doesn't add spaces after commas?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/react-cosmos/react-cosmos/pull/523#pullrequestreview-77616891, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AD8_Dhd6Gsqp_DKISZSP1nJ6Nl9Rw5sXks5s3uYmgaJpZM4Qi6aC.\n. I decided to move the extraction of HOC names into the data-mapper layer, so it only runs on mount (or if the fixture props change). Having it dynamically calculated in the Tree component meant it had to recalculate whenever you search or toggle anything, and given the data is static, I think it makes more sense to do it 'once' in the data-mapper.\nI wasn't quite sure of a key name, so I used displayData. Thoughts?\ndisplayData: shape({\n    componentName: string.isRequired,\n    hocs: arrayOf(string).isRequired,\n    search: string.isRequired\n  }),\nI also generated a search string for Components, which is  `${componentName} ${hocs.join(', ')}`.trim(). This way if you search for component withRouter, then we will correctly match a component whose actual name is withRouter(Component) (which wouldn't normally match).\nThe matched text highlighting isn't ideal, as we are separately rendering the componentName and the hoc names (as they need to be in different spans), and hence the displayed hoc names (withRouter) won't match the search string (component withRouter) for highlighting purposes, so no highlights show. The searching still works fine, just the matches don't always highlight properly. This is similar to existing issues with fixture names not always highlighting when you included part of the component name in your search. I don't think it's a show-stopper for the PR, and it's not something I currently have much time to investigate.\n@skidding if you're happy with the code as it is, then I'll put some tests together.. Realized I never addressed this:\n@skidding said:\nconst knownHocNames = {\n  connect: 'Redux',\n  withRouter: 'Router',\n};\nconst displayName = knownHocNames[name] || name;\nWhat I actually was talking about was identifying HOC names in order to automatically enable proxies (which may not even be practical, given most of them need some sort of inputs, e.g. url). I think for displaying the HOC names in the UX, we should stick with the actual wrapper names. This is a lot clearer in my opinion.. Thanks @skidding. I think we're ready for merging. Test coverage includes checking that the data structure generated by the data mapper correctly deals with HOCs, and that the Tree renders this data correctly.. Sorry a little bit last minute; is there a possibility to specify a different cosmos.proxies.js file for the test pipeline?. > as far as I know, you can specify a different config file (that sets a different proxy file).\nI'd like to not have to manually specify a special config path each time, but rather just 'all tests use this proxy config'. @xavcz looks cool thanks, definitely some great ideas in there even if we don't want to directly adapt their product.\nI'd like to circle back to a UX/UI discussion once @skidding confirms that this proof of concept PR is 'workable' (/fixable!). Would also be great to know how hard it would be to have Cosmos render to multiple iFrames at once for that Sizzy style 'multiple devices at once' layout.. Thanks @skidding.\nIs there currently active work on the multiple iFrame system? On a related note, I think as part of the 3.0 release you wanted to write some sort of roadmap?\nOther quick question; in the current master, the ComponentPlayground fixtures show a \"Cannot GET /mock/loader/index.html\", is this intentional?\n\nI'll circle back with a UX discussion for this PR later.. Hi all, I've added a few updates to this. Feel free to pull the branch and fire up yarn start:playground.\nFrom a personal perspective with regards to my available time to work on this, I'd like to publish small, iterative updates to this feature, rather than try to do everything possible in one massive PR. \nWhat I've pushed so far is a basic version of \"level 1\". No need for code review or UI review at this stage, please let's look at the API and the UX. I'll polish up the code and UI once that's stabilised.\nThe user can specify in their cosmos config their desired list of responsive devices under the key responsiveDevices. The default value for the moment is:\nresponsiveDevices: [\n    { label: 'iPhone 5', width: 320, height: 568 },\n    { label: 'iPhone 6', width: 375, height: 667 },\n    { label: 'iPhone 6 Plus', width: 414, height: 736 },\n    { label: 'Medium', width: 1024, height: 768 },\n    { label: 'Large', width: 1440, height: 900 },\n    { label: '1080p', width: 1920, height: 1080 }\n  ]\nAny suggestions on a better list of defaults? Is there a standardised list of Android devices we can add? Bare in mind that the user can supply their own list, so our defaults don't have to be perfect.\nWe add a button to toggle the responsive loader:\n\nIf you click on this, you will then see a new menu bar where the component normally shows up:\n\nHere we show all your specified devices. Clicking on these shows your component inside an appropriately sized iFrame. If the desired size does not fit on your screen, we scale the iFrame but keep the exact pixel dimensions. As part of \"level 2\", we will enable toggling scaled or not, but for now, it always makes the device size fit into your screen.\nAny desired UX (not UI) changes to this new menu bar?\nIf you click on \"Custom\", you can then enter a custom dimension for your iFrame:\n\nOne issue here is that we need to default Custom to some specific dimensions (showing 0 x 0 when you click on Custom isn't a nice UX). However, if the value that we default to actually exists in the responsiveDevices list, then clicking on Custom will break. Any ideas here? We could write a loop that starts with e.g. 400 x 400, checks if it exists already, adds a pixel, checks again, etc, but that doesn't seem particularly elegant. Alternatively I could add a forceCustom flag to the fixture.\nWe actually store the desired dimensions in the fixture, and update this when you click on a button in the responsive menu bar:\n{\n  \"responsive\": {\n    \"width\": 400,\n    \"height\": 400\n  },\n}\nAny requests for a different key name than responsive?\nThis means you can also save your desired dimensions in your fixture source code. For example, you might have a component that shows two different things based on css media queries. This way you could save a \"Component Desktop\" and \"Component Mobile\" fixture that automatically set the desired window dimensions for you.\nOne outstanding issue is that the Responsive toggle button (the phone icon next to the full screen icon) stops working once your fixture has the responsive key in it, as we want to guarantee that the responsive mode is showing if you've got this specified in your fixture. Is this a big deal UX wise?\nI think getting these basic issues cleaned up would be a great 'first release' of a responsive mode. @skidding would you agree, or would you want some other features?\nIn terms of future features:\n- Toggle whether or not to scale\n- Allow toggling device orientation (swap width and height values)\n- Allow showing multiple devices on screen at once\n- Anything else you'd like to see?\nThanks all.. > The checkerboard is meant to reveal the parts the component that don't have a background (transparent). With this new additional frame I would argue that the checkerboard pattern should remain inside the viewport, and not around it. We can put a gray color or whatever looks good around it.\nDone.\n\nIn the past I did my best to ensure that the Playground has the same element nesting even when fullscreen or with the fixture editor open, so that the Loader frame DOM element is preserved between transitions and the Loader content never flickers when opening panels or changing fixtures. I noticed that whenever you change a resolution the iframe gets destroyed and added to DOM again. If this is the case, is there a reason for this?\n\nIt's a bit messy as we have to nest 4 divs to get the layout correct for the responsive mode, but this is now fixed. I still see some occasional flicker with some of the more complex fixtures (but I get this in master too). If you look at my 'Demo' fixture, I see zero flicker.\n\nI think this can be solved. The playground knows the serializable parts of the current fixture (and width/height are just numbers, so they will be received). The partial fixture body is received after fixture is selected and after every fixture update. Via fixtureLoad and fixtureUpdate events respectively. And the body of the current fixture is kept under ComponentPlayground.state.fixtureBody. So the new Responsive toggle can actually be driven by state.fixtureBody.viewport (or whatever we decide to call it). In this case, when you press on the Responsive button what should happen is the fixture is changed to contain a viewport field with an arbitrary resolution, and the user picks up from there.\n\nNot sure I follow. At the moment, in order to decide whether to render the responsive tool, we check if the url has responsive=true or if there is a state.fixtureBody.viewport object. So if you define a fixture which has a viewport attribute, the responsive tool is always rendered even if you try to toggle it off via the button (which removes responsive=true from the URL). Is there an obvious solution to this? \nIf we purely have the 'show responsive layout' be a function of the state.fixtureBody.viewport, then when you switch between fixtures, the responsive layout might disappear. Whereas it should be sticky; if I'm in responsive view, switching between fixtures (including those without a specific viewport) should persist whatever responsive layout I've selected.\n\nMaybe an apply button? It seems weird to change as I type. Eg. if the value is 0 and your selection is on the right you can't hit backspace to write a new number. Weird edge case but it's awkward.\n\nI actually quite like the 'change as you type' style. Are you strongly against it? If not, then I can fix the 'can't delete 0' bug separately.. Sorry for the long delay, but I've pushed some updates!\nIt's easier to play around with it yourself, I think the behavior now is very natural. But roughly:\nIf a fixture has a hard-coded viewport, it always opens in responsive mode. I think it would be strange to do anything else, given you've specifically gone out of your way to say this fixture has a specific viewport. You can still subsequently toggle it off by clicking on the responsive icon in the Playground menu.\nIf you switch from a fixture with a hard-coded viewport back to a regular fixture, it opens in non responsive mode.\nIf you manually enable the responsive mode, and switch to another regular fixture, it persists the responsive mode and the dimensions you were last using. These are persisted between browser sessions as well, via localForage.\nIf you manually enable the responsive mode, and then switch to a hard-coded fixture, it will open in the hard-coded dimensions. If you then open a regular fixture, you'll stay in responsive mode, but back to your previously used dimensions. I think this is actually a quite natural feeling behavior, and would definitely be enhanced by a responsive icon in the fixture tree as you mentioned. However at the moment the component playground merely receives fixture paths/names, so this wasn't a 'simple' addition.\nIf you're ok @skidding, I'd love a npm @next release so I can use this with my team and get a bit more feedback before solidifying the behavior with tests.. @skidding \nOne small 'glitch' due to what might be considered a bug in the component playground:\nIf you click on this component, which has a viewport fixture but I've then subsequently toggled it off (you can see forceHide in the url):\nhttp://localhost:8090/?component=ResponsiveLoader%2FDemo&fixture=Demo%20-%20Custom%20Viewport&responsive=forceHide\nIf you then click on a component without a viewport fixture, it should load without the responsive toolbar. For example, click the next fixture in the list, Demo - Disabled.\nHowever, the toolbar flickers on for a fraction of a second.\nThis is due to an issue in the Component Playground. I've included some debug logging which you can enable:\nhttps://github.com/react-cosmos/react-cosmos/pull/539/files#diff-6ef2ca58b0e3b4d2863050e5cf287434R530\nThe problem is, when you select a new fixture, the Component Playground first renders with the new fixture in props, but with the previous fixtureBody in state.\nSo the new fixture gets rendered (without a responsive value in the URL, as we don't persist the forceHide setting between fixture selection), but it is seeing the old fixtureBody, which has a viewport, so it renders the responsive toolbar. Then subsequently fixtureBody gets updated to the correct values, which causes the responsive toolbar to go away.\nIs there a good way to prevent cosmos from re-rendering when props.fixture is out of sync with state.fixtureBody?\nIt's not a huge deal, as it only impacts a very specific scenario: people who do not have the responsive toolbar open, subsequently click on a fixture with a viewport defined, subsequently dismiss the responsive toolbar, and then subsequently click on a fixture without a viewport defined.. Have pushed updates, thanks for the feedback.\n\nLeft a few minor comments that you might want to answer beforehand, and I'm happy to merge and release next. There are no other features in the release pipeline atm and we can tinker with this one until we feel it's ready.\n\nThanks. Does npm allow you to use whatever release tag you like? Maybe we can publish it under @responsive or something too if that's a better option than next.. Hi all, great to have some discussion on this PR!\nA few thoughts:\nMy personal workflow isn't one where I care about multiple screens at once. I'm typically in a 'mobile' context or a 'desktop' context whilst developing, and prefer to be focused purely on one version at a time. Having the two dimensions on screen at the same time, on my laptop along with the Cosmos file directory on the left (I'm very frequently switching between fixtures) would render the desktop view so small as to not be usable (or if it wasn't scaled to fit, I'd have to scroll all the time). Instead, I personally want to see just one view at a time. Just my personal use case, of course others may flow differently!\n\nWe could fix this by tweaking the current full screen mode.\n\nI think switching between fixtures might be a bit clunky in this situation? Exit full screen, exit Chrome responsive mode, pick new fixture, enter full screen, enter Chrome responsive mode.\nI've actually been using this 'responsive cosmos' fork exclusively for the past few months, and it's worked really well for me. I have full access to the file list, and I can toggle into and out of mobile mode with a single click, and very easily switch between device sizes too. \n@skidding if I updated this PR to match the latest master branch, would it still be considered for inclusion? I've got one remaining TODO which is to make a toggle for the 'scaled' mode setting. Full disclosure, there is also one bug, which I will try to fix: Occasionally, upon restarting Cosmos and only if you were in the responsive mode already, then it starts up showing your component in a tiny viewport and upside-down. Reloading the window will immediately fix this. It's a bit of a niche scenario, as I don't think the latest cosmos ever needs to be restarted anymore (as opposed to the older release, which needed a manual restart when adding a brand new component fixture).. > There might be more than one bug to fix\nIndeed, sorry I should have been clearer, 'one bug that I've encountered' :)\n\nDefinitely.\n\nGreat, I'll find some time next week to freshen things up, and take a look at the testing side, which hasn't happened yet.. I've managed to get this up and running on the latest master. Unfortunately the 'dimensions are the wrong size on very first load' issue has been a struggle, will try again soon.. @skidding, as discussed on Slack, if you could take a look at the scaling bug that would be great!\nTo reproduce, simply open a new Chrome window, go to http://localhost:8090 and then select ResponsiveLoader > Demo > Demo - iPhone 6 Viewport. You should see a really tiny component that's upside down (because it has incorrectly calculated the scaling required as * -0.09). If you then hit refresh, everything will be fine for the remainder of your Cosmos session. Thanks.. Thanks @skidding, that was indeed the issue! Fixed in https://github.com/react-cosmos/react-cosmos/pull/539/commits/38e8fa76bcc2dbf1e3fef52085e40b351f7f463a. > Responsive modes can cause overflow to the entire Cosmos UI:\n\nSolution ideas:\nMore favorable: Take both width and height into account when scaling\n\nThe UI should default to scaled, which should never overflow the UI. Only if you explicitly untoggle scaling will we should a component bigger than the available screen space. Is this acceptable?\n\n\nIn the future we'll have a scalable menu approach, but for now I say we increase the left nav's min width to 264px to accommodate the new button\n\nI have now changed\n@left-nav-min-width: @header-button-size * 3 + @default-spacing * 4;\nto\n@left-nav-min-width: @header-button-size * 4 + @default-spacing * 5;\nWhich equated to 254. LMK if you prefer different multipliers.\n\nMaybe put the responsive button in the middle, or first?\n\nHave moved it to the middle.\n\nThe ComponentPlayground fixtures you added need to be updated with props.options.platform: 'web'.\n\nDone.\n\nHow do you think the current approach compares to the existing one?\n\nI'd like to explore this, but the first hurdle is that ComponentPlayground seems to only receive a string based map of ComponentName: Array<fixtureName>; in order to have the URL include viewport params, we'll need to have access to the actual fixture objects rather than just the string names I imagine? Is this going to be difficult?. Update: this only happens if your configureStore method mutates the initial state that it receives. Which I appreciate you theoretically shouldn't do, but in my mind, clicking on a fixture should 100% reset everything. So maybe not quite a bug, but a caveat.. This looks very cool, especially being able to get real API responses if you want to (I can see myself having a \"LIVE\" version of many fixtures, or perhaps having a visual UI toggle somewhere in another proxy that toggles all fixtures that depend on network requests to either get a real response or serve the fixture response).\nApologies for not having contributed much to the GQL discussion of late; I've only played with it as a toy concept so far, but in a few weeks will be starting to bring GQL into our production system. At that point I'll have more concrete feedback. My initial reaction is that I'd still like to mock the actual GQL server response, but let's see where my thinking goes once I've actually used this in a 'real world' scenario.. Great update, thanks @xavcz.\nQuestions:\n\n\nIf you have a schema in your proxy config (\"client is overwritten by schema\"), does this mean you can't simultaneously have fixtures that access live data? \n\n\nFor the fixtures with directly mocked responses, perhaps it would be better to somehow use the query name as the key under resolveWith (or maybe we can just call the root key apolloMocks and then under that you have { PostsForAuthor: { author { ... } } }). This means you could mock a component which performs multiple different queries.\n\n\nIs there a way to mock the 'loading' state? \n\n\n@skidding \n\nWhat would be the difference between this and mocking via fetch or XHR proxy?\n\nYou could indeed directly mock the responses at this level, however all requests go to the same endpoint (with the query itself as part of the POST payload), so dealing with a component that performs multiple different queries would be a bit unwieldy (you'd have to write code to manually inspect the requests, which isn't super hard, but probably belongs in the apollo proxy :).. In the 'direct mocking' approach, would also be cool if you could pass in a function that accepts the query's variables:\n```\napolloMocks: {\n  PostsForAuthor: (authorId) => ({\n    id: authorId,\n    firstName: \"Max\",\n  })\n}. Not sure it helps anyone at all, but just to share what my current solution is.\nI have a very simple proxy:\n```\nimport React from \"react\";\nimport { ApolloProvider } from \"react-apollo\";\nimport apolloClient from \"gql/apolloClient\";\nconst apolloClientInstance = apolloClient();\nparent.APOLLO_CLIENT = apolloClientInstance; // eslint-disable-line\nexport default () => {\n  const ApolloProxy = (props: ProxyProps) => {\n    const { nextProxy, fixture } = props;\n    const { value: NextProxy, next } = nextProxy;\nconst nextProxyEl = <NextProxy {...props} nextProxy={next()} />;\n\nif (!fixture.apollo) {\n  return nextProxyEl;\n}\n\nreturn (\n  <ApolloProvider client={apolloClientInstance}>\n    {nextProxyEl}\n  </ApolloProvider>\n);\n\n};\nreturn ApolloProxy;\n};\n```\nand then I use it in conjunction with the fetch proxy to mock the response:\n{\n    component: HomeScreenContainer,\n    name: \"Mocked Response\",\n    url: \"/?date=2018-02-01\",\n    apollo: true,\n    props: {},\n    fetch: [\n      {\n        matcher: \"/api/graphql\",\n        response: { data: mockResponse },\n      },\n    ],\n  },\nor I also have 'Live' fixtures that talk to the actual API:\n{\n    component: HomeScreenContainer,\n    name: \"Live - June 01, 2017\",\n    url: \"/?date=2017-06-01\",\n    apollo: true,\n    usesAPI: true,\n    props: {},\n  },\nI haven't experimented with any sort of advanced mocking, but if this proxy could satisfying these two simple use cases, I would be happy to switch to it.. I'd prefer to use the fixture.props.children syntax personally.\nHere's the relevant source in the React codebase BTW, everything ends up in props (a ReactElement has no special children field):\nhttps://github.com/facebook/react/blob/3c977dea6b96f6a9bb39f09886848da870748441/packages/react/src/ReactElement.js#L202\n. @andreypopp I tried using the function you defined, and it works great for type checking (although VSCode shows the errors in the component definition rather than in the fixture, but not a huge deal). However, any fixture I have wrapped in createFixture no longer shows up in the correct place in the file tree on the left side of Cosmos. Have you had this issue?\n@skidding, if I run yarn print-fixture-files then it simply shows \"components\": [] for the impacted components.. @skidding not something I have bandwidth for at the moment, but perhaps making the responsive iframe resizable by dragging on an edge (just as if it were a window) might be a nice feature (the tab at the top would then switch to 'Custom' with live display of your iframe size whilst you're resizing it).. Hi Jannes, I helped author some of the key based code. We already explicitly set the key to \u201cmocked\u201d, specifically to provide a stable snapshot. There is a test here:\nhttps://github.com/react-cosmos/react-cosmos/blob/master/packages/react-cosmos-router-proxy/src/tests/stable-snapshots.js\nWould you be able to provide a failing test to help better understand the problems with the current implementation? Thanks!\n. Not sure how to fix this on my end. Can this be specified via a .prettierrc file (which you should probably have anyway?). Looking at other implementations of tree renderers, I saw that some actually expect an object as their root level input { name: \"Root Directory\", children: [..] } so I wanted to be explicit that we don't have a single parent root directory, we have an array of them. Happy to change to nodes if you prefer not to be so explicit however.. Done. Done, except we now have an XO issue due to circular function calls. Done. I guess you don't want a global 'no-use-before-define' rule override, so I added // eslint-disable-next-line no-use-before-define. Is there an XO specific syntax I should use instead?. Done. Unfortunately there's another Prettier formatting issue. Not sure how you want to deal with this (now and going forward).. \ud83d\udc4d . Did you want this to go in this PR, or will you create a separate one for it?. Done. Done. For this feature, we'll also want to make sure we don't accidentally copy over fixture from currentUrlParams when generating hrefs and handling clicks in the Tree component.. @skidding I haven't really used much local storage; is this a good pattern to call setState in the constructor?. Done. We want to default to true, and that would default to false.. Done. currentState can be undefined (if it's your first time using the system), so I added some checks for that too.. It's impossible to actually ever see this skeleton, as loading the saved expansion state from indexedDB/localstorage takes only a few milliseconds, so you only get the very tiniest briefest flash of the placeholder. I'd suggest returning null is good enough here.. Makes sense, done.. Ah good point, I was accidentally trying to fix a different issue here.\nAlso cleaned up a little bit more, localForage actually also returns null, not undefined, so you can't directly use default parameters when passing the returned values in to functions.. Good idea, thanks.. Whilst location.state would typically be an object, I think it can actually be anything. There's nothing in the official docs, but it works perfectly fine with e.g. a string. The flow-typed libdefs also indicate any:\nhttps://github.com/flowtype/flow-typed/blob/master/definitions/npm/react-router_v4.x.x/flow_v0.53.x-/react-router_v4.x.x.js#L9. This is already built in to the middleware library:\n[Cosmos] No webpack config found, using defaults\n[HPM] Proxy created: /api  ->  http://localhost:4001\n[Cosmos] See you at http://localhost:8989/. I think you can do typeof PENDING | typeof MISSING. @skidding trailingComma: true in Prettier will prevent lines like this showing up in diffs.. Seems like it does exist (but out of spec): https://stackoverflow.com/questions/3740700/there-is-no-attribute-allowtransparency\nHowever we don't need it anyway, is just a legacy IE 8 thing. Deleted.. I'd definitely like to get to it before the feature is released. Have added a comment.. Ah, maybe you have a good solution for this. When componentDidMount fires, this.scalableDiv.getBoundingClientRect() returns a 0x0 DOMRect. But if we wait 1 second, it then appears to have a dimension. I'm not entirely sure what's going on, any ideas would be useful.\nscalableDiv is the div that takes up the entirety of the usable space underneath the responsive header all the way to the bottom of the window. We use the size of this to determine how much we need to scale the iFrame wrapper by to fit into this scalableDiv all at once.. Thanks, have removed. What do you think of that API btw for allowing users to configure their own viewport defaults that show up in the responsive menu/header?\nI'd like to also allow users to define the viewport in the fixture using the label rather than having to memorize dimensions, e.g.:\ncomponent: MyComponent,\nprops: {},\nviewport: \"iPhone 5\". ",
    "raycar5": "I can give it a try in a few days. ",
    "omarzion": "I ran into a similar issue and came up with a possible solution.  Do you think this would be worth turning into a proxy?\n```\n// utils.js\nimport React from 'react';\nexport default Component => props => (\n  \n)\nclass Wrapper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = Object.keys(props.__controllers).map(key => (\n      { [key]: (...args) => this.setState(props.__controllerskey) }\n    )).reduce((acc, cur) => ({...acc, ...cur }), {});\n  }\nrender() {\n    const { Child, __controllers, ...rest} = this.props;\n    let props = {...rest, ...this.state};\n    return \n  }\n}\n```\nAnd using it (it currently uses __controllers prop)\ncontrollers are functions that return state updates for the wrapper component that are then spread to props on your component\n```\nimport React from 'react';\nimport Wrap from './utils';\nconst Input = props => \nexport default {\n  component: Wrap(Input),\n  props: {\n    value: '',\n    __controllers : {\n      onChange: e => ({ value: e.target.value })\n    }\n  }\n}\n```. I got it working as a basic proxy.\nhttps://www.npmjs.com/package/react-cosmos-stateful-proxy\nI'm not sure where to begin with getting it to update the editor.\nAny feedback or improvements would be greatly appreciated.. ",
    "charliedotau": "I'm new to Cosmos - frustrated with Storybook - and I find it very promising. It's essentially exactly what I've been looking for.  So, props (pardon the pun) to all involved.\nNothing I'm going to say below is, per se, new.  My aim is simply to emphasise the issue and hopefully encourage the community to redouble their efforts to bring about a resolution.\nDealbreaker\nWith respect, I find this issue - that the Cosmos user interface only shows a subset of all a component's props - to be a major design flaw and a total deal breaker.      \n\"Cosmos forces us to define sane component inputs\".  But how sane is an input that can't be seen?     \nAs long as this issue persists, the user experience of Cosmos will be greatly diminished.      \nVisibility is key\nVisibility is key here.  As such, whilst imperfect, the \"yellow band\" solution would greatly improve the user experience, especially if it could call out those props that couldn't be rendered in the editor and show what the values of those props are.\nI'm time poor at present, and an occasional coder, so  I'm not able to provide a PR, and nor would you want me to!  \nMay I suggest we cange the tag from I have a dream to we need a solution\nLove your work\nThanks. This works as expected now.  Thanks very much.. ",
    "Izhaki": "@skidding \n\nNotice that if your local state or Redux state changes, the fixture editor is updated with the new state.\n\nIs this the really working for reduxState? \nWith the following fixture:\n```javascript\nimport Brain from '../containers/Brain';\nexport default {\n  component: Brain,\n  reduxState: {\n    neurons: {\n      I1: {\n        shouldFire: () => true,\n        charge: 0,\n        x: 50,\n        y: 100,\n      },\n      P: {\n        shouldFire: () => true,\n        charge: 0,\n        x: 200,\n        y: 50,\n      },\n    },\n  },\n  props: {\n    neurons: {},\n  },\n};\n```\nAnd:\njavascript\nconst mapStateToProps = state => ({\n  neurons: state.neurons,\n});\nI can't see anything redux or props on the editor:\njson\n{\n  \"props\": {\n    \"neurons\": {}\n  }\n}. Indeed this was the issue.\nI am soooo happy you've explained that (and also just realised this was mentioned in previous comments).\nThanks!. Some apps and many web site use mouse proximity to the client edge and scroll-in the hidden panel if the mouse is, say, 5 px from the client edge.\nYou may have seen this with Webpack-Bundle-Analyser.\nJust an idea.. ",
    "NLincoln": "I have \njs\n  ignore: [\n    /(.*)\\.spec\\.js$/\n  ]\nin my config already \n. Ninja edited, I had that in there in the first place :sweat_smile: . ",
    "rohannair": "So I'm trying this as well, and the ignoring does not work properly. \ncosmos.config.js\n```javascript\nmodule.exports = {\n  componentPaths: ['src/components'],\n  containerQuerySelector: '#root',\n  webpackConfigPath: 'react-scripts/config/webpack.config.dev',\n  publicPath: 'public',\n  ignore: [\n    /.test.js$/\n  ]\n}\n```. ",
    "dan-weaver": "I like the proposal here.  I don't really see why fixture level and config level mocks can't coexist!\n\nBy the way, if your schema is not written in JS or doesn't live \"nearby\" your client app, you can still mock it easily on the client using introspection:\n\n@xavcz is this currently actually possible?  The current proxy just takes typeDefs.  I had to modify the default createAplloProxy to take a prebuilt schema that we create manually using graphql-tools  in our case since our .NET server houses our schema definitions.   I might be missing something but  maybe you can convert from an actual schema back into typeDefs?  Either way I thought it seemed more natural for the proxy to receive a schema object instead of raw typeDefs. @skidding thanks works nicely and thanks for the test case!. Hey there. How can I help? This looks good to me so far.. It's a lot like my hand rolled solution I'm currently using but yours is more robust :).  \nquestion\n\nActually, I'm thinking about removing the local mocks part!\n\ndoes that mean your removing the ability to do something like this?\nhttps://github.com/react-cosmos/react-cosmos/pull/552/files#diff-7062272aa1857f29f5d4365b65596ef5R9\n Maybe I'm not following, but I find it really valuable to be able to mock at the fixture level!. for future readers, this works well:\n```javascript\nvar createRazzleConfig = require(\"razzle/config/createConfig\");\nvar razzleWebpack = require(\"webpack\");\nmodule.exports = {\n  webpack: (config, { env }) => {\n    config.module.rules = createRazzleConfig(\n      \"web\",\n      \"dev\",\n      // the following object is your razzle config.  if you have one, require it here.\n      {},\n      razzleWebpack\n    ).rules;\n    return config;\n  }\n};\n```. Something I ran into recently in my \"hand rolled\" version of this.  You probably are going to need to paramaterize dataIdFromObject at some point.. Oh I see though your allowing caller to include it's own client. \ud83d\udc4d . ",
    "Timer": "https://github.com/react-cosmos/react-cosmos/pull/484. > The runtime error overlay doesn't auto close after a HMR update that fixes the problem. Is this the expected behavior? It probably is because of the X close button and it makes sense for runtime errors to stick because they might have corrupted something global, but I wanted to make sure this is how it works in CRA as well.\nIt is the expected but not the best behavior.\nIn CRA we force a page reload on next save after a runtime error because of global corrupted state, so we should make that the default behavior here (doesn't do that currently).\n\n... componentDidCatch ...\n\nI'm not on the React team so take what I say with a grain of salt.\nIMO, componentDidCatch is meant for a production use so that your users aren't left with a broken application.\nIn development, using react-error-overlay is going to give a much better development experience -- you could always close the overlay and look at your componentDidCatch page for testing purposes too.\n\nIt seems like react-error-overlay publishes ES modules, which is at the moment ... It's the only real obstacle in merging this. Ideas welcome!\n\nWe can dual publish a CJS and ESM version (based on package.json toggle). Can you open an issue on CRA for this please?. > Actually I think it's best not to hard reload in this case. \nTotally your call. \ud83d\ude04 \nIf you'd like, you can open another issue for support for something like dismiss-runtime-error that way it can be automatically closed.. I've rebased this so we don't fall behind -- did you want to tackle https://github.com/facebookincubator/create-react-app/issues/3354 or do you want me to take care of it? \ud83d\ude04 No rush.. Whoops, sorry! We just released react-error-overlay@3 yesterday which changed all of this. \ud83d\ude04\nI'll update this PR tonight and see where it puts us. Sorry for the run-around.. :shipit: . @skidding in react-error-overlay@2 doing import ErrorOverlay from was actually different than import * as ErrorOverlay from because we were working with real ES modules and not compiled ones.\nI'm not sure what happens with webpack's UMD build, but it's more future proof this way (we may ship two versions instead of UMD).\nSo doing import ErrorOverlay resulted in strictly the default, when we really wanted the named exports (which requires import * as ErrorOverlay).. My pleasure! Let me know if you ever need help upgrading in the future.. Mainly because in our use case it doesn't make sense to dismiss. Happy to accept a pull request exporting it.. Sorry about this new line, I didn't notice it.. ",
    "dedan": "Hey @skidding, thanks a lot for the fast and super helpful response. That's exactly what I needed!\nThanks a lot, I'm closing the issue.. ",
    "mbohgard": "After latest install I get a TypeError: (0 , _reactCosmosConfig2.default) is not a function when running cosmos. Everything is -rc.3 except react-cosmos-webpack which is 3.0.0-beta.8 (latest available on npm).\nEdit: Actually, I noticed the webpack package is gone. Switched to react-cosmos@next and now it's working again :). Another question:\nI see now that Cosmos is grouping some component under folders, though how does the logic work? Both FormInput (with ControlledFormInput) and FormButtonGroup (with ControlledFormButtonGroup) is in the Molecules folder but only the input component is ordered under Molecules?\n\n. It's ok, private stuff renamed :)\n[\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Atoms/Button/dark.tsx\",\n    \"components\": [\n      {\n        \"name\": \"Button\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Atoms/Button\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Atoms/Button/default.tsx\",\n    \"components\": [\n      {\n        \"name\": \"Button\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Atoms/Button\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Atoms/Button/hollow.tsx\",\n    \"components\": [\n      {\n        \"name\": \"Button\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Atoms/Button\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Atoms/Button/icon.tsx\",\n    \"components\": [\n      {\n        \"name\": \"Button\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Atoms/Button\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Atoms/Button/monochrome.tsx\",\n    \"components\": [\n      {\n        \"name\": \"Button\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Atoms/Button\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Atoms/Button/success.tsx\",\n    \"components\": [\n      {\n        \"name\": \"Button\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Atoms/Button\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormButtonGroup/default.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormButtonGroup\",\n        \"filePath\": null\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormButtonGroup/preselected.tsx\",\n    \"components\": [\n      {\n        \"name\": \"ControlledFormButtonGroup\",\n        \"filePath\": null\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormButtonGroup/selection.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormButtonGroup\",\n        \"filePath\": null\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormInput/default.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormInput\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Molecules/FormInput\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormInput/defaultValue.tsx\",\n    \"components\": [\n      {\n        \"name\": \"ControlledFormInput\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Molecules/FormInput\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormInput/disabled.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormInput\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Molecules/FormInput\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormInput/invalid.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormInput\",\n        \"filePath\": null\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormInput/password.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormInput\",\n        \"filePath\": \"/app/packages/cosmos/@private/common-components/components/Molecules/FormInput\"\n      }\n    ]\n  },\n  {\n    \"filePath\": \"/app/packages/cosmos/__fixtures__/Molecules/FormInput/valid.tsx\",\n    \"components\": [\n      {\n        \"name\": \"FormInput\",\n        \"filePath\": null\n      }\n    ]\n  }\n]. Sure thing!\n/app/packages/cosmos/__fixtures__/Molecules/FormInput/invalid.tsx:\n```\nimport {\n  Validity,\n  FormInput\n} from \"@private/common-components/components/Molecules/FormInput\";\nexport default {\n  component: FormInput,\n  padded: true,\n  props: {\n    autofocus: true,\n    value: \"john_doe\",\n    label: \"Username\",\n    type: \"text\",\n    validity: Validity.INVALID,\n    invalidText: \"Username is already taken\"\n  }\n};\n```\n/app/packages/cosmos/__fixtures__/Molecules/FormInput/disabled.tsx:\n```\nimport { FormInput } from \"@private/common-components/components/Molecules/FormInput\";\nexport default {\n  component: FormInput,\n  padded: true,\n  props: {\n    label: \"Username\",\n    type: \"text\",\n    disabled: true\n  }\n};\n```. Ah ok, sounds plausible. Thanks!. @skidding Wow, that was fast work ;) Works like a charm!\nIf you only have one folder inside a fixtures folder with component fixtures (i.e fixtures for just one component) Cosmos won't group fixtures, but I guess that is by design?\nClarification:\nAtoms\n    Button    <--- won't group under Atoms\n        default\n        disabled\nMolecules\n    FormInput    <--- will group under Molecules\n        default\n        invalid\n    FormButton    <--- will group under Molecules\n        default\n        disabled. Right now, for fixtures, it's not too important. Is it possible to use other extensions for fixtures than .js?\nAbout getting it to work with with our current config, I just get a\nGET http://localhost:8989/loader/index.html 404 (Not Found)\nin the console and only the animated cosmos background's showing up. Here's the config I try to use which worked with React Storybook:\n```\nconst path = require(\"path\");\nconst CopyWebpackPlugin = require(\"copy-webpack-plugin\");\nconst translations = require(\"./translations/src/dplay.json\");\nconst I18nPlugin = require(\"i18n-webpack-plugin\");\nmodule.exports = {\n  resolve: {\n    extensions: [\".ts\", \".tsx\", \".css\", \".svg\", \".js\", \".jsx\"]\n  },\n  module: {\n    rules: [\n      {\n        test: /.tsx?$/,\n        //        include: path.resolve(__dirname, \"../../\"),\n        loader: \"awesome-typescript-loader?transpileOnly=true\"\n      },\n      {\n        test: /.css$/,\n        //        include: path.resolve(__dirname, \"../../\"),\n        loaders: [\n          \"style-loader\",\n          \"css-loader?module&localIdentName=[local]-[hash:base64:3]&importLoaders=1\",\n          \"postcss-loader\"\n        ]\n      }\n    ]\n  },\n  plugins: [\n    new I18nPlugin(translations, {\n      failOnMissing: true\n    })\n  ]\n};\n. Nice, no more error. But Cosmos can't find any components (all components has the .tsx extension). I've added a fixture using the docs as a guide. How do Cosmos find components?. Ok I see. Actually when I installed Cosmos I got the 3.0 beta 3. Now I'm running next and I now understand why I get a\nUsing componentPaths config is deprecated. Please consider upgrading.\n``\nwhen starting Cosmos. All my components are in a package outside of the Cosmos package (this is a Lerna repo and Cosmos integration is it's own package). So, when I thought I needed thecomponentPathssetting I set the value:[\"../common-components/components\"]`. I guess Cosmos can't detect components outside of it's own folder?\nSo, I'm running \"@next\" version and have the component imported in my fixture. Still no components found though.. Awesome, that did it! Now it's finding the components that have fixtures. \ud83c\udf89 \nIs it possible though, like we talked about, to have fixtures in another extension than .js? Now JSX won't work since my test for React files is /\\.tsx?$/.. Absolutely, I'll open a PR with the fix :)\nThanks for the quick help Ovidiu! Looking forward to start converting Storybook stories to fixtures \ud83d\ude0b. Yep, works great :). Actually it does... :P But I need to read up on that.. don't really understand what's going on. How can I, from my fixtures, choose what proxies to use? I mean if I don't want that proxy for all my fixtures for ex.. Yes I realised the padding prop. Ah, that's awesome. Looks great :) Nice API! ;P. Now I'm just missing some TypeScript types.. ;P. Right, nice, here are the proxy TypeScript types needed for this specific case:\n```\nexport type LinkedItem = {\n  value: Item;\n  next: () => LinkedItem;\n};\nexport type ProxyProps = {\n  nextProxy: LinkedItem>;\n  fixture: { [s: string]: string };\n  onComponentRef: Function;\n  onFixtureUpdate: Function;\n};\n```. Yes, I guess in this case \"any\" could be an option, though it hurts every time you set an any type.... \ud83d\ude05\nMicrosoft owns the organization @types on npm and you have to do a yarn add @types/react (if the lib doesn't provide types built in), but when you have, React and the React types share it's namespace so the types are automagically available like that for convenience \ud83d\ude0e. ",
    "jeznag": "Was this done? I get\nERROR in ./src/RequestData/StepThreeSelectExportParameters/index.fixture.ts\nModule not found: Error: Can't resolve './index' in '/Users/jeremynagel/dev/energylink-project/react-components/data-exporter2/src/RequestData/StepThreeSelectExportParameters'\n(where the file is ./index.tsx). Also if cosmos.config.js is renamed to cosmos.config.ts, it fails to recognise it. \nI'm running create-react-app with react-scripts-ts. Makes sense :). @xavczen I've set up a minimal reproduction here: https://github.com/COzero/cosmos-apollo-test\nI tried logging the cache. It seems to only contain the data for the mutation but not the original query.\n{\"$ROOT_MUTATION.saveExportDataRequest({\\\"input\\\":{\\\"availableOptions\\\":{},\\\"exportParameters\\\":{\\\"dateRange\\\":{\\\"endDate\\\":\\\"2019-04-02T00:00:00.000Z\\\",\\\"startDate\\\":\\\"2018-04-02T00:00:00.000Z\\\"}},\\\"selectedMeasurements\\\":[],\\\"selectedMeters\\\":[]}})\":{\"NoResponse\":null,\"__typename\":\"saveExportDataRequest\"},\"ROOT_MUTATION\":{\"saveExportDataRequest({\\\"input\\\":{\\\"availableOptions\\\":{},\\\"exportParameters\\\":{\\\"dateRange\\\":{\\\"endDate\\\":\\\"2019-04-02T00:00:00.000Z\\\",\\\"startDate\\\":\\\"2018-04-02T00:00:00.000Z\\\"}},\\\"selectedMeasurements\\\":[],\\\"selectedMeters\\\":[]}})\":{\"type\":\"id\",\"generated\":true,\"id\":\"$ROOT_MUTATION.saveExportDataRequest({\\\"input\\\":{\\\"availableOptions\\\":{},\\\"exportParameters\\\":{\\\"dateRange\\\":{\\\"endDate\\\":\\\"2019-04-02T00:00:00.000Z\\\",\\\"startDate\\\":\\\"2018-04-02T00:00:00.000Z\\\"}},\\\"selectedMeasurements\\\":[],\\\"selectedMeters\\\":[]}})\",\"typename\":\"saveExportDataRequest\"}}}. Thanks @xavczen! Would it be worth adding an example like this to the docs? I can submit a PR if so. I can't see any examples of tests in there, only fixtures.. Thanks for the tips. Here's what I came up with: https://medium.com/energylinkapp/testing-graphql-mutations-using-apollo-cosmos-becab1ea9ac9. Ah oops sorry for wasting your time. Thanks for explaining that :). ",
    "jozsi": "Done via #535 - still depends on the new version of create-react-app. Updated react-error-overlay via #574 . @maxsalven - as far as I know, you can specify a different config file (that sets a different proxy file).\n// Or point to a custom config path\nconst { mount } = createContext({\n  fixture,\n  cosmosConfigPath: '/path/to/my/special/config';\n});. @skidding - done. Looking for a quick PR.\nTests will fail until react-error-overlay gets published.. Done. Interestingly, some tests (unrelated to this PR) don't pass neither on my machine, nor Travis.\nNote: when REO gets published (and will be versioned as v3.1.0), we need to revert commit 57e5feb . Nice catch! I've set dismissRuntimeErrors as defaultProps, passes now \ud83d\ude01 . @maxsalven - you might want to take a look at my wrapper proxy. I wonder if we could make it support more use cases, like this. Any ideas/contributions are welcome!. HOC/Decorator support has landed in react-cosmos-wrapper-proxy v1.2.0. ",
    "bugzpodder": "ok fixed cosmos-config with the correct root element. Yeah containerQuerySelector was added automatically for me, but my app had a custom element.  instead of #root, it was #react-root.  As you mentioned modifying containerQuerySelector and updating it to the correct id fixed it for me.. Thanks, just want to confirm this behavior.  I will see if I can create a PR for updating the doc.. ",
    "viktor-izettle": "After aliasing to preact-compat instead of preact this problem goes away.\nSo anyone else experiencing this problem. Just add\njs\n{\n  // ...\n  resolve: {\n    alias: {\n      react: \"preact-compat\",\n      \"react-dom\": \"preact-compat\"\n    }\n  }\n  // ...\n}\nto your webpack config\nand run yarn add preact-compat or npm i -S preact-compat. ",
    "eltonio450": "Hello :)\nAny update on this topic ? This looks super useful, but maintaining a fork of this branch is a bit overkill.\nWhat is needed to merge with master ? \nThanks ! . Thanks ! Works like a charm :). ",
    "mpachin": "@skidding, @maxsalven I think I can drop my five cents about this functionality.\nPersonally I can't get the idea of re-implementing something which already was solved by web devtools, and it was solved perfectly. Storybook for example offers lots of re-implemented functionality of chromes/firefox devtools and I don't get it, and I believe root of the problem is in its addons system.\nInstead of thoughtful and careful steps towards DX (which is the main concern of discussed kind of tools), people start doing something in hope this 'something' will be used by others.\nPlease look at the main reason of creating Sizzy:\n\nI was already using react-storybook to switch between all the variations of a component, but I still had to switch between 12 devices just to see the changes in all of them. And that\u2019s how it all started.\nHow about making a tool where you can preview multiple screens at once as you work?\n\nThis is not devtools re-implementation, this is multiple-screens-problem elimination. This is the main reason this tool was created.\nI strongly believe that if we should have such functionality in react-cosmos, then it needs to be multiple-screens-problem elimination. For specific resolutions development browsers devtools already matches ideally.. I think you right about the easier solution you described above, this is exactly how I see solution for issue.\nSince we already cleared node_modules in allPaths variable:\njs\nconst allPaths = await globAsync('**/*', {\n    cwd: rootPath,\n    absolute: true,\n    ignore: '**/node_modules/**'\n});\n... we cant lay on exclude field from our config, because if we'll clear node_modules in allPaths there will be no point in clearing it again in\njs\nif (excludeList.some(excludePattern => filePath.match(excludePattern))) {\n    continue;\n}\nI think what we need to do is to add new variable fileMatchIgnore as you described it, with fallback on **/node_modules/** by default.. Yes, I am \u263a\ufe0f I'll start working on it in nearest time. Sure, here are logs:\n```\nPS C:\\Users\\misha\\Desktop\\test_clone_react-cosmos\\react-cosmos> yarn webpack --config packages/react-cosmos-playground/webpack.config.js\nyarn run v1.6.0\n$ C:\\Users\\misha\\Desktop\\test_clone_react-cosmos\\react-cosmos\\node_modules.bin\\webpack --config packages/react-cosmos-playground/webpack.config.js\nHash: e0bfc9ef7a4331c9dc0a\nVersion: webpack 4.2.0\nTime: 3326ms\nBuilt at: 2018-5-23 10:04:10\n       Asset       Size  Chunks             Chunk Names\n    index.js    2.1 MiB    main  [emitted]  main\nindex.js.map   2.31 MiB    main  [emitted]  main\n  index.html  182 bytes          [emitted]\nEntrypoint main = index.js index.js.map\n[./node_modules/css-loader/index.js?modules&importLoaders=1&localIdentName=[name]__[local][hash:base64:5]!./nodemodules/less-loader/dist/cjs.js!./packages/react-cosmos-playground/src/utils/global.less] ./node_modules/css-loader?modules&importLoaders=1&localIdentName=[name][local]___[hash:base64:5]!./node_modules/less-loader/dist/cjs.js!./packages/react-cosmos-playground/src/utils/global.less 406 bytes {main} [built]\n[./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {main} [built]\n[./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 519 bytes {main} [built]\n[./packages/react-cosmos-playground/src/index.js] 1.32 KiB {main} [built]\n[./packages/react-cosmos-playground/src/static/FiraCode-Light.woff] 128 KiB {main} [built]\n[./packages/react-cosmos-playground/src/static/cosmos.png] 36.9 KiB {main} [built]\n[./packages/react-cosmos-playground/src/static/stars.png] 48.9 KiB {main} [built]\n[./packages/react-cosmos-playground/src/utils/global.less] 1.45 KiB {main} [built]\n[./packages/react-cosmos-playground/src/utils/page-title.js] 420 bytes {main} [built]\n[./packages/react-querystring-router/index.js] 262 bytes {main} [built]\n[./packages/react-querystring-router/src/router.js] 414 bytes {main} [built] [failed] [1 error]\n[./packages/react-querystring-router/src/uri.js] 1.33 KiB {main} [built]\n   [0] multi whatwg-fetch ./packages/react-cosmos-playground/src 40 bytes {main} [built]\n    + 208 hidden modules\nERROR in ./packages/react-querystring-router/src/router.js\nModule parse failed: Unexpected token (69:6)\nYou may need an appropriate loader to handle this file type.\n|     const ComponentClass = getComponentClass(params);\n|     const props = {\n|       ...getComponentProps(params),\n|       // Always send the components a reference to the router. This makes it\n|       // possible for a component to change the page through the router and\n @ ./packages/react-querystring-router/index.js 8:17-40\n @ ./packages/react-cosmos-playground/src/index.js\n @ multi whatwg-fetch ./packages/react-cosmos-playground/src\nChild html-webpack-plugin for \"index.html\":\n     1 asset\n    Entrypoint html-webpack-plugin for \"index.html\" = index.html\n    [./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 509 bytes {html-webpack-plugin for \"index.html\"} [built]\n    [./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 519 bytes {html-webpack-plugin for \"index.html\"} [built]\n        + 2 hidden modules\nerror Command failed with exit code 2.\ninfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.\n```. I've just tested building project in VM / Ubuntu 18.04 LTS\nEverything is fine including tests, react-cosmos-playground build went ok\nAlso I checked build on another windows laptop (third in a row), the problem repeats\nIt seems that described issue relates only to windows machines. I'll try investigate further on that after this issue, if by then someone else does not fix this\nFor now I can work with VM. @skidding Just tested on my win10x64 machine, build works :heart:. Corrected \ud83d\ude0a. @skidding just checked it in my project, everything works! :smiley::sparkles:. Faced the same problem since my projects config files placed outside of rootPath.\nHere we can see that proxies taken from rootPath/proxiesPath.\nIn case similar with mine:\nprojectFolder\n\u2502\n\u2514\u2500\u2500\u2500 configFiles\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500 react-cosmos\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500\u2500 cosmos.config.js\n\u2502       \u2502\n\u2502       \u2514\u2500\u2500\u2500 cosmos.proxies.js\n\u2502   \n\u2514\u2500\u2500\u2500 src\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500\u2500 ...\n...\nyou should have config look like this:\njs\nmodule.exports = {\n    rootPath: '../../src/',\n    proxiesPath: '../../config/react-cosmos/cosmos.proxies',\n}\nThen proxies path will be resolved like path.join(rootPath, proxiesPath), so you can skip placing cosmos.proxies.js in src directory and instead keep it in config.. @skidding first of all thank you for your quick and thoughtful responses and your work on such great tool :heart: \nI think this is wonderful idea :+1:  This definitely will made dev experience more joyful.\nMaybe sequence of checks should look like this?\n1. Check for errors first - if developer don't use proxies at all and no errors were found we shouldn't explicitly search for cosmos.proxies file\n2. If errors were caught - we may check if cosmos.proxies file placed near cosmos.config and display a message for user with content you described\n3. If cosmos.proxies weren't found near cosmos.config I feel that it would be great to display a thorough message in which:\n    * mentioned appropriate default dir to place cosmos.proxies\n    * mentioned role of rootPath and proxiesPath and that second one is relative to the first. @skidding Thank you for pointing this out, I'll try to use this info and look for solution in nearest time.\nClosing this pull request for now.. ",
    "mpeyper": "+1 for this.  Now that I have a few fixtures up and running with proxies (including redux), it feels odd to see a message suggesting I should set up a redux proxy.  It's not a huge issue, but it's the first question I get when I try to show it off to others on my team.\nPerhaps I will take a crack at this if I can find the time (not likely to be soon so if anyone else wants to have a go, please don't hesitate).\nI have a few ideas for how to go about this:\n\nA toggle in the config as @qooplmao suggested\nFlagging a fixture as a default view as displaying it instead of the welcome screen\nProviding a custom component (likely as a configurable path with sensible default) to render as the welcome screen\n\nAny thoughts or ideas are welcome.. I think markdown is a great idea.. I haven't used any of them myself, but I've been looking into some for this.\n\nreact-markdown - Most popular and provides heaps of options\nreact-remarkable - A wrapper around Remarkable, a popular and highly flexible markdown renderer.  Also, it's made by @acdlite so it's got a good pedigree\nreact-markdown-renderer - Another wrapper around Remarkable. Just an update on this.\n\nI've been able to replicate the existing welcome screen but instead of being fixed output in the component it is loading it in from an external markdown file.\nIssues:\n1. The markdown file is not being watched to trigger an page refresh when it change\n    - Manually refreshing the page shows the change\n    - I'm not sure what that means for exporting the page\n2. Remarkable does not appear to have the ability to add classnames to the rendered elements, so the styling needs to be applied element type instead\n    - My less is a bit rusty, but I think that can overcome by applying a class to the container and nesting the styles under that?\nQuestions:\n1. How much styling should we provide to the rendered elements?\n2. Is the only screen we want to allow an override for the WelcomeScreen when \"You're all set!\", or are there other screens to consider?\n. remarkable-classy allows the markdown to specify the classes it wants, but not for us to apply a class to all elements of a type, e.g.\n```md\nThis is my title\nthis is my text\n```\nwill always generate\nhtml\n<h1>This is my title</h1>\n<p>this is my text</p>\nThere does not appear to be a way to have it output\nhtml\n<h1 class=\"header\">This is my title</h1>\n<p>this is my text</p>\nwithout changing the markdown itself.\nAs I said though, I think this can be quite easily overcome by wrapping the markdown elements in a div and using that to scope the style.  I have to admit that less (and css in general) is not my strong suit, so whatever I do will likely be either wrong, or can be improved.. Personally, my ideal welcome screen would be no welcome screen at all.  By this, I mean what I want to do from the index is make is as simple as possible to select a fixture to view.\nI propose that perhaps, if no errors are found and fixtures are present, the side bar should be given the full page width, with a larger search box and a more real estate devoted to displaying the list of fixtures.\nThoughts?. @skidding, sorry it's taken so long to respond, I only just noticed this.\nI don't actually use the static export feature and use cosmos as a purely dev time tool.  I have deployed exported storybooks for testers and non-devs to use, but that is usually for component library style projects (storybook is easier to to create lots of variations of a single component).\nFor me, the installation onboarding flow was close to perfect.  The hints cosmos gave to where the issues were and what steps I needed to take to get my first fixture up and running was super useful.  I wouldn't change that at all.\nOnce I had my first feature, my focus shifted to the component I was developing and I very rarely returned to the welcome screen so any messages it would be showing at that time might as well not exist.  If I encountered any issues at dev time the react error overlay does a great job of helping there (particularly with React 16's improved errors).  When the component is done, it's integrated in the app and I move on the next one and repeat.\nI have yet to find someone who struggles to navigate the side menu and/or filter the list for what they are looking for, either devs and non-devs, so I'm not sure what is needed in the onboarding flow for using it other than making the list more prominent.  In this respect, my post-installation requirements for the welcome screen are much the same.  I usually only hit it because I've begun development on a new or existing component and just need to quickly find the fixture for it.\nDoes that help with any of your questions?. ",
    "qooplmao": "Yeah, I think the markdown idea is a winner.\nTo be honest, originally I was going for a customizable WelcomeScreen but the single boolean seemed to be the simplest to implement so I went that way. It doesn't really seem fair to me to bring up an idea without working out a possible route, but the Markdown approach wasn't even in my periphery.. There is a react-remarkable PR for adding plugin support (or you could temporarily duplicate the class from the PR), which would mean you could use remarkable-classy for class names.\nThe only really screen I'm specifically bothered about being able to change is the WelcomeScreen as that's the only part that user are really forced to see/deal with. Every other page requires a conscious choice on the users behalf to visit so I see it more as something they should deal with (that being said, the WelcomeScreen could be used to add an explanation for whatever sticking points an individual user base has). I do concede that I am thinking very selfishly in this respect, though.. > Long term we could add a persistence dimension to onboarding screens, meaning we should be able to click \"Got it\" and not see it again\nWhere do you imagine the persistent state would be stored? If it's in the local storage then users would run into the same issue as my current one, in that they would have to deal with a bunch of a screens that they had no idea about.\nWhat about just have the custom WelcomeScreen on cosmos-export? The onboarding screens are only useful to those that are developing components, whereas by the time it's been exported it's kind of past the point of onboarding.. To be honest I'm looking at things from 2 different environments.\nFor developers (when running as a live system) there could be hints/tips/information that could be used for onboarding and notifying them about any updates. This could be, as you said, controlled using persistence so that devs could turn hints/tips off and on or skip through them.\nFor user/browsers (after it has been exported), I would assume people would use this as a demo, so the simple \"Components are on the left. Search box on the top. For more info about using this system see [docs url]\".\nI see a lot of benefit in the WelcomeScreen reminding devs of what is available in the system, especially when there are updates that may not be immediately obvious, but once the system has been exported those messages become less beneficial.. ",
    "sergeydt": "Hi @skidding ,\nYes, with 3.0.0 it works fine.\nWhen I run cosmos through npm script on 3.0.0 < version < 3.1.1 I got the following error:\nbash\n(node:97764) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): TypeError: Cannot read property 'split' of undefined\n(node:97764) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.\nand with \njs\nprocess.on('unhandledRejection', (reason, p) => {\n  console.log('Unhandled Rejection at: Promise', p, 'reason:', reason);\n});\nI got this trace\nbash\n[Cosmos] Using webpack config found at config/webpack.config.dev\n[Cosmos] Serving static files from public\n[Cosmos] See you at http://localhost:8989/\nUnhandled Rejection at: Promise Promise {\n  <rejected> TypeError: Cannot read property 'split' of undefined\n    at module.exports (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/commondir/index.js:25:17)\n    at getCommonComponentsDir (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/react-cosmos/lib/server/embed-modules-webpack-loader.js:172:34)\n    at Object._callee$ (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/react-cosmos/lib/server/embed-modules-webpack-loader.js:125:35)\n    at tryCatch (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/regenerator-runtime/runtime.js:62:40)\n    at Generator.invoke [as _invoke] (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/regenerator-runtime/runtime.js:296:22)\n    at Generator.prototype.(anonymous function) [as next] (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/regenerator-runtime/runtime.js:114:21)\n    at step (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/babel-runtime/helpers/asyncToGenerator.js:17:30)\n    at /Users/sergeydt/work/temp/edc-web-sdk/node_modules/babel-runtime/helpers/asyncToGenerator.js:28:13\n    at <anonymous> } reason: TypeError: Cannot read property 'split' of undefined\n    at module.exports (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/commondir/index.js:25:17)\n    at getCommonComponentsDir (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/react-cosmos/lib/server/embed-modules-webpack-loader.js:172:34)\n    at Object._callee$ (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/react-cosmos/lib/server/embed-modules-webpack-loader.js:125:35)\n    at tryCatch (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/regenerator-runtime/runtime.js:62:40)\n    at Generator.invoke [as _invoke] (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/regenerator-runtime/runtime.js:296:22)\n    at Generator.prototype.(anonymous function) [as next] (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/regenerator-runtime/runtime.js:114:21)\n    at step (/Users/sergeydt/work/temp/edc-web-sdk/node_modules/babel-runtime/helpers/asyncToGenerator.js:17:30)\n    at /Users/sergeydt/work/temp/edc-web-sdk/node_modules/babel-runtime/helpers/asyncToGenerator.js:28:13\n    at <anonymous>\nHave just checked and it seems has been fixed in recent release v3.1.1. So I think the issue should be closed.. (still anyone who contributes here may consider such usage option to not brake things in future releases). Thanks!. ",
    "llimllib": "Ummm, I was sure that was what I did, but the process of recreating the issue for this ticket caused it to work. Very weird.. I definitely restarted the server many times before. Very strange. :shrug:. ",
    "cfnelson": "@xavcz Looks amazing! \ud83d\udd25 Can't wait to see this merged & released!!! I gave a quick read through and loving the Docs & examples! Can I do anything to help move this along?. I noticed that the real-error fixture exhibited the same behaviour as the mock-simple-error where the thrown error being logged to console after switching between fixtures. Odd that the ApolloError isn't getting flushed to the console until the fixture changes.\nSee the GIF below:\n\n. I ran into this issue like @xavcz stated. My own fault as I assumed the default config would work after reading the documentation and having solved some other babel fun issues (using @babel v7.0.0-beta.42 atm \ud83d\ude4c ). \n@xavcz saved me by suggesting I needed to create a webpack config with the main difference being to remove the exclude: /node_modules/ line. \nWould be happy to assist on the PR for this. \ud83d\udc07 As well as updating the docs to explain to others who may encounter this.\n. ",
    "rohit-ravikoti": "yep!\nhttps://github.com/iinsta/create-react-app/blob/6a5b7e5e47294785bb1e9dd04d50f68394a8e9bf/packages/react-scripts/template/README.md#advanced-configuration. ",
    "andreypopp": "Also this is a requirement for #560 I believe.. > But the thing is children are special in React. They are the 3rd argument to React.createElement, after type and props. That said, after pausing to dig a bit more on this it seems there's no other difference past element creation.\nI strongly disagree with that. There are syntactical difference but API symmetry between definition and consumer site is a much stronger invariant and this is what I'm talking about.. > But still I have to wonder, what happens when you do <Component children={<span>YO</span>} /> instead of <Component><span>YO</span></Component>? \nThey are the same for React. As I said that's just syntactical sugar. I don't think Cosmos should built an API around that.. > Is that a working example?\nYes. I've copy pasted this from my fixture code.\n\nI've been wondering if there's a way to have a generic Fixture type that can be used like this: fixture: Fixture and it would know to expect fixture.props to match the Props type of Component. But I don't have enough experience with Flow/TS to understand if that's possible.\n\nThe problem with this proposed API is that the type annotation with Fixture is optional while using createFixture guarantees that fixtures will be type checked.. ",
    "evilj0e": "It supported by default, i think.\nI found that you should specify path to webpack config from root. And it works.. ",
    "mmacaula": "@evilj0e interesting it works for you.  I wonder if your environment is different than mine.  Our config was a function that accepted env like from here and we did different things based on being prod or test.  My experience was that env was not being passed correctly.  Were you using env as well? \n. Yep worked for me on my function webpack config!  Sorry it took awhile to confirm.  Thanks!!!. @kfern I was able to get it running with redux form.  My case is a little different. I'm trying to test a single <Field> component but maybe this would work for you?  Here's an example test fixture and test. \n```\nimport { reduxForm } from 'redux-form';\nimport FieldToTest from '../fieldToTest';\nconst formName = 'absVal';\nconst fieldName = 'textField';\nexport default {\n  component: reduxForm({ form: formName })(FieldToTest),\n  props: {\n    name: 'textField'\n  },\n  reduxState: {},\n  formName,\n  fieldName,\n};\n```\nThen in my test, I had to do a couple of 'interesting' things, that may or may not be fully necessary.  For instance to get redux form to trigger its actions, i first had to focus it then 'blur' it.  I made a helper function to do this.  I also made a helper to get my redux form state out:\n```\nconst setInputVal = (input, val) => {\n  input.simulate('focus');\n  input.simulate('change', { target: { value: val } });\n  input.simulate('blur');\n};\nconst getStoreValue = () => get('reduxState').form[fixture.formName].values[fixture.fieldName];\ndescribe('when setting input value', () => {\n  let input;\n  beforeEach(() => {\n    input = getWrapper().find('input').first();\n  });\n  it('should set value in store', () => {\n    setInputVal(input, '123');\n    expect(getStoreValue()).toBe('123');\n  });\n});\n```\n. no credit due here!  Just trying to help with a simple example.  @skidding is awesome though! :) . Thank you for the quick and informative reply (as well as your work)!  \nI came about getRootWrapper by looking through the source... :)  Using getWrapper to set props gives me this error message: ReactWrapper::setProps() can only be called on the root  from enzyme, which makes sense as an error message based on my knowledge of React. \n\nBut are you interested in re-rendering the component from scratch, or it going through the componentWillReceiveProps lifecycle path? \n\nMy initial thought for the test was to do the lifecycle path, since my component does respond that way (and theoretically should be tested that way too), but I could use some guidance on the former. \n Should I just clone my imported fixture with a new set of props, then create a new context and then test from there or is there a simpler way?\n. closing this due to workaround found in #583. Hmm, that didn't seem to work for me.  I did get a re-render with the updated prop but got no component* lifecycle methods hit.  I thought maybe it was because creating a new context was the issue so i tried doing a mount(false) on ctx1 but that also didn't work. \nEdited to add more info below:\nIt seems the whole component is re-rendered from scratch, even though no unmount was called.  \nconst { mount, getRef } = createTestContext({ fixture });\nmount();\nconst ref1 = getRef();\nmount(false);\nconst ref2 = getRef();\nconsole.log( ref1 === ref2); // this is false\nI get the same result when creating a second context (as you suggested).\n. Of course!  And it's safe because every proxy passes the fixture to the next, eventually getting to the component under test.  That works for me, thank you! \nNow on to improving the dev experience.  Would be happy to help if you like.  One idea i had was to expose a set method in the returned context that would immutably set any value in the fixture, then call getRootWrapper().setProps.  Though that could be more annoying when all you want is to just set the props, so a special setProps (as you mentioned before) could easily provide an API shortcut while still exposing a set method for updating other parts of the fixture. \nconst { mount, set, setProps } = createTestContext({ fixture });\nawait mount();\nset('reduxState', { storeVal: 'foo'});  // we can update any piece of the fixture\nset('props', {foo: false})  // meh \nsetProps({foo : false}) // much better IMO\nLet me know what you prefer and I can work on it if you like, or I could help with some documentation on it.\n. > I think set should completely override the specified part of the fixture, whereas setProps would be more natural to extend the previous fixture props with the new ones passed.\nYes completely agree\n\nThis opens up the discussion of whether or not we want an additional replaceProps, or an additional extend=true argument to set and setProps.\n\nIMO, a replacing set and a merging setProps would handle most use cases.  I'd suggest you don't do it unless you get a lot of requests for it.  Your call though, happy to do whatever you prefer. \nI've been pretty busy lately but hope to get to this in the next week! . Wouldn't calling mount again destroy and re-build the component from scratch with the updated reduxState?   That would work for the UI where you do that all the time but for testing, if i want to test lifecycle methods, I'm not sure it would.  \nIf we wanted to do lifecycle testing, we'd have to get the redux-proxy to somehow replace the whole store with the passed in state somehow.  Would it be possible to have the redux-proxy implement its own lifecycle method to determine that the fixture prop for reduxState has changed and therefore it should dump the current store, recreate it with the new state and pass that updated state down to child proxies?  Or am I completely missing something?. I'm working on the redux proxy now (with tests), I'll also try to take a stab at looking through the other renderers and adding TODOs or just fixing them.  Would you prefer smaller PRs for each of those as I find them? . @skidding Sorry it's been awhile, had some personal things going on...  I got around to implementing the updated redux proxy and all looks good, but it doesn't actually work.  My naive attempt was to just recreate the store with the new state, but that doesn't quite work as the connect component grabs the store off context and holds onto it for its lifetime, which makes sense of course, stores don't just get replaced in redux apps.  This means the connected component under test still maintains the reference to the old store and there's not an effective way of updating it. \nSO that means the initial approach won't quite work, and I suspect for some other proxies it won't work either if they use their context value the same way.  \nThe only other approach I can think of is a bit crazy but will work.  You'll have to tell me if this is worth pursuing.  It basically involves replacing the reducers of the application with one that returns the updated fixture state, dispatching a random action to replace the whole store, then putting the old reducers back.  Something like this:\n```\n  // redux-proxy code\n  componentWillReceiveProps(nextProps) {\n      const oldReduxState = this.props.fixture[fixtureKey];\n      const newReduxState = nextProps.fixture[fixtureKey];\n      if (oldReduxState !== newReduxState && options.reducers) { // options.reducers is key \n        this.reloadStore(nextProps);\n      }\n    }\nreloadStore(props) {\n  const fixtureReduxState = props.fixture[fixtureKey];\n  this.store.replaceReducer(() => fixtureReduxState);  // a reducer that replaces the state with new fixture state\n  this.store.dispatch({type: '@@react-cosmos-replace'});  // dispatch random action to run reducer\n  this.store.replaceReducer(options.reducers);  // put old reducer back \n}\n\n``` \nThis approach requires that if users want to be able to set (or update) the state, they need to provide as an extra option their reducers (or first argument of createStore) to the proxy.  Otherwise its just not possible as far as I can tell.  I was able to do this in my project's code base by exporting the reducers alongside the configureStore function.\nThoughts?  It's a bit hacky but I'm not sure of another way.  . Yep that works!  At least in my use case.  Do you think it'll work in all cases?  I'm looking at the source for connect here.  To me, it seems this way relies on the connect component being rebuilt when we invalidate the tree.  I could just not understand the way react renders the tree though.  . Yep, i've got it up and going but need to add a couple more tests, thanks for the help!  Stay tuned!. Changes made, I combined the commits into one to keep a single 'feature' commit... . ok, the mode was my fault, I was checking if mode was development and then using production if not, which I'm guessing cosmos is sending in test or something else.  That fixed that. \nI tried it again this morning and now its no longer continuously rebundling.  So problem went away...  I suspect that since i was in production mode for webpack it was dumping the built file and cosmos was perhaps watching that build dir and triggering a rebuild?  Either way it seems fixed now.  Thanks for the quick response as always!. ",
    "rhysforyou": "Yeah what I want is something like\njsx\n<Route path={fixture.route} component={fixture.component} />\nBut instead what seems to be happening is something like\njsx\n<Route path={fixture.route} render={routerContext =>\n  <CosmosWrapperStuff {...routerContext}>\n    <fixture.component />\n  </CosmosWrapperStuff>\n}/>\nI think the suggested config is probably a good solution if we're not willing to change the current behavior.\n  . ",
    "kfern": "Beginner failure: Enzyme was not installed\nI installed it with:\nnpm i --save-dev enzyme enzyme-adapter-react-16\nNow I get:\n``\nEnzyme Internal Error: Enzyme expects an adapter to be configured, but found none. To configure an adapter, you should callEnzyme.configure({ adapter: new Adapter() })before using any of Enzyme's top level APIs, whereAdapter` is the adapter corresponding to the library currently being tested. For example:\nimport Adapter from 'enzyme-adapter-react-15';\nTo find out more about this, see http://airbnb.io/enzyme/docs/installation/index.html\n at validateAdapter (node_modules/enzyme/build/validateAdapter.js:14:11)\n at getAdapter (node_modules/enzyme/build/Utils.js:76:36)\n at new ReactWrapper (node_modules/enzyme/build/ReactWrapper.js:96:44)\n at mount (node_modules/enzyme/build/mount.js:19:10)\n at Object._callee$ (node_modules/react-cosmos-loader/lib/create-context.js:112:27)\n at tryCatch (node_modules/regenerator-runtime/runtime.js:62:40)\n at GeneratorFunctionPrototype.invoke [as _invoke] (node_modules/regenerator-runtime/runtime.js:296:22)\n at GeneratorFunctionPrototype.prototype.(anonymous function) [as next] (node_modules/regenerator-runtime/runtime.js:114:21)\n at step (node_modules/babel-runtime/helpers/asyncToGenerator.js:17:30)\n at node_modules/babel-runtime/helpers/asyncToGenerator.js:35:14\n at Promise.F (node_modules/babel-runtime/node_modules/core-js/library/modules/_export.js:35:28)\n at node_modules/babel-runtime/helpers/asyncToGenerator.js:14:12\n at node_modules/react-cosmos-loader/lib/create-context.js:173:21\n at Object.mount (node_modules/react-cosmos-loader/lib/create-context.js:97:12)\n at Promise.resolve.then.el (node_modules/p-map/index.js:46:16)\n at process._tickCallback (internal/process/next_tick.js:103:7)\n\n? welcomes logged in user by name\nContext wrapper hasn't been created yet. Did you mount() the context?\n at Object.getWrapper (node_modules/react-cosmos-loader/lib/create-context.js:74:13)\n at getRootWrapper (node_modules/react-cosmos-test/lib/enzyme.js:32:39)\n at getWrapper (node_modules/react-cosmos-test/lib/enzyme.js:43:41)\n at Object.<anonymous>.test (src/components/Welcome.test.js:9:10)\n at Promise.resolve.then.el (node_modules/p-map/index.js:46:16)\n at process._tickCallback (internal/process/next_tick.js:103:7)\n\n```\nWhat should be the minimum configuration? \nIs something missing in the example?\n. @razagill Works. Thank you!! . @razagill @skidding \nWould be possible a simple and complete example?. @skidding I want to try cosmos with redux but I have not started yet. In the repo there is no example. @skidding Done. https://github.com/react-cosmos/react-cosmos/issues/576. Thanks :-)\n. @razagill Thanks!! I guess next week I'll do some tests. I'll comment in https://github.com/react-cosmos/react-cosmos/issues/576. @mmacaula Thanks!!  I guess next week I'll do some tests. This PR https://github.com/react-cosmos/react-cosmos/pull/586 is a first basic redux form example. All suggestions are welcome.\n. @skidding @mmacaula Thanks again for building this great tool! \ud83e\udd47. @skidding You are right. I will change the PR. @skidding I have updated the PR but I am not sure that I have done it correctly. If the yarn.lock file is correct, the PR is finished. @skidding \nOf course :-)\nhttps://github.com/kfern/ToyboxDnD/tree/feature-react-cosmos\nToybox DnD is a very basic example of React Drag and Drop\nApp works fine:\n\nBox can not find the drag and drop manager in the context:\n\n. @skidding Thank you. It works perfectly :1st_place_medal: \n\n. ",
    "razagill": "You need to setup the adapter for enzyme before you run any tests. Put the following in your setupTests.js file.\n```\nconst enzyme = require(\"enzyme\");\nconst Adapter = require(\"enzyme-adapter-react-16\");\nenzyme.configure({ adapter: new Adapter() });\n``. @skidding damn that was it. I just had to wrap it in another component and passonSubmitinstead ofhandleSubmit. Thanks a lot :). @kfern sure, I already posted my example code in the issue so taking from there here are the two changes you need to make.\nTheonSubmit` hook needs to be passed as props to your form component, since redux-form will wrap that component this will mostly be any other component that is using the form component.\nTaking the above example calling SimpleForm would then be something like:\n<SimpleForm onSubmit={(val) => console.log(val)}/>\nAnd remove the hook within SimpleForm\n<form onSubmit={(val) => console.log(val)}> <-- remove this prop hook\nHope this helps you.. ",
    "RPDeshaies": "I'ved tried using\nmount({\n  proxies: [],\n  fixtures: {\n    \"test\": [someFixture,someFixture,someFixture]\n  }\n});\nBut it doesn't work so I guess there's something else that needs to be done. Hey, @skidding the fixtures are now indeed visible inside the list but when I try to load them, I have errors in my console saying:\nMyComponent.tsx:16 Uncaught TypeError: Cannot read property 'prototype' of undefined\n    at isComponentClass (MyComponent.tsx:16)\n    at PropsProxy.render (MyComponent.tsx:16)\n    at finishClassComponent (MyComponent.tsx:16)\n    at updateClassComponent (MyComponent.tsx:16)\n    at beginWork (MyComponent.tsx:16)\n    at performUnitOfWork (MyComponent.tsx:16)\n    at workLoop (MyComponent.tsx:16)\n    at HTMLUnknownElement.callCallback (MyComponent.tsx:16)\n    at Object.invokeGuardedCallbackDev (MyComponent.tsx:16)\n    at invokeGuardedCallback (MyComponent.tsx:16)\nAnd\n```\nMyComponent.tsx:16 The above error occurred in the  component:\n    in PropsProxy (created by StateProxy)\n    in StateProxy (created by ErrorCatchProxy)\n    in ErrorCatchProxy (created by Loader)\n    in Loader\nReact will try to recreate this component tree from scratch using the error boundary you provided, ErrorCatchProxy.\n``. Ok yeah you are right. I didn't know I needed to use this since if I don't provide a name for the fixture, I do not need to call thedefault`.\nThanks for all the help.\nAny plans on adding that to the doc ?. >@RPDeshaies Thanks for your detailed analysis!\nAlways happy to help !\n\nI've been thinking about earlier today actually. :)\n\nHahaha nice !\n\nplugin API on the server side, extracting the current webpack support into a plugin and surely creating a core plugin for Parcel.\n\nThat is a very good idea..\nAlso as a side note, thanks for this awesome project. We use it on a day to day basis at my job now.\nMaybe for the time being, since those APIs are not ready, we could include more doc on how to spin up react cosmos with your own integration. \nBecause when you guys released the newest version of the app, I had to check the code diff in the source code of that project to realized that you added a platform and plugin.responsivePreview property to the object of mountPlayground that crashed react cosmos when undefined ! \ud83d\ude05 . > But if you're interested in setting this up I'd be more than happy to create the repo and give you write permissions!\nI'm down :) It's still pretty fresh in my mind it should not take me too much time.\nI'll still create a PR to have your feedback if you don't mind !\n. First PR is there for the curious ones\nhttps://github.com/react-cosmos/parcel-example/pull/1\nSorry for the delay :) . ",
    "cal0610": "I've tried using react-cosmos but we couldn't figure it out with the documentation. I really liked what it can provide though!. @skidding \nI've got it set up and working on a very very dumb component. I could change the props and state on http://localhost:8989 and see the component changing accordingly.\nI've had too many issues within a short period of time and thought it wasn't worth using, here are a few:\n\nCreating fixtures requires server restart - would've been nice to know this was the case rather than thinking something was wrong\nSetting up react-cosmos\nI'm using react-boilerplate so I just created cosmos.config.js on project root as per instruction:\n\n// cosmos.config.js\nmodule.exports = {\n  containerQuerySelector: '#app',\n  webpackConfigPath: './internals/webpack/webpack.dev.babel',\n  globalImports: ['./app/global-styles.js']\n};\nI changed  the application background in global-styles.js and saw the background also change on react-cosmos, great!!\nWhen I tried creating a fixture from my component that uses 3rd party css like blueprint, the css was not applied on cosmos. I then made this change as per documentation:\nglobalImports: ['./app/global-styles.js', './app/main.scss']\nbut this did not work on cosmos even though my component was styled on localhost:3000/.\nI have my css import defined on app.js:\nimport '@blueprintjs/core/dist/blueprint.css';\nWhat I ended up having to do was to add the same import statement in my component just so cosmos picks up the css. \nNot sure what the issue might be, moving on...\n\nFollowed the enzyme testing as per doc but there are far too few examples to really use it in our project\n\n```\nimport createTestContext from 'react-cosmos-test/enzyme';\nimport fixture from './fixture';\nconst { mount, getWrapper } = createTestContext({ fixture });\nbeforeEach(mount);\ntest('renders hello', () => {\n  expect(getWrapper().text()).toContain('Hello World');\n});\n```\nAlso, I'd like to find out more information about createTestContext, mount, and getWrapper. How is this different from shallow from enzyme? What can you call on getWrapper? How do you check the state from the mounted fixture? As per doc, you can capture state changes through get('reduxState'). Ok...time to set up redux proxy.\n\n\n\n```\n// cosmos.proxies.js\nimport createReduxProxy from 'react-cosmos-redux-proxy';\nimport configureStore from './configureStore';\nconst ReduxProxy = createReduxProxy({\n  createStore: state => configureStore(state)\n});\nexport default [\n  ReduxProxy\n  // ...other proxies\n];\n```\nThe doc doesn't specify where to place this file, I placed it in project root same as the other config anyway. Next, let's create our fixture with the state from redux. Searching through the docs, this is all I could find:\n// __fixtures__/example.js\nexport default {\n  component: MyComponent,\n  // An empty object will populate the store with the initial state\n  // returned by reducers. But we can also put any state we want here.\n  reduxState: {}\n};\nI then tried to google examples but didn't find anything that pointed me to anything solid.\n:(\n. @skidding Thanks !! I appreciate your feedback! I'll give this another crack tomorrow after a coffee.  . Hi @skidding \nThanks for your feedback, I've got it working now :) \nI've found a problem with using redux-saga with this. My component is using like this:\n```\nconst withConnect = connect(null, mapDispatchToProps);\nconst withSaga = injectSaga({ key: 'home', saga });\nexport default compose(\n  withSaga,\n  withConnect,\n)(InvoiceCreateForm);\n```\nAnd this is the error I get on the console:\n\nUncaught ReferenceError: regeneratorRuntime is not defined\n    at eval (saga.js:7)\n    at Object../app/containers/Supplier/InvoiceCreateForm/saga.js (main.js:995)\n\nI don't suppose there is a fix for this is there ? :(\nEDIT: I found the solution from here \nNow I'm going to move on to using the testing facilities...!\n@skidding  I don't really understand why I have to include an unused 'import regenerator-runtime ' in my saga.js file...\n. @skidding \nI've failed miserably on testing :(\nThe example on the documentation does not work for me unfortunately.\nThis is my component:\n```\nimport React from 'react';\n// eslint-disable-next-line react/prop-types\nconst Status = ({ status, received, created, completionKpi, assignedTo }) => (\n  \nStatus\n\nStatus:\n{status}\n\n\nReceived:\n{received}\n\n\nCreated:\n{created}\n\n\nCompletion KPI target:\n{completionKpi}\n\n\nAssigned to:\n{assignedTo}\n\n\n);\nexport default Status;\n```\nThis is my test:\n```\nimport React from 'react';\nimport createTestContext from 'react-cosmos-test/enzyme';\nimport fixture from '../fixtures/index.fixture';\nconst { mount, getWrapper } = createTestContext({ fixture });\ndescribe('renders correctly', () => {\n  beforeEach(mount);\nit('test', () => {\n    console.log(getWrapper().text());\n    expect(getWrapper().text()).toContain('Status');\n  });\n});\n```\nAnd finally, this is the lovely error I get:\n\nTypeError: Cannot read property 'prototype' of undefined\n\nThis component is not connected or anything so I would've expected this to work straight away :(\nThanks in advance~. @skidding - not exactly, sorry .. \nThis is my fixture:\n```\nimport Status from '../index';\nexport default [\n  {\n    component: Status,\n    props: {\n      status: 'Completed',\n      received: 'No',\n      created: '21st March 2018',\n      completionKpi: '2 hours',\n      assignedTo: 'Calvin',\n    },\n  },\n];\n```. @skidding \nThank you! That solved the problem.\nNow there was no way I could've known that right? ;p\n. @skidding \nNo problem, I'm keen to help contribute when I get some time :)\nBtw, would you mind sharing your config for the saga regenerator runtime on globalImport?\nThis is what I have right now...:\nglobalImports: [\n    './app/global-styles.js',\n    './node_modules/@blueprintjs/core/dist/blueprint.css',\n    './node_modules/@blueprintjs/datetime/lib/css/blueprint-datetime.css',\n    './app/main.scss',\n    './node_modules/react-select/dist/react-select.css',\n    './node_modules/redux-saga/dist/redux-saga.js',\n  ],\nEDIT:\nI need another coffee...\n**'./node_modules/regenerator-runtime/runtime.js',**\n\nThat's what I needed -_____-. @xavcz i had no problem referencing css file from node modules, this could be something else... Indeed. Let me know how you go im happy to share my config you you need . ",
    "mysterycommand": "Hey! This works! Thanks for the super quick turn around! \u2764\ufe0f. ",
    "JannesV": "This happens to me in non-test context aswell. If I supply a state or change the state in the component itself or in the code window it doesn't seem to update. If I disable the redux proxy however, all seems to work fine.\nPassing disableLocalState to the redux proxy doesn't work either. . @begedin I've come across this same issue too. I've fixed it by replacing this \nif (isMockedFixture) {\n      this.client.link = createFixtureLink({\n        apolloFixture,\n        cache,\n        fixture: this.props.fixture\n      });\n    }\nwith:\nif (isMockedFixture) {\n    this.client = new ApolloClient({\n        cache,\n        link: createFixtureLink({\n            apolloFixture,\n            cache,\n            fixture: this.props.fixture\n        })\n    });\n}\nIt seems like apollo doesn't like to get it's link changed once initiated.\nDo note this is a quick and easy fix and does not take in account if the user has supplied it's own client.\nTo fix that the API would need to be changed so the user would supply an options object and not a client.. @skidding This one can be closed up now I believe.. @skidding Gonna fix this tonight. Made this PR between projects at work.\n@xavczen Thanks!. Meanwhile took the time to update the readme.. @maxsalven One of my test breaks for some reason on the key changing in the snapshot. As you said the first entry is mocked but when there are multiple entries only the last one changes. Why did you opt to set it to mocked instead of omitting it completely ?\n\"entries\": Array [\n                      Object {\n                        \"hash\": \"\",\n                        \"key\": \"mocked\",\n                        \"pathname\": \"/\",\n                        \"search\": \"\",\n                        \"state\": undefined,\n                      },\n                      Object {\n                        \"hash\": \"\",\n                        \"key\": \"95psso\",\n                        \"pathname\": \"/1\",\n                        \"search\": \"\",\n                        \"state\": undefined,\n                      },\n                    ],. Seems like a good idea, changed ;). ",
    "dpearceglic": "I'm seeing the same behavior as @JannesV. If I define both state and reduxState in my fixture, local state for the component is not updated even with disableLocalState: false set in createReduxProxy in cosmos.proxies.js. I've only been using Cosmos for 24 hours so I may be missing something basic, please forgive me if I am. The silver lining of this issue is that it showed me clearly that I wasn't encapsulating the responsibilities of both my dumb-component (local state expected to update with no knowledge of redux) and my smart-component (container).  . ",
    "alexvpickering": "Thank you for the quick response. Yeah the docs confused me - I thought it was a custom file extension.. Hey @skidding \nThank you - yes that resolved the immediate issue with jquery. It did however raise another issue in my actual code-base related to datatables (again, finding $.DataTable in React, cosmos, but not cosmos tests):\nTypeError: window.$(...).DataTable is not a function\nI've reproduced the issue in the example repo if you're willing to take a look again.\nThank you for helping me to get started with cosmos. I'm finding it very useful so far.. Ah that works now! Thank you so much. Wasn't aware of the distinction between the testing environment and the browser.. ",
    "MattReimer": "Ah, yes. That would be cool. We can continue this conversation on #568 for sure. . Ok. 4.2.0. Different symptoms:\n\nThere's not much going on in the console window:\nbash\nyarn run v1.6.0\n$ cosmos\n[Cosmos] Using webpack config found at node_modules/react-scripts/config/webpack.config.dev.js\n[Cosmos] Serving static files from public\n[Cosmos] See you at http://localhost:8080/\nwebpack built 940cb10eb295271cd10f in 12998ms\n[Cosmos] webpack build invalidated by .c9/state.hashArgs.settings\nwebpack building...\nwebpack built faf4396d84748400c297 in 8787ms\nThe new repo is updated here: https://github.com/MattReimer/react-cosmos-cloud9. I see that too....on my local machine (OSX).  When I try it on Cloud9 I get the same symptoms. Weird. \nI realize this might just be something weird in the way C9 does its thing but I'm having real trouble figuring out what's wrong here and I can't figure out why the create-react-app runner would work fine but not cosmos and there's no error message except \"something is breaking the webpack build :/\". Nope. What I put in the original comment was all there was. \nIs there a secret verbose mode you know of that would give me more output?. Huh. Didn't even think to check the browser console. Sure enough there's a 499 error on the GET request for _loader.html:\n\nI did a bit of reading and it has something to do with the way Cloud9's vfs url works. \nI think the solution here is to follow the directions here in order to serve it from its IP address:\nhttps://docs.aws.amazon.com/cloud9/latest/user-guide/app-preview.html#app-preview-preview-app\nThis is annoying though because the public IP changes whenever the server restarts and configuring the VPC properly is not totally trivial so makes things a lot more complicated than just clicking \"run\" and \"preview\". I'm trying to develop a cosmos workflow for Windows-based designers who may not be that comfortable on the console.\nI don't think this is cosmos' fault so if you want to close this issue that's totally cool. It would be amazing to know why cosmos generates the 499 error but... I'll post back here if I figure it out so others can use it. \n. It worked!!!!!\nThank you so much. You have succeeded in making my day.. ",
    "maruware": "\nmicromatch with dot option\n\nI think that this way has less impact.\n\nglob with no absolute\n\nI don't understand why \"absolute\" is necessary, so I have no idea.. ",
    "gir": "As a workaround, for now, you can just add this to your package.json\n{\n  ...\n  \"scripts\": {\n    ...\n    \"postinstall\": \"rm -rf ./node_modules/react-cosmos-test/src\",\n    ...\n  },\n  ...\n}. ",
    "jbgraug": "I tried both \"npmClient\": \"yarn\" and \"npmClient\": \"npm\" and both behave the same way.\nI have local libraries swhich get symlinked into the main project so the postinstall script is not a solution for me (i don't want to delete my src files. ;)\nWe should be able to configure, somehow, the folder to be symlinked (files attribute in package.json). ",
    "adamszeptycki": "Thanks :)\nHere is a project I forked and just added the cosmos.\nhttps://github.com/adamszeptycki/react-example. To be fair I have a different error... :|. Ok, the error I'm getting is probably connected with the fact that I'm using karma.\n```\n  {\n    \"message\": \"Uncaught Error: Cannot find module \\\".\\\"\\nat webpack:///node_modules/use/utils.js:3:0 <- webpack.karma.context.js:251355:151\\n\\nError: Cannot find module \\\".\\\"\\n    at webpackMissingModule (webpack:///node_modules/use/utils.js:3:0 <- webpack.karma.context.js:251355:83)\\n    at Object. (webpack:///node_modules/use/utils.js:3:0 <- webpack.karma.context.js:251355:161)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\\n    at Object. (webpack:///node_modules/use/index.js:10:0 <- webpack.karma.context.js:93696:13)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\\n    at Object. (webpack:///node_modules/snapdragon/lib/compiler.js:3:0 <- webpack.karma.context.js:251170:11)\\n    at Object. (webpack.karma.context.js:251346:30)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\\n    at Object. (webpack:///node_modules/snapdragon/index.js:5:0 <- webpack.karma.context.js:249183:16)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\",\n    \"str\": \"Uncaught Error: Cannot find module \\\".\\\"\\nat webpack:///node_modules/use/utils.js:3:0 <- webpack.karma.context.js:251355:151\\n\\nError: Cannot find module \\\".\\\"\\n    at webpackMissingModule (webpack:///node_modules/use/utils.js:3:0 <- webpack.karma.context.js:251355:83)\\n    at Object. (webpack:///node_modules/use/utils.js:3:0 <- webpack.karma.context.js:251355:161)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\\n    at Object. (webpack:///node_modules/use/index.js:10:0 <- webpack.karma.context.js:93696:13)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\\n    at Object. (webpack:///node_modules/snapdragon/lib/compiler.js:3:0 <- webpack.karma.context.js:251170:11)\\n    at Object. (webpack.karma.context.js:251346:30)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\\n    at Object. (webpack:///node_modules/snapdragon/index.js:5:0 <- webpack.karma.context.js:249183:16)\\n    at webpack_require (webpack:///webpack/bootstrap%20eb73f15159f847148784:19:0 <- webpack.karma.context.js:20:30)\"\n  }\n```\nAny ideas?. We migrated from karma to jest and it works now.. ",
    "fusionstrings": "Hey, @skidding Thanks for clarifying. Of course...React needs to be in scope. Also doesn't matter how small the contribution is, thanks for giving the opportunity :)\nhttps://github.com/react-cosmos/react-cosmos/pull/615. ",
    "neezer": "Don't see anything wrong with package.json#name. Between the two suggestions we know that name should always be provided, whereas repository URL might be more variable.\n\nThe most important things in your package.json are the name and version fields.\n\nMy two cents.. ",
    "scottdickerson": "absolutely @skidding PR https://github.com/react-cosmos/react-cosmos/pull/630 put in to fix this, thanks!. ",
    "DmitryKorlas": "Thanks for hints, got it!. ",
    "Mensae": "Thanks for sharing @skidding !\nI'll try it out and let you know.. ",
    "callumlocke": "@skidding I vote for adding this to react-cosmos officially!. Awesome, thanks. After reading your reply and investigating proxies more, I found react-cosmos-wrapper-proxy also works well for this, if you want to create an actual wrapper component with more than just styles. This is very flexible and I'm happy to go with this approach.. OK it looks like I can add 'babel-polyfill' to my globalImports array and this solves it. I didn't realise this could take JS modules, as in the README the only examples are using local CSS files. I suggest updating the docs. I'll PR now. ",
    "shahkashani": "That does work, and is what I ended up doing, but then you can\u2019t access it as http://localhost:8989 which is a bit of a bummer.. Sure, but if you just omit the hostname parameter (or set it to null / undefined) in app.listen, it\u2019ll work on localhost both with and without Docker.\nSomething like app.listen(port, hostname === \u2018localhost\u2019 ? null : hostname). Alternatively, which is more work but probably cleaner; set hostname to undefined by default in the config and just handle it in the console.log, like suggested earlier.\nHappy to change the README, though!. Amazing, thank you so much!. Wow, you guys rule. Thanks so much for the extremely quick fix! This seems to do the trick.. @skidding Wow, totally missed that feature. What a great idea. Thanks for the heads up, will take a stab at it!. Would love to bump this a bit. We've been doing what you recommended and while it works technically, it's a little painful having 20K+ lines diffs in certain PRs (we use Cosmos extensively).. ",
    "fnbk": "Yeah, I found a simple solution!\nI used environment variables. In my example I had to make sure to prefix the environent variable with 'REACT_APP_...', otherwise it would just be ignored.\n\n. ",
    "ComputerCarl": "Copying and pasting was the thing driving me to absolute madness.\nI did find NWB and tried to use that, so I could at least build and import, to create a one-way workflow, but then I couldn't use it with React-Cosmos.\nI found issue #635 which discusses the conflicting webpack configurations, but I don't understand the solution offered. Should I open another issue, or zombie post there?. ",
    "dpehrson": "Is this required just to simulate loading? I finally got a chance to wire up the apollo proxy and it's amazing how well it works. The only issue we found was that it doesn't appear that you can simulate (and pin) the loading state of the data.\nFrom what I see it renders once with data.loading set to true from the fixture, but almost immediately re-renders with it set to false.\nI wanted to open an issue about that, but figured I should ask here first if this feature request is already being tracked.. @xavczen Excellent, would it be possible to set the timeout to something like -1 which would indicate \"never resolve\"? The hope is for us to create a fixture that explicitly shows the loading state indefinitely so QA can do design acceptance on that state.. Thank you @xavczen :). ",
    "nickluger": "If the fake resolver would be awaited as an async function, no separate latency-API would be necessary, as one could just timeout it. \njs\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms))\n// ...\n {\n      resolveWith: async ({ variables: { input } }) => {\n         await delay(5000);\n     // etc.\nIs that possible?\n. ",
    "p8952": "@skidding Amazing, thanks very much!. ",
    "Melocaster": "@SimeonC It works now! Thank you so much!!!. @skidding Thx for the quick responding. I just give a try for only using /\\/user\\?/ and it doesn't quite work. Seems detailed query paras need to be given. Otherwise an error is thrown. It is \nurl: /user\\?query=[0-9]+$/\nas an example for with query as a number. ",
    "josemontiel": "Hello @skidding ,\nHere's the entire error message:\n\nERROR in ./src/components/PricingPlans/PricingPlansList.js\nModule parse failed: ./src/components/PricingPlans/PricingPlansList.js Unexpected token (46:12)\nYou may need an appropriate loader to handle this file type.\n| \n|         return (\n|             \\\n|                 \\\n|                     \\\n @ ./fixtures/PricingPlansList.fixture.js 1:0-79\n @ ./node_modules/react-cosmos/dist/client/user-modules.js\n @ ./node_modules/react-cosmos/dist/client/mount.js\n @ ./node_modules/react-cosmos/dist/client/loader-entry.js\n @ multi (webpack)-hot-middleware/client.js?reload=true&overlay=false ./node_modules/react-cosmos/dist/client/loader-entry.js\nChild html-webpack-plugin for \"index.html\":\n                                   Asset      Size  Chunks  Chunk Names\n                              index.html    567 kB       1\n    551193bb07773ee73ac5.hot-update.json  44 bytes        \n       [0] ./node_modules/html-webpack-plugin/lib/loader.js!./node_modules/html-webpack-plugin/default_index.ejs 376 bytes {1}\n       [1] ./node_modules/lodash/lodash.js 540 kB {1}\n       [2] (webpack)/buildin/global.js 509 bytes {1}\n       [3] (webpack)/buildin/module.js 517 bytes {1}\n\nI will try to make a repo reproducing the issue and share ASAP.\nThanks!. Hi @skidding ,\nHere's a quick example of the issue: \nhttps://github.com/josemontiel/razzle-cosmos-example. Same error (from example repo project), @skidding :\n\nERROR in ./src/Home.js\nModule parse failed: Unexpected token (8:6)\nYou may need an appropriate loader to handle this file type.\n|   render() {\n|     return (\n|       \\\n|         \\{this.props.title}\\\n|       \\\n @ ./fixtures/Home.fixture.js 1:0-31 5:19-23\n @ ./node_modules/react-cosmos/dist/client/user-modules.js\n @ ./node_modules/react-cosmos/dist/client/mount.js\n @ ./node_modules/react-cosmos/dist/client/loader-entry.js\n @ multi (webpack)-hot-middleware/client.js?reload=true&overlay=false ./node_modules/react-cosmos/dist/client/loader-entry.js\nChild html-webpack-plugin for \"index.html\":\n         Asset     Size  Chunks  Chunk Names\n    index.html  556 KiB       0\n    Entrypoint undefined = index.html\n    [./node_modules/html-webpack-plugin/lib/loader.js!./node_modules/html-webpack-plugin/default_index.ejs] 376 bytes {0} [built]\n    [./node_modules/lodash/lodash.js] 527 KiB {0} [built]\n    [./node_modules/webpack/buildin/global.js] (webpack)/buildin/global.js 489 bytes {0} [built]\n    [./node_modules/webpack/buildin/module.js] (webpack)/buildin/module.js 497 bytes {0} [built]\n\n. Thanks, @skidding ! I just went with adding the proper loaders on the cosmos.config.js file as you suggested and got Cosmos working \ud83d\udc4d. ",
    "radhakri555": "Can I have a look at this issue?\n. @skidding: can you confirm my understanding here?. Instead of passing string variabke, we have to pass Boolean variable(prod: true or false) depends on environment.\n. ",
    "codecov[bot]": "Codecov Report\n\n:exclamation: No coverage uploaded for pull request base (master@891ef58). Click here to learn what that means.\nThe diff coverage is 0%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #678   +/-\n=========================================\n  Coverage          ?   91.86%         \n=========================================\n  Files             ?       80         \n  Lines             ?     1488         \n  Branches          ?        0         \n=========================================\n  Hits              ?     1367         \n  Misses            ?      121         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-cosmos-xhr-proxy/src/index.js | 79.16% <0%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 891ef58...c10f1d3. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@58baeba). Click here to learn what that means.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #707   +/-\n=========================================\n  Coverage          ?   91.53%         \n=========================================\n  Files             ?       78         \n  Lines             ?     1464         \n  Branches          ?        0         \n=========================================\n  Hits              ?     1340         \n  Misses            ?      124         \n  Partials          ?        0\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| packages/react-cosmos-apollo-proxy/src/index.js | 95.83% <100%> (\u00f8) | |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58baeba...309e528. Read the comment docs.\n. # Codecov Report\n:exclamation: No coverage uploaded for pull request base (master@58baeba). Click here to learn what that means.\nThe diff coverage is n/a.\n\n\n```diff\n@@            Coverage Diff            @@\nmaster     #709   +/-\n=========================================\n  Coverage          ?   91.52%         \n=========================================\n  Files             ?       78         \n  Lines             ?     1463         \n  Branches          ?        0         \n=========================================\n  Hits              ?     1339         \n  Misses            ?      124         \n  Partials          ?        0\n```\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update 58baeba...8f3b454. Read the comment docs.\n. # Codecov Report\nMerging #711 into master will increase coverage by 0.39%.\nThe diff coverage is 100%.\n\n\n```diff\n@@            Coverage Diff             @@\nmaster     #711      +/-\n==========================================\n+ Coverage   91.52%   91.91%   +0.39%   \n==========================================\n  Files          78       78            \n  Lines        1463     1472       +9   \n==========================================\n+ Hits         1339     1353      +14   \n+ Misses        124      119       -5\n```\n| Impacted Files | Coverage \u0394 | |\n|---|---|---|\n| .../react-cosmos/src/server/default-webpack-config.js | 100% <100%> (\u00f8) | :arrow_up: |\n| packages/react-cosmos/src/server/server.js | 79.66% <100%> (+9.66%) | :arrow_up: |\n| ...s/react-cosmos/src/server/extend-webpack-config.js | 100% <100%> (+5.12%) | :arrow_up: |\n| packages/react-cosmos/src/server/export.js | 61.11% <100%> (\u00f8) | :arrow_up: |\n\nContinue to review full report at Codecov.\n\nLegend - Click here to learn more\n\u0394 = absolute <relative> (impact), \u00f8 = not affected, ? = missing data\nPowered by Codecov. Last update f01b555...0c7d6a9. Read the comment docs.\n. \n",
    "stellarhoof": "Ahhh. Well thought! It didn't occur to me to check the URL. Thanks!. ",
    "linonetwo": "The reason is:\nI'm exporting store from ./store/index.js\njs\n// ./store/index.js\nimport viewerModel from './viewer';\n...\nexport default configureStore;\nexport const store = configureStore();\nand importing store from ./store/viewer.js\njs\n// ./store/viewer.js\nimport { store } from './'\nSo if cosmos.proxies.js import ./store/index.js first, viewerModel will be undefined since there is a cycling in import chain.\nSolve it by changing import { store } from './' to const { store } = await import('./');. ",
    "mentaman": "I'm having the same issue.\n\nWindows 10 too, 64bit.\nMy node and yarn are a bit newer than his.. Ok I found a fix!\n\n{\n        test: /.(jsx|js)$/,\n        include: [\n          src,\n          // Allow building playground from uncompiled monorepo deps\n          /react-cosmos-.+/,\n          /react-querystring-router/,\n          /react-cosmos-flow/\n        ],\n        use: 'babel-loader'\n      },\n\nUse this:\n\nInstead of this:\n\nJust changed the react-cosmos-playground/webpack.config,js first rule.\nand it builds succesfuly. I'm not sure why does it happen only on windows, and what exactly did I do.. But it works!\n\n. Later I had another windows issue it seems.. and fixed it too.\nI tried to run the \ncd examples/context\nyarn start\nlike the \nhttps://github.com/react-cosmos/react-cosmos/blob/master/CONTRIBUTING.md\nsuggested..\nBut had errors..\n\nIt took the linux one instaed of the cmd.\nSo I changed the package.json of examples/context to use the .cmd, and removed the linux one.\n\"start\": \"babel-node node_modules/.bin/cosmos.cmd\"\n\nBut this cmd didn't work too..\nSo I just changed it to:\n\"start\": \"babel-node ../../packages/react-cosmos/bin/cosmos.js\"\n\nwhich seems this is what the cmd has tried to. and it fixed it :)\n\n\n. #696 . Created a pull request. Just need to make sure it still works on other platforms if you can :). Thanks for your reply :) \nLooking good. So you mean it would be a plugin and by default it wont show up?\nIf someone who is not me would want to use it, how would he do it? Or you think it would not be useful for the rest of the community?\nAlso from the playground I am able to edit the fixture, and update it with the \"onFixtureEditorChange\" function, is it possible to do it with a proxy too?\nBecause I thought about letting them edit the component preview.\nBut I guess just the option of sharing it easily without editing can be enough.\n\nimport React from 'react';\n\nfunction getProps(props) {\n    return props\n        ? \" \"+Object.keys(props).map(key => getProp(props[key], key)).join(\" \")+\" \"\n        : \"\";\n}\n\nfunction getProp(prop, key) {\n    return key+\"=\"+JSON.stringify(prop);\n}\n\nfunction JSXPreview(props) {\n    const { nextProxy, fixture } = props;\n    console.log(props);\n    return (\n        <div>\n            <div style={{padding: \"5px\", background: \"#0a2132\", color: \"#a5bed2\"}}>\n                <span>&lt;{props.fixture.component.name}</span>\n                <span>{getProps(props.fixture.props)}</span>\n                <span>/&gt;</span>\n            </div>\n            <nextProxy.value {...props} nextProxy={nextProxy.next()} />\n        </div>\n    );\n}\n\nexport default [JSXPreview];\n\nThis is what it looks like as a proxy.\nIt doesn't support yet functions & jsx & children prop. \nI get this error \nwith this code:\n\"start\": \"babel-node ./packages/react-cosmos/bin/cosmos --config examples/local-state/cosmos.config.js\",\nand this code\n\"start\": \"babel-node ./packages/react-cosmos/bin/cosmos --config ./examples/local-state/cosmos.config.js\",\nAny other idea?\nWhat if I'll write \"& cd ../../\"\nat the end? Would it work?\n. :)\nYou think we should remove the \"bin/cosmos\" and \"bin/cosmos.cmd\" now? or does it have it another usage?. Awesome. Exactly what I need.\nDidnt know I can get compref from the parameters like that.\nThanks for the quick helpful response! . Hey. I got to try it just now.\nAnd it didn't work :( \nThe async init parameter I get is this:\n{compRef: undefined}\nAny idea? \nI'm using react redux 5.0.7\nreact 16.7.0,\nreact-cosmos 4.7.0\n. Oh ok. It didn't work with the \"withRouter\" function. But after I removed it, it worked(it wasn't necessary the withrouter there anyway). I also read about adding to the withrouter a parameter useRef:true. which didn't help. Anyway removing withrouter solved it for me. \nThanks. ",
    "Pyrolistical": "are we just missing docs? I think we need a new proxy don't we?. Mainly because functions on state have access to this and don't need babel-plugin-transform-class-properties\nAlso I'm one of those weird guys who thinks state = data + actions.\n. ",
    "vget98": "Hi is there an update to this issue?. @skidding sounds good thank you. ",
    "hudde91": "@skidding Hi is there any new documentation or proxy for react hook useContext in Cosmos?. @skidding Okay thanks!. ",
    "begedin": "@skidding The code there, the fixtureLink especially, seems to basic to be the direct cause. Maybe the problem is in us not understanding how apollo internals work and in some way, the proxy isn't even being hit.\nI'll be happy to look into it, but maybe someone with deeper knowledge of apollo itself could do more.. ",
    "good-idea": "Hey @skidding, I tried making an export using NODE_ENV=development and that did the trick!\nIt also fixed the _extends is not defined problem, although I'm not sure what was causing it in the first place. My project is in a monorepo so maybe it was having trouble finding the proper babel config or something.. \ud83d\ude4cThanks!. ",
    "teimurjan": "I found out the problem. As I've changed rootPath in configs, file with proxies should be in the root folder, not near the config file.. ",
    "Introvertuous": "It does feel like this is a bit outside the scope of the project, why not focus on being a dev tool?. ",
    "extramuros": "@skidding, thanks for reply.\nI'd tried, before I wrote the issue, to use getWrapper by id. And I've repeated with other selectors.\nNothing changes.\nI'd logged getWraper with different selectors and all of them had length=0.\nBesides, if I comment manually added Enzyme's adapter in my test file, I get an Enzyme's error. I looking for Enzyme's adapter in all my cosmos files installed by npm and have nothing. Is this right?\nI think, should be an adapter in it. My version of react-cosmos is 4.5, I have installed:\n\"react-cosmos\": \"^4.5.0\",\n    \"react-cosmos-redux-proxy\": \"^4.4.0\",\n    \"react-cosmos-router-proxy\": \"^4.5.0\",\n    \"react-cosmos-test\": \"^4.5.0\",\n    \"react-cosmos-wrapper-proxy\": \"^1.4.0\",\n    \"react-cosmos-xhr-proxy\": \"^4.5.0\",\nnow.. Yes, you are right. As I understand, getWrapper, in my case, is object with only \"length\" prop, sort of ReactWrapper { length: 0 } (it is console.log(getWrapper('#id')) result). But I have no idea, what it mean. Because, without Enzyme, react-cosmos-test is worked perfectly for me, I get right snapshots and all.\n. No, I haven't. But I'm starting to do it (only example of error reproducing). I'll be done tomorrow, I suppose.. Hi, @skidding \nI have prepared example here:\nhttps://github.com/extramuros/cosmos-error-reproducing. I need to inspect it again, something is broken at my side. Now snapshots also returns null. I guess, there's no issue. I'm sorry for your time.. @skidding, thank you for feedback. I had returned for working on tests and found my mystake in Errors component. Your was right. Everything works perfectly now.. As for me, I have no expirience for that. If I would have a time, I'll tried. But not for this weekend.. @skidding, i have opened a PR. This is my fist PR, please be careful with it =)\nYou can change promise, returned by import() function, to the simple require(), if you want.. @skidding, please check now, I have removed babel-polyfill.. ",
    "bslipek": "@skidding thank you!. ",
    "richarddequeker": "OK it's my fault I forgot to include html-webpack-plugin see. ",
    "mitsuishihidemi": "I was using 3.7.1 and moved to 4.5.0\n\n. here is my cosmos.config.js\n```\nmodule.exports = {\n    fileMatch: ['/src/demo/fixtures//*.js'],\nglobalImports: [\n    'node_modules/github-markdown-css/github-markdown.css',\n    'node_modules/prismjs/themes/prism-okaidia.css',\n    'node_modules/react-widgets/dist/css/react-widgets.css',\n    'src/demo/index.css',\n    'src/demo/index.js',\n],\n\nproxiesPath: './redux-proxy.js',\n\nhot: true,\n\npublicUrl: 'src/demo',\n\nwatchDirs: ['src'],\n\nhostname: '0.0.0.0',\nport: 8989,\n\nwebpackConfigPath: './webpack.config.demo',\n\n};\n```. Hi, \nThanks for replied, I am using webpack 3.0.0\n{\n  \"dependencies\": {\n        \"bem-cn\": \"^2.1.3\",\n        \"eslint\": \"3.19\",\n        \"prismjs\": \"^1.13.0\",\n        \"react-click-outside\": \"^2.2.0\",\n        \"react-paginate\": \"^4.2.0\",\n        \"styled-components\": \"^3.2.5\"\n    },\n    \"peerDependencies\": {\n        \"react\": \"^16.2.0\",\n        \"react-bootstrap\": \"^0.32.1\",\n        \"react-widgets\": \"^4.2.0\"\n    },\n    \"devDependencies\": {\n        \"@babel/cli\": \"^7.0.0-beta.40\",\n        \"@babel/core\": \"^7.0.0-beta.40\",\n        \"@babel/plugin-transform-async-to-generator\": \"^7.0.0-beta.40\",\n        \"@babel/polyfill\": \"^7.0.0-beta.40\",\n        \"@babel/preset-env\": \"^7.0.0-beta.40\",\n        \"@babel/preset-react\": \"^7.0.0-beta.40\",\n        \"@babel/preset-stage-0\": \"^7.0.0-beta.40\",\n        \"autoprefixer\": \"^7.1.4\",\n        \"babel-core\": \"^7.0.0-0\",\n        \"babel-eslint\": \"~7.1.0\",\n        \"babel-jest\": \"^22.4.1\",\n        \"babel-loader\": \"^8.0.0-beta.2\",\n        \"babel-plugin-lodash\": \"^3.2.11\",\n        \"babel-plugin-react-require\": \"^3.0.0\",\n        \"babel-plugin-remove-nonjs\": \"^0.1.1\",\n        \"babel-plugin-transform-decorators-legacy\": \"^1.3.4\",\n        \"babel-plugin-transform-require-ignore\": \"^0.0.2\",\n        \"codecov\": \"^2.2.0\",\n        \"css-loader\": \"^0.26.1\",\n        \"enzyme\": \"^3.3.0\",\n        \"enzyme-adapter-react-16\": \"^1.1.1\",\n        \"enzyme-context-patch\": \"^0.0.8\",\n        \"eslint-config-airbnb\": \"^12.0.0\",\n        \"eslint-config-prettier\": \"^2.9.0\",\n        \"eslint-loader\": \"^2.0.0\",\n        \"eslint-plugin-babel\": \"^4.1.2\",\n        \"eslint-plugin-import\": \"^1.16.0\",\n        \"eslint-plugin-jsx-a11y\": \"^2.2.3\",\n        \"eslint-plugin-prettier\": \"^2.6.1\",\n        \"eslint-plugin-react\": \"^6.10.3\",\n        \"extract-text-webpack-plugin\": \"^2.0.0-beta\",\n        \"faker\": \"^4.1.0\",\n        \"file-loader\": \"^0.10.1\",\n        \"github-markdown-css\": \"^2.10.0\",\n        \"html-webpack-plugin\": \"^2.30.1\",\n        \"husky\": \"^0.14.3\",\n        \"jest\": \"^22.4.2\",\n        \"jest-styled-components\": \"next\",\n        \"lint-staged\": \"^7.2.0\",\n        \"lodash.clonedeep\": \"^4.5.0\",\n        \"lodash.get\": \"^4.4.2\",\n        \"lodash.omit\": \"^4.5.0\",\n        \"lodash.range\": \"^3.2.0\",\n        \"moment\": \"^2.18.1\",\n        \"normalize.css\": \"^7.0.0\",\n        \"postcss-color-function\": \"^2.0.1\",\n        \"postcss-custom-properties\": \"^5.0.1\",\n        \"postcss-each\": \"^0.9.3\",\n        \"postcss-loader\": \"^1.3.3\",\n        \"postcss-nested\": \"^1.0.0\",\n        \"postcss-simple-vars\": \"^3.0.0\",\n        \"prettier\": \"^1.13.7\",\n        \"prettier-eslint\": \"^8.8.2\",\n        \"prop-types\": \"^15.5.10\",\n        \"react\": \"^16.3.2\",\n        \"react-addons-test-utils\": \"^15.4.2\",\n        \"react-bootstrap\": \"^0.32.1\",\n        \"react-cosmos\": \"^3.7.1\",\n        \"react-cosmos-redux-proxy\": \"^3.6.1\",\n        \"react-dom\": \"^16.3.2\",\n        \"react-element-to-jsx-string\": \"^14.0.1\",\n        \"react-markdown\": \"^3.3.0\",\n        \"react-redux\": \"^5.0.2\",\n        \"react-test-renderer\": \"^16.2.0\",\n        \"react-widgets\": \"^4.2.0\",\n        \"react-widgets-moment\": \"^4.0.4\",\n        \"recompose\": \"^0.26.0\",\n        \"redux\": \"^3.6.0\",\n        \"redux-form\": \"^6.6.0\",\n        \"redux-logger\": \"^3.0.1\",\n        \"redux-thunk\": \"^2.2.0\",\n        \"style-loader\": \"^0.18.2\",\n        \"stylelint\": \"^8.1.1\",\n        \"stylelint-config-standard\": \"^17.0.0\",\n        \"stylelint-config-styled-components\": \"^0.1.1\",\n        \"stylelint-processor-styled-components\": \"^0.4.0\",\n        \"url-loader\": \"^0.5.8\",\n        \"webpack\": \"3.0.0\"\n    }\n}. Thanks for your help, I will try with the latest version of react-cosmos, and if does not work I will set a public repo for you.. ",
    "ericyip": "aww.. I forget to upgrade 4.6.0-3. ",
    "sdgandhi": "@skidding addressed those changes.\nHowever, I'm not sure why you say the previous fixture.state won't work since it's used in the example right above it.. @skidding ahh you're right.\nIs the upcoming fix for this going to give (props, state) => (...) so state can be give to the correct component with ...state?. That's awesome, thanks for the info.. @skidding I'd love to use the first option, but I can't find how to set the mocked dispatch props in the redux state in the fixture. I tried something like this:\njs\n// Fixture\n...\n    props: {\n        loadData: null, // dispatch function name, doesn't work\n        error: null, // state, works\n        loading: false, // state, works\n    },. @skidding that's correct. Right now the component in the fixture is calling real dispatch functions, I'm trying to figure out how to mock those since the redux proxy doesn't work for this.. So I've separated my UI tests (with cosmos) from unit tests (with jest). So I only want to test the UI component without having to worry about the rest of my redux stack.\nAdditionally, by using redux-thunk, my redux dispatch calls out to external services and loads data from them. I would rather that not happen when testing UI in cosmos.\nPerhaps I'm not understanding redux proxy. I was under the impression that it is supposed to completely mock out the redux state, so none of the rest of the redux stack affects the component except for the redux state specified by the reduxState key in the fixture?. > Not quite. The purpose of the Redux proxy is so that all Redux side effects do occur outside your component, just as they would in a the entire app, except you're focusing on a single component. It's more tedious, but once set up can give you more confidence in your app. I try to explain this philosophy in this Medium article.\nAh yes I remember reading that now. This is a great option for \"integration\" level UI tests when you're testing on the level of the app. But I can just run my app fully to test this anyways. However, for \"unit\" level tests for the UI, I still think I need a way to mock the dispatch calls.\nPractically I would love to do the following:\njs\n    props: {\n        error: null,\n        loading: false,\n    },\n    reduxState: {\n    ...\n    },\n    reduxDispatch: {\n        fetchStuff: () => { return ... },\n    },. ",
    "zach-albia": "Interesting, I'll try it out. I wonder how we can make a suitable mock. I'll try to see what I can do on that front. I'm also hoping someone with some knowledge of next.js' internals can chime in.. If anyone's looking for a workaround for now, you can do the ff:\n\nMove the 'React' devtools tab next to the 'Elements' tab.\nInspect the element then click on the 'React' tab.\nClick on the 'Elements' tab.\nClick on the 'React' tab again.\n\nThis way, the inspected element ends up being selected on the React tab.\nEdit: updated for clarity. See @skidding's comment below for illustration.. Ok, I got it to work by configuring cosmos to use its own webpack config separate from next.js. I took a page out of #767's config.. >  I don't even know how to import Next's webpack config.\n@skidding Yeah, that was my line of thinking as well. I've scrounged around next.js' docs many times for it but came up with nothing every time.\nAt any rate, I don't see the resolve.extensions part of README but we can probably start adding a dedicated TypeScript section like you said. I'm thinking we can add subsections for create-react-app-typescript, TypeScript-React-Starter and a next-js-typescript example.\nThat said, it begs the question: do you think it's time for react-cosmos to have TS type declarations? Are they somewhere on the project roadmap BTW?\nedit: Ok, I saw what you meant by resolve.extensions bit.\nedit 2: clarification. @skidding I actually just finished making some public-facing type declarations for Cosmos for use in my project based off of your flow typings. I also have typings for some out-of-the-box proxies that I've used, namely redux, context, and apollo proxies. At any rate, would you rather have typings bundled with Cosmos' npm packages or have them published separately in DefinitelyTyped?. ",
    "TheImpressionist": "The answer is the following:\nI'm super thick and forgot to include:\njavascript\n    resolve: {\n      extensions: [\n        ...config.resolve.extensions,\n        '.ts',\n        '.tsx',\n      ],\n    },. ",
    "TwFlem": "@skidding Hey, I did not see 816cb94. I'm good to go. Thank you.. ",
    "tdelang": "That was it, thank you!. ",
    "rkclark": "@skidding Brilliant, thank you!. Hmm I've never worked with iframes to be honest so not an area where I can offer much expertise unfortunately.\nCan you position a browser element over an iframe? If so a non-intrusive exit (X) button could be added in one of the corners to allow the user to exit fullscreen with a mouse click. I realise that it would be preferable to not obstruct any of the screen when the user is viewing their component but if it was suitably small it might not be a problem.. > An overlapping button is also an option. As well as a thin side bar on the left with a few key controls, similar to how most apps \"minimize\" their left nav.\nI'd try to avoid a left bar as usually when I go into fullscreen mode its to totally control the viewport width to test my component's responsiveness - guess it may be the same for others!\n\nBut for now I hope the back button is something you can work with.\n\nSure no worries! If I can make some contributions in the future I will do. Kinda busy with my own open source project at the moment.. >Have you tried the lastest responsive controls added in Cosmos 4.6?\nI'm on 4.6.4, which ones do you mean?. @skidding Yeah so that feature is really useful, and I use it to target the main breakpoints in my project. However, I then switch to full screen mode to drag the viewport size in Chrome dev tools to see how my component behaves as the viewport expands/shrinks - rather than just looking at specific breakpoints. This is to check there is no weird behaviour between breakpoints.. ",
    "ibrahimovfuad": "Thanks a lot. it is worked for me.. Hi @skidding \nI mean the problem is in the mobile chrome emulation in full screen mode.\nSee how i fixed it on screenshots below.\nWithout meta tag\n\nWith meta tag\n\n. @skidding , Here you can find extended explanation of shrink-to-fit usage.\n. @skidding , I don't have permission to push in react-cosmos repository. Sorry for late answer and thank you for approving! . ",
    "cbranch101": "Awesome, this is a great workaround, thanks guys!. ",
    "TamirShklaz": "Hey guys I used #767 webpack config in my react typescript project. But webpack can't seem to handle jpg's\nERROR in ./src/assets/img/as-featured-in/uct.png\nModule parse failed: Unexpected character '\ufffd' (1:0)\nYou may need an appropriate loader to handle this file type \nNor anything to do with graphql \nERROR in ./src/apollo/queries/getNotifications.gql\nModule parse failed: Unexpected token (1:6)\nYou may need an appropriate loader to handle this file type\nI have 0 experience with web pack so any help with configuring my project to work would be immensely appreciated  \n. I don't know if I was being thick but the default cosmos settings were not working for me. So I figured I had to write my own webpack config. I read that you can use your existing webpack config only now. So fixed my problem by simply changing my cosmos.config.js to \nmodule.exports = {\n  webpackConfigPath: \"./config/webpack.config.dev.js\"\n}; \nPerhaps make that more clear in the readme to prevent a noob such as myself spending hours trying to create my own webpack config. \n. Ye I think a code sample like that would be perfect :) . ",
    "jcarraway": "@zach-albia @skidding any more progress on publishing types for Cosmos? \nIt would definitely be helpful to add a Typescript section with this example to the README as well. Thanks for the help!. ",
    "jeffal": "Hi @skidding, I am going to try dynamically modifying the Cosmos Code Mirror input via Cypress, otherwise, will create fixtures for all prop combinations. Thank you for the quick response!. ",
    "kbirulia": "This issue related to building packages on publishing, when packages dist directories is being generated. Ie11 error has little information about where errors occur. But the best way to find places, where unsupported features are used, is run build in react-cosmos with my proposal config and search by code babel-runtime/core-js. It shows polyfills imports, that is necessary for certain file. \n\n\n. ",
    "pungggi": "the same is true if i give a name to the class ..\n\n. Thank you i will try.. I realized that 'Mutation' was also an hoc with anonymous class... More explanations found > https://reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging. my implemented solution was:\n\n. ",
    "SinHouse": "Hi,\nI thing you can use this pattern to wrap your third party HOC (the sample is for the Yahoo injectIntl HOC):\n```javascript\n// @flow\n// injectIntl.js\n// Intl flow definitions managed by flow-typed:\n// https://github.com/flow-typed/flow-typed\nimport * as React from 'react';\nimport { injectIntl as originalInjectIntl } from \"react-intl\";\n// noinspection ES6CheckImport\nimport type { IntlShape } from \"react-intl\";\n// constant\nconst DEV = process.env.NODE_ENV !== 'production';\n// utils\nfunction getComponentName(Component: React.ComponentType): string {\n    if (typeof Component === 'object') {\n        // $FlowFixMe React.forwardRef does not have a flow definition at the moment\n        return Component.render.displayName;\n    }\n    return Component.displayName || Component.name || 'Component';\n}\nfunction getComponentWithProperName, WC: React.ComponentType>(\n    EnhancedComponent: EC,\n    WrappedComponent: WC,\n    HigherOrderComponent: (WC, ...other: Array) => EC\n): EC {\n    if (DEV) {\n        // noinspection JSUndefinedPropertyAssignment\n        EnhancedComponent.displayName =\n            ${HigherOrderComponent.name}(${getComponentName(WrappedComponent)});\n    }\n    return EnhancedComponent;\n}\n// your new HOC\nexport default function injectIntl>(\n    WrappedComponent: React.ComponentType\n): React.ComponentType {\nclass PropRefRouterComponent extends React.Component<PropsWC & { forwardedRef: * }> {\n    render() {\n        const {forwardedRef, ...other} = this.props;\n\n        return (\n            <WrappedComponent {...other}\n                              ref={forwardedRef}/>\n        )\n    }\n}\n\nconst WithIntlComponent = originalInjectIntl(PropRefRouterComponent);\n\nfunction forwardRefRenderFn(props: PropsEC, ref: *) {\n    return <WithIntlComponent {...props} forwardedRef={ref}/>;\n}\n\n// $FlowFixMe React.forwardRef does not have a flow definition at the moment\nreturn React.forwardRef(\n    getComponentWithProperName(forwardRefRenderFn, WrappedComponent, injectIntl));\n\n}\n```. ",
    "adam8810": "@skidding just so you're aware it appears that they decided to release it in 5.1.0. I've upgraded my versions of redux and react-redux to the latest versions and it doesn't appear that this fixes the issue. Are you aware of changes that need to be made to this project in order for it to work?. ",
    "keyserfaty": "Sure:\n``` js\n// This file is automatically generated by Cosmos. Best ignore it.\nexport const options = {\n  port: 8989\n};\nexport function getUserModules() {\n  return {\n    fixtureModules: {'/Users/karen/Code/nilus/Shipper/src/components/ButtonPrimary/fixtures/index.js':require('/Users/karen/Code/nilus/Shipper/src/components/ButtonPrimary/fixtures/index.js')},\n    fixtureFiles: [{\"filePath\":\"/Users/karen/Code/nilus/Shipper/src/components/ButtonPrimary/fixtures/index.js\",\"components\":[{\"name\":\"ButtonPrimary\",\"filePath\":\"/Users/karen/Code/nilus/Shipper/src/components/ButtonPrimary/ButtonPrimary.js\"}]}],\n    proxies: []\n  }\n};\n```\nThis is the content of the fixture:\n``` js\nimport ButtonPrimary from '../ButtonPrimary'\nexport default {\n  component: ButtonPrimary,\n  props: {\n    text: 'Lorem ipsum',\n    disabled: true,\n    onPress: value => console.log(Select: ${value})\n  }\n}\n``. Don't know exactly where to print that out but the connection seems correct:ws://localhost:8989/socket.io/?EIO=3&transport=websocket&sid=-b-P0w8t8EwztTe2AAAB`\nAnd I'm not getting any errors of connection in the console of the playground.\nEdit:\nWas able to do it. It prints out: ws://localhost:8989. Yeah, was trying that. It works perfectly on a new repo with expo.. ",
    "zedtux": "I'm also looking for this. In the case I find something, I'll update the issue.. BTW @keyserfaty do you know about https://github.com/jerolimov/react-native-cosmos ?. You are right @skidding, I was just posting it regarding the way it has been achieved, in the case a new angle of view would help here, but as I just discovered today Cosmos, I couldn't figured out if this lib was relevant or not, sorry.. ",
    "koggdal": "Thanks for fixing it @skidding! \ud83d\udc4d It works great now, and I sent a fix for this issue here: https://github.com/react-cosmos/react-cosmos/pull/849. Let's see if it builds now! The file isn't tested very well, so 80% code coverage requirement forced me to add a test for some existing things as well.. @skidding Okay sure! I find it a bit sad to not test important things though.. Thanks for merging! :) \ud83d\udc4d\nThe fact that you now can rely on the process exiting with the right exit code is quite a nice thing to be able to rely on in a project's build tools. That it's untested means that such a thing could break silently at some point. The exact error messages maybe don't need to be tested, but it's nice if tests break when expected behavior (errors being logged) breaks.. > Thanks for your contribution! You can start using your code under v4.7.0-10\nThanks!\n\nBtw, I prefered reverting that commit because I'm busy this week so it was easier for me to review the first part and merge it quicker. Sorry if I came off as dismissive!\n\nNo worries, totally understand your reasoning! :) \ud83d\udc4d. ",
    "milheim": "Hello @skidding,\nnamespace looks better as temporary decision.\nThank you for sharing.. ",
    "robhdawson": "Hi @skidding! A colleague of @shahkashani's here. Since we last commented here, we've actually worked out a local patch for this. Basically, it boils down to swapping out the screenshot expectation in react-cosmos-telescope with something like:\njs\nexpect(() => {\n  wrapper.toJSON();\n}).not.toThrowError();\nAll your solutions seem great, so if this is the kind of shortcut you'd rather not introduce, I get it. But it's been working pretty well for us so far, and I'd be happy to make it nice and configurable and contribute it here, if you think that'd be worthwhile.. ",
    "hobofan": "That doesn't work, as the nextConfig.webpack function only allows you to decorate the webpack config during a next.js build, so what we want would actually be its parameter. After some searching through the source, there seems to be no way to obtain the webpack config used by next.js. There exists a related closed issue (https://github.com/zeit/next.js/issues/1641).. I had a hacky workaround that worked to some degree, where I printed out the webpack config that is being passed into nextConfig.webpack during one of it's Next's webpack builds and then paste that into the config and removed parts of it that caused problems until it worked.\nHowever that seemed far to brittle to use in a production setting, so I decided to ditch that for now.. ",
    "Ken123777": "@alfredvaa @hobofan Have you guys found a solution for this? . ",
    "cloudratha": "Thanks for the quick reply.\nI'll stick with my ugly buttonPropProxy for now then. Does the job.\nLook forward to the next release.\nGood work.. ",
    "smesko85": "I'm not sure what has changed, but even if I try installing react-cosmos@4.5 version, it still doesn't work.. I was not using react native.\nThe issue is that the packages versions defined in package.json are not strict, but rather defined to use minor versions as well. So now when one package is updated to a newer version, older packages automatically use newer dependencies, even if that breaks the build.\nSo whenever a react-cosmos-playground is upgraded, doing npm install react-cosmos@4.5 is going to use newest react-cosmos-playground version.\nSince the project is introducing breaking changes on minor versions update, this could be a problem.\nI fixed my problem by manually define dependencies in my project as defined in https://github.com/react-cosmos/react-cosmos/blob/v4.5.0/packages/react-cosmos/package.json\nBut the bigger issue IMHO still remains.. I will. Thx.. ",
    "jpeyper": "So... I'm not sure this is wanted by you/anyone else, however it would be really handy to us and our usage of react-cosmos. We have a complicated arrangement of runtime assets that are stored behind an authenticated request, so access to the auth (and pathRewrite) proxy options is required.\nI'm not sure I got the flow types right... I was struggling to get everything up and running on my pc in this corporate environment.\nI also couldn't find any existing tests that cover the the httpProxyconfig, but if I have missed adding any tests I should add please point me in the right direction.\nAlso, this is one of my first commits ever on an open source library I didn't control, so if I've made any mistakes in approaching this, please forgive me and let me know so I can learn :). Apparently I did get the types wrong... help?\nIt should be matching \njavascript\n{\n  // other config\n  httpProxy: {\n    context: 'string',\n    target: 'string',\n    // other http-proxy-middleware options (mixed types?)\n  }\n}\nand\njavascript\n{\n  // other config\n  httpProxy: {\n    'context string 1': {\n      target: 'string',\n      // other http-proxy-middleware options (mixed types?)\n    },\n    'context string 2': {\n      target: 'string',\n      // other http-proxy-middleware options (mixed types?)\n    }\n  }\n}.  > As a minimal hint that this feature exists, I advise adding the following line in the README docs:\n\ndiff\n   // HTTP proxy specific requests to a different target\n+  // For advanced usage see https://github.com/react-cosmos/react-cosmos/pull/875\n   httpProxy: {\n     context: '/api',\n     target: 'http://localhost:4000/api'\n   },\n\nOk, I've added the minimal message to the README.\nThanks for your pointers, I managed to get the types work out (I think... please check them carefully for me).. ",
    "tryggvigy": "\nAnother approach could be to allow users to provide a sortComponentsBy: () =>{} function through cosmos.config.js.\n\nThis could perhaps be provided through the runtimeConfig introduced in https://github.com/react-cosmos/react-cosmos/pull/877. > We can't put unserializable options (function in this case) in cosmos.config \nAh, of course! \ud83e\udd26\u200d\u2642\ufe0f \n\nI do have some suggestions:\n\nYour suggestions make perfect sense to me. I'll make the changes when I have some time!. Renamed the function, used the new regexp and added some explanatory comments in 6b6fc60, feel free to take a look when you get the time @skidding . >  I hope this won't piss people off, but I say we just switch to collapsing fixtures by default for now. What do you think?\nI agree 100%. When skimming the list I think most folks will be looking for components not states. So allotting screen space to components over states by default makes sense. Personally, It's also more visually pleasing to see them collapsed. Feels tidy, but thats more subjective.\nI'll make the changes (remove the runtime config and collapse fixtures by default) when I get some time!. @skidding I removed the runtime config and default to collapsed fixtures in ca5dfe2. > The build is failling. Can you please update the tests to reflect your changes?\nFixed in 688eb74. noticed integration tests failing. I'll take a look when I can. I tried \n``diff\n+ const componentNameButton = getSelector('index__componentName');\n// The first menu button is the fixture editor toggle\nconst editorButtonSel =${getSelector('index__button')}:eq(1)`;\nfunction selectFixture(fixtureName) {\n+   // expand the fixture\n+   cy.get(componentNameButton).click();\ncy.get(fixtureButtonSel)\n    .contains(fixtureName)\n    .click();\n}\n```\nBut that times out :/ \nCypressError: Timed out retrying: Expected to find element: '[class^=\"index__componentName__\"]', but never found it.\nindex__componentName___xxxxx seems to be the cssModules class that expands/collapses fixture. > The Cypress tests are no longer deterministic, because of how collapsed state is stored into LocalStorage. Initially components are collapsed, but after the first run they will be open. So toggling blindly isn't enough.\nah ofc! That makes sense. Yeah that looks great!\n. ",
    "alfredvaa": "That solved it! \ud83d\udc4d . ",
    "justinglibert": "Thank you for your fast answer \ud83d\udc4d ! I guess I didn't read the doc enough. . ",
    "nakedcity": "I think this would be the right way \n```\n...\n  if ((typeof module === \"object\") && (module.__esModule || \"default\" in module)) {\n    return moduleName && module[moduleName] || module.default;\n  }\nreturn module;\n....\n```\n. ",
    "brianespinosa": "Related: https://github.com/babel/babel/issues/6808\n. Got the steps working for the latest babel-loader and the correct presets in a bare node project. I'm going to submit a PR with updates to the README shortly.. Ah, thanks for the catch on the Babel version. The major version on babel-loader threw me off. I'll make these changes now.\nI was trying to figure out why you had that quote block! Makes complete sense now.. ",
    "calldanfeng": "Hi @skidding,\nThanks a lot for your quick response and I really appreciate your work on Cosmos Next. \nI've downgraded react-redux to 5.x.x in our project since there isn't a strong need in our team to use v6. As for react-cosmos-redux-proxy 4.x.x, I don't think it has to support react-redux v6 according to semantic versioning. \nLooking forward to your Cosmos Next!. ",
    "andyrichardson": "Hey folks, I've opened a PR which should fix this.\nThe implementation uses redux and react-redux via peer dependencies rather than implementing a custom solution. It's a fair deviation from the prior implementation so let me know if there's anything about this approach that might not work.. Hey @skidding, thanks for the feedback \ud83d\udc4d I knew I was missing something - looks like I'll have to revisit some of this (will close for the time being).. ",
    "dep": "Hi @skidding thanks for the reply. As far as imports, I do quite a lot of this:\nimport { createFixture } from 'react-cosmos-flow/fixture';\n. Oddly enough moving my babel config out to a proper babel.config.js fixed this for me.\n```\nmodule.exports = function(api) {\n  api.cache(true);\n  const presets = [\n    [\n      '@babel/preset-env',\n      {\n        modules: 'auto',\n        targets: {\n          browsers: ['defaults']\n        },\n        useBuiltIns: 'entry'\n      }\n    ],\n    '@babel/react',\n    '@babel/preset-flow'\n  ];\n  const plugins = [\n    '@babel/plugin-proposal-class-properties',\n    'babel-plugin-dynamic-import-node'\n  ];\nreturn {\n    presets,\n    plugins\n  };\n};\n```. ",
    "stvmachine": "+1. The problem appears in the latest version of create-react-app with \n\"react\": \"^16.7.0\",\n \"react-dom\": \"^16.7.0\",\n \"react-scripts\": \"2.1.3\",\nWith this configuration works:\n\"react\": \"^16.4.2\",\n    \"react-dom\": \"^16.4.2\",\n    \"react-scripts\": \"1.1.4\"\nHappy to help to make it work on the last version of create-react-app.. @skidding  I followed your suggestion and guess what, totally works!. Thanks! \ud83d\udc4d . ",
    "tomitrescak": "@skidding as per 1) it's just for the nicer organisation of my fixtures to give them different, more expressive names. For example, when I export three fixtures from the same file each of them can represent a different state of the component. It would be nice to explicitly say this. For example:\n\nComponent With Error\nComponent Loading\nComponent Loaded Single Entry ...\n\nAs per 2, awesome! The Apollo integration is state of the art here. Renders all other approaches just a pain in the a$$ ;) Trust me, I tried them all ;). Hi, seems like a good ides, but I do not it will scale much. If you will decide to make richer API in the future you will be limited. I created a similar system to COSMOS, Luis (by FAR less popular :) and what worked for me was exporting more complex information. Of course you can support all three, should be fairly straightforward:\n```js\n// first type\nexport default \n// second type\nexport default {\n  'Component With Error': ,\n  'Component Loading': ,\n  'Component Loaded Single Entry': \n}\n// third type\nexport default [\n  {\n    name: 'Component With Error',\n    component: ,\n    ...other API props\n  }\n]\n```\n. ",
    "TheAncientGoat": "Thanks for the quick reply - managed to work around it by just manually\nproviding a wrapper div - maybe all that is necessary is an update to the\ndocumentation, it's not a huge hassle to add the wrapper, seeing as you\npretty much need to make a global style decorator anyhow to render\nreact-boilerplate correctly.\nOn Tue, 19 Feb 2019, 18:57 Ovidiu Chereche\u0219 <notifications@github.com wrote:\n\nHi Ryan (awesome handle btw \ud83d\ude04)\nYou're right, containerQuerySelector isn't supported by Cosmos Next. I\ncut a lot of corners to release it as soon as possible and this was one of\nthose corners.\nBut this is also something easy to add so I'm bookmarking this issue to\nfix it in the next release of Cosmos Next, which is going to include a\nbunch of other goodies like support for multiple named fixtures in a\nfixture file.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/react-cosmos/react-cosmos/issues/930#issuecomment-465085120,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAFW5YQrEGicrRZHpE615aa0WRnKbpp8ks5vO9iKgaJpZM4bAM8t\n.\n. \n"
}