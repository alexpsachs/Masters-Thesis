{
    "PascalPrecht": "Done. https://github.com/PascalPrecht/bower-angular-translate\n. Hey @thobias! ngTranslate is currently registered as angular-translate unfortunately it turned out that I registered the package with a broken endpoint, so this has to be fixed first. Until its fixed you have to go with\n$ bower install PascalPrecht/bower-angular-translate. I'll update the whole documentation when the registration is fixed.\n. What are you talking about?\n. Ah okay, fair enough.\nBut what if localStorage isn't supported?\nAlso, you can just fork and send a PR :) Just read the Contributing Guide\n. Sounds good to me!\nWanna take care of this?\n. Thanks for the PR. Please consider the Contributing Guide. \nAs you can see, your code failed on build process. Also, there aren't tests submitted at all.\n. BTW: I just found this angular-local-storage module. Maybe we should consider either extracting the best bits out of it, and pack it in a custom service/provider for ngTranslate, or try contributing to angular-local-storage, so that it at least provides a test suite.\n. +1 for setting up a kind of abstraction service, which decides to use localStorage service or $cookieStore. Better for testability, better to extend and maybe there's another way of store the language key, so it woudn't be a problem to add another store service.\n. Ah, okay my bad :)\n. @thobias Actually you're totally right! I thought the same yesterday's eve, that the rememberLanguage() actually has to be a kinda extension of ngTranslate, to not necessary depend on ngCookies. Any idea how to solve this? :)\n. @thobias Totally agree with you, but I think there's a way to solve this.. I mean you could at least 'overwrite' $translate service with a ngTranslate extension module. I'll research to find a better solution on that.\n. Good ol' UML <3\nSince we're not able to get service instances at config() phrase, we could solve this by providing an API which let's a user of ngTranslate define a storageProvider which has to implement a specific interface (which is exactly what @DWand shows us with his UML diagram).\nSo let's say somebody want to use any kind of storage to store a language key and let his app remember the configured language. A possible solution for that could be (similar to registerLoader) to register a storage factory function (which is then the actual provider). Something like:\n``` js\napp.config(function ($translateProvider) {\n    // registering storage provider\n    $translateProvider.registerStorageProvider(['dep1', 'dep2', function ($dep1, $dep2) {\n        return {\n            get: function (key) { / ... / },\n            set: function (key, value) { / ... /}\n        };\n    }]);\n// make uses of it at run() phrase\n$translateProvider.rememberLanguage(true);\n\n});\n```\nAnd later on at run() phrase, the registered provider gets injected/instantiated and used instead of the concrete $cookieStore implementation.\nThis gives the user full control of any kind of storage. It just has to implement the defined interface.\n@thobias, @knalli ?\n. @ajoslin ?\n. Yeah we could do so. :)\n. Now, since this is actually a kinda breaking change, I wonder if this feature should land in 1.0.0 or if we should implement this for 0.7.0 or 0.8.0 or so.\n. > I wouldn't call it registerStorageProvider though, as the word Provider has a kind of different meaning. Probably \n\nregisterStorageFactory.\n\nI agree.\n\nWhat if any other library needs caching too and requires another interface?\n\nThis is just where registerStorageFactory() comes in. Which also has to return any kind of object which has at least a get() and a set() method.\nSo in some cases, it could just be used as a facade-pattern.\n. So, here is a WIP @knalli @ajoslin @DWand @rewritten https://github.com/PascalPrecht/ng-translate/commit/bbd9c4e070a653f01f661d4bddf14725dd995a8b\n. Regarding the proposed commit above, here's a checklist (which now has to be fine tuned):\n- [x] rename $COOKIE_KEY to something else since it's not necessarily a cookie (how about $STORAGE_KEY?) \nLanded as https://github.com/PascalPrecht/ng-translate/commit/049512bb6fb21874e558a959ebf723e21a3fe4ed\n- [x] add functionality to overwrite default $STORAGE_KEY (#30)\n- [x] implement $translateProvider#useCookieStorage() (https://github.com/PascalPrecht/ng-translate/commit/bbd9c4e070a653f01f661d4bddf14725dd995a8b#commitcomment-3171957)\n- [x] implement $translateProvider#useLocalStorage() (https://github.com/PascalPrecht/ng-translate/commit/bbd9c4e070a653f01f661d4bddf14725dd995a8b#commitcomment-3171957)\n- [x] implement $translateProvider#useStorage() (https://github.com/PascalPrecht/ng-translate/commit/bbd9c4e070a653f01f661d4bddf14725dd995a8b#commitcomment-3171957)\n- [x] remove $translateProvider#rememberLanguage() since we're already saying to use any kind of storage\n- [x] implement $translateProvider#registerLoaderFactory()/ $translateProvider#useLoaderFactory() ? (need more thoughts on that one) landed in https://github.com/PascalPrecht/ng-translate/commit/2915e8bdd4d485cdeb0c6fd43cec6f84fe6a67cf\n- [x] implement $translateProvider#setStorageId() (or setStoragePrefix())\n  Landed as https://github.com/PascalPrecht/ng-translate/commit/64cd99b719b9c9fa7d75606fbe6c7da956a6de20\n  Anything you'd like to have changed on that list? Anything you wanna add? /cc @ajoslin @DWand @knalli @rewritten \n. You just don't use it :)\nOn Thursday, May 9, 2013, Jan Philipp wrote:\n\nWhat if I do not want to use storage? Do we implement a NoOp/Null variant?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/ng-translate/pull/3#issuecomment-17655334\n.\n\n\n/pp Sent from Gmail Mobile\n. > If there is a method useStorage() and others instead of rememberLanguage(), could we use it to fully configure the storage?\nYeah, we could actually do so. But I'd say we introduce this kind of feature when there's more you can configure. As long as we have just these few methods we don't need that configuration pattern. So in conclusion: Yes we'll do so, but not yet :)\n\nAnd what is the difference between\n\"add functionality to overwrite default $STORAGE_KEY\"\nand\n\"implement $translateProvider#setStorageId() (or setStoragePrefix())\"\n?\n\nThe first is to make it possible to change the value which is stored in $STORAGE_KEY and the second is there to customize a specific prefix for the value of $STORAGE_KEY to avoid conflicts.\n. $COOKIE_KEY -> $STORAGE_KEY just landed as https://github.com/PascalPrecht/ng-translate/commit/049512bb6fb21874e558a959ebf723e21a3fe4ed\n. There's now useLocalStorage() and useCookieStorage() in https://github.com/PascalPrecht/ng-translate/commit/71d65fcf909147a3c43bbdb945eb0b22ba0ea7a1\nAnd also useStorage(). rememberLanguage() is removed.\nThere's still a bug in a unit test. Maybe one of you guys could figure out what's broken there? @knalli @ajoslin \n. Yeah I know where it is and I know that's an issue with the $translateLocalStorage but I can't figure out, why it doesn't set the storageKey property on startup.\n. Whoat? :-o\n. Sorry I don't get it. useLocalStorage() does the same as useCookieStorage(). And in tests, when setting and getting values explicit with a 'used' localStorage, it works fine. \nSo yeah, useLocalStorage() really only sets the storage service, but $translate service instantiate it. So it is there and it actually does its job. Except that it not set the lang key at startup or ngTranslates run()\n. @DWand This is fixed now.\n. I really can't get around this weird error.\nhttps://github.com/PascalPrecht/ng-translate/blob/canary/test/unit/translateServiceSpec.js#L624-L630\nAnybody else have an idea whats wrong there? I also logged the code at different states. Really don't get it.\n. So, the checklist is done. There is just this weird bug with useLocalStorage() left.\n. Since everything landed in canary now, this will be closed. Thanks for all your input and work. You guys are great!\n. Hey @knalli ,\nyeah it is definitely planned to support async loading of translations. This would even the next step I would get my fingers dirty on, after #3 is merged in. If you want to help out on this, it'd be awesome.\nI already thought about how to solve this, or how this functionality should actually be used by a developer. A good interface definitely has the highest priority. This is why I choosed method names like \n$translateProvider.translations(translationTable);\nand\n$translateProvider.uses(langKey);\nSince these methods are used to either read or write data, the signatures a pretty neutral.\nThinking about loading resources asynchronously opens the questions:\n- a) how to tell $translateProvider to load resources asynchronously\n- b) which ways are supported to load resources asynchronously?\n- c) should there be support for mixing these to ways of getting translations into the module? If so, how handle this?\n- d) should there be support for lazy loading? (probably yes. At least, I'd like to have it)\n- e) how to integrate this functionality, without breaking the API? (Yeap, we're still under 1.x.x, but nevertheless it'd be great to keep the ways we can do things now.\n- f) how should uses() behave in that case? (Currently it's throwing an error when trying to use a translation table which isn't there yet)\nThese are just questions which aren't really get into the deep implementation itself. But splitting these up into more detailed question (which surely come up) there are a lot of things to clarify.\nTo share my thoughts on this, I put together a few approaches which flying through my head:\nTelling $translateProvider to load resources asynchronously\nSince I want to make ngTranslate as configurable as possible, IMHO there should be a way to configure the module application-wide and maybe overwrite module state at concrete function call. I think there are two ways (which make a lot of sense) to achieve this:\n- introducing a new interface (Could be a more readable solution)\n- extending existing translations() (definitely no breaking change, it just gets better under the hood)\nIntroducing a new interface\nThis could be a method on $translateProvider which just says 'load a resource from anywhere'. The method could look like this:\n$translateProvider.loadTranslationTable(sth);\nWhereas sth could be splitted up into following signatures:\n```\n// Simply a URL\n$translateProvider.loadTranslationTable('/resources/de_DE.json');\n// A promise\n$translateProvider.loadTranslationTable(promiseObj);\n// An options object\n$translateProvider.loadTranslationTable({\n    url: 'anyUrl', // resource url\n    model: identifier, // maybe resource url is return more then just an array with translations, here you can specify a response object key,\n    langKey: 'de_DE' // optionally assigning the table to specific key\n});\n// these signatures should also work with a direct langKey assignment so the following should also work\n$translateProvider.loadTranslationTable('en_EN', url);\n$translateProvider.loadTranslationTable('en_EN', promiseObj);\n$translateProvider.loadTranslationTable('en_EN', optionsObj);\n```\nNow this could be a way of handling it. Actually the promise variant can't work, since we're not able to get a promise at angular.module('myApp').config() (at least not from angular).\nIf an option object or url is passed, both would be wrapped in to a promise to use $http service internally to request the resource. In this case, making the request during provider phrase in ngTranslate will also not work, which is why this logic has to be implemented in run() phrase.\nExtending existing translations() method\nAnother way to load ressources asynchronously would be via translations(), we just have to teach it. Signature would actually be the same as in loadTranslationTable() with the same pitfalls as mentioned above. But taking a deeper look, translations() already provides a signature for arg1 = 'string' and arg2 = 'object' to assign a translation table directly to langKey. So Variant C wouldn't be possible, we'd have to stuck with Variant A, which is also not really cool, cause readability is getting bad.\nThis:\n```\n// without langKey (which has to be supported!)\n$translateProvider.translations('url'); \n// or\n$translateProvider.translations('en_EN', 'url');\n```\nactually doesn't look nice.\nSo it looks like introducing a new interface is the better way. What do you think?\n. I'm not sure if I'm getting you right on setLoader() (maybe cause of my lack of coffeescript syntax skills).\nA method called setLoader sounds like a way to register one (or more) loader(s) which then be used to actually load the resources. \nRelying on this understanding, I think setLoader is way too nitty-gritty. You know, like, I'm okay with giving a user the full control via any kind of config object, which is maybe just passed through to $http service. But we should also consider making the usage and readability as simple as possible. Saying if someone just wants to say: \"ngTranslate, I want you to load resources from this URI', it should just work.\nIntroducing a new service on that also means introducing a new provider for that. With a new provider we have new open questions:\n- a) How is it called?\n- b) is it just there to tell ngTranslate to load translations asynchronously? Or are there more methods we could put in there?\n- c) Still: How does uses() behave? Since it's a method on $translateProvider to tell ngTranslate which translation table to use. And again, at provider phrase we don't have to a service... Maybe injecting another provider to access translation tables?\n- d) Are translation tables still stored in $translateProvider?\nI think this topic needs more ideas and inspiration..\n. Do you have the code you played with anywhere pushed to github?\n. Hey @knalli ! This looks pretty neat, thanks. So here are my thoughts on this:\nBasically, I like the approach of the whole solution, but there are some things I have to clarify myself and some things I actually don't really like.\nngTranslate.$ignoreInvalid \nIf I got it right, $ignoreInvalid is just there to make sure that ngTranslate doesn't log warnings when there isn't a certain translation, because it might not be loaded yet, right?\nI think this is a kind of configuration, which should be changed through $translateProvider interface, rather then a value service. Because it forces a user to manipulate ngTranslate module state by overwriting a whole service (even if it's just a value). \nIn my opinion, a user shouldn't do that to get things done. As long as it's possible we should make any configuration possible through any provider (the less the better). So if we can transfer this little logic in $translateProvider e.g., this would be awesome. Maybe we could make ngTranslate flip a switch automatically? Cause, when would somebody to have $ignoreInvalid false when loading resources asynchronously? So we could say, anytime when ngTranslate notice it should load resources asynchronously, a setting like $ignoreInvalid could be set to true automatically.\nWhat do you think?\nIntroducing $asyncLoader\nSo .. $asyncLoader is a kind of solution that probably works. But there a few things I can't get my head around.\nFirst, treating $asyncLoader as value service, which is initialized with null, seems to be a bit hacky. Then, again, forcing the user to overwrite module state afterwards is not cool. This also leads to a possible situation to set a $asyncLoader first and then maybe at runtime, clobber it again. \nAnother thing is the way a $asyncLoader is currently configured. Actually a user has full control of how a asyncLoader looks like. This is cool, since lot of control makes users happy. But thinking about the real use cases, there isn't really a case where a asyncLoader doesn not make an XHR right? So this means, this could be unified, which leads to a much simpler interface.\nWhat I'm trying to say, I think it is okay to define the functionality of a $asyncLoader (because its almost always the same). This again, brings us to something like\n$translateProvider.loadTranslationTable(key, url)\nAlso, requesting $injector to get an instance of $http is a clever way. But I'm not sure if it's also a bit hacky. If not, this could be a solution for common problems.\n. Uhmmm... I have to think about it.. I kinda getting happy with adding async loaders... :D\n. Maybe we could just wrap the passed arguments in a $q.when so no duck checking is needed. \nI thought about the whole thing and yeah.. I think I'm fine with registering loaders. So it really goes in the direction you already went, interface could look something like this:\n```\n$translateProvider.registerLoader(key, loaderInstanceFn($injector));\n// Or if you just want to have one translation table in you app\n$translateProvider.registerLoader(loaderInstanceFn($injector));\n```\nWhereas a registered loader is called when uses() is used the first time. The signature of course should work in all combinations we talked about.\nThere is just one tiny thing: Passing $injector in loaderInstanceFn() seems like the only way to make it a user possible to use service instances at later time. I've seen this approach often in other code, but I'm not sure if it's a kinda bad practice or not.\nIf it's just 'okay' to do so, we can go ahead I think.\n. Exactly. True that is. Which is why we can't just use $http service, since it's not available yet. But when saying we only make it possible to load resources asynchronously via XHR, we simply can set up the loader functions at run() phrase.\n. Actually yes. I would say, one has to register a loader either for just one translation table, which is the case when just one language is available and no language key is needed, or to register loader per translation table.\nAnother possible way would be to also just register one load end tell $translateProvider to use this loader for a set of language key, just for the case the loaders wouldn't differ except the language key. But then we first have to clarify how this could look like. The steps were\n- 1) register a generic loaderInstanceFn\n- 2) telling $translateProvider to use this one loader for each langKey\n- 3) telling $translateProvider which langKeys are supported (here I'm not sure how it could look like)\n- 4) telling $translateProvider which language to use as default\nThen we would have the normal case\n- 1) register a loaderInstanceFn for langKey 'x'\n- 2) register a loaderInstanceFn for langKey 'y'    // only makes sense when loaderInstanceFn's differ\n- 3) telling $translateProvider which language to use\nThen a mix of the existing and now coming functionality would be an option\n- 1) register a translationTable for language 'x' via translations\n- 2) register a loaderInstanceFn() for another language 'y' which should be loaded lazy at runtime\n- 3) telling $translateProvider which language to use as default\nIn all cases I think it'd be great if ngTranslate decides automatically by default to not log warnings when a certain translation id isn't there yet, but giving the a user the option to force ngTranslate to log warnings, even if translations are loaded asynchronously.\nIf we could setup a full test specification based on the requirements above, I think we're on the right way.\n. Will have to check the demo out to reproduce the issue. \n. Okay, tried it out and know what you mean. I think I'll also push some code as a proposal. Will post it here later.\n. :)\n. So, here we go\nhttps://github.com/PascalPrecht/ng-translate/compare/async-loader-proposal\nJust pushed a proposal on how $translateProvider.registerLoader() could also be handled. Notice that I'm abstracting the concrete $injector instantiation away (this'd be done by ngTranslate itself).\nThe following use cases are tested (and again, it's currently just about registering loaders)\nPassing url string\n$translateProvider.registerLoader('foo/i18n_de.json');\nThe simplest way. ngTranslate transforms the string to a loadAsyncFn as you can see right here.\nHere you can also see, that I'm adapting angular's dependency annotation syntax. I think this is the easiest and cleanest way to give us the possibilities we want, without making the user instantiating an injector by hand.\nPassing annotateFn\n$translateProvider.registerLoader(function (dep1, dep2, dep3) {\n    // do something with deps\n});\nHere again, we can invoke the registered loader later on with $Injecotr.invoke()\nPassing depency array with annotateFn\n$translateProvider.registerLoader(['dep1', 'dep2', 'dep3', function (dep1, dep2, dep3) {\n    // do something with deps\n}]);\nFor minification, as you might know. Now this set of forms of loaders makes sense. Passing a promise isn't really possible since we don't have any at configuration time. Setting hash table for translation directly can be done with $translateProvider.translations().\nThe samples above should also all work with a given langkey as first paramter. Tests will follow. :)\nAnother important thing $asyncLoaders is an array containing all registered loaders, whereas a loader looks like the following:\n{\n    langKey: 'SomeKeyGoesHere',\n    loadAsync: annotateFn() { ... } // gets invoked by injector\n}\nThis makes it possible to simply iterate over registered loaders and check for langkey to than call loadAsync function with all its dependecies. If a loader is registered without a key, langKey is then undefined as you can see in the provided tests, and here, and also here.\n. Which loader will be used depends on how somebody registered loaders. Which means, if you register a loader without a language key, the resulting translation table should be the same as registering a translation table via $translateProvider.translations() without applying a langkey (this is actually not implemented yet, since loaders are just getting registered but not invoked). In that case, ngTranslate simply uses the configured translation table, since just one is registered and there isn't any need to make a decision.\nRegistering loaders with a key should resulting the same as registering translation tables with a key, except that you've done it via loader. So you first register a loader for a specific langkey\n$translateProvider.registerLoader('en_EN', ['$http', function ($http) {\n    return $http.get('someUrl');\n}]);\nand then again, tell ngTranslate which language to use:\n$translateProvider.uses('en_EN');\n(which also has to be implemented properly)\nSo, when and how will the loader definition be transformed into a real loader? Now this is fairly simple implemented.\n$translateProvider excepts the loader definitions listed in the comments above. So there are actually three possible loader definitions:\n- A string, which is just a url (if its cross origin, it'll fail)\n- a function with dependencies\n- An array, with the annotate syntax\nSince it's planned to use $injector to invoke these loaders, it's only required to transform the string variant (so, a given url) into a function, which can be invoked by $injector.\n$injector is able to invoke variant 2 and 3 out of the box, so all we have to do, is to transform the string into a valid annotated loader function, which happens right here whereas loaderFn() simply does that. This makes sure that we're passing a valide annotated loader function here.\nThings to notice: If somebody tries to use loader definition we don't support, it's not our fault.\nThe loader function finally gets transformed into an asyncLoaderObject (which provides a langkey and loadAsnyc()) to have a straight interface we can rely on.\nSo actually, the transformation happens on the fly while registering loaders. I think this is a pretty solid way. What do you say?\n. Don't get me wrong, you're using the module within an app.\nJust take a look at the demos provided in the readme file. This is how you use this module.\n. Okay.. just stumbled upon the problem, that there is actually no uses() invokation, if you want to load a translation table asynchronously without specifying a language key.. hmm..\n. Anyways. Started to document the things: https://github.com/PascalPrecht/ng-translate/commit/9dc477c5b2549dc99cbdb8ee2eee5bb2a472a277\n. Turned out, in order to test the code properly #6 has to be done first...\n. Okay so.. currently having the following problem. Say you want to load a language asynchronously without specifying a language key:\napp.config(function ($translateProvider) {\n    $translateProvider.registerLoader('translationTable.json');\n});\nWe actually don't have a place to ping $translateProvider to invoke the registered $asyncLoader. I thought in that case (when there's one loader registered and it no language key is specified) the registerd loader has to be called as soon as possible. And that is, when $translate service gets instantiated.\nHere's a POC code.\nI restructured the tests to get them working with $httpBackend mock. Now, when we want to test, if $translate service fires a XHR to get a translation table, code could look like this.\nThis works, I tested it with a raw $http service call as you can see here. But it doesn't work for $translate service implicit call. I always get an Unexpected GET request from $httpBackend.\nThe reason why this error comes up is pretty clear. Since $httpBackend gets injected (as well as $translate) the GET expectations aren't configured at the time when $translate gets instantiated.\nThis is why it works when making a XHR with $http, since the XHR's get called when $httpBackend is already configured.\nIMO the only way to get this working, is to configure $httpBackend with expectations, before $translate services gets injected. This is only possible at config() phrase. And to be honest, I'm not sure if it's even possible to get a $httpBackend instance at config phrase.\nDo you have any idea how to solve this? I also asked the community.\nIf there isn't a way to test this approach properly, the whole approach of implementing this is probably not the right one.\n. Hey @simalexan! Glad you like it! :)\nSo, regarding the asynchronous loading of localization data: I think the feature will be ready at the earliest next week or so. We've discussed a lot on how to implement this feature to make the API looking good and easy to use and at the same time as flexible as possible. Unfortunately it turned out, that the current spec isn't really testable, so I'm currently considering redesigning the API to get an implementation which is testable.\nBut hey, the more people work on this, the faster it is done! So if you have some free cycles, check out the canary branch and help out! :)\n. Hey @knalli sorry for the wait, having lot of stuff to do with an angular component specification atm. How about a hangout later this day, so we can discuss open questions face to face?\n. > So, I've reviewed the stuff. A little bit to specific and featureless, but later on that.\nif ($asyncLoaders.length === 1 && typeof($asyncLoaders[0].langKey) === 'undefined') {\n  $injector.invoke($asyncLoaders[0].loadAsync).success(function (data) {\n    $translationTable = data;\n  });\n}\n\nI'm still wonder why the conditions $asyncLoaders.length is 1 or unless langKey is defined.\nAnd: Usage of of success isn't optimal because that would disallow any loaders other than based on $http.\n\nYeap that's true. This code isn't production ready at all, it was just a quick condition to test if things work as expected. And in the test I've written so far, only loaders as strings were defined, which ensures that there's a success api, because ngTranslate transforms loaders which are just strings to loader functions with $http dependency. So again, don't take these lines serious.\nAnd if $asyncLoaders.length is 1 AND (not or) no langKey is specified makes sure that the $http only fires, if there's just one loader registered, without a langkey (which is when we want to load data asynchronously on service instantiation).\n$translate.loaders = function () {\n  return $asyncLoaders;\n};\n\nFirst: Why should we expose the internal loaders list?\n\nATM this is only for testing purposes.\n\nIf we make the asynchronous loader definitions more abstract (and flexible), we can actually avoid the problem\nwith $http and unit tests (I understand this correctly: that's the problem right now?).\n\nYeap that's the problem. Couldn't find a why to test our API properly, which made me think if our solution isn't probably the right one. If we have an API which isn't really testable, we're doing something wrong IMHO.\n\nIf we can \"garantuee\" loading of a translation map will be happen, resolving response will be correctly and firing\nevents on data change will be done (btw, still missing this point), then $http will be only an implementation detail. And if the cannot test this one specific piece of code, it will be much less uncovered code that at this moment.\n\nYou're probably right. Let's talk about this.\n. Go for it! :)\n. Whow... bro, you did a lot of work! Think I have to take a deeper look. The origin canary is already up-to-date. Unfortunately I hadn't time to work further on that. Anyways, I'll go through your canary step by step and check the demos. \nMaybe I will do a few changes or so we'll see, but nevertheless, thank you very much for your help on making this module better! :)\nYou get feedback tomorrow! Promised! And thanks again @knalli !\n. Of course master differs from canary :) But everything I have in my local canary clones is in sync with the remote canary. :)\n. And I still think, we have to have a little hangout to discuss some things. I also have some questions. Maybe tomorrow's eve?\n. Code related questions :)\n. Okay, so got the demos running. It seems the implementation is still a bit buggy. I'll now have a look at the actual source.\n. Okay, so your canary branch is almost merged into master. I made a few code changes and cleanup, do you want to take a look at it?\n. Almost done! :) Currently writing tests. I think we have a pretty solid solution right now.\n. Allright, take a look! https://github.com/PascalPrecht/ng-translate/tree/canary\n. Just for the records: here are the docs (WIP) https://github.com/PascalPrecht/ng-translate/wiki/Asynchronous-loading\n. Landed. Thank you very much for your help.\n. Hey, Yea this is common Problem which could be handled with the\n$translateChangeSuccess event. Anyways I also think it would be cool if\nangular-translate comes with a solution built-in. I'm currently preparing\nfor the 1.0 release, if you want to help out getting this down the road\nwith 1.0 please do so!\nOn Jul 21, 2013 7:06 AM, \"skivvies\" notifications@github.com wrote:\n\nJust stumbled on this thread and thought I'd ask, does anyone else\nexperience the issue described in\nPascalPrecht/angular-translate-loader-static-files#1https://github.com/PascalPrecht/angular-translate-loader-static-files/issues/1\n?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/4#issuecomment-21305243\n.\n. Thanks! Will read it later the day.\n. Done.\n. This code:\n\n```\ndescribe('foo', function () {\n    var $httpBackend;\nbeforeEach(function () {\n    module('moduleName');\n    inject(function ($injector) {\n        $httpBackend = $injector.get('$httpBackend');\n    }};\n});\n\nit('should to something', function () {\n    module(function (anyProvider) {\n        // configuring anyProvider for test case\n    });\n    inject(function (any) {\n       // do sth. with any service\n    });\n});\n\n});\n```\nWould break cause $injector is already there.\n. Same here bro. Currently figuring out, how to solve this the right way. I got it working by reducing the module() definitions to just one per describe() block.\nSince we have to configure our $translateProvider different, depending on the current test, the whole test suite has to be restructured to keep the test code as DRY as possible..\nTaking a look at angular's tests help a bit out! :)\n. First implementation landed in https://github.com/PascalPrecht/angular-translate/commit/5bd943fb4832594b6d534722a337659912b85242\n. closing this for now.\n. The service is called '$translate' not 'translate' :)\n. You could also consider taking a look at the provided Demos :)\n. Hey @jamesandres! Thanks for the issue. This is new to me. I'll dig into this now and see what I can do.\n. Okay, also reproduced this issue in another fiddle. Now working on a fix!\n. See tests, should work now. Next, update the demos.\n. Oh and please, leave feedback if there's still something broken. You can install the new ngTranslate version via bower. Simply run:\n$ bower install angular-translate\nCheers\n/pp\n. No, thank you! :) I've never noticed that the directive isn't actually working.\n. @lichtner I already saw such a thing in another implementation for i18n and asked myself, what the hell these \"descriptions\" are, why they were there and for what these are used. Now things become a bit clear. \nSo, I'm not familiar with the gettext implementation, could you give a little example on how these descriptions work and how they're used in theory?\n. Still trying to get it. So when exactly do descriptions come in? Are these checked again something else or something? Or is it just a side information for a translator?\n. If the latter, then yeah.. we could actually implement this context key as additional feature. If I'm getting this right, you actually already have a descriptive translation id, I mean, that should be the case. \nBut maybe there are cases where you aren't able to decide how to name translation id's. In that cases it'd be very helpful to have a chance to get something like a description in.\nSo yeah, why not? :)\n. @knalli Yeap, and this means, context could be anything. And doesn't even be named context since it depends on the tool you use, to get the descriptions...\n. @knalli @lichtner These are just 2-3 lines of code to implement this, without breaking the existing behavior. I'm not sure if there's a performance issue when there's a high amount of translations, since we have to add another check.\n. @knalli If we go with context, it's a 'reseved' word/key I would say.\n. Let's discuss on that here: https://github.com/PascalPrecht/angular-translate/issues/57\nDon't wanna pollute this one here to much :)\n. To be honest, I never thought about namepaces which get resolved later, since ngTranslate tries to provide component/site/app/ independent translations. What I mean is, lets say you'd register a namespace like this:\n'login.submit': 'OK'\nand\n'form.submit': 'OK'\nNow these namespaces make clear what's the goal. But the problem is, you start having redundancy in your translation table. This could be generalized with just:\n'BUTTON_TEXT_OK': 'OK'\nNow you have a translation id which could be used anywhere, application-wide :) no matter if you're currently dealing with a login form or anything else.\nSo, don't try to implement your app structure in your translation table. Your translations shouldn't know, how an app is structured.\n. In which case is an 'OK' not an 'OK'? Maybe I'm getting you guys wrong. I have about 5 years of experience with i18n in BIIIG web apps, and this was always the way to go when it came to translation structure. Okay, sometimes there were redundant translations as well, we fixed this by making a namespace within the name e.g.\nBUTTON_TEXT_CANCEL or MODAL_TEXT_CANCEL...\nIsn't it enough? Let's discuss that in a more detail so we can possibly make a feature request of it. :)\n. In your case: how about just introducing another \"global\" translation ID\nfor \"revert\"?\nOn Wednesday, April 24, 2013, Jan Philipp wrote:\n\nWell, that's my experience. We have a big Ext JS application which had\nbeed translated via more or less one big file, with \"global keys\". The\nproblem is, that both developer and translater have to guess which (global)\nname is the perfect one. Let's say, the dialog is configured with\nBUTTON_TEXT_CANCEL (which will be Cancel, I guess). And the translater\nor the product management or a general UI improvement requires that it\nshould be labeled to Revert in that one dialog. Do you really want to\nchange your functional complete component because of that shitty wrong\nlabel name? :) Described the problem, now multiply the one component up to\n4-500 components. That's why we switched, in this example, our global\ntranslations (which were sometimes already used \"namespaces\") into a\neffective component based translation (de facto component property\noverrides).\nBut anyway: That should be no problem, if we just introduce something like\na small transformer component. Default one is null or return value.\nSimple, and straight forward.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/ng-translate/issues/14#issuecomment-16956851\n.\n\n\n/pp\n. Guys, don't get me wrong. It's not that I don't want to accept your use case. I just want to understand your way to solve the use cases and try to discuss on it to figure out if things can be done better. :)\n. Okay, how about that: We just start with a simple transformer, so that a user is able to register translations with namespaces. Once we have this done, we could consider that fallback behavior @cehoffman knows from ruby.\nAnybody wants to take care of this?\n. @knalli #4 is still in the making! :) I'm currently struggling with making $translate service testable when it fires XHR on instantiation. But it looks like it isn't really testable at all, which make me think of redesigning this feature, or at least, leave it of for non-multi-lang configuration.\nCheckout the current canary branch for the latest state.\n. #4 just landed in 0.6.0. Lets push this namespacing thing forward.\n. > After this, I would introduce an optional argument:\n\n$translate.registerLoader('locales.php', function (data) {\n // the default but this could be changed\n return data;\n});\n\nWhat is this second argument for?\nIt think we should make translations() to take care of that. All we actually have to do is to implement a namespace function, which one can find about a thousand times in the interwebs (actually your flatObject kinda sorta).\nSo registerLoader() doesn't have to know anything about any kind of namespacing. \nAnd then we also use it internally to set translation data when loading asynchronously.\n. No, just that translations() take care of namespacing. \n. Everytime translations() gets called. Which is either at config() phrase or implicit via $translate when an asynchronous loader is invoked.\ntranslations() should be able to detected that there are possibly dots in a translation id, which then rolls out the namespace function. \n. So e.g.:\n$translateProvider.translations({\n    'my.namespace.foo': 'Some text'\n});\nwill actually result in:\n$translationTable = {\n    my: {\n        namespace: {\n            foo: 'Some Text'\n        }\n    }\n};\nAnd this right here: https://github.com/PascalPrecht/ng-translate/blob/master/ngTranslate/translate.js#L136\nWouldn't be a an explicit assignment anymore. We'd then call translations() in that case. Which again, takes care of namespacing.\n. Anyway, the whole feature only makes sense with the fallback feature.\n. So regarding that namespacing thing.. how shoud it behave? Consider the following registered translations:\n$translateProvider.translations({\n    'componentA.form.label': 'foo',\n    'form.label': 'bar'\n});\nLets say in view we do something like:\n<label translate>componentA.form.label</label>\nSo, this becomes:\n<label>foo</foo>\nAnd this is already working without having a real namespacing functionality. Now what about the fallback? Say we do in View something like this:\n<label translate>componentB.form.label</label>\nDoes this get translated to the value of form.label translation id as fallback, or should ngTranslate search for a translation id called componentB.label ?\n. Ah! So this is the inital translation table and should be flattened when coming into ngTranslate?\n. Okay, now I have to re-read the whole conversation first :D\n. I'm with you now. \n. Haha, also implemented a feature to solve this: https://github.com/PascalPrecht/ng-translate/commit/df26f6bdb794829c93f9337c7c4bee4cf4c2773b\n. So, your solution auto detects namespace, whereas my solution let you add a transformInterceptor for whatever you want... hm.. I think we should wait for @cehoffman 's reply.\n. Sorry bro, I miss understood the whole issue from the beginning, until you made things clear. Didn't think you stay with this concrete flatobject thingy. :D\n. So, coming back to real business.. do we just want to expect possible namespaces, or do we want to provide a transforminterceptor which can do anything with the data? I'd prefer transformInterceptor because of the flexibility. But it extends the API.. whereas the concrete namespace detection just rocks under the hood, without noticing..\n. Yeap. I also thought that transformInterceptors could work as similar to $httpProvider's response interceptors. Anyways, we could also just merge the auto-detection and add support for chainable transform interceptors afterwards if ever needed.\n. Great. So I'll merge https://github.com/PascalPrecht/ng-translate/pull/28\n. Landed as 5279be3\n. Hey @lpaini! I've already planned to build support for ng-pluralized, but we're currently working hard on #4 . So, if you have time, and want to get this in as soon as possible, feel free to contribute! :) \n. I wonder if there's a way in angular to detect a specific directive on a custom directive and execute its functionality. Then we could just do something like:\njs\n$translateProvider.translations({\n    'NO_BEER': 'No beer.',\n    'ONE_BEER': 'One beer.',\n    'TWO_BEERS': 'Two beers.'\n});\nhtml\n<ng-pluralize count=\"2\" when=\"{ '0': NO_BEER', '1': ONE_BEER', '2': 'TWO_BEERS'}\" translate></ng-pluralize>\nOr we say, we try to detect an ng-pluralize within another element which gets actually translated:\nhtml\n<p translate>\n<ng-pluralize count=\"2\" when=\"{ '0': NO_BEER', '1': ONE_BEER', '2': 'TWO_BEERS'}\"></ng-pluralize>\n</p>\nTherefor we have to make sure, that ng-pluralize is executed before translate directive. I tried something like that by manipulating translate directives priority but it didn't work.\n. Okay turned out this topic is pretty hard. Could we first of all find a solution which does.. at leat a bit of the job? I mean it doesn't have to be the master solution at all, it'd be awesome enough if we could provide a solution to use ngTranslate and pluralization in at least some cases?\nWhat do you guys say, is it possible? @knalli @mormegil-cz \n. I'm still wondering, if getting a combination of ng-pluralize with angular-translate working, isn't and option. \nAnd something like\n\nHow would you do \u201cX comment(s) by Y user(s)\u201d with this? \n\nCouldn't this actually be achieved using the offset property? Or am I getting that whole thing wrong?\n. So how should happen with this one. Thinking about to put that one into a 1.1.x version or so, so 1.0.0 can be released soonish.\n. @lpaini Pul requests are ALWAYS welcome! :)\n. I now took a deeper look at Alex Sexton implementation of messageformat.js. The implementation looks good so far, I could think of a kind of adapter system to let angular-translate plugin onto messageformat.js. This would give angular-translate the full functionality of messageformat.js and still, keeps the core small.\nI'll play little bit with it this week and keep you updated.\n. Okay, I played with messageformat.js. The following thoughts came up:\n1) messageformat needs, just like angular-translate, a translation string to be translated, so\njs\n$translate(TRANSLATION_ID); // returns translated string\nis corresponding to\n``` js\nvar mf = new MessageFormat(locale); // pass in what ever your locale is\nmessage = mf.compile(TRANSLATION_ID);\n// executes compiled translation function\nmessage();\n```\nangular-translate uses interpolateParams to dynamize values in translation strings, like this:\njs\n$translate(TRANSLATION_ID, { foo: 'bar' });\nMessageFormat has a similar approach, except that it expects the values when (link)function is executed:\njs\nmessage = mf.compile(TRANSLATION_ID);\nmessage({ foo: 'bar'});\nSo, as you can see, both behave pretty much the same way, except that MessageFormat provides a much more flexible way of interpolating values against some values.\nI thought, this is cool we could provide a way to just use messageFormat to translate a given translation id. Given translation values through values directive could just pass trough (link)function of messageFormat.\n2) After a few minutes I thought, we could extend that whole thing with a little interceptor system. Users could be able to add pre/post transformInterceptors to do something with a given translation id before or after something happen. With that in mind, the messageFormat lib could just be adapted with an interceptor service, which you could plug onto angular-translate.\n3) Having an interceptor system is actually awesome, but when I was thinking about that, it turned out that the use of messageFormat isn't actually a way of intercepting something. Using MessageFormat within $translate() is actually more the use of a different translate engine. This means, we have to check within $translate() if messageFormat lib should be used or not. And if so, a translation id has to be translated through generated (link)function of message format, rather than passed through angular-translate's own translation engine.\nThis is why I come up with the following proposals:\n1) First, we shoud definitely make use of messageFormat, since it solves all our problems. The lib is quite big and since not everybody wants to have it, we should make it pluggable into angular-translate. We could have a method like $translateProvider.useMessageFormat(). This would tell $translateProvider to expect a $translateMessageFormat service, which adapts messageFormat. In addition to that, we need a few more methods, to configure this adapter service, since messageFormat instances get instantiated with a locale string.\n2) Now, when we implement a system to get messageformat into angular-translate world, we should evaluate, if messageFormat is present, if angular-translate still should rely on on its own translate engine, or if it then should only use messageFormate to take care of translations. Another way would be to only use messageFormat when a translation id with a pluralization comes in. This would mean, we have to recognize in some way that the current translation id which should be translated, is a translation id that has pluralization in it.\n3) Thinking about using one translation engine or another, we could also pull out angular-translate's own translation engine and make use of that as a default service. Users could then make use of own translation engines, for examples a messageFormat translation engine. This keeps the whole infrastructure very flexible and if someone just want to use angular-translate as it is, he/she could do so, since we provide a valid default behaviour.\nWhat do you guys think?\n. A replacement.\n. It actually wouldn't make any sense to re-implement messageformats functionality in angular-translate. But this is exactly the functionality we need. I'm currently working on a feature branch which shows how we could implement this. I'll pull out the translate engine and let the user decide, which one to use.\n. @saabi yeap.\n. Here's what I'm talking about: https://github.com/PascalPrecht/angular-translate/commit/5d8cb5675d2826572ac01ffa4b2d5fb40444b53f\n. Going this way, we could now easily plug other interpolation methods on it. I could imagine an extra $translateMessageFormatInterpolation service, which is actually a messageFormat wrapper. Then, we could have a provider method like $translateProvider.useMessageFormatInterpolation() as shortcut method, which internally uses $translateProvider.useInterpolation(factory).\n. Any thoughts?\n. Here is an interpolation adapter for messageformat https://github.com/PascalPrecht/angular-translate-interpolation-message-format/blob/master/src/translateMessageFormatInterpolation.js\nNow test integration with angular-translate\n. Here we go, pluralization in angular-translate: https://github.com/PascalPrecht/angular-translate/commit/5596e8bcf4851109cabb8b5a4b1e9c86fc2d1404\nOf course, the code needs some finetuning. Interpolation services actually need a provide to configure initial locale n stuff like that.\nWhat do you say?\n. I would like to leave a few thoughts on this approach:\nThe advantages\nMaking angular-translate's interpolation engine replaceable, gives us high flexibility when it comes to different interpolation implementations. With that solution we're now able to use messageformat to take care of our translation interpretation, which is great because we can now use translated contents containing pluralization.\nAnother good thing is, just like @saabi said, if someone comes up with a smaller or similar, or maybe a totally different, implementation of interpolation which can handle pluralization, one could easily plug it onto angular-translate and use its whole features.\nThis means also, people can use angular-translate and don't have to worry about pluralization, once this lands in master. Now, if we find a solution to implement a kind of pluralization inside angular-translate default interpolation (which is currently just angular's), we can extend it if we want. But til then, people are already able to have pluralization.\nUnfortunately (like all things in the world), this approach also has some drawbacks.\nThe disadvantages\nUsing another interpolation implementation then angular-translate's default also means, we lose a few cool features. Things like angular expressions can not get interpolated as they have to e.g.\njs\n$interpolate('Hello, I have some interpolation directives in me! {{ 5 + 5 }}')();\n// returns 'Hello, I have some interpolation directives in me! 10'\nWhereas messageformat's interpolation implementation isn't able to evaluate javascript expressions at all:\njs\nmf = new MessageFormat('en');\nmf.compile('Hello, I have some interpolation in me! { 5 + 5 }')();\n// wouldn't work!\nAs you can see, not only that messageformat does not come with the features angular's interpolation provide, it also has a different syntax.\nIn addition to that, angular's filters would also not work within translations when using messageformat interpolation.\nI really like the feature to plug messageformat onto angular-translate, but these drawbacks are bit hard, since we're building angular apps. Building angular apps without angular features feels weird. So I thought about that and came up with the following solution.\nThe Solution\nBasically, the idea is to use messageformat interpolation like this:\n``` js\nangular.module('myApp', ['pascalprecht.translate']);\nangular.module('myApp').config(function ($translateProvider) {\n  // tell angular-translate to use messageformat interpolation instead of default interpolation\n  $translateProvider.useMessageFormatInterpolation();\n// register translations using message format syntax\n  $translateProvider.translations('en', {\n    'HELLO': 'Hello there! MessageFormat {value}!'\n  });\n// tell angular-translate to use 'en' as language\n  $translateProvider.preferredLanguage('en');\n});\n```\nAnd in HTML we can simply use angular-translate directives and filters, but with messageformat interpolation syntax:\n``` html\n filter usage \n{{ 'HELLO' | translate:'{ value: \"style\" }' }}\n directive usage \n\n```\nSo nothing changes on the highest level when it comes to usage.\nNow again, when using messageformat interpolation we have to stick with it through the entire app when it comes to i18n. To get around this, I think it'd be cool to 'override' the used interpolation implementation for specific translations.\nLet's say we have a translation table like this:\njson\n{\n  \"ONE\": \"This uses angular-translate's default interpolation\",\n  \"TWO\": \"This uses messageformat interpolation\"\n}\nThen in HTML we need a directive to tell angular-translate to use a different interpolation for that specific translation id:\n``` html\n{{ 'ONE' | translate }}\n\n```\nThis would mean you're able to set an interpolation style application-wide by using $translateProvider.useWHATEVERInterpolation() and when having a translation id which uses a different interpolation style, like in the example above, one could override it for that specific case.\nWith that approach one is able to further use angular's great features when it comes to interpolation, but also able to use strange pluralization cases with messageformat or any other interpolation implementation.\nThings that have to be clarified then\nNow, when we decide to implement it that way, we have to clarify a few things:\n1) How does angular-translate know, that translate-interpolation=\"messageformat\" means, it has to use MessageFormat and not the default interpolation (or anything else)? So we probably have to extend the structure of an interpolation service and have to expect a provider or something which has a method to tell angular-translate that that specific key messageformat maps to $translateMessageFormatInterpolation. Because if there's another interpolation implementation X the usage would probably look like\nhtml\n<p translate=\"THREE\" translate-interpolation=\"X\"></p>\n2) If we say, we could have different interpolation styles at runtime, it'd be useful to not only provide a way to use just one (default) or another (maybe messageformat). Maybe there's a case when someone needs the interpolation of messageformat and in addition to that, he/she has translation id which uses just another interpolation, which means there are actually three kind of interpolation styles.\nSo it could be a good thing to teach angular-translate not only to override the interpolation style for specific translation id's, but also to not be limited to two interpolation styles. A user would tell which interpolation style to use application-wide by default and in addition to that he could add different interpolation engines which could be used in specific cases. This could be done with some thing like this:\n``` js\n$translateProvider.useMessageFormatInterpolation();\n// or\n$translateProvider.useInterpolation('customInterpolationService');\n// or if non of them, it'd use default interpolation\n// add additional interpolation styles which could be used in the app\n$translateProvider.addInterpolation('anotherInterpolationService');\n$translateProvider.addInterpolation('fooInterpolationService');\n```\nIn HTML translate directives and filters will use the interpolation which is configured as default, but could also use another one if needed.\nNow I need YOUR thoughts on that. @knalli  @lpaini  @DWand \n. Hey @Narretz, just like described above you would use angular-translate as you always did, but you're able to use different interpolation syntax within translations.\n. @knalli unfortunately not, which is why I came up with our own interpolation-hooking-system to give users any way of interpolation they want to use in their apps.\n. @knalli :) !\nYea that's a point we have to clarify. So first of all, I think we should say that an interpolation service has to provide a provider with specific methods, which angular-translate uses.\nFor example, messageformat actually need a locale when requesting an instance of it. So you have something like:\n``` js\nvar mf = new MessageFormat(locale); // 'locale' could be 'en', 'ar' or whatever\n// then you're able to compile translations with that locale in mind\nvar message = mf.compile('Some text which uses pluralization rules of arabians so we need a 'ar' mf instance here');\nmessage();\n```\nSo first I thought, yea we need a provider to set a locale so the interpolation service is able to instantiate it accordingly.\nBut this isn't a solution at all, since angular-translate is able to change locale during runtime, which means in the case of messageformat, the interpolation service has to be able to manage different instance of messageformat depending on the current used locale (which currently happens here: https://github.com/PascalPrecht/angular-translate-interpolation-messageformat/blob/master/src/translateMessageFormatInterpolation.js#L17).\nAs you can see, this is also not a cool thing, since the service has to check each time it is executed.\nWhich is why I think we have to find a way to let an interpolation service know, that a language has changed. There are two ways to solve that:\n1) We not only have an interpolation service which returns a function which does interpolation. We could say that an interpolation service has to return an Interpolator or so, which has an interface to set a locale. The Interpolator has also a method to interpolate things like Interpolator.interpolate(string, interpolateParams); which locale is actually used by Interpolator.interpolate() depends on which locale is currently set through Interpolator.\nWith that we can extend $translate.uses() that it uses Interpolator.setLocale() or so, to set a locale, then, later in $translate() when Interpolator.interpolate() is executed, the services knows, which locale to use. The Interpolator(Provider) could also have a method to return a \"key\" which is used by angular-translate to resolve a mapping. Which means, in time when $translate gets instantiated, it has to collect all interpolator identifiers first (if there are any).\n2) The second way to let an interpolation service know, if a language has changed, is to expose language key (or locale) on $translationChangeSuccess event or so.\n. Yea it's just a matter of how much do users/interpolationBuilders have to care. They either have to provide a method that angular-translate is able to set a locale, or they have to take care of that by themselfs by listening for $translateChangeSuccess event.\n. I would say it's the best to keep the interpolators as dumb as possible. Saying, they just have to provide a method to set a locale and angular-translate takes care of which will be set. Since it also knows about the fallback language.\n. Landed in extract-engine.\nService implementation: https://github.com/PascalPrecht/angular-translate/commit/5e20e243bae43e70c75714f1d037f1916b33447c\nFilter implementation: https://github.com/PascalPrecht/angular-translate/commit/46f03ccd6aa132bb97259251b297fc2d0f714c6d\nDirective implementation: https://github.com/PascalPrecht/angular-translate/commit/bf3dbbbd0165bf7b4620d9aedf171d5767eaadad\nIn the tests you can see how an interpolation service has to look like. These things have to follow:\n- [x] set locale of interpolation service when language has been changed\n- [ ] provide proper error handling when adding uncorrect interpolation services\n- [ ] documentation\n. Interpolators now get informed when they have to change their locale, or actually angular-translate takes care of it: https://github.com/PascalPrecht/angular-translate/commit/e59b141bc0785d6f0a44a7b454016e370f6f62e4\n. Landed in canary now. Play with it, if you want to.\n. Hey @DWand !\nYou got that thing partyl right! So the point is the following:\nangular-translate uses default interpolation ($interpolate service) to interpolate translations against values. To bring pluralization to angular-translate, we want to use MessageFormat.js. MessageFormat uses a different syntax. So you have to decide to either use the one or the other syntax by configuring $translate service through $translateProvider.\nIf you do nothing, $translate services uses its default interpolation (which is actually angulars $interpolate service). If you say $translateProvider.useMessageFormatInterpolation() $translate service would use another interpolation service. By using messageformat interpolation, we lose angular's features in its interpolation syntax (filters, expression evaluation etc).\nSo, just deciding to use one or another interpolation is not good, because once you have a translation which requires pluralization and therefore messageformat syntax, you have to make a switch and all other translations have to be updated.\nWhat we need is a way to say: \"angular-translate, please use this interpolation service when translating contents application-wide, but in certain cases, use another one (e.g. messageformat).\"\nSo what you do is $translateProvider.addInterpolation('$translateMessageFormatInterpolation'); . This does nothing but telling angular-translate that there is another interpolation service, which could be used.\nNow, you app would use the default interpolation by default and in the cases, where your translation needs messageformat syntax, you can override the used interpolation service with translate-interpolation.\nOf course, this would mean you have to know, which translation id uses messageformat syntax. But you already know which translation id you have, so this isn't a real drawback.\nDoing it like this way let users use angular-translate just like they always did, and on top of that, they can use messageformat syntax to achieve pluralization (done right).\n. How should the sequentially invokation of interpolation services work?\n. @DWand useMessageFormatInterpolation() is just a shortcut for this specific interpolation type :) angular-translate would have built-in support. useInterpolation() is also implemented, for custom interpolation services :)\n. Okay I will close this issue now as resolved, since we have a solution using messageformat and an interpolation service replacement. The feature already landed in canary, you guys rock!\n. @tamtakoe also interesting! :)\n. Hey @lpaini ! Thanks for the PR :) This is a fix I'd definitely merge in, since the if-construct has to be there anyway. Nevertheless, please make sure you're follow coding conventions described in .editorconfig. Also, please read the 'Submitting Changes' section of the Contributing Guide to make sure, we can generate conventional changelogs. :)\nCheers!\n. Oh and BTW: sending the PR to master branch is currently totally okay, since canary has much more unstable stuff in it. Have to clean that up.\nTravis CI is also breaking, since there's a problem with the angular bower package. Once this is fixed and all tests are passed and you're following the code and git message conventions, this will land in master! :)\nThanks again.\n. Hey @josefjezek ! Unfortunately, I have no idea since I'm not very familiar with search engines and how they work. But you might consider reading this article and decide for yourself if it's possible to make it search engine friendly or not. :)\nIf there's anything which could be done better for this topic, please let me know :)\n. Closing this for now\n. What do you mean? The ngmin task gets executed before somebody get his hands dirty on ngTranslate. It's just for development purposes.\n. Which means, if you use ngTranslate, the source is already annotated :)\n. Yeah, so as long as you develop on ngTranslate and just use watch task, nothing happens. When you're ready to generate a production ready files, you'd run grunt build which concatenates the source, runs ngmin on it and uglifies it afterwards.\nIn the end you have to files. Both are annotated.\n. MERGED\n. Actually, I don't like these kind of comments. As long as we write self-explaining code (and thats why we have to keep interfaces clean and simple), these comments aren't needed.\nAlso, am I getting it right, that you can generate a doc from these comments? IMO private stuff shouldn't land in a public documentation.\n. Ah, don't get me wrong.\nOf course its open source, and every single PR is gold. Nevertheless, things have to be discussed. :)\nRegarding the doc generation. I really want comment based doc generation in ngTranslate. But I actually mean documentation which describes the public interface. Not the internal processes, since nobody really should care about that.\n. Okay, I leave this pending until I know, which form of doc generator should land in ngTranslate\n. @knalli This looks actually pretty cool http://www.explainjs.com/explain?src=https://raw.github.com/knalli/ng-translate/a394a1a7cd7400437a69f4b8271c63c095ebb5b2/ngTranslate/translate.js\n. And again, explainjs is for internal documentation. What we actually need is an API documentation. I still waiting for an npm ng-doc module which knows what services and directives are.\n. This is what I want: https://github.com/gitsome/docular?source=c\n. Documentation landed here: https://github.com/PascalPrecht/ng-translate/commit/b1efbca849587d969da6d92983df8c2eaf03f3ac\nClosing this for now.\n. Woot?\nIn which case get invokeLoading invoked, when $asyncLoaders[0] is undefined? invokeLoading should only be called, when a loader exists. Then $loaderBuilderFn is always truthy.\n. Yeah because we just expect when a table is requested which doesn't exist, it should be done asynchronously. Otherwise you'd try to get translations from a language which isn't there and never will be. And that's, in my opinion, the developers fault.\nSo actually, $loaderBuilderFn should always be truthy. In cases when it's not, this isn't just used the right way.\nOr what do you think?\n. Then he just registers translations via $translateProvider.translations() and the translationtable is always there.\n. Invalid translation id?\n. I mean, could you post the application code, which causes the error you've posted?\nI'm just thinking about if ngTranslate really has to take care of errors which only appear when someone is just doing it wrong...\nBut yeah, maybe I just don't get it. Again.\n. MERGED!\n. This is actually a pretty cool feature! Thanks for the PR. Please read the contributing guide and move that PR to the canary branch :) Also consider the right conventions for git messages. \nOnce these things fit the spec and tests are running green, this will land thankfully in master branch! :)\n. And thank you very much for contributing!\n. Okay so, merging this in for now. Waiting for your tests then! :) Thanks \n. Thanks @DWand ! Glad you made a PR, will look into this now! :)\n. I really like that one :) @knalli What do you say? I think we can merge it in.\n. Let's say you already have a cookie stored with a de_DE key, and code says $translateProvider.uses('en_US') where no translation table is available yet.\nWhat happens is, that in the time when $translate gets injected, it auto-invokes the a loader with the en_US key. After that, ngTranslate's run() method will be called, which looks, if there is any key in $cookieStore. Now, when there's a de_DE key in $cookieStore ngTranslate uses that over what is configured before using $translateProvider.uses() .\nThis again, would auto-invokes a loader with the de_DE. Now two translation tables have been loaded. But you just wanted to load the one for en_US.\n. Awesome.\nAnd yeah, probably it's nearly the same you did with DEFAULT_LANGUAGE_KEY a few commit cycles ago, but this PR provides a nice API.\nRegarding Travis CI. If it's not merging without conflict, I'll resolve them :)\n. Merged this in. Tests have to be fixed.\n. Done.\n. > constant means that it cannot be changed at all\nThis is true. And that's why the key is registered as constant. It should not change at all.\n\nthe name of this constant does not represent a trues, because a local storage might be used instead of cookies\n(so, it's not a COOKIE key, but storage key, language key of something like that)\n\nAlso true, we should change the constant name. Sth. like STORAGE_KEY or so.\n\nFor example, it might be useful to provide a better integration with a server side of the app (in case of cookies storage).\n\nMaybe I don't get it. But I'd say, no.\n. Okay, there might be some use cases, but making this possible means we have to change the current $COOKIE_KEY behavior. Currently it's a constant. To make it changeable, it has to be at least a value().\nBut registering this key as a value service don't let us change it at later time, since its just an injectable value. \nThis means, we have to revamp the whole thing and provide an interface to set and get the storage key. I'm actually not sure if this is really what we want.\n. So it looks actually quite good. How about some tests and a PR?\n. Looking forward to it! :)\n. :+1: \n. Hey @mycortguitar! This is true. The package endpoint is broken. And this for a long time now. Still waiting for a fix or remove by the bower team.\nThis is why documentation says:\n$ bower install PascalPrecht/bower-angular-translate\nI'll change that once the endpoint is fixed!\n. Yeah, see https://github.com/angular/bower-angular/pull/15\nAnd glad you like it! :)\n. Awesome! \n. :) !\n. Bower component name is now fixed.\n$ bower install angular-translate\nshould work now.\n. MERGED!\nThanks bro!\n. Actually there isn't a case where translations get added at runtime. Or do you have a concrete case?\n. Think we have to try it out. But its also possible, that service instances can be configured per module. Otherwise, why registering different translations for different modules? You could just register one translation table for one module, which depends on the other both.\n. And of course, it shouldn't be a problem to extend the functionality of translations.\n. Yeah if we say we have one main module, which actually depends on 2 sub module it could look like this:\n``` js\nangular.module('main', ['ngTranslate', 'sub1', 'sub2'], function ($translateProvider) {\n    $translateProvider.translations({\n        'foo': 'Hello world',\n        'barfoo', 'foobar'\n    });\n});\nangular.module('sub1', []);\nangular.module('sub2', []);\n```\n. You actually don't have to. These 'other' translations also have to be registered in 'main'.\n. But yeah, this'd mean that the sub module only work well when they are the dependency of main...\n. > The result is that only foobar \"survives\" or I am doing it wrong?\nIf you've already tested this, we definitely have to implement the extending behavior.\n. Angular itself comes with an extend() method. :) \nWe try to leave this module as dependency-less as possible :)\n. Landed in canary as 8e3a455\n. You're welcome! It'll released in master in version 0.7.x which will be there soonish!\n. See https://github.com/PascalPrecht/ng-translate/issues/31\n. Bower component name is now fixed.\n$ bower install angular-translate\nshould work now.\n. Without thinking about if its possible or not. I actually don't like this kind of translation id definition. You actually make your first language be used as translation id's which is definitely not cool.\n. @jamesandres I definitely feel you. It might just be the fact that I'm not familiar with this kind of translation id definition. Just keep in mind, I've built this module with the experiences and things I've learned in the past. And yeah.. there were just 'Tokens' the way to go.\nAnother disadvantage is probably the case, once you've translated your app with this kind of translation id definition, what if you want to change that and have another language as first language?\nSure, if your solution comes with the feature to just set a first language and ignore what actually stands in the document, then you're fine.\n. And if it turned out, that implementing this isn't actually that hard, I have definitely no problem to let this land in ngTranslate.\nHighest priority is to make users happy :) That's why I'm trying to realize your wishes as much as possible :)\n. @knalli \n\nHello {{name}}! will be complicated in Angular, won't it?\n\nIt depends. I would say it is at least possible to accomplish that. We have to manipulate the compile behavior and let the translate directive not auto-compile its contents. Then we're able to replace it's contents before string interpolations get evaluated.\nBut that's just theory. \n. @jamesandres in those cases I used the translate filter in combination with ng-bind-html-unsafe. So this:\nhtml\n<span translate>Welcome to my <em>Angular</em> app.</span>\nbecomes this:\n```\n$translateProvider.translations({\n    'TOKEN': 'Welcome to my Angular app.'\n});\n// and in view\n\n```\nHowever this wouldn't work with 'Human strings' ...... \n. Okay then! :)\n. Landed, thanks a lot @knalli \n. Thanks @knalli ! git bisect is very powerful when it comes to bug searching :)\n. Suhweeeet! I restarted the travis worker. Everything's green now.\n. This looks soo good! <3\n:) thanks a lot!\n. Could you also update the contributing guide accordingly?\n. Puh.. sorry guys, only running jshint on build task. Forgot to watch.\n. Hey @firehist where does this error appear? In browser console, or is it an http server which is served by ng-boilerplate and the error appears in your terminal?\n. @marplesoft hm.. looks like one has to mock the loader away.\n. @marplesoft Maybe a more updated snippet would help out more: https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/service/translate.spec.js#L439\n. @marplesoft @DWand @knalli Okay, so it turned out that it's pretty hard (or probably not even possible) to test angular apps that make use of angular-translate. The problem is clear. As soon as a module configuration uses a loader, it gets invoked as soon as $translate service gets instantiated the first time.\nWhen writing unit tests, this is indeed a chicken and egg situation, since the XHR (if the loader does one) gets called implicit rather than explicit. Which means one doesn't have any control over the execution of the loader since it just depends on the first instantiation of $translate service.\nTo be honest, I haven't written an app that uses an asynchronous loader yet, so I also didn't need to write any kind of tests for such case. But I see the problem. Once you load your app module into your tests via beforeEach(module('myApp')); and that particular module declares the usage of an asynchronous loader that makes an XHR, there's no way around to stop the loader from being invoked at least when until the first inject() call within a spec block.\nI'm not sure, but I wonder if it is possible to do something like:\n``` js\nbeforeEach(module('myApp', function ($provide, $translateProvider) {\n    // we're now within config() phase\n// let's build a fake loader\n$provide.factory('customLoader', function () {\n   // loader logic goes here\n});\n\n// maybe this would override the loader configuration from `myApp` ?\n$translateProvider.useLoader('customLoader');\n\n}));\nit('should do sth.', function () {\n    inject(function ($translate) {\n        // $translate service gets injected the first time, and loader is called\n        // I wonder if now customLoader is called, or if its still the one configured\n        // in myApp.\n    });\n});\n```\n@marplesoft would be great if you could test this. If this work, we would have finally a working solution.\nOtherwise, we probably have to introduce a new method that kicks of an asynchronous loader explicitly.\n. @marplesoft What's the problem with a after-every-test tear down of the module, as long as your module overrides a the used loader? This should actually be the solution. That's why things are wrapped in a beforeEach(). \"Before each spec, please make sure to use the custom loader, which does NOT load translations asynchronously from a remote server.\"\nSo you actually don't want to hold a state from one test to another, instead what you actually want is to setup a fresh new environment for each spec aka each it() block. So if the code above overrides myApp module configuration for the test environment for each test, this is exactly what we want. Have you already tested it?\n. @marplesoft Maybe I get you wrong, but just doing \n``` js\nbeforeEach(module('youApp', function config(provider1, provider2) {\n}));\n```\nShould already do the trick. There's no helper function needed.\n. @marplesoft regarding the perf. This shouldn't be a problem. Karma is really fast. angular-translate currently has around 300 tests. They all get executed within 1 sec.. Pretty sure you won't waste time :)\n. Yeap perfect.\nOn Oct 11, 2013 7:20 PM, \"marplesoft\" notifications@github.com wrote:\n\nI created a branch of that example project that uses the helper function I\nmentioned. It seems to work fairly well. See what you think.\nhttps://github.com/marplesoft/unitTestingExample/tree/moduleHelper\nIn particular, see the following files:\nHelper function that sets up in-line translations (either default or a map\npassed in: Codehttps://github.com/marplesoft/unitTestingExample/blob/moduleHelper/test/helpers/moduleHelper.js\nUse of the helper function in a unit test that does a sanity check of the\ntranslation system: Codehttps://github.com/marplesoft/unitTestingExample/blob/moduleHelper/test/translationSpec.js\nUse of the helper function in a unit test that has nothing to do with\ntranslation - just uses default (empty) translations: Codehttps://github.com/marplesoft/unitTestingExample/blob/moduleHelper/test/additionServiceSpec.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/42#issuecomment-26154708\n.\n. Could you, just for testing purposes, change your helper to use a custom loader which doesn't make an XHR?\n. @emiaj Thanks for sharing your insights!\n. I'll provide some documentation in a later release about this topic. Closing this now.\n. Pinging @DWand here, thanks @x057 for the input!\n. @gjungb Yeah, good catch! Will merge it in soonish!\n. @gjungb it does matter! The PR looks pretty fine.\n. @gjungb Could you please consider the Contributing guide and fix your commit message?\n. @gjungb Welcome to the world of milk and honey :)\n. MERGED!\n. For example?\n. It'd be great to get more details on what you've posted. \n. This is of course a pretty cool approach of handling several handlers for errors and success, but I'm not sure if this is currently really required.\n\nIf you want to, you can go ahead and implement this in canary. Otherwise, I'd just implement something like useMissingTranslationHandle('serviceString') or so, since this is currently totally enough.\n. Implemented this in https://github.com/PascalPrecht/angular-translate/commit/f6ed3e38f95efbf8c1c4a0ebe05801d9279738d0\nWill merge it into master later today. Last chance to review!\n. Landed in master.\n. Any other warnings or errors in your console?\n. @mboriani and which examples did you try?\n. Ah okay. The MIME mismatch. This is because I'm requesting the source file as raw plain text source files from github. Did you try to use ngTranslate in a local project, where ngTranslate and angular get included from the same server?\nDoes that work?\n. @knalli Yeah, github just posted about that a few days ago. I'm having the same issues in chrome canary (which is my main browser).\nBut rawgithub.com looks actually pretty cool.\n. @mboriani do so! :)\n. @mboriani Great. I've now updated all plunks to use the rawgithub.com service. So they should work in all browsers now :)\n. The code is documented well enough. If we really wanna provide a demo folder, then we should at least re-structure it by example.\n. I'm okay with that. So, demos have to be re-structured.\n. I've updated the issue title.\n. Nope. I would simply go like\ndemo\n| - example1\n| - example2\netc.\n. @DWand thanks a lot man! Like @knalli said, the file names shouldn't contain whitespaces. Replace the whitespaces with underscores, and I'll merge this soonish into canary :)\n. MERGED\n. See https://github.com/PascalPrecht/angular-translate/issues/31\n. And please lemme know, if you got it working!\n. You're welcome @skivvies ! :)\n. Everything's cool :) And yeah, I hope that too!\n. Bower component name is now fixed.\n$ bower install angular-translate\nshould work now.\n. ?\n. @DWand If you have another demo which isn't covered yet, feel free to add it :)\n. Hey @devreq ! First it would help if you could try the same with a non minified version of angular, so one can check where exactly the issue appears.\nHowever it doesn't really look like that this is a problem with angular-translate itself. \n. I also never used angular-translate in combination with require.js so lets see what comes out!\n. @devreq Hello there?\n. If you guys can verify that this an issue with batarang in combination with\nangular-translate, we can reopen this one.\nSo how does it come that you think this is a batarang issue?\nOn Wednesday, May 29, 2013, Marius Soutier wrote:\n\nYes, it's certainly Batarang.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/52#issuecomment-18613589\n.\n\n\n/pp Sent from Gmail Mobile\n. And also only in combination with requirejs or just batarang?\nOn Wednesday, May 29, 2013, Marius Soutier wrote:\n\nI don't know how, but it's just as simple as \"Enable batarang -> error\",\n\"disable batarang -> no error\", which is a shame because Batarang is\nextremely helpful, and so is angular-translate.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/52#issuecomment-18631831\n.\n\n\n/pp Sent from Gmail Mobile\n. :+1: MERGED\n. You rock! :)\n. @lichtner regarding this one: https://github.com/PascalPrecht/angular-translate/issues/13#issuecomment-18109076\nThis would mean, everytime you have a namespace context and don't actually mean 'our' context you have to make a hash of it, which has a text key. Could look a bit weird right?\n. @knalli Agree with you. @lichtner do you have already such a tool, which collects translation ids and show up descriptions in some way? Or do you plan to build one? \nIf there's already a tool, it'd be interesting what it actually expects to get descriptions out of translation tables (something beside gettext, something with UI 'n stuff like that, for the translator you know :) )\n. We get some conflicts with a kinda reserved keyword like context which only makes sense in a object hash which has to be detected by angular-translate, since $translateProvider.translations() is also able to understand namespaces.\n. @DWand In both, a) and b) you don't have any connection between translation-id <-> context <-> translation\n. @lichtner But no matter what, you need this context feature?\n. This is where it's getting tricky. This would just be resolved to:\njs\ndialog.title // 'Form'\ndialog.context // 'Context'\ndialog.text // 'Please confirm...'\nNow, when actually wanna have context for a specific translation id you would do something like this:\njs\n.translations({\n   'dialog': {\n        'context': 'This is a description',\n        text: 'This is the actual translation'\n    }\n});\nSo this:\njs\n  \"dialog\": {\n    \"title\": \"Form\",\n    \"context\": \"Context\",\n    \"text\": \"Please confirm...\"\n  }\nWouldn't work anymore, since we would check something like \"if translation id is object and object.context is truthy, use object.text\". In that case, dialog.title is just out of the race.\n. @lichtner it just depends on what your tool would expect. If you wanna go with comments, do comments (with annotations). These comments will be ignored by angular-translate, but your tool has to know, how to handle'em. So in case of using comments for that, this is no longer a work of angular-translate.\n. @lichtner Nevertheless, it'd be cool to say that angular-translate would work well with such a tool. So I'm open for solution ideas. :)\n. Do that! :)\n. Closing this for now\n. This also means, we could get rid of LoaderGenerator. I'll give some warnings when registerLoader() is used, so people have a chance to refactor deprecated stuff.\n. Running sample for useStaticFilesLoader(): http://plnkr.co/edit/4Qmnfc\n. Running sample for useLoader(): http://plnkr.co/edit/ehaRxl\n. @knalli \"Actually, yes.\" - you're with me?\n. Okay then, I'll split'em up!\n. Hi!\n$translateProvider.translations();\nAlready returns the translation table :)\n. Thank you, though!\n. Yeah, looks great!\n. @doublemarked Totally feel you! \nThat the translateDirective is able to translate DOM node contents is just a feature I made without thinking about such a conflict. So how to deal with it?\nUsing $translateProvider.translations() is currently really the only way to get this working properly. I can understand when you say, that the config is not the right place for those kind of string expressions. So how about extracting your default translations into constant service? :)\nSth. like:\n``` js\nvar app = angular.module('app', ['pascalprecht.translate']);\napp.constant('DEFAULT_LANG', {\n   // translation table goes here\n});\napp.config(function ($translateProvider, DEFAULT_LANG) {\n   $translateProvider.translations(DEFAULT_LANG);\n// and other stuff\n});\n```\nOtherwise, we could definitely talk about the behavior of translateDirective.\n. Hm.. yeah but I fear that it's not possible when having a\nhtml\n<ANY translate>TRANSLATION_ID</ANY>\nconstruct, since there's already a content in the DOM element.\n. @doublemarked If you have any idea for a cool solution (at least in theory), please let us know, so we can make angular-translate better!\n. Actually, you could achieve this empty string behavior with just\nhtml\n<ANY translate=\"TRANSLATION_ID\"></ANY>\nor\nhtml\n<ANY ng-bind=\"'TRANSLATION_ID' | translate\"></ANY>\n. Reason for this is probably: https://github.com/PascalPrecht/angular-translate/blob/master/src/directive/translate.js#L47-L49\nAn empty string is a falsy value in JavaScript, isn't it?\n. But I can't reproduce this flash, here's plunk http://plnkr.co/edit/6of2GK?p=preview\n. Yeah, you could do that. You could also send a PR if you want :)\nNevertheless, I'd really like to see this flash bug, could you setup a plunk or a fiddle, so I can see that little beast in its full nature?\n. Thank you very much @doublemarked !\n. @doublemarked and please consider the https://github.com/PascalPrecht/angular-translate/blob/master/CONTRIBUTING.md\n. Looking into it now\n. Okay, found the bug! \n. So here's a working one: http://plnkr.co/edit/b8Kgpo?p=preview\nTwo things:\n1) If you want to have more then one language and also want to provide a default language, you have to assign the default language to specific language key (in plunker: 'en_US_foo'). Which means, there can be only one valid translation table for a specific language at a time.\n2) You don't have to $translate.uses('en_US') explicite since it's already called implicite when a translation table doesn't exist for a specific language key. (see: https://github.com/PascalPrecht/angular-translate/wiki/Asynchronous-loading#registering-asynchronous-loaders)\n. Please lemme know, if there's still sth. unclear :)\n. Yeap, this is true. So angular-translate only loads a translation table asynchronously, if it doesn't exist but is requested. Which means, as long as you don't need a translation table for e.g. for german, it wouldn't be loaded.\nRegarding your plunk, to serve a default language, you have to decide, which language is your default language. This is what happens when saying \njs\n$translateProvider.translations('defaultLangKey', TRANSLATION_TABLE);\nNow, you have to say that you want to use/prefer this language in your app:\njs\n$translateProvider.preferredLanguage('defaultLangKey');\nAgain, no asynchronous call is made yet, because angular-translate tries to use the translation table for defaultLangKey, which of course is there.\nNow, if you want to provide another language e.g. German, this is where the loader comes in.\njs\napp.controller('Ctrl', function ($scope, $translate) {\n   $scope.changeLang = function (key) {\n       $translate.uses(key); // this does an asynchronous call if the translation table for 'key' doesn't exist\n   };\n});\nThis makes sure that you only load data, if you really need it.\nDoes that make sense?\n. I think you have to kinda import a json with your default lang. E.g. you could have several local files, but only one is baked into the app via grunt or so. Then you're able to have a default language and no translator has to take a look at any code.\n. Thank you for your input! :) And don't forget your PR :)\n. See https://github.com/PascalPrecht/angular-translate/wiki/Multi-Language\n. Allright :), lemme know, if something's unclear!\n. Thank you sir! MERGED\n. Looks good to me! Thank you @doublemarked ! :)\n. Hey @lanlau! I think this is a great feature we should provide. There was already the idea to have a fallback language, when I was presenting angular-translate at a local meetup. \nLet's make a new feature of it! I think we should introduce something like \njs\n$translateProvider.fallbackLanguage(langKey)\nSo if you current workaround works for you, stick with it, until this feature is implemented. :) You could also speed up the process by providing a Pull Request by yourself (which is always awesome) :)\nIs that okay for you? \n. So congrats to your first PR :) I'd love to get you in the OSS world by merging this one, I've commented a few lines of code on the commit. Check the PR for mor information.\nThanks for your work! :)\n. Hey @lanlau ! Great you've made your very first Pull Request, and I'd love to merge it in! :) Please consider the Contributing Guide.\n. As you can see, Travis build is failing currently. We need some tests on that, and the PR should point to canary branch :)\n. @lanlau still alive? :D Or should I take care of that?\n. No Problem, your feature already landed in 0.9.2 :) Thank you!\n. FYI https://github.com/PascalPrecht/angular-translate/commit/018991e8d51e99e221dc5531aaa9124824a1f8c3\n. Hey @skivvies !\nYou're right, this is a common use case and angular-translate doesn't cover this very well.\nBut yea, just like you said, you could either split up the contents into different translations and go with a directive/filter combination, or you put the html in the translation itself and in view-layer you use ng-bind-html-unsafe to get it out properly. :)\nThis is exactly how I use it. If you have any idea how to make this better (at least in theory) lemme know! :)\n. Wait a sec, I'll set up a plunk for you\n. Here you go: http://plnkr.co/edit/oyTsOV?p=preview\nThe plunk shows, how to use translation id's with ng-bind-html-unsafe. It also shows, that it doesn't work with bindings :(\nAnd unfortunately I can not say how hard that is to implement. Have to take a deeper look at it, but we're currently working on pluralization. I hope you can live with that for now?\n. Awesome :) Ideas and Pull Requests are always welcome! :) \nSo can I close this one for now?\n. Feel free to update the docs! :) Either in the wiki or the auto generated docs under docs folder. Just make a Pull Request to canary and I'll merge it in! :)\n. This'd be awesome! :)\nOn Friday, June 14, 2013, skivvies wrote:\n\nThanks @PascalPrecht https://github.com/PascalPrecht, when I have a\npatch I'll convert this issue into a pull request and attach some commits!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/69#issuecomment-19430837\n.\n\n\n/pp Sent from Gmail Mobile\n. Closing this for now\n. @guilload @knalli Actually it turned out, when using html within translations and using translate directive instead of translate filter, the given html is parsed and interpreted correctly. So you should stick with translate directive until we introduce a new angular-translate 2 version which officially supports angular 1.2\n. Hey @danielbsig !\nSo, the problem here is, that you're returning an array of resolved values through $q.all (as you can see here: http://docs.angularjs.org/api/ng.$q#all). angular-translate doesn't handle a sets of promised values, as you can see here: https://github.com/PascalPrecht/angular-translate/blob/master/src/translate.js#L512-L526.\nYou could either define loaders for your different sub apps, or we have to teach angular-translate to handle sets of promised values :)\nI think the latter would be a cool thing!\n. But it won't work how its currently implemented, since the resolved data, which is actually a translation table, has to map to a corresponding language key. Now, when uses() triggers $loaderFactory with a language key, and we'll getting back an array of translation table then, how should angular-translate know, which table corresponds to which key?\nWe only have the key which should be used in this case.\n. Ah damn, just looked at your code again. Your loader tries to load translation tables for just one key, for sure. Okay, so I think we can implement this.\nDo you want to make a PR, or should I take care of it?\n. Okay, that was easy. Landed in canary right here: https://github.com/PascalPrecht/angular-translate/commit/0e5d6d9d6ca8cd20641ce65ffb28f4f8367715bd will make a minor release soonish!\n. Landed in master 0.9.3 ! :)\nNow do $ bower cache-clean and afterwards $ bower install angular-translate :)\n. Lemme know if everything works as expected!\n. @danielbsig okay, so how about setting up a plunker with your exact problem, so I can take a look at it. Would love to help you out!\n. Great, just post the plunk here when you're done\n. Okay, taking a look at it now\n. Here's the fix: http://plnkr.co/edit/1gtXwr?p=preview\n$q.all() excepts and array of promises, not an array of deferreds :)\n. It's line 20 in app.js by the way :)\n. Awesome! \n. But can't you just load translation files per sub app? Each supapp has its own config phrase to register custom loaders.\n. This has to be figured out! :)\n. I'll try to bring this functionality down the road this week okay?\n. Or you could also submit a pull request, with a proposed solution and we can discuss on that :)\n. Hope to get a solution this week, so I can make a feature release with #82 and #79 \n. Will not get in 1.0 think this will be part of an 1.1 release.\n. @DWand No, it should actually be possible to lazy load translation tables partially. Imagine you have an app that relies on 20 subapps and each subapp defines its own translation in it app.config() phrase. There we would have an asynchronous loader registered in each subapp but ones a an app has loaded a translation table for its purposes, another subapp would never load a table for the same language again, because there's already a table for it.\n. @DWand That's true. But how would this in theory look like. How can we make asynchronous loader the ability to load just a subset of a translation table? They don't know about them.\n. This might be a solution. I like that addPart() interface, but reloadLang() shouldn't be there in my opinion.  Thanks for your input anyway! :)\n. I like @knalli 's idea! The only thing I have to add, is that it has to be possible to declare async loaders with partial loading per module. So $translate.$prefetch() shouldn't only occure when coming from one section to another, since it could be possible to move a specific section of an app completely out as standalone app. In that case, things also have to work. Does that make sense?\nThe point is that an app module shouldn't rely on another app modules configuration. So if we can make this implementation possible, that each sub module can work on its own, I think this is the way to go.\nmy 2 cents\n. @danielbsig this feature just landed in canary. Closing this, you'll get it with the next release.\n. Hey yo! I'm currently in The Tramp. Will Take a Look at it once i'm in The\nOffice. And Hope to make your wishes come True :)\nOn Friday, June 14, 2013, skivvies wrote:\n\nI just switchedhttps://github.com/getlantern/www.getlantern.org/commit/fea41706b8cto using your awesome static\nfiles loaderhttps://github.com/PascalPrecht/angular-translate-loader-static-filesin preparation for being able to integrate with\ntransifex.com, an extremely popular platform for managing translations\nfor software projects.\nAccording to http://support.transifex.com/customer/portal/articles/971979,\nTransifex supports the Chrome i18n JSON formathttp://support.transifex.com/customer/portal/articles/1080006,\nwhich is slightly different from the JSON format you're using in your super\nhelpful example plunkr http://plnkr.co/edit/Hw4iMz.\nJust wondering if I'm doing it wrong, or if angular-translate just does\nnot yet integrate with Transifex and whether I can help with that. Thanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/72\n.\n\n\n/pp Sent from Gmail Mobile\n. So @skivvies I just took a little look at transifex. You may find this one (https://github.com/PascalPrecht/angular-translate/issues/57) interesting. Maybe this answers your question.\n. There was also a proposal to let users modify angular-translate's translation-processor. E.g. angular-translate could provide a default translation-processor (just like it does right know) and optionally, you could \"use\" your own translation-processor.\nSo we could either make it possible to add pre-transformer which get executed before angular-translate assigns the data to the internal translation table, or we go a step further and let users replace the whole processor.\n. Thanks for the PR! Please consider the Contributing Guide in order to get this merged in :)\n. Will rebase this PR on top of canary this week, to get this merged in.\n. Landed in canary\n. Hey @jamesandres could you please set up a plunk? Cause this should actually work properly.\n. @jamesandres Damn it. you're right. I'll label this issue as a bug and hope to get it fixed as soon as possible!\n. Hey @jamesandres I pushed a patch to canary would you like to check against that code? Landed right here: https://github.com/PascalPrecht/angular-translate/commit/525b35332b21b4f1f96d20f9e823447a85215163\n. Landed in master as 0.9.4 \nDo $ bower cache-clean and $ bower install angular-translate\n. LGTM! Could you send the PR to canary branch?\n. MERGED! Thanks man, you're awesome :)\n. Hey @dylang ! So the first feature you're requesting, is a pretty easy thing which could be configurable trough $translateProvider .\nSth. like:\njs\n$translateProvider.translationNotFoundIndicator('\u2718');\nOr to have a more fine control, we could introduce translationNotFoundIndicatorLeft() and translationNotFoundIndicatorRight().\nDoubling every string, to make feature two happen is kinda strange. Just imagine the case where a translation Id represents whole sentences. They would all be doubled.\nSo, without getting to concrete on this, this problem could be solved with a kinda interceptor. Or maybe more different interceptors if somebody want to. You can then decide on your own, if you want to double every string or do something else with it. \nI'll think about it!\n. @dylang I'll implement this feature this week with #82 and #97, okay?\n. Just landed in canary branch :)\n. Yea, you could already do so by clone this project, checking out canary branch and build it from source as described right here: https://github.com/PascalPrecht/angular-translate/blob/master/CONTRIBUTING.md\n. Using the direktive as attribute/value notation feels pretty okay for me.\nThis is what it's for :)\n. Closing this for now\n. Hey there! Will take a look at it tomorrow once I'm in the office!\n. Sorry guys, hadn't enough time to take a deeper look at the issues. I think what @DWand said is a bit toooo much just to check the currently used language. And yea $translate.uses() returns undefined as long as it isn't set.\nI like @knalli 's idea to introduce a new API for that, but I think we could get around this, without even introducing a new API.\nFirst, we need a private property like $proposedLang or something like that. $translate.uses() as well as $translate.preferredLanguage() make use of this property, by setting it's values by given lang key through $translate.uses() or $translate.preferredLanguage().\nNow, when a lang key is requested through $translate.uses() it returns the value of $proposedLanguage when $uses is undefined. So sth. like:\njs\n$translate.uses = function (key) {\n   if (!key) {\n      if (!$uses) {\n          // $uses is probably not confirmed yet\n          return $proposedLang; // this is always set!\n      }\n   }\n};\nWhat do you think about that?\n. @knalli When the \"confirmed\" language is set, speaking of $uses it would return $uses. If not, it'd return $proposedLang (or whatever we want to call it)\n. Argh. Okay, you're right. In the case $translate.uses() would fail somewhere, it would return a value which isn't confirmed and never will be. Sorry, guys didn't think about that.\n. If it's only about the initial language to load, @rkoch could just use $translate.preferredLanguage() to get the key, but this wouldn't help out when the language key has been changed during runtime..\nOkay, looks like we really need a new method for that =/ hmpf..\n. Yea I was thinking about that too, but this would break the existing API when comes to just asking for the currently used language.\n. So, does anybody have a fancy method signature for that little feature? I would like to implement it today, since we're almost reaching 1.0. The fix would then land in 1.0. @knalli @DWand \n. SGTM\n. On last thing, shouldn't $translate.proposedLanguage() return undefined (instead of null) if there's no pending request? \n. Landed in canary as https://github.com/PascalPrecht/angular-translate/commit/6d347920a079bb13e309b25fbe5c2b567b06c9c9\n. I think we should ask the awesome @cburgdorf what he thinks about that. So,\nChris?\n. Thanks for you input Chris!\n. Maybe I'm wrong, but it looks like there's nothing angular-translate can really do to help out there, right? Isn't it more an application-level thing, where the app has to figure out which language should be used and then tell angular-translate about it?\nSo my actual question, with the given construct and tips @cburgdorf gave us here, is it possible to generate these snapshots in different languages using angular-translate or not? And if not, is there anything you need from angular-translate to get this working? If so, lemme know so I can implement what you need and make it a feature in 1.0 release.\n. This is exactly what I thought too! So I will close this for now. We can reopen this one, if needed. @skivvies nevertheless, keep us up-to-date with your experiences!\n. Closing this one, we'll work on the referenced issue\n. https://github.com/PascalPrecht/angular-translate/issues/81\n. Taking a look at it now. Thanks for the PR!\n. Thank you for the PR! I like that feature and I think we should merge it in. Once all things are discussed with the other guys and enough tests are provided, I would rebase your PR on top of current angular-translate/canary. :)\n. Hey @sgara! If this is your very first PR, I would happily merge this in! :)\nSo yea, I think you can already make some changes and add more tests. You're currently testing if $translate.load() exists and if its a function (which is already a good thing!). But we should also test, if it really does its job. For example, if it loads the data is should load with a given asyncLoader and stuff like that.\nI think most of this functionality is already tested in tests for $translate.uses() since this is just the stuff you pulled out of it.\n. Hey there! Will review the changes once I'm at home! Thanks!\nOn Jul 15, 2013 9:26 PM, \"St\u00e9phane\" notifications@github.com wrote:\n\nHey @PascalPrecht https://github.com/PascalPrecht,\nI made some minor changes and added some tests I could think of. Hope\nthat's good enough :) Let me know if you think of something else!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/82#issuecomment-20997037\n.\n. @sgara I made some comments, thank you for your work! So you could either squash your commits to match the contributing guidelines and update this PR, or (if you don't know how to do that) I'd rebase your commits and merge'em into canary. :)\n. Fixed in canary.\n. I'll fetch your changes this weekend and rebase them on top of canary so I can do a fast forward. Your fix/feature will then land in 1.0 release!\n. This would not have been possible without these guys :) And thank YOU for contributing!\n. Think it should then be something like\n\nhtml\n<ANY title=\"{{ 'TRANSLATED_STRING' | translate}}\"></ANY>\nOn Tue, Jul 16, 2013 at 5:08 PM, Martijn Wagena notifications@github.comwrote:\n\nIs it possible to use a translated string containing a variable in a title\nattribute?\nEg.\n\"TRANSLATED_STRING\" : \"this it the text for {{title}}\"\nThanks in advance.\nMartijn\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/88\n.\n\n\n/pp\n. @mwagena Take a look at @knalli 's great example.\n. BTW: Probably an interesting read for you: http://pascalprecht.github.io/angular-translate/#/guide/02_dynamize_your_translations\n. @sgara Yes! Definitely! Looks like you're on my side :)\n. Landed in canary.\n. The new content isn't push yet. I'll push it into another branch for review\npurposes now.\nOn Sun, Jul 21, 2013 at 10:21 PM, Jan Philipp notifications@github.comwrote:\n\nI'm a little bit confused: Where is the new content?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/91#issuecomment-21316275\n.\n\n\n/pp\n. Here you go! https://github.com/PascalPrecht/angular-translate/tree/docs-improvements\n. @knalli it also introduces a new grunt task (which isnt documented yet), which copies some assets. \n$ grunt docs\nIs your friend.\n. @DWand FYI you can find a working example of pluralization in doc-improvements branch. Check it out and run $ grunt docs after that start an http server on the site folder.\n. Guide documentation landed fully in canary right here: https://github.com/PascalPrecht/angular-translate/pull/92\n. We're almost done. Just have to rock over the api docs\n. Thank you guys!\n. Definitely feel you! I was also thinking about that, and yea lets listen to\nthe feedback we get in the future. I basically decided to extract the\ndefault interpolation in an own package to stay consistent... Obviously\nthis should have been clarified before the release got out.\nOn Jul 23, 2013 8:21 PM, \"St\u00e9phane Garagnani\" notifications@github.com\nwrote:\n\nHi there,\nI just installed the last version and it seems strange to me that\nyou define angular-translate-interpolation-default in a separate package.\nI kinda see your point (it's not mandatory if you define a custom one) but\nfirst I think it's a bit annoying because you expect the module to work\n\"out of the box\" at that it's not the case anymore since you have to add an\nextra file. Default behaviors should be part of the main package.\nSecondly, that makes the 2 packages dependent of one another (because\nangular-translate-interpolation-default need angular-translate module\ndefinition to be valid), which is also a good reason not to split them :)\nwell in my opinion at least ^^\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/94\n.\n. Yea, I'll put it back turned out we have a circular dependency with the current construct. Have to update the docs et al, then it'll land in a 1.0.1 release.\n. Default interpolation landed back in core right here as https://github.com/PascalPrecht/angular-translate/commit/1002bff3c314e00c88f9e1c308d7efe3a8028d4d\n\nNow I'll update the docs and the extension packages for a 1.0.1 release.\n. 1.0.1 released, this should be fixed now.\n. Hey there!  I will update the Extension Packages  to match  1.0 there's\nalso a discussion  to put  default  interpolation  back to core.\nOn Jul 24, 2013 12:05 PM, \"Serge Barysiuk\" notifications@github.com wrote:\n\nHello,\nI'm trying to integrate angular-translate into my application but after\nthe latest update (1.0.0) plunkes showing stating files loader do not work\nanymore.\nCheck this out: http://plnkr.co/edit/Hw4iMz\nIt might be related with incorrect dependencies in\nhttps://github.com/PascalPrecht/angular-translate-interpolation-default/blob/master/bower.json.\nIt still uses 0.9.4 version. If I'm trying to install angular-translate\n1.0.0 it's being reverted to 0.9.4 cause\nangular-translate-interpolation-default overrides it.\nThanks,\nSerge\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/95\n.\n. I'll put the default interpolation back to core. See https://github.com/PascalPrecht/angular-translate/issues/94\n. @sbarysiuk Default interpolation service is back in core angular-translate and landed in canary will make a 1.0.1 release very soonish!\n. @sbarysiuk 1.0.1 released. Default interpolation service is back in core and you don't have to worry about it anymore.\n. @Gargol you issue is a different one. You need to include ngSanitize.\n. @Gargol great.\n. Whoops, good catch! Yeah, angular-translate has no angular-cookies\ndependency anymore. Would you fix it and send a PR on canary?\n\nOn Wed, Jul 24, 2013 at 3:23 PM, Andre Meyering notifications@github.comwrote:\n\nHello,\nafter forking this project and running npm install, bower install, grunt\nbuild to install everything, I noticed that there are still some files\nmissing.\nI get these \"errors\":\n[image: translate]https://f.cloud.github.com/assets/1667306/848568/b772616a-f463-11e2-8dc8-6061e93217cd.jpg\nThe file in demo/js is angular-translate.js not\nangular-translate-latest.js.\nIt also seems that angular-cookies isn't defined as a dependency in\nbower.json.\nThanks,\nAndre\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/96\n.\n\n\n/pp\n. Awesome! Please consider the contributing guide when making a PR :)\nOn Wed, Jul 24, 2013 at 3:26 PM, Andre Meyering notifications@github.comwrote:\n\nYes, I'll do that :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/96#issuecomment-21484226\n.\n\n\n/pp\n. Landed in master.\n. Please  consider the contributing guide \n. Thanks anyway \n. This isn't a problem since it gets merged once it lands\n. > Make sure you send the PR to the canary branch\nThe docs are inconsistent\n. Will update it soon\n. Like  @sgara said. $translateProvider.fallbackLanguage()  does the trick. Amy idea where  to put it in the docs? \n. Okay so, should I take care of that, or would you like to send a pull request @sgara ?\n. @sgara awesome thank you! Keep in mind:\n- to send a PR from canary branch\n- when testing documentation there's a grunt docs task, that generates a site folder\n- start a simple http server within site to check if everything looks good.\n- use docs(guide) scope in your commit message\nI'm looking forward to your PR! :)\n. I close this for now, since it's implemented @totof3110 If there's still anything unclear, let us know!\n. We decided to put it in the Multi Language section #99 \n. Landed.\n. @sgara If you want to, please do so! But I'm not sure if this is part of Multi Language since its a \"within translation table\" thing. Maybe one should mention it at Getting Started when teaching an app a language for the first time? I think a site note would be enough.\n. Alright, so rock on!\n. @sgara Any progress on that?\n. Landed and pushed to gh-pages. Thank you sir!\n. Now, there's still the open feature to let angular-translate cache already loaded translation tables over cross http requests. What do you guys think of that @sgara @knalli?\n. And BTW: @DWand 's diagrams alway rock!\n. Also, we have to be aware that there's #71 which could make this feature a bit harder.\n. I think we have to solve #71 first so that we know how a translation table would look like when its implemented.\n. @knalli @DWand But it would be kinda \"okay\" to store some data for an application in localStorage for example, right? I mean, thats what its for. So independent on whats happening on the server, the client app should be able to be configured to cache things it already has loaded.\nI'm just not sure how we get this handled with #71 and in addition, how we should handle the \"expire time\" of this kind of cache.\nOr, what actually has to be clarified first: is this feature a good thing or not? I actually like the idea. Is there anything that would speak against it?\n. Since we're implemented $translate.refresh() which landed in canary and will be released in master very soonish, this feature does not longer belong to $translate service itself. Closing this for now.\n. Great thanks! Will merge it, once I have time to prepare some things!\n. @knalli angular-translate doesn't have a angular - cookies dependency that's why there's a pending pull request for that. However it has a angular cookies devdependency for testing purposes. \n. @DWand this is actually right but the next release will put default interpolation service back to core. Once this in we can update the demos. I will take take off the default interpolation service today and push it to Canary.  Well wants to take care of the demos then? \n. Yea that's right, I forgot to remove the angular-cookies dependency, then @archer96 pointed me to that. And of course, angular-translate doesn't have a angular-cookies dependency at all (what a luck), but maybe there are some tests in the test suite that need angular-cookies in their mocked environment, which why I said, he should put it in devDepdepencies.\n. @knalli If there aren't any tests with angular-cookies (which I currently don't know, I'm not sure about that) then we can happily remove the dependency even from devDependencies\n. I merge this into canary now and bring default interpolation back to core, so we can move on with further development. \n. angular-translate 1.0.1 just released which brings default interpolation back to core. I also updated all extension packages and their dependencies. The docs are also updated so you might wanna take a look there too!\n. Please update your angular-translate dependency zu 1.0.1\nOn Jul 26, 2013 10:58 PM, \"Dean Peterson\" notifications@github.com wrote:\n\nbower throwing git:128 when installing\nangular-translate-interpolation-default\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/105\n.\n. angular-translate-interpolation-default has been put back to core, since it's required anyway.\n. $translate.proposedLanguage()  is only for the case when using async loaders since $translate.uses() returns undefined while an async loader is pending. So we introduced $translate.proposedLanguage() to return a language key, even if it isn't confirmed yet.\n\nIf you don't use async loaders, simply rely on $translate.uses()  instead,  which returns the currently used language.\nFor more information see https://github.com/PascalPrecht/angular-translate/issues/79 \n. If you find any other mistakes in the docs or things that could be written\nbetter, it would be a BIIIG help if you could fix them then! :)\nOn Thu, Aug 1, 2013 at 9:48 AM, St\u00e9phane Garagnani <notifications@github.com\n\nwrote:\nAlways a pleasure ;)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/107#issuecomment-21920458\n.\n\n\n/pp\n. Oh damn it. However, looking forward to your fixes! Please send PR's to\ncanary branch!\nOn Mon, Aug 5, 2013 at 10:31 PM, St\u00e9phane Garagnani \nnotifications@github.com wrote:\n\nI began to do so, stashed my work and cleared my stash -__-' I'll do it\nagain\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/107#issuecomment-22138757\n.\n\n\n/pp\n. I will not merge this in since the site folder has to be recognized by\nupdate-docs script  for gh-pages deployment  branch.\nOn Jul 31, 2013 10:33 PM, \"St\u00e9phane Garagnani\" notifications@github.com\nwrote:\n\nAdd site folder to .gitignore file to ignore grunt generated documentation\nYou can merge this Pull Request by running\ngit pull https://github.com/sgara/angular-translate chore/gitignore\nOr view, comment on, or merge it at:\nhttps://github.com/PascalPrecht/angular-translate/pull/109\nCommit Summary\n- chore(.gitignore): Ignore generated doc\nFile Changes\n- M .gitignorehttps://github.com/PascalPrecht/angular-translate/pull/109/files#diff-0(1)\nPatch Links:\n- https://github.com/PascalPrecht/angular-translate/pull/109.patch\n- https://github.com/PascalPrecht/angular-translate/pull/109.diff\n. Yea good catch! Thanks! Please open pull request on canary branch. \n. Awesome thanks!\n. Hey @calebegg this looks good to me! Just asking: do you have a real use case for using translate directive as an element? \n\nPlease send the pull request to canary branch and I will merge this in!\n. And as attribute? \n. You can also do <ANY translate=\"KEY\"></ANY>, but yea let's merge that in.\n. @Leocrest @DWand So, letting angular-translate determine which language to use is in my opinion not possible. You, as a developer and user of angular-translate, have to tell it which languages to use in your app.\nJust imagine the case, angular-translate tries to determine the language for a current user and it turned out there aren't any translations for that language? What should happen then? Yea, ideally the fallback language would come in, but to have a fallback language, you have to define what the fallback language is, which again means: you have to tell angular-translate which languages are supported in your app.\nSo I think there's no clever way around then just telling angular-translate which language to load in certain situations. \n. Okay, how about fixing this?\n. @knalli I think he means comments that contain the version number of angular-translate.. This is part of the concatenate process, bower doesn't have to do anything with it. However, the version number stands in bower.json of course. \n@akarelas To fix this we have to update the concat task of Gruntfile.js which takes care of that.\n. As you can see, it only concatenates source files, but not the meta.banner configuration: https://github.com/PascalPrecht/angular-translate/blob/master/Gruntfile.js#L47-L50\n. So, @akarelas would you take care of that?\n. It's really just the concat task :) 2-3 line changes, that's all :)\n. Just send a PR and we make it work together! :) Then we merge it in!\nOn Sat, Aug 3, 2013 at 4:15 PM, Alexander Karelas\nnotifications@github.comwrote:\n\nIt looks like too much of a responsibility and a risk that something might\ngo wrong. So I'm afraid I'll have to refuse :-)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/115#issuecomment-22055493\n.\n\n\n/pp\n. This is fixed, once it lands in master.\n. @akarelas No problem dude\n. What do you mean with \"placeholder\"? I don't get what you're trying to say.\n. In other words, you come with a solution for a problem that I don't get :D\n. If you talk about the placeholders couldn't you just <input type=\"ANY\" placeholder=\"{{ 'TRANSLATION_ID' | translate }}\"></input>?\n. Great! So closing this for now.\n. @mcamou I don't know how ng-table works but you put '{{ 'groups.id' | translate}}' in double quotes, maybe you just remove the single quotes (the outer ones), so it can be evaluated correctly?\n. Renaming happend here: https://github.com/PascalPrecht/angular-translate/commit/7402971ce39434d25afc0c2435677702b79156ec\n. Yea, this is a good point! Will consider it when implementing these events. \n. @sgara So, broadcasting an object \u00e1 la\njs\n{\n  proposedLanguage: '',\n  fallbackLanguage: '',\n  currentLanguage: ''\n}\nShould be enough, right? Anything agains these prop names?\n. Nah, this is information we don't really have, since an asynchronous loader doesn't have to load data from a server. It could also just load asynchronously using timeout.\n. Another thing we have to talk about is, the $translateChangeStart event. IMO to make it consistent this event is fired in useLanguage() before $uses = key;. But directly after this, $translateChangeSuccess will be called, so one of them could actually be pulled out.\n. Also, when to fire $translateChangeEnd event. Before, or after it is resolve (or rejected) within uses() ? Maybe it doesn't matter? I'm not sure.\n. @DWand but changing the lang is just $uses = key; so it would look like\nthis:\n$rootScope.$broadcast('$translateChangeStart');\n$uses = key;\n$rootScope.$broadcast($translateChangeEnd');\nThis get's invoked, once a loader returns a resolved promise. Which means,\nnew language is already added to the translation table, to activate it,\nonly $uses has to get the new lang value.\nThis gets also invoked when there isn no loader registered and\nangular-translate can switch the lang directly.\nOn Tue, Aug 6, 2013 at 11:38 AM, Max Prichinenko\nnotifications@github.comwrote:\n\n$translateChangeStart - just before fst action according to change lang\n$translateChangeEnd - just after all strings were replaced with new lang\nand angular-translate totally change it's state\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/118#issuecomment-22167934\n.\n\n\n/pp\n. Whereas $translateChangeSuccess gets fired, once everything is done ('setting up interpolations, storage etc)\n. @DWand yea, makes totally sense! Thank you! Also thanks to @sgara for leaving your 2 cents here :)\n. Some event broadcasting landed in canary: https://github.com/PascalPrecht/angular-translate/commit/e688dee4d4753191b5beb081f7dffaeaa52b3268\n. Wow, that was fast! Thanks for the PR @sgara !\nThere's just one thing: I think we can get a step further, and let $translate.uses() decide to call $translate.load() or not. Currently, $translate.uses() does nothing, except that it calls $translate.load(), whereas within $translate.load() it is checked, if a translation table for a langkey exists or not. I would say, we can make $translate.uses() take care of this check, and only call $translate.load() if we really want to use an asynchronous loader to be called.\n. Letting $translate.load()  without checks sounds good to me.  It shouldn't know that there's a translation table. This encapsulates the loader functionality a bit more. \n. Oh and please send the PR to canary branch :) @sgara \n. Great! I'm also on this! maybe I should push my changes first? Turned out\nthere's a problem with $translate.load() during run() phrase. It is\ncalled when it shouldn't be called.\nOn Tue, Aug 6, 2013 at 8:01 AM, St\u00e9phane Garagnani <notifications@github.com\n\nwrote:\nArgh! Damn branches! ^^\nAnyway, after a good night sleep I would agree with you, I'll make the\nchange.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/120#issuecomment-22160037\n.\n\n\n/pp\n. Here are my changes: https://github.com/PascalPrecht/angular-translate/commit/5835f74919d85bf91b3701b7dae41a9fcbe89c57\n. So it turned out, that this one: https://github.com/PascalPrecht/angular-translate/blob/iss/120/src/translate.js#L22-L23, is a bit shitty. angular-translate tries to load a fallback language, even if there isn't an asynchronous loader registered. This should not happen.\n. In addition, I don't think we have to expose $translate.load() as public API. A user shouldn't be able to load something asynchronously explicitly. This \"load the fallback language asynchronously, if needed\" should be done by angular-translate itself when instantiating $translate service, as you can see here: https://github.com/PascalPrecht/angular-translate/blob/iss/120/src/translate.js#L843-L845\n. Oh and, maybe I have to mention that I <3 tests for this.\nHowever, do you agree with me on the points about $translate.load() @sgara ?\n. So, $fallbackLanguage is used whenever a translation id isn't found in the current $uses language. This means, $fallbackLanguage has to be available, once a fallbackLanguage is configured via $translateProvider.fallbackLanguage().\nNow, there are two cases:\n1) Translations have been registered with $translateProvider.translations() for that case, one only have to check, if the translation table for the fallbacklanguage is present. (this is already done in $translate service)\n2) Translations will be loaded later at runtime, which means asynchronous loader is registered. In that case, when instantiating $translate service, we have to check, if a fallbacklanguage is set, and if so, if the translation table is present for this fallbacklanguage, if not, we have to also load it asynchronously, so its present, once $translate service is used.\nDoes that make sense?\n. Oh, and regarding $translate.load(), we could just have an internal function called loadAsync or so. This is also pretty handy when it comes to load fragments of translations asynchronously, which is what I'm also working on currently.\n. @sgara okay, do you take care of this, on top of my changes? We need to implement this first correctly, so I can move forward with implementing the different event states.\n. This is perfect! Thanks @sgara ! It's also enough to call loadAsync() only in case for the fallback language, since we need the success and error events, when uses() is called on instantiation.\nGreat! Could you now please open the PR on canary branch? haha :D\n. Awesome. So I'll close this now.\n. In your faces!\nhttp://31.media.tumblr.com/43d0b3b144f68dcf2334d057475c1b33/tumblr_mmm0zrIBLh1qeyonxo1_250.gif\n. MERGED!\n. Landed in canary branch. Still missing: refresh events. @DWand, maybe you can take a loot at it. Events docs are currently located in docs/guide/16_Events.ngdoc\n(You might notice that I've increased the leading number on the document file for migration guide.)\n. No problem! I can take care of that too!\nOn Wed, Aug 21, 2013 at 6:23 PM, Max Prichinenko\nnotifications@github.comwrote:\n\nIt would be hard for me to explain it in English. I'll take a look at it\nin few hours, but can not promise anything.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/123#issuecomment-23029905\n.\n\n\n/pp\n. Done in canary\n. Extensions landed in canary.\n. Okay, I think we can merge this in now! :)\n. Please send PR to canary branch. Thanks!\n. You guys rock!\n. Haha, srsly is just a short version of seriously. Its not really a typo.\nOn Fri, Aug 9, 2013 at 11:33 AM, Max Prichinenko\nnotifications@github.comwrote:\n\nHa!\nThere is a same typo all along the guide (or just till 07 chapter).\nIn examples, translation for PARAGRAPH id in English.\nThere is \"Srsly\", instead of \"Seriously\".\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/128#issuecomment-22384483\n.\n\n\n/pp\n. It's a typo coming from my abbreviation configuration of Vim. re => return\nHave to fix that one\nOn Sun, Aug 11, 2013 at 11:20 AM, Max Prichinenko\nnotifications@github.comwrote:\n\n10_asynchronous-loading.ngdoc\nline 112\nsince we'return executing stuff asynchronously.\nI'm not sure is it typo or something like a short form of a phrase\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/128#issuecomment-22454901\n.\n\n\n/pp\n. I re-open this until the fixes landed in master @sgara any progress? :)\n. @sgara Ah okay then. Please don't forget to update your canary branch, since it has some breaking changes for the doc generation.\n. @sgara We're almost ready for a major release! :D hurry up!\n. @sgara Awesome! Looking foward to it! make sure to pull latest changes and use the generate_site.sh script to generate the site (obviously).\n. Okay, I'm ready for deployment.\n. Weird issue. Just to be sure. Could you test the same behavior with the latest version of angular-translate? As you can see in the official docs, it actually works: http://pascalprecht.github.io/angular-translate/#/guide\nThere is an example on the page that uses translate directive in combination with ng-click directive.\n. @elemoine ah yea, makes sense to me, I'll change the scope configuration and run the code against the tests. If everything work fine, the change will land in canary branch.\n. BTW: Sorry for the late response, I'm kinda offline due to holidays :)\n. Fix landed in canary right here: https://github.com/PascalPrecht/angular-translate/commit/4e06468f0fc13f46e9741671d5d81da78ba4aeb8 will be in the next release, thanks for pointing it out @elemoine and @oterral !\n. Regarding this https://github.com/PascalPrecht/angular-translate/commit/4e06468f0fc13f46e9741671d5d81da78ba4aeb8, I'll close this isse.\n. Hey Danita! \nThis is a great feature request. We can just return the provider instance in every method since it doesn't produce any side effects. \nWill land in canary branch soonish!  :) \n. Thank YOU for your input!  If you want to,  you can send a PR :)\nOn Aug 9, 2013 9:38 PM, \"Daniela Rodr\u00edguez Careri\" notifications@github.com\nwrote:\n\nI'm glad to hear that, thank you [image: :smile:]\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/130#issuecomment-22418597\n.\n. Landed in canary here: https://github.com/PascalPrecht/angular-translate/commit/cdc9e9e2084912e07cf36b3d7bfa2754eadabcd2\n. Closing this, new release will come soonish\n. Fixed in canary\n. Hey!\nNever came across this problem I'll try to reproduce it and let you know\nonce I have a solution!\nOn Aug 12, 2013 5:01 PM, \"Daniela Rodr\u00edguez Careri\" \nnotifications@github.com wrote:\nHi!\nI couldn't solve the following use case. What do I have to do when I have\nto replace a variable in a translation string inside a loop like ng-repeat\n?\nFor example, given the following:\nController:\n$scope.messages = [\n    { author: \"John\", body: \"Lorem ipsum\" },\n    { author: \"Peter\", body: \"Lorem ipsum\" },\n    { author: \"Nancy\", body: \"Lorem ipsum\" }]\nTranslation:\n{\n    \"REPLY_TO\" : \"Reply to {{user}}\"}\nPartial:\n\n\nmessage.body\n{{ 'REPLY_TO' | translate:'{user : message.author}' }}\n\nI think something like that is not possible without doing all in the\ncontroller, which I feels breaks the principle of separation of concerns.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/132\n.\n. if you really want to use a custom interpolation, you don't have to implement a new filter, angular-translate is able to use custom interpolations as you can see here: http://pascalprecht.github.io/angular-translate/#/guide/12_pluralization#overridinginterpolationtemporarily\n\nHowever, this is more a workaround rather then a solution. I played abit with this use case and it turned out that the issue not only comes up when using filter but also when using translate direcitve. And yea obviously it has something to do with scope, since ng-repeat creates child scopes.\n. It can I think filters take current scope since you never have access to\nscope within filters. The question is what is the scope we want?  And like\nI said the directive also doesn't work properly within ng-repeat, even it\nhas a scope.\nOn Aug 22, 2013 7:56 PM, \"SebC.\" notifications@github.com wrote:\n\nas I wrote, it really seems to be this line: interpolateParams =\n$parse(interpolateParams)(); which causes the issue. Without any scope to\nparse in, it cannot interpolate anything.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/132#issuecomment-23108822\n.\n. @ceelian feel free to send a PR :)\n. This is SO AWESOME! :) Will merge that in later, now having breakfast!\n. Since I can't really review that monster pull request, I just merge it in. I found some encoding problems but it looks like you fixed them in the latest commit.\n. This is similar to #132 Haven't tested yet. Hopefully I'll find some time t do so today. I'm currently out for holidays.\n. How did you solve the problem @LeoAJ ?\n. @pedrolsamaral Yes because as already written in our migration guide, $translate() returns a promise in version 2.x \n. @fveyret nailed it.\n. Maybe I get you wrong but each release of angular-translate got out via bower. For each tag. Which is exactly what you're talking about right? Each package contains an unminified file and a minified file for production uses. So what's wrong @ichernev ?\n. @ichernev Thanks for closing this one :)\n. Hey @rkoch! Thanks, I'll have a look at it\n. @rkoch okay, I agree that $nextLang should get the value undefined once confirmed. In your plunk you reset the language to de after the second timeout. I'm not sure if $translate.proposedLanguage() really should return de, since the language de is already loaded. Actually it still have to be undefined then right? @DWand what do you think?\n. I'm also not sure about this. Actually, in my opinion, proposedLanguage() should only return a valid value, when an async loader is pending. When a language is already loaded and one switches to it, there's no asynchronous loader invoked, so there's actually no $nextLang. One has to use $translate.uses() then.\n. @rkoch :)\n\nWill fix this soonish. This will land in the next release of angular-translate\n. Thank YOU for the heads up!\n. @rkoch fix landed in canary https://github.com/PascalPrecht/angular-translate/commit/6b477fc4e3ec357f612332f607ef5eeafcbf75d2\n. @rkoch Will take a while since we're working on some big features and documentation improvements, as well as translations for docs.\n. Closing this for now.\n. @rkoch Awesome, thank you!\n. @DWand  I think you can start implementing this feature and see if you get all tests green. Could you also have another look into $translate.refresh() and check if it returns a promise? I think this is a must-have.\n. @DWand Okay!\n. Okay, great! What's missing?\n. @DWand Yea and we need a section for this in the guide.\n. Okay, so the next steps are the following:\n[ ] Update API reference with new $translatePartialLoader service (@Dwand this is your job! Please add working examples within the docs using the ngdocs syntax)\n[ ] Update Guide due to new partial loading (I'll take care of that)\n[ ] Ping @sgara to have a look at the new guide docs, once they're written\n[ ] Translate guide docs to russian (@Dwand, you are the man)\n[ ] Translate guide docs to german (my turn)\n@sgara how about translating the docs to francais? \n. Fixed in canary\n. No, since angular-translate loads data as soon as possible if needed, this is when $translate service gets instantiated the first time. However, you could listen for $translateChangeSuccess event, which gets fired once translations have changed. There's also $translateLoadingSuccess event, which get's fired when loading was successfully.\n. @KilianSSL  does this help? \n. @KilianSSL you could put it in an application-wide AppCtrl just like the one that ng-boilerplate has.\n. js\n.controller('FooCtrl', function ($scope, $translate) {\n    $scope.$on('$translateChangeSuccess', function () {\n        titleService.setTitle($translate('FOO'));\n    });\n});\nisn't enough hm?\n. Hm.. try the same with $rootScope service\nOn Mon, Aug 26, 2013 at 8:47 AM, KilianSSL notifications@github.com wrote:\n\ni did that initially, but figurred out it would only set the title once at\n$translateChangeSuccess, and not for further state changes to other\nmodules. So probably i'm missing the point?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/139#issuecomment-23246161\n.\n\n\n/pp\n. Closing this as inactive.\n. Hey @nezo! This is feature we have to think about carefully. Since storage.get()  is used on several places we should come up with a solution that scales. I could think of enhancing the storage interface with a getAsync()  and setAsync()  method. @DWand @knalli what do you guys think? \n. It depends on wether your storage API calls are asynchronous or not\n. @knalli Exactly. this is where I thought of something like, angular-translate could test, if registered storage service has a get method, if not, it just expect getAsync method.\nThis was just a thought, so feel free to come up with better solutions. :)\n. @nezo We'll implement this for the next release. There's no release date yet, but it'll take some time since we also have to update documentation and examples and this for three (probably five then) different languages. So stay tuned, I'll leave this issue open and close it once the features lands in canary.\n. Wow turns out to be a bit tricky when it comes to tesing.\n. I pushed some work in progress here: https://github.com/PascalPrecht/angular-translate/commit/5196634d570247993470dfbd95e0b97cda8eb42c\n. BTW: I think I need some help here. pinging @knalli and @DWand here.\nit looks like that because of the asynchronous code execution, this one test fails. The test tries so request something from the local storage, before anything was set, which actually should have happened.\nFor more questions, please ping me.\n. I'll put this issue into the 1.2.0  milestone since it turns out to be harder as expected. If we don't find a safe solution, we can't support async communication with storages.\n. No action on this one. Will close it for now. Feel free to re-open if there's a chance to get it workin.\n. @maxcook As I said here, it turned out to be harder as expected to implement this. Feel free to reopen and helping out on this one :)\n. Thanks @DWand!  :) \n. Thank you @DWand !\n. Please read the docs. http://pascalprecht.github.io/angular-translate/#/guide/00_installation\n. app.module() expects an array as second parameter. You passed two arrays.\n. @camilolopes As pointed right here (https://github.com/PascalPrecht/angular-translate/wiki) the wiki is deprecated. If you want to read the latest doc, refer to the online docs.\n. Hey @nssundar actually, there shouldn't be any problems with unstable releases. Have to reproduce the error. $translateProvider defines a $get method otherwise it wouldn't work at all. So this is really weird.\n. Closing this as inactive.\n. @privman If you can verify that this behaviour was there in angular 1.1.1 (I actually don't think so), I'm happy to merge a fix.\n. Hey @LeventeNagy could you please setup a plunk with your code?\n. make sure to send the json as json and  not as text\n. My pleasure.\n. This is a common problem. When having translations that contain HTML angular $interpolate service kinda \"sanitizes\" it by default. To get around this, one has to add ng-bind-html-unsafe directive on the element that translates a translation id.\nangular 1.2 will provide $sce service, which makes it possible to whitelist unsafe contents. However, things should work right now so we need a clever work around. An idea would be to expose an API to pre/post hook into angular-translate interpolation process.\nThis would give the user the full control of what's happening when a translation contains unsafe contents. An alternative would be to implement automatic HTML detection within the currently used interpolation service. However, this would add additional logic that is actually already covered by angular itself.\n@DWand @knalli any ideas?\n. Okay, looks like we won't get a solution in the next release. Leaving this open.\n. @knalli I haven't thought about it yet. I'm not sure, but somebody pointed me to $injector.has() method, which could be useful to check if e.g. $sce is available or not. Have to check, if this method really did it to 1.x master. If so, we don't even have to split support for different versions.\n. @traukainehm @knalli @DWand As also mentioned in other issues. It is actually possible to use HTML within translations and make them interpreted right by the browser. All you have to do is to use the translate directive rather than the translate filter. The reason for that is, that the translate filter simply interpolates the translations and returns a string. Where as the translate directive also element.html()'ed it into the corresponding element, which makes the browser interpreting the markup.\nWe will support angular 1.2 $sce service with an official angular-translate 2.0 release. Closing this one.\n. You talk about partial loading, which is what we are currently working on\n:)\nOn Aug 28, 2013 5:32 PM, \"Sam Blowes\" notifications@github.com wrote:\n\nI'm not sure if this is already possible with this plugin, but it would be\nreally useful if you could provide localization per controller for maximum\nmodularity.\nTake for example the lazy-load-seed\nhttps://github.com/lukeb-uk/angular-requirejs-lazy-load-seed\nIt would be useful if the localization could be defined at a controller\nlevel eg.\n--/home\n    |--/controllers\n    |  |--homeController.js\n    |--/views\n    |  |--home.html\n    |--/localization\n       |--locale-en.js\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/148\n.\n. You should have a look at the current canary branch as there are things baked. We're almost done! Closing this for now.\n. Think I need to see some code to help you out. Where do you use a method\n'translate'?  There is actually no method that is called so.\nOn Aug 29, 2013 1:32 AM, \"Ricky Ng-Adam\" notifications@github.com wrote:\nGot a yeoman project using angular-translate with a custom provider.\n- grunt server (development files): WORKS\n- grunt build and served to localhost by nginx: WORKS\n- copy dist/ to ec2 server and have it served by nginx (same config):\n  ERROR\n...this is the error I'm seeing:\nTypeError: Object # has no method 'translate'\n    at Object. (http://servername.compute.amazonaws.com:8080/scripts/543e9a8b.scripts.js:545:29)\n    at fnInvoke (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:6168:21)\n    at OPERATORS.| (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:5797:59)\n    at http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:6116:14\n    at Object.$interpolate.fn (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:4977:22)\n    at Object.Scope.$digest (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:7935:38)\n    at Object.Scope.$apply (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:8143:24)\n    at done (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:9170:20)\n    at completeRequest (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:9333:7)\n    at XMLHttpRequest.xhr.onreadystatechange (http://servername.compute.amazonaws.com:8080/bower_components/angular/angular.js:9303:11)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/149\n.\n. @rngadam  Glad to hear that :)\n. Hey @auser ! Thank you for the PR, but this is already covered in canary branch right here https://github.com/PascalPrecht/angular-translate/commit/cdc9e9e2084912e07cf36b3d7bfa2754eadabcd2 :)\n\nWill land in master with the next release!\n. Hey @Urigo ! LTR languages are really an interesting part when it comes to i18n. I've never had to do so, so my experiences in that kinda languages are NULL. However, having an asynchronous loader that loads additional CSS, based on the type of language sounds clever to me at a first glance.\nUnfortunately it is not planned to bring more built-in loaders to angular-translate. We have currently urlLoader and staticFilesLoader and partialLoader is in the pipe. Actually, you can implement a urlLoader with the staticFilesLoader, so its more a task of the users to build their own loaders for their own needs.\nNevertheless, good catch!\n. @Urigo BTW: This doesn't mean you are not allowed to build your own custom loader that solves that specific problem! If you have already a solution for that, introduce a new loader and tell us about it! :)\n. Closing this for now.\n. @rafael-st-rj Yea, this will come with the next release!\n. @rafael-st-rj However using \"greater than\" is a bad practice. Since you'll never know if your code breaks with a next release, which is why I point to specific versions explicitly.\n. Update landed in canary. Closing this for now.\n. :+1: :+1: :+1: :+1: :+1: :heart: \n. Thanks :+1: \n. Awesome, thank you!! \n. @sgara could you pull the latest changes into canary and update the PR so I can merge fast forward?\n. @sgara ?\n. You can't. You have to pass an expression instead.\n. Which is why translate filter supports both: either a string that gets parsed and evaluated or an expression that gets evaluated against the current scope.\n. Sorry @DWand for the delay. Have to take a deeper look. Hope I'll find some time tomorrow.\n. hey @DWand! One question: Which plural rules will be used? e.g. German probably uses different plurals rules than another language. So translations have to structured differently.\n. Will close this for now. Feel free to reopen it anytime.\n. Fixed.\n. Waiting for a merge: https://github.com/m7r/grunt-ngdocs/issues/29\n. Fixed.\n. Hey @bcamp1973! I'll have a deeper look at the ui tooltip to see how things exactly work! \n. Okay @bcamp1973 I just took a look at the examples on the website. So since tooltip could also be and interpolated string (not a static string) things should work by just passing the translation id with the translate filter as interpolation like this:\nhtml\n<a href=\"...\" tooltip=\"{{ 'TRANSLATE_THIS' | translate }}\">..</a>\nMake sure to surround the translation id with single quotation marks.\n. In addition, if your translation id contains HTML you can bind it unsafe if you trust the source. Then you would use tooltip-html-unsafe instead of tooltip attribute.\nHope this helps, lemme know!\n. My pleasure!\n. Hey @devesh!  This sounds interesting.  So first of all, there's grunt-angular-translate,  a grunt task that kina collects used translation Id's from your view. Maybe this is interesting for you. \nI don't know the tool you've mentioned, but I'll have a look at it!  \nAnd what do you actually mean with the no-translate mode? Turning the interpolation off?  Given translated values wouldn't have any effect. \nOr am I getting you wrong? \n. Unfortunately, I think this is out of angular-translate's scope.. :(\n. @devesh Yea, angular-gettext is a great project! :)\n. Hey @quiaro Thanks man! Could you please consider conventional commit messages (see contributing guide) and send the PR to canary branch instead? Then I would happily merge this in :)\n. Great thanks!\n. Hey @bennyng Could you please consider conventional commit messages (see contributing guide) and open the PR on canary branch?\n. Great thanks, closing this for now.\n. Hey @komakino! Thanks for the PR.\nA few things:\n- I don't get that shortcut thingy. What if there's a translation id foo.bar and foo.bar.bar? does foo.bar.bar override the existing foo.bar?\n- When is that linking stuff required? Do you have any real world example?\n- Could you please provide corresponding tests, so one can easily see what happens with your changes\n- Once we've discussed all the things, the PR has to be send to canary branch as pointed in the Contributung guide.\n. @komakino Ah now things are getting clear. Of cource there can't be a foo.bar if there's a foo.bar.bar translation id. Currently the translation table is flattend, that's why It's possible to have namespaces. Loaders should return json, otherwise angular-translate isn't able to post process the data.\nSo, thanks for you ideas! I like that linking feature, but I'm not sure about the shortcut thing. It actually won't hurt to let that feature in. Let's here what @knalli and @Dwand have to say about it.\n. Also pinging @sgara on this thread.\n. Okay, since 2 of the best team agreeing with these features, democracy is on your site @komakino ! :) Now write some tests and re-send the issue to canary branch! :)\n. @komakino Awesome! Looking forward to it!\n. @sgara Actually a good catch. Maybe there's a case where there's a translation that begins with @ and follows the name of the translation id.\n. LGTM.\nOn Wed, Sep 18, 2013 at 1:12 PM, Salem Salln?s notifications@github.comwrote:\n\nHow about '@:TRANSLATION_ID'?\n?\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/167#issuecomment-24656707\n.\n\n\n/pp\n. @komakino Any progress on sending the PR to canary?\n. @komakino Looking forward to your changes in canary branch!\n. Hey @komakino still around? :)\n. @komakino  no problem man, this is open source! :) Actually, all you have to do is to make the same PR but choose the canary branch as target branch to send the pull request to. It would be HUGE if you'd just do these to clicks! :)\n. @sgara Thats totally O.K.A.Y! I'll set everything up and push to a separate branch. Will ping you in this thread, once I'm done. Then you can start as soon as you like. No stress, buddy.\n. Moved to https://github.com/PascalPrecht/angular-translate/issues/174\n. @ProLoser Ah glad to see you're using angular-translate. Looks like you've found an answer. However, I would love to hear your feedback on angular-translate. If there's anything (and I'm very sure it is!) that could be done much better please lemme know!\n. The latter, since it's possible to switch the language at runtime. Currently there's only a caching behaviour for asynchronously loaded translation data. Once loaded, it'll be cached for a session life-time. If you have any ideas on how to make it better, that would be much appreciated.\n. @ProLoser Hm.. I probably get you wrong, but it isn't actually a rare use case to switch language during runtime (because thats what the module is for), is it? So regarding bindonce, I just had a little discussion about exactly that topic with other developers this morning. And yea I'd definitely take a deeper look at bindonce. But this would only makes sense for situations where you aren't providing more then one language, right?\nRegarding the third point you've mentioned, could explain a bit more how much it differs from what angular-translate is currently do?\nThanks for your feedback man!\n. @ProLoser Thanks for you thoughts on this! I'll think about it and let you know what I'll do. Never had a look at ui-utils format filter, so I'll have a look at this too!\n. Storing dictionary in cookies? This actually doesn't happen at all. The only thing angular-translate stores into cookie (or localStorage) is a language key.\n. @ProLoser Yea sure http://pascalprecht.github.io/angular-translate/docs/en/#/guide/08_storages#letyourapprememberthelanguage :)\nBut appcache with manifest is an application level solution right? This is nothing angular-translate has to care about. Or in other words, it wouldn't make sense to put any kind of manifest usage into angular-translate.\n. I like the idea of @cburgdorf to bring suspend/resume pattern to angular-translate. However, I have to take a deeper look at bindonce. I'm pretty sure, this is not the first discussion on this topic, so somebody might already have good solution on that (but something service-based rather than directive based). If so, I wonder if we could just build a kind of adaption for this particular service and tell $translateProvider to use it. Similar to MessageFormat adaption for pluralization (BTW: @ProLoser this is why ui-utils format filter isn't enough. angular-translate is able to handle different interpolation services).\nHave to further investigate.\n. @Superlukec Thanks for sharing your experience! Like I said, I like @cburgdorf 's approach of suspend/resume and it's really easy to implement. I'll check against an implementation with bind-once and will then decide which approach will land in canary. Maybe they both work well together? \n. @damianfarina right.\n. @knalli implementation landed here: https://github.com/PascalPrecht/angular-translate/commit/3b1d1c6504f1c5de02d6ea0defcbee80d9fe0a7a\nalso pinging @cburgdorf to take a look at it.\n. @ProLoser yea these LOC are pain in my eyes too. Maybe you have some advice to improve it? Would be happy to merge a PR :) \n. Hey @johann-sonntagbauer we already implemented a suspend/resume mechanism. Translation Id's are only watched if needed (at least when using translate directive).\n. @keithdmoore Think you have to build that construct by yourself with the help of $translate.refresh() and your own custom loader.\n. Looking forward to your blog post!\nRegarding local storage, we never stored translations there. Storages are\nonly used to store the locale if needed. That  being said.\nOn Apr 3, 2014 3:51 AM, \"Keith D. Moore\" notifications@github.com wrote:\n\nGotcha. Nice library. Great documentation. Thanks for providing this. Just\na couple things that I got hung up on. I came across an older post (\nhttp://www.ng-newsletter.com/posts/angular-translate.html) that said\n$translateProvider.useLocalStorage() would store the translations in local\nstorage. Looks like maybe that has changed for performance reasons.\nThe other issue I had was that $translateProvider.(\"asyncLoader\")\nimmediate fires the factory to load the translations. I was to get around\nthat be using a different language for a sign page and then perform a\n$translate.use(langKey) to load the \"real\" translations.\nI was able to come up with a pretty elegant solution which I hope to blog\nabout soon.\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/169#issuecomment-39404837\n.\n. @arg20  No, only the first paragraph here: http://angular-translate.github.io/docs/#/guide/05_using-translate-directive\n\nMind sending a PR that improves the documentation accordingly?\n. The main change is here https://github.com/angular/angular.js/issues/7230\nwhere we check if we need to watch values at all. If not, we can unwatch the value of the translation id.\nHowever, when a language changes, we do want to watch the value again, because the text changes. So what we do is to only watch translation id's without dynamic values on language change: https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L188\nHope that clears it up\n. Hey, \nThis is indeed a topic that should be covered in the docs!  Thanks for the heads up, will update the docs accordingly but it could take a while since we have to document it in three (the fourth is in the making)  languages. \nI'll leave this open and close it once it landed in canary branch. \n. @Jenso you could also overwrite $translateProvider behaviour within your test module configuration.\n. @Jenso As you can see here: https://github.com/PascalPrecht/angular-translate/issues/42#issuecomment-26154708\n. This landed in canary. FINALLY!\n. Hey @skivvies! This actually looks very interesting at a first glance. But I have to take some time to think about that, currently I'm a bit stressed. However I'd say this is a great thing angular-translate could support natively. I'll come back to you at this thread!\n. @skivvies This is already a pretty good approach! Unfortunately, I didn't have the time to work on angular-translate the last few weeks. Hopefully this'll change now, there are a lot of great features in the pipe, including yours!\n. @skivvies btw: Could I add getlantern as show/use case to the website?\n. Awesome! I'll ping you once getlantern landed on the site! :)\nOn Mon, Sep 30, 2013 at 10:28 AM, skivvies notifications@github.com wrote:\n\n@PascalPrecht https://github.com/PascalPrecht Psyched to hear it,\nthanks! And we'd be honored to be showcased on the angular-translate site.\nThank you for asking!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/171#issuecomment-25344480\n.\n\n\n/pp\n. Landed in canary.\n. @Edifice Just like @knalli said, you have to html-bind-unsafe your contents manually. You could even do that without using the $translate service just by passing translate filter into the expression like this:\nhtml\n<ANY ng-bind-html-unsafe=\"'TRANSLATION_ID' | translate\"></ANY>\nAnd yea, we would bring support for that cases with a release that requires angular >= 1.2.\n. @knalli see https://github.com/PascalPrecht/angular-translate/issues/147#issuecomment-24794306\n. @knalli Doesn't <ANY ng-bind-html-unsafe=\"'TRANSLATION_ID' | translate:'{foo: 'bar'}\"></ANY> work?\n. @knalli Sorry, you get the idea.\n. @sgara still around?\n. @sgara haha okay! I was just arranging the issue into milestones, which is why I wanted to know what the state is. We need to get another release out, otherwise users aren't happy with us anymore :D\n. It'd be great if you could send a PR by the end of the week with your french translations, so we can prepare for a 1.1.1 release.\n. @sgara still alive? Would like to close this one haha\n. @jacqueslareau Then you should ping @sgara  :) \n. Kinda getting the feeling that he's out on this one..\n. @jacqueslareau Wow that's super awesome!\n. French translation landed\n. Hey @EpsilonRepo \nSo first of all, static is not a good language key name. You probably want to change that. Next, setting preferred language AND fallbackLanguage to static doesn't make really sense. In that case, you could leave that off.\nHowever, could you please report, if the loader gets invoked on initial page load?\n. @EpsilonRepo Yea you also have to replace the static with fix_de in $translateProvider.translations() \n. Uhm.. @DWand, isn't that the exact same code?\n. Ah missed the char.. haha sorry\nOn Mon, Sep 23, 2013 at 1:38 PM, Max Prichinenko\nnotifications@github.comwrote:\n\n@PascalPrecht https://github.com/PascalPrecht, not at all )\n@EpsilonRepo https://github.com/EpsilonRepo, could you set up a plunkr\nor something like that to show the problem, please?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/175#issuecomment-24913765\n.\n\n\n/pp\n. Yea wait a sec.\n. Here you go: http://plnkr.co/edit/wapfZc\n. Argh. Plunkr doesn't take my changes. Okay. Just remove everything you don't need :)\n. You have to fix the resource url to partial loader.\nraw.github.com should be rawgithub.com (it's a proxy since github sends raw files as plain text).\nOnce that is done, the code works and does what it should do.\n. Here's the updated plunk: http://plnkr.co/edit/CAAdF1?p=preview\n. What happens here is, that the app uses fix_de as default language. Id doesn't load any data asynchronously because there isn't any $translate.refresh(). However. The \"FOUC\" you have, is that you have static text in your HTML. To get rid of the FOUC, simply remove your node content :)\n. Here's the updated plunk without any flickering: http://plnkr.co/edit/CAAdF1?p=preview\n. @EpsilonRepo Ah okay, just updated the punk. Yea, you're right. Partial loader seems to override existing translation able. @DWand can you take a look at it?\n. @DWand We need a corresponding testcase that covers that setup. I'm pretty sure we actually tested a lot and also, that translatepartialloader doesn't override.\n. @DWand Great hint thank you :heart: Maybe I also find time to take care of it!\n. @EpsilonRepo missingTranslationHandler is not the handler you're looking for. MissingTranslationHandler gets invoked, when there's a missing translation id. What you need is an error handler for partialLoader. Here's an example: https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/service/loader-partial.spec.js#L1115\nAs you can see, a handler is passed to partialLoader which takes care of the rest. You can find the implementation of the used handler in the example right here: https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/service/loader-partial.spec.js#L21-L27\n. Also you have to do, is to resolve a promise with a (maybe fallback) translation table. This should work as hotfix aka workaround until we have fixed the real issue.\n. @DWand yea totally got ya :) Have to dig deeper, but currently no time because of a talk preparation. Hopefully find some time at the weekend.\n. :+1: \n. @DWand Thanks for your (always) awesome diagrams, haha :+1: Your chart makes pretty clear what's our issue. $translate.refresh() of course, kicks all tables and load'em all again. And here's the problem: The translation table that is registered via $translateProvider.translations() was never loaded asynchronously, which is why the partialLoader doesn't have any Part registered for that kinda static language.\nSo things behave pretty logical. $translate uses the loader to re-load tables asynchronously. But the static language was never loaded asynchronously so nobody really knows about it.\nDoes that make sense?\n. @DWand It turns out that the FOUC isn't the actual problem anymore. The problem is just, that statically added translation tables get dropped and can't be re-added because only translation tables that have been loaded asynchronously get re-loaded.\nSo what we need, is a way to also \"refresh\" statically added translation tables. However, I like the approach to only drop tables, once translation table have been successfully loaded.\n. Hey @EpsilonRepo sorry for the late answer. Of course we'll get this fixed! @DWand just sent a PR a few days ago, have to take a look at it. A fix for that will land in the next version which hopefully get out during the next week. (There are a lot of other features that people ask for, so we have to manage priorities). \nI hope this is okay for you!\n. Currently, the statically added translation will be dropped anyway. Only translation table recognizable through partial loader will be loaded. So you wouldn't even override, but drop the static table making it unaccessible.\n. @DWand You rewrote $translate.refresh() and introduces $translateProvider.addPart() right? So yea I think so. But I would close it, once it landed in master\n. Tested. It's fixed.\n. @rottingcorpse here's how to use it: http://plnkr.co/edit/CAAdF1?p=info\n. @Sanjo Not sure when angular-translate will require angular 1.2 so till this is clear, you have to specify angular version of an application level.\n. @Sanjo Just to clarify: The message from bower that it doesn't know, which angular to use is totally okay. That's what it's for right? In some cases you have dependencies that have dependencies that depend on the same library but in different versions. Bower just can't know which one to use, this is where you come in.\nJust like @knalli said, currently there aren't any issues with angular-translate in conjunction with angular 1.2. So just declare angular 1.2 as dependency of your app, if you really need it. angular-translate will have a 1.0.8 dependency until 1.2 is finalized. We can't just say that angular-translate depends on angular 1.2 if it actually isn't the case, you know.\nSo, stick with 1.2 as dependency of your application. Report issues if there are any, so we can fix'em. angular-translate isn't officially tested with angular 1.2 yet, but you can report as much issues as you want, that just makes the bug process faster, right? :)\nHowever, your feedback is ALWAYS welcome. angular-translate will declare 1.2 as dependency once its ready and all tests are green! :)\n. @knalli nailed it\nOn Nov 10, 2013 11:31 PM, \"Jan Philipp\" notifications@github.com wrote:\n\nYep!\nAdditionally, current versions of bower ask for a resolution (if version\nconflicts exist) and will write it permanently to bower.json if you want.\nVersion conflicts are not mad, they are only conflicts. In bigger projects\nthis is normal.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/176#issuecomment-28162870\n.\n. @ProLoser Haha no probs man! :) This is what the open source world is for! You're free to choose what you want. I also talked to @rubenv about his project and it turned out that both solve different use cases. So I would rather try to see if there's anything (and I'm sure there is), that I can steel to make angular-translate better.\n. Hey @calleerlandsson !\n\nYea, sure, this behaves totally right, since you're executing asynchronous code. But when setting a specific language at run() phrase anyway, you could also just set this language as a preferred language right?\n. @calleerlandsson You could also wrap your $translate.uses() in a condition using something in combination with $translate.proposedLanguage(). http://pascalprecht.github.io/angular-translate/docs/en/#/api/pascalprecht.translate.$translate#proposedLanguage\n. @calleerlandsson Argh. Have to think about that.\n. @calleerlandsson I definitely get what you mean! But we decided to not set the current language, just because the user says so. We have to wait for confirmation, if the language is really available or not and also loaded or not (loading could also fail). As long as a loader doesn't return from its process, we can't assume, that the current language is the one the loader is currently fetching.\n. Currently in such cases, people used a supported storage. So either localStorage or cookieStorage http://pascalprecht.github.io/angular-translate/docs/en/#/guide/08_storages angular-translate would then either load a preferred language, or, if available and configured, the language that is saved as language key in the storage, as you can see here: https://github.com/PascalPrecht/angular-translate/blob/master/src/translate.js\nSo what you actually could do, is to implement your own storage service, which provides the needed API and uses the services you need to determine your language key, and configure $translateProvider to use that particular storage. More information on that here: http://pascalprecht.github.io/angular-translate/docs/en/#/guide/09_custom-storages\nThis is actually exactly what its for. Your storage service don't even has to be a real storage.\n. @calleerlandsson Okay!\n. Hey @DWand thanks for your great PR!\nThis seems to solve the known issue, that statically added translations are not being reloaded.\nSo, setPart() is of course a pretty neat name. However, I wonder if something like setStaticPart() would probably be a better name, to make more clear what this function is all about.\nI just find it to easy to confuse with addPart() and setPart().\nBut probably I'm wrong. What do you think? Also pinging @knalli here to leave his opinion. @knalli, if you have any questions about what this is all about, don't hesitate to ask. :)\n. Ah. Change my opinion. Actually, setPart() really describes what it does.\n. Hey @daanporon !\nYou're totally right! Only directives get updated when a \u00b4$translateChangeSuccess` event has been fired. Filters don't need to listen to such event because they get re-evaluated by angular itself.\nAnd yea, just like you said, to get around this, you have to wrap the usage of $translate service into a $rootScope.$on('$translateChangeSuccess', function () {}); (or just $scope depends on your context).\n$translate service doesn't listen to $translateChangeSuccess event, to avoid side effects. The service should just translate your contents by interpolating translation ids against some possible values.\n. @daanporon did it help?\n. Closing this for now.\n. @daanporon great!\n. @stelioschar  This is new to me! So this means, the translate filter isn't considered at all?\n. Closing this because of inactivity.\n. @Grigorius  @maklemenz angular-translate already supports several broadcasts. You can find more about'em here: http://pascalprecht.github.io/angular-translate/docs/en/#/guide/16_events\nTo clarify: Almost all events will be broadcasted from a service level. So, no directive or filter should care about broadcasting any events.\n. Why can't you just listen for the first (if only that one needed) $translateChangeSuccess event?\n. And BTW: of course they get fired on first default language translate.\n. @Grigorius Okay so... can I close this now?\n. @akarelas Definitely a thing we have an eye on, but this won't be implemented in the next few weeks. Have to discuss with the team how to tackle this problem\n. @akarelas We probably have to rethink the whole directive, which then needs hand-crafted compiling anyway. Maybe we don't even need to introduce a new translate-compile attribute and translate directive would do it automatically. Will keep you up-to-date here.\n. @colinmorelli @akarelas landed in canary will be released in version 2.0 probably next week!\n. You can't. Each translation id points to a single translation, which is a string.\n. @geekuillaume Thank you for your feedback! :)\n. Maybe translationNotFoundIndicator are helpful http://pascalprecht.github.io/angular-translate/docs/en/#/api/pascalprecht.translate.$translateProvider#translationNotFoundIndicator\n. You could also use angular-translate-handler-log as described here http://pascalprecht.github.io/angular-translate/docs/en/#/guide/14_error-handling\n. Thanks @calebegg I'll have a look at this!\n. @maklemenz @calebegg Sorry, currently having some private problems. Hope to take a further look next week.\n. @calebegg fixed in canary now.\n. Hey! You can pass dynamic data through translate directive by just using\nmustache syntax. The dynamic value gets than interpolated and afterwards\nused to determine the translation.\nSo translate=\"{{foo.bar}} \" should do the trick.\nOn Oct 11, 2013 4:59 AM, \"Christophe Levesque\" notifications@github.com\nwrote:\n\nThe way to do variable replacement as described in\nhttp://pascalprecht.github.io/angular-translate/docs/en/#/guide/06_variable-replacementis a little cumbersome when the variables are dynamic: having to create a\ntranslationData object in the controller and pass it to the directive is a\nlittle too \"intrusive\", especially when all the objects I need are already\nin the $scope.\nIt would be really nice to be able to write something like:\n\nwhere:\n// In the $translateProvider config.var translations = {\n    'HELLO': 'Hello {{foo}}!'}\n// In the controller.$scope.currentUser = ;\nI guess the directive would look at all required parameters and load them\nfrom the scope from a \"namespaced\" attribute (translate- + param name).\nWould that even be possible?\nThanks!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/188\n.\n. @totof3110 Sorry, miss-read your question. So what you want, is actually a bit more declarative way to pass variable values through translate directive. Actually, the outcome would be pretty cool since one would be able to pass values in a pretty nice way and even without mustache syntax.\n\nThe downside would be that when having 3 or maybe 4 variables values, the usage of the directive could in such cases look like this:\n``` js\n<ANY\n  translate=\"FOO\"\n  translate-foo=\"bar.baz\"\n  translate-bar=\"baz.bar\"\n  translate-baz=\"foo.bar\"\n\n\n```\n\nHowever, in that kinda case, one would probably switch over to translate-values syntax and mustache.\nThinking about the implementation.. we have to compile the directive by hand since we have to determine what translate-* properties are configured. Unfortunately, we don't know what value identifier are inside of a translation id. Dynamic values get currently interpolated against strings completely blind, which means, you either provide all dynamic values that are needed, or not.\nWe also have to introduce a different type of value determination, since we wouldn't let angular (or actually interpolate directive) do the interpolation anymore for us. We now have expressions that Have to be evaluated. \nThere we have to make sure that we evaluate against the right scope, which isn't obviously when e.g. using this syntax inside of an ng-repeat or so.\nThe new syntax could also confuse users in some cases because translate-values only supports a string or an interpolation directive.\nAnother problem would be namespace conflicts. Regarding the example above, we have 3 different translate-* attributes, each of'em represents a value in any kind of way (currently an expression). Let's say we introduce another \"built-in\" attribute in the future. The introduction of a new attribute besides translate and translate-values could break your code when already using attributes in the translate-* namespace.\nThis means we have to at least introduce another namespace reserved for that kind of values. So sth. like translate-value-*. \nSo, I don't want to smash your idea down here. Actually, I like what you're requesting, since, like I said, the outcome would be pretty cool. I'm just thinking out loud.\nI would like to ping @DWand and @knalli here and hear what they think about this feature.\n. @knalli Agreed. Regarding point 3, we still need a solution for https://github.com/PascalPrecht/angular-translate/issues/169 which kinda goes hand in hand with existing watcher problems.\nExtending the existing watcher requires the explicit properties on the scope, which is a bit tricky if we don't even know, which translate-value-* values are currently passed.\nI think we have to rebuild the whole directive anyway to really make use of the advantages we actually should have when using a directive rather than a filter. Currently the directive sets up a watch which makes it not better as a filter unless we don't make any unwatch() there.\n. Hey @totof3110 you feature request just landed in canary :) \n. :+1: \n. Closing this due to duplication\n. Thank you sir! Could you please send the PR to canary branch?\n. @spatical ?\n. @spatical Would love to merge that one. Could you send this PR to canary branch please? :)\n. Okay, pulled your changes and merged them into canary manually. Thanks for your work @spatical \n. Hey @knalli sorry for the unresponsiveness.. I had/have some private problems I have to take care about. However, Just like I said in the other issues, I think we need a better solution for that compiling stuff. I'm talking about always compile rather than introducing a new translate-compile attribute. Since directives get compiled anyway, this isn't even a performance issue. Actually, it's the opposite. We take control of the whole compilation process and introduce a resume/suspend pattern to not always watch translation id's and values. I'll come up with some sample code the next weeks, but I'm still stressed now. I also have to prepare a talk on angular-translate, so....\n. @knalli okay I just made a plunker right here: http://plnkr.co/edit/rPAjdG?p=preview Take a look at line 69 in app.js. Line 70 works with compilation out of the box. When you adjust the the range values index.html and switch between line 69 and 70 you can play with these scenarios. I think we should try to setup a jsperf from it.\nWhat do you say? I already tried to setup a jsperf, but it didn't work for me :( directive is just ignored.\n. @knalli otherwise we just go with translate-compile for now.\n. @knalli Yea it's just because I already pushed some bits again, but that's not the problem, I'll take care of merging/rebasing :)\n. @knalli no, please take a look at the plunk first, and play with it.\n. @colinmorelli If we just merge temporarily we'd introduce breaking changes more often. Which is not what we want.\n. There's nothing not right about it. It's actually a good way. I proposed it by myself. But I also want to take care of a clean interface. We probably merge that in. But this will land in a 2.0 release. Think you have to patch your own version for now. Sorry.\n. This PR needs an update due to big changes :)\n. Hey @knalli thanks for the PR!\nLooks very good to me! Just for curiousity.. this doesn't solve the \"you have to use ng-html-bind-unsafe directive\" right?\n. Currently, when translating translation ids that contain HTML, the HTML gets transformed in their special entities, but you actually want HTML to be html, which  is why you have to combine a translate call with ng-bind-html-unsafe directive.\nWhich means, you have to know, where translation ids contain HTML to get them interpolated right. Which is kinda shitty, you actually don't want to care about that as a user.\nDoes that make sense?\n. Agreeing on point 2 and 3. And I'm quite confused that point 1 works. I had some scenarios where it actually didn't work to use HTML within translations because $interpolate service makes them save (which is why you have to use it in combination with ng-html-bind-unsafe). Will come back to it later.\n. @knalli  Finally found some time to re-read the issues. So yea, I like it! :) Is this PR already aware of also expecting params like '$sanitize'  or '$sce' ?\n. Yea it's only available there. However, it should then work with $sanitize at least.\n. If one is able to abstract these services away, than one could prepare the code accordingly to work with $sce in the future. If this isn't possible, for whatever reason (I'm not deep enough in the topping) than it comes with the 2.0 release.\n. @knalli Will have a last look at the code and merge it in then. Thank you very much for your effort man! :)\n. @knalli Ah just one thing. Could you also add some docs to the source? I mean ngdoc-powered docs?\n. Thanks @knalli for being such an active contributor!\n. I think @DWand would be the right one to guide @mibamur a bit here. Thanks for your work @mibamur BTW!\n. @DWand @mibamur please comment in english so others are able to discuss with us. \n. @DWand What's with this one here? Can I close this one?\n. @Grigorius  The translate directive only updates the DOM on  $translateChangeSuccess event, because only if the translation change was successful, we have to update the DOM.\n. Why would you do that? This doesn't work in all cases. Just imagine the case where you just update translations with $translate service wrapped in a $rootScope.$on('$translateChangeSuccess' ... or so. $translateChangeEnd would never be called, because it depends on DOM updates. I don't think that this is a good idea.\nHowever, why do you need it this way? Any use case where it's required?\n. Hm.. For such things I would introduce rather a new event. Something like $translateDOMUpdated or so. Pinging @Dwand and @knalli here.\n. @Grigorius @DWand I thought about this again and actually, we can't fire event's for every DOM snippet that gets updated. Just imagine you use 200 translate directives and all of them affect the DOM. This would be 200 events that get fired.\nSince this is an idea of somehow making it possible to change styles for right-to-left languages, I'm closing this now. We have to make this possible in another way.\n. So, whats the state on this issue, guys?\n. :+1: \n. @jedmao sorry for being late again on this topic, I try to find some time to look at the issue later today, have a ton of stuff todo. Otherwise, always feel free to just send PR's with proposals, that would speed up the process. :)\n. Hey @Narretz could you provide a little pseudo example which clarifies what behavior your would expect in different cases?\n. Closing this for now. Feel free to re-open again once there's some activity again.\n. Hey @checketts I reviewed your PR. Thanks!\nCould you just explain in a few words, for which cases this helper is useful?\nI also left some comments on the PR.\nAlso, make sure to consider the Contributing Guideline and send the PR to canary branch.\n. @checketts hey still around :) ?\n. I think we should rename the service to something like $translatePseudoTranslationHelper or so and making it available as an extension. What do you think @checketts ?\n. @checketts So yea I'd say this is a helper service. Let's make it available as helper service and installable as an extension. Could you provide some unit tests and change the code that's a factory rather than a constant. In addition, we need documentation there.\n. @checketts then, all we need is documentation :)\n. @checketts oh yea and of course, this PR has to be send to canary branch\n. @checketts Hey, still around? :)\n. Pinging @Dwand here in order to make sure the ru and uk translations get updated.\n. Also pinging @sgara so he is informed about the changes for his french translations for the 1.2.0 release.\n. Dean Sofer one of the heads asked me to put it under the umbrella. I also think that this is a good thing. But I'm not sure about the bower repositories I currently provide. In addition, I could imagine that we then definitely have to introduce some breaking changes. Thinks like translate directive would probably renamed to ui-translate or so.\n. To be backwards compatible?\n. Yea, I'd also say so.\n. Since this is a much bigger step where more discussion with the rest of the angular-ui team is required, I'd prefer to do it either while adding support for 1.2. So this will be a biiig release which would introduce angular-translate 2\n. There will be actually no disadvantages as long as any policy about the project is clarified. Which means, we shouldn't lose the control of the project. What happens when etc.. So if we will stay the \"lead\" team in the future there's no disadvantage at all. Rather an advantage because we could bring more attention to the project and people who work with it.\nWe just have to decide to either move to angular-ui, which probably means a BIG breaking change (has to be discussed then), or to create a new organisation which only is about angular-translate and its eco system, where also projects like grunt-angular-translate could be moved to.\nI'm actually thinking about such move to no longer being the bottleneck when it comes to decisions and pushing things and let requests in etc., since it turned out that I have lots of stuff to do in the future.\n. Again, another option would be to create a new organization for the angular-translate project.\n. So what I was intended to say was, when we provide such tools like grunt-angular-translate and also provide bower packages and therefore the existing bower repositories, I think it'd be better to create an organization for angular-translate rather than putting angular-translate under the angular ui umbrella. The problem here is, that I don't think that we can keep our current infrastructure when we move to angular-ui because projects in this community are handled differently. When we create an organization which is just about angular-translate and everything around it (like grunt-angular-translate, helper services, bower packages etc), we can keep our infrastructure without compromise.\n. @knalli @DWand @firehist @sgara okay guys. I decided to create an organization called \"angular-translate\". This will happen for the 2.0 release. All bower packages etc. will be moved to that organization. I make you guys all team members, so that you also have push access. @firehist It'd be great to have your grunt plugin under the angular-translate umbrella too, if you want to. :)\n. @firehist Originally I would say we bring angular-translate to a valid 2.0 state and migrate all other related repositories over to the organization. I could also imagine to start with the move process directive after the 1.2.0 release. It's just there all packages have to be moved over there and I'm also planning a site relaunch. So there'll also be a angular-translate.github.io website.\nTo get there, there's a lot of stuff that have to be done. So, what do you think? Preparing EVERYTHING, and then moving over to organization or do a more like step by step process?\n. Awesome!  :)\nYou also help out on contributing to the core source itself 4sho!\nOn Nov 22, 2013 5:29 PM, \"Benjamin Longearet\" notifications@github.com\nwrote:\n\n@PascalPrecht https://github.com/PascalPrecht It should be better I\nthink to wait for a 2.0 release to move all project and release website.\nBTW, if you need some help about website or smth else, I'm free for\nhelping!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/201#issuecomment-29086521\n.\n. @knalli what kinda plan? :)\n\nOn Fri, Nov 22, 2013 at 10:29 PM, Jan Philipp notifications@github.comwrote:\n\nI would suggest a big plan, but not going in details too much. Some stuff\ncould be already started..\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/201#issuecomment-29110782\n.\n\n\n/pp\n. Haha, yea sure I mean, GO HEAD! :)\nOn Fri, Nov 22, 2013 at 11:16 PM, Jan Philipp notifications@github.comwrote:\n\nDon't we? Just go ahead? Being fully agile? :)\nNevermind, but I thought to make a (small) check list of things to done:\nrepos to moved, to create, website, and plans for stuff like transitions\nfor open requests.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/201#issuecomment-29113625\n.\n\n\n/pp\n. @knalli just to clarify of course we need a check list to make sure everything will work fine. Just hadn't time to do so yet :)\n. Decided!\n. Hey @szimek!\nThis is true, $translate service doesn't compile given markup (which could contain directives). However, we are on it. @knalli already sent a PR to kick off a $compile explicitly. It isn't merged yet, because I think we need a better solution without introducing new attributes. In other words, at least translate directive should always  compile.\nPlease stay tuned, it'll take a while until this lands in master, because currently I'm a bit stressed due to private problems and talk preparation.\n. Allright, closing this for now and referencing the original issue here: https://github.com/PascalPrecht/angular-translate/issues/184\n. @snebjorn angular-translate sets the fallback language using $translateProvider. You just have to $translateProvider.fallbackLanguage('yourLangKey'). And configure a loader just like you always do. The fallback language is then used, when the modules tries to translate a key, which isn't available for a particular language.\n. Great we could help out!\n. Hey @PaulL1 !\nGreat you've put this into an issue here, this helps A LOT! :)\nSo I'll try to answer your questions and leave my thoughts here. \n1) Having an invalid JSON file is really a mess when it comes to debugging and the console just says that there's a parsing error or so. However, just like you said, even if the think about introducing a kinda special reaction by angular-translate when such things occurs, there's actually no other place to react then the console itself. So beside the fact that the partial-loader is capable of configuring a custom error handler, which you can build yourself to react in any way on errors, learning to use the devtools always the way to go.\nI don't know how much front-end development experience you have, but as for me, the first thing I look at when something doesn't work in the browser while executing some JavaScript, is of course the console! :) Because it knows if your code has errors or not. I would suggest you to get used to it. You are a developer, so it's your job to do it anyway. :)\n2) Since I didn't realized a project yet which uses all of angular-translate's features or needs so many languages that became a mess to maintain translation files, this wasn't a problem for me. I think a valid way to handle this, is to first, replace all concrete textes in your app with translation id's and write them into an excel file or so. Anytime a new translation comes in, you would extend the file. People who take care of translating the texts into other languages now have a great mapping and all they have to do is to fill a column in the table with new translations. One could that build a script that generates language files from this sheet. However there's also https://github.com/firehist/grunt-angular-translate which kinda collects all used translation id's within an app. Maybe this is useful for you.\nHowever if you wanna build a tool that helps you out, don't hesitate to do so and let us know! :)\n3) Regarding your end-to-end tests. I don't think you should test if a translation id gets translated to the right text. This is not what your app takes care of. You should test your apps functionality not the functionality of third party libraries. So what you actually try to do is to test stuff which is already tested with over ~300 tests in angular-translate itself :)\nSo my advice: Don't test things your app doesn't do. And also don't test things that are not the functionality of your code. How simple is that? :)\nHope this helps.\nCheers.\n. @PaulL1 Maybe angular-translate got you covered http://pascalprecht.github.io/angular-translate/docs/en/#/guide/14_error-handling\n. @PaulL1 Glad we could help! :) BTW: if even the log handler doesn't really fit to your needs, you can just implement your own handlers and hook them up. :)\n. @DWand Wow... this is huge.\n. You are awesome @DWand thank you! :)\n. Hey @Aestek ! This looks good to me! Will merge it during the next days.\nThanks for contributing! :)\n. Okay @Aestek I would like to merge this one :) But we need some unit tests. Could you extend this PR with tests? :)\n. @Aestek great, thanks!\n. @Aestek Looks good to me at a first glance. When all tests are green, I'd merge that in. However, we have to rethink the whole directive anyway. I see if we can make another release for it.\n. Well done @Aestek ! :)\n. @Aestek you know, there are plenty things that has to be done by the directive, which it doesn't do currently. There's for example the simple fact, that the directive doesn't compile translation, which means you can't use directives within your translation. In addition slows the directive your app down with a big amount of translations, because it sets up a watch for each translations, actually kind of the same as the filter does. Now on each $digest, all translations get re-evaluated even if its actually not needed, because they stay probably the same. We have to find a way that the directive only watches when a translation change happens.\nOf course, this doesn't apply to translations that have translate-values. These values have to be re-evaluated during a $digest. So what we need is a kind of suspend/resume pattern to only watch translation id's when it's needed. @cburgdorf already put some great input into one of our issues.\nSince I hadn't the time yet, to implement the whole thing that it takes care of all of these things, we are still open to think about it and how we could do it best.\nIn addition, I think it would be better to always compile by hand wether there's a directive within a translation or not. So this also has to be implemented. Maybe we can also get a performance boost using transclusion, but I'm not sure about that.\n. Hey @remo I'm currently on my way to Amsterdam, will have a look at it once\nI'm there!\nOn Nov 5, 2013 11:23 AM, \"Remo Koch\" notifications@github.com wrote:\n\nHey,\nI just stumbled upon something, of which I believe is a bug.\nIf I pass an interpolated value as translation ID everything works fine.\nIf I change this translation ID into something different, the translation\ngets updated. But if I change the interpolated value into an empty string,\nnull oder undefined, the translated value does not get reset or changed.\nFor example (excerpt from my application):\n\nThe infoLine attribute gets updated on receiving data from my backend. If\nthere is nothing to display this value is empty (''). The content of this\nattribute is the message ID which is directly represented in my translation\nfiles. As I recall from the docs, if the interpolated translation ID could\nnot be found, the ID itself will be set as content of the . So in\nthe case of an empty value the content should also be empty. This is\ncurrently not the case.\nLet me know if you need any more information on how to reproduce this\nissue.\nThank you in advance!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/209\n.\n. @rkoch do I get you right here, that infoLine === '' ?\n. Read this: https://github.com/PascalPrecht/angular-translate/blob/master/src/directive/translate.js#L90-L95\n\nThe translation id itself gets only returned, if its really been passed, you know?\n. Closing this, because its actually not a bug :) feel free to reopen anytime!\n. My pleasure @rkoch :)\n. Okay, never did that. But if it makes developers live easier, I'll happily do that.  :) will keep you posted here. \n. @lehmamic thanks for the resource! I'll read needed documentation anyway, so I think we will get this nuget package very soonish!\n. Thank you so MUCH @lehmamic this is awesome! :) I'll have a look at it!\n. Closing this one and moving discussion to regarding PR https://github.com/PascalPrecht/angular-translate/pull/212\n. @lehmamic yay! You even automated the process using grunt :) great job! Is this also tested on Max OS X? Because there was a file path like nuget/nuget.exe or so somewhere in the code.\nWithout knowing how this whole nuget thing work, I don't think that an .exe file would work with OS X. Otherwise, the PR looks good so far! :)\n. Thanks for the info @lehmamic, I'll take a deeper look the next days. Pretty busy right now.\n. Any updates on this? @knalli @lehmamic \n. @knalli allright so we leave that off. But we still should make angular-translate available for NuGet peeps somehow (even if they could actually use bower too).\n. @knalli looks like the way to go. And another repository which pushes me more into the direction of a custom organization for angular-translate.\n. @knalli @lehmamic okay so closing this now, since we will introduce a nuget package repository once we're an organization.\n. The guys from microsoft also introduced nuget configuration in their reactive extension bindings for angularjs https://github.com/Reactive-Extensions/rx.angular.js leaving this here as reference.\n. @knalli yeap\n. @lehmamic Can you point to a commit or sth. ? Maybe a topic branch in your fork :) ?\n. Hey @knalli and @lehmamic looks like somebody already plushed angular-translate on nuget? :) http://www.nuget.org/packages/AngularTranslate/\n. Since there's also a request for angular-translate as npm package, I think we will introduce a angular-translate-package repository which is then used for bower/npm/nuget/whateverelse you like.\n. YES! https://www.nuget.org/packages/AngularTranslate/ :)\n. Pinging @skivvies here since he's also probably interested because of #171 \n. If a request is required to get the Accept-Language header, we should be careful here. We know that we are only able to make XHR's once we are at runtime. Which means, some inner logic have possibly to be changed to check if an Accept-Language request is required or not. And if so, first this request has to be done before any language is really set.\nThis also means, if you are on a bad connection, this initial request which is required (and depending on the app, if there are async loaders, these are gonna be blocked), that it could take a file until you get your translation data.\nBut yea, this is up to the dev and not an angular-translate issue. Rather a logical behaviour.\n. @GHengeveld @skivvies what do you guys say? would this issue here be a feature on its own, or could it be a thing to kinda merge it with #171 ? :)\n. I'd say we can actually provide these lines of code (https://github.com/codejoust/session.js/blob/master/session.js#L190-L202) as a helper function or shortcut method, so users can use it. \n. @knalli I think it would be a good thing, to at least extract these few lines (https://github.com/codejoust/session.js/blob/master/session.js#L190-L202) and put them into either a helper services, provided by angular-translate, or we bake it in an populate it with a shortcut method.\nSo the end product could look like this:\njs\n$translateProvider.preferredLanguage(helperServiceWithoutANameYet()); // determines lang key\nor something like:\njs\n$translateProvider.determinePreferredLanguage();\nThe former has the benefit that we can extract the functionality into a separated services and make it installable as an extension (which could be too much for the few lines) but it's also easier to test.\nThe latter looks more like the angular-translate-way\u2122 since users are already familiar with these kind of shortcut methods.\n(For me, I like the latter one)\nHowever, even if the result of what the function is not spec-compilant, it's actually already a pretty good and easy way to get a langKey from the browser. I think we should provide this functionality with the note that it should be used with own risk, since it's not really predictable what the browser returns.\nWhat do you think @knalli ?\n. @knalli glad you're with me :) so which version do you prefer? I'd implement this tomorrow.\n. @knalli so you would leave it open that people are able to write their own \"determineX\" functions, right?\n. Then we should go with\njs\nthis.determinePreferredLanguage = function (func) {\n   $preferredLanguage = (func && angular.isFunction(func)) ? func() : useOurs();\n};\nActually the same but with direct invocations to make sure langkeys are determined when needed.\nI think this is a good way to go.\n. Well, you can overide navigator properties as much as you want as I think. But this goes into the \"use at own risk\" part I think.\n. Another cool thing: as @skivvies pointed out here in #171 there's this cool negotiate locale method implementation https://github.com/mitsuhiko/babel/blob/e224a7b/babel/core.py#L788.\nWe can use that too in combination with our $translateProvider.determinePreferredLanguage();.\nLet's say we want that our app should just determine which language key is the preferred language by checking browser values. Then we just go with:\njs\n// pull the best langkey you get out of the browser and set it as $preferredLanguage\n$translateProvider.determinePreferredLanguage();\nNow we can expand this feature with the negotiate_locale implementation. We know, we can somehow get any kind of language key from the browser. But the key we get probably doesn't fit to our predefined language key definition.\nLet's say we need language keys \u00e1 la de_DE, en_US etc.\nBut the browser returns en or de. So this wouldn't fit. When we port this negotiate_locale method to js, we can simply use it to make our determination much more clever :) We still would say that our app should detemine the preferred language by its own, but we can provide it with a set of language keys we actually want.\nSo the example above would be something like:\njs\n// let angular-translate know, which language keys we actually want\n$translateProvider.registerAvailableLanguages(['en_US', 'de_DE']);\n// let it determine the best fit for us considering the negotiate_locale implementation\n$translateProvider.determinePreferredLanguage();  // would set `en_US` instead of `en`etc.\nIs that cool?\n. @skivvies of course not! Just have to arrange all the issues and prioritise you know? :)\n. @skivvies perfect! Saves us work! :)\n. I'm currently on it :)\n. @skivvies step one landed as https://github.com/PascalPrecht/angular-translate/commit/7cbfabecc5c9d401a4f56792834be97a086b0aa2 /cc @knalli @tspaeth \n. @skivvies second step landed here https://github.com/PascalPrecht/angular-translate/commit/6bef6bd6a86fa4c5d9d4ed784b9749eab43caacb\n. Okay so I'll close this one.\n. Hey, thanks @Voles ! :)\nCould you please consider the contributing guide and send the PR to canary branch? :)\n. Thanks @Voles ! :)\n. Awesome @komakino thanks man! :) We'll merge it soonish!\n. Ah, @komakino could you also provide some unit tests? :)\n. Will merge that one and add tests later. Just to get this down the road.\n. The docs for Shortcuts and Links just landed in canary. Pinging @Dwand and @sgara here to make sure they can update their translations.\nHere's the commit: https://github.com/PascalPrecht/angular-translate/commit/9c62b8f41db3309a955f6bd7940f384ee9447fdd\n. +1 on everything @knalli said.\n. @michaelkrog nontheless, thanks for the PR :) This is cool stuff, let's make it ready to land in canary.\n. Hey @HolgerPersch !\nThanks for the PR! Please provide unit tests and consider the contributing guide. New PR's should be send to canary branch.\n@DWand you probably wanna have a look at this one.\n. @HolgerPersch this is not a problem at all! :) We're glad to let you joining the party!\nSo yea, simply fork again, checkout canary branch make your changes there and push to your remote's canary branch. You can also checkout a feature branch locally and push that one to your remote.\nAfter that, simply send a PR to this repository's canary branch :)\n. Landed in canary \n. Because this is what $interpolate service expects :)\n. Hey @tspaeth the reason why I choosed the WTFPL license is just that I don't have any idea which license would fit best. I just wanted to open source the project and let everybody use, fork, clone, manipulate, whatever for free.\n. @knalli yeap. I already put this issue into milestone 1.2.0\n. @knalli @tspaeth however, we will have a 1.1.1 release before that. Just to let you know..\n. Changed in canary\n. @robinboehm Hey bro! Thanks for the PR. Please consider the contributing guide and send the PR to canary branch.\n. @robinboehm of course I'll then happily merge that in :)\n. hey @chinchang So the reason why variables are \"removed\" is that your translation ids need interpolation values. This is actually not what it is built for.\n. @chinchang Its basically not a problem to have a translation id, which has to be interpolated first. So sth. like\nhtml\n<ANY translate=\"{{translationID}}\"></ANY>\nwould work. But in your case, the translation id itself contains values against which an interpolation has to be made. Here's the question, how do you get these values in? Its a kinda like circular dependency, because you actually try to translation your translate id.\nClosing this one for now.\n. Thank you sir! Can't merge on mobile. Will do it once I'm in the office :) \n. Yessss awesome @holgerpesch :) will merge it once I'm in the office. Currently on mobile. \nYou are great! \n. There's actually nothing browser specific going on there. So what behaves\nodd in what kind of way?\nOn Nov 14, 2013 11:29 PM, \"Leocrest\" notifications@github.com wrote:\n\nYou guys know why changing:\n$translateProvider.preferredLanguage('en');\n  $translateProvider.fallbackLanguage('en');\nto:\nif (!bowser.firefox) {\n$translateProvider.preferredLanguage('en');\n}\n$translateProvider.fallbackLanguage('en');\nwould give such different behavior? I would expect the first one to work\nbut it gives really inconsistent behavior using preferredLanguage function\non FF. Just curious if you guys know why that would be?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/226\n.\n. Hey @jameshines10 !\nUnfortunately, this is not supported yet in angular-translate and I also haven't thought about how to solve this in a best way, yet :(.\n\nBut definitely a feature we wanna have!\n@jameshines10 interested in working on this?\n. @jameshines10 thank YOU for your feedback!\nOn Fri, Nov 15, 2013 at 4:15 PM, jameshines10 notifications@github.comwrote:\n\nSure! We can give it a shot. It's a fantastic module. Thank you!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/227#issuecomment-28575803\n.\n\n\n/pp\n. This is put into the next sprint, closing this issue.\n. @LordSputnik Allright, so I'll close this one now, since this will land in master very soonish.\n. @LordSputnik Landed. Here's an example: http://plnkr.co/edit/CAAdF1?p=info\n. @DWand I dunno, you created the issue. So what was your intention?\n. Closing because of inactivity\n. @DWand I assigned this to milestone 1.2.0\n. :+1: \n. @tspaeth please go for it! Open a PR from a separated branch, you help is much appreciated!\n. I've rewritten almost all tests.\n. Wow great PR! Thank you @tspaeth ! Also directly sent to canary branch, so good job :) :+1: \nThe only thing I'm not sure about if we should really introduce a new method for fallback languages (plural) or just make $translateProvider.fallbackLanguage() a bit smarter, just like you said.\nWould like to collect @Dwand @knalli and @sgara opinion here.\nHowever all in all a nice PR, will happily merge that in :)\n. @tspaeth allright, so go for it and we'll merge it with open arms :)\n. Great! Okay @tspaeth its up to you now :)\n. @tspaeth okay so... anything left? :) Or can I merge this beautiful one :)?\n. Haha, well awesome I'm merging it now. Thanks for your effort @tspaeth ! :)\n. Hey @skifan Yea that's a common \"issue\". Actually its not an issue, its just the logical behaviour of these components.\nSo the filter just interpolates a given values and returns a string. Always. It also escapes html entities if there are any in the string. Maybe we can get rid of that with angular 1.2 using the $sce service.\nThe directive however .html() its interpolated contents into HTML which makes it parsed by the browser. This is why you can use html within your translations when using directive, but not when using filter.\n. @skifan Great you like it! If you have any ideas or improvements, let us know! :)\n. Hey @firehist \ncould you explain in a little example what you actually mean? I think I don't get it :(\n. @firehist @DWand I understand that this is a useful functionality, but I don't think that this is something angular-translate should provide. angular-translate is about i18n, this shortcut thingy could be used elsewhere in other projects and components, so I think this would rather be a service in an external module.\nClosing this for now.\n. @BeOleg Just like @tspaeth said. In the docs there's a section Variable Replacement which describes how to tackle exactly that problem: http://pascalprecht.github.io/angular-translate/docs/en/#/guide/06_variable-replacement\n. @BeOleg @frapontillo Its just a logical behaviour. $translate service tries to translate a given translation id. If this isn't present, it tries the same with a fallback language. If the translation ids also doesn't exist in the fallback language translation table, then the translation id itself gets returned.\nWhen using an asynchronous loader and not providing a default language statically (by adding it via $translate.translations()), then of course you'll have a FOUC - Flash of untranslated content.\nTo get around this, you have to provide at least one language statically, preferably its the default language (the one you configure with $translate.preferredLanguage() or you have to listen for the very first $translateChangeSuccess event and apply a class or so.\nHere are some resources:\nFOUC: http://pascalprecht.github.io/angular-translate/docs/en/#/guide/10_asynchronous-loading#foucflashofuntranslatedcontent\nEvents: http://pascalprecht.github.io/angular-translate/docs/en/#/guide/16_events\nhope this helps.\n. @frapontillo unfortunately you cannot set a subset of translations when using staticFilesLoader. If you want to add translations statically, you have to add a whole language, so a complete translation table. Because, when using the asynchronous loader, $translate service only loads the language asynchronously that doesn't exist yet. Which means, when adding a language statically statically, this language actually already exists, so it doesn't try to load it.\nWhat you want is the partialLoader. You can actually do exactly that with the partialLoader. Unfortunately there's a little bug, which is fixed in canary but not landed in master yet. Expect a release in the next few days!\n. @frapontillo Landed yesterday in master by the way.\n. @devorbitus Could you please be a bit more concrete :) ? Pseudo example? Just to make sure I'll answer with the right arguments.\n. @devorbitus I agree that we need another/a better solution for that, but I'm not sure if it's a good thing to show/hide on each element that has translate directive.\n. @IpsBetty i'm on it.\n. @avmolchanov Well I think the only thing you can do is to ship your app with at least one language and make that language the preferred language.\n. Actually i'm working on a 2.0 release and want to address all issues there, but it seems like it'll take to much time. So i'll probably cherry pick some already implemented features and do some minor releases.\n. Implemented in canary right here: https://github.com/PascalPrecht/angular-translate/commit/c125c564650a3c5a58390145054ab6b7ef7f9fbd will be released probably next week\n. https://github.com/PascalPrecht/angular-translate/issues/176?source=cc\n. Hey @BeOleg :)\nCould you please elaborate a bit I don't really get what you mean.\n. @BeOleg I'm still not sure if I get you right, but you probably want to take a look at grunt-angular-translate https://github.com/firehist/grunt-angular-translate\nIt runs over your templates and collects used translation ids. Pinging @firehist here.\n@BeOleg is that what you're looking for?\n. @BeOleg haha okay, so closing this now. :)\n. :heart: \n. :heart: \n. Wow @tspaeth you are great! Thank you!\n. Pinging @sgara and @Dwand reason: french, russian and ukrainian docs :) (as soon as you guys find some time 4sho)\n. :heart: \n. Hey @szimek could you please be a bit more concrete?\n. @szimek Well, when writing tests for you app that uses an asynchronous loader that requests data from a remote endpoint, you have to mock them away, by for example simply providing static translations in your app rather than dynamically loaded.\n. @tspaeth Hey, could you provide a plunk that shows the problem? :)\n. @tspaeth because actually, as for now, you only would use $translate.refresh() in combination with $translatePartialLoader . If this is not the case, the problem is probably a different, which is why I'm asking to provide a plunk. :)\n. You guys are awesome :heart: \n. @tspaeth I just had a deeper discussion with @DWand on that whole multiple-fallback-languages feature topic. So it turned out I misunderstood the feature. I thought the feature was about the following:\nOne tell angular-translate that there are e.g. 3 fallback languages by doing: $translateProvider.fallbackLanguage(['foo', 'bar', 'bazinga']);\nAfter that, when angular-translate needs a fallback language, it starts to request the languages one by one by one. But as soon as one request was successfull, it stops requesting. So that there's still only one possible fallback language but 1-n possible fallbacklanguage the module can grab from.\nWhat actually happens, is that the module now requests all defined fallbacklanguages. We have to make some things clear now. E.g. what should happen, when a fallbacklanguage fails loading. Also, which fallback language is actually the default fallback language, if there are three different provided?\n@tspaeth thoughts/opinions? :)\n. Oh and BTW we have some failing tests in canary branch right now https://github.com/PascalPrecht/angular-translate/pull/247 :)\n. Okay REEEESET!\nI'm currently implemented that little fallback language bastard. Okay so here's what I decided how we should tackle this:\n1. translate service checks for translation\n2. can't found it and looks for a fallback language\n3. isn't available yet but a loader is registered, so it loads it\n4. once its loaded it tries to find the translation id there\n5. if it doesn't exist and there's more then one fallback language registered, we jumpt to step 2.\n6. if its there it gets translated\nFinito!\nThis would introduce the following side effects:\n- since $translate takes care of asking for fallback languages, it has to wait at runtime until its loaded (nearly same as $translate.uses()\n- this introduces an asynchronous behaviour for $translate and is also a breaking change.\nThis means people have to do the following in the future when translating with $translate service:\njs\n$translate('TRANSLATION_ID').then(function (translation) {\n  scope.myText = translation;\n});\nAnd know what? This is much better then the current way of doing it and manually listening for $translateChangeSuccess event like this:\njs\n$rootScope.on('$translateChangeSuccess', function () {\n   scope.myText = $translate('TRANSLATION_ID');\n});\nOh yea, we'd get rid of that too! :)\nI'll have this implemented the next 2-3 days I think. Anything you guys wanna add?\n. Okay I'm almost done! Turns out I have to rewrite the whole testing suite to make $translate() promise compilant.\n@knalli yea this is a feature I could actually implement afterwards then.\n. Okay. Turned out to be a much harder task then I originally thought. This whole async stuff requires more rewrite of the $translate() service. Currently having some ugly side effex, that are probably in flux like from the beginning on. However the bottom line is, I have to teach $translate() that it not only checks for translation ids and then translate them, or takes care of requesting fallback languages, but also checking if theres currently an async loader running and only applying further processing once its done.\nSimple scenario:\n- Async loader is registered\n- no static language is provided\n- preferred language is defined\nangular-translate now has to fetch the table for preferredLanguage first, however when somewhere in the app $translate() is called and the initial table isn't loaded yet, it goes on and searches for a fallback language, even if in the meantime the original table is loaded. The function doesn't get notified.\nSo I have to somehow make a global promise available which is a reference to pending loader, so we can apply further processing once the promise is resolved or rejected.\n. @knalli I was just even thinking about exposing a property on $translate service so you can also track outside if angular-translate is currently loading anything or not. This could also come in handy if you want to use angular-translate along with angular-promise-tracker.\n. @DWand I don't think that this is a good thing, since we would introduce to much overhead. Maybe I'm wrong but I would now like to focus more on the actual problems, which are:\n- fallback mechanism is broken\n- async behaviour doesn''t really do the right thing currently\n. @DWand Shouldn't happen that often. This is a case which is currently possible too. Last uses() counts, I think.\n. We already have such mechanism for one pending request. However, there's more to do. I'm on it.\n. Oh yea this is what happens anyway. May be I didn't tell it right. However,\nI'm currently struggling with the fact, that we have to loop over fallback\nlanguages and also load them asynchronously if they are not there yet. This\nleads to the problem that I have to collect promises during the loop and\nresolve with $q.all()  which is kinda shitty because this method only\nresolves when ALL given promises resolved. Which is in our case, when ALL\nfallback languages are loaded. I wonder if there's a way to iterate over\nsomething, preparing a promise for each iterator and break the loop once on\nof the promises resolved.\nOr in other words, is there a way to wait during an iterator until the\niterator before is done?\nPromiseHell\nOn Jan 16, 2014 2:04 AM, \"Jonas\" notifications@github.com wrote:\n\nit goes on and searches for a fallback language, even if in the meantime\nthe original table is loaded\nI think it should only search for a translation in the fallback language\nif the key is missing in the preferred language.\nIf the preferred language isn't loaded yet and the fallback language is\nalready loaded then just wait for the preferred language to finish loading.\nThanks for your effort.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-32433101\n.\n. @tspaeth @knalli okay guys let me explain you the flow, how i'm implementing it. I just prepare a branch. @DWand is probably interested in making a diagram from it.\n. Here we go, I committed the $translate service file and a bunch of tests for it into this branch: https://github.com/PascalPrecht/angular-translate/tree/fallback-languages\n\nSorry for the big comment but I wanted to make things as clear as possible\nLet's go through it step by step.\nLoading asynchronously on startup\nSo, we all know that angular-translate tries to load needed translation data as soon as possible asynchronously. Which means, the first time $translate() is called, it could be that the needed translation data isn't loaded yet right? So the flow would be the following:\n1. $translate() searches for translation id in translation table\n2. Translation table is currently fetched asynchronously (because angular-translate detected that know data is there)\n3. $translate() can't find translation id in translation table (because it doesn't exist\n4. $translate() looks into fallback language\n5. and so on\nSo this means, even if we load translation data on start up, it could be that $translate() don't have any data yet. And to clarify, I didn't mention the actual fallback language problem yet. This is just about the startup mechanism we have.\nBefore we get into the fallback language stuff, we have to fix the non-fallback language flow first! In conclusion we have the following cases when $translate() is called:\n1.) Translation data is available, translation id exists, $translate() can happily translate\n2.) Translation data is available, translation id doesn't exist, $translate() returns translation id\n3.) Translation data is not available but is currently fetched, $translate() has to wait until fetching is done and goes on with 1.) or 2.)\nIn the current release, case 3.) isn't really covered. Because $translate() doesn't know if an asynchronous call is pending or not.\nSo I implemented it.\n- I introduced a new property loaderFetchTable right here (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L648) which should hold the promise of a pending request.\nImplementation for case 1.)\n- Then when $translate() is called we first have to check if there's a pending request. If not we can just move on (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L909-L914)\n- determineTranslation() is being called https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L854\n- The given translation id exists https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L862\n- So we resolve our promise with the translation (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L875)\nImplementation for case 2.)\n- Again, determineTranslation() is called\n- But the translation id doesn't exist (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L877)\n- We currently don't have any fallback languages registered so we reject with the translation id (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L896-L898)\nImplementation for case 3.)\n- Translation data is currently fetched and $translate() now knows about it! (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L915-L916)\n- We wait until its done and move on with determineTranslation()\n- From here on case 1) or 2) is happening.\nSo that's it. $translate() now works asynchronously, I updated most of the tests accordingly. Here's an interesting one (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/test/unit/service/translate.spec.js#L590-L628) it just registers a custom loader. And as you can see, the $translate() call waits until the loader is done and returns the translation from the loaded data.\nAchievement unlocked!\nNow the tricky part.\nLoading fallback languages asynchronously\nAs you know, we had various discussions about that topic. So what is the current state? In the current release, we not only check if we have a registered loader and execute it, if there isn't any translation data, we also check for registered fallback languages and load them too! (https://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L940-L952)\nThis leads to the fact that once $translate() is called and it comes to the case that it has to request a fallback language, the fallback language is probably already there (or not, we talked about that in the previous section). So this went relatively well a times where we only supported one fallback language. However, things got trickier since we tried to implement to handle more than one fallback language as well. Without taking a look at partial loading yet, the current fallback language implementation is kinda in flux.\nWe rethought the entire fallback implementation part and I decided the flow has to be the following:\n1. $translate() is called and checks for translation id\n2. translation id doesn't exist so it looks for fallback language\n3. Fallback language is registered so it looks in that translation table\n4. translation id exists there so we can translate it\n5. translation id probably doesn't exist so we might have to load a table\nSo, instead of loading fallback language(s) at startup (and we probably don't need them), we use/load them when we know that we need it/them. Now we have the following cases:\n(these cases are all happening after $translate() tried to translate the preferred Language)\n1.) $translate() checks for fallback language, table exists, translation id exists, so it can happily translate\n2.) $translate() checks for fallback language, table doesn't exist, it requests the table (async), translation id exists, translate it\n3.) $translate() checks for fallback language, table doesn't exist, it requests the table, translation id doesn't exist, returns translation id\n4.) $translate() checks for fallback language, table doesn't exist, it requests the table, translation id doesn't exists, it now requests the next fallback language and moves on with 2.) and 3.) or 4.)\nPuh, so that's the theory. So what we want is extending the new async $translate behaviour and going deeper into the stack if needed.\nNow let's take a look at the implementation details:\nImplementation for case 1.)\n- we start at determineTranslation() (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L854)\n- preferred language translation id doesn't exist (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L877)\n- if fallback language(s) are registered, we search for a translation there (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L888-L889)\n- entering fallbackTranslation() (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L805)\n- $fallbackLanguage is always an array, so we iterate over it and check if a table exists for it (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L815)\n- table exists and translation exists so we translate and resolve accordingly (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L820-L828)\n- if it doesn't exist we reject with translation id (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L848-L850)\nHere's the test case that proves that case 1.) is working (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/test/unit/service/translate.spec.js#L385-L433)\nImplementation for case 2.)\n- same as 1.) until step 5\n- table doesn't exist so we have to load it (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L829-L843)\nHere I have to stop. Because I couldn't get it working to load the fallback language and once its loaded and the translation id exists, I have to break the loop. This is what I mean with, we have to collect all promises from the loop.\nHere's the test case for it (https://github.com/PascalPrecht/angular-translate/blob/fallback-languages/test/unit/service/translate.spec.js#L435-L492)\nAny ideas?\n. @Sanjo Wow thank you! I'll have a look at it later! Much appreciated!\n. @knalli Yes the filter and the directive will sit on top of $translate service in the future. And I already implemented it locally, everything works very fine. I kinda get the feeling you got me wrong. So why should we wait until something is finished in the future? Because without that happening, we can't post process. For one point you're right, unfortunately, we can't get rid of that\njs\n$rootScope.on('$translateChangeSuccss', function () {\n // do some stuff here\n});\npattern. So we still need those. Anyway we have no other way then making $translate async because it relies on async operations. If it needs a language table for a given translation id it has to wait until its there. There's no other way. So actually, the current implementation is a bit fragile and works, but its more or less an accident that it works in most of the cases.\nAlso, once $translate service has fetched additional language data, it is there! So it doesn't have to make it a second time.\nSo the bottom line: $translate service will not translate translation ids, if there isn't a translation table to use. Which is the right behaviour IMO.\nDoes that make things more clear?\n. Yea I got you. But again, this should be the expected behaviour, shouldn't it?\n. Or in other words, how else would you tackle the problem?\n. So it turns out @Sanjo built a great solution for that fallback language problem. I'm currently taking a look at his changes, tests are green :)\n. @knalli of course this is not the final solution. E.g. partial loading isn't considered at all yet.\n. Test it, don't guess it! Thanks for your help man!\n. Thanks @tspaeth! I'll take a look at it\nOn Jan 19, 2014 11:53 PM, \"Thorsten\" notifications@github.com wrote:\n\nAs I prefer looking at a usecase instead at test, I took the old\nex7_load_static_files.htm from the demo dir and adapted it to the current\n\"problem\" case and current fallback-languages branch code.\nWell, somehow it works, but only somehow. :-)\nLazy loading currently doesn't refresh a key that is only to be found in\nthe fallback languages. It will popup only, when switching to another\nlanguage is invoked with uses. And what's weird: Another key only existing\nin another fallback-language does only come up, if THAT language is\nselected.\nI didn't have time to investigate into the source, but for testing\npurposes - here's a gist of that file (hopefully I haven't forgotten to\ninclude one of the source-parts in the correct order ;-) ):\nhttps://gist.github.com/tspaeth/99da51fc9ef0eb1defbd\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-32725025\n.\n. Okay, so I think I have the fallback language mechanism re implemented. I basically moved back to @tspaeth original approach and combined that with a mix of my approach and the solution of @Sanjo (which is a very essential one, so thanks @sanjo !), because as @knalli said, it could hurt our performance. I set up a little test page with over 1200 translations. You can check it out here: https://github.com/PascalPrecht/angular-translate/tree/fallback-languages/demo/fallback-language\n\nSo the bottom line: fallback languages are all loaded at startup one by one. Language calls are saved in promises for each language so that $translate service is aware of it. We now have a solution of both worlds and it works pretty good!\nPlease test the example on you machine and play with it! @DWand you too by the way :)\nLemme know if there's still something shitty.\n. Hey @sanjo! I already fixed that bug. However if you want to, you can try\nto rebase your stuff on my experimental branch once I pushed the latest\nchanges. Maybe you can still add your patches.\nI'm on mobile right now. Will ping you in this issue once I pushed my\nstuff.\nOn Jan 27, 2014 7:05 AM, \"Jonas\" notifications@github.com wrote:\n\nNow, that every fallback language is loaded on the beginning, the nested\npromises are no longer necessary.\nSo I optimized them away: Sanjo@c0cd80dhttps://github.com/Sanjo/angular-translate/commit/c0cd80dcee42c3b096aef95a28f246912ac6a529This makes the code also less complicated. I removed the functions, I\nintroduced here #245 (comment)https://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-32483734and combined them into one.\nThis addresses @knalli https://github.com/knalli s performance concern (#245\n(comment)https://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-32591152).\nEach translation that involves fallback languages now only needs one\npromise regardless of the number of fallback languages.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-33343946\n.\n. Okay @Sanjo here's the latest snapshot! https://github.com/PascalPrecht/angular-translate/commit/1615eb55985b30da8870843aa56eff9ab99c28c6 \n. @Sanjo Okay, reviewed your stuff. I left some comments there. I think we could leave it as it is for now. Will merge the fallback language stuff into canary in favor to close this one.\n. We finally got this beast implemented in canary. Closing this one.\n. > $scope.sendCartByEmail = function() {\nalert($translate('CART_SEND_EMAIL_SUCCESS'));\n}\n\nLooks like there's a missing injection :)\nYou controller should look something like this:\n``` js\napp.controller('SomeCtrl', function ($scope, $translate) { // dependency injection happens here\n   // do sth. with $translate\n});\n// to not get issues when minifying your code, use array notation\napp.controller('SomeCtrl', ['$scope', '$translate', function ($scope, $translate) {\n}]);\n```\nHope this helps @igorbljahhin  :)\n. pinging @tspaeth and @Dwand here.\n. Sorry @pavlo-yuriychuk hadn't time to look at it yet, hope i'll find some time this week!\n. @pavlo-yuriychuk probably fixed here https://github.com/PascalPrecht/angular-translate/pull/251 please re-check.\n. Seems to be fixed now.\n. @Dwand can you take a look at this please? Maybe this is related to your latest fix.\n. Once you gave me a final \"we don't need that anymore\" I'll close this one. :)\n. @knalli No, I got the same feeling. We already provide such functionality with the interpolation service. However, I thought it'd be a good thing to mention here, so that we at least heard about it :)\n. Closing this one since angular-translate is already capable of variable replacement via angualr's $interpolate service.\n. @DWand I left a few more comments, please update the PR so I can merge this in :) :hamburger: \n. @tspaeth The outcome wasn't unfortunately a real result. I'm not sure what the best behaviour is. I actually prefer async loading and not loading all at once.\n. @tspaeth what do you mean with \"we display a 'please wait'\" ? I think this is nothing angular-translate has to care about. This could be achieved by using @ajoslin 's great promise-tracker https://github.com/ajoslin/angular-promise-tracker . So one would track the pending async call from angular-translate.\nHowever, it currently looks like that angular-translate doesn't provide the needed interface to work together with angular-promise-tracker.\n. @tspaeth you're welcome! :) BTW I pinged you in Hangouts, please answer.\n. @DWand @knalli @tspaeth I think we should support IE for now. So we leave that indexOf in.\n. Closing this because of inactivity.\n. @elfreyshira and it's not an option to install it via bower?\nbower install angular-translate\n. @elfreyshira Well yea okay then. I'll take a look at it. Maybe I'll publish a package with the next release.\n. @elfreyshira Well, yea of course we can just publish it now, but we can't use the main repository I think. When you take a look at the source, its split up into several files and angular-translate doesn't use something like CommonJS or AMD stuff. Which means, you would have to make sure to embed all of the source files by hand. Not only that, you also have to make sure to do it in the right order.\nThis is why I introduced a bower package repository for it, which just contains the concatenated file of the source as well as a minified version. Maybe we should also introduce a similar package for npm? Or just rename the current bower-angular-translate repository to angular-translate-package, but re-registering a package for bower is currently a mess.\n. Thanks!\n. Hey @saabi Just saw that this is your first PR. CONGRATS man, you're now an officially contributor to the angular-translate project :) Your help is MUCH appreciated!\n. Hey @bsr203 \nUnfortunately, this is not how angular-translate works. Maybe we can introduce something like $translateProvider.useDefaultTranslationWhenNotFound() which would give you what you need, but you have to make sure to provide a default language.\nProbably too much, let's hear what @tspaeth, @Dwand and @knalli think about that.\n. @knalli well actually.. it doesn't matter if you use the directive or filter, since it'll be handled by $translate service. So you get the feature for all components that sit on top if it. Which is the case for directive and filter.\n. What @tspaeth actually said was, that it's not implemented yet.\n. @bsr203 hey, how about sending a PR for this? :)\n. BTW this has been shipped.\n. Well I also thought about at least applying a class to the HTML body once a rtl language is used, so developers are able to do proper text alignment. We can also provide a method on $translate service to populate whether we currently have an rtl language or not, so filters and other components are able to react on it.\n. So again, actually all we have to do is to provide some kind of indicators that can be used by developers to react on it and do the real work. Angular translate will not care about setting up the right CSS for rtl languages, but it could provide a class so others can hook on it. Same goes for components and other stuff. Angular translate could provide interface that one can recognize if an rtl language is used or not. Further implementations are up to the developer.\n. @knalli exactly. I'm not experienced with rtl languages at all, but when we can at least provide interfaces and hooks that others can react on it from the outside, I'm sure they will be happy enough with it. We currently have no rtl language support at all. If we say angular-translate adds a ng-translate-rtl class to the html body, everyone is able to take care of displaying they UI in the right fashion depending on the given class. But again, we should also provide an interface through $translate service.\n@tspaeth Well.. i think we can make it bidi then :)\n. @cesutherland why do you think that adding a global class on html or body element isn't a good idea? Modernizr does the same and it's common and good way to make CSS styles easy to override :)\n. @tspaeth Yea a lot of people already use momentjs in combination with angular-translate :)\n. @cesutherland well yea we can do that with a directive Something like\nhtml\n<body translate-consider-lang-dir>\n...\n</bod>\nor sth. along these lines. The directive would just wait for $translateChangeSuccess event, check if the current language is ltr or rtl and adds/removes class accordingly :)\n. I got your point but I don't think that this is something we wanna control with filters. Filters aren't the right tool for that. I think we should first implement something to support global rtl at least.\n. linkin https://github.com/angular-translate/angular-translate/issues/604\n. @sarvesht answered.\n. @stu-salsbury it returns a promise when you pass a language key as parameter. E.g. when you change the language \u00e1 la\njs\n$scope.changeLanguage = function (langKey) {\n  $translate.uses(langKey).then(function () {\n    // do something when it worked\n  }, function () {\n    // do something when it didn't work\n  });\n};\nIt does return a string you invoke it without a parameter \njs\n$translate.uses() // returns the language key of the currently used language\nTIP:\nWhen an asynchronous loader is pending it is possible that $translate.uses() is not set yet, in that cases you wanna use $translate.proposedLanguage() so\njs\n$translate.proposedLanguage(); // returns the language key that **should** actually be set once the language is loaded\nHope this helps,\nCheers!\n. @stu-salsbury oh and in addition you can always listen for $translateChangeSuccess event, which gets fired once a translation change happened.\n. @stu-salsbury as you can see here, it resolves with the key that is then used https://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L769 :) looks like $translate.uses() is your friend.\n. @stu-salsbury glad I could help :)\n. @BeOleg Sorry. I don't get it. What do you want? You actually can do as simple as that.\n. @BeOleg closing this because of inactivity. Feel free to re-open\n. Hey @Nate-Wilkins so first of all, yea translate directive should trim the given translation id. This isn't the case now because actually you would work with translation id's which work like translate=\"TRANSLATION_ID\". So in that cases, there isn't really whitespace. However in your case there is whitespace for sure, which leads to the bug you already mentioned.\nI think it wouldn't be that hard to add a trimming, maybe you want to send a PR from canary branch?\nThe second point regarding the translation id's that look like english text.. yea you can do that. But you have to live with all the pitfalls @DWand was mentioning. In addition, it is indeed not possible to have variable replacement in the translations, because just like you said, interpolate directives are already evaluated until angular-translate receive the translations, which means they'd never match.\nhope this helps.\n. @Nate-Wilkins looking forward to your PR :) Not sure if translating before angular evaluation is even possible.\n. Landed in canary\n. hey @Nate-Wilkins You can't interpolate numbers in that way. angular-translate uses $interpolate service to interpolate values against translations. You can test it when you just do sth. like $interpolate(0)() it wouldn't return '0' as a string.\n. @knalli good catch. do you want to fix the feature? Or should I take of it\n. Thank you sir!\n. Hey @KhodeN thank you!\nCan you please send the PR against the canary branch? Also, we need tests and maybe a sentence of documentation :)\n. I think for now we let users build their own loaders to achieve these goals. closing this one.\n. @xAlien95 So there are several ways to make your i18n support possible when \"offline\".\n1) You can ship the app with translation data using $translateProvider.translations(), which is the more static way and your i18n data is baked right into your app.\n2) You can actually build your own custom async loader. \"async\" doesn't necessarily mean \"online\". So you can let your custom loader load translation data from an offline resource like localStorage or sth. like that.\n3) Dunno how this appcache.manifest stuff works, but it is highly encouraged to not use it since its a pain in the ass to debug.\nThe bottom line: No. You can\"t make the app just download all resources to your phone by simply adding it to homescreen.\n. @xAlien95 and yea, we try to answer on issues as fast as possible. :)\n. @xAlien95 Oh and actually, all of the things I mentioned don't really work \"offline\". Adding an app to home screen just opens the site in a webview. To always have offline capabilities at even initial load, you have to bake your app as hybrid app using phonegap or cordova or sth. like this, I think.\n. Well, you can install websql data bases but you have to decide when to do that. I'd say this should happen on initial page load, which could take some time. So in the end it's all about testing things out.\n. @sja actually the angular dependency only exists because you need angular to get angular-translate working. So it's more a meta information. We probably remove the concrete dependency in a future release.\n. @jonaswindey now tell us, which provider is unknown?\n. @jonaswindey okay, so make sure to declare ngCookes as dependency in your app\njs\nvar app = angular.module('yourApp', ['ngCookies']):\nThen it should work :)\n. Please feel free to send a PR accordingly :)\nThanks!\n. @danicomas could you please more elaborate what's the point?\n. I also think that this should by the user, like @DWand explained. Changing the ngLocale module dynamically, needs a bit more effort in our context. Like @knalli said, we need a confirmation first, that the language has been successfully changed. Which means, it's not just simply adding a script tag in the head dynamically, we have to implement this in the current control flow of angular-translate.\n@tamtakoe I wouldn't mind a pull request that drafts a clever solution, though :)\n. Like @knalli said your PR has to be sent against canary branch. Closing this one.\n. Landed in canary\n. @ibes We will release angular-translate 2.0 this weekend. Then the doc is updated. Such delay won't be happening in the future, since we'll also introduce a shorter release cycle :)\n. you wanna implement angular-translate?\n. :+1: \n. So great thank you @Nate-Wilkins \n. sorry could you be a bit more precise?\n. Hey @joscha :) There's a $translateProvider.translationNotFoundIndicatorLeft() method that should do the trick! https://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L235\n. There's also a shortcut method to set indicators on both sides. Left and right. http://pascalprecht.github.io/angular-translate/docs/en/#/api/pascalprecht.translate.$translateProvider#translationNotFoundIndicator\nHope this helps :)\n. Great :)\n. See http://pascalprecht.github.io/angular-translate/docs/en/#/guide/10_asynchronous-loading\n. Okay so closing this one.\n. Hey @pedrosanta i'm sorry to tell you that the fallback language mechanism is a bit in flux in the current version. I'm working on it and we'll release a better mechanism soonish. I'll update this issue once it landed in master.\n. Fallback behaviour has been rewritten and will be released in version 2.0 this month. closing this.\n. Basically I like function names in situations like\n``` js\nreturn {\n  compile: function () {\n    return function linkFn() {\n}\n\n}\n)\n```\nIn the case where you proposed it I find it rather confusing.\n. @tspaeth Coming from the angular-translate website and clicking the download button, you land right here: https://github.com/PascalPrecht/bower-angular-translate/releases where you can simply download the latest stable release. Isn't that enough?\n. Also, the releases tab is our archive.\n. Hm okay got. So what do you mean should we do?\n. Of course its better if a user can just click on a button and gets the zip with all extensions that needed. But we don't know which extensions a user needs. Which means, if we wanna do that, we have to always provide a package with everything. Even if the user is not interested in other extensions.\nSo how about this:\nWe go with a) for now and once we moved over to the org and set up the new side etc. we'll also setup a package with everything. We have to automate these things and I currently don't have the time to do it, so I'd like to do that in a next step.\nSGTY?\n. Oh wow we're already using the bad \"E\" word. Anyways. So first @tspaeth yea you can use uglify for that. There's also a grunt task that takes care of that. So how about the compromise I proposed?\n. @tspaeth looking forward to it!\nuglify is not the only thing. There's also the YUI compressor or Google Closure compiler.\n. @tspaeth friendly ping :)\n. hey @max-l this has to be a messageformat issue, since angular-translate simply delegates for it.\n. Hey @dvberkel thank you! Could you please send the PR against canary branch? Much appreciated!\n. Thanks man\n. Pinging @firehist here, because he made the gread grunt-angular-translate project. He is surely interested in helping you out!\n. Hey @asm89 !\nFirst of all, thank you for the great issue! You gave us all needed information to get into this. Of course, we'll take care of that.\n@knalli Do you have time to fix it?\n. @knalli if there are no interpolateParams it actually should be undefined, shouldn't it?\n. Reapplied @knalli 's patch in canary.\n. Hey @Gargol so what is the default transformResponse, before you override it?\n. @Gargol Yea sure but what is it?\n. @Gargol Ah yea there we go. So what should we do? If you reset http transformresponse interceptors globally, there's actually nothing we can do about it is it?\n. @Gargol Now that's sounds like a PR! Go for it!\n. Thanks a lot man!\n. Closing this because of inactivity. Feel free to reopen if needed.\n. @fischermatte Answered!\n. This issue has been inactive for a long time. Feel free to reopen and give\nconstructive feedback so we can help you out.\nOn Apr 4, 2014 2:57 AM, \"donets\" notifications@github.com wrote:\n\nThis issue still happens\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/301#issuecomment-39522412\n.\n. Well we don't have a direct dependency against underscore in our build process. Other modules should declare it as dependency.\n. @pavlo-yuriychuk Allright! Maybe you could next time update the issue with such kind of information. :)\n. Closing this since bower dependencies aren't incorrect.\n. @IpsBetty :+1: \n. I'll close this now til we're getting concrete on that one again (if at all).\n. What's the status of this issue?\n. Thanks!\n. @tspaeth I recently had a request for having bilingual language in an app, where this overrule functionality would come in quite handy.\n. @knalli I think we just leave that open and discuss about that after 2.0 release :)\n. Thorsten how would That work when theres a configured fallback Language ?\n\nOn Wednesday, February 26, 2014, Thorsten notifications@github.com wrote:\n\nI would need a\n$translateProvider.useDefaultTranslationWhenNotFound('DEFAULT TEXT') as\nproposed by @PascalPrecht https://github.com/PascalPrecht in #258https://github.com/angular-translate/angular-translate/issues/258.\nTogether with that one proposed here, we could cover this flexible cases,\nor?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/pull/310#issuecomment-36185853\n.\n\n\n/pp Sent from Gmail Mobile\n. Answers the question perfectly.\nOn Wednesday, February 26, 2014, Thorsten notifications@github.com wrote:\n\nIf the fallback stack is already parsed and the preferredLanguage is also\nnot replacing anything, currently we return the key. But the change would\njust to be return the customized text.\nOr did I not get the question?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/pull/310#issuecomment-36187768\n.\n\n\n/pp Sent from Gmail Mobile\n. Sorry I'll come back to these threads at the weekend, too busy now :(\n. How about covering this stuff here? https://github.com/PascalPrecht/angular-translate/blob/master/.jshintrc\n. Well we could at least put all of the globals in it can't we? Think it wouldn't hurt. Don't have strong opinion on this.\n. @knalli I think we can happily use this one https://github.com/neoskop/ng-boilerplate/blob/master/.jshintrc\n. Alternatives? Writing jshint directives into each file? We could also define all shared properties in .jshintrc and add context specific options in our grunt tasks. But that's probably what you want.\n. I actually meant to do that in the build/watch process. I dunno if that works. Try it out :)\n. Hey @ceoaliongroo ! So year, you can't use numbers in interpolate directive. So why not just using real identifiers with names? Then it should work.\n. So first of all, you have to make sure, that once you change the language, that translation ids translated with $translate service are re-translated.\nTo do so, you have to wrap you $translate calls in a\n``` js\n$scope.on('$translateChangeSuccess', function () {\n});\n```\nblock.\nRegarding RTL languages, unfortunately you have to wait for 2.0 to get an out of the box solution for that. The idea of our solution is to apply a CSS class on the body element when you chose an RTL language. You can than control with this class how texts should be displayed. So stuff like text-align: right etc.\nFor now you have to work with two templates.\n. Hey @elgerlambert !\nThanks for your great feature request. So yea, you right. There's currently no way to change a fallback language at runtime. I refactored the entire fallback language process in canary branch (or fallback-languages since its not merged yet), which lets you define more than one fallback language.\nSo this doesn't solve you problem, I'm just dropping it here to elaborate with you on that. So in angular-translate 2.0 (which will be released hopefully in february) you would do something like this:\njs\n$translateProvider\n  .preferredLanguage('en_CUSTOMERID')\n  .fallbackLanguage(['en', 'de', 'fr']);\nThis would take care of loading all your fallback translations one by one, so that there are available once needed. Now, when using localStorage to remember the language, it could be that there's e.g. de stored which is then the actual preferred language, rather than en.\nIn such situations, we start iterating over fallback language from the index of the language key that comes out of the storage, an and put the preferred language (the original one en) at the end of the stack, to make sure the preferred language is also always the last fallback language.\nWhat you want is actually more a way to define an active fallback language. angular-translate doesn't really care what are your fallback languages. it just iterates over your registered fallback languages, and tries to find translation ids there. If it doesn't find a translation id in a fallback language, it tries the next one.\nSo when saying we want to tell which fallback language to use in the case where more than one are available, we have to catch that some how.\nJust leaving my thoughts here, but I think we should get this in.\n. @DWand this is a too heavy work around in my opinion. It should be as easy as @elgerlambert proposed.\n. @DWand You can't setup fallback languages with partial loader, can you?\n. Updated the comment. sorry.\n. And what about fallback languages? @elgerlambert wanted to have a way to switch the fallback language at runtime. There's no interface for that yet.\n. Since I don't get the real picture yet of a fallback service, i'd say we try to bring changing fallback language at runtime in 2.0 with the method on $translate service and would introduce a separate fallback service afterwards. (I need to get angular-translate 2.0 down the road this months, which is why I don't wanna introduce bigger changes.)\n. This feature just landed in canary. Closing this since it will be released with angular-translate 2.0\n. Actually a good point, since one is still able to do sth. like\njs\n$translateProvider.translatoins(langKey, {});\nEven if there's only one language. For me it'd be okay, but it has to land in 2.0 because otherwise it'd another breaking change which leads us to 3.0\n. Perfect. I also opened https://github.com/PascalPrecht/angular-translate/issues/315\n. I used them at @neoskop, so I think I should ping @h-evers and @traukainehm here.\n. Alright, so this gets removed in 2.0.\n. Landed in canary\n. Thanks guys!\n. Done in canary\n. @gerbsen wrong link bro: http://angular-translate.github.io/docs/#/guide/07_multi-language\n. @Shakeandbake please provide a plunk or fiddle as an example to make things clear.\n. @Dwand I'm currently cleaning up the test suite of partial loader. I think $translatePartialLoaderProvider should also rather 'extend' existing statically added translation table using setPart() instead of 'overriding'. Should I open an issue for that?\n. Okay. I write a test for it and replace it with the one that tests if setPart() overrides tables.\n. Yes we should get rid of this.\nOn Jan 29, 2014 9:30 PM, \"Max Prichinenko\" notifications@github.com wrote:\n\nIs chapter \"Migration Guide\" necessary in the guide? It duplicates change\nlog. Also it's out of date and doesn't cover at least two releases.\n\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/317\n.\n. This is done in canary\n. Hey @AnalogJ could you please cross check if this only occurs with UrlLoader? Maybe you make the same plunk with StaticFilesLoader this would help out!\n. @DWand I already tweaked the code in fallback-languages branch to handle $fallbackLanguage always as an array. So maybe we could leave the interface how it currently is. Maybe you want to review that.\n. Hm looks like I removed the changes again.. So my proposal is, leave the API as it is. So string are okay as well as arrays. But handle $fallbackLanguage inside angular-translate always as array.\n. YES WE CAN! Who's fancy implementing it? :) \n. @tspaeth not sure what you meant with cologne air but YES :+1: that sounds great!\n. No. You have to decide. I'd prefer the latter. Make sure to use the translate directive then, to get correctly parsed HTML out of your translations. Translate filter will insert html entities.\n. @DWand Yes but this would be something that could be done afterwards though. English has highest priority and we probably don't have the time to wait until we got everything translated to different language.\n\nAlso, once 2.0 is out I want to introduce a new release cycle. Which means more minor releases over time, just like the Angular project. This let us always ship stuff without getting stuck.\n. @DWand Added thanks!\n. Well yea that's okay. I'll not fork until we have everything settled in the\nfuture.\nOn Feb 5, 2014 1:30 AM, \"Jan Philipp\" notifications@github.com wrote:\n\n@PascalPrecht https://github.com/PascalPrecht Well, I should sleep but\nthen it [image: :sleeping:]\nThis works *only until you fork the project back into your account; the\nredirect will be destroyed in that moment.\n\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/322#issuecomment-34125237\n.\n. @jkrot hey, well there is an issue (#42) which kinda covers this stuff. Hope this helps.\n. Thanks @DWand !\n. @JohnPhoto it is updated. Go and find a place where it's not, starting from here: http://angular-translate.github.io/docs/#/guide\n. @knalli I tested the new async construct with over 2000 translations on a page. And it worked quite well, even from a performance perspective.\n. This has been shipped.\n. Thanks man!\n. @tspaeth okay, so this looks actually good to me but it feels like there are some confusing bits.\n\nSo, we do support setting an array of fallback languages at config phase, but it was not planned to do so at runtime. The only thing we actually need is saying which of the registered fallback languages should now be used. Rather then changing the stack.\n. @tspaeth so yea you're right. But here (https://github.com/PascalPrecht/angular-translate/issues/313#issuecomment-33670931) I got the confirmation. Let's see what @elgerlambert wanted to have exactly. So we can work on this in the right direction.\n. @tspaeth could you also provide some unit tests?\n. @elgerlambert Thanks for clarifying!\nSo @tspaeth how about implementing this on top? We could introduce another method `useFallbackLanguage(key)' which actively tries to set the active fallback language and use that.\n. Okay @elgerlambert \nJust to clarify here: You'll get a feature to tell angular-translate at runtime, which fallback language to use. We'll implement a method $translate.useFallbackLanguage() which expects a language key of  the registered language key during config phase. So thing's would work like this:\nRegistering fallback languages:\njs\n$translateProvider.preferredLanguage('en_CUSTOMERID');\n$translateProvider.fallbackLanguage(['en', 'de', 'fr']);\nAnd at runtime you'd do either change the entire stack:\n``` js\n// changing stack to pull de to front, since we're about to switch the language to de_CUSTOMERID\n$translate.fallbackLanguage(['de', 'en', 'fr']);\n$translate.use('de_CUSTOMERID');\n```\n(this would change the stack searches in each fallback language for a given translation id while iterating over the stack)\nor you just tell angular from where to start when iterating over fallback languages by doing:\njs\n// tell angular-translate to start at language 'de' when iterating because we're about to switch the language to 'de_CUSTOMERID'\n$translate.useFallbackLanguage('de');\n$translate.use('de_CUSTOMERID');\nDoes that make sense?\n. @rorymadden looking into this now...\n. @rorymadden yupp you're right. For such particular case it'd make sense to put the closing into a function and call it initial + $on('$translateChangeSuccess')\nI update the plunkr right here: http://plnkr.co/edit/SEfLFvWLUoOJnIcrJbDf?p=preview\n. @rorymadden for clarification, this is because $translateChangeSuccess event only gets fired when a language change is happening. Which is of course not the case when jumping back and forth between states, because staticFilesLoader loads everything initially. :)\n. Try:\nhtml\n<span translate=\"{{file.status === 'uploading' ? 'ABORT_UPLOAD' : 'REMOVE_FILE'}}\"></span>\ndoes that work?\n. In your code, the directive waits until a given interpolation is evaluated and pulls it out from the element, once this is done.\nMy code has the interpolation as attribute and keeps the connection. For me it's kind of obvious, so there isn't anything in the docs. :) \nIf you want to, you can send a PR for them 4sho! :)\n. @tspaeth Thank you so much!\n. @tspaeth gorgeous. Thanks.\n. Wow @knalli you rock! Reviewing now :)\n. Okay LGTM. Just a few points:\n1) Could you please squash the commits into one?\n$ git checkout feature/translate-instant\n$ git rebase -i canary\n2) add unit tests that proof that the code works!\n3) As far as I can see, this code is just a duplication of the async. Maybe we can get red of a few LOC but this is not necessary now.\n4) Maybe renaming the method to $translate.translateSync() to make things clear?\n. @knalli \n1) You're right, but I think at least the last two commits in the PR could be one\n2) No, add tests for $translate.instant()\n3) I'm okay with it.\n4) I also thought about sync() not sure if this is a good name, since it could be irritating too. But yea.. let's go for sync();\n:)\n. Which is why I came up with $translate.translateSync(). Actually, nobody should use it from the outside. Or it is at least not intended to be used from a consumer.\nMaybe @tspaeth has an opinion here.\n. @tspaeth So we went fully async with angular-translate. Which means everything is promise based, right? Calling $translate() returns a promise. $translate is used by directive and filter. Which means, filter, also returns a promise. But filter has to return a string to work in HTML. If you do:\nHello {{foo | translate}}\nthis will result in Hello {} because filter returns a promise. This is why @knalli came up with the idea to introduce a method on $translate service that behaves like $translate behaves in <=1.1.1. Synchronously. Otherwise we don't have a chance to get a string out of the filter. The filter would then use $translate.sync() (or whatever we want to call it) internally, instead of the normal $translate() call.\n. Of course we expose it. But I wouldn't communicate it officially. Its just there.\n. Thanks! LGTM!\n. Thanks @DWand !\n. @tkrotoff You might be right. But already because of your referenced issue, I don't think it's a good thing to apply the same here. We have to at least namespace things. I'm okay with translate for now.\n. Yeap. I understand that. Again, if angular-gettext also uses this syntax we\nhave to namespace everything anyway. Also this would introduce a big\nbreaking change which I don't wanna introduce now.\nMaybe in future versions.\nOn Feb 7, 2014 5:07 PM, \"Tanguy Krotoff\" notifications@github.com wrote:\n\nIt's cumbersome to write each time:\n{{'HELLO' | translate}}HELLO\ninstead of simply:\n{{'HELLO' | tr}}HELLO\nThis is why all other translation systems (Qt, Rails, Gettext...) use a\nshort syntax.\n\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/342#issuecomment-34457986\n.\n. We are currently working on version 2.0 which already comes with several\nbreaking changes. We wanna get it down the road very soonish, so there's no\ntime to make this big change too currently.\n\nHowever, like I said, this could be done for future versions. If you want\nto, you can work on it and send a PR.\nI still think we have to introduce a proper namespace then.\nAngular-translate was there before angular gettext. I wouldn't have\nintroduced directives and filters with names that already exist in other\nmodules.\nSo this has to be considered when working on that. With a namespace we\nwould safe 2-3 chars in comparison to the current state.\nOn Feb 7, 2014 5:49 PM, \"Tanguy Krotoff\" notifications@github.com wrote:\n\nif angular-gettext also uses this syntax we have to namespace everything\nangular-gettext already uses the same existing syntax: translate for the\ndirective and the filter, moving to the same short syntax does not change\nanything here about name clash.\nthis would introduce a big breaking change\nOf course, however providing a script that changes all translate to tr(or i18n,...) is easy.\nMaybe both the long and short syntaxes can live together (this is complex\nto achieve).\n\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/342#issuecomment-34468452\n.\n. Oh this also means that all docs in all languages have to be updated to.\n:)\nOn Feb 7, 2014 5:49 PM, \"Tanguy Krotoff\" notifications@github.com wrote:\nif angular-gettext also uses this syntax we have to namespace everything\nangular-gettext already uses the same existing syntax: translate for the\ndirective and the filter, moving to the same short syntax does not change\nanything here about name clash.\nthis would introduce a big breaking change\nOf course, however providing a script that changes all translate to tr(or i18n,...) is easy.\nMaybe both the long and short syntaxes can live together (this is complex\nto achieve).\n\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/342#issuecomment-34468452\n.\n. Which delegates to original translate filter and directive? Sounds good.\n. What @knalli said.\n. Hey @marcalj sorry for having these issues..\n\nSo I can imagine what the problem is. First, it is correct that $translateLoadingSuccess is fired twice, because angular loads your preferred, as well as your fallback language (which are both 'en'). But it only changes the language once, this is why the $translateChangeSuccess event is fired only once.\nSecond, this behaviour is actually a bug, because angular-translate shouldn't try to load the same language more than once. This is fixed in canary and will be released in version 2.0.\nI can't really say why on localhost your translation id's aren't replaced.. I think a plunk is needed to investigate that.\n. @marcalj Yes we're about to land it this month, probably next week\n. @marcalj which is a good thing!\n. @marcalj could you setup a plunk? It should actually work.\n. shouldn't actually be the case. Again, a plunk would be helpful. AFAIK the demos in the repo (that cover that scenario) work as expected.\n. Closing this because of inactivity. Feel free to reopen!\n. Thanks @knalli ! Just one question, why \"backward compatibility\" ? Why isn't it just enabled by default?\n. Could you also please make the tests pass :) ? Maybe you could also update the directive docs?\n. Kinda related to https://github.com/PascalPrecht/angular-translate/issues/342 - leaving this here.\n. Hey @gruppjo ! Thanks for your feature request! So yea, you're right, this is currently not supported. Interpolation would also be not the right place to look into, since the interpolation happens later in the translate process.\nAnyways, so @knalli already proposed to make it possible that $translate service accepts arrays like this:\n$translate([\n  'FOO',\n  'BAR'\n]).then(function (translation1, translation2) {\n  // do something\n});\nBut we never planned to return objects.\n. currently you can't use a translation id as object, because these are treated as namespaces and get flatten once they land in the translation table.\n. The array syntax already landed in angular-translate. Closing this one.\n. That sounds promising! MERGED\n. Closing this because of inactivity. Feel free to reopen.\n. Hey @marcalj ! So that looks interesting! Of course, sync in $translate service would be awesome, because you currently have to wrap it in $translateChangeSuccess calls.\nHowever we planned to release v. 2.0 probably today, and in 2.0 $transate is async and promise based. Just keep that in mind.\nBut yea, go for it, i'm curious how this would work :)\n. Well on a controller/service level, $on is the only thing you can do. But also, in 2.0 we made a breaking change. You have to always $on translate events on $rootScope because they only get $emitted by $rootScope. This leads to a much higher performance because you don't have to go down to all child scopes like with $broadcast.\n. Closing this one because of inactivity. Feel free to reopen.\n. So yea the problem is probably that $translate.refresh() is called within the controller. Actually this has to be called before the controller is instantiated/called. In other words. this has to be handled within $routeProvider.when()\n. Thanks, you're great. I'll release 2.0 this weekend!\n. @knalli Could you summarize real quick what it does? Did you test it somehow?\n. Yupp saw that already, didn't have time to investigate..\n. I think we should remove that example for now. And just document what the output would be.\n. I think this is fine.. merging. Thanks!\n. Pinging @knalli here.\n. @knalli I would also suggest to rebuild the documentation generation with the dgeni document generator. \n. Closing this because of inactivity.\n. Cleaning up right now, feel free to reopen if you work on it.\n. Landed as https://github.com/angular-translate/angular-translate/commit/95c43b472618efd38d4d071c3c2053a07b8ed014\n. Also the docs have been updated too: http://angular-translate.github.io/docs/#/guide/03_using-translate-service\n. @evilaliv3 We updated the entire docs. There's no uses() anymore. Closing.\n. @evilaliv3 first, do yourself a favor and switch to translate directive where you can. As you said, we already have a fix in canary for the trim() problem. Please patch on your local machine (or downgrade to 1.1.1) until we released a patched version.\n. @evilaliv3 it's better to use translate directive instead of translate filter, because filtered values get evaluated with each $digest cycle. The directive is a bit smarter and only watches needed values when the language changes. This is better for performance. :)\n. @Dwand could you squash these two commits into one?\n. simply do:\n$ git rebase -i HEAD~2\nYour editor opens.\nThen change the second \"pick\" to \"squash\" or just \"s\"\nAfter that, fix the commit message, and that's it. Once this is done you\njust do\n$ git push -f yourOrigin yourBranch\nOn Wed, Feb 19, 2014 at 1:42 PM, Max Prychynenko\nnotifications@github.comwrote:\n\n@PascalPrecht https://github.com/PascalPrecht, I have to read docs\nabout this operation.\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/pull/377#issuecomment-35494699\n.\n\n\n/pp\n. landed as https://github.com/angular-translate/angular-translate/commit/60ffa0d72ad757a7d88ddbba4822605ceea8c97b\n. @NickHeiner one of the best PR's i've ever seen on this project. Thank you very much! Just one thing, please change the scope of the commit message to fix($translate):, since it's a fix in the $translate service.This also makes sure that the changelog generation picks it up.\n. Well the bits you've touched don't really have anything to do with the fallback mechanism. If it affects it, we did a bad job.\n. I'll rebase that stuff and merge it.\n. @NickHeiner you should also check if you have a editorconfig plugin installed. Because your editor seems to have a different configuration than this project expects. E.g. we use 2 spaces for tabs, you mixed that with 4 tabs in some places.\n. I comment on your commit real quick for the next time, but apply regarding changes by myself for now.\n. @knalli was right. Regardless if there's $timeout.flush() or not, even removing $rootScope.$digest() make the tests pass. Investigating now.\n. Okay, so tests are always passing because expect() is declared within promise callback. Which means, it doesn't get evaluated yet when the test finished running. An it() block without an assertion is always passing.\n. @NickHeiner I updated your branch accordingly and pushed it here: https://github.com/angular-translate/angular-translate/commit/f896b54cc15c59800238ee5116811127f61f7e8e\nAs you can see, $translate() executes the rejection callback. So something is wrong here.\n. Thanks Nick! Please squash your commits into one fix commit :)\n. I check it real quick\n. Having a look into this, thanks!\n. The filter works because it uses the same translate mechanism that you had in angular-translate 1.1.1. This is because we can't handle promises with filters, since they are used in HTML and always return a string. A promise to string is [object Object] which is not what we want.\nThis also means, that you always had this FOUC somehow. I think we can't do anything about it.\n. @daanporon updateTranslationFn() is called initially right here: https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L178 and it sets up a watch for your translation id https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L145 but once $translate() is run, it gets unwatched (https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L150) to prevent unneeded evaluation.\nCould you please setup a plunk?\n. Thanks! Taking a look into it now.\n. @daanporon I tweaked your plunk a bit. http://plnkr.co/edit/Ea0l7HbCijVR6jjjHzyv?p=preview\nSo as you can see, there is a value being watched, but it's not the one you expect, because the var has no value yet (like you said). However, I don't think that this is the job of angular-translate to take care of it. What you currently do is just passing a translation id that doesn't exist.\nMake sure you pass in translation ids that exist, or in other words, make sure to translate your id, once the app knows that its ready to be translated.\n. Observe is a one way ticket and it's only there to get the first initial\nvalue of any attributes on translate directive. We only watch translation\nId's when the language changes because of performance reasons. We declared\nthat this is the only valid case when the value of a translation Id changes.\nIf you want to set up watches constantly for translation Id's, please use\nthe filter, since it does exactly that.\nWill take a look at you plunk later, I'm on mobile now.\nOn Feb 20, 2014 10:17 AM, \"Daan Poron\" notifications@github.com wrote:\n\nhi, thanks for looking in to it ... but i can't see any changes in the\nplunk you made.\nMaybe you are right that in my case it isn't a job of angular-translate to\ntake care of it. But there are use-cases where i think it is the job for\nangular-translate. I updated my plunk with a select box at the bottom:\nhttp://plnkr.co/edit/QN2xs3Tgvba0KWM29zpR?p=preview ... now i want to\nshow a translation depending on the value selected in the select box. Even\nwhen i'm not concatenating the string it doesn't work. The only way i see\nnow to make this working is using an ng-switch. I think angular-translate\nshould keep watching the translationId (which it is also doing now with the\n$observe) and whenever the translationId changes it should update the\ntranslation ... because this is just what you expect with two way\ndata-binding.\nMaybe we need to move this part:\n// Ensures any change of the attribute \"translate\" containing the id will\n    // be re-stored to the scope's \"translationId\".\n    // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.\n    iAttr.$observe('translate', function (translationId) {\n      if (angular.equals(translationId , '') || !angular.isDefined(translationId)) {\n        scope.translationId = $interpolate(iElement.text().replace(/^\\s+|\\s+$/g,''))(scope.$parent);\n      } else {\n        scope.translationId = translationId;\n      }\n    });\nto the place where updateTranslationFn(); is right now ... and execute\nupdateTranslationFn(); inside the $observe function.\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/379#issuecomment-35601421\n.\n. Well, the use() method on the $translateProvider only sets the lang key. That's it and that's intended.\n. Oh and yes, if you have language key in your local storage, this always overrides the lang key you configured during config.\n. In other words: useStorage(XXX) always overrides everythingelse.\n. @terraces to answer your question: no there's currently no way to store the language key at config phase in local storage. There are only to cases, either there is a language key in the storage, than this one is used for runtime (after that each $translate.use() call will override again), or there's no language key, then it will be stored once $translate.use() is called for the first time.\n\nYou can hack around that, by accessing localstorage API's directly via window.localStorage.\n. okay closing this now.\n. You like descriptions for translations, so translators get the meaning of a specific translation? No, we don't provide such feature. Maybe angular-gettext supports it? http://angular-gettext.rocketeer.be/\n. Pinging @DWand here.\n. I just mentioned a team member to have a look at this :)\n. Closing this because of inactivity, feel free to reopen.\n. @kannix Just start with a PR and we will help you out getting this in :)\n. Closing this because of inactivity\n. The docs you are viewing are outdated. Take these: http://angular-translate.github.io/docs/#/guide/07_multi-language\n. @BerndWessels Docs are all up to date, you are just viewing the wrong ones. There are still old version of the entire docs online.\n. released in 2.0.1\n. @mozey yes. this is because pluralization is done with messageformat.js. And MessageFormat expects a different syntax as described here: http://angular-translate.github.io/docs/#/guide/14_pluralization#pluralization_the-drawback\nApply the right syntax and you don't get this error. Closing this one, feel free to reopen if needed.\n. To be more specific, when using useMessageFormatInterpolation() you configure this interpolation type application wide. If you want to use more than one interpolation type at runtime (e.g. default interpolation AND message format) you have to use addInterpolation('$translateMessageFormatInterpolation') and override the interpolation type at the filter (or service, or directive) a described here: http://angular-translate.github.io/docs/#/guide/14_pluralization#pluralization_the-drawback#pluralization_overriding-interpolation-temporarily\nI updated the plunk accordingly: http://plnkr.co/edit/0nJoemE52aBSlB6LvLHV?p=preview\n. $translate.use() returns the currently used language key.\n$translate.proposedLanguage() returns the language key from the language that is currently loaded.\n. Hey @gtesslerge !\nWell, the fallback language gets only requested, if angular-translate tries to translate a translation id that doesn't exist in the currently used language.\nThe current translate filter doesn't execute the missing translation handler, which is indeed a bummer but it's fixed in canary branch and will be released the next few days.\nMaybe you can set up a plunk so we can take a further look?\n. There's a watch button on the top right side. Actually you are already\nwatching because you did some activities on this thread.\nOn Feb 25, 2014 4:50 AM, \"gtesslerge\" notifications@github.com wrote:\n\nHi Pascal..... I will try to find the time to plunk it. Let me know when\nthe next version gets released. How to I get this thread to watch email to\nme?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/395#issuecomment-35972385\n.\n. @gtessler24 yes it should. Please confirm.\n. @gtessler24 okay please setup a plunk so I can take a look at it :)\n. @knalli in cases where he used $translate('foo'); directly, $translate.instant() would behave exactly the same way. If he used async loaders before, $translate('foo') didn't work either, so this would be intended.\n\nClosing this now.\n. This is because an HTML element doesn't have any element contents :)\nYou should have a wrapping label element or so.\nOn Feb 25, 2014 5:07 AM, \"gtessler24\" notifications@github.com wrote:\n\nOops it was stripped from the message box:\ninput type=\"checkbox\" value=\"remember_me\"\ndata-ng-model=\"m_User.boolRememberMe\"\ntranslate=\"signInRememberMePlaceHolder\" />\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/397#issuecomment-35973137\n.\n. Well actually, and input element doesn't contain any html which is why there is no other way than using a filter.\n\nIf it works for you with the directive on the input element, you are a lucky guy and the browser somehow understands what you want to do.\n. Another way would be to use a corresponding label element for the input (which is what I recommend). Then you can use the directive again.\n. Hey\nThat's true we didn't maintain the plunks and fiddles anymore because we\nhave working examples in the docs.\nOn Feb 25, 2014 7:52 AM, \"virtualit786\" notifications@github.com wrote:\n\nHi Thorsten,\nIn the new documentian that you pointed @\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading,\nthe demo is working but in the Plunkr and JsFiddle code for the same demo,\npressing germen button does nothing. Seeme like its missing the transaltion\nfiles. Can it be fixed?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/398#issuecomment-35980158\n.\n. Because it's $translate.use() since 2.x :)\n. @virtualit786 Well, we've written an entire migration guide, this is why we bumped the version to 2.x because it was a breaking change.\n. @virtualit786 thank you ! :)\n\nClosing this now.\n. Hey @virtualit786 I'm sure @DWand can help you out here. However, I'm sure you could help us out too! Please make a plunk so we can see the working sample, otherwise it's very hard for us to reproduce your problem.\nThanks!\n. @virtualit786 cool, please provide a plunk, thanks! :)\n. You can just create files in the plunk that should be enough. You don't need a folder structure to rebuild the problem.\n. @virtualit786 Thanks, could you also fix the syntax errors n stuff, so the plunk does exactly what you've described?\n. Great, now make the code work! :) There's still a missing provider for partial loader. I don't think that that's your scenario :)\n. You have to embed the partial loader as well. There's no partial loader in the plunk.\n. @virtualit786 take a look at the console. you have to embed the extension, like you did with the other files.\n. @egervari so can we close this now?\n. Sorry on being inactive here. Is this still a problem?\n. Thanks! Please send this PR to canary branch.\n. Please provide a plunk so that we can check. As you can see in the official docs, the directive is working very well.\n. $translate.preferredLanguage() returns the preferred language.\n. @gtessler24 please send a plunk.\n. @egervari yes it is. Wanna send a PR? :)\n. Yes. Checkout http://angular-translate.github.io/docs/#/guide/05_using-translate-directive#using-translate-directive_post-compiling\n. That is intended because people are watching the wrong docs recently. Just stick with the last link you posted. \n. @emadd This was fixed on 2.0.1 could you update and confirm please?\n. Great! Please send PR to canary branch.\n. @wesleycho thanks! Could you please rebase your stuff on top of latest canary and squash your changes into one commit?\n. @exislow $translate() returns a promise so you have to\n``` js\n$translate('translationId').then(function (translation) {\n});\n```\nor, if you're show you don't need asynchronous execution, you can use $translate.instant('translationId')'.\n. No. We moved away from exactly that because of performance reasons. See the migration guide we posted for more info. \n. Awesome. Please squash your commits into one commit.\n. hey @newjs I haven't forgotten you! I just have a lot of stuff to do and it seems the current state can't be merged entirely because the publish flow has been changed during the switch to angular-translate 2.0. \nIf this is your first PR I really want to get your work in 4sho!\n. Landed in canary as https://github.com/angular-translate/angular-translate/commit/a3cc4bed5db478ad1979ab5d242c33cf1b7777c9\n. Thanks for the heads up!\n. Fixed\n. I don't think that this is a problem. Closing this for now until more people complain about the used flags.\n. If you don't know, how should ever the app know?\n. Closing because of inactivity. Feel free to reopen.\n. Disagreeing. Since angular-translate doesn't look if there are tables available somewhere remotely. It only know, when a translation id doesn't exist in an already loaded translation table, and falls then back to fallback language.\n. Awesome thanks!\n. @altdeveloper could you please send a link to a plunk that shows your exact issue?\n. Thanks @inetfuture ! could you please send the PR to canary branch?\n. @newjs unfortunately not. Not yet. Wanna send a PR?\n. Please consider the contributing guide and send the PR to canary branch.\n. This might have something to do with the fact that ng-repeat creates child scopes.\n. Now that's weird, would you mind digging into that and find out what's going on there?\n. Wow @tregusti that's a neat pull request! :) Thank you very much, will merge it right away!\n. Exactly, 'en_US' and 'en_us' are two different keys for angular-translate. Mind sending a PR? :)\n. Hey @mohlendo ! Few things, first: Thanks!\nSecond, please send the PR against canary branch.\nThird, make sure to consider contributing guide line and update your commit message accordingly.\nFourth, we need tests here, please add some :)\nWe will happily merge your PR once these things are settled :)\n. @damienklinnert does your PR also fix the ng-repeat bug? If so could you also add a test for that?\n. Thanks @damienklinnert you rock! This landed in canary and will be released this week.\n. @mohlendo you rock! One last thing, the commit's scope is the $translate service, not language negotiation. Could you please update your commit message one last time?\n. Perfect.\n. Will release a new version on sunday.\n. we'll leave that open until it's verified. @knalli's fix landed in canary.\n. @Francisc to be honest I'm not sure if we can control the behavior of filters when they evaluate HTML. Not even sure if this is a case where $sce service comes in. So, if you have an idea on how to make it better, we'd love to see a PR, otherwise close this issue please :)\n. Pinging @knalli here.\n. @knalli all you have to do is to apply you sanitize check on the right place. Interpolation adapters have all the same structure, so this shouldn't be too hard.\nJust make sure to provide unit tests :)\n. Hm.. I'm confused a bit.. actually, if the preferred language doesn't load, angular-translate should try to fetch the fallback language, once it tries to translate a translation id, that doesn't exist on the current translation table. In that cases, is is true for every translation id, since no translation table exists at all.\n- We check here if the table exists: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1064\n- The condition fails, so we land here: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1075\n- then we try to get a fallback translation https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1087\n- in the end we'll land here and fetch the fallback translation table: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L929\n- actually the fetching process is already happening: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1506-L1508\n@newjs could you provide a plunk please? I'd also expect that the fallbacklanguage is used.\n. :+1: \n. You guys rock! thanks!\n. Like @tspaeth said, the docs should answer your question. TL;DR: yes.\n. @Francisc Well, when a storage is involved, it's locale key is always used as preferred language, no matter what you configure as preferred language during config()\n. @Francisc You are right! Sorry for that, that should be fixed! Would you like to update the docs accordingly and send a PR :) ?\n. Looks good to me! Gonna rebase+merge\n. Landed as https://github.com/angular-translate/angular-translate/commit/4ba736fa75c2eca0c80e217491529672e5e53cf2\n. @roxeteer Yes, this week. Maybe I'll make it today.\n. Closing this because of inactivity.\n. As the error description points out, your code has a collision that is not supported: http://docs.angularjs.org/error/$compile/multidir?p0=someDirective&p1=translate&p2=new%2Fisolated%20scope&p3=%3Ch1%20translate%3D%22%22%20some-directive%3D%22%22%3E\nHowever, I also think, that this should be possible. They should at least describe, why these scenarios not possible and cause a collision.\n. Okay, so closing this now. Feel free to reopen once there's an answer for this issue.\n. @Francisc I'll rebase+merge your changes. This comes into the next release :)\n. Thank YOU\n. Nice one! :D\n. Landed as https://github.com/angular-translate/angular-translate/commit/24a0798a086107e526e985b385a88d8ae306b8ba in canary\n. @Francisc I'm sure this was already requested some time ago and yes, we should do that :+1: mind sending a PR accordingly?\n. When there's a $translateChangeSuccess event fired, there's always a language key flying around :) no need to access storages.\n. Don't get me wrong, I meant, when you make a PR and implement it, in the places where this event is fired, there's always a langKey around, so it wouldn't be hard to implement it.\n. Well yes, you can call $translate.use() which returns the currently used language key\n. Thanks!\n. Great :)\n. @Francisc friendly ping? :)\n. Thank you @damienklinnert on submitting such a detailed PR! Much appreciated. Could you just make sure to follow the contribution guidelines and update your commit message accordingly?\nI'll then rebase+merge your changes with a very big smile :)\n. Reopened. We rebase+merge anyway.\n. Wow that is really bad. Actually I thought the docs from pascalprecht.github.io get deleted by deleting the gh-pages branch..\n. Hey @Chklang \nthanks for the heads up! We should fix that as soon as possible.\nRegarding your bug, I don't think that is has something todo with the bower.json file. Could you set up a plunk so we can further invesitgate?\n. Great! I'm leaving this open until we fixed the bower.json file though.\n. This is fixed already.\n. CLosing this one.\n. @bostrom I agree. Could you send a pull request that does exactly that? Please send it to canary and consider the contributing guidelines.\n. Friendly ping @bostrom \n. Looking right now\n. Wow @bostrom that looks very good to me! Also you considered our conventions int he commit message and you provide us with unit tests. Now that's a big ^5!\n@knalli @tspaeth anything from your side?\n. Alright @bostrom please send a PR :)\n. You did a perfect job! Thanks for your support!\n. Hey @f2net \nangular-translate only tries to look in a fallback language, if a translation id doesn't exist on the currently used language. However, it sounds weird that it requests an undefined.json file. Could you set up a plunk please so we can take a look at it?\n. Please setup a plunk and link it here so we can investigate. Thanks!\n. I left some comments there @knalli great work!\n. Looks very good to me! Just one little thing, we need to document that feature in the developer guide.\n. Perfect. Wanna merge by yourself (from CLI please)? Or should I?\n. Thank you sir!\n. Argh. That was a three-way-merge again. how did you merge?\n. That kind of merge when you don't make a fast-forward merge. GitHub for example make them always no matter if you actually can fast forward or not. This is why I want a rebase+merge. We don't need this meta commits \"X merged branched origin/bar into master\"\n. For more info read: http://git-scm.com/book/en/Git-Branching-Basic-Branching-and-Merging\n. > IMHO it looks more explainable what's going on in the repository\nWell, in the end it's actually just a garbage (meta) commit, that distracts in the clean commit history we wanna have. \n\nI can opt out this, no problem. Didn't know that. Sry ;)\n\nNo problem my friend.\n. Should be two commits. For each method one. However, I think versionString would be enough. In that case we could call it simply version. I don't see the point of having an object that holds the major, minor and patch value. Also holding the dot seems too much to me.\n. > Additionally, that's common practice\nWeird. I've never seen this before. Well anyway. I don't have strong opinion on that.\n. However, we should come with a better solution on how we get the version into the source. I don't think it's a good thing to put the version numbers directly into the js source. Maybe we can extract it into a text file and make sure that the version number is baked during build process into the source?\n. If one of you case take care of finding a way to generate random names for each release, I'm happy to go with it :)\n. I think we should elaborate on that in a separated issue. Since IMO, the entire release flow should be discussed and fine tuned (also when thinking about to switch over to ES6).\n. linkin https://github.com/angular-translate/angular-translate/issues/471 here\n. Okay let's keep things simple for now and make at least the first part right. The initial implementation by @tspaeth looks good so far, however, it kind of feels bad to write the version number directly into the source. Can't we introduce a \"value\" service in a separate file that introduces the proposed object literal with placeholders?\nDuring development (and release anyway) we could interpolate the actual version numbers into that service, so that they are available at runtime.\n. It should be part of grunt watch since the values have to be available when tests get executed etc.\n. It's not crucial where the value is stored, could be package.json, could also be a simple textfile which gets picked up by grunt or something else. The point is, that this process has to be implemented. I'm open for proposals.\n. Nice!\n. @tspaeth yes probably. I didn't take a deeper look into it. Maybe we should just try it out? :)\n. THanks @RomainGoncalves please send the PR against canary branch and consider the Contributing Guide lines\n. :+1: \n. No. That's why I would like to do it. Traceur is just a transpiler we could also use another one if you have a strong opinion on something. I didn't compare them but traceur is the only one that is really a \"term\" for me (not only because it's used for angular 2.0)\n. Well, we check for undefined https://github.com/angular-translate/angular-translate/commit/4ba736fa75c2eca0c80e217491529672e5e53cf2\nSo i'm not sure if it's really missing. Because there's no kind of spec how this case should be handled. You know, maybe you translation id should rather be undefined?\n. @colmaengus mind sending a PR? :)\n. Thanks @tspaeth just one thing. These should be two commits. One that introduces the feature and one that applies the invokation of the factory in the place you added it.\nCould you split them up please? Then I'll rebase+merge the stuff.\n. @tspaeth ah sorry, I actually thought you implemented a new feature. Kinda confused. Nevermind. Well, then there's only one thing missing. Could you document that new enabled feature?\n. Yes!\n. I'll rebase+merge real quick.\n. Landed in canary as https://github.com/angular-translate/angular-translate/commit/3c54a77b827acf134db5e2db34c31bebaca2e43d and https://github.com/angular-translate/angular-translate/commit/f24b15e8d3ca6231deab64a843d4ca5830176343\n. @petebacondarwin Thanks for your thoughts and feedback! Much appreciated. Especially the opinion on ES6. Sounds like a great idea to prepare angular-translate for AngularJS 2.0.\n. > If we want to release more often and earlier, we cannot use only one release branch (alias master).\nWhy?\n. @knalli @petebacondarwin yes, having master as a main stream where new things come in and other branches for different releases that are based on that sounds like the right thing to do.\n. Thanks for merging!\n. $translate.instant('TRANSLATION_ID');\n. Hi @hippegger !\nThanks for your PR! I left some comments there. Just a few things:\n1.) Please rebase your PR on latest canary\n2.) Could you also add a commit that removes the unused default_interpolation stuff?\n3.) Super glad you considered our commit message conventions! :+1: \n. @knalli corrected, thanks!\n. @hippegger no, sorry that's confusing. So, I wrote master but I meant canary and now I corrected to canary. Bottomline: don't ignore 1)\n. Regarding 2): thanks, you rock!\n. Hi @fkiller thanks for your PR.\nSo, to be honest I don't really see, why we should switch to $interpolate service instead of sticking with the regex (despite from the fact that this would introduce a breaking change, which I wanna avoid).\nSecond, you added two new filters, that are 1.) not used anywhere 2.) not part of angular-translate's scope. If you need such kind of filter, you should implement them on application level IMO.\nMaybe I don't get this PR correctly, in that case, please elaborate on what you actually want to achieve :)\n. Exactly. \nsh\ngit checkout your-branch\n// do your changes\n// commit your changes\ngit rebase canary\ngit push -f origin your-branch\n. Well yes, you can either start from scratch, or if we wanna fix the problem, we fix the problem together :)\nIt's up to you, just decide.\n. Awesome! Let's synchronize. What happened?\n. Lemme take a look at your fork real quick.\n. Okay do the following (make sure you don't have locally modified files and you are in your local canary branch):\nFirst, your canary branch adds two commits, so your canary branch is two commits ahead of mine. But you only want to add one of them. Let's reset these two commits:\nsh\n$ git reset HEAD~2\nAfter that your HEAD should be at https://github.com/onehippo/angular-translate/commit/4ddc9816dd04fce1157b8db8793c8bcbce12ed1e again and your two commits are reseted, so your touched files are unstaged and your local working directory has modified files.\nNow, add only the files again you actually wanna commit:\nsh\n$ git add Gruntfile.js\nCommit that one:\nsh\n$ git commit # just as you did before\nIf there are still locally modified files, let's just stash these modifications via\nsh\n$ git stash\nNow push your committed changes to your remotes canary branch. But this time, you have to force the push because you changed the commit history due to the reset you did.\nsh\n$ git push -f yourOrigin canary\nThat should do the trick.\n. I meant your origin. Which is probably origin, probably not. Depends on your configuration. The origin is in fact just a name for the remote endpoint. Git defaults to origin when cloning a repo.\n. No you don't have to :) Your existing PR gets updated automatically :)\n. Indeed! Just waiting for travis, once everything's green, I'll rebase+merge.\n. Before I forget. @hippegger still wanna add a commit that removes the unused default_interpolation stuff? Simply just another commit you have to push to your branch. This PR gets updated automatically.\n. @hippegger perfect, that's another commit.\n. Ah .. you now have a third commit with the same commit message as your first one. That's not right. You can amend it with git amend. Please fix the commit message to chore(Gruntfile): ..... :)\n. Perfect job @hippegger !\n. I'll rebase+merge this one today.\n. @knalli I didn't test it yet on my local setup.\n\nbut it seems that there is only a output like\n\nYou mean you only get the comment block without source?\n. Ah! Good catch! Thanks for the heads up! @hippegger could you take a look at this?\n. I think we need more information about your codebase (e.g. do you use async loaders?) to figure out what's going on there.\n. @virtualit786 that's exactly the right thing to do!\n. Need a little clarification otherwise loos very good! Will rebase+merge. Also today(!) there'll be a new release, it's about time.\n. Perfect. Rebase+merge please. If you need instructions, just lemme know, i'll help you out! :)\n. Ah, where does that come from? https://github.com/angular-translate/angular-translate/commit/457c020dfa35131bd2a65214e9f146eeb0b1512f\n. Yes but the commit message isn't valid.\n. Okay, I'll elaborate on a reabse+merge workflow in https://github.com/angular-translate/angular-translate/issues/471.\nWhen the next release is out today, we have to make a cut and make sure to follow that kind of flow for future contributions.\nReally want to get rid of these kind of results: \n\n. IMO there's no reason to maintain such kind of history. Having a single track with clear commits makes the history more readable and also easier to maintain. So, we also have to get rid of the canary branch.\n. b) force a rebase is the only way to go. Or we do it.\n. Actually, it's very simple. People send PR's from their feature branch, and all they have to do is to keep updating their PR's until they match our needs (rebasing, squashing, force pushing). Once a feature is ready to be merged, we just have to make sure that it's rebased on top of latest master and we can merge it. We actually make things simpler.\n. I think you see the things more complicated than there are. A rebase+merge flow is not complicated. And again, if a contributor is not able to rebase, we can do the job. There's no problem.\nIt's also not a problem that GitHubs merges doesn't rebase the commits. It's a problem that they ALWAYS make a three-way merge of it, even if it's actually a fast-forward which is much cleaner.\n. @eekboom please file an issue accordingly and preferably with a plunk :) thank you!\n. Nice, thanks let's get that into canary. Could you rebase this commits on latest canary and update this PR please?\n. Hey Adam. $translate.proposedLanguage()  gives you what you need. We can't\nreturn the language key for a language being loaded if it's not confirmed.\nSo this is not a bug but rather a feature.\nHope this helps\nOn Mar 31, 2014 10:25 AM, \"Adam Buczynski\" notifications@github.com wrote:\n\nMaybe this is intended behavior, but I consider it a bug.\nUsing the static files loader, I first set the preferred language to 'en'.\nThen, later on, when the desired language is known by the application, I\nexplicitly set the language to use to 'en'.\nBoth these actions cause the static files loader to fetch the en language\nfile.\nHowever, a call to $translate.use() AFTER these actions yields undefined,\nuntil the language file is actually loaded.\nThis is problematic, as it should return the language currently in use\nimmediately, regardless of whether the resource file for it has been loaded\nor not. Even if no language was set, it should return the preferred\nlanguage, so that the currently active language is always known.\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/485\n.\n. No, you have to use the translate filter here:\n\nhtml\n<a href=\"#\" title=\"{{ translationId | translate }}\"></a>\n. Well, the directive .innerHTML'ed the compiled (if applicable) content into the element, on which it is applied. Which means, to use the directive, there's always an element required. The filter can be applied on a single string in an angular expression.\nHowever, just keep in mind that it's better to use the directive where possible, because it is smarter when it comes to suspend/resume watches on the scope.\nDoes that make things clear? :)\n. Unfortunately there's no support for elements that are \"self-closing\". We could add explicite support by checking for element type in the directive. That would be a new feature, if you want to send a PR for it... :)\n. Hey, you can use http too :)\n. @kleinph hi, yes, if you want to, go for it. However, I still wonder what this has to do with the optional aliases parameter.\n. @kleinph ah sure! sorry, didn't follow the link! Yes, send PR please! :)\n. I'm not entirely sure if we need that. Because the static files loader is not tend to be used in that way.\n. Sure but what do you mean by that?\nOn Apr 4, 2014 6:30 PM, \"Nikita Shulipa\" notifications@github.com wrote:\n\n@PascalPrecht https://github.com/PascalPrecht cloud you, please,\nprovide the correct way of using this module?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/pull/488#issuecomment-39584361\n.\n. @toogle Hey, canary has been updated, would you mind rebasing your PR on latest canary and update it?\n. Perfect :)\n. Could you rebase our stuff on latest canary? Also I think you can squash these two commits into one, since they are related in that feature.\n. We should get rid of this canary branch seriously.\n. Landed as https://github.com/angular-translate/angular-translate/commit/7c29f2fc5aeea17dd50ecfc40d1fad67ddd93650 in canary\n. Hey @philippd thanks for your effort! Could you please use docs() as type  for your commits? The commit that fixes the grunt file should be fix(gruntfile): .....\n. You could have git amend or git reset your commits and git push -f afterwards.\n. Hi @npuzin This change also causes a reject of the outstanding promises. Or actually, if only one promise gets rejected in a q.all() call, the entire call gets rejected. I'm not sure if this is what we want.\n. So you would rather break the app and make it unusable?\n. I'm very sure @tspaeth has a better answer for this scenario here\n. I don't think so. Since the GET request already returns a 404. I think this has something todo with your used localStorage. Could you check if there's a saved value in it?\n. there we go :)\n. can we close this now?\n. Linkin https://github.com/angular-translate/angular-translate/issues/309 here Maybe we wanna push this one forward?\n. It should also work for async cases\nOn Apr 9, 2014 12:39 PM, \"Mikhail Osher\" notifications@github.com wrote:\nMaybe add 3rd parameter to method instant()?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/500#issuecomment-39950028\n.\n. I think this is syntactical sugar for now. I'm not against it, but I think before we overload this feature with such implementation we should first implement a clean API on $translate service which makes it possible to translate in a different locale.\n. @JeroMiya Sounds actually pretty sane to me. Wanna send a PR?\n. @knalli Well, a translation id has a dependency against the values that have to be interpolated. If you don't provide the needed data, the result is actually broken. Which is why I think, a rejection is okay in that manner. Any arguments against it?\n. use $translate.instant(). That should do the trick. Also this has been discussed like a 1000 times. Please use the existing list of issues before opening a new one :) thanks!\n. Rebased and landed in canary as https://github.com/angular-translate/angular-translate/commit/6bea19281d52f8ae956f6e898616d01c097d8c23\n. Thanks for the heads up! That's a relict. Will update it with the next\nrelease!\n\nOn Wed, Apr 16, 2014 at 8:37 AM, St\u00e9phane Reynaud\nnotifications@github.comwrote:\n\nI just noticed that the German version does not contain these 2 parts\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/505#issuecomment-40567663\n.\n\n\n/pp\n. Landed in canary. Will be released soonish.\n. @knalli Thanks for your work! Unfortunately, I thought the API for this functionality were somewhere published on the $translate service or so, which is not the case. This means, this PR introduces redundant code. Do you think we can find a way to get a single source of truth for these functions?\n. Landed as https://github.com/angular-translate/angular-translate/commit/ad016861f6ed4d65a6ee074b8feba3f9911dfc20\n. Wow what's going on here. \n. landed as https://github.com/angular-translate/angular-translate/commit/c69de7b87a0efe05548f03b1f2767968d2dc6aac\n. @juaniyyoo friendly ping :)\n. @tspaeth I don't think that it's that unclean, we just try to manage something that can get complex. However, if you have any suggestions on making it better, don't hesitate to let us know.\n. Landed as https://github.com/angular-translate/angular-translate/commit/b48f6bb438a193174df569beef24d193d5cd954c will be published in the next release!\n. Regarding the generated error message (https://docs.angularjs.org/error/$interpolate/interr?p0=%7B%7B%20%27HEADLINE%27%20%7C%20translate%20%7D%7D&p1=TypeError:%20Cannot%20read%20property%20%27$id%27%20of%20undefined) this looks more like an error with angular itself.\n. @perttuk The guys over at angularjs can confirm that this is an issue with angular itself. They already applied a fix in a pull request https://github.com/angular/angular.js/pull/7237\nYou may want to check against.\n. @perttuk also, here the conversation https://github.com/angular/angular.js/issues/7230\n. Thanks for clarifying @caitp ! :)\n. Fix landed in canary\n. Hi @tamtakoe thanks for your PR! Sounds like a good feature!\nJust one question, if there's no cache configured (like in your example), everything would just work as it always did, right?\nAlso could you add unit tests? :)\n. I think we should use the method approach here. So rather do something like .useDefaultCache() and useCache(factory). That fits better to the rest of angular-translate's API and is more flexible.\n. Will have a look at it ASAP!\nOn Mon, Aug 4, 2014 at 10:43 PM, Jan Philipp notifications@github.com\nwrote:\n\nOk, I've opened with 326133a\nhttps://github.com/angular-translate/angular-translate/commit/326133a6b2713d4299c33bb8cb5f57ed2d887168\na new branch which applies some convenient stuff ontop of this.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/pull/529#issuecomment-51114786\n.\n\n\n/pp\n. @spawnedc that would be awesome!\n. There's currently no way to do that on github. we have to close this and you have to make sure to rebase your PR on latest canary.\n. MERGED\n. Could you setup a plunk that illustrates the issue? @jswxwxf \n. @atarsh  Maybe you can set up a plunk?\n. @atarsh Ah I see. So yea. You defined en as fallback language. And that causes angular-translate to load it right away, so it's there once needed. Actually, this should only happen, when you register a set of fallback languages. But it turns out that, $fallbackLanguage is always stored as array, so this: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1597 gets always executed when fall back languages are registered, wether they are registered as array or not. @tspaeth fix?\n. @atarsh simply remove the registration of your fallback language and you'll see that there'll be no xhr anymore..\n. no idea, sorry.\n. Landed in canary. @spawnedc thank you very much!\n. @spawnedc lemme know if you need any further instructions on that! :)\n. @spawnedc I just mean, because if you wanna generate the site on your local machine and check your translations in a running app, there's a bit more to do than just adding new translations. The generation script also has to be updated etc. However, ping me if anything's unclear!\n. @spawnedc that was just a friendly ping anyway :) take your time!\n. @spawnedc friendly ping? :)\n. @tamtakoe I think you solved your problem already pretty good by extending the service at runtime. There's no need to make this a built-in feature by default of angular-translate. However, you can make an extension package that does exactly your thing so others can use it.\n. Closing this since this discussion doesn't belong here.\n. Hi @tflori few points:\n- This patch should be sent to canary branch\n- I think it's better to add the surrounding IIFE during build process, so we have to tweak the grunt file for that.\n- I also think we should rather have a solution for all packages then do you mind working on that?\n. No idea. But always happy to improve.\n. @tflori closing this one, maybe you find time someday! :)\n. Wow, thank you so much! <3 @forresst \n. Landed as https://github.com/angular-translate/angular-translate/commit/fc76086f044a07d69b2829c263ee4b5650256530 in canary\n. Hi @Narretz \nI understand your feelings about the different loaders. It's true that you could actually achieve the same effect with both, the static files loader and the url loader. And yes, it's also true that the partial loader could also be used in both other loaders. However, I just want to point out, that these loaders are just solutions for \"common\" use cases. You can use the loaders if one of them fits to your needs or you can leave it and build your own.\nIt's just to make it easier for developers to get started very quickly without worrying too much about internal structures. And yes, we can even make a loader that solves all problems that are solved by the different three loaders and provide a nice clean and simple API for it, so that it's also easy to use.\nBut we didn't. The partial loader also came after the other ones, so it's also a result of evolving development cylces.\nIf you really want to have such loader that is kind of the-answer-to-everything\u2122, feel free to just build your own. We've build the loader hook system in a way that it's VERY easy to build custom loaders that do what ever you want.\n. @knalli yes! Do you wanna do it?\n. Let's wait for @DWand and @newjs here to get all translations together\n. @DWand Cool down. No stress. This is open source, take your time dude :)\n. Hey @graphefruit is this still an issue? And if so, could you please provide a plunk so we can investigate? :)\n. Smal addition:\nI'm still not sure what causes this crazy behaviour in that plunk, it really makes no sense to me. Even if it's great that we got it working by just replacing the filter with the directive, I'm curious about what's going on there. I would suggest maybe @knalli and/or @tspaeth also take a look at this plunk and see if they can't find something. If not (which I can understand because it's really crazy) I would say we can close this issue.\nWdyt?\n. @knalli this error occurs as long as the app runs. Very weird. Also hard to debug.\n. Am I getting this right, that this feature would make translate-default useless?\nAnd is there any reason it's only proposed for translateInstant?\n. What exactly do you mean with support for multiline strings? In the\ntranslations? Angular-translate just takes what you put in.\n/pp\nOn May 16, 2014 1:35 AM, \"lepipele\" notifications@github.com wrote:\n\nI have been searching through the docs for past 2+ hours, but I simply\ncan't find information if there is any support for multiline strings.\nSo, is there? Ideally I would love if there would be an option to\nautomatically replace \\n with\n, but just being able to get strings with \\n would be OK too (I would look\ninto writing filter that would replace \\n with\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/554\n.\n. If your translations contain markup e.g. <p> tags, and you use the directive to translate your ids, that you'll get that result.\nOtherwise yea, you have to stick with multiple translation ids\n. Just do it like this :) And make sure to translate with the directive :)\n. What Jan said <ANY translate=\"TRANSLATION_ID\"></ANY> instead of {{\n'TRANSLATION_ID' | translate }} :)\n\nOn Fri, May 16, 2014 at 6:06 PM, Jan Philipp notifications@github.comwrote:\n\nAgain: You have to use the directive because filter output will be encoded\n(always).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/554#issuecomment-43349127\n.\n\n\n/pp\n. Hi @zbindenren \nSo first of all, the _* syntax is currently supported in canary branch, not in master, which means, it won't work anyway. You'll get that feature with the next release :) Could you try it without wildcard and confirm that things work as expected?\n. @zbindenren you can actually do that by passing a function to determinePreferredLanguage() and execute the logic there.\nHowever, glad it works now!\n. Cherry picked. Landed as https://github.com/angular-translate/angular-translate/commit/3f9da4572320dc2af884ec1d41c2ecb273bafeee\n. Wow @forresst that's awesome, thank you so much!\n. I'll do it now\n. Landed as https://github.com/angular-translate/angular-translate/commit/2d3338dcea4d3563196c73c7b7cf7ed07c405188\n. @rolandpeelen could you elaborate on that? What exactly do you mean?\n. You could have HTML in your translations a la\nhtml\n<strong>Who</strong> is the <strong>Master</strong>\nAnd then use the translate directive (because it inserts via .innerHTML)\nhtml\n<h1 translate=\"CONTENT.CREATE.WHOSMASTER\"></h1>\nHope this helps\n. I think we need to extend the determinePreferredLanguage() method here. Maybe something like\ndeterminePreferredLanguage().withFallback('foo') or something, since we have in fact no fall back mechanism in that case.\nOur fallback mechanism is used when one tries to translate a translation id that doesn't exist in the current translation table.\n. @chrisie however, for now you could pass a function into determinePreferredLanguage() that determines it for you and always returns a valid fallback.\n. Was rethinking this topic and actually, it should be enough to just pass a function that returns a default locale. No need to introduce a new API.\n. @JobaDiniz @knalli we have an API called .registerAvailableLanguageKeys(), which is currently used to help .determinePreferredLanguage(). I think that one would be a perfect fit for that case.\nOnce could just say something like:\njs\n$translateProvider.registerAvailableLanguageKeys(['en', 'fr', 'de', es']);\nAnd later at runtime:\njs\n$translate.getAvailableLanguageKeys();\n/// returns ['en', 'fr', 'de', 'es']\n@JobaDiniz fancy implementing that one?\n. Indeed! @red-0ne wanna start implementing it?\n. @red-0ne I think the idea is great. I'm also pretty okay with\nhtml\n<ANY translate-attr-{attr}=\"\"></ANY>\nsyntax. \nHere are some requirements:\nit should...\n- [ ] ... be able to understand translation ids as strings (e.g. \"TRANSLATION_ID\")\n- [ ] ... be able to understand translatino ids as interpolation (e.g. {{'TRANSLATION_ID'}})\n- [ ] ... be unit tested\nThat's all I have. Any other ideas?\n. @red-0ne could you elaborate on that?\n. @red-0ne if there are already attributes with a value, they would get over written. Since it doesn't make real sense to have both on an element. When you know there's an element with a value attribute, you should either use that or translate-attr-value which results in value once processed.\nI think the most cases would be covered with that approach. Maybe we should just go for it now and ignore a possible directive-could-change-value-attribute scenario\n. @red-0ne oh no, please don't get me wrong. I just think we can deal with these issues once they occur. Because currently it's hard to say how to handle such cases. We have to play with directive priorities I think. However, if you have an idea to tackle it, don't hesitate and tell me :)\nI'm happy and open for great ideas.\n. Could you elaborate on why we couldn't go the other way without hacking $compile? (Then we should just go with translate-attr and translate-attr-value)\n. @red-0ne Ah getting your point now. So, we actually don't need to introduce a new directive. Attributes like translate-value-* aren't directives either. The translate directive just looks if there's an attribute called translate-value-*.\nSo first it checks if the attribute exists at all: https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L92\nAnd then it goes ahead evaluates the values out of them: https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L123-L134\nSo in the end, basically what you said. But I don't think we have to introduce translate-attr-* and value, actually we have all information in translate-attr-*.\nSo if we have something like <ANY translate-attr-title=\"{{foo}}\"> then it'll result in <ANY title=\"valueOfFoo\">.\nI think that's the way to go. Thank you very much for you input already!\n. @red-0ne great! Looking forward to it!\n. Hi @apneadiving \nso first, if there are values that can change at runtime, we need $watches anyway. For cases where there aren't, angular-translate translate directive, is smart enough to recognise that and unwatch your translation. That being said.\nAlso people are already using angular-translate with angular-bindonce. You should have a look at it too.\nIf you have time to make a proposal, feel free to send a pull request, without the use of $observe and $watch. Would be curious to see how things work. :)\n. Hey @mehmedju I try to help you, could you please set up a plunk that contains your code, I think it's easier to understand your problem then.\n. Landed\n. Merged.\n. Thank you!\n. Landed as https://github.com/angular-translate/angular-translate/commit/59aa2a01dca73b8343eadd77d41dcb294bfad89a\n. Landed as https://github.com/angular-translate/angular-translate/commit/1ac3a0a7c69f0e765a615a395ea467f9de95f0c9\n. Unfortunately we don't have support for this =/\n. Landed as https://github.com/angular-translate/angular-translate/commit/564820ac9e10f86e1a338043b1d3174b71a5c52b You rock!\n. Thank you sir!\n. Je m'apelle Pascal\n. Landed as https://github.com/angular-translate/angular-translate/commit/76b011d42aa55246b8e2b98bdd2243994229fd0e\n. Landed as https://github.com/angular-translate/angular-translate/commit/b62ac430e8ae07a62904c8b6209b1366e807bba5 Thank you @newjs !\n. That should actually be the case. The translate directive waits until an\nasynchronous execution is done. Which version do you use?\n/pp\nOn Jun 4, 2014 6:23 PM, \"Steffen\" notifications@github.com wrote:\n\nSo, I've started working with angular-translate today (great project,\nreally helpful!:)) and noticed the different ways to use it in a view\ntemplate.\nOne such way is the following:\n</header\nLet's say I also use asynchronously loaded translation files, and it seems\nthat when the translations are still loading, it will output \"HEADER\" while\nwaiting for the translation, just as if I had written:\nHEADER</header\nThis is fine for the above scenario and I know that I can use\ntranslate-cloaked in order to hide it, if I wanted. But here is another way\nto achieve the same thing:\nHere's some header placeholder text\nWhat I would expect here is that while the translations are loading / not\naccessible, that the module would simply leave my placeholder text there,\nand in case of an error (ie because the language file doesn't exist) fail\nsilently instead of spewing out the translation key. Is there a specific\nreason for this behaviour or something that I'm missing? Because I think it\nwould make developing readable template code (with inline\nfallback-placeholders) a lot easier, especially when using namespaced\ntranslation keys that are not exactly user-friendly. :)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/588.\n. @bra1n that's weird, again, that shouldn't be the case. Could you build a plunk that demonstrates the issue? That would be great!\n. Hey @bra1n So I took a look and I have to say sorry. I misunderstood your issue.\n\nSo to clarify things: It behaves as expected. When angular-translate doesn't find a translation for a translation id, it returns the translation id (as long as there's no error handler configured that does something different). So in any case, it replaces the original contents with that what comes back from the translation process.\nHowever, I do think that we could actually apply your expected behaviour, that when a translation is not found and there was content inside of an element, keep it.\nI would like to discuss that with @knalli and @tspaeth since we have to make sure we don't end up with a confusing API. There's another PR that adds the functionality that interpolations are processed within translation ids (in the case a translation is not found). Which means you could do something like\nhtml\n<ANY translate=\"Translation id with {{dynamic}} value\" translate-value-dynamic=\"foo\"></ANY>\nWhich would result in Translatoin id with foo value with the translation doesn't exist.\n. @knalli what do you mean with \"template parsing\". Actually, interpolation has nothing to do with any templates at a first glance.\nHere's the PR I was talking about https://github.com/angular-translate/angular-translate/pull/551/files\nMaybe I miss something.\n. @knalli Could elaborate on that, don't really get the point. I mean, as long as we find a way to make the interpolateParams available at the time where angular-translate searches for translations, we can interpolate them can't we?\n. Please see #470 and especially #129 \n. Labelling this as FAQ\n. Hey @Francisc thank you very much!\nCould you please explain your fix in a simple scenario? Kinda missing some information, because \"prevent calling then() on undefined....\" isn't really helpful.\nThanks! :)\n. @Francisc Could you add some unit tests that make your scenario more clear? :)\n. @Francisc Sounds very good to me! :)\n. @mugwump great solution!\n. Hey @DrMabuse23 glad you like angular-translate!\nSo, $translate.use() doesn't do any redirects at all. So this should be a different issue. Could you give a bit more information? Are there any errors in your console?\n. Hey, likewise! :)\n. Perfect, thank you!\n. Landed as https://github.com/angular-translate/angular-translate/commit/be6213144a686b34cff3ba29b9a52041924b2c9e :)\n. @bostrom so this commit happened in master branch. And apparently I didn't merge it back to canary. That's why I just cherry-picked your actual feature commit and pushed it to canary.\n. @bostrom hey that's totally fine! And the answer is yes :) usually, you would branch from latest canary. However, it seems like it's too much to do for the most contributors, which is why I'm thinking about removing canary and just rebase+merge into master. Your PR was one of the cleanest ones that ever landed in the project by a contributor :)\n. @bostrom wow, that's still in the guide line? We actually fixed that like 10 times. :D\nThanks for your help! :hamburger: \n. @tunguski Do it! :) And thank you for your support!\n. I'll cherry-pick your commit and put it on top of latest canary :)\n. Cherry-picked, landed as https://github.com/angular-translate/angular-translate/commit/7625951de2474049be78294fa129c32ea46df6a9\n. You can use html elements like <p> or <br> in your translations and they get interpreted when translating them along with the directive. There's no support for \\n.\n. Sounds reasonable to me. However, actually translate-cloak is a directive that is only useful for the initial page load and therefore should be applied on the <body> element, just like you would do with ng-cloak.\n. @BrtSmpsn I don't really get why you want to apply it on other elements than <body> (or another wrapper) anyway. Actually, applying it to a wrapper solves your problem. You would for example hide your app, until everything is loaded. Once loaded, you can make your app visible and elements generated with ng-repeat don't really have to care.\nCould you explain your use case a bit? Why do you want to apply translate-cloak on several elements instead of just one wrapper to control everything?\n. @knalli even then, the initial loading (which is what it's all about) would be covered by translate-cloak. Partial loader is also just a loader that kicks of in certain cases, and all loaders kick off on startup, when translation table is not available locally. That's the only moment when translate-cloak really counts, so I still don't understand why one would ever put it on an ng-repeat'ed element anyway.\nAgain, I might be missing something but @BrtSmpsn knows probably best.\n. @BrtSmpsn okay, so can we close this one? Of course you can still explain why we wanted to put them on ng-repeat elements.\n. As you can see\n\nfatal: unable to connect to github.com:\n\nThere's a problem to connect to github.\n. No probs :)\n. Hey, everything okay with you?\n. Hey @mzabriskie I finally found some time to take a look. :)\nSo it seems you kind of misunderstood the usage of registerAvailableLanguageKeys(), it can be very confusing though.\nSo what's going wrong here is the following:\nYou first say what are the available language keys in your application:\njs\n$translateProvider.registerAvailableLanguageKeys(['en'], {\n  'en-*': 'en'\n});\nSo from now on, angular-translate knows which locale keys are available in your application, and it's even able to map everything that matches en-* to en.\nNext you tell angular-translate what your preferred language is:\njs\n$translateProvider.preferredLanguage('en-US');\nAnd this is the point where angular-translate makes its first request to /locale-en-US.json.\nWait, shouldn't it actually make a request to /locale-en.json ? The answer is no. Because you told angular-translate thar en-US is your preferred language.\nSo what does that mean, how can we make angular-translate requesting the other file? As you can read here: http://angular-translate.github.io/docs/#/guide/09_language-negotiation .registerAvailableLanguageKeys() are only considered when used in combination with determinePreferredLanguage(). So you can either use just .determinePreferredLanguage() and angular-translate tries to determine your preferred language. That could cause problems, because browsers have different locale values, you never really know what your preferred language will be in the end. Or you use it in combination with .registerAvailableLanguageKeys(), which helps .determinePreferredLanguage() to determine the right one (e.g. mapping en-* to en).\nThe bottom line: replace .preferredLanguage() with .determinePreferredLanguage().\nPS: the reason why it makes two requests, is the fact that en-US couldn't be loaded and en is loaded then, when angular-translate tries to translate.\nHere's a working plunk: http://plnkr.co/edit/UaEnHp?p=preview\n. Hey, that's great! But passing that handler to determinePreferredLanguage() makes registerAvailableLanguageKeys() useless. Just for the records.\n. @mzabriskie hey sorry, you are totally right: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L636\nForget what I said, I thought the code behaves different. Too much lines to have in the head, haha.\n. Linking: https://github.com/angular-translate/angular-translate/issues/260\n. I actually like the idea to split the response, angular-translate could then check for meta data. @knalli what do you think?\n. That's a great idea!\n. @DWand great you're agreeing too! :)\n. Yes.\n. @bastoune that could have several reasons with that much of information.\n- do the JSON file exist?\n- did you set a preferred language?\n- does your JSON file send correct JSON?\n. Since there are no curly braces in your jsons, they could also be broken, that's why I was asking. So anyway, the next step would be that you set up a plunk so we can take a look at what's going on there.\n. @bastoune Hey no need to shame :) I understood that your JSON is probably correct, but all I can do is guessing. So can you confirm to provide us with a plunk?\n. @bastoune so does that mean there's no issue anymore?\n. Great!\n. Feel free to send a PR that makes things more clear :)\n. Hi @koblass could you please setup a plunk, so we can take a look?\n. Hi @jmorvan I'm not sure what the use case of this method is. If you want to extend translations during runtime without asynchronous loading, your translations are obviously already there, so you could just add them during .config().\n. @jmorvan Yes I got that point. But still, if you want to extend your translations without asynchronous loading, means you have all your translations available in your app, so you can just add all of them in .config(). \n. Hey @KevinLlopart! Thanks for your work! Unfortunately, I don't think we can use that PR how it is, because relying on $translateTable isn't enough. Just imagine the case where you use a asynchronous loader and only one language is loaded at the point where getAvailableLanguageKeys() is called. You won't get a list of all keys, but only the ones that are in $translationTable. Which is why I thought we could use registerAvailableLanguageKeys() for that (probably, not sure).\nMaybe you have another idea?\n. @KevinLlopart I don't have a real solution for duplication either. I started implementing this feature by just relying on setAvailableLanguageKeys(), where you would just register a set of language keys (without mapping) and later at runtime you could access them via $translate.getAvailableLanguageKeys(). But yea, that sounds like duplication of application code...\n@knalli Not sure if this method is useful in any situation. Also it a different API for a different use case.\n. @Saftpresse99 That's not true. The fallback mechanism is activated, once there's a translation ID that couldn't be translated with the currently available translation tables. If you try to to load a language file that actually doesn't exist, that's nothing angular-translate knows about. However, we can discuss that feature in a different issue to make that functionality possible, but I'm sure it requires more energy because things are getting less trivial when trying to implement such feature for partial loading.\nSo bottom line: if determinePreferredLanguage() detects fr then it's your job to make sure the file is there. If you can't be sure about that, you can pass a function to determinePreferredLanguage() that always returns a language key that is available.\n. Yea that's a possible option too.\n. Landed as https://github.com/angular-translate/angular-translate/commit/b2bb166944074aa174f0ed557bf4e2457128b3b8\n. @nbaronov is it this here?\nhttps://github.com/angular-translate/angular-translate/commit/59aa2a01dca73b8343eadd77d41dcb294bfad89a\n. Hey @steinerj you are right and we are aware of this. People wanted that feature and so we implemented it. And since we know that we can't really rely on anything when it comes to automatic language determination, we provided a way to always set something on top if one gets results that weren't expected.\ne.g. you can always pass a function handler to .determinePreferredLangauge() which will return a language key.\n. @steinerj great, please submit a PR with better docs! :) closing this one for now\n. @steinerj as you might know services like $resource are not available during config(). So if you really need to make this call at that time, you have to do it outside the angular world and probably before the actual config() function.\n. Landed as https://github.com/angular-translate/angular-translate/commit/47fc9436cfc69347f8a9b7f09cf5c726c0ca1931\n. It would be great to see the changes you did. Maybe you just submit a pull request so we can discuss there. Thank you!\n. I think we automatically support all browsers that the underlying angular version supports. Except for the indexOf scenario\n. @fidian thanks for your PR! Could you add a test as well?\n. @spencerwi hey, sounds like a cool thing! Sorry for the wait. Fancy implementing that and sending a pull request?\n. @tsanko the point here is that the translation table should only be loaded when it doesn't exist already. \nIf you already have a translation table for a language and you want to load more additional translations for that language, please use partial loading. \n. @ricricucit AFAIK the google crawler now understands JavaScript, so it waits until it's executed until it crawls your site. You can also use a service like prerender.io.\nthis is not an angular-translate specific issue.\n. Unfortunately not. You have to build your own currency filter that uses $translate service to listen for $translateChangeSuccess to then revaluate on language change.\n. @fidian +1 on setting up a plunk so we can investigate. Thank you!\n. @jrm-unamur to answer your question: this is currently not possible, but there are existing issues about that you might collaborate on. Please discuss at https://github.com/angular-translate/angular-translate/issues/309 closing this for now.\n. @DWand @knalli back to the actual topic please.\n@Saftpresse99 For me your use case sounds like a perfect fit for partial loader. Is there anything that speaks against it?\n. @Saftpresse99 Well, as far as I understand your use case, your \"specified keys\" could act as \"parts\" then. Did you try that already?\n. Hey @flatsteve please set up a plunk or fiddle so we can investigate :)\n. Hi @Saftpresse99 \nI inspected your code and have a feeling what this behaviour causes. So first, to hotfix that bug, you have to wrap your $translate() call in a $rootScope.$on('$translateChangeSuccess') event.\nThis shouldn't actually be needed for the very first call, because $translate() waits until a running asynchronous loader finished his work, and returns a promise once done. As you can see in your demo, the promise gets rejected.\nSo I think this is because you said your preferred language is en_ca. angular-translate sets up a mapping between language keys and running asynchronous loaders per language. While your mapping from en_ca to en works, as you do it with registerAvailableLanguageKeys(), does angular-translate only track a promise for en_ca, because that's what you registered as preferredLanguage(). \nIt could be that the mapping process for asynchronous loaders knows nothing about your mapping from en_ca to en.\n. Here's a working sample: http://plnkr.co/edit/svu3Vns6keb0HmUVAZRJ?p=preview\n. @Saftpresse99 not sure if in the next version, but yea we have to fix that.\n. Landed as https://github.com/angular-translate/angular-translate/commit/ed6023a4aa2ebc51ba839b976eb1b8f8e8fa91b6\n. Hi @vladipus please set up a plunk so we can investigate your problem, thanks!\n. @gtesslerge as @knalli pointed out, use translate directive where possible to avoid unnecessary watchers. In angular 1.3 a one-way binding has been implemented, so you could use that in combination with the filter as  long as you're sure that the value is not going to change.\nI tested angular-translate with ~2000 and even that performed pretty well. 500 shouldn't be a problem especially when working with the translate directive, since it unwatches translation ids once evaluated.\n. @knalli @tspaeth I think @chrisscholly explained pretty well what the issue is. Removing translate-cloak class only when $translateChangeSuccess event is fired, is actually the wrong behaviour. Just imagine the simple case where $translateChangeError is fired. In that case the class will not be removed but should actually, because even if succeeded or not, the loader finished and therefore the class should be removed.\n@chrisscholly If you're fancy making a pull request that makes that chance, just go for it. \n. @knalli that's perfect. I'll cherry pick it on top of latest canary\n. Landed as https://github.com/angular-translate/angular-translate/commit/acab18ab5e6f455db86f6c9dabbbbdbc2f7b7855 will land with the next release, thank you @chrisscholly for submitting and @knalli for implementing. You guys rock.\n. @JPM84 great, if you problem's solved, please close the issue.\n. @devonhumes you can just rebase your branch onto latest canary, no need to close this PR.\n. Actually sending events is blocking. When $broadcasting events, the code execution goes on, once the broadcast ist done. However, $translate.refresh() returns a promise. @devonhumes you can actually do something like:\njs\n$translate.refresh().then(function () {\n   $translate('ID').then(function (translation) {\n     // do some stuff here\n   });\n});\nOr you can react on $translateRefreshEnd event.\njs\n$rootScope.$on('$translateRefreshEnd', function () {\n    // do something\n});\n. @jandudulski I don't really see a reason why we wanna do that. Make it an empty string instead. Or leave that translation id off.\n. @jandudulski well, that's your particular use case, but we can't change angular-translate on all ends to fit to all specific use cases. We have to keep things generic and IMO it's not very common to provide translations with a null value. However, the change wouldn't be that big, so if you want to you can send a patch.\n. Hey @epeleg!\nFirst, thanks for the very detailed issue description. It's great that you already came up with a solution that works for you but also share your thoughts about how it could work for others.\nFor now I would say you have to stick with your solution, since it's a very specific use case here. However, I like your idea of just making it possible to pass an optional higher order function to use[WhatEver]Storage() to let developers opt-in to something.\nI think this is something that is not very expensive when it comes to implementations, and at the same time it gives us full flexibility.\n. @artuska that's true, because the asynchronous loader only kicks off when needed (which is when there's no translation table with the requested language available yet).\nSo changing the code like you did works for your case, however, I don't think that you always want to load the json for a language, even if it's actually already there. As you can see here (https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1366) the actual merge of translation tables happens in that line.\nFor your use case you should use rather the partial loader.\n. @ojacquemart in fact we tried implementing asynchronous storage support but it turned out that it's not really possible to get it properly integrated since it conflicted with angular-translate's startup phase. We stopped working on that and also there was nobody else willing to help out on that one.\n@juristr The docs you're linking to are outdated. Check out the real docs on angular-translate.github.io -> http://angular-translate.github.io/docs/#/guide/11_custom-storages\nSo as already mentioned, asynchronous storage support is not given in angular-translate, at least with the given APIs and also the implementation turned out to lead to big conflicts. locale and cookie storages (which are currently supported and which our APIs are based on) are synchronous there's no way we can change that.\n. @Narretz that's interesting! Do you know what this now is and what we can do about it? A PR would be great.\n. Hi @andertun \nyou can pass a function to determinePreferredLanguage() to return a preferred language that matches one of your values in the map: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L631\n. @Tyl68 Using the directive causes your translation contents to be interpreted as HTML since we .innerHTML the contents of a translation when using the directive. Did you try that?\n. @Tyl68 Glad it works for you! Thanks!\n. This just looks to me like ionic doesn't interpolated title and\ntemplate.\nOn Mon Nov 03 2014 at 11:46:30 PM Jonathan Rodrigues de Oliveira \nnotifications@github.com wrote:\n\nAngularJS is at 1.2.12 and angular-translate is at 2.4.2\nI can't say that yet.\nI'm looking after this at the Ionic popup code...\nhttps://github.com/driftyco/ionic/blob/d3026edffce08b5614777cba086c703775953a2f/js/angular/service/popup.js\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/806#issuecomment-61563806\n.\n. @sirinibin check out http://angular-translate.github.io for documentation and installation instructions. \n\n@knalli these kind of answers are NOT okay. \n. Fallback languages are only applied when you try to translate a translation\nid that doesn't exist. If it exists but is an empty string, no fallback is\nused. Because, as I said, the translation is technically there.\nOn Tue, Nov 11, 2014, 1:25 PM Thorsten notifications@github.com wrote:\n\nso you want translate to ignore\n?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/815#issuecomment-62539822\n.\n. If you want to use the fallback mechanism yes. Otherwise it's no fallback.\n\nOn Tue, Nov 11, 2014, 2:20 PM Tobiasz Waszak notifications@github.com\nwrote:\n\n@PascalPrecht https://github.com/PascalPrecht so my only solution is\ndelete translations with empty string?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/815#issuecomment-62545447\n.\n. @yabasha there's currently no support for right-to-left languages by angular-translate and also not likely to land in the near future, so it won't work anyway.\n. Bidi languages are a very hard topic and I don't think that angular-translate can cover it with the current way it is designed. However, we're working on a solution that will be provided as separate Angular module.\n. @ritenv Angular 1.3 introduced stateful filters (http://blog.thoughtram.io/angularjs/2014/11/19/exploring-angular-1.3-stateful-filters.html). We had to make a change in our code base accordingly. If you don't use the latest version it could be that it causes that behaviour.\n. > It is possible to use post compiling\n\n@knalli I pretty much think so.\n@luizfilipe Yes, angular-translate supports that. Here's a link to the docs that cover that part: http://angular-translate.github.io/docs/#/guide/05_using-translate-directive#using-translate-directive_post-compiling\n. > I don't get, what loading the ngLocale module has to do with angular-translate\n@tspaeth Nobody asked for that, so please be kind and just answer the actual question:\n\nBut we wonder if it is possible to load them using urlLoader or staticFileLoader ?\n\n@mathilde-pellerin ngLocale files are not just plain JSON files but actual angular modules. So, even if you load them with angular-translate (which is indeed possible), the returning data from the server is not a format that angular-translate can work with. In addition to that, they both solve two different things, so in the end it's not what you want anyway.\n. @Cfsattva So if you don't want to have any HTML in your JSON, but you need HTML in the end result, you need to make it the other way around. Which means, you put the needed tags in your document (as usual) and translate your translations there.\nI think in the end there's no way around having tags in your translations considering how angular-translate works.\n. > So without any modification my application work with Firefox and crash with Chrome (as soon as I use determinePreferredLanguage). It would be great if you can set a flag somewhere to only care about language name\n@sebluca determinePreferredLanguage(fn) expects an optional function where fn is or mechanism to determine the preferred language. In other words, you can do so already without us introducing any new APIs.\n. @seblucas The only thing I can imagine is publishing a new additional module that introduces that function (which would be too much overhead for such a function prolly), rather than baking that right into source.\nWe need to stop adding features for personal use-cases that are actually already supported by using the existing APIs.\n. I'd vote for keeping namespaces and service names as they are. People got used to them and angular-translate is very widely used in a lot of big applications. This release would introduce a huge breaking change then. I think it's okay to just stick with that, other community driven projects like ui-router also use $ prefix in their services.\nMy 0.02$\n. @acourtiol very nice PR, thank you  very much. I left some comments there, once updated @knalli can you rebase on top of canary then?\n. Oh one last thing, can we rename the method to just forceAsyncReload() ?\n. Looks good, thank you @acourtiol for your great contribution. Thanks @knalli for taking care of this one! you guys rock\n. Looks good to me. Now, of you guys want to make it perfect, @acourtiol take @tspaeth commits and squash it into your PR so that we have one nice commit for the entire feature incl. docs\n. Oh, and I just noticed @acourtiol the type of this commit should be feat($translateProvider) instead of core()\n. @acourtiol please squash them into one commit :)\n. Love it.\n. @kentcdodds I recommend following @knalli on twitter, I'm sure he'll send a tweet about it :)\n. @gonzalo-roberto-diaz great you got it started!\n. I love your work here :heart:  keep going guys!\n. This is done because if a translation ID doesn't exist in one language, then the fallback language stack is request. angular-translate iterates over all fallback languages until it finds a translation. If you're in a different language and fallback languages are requested, you might want to have your preferred language as last item in the fallback language. Sort of a fallback fallback.\n@tspaeth implemented this, maybe he has more thoughts on this.\n. We actually moved this part back and forth when we developed it. We could introduce a new flag method includePreferredLanguageInFallbackStack() or sth. to disable it.\n@tspaeth thoughts?\n. @knalli what do you mean by \"flipped\"?\n. indentation\n. indentation\n. please use a space before and  after parentheses for anonymous functions\n. same here\n. and here\n. you get it, right?\n. stopping here now...\n. Good question. I'm not entirely sure. Since expression+expression expression would probably trigger a $digest two times too.\n. the default_interpolation part can be kicked. Mind adding a commit, that removes default_interpolation stuff? We don't need it anymore, since the default interpolation is built right into the service.\n. :+1: \n. \"If the translation is exactly the translation ID\" ? Could you elaborate on this please? :)\n. Yes please. To prevent confusion.\n. @spawnedc you rock!\n. version 123?\n. Well, I'm still not sure if we should write the version number into the raw file directly. That would mean we always have to go there and update it.\n. Keep cool. Didn't see that, sorry. No reason to start a ?!?!! Kalashnikov. Well then, we should change 123 to something more appropiate.\n. Good catch! @tspaeth can you confirm?\n. Not sure why putting this in a function.\n. @tspaeth I'm okay with x.y.z here unless you have something different that is abstract too. I would also be okay with 0.0.0 but I like x.y.z more.\n. Why is this moved here?\n. Ah, should have viewing the entire file. Thanks!\n. @mruoss I think what he tries to say is that at the time when this method is called, you actually don't put your app in an invalid state and therefore a check like this isn't necessary. If you have a method that sets something instead of getting something, it makes sense to check the value and throw and error when the given value puts the app in an invalid state.\n. we can remove $rootScope.$digest() here\n. And also here. I think it's better to call it outside as you do below\n. ",
    "thobias": "Shouldn't this also be registered with Bower?\nSo that you can specify something like this: \"ng-translate\": \"0.4.x\" in your component.json and have bower install it that way.\nAlthough ng-translate is already taken by https://github.com/StephanHoyer/ng-translate\n. This feature is optional right? So perhaps the dependency can be optional as well?\nRight now I had to include angular-cookies in my project without any intent to use it whatsoever, just to be able to use this component.\n. I just looked at the code, the problem is that there's no way to conditionally inject a module into angular runtime (at least as far as I've seen), so we can't check to see if we need to load the $cookieStore\u2026\nI'm thinking the only \"solution\" to this is to leave this functionality out of the component and let users create their own cookie/localStorage-solution (which is what I would have done anyway). I think that's the cleanest solution, since it also makes the component more versatile (ie. it lets people use it how they want, and not force cookies/localStorage) and more focused.\nThis also makes sense in larger project where the locale may be a property of the logged in user or such (in which case we already have a session with the locale in it).\n. ",
    "rewritten": ":D sorry for the lack of context...\nIn this file:\nhttps://github.com/PascalPrecht/ng-translate/blob/master/ngTranslate/provider/translate.js#L64\nthe rememberLanguage is stored in the $cookieStore. This leads to the rememberLanguage being sent back and forth to the server. If you could use localStorage for remembering, you could avoid this additional bandwidth.\n. well, if it's not available, then fall back to $cookieStore. localStorage API is easy enough to be assimilable to the $cookieStore.\n. See #3 (closing this)\n. I know. I didn't mean for the PR to be finished, it's there for discussion and I haven't had time to even test it :) \nEl 08/04/2013, a las 21:47, Pascal Precht notifications@github.com escribi\u00f3:\n\nThanks for the PR. Please consider the Contributing Guide.\nAs you can see, your code failed on build process. Also, there aren't tests submitted at all.\n\u2014\nReply to this email directly or view it on GitHub.\n. So, after all this discussion, my take on this is that forcing ANY interface on a storage/caching engine is not good. What if any other library needs caching too and requires another interface?\n\nI propose to let the user configure a \"getter\" and a \"setter\" function, which would just be used by the library if possible. In the lines of the following: (by default a no-op)\njavascript\nangular.module('ngTranslate').value(\n  'translate.config.cache', {\n    get: function(){}, \n    set: function(){}\n  }\n);\nso the user could use (in their app)\njavascript\nangular.module('myApp').value(\n  'translate.config.cache', {\n    get: function() {\n      return localStorage.get(\"LANG\");\n    }, \n    set: function(val) {\n      localStorage.set(\"LANG\", val);\n    }\n  }\n);\nand the library could provide their own implementations, as an optional module, so another user could use \njavascript\nangular.module('myApp', ['ngTranslate', 'ngTranslate-rememberInCookie'])\nand the additional dependency would just override the 'translate.config.cache' value (and use whatever dependency needed)\n. ",
    "ajoslin": "What if you just did something as simple as this:\njs\nif (localStorageIsSupported) {\n  loadRememberSystem();\n} else {\n  try {\n    var cookieStore = $injector.get('$cookieStore');\n    loadRememberSystemWithCookieStore(cookieStore);\n  catch (e) {\n    //no $cookieStore, no angular-cookies, no remember!\n  }\n}\n. @PascalPrecht I like that idea. As @knalli said you can just have pre-registered factories for localStorage and cookies.  And then the user can just register those if he wants to use them, depending on what browser he is in and if he's loaded cookies.\nProbably cookieStorageFactory and localStorageFactory or something could be pre-registered.  \nI wouldn't call it registerStorageProvider though, as the word Provider has a kind of different meaning.  Probably registerStorageFactory.\n. I had a thought for your loader registration function.  You technically could have it every way (json, url, or string-dependency).\njs\nfunction getLoader(value) {\n  if (angular.isArray(value) || angular.isFunction(value)) {\n    return $injector.invoke(value); //factory\n  } else if (angular.isObject(value)) {\n    return json(value); //json\n  } else if (angular.isString(value)) {\n    //if it's a string, it must be a dependency name or a url\n    try {\n      return $injector.get(value); //dependency name\n    } catch (e) {\n      //exception? our dependency doesn't exist. it must be a url!\n      return url(value);\n    }\n  }\n}\n. I actually don't think ngmin is a good step for these kind of components. \nIt can really mess up users if they want to use their own minification step on their libs, and don't use ngmin.  It's happened to me and I'm sure some other people.\n. Ah, so you still distribute ng-translate.js ng-min'd. Duh :-)\n. Haha for some reason I always did it I only ng-min'd if I was going to minify.\n. What version of Android?\n. ",
    "DWand": "As for me, words \"setting up a kind of abstraction service\" is exactly what is needed. I don't know how about JS and AnglularJS, but thinking out of the OOP paradigm we might simply provide a storage interface. So user will be able create custom class/service which realizes this interface (and use cookies, local storage, or whatever he wants). And also ngTranslate will not be longer depend of cookiesStorage - this dependensy will be moved to the implementation of the interface.\n\n. Hey! Just one more question ))\nIf there is a method useStorage() and others instead of rememberLanguage(), could we use it to fully configure the storage?\nI mean something like this:\njs $translateProvider.useStorage({\nstorage: '$cookieBlahBlahBlah',\n[storageKey: 'someKey'],\n[other params if needed]\n});\n. And what is the difference between\n\"add functionality to overwrite default $STORAGE_KEY\"\nand\n\"implement $translateProvider#setStorageId() (or setStoragePrefix())\"\n?\n. There are some errors in the current code. You use the $STORAGE_KEY instead of $storageKey. Maybe it might affect on results. Here is correct variant: 98028bb10ec2e4cd158c6bc0cd9b1aa8ccc59b79\n. @PascalPrecht, can you implement a simple integration with ng-pluralize based on the 1 value in the 1.0 version please? So it will be full according to your checklist. And after that in 1.* versions pluralization might be improved/fixed/enhanced as you like.\n. I have read all your comments just now. And I'd want to say that I like @knalli's variant. But I have few proposals.\nThe first one:\nNow keys like \"one\", \"few\" and so on make a collision with namespaces feature. So, is it possible to separate them?\n@knalli proposed the anonymous function earlier. But this looks a bit terrible. Is it possible to merge this two proposals in one solution? I mean something like this:\njs\n{\n  \"normal-key\": \"translation\",\n  \"ns-key\": {\n    \"subkey\": \"subtranslation\"\n  },\n  \"pluralized-key\": plural({\n    \"thing1=1&thing2=2\": \"translation variant 1\",\n    \"thing1=few&thing2=0\": \"translation varint 2\"\n  })\n}\nwhere plural is a function like this:\njs\nfunction plural(pluralForms) {\n  return pluralForms;\n}\nThe second one:\nI think that it's important to implement a fallback functionality for the key. So, we have to try to check \"raw\" keys firstly (1, 2, 3, 45, ...) and only after that transform them to one, few,...\nUPD:\nThe third one:\nWe have to use a standard Angular's function to get one, few, ... forms. If it's not possible we have to give the user a mechanism to implement this functions by himself. This is because all languages have different rules.\n. @mormegil-cz, oops, of course! Sorry :)\nAs for multiplication, I don't see another solution. If you want to have a complete good translation which depends on many things at one time, you have to tell the program how to translate each combination. So, if you don't want to do that, you can try to simplify you texts or, maybe, to split translations on smaller and simpler parts. Maybe, recursive calls of the translate filter might help too.\nI think, it's possible to decrease a number of the combinations by providing a smarter (richer?) syntax of the combination keys. Just like you proposed in your comment. But, I think, it's would hard to implement such functionality. To do that we have to provide at least:\n- a list of supporting tokens\n- rules of replacing tokens (1 = one = * = ...) to discover which tokens might be equal\n- a hierarchy of tokens (2 -> few -> *)\nand implement that all in the module. This way it might be possible to collapse few combinations in the one rule.\n. Looks interesting.\nAnother approach to solve the problem of keys interpretation is to use \"standard\" language keys. So, we could get those functions from the ngLocale service. But, this is not a public API. And it's not very good also because of creating a new dependencies.\n. Hi everyone. Sorry, I'm late. I have just read all things above. And I'm confused a bit :)\nYou say, that we can provide interpolation services. I'm not a native English speaker, so can you explain me a difference between \"translation\" and \"interpolation\" in this context? Is interpolation used only for pluralization?\nAlso, we have already discussed something similar here: #57 and #72.\nBut, it's not I'm worrying about. Maybe, it's silly, but is there any use cases for supporting two or more \"interpolation\" engines at the same time? Does it mean that any such engine cannot do it's work properly?\nOf course, this is a good feature for JS, but not for HTML, I think. Let's go a little more deeper here.\nWhile using an internationalization module, one of the main advantages is that you could write an HTML once and change content only in the translation file. By providing a plugin-like system we still have the same advantage for the translation core. This is cool :)\nBut if you have a syntax like this:\nHTML\n<p translate=\"THREE\" translate-interpolation=\"X\"></p>\nand you need to replace your plugin - BOOM - app isn't working properly. Ok, you can replace it in HTML. But it could be terrible.\nAnother disadvantage is that you can change your translations in the future and this could affect on values of translate-interpolation attribute. So, it hardly depends on the current translation and it's not very good too.\nI want to say that translate-interpolation is a very low-level option and I don't know is there any advantages to place it into HTML.\nMaybe, it's better to set interpolation service only once (in JS code)?\n. And what is the difference between this two approaches? What is good or bad?\n\n. Hmmm, but why not just separate AngularJS responsibility and Angular-translate responsibility? So, you have (or not) an interpolation service (let's call it IS) which handles translation and AngularJS interpolation service (let's call it AS) as a technical support. So, you can call IS and AS sequentially. Here you can get advantages of the IS while still having advantages of the AS.\nUPD:\nuseMessageFormatInterpolation is not very good name in this case, because of flexibility. useInterpolation or so on is better, I think.\n. I meant something like this: 69ca4e40adfb976d7b0e5409bc6435f722c6682a\n. As for tests, I don't have testing experience at all. I tried to write some tests based on other tests. But it's only basics.\n. @knalli, not at runtime, Just once, at the startup, during configuration.\n. Let's imagine, that we have some server part of the app, which provides some work with the language. After that it sets some cookie to represent a needed language. In this case we might want the server's cookie and the client's cookie to be equal, don't we?\nOr maybe, there are another reasons to change the name of this cookie. For example:\n- some policies of naming vars/functions/etc.\n- integration with some 3th-party module (names have to be equal).\n- this name might be used by another module for another goals (names have to be different).\nSo, I think, module might just give the user an ability to set another storage name, if there are any reasons to do that. But, this name must to be constant during the runtime.\nIn this case, if I have reasons to store my language as \"LANG\", \"app_lang\", \"APPLICATION_LANG\" or just \"Foo\", I can achive this by setting one property and don't change the module code. In case I don't worry about that, I do nothing and the storage name is default.\n. Thats why I opened this issue before you release the storageFactoryFn and others.\n. The $COOKIE_KEY is used only in 2 function now. So, here is an example of this interface: 109922c400f160b4541a8af2c77c52858cc9cea5\nBut, it might affect on tests.\n. I'll try to do this tomorrow ))\n. Here it is #39\n. Hi, @marplesoft. I am not familiar with testing well (or, even, \"at all\"). However, I'd like to say that there are some possible ways to go.\nAt first, just like is said in the one of your links, one of the approaches is to break your application down into the modules. Such way, you could easily test your services which not are not dependent of translations.\nAnother approach is to mock the loader. No matter how: by using translations(...) method or by providing a custom loader which is not dependent of $http. This way, it's not necessary to deal with $httpBackend all the time.\nBut, yeah, I agree that these looks strange (or, even, mysterious). To be honest, I'm really surprised of such weird behavior of $httpBackend. As for me, the only logical way to deal with such kind of tests is to use $httpBackend to auto-respond all requests. So, if you'll find a reason why this approach doesn't work and a way how to solve this issue, please, leave a message here - I'd like to know too )\n. @PascalPrecht, @x057, give me few days to finish my exams, please, and I'll be with you.\n. Okay, @x057, @PascalPrecht, as for testing I'm not 100% sure if it's needed for tests because partial loader has a setPart method.\nBut we actually can add an extra option to partial loader to use standard angular caching. Again, I'm not sure if this is a good idea, This way we'll get duplicate of the same functionality because we are storing translations by ourselves. So, this way we have rewrite some additional logic of partial loader. \nPossible problems are:\n1) Delete some part from the cache to refetch it from the server (now we just delete it physically)\n2) User can turn off caching at all and each time the loader will fetch parts from the server\n3) User can remove cached values from outside the loader\n4) User can call removeAll method and delete cached translations as a side effect of deleting some other cached values\n5) User can call destroy method and I don't know what will happen in this case\nSo, it's not so bad, but it could lead to some unpredictable behavior.\n. And what if there are no access to the Enternet, for example?\n2013/5/14 Pascal Precht notifications@github.com\n\nThere are plunks. That's enough.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/49\n.\n. Are there any proposals about the correct structure?\n. As a variant 370362722f792c9f0df5b9edc7abe4e2845505b9\n. Ok, I'll try to fix it tomorrow.\n. Here it is #51.\nSpaces are replaced with underscores in file names.\nAnd, actually, I don't know German. So, I replaced it to Russian in demos. Hope you will not be offended by this.\n. c8c31dedca446f376aa0adc2351c6981e5ac5321\n. I don't know is it necessary to show in demos how to use a loader with a url parameter. Let it lie down here. Maybe, it will be useful someday. Maybe, not )\n. @PascalPrecht here it is #54.\nThis is my first experience with Node.js. Maybe, there are some much more elegant ways to start the server to handle URLs.\n. @knalli, it's not necessary a NodeJS. It might be anything, which can handle a GET request and send back a correct response. I know, that there is server provided by grunt (or something like this), but I don't know how to use it )) I usually work with PHP on the server side. It would be great (or, at least, interesting), if you can show how to handle this situation.\n. Static files are working pretty good even without server :)) But in 9 example we use a registerLoader with URL. And a module requests for translations like: [given_url]?lang=[langCode]. So, that page (which is requested) would to understand this GET parameter and handle it.\nThanks :+1: . I'll try to understand how to use it tomorrow.\n. #54 is updated\n. Two more thoughts. What about\na) comments\n\"key\": \"translation\", // context\nb) arrays\n\"key\": [\"translation\", \"context\"],\nas a variant\n. @PascalPrecht, ok. But what kind of the connection is needed?\nIf we have\n\njs\n$translateProvider.translations({\n  \"dialog\": {\n    \"title\": \"Form\",\n    \"context\": \"Context\",\n    \"text\": \"Please confirm...\"\n  }\n});\n, is the given \"contex\" a context for \"title\", \"text\" of for a whole parent-object?\n. @lichtner, I don't know. But it seems no. It's hardly true that js has such functionality.\nIt's hardly depends on a \"tool\" you all are talking about. If it is a desktop app you could write some kind of parser for comments. All you need is to provide a convention of placing those comments.\nBut, nevertheless, I think, if you, guys, really want to extend/improve this module qualitatively, you have firstly to look how this feature is implemented in another products which are greatly comfy to use. Maybe, it can help to find a right way.\n. And yes, just one more thought.\nIf this feature is only for the translator and is never showed to the user, why do you want to write this context to the translation tables? JS is not a PHP, Python, Ruby or so on. User has to download this translations on local machine. And any additional symbol in the translations reflects on the loading time.\nAt the same time, the translator works on the server side. And he works with sources of translations. So, how exactly this feature in the JS module can help the translator on his local machine?\nMaybe, it's better to use a specific formats of a used tool to store translations on the dev machine and simply convert/compile the resulting translation to the needed format of the JS module? As for me, this approach is much better. It's very hard to adapt this module to all possible translation tools. And, even if it's possible, the module will looks like a monster instead of tiny comfy pretty useful thing.\nExcuse me, please. Maybe, I'm wrong. Maybe, I don't get something. But my opinion is that JS module has to be independent from the tools you use to translate texts in the backend. It simply has to show user a correct text in correct language which is predefined before. Actually, this is not an IDE, isn't it?\n. Hm... That's an interesting question.\nOn the one hand it's comfortable, when it's possible to get all parts of the standard \"pack\" from the one place.\nOn the other hand, I like an idea \"world could build pretty cool other loaders and storage as angular-translate extension\". In this case it would be more identical if standard extensions are in separate repos too.\nAnd I don't know what is better ))\nAs a variant you could move those extensions in a separate folder like \"ext\" and provide a smart builder, which will build(compile?) a basic angular-translate script with selected extensions.\n. Are you talking about something like this? 675c6363d395e10a7ee2811d2901606f0f6d07ca\n. Having such function we could to move a responsibility of loading parts of the translation table to the loader. So, the loader would lazy-load needed parts and transform them to a single translation table. This way, the module will be responsible only for doing translations, but not for building translation table.\nNevertheless, if you want to move this responsibility to the module itself, we have to provide some kind of API for that and change a whole process of loading, storing or, maybe, even a structure of the translation table.\nUPD: Or extend an interface of the loader ))\n. In theory it may looks something like this: https://github.com/DWand/angular-translate-partial-loader\n. Yeah! I have figured it out already while creating a demo. It's pretty uncomfortable to use reloadLang :( The main drawback is that it reloads only the current table, and the second one is that it loads all files from the server once more time. I think, the second drawback could be solved by improving the loader. But the first one is bad. So, yes, let's think further.\n. Ok, the another possible approach, I think, is to move module to fully partial translation table. This cause that a single language (without parts) will be represented as the only part of the translation table. Having such structure we could manipulate each part of the translation table independent of others. This way we could to add different parts just like addPart and handle them independent. Not matter which language is used - needed parts will be loaded on demand.\nThe question is: Is this a module's responsibility or some one's else (like loader and so on)?\n. This way, how do missing translations should be handled, having multiply parts of the translation table?\n. Here is another variant: c30b9c4b4648dc8bbeed7b6dbc50c4fe6ba87a0e\nI don't know how to provide a nice API for that. So, it's just a propose )\nUPD: I didn't test this code, so it's just a conceptual propose )\n. Another approach is different ))\nYes, @knalli, you are right. It would be much more simpler )\n. @knalli, how would it react on a language changing if some namespaces are fetched from the server?\n. Yeah. And even static files can be used for that.\nWhat I mean is that module has to memorize fetched namespaces because there might be another languages to lazy-load during runtime.\nAnother question is what has angular-translate to do in case it cannot fetch a namespace?\nUPD:\nUser can change language and fetch changes. So, here is a sequence of user's actions:\nload L1\nfetch NS1\nload L2\nfetch NS2\nload L3\nfetch NS3\nfetch NS4\nload L2\nfetch NS5\nload L1\nfetch NS6\nload L3\n. Just to be complete: d596eca4f48a8c93017cdf9a906ff6a924b6426f\n. Okay, guys. Let's return to the start of this discussion (https://github.com/PascalPrecht/angular-translate/issues/71#issuecomment-19215161) :)))\nAs @danielbsig said, a needed functionality could be achieved with just adding a method like invalidate(). So, a responsibility for partial loading will be totally moved to the custom loader. Such way the module will not support partial loading from the box, but it is an easiest way to implement this for us.\nHere we could also solve #102 by just moving a responsibility for caching to the loader )\n. Hi, @rkoch. Maybe, it's better to use another way to validate that?\nAs I remember, the uses() method is used to set a needed language or to get a language, which is currently in use. But, like @knalli said, the module does not load any language during config phase. Such behavior was realized because you can change a target language many times during this period.\nBased on your example, I think, these variants might be useful:\n1) create an array of supported languages (only language codes) and use it in validation process (instead of providing a whole translation table)\n2) do a HEAD request to the server to check if a needed file exists\n. Hmmm... Maybe, it makes sense to add a method like isLangExists or something like that.\n. I thought on that a little bit last night and I come up with something. I don't know is it good, or not. But, I think, that it is possible to implement. Here is a possible algorithm:\n\nSo, what do you think?\n. @sgara, it's not a question about server side, but rather a client. I read, that different browsers send different headers and have their own caching policies. And the main purpose is to do caching equally in all browsers and to store translations as long, as possible. Even, for example, for a few monthes until the storage will be cleaned out or translation modified.\n. I think, it's possible to update a translation table partially. If needed, we could provide some structure, to keep info about where is placed every part of the translation table. But, it depends on the place where such functionality might be situated.\n. @knalli, hello. Not other headers, but already existing.\nLet me try to explain what I meant. I'm a student (so, I have to write code in C++ and C# in academy), at the same time i'm trying to work as web programmer (so, I have additionally to write code in JS and PHP). And, at this point, it's very hard to me to get everything needed: frameworks, libraries, modules, security, efficiency and so on.\nAnd, as @sgara said, \"as long as it is set on the server\". So a caching mechanism has to be configured both on server and client. But, since I'm a beginner PHP programmer, I actually don't know how to set it up on server. So it would be great to have such tutorial in docs.\n. Yeah, this one could be covered by the translation loader now.\n. Actually, I'd like to say that we have to update existing demos and write additional. I tried to let them work today and failed that. All because of changes in API and decoupling to separate services )) So, it's not enough just to change the name of file. We also have to provide new dependencies and include new files to the HTML code ))\n. @PascalPrecht, I think I could take care of the demos (only demos, not dependencies and so on) after I'll translate docs. But they are dependent on all parts which was separated )))\n. Hi, @Leocrest! What languages are \"valid\"?\nAnd if you perform a xhr request, why not just return a most valid language back from the server?\nUPD: Maybe, it's even  possible to place a correct language directly to the JS code on the server side, if you have all needed headers.\n. Let's think about the server side now. It's always quicker, than additional requests, I think.\nSo, if you have the async loader which can discover if a language file exists, could this loader to get a current list of those language files? Maybe, something like a directory listing or so on. Than, if you rely on headers which are received form the client, so you can analyze which language is needed. One way is to \"compare\" list of languages form headers and list of available languages. If can not get a list of available languages, you can check all of them one by one.\n. Anyway, the simplest way, I can think of, is you send a list of accepted languages to the server with xhr request and return from the server the best match for it. After that you can use this match on client.\n. Actually, I meant some kind of dynamic list. Is there any way your app can determine which language is valid and which is not?\nBut, if you still want to iterate through a whole list of languages in browser and check them one by one, there are an event 'translationChangeError'. Module will broadcast it in case a translation file loading process is failed. So, you can try another language.\nMaybe, @PascalPrecht or someone else could help you better then me )\n. Ok, just two more questions before I go to sleep.\n1) If you could do this on the client side, then why could not you do this on the server side?\n2) If the 'translationChangeError' event is not applicable here, then could you suggest some kind of API which would be comfortable in this case?\n. $translateChangeStart - just before fst action according to change lang\n$translateChangeEnd - just after all strings were replaced with new lang and angular-translate totally change it's state\n. Language changing, as for me, contains all operations between the moment when I, as a user, call $translate.uses(lang) and the moment when all string in my app are replaced with new lang. Between these two moments I'd like, for example, to show a loading icon or something like this.\n. It would be hard for me to explain it in English. I'll take a look at it in few hours, but can not promise anything.\n. It would be awesome )\n. 01_conceptual-overview.ngdoc\nline 18\nuse the $tranlsate service.\n. 07_multi-language.ngdoc\nline 16\nto add different translation tables add a time!\nline 22\nto add more translation tables add a time.\nline 28\nas argument through $translations(), you \n. Ok, it's cool. I'll write here new found mistakes for this version. It's hard to me to jump through different commits. Will synchronize translation with new Guide version after )\n. ;-)\n. 07_multi-language.ngdoc\nline 82-83\nlet you tell angular-translate do so.\nwhich language to use \nI'd like to prefer the second variant about language\n. 07_multi-language.ngdoc\nline 97\nasynchronous laoders\n. Ha!\nThere is a same typo all along the guide (or just till 07 chapter).\nIn examples, translation for PARAGRAPH id in English.\nThere is \"Srsly\", instead of \"Seriously\".\n. @PascalPrecht, Ok then )\nThat is one of reasons why I don't want to touch the English version ))\n. 08_storages.ngdoc\nline 27\nTo you one of those storages,\n. 09_custom-storages.ngdoc\nline 8\nremember the last choosed\nline 57\nto save the last choosed language.\n. 09_custom-storages.ngdoc\nline 22 (also not sure)\nwith a get() and a set() method.\nIsn't \"methodS\" is actually needed here?\n. 09_custom-storages.ngdoc\nline 39\nProvide a custom storage as a separate\n(Is it actually provide or providing?)\n. 09_custom-storages.ngdoc\nline 55-56\nangular-translate will use $injector to get an instance of the given factory name\nActually, why do we need an instance of the name? (O,o)\nMaybe it's also would be better to use shorter sentences to avoid such strange situations and provide proper punctuation?\n. 09_custom-storages.ngdoc\nline 130\ncustom service doesn't do anything\nMaybe, it's better to say \"does nothing\"?\nAnyway, this sentence about custom service is written in a cool form! I like it )))\n. 10_asynchronous-loading.ngdoc\nline 16\nwith support for two different asynchronous loader.\n. 10_asynchronous-loading.ngdoc\nline 28\nOnce its installed, make sure you've embeded it in your HTML document. Allright,\n. 10_asynchronous-loading.ngdoc\nline 69\na lang paramter, you\n. 10_asynchronous-loading.ngdoc\nline 79\nYou can simply use the staticFilesLoader with this pattern like this:\nthis ... this\n. 10_asynchronous-loading.ngdoc\nline 96\ntranslation data asynchonously as\n. 10_asynchronous-loading.ngdoc\nline 104\nLazy loading at is best!\n. 10_asynchronous-loading.ngdoc\nline 112\nsince we'return executing stuff asynchronously.\nI'm not sure is it typo or something like a short form of a phrase\n. 11_custom-loaders.ngdoc\nline 5\nCustomer Loaders\n. 11_custom-loaders.ngdoc\nline 71\nthe propery when\n. 12_pluralization.ngdoc\nline 32\nhow can we use MessageFormat with angular-translate to use \nuse ... use\nMaybe, this sentence could be rephrased somehow? For example, how can we use ... to get ...\n. 12_pluralization.ngdoc\nline 98\nDo you see any differents?\n. 13_custom-interpolators.ngdoc\nline 74\nAllright. So what did we here. setLocale() simpley store the value of the current\n. 13_custom-interpolators.ngdoc\nline 76\nRemember how to\n. 13_custom-interpolators.ngdoc\nline 85\nJust like there's a method for Storages (useStorage()) and Loaders (useLoader()),\nMaybe, plurals are needed here\n. 13_custom-interpolators.ngdoc\nline 94\nYou app now uses your custom\n. 14_error-handling.ngdoc\nline 11\nUsing log handler extension for missing translations\nThere is no really a mistake here. But it sounds like an ext for missing translations, and not an ext for handling them. But, I'm not an English-speaker, so I could be wrong.\n. 14_error-handling.ngdoc\nline 12\n\n. 16_migration-guide.ngdoc\nline 10\nangular-translate-interpolation-default is required.\n. I don't translate a \"Migration Guide\" chapter to this moment, because I don't know is it really needed. Actually, at this point a translation is mostly ready. But it requires some fine tuning before PR. So, since I'll not look into English version of the Guide we could consider that there are all mistakes I found in the text. \n. @sgara, my revision of the Guide is done )\n. Yeah, I'll close it ) Like that this info is not lost )\n. I think, it hardly depends on what that proposedLanguage actually is:\n- If proposedLanguage indicates a language that is currently loading, it should become undefined just after the language loading is done (successfully or not - doesn't matter).\n- If proposedLanguage indicates a language which will be set next after the current - it is not so easy to say. Actually, if the language is not changed yet, it will be next language for itself. I mean, if we have a language de, then in each moment of time the de language will be a language, which would be set in the next moment of time.\n  de -> de -> de -> and so on.\n. Okay, @PascalPrecht, @knalli, can I start implementing this service, or, maybe, are there some not-covered cases or mistakes in tests?\n. Okay, I'll have a look on that\n. Just to link these issues together: #71\n. I also tried another architecture variants:\n- Creating hierarchy from Translation class, which contains many Parts. This variant is more complex and requires much more coding, but it does not give us any visible advantages at this moment.\n- Replacing custom classes with arrays (d1bc18ffd4e56463bbe54221cc375f6e1ed579d0). As for me, this variant is less maintainable then current one. But it gives a little file size advantage - 211 bytes less size of the minified version.\n. Code documentation, maybe.\n. I could try to write a code documentation for API reference.\nBut I don't know about the guide. 100% that I could not write it in the same style, and also @sgara is working on it.\n. Hi, @nezo, @PascalPrecht, @knalli. It looks logical to make get and set methods asynchronous (without adding new methods). But, I we have to think how to re-implement their usage at startup phase.\n. Also, adding new methods would increase complexity. So, it's better to change behavior of existent ones, I think.\n. Hi, @knalli! I don't know about disadvantages, but if a storage will return a promise, angular-translate could also be used in desktop apps like Google Packaged Apps, I think.\n. Try to replace\nvar $app = angular.module('app',['ngResource'],['$translateProvider']);\nwith\nvar $app = angular.module('app',['ngResource', 'pascalprecht.translate']);\n. I don't know how about wiki, but it's covered by online docs, you could find here: http://pascalprecht.github.io/angular-translate/\nThere are also examples of how to use angular-translate module. By reading the guide you'll discover a translate directive, filter, service and different variations of their usage.\n. Try this: http://pascalprecht.github.io/angular-translate/#/guide/05_using-translate-directive\n. I have nothing to say here. I'm not familiar with this topic.\n. How to make it possible to use angular expressions evaluation in a filter's params?\nFor example, let's say we have such kind of a data filtering:\n{{ target | filterName : { param1 : \"val1\" , param2 : \"val2\" } }}\nHow to make it work like this:\n{{ target | filterName : { param1 : \"{{ val1 | filter2 }}\" , param2 : \"val2\" } }}\n?\n. So, are there any thoughts about these filters?\n. So, yeah.\nTheoretically these two filters handle pluralization and select format functionality. This realization is just a proof of concept. A reason to make them filters is a possibility to use them by the default angular's interpolator. Actually, AngularJS already has all needed method to provide it's syntax parsing. So, it's not necessary to provide any kind of additional parsing by ourselves. We can just use an internal one. An idea is that interpolator during the translation string parsing would see filter (or, maybe, directive) calls and execute those filters. We don't even have to teach it a new syntax.\n. Plural filter is based in the CLDR pluralization rules, which could be taken here: http://www.unicode.org/cldr/charts/supplemental/language_plural_rules.html. The syntax is described here: http://unicode.org/reports/tr35/tr35-numbers.html#Language_Plural_Rules.\nThe language-specific pluralization rules could be written directly in the translations file in the special predefined section like \"___\" or something like that. This is more comfortable, I think, than loading the plural rules from the server in the separate *.js file. This way user can load all data needed for translation in one file. And this file is still in the simple JSON format.\nBut this approach has a drawback: AlgularJS doesn't support this syntax, and javascript also doesn't support this syntax. So we have to write our own parser. I could be a lot of code. So, I decided to change the syntax a bit by replacing the infix notation (2 + 2) to the prefix notation (+ 2 2). This way each of those rules can be rewritten in a form of javascript function calls. We could keep it both simple and short. Now we have a function calls in a string representation. All we need is to call some eval-like function ( to be honest, jshint hates those functions >:-[ ). But, eval-functions are potentially dangerous. Fortunately, all these function calls are based on the formal grammar that has a finite number of tokens. So, we easily can validate those strings before evaluating them. This way the usage of eval-like functions is safe, I think, because we call only functions, we expect to be called. And the advantage is that we can use javascript's internal language parser (which, I suppose, is very efficient) instead of writing our own analog.\nAn example of filter usage (translation table for Russian language, comments has to be removed):\njs\n{\n\"___\" : {  // predefined section for technical needs\n  \"plurals\" : {  // language-specific plural rules\n    \"one\" : \"and ( is ( mod ( n , 10 ) , 1 ) , !is ( mod ( n , 100 ) , 11 ) )\",\n    \"few\" : \"and ( in ( mod ( n , 10 ) , [ 2 , 4 ] ) , !in ( mod ( n , 100 ) , [ 12 , 14 ] ) )\",\n    \"many\" : \"or ( is ( mod ( n , 10 ) , 0 ) , or ( in ( mod ( n , 10 ) , [ 5 , 9 ] ) , in ( mod ( n , 100 ) , [ 11 , 14 ] ) ) )\"\n  }\n},\n\"key\" : \"\u0423 \u043d\u0435\u0433\u043e \u0435\u0441\u0442\u044c {{ 52 | plural : { one : '\u044f\u0431\u043b\u043e\u043a\u043e', few : '\u044f\u0431\u043b\u043e\u043a\u0430', many : '\u044f\u0431\u043b\u043e\u043a', other : '\u0444\u0440\u0443\u043a\u0442\u043e\u0432' } }}.\"\n}\nA little summary (from mine point of view):\nAdvantages:\n- More compact, than messageformat.js\n- Plural rules could be placed directly to the translation table, you don't need to load additional js scripts\n- The default Angular's interpolation service can use it\nDisadvantages:\n- Usage of eval-like function (jshint hates it)\n- It is just a filter, not a service or a directive\n- I don't know how to make it possible filter to handle nested filter calls\n. As for select filter - it's much simpler. It just gets the input value and compares it with the given params. If any of the param key match the input, the filter returns it's value.\n. By the idea, it could use any plural rules you specify in the translation table. For example, in CLDR plural rules of the German language looks like this: http://www.unicode.org/cldr/charts/supplemental/language_plural_rules.html#de. To be honest, I don't know German (few words, maybe), so I can rely only on that plural rules definition syntax from CLDR.\n. @knalli, @sgara what do you think?\n. Hi, @knalli. Glad to see you here )\nIt's not a revival of that discussion. We currently have a solution with message format. This is just an attempt to create an internal way to make pluralization and select format. It's an attempt to copy the messageformat's functionality in a shorter way and with Angular's default syntax support.\nBut, I am a student. So, I don't know what is good and what is not, haha :))) And I need your opinion and advice.\n. Heh, I don't make myself small, but I'm trying to point that my words could be stupid sometimes )))\nFirst of all, I'm totally okay with MessageFormat adapter. But it seems to have some uncomfortable things.\n- First of them is that you have to manually include all the scripts with the plural rules you potentially need in future. It's not cool, I think.\n- The second one is the different syntax, just like you said.\n- And the last one is a size of the MessageFormat.js. It's a big, really big thing )))\nSo, my goal is not to create something, but to improve the thing that we have now. My first thought was to reduce code size and complexity.\nThe words like \"one\", \"many\", \"few\" and so on are, as I get from docs, a classes of plural rules. That way \"one\" defines a rule to handle the form of phrase in case of only 1 thing. \"many\" - the form of phrase when there are many things. And so on. Those rules are stable for each concrete language and defined by the CLDR. You can just copy them and paste in the translation table (actually, also rewrite to the functional form).\nThe valid \"keywords\" are:\nzero\none\ntwo\nfew\nmany\nother\nThe valid tokens for rules in the translation table are: \nn\n\\d+\n[\n]\n(\n)\n,\nin\n!in\nis\n!is\nwithin\n!within\nand\nor\nPossible syntax:\nin ( n , [ d , d ] , ... )\n!in ( n , [ d , d ] , ... )\nis ( n , d )\n!is ( n , d )\nwithin ( n , [ d , d ] , ... )\n!within ( n , [ d , d ] , ... )\nand ( bool , bool )\nor ( bool , bool )\nmod ( n , d )\nAll tokens has to be separated by the space character.\nExample:\nInfix form: n mod 10 is 1 and n mod 100 is not 11\nPrefix form: and ( is ( mod ( n , 10 ) , 1 ) , !is ( mod ( n , 100 ) , 11 ) )\nBasic algorithm is:\n1) Check the string to contain ONLY the proper tokens!\n2) Compile functions from plural rules definitions\n3) Use the compiled functions to determine a right case\n. @knalli, sorry for delay. And also, my English is very poor and I may miss something.\nYeah, the question is whether pluralization could be done easier than messageformat.\nThis approach has such advantages as:\n- the filter/directive/service is much smaller than MessageFormat\n- the user doesn't need to load additional scripts to handle the pluralization rules\n- the user could use an angular's syntax in the translations\nAll the user has to do is:\n- include a filter's script into the HTML code of the app\n- include pluralization rules into translations\nSo, you don't need to worry about including scripts like locale-en.js, locale-de.js, locale-fr.js and so on. Instead of this we could place a complete table of pluralization rules on the angular-translate's website. User just has to copy them and paste into the translation file.\nBut, there is at least one issue: nested filter calls handling.\nUPD:\nMaybe, I didn't get something. If so, could you rephrase your questions, please?\n. I don't know about shortcuts at all, but linking is a nice idea. There was an issue to implement chrome.i18n format. There is also links to another translations, if I don't mix up these things )))\n. Hi, guys!\nAt odd times, can you explain me, please, why do you need to add a js module to provide localization in the application, if it has only one language, which could not be changed in the runtime?\nWhat I mean is it might be better to do a fully server-side localization routine without including any js modules in this case. Any js module affects on your app efficiency, because it requires both an additional request to get that module from the server and time to parse and apply that localization code on the client. At the same time, having all localization stuff on the server level you'll avoid all such overhead.\n. Anything new here?\n. Also, try to replace \njs\nurlTemplate: appconfig.translationServiceUrl' + /{part}/{lang}'\nwith\njs\nurlTemplate: appconfig.translationServiceUrl + '/{part}/{lang}'\n. @PascalPrecht, not at all )\n@EpsilonRepo, could you set up a plunkr or something like that to show the problem, please?\n. I have not time to look on it now. But, I think that the refresh() method might cause problems here. Refresh deletes current translation table (which was statically added) and tries to load your language. As a variant you could try to use loader's error handler to provide a static data. I'll look deeper just when I have time.\n. Okay. What I want to say is that the $translatePartialLoader could not cause this problem here. It is just like any other loader for angular-translate. It works like the $translateStaticFilesLoader or the $translateUrlLoader. But, there is one difference between them - when using the $translatePartialLoader you have to call the refresh method to update your translation. I think, that the problem is in the refresh method.\nSo, there are two questions:\n1. Do you really need to call refresh there? (I think so, but, excuse me, I could be wrong because I'm working with Java for the last few weeks and forgot AngularJS a bit)\n2. Where exactly this flickering occurs? Or, maybe, which line of the refresh method's code causes this effect\nI see two possible variants:\n1. Add to the loader a method like setPart to provide a possibility to set up some translation parts by hand\n2. Destroy translation tables in the refresh method only after a part loading process is totally done\nBut, yeah, we still need to get which line of code causes such a weird flickering effect.\n. @PascalPrecht, about https://github.com/PascalPrecht/angular-translate/issues/175#issuecomment-24988074\n$translatePartialLoader is only a loader. It knows nothing about translation tables of angular-translate. But angular-translate uses the loader to get some translation table from the server.\n. @PascalPrecht, I don't actually know what means \"talk preparation\" :) But, if it is something like a presentation, I have the same one.\n. @EpsilonRepo, thanks for the issue. I'm proud that you use $translatePartialLoader :)\nWe got this problem, I think, and will try to fix it as soon as possible. If you want, you can help us. PRs are always welcome like @PascalPrecht likes to say :)\n. Here is what I think:\n\nIn this \"Something happens here\" section angular-translate has no translation tables at all. But, it does not broadcast any event to point that translations were changed, does it? There are few words in the docs about some \"continuous update loop\" here:\n\nAnd, also, the translate directive uses the translate filter.\nSo, may this \"continuous update loop\" affect somehow on the filter while the loader did it's xhr request?\nUPD:\nAh... And I totally forgot to say, that the xhr request and new language setting process are not blocking. So, the app really could perform any kind of updating loops and so on.\nUPD2:\nMaybe, it could be relative to the #169\n. Yeah, something like that.\nTheoretically, if we will delete translation tables after the new ones are completely loaded, the FOUC effect will disappear because we always have some translation table this way. So, if the new translation table is not loaded yet, the old one would be displayed.\nThe second approach is to add a method like setPart to the loader. Such way we could set translation tables directly in the loader. So, the loader will get our manually added tables instead of loading them from the server.\nThe third possible way is to dig deeply into the AngularJS code to get how exactly all these things work. Maybe we could just rewrite a directive/filter to avoid any FOUC effects. But, to be honest, here I'm not sure.\nI think that all three approaches could be useful independently.\nP.S.: Sorry, I'm completely bad in the English tenses\n. Link to #180 (add setPart() method)\nLink to #211 (chore refresh() method)\n. Is it issue solved?\n. Can someone proof that such improvements really solved the issue?\n. @calleerlandsson, hi. You also could eliminate the use of proposedLanguage if you set the language manually.\n. BTW: We still need to rewrite the refresh() method\n. I'd like to say, that it looks interesting.\nBut, filters, directives and their life circle are what I'm actually not familiar now. I'm trying to get how these things work in Angular, but, you know, time is our worst enemy and js is not the only thing I'm working with. So, I can only say \"in theory\" here, sorry.\nAnyway, it seems that the next angular-translate release would have a totally better directive(s) :)\n. And, as for the theme of this discussion, it would be also nice to provide a way to pass a js object literals to the directives/filters as a source of actual variables values. Saying \"object literals\" I also mean a possibility to use nested filter/directive calls with some params. Something like this: {{ val | filter : \"{blah : \"balh-blah-blah\", blahblah : \"Blah! {{ val2 | filter : \"{onether_blah : \"Blah...\"}\" }}\"}\" }}\n. @totof3110 , I had tried to write a pluralization support based on the filter. So the use case is to be able to use filters in the translations for specific plural form. But it is a theme of the other discussion, haha )\n. Link to #170\n. :+1: \n. As for readme.md, I think, it's a good idea.\nAs for modules, I'd like to say that it would be easier to understand demos when only necessary files are included.\nAs for the other things, it's better to ask @knalli and @PascalPrecht.\nAnyway, demos have to be reviewed and rewritten a bit, because we already have some new features, which are not shown in the demos.\nP.S.:\n@mibamur, please, could you also check the Russian part of the guide for mistakes? I'm currently working on the guide translation into Ukrainian and found some mistakes (punctuation at most).\n. We have to rewrite/extend examples anyway. So, @PascalPrecht, what do you think about the idea to include js files to the HTML twice?\n. @mibamur, you can find a guide translation into the Russian language here:\nhttps://github.com/PascalPrecht/angular-translate/tree/master/docs/content/guide/ru\n. @mibamur, \u0442\u043e\u0447\u043d\u043e \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u043d\u0435 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0441\u044f, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u0437\u0430\u043c\u0435\u0447\u0430\u043b \u0438\u0445 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0430 \u0438 \u043d\u0435 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u043b \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u044b\u0435 \u043c\u0435\u0441\u0442\u0430. \u041f\u043e \u0441\u0443\u0442\u0438 \u0434\u0435\u043b\u0430, \u0442\u0430\u043c \u0432\u0435\u0441\u044c \u0442\u0435\u043a\u0441\u0442 - \u044d\u0442\u043e \u043e\u0434\u043d\u0430 \u0441\u043f\u043b\u043e\u0448\u043d\u0430\u044f \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c. \u041a \u0441\u043e\u0436\u0430\u043b\u0435\u043d\u0438\u044e, \u044f \u043d\u0435 \u0447\u0430\u0441\u0442\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u044e \u0441 \u0442\u0435\u043a\u0441\u0442\u0430\u043c\u0438. \u041f\u043e\u044d\u0442\u043e\u043c\u0443 \u0442\u0430\u043c \u043c\u043d\u043e\u0433\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u0432 \u043f\u043b\u0430\u043d\u0435 \u0440\u0430\u0441\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0438 \u0437\u0430\u043f\u044f\u0442\u044b\u0445 \u0438, \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e, \u043d\u0435 \u0432\u0441\u0435\u0433\u0434\u0430 \u0445\u043e\u0440\u043e\u0448\u0435\u0433\u043e \u043f\u043e\u0434\u0431\u043e\u0440\u0430 \u0441\u043b\u043e\u0432. \u041f\u0440\u0438 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438, \u043f\u043e\u0436\u0430\u043b\u0443\u0439\u0441\u0442\u0430, \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u043d\u0438\u043c\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0432\u044b\u0447\u0438\u0442\u0430\u0442\u044c \u0440\u0443\u0441\u0441\u043a\u0443\u044e \u0432\u0435\u0440\u0441\u0438\u044e \u0440\u0443\u043a\u043e\u0432\u043e\u0434\u0441\u0442\u0432\u0430? \u042f \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0438 \u0443\u0432\u0435\u0440\u0435\u043d, \u0447\u0442\u043e \u0412\u044b \u043d\u0430\u0439\u0434\u0435\u0442\u0435 \u0442\u0430\u043c \u043d\u0435 \u043e\u0434\u043d\u0443 \u043e\u0448\u0438\u0431\u043a\u0443.\n. Okay, @PascalPrecht, @knalli, sorry. It's much easier to communicate in native language :)\n--- @mibamur:\n@DWand Max could you point me where are inaccuracies?\n--- @DWand:\n@mibamur, I could not point the exact places, because I had found mismatches while I was doing a translation and I did not note them. In fact, the whole text is a big discrepancy. Unfortunately, I work with texts from times to times. Thats why there are many mistakes (like commas placement and, maybe, not all words are chosen correctly). If possible, can you read carefully the Russian version of the guide, please? I almost sure that you'll find many mistakes there.\n--- @mibamur:\nOkay, I'll see.\nIt's not an exact translation (because I don't know English enough), but in the general words.\n. It's all about the typos in the Cyrillic version of the guide. The Russian version mainly for now (because others are still not present, haha).\n. I don't know about @mibamur. But I can try to check the translations with something like Libre Office or so on if it's critical. I have no time to read a whole guide carefully now :(\nI think, you can close this one. All fixes will be sent in separate PR's anyway.\n. The idea looks good. But I personally don't know how to implement it :)\nIt might be useful in some cases, maybe...\n. Actually, the addPart method does not load any data asynchronously - it just adds a part to the list of the available parts. It works in no time.\nThe actual loading occurs when angular-translate calls the loader to load some translation data. And the loader already returns the promise.\nSo, I don't get why do you need this method to return a promise.\n. Okay, @maklemenz, I think that I got your thought. But it seems to be a bit not logical to me according to a role of the addPart method. I still think, that addPart should not return a promise.\nMaybe, it's possible to move in some other way. Could you place here an example of the code you want to write, please?\n. Aha! So, now we can start to think deeper.\nThe reason why I think that this is not the good idea is:\n``` js\nservice.addPart = function(name) {\n  if (!isStringValid(name)) {\n    throw new TypeError('Invalid type of a first argument, a non-empty string expected.');\n  }\nvar deferred = $q.defer();\nif (!hasPart(name)) {\n    parts[name] = new Part(name);\n    $rootScope.$broadcast('$translatePartialLoaderStructureChanged', name);\n  } else if (!parts[name].isActive) {\n    parts[name].isActive = true;\n    $rootScope.$broadcast('$translatePartialLoaderStructureChanged', name);\n  }\ndeferred.resolve(name);\nreturn deferred.promise;\n};\n```\nSo, it's not hard to make it return a promise, but it has no sense according to the function of this method.\nHere we have to move in some other way.\nMaybe, something like this:\n``` js\n$routeProvider.when('/customers', {\n  templateUrl: '/customer/list.html',\n  controller: 'CustomerListCtrl',\n  resolve: {\n    specificTranslations: function($translatePartialLoader, $rootScope, $q) {\n      var deferred = $q.defer();\n  $translatePartialLoader.addPart('customers');\n  $rootScope.$on('$translateChangeSuccess', function() {\n    deferred.resolve();\n  });\n\n  return deferred.promise;\n}\n\n}\n})\n```\nAlso, we can try to add a new method like getLoadingPromise or something like that. But I think that we might have many problems going this way.\n. @knalli, what do you think about this question? Are there some other ways to do that?\n. Now we have not events, which tell us about loading of one particular part of the translation. All events, which are broadcast by the $translate service, are related to the whole translation. So, we could observe some \"twin\" events like $translateChangeSuccess / $translateChangeError, or $translateLoadingSuccess / $translateLoadingError (and resolve / reject the promise). Maybe, it's possible to write some service/function/helper to reduce the code duplication.\n. There is also the refresh() method which already returns a promise when all translation tables are refreshed. Maybe, it's possible to configure your app to work with it. Maybe, something like this:\njs\n$routeProvider.when('/customers', {\n  templateUrl: '/customer/list.html',\n  controller: 'CustomerListCtrl',\n  resolve: {\n    specificTranslations: function($translatePartialLoader, $translate) {\n      $translatePartialLoader.addPart('customers');\n      // add other needed parts\n      return $translate.refresh();\n    }\n  }\n})\nTheoretically, the partial loader will not load any data from the server if no parts are registered. So, if you'll register all your parts inside the route configuration and then call the refresh method than $translate service will call the loader to load tables and return you a promise.\nBut, beware, the refresh method has to be rewritten a bit (there are some troubles with FOUC). But I have no time to do this now :(\n. I'm waiting response here )\n. From @maklemenz. To know if this solution works to him or not. Maybe, we have to try to find other solution )\n. Yes, it has. The reason is #175 issue. And I have finally done it here #211. Maybe it's not the end, but it's at least a starting point :)\nBut it will not affect on the functionality you asked about, if I understood the things right.\n. @jedmao, may I ask you what is the reason to use it this way? Your code and @maklemenz's code look very similar.\n. @jedmao, probably yes. I still have not a possibility to work on the refresh method :(\nI understand what you mean. But, again, addPart can not return a promise. It doesn't make any sense according to the role of this method.\nPartialLoader is just a loader, it has to implement an interface of the loader and it has to act as a loader for the angular-translate service. A responsibility of the loader is to load translation which angular-translate asks it to load.\nTo load any part from the server the PartialLoader has to know 2 things: a key of the part and a key of the language. You can set up keys of the parts directly, but the loader doesn't know which language is required. You have to call the loader service to say it what language it has to load. There are few reasons why the loader can not discover the language by itself:\n- it's impossible to ask the $translate service directly because this is a circular dependency. AngularJS will hurt you.\n- it's impossible to get the language from the service or variable or anything else because there might be a list of fallback languages. The loader doesn't know which language is actually required.\naddPart method only registers a key of the part to load when the loader is called. And refresh method calls the loader to load previously registered parts.\nSo, you have few possibilities:\n- You can use refresh method. It will call the loader for all needed languages and resolve it's promise when all parts for all languages will be loaded. Which is what you need.\n- You can call the loader by yourself to initiate the loading process. The loader returns a promise which is resolved when all parts are loaded from the server.\n- You can create your own loader and implement any custom logic of loading parts.\n. Hm... A promise that refresh method returns is resolved just after $translateChangeEnd event (if the current language was affected by refresh procedure). Translation by directives and filters begins on $translateChangeSuccess event which is emitted a bit earlier. Maybe, some time is needed to translate IDs in UI after translations are loaded from the server. As I know, there is no a possibility to determine a moment when translations are done by all translate directives and filters in angular-translate now. You can only discover when translation begins. But I can be wrong here.\nYou can easily call the loader this way:\njs\n$translatePartialLoader({\n  key: 'targetLanguageKey',\n  urlTemplate: 'yourUrlTemplate',\n  loadFailureHandler: 'yourErrorHandler' // optional\n})\nThis will return a promise which is resolved just after the loading of all registered parts for a specified language is done. But, I doubt that it will help.\n. It might be interesting to @PascalPrecht and @knalli. They are much closer to directives, filters and so on :)\n. In process\n. Done.\n. I don't know if it's good or bad at all. But why not if it will result in a better product for the user?\nWhat advantages or disadvantages could we get moving such way?\n. Okay, and what breaking changes will be needed for angular-translate since moving it to the angular-ui, for example?\n. Okay. If the changes are like prefixes, and you think that all will be good, then I have nothing against such movement )\n. Yes, it's possible. A responsibility of the loader is to load the language which angular-translate asks it to load. So it does not matter for the loader how many languages are set up in the angular-translate.\n. Don't merge\n. I've just found a mistake )\n. That's better )\n. Just like you said in the #174: every chapter in different commit.\nAnd yeah, our guide is like a little book now :)\n. Link to #175\n. Docs in progress\n. Yes, such functionality looks completely logical here, I think. Thank you, @HolgerPersch.\n. Besides it seems a bit weird to me to see JSON key with spaces and other characters like \"{\", you can try to implement a custom interpolation service based on your own syntax. This way you may, for example, replace \"{\" with \"[\" or something like that, and AngularJS itself will ignore your variables replacement in the template. At the same time, in your interpolation service you can use, for example, some regex to provide a backward replacement \"[\" symbols to \"{\", and use Angular's interpolation service on such re-constructed strings. I can not give you a guarantee that this will work. But, who knows, maybe it will )\nUPD: Or, maybe, I got thing wrong at all. I'm confused a bit )\n. Hello, @Leocrest.\nCan you be a more specific, please? What is odd? What a data you are using? Could you provide some example?\nSo, it would be easier to answer your question.\n. And the js file itself also has the utf-8 encoding when you edit it in the editor?\n. Hello, @LordSputnik.\nHave you already used $translatePartialLoaderProvider? By using it, you can add new parts to the partialLoader during configuration phase. So, you can add all \"common\" parts in your module's config method.\n. Aha! It really changes things a bit )\nIn the current release we really have not support of adding new parts of translation table with partialLoader without loading it from the server. The only workaround here might be an error handler. So you can specify translation tables in case the loading fails. But it is not good enough in your situation.\nHowever, we added a new feature to the $translatePartialLoaderProvider few days ago (#180). By calling setPart method you can specify translation table parts directly from your js code, so the module will not load these parts asynchronously. But this functionality is not released yet.\n. So, do we need to add or remove some events in refresh method?\n. Okay, let's see\nUPD:\nIn #211 I mentioned that\n\"Lines $rootScope.$broadcast('$translateChangeError'); are added to the refresh() method to avoid breaking changes (see tests).\"\nSo, I assume, that I wanted to discuss if we need to remove this event broadcasting there.\nUPD2: Something like: \"Hm... We already return a rejected promise and also we do not delete previous translation table. So, do we actually need to broadcast the $translateChangeError event?\"\n. ToDo:\n- [ ] Test fallbackLanguage with loaders (~40-60%)\n- [ ] Provide nice structure for the tests\n. Hello everyone. I also think that one function would be better. Having one name is cleaner to understand and, actually, these functions do the same thing. In Java we also can overload the function to have different signatures :)\n. How often do people need such functionality?\nI think, it could be done in maner of custom/external service, like interpolation is made for example. What do you think about this?\n. To be honest, it is not \"like interpolation\", it is really some kind of interpolation service )\n. Uh oh, it's my fail :( I changed the behavior of loadAsync method when worked on refresh() method improvement and forgot to change fallback language loading section. Shame on me!\nBy the way, refer to #231. Tests have to be improved and this is critical.\n. @tspaeth , the reason is that loadAsync just returns a loaded translation table and it's language kay. But, before I did so, this method also set up the loaded translation table. So I assume that now we load the fallback language, but not set it up. This section of code have to be rewritten in manner of refresh() method's translation loading process.\n@tspaeth, can you fix this? Or, maybe, I can. But I have no time to provide proper tests.\n. I will try to fix it today in the evening.\n. @tspaeth , #247 is only about tests. This issue occured because we missed something in the tests. But now tests for this issue are repaired and we can fix it and develop things further :)\nThe question is about loading stategy of all those fallback languages. There are at least two possible variants:\nYours:\nLoad all fallback languages at the start up phase of the module and use them all in the future.\nPascal's:\nLoad only one fallback language at the start up phase of the module and use it the future. But, load other possible fallback languages on demand, once they are needed.\nI personaly prefer Pascal's variant because it theoreticaly can reduce a load on the network. But, I can be wrong.\nBut. anyway, we have to repair this feature. So, the question, at least, is what to do, if the loading of some fallback language fails at the start up phase? Do we have to ignore this? Or, maybe, we have to do something special? And so on.\n. So, what have we decided? Maybe, I'll have some free time tomorrow and can try to reimplement this feature again.\n. I'm sorry, but what is it? https://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L589\n. Link to #251\n. Just for mindstorm. How about something like a queue of pending translations? Once a language is loaded, angular-translate tries to make a translation of all pending translations.\n. And also what if $translate.uses() is called while there are already some pending loading tasks?\n. One more variant - analog of reference counter. Each time you start async task count increases by one, once it's done - descreases. If counter = 0 - there are no pending loaders.\n. Okay, I'm done. Too tired to think clearly now :(\n. In every confusing situation - draw a diagram )\n. As far as partial loading is implemented like a loader, it would work like any other loader. It doesn't matter what fall back strategy you use.\nFurthermore, it's impossible to change the behavior of loader to fetch each part independently (not matter how), because you actually don't know an actual part the needed translation ID relies to - you always need to fetch the whole translation table.\n. As for sources, I'm afraid to read them now. There are so much async code... :worried:\nIt requires a deeper look.\nUPD: Ah, and also I'm confused which source to read.\n. Erm... Excuse me, guys, but won't this be easier:\n``` js\nvar langPromises = {};\nvar $translate = function(id) {\n  // return getTranslation(id, curLang);\n}\nfunction getTranslation(id, lang) {\n  if (!langPromises[lang]) {\n    langPromises[lang] = loadAsync(lang);\n  }\nlangPromises[lang].then(\n    function(translation) {\n      // return translation\n    }, function(error) {\n      if (hasFallback(lang)) {\n        // get fallbackLang for lang\n        // return getTranslation(id, fallbackLang);\n      } else {\n        // there are no translation, just return id;\n      }\n    }\n  );\n}\n```\nand also replace translations hash with langPromices hash? So, all translations will be represented like promises. \nAnd also to make fallbackLanguages array based only. Just to simplify the code.\n. Hello @PascalPrecht , @pavlo-yuriychuk , @tspaeth.\nI'll also look at all these issues, PR's and so on. Just when I get a free time. There are so many things to do... Maybe this weekend. Excuse me for such delay.\n. It looks like here https://github.com/DWand/angular-translate/commit/4c5c47ce4c8bdd4afdfcfd57e2a8fca965a24677#diff-255d6d49cbc024fa0d5bc97fdd721bf4R630 I also fixed this issue. Sorry )\n. It's better to test if the current canary branch still has this issue or not.\n. @pavlo-yuriychuk, please, can you check your email? I sent you a message.\n. Anyway, it looks like the build fails now because we fixed tests in #247 and this PR is based on 1.1.1 release.\nSo, my opinion is that we already have this code (this logic) in the canary branch.\n. @PascalPrecht, @tspaeth, @knalli, please, can you review this?\n. @knalli, it's rather bug fix than a new stuff.\n. @tspaeth, I only tryed to fix the bug. So the logic is pretty much the same as before.\n. As for loading ALL fallback languages or to load then on demand is a hard question. Each variant have it's advantages and disadvantages. I had a discussion with @PascalPrecht about fallback langauges yesterday and we discovered that the whole fallback loading stuff is a very interesting theme. It's not perfect now and it had drawbacks before this bug appeared.\n. @PascalPrecht, okay. What about https://github.com/DWand/angular-translate/commit/4c5c47ce4c8bdd4afdfcfd57e2a8fca965a24677#diff-255d6d49cbc024fa0d5bc97fdd721bf4R286? I think that this one might be rewritten better somehow. But how? Will it be good to copy that parameter or to remember what it was: string or array?\n@tspaeth, the outcome was in general:\n1) [possibly the most important] A fallback language loading process is not synchronized with translation process. Theoretically, it may cause some unpredictable results. For example, what will happen if a fallback language is loaded after the \"main\" language? Since all loading stuff is async in angular-translate such situation may happen. So, finally the fallback language is loaded, but the translation is already applied just like there are no fallback language. Or what if the second fallback language is loaded before the first one? And so on.\n2) If we load all fallback languages all stuff will work exactly as before (according to 1). It might not cause large slowdowns or any kind of blocking <- it's good. But, we have to load all translations and some of them might not be used <- it's bad, because a translation file theoretically might be large (we are working with the strings, so each character is at least 1 byte).\n3) If we load fallback languages on demand the translation process possibly may be slowed down because of loading translations from the server. And more fallbacks are needed, the greater delay will appear <- it's rather bad, because such delay are not deterministic and might appear when the user doesn't expect them, as for me. But, such way we will not load unnecessary translation tables from the server <- it's good.\nSo, now we have at least to fix the bug. And after that to think deeper in whole this fallback languages stuff. There are really many things to think about.\n. We have already discussed that question about Array.prototype.indexOf several times. I'm not sure that this one is present in all target browsers. But I'm not a js developer and can be wrong. If you think, it's better to use that one, I can change the code. But for your responsibility :)\n. Okay, I'll better leave this task to you.\nThere are some advantages when you use such languages as PHP, C++, C# or Java, maybe. And one of them is that you always know which methods you have, and which methods you not have :) Or possibly, which methods are present and which are not.\n. Hello, @igler. I don't think that I can recommend you something, but just as a variant you can try to make a list of entry types and make a translations based on those types.\nLet's say 'LINE 2600 CREATED' has a type 'LINE_N_CREATED'. Here you can use LINE_N_CREATED as a translation key. All you'll need is:\n1) Write translations for all your types-keys (like LINE_N_CREATED)\n2) Determine somehow to which type your log entry belongs (regexp, maybe)\n3) Use $translate with variable replacement (http://pascalprecht.github.io/angular-translate/docs/en/#/guide/06_variable-replacement)\nBut, I've never did such things before, so be careful. And, also, just like @tspaeth said, look if angular-translate is really the thing you want in this particular case.\n. Hello, @DanielaValero. Nice to see that you are using angular-translate. I can not promise to answer all your questions by myself, but I'll try to help you.\nFirst of all, can you, please, set up a fiddle or something like that to show \"the http request is sent twice per part\". It's really very very weird, because partial loader was designed not to make any unnecessary http requests. We are trying to reduce the load on the network as much as we can. So, maybe, we lost something.\nNext, as I know, angular-translate is like a framework or library for translation. So, it does not depend on user's interaction or so on. The only person who interacts with angular-translate now is a developer. And the developer can do or, maybe, extend (sorry, for my English) what is needed in his/her particular project. It's impossible to meet all possible needs and keep things light and easy. But, I'd rather recommend you to discuss this question with other members of the team. This is the question where I can be wrong.\nAt last, did you try to use methods setPart() and deletePart() of partial loader?\nsetPart method is available since the 1.1.1 release and enables you to set up translation tables of the parts manually from the code. This will avoid loading them from the server and, as they are cached in the loader, these translation tables will not be deleted during refresh().\nBut beware, the version 1.1.1 has bugs with fallback languages. We are currently working on this and soon it'll be fixed.\ndeletePart method gives you an ability to manipulate the set of the parts to load. By calling addPart method you are registering some parts to be loaded from the server when angular-translate (or something else) will call the loader. By calling deletePart you can prevent some parts from loading during next call. So, those parts will not be represented in the resulting translation table the loader returns to the angular-translate. Also, you can completely remove the part (and all the data loaded for it), which may be useful to reload translations from the server.\n. No, not at all.\nLook here. There are actually two possible ways for angular-translate to get translation tables: it can use tables provided by the developer in js code (translations() method) and it can load translation tables from the server (by any kind of loader). Also, you are able to mix these approaches.\nAs for refresh() method in the module. It is useful in the case you need to update your translation tables for some reasons. As for the partial loader, such reason might be a loading of new parts of translation. For example, the user reached some part of the application and translations are not loaded yet for this part.\nAnd now we have something like an issue. When we call the refresh() method, we are actually asking angular-translate to delete all translation tables it has and load new versions of those translations. But how can angular-translate load a new version of the translation table if this table was added manually by the developer? It's just impossible. The only way to go is to load them from the server. But what if there are no such translation tables on the server? We can not be sure because we got those tables from the code.\nThis is why we added a setPart() method to the partial loader. This method is an analog for the translations() method of the angular-translate, but for loader. It enables the developer to set up some static parts of the translation table manually in the loader. And here is a trick:angular-translate itself is not a loader, or angular-translate != loader. This means that by calling refresh() method you actually delete all translation tables from the angular-translate module, but not from the loader. And now when the loader will be called next time all the data provided manually by the developer will still be available in the loader's cache. So, the loader will not load this part from the server.\nTo understand the addPart() method it's much easier to read the code of the partial loader. You may notice that there are parts, languages and cached tables. The loader keeps the list of enabled (or, maybe, active) parts. When angular-translate calls the loader, it (the loader) processes all enabled parts (and only enabled). If the part has the cached version of translation table for the needed language, the loader takes it and will not make a request to the server. If there are no cached table, the loader will fetch it from the server and remember to avoid requests in the future. The role of the addPart() method is to make some part enabled. Each time you call addPart() you just say to the loader \"Hey! Give me this part next time I'll call you, please\". On the other hand deletePart() method says \"Stop! Stop, stop, stop. I do not need this part any more. So, please, do not process it next time I'll call you\". Something like that.\nSo, the loader is fully independent from the views, users, other modules or so on. It's even can be used without angular-translate if such trick is needed for the developer.\nAs for synchronization, there was actually one issue I remember about such synchronization. I'll try to find it.\nAnd yeah, the converter for different file types is also a great idea. I also want to see such thing for the angular-translate. And probably even a translator tool specially made for angular-translate. But it's like a little dream :) Unfortunately, we (or, at least, I) do not have enough free time to implement such kind of stuff.\n. Look at #197 issue. Maybe it can help.\n. Yes, it's not about doing requests on page load. As I understand, this piece of code has to prevent the router from rendering a view before the translation table is refreshed. Also, it seams impossible to make requests just on page load because the loader depends on Angular's $q and $http services. So, the loader is able to make requests at least after all the stuff is loaded, the configuration phase is done and all needed modules are instantiated.\nBut, on the other hand, you can trigger any angular-translate's loader manually, because all them are just separate services. Any standard loader knows nothing about $translate service (at least now), it's state, directives, filters and so on. So, all you need is to call $translatePartialLoader(options). But this way you have to handle the output of it's work by yourself. This possibly may change the state of the loader, but will not affect on the $translate service.\nYeah, jsFiddle is a great idea :)\n. I think, it's better to provide some type of hierarchy here.\nSomething like:\nIF translation id was set by the attribute of an element\nAND translation fails\nTHEN so not replace it's contents.\nBut, yeah, it looks like we need either provide a new method for this or break the current behavior or directive.\n. As a variant we can add a new optional argument to the $translate service to pass a default translation to the service.\n. There were also many talks about rethinking directives somewhere about 2.0 version. Maybe, it could be the point for the most breaking changes if they all will be in one release and result will be much better than before.\n. I have created an issue to discuss adding native pluralization support to the angular-translate here: #160.\nThat solution works by using a special predefined section in the translation table to keep the information about plural rules of the language. I think, we can use the same principle to achieve support of rtl and ltr language. We can add another predefined key to store the information about the direction. Next, the directive can use that information to change the direction of the text in the element.\nPossible advantages:\n- will not break the current behavior if we consider to use ltr direction by default\n- the developer does not have to know the direction of the language\n- by adding a predefined section to the table we can possibly add new features based on the language-specific characteristics\nPossible disadvantages:\n- adding a predefined section to the translation table which affects on the file size and the scope of available keys\n. As I understand, translate directive has always ltr direction.\nI know only 3 language (better or worse), but there are no any rtl language. So I can not test it at all.\nUPD: The only link I can find now is this: #227\n. But now we have neither currency formatting, nor numbers or dates.\n. I think, we can also add @jameshines10 and @cesutherland to the conversation because, actually, they started this topic in #227.\n. Yes, you got it right.\nYou just say angular-translate what namespace you'd like to use to store language-specific information.\nAfter that you, probably, can make a list of predefined keys and their meanings.\nLike, for example:\n- dir key stores the text direction of the language\n- name key stores a full name of the languages\n- plural.one key stores a plural rule for case \"one\"\n- dateformat key stores a default format for dates in the langauge\nand so on.\nAnd while angular-translate knows what namespace you prefer to use for that language-specific data, you can always ask him to give you some information like 'dir' or 'dateformat'.\nUPD:\nAh, yes. And other modules have not to know how angular-translate stores that information and what namespace user uses.\n. ___ - I don't know. It has to be something not general/usual/common in translation table to avoid overlaps. So ___ is the first thing that came to my mind :)\nAbout isfoo I don't understand what you want to say.\nIf you want to ask \"Why I use such a terrible name of the key?\" - I have not many free time now, so I wrote that code in hurry. I had to test several keys, but my mind was blocked by other things, so I could not invent a better name.\nIf you want to ask \"Why isfoo acts as a langinfo in that particular translation table?\" - We flatenize (I, actually, don't know how to say it right) all translation keys when load a translation table. So, all nested namespaces becomes ns1.ns2.ns3 and the translation table is flat. That is why\njs\n{\n\"___\" : {\n  \"dir\" : \"rtl\"\n}\n}\nand\njs\n{\n\"___.dir\" : \"rtl\"\n}\nare equal\n. Oh, yes :)\nActually, I also thought that it will get ___ namespace as an object and then return keys inside it. But I forget about this flatObject() method call:\nhttps://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L90\nhttps://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L96\nSo, in output we get a translation table like this:\njs\n{\n\"___.dir\" : \"ltr\",\n\"___.isfoo\" : \"yes\"\n}\nI'd like to say, that I was also surprised when saw errors in the console with my first attempt :) But, it works now. So I decided not to touch flatObject() method.\nUPD:\nJust to clarify, it will return any key from the translation table which matches \"predefined_namespace_name.needed_key_name\" after we made a translation table flat :)\n. Hm... Just thought that this one could be tricky to use since we have fallback language mechanics.\n. There is also an alternative solution for this thing. Something similar to old messageformat's approach of handling locales. Instead of adding the predefined namespace we can wrap this information in special services and add them to the $translate. Something like this:\n``` js\n// add a new service\nmodule.service('EnglishLanguageInformationProvider', [\nfunction EnglishLanguageInformationProviderFn() {\n  this.name = 'English';\n  this.direction = 'ltr';\n  this.getPluralCategory = function(n) { return (n === 1) ? 'one' : 'other'; };\n}]);\n// register this service\n$translate.addLanguageInformation('en', 'EnglishLanguageInformationProvider');\n```\nThis way we can avoid adding such information directly to translation tables. But also it will become less flexible and more painful to add such information to the application (more services, more files, more configuration...).\n. Hello, @Nate-Wilkins.\nErm... Are you sure that the white spaces have to be removed? What lookup are you talking about?\n. Good catch\n. I know that, at least, @PascalPrecht and @knalli are working on translate directive. So, ping them here.\n. Nevermind, that's just my English. It's rather Bad English than English at the moment :)\nI mentioned @PascalPrecht and @knalli here, so they'll receive an email. If I understand things right. And writing 'ping their names' I meant that I want them to have a look on this issue. Something like that.\nAs for translation keys... It's really a way of thinking. Angular-translate is able to work either with translation keys or original texts. But if you use long strings try to avoid structures like {{ data }} in the translation keys, because AngularJS itself uses this syntax. Try to replace it with { data } or simply data.\nI personally prefer short translation keys here, because the user loads translation tables from the server.  And each time the user load a translation table - it actually contains 2 languages at the same time (in case of long strings-keys). And both translation key and translation are long strings. Such files are nearly twice bigger than files with short keys, so they are loading slower.\nAlso if you want to change a string somewhere in your app, than you have to change both key and translation. But if you use short keys, you need to change neither your views nor translation keys - just translations.\n. How to use refresh method in pair with such cache?\n. angular-translate does not rely on $locale service and $locale service also doesn't rely on angular-translate.\nBut you can connect them by simply adding 1 line of code:\njs\n$scope.$on('$translateChangeSuccess', function() {\n  // your connection code\n});\nor something like that.\nangular-translate provides as few connections by default as possible because you, as developer, probably may want to connect angular-translate to any other module. It's impossible to satisfy all possible needs of every developer. So, on the one hand, you can provide all connections you need in one place, and, on the other hand, changes in third-party modules doesn't affect on angular-translate. Such structure is more stable, isn't it?\n. @danicomas, I think, it's better to add something like a library of code snippets like \"how to add support of ... functionality\". The developer can just copy and paste the needed code from there and all will be okay.\n. Hello, @xmlking.\n$rootScope, of course.\nThank you for pointing to this mistake.\n. Docs updated in #297. This issue can be closed, I think.\n. - [x] Guide / Asynchronous Loading / PartialLoader events example:\njs\napp.run(function ($rootProvider, $translate) {\n    $rootProvider.$on('$translatePartialLoaderStructureChanged', function () {\n        $translate.refresh();\n    });\n});\nhas to be $rootScope (#297)\n. @kdworak, also take a look at refresh() method. It might be useful if you'll create a custom loader.\n. If I understand you right, you are not able to use 2 different static files as translation sources at the same time using StaticFilesLoader. It's possible to use only 1 loader at the same time.\n. Maybe PartialLoader can solve this issue?\nWhat is that random stuff you are talking about? And how often do you want to fetch it from the server?\n. It looks like the problem is in the growl module.\nI can not tell you what exactly is wrong, but if you remove this line\njs\n$httpProvider.responseInterceptors.push(growlProvider.serverMessagesInterceptor);\nfrom the config - all things work fine.\nAlso, you can translate your messages by yourself\njs\ngrowl.addSuccessMessage($translate(\"SUCCESS_MESSAGE\"));\nbut this is not an ideal solution if growl has initial support of angular-translate.\nUPD: But without partial loader the code with $httpProvider.responseInterceptors.push(growlProvider.serverMessagesInterceptor); works fine. Strange.\nUPD2: Just tried the same with static files loader and got the same result.\n. As I understand, the reason is here: https://github.com/marcorinck/angular-growl/blob/master/src/growlFactory.js#L89-L95\ntranslate is undefined here and since this code runs only once, the translate variable remains undefined forever. So, messages are not translated.\nAlso, it's strange that growl relies on $filter service and not on $translate service. There are no dependency to angular-translate at all - it, possibly, can use any filter called translate. So, I assume, there is no warranty that angular-translate is loaded before growl.\nIt looks like, it's done to make angular-translate an optional thing to use. But I don't know how to fix it in elegant way. There are several possibilities:\n1) Provide angular-translate dependency to growl\n2) Rely on $translate service directly instead of using a filter\n3) Use $injector service to include dependencies\n4) Make separate module, which relies on both growl and angular-translate. This module can translate messages using angular-translate and then send them to growl\n5) Check for translate service/filter availability each time translation is needed\nThis is what I can suggest here. I can be wrong, but it's what I think.\n. @xmlking, as a quick fix try to use 4th variant. It seems that you can translate messages by hand like growl.addSuccessMessage($translate(\"SUCCESS_MESSAGE\"));. And also providing such kind of abstraction you'll be able to replace either growl or angular-translate in the future without any effort.\nAs for interceptors... I tried to replace PartialLoader with StaticFilesLoader in your example and it also doesn't work. As a developer of PartialLoader I can say that PartialLoader (like any other \"native\" loader now) does nothing with http interceptors.\nFeel free to update an issue if you find any new information. I'm also interested in what causes this problem.\n. Here is a working example:\nhttps://gist.github.com/DWand/b8f12d451c24017121e0\n. Erm... You know... I just copied all the code to a localhost Express-driven server and it works. Even without additional module. Strange.\n. http://plnkr.co/edit/eRdftvTXNcTKlJKGtUoM?p=preview\n. Ahaha, I got it I think! :)\nJust removed try ... catch :)\nError: [$injector:cdep] Circular dependency found: translateFilter <- growl <- $http <- $translatePartialLoader <- $translate http://errors.angularjs.org/1.2.7/$injector/cdep?p0=translateFilter%20%3C-%20growl%20%3C-%20%24http%20%3C-%20%24translatePartialLoader%20%3C-%20%24translate\nIt seems that \ngrowl relies on translate filter,\ntranslate-filter relies on $translate service,\n$translate service relies on the loader,\nthe loader relies on $http\nand BOOM!!! growl adds http interceptor which relies on growl itself! So we now have that \n$http relies on growl,\ngrowl relies on translate filter,\nand so on...\n. Hi, guys! Sorry, I was busy last week.\nAs for this issue, I'd like to say that it would be wonderful to have a link somewhere to download everything needed in one archive. Just for development purposes. It's always easier to delete unnecessary files than to find those which are missed.\nAlso, I like an idea of constructors like http://getbootstrap.com/customize/ or similar. This way user can pick which modules he wants to include to the resulting archive.\nMaybe, I think so because I (like @tspaeth) came from non-node world and I have not enough experience with all these dependency-management stuff. But, for example, let's look on my general start of new project. I analyze what I need for this particular project and than I go to the Internet trying to find needed modules. While surfing the web I find some modules. And I want to try to use these modules before including them to the project. I just want to decide: \"Do this module fill my needs or not?\". So, I can click on the download button to get this module, try it and than decide what to do. It's much more comfortable than going to GitHub (or somewhere else) for each project, find the needed files to download and so on.\n. The main thought was that angular-translate is a module for i18n, not just l10n. So, it might be interesting to have tools to make translations more clever.\nThis filter is an attempt to provide a native support of SelectFormat, which is a part of MessageFormat library, which we are using to provide pluralization.\n. It might be also interesting to provide other kinds of tools. Such as formating currency, dates or, maybe, something else. And, of course, a native pluralization support. AngularJS itself already has some solutions, but it might be not very comfortable to use them.\nFor example, if I understood right, to use date or currency filter you have to specify format for them for every particular usage, so we have to duplicate the same code multiple times. Here we can provide some smart wrappers and connect them with the main \"core\" module.\nAlso, default AngularJS pluralization is done in such very that it can use only one locale per page loading, so you have to reload a whole page to change the locale the ngPluralize directive works with. This is not how angular-translate works, so this functionality has to be rebuilt. We already have a solution based on MessageFormat, but it has at least 2 drawbacks: different syntax and size of it's sources. Hope, this thing may be done better or at least to provide some alternative choice.\n. I think, it depends on how translate directive or filter are implemented or configured.\n. Also, as I understand, #191, or something similar, will be present in angular-translate 2.0 release )\n. Here is what I thought for about two or three last months. To provide any additional functionality like pluralization, date formating, currency formating or something else we have to define some syntax to indicate that this functionality is needed in concrete place of translation. If we need some syntax, we have to create a parser for this syntax. And here we have only 4 choices:\n1) Create our parser\n2) Use some 3rd party parser\n3) Use parser of AngularJS\n4) Use native javascript parser of the browser\nLet's analyze more deeply.\nCreate our parser\n- it's hard\n- it requires a lot of additional code\n- we are completely free to choose syntax\n- we do not depend on external code\nUse some 3rd party parser\n- it's much easier than write it by ourselves\n- depending on the parser we might be free to choose syntax we want\n- it requires the user to download additional code\n- we depend on external code, but we can \"freeze\" it and use just one particular version to prevent changes\nSo, I assume, this variant might be better than creating a new parser by ourselves.\nUse parser of  AngularJS\n- we do not have to implement it by ourselves\n- it does not require additional code because it's already included to AngularJS\n- it does not create additional dependencies on 3rd party solutions\n- we can not choose syntax\nSo, this one could be even better than usage of 3rd party parser.\nUse the native js parser of the browser\n- we do not have to write any line of code\n- it does not require any additional code to be loaded by client\n- it does not provide any additional dependencies\n- this is the fastest parser among these 4 variants\n- we have a limited ability to choose syntax\nBut, since we work with strings and not with the code, we can not use native browser's parser directly. So really we have only 3 variants to choose.\nTo make variables replacement we already use Angular's native parser. And this is the best possible choice in our case. To provide any translation in the view we also use Angular's native parser (directive, filter, service + expressions). And this is also the best possible choice. And now comes pluralization and formatting support. Since we use Angular's parser by default, why not to use it here too?\nUPD:\nActually, I thought it about pluralization support. There was a question about how to tell angular-translate that we need to perform pluralization somewhere in the translation. But I think it also could be applied to other tools.\n. Hm... There might be some problems with globally configured filter-wrappers + fallback languages + async workflow. It's not about this one, but for the future.\nUPD:\nThe problem is that we have to tell filter/directive somehow a language it is called for. Because fallback langauge does not change a state of angular-translate. Maybe, it could be solved with regexp.\n. Hm... I don't actually familiar a lot with all this compilation and interpolation stuff. But \"injecting scope into the translation text\" actually sounds very interesting. If it's possible to make filters and directives know at least the language they are called for, it really \"opens the world\".\nI have tried to implement some things to provide pluralization yesterday. There were a method to use a pluralization factory user wants (just like loaders, interpolation services and storages are done) and a separate pluralization engine service (let's call it pluralizer). The idea was that:\n1) angular-translate gives the pluralizer the translation tables and language keys it has\n2) pluralizer processes somehow given information to get an ability to determinate plural cases for corresponding languages\n3) some directive or filter uses pluralizer service to determine actual plural case for every particular situation and returns to user a result for that plural case\nAll looks good since there are already exist some examples of usage external services in angular-translate. And also I have an algorithm to get plural rules from translation table based on native js parser of the browser. But I found this possible problem with fallback language and I had to stop further codding until this problem is fixed somehow.\n. I've just tried to use scope passed by $compile() function in the filter. Looks like filters are pretty dumb guys. The shortest way I found to pass a current scope to the filter is:\n``` js\napp.filter('test', function() {\n  return function(data, scope) {\n    return data + ' ' + scope.data;\n  };\n});\napp.controller('appCtrl', function($scope, $compile){\n  var scope = $scope.$new();\n  scope.data = 100;\n$scope.testChangeScopeVariable = function() {\n    scope.data++;\n  };\n$scope.elem = $compile('{{ \"Example\" | test:this }}')(scope);\n});\n```\n. @egervari, hello.\n$translatePartialLoader.addPart() can not return promise because it does nothing with data loading. You can add multiple parts sequentially, but the loader will not load any data from the server until angular-translate ask it do this.\nPlease, use partialLoader as any other loader and follow recommendations listed in the docs.\nFor example, you can try this (http://pascalprecht.github.io/angular-translate/docs/en/#/guide/03_using-translate-service):\njs\n$scope.$on('$translateChangeSuccess', function () {\n  $scope.headline = $translate('HEADLINE');\n});\nwhich is applied to any async loader, and, probably, this (http://pascalprecht.github.io/angular-translate/docs/en/#/guide/10_asynchronous-loading):\njs\nangular.module('contact')\n.controller('ContactCtrl', function ($scope, $translatePartialLoader, $translate) {\n  $translatePartialLoader.addPart('contact');\n  $translate.refresh();\n});\nwhich might be useful to update translation tables of angular-translate after some part was added.\n. Okay, I have just reread your issue.\nJust keep \"the event to call $translate.refresh()\" enabled and use partial loader like any other loader assuming that loading is async (http://pascalprecht.github.io/angular-translate/docs/en/#/guide/03_using-translate-service).\n. @egervari, any updates? Does it help you?\n. @arnaudpourbaix, it's strange. Can you set up a plunker to show the problem? So it'll be possible to see what exactly is going wrong in your concrete case. Thanks.\nUPD: As for $translate.proposedLanguage() it becomes undefined once the language is loaded. This behavior is expected.\n. Okay, @arnaudpourbaix, The problem is not in $translatePartialLoader. It is not even called. We'll try to find a cause and a solution for the problem. Thank you for the issue.\n. @arnaudpourbaix, since your main creatureEditor module relies on creatureEditor.mod and run() method is called for all your modules, you can set up your parts during configuration phase. So, just use\njs\nmodule.config([ '$translatePartialLoaderProvider', function run($translatePartialLoaderProvider) {\n  $translatePartialLoaderProvider.addPart('mod');\n}]);\ninstead of\njs\nmodule.run([ '$translate', '$translatePartialLoader', function run($translate, $translatePartialLoader) {\n  $translatePartialLoader.addPart('mod');\n  $translate.refresh();\n}]);\nThis will help in your particular situation.\n. @arnaudpourbaix , not only remove refresh(). You have also to move this part setting stuff from the run() method to config() method.\nA trick with the refresh() method is needed only if you need to add translations in the runtime. Something like if the user clicks the button and so on. That's why it is recommended to place that code in the controller.\nIf you add all parts at the beginning, it's better to specify all parts in the config() sections of your modules. This guaranties that all parts are registered before the loader is called by angular-translate.\nAlso, please, don't forget to use the $translateChangeSuccess event when you use $translate service in the code. Otherwise your translations will not change according to language changes of angular-translate.\n. http://plnkr.co/edit/MankhnyAG31U665481YX?p=preview\n. @owenXin, hi. Yes, it is. I did so based on the actual @arnaudpourbaix's example. In his case it is better to register all the parts in the config and avoid using refresh method at all.\nBut the partial loader is designed to load all registered parts on purpose. It doesn't depend on any of your modules - theoretically you can define as many parts in one module as you want. I have tested this exactly behavior much. But the loader itself has to be called by angular-translate to load any data. It can not act by itself here because of possible circular dependencies. So, there might be some problems with refresh mechanism which leads to the situation when angular-translate does not call the loader to load a new version of the translation table.\nThere was a case when refresh method is called before the previous data loading is done. In this case angular-translate has nothing to refresh and skips the loader call. This may lead to weird results of partial loading. Since 2.0.0 release I have no time yet to work with angular-translate. Maybe, this case is already solved by my teammates and I'm totally wrong. I hoped to return to angular-translate this week, but unfortunately I'm still busy. So, it may be better to ask @tspaeth or @PascalPrecht or @knalli for now. I'll return as quick as possible :wink: \n. @owenXin, I cannot say anything about the ui-router because I use the standard $route service. But I like the idea to set all the parts in one place very much. It is great to make it simple to handle all addPart() calls for both the developer and the angular-translate module :) The #197 issue may be interesting for you.\nAs for promises, you can use, for example, $translate.instant method. This way you can use angular-translate just like before.\n. @LennyLip, it happens because the refresh() method is called before angular-translate set a current language. When angular-translate does not know a current language it can not call a loader to load this language. angular-translate sets a current language when a loading process is successfully done. So, when you call refresh() in the run() method your one part is still loading.\n@angular-translate/core, as for me, it is a bug. A core problem is: there are two async processes for now that are not synchronized among each other: use(lang) method and refresh() method. This problem is similar to #449.\nThe refresh() method was initially designed to be called on demand. For example, when a user clicks some button or something like that. That is why it assumes that a language is already set. So, I missed that these async processes have to be synchronized.\n@LennyLip, to workaround this problem you have to call refresh() method when angular-translate has already set a current language or do not call it at all. General recommendations at the moment are:\n- If you add some parts in runtime when all things are already loaded, initialized and user already interacts with your application, then call refresh() method (strongly recommended to avoid sequential calls. It's better to wait until previous refresh call will be completed).\n- If your application is built of modules and each module adds some parts to the loader, then it is recommended to add parts in the config() method (not run()).\n- If you need to change a set of parts depending on the route, then it is better to add and remove parts in the resolve section of the router. This way you'll be able to call refresh() method only once per route.\nAt the moment I'm unable to fix this bug. But you may try to synchronize these processes by yourself.\n. Hello, @elgerlambert. How about a partial loader? Using it you can construct a structure of translation table for languages in a very flexible way. You even can change a structure a translation table in runtime by adding and deleting parts.\n. I don't think this is a workaround. But, maybe, you are right.\n. Erm... What are \"fallback languages partial loader\"?\nWith partial loader you are able to replace parts in runtime. You can delete part1 and add part1-custom instead. Than you call refresh, angular-translate calls loader again, loader returns reconstructed table and all is done.\nFor example:\nStructure of translation table before [part1, part2, part3]\nStructure of translation table after [part1-custom, part2, part3]\nBut yeah, this approach requires additional codding.\n. If the loader is not able to fetch a new part, it will reject a promise and angular-translate will reject refresh and translation table will still contain \"part1\" and not \"part1-custom\".\n. Hm... It's really tricky and depends on the particular situation a lot.\nIf there are some modifications for all languages, this approach is applicable.\nFor example, there are languages \"en\", \"fr\" and \"de\". And each language has \"general\", \"custom1\" and \"custom2\" modifications. You can change modifications with partial loader, but fallback language will also change modification. Let's say current language is \"en\" and fallback language is \"fr\". If you change modification to \"en-custom\", fallback language will be \"fr-custom\".\nBut if modification are not available for every language, or if you don't want to change modification off all languages at once, this approach with partial loader is not applicable.\n. Here is an example of what I'm talking about: http://plnkr.co/v1QsiEx4E11Z7Ba3irOp\n. How about something like fallbackFactory which will provide a user way to implement any tricky strategy of handling multiple fallback languages? Here is an example of API:\njs\n/**\n * @param string brokenLangKey A language key of the broken language\n * @returns string A language key of fallback language for the broken langauge\n */\nfallbackFactory.getFallback = function(brokenLangKey) {\n  // some logic here\n  return fallbackLangKey;\n}\nor something like that.\n1) Can this solve an issue?\n2) Is it possible to implement?\nUPD: Also provide some default fallback factory and link it to the fallbackLanguage method )\n. @tspaeth, $translate.fallbackLanguage(...) will call default fallback language factory. Or, we can remove this method and add use*Factory instead.\n. @tspaeth, okay. Forget what I said :)\nI propose to completely remove fallbackLanguage() from the angular-translate and add a service to work with fallbackLanguages. The responsibility of the service would be at least to say angular-translate which fallback language to use in which particular situation. For example, you can get a fallback language for 'en' key, for 'de' key, for 'fr' key and so on. But angular-translate will not control an actual algorithm of how this service does it's work. So, you will be able to change this algorithm and even do this dynamically in runtime.\n. Ping @knalli, @tspaeth, @firehist, @DanielaValero here\n. I have nothing against this\n. Hm... Why don't you want to add a new part?\n. There are two possible ways:\n1) add a setPart method to the partial loader\n2) create a custom loader\nI'm not sure about merging tables in setPart. But adding setPart to the service sounds logical.\nPing @PascalPrecht, @knalli and @tspaeth here.\n. You can also provide tests for the needed functionality, if you want :)\n. Hm... Another possible variant is to introduce something like a hook (or callback) which will be called every time the loader is executed. The user will be able to inject any translations to the loader in runtime and no additional efforts is needed.\n. @knalli, there was nothing said here for about a year. I'd like to say against this feature. But, however, it could be easily implemented if needed. The only thing is that we should think about events fired by this method.\nAdditional thoughts:\n- The setPart method was initially designed as a replacement of the $translate.translations method (it becomes useless with the $translate.refresh method).\n- As I understand, there is only one source of truth in the partial loader now - the server. Adding this method we'll introduce a new one - a user.\n- It is impossible to restore a translation table of the part after deletion if it was changed this way.\n- This functionality can be implemented in a custom loader.\n. @PascalPrecht, yes it is always an array inside. This is why I created this issue. It is always an array inside, but it can be either an array or a string when it comes in and out of the angular-translate.\nHere it is:\nhttps://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L17\nhttps://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L347-L360\nhttps://github.com/PascalPrecht/angular-translate/blob/fallback-languages/src/service/translate.js#L1034-L1037\n. Here is an example: https://github.com/PascalPrecht/angular-translate/issues/313#issuecomment-33692164\n. Ping @PascalPrecht, @knalli, @tspaeth\n. You know my English )\nPluggable like storages or loaders\n. Looks like a good theme to show in the docs, actually\n. @PascalPrecht, also translate all changes int the docs to German, Russian and Ukrainian )\n. @PascalPrecht, Russian and Ukrainian can be done hopefully in one evening/night\n. And also, how about #292?\n. The variant is to use\njs\n$q\n  .all([\n    $translate('key1'),\n    $translate('key2'),\n    $translate('key3')\n  ]).then(function(result){\n    // code\n  });\nBut it looks very terribly.\n. @knalli, I'm not 100% sure. We can also introduce an additional method for that. Something like $translate.translateAll() or $translate.all(), for example.\n. > angular-cookies does not ship with angular\nAnd vise versa. It is a thing which a don't like in angular - I've already downloaded a framework, but I still need to download additional files and provide additional dependencies to use cookies.\n\nIt would also be a good idea to have different angular modules for each modules\n\nDo you really want to write a long list of angular-translate dependencies in each of your applications? A core module, storages, error handlers, loaders, interpolators...\n. @knalli, I like the idea to separate things to different entities. But is it possible to keep these entities in one module? Just to avoid long lists of dependencies of the application module. However, I feel that I probably misunderstand something. Do we talk about separate files (which is okay), separate npm modules (which is also okay) or separate angular modules (which I don't like)?\n. Hi, @SweVictor.\nWhat do you mean with \"override part\"?\npartialLoader now has a possibility to add and delete parts even in runtime. After loading all the parts it merges them to a single translation table.\nHere is also a proposal to let the user an ability to change translation tables of parts in runtime #316. But, it is not totally decided now. If it is what you need, you can add your use case there.\nAnd, of course, you can create a custom loader with your own logic of translation loading. Here you are completely free to choose how your loader will work. The only restriction is that it has to return a promise and resolve this promise with a translation table.\n. If there are same keys - the last one will win. Just be careful, because we don't handle a sequence in which parts were added. It also doesn't matter which one is loaded first or last - we merge the parts after all of them are successfully loaded. It relies on a default js implementation of walking through the properties of an object.\nYou can delete a part. In this case the deleted part will not be merged to the resulting translation table. The loader will return a translation table without any key from this particular part next time it is called.\nIf translations have different namespaces - they are different. Not matter in which part they are situated. Default rules of using namespaces are applied. So, yes, you'll be able to use \"common.addButton\" and \"dashboard.addButton\", because \"addButton\" keys will not be in conflict due to the different namespaces.\nThere are no API in angular-translate now to use a code like {{addButton | translate, common}} for prefixing, but you can use {{'common.addButton' | translate}} instead.\n. Have a nice evening )\n. Removing translate syntax is not a variant at this point. Multiple variants is much better as for me. Backward compatibility, blah-blah-blah.\n. @alejandrolsca http://angular-translate.github.io/docs/#/guide/03_using-translate-service\nSection \"Multiple translation IDs\"\n. @virtualit786, try to use $translateProvider.translations(lang, table) method in pair with $translatePartialLoaderProvider.setPart(lang, part, table)\n. I'll add commits one by one. ~~Don't merge it now.~~\n- [x] Rename files\n- [x] Language negotiation\n- [x] Fallback languages\n- [x] Post compiling\n- [x] Tools\nUPD: Done\n. Please, let me know if I forgot to translate something.\n. @ronny332, is\njs\n$translatePartialLoader.addPart('userConfig');\nused in config, run or controller?\n. I can also add Russian and Ukrainian versions to this PR or just create a separate one.\n. @tspaeth, as for instant method it's rather a question to @knalli :smile:\nAnd yeah, I thought about references from Migration Guide to other chapters (like it is done in Pascal's post). But how about future versions? We actually have 1 actual version of docs for every version of angular-translate. If we'll introduce some new breaking changes then previous links in Migration guide would collapse, which is not good.\n. @PascalPrecht, I have to read docs about this operation.\n. @terraces, just imagine that there are 2 roles to work with languages. 1st role is a developer of the app and 2nd role is the actual user. The user has higher priority and the module will always override developer's settings if there are user's ones.\n$translateProvider.use() is a \"developer side\" method. $translate.use() and any storage are \"user side\" methods. That's why a storage always overrides your developer setting.\nAnd yes, your example\njs\nif (try to get lang from URL) {\n  // use this lang\n} else {\n  // try to use storage\n}\nshould work. But in this case you will unable to use storage at all if there is a lang in the URL. It might be not very good.\nYou can also try to set up a language in run() method or create your custom storage. It depends on your language priority strategy, what you want and what you doesn't want to happen.\n. Hi, @iranreyes. My English sucks at all, so it's totally okay )\nI have just saw your plunker. So, the problem is that you want to reuse the same translation IDs in different modules.\nTo be honest I cannot imagine how to achieve the functionality you asked for above. The partial loader uses a name of the part to construct a URL to request your json files from the server. So, the name of the part is a critical information for this loader, it needs it to work.\nAlso, to override some part with either replacePart or addPart method you have to know a name of the part you want to replace. It is similar to deletePart + addPart pair, which is available now. So, both these approaches will not solve your issue.\nIf you have any thought on how this thing have actually work feel free to describe it here. Code, diagrams, drawings, specification, text - anything. Maybe, together we'll be able make angular-translate better :)\nOn the other hand I'd like to mention that thing you actually try to do in your plunker may be not... erm... very good, let's say. I think, it might cause some problems when it comes to error handling and debugging stuff (determine a source of the problem) and also in case there are several parts available at the same time (conflict between same keys in different parts, overriding and so on).\nHow about namespaces in the translation table? Let's say one namespace per part. It will easily solve your issue with overriding parts because you will not need to delete parts. The partial loader caches the parts it loaded before, so your app will be able to return to previous part/module without loading translations from the server again. If you don't want to create namespaces in json files on the server, you can easily re-implement the partial loader to automatically create a namespace for each loaded part.\n. @daanporon, translation table is deleted in order to replace it with a new one which was just loaded. That is why the method is called refresh.\nIf you want to refresh just a current language, you have to call the refresh method with an appropriate param. We refresh all languages when no param is specified according to logic that a translation table change affects all possible languages, not just a particular one (a whole structure of the translation table can be changed, we don't know that).\nBut yes, you are right. There are some issues with refresh method that could cause some weird results.\n. Ping @angular-translate, to not to lose this issue.\n. @aleksz, partial loader gives you a possibility to define some areas in your application. This areas are called \"parts\". Each part can contain a bunch of translation keys. All these keys would be loaded together. Also, partial loader doesn't know anything about your hierarchy or separate translation keys. It only loads a json file from the server for each registered part.\nSo, there is no solution to load separate translation keys in angular-translate now. It depends on your particular case, but I do not recommend you to do that. First of all try to imagine what will you get in this case - a lot of requests to load a single translation. You are risking to kill your application's performance. If it's Okay for you, you can try to implement your custom loader somehow.\n. @BerndWessels, yes it's right. Since 2.0.0 $translate service is promise based.\nIt seems that we forget to update some docs. Look here: http://angular-translate.github.io/docs/#/guide. This docs are 100% up to date, as I know.\n. $translate.instant()\n. @knalli, it seams that this issue is not resolved yet. I was unable to operate with the provided plunker. Also I did not look at the example on GitHub as it is huge and has a lot of directories.\nBut, there are at least two possible things which can lead to an unexpected behavior here.\n1. Race condition between added parts in the loader. It can happen if different parts have some identical translation keys. Actually it is not the race condition here, but very similar and leads to unpredictable result. To solve this thing the developer has either to avoid a usage of identical translation ids or delete old parts before the refresh() method is called. Also, at the moment we have additional tools to help to fight this situation: the getRegisteredParts method and priority of the parts.\n2. As for the question from stackoverflow, @gtbuchanan is right. There is a problem with synchronization between use() and refresh() methods.\n. At the moment I can suggest to read this comment https://github.com/angular-translate/angular-translate/issues/306#issuecomment-66763693\n. Good morning, @benpriebe.\nI don't understand what do you mean by \"crashes and burns\". Also I cannot see it in plnkr because it returns \"200 OK\" as response for \"main-fr.json\" somehow.\nPartial loader has to reject a loading process if at least one of the parts cannot be loaded and there is no error handler defined. This is an expected behavior. To avoid rejection you have to set up the error handler.\nError handler is a service which is called when the partial loader cannot load some part from the server. The expected interface of the error handler is \njs\nfunction service(partName:string, langKey:string):promise\nSo, if the partial loader is not able to load some part it will call your service. The loader will pass a name of the part and a key of the language to the error handler. Error handler has to return a promise. This promise has to be resolved with translation table or rejected.\nYou can write any logic to handle such situations. There are no recommended ways to do that because it depends on your needs a lot. You can either just log warnings to console and resolve the promise with the empty translation table or provide some alternative way of translation table loading.\n. @benpriebe, nice :)\n404 is an error and it has to be solve anyway. So warnings in console might be useful :)\n. @knalli, I'd say this one can be closed.\n. A possible solution\n\n. @AlexCppns, it's impossible to answer your question. The code example you provided shows almost nothing. Can you show a configuration of the angular-translate at least? And what is header_stuff?\n. @AlexCppns, it's impossible to get a whole namespace. You have to get each ID individually.\nangular-translate converts translation tables from this:\njs\n{\n  HEADER_NAMESPACE: {\n    TITLE: \"Bienvenue sur le site des Bisounours\",\n    DESCRIPTION: \"En travaux...\"\n  }\n}\nto this internal representation\njs\n{\n  HEADER_NAMESPACE.TITLE: \"Bienvenue sur le site des Bisounours\",\n  HEADER_NAMESPACE.DESCRIPTION: \"En travaux...\"\n}\n. @AlexCppns, maybe it is possible to write some wrapper service for $translate to achieve your needs. For example, something like this:\njs\nmodule.factory('someName', ['$translate', '$q', function($translate, $q) {\n  return function(namespace) {\n    return $q.all([\n      $translate(namespace + '.TITLE'),\n      $translate(namespace + '.CONTENT')\n    ]);\n  };\n}]);\n. I'm not familiar with these ES, but I like the idea to rewrite a code of the core a little )\n. Hello, @zloy531. Can you show a plunker or something like that?\n. Actually, I like this idea. I can try to implement it. But not earlier than 27 of June.\nOne more word for @Narretz. There is also a question about backwards compatibility with previous versions of the angular-translate module. So we cannot just merge two loaders together.\nSo, maybe, it's better to add a new universal loader based on a static and url loaders' simplicity and a partial loader's url setting principle?\n. Oh My God! I'm sorry, I was busy. I'll start translation tomorrow.\n. Work in progress\n. Hello, @tspaeth. I forgot about this piece of docs :-) I'll add it to #685 PR.\n. Ready\n. Hi, @dbwhddn10.\nDo you mean RequireJS or something like that?\nIt seems like this is a completely new approach. As for me, it's better to create a new loader for this case because of:\n1) It has a different logic. $translatePartialLoader expects to get a JSON object which is ready to use. In your case resource contains js code. (Strategy pattern)\n2) It might establish some additional dependencies for the service. (Backwards compatibility)\n3) It might make the code more complex (KISS principle)\n4) If you provide dependencies in resources you don't need to provide them in the loader (DRY principle)\n5) It might be better to use more specialized tools to accomplish this task. For example, require instead of $http. I'm not familiar with RequireJS, so it's just a guess.\nOn the other hand, we have a PR to add JSONP support to the loader. But, I'm not sure it can help in your case.\nAnyway, it sounds interesting. Do you have an example of how this functionality could be achieved?\n. Yeah. ___ was just a first thing that came to my mind. There were not any thoughts is it good or bad ))\nmetaAttributeName is a great idea actually :+1:\n. I still think that this is a nice and flexible feature.\nBut I'd like to avoid its implementation in the current architecture of the module. It is hard to predict the impact of such changes to 1818 lines of code. At least, I think, it affects translation \"resolution\" methods ($translate(), instant()), refresh() method and initial language loading.\n. @ptgamr, do you call the refresh method of the $translate service?\n. Hello, @juristr.\nYou have to call the $translate.refresh() method only if you want to add or delete parts in runtime. As long as a whole structure of translation parts is constructed during the configuration phase you can freely omit this call.\nAlso, the $translate.use() method returns a promise. I think, it would be better to wrap the code into its then method like this:\njs\n$translate.use(result.language).then(function(){\n  $log.debug('Route resolve. Lang is: ' + $translate.use());\n  deferred.resolve();\n});\nI cannot guarantee that this code will solve the issue. Just a little guess.\n. @knalli, syntactic sugar\n. Here is what I thought. There is actually 2 possible ways to use a partial loader:\n1) You have a single-page application. You have \"static\" translation for pages. You may need some common parts of translation like menu or buttons and some page-specific parts. If you use a router you can set up needed parts in the resolve method of a route or in a controller. To to this you have to delete all uncommon parts and add new ones each time the route was changed. We don't know which parts were loaded before, so we have to delete all possible parts. To do this we can copy&paste the same code for each route or build some custom service to do this job and than copy&paste this service from one project to another. So, we could say that this pattern is typical for simple applications and make it easier with a helper function.\n2) You have a single-page application. But your pages are not static, or they have sub-pages too. This way you may need to add/delete parts dynamically when: a user opens a modal window, a user clicks some button, an application gets a command any possible way instead of routing, etc. So, parts management here is application specific, there is no standard way to do this job and we have to solve this issue each time we start a new project. I can not see any possibility to help the developer in this scenario.\nA main purpose for this helper is to provide some kind of syntactic sugar for simple applications. So, a developer will be able to replace this:\njs\n.resolve(function() {\n$translatePartialLoader.deletePart('home');\n$translatePartialLoader.deletePart('products');\n$translatePartialLoader.deletePart('services');\n$translatePartialLoader.deletePart('contacts');\n$translatePartialLoader.addPart('menu');\n$translatePartialLoader.addPart('company');\n})\nwith this:\njs\n.resolve(function(){\n$translatePartialLoader.someName(['menu', 'company']);\n})\nfor each route.\nUPD: And we actually need to delete previous parts because of possible overlaps.\n. Yes. We can always mention this in docs. And I agree that setPartsList is not the best name for this.\nAnyway this is just a proposal.\nUPD: ~~purpose~~ -> proposal\n. @knalli, I think, it have to work as expected. I didn't run this code, but it looks nice.\n. To use the instant method properly you have to wait until the loader will finish loading first. Just try to wrap your $translate.instant call in $rootScope.$on('$translateChangeSuccess', function(){  }).\n. See #1005\n. Ping @knalli.\n. A custom loader is your own code. So, you can implement it like you want. You can add additional methods, you can introduce additional events, you can call any callbacks you want...\n. Also, $translateChangeEnd and $translateLoadingEnd events might be useful for you.\n. As for me, it's better to create a separate module apart from angular-translate to edit translations.\nBut it's only my opinion.\n. On the other hand, it might be useful to add some mechanism to angular-translate to specify a needed language for particular cases.\n. But, again, if you need a same language for some translation id without reference to the current language of the application then you can just Copy/Paste these ids to all translations. So, I'm with my first opinion. It seems to be better to create a separate service to implement your task.\n. I agree with @tspaeth. Probably, it is not a very good solution to ask a server for each individual translation key. It will slow down an application and also produce additional load on servers (like 11 requests instead of 1). Also, it's strange that you don't know which translation keys are present on the page. I'd like to recommend you to separate your application's translations into parts (for example, \"common\", \"page1\", \"page2\", \"block3\", and so on) and use the partial loader to load them on demand.\n@angular-translate/core Also, I've just got an idea to add some \"hooks\" to angular-translate. Like onBeforeTranslate, onBeforeInterpolate, onBeforeTranslationLoading and so on. A developer will be able to perform some actions with translation or translation key \"on the fly\". Maybe, filter them, or register which keys were called... What do you think about it?\n. Hello, @superandrew. Can you show your code please? I mean at least HTML of a \"Switch language\" button/link/option/whatever + JS of this event handler + probably, app's configuration. This way it would be much easier to help you.\n. May it be some problems with cache? Filter and directive return a translation ID in case it's translation is not found. This is the expected behavior.\n. 1. As I know, AngularJS invalidates filters on every $digest circle. So, the filter will show an actual translation when it will be possible.\n2. Yes. You can use a \"translate\" directive instead of the filter.\n   UPD: Or, probably, translate-cloak directive.\n. I've added this to my To Do list\n. @tspaeth, I'll try to do it now.\n. https://github.com/angular-translate/angular-translate/pull/819\n. Hi, @marsh73, @knalli.\nI think, this issue is related to #449 a bit. But here we need somewhat another enhancement. A $translate.refresh() needs a better logic to determine languages which it has to re-fetch.\nThe problem here is: when the $translate.refresh() method is called there are no fully loaded languages - langPromises[key] set in a use() method is neither resolved, nor rejected yet. As a result a $uses variable is not set also, \"fr-FR\" is just a $nextLang at that moment. That's why refresh thinks that there is nothing to reload (both https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1557 & https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1565 are falsy). And finally it does not try to load anything.\nAsynchronous stuff... :slot_machine:\nWhat do you think about this?\n. @angular-translate/core any thoughts?\n. @marsh73, do you use any kind of router (like ngRoute or ui-router)? I'm not sure, but, maybe, this issue could be solved with usage of router's resolve feature somehow.\n@angular-translate/core, what if we'll give a user possibility to start angular-translate manually? I mean a part of code from the module's run method. The user will be able to provide all needed additional configurations in runtime and start the module after that.\nAlso, we can try to look at the $nextLang first. If it's already loading at the moment, so, maybe, we should update that new language instead of the current one which will be replaced in a few seconds. But I think that there are some possible problems in cooperation of use and refresh methods called sequentially.\n. I'm lost a bit ) Definitely the version of plunkr I examined and the current one are different. But there is a version with fr-FR setup somewhere in previous versions )\n. If you have a single entry point in your application you can try to setup a first part for the entry point in the config method and than add other parts when they will be needed.\n. Hi, @daseinhorn. There are at least three possible ways for you to accomplish this task.\n1. You can save a reference to the $translateProvider during configuration phase of your application to some service or variable. I'm not sure that this solution will work. And, as for me, it is not the best practice to save references to providers.\n2. You can create a custom loader. This feature was designed exactly for such cases as yours - to handle some custom (and, probably, non-trivial) translations loading logic. It is quite simple. You can take any loader provided by angular-translate as an example.\n3. You can try to pre-process translation files and include translations directly to the js code. It might be the simplest way if you have a little amount of translations.\n. Actually I'm not sure that the setPart method has to make a part active. There is the addPart method to include parts to the resulting translation table.\nThe role of the setPart method is to provide a translation table for some part of some language. It is not necessary that this particular part is needed right now. For example, you might want to set some tables for the future use.\nAlso the loader merges all tables stored in the \"enabled\" parts when the user asks for a translation table. If you make a wrong part active it will be possible to get a wrong resulting translation table. For example, if there are some translations with identical translation IDs.\nThe partial loader was designed in the following way:\n- If you want to change a structure of the resulting translation table, then you have to use addPart and deletePart methods.\n- If you want to provide manually some translation tables to some parts of some languages, then you have to use setPart\nIf we make a newly created part \"active\" then we'll get some sort of unpredictable behavior. There are actually a few possible cases:\n- we provide a translation table for existing active part\n- we provide a translation table for existing non-active part\n- we provide a translation table for non-existing part\nIn two former cases we do not change a structure of the resulting translation table. But in the latter case we will change it which may possibly lead to bugs that are not so obvious.\n. Hello, @yabasha.\nYou can change a structure of the translation table returned from the partial loader by using addPart and deletePart method. Once the part is \"added\" it will be present in the resulting translation table until you \"delete\" it.\nIf several parts has identical translation IDs the partial loader will merge them into one - the last one wins.\nTo solve this issue to have to delete parts when they are not needed any more. For example, when the user goes from Page1 to Page2 you have to delete parts related to Page1 and add parts related to Page2.\nUPD: Or just make each translation ID unique.\n. No. You can see all available methods here: http://angular-translate.github.io/docs/#/api\nBut there was a PR which is related to this question. It doesn't introduce deleteAllParts() method, but getRegisteredParts(): #616. Probably, this feature will be added in one of the future releases. For now you can either tweak the partial loader as it is shown in the PR, or create your own service to handle parts management.\n. Yes, you can. Just create a new part for common translations and add this part during the configuration phase of your application. It will be present in the translation table until you delete it manually.\n. Hello, @bielmenezes. You may be interested in shortcuts (http://angular-translate.github.io/docs/#/guide/02_getting-started) or variable replacement (http://angular-translate.github.io/docs/#/guide/06_variable-replacement) features.\n. Hi, @sayacoub.\nThe partial loader doesn't require URLs to end with \".json\" - it relies on the template you specified.\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\nI think that a custom loader is what you're asking for. By creating a custom loader you are able to implement any loading strategy you need.\nhttp://angular-translate.github.io/docs/#/guide/13_custom-loaders\nRegards, Max.\n. StaticFilesLoader, UrlLoader, PartialLoader and any custom loader implement the same interface. Just take one of them as an example.\n. Hi, @yjaaidi. As for me, if you are planning to add some events/magic and keep your code clean, it would be much better to use a custom loader. This way you are able to write a good code instead of set of workarounds.\n. @bjohnso5, I agree with @knalli that it depends on the architecture of your module.\n- How are you positioning your module?\n- What stuff do you want to require from your consumers to use in pair with your module and how to use these stuff?\n- What if your module will use some custom loader and consumer will use static files loader?\n- What if consumers will not use a default language?\nand so on.\n1. Use a custom loader\n2. Use the partial loader\n3. Theoretically, you are able to do something at the configuration phase of your module. For example, you can use the translations() method of the $translateProvider. But this will probably break an asynch loading or will be broken by calling refresh method.\n4. You can try to grab a reference to the $translateProvider during the configuration phase and use it in runtime (but it's kinda hacky, I'm not sure if it works and do not recommend this approach).\nJust try to draw a desirable architecture, write down the expected workflow, list dependencies and probably you will see the best way to do what you want.\nAnd why not just to ship a default translation table along with your module? And a consumer will be able to include it to his translation tables in a natural way.\n. 1. Are there any HTTP error?\n2. A correct JSON requires double quotes. Like this: { \"key\":\"Translation\" }\n3. If you add parts in runtime, you have to call $translate.refresh() method to reload a translation table.\n. Yes. It is a public method of the provider. It is listed here: http://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translatePartialLoaderProvider\n. It was created to be able to prevent FOUC on application start, if I remember correctly. There were no thoughts that someone will want to inject translations to the loader at runtime. It looked more natural to create a custom loader to handle tricky ways of loading translations from the server.\n. @knalli, yes. I'll do it tomorrow.\n. How about\njs\n$translate('TITLE.' + $rootScope.title)\n. It looks good. But only English language is covered here. We have to update other languages too.\n. Hello, @jar240. Can you create a plunker or something like that to show your problem \"live\"?\n. Hello, @deanclkclk. You might be interested to look into this issue #306 (at least last comments).\n. @knalli, I don't know. I don't remember what is going on here, but, based on the link to 306 issue, it is somehow related to the synchronization problem. I've updated my comment in the discussion about version 3.0.0 (https://github.com/angular-translate/angular-translate/issues/995#issuecomment-91359795)\n. Hello, @manulitopetito. Try to write the prefix in a manner of absolute path from site root or make it relative to your page.\n. Is this issue solved?\n. @dereksantos, non-active parts are parts which were temporary deleted. They are not included into the resulting table at the moment. But in case they are added again, these translation tables will not be fetched from the server again because they already have translation data. It is like an internal cache from loaded parts. (https://github.com/angular-translate/angular-translate/blob/canary/src/service/loader-partial.js#L405)\nAs for if (part.isActive) there are at least 2 possible ways: add this condition in merging block or filter active parts in the getPrioritizedParts method. But I'm not sure which one is better.\n. Hm... From docs it is not clear how the $q.all method will act with empty arrays.\nloaders.length will be 0 if there are no active parts registered at the moment. And 0 is falsy, so that block of code it potentially reachable.\n. Sources say that the $q.all method in such situation will immediately resolve the promise with an empty array (https://github.com/angular/angular.js/blob/master/src/ng/q.js#L532-534). So, it is okay.\n. Looks good to me too. Thanks. )\n. Hello, @tantommy. I'm not sure that I understand you correctly. However...\nHow can you print a value of the property in html?\nIf it is something like {{ vm.config.label }}, then try to do this {{ vm.config.label | translate }}.\n. http://plnkr.co/edit/0tHeFtKbvxAmWLTkIeG5?p=preview\n. @angular-translate/core, it happens here, I think: https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1742\n. @knalli, you ask me hard questions. Definitely, I had to provide a link to the specific state of the repository rather than the \"master\" branch :-(\nI think, that this issue is still open. Look here: https://github.com/angular-translate/angular-translate/blob/a2ac7000f94bcee6dd8e206cab5d7cec3527dd25/src/service/translate.js#L1809-L1811\nIt looks like the fallback languages loading logic doesn't care about what languages are already present in the translation table.\n. Hello, @patrickbr. The $translate service knows nothing about parts - it uses translation tables returned by the loader. That's why it uses old translation table when return back to French (it doesn't call the loader, because the translation table already exists). To fix this you have to refresh translation tables when you add parts to the loader. This way the $translate service will call the loader to update existing translation tables.\n. Yes. It loads only those parts which were not loaded before.\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/loader-partial.js#L46-L70\n. Hello, @Bessonov. If you use the partial loader, then it is better to use the $translatePartialLoaderProvider.setPart method instead of the $translateProvider.translations. Providing translation tables to the loader will prevent it from loading them from the server.\n. Hello, @tlycken. As far as I know, there are no such settings. But you can try:\n- Generate a JS file on the server, which will set up a language during configuration phase instead of making an ajax request (I'd prefer this approach)\n- Move language selection logic to the client\n- Maybe it is possible to control this stuff by a custom loader somehow\n. @sharanmunyal, hello. Can you show an example, please?\n. You have to provide translation tables like this:\n``` js\n// en\n{ \"version\" : \"Version 2 of 3\" }\n// uk\n{ \"version\": \"\u0412\u0435\u0440\u0441\u0456\u044f 2 \u0437 3\" }\n// ru\n{ \"version\": \"\u0412\u0435\u0440\u0441\u0438\u044f 2 \u0438\u0437 3\" }\n```\nMaybe there are some other ways to do this, but I don't know them.\n. I'm not sure that I understand you right. But, maybe, you can also try to use something from the following to achieve the needed behavior:\n- Links in translations: http://angular-translate.github.io/docs/#/guide/02_getting-started\n- Variable replacement: http://angular-translate.github.io/docs/#/guide/06_variable-replacement\n- Custom interpolators: http://angular-translate.github.io/docs/#/guide/15_custom-interpolators\n- Add some filters to translations (not sure if it will work)\n. Hello, @Purus. Can you show a plunker with your set up?\n. Does the loader load translations for English?\nCan you create a plunker with your setup? This way it will be much easier to determine why you are facing the problem.\n. @knalli, I'll translate it to Ukrainian and Russian languages in something about 24-30 hours.\n. @knalli, added in #1004\n. Hello, @jmaister.\n1) To replace the JSON format with the Java properties file format you have to create a custom loader. This loader will request needed files from the server and convert them to JS objects. You can find more information about custom loader here: http://angular-translate.github.io/docs/#/guide/13_custom-loaders\n2) To replace default Angular's {{ ... }} with { ... } you can to create a custom interpolation service. More information about custom interpolators: http://angular-translate.github.io/docs/#/guide/15_custom-interpolators. Also, it might be interesting for you to read the chapter about the pluralization support: http://angular-translate.github.io/docs/#/guide/14_pluralization. The MessageFormat library, which is used to provide pluralization at the moment, does this replacement.\n3) I'm not sure about arrays. Most probably, you can use them like you've shown above or in some similar way. Also you can try to use something like this: <span>{{'INFO' | translate:'{0: data.step, 1: data.total}'}}</span>.\n. Hello, @cmjonescm.\nYou are right, there are no ways to set URLs with different structure in the partial loader. As a workaround you can try to name the part as something like: '../../framework'. The resulting URL of the part for the 'en' language key will look like this 'http://example.com/modules/instrument/../../framework/client/i18n/en.json'.\nAlso, don't try to use $translateProvider.translations() with the partial loader. All translations you've added this way will be lost once you call the $translate.refresh() method. To keep these built in translations you have to add them to the loader itself. It can be easily done by using the $translatePartialLoaderProvider.setPart() method. Such translations will last until you say the loader to delete them.\n. Hello, @chachou29.\nI think you can do this by creating a custom loader and calling the refresh method.\n. There are two ways to feed translations to the angular-translate:\n1. Use the $translateProvider.translations() method\n2. Use an asynchronous loader\nProviders could be normally used during the configuration phase only. You can save the reference to the $translateProvider somewhere and use it to add translations in runtime. But it is kinda dirty and hacky.\nAlso you are able to create your own asynchronous loader. A loader is a regular angular service which could be used by angular-translate to retrieve translation tables for needed languages. The only requirement to this service is to implement interface of the loader. And it doesn't even matter whether it performs XHR requests or not.\nYou can find more information about custom loaders here:\nhttp://angular-translate.github.io/docs/#/guide/13_custom-loaders.\nAlso you can use any of the standard loaders as an example:\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/loader-url.js\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/loader-static-files.js\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/loader-partial.js\nSo, following either of these ways you are able to provide translations to angular-translate in runtime. The only problem might be to ask angular-translate to use these translations. I'm not able to say anything about the first approach because I haven't tried it. But going the second way you can call the $translate.refresh() method. This will force angular-translate to forget all \"current\" translation tables and ask the loader for new ones.\n. Hi, @sajit. I'm overloaded with work now and don't have an ability to contribute to open source projects. Due to this reason I didn't work with a code base of angular-translate for quite a big amount of time. So, my answer might be completely wrong and it might be more appropriate to ask @knalli or @tspaeth about this.\nAs far as I remember, you can still create a custom loader. Such loader is just a regular AngularJS service. So you are able to do pretty much anything there, including XHR requests, response mocking,  events triggering, etc. I believe, that you can set a correct URL for your custom loader in runtime and than refresh angular-translate's translations. For more information you can see this comment https://github.com/angular-translate/angular-translate/issues/930#issuecomment-75255322 and official documentation of this module.\n. Hello, @rfgamaral.\nAs for me, translation is a part of the presentation layer. You may use any tool to translate the application, you may even change it or use several tools at once, but it should not affect the business logic. Also, it would be better to keep all translations in one place to make it easier to maintain. That's why I prefer to perform translation in views.\nAs for the service, directive and filter - it depends on the particular situation. The service fits nicely to controllers and services. Directives and filters are the only fit for views. For regular translations it is better to use directive, while the filter helps a lot is some smaller cases. Here is what the docs say about the directive:\n\nIt turned out that having too many filters in a view sets up too many watch expressions, which is why angular-translate also provides a directive to translate your contents in view layer.\n\nIMHO :-)\n. But you can use this field to store a translation key instead of the direct translation.\nHowever, if I understand right, this will also require to write additional code either in controllers or directive. Something like this:\njs\nangular.module('...').directive('title', [\n'$rootScope', '$translate',\nfunction titleDirectiveFn($rootScope, $translate) {\n    return {\n        restrict: 'E',\n        link: function linkFn(scope, elem, attrs) {\n            $rootScope.$on('$stateChangeSuccess', function (e, toState, toParams, fromState, fromParams) {\n                $translate(toState.title)\n                  .then(function successFn(title) {\n                    elem.html(title);\n                  }, function errorFn(translationID) {\n                    // something happened, translation was not done\n                  });\n            });\n        }\n    };\n}]);\nP.S.: However, it looks just like what @knalli has said.\n. Hello, @tobika. The $translate service returns a promise. What do you get with the following code?\njs\n$translate('settings_CONFIRMDELETE').when(function successFn(translation) {\n  console.log('Translation successfully done:', translation);\n}, function errorFn(translationId) {\n  console.log('Translation failed:', translationId);\n});\n. @tobika, you are right. It was then. Sorry :-)\n. Hello, @johnpapa.\nIf you use the $translate service with multiple ids then it'll always return a result. In other case one failure may break translation of all other ids in this group. To determine the failure you can check the returned value against the translation keys, for example.\nProbably, you might be interested to read the following docs: http://angular-translate.github.io/docs/#/guide/03_using-translate-service and http://angular-translate.github.io/docs/#/guide/18_events\n. Hello, @9mm. I don't understand what have you wanted to tell in the fiddle. But, however, any loader works fine with the preferredLanguage functionality. Are there any xhr calls shown in the browser's network tab?\n. This part of code is completely unnecessary if you use a loader.\nThe only reason why you may want to use $translateProvider.translations method together with the loader is to decrease the initial time which is taken by the module to show translations on the page. angular-translate loads files from the server only if they are not present yet. So if you guess that the user will use the en language, then you may provide it directly to the module. In this case if the user really uses the en language, then the module will not need to load translations.\nIf the code does not work without the section mentioned above then there is a bug somewhere. Either in angular-translate or in your code. I'll take a look at this thing in a couple of hours.\n. It looks like angular-translate works as expected: http://plnkr.co/VDgqwM1AWIldH9bta6ni\n. @9mm, it works fine in Firefox 36.0.1\nUPD: Hm... But not in Chrome. Interesting...\n. Okay, the problem is that raw.githubusercontent.com returns js files as text/plain. If you host this example with correct mime types, then it will work fine. I've just tested it in Firefox 36.0.1, Chrome 41.0.2272.89 m and IE 11.\n. I've fixed links to js files. Now this plunker works in all mentioned browsers well out of the box: http://plnkr.co/VDgqwM1AWIldH9bta6ni\n. @9mm\n0.1) Ensure that the example works fine in your target browsers.\n0.2) Ensure that the example works fine in your environment\n1) Check that you have included all needed javascript files to your HTML\n2) I'm not sure whether it is important, but check that all javascript files are added in correct order\n3) Check that you have included all dependencies to your module\n4) Check the configuration of the module ($translateProvider.translations is unnecessary if you use a loader)\n5) Run the application\n6) Check that all javascript files are successfully loaded\n7) Check that the correct json file is successfully loaded\n8) Check errors in the console\nIf there are no errors, but the module still doesn't work, then there are at least two possible situations:\n- conflicts with other modules you are using\n- conflicts with different versions of angular and other dependencies\nAlso, you can easily debug javascript files with Firebug extension for Firefox, for example.\nIf nothing helps you to solve the issue, then create a good demo which represents it. I recommend you to use http://plnkr.co/ instead of http://jsfiddle.net, because it provides an ability to create multiple files and emulate a directory structure.\n. Yes, it is possible. You have to use the instant method. You can find a more detailed explanation here: http://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate\n. It is correct. The method both sets (if provided) and returns the language key of the preferred language.\nhttps://github.com/angular-translate/angular-translate/blob/2.6.1/src/service/translate.js#L1377-L1382\nHowever, you are right. It is not clear from docs, that this method can set a preferred language.\n. Hello, @vanthiyathevan. Yes, such behavior is expected. You can find more information about events here: http://angular-translate.github.io/docs/#/guide/18_events\n. Hello, @gsaini.\nThe purpose (or, probably, task) of the $translate.refresh() method is to refresh translation tables which are currently present in the $translate module. So, this method deletes old translation tables from the module and asynchronously loads their newer version.\nIf you want to change the translation table, then you have to combine the $translate.refresh() method with some loader. Something like this:\n1. Configure the loader to return another translation table\n2. Call the $translate.refresh() method\n. Hm... Really, there is a problem. Thanks, @gsaini.\nI'm not sure if I am right, but this scenario will lead to error:\n1) Use some lang1 language\n2) Use some lang2 language\n3) Refresh translation tables\n4) Use the lang1 language\nHere we will get the old version of the lang1 translation table. It happens because we delete only those translation tables which were re-loaded from the server.\nSee here: https://github.com/angular-translate/angular-translate/blob/a2ac7000f94bcee6dd8e206cab5d7cec3527dd25/src/service/translate.js#L1651-L1654\n@angular-translate/core, is it appropriate to delete all existing translation tables in case the new ones were loaded successfully? Do we need to re-load only the current languages or all languages which were loaded during the current session (this question can also affect separation of fallback language handling)?\n. @knalli, they won't be missed. An Error will be thrown from the refresh method in case a loader is not specified.\nOkay, then. I'll remove all translation tables in that case.\n. @knalli, but we do already have a parameter to specify a language to be updated.\nIs the use case you've mentioned common? It looks more like workaround.\nConsider the partial loader is used in the application. If we want to refresh translation tables as a result of structural changes in the loader the first scenario will cause real bugs, while the second one might add some uncomfortable delays. Also, this loader provides an ability to specify static parts - they'll be fetched without any xhr requests.\n. @knalli, such behavior is actually documented in our API docs :smile: So, yeah, this is definitely a bug.\n. @knalli, it is mentioned here:\n- links to the current master tree: https://github.com/angular-translate/angular-translate/blob/a2ac7000f94bcee6dd8e206cab5d7cec3527dd25/src/service/translate.js#L1590-L1592 and https://github.com/angular-translate/angular-translate/blob/a2ac7000f94bcee6dd8e206cab5d7cec3527dd25/src/service/translate.js#L1602\n- links to the current canary tree: https://github.com/angular-translate/angular-translate/blob/3facb92487efab8f4a7ed6a2eac6c9812f1c01b9/src/service/translate.js#L1657-L1659 and https://github.com/angular-translate/angular-translate/blob/3facb92487efab8f4a7ed6a2eac6c9812f1c01b9/src/service/translate.js#L1669\nThat's why, I think, this issue can be considered as a bug - the current behavior differs from what is documented.\n. @gsaini, some changes were merged to the canary branch. Can you check whether the issue is solved?\n. Hello, @endamaco. angular-translate provides loaders for common use cases. But, obviously, it is impossible to cover all possible variations.\nTo solve your task you can create a custom loader. It may contain any additional logic you need. Don't be afraid, it is quite easy - you just have to implement one function.\nYou can find more information about loaders here:\nhttp://angular-translate.github.io/docs/#/guide/13_custom-loaders\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\nAlso, you can take any existing loader as an example.\n. @knalli, and how about synchronization of processes which are taking place in use and refresh methods? It looks like a big fundamental piece of work which affects internal architecture of the service.\n. @knalli, I'm not sure if this issue is still valid, but most likely it is. I've described it in the issue #449. As I remember, there were also a few other issues somehow related to the question of synchronization.\nUPD1: Probably, related issue #306 (see https://github.com/angular-translate/angular-translate/issues/306#issuecomment-66763693)\nUPD2: Probably, related issue #399\n. I disagree with at least 2 options:\n1) I think that it is not good to make all things asynchronous. Why should something pretend to be asynchronous if it is synchronous by nature? I think that such tools have to be used only if they are needed to accomplish the task. Needless promises may confuse the developer and lead to misunderstanding of how the thing works.\n2) The activeLanguage method looks like a getter. If we try to make things more clear and easy to understand, then it might be better to split the use method to getActiveLanguage and setActiveLanguage. This is Java style, but people use it for years and it works pretty well.\n. Also, it might be an interesting addition to create some king of constructor - a piece of software to create personal builds of the module. This way the user will be able to pack all needed related modules to one js file. Probably it may also reduce amount of duplicate code in plugin somehow. But it looks tricky and is hardly needed to anyone.\n. @knalli, the proposed change in the left top box might be useful to provide things like pluralization and number/date/currency formating. As these things can be implemented with AJS directives and filters, they may want to know which language was actually used in translation. Also, this way we'll be able to return a real result for multiple translation feature ($translate([id1, id2, id3, ...])) - the developer will be able to determine a real status of each individual translation without having to create additional things.\n. Hm... Actually, this question is not so easy to answer. It depends on how we'll implement pluralization and other features. If these tasks will be handled by interpolation services, this information may be passed directly to them instead of adding it to translations. So, yeah, probably it is not necessary.\n. The main intention of \"Language Information\" service was a pluralization feature. We have to know pluralization rules of the specific language to be able to do something in this area. It doesn't matter how we'll get that information. For example, we can use a predefined namespace in translation tables, or some information providers.\nThere are few disadvantages when we use 3rd party modules for this:\n- they may use different syntax (it makes things inconsistent). We have to process such strings several times to cover both 3rd party and native (AJS) syntax.\n- it provides more dependencies, adds more files (makes things more complicated)\n- there are no guarantee that their API and syntax will not change\nThings like selectformat and genderformat came after the pluralization. But it looks like they don't rely on any language specific information.\nAnother language dependent feature is handling a direction of writing. Yes, it has nothing to do with translation. But only angular-translate knows what language is currently in use. It knows even the language used to translate every particular string. But this is a debatable question as this feature may probably need heavy structural DOM changes. However, it might be useful to give such information to external modules.\nAnd the last set of features are things like number formatting, currency formatting, date formatting and so on. These things are hybrids: they rely on the language specific information, but also may provide additional (probably, complicated) logic. Obviously, 1USD !== 1EUR. Definitely, this is a localization part, but how can the developer implement it? If we do not implement it by ourselves, it would be nice to provide some recommendations on how deal with such things.\nHowever, if nothing of this can be done (or can be done in another way), then the \"Language information\" service is completely unnecessary and can be safely omitted.\n. The \"Debugger\" service is planned to be at least a wrapper for if (config.logging.debug) { $log.log()}. Such string is perfect to be temporarily used in one or two places, but it may be not so good when it comes to several modules. In case something changes we'll need to change almost everything. It may be painful.\nIn line if (config.logging.debug) { $log.log()} we expect that:\n- we have the config object\n- the config object has the logging property\n- the logging property is actually an object\n- the logging object has the debug property\n- we have the $log object\n- the $log object has the log property\n- the log property is a function\nAt the same time, in line Debugger.log() we expect that:\n- we have the Debugger object\n- the Debugger object has the log property\n- the log property is a function\nThe second line knows much less information about other things in the system. I don't know, maybe I'm wrong. I just feel it this way.\nAt the same time, it is possible that the logging feature is unneeded at all.\n. As for your example, I'd like to keep Refresher and Map blocks close to each other. It would be nice other blocks to know nothing about loaders, refreshing and all other crazy async stuff. This way it will be possible to simply ask the Map for needed keys - it doesn't matter how it gets them and what processes it currently performs under the hood - just ask in either sync or async way.\n. > >   But only angular-translate knows what language is currently in use.\n\nI disagree. Either the developer can change the language based on a custom event or the current language can be observed by the events. That's not isolated data.\n\nI mean the language which is used to translate each particular string in the application. Because different strings may be translated to different languages.\n\nCom'on :) We can define this internally as being available. :) And $log is an AJS core service (in ng). Of cource it does not matter if this will be a logger.log('foobar') or if (log.enabled) {$log.log('foobar')}.\n\nOkay. I agree. But logger.log('foobar') is shorter and simpler :smile:\n\nAsking the map directly will put the management for translation loading right into the Map.. and IMHO that should not be part of that. The idea is dumb map (regardless how it will be store its data internally). You want actually no Map, but an intelligent \"valueForKeyAndOptionallyLoadDataOnDemandService\".\n\nHm... It has not necessarily be the complicated word you've wrote. I just don't like the idea to inject a loading logic to translation resolvers. They have their own responsibility: get translation, handle failures, perform fallbacks, replace shortcuts, apply postprocessing... All these things hurt KISS principle. Are there any ways to get both dumb map and simple resolvers? Why should we keep the translation table as a simple map, and not use the Repository pattern or something like that? Or, probably, can we add some data access layer between translation resolvers and storage(Map)?\n. > > > > But only angular-translate knows what language is currently in use.\n\n\n\nI disagree. Either the developer can change the language based on a custom event or the current language can be observed by the events. That's not isolated data.\n\nI mean the language which is used to translate each particular string in the application. Because different strings may be translated to different languages.\n\nStill not getting this. Sorry. :(\n\nOkay. Let's try to say it in other words...\nWhen we translate every particular translation ID, there are actually two \"active\" languages:\n- the current \"global\" language of the application (we call it $uses in the code). This language is available all over the application by calling $translate.use().\n- the language which was used to translate the particular translation id. This language may differ from the current language of the application because we have the fallback functionality. This language is available only internally at the moment, no one outside the module knows what language was used for each particular string.\nIf any feature needs an information about the real language of the string (not the whole application), it cannot get it outside the module. Only interpolators have access to this information. So, we might need to have an ability to provide such information on demand.\nThe other question is: are there any features which may need such detailed information about the language? I've wrote the initial statement in context of writing direction. But, as I understand, the writing direction relies on the current language of the whole application - it doesn't matter what language was used to translate the particular string. For example, does date of number formatting rely on the \"global\" language of the application or on the language of the particular string?\n. I've made a little analyze of entities inside $translate provider and service trying to determine where it is better to move them. It turned out that it is pretty hard task. I'll post it here for further investigation.\n. $translateProvider\nvariables and properties\n| Name | Def. val. | Move to | Comments |\n| --- | --- | --- | --- |\n| $translationTable | {} | Repository / Map |  |\n| $preferredLanguage |  | Config |  |\n| $availableLanguageKeys | [] | Config | LanguageResolver |\n| $languageKeyAliases |  | Config | LanguageResolver |\n| $fallbackLanguage |  | Config / State | Replace with FallbackProvider |\n| $fallbackWasString |  |  | Remove as unnecessary |\n| $uses |  | Config / State |  |\n| $nextLang |  | Repository / State |  |\n| $storageFactory |  | Config / State |  |\n| $storageKey | $STORAGE_KEY | Config |  |\n| $storagePrefix |  | Config |  |\n| $missingTranslation HandlerFactory |  | Config / State |  |\n| $interpolationFactory |  | Config / State | May be replaced with $interpolatorFactories |\n| $interpolatorFactories | [] | Config / State |  |\n| $loaderFactory |  | Config / State |  |\n| $cloakClassName | 'translate-cloak' | config | Probably, we have to introduce a new constant for this value |\n| $loaderOptions |  | Config | It should be also used by useXXXLoader methods |\n| $notFound IndicatorLeft |  | $translateMissing TranslationHandler Log | Remove from global config |\n| $notFound IndicatorRight |  | $translateMissing TranslationHandler Log | Remove from global config |\n| $postCompilingEnabled | false | Config |  |\n| NESTED_OBJECT DELIMITER | '.' | Config | We may need to introduce a new constant for this value |\n| loaderCache |  | _Config | May be replaced with $loaderOptions |\n| directivePriority | 0 | Config |  |\n| statefulFilter | true | Config |  |\n| uniformLanguage TagResolver | 'default' | Config | LanguageResolver |\n| languageTagResolver |  | LanguageResolver |  |\n| version | 'x.y.z.' | Config | May be replaced with a new constant |\n. $translateProvider\nmethods and functions\n| Name | Move to | Comments |\n| --- | --- | --- |\n| getFirstBrowserLanguage | LanguageResolver |  |\n| getLocale | LanguageResolver |  |\n| indexOf | module's IIFE / Shims / ? | Do we support these browsers? |\n| trim | module's IIFE / Shims / ? | Do we support these browsers? |\n| negotiateLocale | LanguageResolver |  |\n| translations | Repository |  |\n| cloakClassName | Config |  |\n| flatObject | Repository |  |\n| addInterpolation | Config |  |\n| useMessageFormat Interpolation | Config | May be removed as a shortcut |\n| useInterpolation | Config |  |\n| useSanitizeValueStrategy | Config |  |\n| preferredLanguage | Config |  |\n| setupPreferredLanguage |  | Remove as unnecessary |\n| translationNotFound Indicator | $translateMissing TranslationHandler Log | Remove from global API |\n| translationNotFound IndicatorLeft | $translateMissing TranslationHandler Log | Remove from global API |\n| translationNotFound IndicatorRight | $translateMissing TranslationHandler Log | Remove from global API |\n| fallbackLanguage | Config | Replace with FallbackProvider |\n| fallbackStack | FallbackProvider |  |\n| use | ? |  |\n| storageKey | Config |  |\n| useUrlLoader | Config / Repository | May be removed as a shortcut |\n| useStaticFilesLoader | Config / Repository | May be removed as a shortcut |\n| useLoader | Config / Repository |  |\n| useLocalStorage | Config | May be removed as a shortcut |\n| useCookieStorage | Config | May be removed as a shortcut |\n| useStorage | Config |  |\n| storagePrefix | Config |  |\n| useMissingTranslation HandlerLog | Config | May be removed as a shortcut |\n| useMissingTranslation Handler | Config |  |\n| usePostCompiling | Config |  |\n| uniformLanguageTag | Config |  |\n| determinePreferredLanguage | LanguageResolver |  |\n| registerAvailable LanguageKeys | Config |  |\n| useLoaderCache | Config | May be removed as a shortcut |\n| directivePriority | Config |  |\n| statefulFilter | Config |  |\n. $translate\nvariables and properties\n| Name | Move To | Comments |\n| --- | --- | --- |\n| Storage | State |  |\n| defaultInterpolator | State |  |\n| pendingLoader | Repository / State |  |\n| interpolationHashMap | State |  |\n| langPromises | Repository |  |\n| fallbackIndex | FallbackProvider |  |\n| startFallbackIteration | FallbackProvider |  |\n. $translate\nmethods and functions\n| Name | Move To | Comments |\n| --- | --- | --- |\n| $translate |  | Use AsyncProvider |\n| applyNotFoundIndicators | MissingTranslationHandlerLog | It is a responsibility of an error handler |\n| useLanguage | ? |  |\n| loadAsync | Repository |  |\n| getTranslationTable | Repository |  |\n| getFallbackTranslation | AsyncProvider |  |\n| getFallbackTranslationInstant | DirectProvider |  |\n| translateByHandler | ? |  |\n| resolveforFallback Language | AsyncProvider |  |\n| resolveforFallback LanguageInstant | DirectProvider |  |\n| fallbackTranslation | AsyncProvider |  |\n| fallbackTranslationInstant | DirectProvider |  |\n| determineTranslation | AsyncProvider |  |\n| determineTranslationInstant | DirectProvider |  |\n| clearNextLangAndPromise | ? |  |\n| preferredLanguage | Config |  |\n| cloakClassName | Config |  |\n| fallbackLanguage | Config | Replace with FallbackProvider |\n| useFallbackLanguage | FallbackProvider |  |\n| proposedLanguage | ? | Strange name |\n| storage | Config / State |  |\n| use | ? |  |\n| storageKey | Config |  |\n| isPostCompilingEnabled | Config |  |\n| refresh | Repository |  |\n| instant |  | Use DirectProvider |\n| versionInfo | Config | May be replaced with a new constant |\n| loaderCache | Config |  |\n| directivePriority | Config |  |\n| statefulFilter | Config |  |\n. There are many places I don't know where it would be better to put things at the moment (\nState here is some service to keep a current state of the application and all injected services like storage, loader, error handler, interpolators and so on. Probably, it is the same as @knalli 's Context.\n. It may be not so easy. There are also questions about events propagation, synchronizations with use and refresh methods and so on.\n. Also, it seems that with notify you can create your own templates. So, probably, you can translate your messages directly in the template.\n. Hello, @dmitryevseev.\nProbably, this issues is related to #952\n. Hello, @LeleDev.\nIt looks like this issue is related to #500.\n. As I know, there are some breaking changes in new versions of jshint. We can use jscs together with jshint.\n. Hm... Yes, something like that. But, I think, it will be impossible to implement the refresh feature inside the helper if it is a method of the loader (because of a circular dependency).\nAs a method it could look like this:\njs\n{\n  \"resolve\": function routeResolveFn($translatePartialLoader, $translate) {\n    $translatePartialLoader.setStructure(['ui', 'contacts'. 'common']);\n    return $translate.refresh();\n  }\nor, in case of external helper, like this:\njs\n{\n  \"resolve\": function routeResolveFn($translatePartialHelper) {\n    return $translatePartialHelper.setStructure(['ui', 'contacts'. 'common']);\n  }\nIt may be something like this:\n``` js\nfunction setStructure(neededParts:String[]):Void\n{\n  parts = getRegisteredParts();\nforeach (parts as part)\n    removePart(part)\nforeach (neededParts as part)\n    addPart(part)\n}\n``\n. Yes, there is a way with$injector.get('$translate')`, but it looks pretty hacky and I'd like to avoid its usage.\n. Hm... It looks like this issue is similar to #613.\nI'm closing this issue as a duplicate.\n. Hello, @Clempops. Can you create a plunker to show the problem in the correct context?\n. Hello, @senthanal.\nIt is impossible to use multiple loaders at the same time. But you can use the static files loader internally inside a custom loader.\n. Yes, something like that.\n. It looks like I'm unable to help you with this issue at the moment.\nMaybe @knalli or @tspaeth will be able to say something.\nHowever, as I remember, there were some issues about reloading before. Maybe, this one is somehow related to them.\n. @senthanal, no, unfortunately I don't remember them.\n. Hello, @tsubik. Thank you for this PR.\nAre there any reasons why this functionality should change the $translate service instead of generating a translation key inside the directive?\n. IMHO, .button.ok syntax looks more deterministic, it is much easier to understand what translation has to be performed in every particular case. So, it is better for debugging and maintaining.\nUPD: Not necessarily a dot, but some indicator to show whether namespacing should be performed or not. Without fallbacks and lookups.\n. Hello, @davmelmeggeo, @knalli.\nI'm not sure that I understand the question correctly. There are some strange things in the provided code pieces, when providers are combined with services. But, however...\nAccording to the given code pieces, what should this function return in case the part was not loaded yet? Or what should it return if the loader is loading data at the moment? Also, should it return a translation table or a list of keys? Should it return a real translation table or its copy?\nAs for events:\nIt is impossible to return keys with the $translatePartialLoaderStructureChanged event. It indicates that some part was added or deleted from the structure, not that the part is loaded. The loader fetches parts only if they are actually needed - when you call use or refresh methods of the $translate service, or when you directly call the loader. Also, it might be useless to add another event to indicate that the part is loaded from the server because parts may beset manually with the setPart method.\nI agree with @knalli - the only practical result of this method is to get a list of translation keys. You might still need to translate them with the $translate service to get interpolation, fallbacks, error handling and other features.\nAlso keep in mind that the partial loader merges parts together according to their priority. So there is no guaranty that a \"foo\" translation key from part \"A\" will not be overridden by the same translation key from part \"B\" in the resulting translation table.\n. Also, what should the method do in case the part is undefined?\n. @davmelmeggeo, most probably you miss something.\nThe only thing which comes to my mind that might require a complete list of translation keys in a part is building some kind of abstract translation tool. The list is required to build a table like this:\nLanguage: _en. Part: _common.\n| Translation key | Translation |\n| --- | --- |\n| foo | Foo translation |\n| bar | Bar translation is present |\n| buz | Buz translation is also here |\nIn this example you don't know what translations are present in the part, but you want to show all contents of it: both translation keys and their translation. In this case you'll probably need to create a special tool to achieve this task.\nHowever, in a common application you actually know what translations are situated in every part. In this case the workflow is a bit different:\n1) You get to some part of the application which uses a set of translations (for example, it could be a route in ui-router)\n2) You add this part to the loader and call the refresh method (angular-translate will fetch all added parts from the server and merge them together)\n3) You can freely use angular-translate's service, directive or filter to translate any translation key which you have in the view or wherever in this part of the application. angular-translate will automatically find these keys and return their translations.\nIn this example you don't need a complete list of translation keys, you don't need to translate them all on your own. You just add a part to the loader, refresh the module and ask it to translate those keys which you need at the moment.\nHave you read our guide? Isn't it possible to achieve what you need using approaches and examples shown there?\n. It looks like this code was broken in this commit https://github.com/angular-translate/angular-translate/commit/aa5f5c979410f22bc821f88cfd3ec4a7938475f6. So we, probably, have to add tests for this case.\n. There was an event emitting in the old version of the code. Do we have to restore it as well?\n. Hello, @rogercoder.\nThis happens because the partial loader fails loading if it cannot load any of the added parts by default. In your case you did not specified a second part of Spanish translation. So, when you try to add this part the loader can not load it.\nBut you are free to override this behavior by specifying an error handler to the loader. Just pass a loadFailureHandler parameter of the loader. Here is an example: http://plnkr.co/edit/cipFeVPGNvJPQ5DXQn3t?p=preview\nWe have added information about error handling in the partial loader to our guide with 2.7.0 release. So, if you want, you can find a more detailed explanation in this chapter at the end of a section about the partial loader.\n. Hello, @jeserkin.\nWhere did you see that?\nAs far as I know, $translateLocalStorage uses browser's local storage, not a simple js scope. See\nmaster: src/service/storage-local.js\n. No. The only information angular-translate puts in the storage is a language key for now. \n. It keeps all translations in the internal map. Why should it put them in a storage? The module stores a language key because it has to persist among requests. But translation files may be changed on the server between requests. So, it is not a stable data.\nIf you want to cache translation files and prevent the module from fetching them each time the page is reloaded, you can use a special method:\njs\n$translateProvider.useLoaderCache(true);\nIt is documented in our guide. So, you can find a more detailed explanation in the Asynchronous Loading chapter, \"Configuration of a loader\" and \"Using a cache\" sections.\nAs for naming... .useLocalStorage() seems to be pretty straight forward. You tell the module which storage to use. But the module decides what information has to be stored on its own.\n. It is not an own storage solution, but rather a light wrapper for a standard feature. It doesn't bring any special abilities or additional dependencies. It doesn't rely on third party components.\nangular-translate allows you to use any storage you want as long as it implements a desired interface. So, you are free to use ngStorage if you want. All you need is to create a custom storage.\n. Hello, @samuelgoldenbaum.\nIt is impossible to retrieve all translations from a namespace. At least because angular-translate doesn't keep them that way. All nested objects you pass into it are transformed to \"plain\" objects with nested keys combined with \".\" symbol. So, {ns1: {ns2: {key: \"translation\"}}} results to {\"ns1.ns2.key\": \"translation}.\nHowever, you don't need to use a service to translate things in views. You can translate things directly by either directive or filter:\nhtml\n<p translate=\"page-somepage.terms\"></p>\n<p>{{ \"page-somepage.terms\" | translate }}</p>\n. Also this thing #1021 may be interesting for you.\n. @samuelgoldenbaum, probably you are doing something wrong. If I understand right, in your example you don't need to use translate filter at all because you've already translated all string with the $translate service. Have you read our developers guide? Also, there was a slightly similar question #1022.\n. Hello, @pmoelgaard. It is already chainable.\n. @pmoelgaard, use can change a storage key by calling $translateProvider.storageKey and $translateProvider.storagePrefix methods.\n. It looks like it is better to have docs in one place. And, as I know, this wiki is a bit outdated. So, I have nothing against this.\n. Hello, @acourtiol. Are you sure that partialLoader doesn't fit your needs? It looks like it does exactly what you want.\nWith the partial loader you can introduce 2 parts (for example). one part may be set manually (instead of $translateProvider.translation()) and the other part will be loaded from the server asynchronously (instead of the static files loader). The loader will merge these parts together on its own.\n. Hi, @sochka. Unfortunately, I'm busy at the moment and cannot suggest anything. Probably, I'll have some spare time to look at this issue in a couple of weeks.\n. Hi, @knalli. I'm glad to see that this project is alive. Unfortunately, I still have pretty high pressure with work and cannot spend time on Open Source :-( Hopefully, some day I'll have an opportunity to work with you, @tspaeth and @PascalPrecht again. That is a pretty valuable experience.. To keep things linked together.\nI have just explained why I think that this is a bugfix here.\n. ",
    "knalli": "Yep. Perhaps we can provide some nice built-ins where the transitive dependencies have to be managed outside? Just an idea, don't now if this will even work.\njs\nangular.module('app', ['ngTranslate', 'cookieStore']).config(function($translateProvider){\n  $translateProvider.registerStore('cookie');\n});\nJust like the XHRs, small bluprints.\n. What if I do not want to use storage? Do we implement a NoOp/Null variant?\n. well, bisect it, see my comment. the specified commit was the good one. ;)\nI can have a look at it later or tomorrow.\n. okay, time was there.\n```\n71d65fcf909147a3c43bbdb945eb0b22ba0ea7a1 is the first bad commit\ncommit 71d65fcf909147a3c43bbdb945eb0b22ba0ea7a1\nAuthor: Pascal Precht pascal.precht@googlemail.com\nDate:   Fri May 10 12:39:51 2013 +0200\nAdd tests for new storage layers\n\n:040000 040000 ddd5e76cff4c5e431653b9eedd3891463149c58b 3ab18ea64f6e14d2198f1a808db3da40f1b0e994 M  ngTranslate\n:040000 040000 a621f954d6b7e5c760d71fae86d2d7a59e098f5a fe03e97be356e0e60e053e5c5b8387b9a4b4f060 M  test\n'bisect run' erfolgreich ausgef\u00fchrt\n``\n. Because the locale storage module is constructed before you set the language. And after you set the language, the locale storage is not being refreshed.\n. Instrumented some breakpoints and the thing will be clear.useLocalStorageonly \"sets\" the storage. Nothing more.\n. Got it, test case wasn't solid cleaned up.\n. With [625b1d6](https://github.com/knalli/ng-translate/commit/625b1d647d1ef7c089cc7359c0f515c831fc4e15), works for me.\n.spyOn` were something like that\n``` javascript\n beforeEach(function() {\n    var store = {};\n    spyOn(localStorage, 'getItem').andCallFake(function(key) {\n      return store[key];\n    });\n    spyOn(localStorage, 'setItem').andCallFake(function(key, value) {return store[key] = value + '';});\n\n  });\n\n``\n. The support for a promise should be only optional and a high-level api of a more baselined variant. For example, I'd be happy to have the complete request config object in my own hand ($http(config)`).\nMy first idea was more simple (w/o a service, which I don't prefer actually) : just apply (on config?) a custom loader like \ncoffee\n$translateProvider.setLoader (langKey) ->\n  q = $http buildConfigWith langKey: langKey\n  return q.success (items) -> perhapsTransformToStandardLayoutFn items\nIn some way, setLoader is more or less your's loadTranslationTable.\nSo, let's say\n1. We need a generalized api for the provider like loadTranslations(Object: config) (explicitly), or like setLoader(Object/Function: config) (implicitly)\n2. We should introduce an own service.. ?\n3. How do we \"connect\" them? Configuration in run?\n. > I'm not sure if I'm getting you right on\u00a0setLoader()\u00a0(maybe cause of my lack of coffeescript syntax skills).  \n\nA method called\u00a0setLoader\u00a0sounds like a way to register one (or more) loader(s) which then be used to actually load the resources.\u00a0\n\nYep, and addLoader / registerLoader would be more interesting.\n\nRelying on this understanding, I think\u00a0setLoader\u00a0is way too nitty-gritty. You know, like, I'm okay with giving a user the full control via any kind of config object, which is maybe just passed through to\u00a0$http\u00a0service. But we should also consider making the usage and readability as simple as possible. Saying if someone just wants to say: \"ngTranslate, I want you to load resources from this URI', it should just work.\n\nThat's already implementation details, anyway: \n1. highlevel api: user provides an url and the server have to response suitable formatted data\n2. lowlevel api: user hooks itself into this.\nActually, we would only provide an own highlevel api based on the lowlevel one. That's it.\n\na) How is it called?\n\nNo idea. That's the lack I had ;)\n\nb) is it just there to tell ngTranslate to load translations asynchronously? Or are there more methods we could put in there?\n\nI think.. yes. Well, adding a promise seems valuable.\n\nc)\u00a0Still: How does\u00a0uses()\u00a0behave? \n\nSame as before? If not available -> load it. That means that uses will be (probably) async, too.\n\nSince it's a method on\u00a0$translateProvider\u00a0to tell ngTranslate which translation table to use. And again, at provider phrase we don't have to a service... Maybe injecting another provider to access translation tables?\nd) Are translation tables still stored in\u00a0$translateProvider?\n\nIf the $translateProvider will be the common key and holder of all data, then: yes.\n\nI think this topic needs more ideas and inspiration..\n\nThat's why I've opened this issue. I've already played a little bit with my idea, but at the point of $http in the config on $translationProvider I noticed that there is something wrong.\n. I'd used your fiddle and extended it a little bit: http://jsfiddle.net/knalli/fSYhX/4/ based on this one 1bc89995c8717c812aa2af987b75bdd4cedf623f\n. Okay, I have a real one now.\nStill missing: test cases, some docu.\n. And I have an open issue: The dynamic text will be refresh only if I click the button again.\n. > If I got it right,\u00a0$ignoreInvalid\u00a0is just there to make sure that\u00a0ngTranslate\u00a0doesn't log warnings when there isn't a certain translation, because it might not be loaded yet, right?\nI don't want break existing API and behaviour. That's all.\n\nWhat do you think?\n\nI don't get it. ;) Performing some magic auto configuration sounds pretty nice.\n\nFirst, treating\u00a0$asyncLoader\u00a0as value service, which is initialized with\u00a0null, seems to be a bit hacky.\n\nAgain, for proposal intention, I don't want to break the existing stuff. Perhaps, the default could be the existing, static one (just like now).\n\nAnother thing is the way a\u00a0$asyncLoader\u00a0is currently configured. Actually a user has full control of how a asyncLoader looks like. This is cool, since lot of control makes users happy. But thinking about the real use cases, there isn't really a case where a asyncLoader doesn\u00a0not\u00a0make an XHR right? So this means, this could be unified, which leads to a much simpler interface.\n\nI would treat $asyncLoader being more flexible.\njavascript\n// loads the given url via ajax\n$asyncLoader = 'german.json'\n// uses the provided data directly\n$asyncLoader = {id: 'en_US', items: [...]}\n// \n$asyncLoader = function(){\n  return somethingFromAnotherService.method(arguments);\n};\nEach of them is baked right into the dispatcher (currently in $translateProvider). This is implicitly (I do not call load, it will be if it is required).\nCalling $translateProvider.loadTranslationTable(key, url) is okay, if we can provide a proper configuration way. It's the explicit way where I have to decide to load them.\n. Perhaps, we could get rid of the async and call it simply $loader. The should-be-coming loader-processor could be handle it async only if the return of the loader function looks like a promise (I don't know, perhaps only duck-checks like async = (angular.isObject(loader) && angular.isFunction(loader.then))).\nEhm, should I go with this and invest more.. or does this seems to be to complicated or to easy or whatever?\n. Last point about $injector. Actually, I have not used this ever before, I just found it while try to access some beans in the module scope.\nDo I have -- as a developer -- another option to register a custom loader? If I get it right, the only way to configure a provider is within a config() block -- or in another provider's / modulesconfig` block.\n. I'll update the stuff.\nDo we need support for multiple loaders?\n. I've implemented registerLoader.\nhttps://github.com/knalli/ng-translate/commits/async-loader\nAlso have added an internal loader for simple urls via GET.\n. But, I have still the issue that (in my demo) the texts with data won't be refreshed asap. Only after a second selectLang.\n. tl;dr (yet)\nhttp://codingsmackdown.tv/blog/2012/12/14/localizing-your-angularjs-app/\nedit.. ach, you know it already ;)\n. 1. Who decides which loader will be used?\n2. When and how will be the loader definition transformed into a real loader? I like :+1:  the DI-way much more than my approach.\n. Now, I don't get this. I'm still missing the key, the glue, the clue.\nGive me a small example how to register and use it outside in app x?\n. Beside of the issue: Why is it actually required to provide a loader with a langKey:\njavascript\n$translateProvider.registerLoader('en_EN', ['$http', function ($http) {\n  return $http.get('someUrl');\n}]);\nSeriously considerated I have hopefully placed my files with in a structured manner. Obviously, I would have to provide a pattern like lang_{langKey}.json.\nAnyway.\nOkay, if I've understood you correctly: The problem is the module itself fires the translate calls implicitly? Because of that an async loader probably would be never fulfilled before angular boots into the app the first time, there have to be an initial (defined) non-inited state where translations could not be resolved (linking back to default, key). In that case, this state must be determined.\n. Okay, could we make a check list of todos for the async stuff? I would try to work on this weekend, however, I am running low of time this one.\nThe stuff is in canary already, that means the older async branch is out of date? Should we rebase the canary with your master?\n. 17/104 tests failed. Is that correct?\nSo, I've reviewed the stuff. A little bit to specific and featureless, but later on that.\njavascript\n    if ($asyncLoaders.length === 1 && typeof($asyncLoaders[0].langKey) === 'undefined') {\n      $injector.invoke($asyncLoaders[0].loadAsync).success(function (data) {\n        $translationTable = data;\n      });\n    }\nI'm still wonder why the conditions $asyncLoaders.length is 1 or unless langKey is defined.\nAnd: Usage of of success isn't optimal because that would disallow any loaders other than based on $http. \njavascript\n    $translate.loaders = function () {\n      return $asyncLoaders;\n    };\nFirst: Why should we expose the internal loaders list?\nSecond: Either this should be immutable -- which means that this have to be a copy of the list (angular.copy) -- or we have to deal with the situation that someones changes the internal loaders list -- which means we could never make a presumption about the state, size or validity of the list.\nIf we make the asynchronous loader definitions more abstract (and flexible), we can actually avoid the problem with $http and unit tests (I understand this correctly: that's the problem right now?). If we can \"garantuee\" loading of a translation map will be happen, resolving response will be correctly and firing events on data change will be done (btw, still missing this point), then $http will be only an implementation detail. And if the cannot test this one specific piece of code, it will be much less uncovered code that at this moment.\n. Regarding of my last paragraph:\njavascript\n      beforeEach(module('ngTranslate', function ($translateProvider) {\n        $translateProvider.registerLoader(['$q', function ($q) {\n          var data = {key: 'de_DE', items: [{'Hello World': 'Hallo Welt!'}]};\n          return $q.resolve(data);\n        }]);\n      }));\nFor a scenario testing the big picture, this would be enough.\n. long today, perhaps this evening.\nokay, I'd change the api and test for a more general/abstract variant.\n. @PascalPrecht Can you update the canary to the latest? Tests are irrelevant..\nI'd re-base the stuff then.\nAnyway: https://github.com/knalli/ng-translate/tree/canary\n. Okay :)\n\nThe origin canary is already up-to-date.\u00a0\n\nWell, the Pull Request Wizard comes up with several stuff tells me that there is a difference between master and canary...\nForgotten to mention this, the commit also adds three additional options:\n1. auto loading a language based on an initial value\n2. a default language key if nothing else could be resolved\n3. an optional highlighter for unresolved language ids (translateId)\n. Stuff like the latest dot files? .bowerrc, .editorconfig?\n\nMaybe tomorrow's eve?\n\nProbably.\n. later, this eve.\n. fyi: Found last week: http://rabidgadfly.com/2013/03/plunk-pen-or-fiddle/\n. What does than mean for example? I'd already some problems writing test cases w/ http.. \n. Yeah. And I thought it was my fault. I'm still diving into ng-tests..\nAnd what would be the proper solution?\n. Should not this be handled by the key or namespace?\n. In other words: If value is not a string but an object, we will treat the object's property text as the value? The context will be technically irrelevant?\nActually, this will potential break the namespacing feature. It is conflicting.\n. What if I want this here:\njavascript\n$translateProvider.translations({\n  \"dialog\": {\n    \"title\": \"Form\",\n    \"context\": \"Context\",\n    \"text\": \"Please confirm...\"\n  }\n});\nFor standard usage\nhtml\n  <div>\n    <h2>{{'dialog.title' | translate}}} ({{'dialog.context' | translate}})</h2>\n   <p>{{'dialog.text' | translate}}</p>\n  </div>\n. ? :) Ehh..\n. Well, but sometimes an \"OK\" is not an \"OK\". Using global ids in a complex app (UI) isn't really maintable.\nActually, that could be done in a custom (async) loader, or if we integrate a transformer step (I'd mentioned this already in the async issue days ago).\n. Well, that's my experience. We have a big Ext JS application which had beed translated via more or less one big file, with \"global keys\". The problem is, that both developer and translater have to guess which (global) name is the perfect one. Let's say, the dialog is configured with BUTTON_TEXT_CANCEL (which will be Cancel, I guess). And the translater or the product management or a general UI improvement requires that it should be labeled to Revert in that one dialog. Do you really want to change your functional complete component because of that shitty wrong label name? :) Described the problem, now multiply the one component up to 4-500 components. That's why we switched, in this example, our global translations (which were sometimes already used \"namespaces\") into a effective component based translation (de facto component property overrides).\nBut anyway: That should be no problem, if we just introduce something like a small transformer component. Default one is null or return value. Simple, and straight forward.\n. Interesting discussion.. ;)\n\nIn your case: how about just introducing another \"global\" translation ID \nfor \"revert\"? \n\nAs I said already, this would required an additional change on the origin component, the code base.\nWe can use another example: You have a translation for a longer text. Under some circumstances and some languages the length of a translation changes. So you have to decide individually the translation for the specific use case. Same to column headers: The full qualified header \"Critical Threshold in Percent\" is too long. However, as a form label it would be okay.\nBeside of this, globals are not maintainable and will not be memorizable.when scaling up.\n. Okay, but that's really some additional magic beyond a simple alternative data transformer.\n. Sounds good. What about #4? Actually, these features are nearly identical, technically: both intercepts loading.\n. Ok. Waiting for your decision about #23 and #25 because they would be conflicting each other.\nAfter this, I would introduce an optional argument:\njavascript\n$translate.registerLoader('locales.php', function (data) {\n  // the default but this could be changed\n  return data;\n});\nSo, to implement this feature we only have to flatten down the object structure to dotted names. Same way, i.e. with short cuts: $translate.registerLoader('locales.php', 'dot2flat') or something like this.\n``` coffeescript\nmocking\nangular = isObject : (o) -> typeof o is 'object'\nflatObject = (data, path = [], result = {}) ->\n  for own key, val of data\n    if angular.isObject val\n      # recursive only if object\n      flatObject val, path.concat(key), result\n    else\n      keyWithPath = if path.length then \"#{path.join('.')}.#{key}\" else key\n      result[keyWithPath] = val\n  return result\nconsole.log flatObject (a: b: (c: 1, d: 2))\n```\nObject {a.b.c: 1}\nObject {a.b.c: 1, a.b.d: 2}\nC&P in coffeescript if not aware..\n. I thought it would be better to couple the things because the structure is content/url/data specific.\nSo, you would suggest a registerTransformer(transformer) ?\n. Ah, you mean every time (at default).\n. Well, I think you make this one a bit to complicated.\n\nAnd this is already working without having a real namespacing functionality.\n\nYes, and if I had understood the request correct, this is enough. The only missing thing is that if the response contains\njson\n{\n  \"componentA\" {\n    \"form\" : {\n      \"label\": \"foo\"\n    }\n  }\n}\nit would not be found. So, when resolving the response an additional transforming must be happen.. and everything is okay.\n. IMO. That's because I'm speaking of data transformer  all the time. ;)\nI think it is better to avoid any inner (heavy) structure changes just because the origin is not compatible.\n. @cehoffman have a look at it.\n. lol. My origin solution was such an interceptor and was convinced by you to implement this auto-magical. And you, reversed. Oh my dear ;)\n. Sounds like a plan.\n:+1:  for \n\nYeap. I also thought that transformInterceptors could work as similar to\u00a0$httpProvider's response interceptors.\u00a0\n. Should it be not more simple to use expression in the translation directly? In that case, you are more flexible with language/culture specific stuff (0, 1, 2, more than 1, etc.) Interpolated translation, actually.\n. Well, but if support for multiple pluralize variantes is required, there will be no other possibility. Either the translation step depends on exactly one variable (one, few, many, none, other) and can be managed.. or it depends on more than one (which means string concatenation automatically ) and it must be done by the translation setup itself. Any suggestions?\n. Yep, \n(\u201c$1 by $2\u201d)\u00a0\n\nwhere $1 and $2 are themselves variable is exactly what I mean, too.\nSo, instead of\njavascript\n{\n  'beerMyDear' : 'beers drunk by {{users}} users.'\n}\nit have to be something like\njavascript\n{\n  'beerMyDear' : {\n    'one' : 'beers drunk by one user',\n    'many' : 'beers drunk by {{users}} users',\n    ...\n  }\n}\nBut to support multiples, that have to be dynamic. Proposal:\nProblem:\njavascript\n{\n  'beerMyDear' : '{beers} beers drunk by {users} users.'\n}\nSolution:\njavascript\n{\n  'beerMyDear' : function (values) {\n    // bullshit impl, just demo\n    if (this.many(values.beers) && this.many(users)) {\n      return '{{beers}} beers drunk by {{users}} users';\n    } else if (this.one(values.beers) && this.none(users)) {\n      return 'one beer drunk by no user';\n    } else {\n      return '{{beers}} beers drunk by {{users}} users';\n    }\n  }\n}\nthis' scope is directed internally to an util which provides simple convienent functions none, one, ... (booleans).\n. Last one to implement \"statically\" would require a permutation of [none,one,few,many,other] and the params [users, beers] which would result -- drastically and pessimisticly -- into 25 combinations. I think a function is more comfortable.\n. Have a look, will look later this eve here again. Now, out.\n. @mormegil-cz  @lpaini  please take a look.\nI'm still not sure if this is the ideal solution. Could we please build a test table of the results? Something like\n| apples | pears | result |\n| --- | --- | --- |\n| 0 | 0 | No apples and no pears. |\n| 0 | 1 | No apples and one pear. |\n| 0 | 2 | No apples and 2 pears. |\n| 0 | 5 | No apples and 5 pears. |\n| 0 | 10 | No apples and 10 pears. |\n| 0 | 100 | No apples and a lot of pears. |\n| 1 | 0 | ... |\n| 1 | 1 | ... |\n| 1 | 2 | ... |\n| 1 | 5 | ... |\n| 1 | 10 | ... |\n| 1 | 100 | ... |\netcpp.\nI'm not familiar with multi lingual numbers written-out (one, two, three instead of 1, 2, 3), bit this could be achieved with an (optional) global map/switch. \nThe built-in solution by AngularJS (ng-pluralize) has another feature: the offset. Do we have to re-implement this one? That one requires the counter have to be modified (by the offset) to compute the 2nd part of the translation\n. Well, just some additional thoughts of myself.\nWe could simplify the thing if we make another approach.\nThe main idea of pluralize is that the translation itself decides the pluralization.\nSo, let's start with this one.\njavascript\n{\n  \"apples_and_pears\": \"He eats {apples} apples and {pears} pears.\"\n}\nIn order to get this one pluralized, we can extend the inner interpolated values.\njavascript\n{\n  \"apples_and_pears\": \"He eats {apples: {'0': 'no apples', '1': 'one apple', 'other': '{0} apples'}} and {pears: {'0': 'no pears', '1': 'one pear', 'other': '{0} pears'}}.\"\n}\nBecause the keys of the inner object are only strings, we can easily extend them with additional keys. The open point is only: How we get the keys and their interpretation? If every language and locale has its own (valid) keys, we cannot assume anything. In that case, the language provider (in this case: the language file itself!) has to provide this. I would suggest a global key in the language file with a function which can be implemented. That's one optional code. Once written, the translator shouldn't touch it any time.\n. fyi http://jamuhl.github.io/i18next/pages/doc_features.html#plurals\nnot for multiple plurals, but single ones.\n. And coming back to topic: is this an extension or replacement of ng-pluralize?\n. > > As you can see, not only that messageformat does not come with the features angular's interpolation provide,\nThat's uncool. :( A different syntax.. well, that could be archived.. even with a little bit regular expression maybe? I am not familiar with that MessageFormat.. are you able to hook into its own interpolation?\n. Anyway.. so long I do not require useMessageFormatInterpolation(), everything works like before. Seems to be fair enough.. okay!\nHow we archive the dynamic mapping of \nhtml\ntranslate-interpolation=\"X\"\nto \nXInterpolationService or so?\n. Well, isn't using $translationChangeSuccess or even a dedicated interface method in the have-to-be-provided-service the smartest option?\n. no. wrong branch\n. > IMO private stuff shouldn't land in a public documentation.\nWhat do you mean?\nOkay, it was only a proposal. Because it is an open source plugin, on Github, you know. ;)\n. > > Of course its open source, and every single PR is gold. Nevertheless, things have to be discussed. :)\nYou got me wrong now ;)\nI mean open source and Github in context of people who read this code, maybe. \nMy PR is irrelevant :)\n. Well, Groc produces a much more nice interface. But, however, this one avoids the dependency and the (local) generated files.\n. wrong one.. grrr.\n. Alternatively, instead of returning an error, just returning silently?\n. Well, actually, no. ;)\nIndeed, this is the one why I was actually looking into the code.\nError: Argument 'fn' is not a function, got undefined\nThat's happening because there was no check if there is even a loader function.\n. That is new with 0.6 because the (async) loader will be used w/o any condition or restriction.\n. Then there is something else buggy.\n. Ah.\n\ninvokeLoading should only be called, when a loader exists. Then $loaderBuilderFn is always truthy.\n\nThat's not the case.\n``` javascript\n   $translate.uses = function (key) {\n  if (!key) {\n    return $uses;\n  }\n\n  var deferred = $q.defer();\n\n  if (!$translationTable[key]) {\n    invokeLoading($injector, key).then(function (data) {\n      $uses = key;\n\n```\nAlways being called regardless $asyncLoaders state.\n. What should the developer do if he do not want to use the async loaders anyway? There isn't any opt-out..\n. And what about an invalid translation id? This will be caused into this weird exception above. It sounds not so well designed?\nSure, we know what this mean.\n. Before we've introduced asynchronous loading, selecting an invalid or unknown translation id was only a problem with a logger or a debug statement.\nNow, this will result in an exception by design.\nAny Code? No, I'm going through this... in theory.\nWell, an example: Imagine you have defined en_US and de_DE, statically and without any loaders. Image, you don't what to use them. If you select another language (directly or indirectly by account's language) you got a small error log message in <0.6. Not so good, but the page stills works. Since 0.6, you throw an error with in JS' language core exception. I don't think that's idiomatic.\n. Hey, a rival of my defaultKey. ;)\nTechnically, I'm wonder if the PR is correct because commits are split (see by travis build) and the merge commits (will that merge correctly?)\nIn general, I'm with it :+1: , but under which circumstances the language will be loaded twice? That case should be covered by a test. \n. Got it. ;)\n. In what case an app must change this key at runtime?\n. Hello {{name}}! will be complicated in Angular, won't it?\n. I have this one.\n. better?\n. done\n. the dev will do it.\n. @firehist you should provide more details about your test suite/code because the error message already told you: your test case does not work as expected. Either you setup is not correct (the requests should be expected) or your case is not correct (the request should not be fired). Personally, I would guess first option.\n. Have a look at https://github.com/PascalPrecht/ng-translate/blob/02b488a1e356212ba0a4ab502bfd8be920a0d277/test/unit/translateSpec.js#L738\n. The links points to our test setup where httpBackend mock is instrumented correctly.\n. I've provided a link, scroll a little bit upwards. It's in the test sources of the module itself.\n. Well, we have not a working test coverage for AngularJS in our projects yet. In context of the usage of $translate, we either mock it completely with an empty object (because not used in a non-fully coverage test) or it is configured separately with a custom loader.*\n- I would say that is not an issue. Because, you do not have to verify that the loader itself works (\"Do not test the framework\" mantra) but only that any loader works.. i.e. use a dedicated callback function.\n. What about trim()?\nAnyway, a good point you've catched. ;)\n. Oh, really? My wtf level for IE is already  exceeded this week.\nAs of http://kangax.github.io/es5-compat-table/ trim() is not supported in\nIE 8, wasn't sure this could matter ;-)\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/PascalPrecht/ng-translate/pull/43#issuecomment-17778366\n.\n. see #3\n. 1. What about a chain/list of handlers?\n2. What about a similar list of handlers for success? Currently, this is a $rootScope broadcast.\n. Example for what? :)\n. Just brainstorming.\n1. Instead of one single failure handler, it could be list of handlers.\nReason 1: Currently we cannot use our own failure handler (apart from simple $log) because of same reasons like success (see down). Reason 2: Currently different independent handlers must be implemented  in one single.\nWe can add another api or just extend this one to be optional adding (default replace just like before)\n``` javascript\n  this.missingTranslationHandler = function (functionHandler, noReplace) {\n    if (angular.isUndefined(noReplace) || !noReplace) {\n      if (angular.isUndefined(functionHandler)) {\n        return $missingTranslationHandlers[0];\n      }\n      $missingTranslationHandlers = [functionHandler];\n    } else {\n      if (!angular.isUndefined(functionHandler) && functionHandler === true) {\n        return $missingTranslationHandlers;\n      } else {\n        $missingTranslationHandlers.push(functionHandler);\n      }\n    }\n// supporting\nfunction fn() {}\nequals([], missingTranslationHandler(true));\nequals(undefined, missingTranslationHandler());\nmissingTranslationHandler(fn);\nequals(fn, missingTranslationHandler());\nequals([fn], missingTranslationHandler(true));\nmissingTranslationHandler(fn, true);\nequals(fn, missingTranslationHandler());\nequals([fn, fn], missingTranslationHandler(true));\n```\n* 2. Just like missingTranslationHandler, but for success.*\nBefore:\njavascript\n    $rootScope.$broadcast('translationChangeSuccess');\nAfter:\njavascript\n    $successTranslationChangeHandler();\n(Ore even a list because we will actually relay on that broadcast).\n. @PascalPrecht Gotcha. Renaming a project while commenting isn't supported by Github. No redirect, only an error ;)\n. Oh no wait.. the mail link is broken.\n. @PascalPrecht http://stackoverflow.com/questions/7180099/including-js-from-raw-github-com perhaps..\n. :+1: \n. Actually, IMHO, it is sometimes more comfortable to dev/test/try out something against existing demo or samples.\nAnd, separated demo at Plunkr has one drawback: They are not version aware. It is sometimes really hard to find out how a piece of software should work in a non-latest version. You won't support Plunkers to all version, will you? :)\nYeah, we have tests. But nobody want read them to find out how the plugin works. At least, they aren't reality aware. They are the technically reference tests.\n. I'd say: Each demo case should have its own environment (they will share all common js sources) with a specific name about what it will demonstrate.\n. Yeah :+1:  :) More structured than before, with additional comments. Looks very good.\nI'd not use white spaces in urls.. sometimes has issues. Replace it with _.\n. We have already a server for such purpose. \nIf you start grunt serverit will invoke a small express server. After start just open open localhost:3005/demo in your browser.. it even includes an index view!\nIn case you really need to use NodeJS, we can apply an additional server.js right into this.\n. If you only need static files served by a server (i.e. for XHRs), just place the files in the corresponding demo folder. You can fetch them with localhost:3005/demo/<yourdemo>. Easy.\nFor routing, you can base your stuff on my #55.\n. The routes (you have already made them) are stored in demo/server_routes. But I just notice the open PR #54 which contains a server, too.\n. Well, Batarang is sometimes just like The Doctor: don't trust it.\nI'd an issue (with a version prior the current one) where loading a list of items produces a browser ui timeout of several seconds (up to 10).. but without it only a breath.\nIf you can reproduce the issue with Batarang, however, I'd suggest to file a bug to Batarang itself.\n. My concerns about this are\n1 Required introducing of reserved keys\nThis example will not work any more if the feature would be introduced because the translation reader could not handle both\njavascript\n$translateProvider.translations({\n  \"dialog\": {\n    \"title\": \"Form\",\n    \"context\": \"Context\",\n    \"text\": \"Please confirm...\"\n  }\n});\nhtml\n  <div>\n    <h2>{{'dialog.title' | translate}}} ({{'dialog.context' | translate}})</h2>\n   <p>{{'dialog.text' | translate}}</p>\n  </div>\n2 What about recursions?\njavascript\n$translateProvider.translations({\n  \"dialog\": {\n    \"title\": \"Form\",\n    \"context\": {\n      \"context\" : {\n        \"text\": \"Text\"\n      }\n    }\n    \"text\": \"Please confirm...\"\n  }\n});\nAllowed? What is expected? What should we do?\n3 In combination to the given points, additional hints like comments will bloat them even more up. IMO :)\n. Actually, yes.\n\n. Yep.\n. Apart from the request: If you mind, you could hook yourself in the success event. Before this, you should only a splashscreen / loading mask.\n. That is for AngularJS 1.2+, isn't it?\nTranslate depends currently on stable angular ( which is 1.0).\n@pascalprecht perhaps introducing the next major with early 1.2 support?\n. Another approach, more easier?\nWould it be not easier using a name spaced structure where the namespaces were asynchronous be fetched from the remote (server)? Let's imagine a big language file (a tree) on the remote, and the client will only requests parts (child nodes) of it.\nFor example, the application is aware of partial and async languages. After requesting the first one (i.e. with no more details), the response (indirectly of $uses(lang)) of url?lang=en could be\njson\n{\n  \"registration\": {\n    \"username\" : \"Username\",\n    \"password\" : \"Password\"\n  }\n}\nSome time later, the app switches into another section and will require additional data. Said this, the application gives the translation engine a hint: $translate.$prefetch('dashboard') which results into request (url?lang=en&module=dashboard) with a response like\njson\n{\n  \"dashboard\": {\n    \"title\" : \"Title\"\n  }\n}\nSo, in a summary:\n1. make the async loader (for urls) make aware of the \"hint\" or \"module\"\n2. introduce provider's $prefetch(namespace) which will invoke implicitly a loading and would itself update the page's content. Promise, sir!\n3. This could even support a master-detail separation of translations: You only want to load the deep dashboard.global.administration.form.create labels on demand. If the remote supports and understands that kind of a \"hint\", this would be no problem.\n. Loading the current namespace ? Loading all namespaces? It would be even possible to use multiple namespaces in one fetch..\n. World not be a simple transformer enough?\n. Instead of adding direct support for another format, you could generate\n(grunt?) a language file based in your preferred transifex file.\nAm 15.06.2013 um 15:12 schrieb skivvies notifications@github.com:\nwat\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/PascalPrecht/angular-translate/issues/72#issuecomment-19496280\n.\n. Actually, I didn't know something about transifex until now. What is the default format used in transifex? I still didn't get this.\n. forget my comment.. it's too late.  ;)\n. Yeah, that's actually correct.\nLook at https://github.com/PascalPrecht/angular-translate/blob/c09d1dbe71d4260c1e88c6b21cf9987175bc2a0f/src/translate.js#L515-530 you will see that $uses will be set after and if (and only if) the translation loading process was successful.\nI think it's not ideal to return a value (of $uses) which isn't \"confirmed\". But we could perhaps introduce something like $proposedUses or better $proposedLang.\n. But Not in the existing API $uses? Then again, we would have to\nintroduce something new like getLang.\n. That would change behavior of $uses(). How to get a \"confirmed\" language?\n. $translate.proposedLanguage() returning null (if no outstanding) or $whatevernextLang when in loading... ?\n. Yeah.\n. Short, more later: so you know\nhttp://www.yearofmoo.com/2012/11/angularjs-and-seo.html ?\n. html\n<h2 title=\"{{ 'HEADLINE' | translate:{value:'THIS ONE!'} }}\">Hover me!</h2>\nAnd \njavascript\n'HEADLINE': 'Introducing ngTranslate also with params like {{value}}',\nJsFiddle: http://jsfiddle.net/knalli/MBuny/2/\n. I'm a little bit confused: Where is the new content?\n. Okay, currently 270 chars minified content could be included built-in to simplify the module structure. I'm with it, absolutely.\n. Can you confirm this https://github.com/angular/angular.js/issues/5473 is not affecting you?\n. you should make the branch from canary, actually...\n. > If think we should support both If-Modified-Since and Etag since I've seen some servers not handling one or the other.\nYep, prefer both, too. For example, Etag is a by by-product in our application server already and does not require any application internals work. Some cache-servers are doing the same.\n\nAs I know, browsers can cache xhr responses, but do all of them do this equally? \n\nAs far as I know: Forget it. Perhaps I'm a little bit paranoid, but working with browser for several years I will never trust the browser cache. Appending a stupid \"timestamp\" to each XHR is insane.. but the only option to ensure  all browser will do a real reload. If I define a cache XHR.. perhaps they will be cached. \n\nIs it possible to keep translations into browser's memory instead of loading it from server? For example, maybe it's possible to store the current translation table in local storage instead of loading it from the server (just like a language key is stored).\n\nSounds great. Will be limited by the size of the LocalStorage itself (which depends on the browser and device), but would be the best option, I think.\n\nOr, maybe, it's possible to do such trick with a server configuration, some request headers or so on. In this case, could we provide some tutorial (or something like that) how to achieve such behavior for different technologies?\n\nOther headers like If-Modified-Since and Etag? No, I don't like that. ;) That would be proprietary and duplication of the existing ones.\n. Get your point. Okay, ideally, in the world of HTTP, the browser does all caching stuff for you, not the application in the browser. Things like If-Modified-Since and Etag are being used and applied transparently when using matching urls.\nServerside, a lot of servers or frameworks have support for these techniques. Which means, that they are already active or easily enabled.\n. Why not ;)\n. Ehm.. @PascalPrecht : And why has angular-translate a dependency to ng-cookies?  What is the purpose of angular-translate-storage-cookie?\n. I meant: Why should angular-translate have a dependency? Should not this be handled by the angular-translate-storage-cookie?\n. Is this not the job of bower itself?\n. @artdias90  Could you please elaborate this a litte bit?\n. A filter cannot \"watch\" for changes, that's the concept of a filter in AJS. It have to be re-invoked by another institution like a template.\nTreat a filter like a function. A pure filter (like the default in AJS 1.3) is function without knowledge about the context (it only sees the input), whereas a stateful filter (and like the behavior of AJS <1.3) does have knowledge about the scope. Anyway, all filters will be invoked by AJS if it means it would be right. The filter itself cannot cannot wait/block (no promises or callbacks) and cannot watch to or for anything.\nSaid this, it is the responsibility of you template or component or directive or whatever to notify about scope changes. Standard AJS components will do, but especially external adapters (jQuery!) have to ensure these updates will be added, too.\n. <input name=\"login_form_email\" type=\"email\" placeholder=\"{{'login.default_email' | translate }}\" required> will work in template i.e. included in standard directives. But if the template's compiled HTML will be used outside of AJS (i.e. a possibility in some, but not all jQuery plugins), the bridge of scope changes/updates have to be added manually. Either follow the principles of the framework, or you have to accept the tradeoff.\n. Correct. \nHowever, I would prefer an assigned function definition. Anyway, a function block does not require a semicolon.\n. This is perhaps related to #511 \n. Hi @AqquaBug , thank you for using angular-translate!\nIn short: In the example, just like translating message.author you can use translating for message.body as well. You have to provide such translations: http://jsfiddle.net/ofawsL4m/\nI hope I could help you!\n[ Please open a new issue future. They are do not billed for anyone ;) ]\n. @tspaeth Please have a look, perhaps as PR. I would suggest the optimization by 1.22 is it will only for the collection, but not for the filter (which should re-invoked when languages or scope changes). Should be also checked against AJS 1.3 and explicitly $stateful marked  filter.\n. @tspaeth  can we close this?\n. Based on which decision points I would use get or getAsync?\n. > It depends on wether your storage API calls are asynchronous or not\nIntention of my question was: I have to know the implementation details when using an Interface API. Additionally, \"we\" have some common places where method is called in cases we do not know that?\n. We don't have a solution for this yet?\nWhat are the disadvantages if we declare get returning a promise in a next major or minor release (if semantic: only major)?\n. Could you please show me the line in the code? I don't know which line 26 you mean.\nI've found only this 4 occurrences in the current code.\n\n. Thank you anyway. Glad to hear it is working for you now.\nps: I've updated your comment using diff highlighting.\n. Well, most usage will be the safe way just like ng-bind will be. If we want to go the same way as Angular goes (and I would prefer that actually, because that's a philosophy of the framework), we would have to introduce a similar opt-in feature like ng-translate-html-unsafe. And this one can use the new way of Angular, right @PascalPrecht ?\n\nThis would give the user the full control of what's happening when a translation contains unsafe contents. An alternative would be to implement automatic HTML detection within the currently used interpolation service. \n\nWell, a bottomless pit. / Ein Fass ohne Boden.\nBeside of this issue, I would go further.. implementing this as a feature for Angular 1.2 only to avoid bad workarounds (an own interpolation service?) Perhaps we/you should introduce 2.0 for Angular 1.2 only and maintaining the 1.x baseline for Angular 1.0.x folks some time. Do you have already plans for an early support of the upcoming stable release?\n. Actually, I still don't get this one right. Is this a revival of our probably longest issue discussion about pluralization? Where is the beef?\nI'm a blockhead. = Ich habe ein Brett vor'm Kopf.\n. Ehm, okay.. or not okay. :) It's okay, everyone's idea, solution or advice is welcome. Including yours, do not making yourself so small.\nBut I don't get the real advantage. It's not that I think this is a needless feature, but because I still don't get it.\nOur concept is/was basically a string replacement with interpolated params, e.g. {'Hello {{name}}!' | translate:user }.\nWhen supporting something like pluralization, we have introduced an adapter for MessageFormat. Unfortunately, that uses a slightly other syntax is not AngularJS aware: {'Hello {name}!' | translate:user } (of course, an example without using pluralization but demonstrating it is not an AngularJS expression). (@PascalPrecht  please correct me..)\nBack to yours: What is the effective usage of your solution or idea? Your last example of code (demonstration only), I see a list of definitions of keywords. For each language, I have to define them. What are these words, \"who\" defines which ones are valid? They are not new for us, I can remember 5 of them in other issue discussion ;)\nBut I think it is not like issue.. so what is the difference?\n. So, the question is whether this solution is implementable smarter than messageformat? I do not know, I only see an unavoidable set of rules. \n. The shortcut feature looks fine. \nWell, in real world that is a feature for the translator only. The server is \"zippy\" hopefully.. :)\n. > > Okay, since 2 of the best team agreeing with these features, democracy is on your site\nLOL :cat: \nAll fine, both things (linking too). \n@komakino look against for code styling (minor issues), actually, it should be marked by the lint tests automatically.\n. Well, a typical AngularJS has no server part... ?\n\nLet's say you have 100 translated pieces of text on the page. Every single one of them now requires their own watcher and is going to exponentially ruin performance.\n\nMh, well. Finally, just today we have introduced angular-translate in our app. \"Slightly\" bigger than that silly small number of 100 (sorry for that ;)). So yeah, I think we will add some performance stuff in the next weeks. That includes a better solution for escaping issues while having dynamic values (see #147).\nI think, we could introduce a behavior for this.. I've played with this, but that's not final: 69467b19\n. Yep, I also like this idea.\n. Yes, I do not see any problems why not enrich the events' payloads with some details (like the new current language). However, the current workaround (fitting in your example) would be a $rootScope.currentLanguage = $translate.use() which is only one additional function call.\n. Not yet. Until now, you cannot use the directive translate (i.e. <span translate=\"key\"></span>) because the result will be escaped automatically. Same for the filter.\nHowever, that does not mean you are helpless. You can create an own directive (or controller function) which calls $translate() and binds the result with ng-bind-html-unsafe. But you should ensure every content of parameters have to be santinitized/encoded by your own!\nFor AngularJS 1.0 (and 1.1), a solution could be\njavascript\nangular.controller('mycontroller', function($scope, $translate) {\n  $scope.showDialog = function (unsecureContentByUser) {\n    $scope.labels = {\n      // escaping is important!\n      title: $translate('key', yourHtmlEscapingFunction(unsecureContentByUser))\n    };\n    $scope.dialogVisible = true\n    ...\n  };\n});\nhtml\n<div ng:show=\"dialogVisible\">\n  <h2 ng-bind-html-unsafe=\"labels.title\"></h2>\n</div>\nIn AngularJS 1.2, we could (actually, we have to because ng-bind-html-unsafe is not any more) achieve that internally with the new $sce module (http://docs.angularjs.org/api/ng.$sce).\n. @PascalPrecht any plans for AngularJS 1.2 specific feature support? translate 2?\n. Just for the record: @PascalPrecht's solution is okay until you do not apply interpolated params.\n. your 'bar' isnt escaped?\n. Yes, it works with 1.2.\nWhat do you mean with \"adjust\"?\nYou have to make a (persistent) resolution for a specific version.\n. That one would auto load a future 1.3, too. That unstable version would be not okay.\nAm 25.09.2013 um 08:45 schrieb Jonas notifications@github.com:\n\nI thought of a version range like:\n\"dependencies\": {\n\"angular\": \"~1.x\",\n}\n\u2014\nReply to this email directly or view it on GitHub.\n. No, regarding the current versioning, 1.3 would be an unstable like the current 1.1.\n\nLike I already said: Yes, you have to make a (persistent) resolution. Persisted right into your bower.json. If you are working with several jQuery plugins this is more or less the same.. they all require different versions from 1.6 to 1.10 or even latest 2.0 (which is not very comfortable).\n\nBut because of this message I wasn't absolutly sure that angular-translate is compatible with Angular 1.2.\n\nI would say: It should works. We have both (AngularJS 1.2 and the current translate release) in a project in use.\n. Upgrading to 1.2 means\n1. Extend the version range for 1.2 i.e. ~1.0 ~1.2\n2. Add additional dependencies which are new in 1.2 like angular-resource but not exist in 1.0\n3. Both steps must be applied to all modules of angular-translate\nSo, I think making a local resolution in your bower.json still is the best and ideal recommendation. Said this, the module is compatible with 1.2\n. Yep!\nAdditionally, current versions of bower ask for a resolution (if version conflicts exist) and will write it permanently to bower.json if you want.\nVersion conflicts are not mad, they are only conflicts. In bigger projects this is normal.\n. @JMDidon  Please create a new issue and append a demo for this case.\n. I don't get the issue. Where is the problem?\n. Oh, in the mail, your text was stripped of the HTML tags. ;)\nOkay, at the moment you have to compile the stuff on your own with $compile. Take the example at http://docs.angularjs.org/api/ng.$compile (in Tab scripts.js),  and build a small helper directive on your own. That works. More or less this is double-compiling.\n. We had the same problem in our project using this extension. Because of the same problem, my co-worker have made a work around.\n1. A custom compile directive (see link) which compiles a translation label string (i.e. <user>{{username}}</user>).\n2. This one is used in the view (i.e. yourprefix:compile=\"key\")\n3. Currently in a controller, the labels are translated by angular-translate: $translate(key, args).\nOne drawback with the custom \"hack\": If the language will be changed, the workaround's controller module has to listen on the $translateChangeSuccess event to reload the labels.\n. @PascalPrecht perhaps we could integrate this with an additional flag (to avoid unnecessary compiling)? Something like <span translate=\"my.label.with.directives\" values=\"user\" translate-compile></span\">?\nJust brainstorming and will be part of another issue.. I will look into it later.\n. https://github.com/PascalPrecht/angular-translate/blob/26e3df17c810aee7c8f3d290e4678eb873a2fe6b/test/unit/directive/translate.spec.js#L417-425\n. 1. Voting for translate-value-* avoiding any namespace issues.\n2. The directive must look for all attributes on linking time (all attributes starting with translateValue\u2026\n3. To avoid additional performance overhead, I would recommend NOT to add more watchers but instead extend the existing watcher expression. Going with me?\n. Context \"point 3\"\nShould work?\njavascript\nfunction link (scope, element, attrs) {\n  var values = {};\n  for (var key in attrs) {\n    if (key.substr(0, 14) === 'translateValue') {\n      values[key.substr(15)] = attrs[key];\n    }\n  }\n}\n. But strange I got no mail on that fail. :(\n. Oh, that's so uncool. The order of attributes are different on Chrome and Firefox.\n. @PascalPrecht  the tests are fine, I can refresh if the auto merge won't work. Is there still an open thing here? What should be discussed in detail?\n. ping #184\n. Okay, no problem so far, was only unsure what's going with that one ;)\nI don't like to add additional watcher/compiling stuff if it is avoidable. Perhaps your solution will cover that..\n. updated\n. yep, tomorrow. Travis already covered a broken merge. :/\n. Are you sure you will merge this stuff? I had a deeper look into it.. phew. ;( I'd perhaps anticipate a restart..\n. what do you want to show me there?\nregarding jsperf. yeah, well.. no plan. perhaps with phantomjs?\n. Closed because being replaced with  #347 \n. Eventually we could expand the value of true to a more specific usage of sanization.\nI.e. translationProvider.useSanitizedValues('$sanitize') using AngularJS' $sanitize service (available in <1.2) and in a more configurable way using $sce of 1.2.\n. 1. true => standard way of html escaping\n2. $sanitize => return $sanitize(value)\n3. extending 2 with special rules (see $sce)\n. What do you mean?\n. Hm, well.\n1. Using special data in the values results into non escaped values like here: http://jsfiddle.net/44KAV/2/\n2. ng-bind-html-unsafe is actually no option in the future (or present when using Angular 1.2)\n3. I do not want to know when to escape: I escape always.\n. So, what's going on? What do you mean with your last point regarding ng-html-bind-unsafe?\n. And here to: Is there still an open thing here? What should be discussed in detail?\n. $sce must be added, but the foundation is there. I had stopped until we have details\n. For sce we need AngularJS 1.2, dont we?\n. But how I get this? We are still support AngularJS 1.0?\n. Since $sce and $sanitize is 1.2 only (or missed I something), I'm stucked at the moment.\nAnyway, I have reworked the stuff a little bit being more abstract and merged it by canary. Moreover, I have opened feature/xss-protection-angular-1.2 which shows sanitized html: e2699a1fe7f8e941f73a12c1bb56a3d435e0c7bc\n. Perhaps in a later step, we could extract these strategies and provide it as a first class member of the translate ecosystem.\nAnyway, I'm done. Anything open?\n. updated\n. Sure, if it's final, I will. Going forward this we.\n. Docs added. Is this the way it should be?\n. Actually, it seems that reading the guide is not enough to understand the concrete scenario.\nSeveral demos you have updated in the PR were changed \n1. not showing anymore the relevant modules a developer have to include\n2. not demonstrating anymore a scenario like \"static files\".\nA guide is cool, but sometimes a simple example of usage helps a lot. And an example or demo is part of a good documentation because it shows more reality than every static guide. The problem of the plunkers, fiddles and so on are that they are mostly unversioned and not fixed. Which means that is not guaranteed they will work tomorrow with the next version (or how they were last month with the previous version). \nThe demo/samples are part of the history.\n\nDo you know what deferance between master and canary branch?\n\nLike DWand already said: The master contains always stable code (aka released code). In the meantime canary is the default target branch for external PR or other changes. After some time and stability work, the canary will be merged into the master and a new release will be made.\n. Oh, yes, of course: In general, +1 for improving readme and getting rid of legacy code (like useStaticFilesLoader). However, last one could be taught in a didactic way (the old one was not invalid).\nHonestly: I actually do not get the whole thing with the files and modules. Where is/was the problem?\n. What was the intention of changing stuff about\n\nadd <script src=\"../dist/angular-translate.js\"></script> or <script src=\"../bower_components/angular-translate/angular-translate.js\"></script>\n\n?\nI don't want to make your PR bad, I really don't get the idea behind that one change. The demos aren't broken, are thy?\n. hrhr.. I had used Google Translator. Listening ridiculous, but I think I got the point ;) I even not that characters on my board.\n. Nope, we have only one event for this.. more or less the situation has not changed due the already known concerns.\nPerhaps it would be possible to provide (as part of the directive) a generic hook and/or optional event sender. Anyway, that's not on our map at the moment. Feel free to make a PR.\n. An alternative to avoid api breaking changing would be an additional defer argument.\n. So, withPart for chaining and addPart returning a promise?\n. I get the original idea behind that (@maklemenz). However, the code above will provide a solution but not a good one since both loading and success callbacks are not tied together. It is possible that the broadcast as fired because of another load event.\nUnder some circumstances that solution c/would help. You have to know your own application's stuff.\nI didn't realized that addPart actually does not do anything. Therefor, until we couple the things behind that (add part loading promise), I would let the loading stuff by you and not the framework itself due limited possibilities.\n. For what? By whom?\n. You cannot use providers in non config phase contexts, like a controller.\n. Yeah. $translatePartialLoader and $translate are regular services and available in the regular context (services, controllers, directives, filters). But the providers like $translatePartialLoaderProvider or $translateProvider are only available in the config phase.\n. You use $translatePartialLoaderProvider.addPart() in the config phase, and this will load all registered parts. After you have added additional parts after the config phase via $translatePartialLoader.addPart(), you will have to invoke $translate.refresh().\n. Yep, sounds good. Your are in touch with AngularUI, aren't you? What they think about that?\n. We will provide a magical RexExp. ;) Written in JavaScript (tm)\n. Version2, simply. ?\n. After, before or while adding support for 1.2?\n. For the end user/dev: At least prefixed directives and so on, I would guess.\n. :shipit: \n. I would suggest a big plan, but not going in details too much. Some stuff could be already started..\n. Don't we? Just go ahead? Being fully agile? :)\nNevermind, but I thought to make a (small) check list of things to done: repos to moved, to create, website, and plans for stuff like transitions for open requests.\n. Regarding invalid JSON, I would recommend some kind of grunt task which checks the validity of your JSON files. Running always in background, it will avoid any bad checkin at once it was made.\nAny regarding the other issue \"missing keys\": A solution would be another background check, too. Gather all translation (per file and per language) and re-check the existence (and perhaps even the order) with another language and file.\n. I've started with that on #192\n. Binary alert mode! :)\nHonestly, is it really required to include a local binary nuget.exe in our repository?\nLet's say, we would also add Maven support (however, I still don't get why we would need support platforms like Maven or NuGet at all), we would never include the maven binary. That would be an additional requirement to the building environment.\n. I think you do not get the point. Yes, I am personally not sure why such tools would be managed by the backend services instead of a dedicated nuget-bower (or maven-bower) tool.\nAnyway, that personal opinion of myself has nothing to do with the fact, that binaries should not be include in source code repos. So, question again: Wouldn#t it be better when NuGet will be only a build environment requirement?\n. I don't \"like\" any binaries in vcs; same reason we do not include angular.js but use bower (and npm). It's a common anti pattern for Source Code Control and CI,\nSpeaking of CI integration, that's part of the CI environment itself (just like the CI have to \"know\" bower, npm, maven, rvm, nvm, gem... e.g. http://www.hanselman.com/blog/NuGetForTheEnterpriseNuGetInAContinuousIntegrationAutomatedBuildSystem.aspx). At least a Travis integration would be managable: http://stackoverflow.com/questions/16751772/how-do-i-use-travis-ci-with-c-sharp-or-f\nAdditionally, I'm thinking a separated project (module) would be better, just like the dedicated bower repository.\nI'am absolutely not aware anything regarding Mono or NuGet, but I'm running several Maven setups. Nobody would add the Maven binary in the source code.\n. Yeah. New repository (angular-translate-nuget-package or so) with all except the binaries. Anyone can build the stuff him/herself; additionally we could ship that binary directory to NuGet (like npm publish).\n. But that's an IDE specific thing? That's your environment? I hope you do not check in the repository all the shit an IDE generates into your project's folder ;) \nRegarding http://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package, the only dependency is nuget.exe should be available in the PATH. Captain obvious, actually ;)\n. That looks good. Only descriptors. Perhaps @lehmamic can say if this project's targets have something like a package artifact he originally wants to have.\n. Yep.\n. And the nuspec?\n. And the plugin seems only to require a nuspec. That sounds really good.\n. Hi,\nthat is a nice idea.\nHow would be the information retrieval in detail? How we get the accept-header in JavaScript?\nAdditionally, I think we would need a somehow transformer to uniform the different browsers' and clients' values to (our) standard language value.\n. Yeah, that's actually quite more complex:\ncoffeescript\nlang = $window.navigator.userLanguage \n      or $window.navigator.language\n      or $window.navigator.browserLanguage\n      or $window.navigator.systemLanguage).split('-')[0]\nAnd that's still not value-compatible/equal with Accept-Language.\n(It's an excerpt where I don't have the underlaying browser dependencies.)\nSo, what would actually the issue for this project? It seems to be more a thing like language auto discovery by the backend server? In our app, there is another player in that game on top of that: the session's locale based on the user.\n. Hm, well.. optional we can include this actually. Why not.\n. javascript\ndeterminePreferredLanguage = function (handler) {\n  determinePreferredLanguageHandler = angular.isFunction(handler) ? handler : defaultPreferedLanguageHandler;\n  // now invoke internally determinePreferredLanguageHandler() or anytime in the future...\n}\n. I speak code faster,  so yeah :)\n. I'm actually currently not sure if a browser can at the moment or in the future change its own language at runtime.. so we need perhaps an option to invoke it again in the future.\n. okay, looks good.\n. Hi,\nthank you for the PR. It looks nice. Why do you decide to use @: instead of @? Are there any drawbacks?\n(Besides: Thank you for respecting the contribution guide lines (target branch and commit message). It is okay in the functionality right here, but I recommend using a dedicated topic branch for PRs in the future.)\n. Ah, sometimes I don't get all the stuff here.\nIf I see that right, an unresolvable link will be the link itself.\nRegarding topic branch: Yeah, it was okay for us. But if you start a PR from your master to one of ours, we will merge that in our (master/canary) and you would have to reset your master later. If you think that's complicated, then imagine what happens if you start multiple PRs which take days or weeks while you have to work with the master.\n. MIT would also fulfill these requirements.\n. Are you sure everything is UTF8? HTML page, js, Language file?\n. Hi,\nyeah! What you think about merging this to one multi function (duck type checking wether it is an array or string). @PascalPrecht \n. That is not used in this project at the moment.\nJust days ago, my co worker re-implements our own app-aware localization (actually, full i18n) service being full-promisable for angular-translate, momentjs, angular-locale and some jQuery plugin stuff using RequireJS' require which we already have included.\nI am not sure if a plugin could handle these variants which exists.\n. > We are looking to use the feature in our product but this FOUC thing makes us put internationalization on hold.\nActually, you can deal with this on your own. You introduce a scope expression defining whether translation (or even other i18n stuff) is already loaded or not. Unless it is loaded, you will show something like a splashscreen, a styled \"blank\" screen or whatever. The only have to is more or less the page title, which can be handled either with an own dedicated \"setPageTitle\" using the $translate-service functionality which recognize untranslated values or a pseudo language which with only one key (i.e. language 'xx').\nSo, in a nutshell:\njavascript\n$rootScope.i18nLoaded = false;\n$rootScope.$on('translateChangeSuccess', function () {\n  $rootScope.i18nLoaded = true;\n});\nhtml\n<body>\n  <main ng-show=\"i18nLoaded\">Loading...</main>\n  <main ng-hide=\"i18nLoaded\">>ourapp</main>\n</body>\nUsing a pseudo language would be:\n1. Set the used language to XX\n2. Set the language directly, only the required keys.\n3. Invoke immediately the preferred language which would invoke itself change events later.\nActually, you should have already that kind of mechanisms or how you deal with user sessions and session located locales?\n. That would be part of a server side process, I think. Therefor, grunt would be perfect.\nAm 22.11.2013 um 15:04 schrieb Oleg Belousov notifications@github.com:\n\nSimilar as in Ruby, and Django, I believe that we should consider adding a feature that scans the strings that the $translate filter is applied to in the views \\ controllers, and support auto generation\\migration of the phrase table.\nI'm willing to contribute to this one.\nWhat do you think?\n\u2014\nReply to this email directly or view it on GitHub.\n. You can use a custom loader (to fulfill the async translations loading); that would be a simple mock / function callback instead of the http request which you probably do not even want.\n. For example, you can use a function (!) loader instead of the built-in static files loader which is actually only a function wrapped around an xhr call.\n\nIn a nutshell: What do you want to achieve with your UNIT test? :) Mocking or rebuilding your entire app?\n. Technically, that's an issue with XHR and it's very difficult. You can have a look at our own unit tests but it is more simple to mock it away.\n. Sure! :)\nWhat about a set of translations?\njavascript\n$translate(['myKey']).then(function (translations) {\n  scope.myText = translation.myKey;\n});\n. > So I have to somehow make a global promise available which is a reference to pending loader, so we can apply further processing once the promise is resolved or rejected.\nSounds good, actually. I actually had already the idea to introduce an internal global promise, but based on another reasons.\n. Once a promise was resolved, it cannot be resolved again. Would result in some confusions?\n. Mh, I don't get this. A promise is a promise. If you don't want to wait, a promise will be not the right choice.\nPerhaps we should sketch the issue again, because I have actually no right clue anymore where we are, where you are, where you want to go and which problem actually should be solved.\n. Okay, the picture is more clearly now. I won't deep into this the next days (too much), but at least I put some points here.. ;)\nA directive and a filter use this service $translate, too. Does that mean both would use this new big callstack? Well, a deep impact, actually. You had mentioned earlier we could get rid of the global event (is this still correct?); however, we can't. Only that one allows a) external hooks (unless we provide a callback api) and b) efficient translations within in directives and filters. Why [?] should we wait until something is finished in the future, when we can make refreshs on each translation tables update (on new fallback, on new language and so on). Additionally, this would save a lot of the callbacks. ==> solution: two different types of translation resolvers: one like before, one working exactly like this proposal.\nSo, perhaps I'm a little Spielverderber, but how would this feature actually used? Only in direct service calls? What was the intentional usage?\n. Okay. But let's say I have a \u00b4n = 100\u00b4 translations on my site via directives or filters. The proposals will create on at least on site loading at minimum n call stacks holding a state (the promise); for each not found language or fallback language this will be multiplied, so this would be n * (fallbacks + 1) (regardless some internal reasons for some wrapper promises.\nUntil now, the directive do not rely, so there is no state or promise. But they would be invoked if something changes (the language, the translations). \nYou got me? :)\n. Sort of feeling. I think I have to play with this a little bit.\nAm 17.01.2014 um 10:43 schrieb Pascal Precht notifications@github.com:\n\nOr in other words, how else would you tackle the problem?\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, the replace filter is a simple new RegExp around each key/value pair of the replacements (our values). If I see this right, it is a question of AngularJS' interpolation params vs. a simple replacement (via regular expression which is perhaps a little bit overkill).\n\nOr did I missed the main selling point?\n. Could you summarize what the new fallback stuff should do from the outside?\n. Actually, AngularJS 1.3 starting next year.\nBut that does mean a module could not support AngularJS 1.2 including an IE8.\n. Well, actually, you want to decode or parse you own data.\nEither you decode the logfile at the server on the browser, i.e. in JSON objects: in Java with java.util.Pattern, in JavaScript with RegExp.\nDepends a little bit on the data, on the context, on the mass of data.\n. Just to clarify: \n```\n\nnpm install angular-translate \nwith a \"prepublish\"  of \"grunt build\" (or similar) \nwhich generates dist/* and thefore a dist/angular-translate.js\n```\n\n... and pointing to this as package.json:main: you are happy? Or am I missing something?\n. landed as 7fd89d9\n. Forgot this: this means it will come with 2.4\n. Which version you are using?\n. Yeah, what happens if it is null?\n. @saabi Thank you for the PR!\n\nBTW, first time issuing a pull request on github, so my apologies if I goofed the PR and didn't correctly follow the complete protocol.\n\nWell, the first step is actually making a PR. A lot of people don't make them. However, we have some rules described in the contribution rules. You have already uses the recommended commit message style. However, you are making the PR against the master, but it should be always canary (so you have to make the change based on the canary). Furthermore, it is highly recommended to use a topic branch (checkout canary, make a branch based on this, make your changes into this one, push this new branch to your Github repo and start the PR again. The page will you support).\n. Contributing details see here: https://github.com/PascalPrecht/angular-translate/blob/master/CONTRIBUTING.md#contributingsubmitting-changes\nAnyway, I like the change. I think usage of something like angular.isString() is more comfortable to avoid urls like /language/ennull. Since an url is always a string that would be okay.\n. $translateProvider.useDefaultTranslationWhenNotFound() sounds good. At least for the directive.\n. @sureshvsvb  Please have a look at \"fallback languages\" http://angular-translate.github.io/docs/#/guide/08_fallback-languages\n. Yep, Looks Good.\n. I'm actually familiar with anything about rtl. I'm only know the media group.\nSeriously, I'm not sure (see above), but rtl would require some stuff in the template land which would be out of control of angular-translate anyway. Also, the whole localization stuff (which means: currency formatting, number formatting, date/time formatting) must be done by angular core itself (because it maintains the $locale).\nAfter we have a list and plan about what rtl support really means, something like an umbrella controlling instance (around angular-translate, $locale and perhaps some templating stuff) could be interesting.\n. But AngularJS itself has. And until someone has a better solution, I actually do not think we have to rebuilt it.\nIn my current project, we have several components being involved under the topic i18n: angular-translate, angular (core), jQuery (Datepicker you know..), moment.js and something else I already had forget. Because no module could be the single truth, we had to built a custom umbrella module which controls all the different kinds of localization, translation or whatever stuff and combines this with our proprietary session's locale.\nAnd this is the point where I'm coming back to my \"umbrella controlling instance\". This would be something new out of angular-translate we currently know. Pluggable? Perhaps. Modularized? Perhaps. Functionalities? No idea.\n. Okay, I have inspect an rtl demo of Sencha'a Ext JS: http://docs.sencha.com/extjs/4.2.1/extjs-build/examples/rtl/rtl.html\nActually, this is only some additional classes used in the CSS. Perhaps they instruments the components itself (via a custom property hook). But at least, there is no further magic.\n@PascalPrecht So you are actually referring a custom implementation around the place of $translateChangeSuccess doing a simple DOM action like adding/removing ng-rtl to the body?\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. You can make a resolution using the bower cli.\nSee also #176 why there is no promotion possible.\n. If we promote 1.2, we cannot support 1.1 anymore, can we? The problem is the splitting of some angular modules which actually does not exist in 1.1. Do you have plans how to deal with that?\n. Also, we are planning to move the complete project under a new umbrella (already started), which also include a new version based on 1.2 with 1.2+ only features in the future.\n. Just because it is current in news: I had noticed already a strange issue in the past days when looking over the build logs..at the moment, it is possible that many people use pre-released AngularJS dependencies via bower because of https://github.com/bower/bower/issues/1017\nAlthough I can understand the process you had evolved is very comfortable, I will not second that. Automatically updates (even on patch level) is very risky and requires a strong trust into the project (actually, project's owner following semver). For all the dependency managers: NPM, Bower or even something like Maven.\nAnyway: The next version (1.2, or 2 I don't know) will solve this issue.\n. I'm not sure I have understand this correctly: This only defines a default prepended namespace part? That would mean, if there is the translation my.foo.bar is requested while using $translate.langInfoNamespace('whatever'), then there would be internally a requested translation for whatever.my.foo.bar? That's all?\n. Okay. Then there is left that weird ___.\nhttps://github.com/DWand/angular-translate/commit/e13a2c9ad2637bc023edab61730b0498fcc65997#diff-e18ce2ad78450368d9c5ab9ac1d1bd21R1770 Why is isfoo part of langinfo? This is one of the translations?\n. > If you want to ask \"Why I use such a terrible name of the key?\" \nNo. ;)\nI'd understand that langinfo would return all values of ___ and translate would return all of the actual table. But that does not match with that line, and that's because I'd asked ;)\nhttps://github.com/DWand/angular-translate/blob/e13a2c9ad2637bc023edab61730b0498fcc65997/test/unit/service/translate.spec.js#L1770-1772\n. I'll close this due inactivity.\nAlthough this is perhaps a nice idea, there was no effort in the last months. If someone really thinks he/she needs this and/or will come up with a solution.. we are welcome this for sure.\n. I don't get this, too. My team is using ng-route (and even ui-route) with translate.. so, please be a little bit more illustrative\n. This is a limitation based on AngularJS interpolation service we used there. It seems that 0 is interpreted as a simple number expression. If we want to change this, we would have to rebuild the whole interpolation service on our own.\n. Actually, you can use your own interpolation service in angular-translate. But since you would have to maintain it on your own (including adding features which the default one have), I would recommend to make the existing sources more compatible. The dirties one of the hacks would be a search-and-replace of \\(\\{(\\d+)\\}\\} to something like \\{\\{v{0}\\}\\}.\n. Yes, such a like.\nbtw, OT: replace your StringBuffer with StringBuilder. You do not need to be thread safe in that util method... ?\n. Okay, actually \"mocking\" isn't possible at all.\n. Recipe for mocking\nstub/mock for getLocale\njavascript\nspyOn($translateProvider, 'getLocale').andReturn('en_US');\nbut getLocale is not exposed currently (therefor cannot be overridden)\n. At least Chrome drops changes to navigator silently. Next time reading the property, the original value is available again.\n. What do you mean with offline?\n. > Does .get() and .post() work if the phone is in airplane mode?\n\nActually, should be. It's only an xhr under the hood.\n\nHowever, unless you have correct working manifest system with versioning, if you have the app under control, a tweaked solution would be better in context of issues with the manifest cache. Imho. \n. Oh, manifest works in webview. But it becomes tricky with updates ;) sencha has solved this with a delta update manager. So, no Phonegap is needed until an AppStore presence or os specific features are being required. \n. Is there a requirement for the AngularJS uboot?\n. Well, perhaps with a devDependency.\n. Ups. Sorry. This is obsolete now. Just forget to update.\n. @PascalPrecht  close this please\n. replaced by #355\n. First: This one is translation (translating words), that one is localization (localize numbers, date, formats).\nSecond: Someone could elaborate whether this could be an option (proposing $translateProvider.refreshNgLocale(bool) or something like this) or something we should let  completely external (actually a custom success handler).\n. Well, $translate.use() cannot change the ngLocale because this would be a wrong behavior -- because the translation change was not successful yet. Only after the current language has been changed really (i.e. event translateChangeSuccess), we could change the ngLocale.\n\nI offer make service $translateLocale.\n\nThat would be nice. And how you want to change the local?\n. Hi, thank you for the PR.\nPlease follow the contribution guide line, i.e. targeting the canary branch.\nPerhaps add a simple test case (with a key like untrimmed_key) so we can guarantee the functionality in the future.\n. Please be aware of named functions and IE issues.\nSee also https://github.com/jashkenas/coffee-script/issues/15, https://github.com/jashkenas/coffee-script/wiki/FAQ#functions\n. I think both, but I'm actually not sure.\n\nToo bad, cause I like to have autocompletion (or at least no warning about not found class/methods) on my code (and also better error reporting in general).\n\nYeah, it does make the bad support for JavaScript IDE feature not better.\n. About what are you talking in detail?\nThe modules from translate itself, or 3rd party stuff? Sorry, I'm actually a little bit confused.\nDo you mean, you would have separately to download translate, translate-static-loader if you do not use the automatic system via bower?\nEh.. well, yes?!\nJust my 2ct:\nActually, I'm in the same situation: Basically, I'm a java developer and I do have coworkers without frontend experience. But this is manageable with simple start scripts for \"npm install\", \"bower install\" or \"grunt task\"; in parallel to the ci system environment. Hopefully, you do not check any external source into your repository unless you are forced to do it (i.e. not available via bower).\n. Yes, sometimes cherry picking of \"all\" would be more comfortable, that's right. Unfortunately, the downside is that all possible dependencies have to be load. However, in the enterprise situation, we don't care.\n. I don't like manual parts, like the current ones which still are not really documented. \nThis is actually slightly related to #357, but the open point is still which file and where we upload the artifact.\n\nShall I prepare something with script and packaging process in grunt? \n\nSomething like a release-package task, and the  result would be an archive? Yes, that's sound good.\nI've just found we could use http://docs.travis-ci.com/user/deployment/releases/ Perhaps you can have a look for this? Probably with a copy...\n. Ongoing.. Closing fast-forward. There will be both a tarball and zip file (of dist/) attached to the next releases.. Oh well.. I had actually reviewed 4939424a30b68b45989b1ba88208ab7768c05d8f but thought that could not be happened. Should be more pessimistic.\n@PascalPrecht Fix both?\n. yeah, but that one was the one which crashed the stuff internally and should be avoided.\n@PascalPrecht I'm not sure whether the stricter condition of 08f087b61d will made the unwatch() still good enough. Otherwise, this should be fixed.\nActually, the bug is because value is always true (empty object). Still not ideal.\njavascript\nscope.$watch('interpolateParams', function (value) {\n. it's an empty object, actually.\n. Let's wait for @PascalPrecht because I'm quite not sure what the intent of the change was.\n. Okay, that was some kind of optimization. So, actually, \njavascript\n              scope.$watch('interpolateParams', function (value) {\n                if (scope.translationId && value) {\n                  iElement.html(translate(scope.translationId,  value, translateInterpolation));\n                }\n              }, true);\nshould be\njavascript\n              scope.$watch('interpolateParams', function (value) {\n                if (scope.translationId) {\n                  iElement.html(translate(scope.translationId,  value, translateInterpolation));\n                }\n              }, true);\nbecause\n1. !{} === false\n2. Even if it is now empty, the dirty watch check means that is was prior not empty. We have to invoke the translation.\nimho\n. Bower cannot make a decision about version miss matches, therefor the warning. But actually, it is compatible both with 1.1.* and 1.2.*.\nActually, if you use the bower cli, it will ask you how to resolve this one. If you further follow the instructions, you can persist the resolution with !.\nIn details, see more in https://github.com/PascalPrecht/angular-translate/issues/176#issuecomment-28162383\n. Well, actually you can do this. If you want to stick on 1.2, use\n\"dependencies\": {\n    \"angular-translate\": \"~1.1.1\",\n    \"angular\": \"~1.2.9\"\n  },\n  \"resolutions\": {\n    \"angular\": \"1.2\"\n  }\nUntil now no one can give a garantuee that both AngularJS 1.3/1.4/2.0 would be compatible with translate 1.1\n. Hm, well.\n1. Is this usable with translation after all?\n2. Why should this be part of translate?\nDon't get me wrong, it seems to be a nice convenient filter.\n. Oh, year you are right. But without #191 it does not make very much sense?\n. > For example, if I understood right, to use date or currency filter you have to specify format for them for every particular usage, so we have to duplicate the same code multiple times. Here we can provide some smart wrappers and connect them with the main \"core\" module.\nYeah. Some core initialized filters based on AngularJS or something else were fine. Actually an interesting idea.\n. Some of that stuff would be actually possible with my #191 because it \"opens the world\" more using post processing or simply injecting AngularJS (current scope) into the translation texts.\n. from the spec https://github.com/knalli/angular-translate/blob/acba21392f5cd2f79ce3fac469c265b2533d6498/test/unit/directive/translate.spec.js#L443-478\njavascript\n$translateProvider.translations('en', {\n  'text': '<span>{{name}} is a citizen of <strong ng-bind=\"world\"></strong>!</span>'\n});\njavascript\n$scope.world = 'Gallifrey';\nhtml\n<p translate=\"text\" translate-values=\"{name: 'The Doctor'}\"></p>\nThe result is the truth, of course.\nPerhaps we could build some neat, small shortcut filters.. but actually this would provide a solid foundation which is not limited by our imagines today.\n. translate-compile was just merged last night. \n. @shiruken1 Please make a new issue, and provide your code as demo (i.e. using plnkr.co). Thank you\n. Since I'm using always https://npmjs.org/package/serv for that stuff, I did not come with that idea :)\n:+1: \n. And what if your specified lang does not exist? Do have this considered? And even if you really did have, we had to ensure that this one does not invoke any async loading process in the background.\nWell, for statics only, since JavaScript is working non-parallel the \"hack\" would be actually okay (no side effect, and I think no $apply within the $translate() function.\nHowever, just personally a note: I would strongly recommend to consider not to make such stuff. If I get you right then you want to create a log activity which is always in \"english? (Why should this plain text english?) And if this always english it will be actually not translated, will it? So basically, I would prefer storing a structure of data.\n. Please follow #500 -- closing this as a duplicate.\n. Inspired by #258 \n. We have discussed this already in #191 but still have no solution for that case. Any ideas?\n. @PascalPrecht ok, was a proposal. do we persist with this one, or shall I close it?\n. Well, @PascalPrecht ? Is there anything missing? otherwise I'd rebase and drop some lines in the directive docs.\n. replaced by #482\n. - ... and fix jshint isses (there were some accidentally used globals like element)\n- strict mode should be preferred in the future\n. For all files? Or: Can we define rules only for a subset of files?\n. Originally, I'm see this issues in my Sublime (with jshint plugin). Looking deeper into it, I had noticed some missing globals and some missing vars. I want to limit the issues to zero; only then we can see the real ones.\nYeah, we can put the jasmine stuff into the global one. But.. really? :)\nSome of the other rules are actually bad style, but okay in a test case (i.e. the dash issue).\n. I don't like fot-testing-purpose-only globals in non-test areas, but well... it's fine.\n. You can define an alternative .jshintrc? Ok, if we place it into the tests dir it solves probably the ide/editor issue.\n. Yep\nAm 29.01.2014 um 17:08 schrieb Pascal Precht notifications@github.com:\n\nAnother breaking change but it would be more consistent in our current API. Changing\n$translate.uses();\nto\n$translate.use();\nSimilar to\n$translateProvider.useStorage();\n$translateProvider.useLoader();\n@knalli, @DWand, @tspaeth, @firehist, @DanielaValero What do you guys think?\n\u2014\nReply to this email directly or view it on GitHub.\n. @DWand  Is still something open here? Should we migrate missing features into a separated topic?\n. As part of v3, we can rethink the architecture including new events (i.e. like translations changed). It's more or less already available as a result of several other events.\n\nI won't add this feature in v2 anyway. But improvements to the partial loader are still weoclome -- filed into a new issue.\n. Pluggable? Yep.\n. Yeah... I actually get it right. Again: Yep! :+1: \n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Update on \"moving repository\"!\n~~tl;dr: Yes, it works.~~ SEE UPDATE\nIn details:\n1. I've created a repository containing a simple bower package called knalli-bower-move-test [sic!] at my scope github.com/knalli/knalli-bower-move-test. The bower package has exactly one dependency: angular-translate, what else? :yum: \n2. Just being sure, I've created a release v1.0.0.\n3. I've published a new bower module for the world :8ball: using this wonderful name and my git endpoint. \n4. I've created another neat thing: a knalli-test-orga. Wonderful. :clap: \n5. I've transferred the repository with GitHub into this. So, a redirects exists on layers http and ssh/git (visiting my old repository now redirects to this one)\n6. I've created another release, v1.1.0, v1.2.0\n7. Testing a bower install knalli-bower-move-test and watch what happens.  :+1: \nSo, the result:\n```\nknalli7:y knalli$ bower --verbose install knalli-bower-move-test\nbower knalli-bower-move-test#  cached git://github.com/knalli/knalli-bower-move-test.git#1.2.0\nbower knalli-bower-move-test#         validate 1.2.0 against git://github.com/knalli/knalli-bower-move-test.git#*\nbower angular-translate#~1.1.1           cached git://github.com/PascalPrecht/bower-angular-translate.git#1.1.1\nbower angular-translate#~1.1.1         validate 1.1.1 against git://github.com/PascalPrecht/bower-angular-translate.git#~1.1.1\nbower angular#1.0.8                      cached git://github.com/angular/bower-angular.git#1.0.8\nbower angular#1.0.8                    validate 1.0.8 against git://github.com/angular/bower-angular.git#1.0.8\nbower knalli-bower-move-test#~1.2.0     install knalli-bower-move-test#1.2.0\nbower angular-translate#~1.1.1          install angular-translate#1.1.1\nbower angular#1.0.8                     install angular#1.0.8\nknalli-bower-move-test#1.2.0 bower_components/knalli-bower-move-test\n\u2514\u2500\u2500 angular-translate#1.1.1\nangular-translate#1.1.1 bower_components/angular-translate\n\u2514\u2500\u2500 angular#1.0.8\nangular#1.0.8 bower_components/angular\n```\n~~q.e.d.~~\n. @PascalPrecht Well, I should sleep but then it :sleeping: \nThis works *only until you fork the project back into your account; the redirect will be destroyed in that moment. Just tried it with my demo.. the orga has released 1.3, but this won't be recognized by bower since it is looking at my only seconds older fork on the original position.\n. Sounds good.\n(When I read this promise stuff from the dev-user perspective, I'm still not happy with the overhead in writing code and actual background processing.)\n. Okay, leaving the thing about code writing and reading. Are we able to translate a set of translations?\nSo, in combination with this proposal something like that:\njavascript\n$translate(['key1', 'key2', 'key3']).then(function (result) {\n  $scope.key1 = result.key1.translation;\n  $scope.key2 = result.key2.translation;\n  $scope.key3 = result.key3.translation;\n});\n. Well, when we are used to inject translation on service level (because template does not work), we are always have to load a bunch.\nBefore: Several $translate calls\nNow: we would have to build an own wrapper with $q.all or something else handling this end-user-promise-hell.\n. @DWand : right. all the api have to do is exactly this.\nedit: actually, even not: if the language is available, we could build up only one promise regardless the number of requested languages.\nehm, I do not want to bombing this issue. ;)\n. I'll close this too. Besides the fact we cannot merge/pick this anymore (technically), there was no more effort into this feature. The topic #605 remains.. yet.\n. We have actually not made anything ready for browserify. If I get the spec right, it reads the package.json and parse it dependencies just like Node? Actually, our package.json is not designed for that stuff, because we maintain it only for our dependencies but not a distributed build. We organzize and maintain all in one repository but split und and build different sub packages via bower.\nHowever, we are planing (#322) to add additional dedicated modules. If this solves the issue, we will see.\n. One year later: Is this still a topic? We have not changed the specs, but perhaps the tools are better. I've found debowerify so far, it would solve the problem using the available bower packages?\n. @mchambaud Does debowerify be an option for you?\n. How about this strategy? https://github.com/angular/angular.js/pull/10732\n. Technically, this would mean a npm module for every bower shadow repository -- but not bower-angular-translate because this one already exists. And this one actually contains everything already. I'm just feeling something would be wrong. ;)\n. Yes, but this means a significant internal change spliting everything ins module. Don't me wrong, I'm fully with this as I'm also unhappy with this bower shadow repository. \nBut's not done in some moments..\n. Wow, thank you. \nObviously we have to change the repo. But that is no problem.\nShould we not declare dependencies? However, I'm not sure about the correct usage via browserify (transitive dependencies).\n. > It would be even better if each modules exported it's name! But it would mean injecting each module into the app definition.\nCurrently this (splitting into dedicated modules) on the map for 3.0. Until now nobody has voted against this.. \n\nUsing this with browserify means the user will\n\nNo, that's not what I meant.\nIf someone uses npm install angular-translate-storage-local --save, it will not work until (s)he also uses npm install angular-translate --save. Should we not declare angular-translate being a dependency? Would this actually work without additional work by the user/developer?\n. @DWand  That's the idea behind the modularization on the v3 roadmap ;)\n@mchambaud\n\nIMO, this is ok. angular-cookies does not ship with angular so why would angular-translate-storage-local ship with angular-translate? Or angular for that matter.\n\nI would not say a declared dependency as \"shipped with\", but anyway: This will allow installing a sub module (i.e. angular-cookies) without the core module. Weird. That's why I have asked.. ;)\nIt does not look comfortable; in that ways standard npm packages (and bower packages as well) handle the dependencies a much more cleaner way. We can go with this, only it will be optimizable.\n. Well, angular-translate is NOT optional when requiering angular-translate-anything-else.\n. The time flies (away). The v3 will be take some time, so we can at least publish the satellite shadow repositories with local copies of the library.\n@mchambaud You have already did some work and published the repositories.. that's okay. But I want to care take on this on release time, so I need at least full publish access to all npmjs projects you have initially created. My nick is knalli just like to be verified at https://www.npmjs.com/package/angular-translate/. Thank you!\n. @mchambaud  Thank you, you have forgot one https://www.npmjs.com/package/angular-translate-loader-static-files\n. Anyway.. all packages except that one are published with latest 2.7.2\n. Thanks. Published!\n. from top to bottom, all stuff split up\n. rebased because of typo\n. 1) I explicitly not squashed because this is not one change. The instant is an own feature. (rollback filter change and it will still work)\n2) I duplicate the filter tests?\n3) Sorry, but not without refactoring and splitting more of the methods (fallback stuff)\n4) more \"translate\" names? I want to avoid this. Perhaps $translate.sync()?\n. sync() is actually not a good idea. If I read sync() (in context of asynchronous calls), it would mean \"block\". Actually, that's the cause why I originally came up with \"instant\". I do not have to stick with instant; we need some which means \"getting the state of now, not later and not blocking\".\n. > Which is why I came up with $translate.translateSync(). Actually, nobody should use it from the outside. Or it is at least not intended to be used from a consumer.\nWhy not? Should not be recommended, but since we have to provide this internal api as stable (because the filter api is using it as-it-is), we could expose it.\n. found an issue with the loading fallback index whereby translations of fallbacks languages weren't found\none test scenario is missing actually: a filter + async loader combination to ensure they do not collide\n. What about an optional shortcut package?\n. You cannot store the name of a filter in a config, because it's a component name.\nI still think the best option would be an optional shortcut package (an own module depending on the core one).\n. Have a look at 73b289d (part of upcoming 2.4). Is this okay?\n. fyi, 2.4 is available\n. @arthurgurov Sorry for the delay. I'm in doubt you are talking about the same issue. Anyway: Could you please make a demo with plnkr? You can use this template: http://plnkr.co/ljSwT7\n. Perhaps this one was improved with resolving #920 and #981.\n. I've prepared an example which works for me: http://plnkr.co/edit/J4aaFc?p=preview\nIf this do not work for you, please give us a hint!\n. Show me your RequireJS config and usage.\n. a) do not have defined requirejs where to find translate (I don't think it would be found automatically by your setup) and b) you do not have included the AngularJS translate module in your \"app\" module.\n. Yeah, in there you had include the Angular module. However, you have to include it in the RequireJS way, too.\nIn a nutshell:\njavascript\n// your-app.js\ndefine(['angular', 'bower_components/angular-translate/angular-translate'], function(angular){\n  // your angular config\n  app = angular.module('app', ['pascalprecht.translate']);\n})\n. For each sub module of translate (i.e. static file loader), this will also be required.\n. again: you had to include the static files loader with RequireJS and AngularJS. That's standard practice when using both RequireJS and AngularJS.\n. Close this. If something is not clear, open it again.\n. This replaces outstanding #191 \n. I thought that would be better. Well, if not, we can skip this but should mention it under \"breaking changes\" because it will change the result.\n. Cloned by #849 -- closing this because the other defines the higher priority of the technical issue.\n. This is a closed issue.\nLatest reference and detailed answer is here: https://github.com/angular-translate/angular-translate/issues/1429#issuecomment-192717834\n. @bdurrer  et al \nWe are providing a translation library, and neither a localization feature (like currency, date, number formats) nor settings registry. In your definition a translation is one string for another. It can contain variable content (placeholders), but do not have to. \nIt is up to you to abuse the system, but do not blame us if it is not fitting your code. ;)\nIf you want to extend (well, I would likely still prefer the term \"abuse\") the library with these features, feel free to decorate the service. Either with an AJS decorate (via $provide) or do it with a classic wrapper service. Obviously doing this, you are in charge of all consequences of loading stuff, translation formatting, string security concern and data structure issues you will be faced.\nA prior statement made by me was at 7th march here.\nI will lock this issue right now.\n. hm, I actually do not trust the travis log. strange.\n. Yep, master is far away from canary preparing 2.0\n. Ok, but thank you for the PR. Looks good, we can merge the PR sent to canary.\n. Actually, this should work. A firefox instance will be created in the Travis VM automatically. A limited version would be using PhantomJS, however, it is not a real browser.\n. Perhaps just rebase and let Travis try again\n. Testing with a real browser is different to PhantomJS when working for non-node-stuff. Since we are able to test with a real browser (Firefox), I would really dislike to go back to a PhantomJS.\nI'm still fascinating about the cause for such different results. Like you already said: it is all correct, it is all already defined.. \n. Okay, it seems this is caused by an implicit invoke of npm prepublish when performing npm install... what Travis will do.\nIf we do a npm install, we could switch from a real browser (here Firefox) to a headless one (here PhantomJS), because this would fit better the \"server\" situation. But the failing test seems to be an issue with Travis.\nrelated https://github.com/npm/npm/issues/3059\nI'm retrying this now within a branch.\n. Benefit: Now we are testing with both Firefox and PhantomJS.\n. @PascalPrecht @NickHeiner  Please have both a look if this https://github.com/angular-translate/angular-translate/compare/canary...feature%2Fnpm-restructuring is okay for you.\n. Fur us, this only changes that every npm install of the package performs an additional grunt build-headless which includes an grunt test-headless. Before this, there was no build and no test on npm install.\nI've tested nothing further more, but relaying on the requirement the property browser should point to the dist artifact. I guess @NickHeiner can check whether this is correct now.\n. Works for me. Strange, the other builds this weeks were fine.\n. I've wrapped your PR in another one #366. That one works.\n. the actual demo is correct (see fiddle), but not in the demo. I would assume some magic escaping by the doc itself\n. I'm currently not sure whether this has been a drawback or not.\n. Yep, would be better.\n. Landed in canary.\n. @marcust That patch should work. Is it the same you did?\n. Maybe. I just collect all the things I have noticed.\n. This is actually an open todo... ?\n. Thanks @NickHeiner for investigating. Obviously, the current behavior is not correct. It seems that an already triggered loading request will be skipped instead of being added.\n. good work @DWand \nAn example of $translate.instant is actually.. the filter.\n. should $timeout.flush() not be called before the end of each test?\n. I'm not familiar with ng-grid, but it seems you have to apply the result later.\n``` javascript\n$scope.myData = {field: \"name\", displayName: 'key'}\n$translate('key').then(function(translation){$scope.myData.displayName=translation});\n``\n. uses() -> use() is a documented breaking change of *2.0.0*.. landed as 1cddd09494 incanary`\n. Hi, thank you!\nCould you please send the PR against the canary branch regarding our contribution guidelines?\n. Reminder: you you please resend the PR using canary? Thank you!\n. landed as 6fbea0d2\n. Well, it depends.\nIf you are still in construction phase -- e.g. controller's function -- you cannot use the direct translated  variant with $translate.instant() because the language will probably still not loaded.\nIn case of a part of a callback somehow, you could probably use $translate.instant() because you could say it is safe, all languages' data should be loaded anyway.\nSo please keep in mind: maybe it is a solution, but you have to pay for it.\nAs a consequence, I would recommend to build all translated values via the regular async service and apply them into the scope when they are ready.\n. ping @DWand \n. > Yes, this is still a problem. See this plunker taken from this answer on StackOverflow. I can confirm this is also still the case if I use the $translate service in the controller after $translate.refresh is called.\nIt seems the partial loader will not work without using .use().\ndiff\n+$translateProvider.use('EN');\n$translateProvider.preferredLanguage('EN');\nGiven that, I would likely close this issue here. The partial loader is well known not being optimized or efficient. Any contributions making it better are welcome.\n. Closed due inactivity. Enhancements for the partial loader already addressed in the linked issues.\n. You mean translate should expose it own version? Sure, we can do this. What context you are dealing?\n. This feature has been added.\n. Hi, this needs for information.\n. $translate() returns a promise starting with 2.0.0: http://angular-translate.github.io/docs/en/#/guide/03_using-translate-service\n. fyi: linking #444 \n. Have a look at http://angular-translate.github.io/docs/#/guide/05_using-translate-directive#using-translate-directive_post-compiling \n. Did you setup your $sanitize properly?: http://docs.angularjs.org/api/ng/directive/ngBindHtml\n. landed as 457c020d\n. You have to wait for the resolution of the promise before calling expect. Have a look at our specs/tests where it is handled. \n. E.g. https://github.com/angular-translate/angular-translate/blob/master/test/unit/service/translate.spec.js#L130\n. Well, you have to bake such logic into your app; angular translate can help you at least a little bit.\nIf you use asynchronous loading of languages, you will have an unlimited amount of languages. The specific piece in your app is the set of available languages. Either you define this as a translation itself (i.e. html like <ul>\u2026</ul>) or something like a json file containing all currently valid languages which you can fetch via XHR.\n. @DWand  still open?\n. The project itself is licensed correctly. This issue is only for the dedicated bower repos which are only  for the bower registry.\n. Hm,  adding a \njs\n            link: function(scope, element) {\n              $timeout(function(){\n                $translate.use($translate.use());\n              }, 0);\n            }\nto your directive helps. I'm quite not sure what happens. It seems that the scope change of translate is not propagated into the template area.\n. Just to clearify: that is only a hack, not a right solution. And not bullet proofed.\n. Maybe you send this as a PR? :)\n. > But if I propose this as a PR, I'm going to directly include it in the code, not as a decorator.  \nOf course :)\nI would prefer either getLocale() (reading user agent locales) or determinePreferredLanguage() (processing them). I'm not sure why we should not straighten the strings internally.\n. Closing this, we have the open PR (#755). That is still valid.\n. The PR was replaced with a feature named uniformLanguageTag. Preview available here.\n. I hope I have this covered now in #518 \n. Ehm.. what's up? Is there still an issue? Need upfix in 2.2?\n. Ok. Close.\n. Anyway, thank you. \nsidenote: Supporting AJS <=1.2 and IE8 is another topic.\n. breaks because of madness of karma https://github.com/karma-runner/karma-coffee-preprocessor/commit/9be38149cf922796659c7b183d8846e36f79a431\n. Okay, Karma 0.10.10 was released fixing this. works.\n. merged, thank you.\n. Yep, because an AJS filter encodes anything being html safe.\n. Sorry, you're right of course. http://jsfiddle.net/knalli/t2XjT/\nThe reason behind this, we're interpolating the translation itself. In a directive this works because the content is appended directly (see https://github.com/angular-translate/angular-translate/blob/34000c02bd64b0ed72de43403e33845623709ce2/src/directive/translate.js#L133). This will not work in context of a filter.\nAs a sidenote, i would recommend using the directive because it is more efficient due internal AJS reasons: a filter is being called and applied permanently, but not directive's watchers.\n. Yep, I've assigned this to myself (however, everyone's PR is welcome) and linked it to the next release.\nI haven't got made the message interpolator actually, so I have to explore the thing. But it should fit, actually.\n. Please review #515\n. Is that file served via tomcat?\n. I wanted to say: does tomcat resolve and return the url correctly?\n. No, but you can use the translate-compile variant: http://jsfiddle.net/knalli/XGZLU/\n. As you already said: The filter in expression won't work. If anyone knows how, (s)he is welcome. But I'm not sure it would be a nice solution.\n. Omg :). I've tried several variants including \\\" and \\', but stopped before &quot; because.. naah.\nWell. Limited by AngularJS.\n. Definitively yes. Please also look at our contributing file for the commit message style which makes it easier for the release notes.\n. Ok, looks good. If there is no veto the next 2 days from @PascalPrecht , we will merge this.\nThank you!\n. No, you would have to use either two filters, two directives or the way with translate-compile which is actually a overkill.\nThe reason is that TITLE ~ SUBTITLE is actually the translation key.\n. Could you please add a demonstration/test case?\n. Obviously, template:'<h1 >{{title | translate}}</h1>', works too.\nWell, the angular-translate directive (which is more powerful and efficient than the filter) requires a child scope (not isolated). Anything else is a limitation by the framework (AJS). Whatever the limitation is based on (colliding templates is reasonable for me, but scope colliding must be something very internal), you have to deal with it.\nMany directives doing so, I will say this will be not the last issue you will have.\nIf someone has an idea how to improve the directive having the same features and efficiency without its own scope.. this someone is welcome.\n. Hi, thank you.\n1. Although I see the issue in the code, I may ask you to provide a test which would fail without it, but succeed with it. Is this possible?\n2. Please send this pr to canary. (message is already fine)\n. This feature has been added.\n. Ok, @toogle . Nearly all done, test is fine! Good work! \nOne point is still open: please send this PR to canary. I will merge it then. master is our stable publishing branch, and canary is the developing area. More information at https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\n. Oh. I see, you had sent to canary, but accidently made your changes on your master.  That does not work, the ancestors are not the same.\nI highly recommend to create a topic branch.\n. Solved by @PascalPrecht \n. Sorry, you have an old link to a totally outdated documentation.\nThe official homepage and documentation is at http://angular-translate.github.io/\n. Already made for the primary one: https://github.com/webjars/angular-translate/pull/8\n. Indeed, looks good. :shipit: \n. So, was a little bug, have been rebased.\nReady for review @PascalPrecht, @tspaeth , @DWand \n. What is a null catcher?\n. Null.foo is never possible\n. Ok, rebased. The issue with i and j is still there, but this is okay. Because they are used within for loops where no dedicated scope is available! I've reordered i, j, c and d improving the readability of the temp vars.\nI would say.. go?\n. doc added\n. I'll merge\n. what is a three-way-merge?\n. Ehm.. I always merge with this option to see the stuff. I do not know you do not like that.\nIMHO it looks more explainable what's going on in the repository\n. I can opt out this, no problem. Didn't know that. Sry ;)\n. What is the workflow on releasing?\n. > I don't see the point of having an object that holds the major, minor and patch value. \nIt's more parsable when not having somthing like a semver spec engine. Additionally, that's common practice.\n. angular.version\nObject {full: \"1.2.14\", major: 1, minor: 2, dot: 14, codeName: \"feisty-cryokinesis\"}\nExt.getVersion()\nExt.Version.Ext.extend.constructor {shortVersion: \"421883\", version: \"4.2.1.883\", major: 4, minor: 2, patch: 1\u2026}\nHowever, jQuery actually not.\n. > However, we should come with a better solution on how we get the version into the source. I don't think it's a good thing to put the version numbers directly into the js source. Maybe we can extract it into a text file and make sure that the version number is baked during build process into the source?\nThat would be an answer to my open question: What about the workflow?\n. Status?\nRegarding naming? No idea; alternatively we use something like https://github.com/thedeveloper/sillyname . Works for me. Should be unique, but it fit.\n. Perhaps in the grunt release?\n. Based on the package.json? Then there is only the unique name feature left.\n. There's a grunt plugin for that: https://www.npmjs.org/package/grunt-version\n. At least for a technical practice, I'm in.\n. dropping http://blog.tastejs.com/rewriting-a-webapp-with-ecmascript-6/\n. Just for the records: Many things happen in the last year. I'm still for this, but there a several steps to go. I'm doing this for my own small angular plugin and I have noted the small things are \"expensive\".\n. Closing this. ES6+ will be requirement of a rewrite, if this will be.. @tspaeth  @paxal78  I'm confused. This is an issue.. for what? Not angular-translate itself, but grunt? Right?\n. Ok. I was not sure. close\n. Ok\n. Status? Ready for 2.2?\n. Generally, the scope is used as a somehow cache for several incoming change events: translationId, current language, interpolated params or changes in the extending attributes. It would be indeed a review worth if this could be extracted.\nHowever, at the moment you can't skip the child scope because otherwise multiple directives in the same scope level will \"fight\" against each other.\nMoreover, I personally recommend not using a style like \"myModel = null\" because you can never be sure that the scope is the same. You have this expectations, but is not true. I've written an article last year about this topic: AngularJS: 6 Common Pitfalls Using Scopes: Pitfall #5: The misleading \"current scope\"\nThis is a common \"issue\" of several AngularJS directives. That's how AngularJS (JavaScript Prototype) actually works.\nI'll close this since it is not bug, but feel free to discuss this.\n. sidenote: cdnjs seems to rely on npm in perspective of updates. that's fine: https://github.com/cdnjs/cdnjs#adding-a-new-or-updating-an-existing-library\n. Gulp: what are the benefits of gulp over the existing grunt? It's the new guy in the house.\nES6: I would separate this step completely from the roadmap, because I'm not sure if this works like we think. However, we should keep that in mind when doing this here.\nQuite apart from potentially problems with non-updateable bower extensions, I would like to get rid of these dedicated (bower) repositories without any autonom source code domain -- except the completely autonom ones like grunt-~, blog, and so on.\nSpeaking of repositories and packaging, this would mean that one repository is one component. If we really want to separate (modularize), then we do it right: we split and do the work in the separated repository really.\nIf we let the status quo like now, this means we have one component containing all the stuff. When using npm install or bower install, all components and features would be installed. However, the result would be a large list of dependencies, e.g. a messageformat dependencies even if this is not used. Alternatively, some dependencies would be only applied as dev, but i think this could be confusing people, too (like ngCookie issues).\nChanging this with split and dedicated repositories (like an existing bower-angular-translate-loader-static repository but named angular-translate-loader-static holding and maintaining the source code!), we could define dependencies in the right way. We could even define internal dependencies between our own modules.\nContinuous Integration, Testing\n- We have already a TravisCI integration which checks every commit in the repo and pull requests.\n- We have already used Git tags are corresponding with GitHubs releases.\nContinuous Deployment/Publishing\n- Bower is already ready because it uses Git tags\n- NPM requires a publish command: this should be easy done with a TravisCI hook on tagging, but someone has to evaluate this: http://mclear.co.uk/2013/10/06/publishing-to-npm-on-git-commit-using-github-hooks-and-travis/\n- some services like cdnjs or browerify looks for npm updates (see point 2): https://github.com/cdnjs/cdnjs#adding-a-new-or-updating-an-existing-library\nReleasing\nOur currently flow relies on two branches: \n- the canary as primary developing target for all developers\n- the master as the release target\nIf we want to release more often and earlier, we cannot use only one release branch (alias master). So I would suggest we should look for one of the git flows. I'm quite not familiar with both of them, but it basically looks fine. The main idea is, there would be beside a develop (alias canary) some additional release branches (for each relevant release like 2.0, 2.1, 3.0 and so on). We cannot assume that a 2.1 is newer than a 2.0.3. IMHO that would not be fair when serving semver correctly (i.e. support for AngularJS 1.2 for a longer time because of dropping IE8 support).\n. Support for AngularJS 1.2 would be only an example.\nLet's say after releasing 3.0.0 with breaking changes (we are allowed to do this because of a major release), we find a bug which also affected the 2er line. It would be very painful I we would unable to support this line anymore. That's the reason why there should exist multiple release branches. It would be okay to say: current:canary => future:master, current:master => multiple future:release/. Actual releases are still pinned with tags.\n. append: At the moment we're adding additional feature in the 2.0er release which is actually not semver anymore. This should be the next 2.1. But a bugfix could be applied to the next 2.0er-patch\n. That sounds interesting. This would mean they are treating their master (master branch variants) being the default target like our canary branch  today. I'm not sure this split is really required. It would fit for us: one default target branch (master) for the next planned version (holding either the next minor or the next major). And for each major/minor released version a dedicated branch for patches. Only if we plan to work on different \"next versions\" simultaneously, we would have to introduce another master/x.y\n. :ghost: What's up?\n. We don't have and will probably not changing the process.. Look for http://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate#methods_instant\nAnyway, you are building a web site. This is per definition based on a asynchronous architecture.\n. You can this achieve easily with an async loader. See http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading more details.\n. Unknown provider: $translateLocalStorageProvider\nis a general Angular JS error message meaning there is a missing component (named $translateLocaleStorage). \nI'd suggest to read the corresponding chapter. \n@zloy531  gives you actually the solution already.\n. Hi, thank you. I have read it over fast, but it looks good!\n. master?\n. Hm, that does not work on my local setup. I'm still fighting vs a strange Karma issue, but it seems that there is only a output like\njs\n/*!\n * angular-translate - v2.0.1 - 2014-03-30\n * http://github.com/PascalPrecht/angular-translate\n * Copyright (c) 2014 ; Licensed \n */\n@PascalPrecht look for this before merging.\n. The quote was copied out of my dist/*.js\n. No, with source of course. But the comment header should contain the license?\n. I've used 3e49bc6d. But I now see, you have your changes not in the topic branch, but in the canary itself.\nWith 4cac2d57 it looks fine. Was a little bit confusing.\n. You should look into your cordovas logs? Is that a webview with an external site, or a local one?\n. You are actually less newer to cordova than me. Anyway, I assume a standard packer will use file:/// internally which would implictly collidate with Same Origin Policies when using XHR. \n. Well, we have insufficient details about your situation to answer this. Yes, you can load the data directly with $translateProvider.translations() -- or an own custom loader.\n. Sorry. We want really help you, but we cannot imagine our whole app logic and structure ;)\nYour code snippets above are not invalid, each of them. But since we are not really knowing what you are doing, we don't know.\n. I'm not sure if that matches Cordova also, but as an Ionic (which uses Cordova under the hood) developer everyone should be aware about the different stages http://blog.ionic.io/handling-cors-issues-in-ionic/\n. This issue is closed, so my answer is short: file new issues if something is new, but don't comment on closed/handled ones.\nThis is a plugin for AJS, a web developing framework using basic technologies like JS, HTML and maybe CSS. If your setup with loading files is working, we (angular-translate) cannot help you with your specific app. => #1787. I don't see another option because the static files loader have to use $http.\n. rebased, there were some changes required since post compiling, async and so on.\n. done\n. merged\n. I'v pinged the wrong commit.\n. belongs to pr 411 \n. sigh. yes. I've checked it.. and forgot it. Should go in the sunday mode...\n. Hm, honestly: I would also think about this when seeing this screen ;)\nBut when changes of a non core contributor (without access to the canary in realtime), this looks fine for me.\n\n. Okay, just two notes on that\na) Have a look for my comment about this in the issue about releasing\nb) How do you handle external contributions which are not up to date? Actually, you can't. You can force to rebase (which is actually not a bad idea), but this could be a neverending story when the target branch is frequently being pushed. Even it is obviously unrelated, i.e. a doc change.\n. We are working all asynchronously. Imho that won't work in practice. We will see.\n. You can try to simplify the flow, but you cannot make an asynchronous process being synchronously. Same as promises.\nIt is only simpler in theory. Your flow based on the premise that the rebase+merge will be done right after the last rebase of the contributor before the next push of the target. You relay on  you/we will get this specific time slot between rebase and next push. But in practice, this time slot can be closed any second later after that action. And in practice, we are speaking of days of awaiting PRs.\nThat's the reason why the merge will be not rebased by GitHub (because the process is async). Another reason are that collaborated changes are grouped semantically.\nThe only one we could do would be rebasing on our side (effectively cherry-picking on another level). But this could make the thing more complicated for us. And would overrule the GitHub PR feature.\n. landed as 346c1aa\n. As Pascal already said, the language is not active until it is loaded. Returning it before it was loaded would result into an invalid information. You can use $translate.preferredLanguage() if you want to know the preferred language. But again: this is not always the current active language, but it could be probably.\nThe question is: Why do you need to know the current non-active language? You inject yourself using an event fired after a language was being made active (\"translate success\").\n. Do you mean this here?\nhttps://github.com/angular-translate/angular-translate/blob/457c020dfa35131bd2a65214e9f146eeb0b1512f/src/service/translate.js#L648-656\nThis should work. Which version are you using?\n. Hi, thank your for your contribution.\nPlease follow our Contributing Guidelines and ensure the followings:\n- [ ] make a branch of the developer branch canary\n- [ ] the pull request should targeting the branch canary (result of first point)\n- [ ] the commit message style should be adjusted (i.e. doc(loader): \u2026)\nThe broken TravisCI build is not your fault.\n. First look, looks fine!\n. This looks good, but you should rebase it again (there is commit from Pascal).\n. That was right, but it was not update to date.\n. Ah, don't saw this PR. I can close my duplicate #508 .\nCould you please rebase this and target the canary?\n. I'm not sure wether {{ anObject }}works in AJS afterall.\nbtw: <p translate translate-values=\"person\">welcome2</p> works.\n. This is not supported by AngularJS itself. I cannot provide more details, you should have a look http://docs.angularjs.org/api/ng/service/$interpolate.\nAnyway: You are using an expression within a data binding in a template (here: directive) where it is not required to use a binding filter expression value=\"{{ exp }}\". Therefor the valid one is value=\"exp\". Neither a bug in angular-translate nor in AngularJS.\n. Closing this right now due inactivity. Regarding the last concerns, a potential re-submit should be aware of the breaking/non-breaking situation.\n. Perhaps we should introduce a facade for this.\nProposal for demonstration purpose only\n``` coffeescript\n$ruTranslate = $translate.facade('ru')\n$deTranslate = $translate.facade('de')\nassert $translate.$use() is 'en'\nassert $ruTranslate.$use() is 'ru'\nassert $deTranslate.$use() is 'de'\nassert $translate.instant('header') is 'Header'\nassert $ruTranslate.instant('header') is 'RuHeader'\nassert $deTranslate.instant('header') is 'DeHeader'\nassertPromiseResult $translate('header'), 'Header'\nassertPromiseResult $ruTranslate('header'), 'RuHeader'\nassertPromiseResult $deTranslate('header'), 'DeHeader'\n```\nThat facade would only allow both asynchronous and synchronous (instant) calls. Alternatively, they would delegate them back to $translate.\n. @mdemille nope, that is not planned right now. However, we like PRs... ;)\n. No, speaking for myself this won't coming in 2.x anymore. However, it's already planned and implemented as draft in a demo-branch for v3.\n. Yes, there are no backports planned. The current architecture does not allow a simple language change for a single request; it would be hardly to maintain.\n. Does not provide the promise error callback your need?\n. There is the option for a custom error handler: http://angular-translate.github.io/docs/#/guide/17_custom-error-handler\nStill open: does not this fulfill your needs?\n. Why should interpolation params reject the translation? And if they should do, under what premise? Can an interpolation \"fail\"?\n. First of all AJS does not make this assumptions about filtered content. That's only a statement, we do not have to follow this, however.\nSecondly, it's the question what is actually defining a success of an interpolation? I'm not sure if there is any return code we can look for. And because the output of a translation could be  filtered/parsed/whatever again, I do not know if we can do something.\nActually, we are looking for some \"guards\". Following the initial example, there would be custom guard required, like: $translate('greeting', null, ['name']);\n. Closing this due inactivity.\nIn case of a contribution\n- should not breaking existing code\n- should be aware of other interpolation services (i.e. messageformat)\n- perhaps opt-in\n. Could you please rebase this and target canary?\n. Do you have already taken a look into the docs and the guide at http://angular-translate.github.io/docs/#/guide ? Especially chapter security would be worth able: http://angular-translate.github.io/docs/#/guide/19_security\nIf this does not help, you should please provide an example.\n. Feel free to open again.\n. edit: What is $translateCache? Who provides this? And for what reason this is required?\n. Perhaps I do not get you right.. but would guess you not got angular-translate right here.\nOkay, first of all $templateCache is a registry pattern by AJS itself which allows to load/set templates defined by their url and use them in directives or in templates. Well, that's because template are used to include in such way. And it is a cache pattern, because the fallback by url can work, too. That's all. It is a simple key value store where the loader is implicitly defined by the concepts of urls which would  being resolved by the browser if the cache cannot resolve it.\nHowever, you cannot make this real for translations.\nIn contract to this, the registry of well-known translations is $translate() as well (and its companion $translate.instant()). If you want to use a translation, you only have to ask for it (by the definition of the key or translationId). The part of loading/setting is defined with the concept of a loader which defines where a language set (a lot of translations, despite one template) would to be find (see either async loaders or more generally custom loader).\nI do not see any need for a $translateCache. What would this thing can do, what the rest cannot do? Again: What is the reason it should be required?\n\n$translateCache caches json-translations and be used by translation loaders.\n\nWhy should translations by the loaders being cached? For what and in which situations? The loader is used only one time for one language key when a page was being loaded. Speaking of site-over-site actions (which isn't the concept for Single Page applications like AJS, by the way), this could be either made by a custom loader with techniques like LocalStorage.. well or you just trust the tool you are already using: the browser [cache].\n\nIt is required because now we can't include translation json-file into application js-file.\n\nWhat do you want? Inline an existing JSON into your app? Just do it, put it either into you config phase, or into your loader. \n\nWe can use $translateProvider.translations(), but it work only in config section. \n\nRight. If you want to replace translations (aka reload them), then use a loader.\nA loader is being invoked every time a requested language is unknown (even when the application is running, obviously).\n\nActually we can't build modular lazy-loading application (without polyfills) where translation have been included in the module js-file. \n\nYou should take a look at the partial loader concept, I think\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading#asynchronous-loading_using-partialloader\n\nWhen translation is into module js-file which we random rename after every change this problem disappear.\n\nYou are starting to put your translations themselves into your modules`files? Why you are using translation after all? What are you trying?\n. > You're right, it is not absolutely necessary. I can cache translations in my loader (I use it now). I do not argue. I offer change architecture of this module, to make it easier\nSorry, I'm not getting this yet. At which point you need this cache? Which component makes the second hit (third...) ?\n\nWhen we use $translateCache we can include current translations into module file on the fly. \n\nYou want to include all languages into one file? Should they be all loaded regardless the actual requested one?\n. Recapping this:\n\nUser get index.html and 0e07709d34e5c415e8eea1a6f86f1e1c.js (first module: css, html, translations, js in one file).\n\nOkay. This is an angular app with module1. All fine, all works.\n\nNext: user go to other page and get 6705ef798c9b04b6a9d85dc6c74db136.js (second module, only all resources in one file).\n\nHold on: Do you mean a completely new site? A new site with another module2 than before? A new angular app? Because you cannot load another module when the application is already running.\nBecause..\n\nNext: user change language to fr and get module1/locals/fr.json and module2/locals/fr.json (separate translation file)\n\nWhy does the user should get still translations for module1? He has leaving the site already?\n. Okay. The things are getting more clear now.\nWould not help the partial loader? This would require to split all translations into sub parts (auth.text.a, auth.text.b, main.text.hello1, main.text.hello2, ..), but that perhaps not bad after all.\nAnyway, I think the solution would only be another custom loader.\n. I don't like to add a cache header by default. But if you think it would help, we can enhance the contructors of the loaders like useStaticFilesLoader({\u2026}) for cache: true at https://github.com/knalli/angular-translate/blob/346c1aa5e61ac9517a9e9ad60d975e56fefd0e32/src/service/loader-static-files.js#L26-L32\nWhat do you think?\n. Yep, that's actually correct ;) Thank you.\n. duplicate\n. You are not paying attentions to AngularJS' hierarchy and inheritance of scopes resulting into inconsistency of data and states.\nWhen using directives (specially form relevant stuff), you should always have a dot in your model references. Last year in April, I've written something about this at The Nitty Gritty http://thenittygritty.co/angularjs-pitfalls-using-scopes -- specially \"Pitfall #5: The misleading \"current scope\"\" would be interesting to you.\nJust for the record, I have build a demonstration with a little JsFiddle: http://jsfiddle.net/knalli/Zu4yB/ because actual working code is always better.\nI'll close this because that's not an issue for translate.\n. Sorry, you are right about this. Indeed, this is missing. Your subject had mislead myself, sorry about this.\nDo you like to make a PR to fix this? Please pay attention to our contribution guide lines to avoid extra work.\n. Thank you. A test would be fine so we could assure that this feature won't be \"patched\" away in the future.  ;)\n. further discussion in #511\n. - [ ] Please rebase the stuff (rebase basically your PR branch ontop of the current canary). The \"readme\" commit should went away. After this a forced push.\n- [ ] Regarding tests: Have a look at https://github.com/angular-translate/angular-translate/blob/master/test/unit/filter/translate.spec.js#L85-L129\n. Did you start on Canary?\n. At first, you should squash your test commit in your original commit (or commit amend and git push force).\nRegarding the rebase: If you really did a rebase of your commits ontop of canary, then Pascal's commit should disappear.\nPlease do at least the squash; I can rebase this for you if it does not work for you.\n. Yep, you have had a commit based on the master, but including the commit of Pascal. To get rid of this, you have to rebase your stuff which means you have to take you commit away (temp. i.e. with a stash) and restart from canary and re-apply the stash again.\nAnyway, I have applied into a branch on my behalf: https://github.com/knalli/angular-translate/compare/angular-translate:canary...feature%2Ftamtakoe%2Fpatch-1\n. landed as 1572b5998d6fe3ae98a59282e5b4e937a6644f99\n. Thank you for keeping up.\n. Which one is exactly broken?\n. > Or am I the only one receiving a ssl certificate safety warning at: https://angularjs.org/\nI'm not. I have OSCP checking enabled in Chrome.\n\nhttp://angular-translate.github.io/docs/#/api\n\nIs it possible you mean http_s_? Because is really totally broken.\n. I have extracted the SSL thing into #513. If that is the problem, we can close this. If it is not, please specify more.\n. @PascalPrecht  do we serve an updated version already? because it still shows errors...\n. Sure, I'm not sure what there is serving right now.\n. Landed as 4a713f0 & 65fc8be.\nBe aware: you had indented not correctly, i have fixed that up.\n. Well, that's how the interpolation adapter  is working  currently.\nI would evaluate more optimizations in the future.\n. @pkozlowski-opensource I can nail it with\njs\n// Error in Beta 6\n$interpolate(\"What an awesome module!\")(undefined);\nThe problem is the argument undefined instead of an empty object. I'd fix this here with an || {}, but this is the change between  Beta 5 and Beta 6.\nShould be argument undefined possible or is it illegal against the API?\n. - Using our canary stuff and Beta 6: http://plnkr.co/edit/zvmT0iPzU9BhnP0JqZUl?p=preview\n- Using our canary stuff and Beta 5: http://plnkr.co/edit/cq073gYXRV1ZKIIKcW8W?p=preview\n- using non minified angular of course.\n. Done\n. I'm quite not sure what you are trying to achieve, but: $translate.use() is not blocked which means you cannot relay (after invoking) your language was changed already.\nSo yes, it looks like you have a race condition between you explicit $translate.use() and an external event (here ui-router state change). That's actually a conceptional issue of you app.\n1. Why you are translating via the service and putting the translated values into the scope? Why not using the filter/directive which would automatically update it translation values on language changes?\n2. In case you are really required to do this (it is highly not recommended but I'm also knowing there are always exceptions), you have to ensure the updates on you own. This means you controller have to refresh all translations (here $rootScope.windowTitle) after the translationChangeSuccess event was fired, see http://angular-translate.github.io/docs/#/guide/18_events).\nThe result of the required boiler refreshcode is also one of the reasons of the translate directive.\n. Indeed, that is one of these exceptions.\nSo yes, you have to ensure the updates on your own. If you knowing a good style how we could make this more easier as an API, you are always welcome for ideas.\nIn your case, I'd personally do it so:\n(disclaimer: I'm the friend of decoupling things and make somehow event \"channels\". there would be a smaller version possible. also this approach is bottom to top.)\n``` js\n// in your app/root/content/central/whatever controller\n// putting the parts finally together\n$rootScope.$watch('windowTitleParts', function(parts) {\n  $rootScope.windowTitle = 'My Site - ' + parts.part1 + ' - ' + parts.part2;\n});\n// route config\n// retrieve part 1\n$rootScope.$on('$stateChangeStart', function(event, toState, toParams ) {\n    $rootScope.windowTitleParts.part1Id = stateId;\n});\n// content config??\n// retrieve part 2\notherEventOrSo(function(value) {\n    $rootScope.windowTitleParts.part2Id = value;\n});\n// translation watcher\n// translate part1\n$rootScope.$watch('windowTitleParts.part1Id', function (id) {\n  $translate(id).then(value) {\n    $rootScope.windowTitleParts.part1 = value;\n  };\n});\n// translate part2\n$rootScope.$watch('windowTitleParts.part2Id', function (id) {\n  $translate(id).then(value) {\n    $rootScope.windowTitleParts.part2 = value;\n  };\n});\n```\n. I'm in doubt we can do something without breaking anything.\nI've already added a note about renaming/enriching arguments with injected functions in #995\n. You did not start on canary, but on master. Now you have to really rebase your stuff. \n. \n you see it here\n. Again: You should not make a PR from master.\nsh\n~/Projects $ git clone git@github.com:tamtakoe/angular-translate.git\n~/Projects cd angular-translate\n~/Projects/angular-translate (master)$ git checkout canary\n~/Projects/angular-translate (master)$ git checkout -b feature/enable-cache\n~/Projects/angular-translate (feature/enable-cache)$ git commit -am \"feat (loaders): enable cache\"\n~/Projects/angular-translate (feature/enable-cache)$ git push origin feature/enable-cache\n. I think you can cherry-pick you relevant commits easily from the old branch.\n. We had explicitly decided to do it using emit avoiding uneccassary event falling. \nYou can always register for this using rootScope. \n. Okay, I would say we could live with a new default of cache: true if it is opt-out-able. Moreover, the cache property cannot be only true but also a custom cache object constructed by the $cacheFactory (which would make it easy for a developer to use advanced caching if (s)he like it).\nSo, this needs a configuration input for the loaders, i.e. \njs\n     $http(angular.extend({\n        url: options.url,\n        params: { lang: options.key },\n        method: 'GET',\n        cache: true\n        }, options.httpOptions || {})\n      ).success(function (data) {\n        deferred.resolve(data);\n      })\n\nI thought about unit test and decide that existing test work good. It checks if we delete part its cache is cleared. Native cache performance verified angular cache factory tests\n\nNo. There is no evidence that the caching actually works. I'm not familiar right now with AJS' cache API, but it seems we can look into $cache.info()?\n. Yeah, you have updated it now with an own cache. Sure, that's one option. But this would any developer forbid switching to advanced one like https://github.com/jmdobry/angular-cache. Or would this work? Because it looks like \n\njs\nangular.module('pascalprecht.translate').factory('$translationCache', ['$cacheFactory', function ($cacheFactory) {\n    return $cacheFactory('translations');\n}]);\n\nis static and not modifiable.\nWe try providing builder factory methods or behavior setting functions at provider level in such cases. Here perhaps \njs\n$translateProvider.useCache = function (factory) {\n  $translationCacheFactory = factory;\n  return this;\n};\nand using an easy-to-use convenient method \njs\n$translateProvider.useDefaultCache = function () {\n  return this.useCache(function ($cacheFactory) {\n    return $cacheFactory('translations');\n  };\n};\nand when initiating the service and creating the actual cache object\njs\ncache = $injector.get($translationCacheFactory);\n(example of this pattern: see useStorage)\nWhat do you mean?\n. Ok, I've opened with 5a23d98 a new branch which applies some convenient stuff ontop of this.\n. landed as b685601\n. Thank you Robin, but we need currently PR targeting canary. Sorry. Good catch anyway!\n. Your Init() is actually invoked in the construction phase of your controller's module. That's like booting up your system. You can a specific order of presence of system components (e.g. network), but you cannot be sure that internet is working now or only in a few seconds.\nSo, a solution is decouple this. Translate tells you about an event that a language was successfully loaded (see Guide > Events). Think about another scenario you missed completely: The language could be changed to another one. When would the controller be refreshed?\n. This issue will be resolved in 2.7.0\n. We're also using such a inline templating thing. It works actually good.\nProvide an example via plunkr/jsfiddle and we will see.\n. Closing due inactivity.\n. I wonder this is really what you want. Given the examples above, you do not give any attention to updates or refreshing of the labels or a language change (even an initial one). How do you want to handle this?\njs\n// or worse\n$translate('noticeBadRequest').then(function(translation) {\n  $message.error(translation);\n})\nWhy is that even more worse? This is actually an async service and you cannot make it sync without some crazy stunts (like .instant()) The drawback is the missing guarantee the translation is correct at that point.\nTip: If it is really such a simple call, this is quite smarter\njs\n$translate('noticeBadRequest').then($message.error);\nBack to your errors service, why do you not write\njs\n// into form errors service\nangular.forEach(errorObj, function(str, key) {\n  $translate.translate(str).then(function(translation) {\n    errorObj[key] = translation;\n  });\n});\nSame contraints: No $translate injection in the controller and the transport contains only the key.\nAgain, where is the benefit for that interpolate utility?\n. I'll not open a discussion about patterns, but some things have to be cleared.\n\nUnfortunately language changing without page reloading is myth now.\n\nIt work's. I'm working on a AJS driven web single page application which a dozen of services, controllers and a lot of (nested) views. The language can be changed at runtime with full support in backend as well in the frontend.\n\nBecause it contains more letters. If you make a big project with a hundred and more controllers you will not embed the complex structures in each controller\n\nWait. Not the number of letters should matter, but the readability of code. That's the cause C code written efficiently is regularly not very readable.\n\nAnd you have to inject $translate into each controller. All this is contrary to the principle of dry.\n\nDo not mix DRY with delegation or structures of async programming. As I said already: Async programming (meaning in this context to handle callbacks which are simple in future running blocks) are part of the thing -- you cannot eliminate them without loosing the async behavior. Sidenote: However, language enhancements of ES6 will help us (in context of JavaScript), but that is an outlook on the future without stuff like transpilers. \nIf you have really such a amount of controllers where such basics are a pain (I can fully understand your motivation, so do not get me wrong on the whole thing!), I would recommend you  https://www.youtube.com/watch?v=oJoAnVRIVQo by Google devs themselves about restructuring an existing app into an AJS one incl. best practices. In your case, I think it would help to have a look into dedicated \"util controllers\". That's a good mix of SoC and delegation.\nE.g. \n\nWe will have native parser of expressions like 'key | translate:opt'. I show above than there are real problems that we can not solve the existing methods in any big project\n\nThat one would fit very good in such a base util controller.\n\nWe could perhaps introduce something like translate-extensions or translate-additionals which really are not required. I don't see right now the need putting it in the (core) library. What do you think @PascalPrecht ?\n. > No :) At list you have to change locale manually by own code. I mean that angular-translate not provide interface language changing out of box.\nCould you please be a bit more specific? What does not working or should work?\n. I'm still not getting it.\nYou said\n\nI mean that angular-translate not provide interface language changing out of box.\n\nSo again: What is not working? I say: translate can change the language at runtime including reloading all the stuff. If you say it does work, you should tell us.\n\nusing translate filter in deep expressions in templates is impossible\n\nYep. That's an limitation of AngularJS.\n\nusing $translate service inside each controller some difficult\n\nDon't see this. Anyway, since 2.1 I'd recommend\njs\n$translate(['noticeBadRequest', 'noticeBadRequestDescription']).then(function(translations) {\n  $message.error(translations.noticeBadRequest, translations.noticeBadRequestDescription);\n})\nsee 612dc27b1382679941061f71920f4ee0bc6f7834\n. Closing this because of inactivity.\nFor the records: If you really need this kind of \"convenience\", please add it into your own application/support frame.\nThe reasons for rejecting that kind of \"interpolation\":\n1. We do not recommend using the filter (situation improved in AJS 1.3.0+ drastically; however, see 2.)\n2. Because filters using instant() which cannot pay attention to things like fallback languages, we cannot really support this because of the support issues with would have (\"fallback language does not work\" and so on). This also implicates all kinds of other things like templating.\nYour tradeoff is fine fine for you, but we have to work as a solid framework.\n. Well, no. We change the language at runtime. And this works. And, honestly, that was one of the motivation about founding the project by Pascal ;)\n. Extracting dynamic variables is problematic, because someone have to define at some specific point all relevant data points/fixtures to ensure that all required \"keys\" would be found. Given your example, which values can name be given? Infinite? \n. All points by Pascal plus in addition: code style (sorry for that :))\n@PascalPrecht any idea why there was used arguments.callee() anyway?\n. See #521 \n. this is a duplicate\n. This requires an isolated test case, i.e. http://plnkr.co/ or http://jsfiddle.com\n. Again: Please prepare something at which we can work and test. How else should we get solve this?\n. > Again: Please prepare something at which we can work and test. How else should we get solve this?\n. > If you use force repaint hack in IE with select, it should fix the problem.\nSounds be a valid IE hack. ;) Seriously, this could be the right answer: the combo box is a special element for the IE...\n. Closing due inactivity.\n. I'd conclude this with the following points\n\nsometimes the language tag in the app is not the same as in your endpoint, e.g. app is de-DE, but endpoint is only de\n\nIf your accessible content is stored different from standards, it's likely a custom loader would fit the situation at best.\n\nWorse, url loader always appends &/?lang= to the url, why is that?\n\nYou mean if the url itself is already something like lang.json?action=load? Yes, this could be optimized. I actually have thought AJS would handle this. (https://github.com/angular-translate/angular-translate/blob/702cb5e07e9ee1f2eb19fefc33068b744f380500/src/service/loader-url.js#L28-L29)\nHowever, it's a simple url loader. Nothing more (like Pascal already said).\n\nI think static / url loader could basically be amalgated into one loader, barring any technical obstacles. By default, they should use the template matching used in partialLoader. Additionally, the templateUrl should not only accept a string, but a function that has the current language as an argument and returns the finished url. This way, you can have arbitrary urls, for any language.\n\nThat is actually the \"loader\". Both static files and url loader are simple and small examples fitting for the most use cases.\n. You could make a demo/pr showing this what you are suggesting. But I think the existing APIs (useXXXLoader) should work then as now.\nAm 06.05.2014 um 15:34 schrieb Narretz notifications@github.com:\n\nI looked at static / url loader, they are very simple indeed.\nSo for me the basic question is, why not make the whole API even simpler and turn three types of specifying an url into one? A custom loader is not difficult, but in so many cases it's also nothing but specifying a different url than you can describe with static / url loader. For example, when I have static files in dev and an endpoint in prod, at the moment I'd either need to write my own loader, or decide based on environment, which loader to use. If I had only one loader, it's be as simple as writing the templateUrl into a config, and off you go.\n\u2014\nReply to this email directly or view it on GitHub.\n. This looks fine, but again: Existing configurations should work. Otherwise we have to introduce a next major without breaking stuff. That it is.\n\nSince June several commits happen, if you want to make a pr, you will be welcome.\n. Perhaps we rethink the loaders again for #995 , but for now -> closing due inactivity.\n. @juanpujol Yes, that's looking great!\n@PascalPrecht Should we not change the api to something like this?\n``` js\n   return function (options) {\n  if (!options || !options.url) {\n    throw new Error('Couldn\\'t use urlLoader since no url is given!');\n  }\n\n  var deferred = $q.defer();\n\n  $http(angular.extend({\n    url: options.url,\n    params: { lang: options.key },\n    method: 'GET'\n  }, options.options || {})).success(function (data) {\n    deferred.resolve(data);\n  }).error(function (data) {\n\n``\n. As of b685601 (and a small fixup 8613bef), you should be able to do this with any loader you want. Perhaps do you want to check out?\n. Well, that's actually all you need. Do you use the latest 2.4? 'Access-Control-Allow-Origin' does mean nothing*, the question is only if the requested was made via JSONP.\n- Appendix: I mean, it is irrelevant for this issue. If the request is made as JSONP, the options were put to AJS correctly. Then it is up to the server. Generally, the requests look likeurl&jsonp=callback`\n. Can you track this down on your own? It looks like I have accidentally swapped argument 2 and 3 here https://github.com/angular-translate/angular-translate/blob/6d35c6ba8791ff8f1c9e0c0c999e941005dd5ab7/src/service/loader-partial.js#L49-L52\n. @rewoo\nFist formally: Could you please make a re-request to pull based on canary and targeted against canary?\nBut looking deeper: There is no change to $translate(expression) which would make both ways to translate -- sycned via $translate.instant() and asyncd via $translate() -- acting differently.\nA side note: Obviously and not really surprising, the usage of such keys within a template would break.\n. Oh.. was an old one, replace by #551\n. :shipit: \nVetos?\n. landed as e37d89c\n. No, I don't get it. Could you please make a short demonstration at plnkr.co?\n. I've open the link, and see PLEASE TAKE A MOMENT AND READ THIS.\nIs this wrong? I don't get the point, still.\n. I'm not sure whether templates without any root dom node are valid. Beside this, I'm getting Uncaught QuotaExceededError right now from plunkr. Will have to look later.\n. Is this still a $translate related issue?\n. Nice to hear.\n. You have still to rebase your changes (commit) onto thecanary` which you haven't made yet (noticable by the commit by pascal).\nOverall, I'm quite not sure what we are doing here. This is a different behavior to $translate().\n. @tspaeth We had this already in another topic starting about the idea of something like angular-translate-extensions (Spring/Pivotal did this with https://github.com/spring-projects/spring-integration-extensions which is more community driven than the actual https://github.com/spring-projects/spring-integration)\n. Okay, same as already in #548 : It is bad it does change only the synced variant $translate.instant(), but not the asynced one $translate().\nAlso I would personally prefer translate-default. @rewoo We are talking about translate-defalut which seems to be missed in the doc yet http://plnkr.co/edit/nuX56VKSmVN2me74GR4e?p=preview\n. Closing due inactivity.\n. I would suggest you should store your dynamic value result into the scope. It works and additionally you give AJS a change to make your app a lot more snappier.\n. js\n$scope.actionResult = buttonAction();\nhtml\n<span translate=\"actionResult\"></span>\n. Ah, now I got it.\nOkay. Either you handle the translation (incl updating) yourself with $translate($scope.error_string) or you wrap this into another translation like '{{error_string}}'\n. Since you are using already translate-compile, you would have -- with translations {foo: '<span translate>bar</span>', bar: 'BAR'} and snippet <span translate-compile translate>foo</span> -- the result snippet <span\u2026>BAR</span>.\nEdit: But I still didn't make the point: You can have a translation Your error is: {{error}} where error is a (dynamic) value of the scope. This can be even an \"empty\" one like '{{error_string}}'.\n. html\n<span translate-value-text=\"{{error_string}}\" translate=\"my_error\"></span>\nshortcut for \nhtml\n<span translate-values=\"{text:error_string}\" translate=\"my_error\"></span>\nI'm currently not sure why the variant by scope reference does not work.\n. Nice to see you have found a solution.\n\nI don't think I can make it any simpler than that without modifying the translate directive?\n\nNo. If you have any idea how to make this easier, we like to hear this.\nI'll close this, feel free to re open if this is required.\n. Again: You have to use the directive because filter output will be encoded (always).\n. @islavi Use a single ling/string (even concatenated), but no array of strings.\n. @ahayn465  Please do not use already closed issues, especially if your topic has nothing to with the issue's one.\nPlease include/attach a proper demo, also I think your post is missing something?\nLast one: Please have a look at our guide, in your case it is eventually best showed here.\n. Well, I think you could use your module's configuration phase, inject the $translationProvider and provide some defaults. However, you have to make something like a fallback being standard in your ecosystem.\n. Actually, you have already used that phase giving the example by yourself. You can define a fallback language.\n. But if you want to provide a plugin outside of your own ecosystem/app: I would suggest providing only the keys, that's easier.\n. As long any module's components are used in (your) component, it is not independent to them.\nThe only possibility would be the usage of the directive, because it would be ignored when not registered. Said this, this would require that all defaults would be enough for the presentation.\nI will close this, feel free to reopen this if it is required.\n. Currently, there is no such feature. You/We could elaborate this one.\n. Alternatively, you inject the translated values as text parameters into your directive. In that case your directive does not require to depend on the translate module. wdyt?\n. Duplicate as #556\n. Thank you!\n. anyone who can a have a look? or will we merge this?\n. thank you\n. Could you please be a more specific what is going wrong?\n. Hi,\nplease check if a fallback language would help now.\nAnyway, I would say the situation of an unknown preferred language is uncovered.\n. Sorry, I'd overseen your fallback setup.\n. Afaik angular.element(~).on is an jQuery function, therefor there would be no implicit scope digest. However, a promise generated by $q would do.\nThis would mean\njs\nangular.element(window).on \"localeSelected.vtex\", (evt, locale) -> \n  $translate.use(locale).then(...);\n  $rootScope.$digest();\nBtw: Why are you utilizing events with dom events? Why are not using AJS scope events?\n. Yeah, that sounds good. Do you like to implement this one?\n. Will be implemented by #618\n. Honestly, you have not taken a look into the guide or the docs? :)\nThe service $translate() is returning a promise (which will be logged out in the console as a {} which it isn't). In despite of this, the filter translate() returns the current translation at once. That's because AJS filters must not return a promise.\nGiven that, I assume you are using the filter before angular-translate has loaded the translation completely. Using the service, it would wait for this. Using the filter, it returns the current value at that time (which is still unknown).\nForward looking, I'll close this.\n. If the Attributes will be either observed or binded in the scope, any change to the attribute should be available like others. Just like translate and its translation id. \n. landed as 06818ab (merge of 1d06d2a + 508fd32)\n. 1.2 should work in IE8, but please let us know if it does not.\n. Please be more specific, including an example.\n. Follow https://help.github.com/articles/github-flavored-markdown and use blocks with three backticks.\nProvide an example, provide your directive and your version. It would be perfect, if you can demonstrate this in http://plnkr.co\n. Ping @mehmedju Any updates?\n. Hi, thank you.\nThat is actually fine, but there are some points: please have a look at our contribution guidelines.\n- wrong target branch (and perhaps wrong source branch?)\n- commit message style\n- perhaps a negative regression test ensure your enhancement won't be removed in future accidently\nAdditionally, it would be good if you apply this enhancement to the $translate service as well so  both async and sync variants would be acting equal.\n. @chris2332: This is limited by AJS filters (they are always being escaped). You may store the translation in the scope (via a controller) or a wrapping directive.\n. That's possible, but it would be actually only another custom loader.\n. Have a look at Custom Loaders:\njs\napp.factory('amdLoader', function ($q) {\n    // return loaderFn\n    return function (options) {\n        var deferred = $q.defer();\n        // the actual amd stuff\n        require(['yout.id.for.translation.table.' + options.key], function (translations) {\n            // resolve with translation data\n            return deferred.resolve(translations);\n        }, function (err) {\n            return deferred.reject(options.key);\n        });\n        return deferred.promise;\n    };\n});\n. Feel free to open (or a PR) if you have an idea how we can back this in the core without being to specific on individual dependency structures.\n. Uh, \"Translation id with {{dynamic}} value\" will be interpolated to \"Translation id with  value\" due AJS template parsing. That's actually part of one of the latest incoming issues.\n. not related #596 ?\n. Is this still an issue?\n1. We have translate-cloak, and since 2.4.2 it can be fine-tuned (<span translate-cloak=\"missing.id\"></span> will be present only if missing.id is available)\n2. We have translate-default\n. Then there is the cloak left, or a custom $missingTranslationHandlerFactory.\n. I can't see anything open..\n. And this https://github.com/angular-translate/angular-translate/issues/588#issuecomment-45726733 is still valid.\n\nHowever, I do think that we could actually apply your expected behaviour, that when a translation is not found and there was content inside of an element, keep it.\n\nWe can introduce a global configuration setting for the directive which could do exactly this one. But we will not change the API (at least before a hypothetical 3.0). We like PRs!\nEdit: To be clear: I mean we will add API feature, but will not break anything existing basic stuff.\n. Link to #986\n. Closing as being dup. And a PR is welcome always.\n. @Francisc \nCould you please make a demo when this situation will happen? You can use this plnkr as a template: http://plnkr.co/edit/BJJwHaHnVFOIVYQjGuM2?p=preview\n. Okay, we had already such a patch. Closing this.\n. Because you did not have forked canary?\n. @bostrom because you have asked: just consider that all the commits are in a tree.\n\nblue is canary, top yellow is the current master, red is your pr branch which has it parent in the bottom (old master). And as you can see, there is one commit which was not merged. That was not needed, but that the gif diff cannot know this.\n. Cannot give you an ETA, but you can use a pinned canary version using the commit hash. It's unstable and unsupported, but you are already using a patch version, well, it's up to you.\n. The variable is nodename: https://github.com/angular-translate/angular-translate/blob/d548b0351f75e6a36991319305ea2d122f2c2f37/src/directive/translate.js#L126\n1. AngularJS/DOM reads/uses/injects your data-translate-value-NodeName as data-translate-value-Nodename (note that Nodename isn't be camelcased) in translate and\n2. translate cuts to the last item (Nodename) and uncapitalizes it to nodename.\n. Ah, I do not saw this. Well, that is not possible of course. Use unique keys which could not be interpolated. Yes, you are right: AJS does this\n. As I said already: This is not possible. You would have to bypass AJS itself, and not translate. Personally, I would not make such translation keys...\n. Please have a look at our API and Guide, escpically service's return: promise. \n. If you really want to translate the values itself, you will have two options:\n1. you translate them into your scope (via a controller instance)\n2. you use the post compiling option and invoke a translate filter in the translation itself (translate a translation).\n. There could be an use case in combination with partial loading?\n. 'meta' is much better than '__'. Additionally we could provide a function like metaAttributeName: (value = 'meta')? Just to avoid conflicts out there..\n. -> v3 maybe, but definitely not in v2.\nClosed due #1671. Sounds good. I think we should do it just like the other plugins?\n. Like $missingTranslationHandler or $interpolationSanitizationStrategy\n. @DWand The extraction of the existing into a dedicated plugin would be possible addition for 3.0.0. What do you thing? Perhaps like the currently closed  #330 (yours), but based on the current code.\n. Closing due #1671.\nAlready part of architecture proposals.\n. The docs has been updated.\n. What is your question exactly?\njs\n $routeProvider\n            .when('/:lang/tv', { te...\nThen you have to ensure that $translate.use(params.lang)  or something like this will be invoked\nIn case of an unknown language, you could use either no language at all (using translate defaults) or use again $translate.use(your-stored-language).\nI don't know, that's all very app-specific.\n. landed as 15831d4\n. landed as 6c2ab30\n. That is not a new part after all?\n. Regarding your implementation, this would be a reset or replace. What is the intention after all?\n. Ok.\nThe  existing API is:\n- addPart(name) adds a part unless it already exists. Otherwise it actually does nothing. Sidenote: a better name would be probably registerPart()?\n- setPart(lang, part, table) applies a part with content. It will replace any existing value with this lang/name.\nTherefor, you proposed API does not looks good fitting there.\n1. I would be something like addParts(name1, name2, name3), but also this could be done with an extension of addPart().\n2. Although I said it would be better addParts(), I also have seen that you proposed implementation  performs a deletePart(): That's is neither part of addPart() nor setPart().\n. I got your way, but this solution has not the same result.\n. ping #995\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Can you make this as a demo, perhaps Plunkr?\n. A custom loader would always be an option.\nAdditionally, we have currently #706 in the pipeline.\n. @etaroza Formally, please have a look at our contribution guide lines.\n@DWand Is there anything you would think it could not work?\n. landed as 54f8ab3\n. ping #566\n. Seems to be requested once again..\n. Oh, good catch. Well, probably a renamed one getCurrentLanguageKeys() would change the situation?\n. Okay. getCurrentLanguageKeys() (or even getWellknownLanguageKeys()) and new propagated events for changes of the internal known language keys could solve this.\nWell.\nEither someone knows the supported languages after all (the source of this knowledge is totally irrelevant for translate) which means this feature is totally irrelevant. Or someone does not know so the UI have to be totally dynamic/reactive and would even change the available languages from time to time.\n. I'm closing this now. In case of being urgent again, we should re-discuss this again.\n. This is currently not possible because translate actually does not know all abailable keys over all languages. \n. Any ideas?\n. I'll close this. If anyone has a cool idea how to solve this, we'll reopen this again.\n. Hm, it is not impossible to make a JSON from a properties (I'm doing this). Anyway, an interesting approach.\nHowever, I would not replace the existing statics file loader because \na) what is about the other loader? I.e. loader-url?\nb) therefor a better part would a general loader's transformer chain.\nc) because url-loader and statics-files-loader are both very similar (and could be actually one), I would prefer either the already named chain or an own dedicated custom loader (which uses the static-loader?).\n. I'll close this because is is not an issue ($translate.instant() is only the current state of loading).\nFeel free to reopen this.\n. 51409c6\n. Ah, that was not the list. Possible for a 2.7.1, too. ;)\n. When it is blocked so save, the storage handler can not save. That's fine. Therefor the patch seems to be okay.\n. Ehm..  this has already landed in master? 59aa2a01dca73b8343eadd77d41dcb294bfad89a \nIs this an issue any more?\n. You mean 'localeStorage' in $window is true, but $window.localStorage !== null throws an exception?\n. @nbaronov Okay, I'm with you. Browsers' JS VMs have such neat api from time to time..\nDo want make a PR? Be sure reading the contributions guidelines regarding the correct branches and so on..\n. Which also confirms 59aa2a0 did not solve the issue #384 correctly.\n. Fix landed as 75504cb\n- 53a8bad the fix for the fix (browser do not throw an exception, but store anything different than null into it.\n. Ehm.. IE8 should actually work. IE <8 and AJS can be used only without any support of anyone.\nI actually want to write it works in IE8 in our app (however we are dropping IE8 right now), but then I remember we have added some polyfills (here : es5-shim).\n@tspaeth When did we drop support support for IE8? :)\n. @StefanSchoof  Well, do you really want to block everything for a remote call for the correct language? What should the client (browser with the app) do while requesting it?\nAnd yes:If the internal static default language is not the user's one, it will result into a 2nd loaded language.\nIf you have a problem with flickering labels (because of changing languages), you can solve this with an own \"splash screen\" or other appropriate technique which does not block the internal app setup.\n. Again: But are really sure you want to block the whole application setup?\nIt's up to you, but personally, I would not block the app setup for such a requirement. It is irrelevant if it is a requirement, because it is a technical decision.\nIf the resulting app should only show the \"correct\" language, you have two more options:\na) you inject the language right into the delivered html container page (the server already had already the knowledge, so why give another roundtrip)\nb) you block the actual app init (after AJS is already initialized) until the correct language has been requested\nAnd well: There would be also the option to make a request out of the world of AJS and use a manual, deferred bootstrap. But I don't get why someone should do that..\n. Thank you for the patch. Unfortunately, we cannot use it until you follow our contribution guidelines.\n. Hi @Ciget ,\nyour problem is you probably did not take a look into the documentation, do you? Because you are using $scope.test = $translate('TITLE') which is not returning a translation but a promise for that one.\nBesides this, you should not use AJS 1.0 any more.\n. http://plnkr.co/edit/qNQLWr3rrLkXPV1EvkRF?p=preview\n. As we see, it is not clear indeed. \nThat's why this exists.\n. As already in #995 mentioned: we make as easy and define the support = AJS official ones.\n. @gergelyke  Thank you.\nIn general, I'm going with you...\nBut, let's have a look into the details.\nFormally\n- Please have a look at our contributions guidelines\n  - commit message style\n  - source branch (should be canary, and ideally a topic branch)\n  - target branch should be canary\n- Commits should be squashed\nTechnically\n- You are adding two shim functions and use it (that's okay!). But you changing \"btw\" the package.json.. that's not so cool. Please PR submit this separately, at least this is off topic.\n- The shim methods should use the original one if it is available (e.g. CoffeeScript's shim of indexOf)\n  - [x] indexOf\n  - [ ] trim \n- I would prefer we putting both indexOf and trim at the top (like indexOf) -- you had already noticed the indexOf was placed too \"low\".\n  - [x] indexOf\n  - [ ] trim \n. Of course it is. As I said: Branch from canary. ;)\n. be5f2c38 itself is fine.\n. landed as 8e5b87e\n. Sorry about the delays, we are currently a little bit out of time.\nI think this will be made in the next release for sure.\n. Okay, sorry. This is too long open. We're busy right now.\nPlease 5a9720a squash/fixup with 56f1b14 and make sure this fits the style. No need to rebase against canary again, I'll cherry-pick this.\n. Ok, I have rebased, re-squashed and rewritten both logical commits.\n. Both #654 and #519 are landed, this is not based on canary.. should be a review worth?\n. Is this still an issue with the latest release 2.3?\n. Perhaps @tspaeth can take care of it, I mean, he had digged right into the fallback issues last week.\n. @tspaeth ?\n. ping :)\n. The original issue was translations already defined via translateProvider.translations(key, map) could not avoid a fallback request (it has ignore them and replaced it on load). That specific issue was fixed in 3be14df8 (#981) and will be released in the upcoming 2.7.0\nAdditionally, sometimes a request has been made multiple times (combination of preferred and fallback languages). Must be fixed also.\nHopefully, I'm not missing something this (2.7.0) version works as expected. http://plnkr.co/edit/ho934XZcfvwkQByVOKVJ?p=preview\nI'll close this (in forward).\n. Landed already in canary.\n. Any updates here?\n. Ok. I'll close this. Feel free to (re) open an issue again.\nI'm still not getting \"bower_component\" in this issue... nvm.\n. You are asking for localization which is supported by AJS itself. While the US Format is 12,345.67 (which is weird for me), the European one would be 12.345,67\nHave a look at the number filter. \nSo: Translate has no dedicated implementation, because you can use the built-in one. However, you should have to reload the used AJS locales which are provided in the AJS Package. \n. While you should have enough stuff playing with events, I still not getting what you are actually want to achieve. Could you please be a bit more specific?\n. But that is not part of the loader?!\nSo are looking for translation loaded event? Take it by using translate.use(..).then(fn) or the global event. \n. As a workaround (if possible): use the promise\njs\n$translate.use('totally-wrong')['finally'](function(){\n  $translate.use('en-us')\n});\nSo, I would say it can paint the picture:\n1.01            use('totally-wrong')                   \n1.02            $nextLang = 'totally-wrong'\n1.03            loadAsync('totally-wrong')\n2.01                                                                        use('en_us')\n2.02                                                                        $nextLang = 'en_us'\n2.03                                                                        loadAsync('en_us')\n1.04            $nextLang = undefined\n2.04                                                                        $nextLang === 'en_us' => false :(\nCan you confirm?\n. Ok thanks.\n. @fidian Perhaps you can have also a look at 36710e3\n1.01            use('totally-wrong')                   \n1.02            $nextLang = 'totally-wrong'\n1.03            loadAsync('totally-wrong')\n2.01                                                                        use('en_us')\n2.02                                                                        $nextLang = 'en_us'\n2.03                                                                        loadAsync('en_us')\n1.04            if $nextLang === 'totally-wrong' then $nextLang = undefined (not true, so skipped)\n2.04                                                                        $nextLang === 'en_us' => true :)\n. here: http://plnkr.co/edit/Or5tpacOkHf1LEpAkGJQ?p=preview (updating commit)\n. Hm. It works sometimes.\n. Ok, this one works always: http://plnkr.co/edit/Or5tpacOkHf1LEpAkGJQ?p=preview (checking several times). But this one makes a change which we have to revisit first.\n. landed as d1745e4\n. What exactly does your \"does not work\" mean? Is the payload empty, has the callback never been executed, ...\n. Well, the standard (customized) loader only loads translations by an id. You are looking for special parts, which would be a job of the partial loader. Would it not be sufficient if you structure you languages in namespaced parts?\n. @DWand  yeah, we should elaborate this in a dedicated branch and issue. Could be a nice feature-set.\n. Side note: The wrapping $rootScope.$on('$translateChangeSuccess') should be used always controllers, otherwise updates will not work.\n. Is this still an issue for you?\n. Closed because of inactivity.\n. Closed due inactivity.\n. I have an app (on that level of complexity and number of translations) running still translate 1.x which is performing very well. Still extremely usage of translate-filters, which could be improved with more usage of translate-directives.\n. I've looked into it. \nAs a side note: \n1. I'm actually considering to change the event. $translateLoadingSuccess is actually emitted before the translation table is filled locally.. that's at least semantically not good (here: better $translateLoadingEnd).\n2. The cloak will not work if there is no custom loader defined. The existence of a cloak would be a challenge, but a customer loader is also only a configuration part. Even so the cloak should be removed IMHO. Option: Use $translateChangeSuccess (better $translateChangeEnd) which also solves point 1.\nBut coming to your issue: I also do not get it. In addition, your test case 1.2 works for me. Hello there! is printed.\n. Have a look at https://github.com/angular-translate/angular-translate/tree/bugfix/658, especially 3397e1f\nWell, however, this would be invoked always. Also on error cases.\n. Hi, why not put this custom logic into a custom, self baked loader? It's up to you loading within \"one\" load more than one XHR in parallel and mix them.\nSomething like (for technical showcase purpose only)\ncoffee\napp.factory 'customLoader', ($http, $q) ->\n  return (options) ->\n    promises = (common: undefined, customer: undefined)\n    promises.common = $http\n      method: 'GET'\n      url: \"common_#{options.key}.js\"\n    .success (data) -> data #filter for response only\n    promises.customer = $http \n      method: 'GET'\n      url: \"customer_#{options.key}.js\"\n    .success (data) -> data #filter for response only\n    # wait for both requests and mix them..\n    $q.all([promises.common, promises.customer]).then (common, customer) ->\n      # mix them and return the result\n      # ...\n      # and return\n      result.mix\n(Disclaimer: \"Code\" is more than 1000 words, and IMHO it is better readable in CS.)\nhttp://angular-translate.github.io/docs/#/guide/13_custom-loaders\n. @tspaeth  dup for #661\n. Well: You should start from canary, but you have used master.  Then we can investigate.\n. Yeah, on my system it's fine, too. Think we put this on hold because of #529\n. btw: I've fixed the tests in canary\n. Since 2.4.0 we have loader caches. Is this still required?\n. Closing this due inactivity.\n. (Disclaimer: I do not want to say this should not be fixed.)\n\nHowever, we also need to use the $translate service immediately following that.\n\nReally? I'm only asking you if you are really need to. Usage in a controller constructor is basically a misunderstood of asynchronous events in an AJS app after all.. This is just a hint. ;)\n. Well, I'd thought you would saying this.\n\nIn short $translate, becomes synchronous NOT asynchronous\n\nNo, it will not become synchronous because the underlaying loader are still async. (well, unless you could block execution which you do not can in the browser) At least you have to handle with a promise callback like $translate.refresh(x).then(callback). But that is only for the (first) refresh, but not any further events of updates/refreshes.\nAnd because of this, I would recommend usage of the event translateChangeSuccess, i.e.\njs\napp.controller('MyCtrl', function ($rootscope, $scope, $translate) {\n  $rootScope.on('translateChangeSuccess', function () {\n    $translate('KEY').then(function (value) {\n      $scope.key = value;\n    });\n  });\n});\nWhenever a translation is loaded (any cause), the controller will refresh its state.\n. Em, as I said already: \"I do not want to say this should not be fixed.\"\nBut you are insisting you would never ever have to switch translations again. Working event based, you would not have this problem now or anytime in the future (if you decide to do switching languages).\n. First of all thank your for contribution! Could you please rework this a little bit?\n- drive-by optimizations aren't useful for this change, however they are perhaps useful afterall (suggesting separated pr)\n- the last 2 commits should be one?\n1. What was you intention/strategy for the fix?\n2. Travis error is perhaps not your fault :)\n. Perhaps rebase onto latest canary, I've fixed the tests!\n. I do not know whether you are working on this right now.. but this is not \"rebase\" :)\nFurthermore, we should guard this with a test (refresh about 2-3 pseudo languages).\n. I'll close this now, partly because of inactivity.\nIf someone really need / want a promised refresh(), feel free to re-implement this one. However, I'm still recommend to use an event based strategy (using the event $translateChangeEnd).\n. #706 would be a solution if the source of translation cannot be changed server side.\nWill close this.\n. Hi, thank you for contribution.\nPlease follow the guide lines, you did not have make the PR based on canary.\nDo you already be beware of 98fe649a241b79c245fb32d838b84f0fac319f5a?\n. > Seems like I misunderstood the guidelines:\nOooppps! Well, that's actually wrong. Nobody had really caught this one actually.\nThank you! I've updated this right now.\n. That's an open, general issue: Because we had several additional features like partial loading, fallback loading in situations where the cloak is not key aware. If you have an idea how to make such a directive...\n. I've added a feature related to this: f7ccb7f\n. Closed due inactivity.\nThe specific feature \"overriding stored language via URL\" can be done by the user/developer on its own aligned the corresponding configuration of angular-translate. We are not against a contribution in general, but I'm not seeing the benefit right now.\n. Closed because of inactivity.\n. Fixed with 15a7bba\n. landed as 666123b\n. Thank you, that helps perhaps a lot!\nlanded as 12e1888 and 35002e1\n. In the next release 2.4, change 73b289d will be included which enriches the broadcasted events with the current handled language key. With this you can listen yourself on change events and store the current language in the scope.\ni.e.\njs\n$rootScope.$on('$translateChangeEnd', function (event, args) {\n  console.log('new language: ', args.language);\n});\n. What do you  mean?\n. In your case, $translateProvider.use() is in the block of config(function config(){\u2026}). That cannot work.\n. Well, you have made links to # and I really do not understand why you are doing this.\n. Hi, well, does not look like the tests are passing. Do you really execute grunt test without errors?\n. Hi, this requires a little bit more time to review. Could you please squash/rebase your changes into one single commit? The actual diff looks okay, but we still have to look into it deeper.\n. Replaced by #731\n@red-0ne  please have a look. :)\n. Please rebase your changes onto canary and push again. Thank you.\n. landed as e2fb80b\n. Unfortunately, storage getter/setter are not promise aware at this place. Actually, we had only covered things like cookies or LocalStorage (both synchronous). One reason is actually the fact, that the store is something fundamental. If this is asynchronous, another wrapper w/could block all translations.\nUntil someone :) will implement promise-aware storing, you will have to load and save the used language outside of translate. You are actually accessing the used language via a http api, which mean you can refresh the translations on getting them (i.e. session/user details).\n. > Oh..didn't know, just found them on Google and they didn't seem to be obsolete (last edit on September 2014)\n:( Lesson learned: Updating a wiki footer results into updating each wiki page on GitHub...\n\nMaybe they should be removed or at least place a notice with a link to the correct ones.\n\nWe should remove the articles which are outdated.. then they will disappear in the index.\n. Adding a note for changing to promises in 3.0.0\nClosing this, referencing by superior #995\n. Thank you landed as 595501a\nNow we still have to update all other repositories.\n. Is this still an issue with the latest release 2.3?\n. This is resolved in next release, dup #981 3be14df\n. landed as ac2f35c\n. So, I've applied target 2.4 (next release).\nThis fallback stuff is not mine, so I'm looking from the outside. Indeed,  (index < 1) ? index+=1 : 0 looks weird (typical issue: bound of 0).\nThe conditional push is okay, but I'm still not sure about the index calculation. Perhaps with a small sketch: actual and expected behavior.\n. landed as ac2f35c with change by @phw \n. Yes, we are aware (at least myself). \nBut it is good to have this pinned up.\n. Close this (see PR #692)\n. Well, concerning performance issues, it is eventually a good idea to stick with {{ HELLO_USER | translate : this }}. Haha, kind of a command.\nThat's why we generally prefer to use the directive (performance).\n. It does not look like we are getting back the feature, so you have to set the scope by yourself (like the migration by AJS shows).\nSaid this, I've changed the spec according the new behavior: 9465318\n. 2.4 available\n. @jangot Sorry, but we cannot solve this for you.\nAJS 1.3 has changed the filter's this being not the scope any more (therefore it is window). Said this, your expression cannot be evaluated without knowledge of the scope.\n. Travis failed due old version of bower.. which, however, actually would not happen if this patch would be based on canary.\n. I think the question was answered. Reopen again on demand.\n. The JSFiddle is a totally outdated version. And outside of a filter, HTML is being used.\na) Update your libraries\nb) Use a directive, not a filter.\n. Thank you.\nLanded as dec04c2\n. I'll close this.\nBut feel free to reopen it again, in case we have a valid demo and this is really an issue with translate.\n. Oops, it was unpublished by someone else. I did not know it was not under our control actually.\nI've sent the current owner a message, hold the line please...\n. Okay, I can publish now.\nI've resubmitted the latest 2.2.0 as 2.2.1 (unpublished versions cannot be reverted/replaced).\n. Okay, found this. This removes the watcher after it has been invoked the first time.\nHonestly, I had never understood why this was introduced months ago.\n@PascalPrecht  That was part of your optimizations for 2.0: 3b1d1c6504f1c5de02d6ea0defcbee80d9fe0a7a\nIf we remove both unwatch(), dynamic bindings will work again (see http://plnkr.co/edit/wCNyeL98UuxIqaV2ysuM?p=preview).\nDirective2 of the example won't work, but that's probably because there is no event listener f\u00fcr text content? Not sure if this even exist?\n. Actually, a bind-once does not make sense: that's the issue's topic.\n. Yeah, #683 does not remove any watchers again. So there is the issue. ;)\n. @fredericsureau Since #731 in merged, does it resolve this issue? Please give canary a try.\n. Got it: 31c0356\n. It would be nice if you can confirm the fix. Thank you!\n. The fork is completely outdated. AJS 1.1, AT 2.1..\nHere, do work in http://plnkr.co/edit/8QjDRN?p=preview ... ehm, hm.. and well, I've added accidentally invalid code with and invalid test case.  Double fail. :disappointed: \n. So should work in a3d10ed. Really. ;)\n. > Oops. It looks like theirs a bug when the model is set back to nothing it keeps the first character. Kindof odd.\nIn my latest plunkr?\n. I see. That's something else. \nAdding a translate-default=\"x\" confirms this.. it will not refresh because the translation of unknown or nothing will be rejected.\n. @tspaeth perhaps covered with your coming fixes?\n. > Ah I see. Is there an existing issue for this or was this a side effect because of a change in canary?\nNo this behavior is also in stable.\n. Filed #854\n. That's an issue with multiple scopes, you have to wrap it.\nhtml\n <div ng-message=\"max\"><span translate=\"FORM.MAXVALUE\"></span></div>\n. I'm assume your translationCase is something in the scope (scope.translationCase = 'xyz')? Then all filters will be invoked by AngularJS automatically. If this does not work for you, it's actually not a translate issue. You can verify this trying another filter.. should not work, too.\nBesides that, I'll second @Nate-Wilkins answer. We highly recommend the usage of the directive which performs better. But unless you fix the original problem, this will probably not help.\nFeel free to reopen this issue if you are really in doubt it's something else.\n. Thank you!\nlanded as 6be6a69\n. Thank you.\nDoes I understand correctly: This is actually a post processing function?\nThat's a great idea, but then I would name it more generic (i.e. post processor or post/response handler). \"Format adapter\" is a way too specific.\nI do comment 2 additional things right into the pr's diff, please have a look.\n. Except minor code styling issue, I'm with it.\nAn improvement (for later) could be a promise based response handler.\n@angular-translate/core any veto so far?\n. Additional params for loaders have been landed in canary with b685601. This means this have to be rebased against.\nWe can stick with a synchronous (non promised) solution, and make the asynchronous (promised) one later. In that case, this would be the next one to pick.\n. Hi again. We have added some fixes around this patch's diff.. and new features.\nThis should be rebased + jslint/jshint compatible (just call npm test).\nI'll comment the code for styling or issues..\n. And then we looking for promises..\n. Still open, still conflicting with latest canary.\nAdditionally, it looks like $http({transformResponse: fn}) would be another nice approach.\n- ref: $httpProvider.defaults.transformResponse\n. Closing this. Said this, I've add a tiny demo (895268b) showing how to get custom readers.\n. What is the actual use case?\n. I'm closing this. This is not on our agenda (too specific). \n. The current version is likely a \"you build it yourself on/after npm install\", but it should be more like \"it is prebuilt before publish\". Going with me?\nWhat is about the other files in dist, ie. angular-translate-loader-static-files.js? Is that still be okay?\n. current = in repo, future ~ this pr\nI only want to be sure I don't misunderstood it. ;)\n. I have opened a wip topic branch.0 \nWe cannot use this PR directly, because it is based on outdated master and targeting not canary.\n\"Discussion\", pleasemove ahead -> #710\n. Sorry, but painting or CSS issues are not a problem of translate or (probably) even AngularJS.\nAt least this would require a proof of concept...\n. And what would be the benefit? I do not see any profit introducing something new which cannot handled by using cloaks. And the issue above does not look like a JS issue.\n. I'm sure you are trying to build something not in the AJS way.... ;)\n. Separated commits for discussion value, I would repack them later.\n. Ok? https://www.npmjs.org/package/knalli-angular-translate\n. Rebased some pieces.\nWhen they is no veto coming, I'dl merge this next week. Perhaps it will land in 2.3 yet.\n. omfg.. that Github interface..\n. rebased and ready for pick\n. landed as b685601\n. landed as d1745e4\n. Yes, I this looks like a feature :)\n1) Please follow contribution guide lines: create a branch based on the latest canary, apply your changes and make a PR against canary\n2) please add a test ensure this will work\n. replaced by #730\n. Yes, looks like a Safari problem. I can confirm I see the exception, but I'm unable to debug this right now. The developer tools are broken for me, do not know if this is only by me or a general issue on Safari atm.\n. The problem lies here: https://github.com/angular-translate/angular-translate/blob/e97dd28fc8bc712acc3fb72646e0a759c179329e/src/directive/translate.js#L92 there is a npe or so..\n. Are you sure you do not have trouble with a local bower cache?\nTry bower cache clean.\nLooking forward, I close this ;)\n. Linking  #694\nFirst I thought this is a dup, but it is not.\nPerhaps I'm missing something, but it looks the translate-filter is likely dead (regarding dynamic values). Does have somebody a solution?\n. Yes, I think so, too.\n. If I this right about rc2, we only have to set filter.$stateful = true; This would not break 1.2 code.\n. landed in canary, filter is now marked as $stateful \nbffbf04\n. @AbrahamAlcaina What is your issue?\n. Beside this it does not make sense of one time (how should AngularJS know if the translation was loaded? << answer: it cannot, and filters will be invoked a way much earlier as translate can load load anything).\nDo you have tried the latest angular-translate (in canary) with $stateful=true filter?\n. @AbrahamAlcaina  Open a new issue if it is required.\nThis here is closed, the patched landed.\n. 2.4 available\n. A preferred language is the requested language one, but not an actual available or selected one.\n. Actually not only Chrome and Opera.\nYeah, do you want make a pull request? :)\n. We have a checklist for you at https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\n. landed as 2204f4f\n. While I don't think it is being solved, could you please verify with the latest release 2.3 (it's from today, so you probably didn't got it)\n. Linking to ac2f35c9a9aa0c319859cb57b59a8113e67f7e9a which relates to #690 \nPerhaps does solve this the issue accidentally?\n. I've patched the npe in 9aaa9a0. But I would also understand the actual issue.\nSo far: There is being a language requested which a) not available and b) is not loading.\n. You can test this yourself, but have to build on your own.\nEither checkout the repo and switch to canary\nsh\ngit clone https://github.com/angular-translate/angular-translate.git\ncd angular-translate\ngit checkout canary\nor via bower sh  bower install https://github.com/angular-translate/angular-translate.git#canary\nThen go into the checkout folder angular-translate and run sh npm install && grunt build.\nThe files under dist/*.js are equivalent the current canary builds.\n. Thank you , too!\n. Yeah, I also just created a patch in branch https://github.com/angular-translate/angular-translate/tree/bugfix/patch-for-ajs1.3\nThis includes also an additional test scope (i.e. run TEST_SCOPE=angular_1.3 grunt karma:headless-unit), but this shows it will not work.\n. Don't get confused by Travis, the scope is still not active. The tests are running against AJS 1.2 only.\n. Yeah, would prefer my patch.. but that's not the point. Unless we have a testing issue, the failing test shows that this should not work. Perhaps this is another AJS 1.3 issue..\n. close this, because landed as bffbf04\n. AJS 1.3 issue is resolved, but AJS 1.0 issues still there. I would say we ditch the support?\n. landed as da745d1\nTravis will automatically test against 1.2 and 1.3\nAt least for non-windows (windows users: use a bash..), I've add a shortcut for all scopes: npm run-script test-scopes\n. fyi @angular-translate/core \n. ping #725\n. Thank you! landed as 2204f4f\n. German and English: 8fc13fa (landed)\n. ping @angular-translate/core  input required. :)\n. thanks @forresst \n. Ouch. :/\n. french added as 33e3315\n. Closing this due lack of support for these languages. Sorry.\n. Hey @mato75 . It would be really fair if you would communicate in complete sentences.\nAs far as I read your - ehm - words, you are asking whether different modules would retrieve different translations? No, at least because this information is not being available.\nHowever, you can use the namespace feature to group translations -- and even load them in parts.\n. Thank you, landed as 3efaac5 -- I have changed the commit message according our guide lines.\n. That's not part of translate.\n. This should be resolved with 22cc8b4.\nOtherwise reopen.\n. Please check #694 and #720 Do you have one of these issues?\n. Fine, I'm understanding this as resolved. Release is imminent.\n. 2.4 available\n. Are you happy with these cool features?\n. landed as 33e3315 \nThank you!\n. btw: you should fix your commit author settings.\n. The filter itself is being marked as $stateful, perhaps that's a cause? We should dig into the internals to look for this...\n. I want to highlight one aspect\n\nI'm not sure if this is a bug in angular, angular-translate, or my misunderstanding of how the on-time binding should work, but this seems like a perfect scenario to use the one-time binding feature.\n\nNo, actually it is not. Filters are invoked by AJS and several points in your lifetime. Some of these invocations are at the start of the application when no (correct) translations are available. And some of them will be invoked with the correct language (i.e. templates built after events or other data available).\nAnd at top of this, I'm naming partial translations (loaded via XHR), fallback languages or even refreshes.\n. It depends.\nThe idea of one time binding in scope of AJS expressions is they \n\nwill stop recalculating once they are stable, which happens after the first digest if the expression result is a non-undefined value (link)\n\nThis requires the translation will only return a non-undefined value in case of success, but only undefined values for fails (these means: no default text, no fallback links, no placeholders, and so on).\nYou can (should?) configure angular_translate this way, however, I'm quite not sure you really want this. IMHO(!): You are wasting your time to optimize these watches, that should not have such an impact (-> Rules Of Optimization). We are (and I am especially) welcome for every information speaking of runtime performance, but as far as I know/do it works very snappy with dozens of filters.\nOne of the reasons why the filter is explicitly marked as $stateful (since 2.4) because we need exactly the removed feature (see https://github.com/angular/angular.js/blob/729c238e19ab27deff01448d79342ea53721bfed/docs/content/guide/filter.ngdoc#L130-L138). The translate filter is not a simple pure function, because it relies on the current active language and the current active translations. Using a pure filter, everybody would have to write for every filter something like {{ <h3>{{::'FeaturedProducts' | translate: {language:currentLanguage, allTranslations: allTranslations} }}</h3> }} -- and if params are in the string, the scope/this must be applied, too.\n. Nice to hear.\nIf someone can improve this process, we are welcome for ideas. Always.\nSo far, I'm closing this.\n. Solved by PR.\n. Well, the output of filters is escaped by AJS itself (<br> is not a solution), so you have to use \\n which will be ignored by html in most tags.\nSolution: Use the directive instead of the filter.\n. Thank you for your contrib.\n. Nope, that's not possible. You have only providers available while in config.\n. ping @DWand \n. Closed because inactivity.\n. We have already namespaces http://angular-translate.github.io/docs/#/guide/02_getting-started\nIs that what you are looking for?\n. Closed because inactivity.\n. > What do you think about this approach? Would you be willing to see relevant pull request?\nBasically, we like pull requests! :star2: However we probably have to discuss some implementation (proposals), for example performance trade offs or other stuff. That's either part of the PR (could be a WIP!) or as a dedicated proposal / technical discussion. \n. Thank you\n. Landed as c06106c, fc8641a .\n. Could you please give me some examples? I still not get your problem..\n. And did you follow http://angular-translate.github.io/docs/#/guide/09_language-negotiation?=\n. duplicate of #749\n. In general, most external plugins have to be configured with either translation texts or a dedicated localized configuration. In both cases, you would have to listen to $translateChangeEnd and apply the required configurations. If an instance of issue (say the datepicker) does not allow such reconfiguration (only for new ones), you have to replace the elements. That is not part of angular (translate).\nDoes this help you?\n. As far as I have understand the issue and the fix correctly, this was b). The case has not being covered yet. So it should not be breaking, only fixing.\n. landed as 247253d\n. $translateLoadingSuccess is definitively wrong because it is called too early and not always (because it is only fired on successful loading, but not on switching languages).\nI've applied a patch, but this needs still a review.\n. Patch 22cc8b4 landed\n. Why is it too early? The translations are stored which means \"ready to use\". If your fallback stack is too special, you should perhaps consider to use <div translate-cloak=\"translation.key.should.be.valid\"></div>\n. > I am mostly interested in knowing how/when this error occurs.\nWe are, too. But without an example and at least a stack trace (not minified), that's very hard.\n. Is there no other evidence for translate or even an anonymous function?\n(edit regarding 'no': nvm, I got it)\n. Hm.. this one happens only when fallbackLanguage is used outside of config?\n. Outside of config means it can conflict with a already loading process.. so: do we really need support for fallback outside of config? Otherwise.. close? @tspaeth \n. Yep, you are right. Perhaps I should read the doc, too... :disappointed:\n. Then, please @tspaeth  take over  :dancers: \nAt least the npe is fixed now (landed as 7c09d89)\n. Additionally, you are switching the language in the init-phase of the controller. It is very likely the loading of preferred (or even fallbacks) are still in place when in the init phase of a controller...\n. Why do you not use preferred language / or use?\n. We have to check all loaders.\n. Ok, if there is nothing wrong the patch will land. See attached.\n. in 2.4.1 released\n. Ok, looks good. One point: The changes in the spec has been required so this will work in the browsers... but this means also the function itself is never checked itself.\nMaybe we have to export the reformatter (input string, output string), but explicitly marked as private. Otherwise the whole locale detection feature is partly untested.\n. Anyway: Thank you, wonderful PR.\n. btw: that's a breaking feature. Because until now, people use configurations i.e. like 'en-us' as fallback.\nPerhaps configured fallbacks, preferred, use, etcpp. language keys should be normalized, too?\n. Replaced with b534e1a\n. refresh() does not block.\nUse the global emitted event: http://plnkr.co/edit/1hGrMU5FJxo7Wqzq7ikf?p=preview=\n. fix landed as cce897a by #871\n. At least {{ 'thing.'+result.letter | translate}} works (instead of the directive). However, that should not be the solution since usage of filters is not efficient in general.\nIt looks like the translate directive is not being updated. Perhaps related to #134?\n. I'm not getting the problem: You are already logging out everything. Are these messages wrong? Should be part.1.title not missing?\n. Yes, you can use translate-default, i.e.\nhtml\n<span translate=\"TRANSLATION_KEY\" translate-default=\"Default text\"></span>\nLooks like it is missing in the docs, I will open a todo.\n. landed as fcd6b3e\n. See here #1427 (Contribution welcome) :). But this is a duplicate of the other issue?\n. We have actually covered these cases https://github.com/angular-translate/angular-translate/blob/a2ac7000f94bcee6dd8e206cab5d7cec3527dd25/test/unit/service/translate.spec.js#L423-L600 -- an outdated request will not being used as \"new\". However, because everything is asynchronous, the result of a translation request could be different (i.e. due fallback logic).\n. Closed due inactivity.\n. anything open after fcd6b3e?\n. Hm, the dependency $translate -> $translatePartialLoader is not defined explicitly. I wonder why the implicit one should be a problem..\nAnyway: With 2e81613, I've added a demo configuration. Because this works so far, we have to go deeper. Please check it out and compare it with your configuration. What is different?\nI've tested the demo with AJS 1.2.26, 1.3.0-rc2 and 1.3.0-rc5.\n. Thx for investigating and looking into it.\n. Please confirm 0c01b12 will solve your issue.\n. Thank you, landed as 25f252c\n. 2.4.2 Patch released.\n. Can you rebase/fix this again?\n. replaced\n. Linking with 2.5.0...\n. No support for instant variant?\n. replaced by #871\n. Adding an example f0a6ca3 showing that arrays are supported and can be used already.\nClosing this in forward.\n. What is your proposed style?\n. Okay, I had not get this right. Currently everything is based on strings, but not sth else (like an array).\nThat feature is currently not to be planned; a contribution should cover\n- service calls (both $translate() and $translate.instant()), incl. interpolation params\n- a directive extension (i.e. translate-repeat) incl. interpolation params, values, defaults\nAlso there should be strategy regarding \n- what happens when a non array was requested with -repeat way?\n- what happens when a array was requested with standard way?\n- what happens with non existing value requested with -repeat? what happens with default?\n. In the \"ideal world\" that isn't JSON anymore.\nPerhaps we can introduce in the next major release some execution points for these extensions.\n. Patch 2.4.2 released.\n. The idea of a detached fetch sounds interesting, but, however, some \"specific hacks\" not like the '\u2026'  one. I have not understand why you are returning '\u2026'.. why not just wait? The starting $translate(key): promise would be resolved (more) later.\nOne point is missing here: How do you deal with fallbacks?\n. Closing due inactivity.\nHowever, I've referenced and taken this idea into account for the 3.0.0 roadmap proposal.\n. Yeah, an alias is likely a good addition. Do you want to make the PR?\n. Feature branch added.\n. landed as ef6a613\n. Which docs do refer to set?\n. Ah, I see. It will be refreshed on next release.\nAlready covered in #867.\n. No.. we've actually not considered existing providers.\n. That's right: This is a plugin about translation, but not localization.\nThe topic was already discussed (i.e. #275). Feel free to contribute (optional) sugar for this feature.\n. The configuration for routes is not part of translate, but your route plugin in charge. \nOutside of any AJS config phase (and after the demanded translation was downloaded), you could try to change the routing. That is not part of our business any more.\nPerhaps this could be done with a wrapping plugin...=\n. Closing this due inactivity.\nOne note: We cannot change this anymore, but I hope we can change the internals with loading / refreshing for 3.0.0\u00b4 this irritations will not happen.\n. It sounds you should use a selfmadecustomLoader`.\n\nDo you think it should be implemented server side only and don't use angular-translate module at all?\n\nIt is your decision, and probably slightly depended by the architecture and data's volume.\n. Closing due inactivity.\nI see here mainly two different topics:\n1. The proposal of unloading (partly refresh?) which can be done as a PR.\n2. Different kind of translations loading. Well: For this case everybody can build its own customLoader. \n. Use the directive, not the filter.\n. @frodefi @tspaeth  fixed that.\n. Coming in next release bd6e951\n. Please specify a little bit more what you are trying to achieve. Only extracting keys?\n. We have no dedicated tool.\nHave a look at  https://github.com/angular-translate/grunt-angular-translate for some build support.. Are you aware of directive translate-cloak?\n. Which version are you using? Do you have a corresponding cloak css class in scope?\nCould you please make a demo of your setup in mini? plnkr or fiddle.\n. Sorry.\nYour have registered a simple directive \njs\n    app.directive('okButton', ['$rootScope',\n      function($rootScope) {\n        return {\n          template: '<a href=\"javascript:;\" type=\"button\">' + $rootScope.Ok + '</a>'\n        };\n      }\n    ]);\nwhich is being created before the run phase (construction, config). This means the expression $rootScope.Ok will be evaluated by the VM before app.run will be performed. Simply means: before there is any translation being loaded.\nThe solution: Use $translate in the directive itself, and additional, do not use the $rootScope. \nBtw, that's bad practice (anti pattern of globals, here $rootScope).\n. Closed due inactivity.\n. Please have a look at $locale.\n. More details please.\n. Do you mean it is required now to utilize it like $mf = new MessageFormat('en')?\n. And the line in question could be fixed with such a default. Further translations would be used with the actual locale .. okay?\n. This should be work with latest canary: ac8d5ed\n. Closing in forward of fixed patch in 2.5.0\n. Only short: If this only issues in AJS 1.3, the missing scope availability in a filter could be the problem. What happens using the directive?\n. In AJS 1.3 you have no scope in filters. That's it. No way. I think your plunkr can be solved with <pre ng-init=\"xyz={COUNT: myCount}\">I try to do the same translate with it, and result is: {{ 'test.count' | translate:xyz:'messageformat'}}</pre>.\nI'm not an user of messageformat: why is the directive not an option?\n. Yeah, could be added. But it is a general feature drop by AJS itself and not angular-translate. And you can work with the scope with { 'TRANSLATION' | translate:this }.=\n. Is this related to #788 ?\n. Well, in https://github.com/angular-translate/angular-translate/blob/ac8d5ed1b43f3db7b269964383528b116ad26283/src/service/messageformat-interpolation.js#L111-L114 there is currently no check about the data (here: string) itself.\nIf messageformat does not support empty strings per definition, we can reject the request completely and return directly with an empty string also.\nWhat do you think?\n. Any updates here?\n. @tqmukas , @gontard , @andertun  I'm still waiting for confirmation by actual MF users whether my patch is okay for you or not.\n. @gontard What would be the bad practice to avoid that? We cannot avoid this call with an empty object, because this is a valid process in angular-translate (empty interpolation params). \nAn actual translation is required.\n. This issue is still open because.. well, there is still no solution.\n\nIn my case stringcontains the message format pattern but the interpolateParams are just {} so MessageFormat fails to evaluated the access to the attribute.\n\nSo.. should we try/catch it only and wait for a change of the interpolate params? Because without a bad duck check (is there a curly brace in the string), we actually do not know whether the translation is fine for MF or not.\n. @ombr : Current canary contains 2533f2d -- it would be helpful if you can confirm that one would fix this for you.\n. @ombr , @lboynton can you confirm the bugfix?\n. @andreialecu  Gotcha. Thank you. Fixed in d298eb2, working example http://plnkr.co/edit/pcgamKitVbpyfyzfz88e?p=preview\n@andreialecu are you able to make a working demo of your setup based/forked on this version? \n. @andreialecu Thank you.\nI've forked and updated your latest plnkr with a patch: http://plnkr.co/edit/U3Uw8M61MzgOkEpYc2R6?p=preview\nFollowing notes:\n1. MessageFormat looks into the actual type of the variable. Due technical limitations, we (based on the data given by DOM/AngularJS) cannot say if a value is a string or number. I've added a small duck type check provided here: bbc1cbe\n2. The expressions use uppercase value keys. The issue with this is AngularJS does not provide this case sensitive information (i.e. a translate-value-AMOUNT will be internally treated as translateValueAmount where we skip the first 2 words and de-capitalize the actual value key to amount). If you use lowercase expression variables, you will getting no more warnings.\n3. There was an issue with translate-value-* was not being available the first time when, but on the next update. Fixed in 98e8279\n. I'll close this.\n. Why you did tried this event but not $translateChangeEnd?\n. Well: $translateLoadingEnd indicates that loading [sic!] has finished, but not a language change. If you are hooking into $translateLoadingEnd and using $translate.instant(), you are not getting the new language.\nBeside that $translateChangeEnd is the correct event and is working, you are also using $translate.instant(). That should be used carefully.. when if doubt then use $translate() always.\n\nBecause it doesn't fire at all for me.\n\nThat would be a bug, because this would also mean the directive translate-cloak would not work. You can verify this with the demo included (run grunt server and visit localhost:3000/demo/ex10_translate-cloak.html).\n. Sigh.. you are making wrong assumptions and complaining then that is does not work for you.\n$translateLoadingEnd is being fired after a language was loaded (really, the name is no surprise). So you are right when using this event the translation table is being merged. But the current language is not changed. And how should I put it? There is an event for that $translateChangeEnd: this is fired when the current language has been changed. And the synchronous $translate.instant() looks after the current language. Works as expected.\nIf you are flipping between languages, the $translateLoadingEnd will not be fired again, but $translateChangeEnd.\nShow us $translateChangeEnd will not be fired.\n. Fixed in next\n. This is the best way.\n. You can use $translate.instant(), but we don't recommend this.\n. Thanks.. we should update the docs according this.\n. Have a look at $loaderCache : http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading#asynchronous-loading_using-a-cache\n. AFAIK, we have never published anything to NuGet.\nAtm I do not know know whether, when and how will publish such packages.\nI've spend some time on it right now, but it does not work on my machine (using mono on a OS X). My progress so far is stored in 7cfe0d4.\nCurrently we can support officially bower and npm, and everything which based on these like browserify.\n. Perhaps related with #752 ? Does 7c09d89 help you?\n. Perhaps solved with #848?\n. Closing due inactivity.\n. Thank you, I'm closing this. PR is open.\n. @DWand  ping. Perhaps you should copy that.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Year, I think so, too. \nEither request interpolation for title in the configuaration or translate before using it. =\n. Using the filter (which is actually $translate.instant(\u2026)) too early (which means before the translations have been loaded) could result into such situation. That is why we do not recommend using the filter or instant because except you know what you do.\nSo, in the controller's construction/init phase you cannot invoke a filter or $translate.instant(\u2026).\nThing asynchronously. It really matters. Your code still have a timing issue: when translation will be performed after your ionic alert.\n. I think \"yes\", perhaps you should tl.resume() in case of an error of translate too. As I said, I'm not familiar with ionic.\nThis code makes sure whatever the current translation is set, you will get the current one.\n. So, does this solve it for you?\n. This demo shows it is working: http://plnkr.co/edit/5RxzDR1vWnTEg2bZBGN0?p=preview\nPlease reopen if this is still not working for you\n. Thank you!\nLanded as dce8f39\n. Thank you. Landed as e360bf8\n. I'm closing this because it is not an issue of angular translate.\nPS: You are able to implement a custom loader using something like JSONP if it'd help.\n. If it is yours cdn, why not adding the missing cors headers?\nOtherwise... no way,\n. Oh, right.\nWell, these are your options. Broken hearts in web development as usual.\n. Yep. We will not include this, at least because of jQuery..\n. 42.\n. Closing this because of inactivity.\n. Since angular-translate does not provide any AMD support, you have to define the corresponding dependencies on your own.\nPlease check you have defined correct dependencies in your config like \njs\n{\n  paths: {\n    'angular-translate': '<path-to-angular-translate>',\n    'angular-translate-static-files': '<path-to-angular-translate-static-files>'\n  },\n  shim: {\n    'angular-translate': {\n      deps: ['angular']\n    }\n    'angular-translate-static-files': {\n      deps: ['angular-translate']\n    }\n  }\n}\nOK?\n//edit changed map to paths.\n. Yeah, paths of course. I'd wrote this from memory. Should not trust that.\n. But revisiting your error: It shows \"MessageFormat\" is used, but not configured.\n. Perhaps you should provide your config here.. but is only a configuration issue. Actually not translate specific, because I'm driving a translate/static-files config within RequireJS.\n. At least this config looks be incomplete. Besides naming typo (translate vs. ngTranslate), everything but translate core is not loaded =\n. You really, really should have (again) a deep look into understanding asynchronous module dependencies (AMD) which RequireJS provides for you. I'm very sure your configuration setup is invalid.\n1) If you define a module in path and shim under the name ngTranslate, it will not work correctly to require the module under the name translate (as given by you in js require(['angular', 'app', 'translate'], function(angular, app) {). That's what I'm talking about \"typo\". If this was your real code, it is broken.\n2) Because angular-translate (like many other libraries) does not expose itself as an AMD dependency, you have to do it. But you have to complete this setup with all transitive dependencies, too -- until one of it is capable.\n3) Said this (point 2), you have to specify the right order of dependencies: Let's say you require two dependencies A and B (`require(['A', 'B'], function() {}). If B requires A (but this is not defined), you cannot be sure that B is loaded after A. AMD only blocks for both loaded but regardless the order. AMD does not guarantee the order of one require definition, but only the level. \nThis does not matter if all dependencies are fully declared (either define, require or via config's shim).\n\nRegarding you (incomplete?) configuration and some exception/error messages, I assume following situations by using my remote crystal ball:\n1) If your app requires angular-translate and angular-translate-interpolation-messageformat, it will not work only to define a require for angular-translate.\njs\nrequire(['angular', 'app', 'translate'], function(angular, app) {\n    angular.element().ready(function() {\n        angular.bootstrap(angular.element(document.getElementsByTagName('html')[0]), [app['name']]);\n    });\n});\nIn this case, only translate (sic!) will be required. But nothing with message format nor any additional angular-translate-plugin. Eventually the modules are still in the stack to load (if defined later) or will never be loaded.\nThat is the reason why you are getting\n\nI get the error, [$injector:modulerr] Failed to instantiate module myApp due to: ReferenceError: '$translateMessageFormatInterpolation' is undefined at Anonymous function (line with $translateProvider.addInterpolation('$translateMessageFormatInterpolation');) \u2026\n\nSolution: Require angular-translate-interpolation-messageformat.\n2) In case of messageformat, additionally you have to specify the dependency to that. There is missing something like \njs\n        ngTranslateMessageformat: {\n            deps: ['ngTranslate', 'messageformat']\n        }\nand a definition of messageformat itself ofc.\nThat is the reason why you are getting \n\nSo I see this bower package inside my app.config, but how can I add now the Interpolation?\nWith this line:\n$translateProvider.addInterpolation('$translateMessageFormatInterpolation');\nI get the message SCRIPT5009: 'MessageFormat' is undefined.\n\n\nOkay?\n. Your module translate does not define (or being defined in shim) any dependency to angular-translate (you named it ngTranslate).\nFinally, you define in your app.js basically three dependencies: angular, ngTranslate and ngTranslateMessageFormat (twice?!). Again, you have not paid attention to the transitive dependencies and the order/level or dependencies.\nHere we go (your version): \n- angular\n- ngTranslate\n- ngTranslateMessageFormat\nResolving dependencies results into:\n```\n-> angular\n-> ngTranslate\n  -> angular\n  -> messageFormat\n-> ngTranslateMessageFormat\n  -> ngTranslate\n  -> messageFormatEn\n    -> angular\nAsynchronous requests (order of resolve not safe: 2, 3, 4):\n1. angular\n2.1 ngTranslate\n2.2 messageFormat\n3. messageFormatEn\n4. ngTranslateMessageFormat\n```\nAll  dependencies of the first level (angular, ngTranslate, ngTranslateMessageFormat) will be loaded side by side; because the last two have their own dependencies, they will be blocked. But since messageFormatEn only requires angular, it will probably be loaded when messageFormat is still being loaded. Same applies to translate not depending on ngTranslate.\n. Now your app still depends on translate core only.\n. Yes: If your Language.js does not use translation or requires your app.js.\n. @ti-dev never again this crappy file uploader, please.\nGiving a quick look, it shows me directly you still not have defined all dependencies:\n- angularTranslateInterpolationMessageformat depends on translate, messageFormat, messageFormatDe and messageFormatEn -- ok.\n- where are the dependencies for messageFormatDe/En? They require global MessageFormat which probably explain your error.. \nI will repeat: When using RequireJS, you have to go into each file and have to define its dependencies. RequireJS/AMD is a wonderful tool, but I wonder whether it is the right tool for you...\nAnyway: I want to close this here, because this is really no issue in translate.\n. Resoled by d912503\n. Landed as 473e8b7\n. iAttr.$observe is obviously for attributes, and you're asking for a element tag??\nCould you please provide a demo? I'm not familiar with ionic.\n. Could you please verify that you are using the latest 2.4.2?\n. Are we talking about this test case?\n``` js\n      it('should return translation when used as an element', function () {\n        element =$compile('TRANSLATION_ID')($rootScope);\n        $rootScope.$digest();\n        expect(element.text()).toBe('foo');\n    element = $compile('<translate>BLANK_VALUE</translate>')($rootScope);\n    $rootScope.$digest();\n    expect(element.text()).toBe('');\n  });\n\n```\n(https://github.com/angular-translate/angular-translate/blob/ad14d88307160c5f86c3552d414d1d8a5174d2b1/test/unit/directive/translate.spec.js#L153-L161)\nBecause this is failing since AJS 1.3.2 @angular-translate/core \n. We should use a deeper check a la has text instead of current is defined.\n. Applied fix in 5b4edd9\n. Can try this patch and confirm it helps... ?\n. In 2.5\n. In 2.5\n. It works.\nJust use bower's resolution feature.\n. Use a valid json with double quotes in keys?\n. Internally, the reason for this is that langPromises will store a promise for each (requested) language key -- forever.\nWe could fix this with 9f1b0d1, but I'm currently not quite sure I have not omitting something. /cc @angular-translate/core \n. @PascalPrecht @tspaeth @DWand nicely ping :)\n. As the latest activities here show, some additions has been made.\nClosing this.\n. I would suggest your flow of translating (last piece of code) is not be (re-) invoked after the language was loaded. That's actually your part, angular translate simply cannot do this.\n. Closing due inactivity.\n. jIyajbe'.\nWe already support your need. Use it now!\n. Issue solved?\n. I really have no plan what you are trying...\n\nThe developer should be able to call the $translate service passing the key of the message he wants and passing others keys as parameters that should be translated too and used to variable replacement.\n\nAnd what is wrong with\njs\n$translate('import.helptext', {'0': 2}).then(function(text) {\n  // consume text\n});\nSee also http://plnkr.co/edit/RcgKWS?p=preview\n. Don't read you want both the params should be translated.\nOption 1\njs\n// \"NUMBER_OF\": \"You have {{type}} of this {{object}}.\"\n// \"type\": \"Type\"\n// \"object\": \"Object\"\n$translate(['type', 'object']).then(function(texts) {\n  $translate('NUMBER_OF', {text: texts.text, object: texts.object}).then(function(finalTranslated) {\n    console.log(finalTranslated);\n  });\n});\nor Option 2\njs\n// \"NUMBER_OF\": \"You have {{'type' |\u00a0translate}} of this {{'object' |\u00a0translate}}.\"\n$translate('NUMBER_OF').then(function(text) {\n  console.log(text);\n});\nSee also http://plnkr.co/edit/9EBsy1?p=preview (Demo B2)\n. > In your last plnkr I need something like this:\n\nORIGINAL\n\"TEXT_KEY_WITH_PARAMS2\": \"This is also text with param '{{'HEADLINE' | translate}}'!\"\nBAD PROPOSAL\n\"TEXT_KEY_WITH_PARAMS2\": \"This is also text with param '{{ {{ANOTHER_PARAM}} | translate}}'!\"\n\nBesides the fact that this is an illegal interpolation expression, you can use \"TEXT_KEY_WITH_PARAMS2\": \"This is also text with param '{{ ANOTHER_PARAM | translate}}'!\" if ANOTHER_PARAM is a valid interpolation expression.\n\nYou get the idea?\n\nOnly just. Anyway: Nope, angular-translate does not support multiple translations per request, however, it c/would be only a wrapper at service level. Although, the part for the directive could be tricky. An alternative could be: <p translate=\"KEY\" translate-value-param=\"{{'V' | translate}}\"></p> (yeah, with filter).\nFor the moment, it is only a feature request which would require community effort.\nYou are welcome for a pull request, but you should be sure not breaking the existing non-translated params feature. Currently I'm not sure this will be an easy task.\n. Fixed in canary. Please give it a try.\n. Great!\n. In addition to the already mentioned module splits, I'm for a module split => package split => repository split. \nFor example, this would mean: Everything specific for angular-translate-interpolation-messageformat will be extracted of the angular-translate(-core) and will be moved into a dedicated repository angular-translate-interpolation-messageformat\nIn the consequences:\n- new more bower shadow repository because this would be the repository\n- dedicated releasing of plugins\n- bower publishing out of the box without any copy jobs\n- npm would be a no brainer\n. > and also changing the implementation between unit tests and running app\nWell, you are actually not using unit tests, but something more like integration tests.\nSaid this, I'm going with you the issue with testing not ideal. Your proposal is to instrument $http's cache factory: why should this require a preprocessor? Would not be the solution adding only a cache-put right into \"beforeeach module\"?\n. Closing due inactivity.\n. Closing due inactivity. Additionally, we recommend using a custom loader. You can even re-use the existing ones.\n. Done.\n. Hi @yjaaidi , \nas you can see in https://github.com/angular-translate/angular-translate/blob/2c1f91d6b396242a964630e3a34161e1b8954e31/src/service/loader-static-files.js, there is not much magic. You can just provide your own loader which fits your needs.\nhttp://angular-translate.github.io/docs/#/guide/13_custom-loaders\n. I think both refresh() http://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate#methods_refresh and a custom loader should be work.\n. > Is it possible currently to provide a set of translations that can then be overridden (on a piecemeal basis) after .config blocks have run?\n\nWould you recommend then doing the custom load + refresh at runtime from my component\n\nFirstly, no language nor translation will be loaded in config phase. Theoretically possible, practically not (speaking of asynchronous loaders). All requests and responses will be done at runtime. Always.\nSecondly, well, I would not recommend to reload all the stuff. So: At the moment there is no feature for replacing translations, this could be a feature request (welcome pull request!). Another option would be a custom loader and refresh(): You are the implementor of the loader, so you can decide how to load and store the results of a refresh(). \nI do not know you module architecture, but IMHO either a partial loader or a such a customLoader facade should work.\n. Thanks, landed as c28f6a9 and 5b018cc in all other languages, too.\n. Well, angular-translate does not expose itself as a AMD definition. Besides that, is does work in RequireJS just like any other non-amd-module. Of course you have to shim the library with the dependency to angular.\n. Okay.. I'm not beware of AngularAMD.. do not know which kind of magic it will do.\n. > Here is a plunk: http://plnkr.co/mjjuRa\n\nI have used the translate filter within the HTML - that doesn't work.\n\nEhm.. \nwhy do you write \nFilter via translate: {{ cl.account.tab.mycredit | translate }}\nbut not\nFilter via translate: {{ 'cl.account.tab.mycredit' | translate }}\n?\n. @ritenv  Ok.\n. still an issue?\n. Are you using AJS >= 2.4?\n. Then your filter is not doing anything more than ours.\n. Well. Unless there is  any other difference in the code, this is no magic. \nhttps://github.com/angular-translate/angular-translate/blob/3110a91735aa841d6b29338c6880364b3316ac28/src/filter/translate.js#L53-L67\nBeside of that, your  filter missed scope/params..\n. > Patch:\nOk, I don't see a problem to do this (actually, two patches). But it would be great if we could build a case for that...\n. See df37381\n. \"Patch\" in latest 2.5.0 included.\n. > this should be something for a major release from my point of view.\nYep.\n. @PascalPrecht  @tspaeth Request for decision\nI'm actually absolutely for migrating away from translate avoiding conflicts with existing HTML standard attributes. And it will be a no brainer adding an additional wrapper/alias for translate on demand (even for compat).\nSo, the actual question is: How to call it? Would be a <h1 message=\"translationId\"></h1> and {{ 'translationId' | message }} ok? The term messaging using for translations is not new in other domains (i.e. Java/Spring and its messageSource), but it looks uncommon in web for me. Wdyt?\n. Speaking of extending, the prefixed $vendor- would be the best one? @PascalPrecht you are more familiar with webcomponents/polymer.\nBut it should not be too long after all. Must be still easy to use. I'd already the idea of t7n, but is not only short and unique but also very obfuscated.\n. Conclusion of the last ones:\nStandard\nhtml\n<span pp-translate-cloak></span>\n<span pp-translate-cloak=\"TEXT\"></span>\n<span pp-translate=\"TEXT\"></span>\n<span pp-translate>TEXT</span>\n<span pp-translate-attr pp-translate-attr-title=\"TEXT\"></span>\n<span>{{ 'TEXT' | ppTranslate }}</span>\nCompat\nhtml\n<span translate-cloak></span>\n<span translate-cloak=\"TEXT\"></span>\n<span translate=\"TEXT\"></span>\n<span translate>TEXT</span>\n<span translate-attr translate-attr-title=\"TEXT\"></span>\n<span>{{ 'TEXT' | translate }}</span>\nIndeed, would be streamlined with the package name.\n. I do not see this feature in the v2. And there is still no timeline (with time) for v3.\n. Note: Definitely not in v2 (implications are big). And there is still no plan for a v3 release.\nClose this due #1671. Again: This is already part of the v3-agenda. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Well, actually, your expected behavior was actually a bug per definition. However, I'm not saying your expectation is wrong (speaking in surprising behavior).\nWe have the following test (several of that kind)\njs\n      it('should return translation surrounded by additional content when passed as interpolation', function () {\n        $rootScope.translationId = 'TRANSLATION_ID';\n        element = $compile('<div translate>abc{{translationId}}def')($rootScope);\n        $rootScope.$digest();\n        expect(element.text()).toBe('abcfoodef');\n      });\nwhere the context defines translationId => foo. Indeed, the preText and postText will be parsed and stored for later outputting. This looks really like to be intended. The only thing I've made (which landed in 2.5) was the one missing translate invocation on directive startup (in case of AJS 1.3). If the same text content would be added later, the behavior in earlier releases would be already like now.\nRegarding the quoted test case, IMHO, I would not expect abcfoodef (translation for key foo) but abcTRANSLATION_IDdef (i.e. failing translation). Removing that pre/post-text would be an intentend breaking change, but the solution would be an easy usage of the filter.\nI'm really not sure why we have that kind of feature added.. @PascalPrecht any ideas?\n. Closing this. And noting that at least I'm (and the rest of the team go with me) planing to remove the feature which is causing this trouble. Closing this. See #995 \n. @yarsh  thx :)\n. Picked.\n. Hi @Zertz \nThank you again. In general, this looks fine and it would be a good addition. Why do you have noted the \"BC\" while you have added backwards compatibility? :confused: \n. Well, options has to be an object, that's an interface constraint. Therefor, it is fine right so.\n. Docs! :) At the end, squash the commits alltogether.\n. @DWand maybe some spare time for a short translation change for ru/uk in pr/853?\n. @DWand you can push directly in this branch, it is rebased on our current canary.\n. I've to rename the branch: wip/pr853\n. Thanks all, landed as c462ee6, 8cd3456\n. Not yet. Perhaps 2.5.3, we will see.\n. Spent a long time for 47db194.. still not sure if this is correct.\n. added in canary\n. @pedrosanta I'm not sure I got your issue.. \nIf you are using a missingTranslationHandler, you are able to bypass possible rejections (because of missing translations) transforming it into \"valid\" ones (resolves). Therefore, if you are looking for logger, you have to return something non truthy. \njs\napp.factory('missingTranslationHandler', [\n  '$log', '$translate',\n  function missingTranslationHandlerFactory($log, $translate) {\n    return function(translationId) {\n      $log.warn('Translation for ' + translationId + ' doesn\\'t exist in ' + $translate.use());\n      return false;\n    };\n  }\n]);\nThis should be work with undefined, too..\n. So far, I can verify this. Updated a little bit. http://plnkr.co/edit/vJw8luD6Fbp2OK2qXVZC?p=preview\nMust be something internal, racing condition?\n. Two bugfixes are related with this one a13899f (#920) and 3be14df (#981). Matches with yours?\n. @pedrosanta  can you confirm the fix?\n. I'm sure this is a duplicate, so this have to be fixed.\n. Yep, the problem is actually mocking $window in tests. Assistance/hint is welcome.\n. landed as 941cf02\n. Hi,\nthat is right. Unfortunately, a simple dependency will not fix this because at least one shadow/shim repository have to be updated. Stay tuned, I'm opening a master topic issue.\n. All bower repos have such a dependency starting with 2.6.0\n. @Belelros @cgarnier @jardilio @pedrosanta : Suggestions? Vetos? Ideas? Issues I have not thought about?\n. Well, as we already know AJS does not follow semver and introduces even breaking changes within release candidates. =\n. All bower repos starting 2.6 have such dependencies. I've also extended the angular-cookies dependency allowing the same version range.\n. You are looking for the feature \"post compiling\"?\n. Unless you give us more details, I cannot see your problem right now (I'm not getting your last question). Did you already have taken a look into our documentation about the usage of translate, especially filters and directives? Also there is a chapter for asynchronous loading of JSON files.\nWhat is about {{p.name | translate}}? \n- http://angular-translate.github.io/docs/#/guide/04_using-translate-filter\n- http://angular-translate.github.io/docs/#/guide/05_using-translate-directive\n- http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\n. If your are looking for a usage within your controller/service, you should have look for the $translate service.\n``` js\n$translate('current').then(function(text){\n  array.push(new P('current', text));\n});\n// or w/ multiple keys\n$translate(['current', 'week']).then(function(texts){\n  array.push(new P('current', texts.current));\n  array.push(new P('week', texts.week));\n});\n```\n. Could you please follow the links and read the documentation and examples? It still looks like you are not  did this..\n. Thanks.\nAlready fixed in canary.\n. Thanks. Landed as b0ba156\n. Yeah, that sounds great. I second that.\nWe have already opened issues about alias directives which would be easier to make.\n. Well, I think a dedicated directive service would be nice. Perhaps it'd provide the common use case stubs/functions?\n. fyi: #870 was merged/picked.\n. Is this closed by 870?\n. Thank you. Landed as 570680f and following b61723e for the other languages.\n. @jar240 , as already mentioned by @paullofte, you are using gettext (I'm assuming angular-gettext) which is not this project here.\nSo: Do we have still an open issue here?\n. looks good.\n. I think so, will be merged.\n. landed as 5a9f436\n. Does a test for instant+fallback is available? I'm not finding it.. :eyes: \n. landed as cce897a\n. Well, well.. these drive-by-changes aren't good.\nThe actual change (missing chapters) is landed as 36402de right now, but the other stuff not.\nYour 36df7e4 (and fixups 46f9228 & c367717)contains a new feature I'm not sure why we should need this and another (interesting) demo for firebase.\nAnd 12f0a06? Heh? What's that? :)\n. Closing due inactivity.\n. @andertun  At the moment, this is not possible. Of course you can make a PR, but in general this would require something like a internal context of load.\n. Are you happy with translate-attr-placeholder?\nhttp://plnkr.co/edit/J4Ai71puzOaA0op7kDgo?p=preview\n. @DWand  still open?\n. @deanclkclk  I cannot find a suitable test case under your url.\nAnyway: Could it be possible that this is similar to https://github.com/angular-translate/angular-translate/issues/920#issuecomment-92445094?\n. @deanclkclk can you confirm this bug is solved?\n. @deanclkclk great! thanks.\n. Please give more details...\n. So, we cannot investigate without more details. We cannot debug your application to find out what you have configured and what there happens or not happens. \nPerhaps you are using XHR but they failed in your setup.. who knows?\nAdditional resources: https://github.com/angular-translate/angular-translate/search?q=cordova&type=Issues&utf8=%E2%9C%93\n. Are you really sure you have not any error in logs?\n. Then you have to debug (i.e. making Conditional breakpoint actions with console.log see in https://developer.chrome.com/devtools/docs/tips-and-tricks) within the translate directive to verify the actual steps.\n. Thanks. fcd6b3e\n. I'll close this as a direct duplicate to #876. Please have a look.\n. dup of #909 and will be resolved in next release\n. We are not really in messageformat, so if you think this would be a great addition, we would welcome it.\n\nUpdate the existing MessageFormat interpolator to cache compiled expressions, in addition to their final interpolated values. (I think that there are good reasons for continuing to support runtime compilation)\n\nYes, that is really a good one. Cache on demand.\n\nCreate a new custom interpolator that can interact with precompiled MessageFormat translations.\n\nGiven a pair of a special custom loader and this custom interpolator, this could work.\n. But this is not an issue for angular-translate?\n. Could you please specify this a bit more? Which values do you have parameterized? A demo (plunkr/jsfiddle) is welcome!\n. PR was picked.\n. @felixmosh  Thank you, landed as 75b7381\n. As our names indicates, we do only manage translating which is part of the internationalizing. But we don\u2018t localize. That\u2019s already done by Angular-i18n and can be added dynamically with ngLocale. . You are right, that\u2019s perhaps misleading. If you want, you can try a PR . Please follow discussion #1807. I've added an additional option setter $translateProvider.directivePriority(0).\nDefaults to 0 just like AJS default.\n. > ReferenceError: Locale fr could not be loaded: require is not defined\n\nat Function.MessageFormat.loadLocale\n\nYou should check your provided stacktrace.\n. I don't know your code.. perhaps? \nNeither we are using require in angular-translate nor is the error happened in our code.\n. As already mentioned in #797, we are currently not able to provide this. Neither I'm willing to proceed with a developer-only-releasing solution (which actually does not work currently because I'm not working w/ windows and the mono solution is buggy for me), nor I have enough knowledge how to solve this automatically.\nRight now, any developer with \"release permission\" is able to make release publishing to npmjs.org, bower (actually GitHub) and GitHub itself. No other OS dependency, and no other tools than a npm install had included.\nAt least we must have a working solution how to build such packages and submitting them into the repository.\n. @gtesslerge : Could you please say which component is breaking the Strict DI mode?\nActually, this should be no issue. Regardless the fact we are building the artifacts with ngmin (until and including 2.5.1) and ng-annotate (since 2.5.2), even the source files should be written in explicit manner.\n. Closing this because I cannot see an issue. In fact I know at least one app with enabled strictDI and included angular-translate.\n. @njlg , I'm not getting your issue. What is exactly your problem? I've tried your demo, but I'm not getting the point..\n. Correct. You cannot query for a language in the constructor phase  of a component (controller) when requests are still running.\nInstead of\njs\n  .controller('PrivacyCtrl', function($translate) {\n    console.log('PrivacyCtrl using %s', $translate.use());\n  })\nyou should use the event\njs\n  .controller('PrivacyCtrl', function($translate, $rootScope) {\n    $rootScope.$on('$translateChangeEnd', function ($event, data) {\n      console.log('PrivacyCtrl using %s', data.language);\n    });\n  })\nAnd instead of \n``` js\n    $stateProvider\n      .state('privacy', {\n        url: '/privacy',\n        templateUrl: function() {\n          var locale = 'en';\n      // this is undefined when useStaticFilesLoader() is used\n      var tmpLocale = $translateProvider.use();\n      if(tmpLocale) {\n        console.log('translateProvider is set to %s', tmpLocale);\n        locale = tmpLocale;\n      }\n\n      return 'privacy.' + locale + '.html';\n    },\n    controller: 'PrivacyCtrl'\n  });\n\n```\nyou should use the instance not the provider (it is not doing something, only config)\n``` js\n    $stateProvider\n      .state('privacy', {\n        url: '/privacy',\n        templateProvider: function($translate, $stateParams) {\n          var locale = 'en';\n      // this is undefined when useStaticFilesLoader() is used\n      var tmpLocale = $translate.use();\n      if (tmpLocale) {\n        console.log('translateProvider is set to %s', tmpLocale);\n        locale = tmpLocale;\n      }\n\n      return 'privacy.' + locale + '.html';\n    },\n    controller: 'PrivacyCtrl'\n  });\n\n```\nSee in http://plnkr.co/edit/IcR5SOBJq4JwWlbZLEvH?p=preview\n. landed as 570617c\n. @jelisejev Using the built-in directive translate-cloak, you should have a useful tool for your purpose.\nAnyway: Thank you for the hint about the incorrect loading result issues.. this calls are currently needed because it controls fallback languages as well as asynchronous loaded languages. Currently, this guarantees the order of language presence is correct.\nSo, a simple patch like\njs\n} else if (langPromises[key]) {\n  langPromises[key].then(deferred.resolve, deferred.reject);\n} else {\nwill not work.\nUntil someone can improve this without destroying the correct orders of asynchronous language loaders, this work's like expected.\n. Formally, I would recommend a look into GitHub's Markdown Guide, because I'm not sure whether I got your unstyled code right or not.. \nSo far: You can refer to expressions directly: <p class=\"text-center text-muted\" translate=\"TERMS\"></p> is fine!\nWhat do you mean with HTML? Which one?\n. Well, I have edited you post because I could see your HTML in the edit mode only.\nOkay. This is already the easiest way for (more) complex translations. In different languages you would have different markup positions, so this is fine.\n. > Is it possible?\nUse \nhtml\n<p class=\"text-center text-muted\">\n{{ 'ALREADY_LOGIN' | translate }} <a href=\"/#/login\">{{ 'SIGNUP' | translate }}</a>\n</p>\nIt's your turn.\n. Perhaps because the old 2.2 is not AJS 1.3 compatible; which means the filters will be treat being stateless.=\n. @DWand  still open?\n. @kumarharsh We had resolved this in  #981 -- can you please verify that one? Checkout Patched  http://plnkr.co/edit/qm09k1eP4cdIq5TK71ch?p=preview\n. Yes -- refresh() will reload all stored translations. I don't know if this makes sense with partial loading after all...\n. (A proposal of me for v3 is an additional flag to avoid this.)\n. Closed due inactivity.\nThe original issue is about the partial loader's loader efficiency. If anyone make a enhancement contribution, it is very likely welcome.\n. fyi: We have an outstanding PR #755. Due breaking changes, it was not merged yet into master. Perhaps it will land as opt-in only..\n. Prefer an opt-in (default false) for now, and in the next future major an opt-out (default true). Something like $translateProvider.normalizeBrowserLanguageCodes(enabled).\n. At the moment the implementation of the directive defines its own scope. Regardless using translate-attr or not.\nPersonally, I would prefer to reduce the whole scope thing, but at the moment we have no time for that. If you have the opportunity and can make up a solution resolving the features without such a scope, please make a PR. It is very welcome. \n. > Is there some way I can tell the library that\nNo. It is simple like that: asap the AngularJS is starting itself, all config()'s, all run()'s and so on will be invoked. Your suggestion would also result into an issue: what translation definition does you app have if your xhr would fail? No translations? Never? Maybe a (system) fallback is not a bad choice after fall.\nAnyway: A global delay intercepted in a custom loader would be possible. At the moment we are not planning for such stuff. \n. @vladsd Read the manual.\nYou have following options:\n1. Provide additional $http parameters part of loader options.\n2. Provide a (custom) loader cache.\n3. Provide appropriate configuration in *your server.\n. Thank yo, can confirm this. I've mixed some versions: neither AJS 1.2 or an earlier translate 2.4.2 behave better.\n. coming in next\n. wow.. so simple and it didn't worked for me :(\n:+1: \n. picked\n. How we can \"translate\" numbers? A number is - written the (western) arabic way - always the same.\nIs there anything still open here?\n. What do you mean with \"I have to refresh the page\"?\nAnyway.. please make a demo i.e. with plunkr or jsfiddle so we can see what you mean.\n. @liamkeaton I'm a little bit confused.. what is in your interpolatorHashMap[interpolationId] ? There should be nothing else then an interpolator...\n. Oh, yeah. Got it. Just missed the fact it is an user input actually..\n. Thank you, picked.\n. You can define translation ids like one and two (or first and second or even 1st) and translate them in each target language.\n. Despite the corresponding chapter in the docs (http://angular-translate.github.io/docs/#/guide/19_security), you should use <div translate=\"{{translationKey}}\" translate-values=\"translationData\"></div> which is not a filter intercepting your scope data.\n. Three ways:\nDo not use \u201aescaped\u2018  but \u201adefault\u2018.\nImplement an own strategy which would treat specific input as safe (like AJS 1.3 $sce)\nCombine the translation in you own controller/directive/service being sure no malicious input could be injected.\n\nAm 09.02.2015 um 16:56 schrieb Szymon Nowak notifications@github.com:\n@knalli https://github.com/knalli Thanks! Unfortunately, in my app I've got:\n$translateProvider.useSanitizeValueStrategy('escaped');\nand thus it doesn't work and still escapes HTML. It looks like it's going to be a default in the future, so is there a way to disable it in a specific place? Here's a Plunker that I used to check why it doesn't work http://plnkr.co/edit/4U2jcDN99Shyd5FIg2L4?p=preview http://plnkr.co/edit/4U2jcDN99Shyd5FIg2L4?p=preview\n\u2014\nReply to this email directly or view it on GitHub https://github.com/angular-translate/angular-translate/issues/915#issuecomment-73532837.\n. I would say you are using a very old version of angular-translate... ;)\n. Could you please make a standalone test case showing the problem? For example with plunkr, jsfiddle. \n. At the moment all dist files are available in that one npm. \n. Thank, picked.\n. @sharanmunyal  Can you please make a small test case. You can use this template: http://plnkr.co/BJJwHaHnVFOIVYQjGuM2\n. @sharanmunyal  Thank you, that helps a lot! Big issue actually, fix applied in seconds and coming in next release!\n. Here is a patched version active: http://plnkr.co/edit/tC1BMScY804DEsKNTLE5?p=preview\n. @DWand  @tspaeth \n\nCould you make additions for the missing languages as well (see 0d5d494 it's only one line)?\n- [ ] fr\n- [x] ru\n- [x] uk\n- [ ] zh-cn ?\n- [ ] zh-tw ?\n. @marcalj  Thank you.. I've added the link in the docs.\n. Closing this. Looks like we cannot provide synced translations for the missing ones..\n. Thank you. Slightly modified, and picked.\n. There is a bug in the processing.\n. Fixed in latest 2.6.1\n. I do not get this one\n\nThe problem is the translate directive tries to resolve a not existing node in IE.\n\nAre you speaking about a timing issue? How can a translate directive work without a node?\n. At the moment, I'm not fully aware of all consequences of terminal. Probably this could break existing solutions depending on the result of translate already. This would change the resolution dramatically. I'm still not sure this would fix the actual issue.\nThe current problem is: As speaking for me, I'm still not getting the actual problem. So yes I'm seeing there is a problem.. but not WHAT it is exactly.\nThe fix in gettext was this here: 77f039c2a51cdce4e6d1226a2d504b1ea836705b\nI've applied this for us also now, but please have a look at this!\nIn order to checkout this:\n- Checkout canary\n- run npm install (aware of the current DDoS issues in GitHub)\n- run grunt build\n- use the generated files in dist/*.js as a replacement\n. I've forked the demo at http://plnkr.co/edit/3Tuon2cqP1Sw4kD7oiZU?p=preview and injected the latest canary build.\n. Link should be c4b16d3\n. Well, the patch in mention has made it into 2.8.0 already, but we have got NO feedback until today...\n. Closing this. I recommend filter or the latest addition translate-attr, but not using translate within svg elements when targetting IE8.\n. Well. The $translate.use() must be implemented in your run() or any other controller/service. You should define a static (unless you expose this one directly in the html) language id, in order the app can show you text until your custom language negotiation has been resolved. Actually a classic \"language stored in server side session\" scenario.\n. Could you please elaborate this a bit more?\nWhat did you have tried? What is your configuration? Can you show a working example of non-working?\n. Are you using the partial loader?\n. > At the moment, in order to make it work I need to add both the translate-cloak class and the translate-cloak attribute. The simplest solution to that issue would be just allow to declare the translate-cloak directive as a class.\nI don't understand the issue. But yes, the attribute way should work too. Perhaps we had missed the default (because there is actually NO restriction, although it is documented).\nAs you can see here: http://plnkr.co/edit/PTVj8vBMFRl4UmHp8uTM?p=preview \n- Single attribute works\n- Explicit key in attribute works\n- however: class does not work\nSpeaking of making the thing easier, it would be a good improvement allowing class directives.\nBut that (class attribute) is actually not the topic of this issue.\nThe problem with this issue is: nobody has made a working example (proof of concept). I'm running a larger SPA with ui-route without these problems and we could not understand the problem. After a while we close stale issues.\nSo, well. However, it is correct that the directive on instantiation is not looking for the state of translations. And yes, it is correct that a $translate.refresh() will invoke implicitly an event which will solve this problem\". At least as a workaround, this is fine. This issue is a bug and will be addressed..\n. fyi: #1175 in canary resolved.\n. Doing exactly what more than method  1?\n. Closing due inactivity.\n. Hello,\nI'm closing this issue due inactivity. \n. ui.router has to be defined in the config phase, whereas no translations are available.\nSo, no you can't use this static title. You have to look for an alternative way, i.e. via an asynchronous title apply.\n. Modified picked.\n. @marcin-wosinek  thank you very much, it's picked!\n. No. Neither anyone has requested this, nor I'm not sure whether is useful. However, I'm not in Ruby development. \nUnless this would be easy step for releasing (I have no plan about requirements), I don't see this coming. \nBut in general, PR and concepts are welcome. \n. Yes, this would be internal enhancement. Said this, everything other than a string is not supported by definition.\n- https://github.com/angular-translate/angular-translate/blob/133463ab279b6852f1f5190c43e12b6dcefe41f4/src/directive/translate.js#L15\n- https://github.com/angular-translate/angular-translate/blob/133463ab279b6852f1f5190c43e12b6dcefe41f4/src/filter/translate.js#L13\n. That is not an issue with translate. I have found your Pen http://codepen.io/anon/pen/OPBxBe and it clearly uses only a filter. In filters, no DOM operations are involved.\nSorry.\n. What do you mean? https://github.com/angular-translate/bower-angular-translate/blob/2.6.1/bower.json \n1.3 is included?\n. That one (angular-translate) does not define any dependencies for bower.. only in case for development where 1.2 is still in support.\nbower-angular-translate contains only the relevant files for you and an appropriate version range.\nIf you use bower install angular-translate, you will get bower-angular-translate.\nSo again: What do you mean? What is you actual problem? Both 1.2 and 1.3 should work out of the box. 1.3 will be included by default (since 2.6), but 1.2 will work without a warning.\n. 1. What is angular-translate-cekyy? Not ours.\n2. What is angular-translate-loader-static-files-ceky? Not ours.\n3. Said this, both requires an AJS 1.2.\n4. Same for angular-file-upload.\nSo actually everything works as expected from my point of view.\n. :star2:  :)\n. Ehm.. yeah, nice addition. ~~But only available in AJS 1.4 beta, and we are still supporting 1.2. ;)~~\nOk, PR was actually backported into 1.3. However, this'd still break support for 1.2.\n. Ok.. that was not clear by this issue. ;)\n. Landed as cb33f63\n. See dbd5be9\n. I think that is correct. Fine! :+1: \n. Picked as 2533f2d, 887dc1b\n. Suggest this is a non standard HTML element.. at least we should avoid the NPE. Just in case..\n. Fixed in 657ed8a\n. http://plnkr.co/edit/yqfAwUSsC1ADsNRx0LSg?p=preview (patched angular-translate service with logging)\n. I'm not sure getting this right: http://plnkr.co/edit/YJs6KJw4xcwULS65k059?p=preview Both items 1 & 2 are equal: that's because internally both values of translate are an empty string.\n. Well, actually this should be not a new thing. That's strange.\nAnyway: the locale storage plugin requires itself the cookie storage plugin. That means you have to include the cookie storage also. But that dependency is already present in 2.4.0.\nSo in your case you need at minimum\n1. angular-translate.js\n2. angular-translate-storage-local.js\n3. angular-translate-storage-cookie.js\n. @tspaeth  Check? If so -> Close.\n. => Use always http://rawgit.com/ http://rawgit.com/ production.\n. Will be fixed in next release.\n. Any updates here? \n. Closed due inactivity. (Also looks like being resolved anyway.) \n. @brandonhesse, we will likely fix this in future (this is a bug). However, if you want to speed up the fix, please make a PR.\n. Thank you for reporting. Fixed in ee253bc.\n. We have currently no support for 1.4 (actually: untested), but we will likely add support in the next weeks. At least all tests should work then.\nBesides this, several issues are breaking the docs. Invalid nonstatic includes from rawgit, old AJS, and so on.\nWe are on it. Thank you!\n. Fixed in next release.\n. Partial loading is meant for name spaced translations. Overriding is not supported and we will not planning this.\nOne unique key in the application-wide scope.\nThe main deal is you are providing one central configuration and $translate is doing all the stuff for you. Except you are using partial loading which allows to add (or remove) parts at a later point. But the main vision stays to use unique keys.\nhtml\n<h1> {{ 'about.PAGETITLE' | translate }} </h1>\n.. is the right one. :)\n. You always have to instrument a string for a filter in AJS... and that is not an angular-translate specific issue.\nIn your case you trying to translate the value of item.settings.type. But if you want to translate this as a key, you have to use a string.\n. Closing due inactivity.\n. No, we have no such limit: https://github.com/angular-translate/angular-translate/blob/a2ac7000f94bcee6dd8e206cab5d7cec3527dd25/src/service/translate.js#L237-L265\n. @gylippus I think Pascal had already done this, but from me also: Thank you! :dancers: \n. Technically: There is no final solution for a set of promises. If one promise fails, the the set will result either into a fail (reject) also or success (resolve). Also it is not being practicable to handle both responses (rejection, resolution) containing the same result. @JamesBoon If you want to know a rejection, you will have to use the \"single promise\" way.\nSpeaking of translation resolution, there is specific point of \"correct\" or \"not correct\" translation. The default of the library defines an unknown translation key as the key itself or even the provided default text. Another one will generate another default text provided by a custom error handler (mentioned by @tspaeth already)\nIf you have another opinion than returning the key, you are free to configure your own way, i.e. returning undefined and the need handling the default text management on your own. However, you should be aware of all consequences: This would results into  undefined  results in your templates (using the filter) which is probably not your intention. Therefore at least an empty string is a better alternative.. undoubtedly looking similar with a valid empty string.\nUnless the custom error handler will not work for you, I think we can close this.\n. > Okay, the problem is that raw.githubusercontent.com returns js files as text/plain. If you host this example with correct mime types, then it will work fine. I've just tested it in Firefox 36.0.1, Chrome 41.0.2272.89 m and IE 11.\nYou should not use this one, but http://rawgit.com/ which additionally teaches exactly what to do.\nedit: you have done this already. ;)\n. @9mm Well, it sounds like it is not identical ;)\nI'm a bit confused. Do we have a running demo of your issue?\n\nHey, I'm actually referring to the code of my original issue not the pastebin service. Locally I have the JSON files being served with the proper content type of application/json.\n\nWell, actually this does not matter. (Should not.)\n\nIs there a debug option or something?\n\nThis is JavaScript :) Said this, you still can inject yourself into the translate process and verify the steps..\n. @jamesdef We do not support Ionic here. ;)\nI would guess on the given code that the inner text of the elements flips with the inner html elements: flap between <i>\u2026</i> Text and Text <i>\u2026</i>. The rescue could be a helper <span>.\n. The strategies are currently implicit part of $translateDefaultInterpolation and cannot be overridden. But you can define your own interpolator: http://angular-translate.github.io/docs/#/guide/15_custom-interpolators\n. > When using Angular 1.3 one-way binding on a translate filter, one can deregister a watch after it's value has successfully been translated. \nThat's actually wrong. It will not be registered after a successful translation but any filter output. The AngularJS one-time-binding simply does not know about the internal state of value. Even a \"TRANSLATION_ID\" is a valid response.\nUnless we can skip/stop the filter, this will not work for asynchronous data (read: filter created before translations are loaded finally).\n. Components like dialogs which are rendered on demand only without language change actions, you can use this. Also the filter will bypass any currently running loaders (i.e. XHR), because a filter cannot be \"blocked\".\nSo yes, there is no other way.\nRegarding the performance: We have a larger app with several translation and do not notice such issues.\n. There is no \"solution\". You can use one-way-filter only if you have the data being available at the first time. An asynchronous loading process cannot make this.\n. Thank you for reporting.\n. fyi: I've made a proposal already in 9f1b0d1 related to #824\n. I've changed a little bit \njs\n          langPromises[key]['finally'](function () {\n            clearNextLangAndPromise(key);\n          });\nThank you for contribution. Landed as dbd5be9\n. :shipit: :)\n. Fix landed as 3f7cf4c\n. Thank you for reporting. Yes, that is a bug.\n. @filidorwiese Please follow https://github.com/angular-translate/angular-translate/issues/920#issuecomment-92445094 and confirm that this is exactly your issue. I've attached in this issue a patched plunkr. Thank you!\n. landed as fa05144\n. Landed as 3f7cf4c\n. @tspaeth @DWand @PascalPrecht \nI would prefer a more elegant API supporting the whole stack w/ fallback, alias-resolving and so on. What do you think?\n. Ehm.. did I got this right: You are looking for a tooling only translating a directive w/o angular-translate in the result artifact? If yes: No, we only have  grunt-angular-translate which would not fit your need. If no: Please specify.\n. The GoogleBot has only limited JavaScript enabled (actually, it was no JavaScript at all for a long time).\nIf you need to to SEO for an AngularJS app, you should definitely look for SEO optimizations for this and not only the part of translate. There are several resources like http://www.yearofmoo.com/2012/11/angularjs-and-seo.html.\nPrerender looks good, however I'm not familiar with this.\nAt least I can say: If the translations are not being made, it will be either\n- an issue with prerender \"rendering\" too early before angular-translate has finished loading translations\n- the whole app of you is broken in context of prerender (due limitations of the underlaying headless client lib)\nWe as a library cannot help because nothing is broken -- so far as I can say this.\nIt would be nice if you would share more information or a possible solutions.\n. > Does this make sense?\nNo idea, we're not familiar with Prerender. Perhaps you can define an additional waiting time or a specific event\n\nany idea how I can solve this?\n\nThis is all fully asynchronous. We provide an event hinting when translations are loaded (but not used), but anything else is not in our charge anymore. And this is meant for all asynchronous plugins.. so you will also have other probably still unseen issues\nDo you really need an output from the dynamic content? Would it not sufficient using an one-time rendered output at built time or even manually?\nI'm closing this, but feel free to comment.\n. (Please do not comment on closed issue. Generally, they aren't tracked any more in watch lists.)\nHave a look at the events which are being fired.\n. @siasjustin  That's right, actually. :) Regularly, we are not locking conversation so everyone can add (valueable) comments or additions. But you should never expect answers or solutions for new question on already closed issues -- after a year.\nBtw, the answer is within my first post. And actually, this is not an issue with angular-translate, but a general issue to handle with your AngularJS app.\n. We do not have an \"issue\". angular-translate is like angular apps fully asynchronous which results into async rendered sites. Deal with it, because that is why you eventually have chosen JavaScript, AngularJS and -- finally -- angular-translate.\nEither you build special pages for static requests or use special tooling for creating images (incl. html output) of async page layouts.\nThis is not something special for angular-translate, but overall for dynamic pages using JavaScript for deferred rendering.. Honestly, I still don't the point. \nWhat does make angular-translate different from other (angular) libraries/addons loading external async resources and therefor deferred rendering?\nWhat are you missing exactly (in detail, in a technical view of point)?\nSpeaking of angular-translate, you either create a static rendered page with a in-place definition of texts (not async, but this will not resolve all of you async issues by concept) or you will listen to the events of the plugins before making the screenshot.. > The general view is that phantonjs can render correctly any page of an app without the need of listening for ajax responses, it just works. \nThat is not true, partly. If you have a very simple site with javascript generated content, this will work eventually by accident. But you have to wait in PhantomJS for ready events as well.\n\nThe simplest would be document.onReady for JavaScript itself. But this ignores the AngularJS bootstrap and therefor the app itself.\nThe next would be an AngularJS app module run (angular.module('app').run(() => {\u2026}). But this ignores any app specific (incl. angular-translate) addon.\nThe next would be (all) specific collected trigger events (incl. our $translate.onReady(() => {\u2026})).\n\nWe are open for any improvements: if you have an idea, I really want to see this. But I think you simplifying the complex asynchronous process a little bit -- of a SPA in general and an AngularJS app in specific, including our small plugin library.\nIf you wait for translateChangeEnd and this does not work, it could be a racing issue. Perhaps this is better:\njs\n$rootScope.$on('$translateChangeEnd', () => {\n  $timeout(() => myTrigger()); // immediate invoke, but in next cycle\n});\ntranslateLoadingSuccess defines a loading success and does not reflect depending components (directives, filters) for have called for a refresh.\nNote: While a directive have an explicit listener for changes, a filter is controlled by AngularJS. AngularJS is calling our filter (in templates). If we are not called, there will be no update.. > Ok, Let say you wait for 1 minute (way too much) for all ajax requests to be completed before rendering the page. This should eliminate the problem, but it doesn't, it still renders the wrong page.\nOkay, well, that's sound not good. This smells like missing digest cycles. Go for a simple poc. I would recommend a new issue btw :). @willi1s  Do you mean having defined a preferred language other than en_GB and a fallback language as en_GB (which is prefilled already) results into a refetch? This constellation would look like a bug and not intended.\nOtherwise please make a small test case, so we can avoid possible other issues.\n. Patched version: http://plnkr.co/edit/qm09k1eP4cdIq5TK71ch?p=preview\n. Issue fixed.. fallback languages have been loaded regardless their predefinition. Not so good.\n. @dimitriscsd In short: you are using an old AngularJS version, and new angular-translate version, and an app.js which is incompatible with angular-translate. The \"undefined\" was coming from a change of angular-translate 2.0 (!)\nIn detail:\n1. You should not include untagged/unversioned imports/includes in JsFiddle/Plunkrs. rawgithub actually does not like this. Either use rawgit.com production cdn or cdnjs.com instead.\n2. Use proper current releases, but at least compatible ones.\n3. You should not include minified codes because it is bad to read and understand. Unless it is minified, you are able to read the performed code.\n\nI am basing everything on your example plunker at http://plnkr.co/edit/Hw4iMz?p=preview which also seems to not be working when I run it.\n\nDo we reference to this examples? Could you please tell us where you have find it? We should fix this, because it fools people. :(\n. Updated plunker: http://plnkr.co/edit/RJugnMpptbHCnPjDqVgm?p=preview\n. Oh.. please use angular-translate.github.io and forget everything which is in the Wiki. :|\n\nAm 27.03.2015 um 14:45 schrieb Dimitrios Matanis notifications@github.com:\nThank you for the immediate response.\nHere is where I found the reference for that plunker:\nhttps://github.com/angular-translate/angular-translate/wiki/Asynchronous-loading\nOn Fri, Mar 27, 2015 at 3:40 PM, Jan Philipp notifications@github.com\nwrote:\n\nUpdated plunker: http://plnkr.co/edit/RJugnMpptbHCnPjDqVgm?p=preview\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/983#issuecomment-86942933\n.\n\u2014\nReply to this email directly or view it on GitHub https://github.com/angular-translate/angular-translate/issues/983#issuecomment-86944092.\n. @donataswix \n1. Fork.\n2. Choose canary and branch, i.e. update-messageformat-dep\n3. Update library in bower.json and commit this\n4. Push this to your fork.\n5. Create the PR via GitHub.\n\n\nMore details about this in our CONTRIBUTING.MD.\n. Ah, I get your point.\nYou should not touch the shadow repo, but only this here. However, the dependency angular-translate -> bower-angular-translate-messageformat is not ideal and should be corrected.\n. Closing this.\n@donataswix  You can easily use your own version of messageformat. If you think about the conflict bower will message you.. well, that is correct. It only complains the suggested version by our plugin and (probably) your version does not match. In this case, use the appropriate resolutions: http://stackoverflow.com/questions/16991128/how-to-resolve-bower-dependency-version-conflicts\n. @worldspawn Well, sounds interesting. \nA contribution would be fine, but I would suggest making the # configurable. More or less the same as AJS internal optional override feature for starting and ending expression tags.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Adding an option which do not refresh the directive's text until the translation has been successful (not rejected)? Okay..\nHowever, one note: This also means further translation rejections will result into invalid states. Because no refresh would mean that an already applied translation will be not overridden (but is wrong). And even if there would be define an additional condition (like only on initial time = first success) the intended behavior would not be possible after the next language change.\nI think that's okay, but it should be at least noteable.\n. @soluml it looks like a regular issue about FOUC which is handled in the guide. And this issue is not handling that kind of situation. \n. Still an issue?. Everything is working as expected.\nEither you had missed the value or HTML (aka templates which should be parsed) missed the compile flag.\nSee here. http://plnkr.co/edit/KgzJMf?p=preview\n. In general, a refresh() should refresh the things. So it is looking from the outside like being a bug when a translation has not been refreshed (case: a language is neither a fallback nor active but has been used in the past). I'm not sure if we really should reload all the languages. It would be sufficient ditching them only.\nHowever, one problem is not solved and perhaps that's the original intent for that refresh strategy: If the reloading language was not injected via an async loader (i.e. predefined statically), the translations would be gone forever. This is actually true already nowadays, but only when being a fallback or in use.\n. @DWand  You do not get me right: We do not define loaders for a specific language, but in general.\n1. Setup phase: \n   1. At first you are add statically translations for language A.\n   2. Additionally you are defining a standard url loader.\n   3. And finally you are setting A as preferred one.\n2. You are switching the language B.\n   1. The new translation will be loaded and everything is okay.\n3. You are invoking a refresh()\n   1. Until now: Only B will be refreshed because it is active. A will be untouched and still be available.\n   2. With your change: Both A and B will be discarded. A will be fetched by the loader the first time on next demand.\nYeah, this change is intended, but the result could be a problem for anyone using the default static provisioned translations only for static defaults (in case of issues while determining the correct language). Perhaps an opt-in is better..  refresh(true)\n. I'm only saying this could cause trouble for some. I would highlight this at least in the release notes. IMHO the translations should be always available via a loader or never. The mixed mode is not really supported (well, it works using the method I've described).\n. Huh? Where? Also in the code on api level?\n. Ok.\n. @gsaini : Using http://plnkr.co/edit/S0rxYOJRReUDGeLwWXlr?p=info as boilerplate, you can please make a test case?\n. Anyway. Fixed that possible npe 1aaab98, however, I'm quite not sure why getLocale() should return non string.\n. And rest was done already. Closed.\n. At least there are only  elements within  element permitted, and within  elements only text content (no HTML).\n1: https://developer.mozilla.org/de/docs/Web/HTML/Element/select https://developer.mozilla.org/de/docs/Web/HTML/Element/select (+optgroup)\n2: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option\nPerhaps the browser treats / parses the tags not as you expected.\n. No. Defaults are only possible in combination with directives. A filter is only a function returning a response (translation) for a given request (translationId). Even the parameters must be provided explicitly since AJS 1.3.\nI fully understand your point. I would suggest a custom loader which merges both real and default translation into one combination.\n. @just-boris  thank you. I've adjusted a little bit, landed as 401204a\n. Hi @derLukers \nThank you for contribution. Although most of the changes unrelated to your actual change are not wrong (but not all), we do not want these changes covered between your actual changeset. Could you please clean up this?\n. Yeah, thank you!\nLanded as a361fd0\n. @endamaco : Just like @DWand  already said: If you need more features within a loader, you can easily build your own. You can even re-use existing ones, since they are all documented and have a similar interface.\n. Valid point. That's why we have http://angular-translate.github.io/docs/#/guide/19_security -- original cause is backwards compatibility to AJS 1.2 (no ngSanitize).\n. > Also I don't agree with the current strategy \nEhm, this was introduced while AJS 1.2 was available as stable.  There is no \"strategy\", it's simply not possible. Afaik there was no simple way to inject a non existing module.. ?\n\nI would rather see a major version bump with this listed as a breaking change, and maybe the possibility to turn it off. I'm afraid that otherwise many people will overlook this in the documentation, like I did.\n\nAgain, a valid point. Default security should be as high as possible (https://www.owasp.org/index.php/Establish_secure_defaults). A 3.0.0 will enable at least the escaped way (or even more) just like the documentation already said. Unfortunately, this project does need support by the community while we have a bunch of issues to do.\n. You can make a proposal, but we will not make such a breaking change in a minor release. By definition this have to be 3.0.0.\n. Said this, I'm open for a breaking change release (aka 3.0.0), but this will probably take some time...\n. fyi, I've opened #995 starting the topic about breaking changes...\n. The actual plan was to extract the \"strategies\" as dedicated \"plugins\" (easiest way would be a simple function via config or even a module aka component/service) allowing to share them with all kinds of interpolators. Said this, this was the idea. But was not realized until now.\n. @marklagendijk Thank you!\n1. Definitely.\n2. Do you mean a new strategy? Then yes, too.\n3. I don't get this. Another strategy yes, a new global default not before next major (as already in #995).\n4. What you mean with both?\n. Let's play with a demo set.\nTemplates\n\nThis is <b>only an example</b> with a {{param}}!\n<b>Hello</b> {{param}}!\n\nStrategy: 0. none\nObviously the bad one. No transformations.\nStrategy: 1. escaped\nEverything will be escaped. Actually the safest one, but obviously not always what you want.\n1. This is <b>only an example with a <span onclick=\"alert('XSS')\">xss attack</span>! => This is <b>only</b> an example with a &lt;span onclick=\"alert('XSS')\"&gt;xss attack&lt;/span&gt;!\n2. <b>Hello</b> <script>alert(\"XSS by User\");</script>! => <b>Hello</b> &lt;script&gt;alert(\"XSS by User\");&lt;/script&gt;!\nStrategy: 2. escapedParameters\nSame as escaped?\nStrategy: 5. escapedTranslation\n\nThis is <b>only an example with a <span onclick=\"alert('XSS')\">xss attack</span>! => This is &lt;b&gt;only&lt;/b&gt; an example with a &lt;span onclick=\"alert('XSS')\"&gt;xss attack&lt;/span&gt;!\n<b>Hello</b> <script>alert(\"XSS by User\");</script>! => &lt;b&gt;Hello&lt;/b&gt; &lt;script&gt;alert(\"XSS by User\");&lt;/script&gt;!\n\n\nAnd now the additional two. I dont get why you say only 2 strategies. A small bit didn't get into my mind..\n. > Your examples are correct. Only the sentence in stragey 1. escaped is incorrect: \"Everything will be escaped. Actually the safest one, but obviously not always what you want.\". This is true of Strategy: 5. escapedTranslation, but not of escapedParameters.\nWritten before I had seen the fine difference between escapedParameters and -Translations. However, this is only valid in case you are not trusting the translation definition content itself. ;)\n\nHm, okay, you are chaining the transformations actually.\nPerhaps we should split this down into\n- none\n- escapedParameters\n- escaped (aka escapedTranslation)\n- sanitizedParameters (<< useful?)\n- sanitized (aka sanitizedTranslationEscapedParameters w/ escaped)\nAnd the we define a chaining strategy like one of these\n- none\n- escaped\n- escaped, sanitized\n- escapedParameters, sanitized\n- and so one\nwdyt?\n. @marklagendijk : Yes, this looks good! I'm with you.\nIn the final implementation I would think it is better to split the strategies (dedicated component functions?) and no hardcoded combinations (except a default one in the future).\nWhat happens in an AJS 1.2 environment with this one? https://gist.github.com/marklagendijk/55b98aba74f053752c19#file-default-interpolation-js-L78\nI guess this will break everything (at least the running context). It would be okay to catch it gracefully and fallback to something else. We can cover this in the tests as they are running in each context (AJS 1.2, AJS 1.3, AJS 1.4).\n. It's okay when the strategy won't works unless they have import ngSanitize. But I will only avoid a breaking change (i.e. new dependency in core).\nA good error message, but a working (with fallback) is okay.\n. Should be covered when it will be ensured the lines are not running without explicit activation of the strategy in question.\n. I'll have a look later for details.\n. @marklagendijk  Well done!\nI've made some remarks (actually, you had already seen this).\nLooks good. For the PR please:\n- [ ] style guide regarding things like spaces, line breaks and so (in this proposal not being required)\n- [ ] some tests would be cool\n- [ ]\u00a0squash please\nAnd finally: I want to add a warning about not using a safe strategy (via $log.debug?) unless useStrategy has been called at least once. I can take care of this after merge if you want.\n. Well, both strategies try to either escape or sanitize all existing values in the object. That is not good, eventually $scope as a param is not a good solution.\n\nI guess it means we're trying to sanitize everything from the passed object, while maybe we could try to sanitize only the necessary properties, ie the ones that are actually used by the current string to translate.\n\n... which would means we have to pre-parse the string looking for each interpolation expression. We don't do this at the moment, as we are using standard AJS interpolation expressions. I'll file a new issue, feel free to contribute.\nClosing this here, we had introduced sanitization.\n. The concept of angular-translate for two different language sets is.. maintaining two language sets. That's simple.\nIf you really need such a specific special case, then you have to combine the result on your own. I don't see why we should implement such a special case as a general feature for common stuff.\nYour self implementation can be started on different stages: Either on the server or as a custom loader which re-uses the existing loaders.. (i.e. 2x the static files loader).\n. hacky-hacky..\njs\nangular.module('yourmodule').factory('$yourCustomLoader', function ($q, $translateStaticFilesLoader) {\n  return function (options) {\n    var deferred = $q.defer();\n    $q.all([\n      $translateStaticFilesLoader({prefix: 'lang/', key: 'en', suffix: '.json'}),\n      $translateStaticFilesLoader({prefix: 'lang/', key: 'et', suffix: '.json'})\n    ])\n      .then(function (enTranslations, etTranslations) {\n        // programmatically combine both language objects into one\n        return result;\n      })\n    return deferred.promise;\n  };\n});\n. What do you mean in detail?\n. 1.  More the promise style allowing a deferred setup. And if A is internally deferred, than B will it be also automatically. \n2.  My idea was to stick with the current way of a chaining configuration. \n. Addition notes on \"re-arrangement of modules\"\n- Looking at loader-staticfiles and loader-url, I don't see any cause why this should be a dedicated plugin anymore. Neither it is a lot of code (even static files is not so much), nor it depends on a non AJS core component. Merging both loaders into one file loader combined with with some intelligent convenient method should be a lot more helpful than the current situation. Speaking for modularization, we merge them at least into one xhr loader plugin.\n- Looking at handler-log, I would replace the current usage with a configuration pattern (just like customerLoader works). This oneliner plugin could be discarded.\nAnd regarding dependencies:\n- storage-cookie can get a proper dependency on ngCookie\n- if we make the storage api promisable and \"null\"-aware, we can eventuelly get rid of the cookies fallback. However, an alternative fallback strategy should be available.\n. Well, that syntactical sugar is only recipient for custom bower/npm/browerify solution. The idea isn't bad, but should not be on primary focus. (imho)\n. Note. I'll try to start final concepts in the first week of June, just after a short run for 2.7.1 incl. some fixes and 2.7 additions.\n. @PascalPrecht @tspaeth \n- Currently, the module name is pascalprecht.translate with the domain pascalprecht. Is this still valid now? But which one would be the appropriate one now?\n- Years ago I had read plugin's services should not prefixed with $ (as we did in $translate). Is this still valid? In this case, should it be translate only?\n. Ok, good points. Probably the breaking issue could be handled with a compat-module (planned already). I only want to take the chance now. Last time.. ;)\n. Speaking of a compat service. I have done a lot of the work already yesterday, but still many points of the checklist are todo. I'll probably will create a temporarily repository until we decide the migration.\nIf we stick with the prefix, the compat service will/must be a decorator, I think.\n. As already mentioned earlier this day, I've pushed the first stuff into a temporarily dedicated repository (look into src2/). If you are with me, I'll rebase the stuff with proper messages and push it into the regular repository (in branch canary-v3 or so).\nWhat does contain this preview?\n- the usage of the module (in demo ex0). Very similar.\n- service name is translate, but we have already discussion to use the old name $translate\n- new: the current language is now called context, and the language part of a translation request\n- finally: request translations for other languages than the current one\n- no final decision: $translate.instant => translate.sync (as seen in compat\n- first approach of a compat module for an easier migration (i.e. logging, auto converting calls)\n- internals everything is working with multiple requests (not translation by id, but translations by ids)\n- internal everything is working with a request and response metadata object (allowing additional information to transport for a translation)\n- the structure overview and as an image\n  - everything is ES6 (tooling: Browserify + BabelJS) => atm invoke grunt v3\n  - everything is a module\n  - only the AJS specific components composing the final directives and services: that is allowing us additional features like directive aliasing.\nWhat does NOT contain this preview?\n- tests are completely untouched\n  - my idea: try to enable as much as possible of the old tests with compat mode => legacy integration test\n  - invent new unit tests (real unit tests, w/o angular)\n  - invent new integration / \"composed unit\" tests (probably based on the old ones)\n- features: storage, cache, partial loader, resolve locale/language, fallback, interpolation params, full feature directives (well: you will see the basics are working in demo ex0)\n- documentation (a lot can be migrated)\nSo, I need feedback: You see the chosen architecture and way of composing everything. OK? Not OK? Comments? Perhaps someone have a fundamental remark on design?\n. @fracz Yeah, I'd already the same idea because the same reasons. I've updated the list.\n. @thp  Thank you, landed as 23684ef\n. @derLukers  great!\nDoes have the $inject any special purpose? Because we do not need them due ngAnnotate in the toolchain (see grunt task ngAnnotate). Unless it has an additional benefit it will require more attention on changes.\n. > AFAIK ngAnnotate only takes care of inlined functions,\nI don't get it. What's missing?\n\nthere still was the array definition of the service, which made ngAnnotate rather unnecessary\n\nActually true. That should not be.\n. @derLukers I would prefer this. Well, unless there would be any other benefit I'm actually not aware of.\n. @derLukers Did displayName works for you? In any browser?\n. Also in minified code?\n. Yeah, and Chrome is currently discussing about Function.name / Function.prototype.name. I'd thought that would be more solid yet.\n. @tspaeth  It is only an annotation for the function, so nothing breaks. Cordova is only an app with a enhanced webview (regarding additional JS bridges). Most devs simply do not know the different file:// vs http:// issues (incl. CORS).\n. Landed as d912503. I've reduced /removed some changes because of they are do not required for obvious non breaks or some one-line wrappers. Well, in some cases tradeoffs between code readability, performance (function inlining) and devtools optimization.\nThis change also removed some obsolet explicit dependency definitions which aren't required since ngmin/ngAnnotate in the build chain. I've checked the result, it is correct.\n. We're thanking you! :)\n. What does not exactly working?\nWe have some errors because an external lib was being removed, that is fixed and will be deployed on upcoming release: fa05144ccdcfe6f33dac961ad061317254cf8245\n(index):72 GET http://rawgit.com/SlexAxton/messageformat.js/master/messageformat.js \n2015-04-10 16:48:22.453(index):72 GET http://rawgit.com/SlexAxton/messageformat.js/master/locale/de.js \n2015-04-10 16:48:22.455(index):72 GET http://rawgit.com/SlexAxton/messageformat.js/master/locale/fr.js \n2015-04-10 16:48:22.917bootstrap-dropdown.js:137 Uncaught TypeError: Cannot read property 'fn' of undefined\n. @tspaeth This should be covered?\n. Okay. Fix will be arrive with upcoming release.\n. Solved by #1001 00b73ff\n. Wonderful, was just looking into the task.\n. @derLukers \nThank you very much. Landed as 00b73ff (split, re-visited commit message)\n. In short (I'm busy right now):\n- I don't like the proposed change for translation (left top box). This will make everythings more complicated. Why making an easy interface so overkilled?\n- There are some good points in the chart. I will extend this one in future, accompanied with a data flow (already mentioned in the last days as the \"missing context\")\n. So, my big picture (components only, without event (bus), without extension points except post processor): \n```\n// yuml.me\n[Config]\n[Context||+changeLang()]\n[AsyncResolver|+currentLang|+facade(otherLang)]\n[DirectResolver|+currentLang|+facade(otherLang)]\n[AsyncProvider||+translate(lang. key)]\n[DirectProvider||+translate(lang. key)]\n[Map|origin (strategy);langId;items]\n[PostProcessors]\n[StorageProvider]\n[Configurer]-inits->[Config]\n[Configurer]-inits->[Context]\n[Configurer]-inits->[Refresher]\n[Configurer]-inits->[AsyncProvider]\n[Configurer]-inits->[DirectProvider]\n[Configurer]-inits->[StorageProvider]\n[Config]-[note:injectable by all? or can we just delegate this right in time{bg:wheat}]\n[Map]\n[Context]-uses>[StorageProvider]\n[Directive]-uses>[DirectiveController]\n[DirectiveController]-lookups>[AsyncResolver]\n[Filter]-lookups>[DirectResolver]\n[AsyncResolver]-delegates>[AsyncProvider]\n[DirectResolver]-delegates>[DirectProvider]\n[AsyncProvider]-reads>[Map]\n[AsyncProvider]-invokes>[Refresher]\n[Refresher]-writes>[Map]\n[AsyncProvider]-uses>[PostProcessors]\n[DirectProvider]-reads>[Map]\n[DirectProvider]-uses>[PostProcessors]\n[AsyncProvider]<>-0..>[Loader]\n[Loader]-[note:XhrLoader{bg:wheat}]\n[Loader]-[note:PartialLoader{bg:wheat}]\n[Loader]-[note:CustomLoader{bg:wheat}]\n[PostProcessors]<>-1..>[Interpolator]\n``\n1. That does not mean there should be no _$translate_. Read$translate.prototype = AsyncResolverand$translate.instant.prototype = DirectResolver` or so.\n2. Configurer is a component for the config, AJS is calling them \"providers\"\n3. both AsyncResolver (promise based) and DirectResolver (non promised based) are services with a specific strategy how to resolve a translation based on a current language (current could be re-specified within a facade) \n4. both AsyncProvider (promise based) and DirectProvider (non promised) are services with a specific strategy how to provide a translation for a given language (non promise cannot wait and/or load a language, but promise based will do)\n\n\nRegarding your big picture:\n1. Again: I would prefer a clean and easy response for the simple use case of translations. We should not make it complicated to use this. However...\n   1. It would be a good idea to use such a response structure for the internal purpose.\n   2. Perhaps we can introduce an extra flag returning the verbose data on demand (service level only).\n2. \"Language Information\": Referencing ngLocale? Is there anything we can or even want to control? We are making translations, no localization. And the localization is already well done by JavaScript and/or ngLocale. Only the part of a refresh hook for language changing (i.e. implemented as an extension point or using the event)\n3. \"Debugger\": Do you thing we should introduce a dedicated debugger component? Should a simple if (config.logging.debug) { $log.log()} not being sufficient enough?\n. > We have to know pluralization rules of the specific language to be able to do something in this area.\nAt the end of the day, this will result into a request containing translationId, langId, interpolationParams and so on when invoking the interpolator (as this is currently our way of supporting external interpolation services). So far I'm with you (as I already said: internally that's a great idea). \n\nBut only angular-translate knows what language is currently in use.\n\nI disagree. Either the developer can change the language based on a custom event or the current language can be observed by the events. That's not isolated data.\n\nThese things are hybrids: they rely on the language specific information\n\nWell, technically not. Given the id de_DE, the first part tells you the language (german) and the second one tells you the terrority (therefor the localization). Both can be mixed and some combinations are well known. But they do not rely each other.\n\nObviously, 1USD !== 1EUR.\n\nActually a common mistake. Localized does not mean automatically writing another unit but format. In most cases, the other unit requires either static or even dynamic/live calculation. A german page can show prices in US dollar. But the format of the amount should be localized (1.000,123 vs. 1,000.123).\nIt would be definitely a nice feature if we can provide a hook auto-refreshing the ngLocale (only locales and no translations except the required one for date formats) . But that's it. Any such an integration is eventually only 1-2 lines as an event listener. IMHO it should stay in the documentation; also all actual ngLocale implementations have to be available later in the app context).\n\nIn line if (config.logging.debug) { $log.log()} we expect that: \n\nCom'on :) We can define this internally as being available. :) And $log is an AJS core service (in ng). Of cource it does not matter if this will be a logger.log('foobar') or if (log.enabled) {$log.log('foobar')}.\n\nAs for your example, I'd like to keep Refresher and Map blocks close to each other. It would be nice other blocks to know nothing about loaders, refreshing and all other crazy async stuff. This way it will be possible to simply ask the Map for needed keys - it doesn't matter how it gets them and what processes it currently performs under the hood - just ask in either sync or async way.\n\nAsking the map directly will put the management for translation loading right into the Map.. and IMHO that should not be part of that. The idea is dumb map (regardless how it will be store its data internally). You want actually no Map, but an intelligent \"valueForKeyAndOptionallyLoadDataOnDemandService\".\nOk? :)\n. > I mean the language which is used to translate each particular string in the application. Because different strings may be translated to different languages.\nStill not getting this. Sorry. :(\n\nOkay. I agree. But logger.log('foobar') is shorter and simpler :smile:\n\nOk. I was being confused because logger != debugger. Cleared.\n\nWhy should we keep the translation table as a simple map, and not use the Repository pattern or something like that?\n\nAh.. you want to replace the map (data structure) with a repository (data layer). That is significantly something else :)\nA repository pattern sounds great indeed, however, it would internally use a map even. :)\n. ```\n[Config]\n[Context||+changeLang()]\n[AsyncResolver|+currentLang|+facade(otherLang)]\n[DirectResolver|+currentLang|+facade(otherLang)]\n[AsyncProvider||+translate(lang. key)]\n[DirectProvider||+translate(lang. key)]\n[Map|langId;items]\n[PostProcessors]\n[StorageProvider]\n[Repository|loaders|+set();+get(): String;+getAntWait():Promise;+refresh():Promise]\n[Configurer]-inits->[Config]\n[Configurer]-inits->[Context]\n[Configurer]-inits->[Repository]\n[Configurer]-inits->[AsyncProvider]\n[Configurer]-inits->[DirectProvider]\n[Configurer]-inits->[StorageProvider]\n[Config]-[note:injectable by all? or can we just delegate this right in time{bg:wheat}]\n[Map]\n[Context]-uses>[StorageProvider]\n[Directive]-uses>[DirectiveController]\n[DirectiveController]-lookups>[AsyncResolver]\n[Filter]-lookups>[DirectResolver]\n[AsyncResolver]-delegates>[AsyncProvider]\n[DirectResolver]-delegates>[DirectProvider]\n[AsyncProvider]-calls>[Repository]\n[Repository]-uses>[Map]\n[AsyncProvider]-uses>[PostProcessors]\n[DirectProvider]-calls>[Repository]\n[DirectProvider]-uses>[PostProcessors]\n[Repository]<>-0..>[Loader]\n[Loader]-[note:XhrLoader{bg:wheat}]\n[Loader]-[note:PartialLoader{bg:wheat}]\n[Loader]-[note:CustomLoader{bg:wheat}]\n[PostProcessors]<>-1..>[Interpolator]\n```\n\n. Thanks. Picked\n. Great. Picked! :)\n. btw: this fiddle is using Angular JS 1.2\n. You can inject your own JS, do not have to use the predefined ones. I've migrated it already to a plunkr, it's okay.\n. And just for the reference, the plnkr (with error, only migrated to a current AJS 1.3).\n. Yep. We cannot expose the internal data map. This must be protected and handled, just like @DWand said already.\n. We cannot expose the internals. Closing this.\n. Easily use the service itself:\njs\n$translate('yourkey').then(function (translation) {\n    FilterService.setResults(false);\n      $ionicLoading.hide();\n      notify({\n        message: translation,    // <--- provide message in selected language here\n        position: 'right',\n        classes: 'notification  notification-warning',\n        duration: 3000\n    });\n    $timeout(function () {\n      notify.closeAll();\n    }, 3000);\n})\nOr another level of wrapping depending on the need of ui state.\n. If you have one specific language only (in the app, no live changes of the translation at this point), you could use \njs\n      notify({\n        message: $translation.instant('yourkey'),    // <--- provide message in selected language here\n        position: 'right',\n        classes: 'notification  notification-warning',\n        duration: 3000\n    });\nwithout the wrapper.\n. Then go with the first example I've given you. What is the problem with that? Promises will not hurt. ;)\n. Yeah, you are not the first with that request.\nThere will be still some work for the spec (your proposed would not work because it is conflicting with the already existing signature).\nPerhaps a feature after restructuring the internals a bit.. and/or a contribution by the community. \nPlease follow #500\n. Yes, please follow #500. I'll close this as a duplicate.\n. But: I don't think the filter will gain that feature due technical limitations. Perhaps only available for directive/service.\n. Not saying it is wrong, but I would not say this is a bugfix.\nAnyway. Have to look into the tests another day. Thanks!\n. As already said in #988. Fully ok. will pick this.\n. Thank you @DWand \n. @Dmitry9999 . You have made this correctly! The message style does not match the guideline, but I can take care for this.\n. Well, I think the doc was actually already correct. The language codes must be different.\nHere is an example: http://plnkr.co/edit/pZfWzSmoGskgd34KU0hK?p=preview\n. If you define a different preferred language as the predefined (static) ones, you will have still an issue with FOUC.\n. @Dmitry9999  Ah, sorry! :(\nYou're right, totally. I've followed your version instead of the current one.\nThank you for fixing this! ;)\n. Landed as af5d746\nThank you and sorry again. :)\n. Thank you. Looks great. It would be great if you could apply some coding styles (if (expr) { or } else { like the existing ones. There are hint/lint errors, however, that's actually a regression made some months ago in the build chain I'd just figured out. Not your fault. ;(\nAnyway.. first look promises a great feature. Everything is tested, even the case w/o the ngSanitize module. I'll have a depper look tomorrow I thing..\n. @marklagendijk  Thank you very much. Landed as 12dbc57 with some fixups (additional info in log for changelog, and a few updates in the code)\n. Yes, you are absolutely right. That one has long been overdue.\n. @marklagendijk We have currently 1-2 open feedbacks in queue. After this, we are ready.\n. Updated to 0.11.2\n. If I get this correctly, this would be actually a (probably) a promise based convenient helper managing removeParts, addPart and the afterwards refresh with the missing parts. Such a helper could be part of the partial loader, i.e. as a spec:\njs\n// only the router knows the state and the state transition deciding which parts could be removed\n{\n  \"resolve\": $translatePartialLoader.getPartsRefreshResolver({\n    add: ['ui', 'contacts', function () {return custom-array-or-string}],\n    remove: 'or-just-a-static-defined-one'\n  })\n}\n. > But, I think, it will be impossible to implement the refresh feature inside the helper if it is a method of the loader (because of a circular dependency).\nThere is always being a way.\n``` js\n// impl\n$translatePartialLoader.refresh(config) {\n  // apply the parts\n  return $injector.get('$translate').refresh();\n};\n// usage\n{\n  \"resolve\": function routeResolveFn($translatePartialLoader) {\n    return $translatePartialLoader.refresh({\n      parts: ['ui', 'contacts', 'common']\n    });\n  }\n}\n```\n. One time binding conflicts with the asynchronous pattern (here: loading of translations). You should be aware that in case of asynchronous loading your page will be blank.\nWhile you can add a custom error handler returning always undefined, this will not solve your actual problem: Here a demo http://plnkr.co/edit/F9bsLhIOKCNpkPR6Xbrc?p=preview The issue is we are treating undefined as being no specific result (in case of a log handler).\nSo: No, both combinations are not possible right now.\n. Actually, 100 bindings aren't so bad. But this decision is up to you.\nAn alternative strategy could be the manual way avoiding filter and directive using the service directly.\njs\napp.controller('YourController', function ($translate) {\n  var self = this;\n  this.texts = {};\n  // maybe listen for the first initial language laded (via event)\n  $translate(['array', 'with', 'all', 'your-keys'])\n    .then( function (translations) {self.texts = translations;});\n});\n\n\"treating undefined as being no specific result\": would it make sense to make this behaviour configurable \n\nI actually  do not know the consequences or the intention. The main idea of the handler was originally logging purpose (so undefined would be the noop).\nSo: Yes, an additional behavior setting could be added. Perhaps you  make a PR? :)\nClosing this.\n. @bekos Thank you, landed as f0e2585\nI've checked this multiple times, it still works. I'm still a little bit surprised we didn't have this already. Thank you again.\n. Please provide a Demo with your setup. \n. @juristr  Thank you for pointing out. Great plugin!\nI'll close this.\n. Hi @tsubik, thank you for contribution. Your PR is looking great and formally everything is okay (small note: have a look for spacing) . Brilliant!\nI'm with @marklagendijk in this two points:\n1. The preceding dot is based on a technically decision marking usage of namespacing. \n   1. In translate-namespace it can be removed definitely.\n   2. In translate it depends:  it marks whether being namespacing will be used or not.\n2. At least the namespace would override the current behavior. Given the last example by @marklagendijk, buttons.ok should work because it the regular way. Otherwise you will be forced with issues forgetting one small translate-namespace in path.\n   1. I'm still not sure whether \"going up\" would not make the whole thing very complicate. Using again the last example: what if myApp.buttons.ok exist (really following each of the items of the namespace)?\nI thing without making the things too much complicate (proposed):\njson\n{\n  \"buttons\": {\n    \"one\": \"A_ONE\",\n    \"two\": \"A_TWO\",\n    \"three\": \"A_THREE\"\n  },\n  \"app\": {\n    \"buttons\": {\n      \"one\": \"B_ONE\",\n      \"two\": \"B_TWO\"\n    },\n    \"module\": {\n      \"buttons\": {\n        \"one\": \"C_ONE\"\n      }\n    }\n  }\n};\nhtml\n<body translate-namespace=\"app\">\n  <ol translate-namespace=\"module\">\n    <li translate>one</li>\n    <li translate>two</li>\n    <li translate>three</li>\n  </ol>\n</body>\nwould result into\nhtml\n<body >\n  <ol >\n    <li>C_ONE</li> <!-- overriding the global -->\n    <li>A_TWO</li> <!-- only B_TWO after following all possible namespace items -->\n    <li>A_THREE</li> <!-- translation rejected because of missing, so using global -->\n  </ol>\n</body>\nSo, now I've written this down I'm remember we have fallback languages, too.\nAh, and it should be noted this cannot work in filters (it is not covered here). Because if we add support for this (however, this will require an explicit scope like {{ 'buttons.ok' | translate: this }}) it would conflict with the opt-out of $translateProvider.statefulFilter.\n. Valid points.\nhtml\n<body translate-namespace=\"app\">\n  <ol translate-namespace=\"module\">\n    <li translate>.one</li>\n    <li translate=\".two\"></li>\n  </ol>\n</body>\nWe can skip the namespace's dot, but stay with the id's one. Ok? Then this is a directive only feature.\n. Well, keeping it simple, there would be no such alternative strategies.\n\nAnyway I need to change code to look current namespace also in parent scopes, right now it is not working with isolated scopes.\n\nI've still not checked out the source (running, testing). But after only looking into it, I guess there is also properly an issue with parallel scopes. I think the namespace should not be \"computed\" when configuring the namespace (in namespace-directive), but when building the translation request (in translate-directive)\n. I've skipped this one for 2.7.1.. have not time for a deep usage review. But that's coming in next!\n. Landed as 45523bb\n. Thank you again!\n. Hi @davmelmeggeo,\nit would \"violate\" the rest of the idea of the module if a loader itself expose its loaded content. Currently, only the service (and via the service also filters and directives) can manage, query or even manipulate this data. The loader does not know anything about interpolation, fallbacks and other mechanisms around the actual key-value-pattern (translation text by translation id).\nExposing its loaded keys would be okay, however, it will leave the question about the value of that information regarding the additional features of angular-translate. And in addition to it, there is no static/direct way for getting the translations loaded by one part. That's because of two main reasons:\n1. addPart is asynchronous and hiding the actual loading process. At the moment, you don't know when the part is available (option: listen to the loaded events).\n2. At the moment the information (which translations belongs to which part) is only well-known during the load and merge process.\nFollowing this, the data is being merged. That's the cause why deleting a part only removes the usage of the part and would skip that particular part if the next refresh/load. But content which was already being loaded will stay.\n. @DWand, master of partial loader, what do you think?\n. > Also keep in mind that the partial loader merges parts together according to their priority. So there is no guaranty that a \"foo\" translation key from part \"A\" will not be overridden by the same translation key from part \"B\" in the resulting translation table.\nAh, @DWand , thank your for that piece. Not thought about this.\n\nBut this does not handle nested keys. So Object.keys(parts[name].tables[lang]); would need to be replaced with a function that fetches all the keys in nested object as dot notation namespaces. (if i read the docs correctly)\n\n@davmelmeggeo Well, it is actually not the concern of the loader knowing this process or structure. I'm really not happy adding such things into the library which must be maintained in future. It's very special and limited, but need work.\n. Ok, restart the issue ;)\nWhy do you want to fetch all translations ahead? Why do you not using the directive and filters in templates instead?\n. Does \nhtml\n<div ng-repeat=\"element in myData\">{{ element.title | translate }}\n{{ element.description | translate }}</div>\nnot working for you ? :)\n. @Davide95 What is your problem?\n```\n$ bower install angular-translate\nbower angular-translate#       cached git://github.com/PascalPrecht/bower-angular-translate.git#2.6.1\nbower angular-translate#     validate 2.6.1 against git://github.com/PascalPrecht/bower-angular-translate.git#*\nbower angular#>=1.2.26 <=1.4    cached git://github.com/angular/bower-angular.git#1.3.15\nbower angular#>=1.2.26 <=1.4  validate 1.3.15 against git://github.com/angular/bower-angular.git#>=1.2.26 <=1.4\nbower angular-translate#~2.6.1 install angular-translate#2.6.1\nbower angular#>=1.2.26 <=1.4   install angular#1.3.15\nangular-translate#2.6.1 bower_components/angular-translate\n\u2514\u2500\u2500 angular#1.3.15\nangular#1.3.15 bower_components/angular\n$ ls bower_components/angular-translate/\nREADME.md                angular-translate.js     angular-translate.min.js bower.json\n```\n. Clean up your local bower cache, perhaps the cause. \n. @Davide95  sorry about this, but that's no problem with us. It looks like your local setup with bower is corrupt.\nYour log should show something similar like https://github.com/angular-translate/angular-translate/issues/1024#issuecomment-98346234 (it was bower 1.3.12,  but same in 1.4.1)\n. @Discmt Do you have already taken a look into the documentation and guide chapters? Especially this lines...\n. I think we have explained the solutions already. Unstyled content will be displayed only using filters and not using a cloak. Both can be handled.\n. Hi,\nhm, well. That is not ideal and should be improved.\nBut at the moment: translate will replace its inner content with the translation -- it cannot handle deep and nested html structures. This results into that specific lines: https://github.com/angular-translate/angular-translate/blob/806801e20023a99143ffed2bc62c4db88fafa17e/src/directive/translate.js#L302-L307 Whenever a text content was found (element.text() returns text of any (deep) child nodes),  the watches will be activated and therefore the content will be removed effectively.\nFixing this requires at least to check only for text content of the own element. Any ideas are welcome.\n. @nwhittaker Yes, that would be better. Second that.\n. @nwhittaker  @JonQuarfoth  @Drarok \nWell, the reason why this is not an own directive: translate-attr-\u2026 isn't a valid directive name. Say: We cannot register a directive with a wildcard.\n. Yeah, that could be possible. But the \"duplicated\" attributes will stay: <span translate-attr translate-attr-title=\"translationId\"></span> \n. There is no \"lost\". Solutions are: either use the filter or html in the value. \n. Again: You can use the filter at the moment. This is a solution; and if filters are not overused I don't see a general performance issue.\n@odedniv: Well, that could be a possible way. Thank you for hinting.\nRegarding a dedicated translate-attr directive itself: Yes, this is a preferred solution. Although in the list vor v3, this can be done also in v2 here. However, this requires some work ensuing existing code with translatr-attr is still working.\nIf would even go with an opt-in flag replacing the existing solution.\n. Ah, right. The existing one is always at leasttranslate-attr- -- cannot break with proposed one.\nSo, a dedicated directive is a great addition without breaking something.\n\nAs for the work required I would gladly do it, though I'm afraid of breaking stuff since the translate directive is pretty complex and last time I tried to add something many edge cases failed. If you know you'll have the time to code-review my work I don't mind putting my time on it (the filter is a real pain in many ways).\n\nWe will review all contributions (and WIP contributions like this) as we have to maintain it the long way later. In discussion for v3, we had already the idea of splitting the directive's working into a dedicated directive/service controller allowing reusing some of its logic for other directives. However, it is not a secret, the work on v3 has not went out of a poc yet.\n. -> #1550 . Right, a catch case is missing here.\n. Missing reject  applied in  5a85a64\n. Thanks. Landed as 8616dca\n. Hi, thanks for the advice, like this.   The new possibilities using Sauce (open source projects) are very cool. And it is on the loooong list of my todos :(\nAnyone who is willing to help is welcome. \n. Demo is used to be working in the stable release which contains the folder dist/. That one is created by using grunt build.\n. Ehm, seriously: http://www.addletters.com/pictures/bart-simpson-generator/bart-simpson-generator.php?line=I+will+not+execute+JavaScript+code+by+external+parameter :)\nYou can try to use a (custom) sanitization strategy (see here).. but please, do not use such unsure ways. Just don't.\n. Well, it is marked as being deprecated in the upcoming and still unreleased AJS 1.4. \nWe should evaluate the differences between both, $cookies is in AJS 1.2 already.\n. @mrzepinski , thanks for the contribution. But this one is rejected. \nAt first, the change removes support for both AJS 1.2 and AJS 1.3 (!). Technically, because the internal interface of $cookies has been changed from a simple POJO (with properties) to a object with getter/setter.\nSecondly, $cookieStore is still valid, but would be probably ditched in AJS 1.5 (although that would not be semantically, but hey, that's AJS' yolo :))\nThe test fails because the internal change of $cookies was not handled.\nI'll create a TODO (conflicting with the rewrite #995).\n. @furyscript Of course, that's part of AngularJS' ngLocale. And again: localization/formatting is not part of translation.\n. @furyscript You do not have to push this thread until you can give us more details about your issues. Just as @tspaeth  said: We do not understand this with given information.\n. What do you mean exactly? Because it should be everything chainable...\n. Fixed in 2.7.2 (released two days ago).\n. Thanks for reporting. I'm still wonder why this can be null actually. text is a defined?!\n. Which model? This particular piece of code does not depend on any model.\n- angular.element('<div></div>').text(undefined).html() == ''\n- angular.element('<div></div>').text(null).html() == 'null'\n- angular.element('<div></div>').text('').html() == ''\nStill not getting it.\n. >  When get on property \"value\" error is happened because value= undefined.\nBut that conflicts with my \"test\" mentioned in the last post: angular.element('<div></div>').text(undefined).html() == ''\n. Please demonstrate you case, as minimal as possible. You can use this here as base..\n. Ah, jqLIte. Right, okay, thanks for the hint. The next release will contain a patch.\n. landed as ef1b10a\n. Fixed in 2.7.2 (released two days ago).\n. Thanks, landed as 89e2569\n. In the run phase, you will have the ability to inject the $translate service just like in other services incl. directives, filters and controllers. Said that, you will obviously handle this asynchronously as the translation module have to load all required languages.\nIn a nutshell: Use the service. Does that help you?\n. -> 40f9e35. Short: It's $translate.use().\nLong: Please do not use the wiki, but https://angular-translate.github.com\nThank you.\n. > @knalli please help\nCome on. You are waiting for 12 hours only (for me night) and already trying to bug is? Really?\nWhat do you want actually?\nIn your first post you requested using uses(), but that has been renamed long time ago into use(). Sorry about the wrong documentations which are still available and are messing up the Google index. We have to clean this.\nAs the documentation already described, use() will switch (and implicitly load) a language's translations. Nothing else.\nThere is and was never a preload mechanism in our feature set. However, you can archive something similar with the concept of \"fallback languages\".\nAlternatively, you can write your own custom loader implementation which can do all this fancy stuff like preloading.\n. In the world of (browser's) javascript and data, almost everything is more or less asynchronous except locally available in memory. $translate.instant() cannot be used in run() (or any other component's construction phase) because no translations would be available. Said this, we highly recommend to use the standard async service $translate() and control an visual interface for waiting/initializing. Alternatively, register an internal default language.\n. Done.\n. We do not provide any support for bundling the files yourself.. right order and existence of specific files must be correct. This is planned for the next major release..\nWhy do you not use the dist files? \n. @jzorn  Does that mean the corresponding PR is obsolete now?\n. No problem, I wanted to be sure not ignoring relevant issues ;)\n. Short: Use fallbackLanguage or have a look at the partial loader.\n. We have adjusted this due #981\n. Solution picked as bdee77f, up coming 2.7.1\n. We do not know this. We cannot ship a compatibility spec without checking this. And AJS has been released yesterday...\n. To clarify: We have already have an active scope running all tests against an AJS 1.4 RC branch. But because AJS breaks things even in RCs... ;)\n. If everything is working, we can extend the range with the next patch.\n. Released 2.7.1 which extends the valid range including 1.4 GA.\n. Okay, that would be discussable.\nping @tspaeth \n. Thank you all, landed as bdee77f\n. Which tooling exposes this number of calls?\n. I'm not sure what you want. In which situation what exactly is wrong?\n. Hm, must be a special corner case. Because the situation you are describing should be covered by this spec. The only difference I'm seeing is: booting phase vs. after-run phase...\n. I've added an additional test case. That is what you are talking about?\n. No, I had added a test case only. Perhaps you isolate your problem in a small demo. Either you find the issue yourself, or at least we are able to have a look.\n. The preferred language will be loaded as soon as possible (that's why it is loaded actually). The $state service will look at the url at a later point of time, which results automatically into an additional request.\n. Fix landed as 2fcbc60, in upcoming 2.7.1\n. I wonder why we have added this feature.. looks to be a \"less than 5% feature\". :S\n. Landed as 2fcbc60\n. Well, the group by clause will not support an additional alias functionality you are requesting.\nI would translate everything into the internal da structure. That could be done as a dedicated custom select directive: input is the translations and the directive itself can be refreshed watching for the translate change event.\n. Here we go: http://jsbin.com/desogiquwi/1/\nI'll close this in forward.\n. Landed in bdee77f (squashed)\n. @sigismondm  Please provide a simple test case. Thank you.\n. It would be nice if you make this as a runnable demo?  You can use http://plnkr.co/edit/LewAdjfYkzwpBBaG1xDz as a base..\n. Closed due inactivity. We still need a running demo.\n. As already mentioned: we can also go with a diagnostic multi adapter. It is possible to use $injector checking about the existence...\n. @sclausen , could you please update your code using \na) an appropriate current version of AngluarJS (that's 1.0?)\nb) an appropriate current version angular-translate (looks to be very, very old)\n.. and than: again: what is the problem with the filter or the directive?\n. That is at least not relevant to translate.\nWell, I would not change the values (and translate) in the sorting filter.\nWhat about this? http://jsfiddle.net/mut5yycn/1/\n. @TheHacker66 .. it looks like it is working everything? Where is the problem?\nSidenote: I'm seeing several permanent flashes in text areas in your application. That does not look fine... \n. Ah, missed that one.\nWell, that's a limitation by bootstrap which does not look for changes in the attribute (regardless by translate or you). You can try to use a filter explicitly (<span title=\"{{'key' | translate}}\">XYZ</span>). Otherwise you have to wrap or enrich the directive in question (in that case the bootstrap titler).\n. Well, you have defined this would be essential. :) But yes: a process of falling back to a standard translation is a common use case.\nAt the moment, we advice the strategy using one (or multiple) fallback languages defining the key in question. That's also because we treat the complete translation key as one unit, but not split its parts for individual resolving algorithms.\n. @kentcdodds Thanks for the hint. We accidentally didn't care about this.\nDo we know that AMD and CJS modules' name would be messageformat and not MessageFormat? \n. Okay, that will be the new one:\njs\n(function (root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module unless amdModuleId is set\n    define([\"messageformat\"], function (a0) {\n      return (factory(a0));\n    });\n  } else if (typeof exports === 'object') {\n    // Node. Does not work with strict CommonJS, but\n    // only CommonJS-like environments that support module.exports,\n    // like Node.\n    module.exports = factory(require(\"messageformat\"));\n  } else {\n    factory(MessageFormat);\n  }\n}(this, function (MessageFormat) {\n. Added in f5e039c - thank you.\n. Well, you are trying to use nested interpolations.. that is not possible. Only one pair of interpolation wrappers ({{ and }}) are possible.\n. That's AngularJS.. and the error is in the AJS expression parser code, not in angular-translate. You simply cannot do this. If you really want to re-parse and re-evaulate expressions, you have to create a directive which explicit takes care of that.\n. Additionally, there is no support for expression in keys. Everything is evaluated by the corresponding parser in the element scope of question.\n. Due lack of time, this one has not got be reviewed.\nActually, we should always have covered the correct order of requests. We must have a deeper look into it.\n. We have some tests regarding order of requests (slow/fast loaders in parallel).\n. https://github.com/angular-translate/angular-translate/blob/92bc9551279fc2f5bc7daaedebc87adede8b3713/test/unit/service/translate.spec.js#L443-L620 in particular\n. Meanwhile: Commit message style, PR origin and target branch are not correct regarding our contribution guideline. I think we (me) can handle this on the small (meta) changes, but you should take care of it next time.\nnote to ourselves: The review must take the tests into account, perhaps with an additional test.\n. @yannickglt  You you please add a test covering YOUR intentional purpose doing this PR?\nI just want to be sure this will work both for you and for us as expected. Ideally add the tests just right after the other \"timing tests\" (see here https://github.com/angular-translate/angular-translate/pull/1070#issuecomment-131618200).\n. Well done, thank you very much. Landed as dd4a8b4\n. Thank you for the patch. Sorry for the delay.\n. Closing due inactivity.\n. @senthilakr88 see #1094\n. @sochka I've made a demo here: http://plnkr.co/edit/tQJOfMR1LmljfmTi6s2c?p=preview (standalone http://embed.plnkr.co/tQJOfMR1LmljfmTi6s2c/preview).\nWhat's wrong?\n. Getting this fixed we have to tackle down the bug correctly. We must know the differences between my plnkr and your app.\n. Any updates here?\n. I think we have not a real progress because we still have no working demo showing the issue. \n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Thank you, but we will stick with the version. The spec only describes it will be ignored at the moment.\n. Fixed.\n. language + territory is correct in that term.\n. Thank you, landed as aeff411\n. Looks fine, sorry for the delays.\n. Thank you again, landed as e7516dc\n. Hm.. can have a look later. Perhaps you can elaborate this a bit using AJS' $sce directly?\n. Link to #1101\n. Duplicate #1101 -- see also solutions and workarounds.\n. => See comment of 13.09. last year. => #1101 is showing the progress and the current problems. Ideas are welcome.\n. Please have a look at the translate directive, especially the attribute translate-compile. This allows you using expressions (including filters) in the translation.\n. It's your JavaScript. ;)\nDefinition of function getStates($translate), but invoking getStates(). \nThat's the error message.\n. Ehm.. but $translate('settings.TITLE') won't work, it's a promise.\n. @m-assaf  Do you have read the guide? And what is your problem exactly? Your code posted above was already commented by us, did you see that?\n. Please provide your issue in a demo code, i.e. plnkr.co\n. It depends on the version of angular-translate as well AngularJS. Starting with AJS 1.3, filters' results will be cached more aggressively. Also your test directive vs. filter will not test the same: A directive loads the translation asynchronously (paying attention to all languages, fallbacks and so on), a filter will directly return the value which is at-the-moment available. If the filter is being invoked while loading the initial data, it will return null.\n. @gonzalo-roberto-diaz Thank you for upcoming contribution! Do you want to translate the complete guide into Spanish?\n. landed -- closing this duplicate\n. > Also, the documentation don't mention that you need to include the $translateMessageFormatInterpolation\nSure it does. useMessageFormatInterpolation() is a shortcut. It depends whether you are want to use MessageFormat always or in specific situations only.\nRegarding the actual error and locales: Well, you have to look how messageformat.js handles its loading of locales. That's not out our part.\n. Sorry..  the issue with the locale is not \"correct\".\n. @tspaeth  Do you see a problem? http://plnkr.co/edit/CI29TNviKizHEhdfxvCB?p=preview is a copy.\n. @gustavekossi  Last one clearly shows you AngularJS app is not configured or you are in an non AJS aware context. If you see a non compiled expression, that's not a specific angular-translate issue but a general AJS one.\n=> You should fix your setup, specifically the template rendering in your app or used plugin (introjs).\n. > Thanks for your answer but the problem is i'm calling exactly the same expression {{'HEADLINE' | translate}} which display Hello there! both use the same controller\nAgain: It looks like the context in question (your dom within \"ng-step\") is not aware of or controlled by AJS.\n. That sounds strange. Please make a small demo.\n. Are you sure you have angular-sanitize.js and the module ngSanitize included?\n. Here: It works for me. http://plnkr.co/edit/Hz2x85SnK9PATCHRZ74N?p=preview\n\nIs there any way I can get angular-translate to output MORE logging? I'm unable to troubleshoot this effectively because it fails silently.\n\nCurrently: no.\n\nSide note: The documentation wasn't very explicit about including ngSanitize.\n\nBecause of you module structure that is not possible at the moment, also we still support AJS 1.2.\nDo you want to add such a hint in a PR? :)\n. What is still happening?\n. See my plnkr again:\n\nHere: It works for me. http://plnkr.co/edit/Hz2x85SnK9PATCHRZ74N?p=preview\n\nPlease show up the difference between this one and and yours.\n. But you see the link above with a working app containing underscores?\n. > Yes, your example works.\nGood.\nOk. I'll close this right now. Reopen or file again if you have a working demo. Otherwise we cannot help you, sorry.\n. No, it does not make sense some keys are working and others not.\nRegarding debugging: You can try the conditional console.log debug pattern if you mind.\n. I don't get your code and your issue. That's without any context.\nAnyway: You only have to setup the preferred language (i.e. $translateProvider.preferredLanguage() or $translateProvider.determinePreferredLanguage()) right in the config phase. If you call this asynchronously and out of AJS' config phase, that will probably not working any more.\n. You cannot \"wait\" as angular-translate requires the information about the preferred language as soon as possible. Unless determinePreferredLanguage() really does not fit your need (check it again!), you will have to reset the language at a point later. And this will result into the situation you have been posted at the top. As a bad workaround, you can defer the angular bootstrap, but.. I would stick with the deferred language change.\n. @gonzalo-roberto-diaz Is there still a TODO at your side?\n. Fine!\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Something like https://github.com/angular-translate/grunt-angular-translate ?\n. Sorry for the delay.. please restart the question in this repo. Hopefully, the (sub) maintainer can answer this more precisely. I'm not aware of all features of the grunt task.. Ok?\n. Could you please being more specific about what is not working? Do you have an error message?\n. I'm still not getting the issue.. IE10 is responding the wrong locale using window.navigator.*Language? Really? What is about IE9, IE11, and so on?\n. I will try to have a look at an IE10 in the next days.\nAs I am understanding this, the window.navigator.(user|browser|system)Language is not correct? Well, what should we do else?\n. Found this here: http://stackoverflow.com/a/2678437/525238\nIf this is really true, there will be no alternative for using server side determination.\n. Yeah, I've checked out and verified this in my IE10 VM (by modern.ie, which means it is an English installed system). Although I've configured German at top, the browserLanguage, userLanguage, systemLanguage are still returning the English one.\nTherefor, I'll close this with Won't fix. If the browser is lying to us, we cannot fix this.\n. If someone comes up with an alternative for server side (which I would prefer anyway): feel free to share it.\n. @akatasonov  Does this question related to angular-translate, or are you faced with this issue with MessageFormat.js only? :)\n. Well, we only support a bridge into MessageFormat.js which you have to configure on your own.\nSee more details here.\n. Hm, looks like they have changed something vor 0.3. In 0.2 there was a subfolder locale/.\n. @innerpeace0  We have such a idea some time ago, but this would require a (meta) change of the translation tables (better: the loader).\nAnyway: You can define such a layout on your own already today; you only have to build a small custom loader filtering the translation texts correctly.\n. But this is a change, too. Until now this would be valid translation key. After all, that's a breaking change.\nWe had also the idea of changing the meta structure of translations: For each translation there would be not a string, but an object containing a value (the translation), and comment and something else we don't know yet.\nBut again (my last sentence): This is logic being part of the loader. And everyone have the control to use a custom, selfmade loader which also means you can transform easily any existing structure into one which is required by angular-translate. In your case, it would skip all keys ending with ._COMMENT_.\n. > They would just sit there in the translation tables \nYep, and allocating space (ideally much more than the actual translation text) and will be never used. I don't like this, regarding memory consumption concerns.\n\nI noticed that other users have a need for objects, not just strings.\n\nNo, that's not the same. I've only spoken regarding the format of translations which will be processed.. but not how they are stored internally nor be available. \nI'm repeating myself: The loader can make such processes already today. You have to differentiate between translation texts loaded (i.e. by a server/JSON resource) and translation stored and being available internally in angular-translate.\n. As I said already.. that standard applies only for the loaders we are adding. But you can build your own loader (which is very tiny! and actually only one function) or your own http response transformer handling a JSON structure of your own choice.\nWe also would put that kind of logic into the loader or a post processor (i.e. http response transformer)\nRegardless at which time and which result we decide doing something related to your question, you can use something you want. Don't wait for us. ;)\n. We have had this idea months (years? :ghost: ), but unfortunately, nobody had time and ideas for this.\nThis is a nice idea, but we will not have the resources doing this. Sorry.\n. ehm... what are you talking about here? You want to translate other websites which aren't prepared for that?\nLet's make it clear: This is only a library for AngularJS, an exclusive frontend framework running on the client (browser). The app itself have to installed and configured this library just like (many) others.\nIf you are looking for a out-of-box-solution: JHipster is providing this in combination with  a complete backend toolchain.\n. Okay.. the picture is much more clear now. Thanks.\nWe do not plan to build such a \"central place\" nor we could maintain/support that one. That could be a great idea (it looks like a \"community driven\" thing), but I'm personally in doubt: it will not be so simple after all. Regarding versioning, contributions, quantity, quality.. not easy.\nIf you want to start such a platform, you are welcome. But looking at the spare time of our own, we cannot be part of this. At the end of the day, angular-translate would be only one tool of others. Such a site could be compatible with other libraries (like angular-gettext) also.\nTechnically, we should also make the differences between localization (i.e. formatting), translation (texts) and internationalization (translation + localization). Clearly, the name of angular-translate was not chosen randomly.\n. {{username}} will not be translated but used as variable for dynamic content. Indeed, if you want translating you have to use translate-compile and a sub template...\n. >  It just breaks Karma/Jasmine/Require.\nNo, not really. ;)\nWhat you see is the UMD header which contains three things (it's actually explained in the code you have copied): AMD header, CommonJS and standard environment. Both AMD (i.e. RequireJS) and CommonJS are optional used so it will breaking nothing. Said this, this will not break neither Jasmine or Karma. Actually, Jasmin will not load modules.\nThese files can be loaded just like \"regular\" files and everything works as expected. You can see everything works because everyone use these files, as well on our own as  in public plnkr/jsfiddle demo setups. In these situations like plnkr no AMD or CommonJS is used.\nPerhaps you will tell us what exactly is going wrong?\n. > Mismatched anonymous defines.\nWhat does this mean?\nI'm sorry, but an UMD header is not uncommon and breaks not an existing environment. Well, unless you have indeed a AMD/CJS look-a-like env (i.e. having a define function in gloal scope) being not AMD. But that should not be the case.\nI cannot extract a piece of qualified information of your ocnfigs, because I cannot look into it. However, you are in charge. If you are really sure the UMD header is the issue, you must be able trace the call of define in a debugger. And then: Which component provides it? Perhaps you have such a module system enabled?\nAgain: If this is a common problem, you would not be the first one reporting it and all demonstration would fail (plnkr/jsfiddle are mostly w/o an AMD system installed)\n. @nthibert If you are really using RequireJs, you will probably know the paths config option.\nWe could require angular, but unless they support this directly, the current thing is more convenient.\n. I'm very sorry in case someone has problems with that.. but, really really, there is no fail (at least for us).\nAgain: People in the world using this for years, not only in this library but also in many other libraries, without any complaints. As you repeatedly pointing the finger at us, I will make it straightforward: The problem is on your side.\nRegarding examples: Well obviously, we have no Jasmine tests on JsFiddle/Plnkr but regular demonstrations of code/usage scenrios examples at angular-translate.github.io as well as as several OTR demos: see here, here, here, here or here. These are my latest ones, that's sufficient.\nRegarding Jasmine tests: Well, the easiest way is looking at our tests actually. We do not use RequireJS or any other module system, and, guess what, there is no problem.\n(Please do not being confused with the scope's stuff, that is a little hack for testing against different types of AngularJS releases. More or less it's only a path-to-library resolver.)\n\nOne personal addition:\nI don't know what you are thinking what magic a module loader is doing. At the end of the day, it's only a set of functions which executes code, reads dependencies specs and injects <script> tags (in case of a browser environment). No magic, just JavaScript code. Said this, if you have issues with loading such standard libraries, you must have installed and enabled such a module loader. Or you have defined the expected objects/functions. You can have a look at the UMD header: It is a simple and clean 3-way-branches-condition. I cannot debug your code, but you have access and can looks what happens there.\nA module loader like RequireJS is great for bigger projects (at least in times before ES6+ modules). Despite that I highly recommend to understand what it is doing for you, what it can do for you.. and what it cannot do for you.\n. And here we go, a JSFiddle with Jasmine tests. It uses not the latest ones, that's a fast and messy prototype. \n. > Please don't consider this as a personal issue.\nNo worries.\n\nAlso, I like to tell you that we are using r.js to compile everything down into 1 file.\n\nI'm doing this as well. Unfortunately, several libraries are not compatible (and not declaring its dependencies) which results into a config with paths. Obviously, we don't declare angular also. The reason is that I'm not sure what we should do. Does the name angular is globally the name for AngularJS? Or angular.js? Or angularjs? At the moment everyone can use its own name.\nI'm not happy with the current one, but on the other side I do not want to force someone to name its dependencies. Thoughts?\nEdit: We have added messageformat.js few days ago (#1068).\n. @vance  We have already pointed out the issue is not UMD nor angular-translate. I'm sorry, but I'll close this issue now. If you have general issues understanding UMD, AMD or any other module concepts, I'll recommend stackoverflow with a much greater use base.\nThank you in advance.\n. @Stefan-Rein: I don't understand both \"fix solutions\", but the RequireJS configuration looks fine; you don't have to shim your own app (however somehow  it would make sense). Shimming the libraries as business as usual.\n@Stefan-Rein @vance I'm still not getting the problem. Can we please make up an isolated prototype (small as possible) for this? Eventually the best case would be (adhoc) repository here at github.\n. @Stefan-Rein Okay, two points.\nAt first: Perhaps that is only an issue in this demo, but... why do you inject source files from angular-translate instead of using bower or npm? At least files in sub directory service/ are not part of any distribution.\nSecondly: I've revisited the output (build.js). Your main entrypoint does not have any dependencies in the target artifact\njs\ndefine('appStarter',[\n        \"./controller/AppController\",\n    ],\n    function (\n        AppController\n    ) {\nUnless you define global dependencies on startup, each module should declare its own dependencies (even angular).\nBasic solution: Define at least angularTranslate\njs\ndefine('appStarter',[\n        \"./controller/AppController\",\n        'angularTranslate'\n    ],\n    function (\n        AppController\n    ) {\n\nOT: You're from Hannover, too?\n\nNo, not me. I'm from Cologne. Perhaps you mean Pascal ;)\n. It depends.\nYou have both mentioned the options:\n1. Split the text into parts. I would prefer a complete sentence as the smallest possible part, however.\n2. One key = one string. If you configure sanitization and/or compiling, you could even translate a complete HTML output.\n3. Do not translate long static texts with angular-translate at all (=> server side translate), but only the dynamic parts.\nThere is no \"best\" way, but a solution which fits your (personal) need.\n. I'm a little bit confused.\n@badr-ghatasheh: You are writing you are faced with this issue when\n\napplying 'sanitize' strategy\n\nbut you are actually not meaning sanitize but escape, do you? Because htmlEscapeValue will not be used when sanitize is activated (it is not required).\nRemarking your \"fix\": That's not a fix, that would make the whole thing ad absurdum: http://plnkr.co/edit/cDCBXlWVgYtny9ciJGV9?p=preview It only works using standard AJS 1.3+ with a $sce running in the background (i.e. ng-bind-html).\n@tspaeth I've listed the different kinds of: http://plnkr.co/edit/cDCBXlWVgYtny9ciJGV9?p=preview I'm quite not sure what this does mean for us right now.\n. I've posted an answer: Use sanitizeParameters, escape or escapeParameters. \nSorry for the delay in general, we are short of time. I have no final solution despite the obvious fact that sanitize (not sanitizeParameters) + utf codes breaks. As angular-translate is delegating this to AJS' $sce, I'm quite not sure what the possibilities are.\n. Just to repeat: As this issue is caused by $sanitize internally, the only solution can be so far using not using sanitize or a alternative implemented sanitization. Any suggestions are welcome!\nThis means: You can still use escape and escapeParameters which aren't unsecure! Both sanitize and sanitizeParameters would be more comfortable in some situations.\n. I've reworked my previous example and have collected all different kinds of flows. Please notify me if something is still missing!\nhttp://plnkr.co/edit/8BHONOjhsxBxxO9oVYOK?p=preview\nSo far, I'm seeing that usage of filter is always being somehow affected with issues. As I'm already mentioned, the strategies escape (formely escaped) and the newer ones escapeParameters won't harm the texts, but the sanitize and sanitizeParams will do (when using ng-bind or the filter, AFAIK technically the same).\nAs we cannot change the result of $sanitize(), I would recommend currently to use escape.\n. @johnpeb \n\nAs well the first paragraph should be corrected to qualify the security FUD:\n\nNo, that is not correct. If you use both trusted localization files and untrusted arguments (or \"interpolated params\"), your application will be affected also. This is probably the actual security awareness a developer should have: do not trust other/user input. The corresponding line is a security reminder only. This should be nothing a JS developer has to be surprised.\nRegarding the documentation: Well, the main goal would be to fix this. But neither I know at the moment how to handle this, nor someone else has a nice idea. We should consider to link to this issue at least.\n. I have reworked my plnkr of last year: http://plnkr.co/edit/wg1ni6SyIm2yixqvoJu7?p=preview\nSpecifically, the third variant (III: $translateProvider.useSanitizeValueStrategy('sce')) is a reworked edition of the custom $sce-wrapper. \nGiven the following input:\n{\n  UNSECURE_PARAMS: \"\u0628\u062f\u0631 <strong style='color: red'>BOLD ({{param1}})</strong>\",\n  UNSECURE_PARAMS_VALUE: {param1: '<em style=\"color: orange\">\"\u0631\"</em>'},\n}\nUNSECURE_PARAMS is the translation id/key with one placeholder, UNSECURE_PARAMS_VALUE is a map containing this placeholder. In both there is a special character and HTML in use.\nIt would also a solid default\n1. No character print/display issue.\n2. parameters are escaped (cannot be \"safe\")\n3. Translation text itself will be safe after that\nBut also has following limitations:\n1. Used as a filter, there will escaped text of the translation text itself. However, that is how filters' results are encoded in AngularJS. \nNote: This contains also a patched angular-translate.js.\n. @mydata I don't get it.\nIn general, the sample of last Monday is a concept only. As always I'm requesting feedback by the actual users of the library.\n. Proposal: http://plnkr.co/edit/q1Ab5mAoZcO0NypNJPFo?p=preview\nBoth text an interpolated argument contains html (text will be red, argument will be orange).\nThis also includes a full feature set demonstration, as the older demo skips explicit samples of the *Parameters strategies.\nSaid this, this proposals adds this new strategies (in demo 2.1 sce and 2.2 sceParameters).\nWhat do you think?\n. @lpsBetty  Oops.. thanks. I've updated the one in my post avoiding confusion.\nIn general, we could replace it to this preferred default (as mentioned in the warn log)\n. Just released 2.12.0 containing the new strategies sce and sceParameters.\n. Current demo running with 2.12.1: http://plnkr.co/edit/rJ0R6GzHGbMVxhSa237C?p=preview\n. fyi: current demo running AJS@1.6.4 & angular-translate@2.15.2\n@keybeth  I'm applied the character in question here. It's okay?. What is the difference compared with my demo link (the second one, targeting exactly your special character). If the only difference is the character is in the $app.js vs $locale.json, then the issue is a standard encoding one when delivering the files. Otherwise I don't get it.. As I already mentioned: That's a common issue serving (static) files. Get your server output encoding right, that's not an issue for an JS application (in which angular-translate is running).. All strategies are listet at https://angular-translate.github.io/docs/#/guide/19_security. > Is there any progress on this issue?\nShort version: no.\nLong version: Well, the problem is: I have shown a collection of different situations/strategies and even a maybe-fix, but I'm still unsure about the outcome. While this is an old issue and I'm getting new questions/issues about this topic from time to time, there is actually no really feedback effectively. I'm linking everytime at this issue here.\nWe are still interested in solving this, and any help is welcome. Maybe a refresh or restart in thinking is fine, I don't know. Because it's not a quick-fix and requires a lot of work in finding and adapting any change, it seems to be not an attractive issue :/. Because of variable replacement, you will have to escape the interpolation markers with \\. See here.\n. Well.. I was thinking restarting it at the grunt task's repo. :)\nI've created it for you: https://github.com/angular-translate/grunt-angular-translate/issues/50\n. @gonzalo-roberto-diaz Please have a look at our contribution guide lines. You should fork our canary and target it again when making the PR.\nAt least two commits are unacceptable (and I think you don't want them actually): gitignore additions, and the removal of the package.json (!)\n. @gonzalo-roberto-diaz But... thank you for the big contribution! :sunglasses: \n. My recommendation would be putting the information \"version\" into the special loader (i.e. an extend of a standard url loader) which using this to fetch translations for a specific versions.\nAlthough you would still have the unsolved problem of incompatible versions (solved by the server?!), I do not see any other option. I do not think \"fallbackLanguages\" would be correct tooling.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. I'll close this in advance as it was solved by updating to 2.7.2.\n@pjindal612 You latest plnkr is w/o translate, but only AngularJS (1.4). If you have FOUC issues, you probably should have a look at AngularJS https://docs.angularjs.org/api/ng/directive/ngCloak -- I guess that's the thing you are looking for.\n. It's not less strict, it is called escape. And this looks like #1101\n. @ 1 (global variables?)\nThese are examples and will probably not exist in production code. Furthermore, I think most usages will be a loader (like url loader, static files loader).\nHowever: If you need to apply additional language texts outside of a loader (why?! :)), $translateProvider.translations() would be your api.\n@ 2 (usage of the $ prefix)\nWell, these decisions has been made by the original author years ago. I think @PascalPrecht would not made this again, but that's the situation we have now. \nYou are right: the prefix is not recommended for modules mentioned by AJS itself. IMHO Do not use that prefix.\n@ 3 (json style)\nIMHO the JSON style guide is irrelevant when speaking about translation texts. We should not mix JSON content like APIs requests and responses with things like translations. But: It's up to you as a developer.\nThere are also people wishing they could use natural english (like default text) as translation keys. Speaking generally about JSON, I would follow the Google Guide. Definitely. IMHO the rules are fluent \"correct\" after using JavaScript for some years..\n@ 4 (indent)\nWell, in fact we are using 2 spaces for source code. But again: It's up to you. Developing for angular-translate (the project) requires that style, but for all other things you can decide whatever you want. Globally speaking, that would be either 2 oder 4 spaces. Papa's style is fine (and very large).\n@5 (localization vs. region/locale)\nen-US means English (USA), en-UK means English (Great Britain). Both settings do not say something about the localization. However, you can deduce the localization mostly using the region.\nWe have to decide to handle one part: the translations. The other part localization is already covered by AngularJS itself (data) and by other plugins (runtime changing, i.e. https://github.com/lgalfaso/angular-dynamic-locale). It's up to you deciding having one language (en) or multiples derivations (en-US, en-UK, ...). We are concentrating on translating, just the name of the library.\nIf you have to handle everything, I would recommend a custom internationalization plugin. This one have to control and listen to translate, locales, your custom session information, locale information retrieval and what else. If you think of a reusable component, you can share this as independent angular plugin. AFAIK that does not exist.\n@ 6 (line limit)\nIt's up to you.\nIMHO I would stick with a recommendation rule: Try to write the code being under the limit of 80. But I also have projects (Java) with a limit of 120+. \nA fixed rule will result into bad exceptions.. but again: This decision is yours. It is only about readability. Sometimes a line of 100 characters is more readable than a forced split 2/3 liner.\n. @M21B8 \nSwitch this lines\njs\n  $translateProvider.determinePreferredLanguage();\n  $translateProvider.fallbackLanguage('en');\n@tspaeth We have to look into this why this order has such a priority.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. @innerpeace0 At first: Thank you for giving us such great input and ideas. Honestly, this is great. Do not get me wrong, but that is not the correct board for that.\nWhy? This support place is actually not a place of a angular-translate \"community\" at all. We do love community support (in both directions), but we actually have no such place here. People talking about support (bugs, issues, features), but nothing more. That's the current situation, and not my opinion at all.\nAlthough, we have to distinguish issues at this place. At the moment, we have serious problems to maintain the regular support in an optimum responsive manner (I'm not happy with the current situation). Yes, there is place for some meta discussions. But especially  that kind of discussion would be a great meta discussion point for Stackoverflow (or other global groups) involving people of other (translating) tools. \nIf someone have something to share with us, he/she is welcome to write a comment here. But in favor for our regular support overview, I'll close this.\nI'll give you my answer: I have no idea, and I think it depends more on marketing that actual \"translating\".\n. I'm also not getting it. However, when working with setTimeout() or DOM directly you will have issues with AngularJS always. That's because no implicit $scope.$apply()will be performed (AngularJS basics). Ideally, you would use $timeout() instead of setTimeout().\n. Closed due inactivity. \n. Which version of messageformat.js are you using? Can this difference be an issue of a messageformat.js update? 0.2 vs. 0.3?\n. The error is by MessageFormat itself (as the title already said). Also angular-translate does not \"know\" the MessageFormat internals, we already try to duck check this particular scenario (bbc1cbe).\nCan you confirm this situation? It should happen only when the expression (i.e. comments.count) will result into undefined/null because not initialized.\n. Closed due inactivity.\n. As usual, a demo would be nice.\nI've prepared one and cannot see an issue. http://plnkr.co/edit/842ObscafZdQy8keWZyq?p=preview\nWhat's your setup?\n. Yeah, typo only in French version.\nFixed with 806b3b0, available with the next release.\n. Well, that has taken some time.....\n@sscovil : Thank you, I have added the link.\n. $translate.instant(key) returns the current information (regardless it's correct), but $translate(key) returns a promise proxy which waits for the correct key for the current situation (see for fallbacks, current loading translations, ...)\n. I'll close this in forward, the issue was solved I think. Ok?\n. @juristr  I've a demo at http://plnkr.co/edit/F9bsLhIOKCNpkPR6Xbrc?p=info showing a custom loader which uses another loader (in this case demonstrating a delay).\nBecause the loader is actually only a function returning a promise, you can provide a fully custom solution. If this built-in loaders do not fit your needs, you can use an completely selfmade one.\nYou could even think of creating a pluggable CustomLoaderDelegator at which your modules could register their own loader configurations. This is up to you -- you only have to match the loaders signature and returns.\n. Well, delegating the requests: check.\nUnless I've not overseen it I would suggest rethinking the requests and processings of your translation resolvings, but yes, something like this.\nIt does not make any sense to hold the translations in the loader (as you did). Only for the process of combining/merging this would be required eventually (within the function returned by $get, but not outside).\n. @juristr  Well, your work looks great! :+1:  I'm only curious about the loaded translations state (internally in your loader). I'd still not enough time yet looking into it, but think there could be a conflict / not determined  state of loaded translations while loading and requesting/returning translations. I would revisit the request and response behavior, as well as parallel request and response activities. \nI'll try to look into this end of the week.\n. Yes, this is possible with the flag translate-compile, corresponding examples in the tests.\n(A \"translation\" value can be contain a translate filter/directive again). Just like regular HTML/template.\n. @kotfilemon If possible, provide a working demo. Thank you. I've setup one http://plnkr.co/edit/dRTcD83mvuCI4WmFN9kS?p=preview\nYou have configured \"escape\" which means all outputs will be escaped. That one is doing exactly what it should do.\nYou have following options:\n1. Perform the translation on you own (by calling the service directly and inject the result in your own directive)\n2. Switch the strategy to some less radical one. For example: If you have the translations under your control (and you know they are not containing (bad) HTML), you can use escapeParameters which will only escape the dynamic interpolated values but not the whole translation result.\n. It does not matter what the origin of translation will be. Whatever you are doing, each process of translations are the same regardless which loader will be used (or even using statics).\n. Duplicate #1101 -- see also solutions and workarounds.\n. Yeah, sorry for the delay.\nIn a nutshell, just for making the point: You are trying to extend the feature of links from only one to multiple (finite) ones?\nWell, you have picked the easiest part applying a patch for the \"instant\" variant. Much more complex would be the part for the real standard, asynchronous way...\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Sorry for the confusion.\n\nI'm new to requirejs.\n[...]\nIs there any document which mention this?\n\nHonestly, these kind of configuration is well known (actually a sad situation) when using module loaders in browsers, especially in the context of browser javascript plugins and many not-amd-ready-plugins. Said this, nobody has missed this until today. Do not get me wrong: Your question is fine.\n\nBut I could hardly find any documents to refer to .\n\nSimply: We rely on the knowledge a developer has when using a module system.\nAlthough it is obvious a plugin will depend on its core, we can add a paragraph about this in general. Feel free to add this in the docs, I would suggest at the end of chapter 0?\nI'll close this in forward.\n. @robhicks We cannot give full support for messageformat.js.. that's not our project. We only provide a bridge into messageformat.js, but both translations and the actual interpolation work is not by us. The translations must be provided (i.e. yours) and the interpolation module delegates the work to the current available and injected/loaded messageformat.js lib version.\nAlso you should always attach a working demo (i.e. using JSFiddler or plnkr.co) demonstrating your issue. That also shows conflicts much easier.\nReading the syntax error (!), I would assume an invalid messageformat.js pattern. Perhaps a wrong version?\n. Please provide a demo of your case. Anyway, that one should match the issue: http://plnkr.co/edit/qE0ooWOgDKicPeymjmzr?p=preview\nAnd yes, that seems not to work. After enabling the last config line with $translateProvider.useSanitizeValueStrategy('sanitizeParameters');, the inner translation won't work.\nI would assume that the \"custom\" attribute translate will be stripped away from the sanitization module which would be actually correct and expected.\nUnless we find a suitable version, I would recommend building the text on yourself. In case of a pattern used multiple times, I would recommend a custom directive and configuring the content on yourself using $sce and its deeper configuration options (I think there were some).\n. > What exactly do you mean by [\u2026]\nYou have to create a custom directive (highly recommend) which calls the translate service (incl. the correct interpolation) and injects the values directly (i.e. via DOM).\nYou also could try to decorate our directive component, but I'm not sure this would be very suitable. It looks like a very special case?\n. Well, use an appropiate sanitize/escape strategy.  At the moment, I cannot see something does not working as expected. \n. No. If you are using a sanitization of the result, don't be surprised by a sanitized string. Same for escaping. \nThat is how sanitization or escaping is working. \n. Sure it's working with the expected result of the selected strategy.\nAnyway: Please show a working example where the strategy is not working.\n. Yes. The dynamic value (containing HTML) will be sanitized. Works as expected! $sanitize removes translate as being not a wellknown attribute, but that's how this component works.\n. @FrancescoMussi  Did you follow the link? :)\n. If the strategy is right for you, that will be basically the step. \nAt the moment we have no standard (no decision made for you) whether you have to use sanitization or escaping.\n. @gonzalo-roberto-diaz  Thanks for reporting, I've fixed that one. Will be available after next release.\n. Thank you again, that looks awesome!\nWe'll have to change the commit messages slightly, but we can take care of this.\n. I'm quite busy currently. I'll try to pack the new stuff in the next days on canary. Thank you, and stay tuned.\n. Thank you again! Landed as 142d0b3\n. That's an invalid filter argument for AJS... Just like the error said already. Remove the quotes...\n. Does work {{ 'TRANSLATION_ID' | translate:authentication }}?\n. I'm okay with that.\n. Landed\n. The first argument is a valid language key.. and not something \"anything\". If you use something else than a language id as store key, you have to define you own language loader. We will not make this.\n. @kojiwakayama  Thanks for contribution. However, why are you using the static files loader when building a dynamic request? Would not be the url loader the better one? \n. Well, that means you are not wanting introducing params actually (which some kind of invalid in context of static files!), but using a custom $http option.\nThe reason why I'm rejecting this is clear: This loader should be easy, clear and simple to use. An option for dynamic params in context of static files is not anything of these.\nIf you need to add dynamic params, then you should use the appropriate loader (url loader).\nIf no built-in loader match your need, please use a custom one.\nNote: It depends on the other parts of your system, but proper http header should work also. You can apply additonal $http options with options.$http.\nSee also more about this in this meta AngularJS issue.\n. Just use $translate.use() within the state's controller: http://plnkr.co/edit/tQJOfMR1LmljfmTi6s2c?p=preview\n. Typo fixed in 45ebf09 -- other things: File new ones.\n. Please provide a demo at plnkr/jsfiddle exactly with your settings.\n. I cannot follow your examples (and the issue). Could you please setup a demo at plnkr/jsfiddle?\n. @Koblaid : Yeah, that's a bug when calling $translateProvider.use() additional to preferredLanguage(). You don't have to. Probably you can avoid this with a loader cache (or $http cache).\natm: And it will not likely fixed: We will change the naming and meanings of the terms preferred language and use language in the next version, because they are producing sometimes confusion. I guess anything we change here will break existing \"assumptions\".\n. @dacox Your issue is still open?\n. Closed due inactivity.\n. I'm quite not sure why this idea would not fit with the partial loader.\n. Given your last example, a possible partial name would be components.header.header.\n. @shinrox  This is a nice idea, but it requires two things\n- you have defined such a structure and organize all contents fitting this (components, language texts, ...)\n- you have such a component texts loader which is following your self made structure\nAnd again: If you have defined such a layout, you can try to use the built-in partial loader.\njs\n$translateProvider.useLoader('$translatePartialLoader', {\n  urlTemplate: '/app/components/{part}/{}part.{lang}.json'\n});\nUnless the built-in is okay, you can make your own loader.\n. What is your question? Of course you can build an own custom loader which is not actually loading but using something else (i.e. constants). It's up to you.\n. Well, I'm not sure. I'd not make such things, pushing such stuff into the AJS context.\nIf someone comes up with a nice idea of doing this...\n. Given your ids, translateUrlLoader (extension) depends on pascalprecht.translate (core) -- that is correct. \nHowever, the AJS module still has the origin name. I'm guessing you have tried something like angular.app('app', ['translateUrlLoader']) which is not correct. Neither the AJS name matches the RequireJS id automatically, nor the url loader has its own module (yet).\nYour second config is allright, but stick with angular.app('app', ['pascalprecht.translate']) and a corresponding line for activating the extension via config.\n. If you are using (and requiring) the url loader, you should require it in the dependency definition also.\njs\ndefine(['angular', 'uiRouter', 'pascalprecht.translate', 'translateUrlLoader'], function(angular) {\n    return angular.module('app',['ui.router','pascalprecht.translate']);\n});\n. No, unless you define the fallbacks already in the translation dataset (with links).\nAs you are already using the service, I would recommend using promise callbacks in chain: preferredTranslation.catch(alternateTranslation) or something similar..\n. What's wrong with <any translate=\"{{value > 10 ? 'foo' : 'bar'}}\"> < /any >? :)\n. See here (last line): http://plnkr.co/edit/ezQB7kgOYZo84GtlfsMx?p=info\n. @ramseyfeng Either you apply some important translation directly (using $translateProvider.translations()), see here: http://angular-translate.github.io/docs/#/guide/02_getting-started#getting-started_aaaand-action \nOr you should have a look at the partial loader http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading#asynchronous-loading_using-partialloader\n. note: We will rework this in the next major version -- at least.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. @xenoterracide You should always inject non minified libs and use cdns in demo code to get the full debug code from AJS as well as better stacktraces.\nWhat is wrong with this here? http://plnkr.co/edit/hvFtnzxwXNoXEnOjzMJr?p=preview\n. If the directive does not provide refreshable bindings (here: tooltip), you will have to apply it manually. Perhaps you extend/decorate the existing directive with event listener (for translate refreshing) and apply the new texts on your own.\nWe cannot make this as we do not know the other library part.\n. Note: The issue not new (more or less duplicates), I'll flag them all together.. Stay tuned.\n. Duplicate #1101 -- see also for solutions and workarounds.\n. Please provide a demonstration about this issue. We simply cannot guess what your problem is (as everyone else has no issues for months).\n. Closing this.\nIf you can provide a demo, feel free to re-issue.\n. Hi @aupp , thank you for contribution.\nRegarding the contribution guidelines, we have some issues:\n- the changes are split in separated commits, without need\n- commit message style intend no useful changelog pattern\n- a pull request should branched by the canary and to the canary\nAnd technically, I wonder why the change was only made for determineTranslationInstant (meaning filter), but not determineTranslation (directive + service).\n. @aupp Wonderful you are doing contributions :) We have prepared a document for this: https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\n. @aupp Because you do not have targeted the correct branch on PR creation: yes, unfortunately.\nYou just have to:\n- rebase your changes onto the latest changes of canary (be sure that you branch of canary!)\n- merge/squash the commits into one\n- use a proper commit message\nand then make a new PR to OUR canary. That's all.\n(The new PR is only required due GitHub limitation of not changing this any more. Rebasing would be possible at any time.)\n. @aupp Do you still want to complete this PR?\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. Yes, the failure is caused by the underlaying connection -- your online connection. \"read:error: Connection reset by peer\" is a low level message.\nEither you have local issues, or github.com has/had issues in the moment (dealing your request). In both way we can recommend only: try again.\n. Ehm.. if your translations is lookking like { TRUE: 'true' } you should use an expression like data.value = 'TRUE' together with {{data.value | translate}}.\nOK?\n. There does not exist such code \"a\", \"b\" in https://github.com/angular-translate/bower-angular-translate-loader-static-files/blob/2.7.2/angular-translate-loader-static-files.min.js. Whatever you have used, that files is not from our bower repository or has been modified by someone (or a tool).\nAlso I did not get you comparisons/diffs.. what do you want to tell/show us?\n. I do not understand the problem: The files in the repo do contain $inject. Just check my link in the comment 8 days ago.\n. What do you mean saying \"I checked it with ngAnnotate\"?\n. Ah.. you are using ng-annotate --add --remove angular-translate-loader-static-files.min.js -o test.js. Why? What do you trying to do with this command? Our file is already ready to use.\n. Well, if you manipulate our file you should not blame us when it is not working anymore. ;) \nAgain: Check the file and look for $inject. You will find it.\n. Thank you, landed as 6014a81\n. Thank you, landed as 1c2ac47\n. What is your problem? ng-model='value|translate'? Well, that's not valid AJS. A model cannot contain a filter. Even it would be, how should that work? A model reflection by translation?\nYou are looking for a change of the value of value but not the reflection itself, I guess.\nAnd I think you are looking for the HTML input's placeholder attribute?!\nAdditionally, your demo code was a little bit confusing. See result here http://jsfiddle.net/mk88745o/1/\n- You are still using an outdated AJS 1.2, please update.\n- You should not use minified code in demos, that's bad for reading error messages.\n- You had written a directive a) in a very uncommon (and at least in this case not needed) way and b) skipping the AJS template binding (other than you described here!). There is no need for jQuery, at least a self made template injection will obviously broke the binding feature. Too much code, too less functionality.\nHope that helped you. I'm closing in forward, but feel free to write.\n. No, at the moment this is not possible (at least: not possible in one app).\nWe have this feature on the plan for the next big version. #995\n. Try using the filter in the placeholder Attribute directly. \n. Please make a small demo with your code -- as simple as possible.\n. Thank you, landed as 6ddb102.\nI've added an actual test for working ;)\n. If you have to call the service $translate directly, you should install a local listener for translateRefreshEnd ensuring it can refresh your directive's texts (this fixes language changes in the future including running changes while evaluating/compiling the directive). Be sure to add appropriate listeners for every parameters (for the translations) if they exist. In addition to the initial translation (on compile, postlink, controller) you should cover everything.\nYou can avoid installing the listener when using the translate directive and filter directly (i.e. in the template).\n. Thank you, picked.\n. What do you mean?\n. Perhaps you are confused because it's still only in canary (2a16eb65a6141a6d797d89013ddd32a9ddb744fa). Although you had made the PR to master, I'd picked it in canary right.\n. Well, the 304 status is HTTP. Basically, you have to respond with a correct cache header.\nEither have a look at the corresponding RFCs (i.e. RFC 7234) or a more comprehensive one like http://www.httpwatch.com/HTTPgallery/caching/.\nangular-translate is only a library using AngularJS' $http service is only using browser's XHR is only using HTTP. This means if you have a correct cache control, everything works. If any element of the chain is broken, it will not work.\n. Appendix: As you named the problem \"for every load of every page of the system\" I am assuming a multiple page application (MPA), and not a single page application (SPA).\nIn a MPA you can (and must) control the cache via HTTP, and in a SPA you can do this both in JavaScript (because running) and HTTP.\n. I'm not sure I'm getting you right.\nIf you are asking how to translate an unknown dimension of items -- you cannot. angular-translate is neither replacing you business logic or data structures.\nYou have (to) control of managing these four (or five, or three, ...) items to render, and you can utilize angular-translate for translating texts.\nI'll close this in forward, but feel free to answer again!\n. Second that. The intention of angular-translate is providing text translation -- one key, one value (incl. fallback and link feature), perhaps with additional arguments. You are mixing actual data (not texts) with the texts.\nSaid that, there is no need for iterating on translation texts. In this case.\nIn your situation, the page structure should be defined either in the controller or as a dedicated page service / model (this depends a little bit on your architecture and the size of the app).\n. Please show this in a demo. Adhoc, I would assume an additional library is affecting the DOM.\n. Yes, please make a demo we can see the results.\nYou are already aware of the ongoing issues with sanitization and unicode strings?\n. @ThinklabsGbR \nThank you for contribution. Please follow https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md which contains some notes about contribution steps in this project.\nParticular in this case, I remark the followings:\n- apply a proper commit message (see in guideline about conventional changelog)\n- add a test (for the other resolvers they are included, just search for bcp47 in translate.determineLocale.spec.js)\n- please rename the resolver name: lang_only => iso639-1\n- the new option should be mentioned in the list of available (incl. an example, i.e. same as in test?): $translateProvider.uniformLanguageTag\n. Superseeded by 1e037ec\n. @PascalPrecht @DWand  @tspaeth  Any idea? \n. If the built in loaders are not fitting your needs,you can make your own ones always. \n. No, it is not.\nTherefor my advice: Write your own loader. Basically it is only a simple service function, you can make everything on your own.\n. {{dynamicText}} is a expression which will be escaped (by AJS) automatically (well, except it is a sanitize wrapper value).\nPerhaps I'm overseen something.. but it looks everything as expected (in context of AJS bindings).\n. sidenote: Have a look at my latest reply here https://github.com/angular-translate/angular-translate/issues/1101#issuecomment-140426486\nYeah, I'd accidently thought ng-bind would also look for sanitized values. Well, go for ng-bind-html.http://plnkr.co/edit/hpTjxvgN0qC2ig6sCpC8?p=preview\n. @hjzheng You should that work? Where are the placeholders for the language?\nIf the built-in loaders are not good you you, you will be able to implement a custom loader always. Have a look at the guide.\n. @andresgottlieb  Thank you, landed as 664411f\n. Please elaborate a little more the actual question. So far, you have already implemented a custom loader and this is in use?\n. Closed due inactivity.\n. Just as @tspaeth  said already.. what is \"using the normal syntax\"?\nAnyway, using the regular translate filter this works:\nhtml\n<ion-view view-title=\"'profile_edit' | translate\">\n. @FrancescoMussi : This works at least for the HTML content (you have said view title).\nHowever, the actual window title (but not HTML) is not refreshed. This can be a limitation / incompatibility with between translate and ionic, but you will have this issue with standard HTML pages and html::head::title also. If you want to refresh the window's title, you will have to apply this title directly via service and DOM.\nIf this is still not working, you should make up a demo.\n. Do you mean sth like this issue #1094?\n. Closed due inactivity.\n. Thanks and big thanks for the additional explanation in the commit itself.\nLanded as 77dd5a2\n. Thanks, landed as 7ddd16b\n. Well, I could not remember this. But now I got it: The languages are loaded because you think there is no fallback situation. However, a fallback situation is not predictable. In case of a filter (which cannot use the logical promise/callback styled resolution path of translations), the fallback language must be available. There is no way of wait. So in order to guarantee at least an almost identical result of both ? $translate() (which is used by the directive) and $translate.instant() (which is used by the filter), the fallback languages must be available.\n. An alternative would be returning nothing (unresolved translation), a deferred loading of the fallback language and the hope everybody who has consumed $translate.instant() (even the developer) is also consuming all the translate events and will refresh the texts. I think you are going with me: that's not realistic and therefor will create a lot more \"unexpected\" issues.\n. We highly do not recommend to use HTML as a translation id. This causes issues.. well, like this one.\n. You have to wait for using use() because that is the actual used language. \"As soon as possivle\" in/after run() leads into undefined. \n. @ericjames Your question was not related to the original topic, you should create your own getting appropiate anwsers.\nHowever, in your case: Please fix your setup. You can use JSON-files in karma tests (it does not look like a general XHR issue). Your idea will not work as there is no processing of globals (side note: bad style). One possible option could be JSONP.\n. If you want to load different languages with the same file: Write your own loader. That will not come into the core or as an additional plugin (because its too special).\nYou try to put logic (fallback strings) into the resolver.. which is not possible (at the moment). You can use the concept of fallback languages: if a translation for the requested key (and the current active language X) is not available, another language Y will be tried instead.\n. Well, you try to \"overload\" a translation id being represented multiple times (or not), and being resolving by a special use case.\nThe much more simpler way is: One string, one translation. And again: The fallback language will be activated automatically for the requested string. Mixing a language file with different languages sounds not good.\nLet's say Java and its properties files. One file (i.e. base English) is the standard and fallback language. If the requested German key (key in German file) is not found, the English one (key in English file) will be used.\nIn addition, we have the feature of linking which allows within a translation (value) pointing to another key.\n. Ok, let's summarize that all a bit.\nWe will not provide a dedicate directive as requested in the issue's title. Perhaps you didn't want that also, an additional/other loader would be the right \"thing\".\nHowever: We have already different kind of plugins, but they relay on different sources by language. The request/provide feature is provided by the chosen loader. If you want to merge every language in one file (or in a lot of files), you will have to generate a loader on yourself doing this. The interface of a loader is clearly documented. But the implementation can be whatever you want.\nWe have at the moment:\n- pluggable loaders (additional the partial loader, and there is also a pluggable-loader on npm/bower from someone else which is great!) \n- fallback language stack\n- links within a translation pointing to other translations\nThis request is very special and we don't think it should be part of the core. And I don't see we have to add a missing piece allowing you do solve this.\n. The error was not your fault.\nWe are still welcome for your addition\n. Thanks, landed as beea1fa!\n. Thank you. Please squash the commits together and re-push them again in this PR. Thanks!\nDoe the existing events not cover everythings?\n. > I dont know if it makes sense to add this feature to the lib.\nYep, it's too special. But I'll tag this issue remarking me about injecting 3rd party resolving functionality.\n. Well, I'm not aware of the AJS state of NodeJS compatiblity, as angular-translate depends on this heavily.\nIf it works and you use an appropriate loader (the standard loader via $http probably not work and even won't make sense), it could work. Of cource, any built-in preferred language detection using \u00b4windowand/ornavigator` will not work, too. No surprise?\n. Your application won't show all 2000 translations at the same time (I guess). Being a little bit scared is okay (good to check these things when developing a bit app!), but that should be okay.\nAlso it depends on the app's structure. Isolated scopes with filters will probably digest less often than everything in the main template. \nHope that helps a bit.\n. Duplicate #1101 -- see also solutions and workarounds.\n. Please provide a test/demo case.\n. @phuyem Please provide proper valid JSON. Uncaught TypeError are hard core JavaScript runtime errors, not related to angular-translate.\nIn that case, a valid JSON part would be \"somekey\":\"some value \\\\'some inter text\\\\'\".\n. Duplicate #1101 -- see also solutions and workarounds.\n. @ghostd  Thank you.\nHowever, we have this already included with #1080 with the same reasons.\nPerhaps you don't have looked into the canary branch (as you should when doing contributions). It will be part of the next minor release.\n. Well.. it could be worth to apply this additional changes in the tests right onto the canary: https://github.com/angular-translate/angular-translate/pull/1208/files#diff-110b5641457e69e8a6bb537fc6f382beL460\nPerhaps you want to make another PR just with the patches for the tests?\n. Thanks, landed as 233a012\n. Thanks, landed as 8d27947\n. You don't clean up your references.\nhttp://plnkr.co/edit/I8ApZ0nCvXnOZH12Vm0R?p=preview\nThe missing point is $scope.$on('$destroy', remove); for removing the created listener. I've added the random id showing the different instances of the controller.\n. Fixed here and in all bower repositories.\n. The change will be effective on next release.\n. If you open the demo in plnkr, it will work correctly. Looks like the embedded ones have an issue. :/\n. Found it. It will be fixed in next release.\nThank you.\n. Preview @ http://angular-translate.github.io/docs-canary/#/guide/19_security\n. No, that are totally different processes. Also this is not the concept of angular-translate.\nWhy do you not want to use the built-in filters and directives? Why after all you are using angular-translate?\n. Okay. Nope, each string (which will be separated looked up using fallback, linking, etc.) must be provided.\n. I'll close this. Feel free to reply if anything is unclear.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Thank you for pointing this out, we have overseen this. Please make a PR (based on canary), then we can look for this and even make a preview.\nJust have a look for all 19*.ngdoc files in the repo (8 files in pattern docs/content/guide/$lang/19_security.ngdoc).\n. Solved via #1219\n. Filters are invoked several times which is not under our control. In that case, it looks like there is a time of formData.name being not available. The filter does not know whether the translation id is complete or incomplete.\n. Preview available at http://angular-translate.github.io/docs-canary/#/guide/19_security\n. Landed as 8201a9e -- including the missing Taiwan Chinese one ;)\n. Thank you!\n. @cthrax  Thank you.\n@angular-translate/core  What do you think? Should it be perhaps flipped?\n. $preferredLanguage before $uses?\nBut I think I was wrong. $uses should be a higher priority.\n. Please have a look at https://github.com/angular-translate/angular-translate/issues/1101#issuecomment-140426486\n. Well, IMHO there is no one right way dealing with a failing item when working with a collection of translations.\nTwo points made the decision not rejecting a collection promise when one item (or more) would be rejectable but not the others:\n- optimistic: probably all requested translations are available (eventually loaded)\n- usable: if only one missing translation rejects everything, you will not get the chance of getting the working ones.\nI know we had similar discussion as we had introduced this feature.\n. But undefined results would be inconsistent to the \"regular\" single-request way. Both results relay on the same resolution (in case of a failure).\n. At the moment, this is not possible. We have decided to implemented the \"settled\" way (https://github.com/kriskowal/q/wiki/API-Reference#promiseallsettled).\nFor v3, we will support an additional request method which allows you getting all metadata (i.e. success) for each translation request.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Link to #717 -- tried the filter already?\n. Closed due inactivity.\n. I can see 2.8 on npmjs.org. Perhaps a local caching issue?\n. Thank you. I hadn't really paid attention for the npm repositories for the \"shadows\". Simply missed :(\n@tspaeth No, unfortunately not. We can add an publish-all script into the helpers (angular-translate-root) project.\n. landed as cc410b1\n. @vinkaga  Do you have experience with this? Advantages/disadvantages to messageformat.js?\n. I would say we should create a dedicated (new) repository/project for this. Much more safe.\n. @eemeli  Thank you for the update. I'd already raised the version yesterday to 0.3.1 fb48f78 -- will be available in the next 2.11 release. Said that, actually, it is still only a \"peer\" dependency. Anyone can use another version of messageformat as long as it match the api.\n. Honestly I'm not sure why we had this cache made originally.\nDo you even recommend caching the results of $mf.compile()? Still best practice (because of \"compilation performance\")?\n. I'll close this issue. We will stick with messageformat, and not extending our support.\nHowever, we are welcome everyone adding another variant (i.e. angular-message-format). If you find a lack within our api, let us know.\n. Closed due inactivity.\n. Why are not using language codes like en-us and en-uk (or equivalents en_US, ...)?\n. Okay, please make an update. Until then, I'll close here.\n. Thanks, landed as d34f5c7\n. Thanks, applied for all languages and landed as 7c5fff1\n. As @tspaeth already mentioned: Unless your issue is covered by $sce (see #1101), you should at least provide a demo.\n. Sorry for the delay. I have a problem adding so much data in scope (which will be picked up by the watcher/scope-chain of AJS) only for a may-have or optional feature. Mostly will not use this.\nUnless we can make this being opt-in, I don't see this will be good change :/\n. It looks like your issue is fully addressed by this PR #1225. Can you confirm?\n. Oops.. will be fixed!\n. Yes. You can use your own loader or specifiy special options (i.e. prefix: '\u2026', suffix: '\u2026', $http: {transformResponse: \u2026} (see here).\n. Making this clear: That is only a loader providing data (translations) for one given language. It does not override anything.\n\n[\u2026] I'd like to use it but I also want my default values (in .json files) to be loaded immediately, without waiting for the REST call response.\n\nI don't get this. You want to load data, but do not wait?? What are you trying to do? If you have an external JSON file, it must be loaded asynchronously (and you have to wait).\n. One file is one language, there will be no updates.\nExceptions:\n- You use the partial loader.\n- You use the concept of \"fallback language\".\n- You invoke $translate.refresh() will be reload everything (but it will probably the same old ones again).\n. @oktay89  Do you use the latest patch release? We had a bug regarding the cloak introduced in the latest minor release.\nAdditionally: You can use both ng-cloak and translate-cloak..\n. Hm.. in combination with the partial loader and a non-existing value for the key configured in translate-cloak, the cloak will be removed and attached again.\nSolution c/should be: In the cloak directive, add an event listener for translate changes invoked by the partial loader.\n. @oktay89 : I've added end of the last year following fix e7536b5. I'm not sure I'm getting your steps right.. is that matching it?\n. @gonzalo-roberto-diaz Wow. Thank you very much, that's looking wonderful. And yes, you are right: In German, language names are being capitalized, too.\n. Thank you again, landed as 5f89d55.\n. Please see #500 -- this is at the moment not possible.\n. Please have a look at our guide about FOUC, as well the translate-cloak directive.\n. Following remarks:\n- Crash?! We would like to see this!\n- The current release is 2.8.1. Please consider an update. Also 2.6 has followed patch releases...\n- No, a css hack in the main directive is not a proper solution. Sorry. ;)\n. Take also into account: ng-cloak and translate-cloak.\n. There is no release angular-cookies@~1.5.0 available. \nThe repository defines in current 2.8.1 a range including 1.5 which is not correct. But as no stable release is available, that will automatically fallback to stable (at this moment of writing 1.4.7).\nPerhaps jspm is not treating numbers as semver? Why after all you are prefer this to npm or bower?\n. $ node -v\nv0.12.7\n$ npm -v\n3.3.5\n$ npm install angular-translate-storage-cookie\n/private/tmp/i\n\u2514\u2500\u252c angular-translate-storage-cookie@2.8.1\n  \u251c\u2500\u2500 angular-cookies@1.4.7\n  \u2514\u2500\u2500 angular-translate@2.8.1\n```\nangular-translate-storage-cookie#2.8.1 bower_components/angular-translate-storage-cookie\n\u251c\u2500\u2500 angular-cookies#1.4.7\n\u2514\u2500\u2500 angular-translate#2.8.1\nangular-translate#2.8.1 bower_components/angular-translate\n\u2514\u2500\u2500 angular#1.4.7\nangular-cookies#1.4.7 bower_components/angular-cookies\n\u2514\u2500\u2500 angular#1.4.7\nangular#1.4.7 bower_components/angular\n```\n. > Is there a workaround?\nWell, at least I can say: Standard npm and bower works. I don't know jspm.\n. I've checked out jspm a little bit.. I cannot see your generated files when using standard command jspm install angular-translate-storage-cookie.\nWith explicit actication of npm, it will fails.\n```\n$ jspm install npm:angular-translate-storage-cookie\nwarn Running jspm globally, it is advisable to locally install jspm via npm install jspm --save-dev.\n     Looking up npm:angular-translate-storage-cookie\n     Creating registry cache...\n     Looking up npm:angular-translate\n     Looking up npm:angular-cookies\nerr  Installing npm:angular-translate-storage-cookie@2.8.1, no version match for npm:angular-cookies@~1.5.0\n```\nAnyway, not an issue for us.\n. Well, I would say that's it: https://github.com/jspm/jspm-cli/issues/1172\n. Skipped. We allow 1.5 now\n. I've made a demo: I cannot see your issue? http://plnkr.co/edit/2qbj8nkW93ludul0zc5n?p=preview\n. I think so, too.\n. Please have a look at the documentation.\nYou will find $translateProvider.determinePreferredLanguage(fn) which can be configured with a custom resolver function.\n. Since AJS 1.3, must have to apply any arguments to a filter function (even the scope). A filter does not have access to the scope any more.\n. @gonzalo-roberto-diaz Thank you again! :) Great work.\nI have made some notes in the differences, but in general, wow :)\n. @doppio  Please provide a running demo/sample. \n. Closed due inactivity.\n. > So if I understand correctly, during runtime, there is no way to determine if a negotiated language using determinePreferredLanguage() is actually available. \nCorrect. The term \"preferred language\" means the language is only.. well.. preferred.\nNote: For v3, I'm planning to uniform the terms of \"used language\" and \"preferred language\" letting users less irritations. Input is welcome! #995\n. I have actually no clue what about you are talking. We don't use ASP.NET, but I'm sure that the language will not have such a feature. Perhaps you tool chain is the problem.. but not this plugin.\n. We use ng-annotate in the build chain to avoid such  boiler code. You can look into our Gruntfile.\nI think we are done, I'll close in forward.\n. No, we have not such a feature right now. However, it will be part of v3. See any process of this at #995 (wip).\nClosed because of duplicate of #500\n. Closed due inactivity.\n. This is a closed issue for about 2 years. No updates, see the metadata ;)\nYou (the app developer) are in charge of serving the resources which includes JSON/translation files also. If you are using a browser cache (which is not a bad idea), you also have to handle revalidations/freshness.\nSo: If you are changing these files (its content), you must ensure the browser will fetch the newer one. A solution could be a versioning url scheme (either with url rewrite or with a unique param). We as the library author cannot do this for you. We are running JavaScript in the browser only, we do not control your server.. In which way will be the package announced (both published and republished again) in the target repository?\n. That is not what I want to know. Which hooks will be available? How do resolve your local dependency? Where are the generated sources? What about git tagging?\n. If I understand this correctly, we have to publish each version and each package manually for meteor. Hm.. I don't like another package system besides bower (currently IMHO should) and npm (prefer).\nAlso I don't understand why you are not using npm? Simply npm init and npm install angular-translate -D.\nAdditional resources I've found so far:\n- meteor-bower https://github.com/mquandalle/meteor-bower\n- meteorhacks npm https://github.com/meteorhacks/npm\n- meteor-npm https://www.npmjs.com/package/meteor-npm\n. I'll close this.\nI want to keep the amount of spec files to manage as small as possible. At the moment, we have the following ones:\n- package.json for NPM -- This is mandatory and the de facto standard for JavaScript modules\n- bower.json for Bower -- Although NPM beats  bower in several points, a lot of people are still using Bower. And well, it was and actually is somehow a broad-wide 2nd de facto standard.\n- component.json Well.. it was a great module loader, but it is deprecated now. It is still there because it does not need to be maintained.\nThe last point is important: these things have to be maintained, to be managed. The spec file package.js above is a proprietary one and generated for single vendor/platform. And it has to be managed on each release. \nIt even includes details about meteor (valid for 0.9, 1.0). We don't know this, we will not care of this (probably).\nMostly both package.json and bower.json are present in all repositories: multiply the effort by 9.\nFortunately, there are already bridges for Meteor developers in the existing ecoystems (npm, bower) of modules. Unless there is a serious point why you cannot use neither meteor-bower no meteor-npm, we don't have to add this here.\n. I cannot see RequireJS in the sample code. Said this, as long as this processed by browserify and you have ensured angular-translate.js is already loaded, the sample should work. However, I cannot see you are loading actually the code? Including a module by string is not loading a module (script(s) file).\n. It does not look like an issue for angular-translate, but a configuration problem in your app.\nFeel free to reply, but I will close this in forward.\n. @th3nate  Please elaborate your issue a bit more, especially a demo would be helpful. Have you already tried the optional argument of the cloak directive?\nhttp://angular-translate.github.io/docs/#/api/pascalprecht.translate.directive:translateCloak\n. @th3nate  We don't want to see your full app, but a simple test/use case what you are doing actually.\n. I will close this. As I already said months ago, you should be aware of optional argument of the directive (which you aren't using).\nTo be clear: If you enable translate-cloak, it will be only apply the cloak unless translations are loaded. As soon as the first translation is being available, the cloak will be removed. Unless you specify a specific condition.\n. This is working as expected. You have to use a filter or a wrapping element (like span).\n. @coreysf  Thank you, landed as b6c2f4c :+1: \n. @moshen  Thank you, landed as 9247000\n. Oops. Thank you.\nThe line script \"clean-test-scopes\": \"for f in test_scopes/*; do (cd $f; rm -rf bower_components); done\",  is clearly missing. :(\n. Fix landed in c22c727, will be part of the next regular release.\n. That has nothing to do with RequireJS.\n@messyOne I would advice reading carefully both the module dependencies as well as the error message.\nBothbower.json and package.json define angular-translate-storage-cookie as a dependency. And the error message is clearly yelling a missing.. yeah, $translateCookieStorageProvider. Said this, one one: At least with 2.x, the dependency to the cookies will stay.\n. @mattlavallee  You are right, that is not the problem.\n\nIt seems that the filter is applied initially and then the json file is pulled in so it will no longer apply the filter due to statefulFilter being set to false.\nIs there a way to workaround this? \n\nNo. That is why stateful = true exist. false works only with preset translations without using asynchronous loadings. Asynchronous results cannot be applied into non stateful filters.\n. Picked as fb89a0d\n. Thank you! Landed as 830a84b\n. Please have a look at $translate.instant().\n. Thank you, I've missed the new language in the provisioning script.\nFixed. URL not a 404 anymore.\n. I'll close this. As @tspaeth  already mentioned, this is not the place for contributions to the AngularJS project itself.\n. > My problem now is that the translation file is always loaded a bit too late and some controllers of these components are already executed and their request to get translations via $translate.instant just returns the translation id.\nThat is why you should not use .instant() without paying attribution with its implications. You should not ignore the warnings in the documenting and guide.\n\nCan I somehow force the loading of the translation file to happen earlier?\n\nNo, there is no such option. The languages are being tried to load as soon as possible. But we can neither pause the AngularJS config/run phases, nor we have actually the network under our control.\ntl;dr: You have to deal that languages will eventually never be available at run phase, but later. This is asynchronous processing like in AJAX. In Angular (in this context), a run phase includes the initial constructors of controllers, services and directives as well.\nIn special cases like mobile hybrid apps you can preload the files and inject them statically ($translateProvider.translation(lang, texts)) and with a deferred AngularJS bootstrap (please have a look in the official AJS documentation).\n. @Gaurav-Ambasta  Do you already know this here https://angular-translate.github.io/docs/#/guide/22_unit-testing-with-angular-translate\nIn general, your issue is fixing the angular-mocks of your testcase/-scenario.\n. Again: You have to fix your mocking.\nIf you really need to use dynamic translations in your tests (I don't think so), you must configure your mocks. unexpected request is just a complaint by angular-mocks you didn't.\nHave a look at https://code.angularjs.org/1.4.6/docs/api/ngMock/service/$httpBackend\n. What is the state?  Are you not using angular-translate-storage-cookie?\n. Closed due inactivity.\n. I'l close this. The issue is being tracked at #1101. Also have made https://github.com/angular-translate/angular-translate/issues/1101#issuecomment-140426486 as full overview. Please share further information or issue in #1101\n. Closed due inactivity.\n. Closed due inactivity.\n. @marcelorio  Do you using 2.8.1? Because the bug with isReady() should be fixed.\n$translate.onReady() is already a promise which does not require to check for isReady().\n. Ah, I have missed your said already using 2.8.1.\nSo, no you don't have to call isReady(), although it should work and looks like the bug was not fixed in 2.8.1\n. What do you mean?\n. So basically this does not work for you? https://github.com/angular-translate/angular-translate/blob/2.8.1/src/directive/translate-cloak.js#L37-L39\n. In combination with a condition I 've fixed a bug. I'll close this in favor.\n. Sorry for waiting, this issue has been overlooked.Can you provide a demo with your minimal setup?\nHowever, looking at your source code: You have a timing issue between the two $translate.use() calls. The first one will be not finished when invoking the second one. Please be aware of the promise (return of the first call).\n. Closed due inactivity.\nAs I already said: It looks like a timing issue. $translate.use() will invoke asynchronous operations.\n. @sovattha Well, you can reduce the complexity of this case to the thing want to test: your template. Instead of retesting angular-translate's async loading process, I would recommend \n- a static set of translations\n- no XHR mock tooling: no $httpBackend\nSo, using copy-paste of your code of the op: \n``` js\ndescribe('', function () {\n  beforeEach(module('pascalprecht.translate', function ($translateProvider) {\n    $translateProvider.translations('fr', {\n      \"vehicule\": \"V\u00e9hicule\"\n    });\n    $translateProvider.translations('de', {\n      \"vehicule\": \"Fahrzeug\"\n    });\n    $translateProvider.preferredLanguage('fr');\n  }));\nit('should load the view', inject(function($rootScope, $templateCache, $compile, $translate, $translationCache) {\n    var tpl = $templateCache.get(\"/detail.tpl.html\");\n    var scope = $rootScope.$new();\n    var view = $compile(angular.element(tpl))(scope);\n    scope.$digest();\n    console.log(view.find('th'));\n  }));\n});\n```\n\n. Looks like it does: https://github.com/driftyco/ionic/blob/v1.2.0/js/angular/directive/tab.js#L60 -- attributes will be not injected dynamically (I guess due performance).\nIn that case, you have to rebuild the template on your own. We cannot make this, you have to.\n. @snowcxt Your dependency lookup path shows you the problem is not related to angular-translate, but ->$cookies->$cookieReader. \nI would guess you either have no angular-cookiesloaded or it is not matched the corresponding version with angular.\n. Then you have locally cached something. I've replayed, works as expected: https://gist.github.com/knalli/0b15198e1bf4eab780d6\n. I would recommend to check the versions you are actually using. Perhaps bower has not replaced correctly?\n. @snowcxt  Can you checkout my gist?\n. See here https://github.com/angular-translate/angular-translate/issues/1292#issuecomment-156217300\n. Bower cache clean will be your friend, goto man ;)\nHowever, if my mini project is working for you, it does not look like a cache issue. Exzept you have configured a local cache...\n. Closed due inactivity.\n. Well, I don't like to have duplicated content.\nI resolve this with adding a link to the installation chapter.\n. We have no recommendation for that. Everything is useful, starting with a standard text editor.\n. In combination with other directives, it is sometimes better to use the alternative approach with the filter.\n<ion-radio ng-model=\"contacttype\" ng-value=\"'surfer'\" ng-checked=\"true\">{{'contactpanel.01'|translate}}</ion-radio>\n. Ok. I have tagged this as \"Contribution Welcome\". (hint-hint).\n. The missingTranslationHandler is meant to be a static resolver for a missing translation. Please do not invoke $translate itself again, that could cause obviously an infinite loop state.\nPossible scenarios: \n- You want to resolve to the (modified) translation id as a default.\n- You have another resource of translations.\n. I've had to changed this, landed as 475a9b6\n. No, it isn't. You cannot rely on the markup on every environment (say: browser). Stay with a key and a value, latter can be html of course.\n. @faboweb Yeah, you can write your own loader. We don't include this in our core.\nAfterwards, you can publish this loader for everyone to include via npm and bower.\n. @tjad I'd never told you anything.\n\nyour response is rather distorting - asking the community to contribute without providing support (and closing the issue with essentially nothing done). Most unattractive.\n\nThe leading question was about a feature request regarding a YAML reader. And as I had pointed out this can be solved writing an own loader. If the author wants to share this code for everyone, I have suggested publishing the code. That's it. \nThere is nothing \"distorting\". We cannot add every (mini) use case or feature request solution in our code -- we have to maintain this afterwards!\n\n@knalli I am a bit unsure now, are you stating that I shouldn't develop this as a part of the staticFilesLoader module\n\n~~I have never said this.~~ Actually, yes. We don't add special use cases into the core loaders. What about the other loaders? Why should the partial loader not benefit of such a feature?\nIf you had looked into the guide and/or the API, you would have read about the simplicity of such a loader (see here). Said this, it can be interesting to have a look at the existing loaders.\nAdditionally, but currently not in the docs yet, you can even add a transformer ($http) to existing loaders via this documented setting.\nedit 13:20h\n. Will be in 2.11\n. $translateProvider.use() is actually not required when using $translateProvider.preferredLanguage() already.\nAnyway: There is a $translate.refresh() which enforces a reload of all translations. If you call $translateProvider.use() explicitly, there will a load of the specified language. Afterwards (in the controller) all languages including the already loaded one will be reloaded. That is actually right because that's the intent of $translate.refresh(). \nPerhaps we could add an improvement (\"Contributions Welcome\") adding something like $translatePartialLoader.syncronize(). \n=> This is not a bug, but the result of the given configuration and flow.\n. Yes, that is an inefficiency of the partial loader. It only works with $translate.refresh() but this will refresh always. See also #399\n. Will be fixed in 2.14. @bildja  Yes, looks good. Landed as ea94acd\n. At the moment we don't support this. You can add this for your own just subscribing the appropiate event. However, you must be sure to match the correct language format.\nAnd yes of course: A contribution is welcome.\n. I hope we can make the \"partial loader\" to make such as easy as the custom loader (which is actually only one function with promise), but it will not happen in this 2.x release any more (definitely).\nEven in a new feature, angular-translate will only provide features for translation text. Nothing more.\nSaid this, as the library maintainer: If you have such specific requirements, I advice you to build your own loader.\n. @vlasenko  I have not understand your issue completely.\ntranslate-cloak only controls the existince of a css class (on the specified element).. you still have to add it. Alternatively, you can use <h1 translate=\"some.key\"></h1> which will render only AFTER the first resolving (so no FOUC)\n. @vlasenko That would mean that some translations can only be resolved after the translations are being loaded and available. That sounds strange.\nAnway: What about specifying an additional translationId within translate-cloak? Does this work for you?\n. @vlasenko  Okay, it looks like the cloak is broken when used async and sync translation at the same time.\nhttp://plnkr.co/edit/9hyXezWDlFKZW8l9GDxu?p=preview I guess you are using both static translations as well as dynamic loaded (via a loader). If you uncomment the ll.19-24, it won't work as expected any more.\n. Ehm.. well, the example shows it is working only using the loader (async way). Actually you don't need a cloak when using static translations! Because this FOUC will being handled by ng-cloak already. translate-cloak is only made for the time between AJS is initialized (and ng-cloak will be removed) and the first translation is available. \n. @vlasenko  Can you play with  http://plnkr.co/edit/tF8QqyMukl4XKinixKZP?p=info ? This is a 2.9 pre release containing fixes.\n. What is the difference between my plnkr and your situation? Perhaps fork it and make the appropriate change..\n. Clearly it does not look like it would be so easy, since my plnkr seems to be unaffected and you cannot show me a demo. I'm interested in the difference. \nOne note: Do not trust timings when debugging is enabled: it is heisenberg involved...\n. If you are using <h1 translate>some.key<h1/> in your code, the text some.key will be rendered out. That's HTML. If you avoid this, you have to use the alternative way <h1 translate=\"some.key\"><h1/> which will never write out the key (unless you provide such a error handler configuration).  http://plnkr.co/edit/NuE2EcEpY6yJ19fieJnY?p=preview\nIs this the difference you are talking about?\n. Okay.. then the solution will be using <elem translate=\"ID\"></elem>. There will be always an amount of time between html rendering and AJS (and then angular-translate directive) picking up and creating an instance and changing the DOM.\nThe background is simple: AJS is calling us (using the directive) on the already existing DOM.\nI think we are done here?\n. Thank you also!\n. @LoicMahieu thank you, I've picked this as 8c5044c.\n. @hobbysoldat  Thanks.\nOn hold, we should add the notes for other languages (as much as possible) as well. \n. Thank you, landed as c66e5f4\n. PR is landed.\n. Thank you very much.\nlanded as 25b13c4\n. What do you mean with \"context in a translation string\"?\n. Can you please make a test case showing this? Because that's actually an feature: we are watching the (interpolated) params. Edit: Well, you are using a filter. In this case the filter is being called by AJS.\nAlso: Which version is used?\n. Closed due inactivity.\n. @p1tt1 Yes, this is a feature but will probably removed in v3 (#995) due spec issues. Just for notice.\n. Sorry, we can't. \nWe cannot add for all other libraries a warning. Why only ngMessages but not angular-gettext? The priority option is available in the api interface, although it would always being possible with a custom override/decorate.\n. Never ever.. :shower: \n. We are not loading messageformat in the window scope. As you can see, we are injecting this as a non global. If there is something defining a global messageformat, this can be only done by messageformat itself.\nIt's possible messageformat is not fully working with browserify, perhaps you have to add a shim entry?\n. Regarding your PR: Eh.. that makes the usage of modules being a little bit absurd. You are relying on globals while using a module system? That's not the right way, and I don't see we should even support this...\nSide note: If you are in trouble of injecting the locales too late: You have to inject them as a dependency itself.\n. @cleavera Just picked your PR. Thank you !\n. Uhm.. (confused) this is part of 2.9.0 already?\n. Looks so. Please file a new issue if the bug is still unresolved. And attach an appropriate demo, thanks.. @odedniv What do you mean? Missing statement to use 2.8.1 instead of 2.8.0?\n. OK. Got it. The libs in the docs must be updated.\n. @odedniv  Thank you for the message. Docs will be refreshed next release. 23d5ce1\n. @odedniv Great addition.  Could you please add at least two tests (both directive and filter) with an overridden language?\n. Also please rebase. Looks there are conflicts..\n. For tests: like in https://github.com/angular-translate/angular-translate/blob/ea94acd0bb16c8ffb286ec5676d7f6d35933e5e6/test/unit/directive/translate.spec.js#L594-L661 -- make such a new \"scope\" and put in your tests. Same for the filter..\n. --amend sounds good :+1: \n. @odedniv  Excellent work! :shipit: \n. Landed as e591462 -- thank you!\n. @pocesar  Sorry, I don't get this right. What you mean with \"full text\"?\nGiven that HTML, the key would be Meu texto aqui.. which would be automatically the fallback. What's wrong?\n. Again: <div translate>Meu texto aqui</div> will be picked up by the directive and Meu texto aqui will be used looking up used as a translation id. Unless this will be resolved successfully, it will be used as the fallback string. \nFinal words on <div class=\"metering\" translate>1.000.000 m\u00b2</div>: \n1. This is not translation, but localization. We do not add support for this since this is more or less fully covered by AJS itself.\n2. Given this example, there is no good translation id (do you want to translate the string 1.000.000 m\u00b2? I don't think so.\n. As @tspaeth has  already pointed out, $translate.instant() is the current loaded state of translations. It will/can not wait for any loader to finish. Our guide explicitly warns about the usage and is not recommending it the first way.\n. I think this is being well answered. I'll close in forward.\n. @cleavera  Thank you, landed as 069eafd\n. What do you have to adjust every time?\n. Well. If you configure your test with a loader using $http, you will properly have to handle these requests.. obviously, that's AngularJS.\nHowever, you do not have to configure a loader or even a loader using $http. In most cases, a static translation map will be very sufficient. And in the special edge cases an asynchronous loader is really be required (because of testing other latency/deferred components), a standard loader without $http will be sufficient.\nAnyway, I don't see the requirement of using a $http loader within tests.\n. Closing this. Question has been answered: Won't fix because there is no bug.\nIf you include code which relies on XHR, you will have to mock it correctly. That's how AJS unit tests work and this is actually not uncommon in other frameworks/languages.\nHowever, an angular-translate setup does not require a XHR loader. It can be totally configured without having one. Of course you have to apply a different setup for tests.. but that should be already the case for mocking other (external) things.\n. @memee  Please prepare and provide a working demo always. I cannot confirm this issue with my setup: http://plnkr.co/edit/60xY7Aw4RGOzQMmVMglZ?p=preview\n. @DatenMetzgerX  Thank you for the tooling.\nLines added as f1b8fa3\n. A proper solution would be a split directive.\nI don't think the falsy approuch would work. Can you explain a bit more?\n. Solved by your PR #1339\n. @DatenMetzgerX  And thank you again. Well looking contribution, including tests. Perfect.\nLanded as cafc0cf\n. There is no ideal way.\nEither you ask for $translate service using $injector allowing to use optional dependencies. Alternatively you provide a set of JSONs which people can integrate in there choice of i18n system.\n. No plans, because simply no ideas. angular.extend is actually another level.\na) You can build your own loader at any time.\nb) We have a special purpose loader called \"partial loader\" which is loading texts in parts.\nc) Even if you would use this, I would not recommend this. Why should you make an assumption of any app how they should load the translations? Perhaps the app later can/must handle translations without files, or with one big file, or with another translations plugin.\n. @michaelbazos  Thank you, perfect. Landed as-is as 3344cff\n. @leschirmeur Just use the combination: $translate(array, params)\n. @tahoemph  Thank you for pointing out that issue. However, I'm updating the documentation being correct. The code was right already.\n. Can you play with http://plnkr.co/edit/tF8QqyMukl4XKinixKZP?p=info ? This is a 2.9 pre release containing fixes.\n. > which method should I try with that new release ? Filter ? Directive ? Service ? Something else ?\nThe translate-cloak directive. \n. @mr-White  @JerryBels  Are you both aware of http://angular-translate.github.io/docs/#/guide/17_custom-error-handler ? This should make the \"blank return on error\" solution possible for you.\n. > Something I didn't specified, all my files are in local (no remote loading) so I really don't get why the filter (or any other way, whatever) returns the key first before the translation takes place and sets the right text. Since there IS a value to display ( the key, for example 'tabs.gallery' ), even ng-cloak won't work...\nIf you translations are local (defined with translationsProvider.translations()), the translate-cloak will be useless for you. Or say in other words: I should be not possible getting a filter returning translation ids which are configured \"locally\". Can you please share this configuration?\n. Please provide a working demo showing the issue. Otherwise we cannot solve this.\n. Well. Running in a Cordova webapp container has less loading timeout than a regular webpage.. just because everything is local. I won't say there is no loading timeout, but the issue will be more visible on a regular web page setup.\nSaid that, you can run a \"Cordova app\" on plnkr or so -- because it is only a webapp running locally. It's limited to browser APIs, but that not an issue. Anything Cordova related will not be part of this one here anyway.\n@JerryBels  @albertytau  Without knowing about your configurations (you have still don't show us anything), we cannot help you. The translate-cloak is working, but only with its specific limitations. The cloak works until the first language is loaded -- or the specific key is present (being resolved).\nAlso, just a few marks: \n1. If you see filter strings (i.e. {{'TITLE' | translate}}) in the output, this will be uncompiled AngularJS expressions. angular-translate cannot handle this because AJS itself has not compiled it yet. This would be an issue of your template, you app structure. Perhaps a missing ng-cloak or a missing $digest. Or a non-AJS-plugin maybe?\n2. If you see the translate ID (i.e. TITLE instead of Title), this will be a compiled AJS expression and therefor is eventually under control of angular-translate. The usage of translate-cloak should help.\nPerhaps you should give the browsers dev tools a try also: For example Chrome offers tools for bandwidth control which give you the possibility to test under \"bad connection\" situations.\n\nUnless you can show as a working case, we can not fix this issue. And without more information, we cannot help.\n. That's right I think. However, you are free to use use another version of messageformat. You have only to override the resolution in your bower.json. AFAIK the next breaking change is 0.3 which makes the current version incompatible.\n. In general, I would mark the version range allowing newer releases would be installed automatically. However, the API of messageformat.js is not stable or following semver at the moment (well: it is still using 0.y.z as version schema). Therefore, we cannot blindly allow everything, but we also cannot follow up each release.\nIf 0.2.0/0.2.2 passes our tests, we can use this. Obviously, the dependency of the bower shadow repository should match the one of the developing repository.\n. I've raised the spec by \n\"messageformat\": \"~0.3.0\"\nAlthough it looks like versions before 0.3 still works.\n. $translateProvider.uses -> $translateProvider.use, but already since v2.\n@fahussain  Which plnkr you have used? Where did you find it?\n. Closed due inactivity.\n. @louisdoe Please have also a look at #1101 collecting everything about this issue.\nRegarding your question: \n\nIs there a way to use both strategies, or to specify the strategy for each translation ?\n\nCurrently not. But a contribution would be welcome.\n. @Steve30  Nobody will know the issue using such a short message. Without any details, I'll close this.\n. The demo is not working because we have forgot to update the library within the docs itself (fixed already in sources, will be available in the docs on next release)\nUpdating to use the latest 2.8.1 and it works: http://plnkr.co/edit/HyGOfQ4FUJghwnRnP5CC?p=preview\n. I've created a sheet some weeks ago at http://plnkr.co/edit/8BHONOjhsxBxxO9oVYOK?p=preview We aren't finished with this, any ideas are welcome!\n. > With this behaviour it seems like it's never possible to use the directive and the filter in the same application.\nThe filter's value is escaped by AJS itself. We do not have this under control. If you use filters in AJS, you always should be aware of this.\nAgain: Suggestions and ideas are welcome, please have a look at the #1101\n. @leschirmeur The library angular-translate is not responsible for any DOM sizing calculations. Actually, except for looking for translate attributes and reading/writing innerHTML, it is even not related to DOM things.\nEven if Ionic would have a manual event trigger recalculating everything, we could not invoke this.\nI would suggest a stackoverflow question. You can even reduce the testcase w/o angular-translate: Just apply any (longer) text with a timeout.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. @artuska Interesting idea, this would be optional functions for the service and have to be invoked in right places. Contributions are welcome.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. @denjaland  Please prepare a working demo of this issue.. i.e. in plnkr. Which version of Safari is affected?\n. Demo is here, I don't see an issue. http://plnkr.co/edit/ueNaUBOXje7Qx60IMBMJ?p=preview\nClosed due inactivity.\n. Already like @tspaeth  said: We are only serving translations. Multiple ids can be translated, but that's it. We try it Keep It Simple and Stupid.\n. Well, it works for me?\nThe title has in all 5 cases the value Hello.\nProbably your issue is the \"missing\" scope and the non existing number? That's right, because the translate directive must be have its own scope. Said this, developers are generally being recommended to use dot notation and the controllerAs syntax. In your case, controller=\"MainController as mainCtrl\" and the binding ng-bind=\"mainCtrl.number\". Our directive is only one of many which will make issues like that one.\n. Try out using the latest canary. I think we patched this days ago \n. @artuska Have you tried out the latest canary? Is this version better?\n. @fcorneli angular-translate is not proposed to working in such manner. We don't think effective translations should be part of the layout (html). Said this, we will not add such a feature.\n. To be clear: You can add a custom loader or something like this. I don't think we add this into the core, but you are welcome to publish such an addon our your own (extension for translate).\n. @lcarva I don't get the issue, please help me a bit. Do you have security concerns?\n. Ah, okay. Well, that's actually a feature by AJS, I guess. The object will be passed using the interpolation service by AJS. A function is just a \"provider\" for an expression.\nSo, thinking in AJS v1 world, that is actually expected (that's how AJS is working). However, I'm getting your thoughts and concerns. Perhaps it would be good to introduce a ignoreInterpolationParams(true)? \n. Well, eventually I would always recommend using values. Providing a function is not ideal, too.\n. I understand you issue, but we have documented we are using Angular's interpolation service [1]. And that one is documented also [2].\n. Said this, we also can add a note in the documentation/guide. Improvements are always welcome. :)\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Discussion => #1361\n. @pdore-netfore  Thank you for contribution.\n@angular-translate/core  It sounds good, but I'm wondering..\n- no test is failing? looks like a lack of coverage.. :(\n- is there any reason why we should NOT accept this change?\n. Ah, just realized the thing again. $missingTranslationHandlerFactory is an alternate way of resolving the translation. resolve is correct, reject not. You don't have to add such a handler (via $translateProvider.useMissingTranslationHandler()).\n@pdore-netfore  What is your actual indent?\n. We will not merge this.\nAs I said already: missingTranslationHandlerFactory is an alternative way of providing translation texts. The result of this is a valid translation which means the result is resolving one. Otherwise the other concepts like fallback languages will not work as expected.\n\n(the same way as it does when using the default handler)\n\nThe default handler rejects in the situation of a missing translation. The main purpose of the missingTranslationHandlerFactory is to fix this.\nPerhaps we need something else, but the existing behavior works as expected under the context of the other features.\n. Next | translate is a filter, what should ng-bind-html make this better?\n. Ehm.. @elmalto Thank you, but.. please be a little bit more specific.\n- Which version of angular-translate you are using?\n- Which version of angular you are using?\n- What is the link to lodash? We have no dependency for this.\nWell, as the error is thrown in AJS internally after invoking $interpolate(string)(interpolationParams);, I'm assuming there is some issue with the params in AJS internally. Either an issue by lodash or AJS. angular-translate is only providing an object.\nA working demo of this issue would be nice. Perhaps also for the tems of the other projects.\n. Thank you for the note.\n. I don't get it. Please elaborate this a little bit.\n. I think you are just at the beginning of AJS. That's okay, but we don't have the resources providing that support (here).\nGuessing your out of angular is just a global variable in this specific context. Well, you can make this, also it is definitely not the recommended way (thinking of app scaling).\n\nHowever, since these provider or factory can not be injected into angular config, I couldn't make it.\n\nI don't get it. In a module.config you can inject providers (actually you can only inject them). You can even provide (earlier of course) a module's constant and use this as a static translation (just as in the example). But also not recommended.\nThinking of a good style: Either stick with translateProvider.translations(lang, texts) or a specific loader.\n. Second that: Such custom logic can be self made with a custom filter and using the $translate.instant service.\n. Hmm, you are asking for a recipe..\nHere we go.\n1. You must select a preferred language initially at all (i.e. en / English). (Or see annotation)\n2. Unless a specific language is selected by route params, you have to determine/assume the language by the user's client (i.e. navigator.language(s)). The result will be used to change the language using $translate.use(). Also the route must be changed. (Note: Perhaps this will call Step 3 automatically?)\n3. If a specific language is selected by route params, you will change the language $translate.use().\nSteps 2 and 3 are exclusive guarded by the condition (in your case either example.com/ or example.com/en/).\nRequirement of step 1: You can skip this step, if you either determine the language on the server (but you will not have access to client's navigator.language) or you manually bootstrap the AngularJS application which will result into a deferred processing (probably with a splash screen requirement).\n. @tspaeth  Can you handle this one?\n. #1433  is landed in canary. @envision  Thank you for verifying.\nAvailable in the next 2.11\n. @zhenyong I don't see a problem, it is working in your demo. Perhaps I don't get it right...\n1. Please make some effort and make an issue with more details. It is work for you, but it's also additional work for us to figure out what your problem is actually.\n2. Thank you for providing at least a working demo, but: This is using an outdated version of angular-translate. Is this intended? Why not using a current one (2.8.1)?\n3. You are saying, the cloak is not working. Well, you have defined with the key TRANSLATION_ID which is a valid key (=> no persistent cloak). If I change the cloak for the invalid key TRANSLATION_ID_UNDEF, the class will stay.\n4. Just like with ng-cloak, you will have to apply an actual css rule for the translate-cloak class hiding the stuff.\n. Linking #1384\n. First: Don't use filters in services. Use the appropriate service calls, in case of synchronous translation this would be $translate.instant(). However, just as already mentioned: The instant() method (and the filter is using this) cannot guarantee the translation are already loaded and available.\nSecond: In your case, there is no need for using the synchronous way. \nBetter way:\njs\n  this.switchLanguage = function() {\n    vm.currentLanguage = vm.currentLanguage === \"de\" ? \"en\" : \"de\";\n    $translate.use(vm.currentLanguage)\n      .then(function () {\n        // NOW the language is available\n        vm.message = $translate.instant(\"MESSAGE\");\n      });\n  }\nIn this situation you can use $translate.instant('MESSAGE') over $translate('MESSAGE') because the correct translation is well known in this specific context situation.\n. Thanks, landed as e641fe4\n. We have a change in the pipeline (currently on canary only), which will touch this issue slightly. But in the end: If you use <elem translate=\"CLICK\">, then the translation of CLICK will be used as innerHTML of the element elem.  That's actually one core feature of the directive.\n. @iJungleboy  Well, we can provide something like $translate.getCurrentTranslations() only as the translate service does not know  which translation could be possible. Said this, if you call getCurrentTranslations() before the loader has (successfully) completed, you would even get an empty list. If you use something like a partial loader, you will get incomplete list. If you use a mixed setup with fallbacks, this actual \"list of current translations\" is not that easy as it looks in the first view.\nI'll mark this as a feature request with call for contribution. A nice idea, but definitely with some work to do.\n. Landed.\n. You are using angular-translate v1.1. Not the latest one... ;)\n. @alexnoox Sorry, missed pushing the tags. :(\n. I don't get the problem.\nGiven the sample package.json\njson\n{\n  \"name\": \"q\",\n  \"version\": \"1.0.0\",\n  \"devDependencies\": {\n    \"angular\": \"1.5.0-beta.0\",\n    \"angular-translate\": \"^2.9.0\"\n  }\n}\nI'm getting this dependency stack (using npm@3.3, but looks similar w/ npm@2.14)\n\u251c\u2500\u2500 angular@1.5.0-beta.0\n\u2514\u2500\u252c angular-translate@2.9.0\n  \u2514\u2500\u2500 angular@1.5.0\nYes, there is an additional dedicated angular inside of angular-translate. However, since we don't use npm internally (except for tooling at the developing stage), this is an acceptable tradeoff.\nDid I missed something else?\nAdditionally, 1.5 has been released yesterday. And the 1.5 release is already in the range.\n. Resolved in latest 2.9.0 (fixup 2.9.2)\n. Perhaps it is better to use $q.resolve/$q.reject automatically checking for promise values.\n. @vtrifonov  Thank you for making the pull request and the support for promise based caches. Please follow our contribution guidelines. Therefore we cannot accept the PR.\nHowever, we would welcome a re-pull!\n. @cstefanache  Yes, that sounds to be a great optimization.\n. https://www.npmjs.com/package/angular-translate-loader-url is available w 2.9.0. Do you have a local cache?\n. Sorry for the delay.\nI don't think this place is the right one for your question. We mostly discuss the technical aspects of angular-translate which is made for translating strings (as part of a template, service or more generally a component). The module is not made for controlling template content (aka replacing).\nHowever, you can use the $translateProvider as part of the asynchronous resolve within route configurations. But that's more an aspect for your routing configuration.\n. @PaulAnnekov  Thank you for reporting and the demo. I think I've got it w/ 40ad523.\n. This should be fixed in 2.10 (actually effectively only a 2.9.3). Please verify, thank you!\n. @AVE-cesar you idea is great, but I  don't think angular-translate is the right tool for this. One of the key concepts of angular-translate is loading/providing sets of translation texts -- and not a translation resolution by string. Perhaps this idea could be realized with a new approach (like in \"angular translate v3\" concepts), but at the moment not.\n. @cstefanache  Thank you for this great addition, picked as 961fc92\n. Landed in d0469ac\n. In next release 2.11\n. @elpeq Please provide always a working demo with your issue.\nI've made a demo, but cannot see any problem with this: http://plnkr.co/edit/iiBTCvK3t2qwUeTZiamd?p=preview\n. Alright: the language will be not loaded automatically.\n. Fixed with 14bc956\n. We don't reopen.. the workflow is always a new issue. => #1471\n. Yeah, this sounds valid.\nWe have to revisit https://github.com/angular-translate/angular-translate/blob/c5c20ac7e06d8569c79019b340102ce30fad8572/src/service/translate.js#L183-L185\n. > Therefore if your browser is de-DE and this is the preferred due to this - which of the languages shall be chosen as the active one by the module?\nThe fallback one.\nPerhaps we should log a warning if the combo preferredLanguage + available + fallback will result into nothing..\n. Fixed with bde935e -- with test case.\n. Hello <b>world!</b> is not a string in the DOM anymore. In order to get a string, we have to transform the result back, i.e. with innerHTML.\nSaid that, this will not ensure the HTML still looks like the same. Another order of attributes, (empty) attribute values, dynamic attributes, or even browsers' graceful autofixes can change the result.\nSo it does not make much sense to make more effort allowing this. We highly recommend not to use HTML in the key itself.\n. @PaulAnnekov I will explain you the real life as a library author. Adding this feature will get us a lot of issues people complaining that their \"translation id\" (sic, it should be really an id) are not matching. Because a space is different, because another fancy plugin adds a class or lang attribute, because the browser has changed the order of class attribute values, because it conflicts with another directive value interpolation, ...\nWe have already some features which are not \"bullet proofed\" to understand for some people (sigh..). So we will add such things only if  we can ensure it will work always.\n\nNobody uses some complex html inside translations. \n\nWell, you do not see the big picture. You are covering you business case only. Don't make the mistake thinking nobody would ever make it. ;) I've seen here a lot ..\nDon't get me wrong: We welcome every PR. In this case, we have to add some corner cases (like mentioned above) in the tests. Even negative ones.\n. Currently, the resolvers are not extensible. This is not fixed, but simply not implemented. \nHowver, $translateProvider.registerAvailableLanguageKeys(languageKeys, aliases) will do this.\n. There is no way re-registering the language keys. But I'm not sure what the problem is.. although there would be a set of n language keys set, the actual translations will be loaded only when requested.\nHowever, as you already have a custom loader, you can solve this there. Your custom loader will check a specific state (i.e. via your prefs service?): either it uses a local translations strategy or it uses a standard remote file loader. And as you already have pointed out: The reset will be invoked with a .refresh().\n. What \"error in an indexOf method\"? Please provide a working demo demonstrating your issue.\nregisterAvailableLanguageKeys is not a required config setting.\n. Good catch. I wonder why bower does not resolve 1.5 to 1.5.0. Sigh..\nUntil we fix this, use a resolution.\n```\n$ bower install angular-translate\nbower angular-translate#~2.9.0 install angular-translate#2.9.0\nbower angular#>=1.2.26 <=1.5   install angular#1.4.9\nangular-translate#2.9.0 bower_components/angular-translate\n\u2514\u2500\u2500 angular#1.4.9\nangular#1.4.9 bower_components/angular\n$ bower install angular#1.5\nUnable to find a suitable version for angular, please choose one:\n    1) angular#>=1.2.26 <=1.5 which resolved to 1.4.9 and is required by angular-translate#2.9.0\n    2) angular#1.5 which resolved to 1.5.0\nPrefix the choice with ! to persist it to bower.json\n? Answer !2\nbower angular               resolution Saved angular#1.5 as resolution\nbower angular#1.5              install angular#1.5.0\nangular#1.5.0 bower_components/angular\n$ cat bower.json\n{\n  \"resolutions\": {\n    \"angular\": \"1.5\"\n  }\n}\n``\n. Applied a patch2.9.0.1` for the package angular-translate. Beware of caching issues.\n```\n$ bower install angular-translate#2.9.0.1\nangular-translate#2.9.0.1 bower_components/angular-translate\n\u2514\u2500\u2500 angular#1.5.0\nangular#1.5.0 bower_components/angular\n```\n. It is actually not a release in this repo. It effects the bower repo only, this one here is not published to bower.\n. Eh.. good point. That's explaining why 1.5 has been used.\nEhm.. Angular (1.x) does not follow semver; and bower does not follow all details, too. Or why should <= 1.5 not work?\n. Yes, <1.6 is fine. Hold on.\n. Should be solved, see #1394\n. If you shoot yourself in the foot, it will probably hurt. :)\nAnyway: A call stack error is not good. I've added some lines holding the state (the stack), and print out a proper message: See here in action: http://jsbin.com/vogatohote/1/edit?html,js,output\n. The error has been resolved in 2.9.2 already, but we have an open issue regarding the reaction.\n. No. It works. An update for the version range will come.\n. It is working. Perhaps you have a wrong assumption about \"sanitization\"? It will not simply escape the string. Instead of this it will allow html but without the bad things.\nSaid this, your comment in the code \"// Enable escaping of HTML\" is actually wrong.\n\nhttps://docs.angularjs.org/api/ngSanitize/service/$sanitize\nSanitizes an html string by stripping all potentially dangerous tokens.\n\nA bold tag is not dangerous, but a script or link tag.\n. > so why is the translate filter escaping ?\nBecause that's how AngularJS is treating filters' output. It is encoded always.\n. Please be a more specific about the actual error message. I just have to guess the problem. :(\nThe corresponding lines in the service are starting here. Clearly shown, we declare $injector explicitly by name. If this is not working, there would be much more serious issues.\nEventually $injector is not the problem, but the result of $injector.get(...). In this case the provided service is not valid or wellknown -- in your case TranslationLoaderFactory.\nIf you use $translateProvider.useLoader('TranslationLoaderFactory');, you will have to declare such a service as well. Somewhere in your codebase something like module.factory(TranslationLoaderFactory) must exist.\n. Ah, I have overseen the line angular.module('***', []).factory(***.name, ***.fn);.\nProbably you only missed to include the module *** in your module configuring angular-translate?\n. I think you should stick with that. You should consider a fallback (if the path does not include a language).\n. Well, I'm not sure it is a good idea allowing \"recursive object references\". Putting this into a AJS scope will result into similar issues, too (due AJS' expression watchers). A well known object sample is a HTML element object which references itself in the children.parent references.\nSaid that, I have the following addtions:\n1. Make the undefined result a opt-in feature (i.e. $translateProvider.dontThrowExceptionOnSelfReferencingInterpolationParams(true) .. but shorter! :)).\n2. Instead of resulting into anundefined, put at least an optional logging (i.e.$log.warn(...)`).\n. @tspaeth wdyt?\n. Close this.\nThe thrown error is not acceptable and must be handled. We only catching the already existing error avoiding further escalation which results probably into undistinguishable error stack traces in a complete app.. I cannot confirm this, I've made a working demo and don't see an issue: http://plnkr.co/edit/C7guipxtT6AXzJhVHEV1?p=preview\n. Closed due inactivity.\n. Right. Currently we cannot resolve this without a scope.\nHighly recommended: Use always expressions with dots. The controllerAs approach is a very good way! The other way is using the filter.\n. Add an explicit test for this scenario: 2c15d26\n. Please have a look at the current canary, as well as #1413 including the corresponding PR. I've added the tests above covering your use case.\nPlease report if this does not help.\nThe fix will be available in the next release (2.11)\n. The messageformat does not like invalid interpolation params, but the default/regular interpolation service does not care.\nThere is currently no well-known way of ignoring this specific situation (which you have already correctly identified).\nA ongoing improvement is perhaps switching to more recent version of messageformat (#1345) or angular-message-format (#1227).\n. > But using the sanitize or escape methods get rid of this.\nNo, that's not true. :) You have simply ignored the error message in the console stating and complaining about the missing sanitize plugin.\nIn fixed manner, it is working for me:\nhttps://plnkr.co/edit/SALPxc5Vj0qlxoYo6BmE?p=preview\nOkay with that?\n. Mainly, this is a request for adding sanitization mode by directive. That means by service calls (async + sync).\nI have put this at the \"Contribution Welcome\" list. \n. The url will be build with three parts: prefix, languageId and suffix. There is absolutely no need for an additional prefix. @netzaffin If you want to prepend the host, you have to include this in the prefix. Simple as that.\nRegarding the security pov: Obviously, the browser will not allow such requests in situation of a web context (serving by http/https) enforced by the Same Origin Policy. Applying additional $http headers (and serving Allow-* headers on the CDN site) or switching to another protocol (i.g. JSONP) can fix this.\n. No, it works actually. ;)\nWell, that does not make sense. Either we escape or sanitize the specific arguments or inputs.. well, or we don't. We cannot say strings are bad, but \"objects not looking like a string\" not.\nI'm not sure how we can solve this without generating a security issue (beware of toString). Perhaps, we can introduce a whitelist, but this will be a neverending story. In your case it is not a date object, but a Moment-Wrapper.\n. @tspaeth wdyt?\n. @tonyfinn You can change the complete sanitization process adding a custom one ($translateSanitization.addStrategy()). Doing that you are able to change this, but you are also responsible for security on your own.\n. Did you have already read our documentation and guide at https://angular-translate.github.io/ ?\nYou can either use a custom error handler or use the default extension of the translate directive.\nI guess that is what you are looking for.\n. http://plnkr.co/edit/tHWNfwDv0nTqhVWc08nx?p=preview\nAlright, no, that is not possible. If you define a translation key, this will override the element's content (which will be used as an element id unless defined).\nThis is not a bug, perhaps a missing feature. If you want, you can make a pull request. :)\n. You have to initialize your object forminput at the beginning: either with ng-init or simply in the controller.\n. Perhaps introduced in 40ad523. Is $$state.status an internal $q api for current resolution state?\n. Things so far to do: \n- [ ] Test case in browser\n- [ ] check for test case coverage in the unit tests\n- [ ] proper solution (if $$state.status is public api, it's fine. otherwise we have to look).\nAny contributions are welcome ;) I'll look into it, but not before end of the week.\n. Note: If this is introduced by 40ad523, it would be okay in 2.9.0 still. It's a 2.9.2 fix.\n. Published 2.10.0 few minutes ago, including the PR by @tspaeth .\n. 2.7.2 is not the latest release, this is 2.9.2 as of today.\nWe don't have added the library to NuGet which means we have neither the control to manage or upload packages nor we have the ability to do. \nAt last but not least: Contributions for an mostly automatic process uploading releases to Nuget are welcome.\nPersonally, I would manage javascript dependencies only with NPM, Bower or JSPM.\nAlso https://github.com/angular-translate/angular-translate/search?q=nuget&type=Issues\n. > Not in plunker but in a normal app it is executed \nAgain, please provide a working demo demonstrating the issue. How should we verify this will work?\n. Sorry for the delay, I had not complete my inspections on this issue days ago.\nAt the moment I'm wondering what the implication is exactly. The demo is demonstrating nothing is executed actually, but I see the general problem. However, this means there are two requirements:\n1. the key is malicious (in case of the key is computed with potential malicious user input)\n2. the key is the inner content\nAnyway: We need a working demo exploiting things. Otherwise we can't say we would fix this.\n. Okay, now we have a working demo.\nhttp://plnkr.co/edit/KJVdvDNI8P2LEOK4uFAi?p=preview\n. Please provide a complete running example. Thanks.\n. Ok, back to the actual issue.\n1. Should we invest time in effort making the key XSS safe? It is definitely not recommended to use such keys, neither explicitly nor implicitly like based directly on user input. However, it is possible at the moment.\n2. What is proper solution? This is not a solution, because HTML injection is a feature.\nSanitize/escape the requesting key if using as a default? Instead of applying translationId => escape(translationId) here?\n. Looks good for me.\n. Picked as 7e71a5a w modification\n. @gruberb  We do have a working scenario, i.e. https://github.com/angular-translate/angular-translate/blob/5dfa8ca49137425d0614c5693b2fe67fa72c125f/test/unit/service/loader-static-files.spec.js#L7-L63\nAn advice: You don't have to test with XHR files. You can mock you tests specifying a custom url loader which is much more easier, i.e. this custom loader (in this case for delaying, but you should get it).\n. @tspaeth  Does this duplicate a feature which $http.transformResponse would allow already? https://github.com/angular-translate/angular-translate/commit/895268b734cc192b122692d4c0fa53971e73b4ed\n. The feature is indirect documentation via $http option in our loaders and the transformResponse by Angular itself. Eventually it is simply not so obvious.\n\nthe translation values itself need to be modified, right?\n\nDon't got it. You can change or modify the result in any way you want to do.\n. I have remastered this a little bit, landed as fab03c9\n- merge conflict in canary\n- removal of the activator\n- add option for service name\n. Sorry again. The steps are still not scripted enough.\nDone.\n. Why do not using <span ng-bind=\"'HEADLINE' | translate\"></span>? If you like this, then use it.\nUnfortunately, we cannot make this (without saying we should). The filter is interpreted by AngularJS itself and the filter is virtually only a function being called. The filter does not know anything about the context. ng-binding is only added by AngularJS for debugging purpose (see https://code.angularjs.org/1.5.0/docs/guide/production and search for \"Disabling Debug Data\").\n. Thanks @tspaeth , picked as 3988af0\n. @pdanpdan  I'm not sure what you are talking about? Which modules? What do you mean with \"async loading\"?\n. Allright.\nYes, this is already addressed in the next major release. Meanwhile, the order of the scripts is important. But honestly, that should be no big deal today. Even without a package/bundle manager in use, you still must ensure that polyfills or even angular.js will be loaded at first.\n. Picked as b2cf8a3\n. Right, it was mentioned in the migration guide for 2.0 only.\nHowever, it is included in the API docs (that does not mean I'm against this here).\n. The API is documented both at source level as well as API docs https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate (actually based on the source code docs). . Added additional info in d2d621f (for API). @RodolpheNivelet The error is not thrown by angular-translate. Given the trace, $cookies (by AJS) looks up for $cookieReader (also AJS) which does not exist.\nI would also say you have an incompatible setup of dependencies. Said this, I will close this.\n. > THAT IS A LOT OF CODE TO WRITE\n@clembou590 Really? Why do you are shouting?\nThis project's aim resolves the problem of resolving texts (translations). You give it one key, and it will return a resolved one. This includes features like asynchronous loading (load the translations only on demand) or fallback language resolving (if the actual language cannot provide a translation, but an alternate one could). This all for each provided translation key.\nIn opposite of that, you are trying to get.. well.. all resolved translation by giving nothing.\nSo, in the end: Yes, we don't reduce your code lines. We still don't build any magic.\nFor the convient way, we have introduced in v2.8.0 the additional co-directive translate-namespace (see 45523bb).\nIf you really need to get and put 50 translations by the service into the scope:\n1. I don't recommend this. Why you are not using the filter or the directive? The service is only useful in scenarios of custom build texts or the configuration of non-AJS components.\n2. I'm still not recommend this. You will lost any reference of usage where in your app a specific key ist used.\n3. However, if you still want to make it: Well, you can reduce the code slightly.\njs\napp.controller('Ctrl', function ($scope, $translate) {\n  var ns = 'NAMESPACE.';\n  var keys = ['PARAGRAPH1', 'PARAGRAPH2', 'PARAGRAPH3', 'PARAGRAPH4', 'PARAGRAPH5'];\n  $translate(keys.map(function(key) {return ns+key;})).then(function (translations) {\n    keys.map(function(key) {\n      $scope[ns + key] = translations[ns + key];\n    });\n  });\n});\n. @robertomcampos  @renegadeds  Without a working demo showing your issue we cannot neither see/reprodue nor fix the issue.\nIn general the filter or the service is working, so it must be a specific (config) situation on your site. We have no look at your app (and don't want it).\n\nWhen the application starts, and I navigate to some page, the translate filter works.\nThe problem occurs when I put the direct link in browser. In this case, all of places that i use \"translate filter\", It does not work.\n\nSorry, but I cannot follow this. It's hard (impossible) to guess what you are meaning.\n. @eemeli  Thank you!\n. Thank you again. Picked as cb31608\n. Alright @tspaeth I've picked as 02688f2 (w/ modified text).\n. Short: The filter output is not completely in our control because it is managed by AJS itself.\nAnd right: This is a duplicate of #1101.\n. Why is this an issue for angular-translate? \nWe have a simple XHR setup which will either result into a success (200) or error (4xx, 5xx). So neither is an issue for 502 only (but must be also 404 for example which is presumably better for tests), nor this is a specific library.\n. > Are you really using an Angular 1.3.0 as a baseline?\nActually, that should/must be not relevant in case for us. If this really blows up, it must be something in AJS internally.\nHowever (!), I would recommend a working demo. Until now that is guessing only.\nI'm quite sure that an 502 will not be handled in other way as a 404. Or 403...\n. Okay @danpantry \nI want to add: Given the simplicity of the url loader, there is not much space for such memory consumption, i.e. we don't make any retries. Without knowing details, I personally would assume something internally in AJS (if this is the core issue after all).\n. > 'angular-translate-loader-partial': ['angular'],\n\n'pascalprecht.translate': ['angular','angular-translate-loader-partial'],\n\nActually, the partial loader depends on the core.\n. @paulius005 : Please provide a simple use case / demo of this issue.\n. Closing this. I'm still not getting the issue and no demo is provided giving explainations.\n. Please provide a proper demo. Like @tspaeth already said: Where is the actual issue? angular-translate has nothing to do with your array.. ?\n. The directive will replace the inner content of the specific element; therefore it is expected the icon will be replaced. Think again about this: How should the directive know where the final translation should be present? Before or after the icon?\nEither you wrap the text with a inner span (<span translate=\"HOME\"></span>) or with the usage of a filter (like you already have done).\n. That's a well-known issue by jspm (see here https://github.com/angular-translate/angular-translate/issues/1247#issuecomment-146341841): it simply not resolving the version correctly and does not handle non existing versions gracefully. Not our fault.\nYou can fix this switching the used package manager (within jspm).\n. I think it should be a PR for https://github.com/angular-translate/angular-translate/pull/1445/commits/a63ba642b470378efefb3ad478ad4d605bc4ce31\nAnyway: We don't accept this PR. Please have a look at the contribution guide lines.. \n. You cannot reuse an unique translation id. Given the use case, I would suggest wizard.title and dashboard.title. \n. > That doesn't work for me as the header is a shared component so can only have one key in the directive.\nWell, that's an implementation detail up to you.\nangular-translate is treating translation keys globally and \"parts\" are only sub trees of this complete one. You can hack a way resetting the already loaded translations and change the parts.. but it is still a hack an not intended by design.\n. AFAIK gettext+po is used at compile time using grunt-angular-gettext. Perhaps you can combine this build tool and generate on-the-fly JSON files.. which you can use in angular-translate as well. Another option would be https://github.com/angular-translate/grunt-po2json-angular-translate, actually the same purpose.\nBoth libraries will conflict running in the same angular app namespace (because of conflicting directive/service names). \n. Hm.. well, that is an interesting thing. I've seen the missing event already, but I had not get into it.\nGiven your example, I've added the following module:\ndiff\n+ angular.module('x', [])\n+ .run(function($rootScope){\n+   $rootScope.$on('$translateChangeSuccess', function() {\n+       console.log('Translation completed (before)');\n+   });\n+ });\n+ angular.module('app', ['x', 'pascalprecht.translate'])\n- angular.module('app', ['pascalprecht.translate'])\nIf you run this, you will the line Translation completed (before). Just as you already pointed out: It is fired, but too early for (your) application run block. And neither any other controller/directive.\nWhat can we do?\n1. The service should perform the loading as soon as possible, so we actually do not want to delay it.\n2. You can use $translate.onReady().\n3. Even if we define a new emit on our module's run block (with a new internal event name), it will probably be still too early for the other applications. We should play with it, but I'm in doubt it will solve this.\nFurther ideas anyone? @angular-translate/core \n. That should not change the game for this point.\nAs per definition of both according the official documentation, $emit() will fire for each scope upwards starting  the given one (scope.$parent), and $broadcast() will fire on each child scope downwards starting the given one (~ child in $scope.$children). Due serious performance issues of the latter one, we have chosen $rootScope.$emit().\n. What is about local $translate.ready() + local event listener translateChangeSuccess?\nPerhaps we can create another shortcut handler, however, it would be called for anyone later.\n. Well, there is also $translateReady which is actually firing onReady(). The latter is newer and being an easier way of handling the \"ready\" state.\n. Ready is an one time event, just like jQuery's $(document).onReady(fn). The events can be fired multiple times, depending on their meaning.\nIf you are looking for a simple once-event \"when the translations are ready\", you should use $translate.onReady(fn). If this is not working, it could be a bug.\nNote: onReady is only some months old.\n. Sorry for the delay.. I don't get it right, still.\nPlease again, just as simple as possible: Which event in which situation is missing or not \"right\"? Why is translateChangeSuccess wrong?\n. Please give 2.14 a try.. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Your expectation is not right when using one-time binding.\nIf you want to use one-time-binding, the filter will be evaluated only one time (well, the filter's feature is naming it). Any later loadings cannot be resolved again.\nThat is why one-time-binding + asynchronous loading of translations cannot work by design. You cannot have both.\nHowever, if you can ensure the filter will be called after the translations are already loaded, perhaps you will have a solution. But this requires a custom setup, perhaps with a combination of your router/resolving events.\n. Are you sure this is still valid in 2.11? It includes a fix regarding the available languages and the invalid tries of resolving others...\n. Thank you!\n. I would guess TypeScript when seeing TS2345, also afaik they use the i-prefix pattern for interfaces sometimes. Do you have TypeScript enabled in your Web module within your project in IntelliJ/WebStore/...?\nAs we neither provide nor support (read: do not test) TypeScript (yet), this error is more less invalid for us right now. \nSo there are two options: Either you are using a TS interface of angular-translate, but this would be not by us. Or someone is interpreting the JSDoc and/or code and tries to determine the possible values -- and fails.\n. @hornetnz I don't get your issue: http://plnkr.co/edit/PYyTHKufDumHeTHUt4Ur?p=preview What's wrong with that?\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. Please elaborate your issue a little bit. What do you want to know?\n. It would help a lot if you provide a full example. And I would recommend to use the formatting options of Markdown, especially for code.\n. It does not look like you have registered a loader.\nHonestly, that is the error message! :)\n. > Further, is there a better documentation? I have found a couple of things that were not mentioned in the docs (e.g. $translate.instant()) which I only found while looking through the Github issues.\nHave a look at http://angular-translate.github.io/ containing both the guide as well as a general api doc.\n\nGenerally I am using ngSanitize to filter all my translations, however, for some specific ones I would like to print them with the HTML.\n\nI'm not sure what you are looking for. You can define your own sanitization strategry: http://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translateSanitizationProvider\n. > What did the trick was a sanitize filter + ng-bind-html, which does work but does not feel like it was intended to be used like that. I am relatively new to AngularJS, learning it at work (I know a decent amount of JS though), and this just doesn't feel right.\nWhat do you mean? This one?\njs\n$translateProvider.useSanitizeValueStrategy('sanitize');\n+\nhtml\n<span ng-bind-html=\"{{'XYZ' | translate}}\"></span>\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n@iamrutvik : Your code is the first code we have seen. No example, no solutions. If you still have an issue, feel free to open a new issue and follow the template's guide.\n. I've added an answer to SOF.\nIn AngularJS applications, the filter's output will be escaped always. This is done automatically and is not under control of the filter function itself. In the opposite, the directive has the complete control about which and how information will be appended/ removed/ and so on.\n// ensure angular-sanitize.js is present\n$translateProvider.useSanitizeValueStrategy('sanitize');\nSanitization is not escaping! Instead of escaping everything, it checks for valid (and secure) string (html, javascript, css). If it is valid, it will use the actual input. Otherwise it will be rejected.\nI've made an overview matrix of directive, filter and escape/sanitization settings in angular-translate. The case is an ongoing issue with UTF-8 characters, but I think you will get it: http://plnkr.co/edit/8BHONOjhsxBxxO9oVYOK?p=preview\n. Sidenote: we have already fixed the typo in the docs resulting into an error.\n. @Rafvb Can you provide a full working demo or (better) add an unit test covering our specific use case?\nThis issue here is still open, because I'm also in doubt this is breaking. Yes, no tests are broken but the promise waiter should wait for the preferred language also.\nI'll not close this here, but your additional input would speed up the process. Thank you very much!\n. OK - I understand this as being not reproducible any more.\n. Picked as 6662bd1 . THanks\n. Thanks. We should revisit the uglify options. Probably introduced with 66877f0654c3959c24ebb6964dffe35510e09a36\n. I just picked a workaround by @marclr  -- Thank you. Will be released soon in 2.11.1.\n. Personally, I would not recommend mixing languages only because some words could be the same.\nOK is not the same in all languages. Most would accept it, but it would not be natural. :)\nAnd the more technical answer : No, that is not possible. And we are not planing to add such a feature. If you really need this, you have to maintain the language sets on your own and deliver final translation sets.\n. Given the described situation, your translation files are either generated or delivered with an invalid content character set. For example, it contains UTF-8, but is delivered an non UTF 8 one (or vice versa). Also it is possible, that there are already stored in the wrong content type.\n. You should use expressions in AJS always with a \"dot\".\nSimple answer: You cannot rely the current scope.\nHere an improved version of you example using:\n- dot syntax\n- replacing $scope with the more elegant this\nhttp://plnkr.co/edit/pVatcu8ekqrElWJ3Aa4M?p=preview\n. What do you mean?\nhtml\n<span translate=\"key\" translate-value-my-special-thing=\"123\"></span>\nwhere you key would be my-special-thing? If so: No, that is not possible. The shortcut depends on the way AJS reads and transforms the attribute names. You have to use translate-values for more complex or invalid values.\n. No, that is the way AngularJS is handling element attributes. Just like directive names or directive scope bindings. We have not reinvented the wheel for this feature.\nFeel free to send a helpful addition into the guide, but it is not a surprise.\n. @mlev Thanks for reporting.\n. PR picked as 233f30c\n. We dont know anything about new issues. Please file a new one and attach a proper example. . What do you mean? This is an AngularJS plugin, and this is a JS framework. We have nothing to do with .NET. If you have an .NET based web app.. why not.\n. I have no idea what you want. Again: What is the link to us? What is a resxfile? Why does it matters for us?\n. I think I can say: no.\nHowever, as the (async) loader is only a function, it is up to you implementing a loader which can handle reading such a file and returning corresponding json.\n. @almeidap Thanks for reporting. Your demo is working using 2.10 -- because it is a feature already introduced in 2.9. Nevertheless, the regression is bad :(\n. @tspaeth  bde935e IMHO cannot be relevant because it is only adding one conditional break which is not even triggered.\n. I've applied a fix, see this demo with patched angular-translate.js: http://plnkr.co/edit/ETMZPINBJtLhjsA6HiX9?p=preview\nThe actual error (Cannot read property 'key' of undefined) is fixed. I hope that this it is.\n. 2.11.1 released, please retest and report. Thank you.\n. Closing this. No complaints any more..\n. Thank you, picked as 5dc6e78\n. Superseeded by 7ada983, partly picked as 0e7c808\nThank you!\n. Well, the security concern is so important, we should enforce it actually. But on the other side we do not want to break things (think semver), so this is the only way let the people (developers) to care of and deal with it.\nAt the moment we have no \"production mode\"; we only have a minified version which is.. well.. minified source.\nI understand your intent opening this issue, but the security aspect is definitely no optional bullet point while configuring angular-translate.\n. > I am 100% with you on this. I understand security is super important. But in our use case all the translated strings are static and live in the codebase, and we trust them.\nPerhaps the message and the document behind the link is not clear enough: it is full okay to trust the messages -- but you have to opt-in the old default mode (null) manually. Sounds a bit weird, but this is the only way to ensure semver with the little noisy message.\n\nIs there anyway this could be added to new/future feature requests?\n\nIn general: yes. Personally, I have the feeling people will not read the documentation, will only include the minified version and will not care of it. Again: I fully understand your aspect of noisy warnings. But I do not like to reduce effective security (not everyone knows \"RTFM\" :))  just because of one warning.\n. @stnor yeah, this would be a nice contribution \ud83d\ude09 \n. Why angular-flashmessage? :)\nAnd yes, messageFormatConfigurer has been added, meanwhile. We can close this as fixed. #1619. Ah, okay. Well, note please #1661. Your demo is using 2.10, but with 2.11 it is working?\n. The bug exists at least in 2.11, 2.10 and 2.9.\nSo far, I can see both apply and remove calls are being performend correctly: https://github.com/angular-translate/angular-translate/blob/c76fee36ac6abe672f09b7fa95856a9e40f63d17/src/directive/translate-cloak.js#L31-L36\nHowever, it looks like ngIf is replacing the actual dom element somehow. ngIf is sometimes tricky, so it will be perhaps better to wrap it.  But what is about the modal/dropdown use case?\n. @marclr : Thank you, picked as 32cdedb\n. @sandeep-instinct Well, please read your post again. It looks like you have mixed up something with title and the actual text.\nSo, I have a little problem identifying our actual problem. Yes, you can use translations with placeholders.\n. At the moment, there is no final plan. This also depends on required time/effort for this.\nSpeaking of new releases, we had already plans for the next major version \"angular-translate 3\". See #995 \nThe API of Angular2 was not stable enough (even in beta). Now being in RC state, the API is hopefully more stable. \nPersonally, I would like to support both AngularJS 1.x (i.e. >=1.5) and Angular 2.\n. Did you have tried uniformLanguageTag() already?\n. @austinjalexander Before going deeper into this PR: Are you aware of $translate.uniformLanguageTag() ?\n. Closed due inactivity.\nIn general, the feature \"uniform language tag\" is proposed to have an internally general outline of languages. Because of different environments, language code styles/standards.\nIf that really does not solve the problem, we are welcome any (new) contribution. But until this happens, this is outdated here.\n. Sure: Have a look at our guide: https://angular-translate.github.io/docs/#/guide/18_events\n. If you want to intercept the directive, you will have two options:\n- implement your own directive\n- decorate the existing directive with your logic\n\nusing the translate filter {{ 'MyKey' | translate | uppercase }} does not work neither.\n\nWell, sure, this is working. Please prepare and show a demo why and when this should not work as expected.\n. Thank you, picked as 248daa8\n. You are holding it the wrong way. :)\nSeriously, this is the correct way of using both filters and directives. I suggest visiting our guide at https://angular-translate.github.io/docs/#/guide/05_using-translate-directive.\nIn short: Either use the directive or the filter.. but not mixing it. Speaking of your case (with variables), the section about params is also interesting: https://angular-translate.github.io/docs/#/guide/06_variable-replacement\n. Nope. You are using the directive not as is should be used. If the attribute translate is empty, the innerHTML will be used. \n. Well, the latest demo has some issues:\n- you should correct and full working imports of the scripts (there are blocked?)\n- you should use minified resources -- there are only for production systems\n- I'm seeing at least one Module 'ngCookies' is not available! -- which means a required module is missing\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. Solution in in SOF.\n. The solution is in the linked StackOverflow posting.. @sussh thank you for reporting. Already fixed (0e7c808 ) and will be in the next released.\n. We have no answer for this -- technically.\nHowever, you are able to make you own structure of (JSON) file and build a small loader on top of this. \nThen you have everything under you own control.\nhttps://angular-translate.github.io/docs/#/guide/13_custom-loaders\n. Hi @danielbair, please elaborate your question a little bit more.\n. You will have to use the $translate service. Additionally, there will be found $translate.instant.\nIf something \"breaks\", you will have to show us the break. We cannot guess what you are doing at your place.\n. I'm not sure.. if you are using ui-router, you should have a look at the resolve() function. It is able to return a promise avoiding un-/invalid- translated content.\n. tldr: Does this fixing open issues?\n. Ok, picked\n. Ehm.. why do you call $translate.use() anyway? The location.reload() should be sufficient, shouldn't it?\n. I don't understand the problem. If you use $translate.use(), it will switch the language and store this information.\nPerhaps try to minimize your demo code and provide a running example.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. The fix for the docs has been added (canary branch, unreleased).\n\nDoesn't the suggested workaround have unintended consequences?\n\nNo. The resolver is working in the intended way. \nBut I know what you are meaning: Well, we can try to add an alternative way of finding the language -- PR welcome ;) But this is slightly more complex than the existing way.\n. Corresponding pr is closed, docs are fixed.\n. Thank you, great addition. \ud83c\udf89 \nLanded as 2015f79\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Well, even if a language would be \"known\", it can be switched again because translations are not available for a specific requested language. Therefor you will have to handle the edge cases also.\n\nI am currently using .run, but does not work well, the event is executed twice or moment not change:\n\nRight. That's exactly what I'm talking about. You will not get rid of this case completely.\nAt the moment this is not possible, and it would not a full qualified information before all languages have been tried to load.\nIf you have a situation in which you have this all under control, I would suggest to introduce a \"global\" default language key (eventually injected/provided by a module).\n- You load all languages (incl. moment.js) for your specific default and after translate has fired the event, you will load the final language. In case of final is default, you will probably skip the stop.\n. If the built-in directive or filter do not match your need (and this could be a special case), you will have to to at least one level of service usage on your own.\nSo either you use something like this here\n1. watch for changing of sorting\n2. use $translate() (promise, async) or $translate.instant() (direct value, sync)\n3. store the result into another scope var, i.e. sortingDisplay\n4. use this as a value\nOr you build the complete string on your own.\n. picked\n. All apis are used for a given string (key) to return a string (value). There are additional features like variable replacement, fallback and alternative strings or even local or global defined default strings. That all is not easy (I would say: not without additional hassle) to make consistent with such a feature.\nWe have discussed this feature already some times..  https://github.com/angular-translate/angular-translate/search?q=array&state=closed&type=Issues&utf8=%E2%9C%93\n. Corresponding pr closed already.\n. picked\n. It looks like the filter is missing a \"is string\" condition.\n. @4kochi  I have add some tests.. but they are not failing. What I'm missing here?\n. https://travis-ci.org/angular-translate/angular-translate/builds/140397869\nYeah, yesterday I have thought it was only temporarily. Looks like there has been changed something.\n. Got it.\n. You are requesting a feature which is not translating, but localizing. Said this, you should have a look at the AngularJS documentation.\ni.e. https://docs.angularjs.org/api/ng/filter/date\n. Well, as I already said: This is the job for localization. Even the names are localized: https://github.com/angular/bower-angular-i18n/blob/c0a4902ba9f3d783a8f0f5ad9d2209f9a315cc74/angular-locale_de-de.js#L28-L36\n. Picked as 5f9c834\n. Well.\nReading it literally, you are perhaps right: It will not return (implicitly read) the requested translation id on the success callback.\nBut: That's not promises are working and used to be used. A promise have at least two callbacks: A success and a failure. If the requested key has been resolved successfully, it will call the success method (with the translated value). If not, it will call the failure method (with the requested key). It does not make sense reporting a failure/miss as a success.\nUsing a non asynchronous method of request, you have only two options for reporting an error -- either raise an exception (the caller has to try/catch) or change the result. But we are asynchronous in this specific API, so we should use the possibilities correctly.\nAlthough I don't see a problem with the documentation (that's how promises are working), I'm open for an optimized way of describing it correctly.\nFeel free making a PR, we are always happy and welcome it! :)\n. @RichardBradley Yes, that is right. It should highlight the error callback. Thank you!\nIt is up to the developer whether the error callback is required or not. Calling $translate.instant() or the filter, you are never faced with this question, because that kind of information will be never available.\n. Well, I think the (new) promise document by mdn is only slightly older than our release of 2.0 :) Said this, I want to say this is a style which we have introduced some time ago (finally released early 2014).\nThere are already some things perhaps everyone would change in a new system (see #995), but the api (v2) is fixed.\nSo, basically: Yes. Would be better. But not in v2 any more.\n. We don't have \"real\" module support yet.\nThis means you can/must use\n``` js\nimport 'angular-translate';\nimport 'angular-translate-loader-static-files'; // and so on\nangular.module('myModule', ['pascalprecht.translate']\n```\nReal modules are on the 3.0 roadmap. But that thing is going slow..\n. Apart of the demo is not showing the issue (I can see \u00dcberschrift correctly), your issue could be a general issue with utf8+sanitize. See #1101 for more details.\n. I still not get it. What's wrong? Can you please make a demo with the required lines only?\n. Sorry for the delay, but you have not still make your point.\nPlease use this plnkr base.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hi @cudasteve \nThank you for sharing your idea. I like it, this sounds being a good addition. \nPlease have a look at our contribution guide for FAQ. \nThank you, awaiting your PR. \n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Internally, we use the interpolation service which actually relies on simple JavaScript. An object property num is not the same as NUM.\n``` js\nlet obj = {};\nobj.num = 1;\nobj.NUM = 2;\nassert(obj.num === 1);\nassert(obj.NUM === 2);\n```\ntl;dr: I'm answering your question with: No, it should not.\n. You should be able to use any scope value as an explicit translate value set. However, this will not work if any scope is isolated of course.\nSaid this, this will not work in filters as filters are not having access to scope by default since some AJS  versions (I think it was 1.3).\n. My personal advice is not doing such \"optimizations\". It will help you some seconds of writing, but will require more time in the future for you and others to understand what is happening.\nAs I said already: You can use a reference to the scope, but this is still an explicit way.\nI don't think anything more \"global\" (as you preferred) will come, because there another limitation: \nIf any global key has changed (and how should that be triggered?), every translation has to be refreshed. There is no information which translation uses which (global) variables or expressions with (global) variables.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. \ud83d\udc4d  Yeah, I think that information you had to want to read/see at least. ?\nPerhaps with an addition marker that error is the requested translationId (key).\n. > I have made the same changes to the code in all the translated docs and updated this PR.\nIt's all fine!\n\nPlease could you clarify what you mean here? I don't quite follow, sorry.\n\nYou have named the argument error, but as you already pointed out yourself this will be misleading. It's actually not an error, but a translationId. The docs should care about this.\n. Sorry for the delay. Yes, I prefer 3. You are right this is not what it should be -- but that is how it is at the moment. There are several issues in the project which could be fixed -- but that would require a major release because significant API changes. I'm always trying not creating breaking changes except major releases -- that's semver.\n. I'll care of this.\n. picked as c0b0809\n. Please elaborate your problem with more details: The attached demo is running two AJS apps side by side, is this really intended?\n\nThe problem is when I use this module in another module the\n\nWhat does this mean?\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. See also #1467 (dup).\nCamelCase is not possible at attribute level. This is a feature/limitation how AngularJS handles these data.\nWe are always open for additions in the documentation. Suggest a PR :)\n. Side note: ~~AngularJS does caching filter results itself, why should you implement this on your own?~~ Edit: Well, I think that's the rule for stateless filters only. Cache cannot work because the result depends not on translationId only, but also current language, fallback chains and current data (values).\nAlso, this has nothing to do with you original problem with the filter?\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. I think you should use another event; $translateChangeStart is marking the start of the translation change.\ntranslateChangeSuccess or End should be work.\nhttps://angular-translate.github.io/docs/#/guide/18_events\n. Thank for the pull request.\nWhat do you mean with \n\nBy the way, it could be better to contribute to \"MessageFormat\" and allow it to only escape the properties when used in the message format otherwise with the current approach, each translation escapes all the properties even if they are never used.\n\n?\n. Picked as 492d8e5\nI've added data to the mocking functions, as this fails on AJS 1.5\n. See answer https://github.com/angular-translate/bower-angular-translate-interpolation-messageformat/pull/14#issuecomment-233195659\n. Oh.. that's strange. Will have to check this.\nAnyway, looks like either nobody cares about this or all people around are using build tools. :)\n. Will be fixed in next 2.11.1\n. Well, I'm not sure which button you have pressed.. but it was the wrong one :(\nIt looks like you have made changes on a very old snapshot..\n. Will be resolved in next 2.11.1\n. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. This is the expected behavior of the translate directive: it will replace the inner content of the element.\nAt some point, this is really solid technically: We are supporting the syntax <span translate>TEXT</span>. And because angular-attr is not a dedicated directive, this is the result.\nIn your case, you can fix this easily using filters (at the a-element).\nhtml\n<a ng-href=\"{{'ANCHOR_URL' | translate}}\">\n  <img translate translate-attr-src=\"IMAGE_URL\" translate-attr-alt=\"IMAGE_ALT\" />\n</a>\n. See also #1027\n. Thank you, picked as 09ee870\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Picked bb13021\n. Thanks, picked as f37f3ea\n. Sorry for the delay.\nAs we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. ~~@mohanmanis  Please do not spam other issues with your problem. If you do not find help in existing topics, you should consider opening an own issue.~~\nIn your case: Please provide more information, including a demo.\n. @mohanmanis  Sorry. my fault. :(\nSorry, too much mails in the inbox and I got something missed. Please provide a running demo at plnkr.co or jsfiddler. That helps a lot\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. Thank you! Landed as  f6e906d\n. Thanks, looks good (fast read).\n. Merged, thank you for contribution.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. @odedniv Great one! \ud83c\udf89 \nWould you like to add some lines in the docs (in chapter 5). I think the state should be: New preferred way should be without translate, but only available at version 2.12.0 or higher.\n. Now TravisCI is happy with the rebased code as expected.\n. Well, English is okay for now.\n. Thank you again, picked as bcb0f2c\n. You should be aware that null is not secure: https://angular-translate.github.io/docs/#/guide/19_security\n. @Mudin See already mentioned 1101. This is an open issue. Feedback is welcome.\n. See #1101 Close.\n. @tspaeth Ensure you have the latest 1.5.x version in the test scope: npm run clean-test-scopes\n. Ehm.. wrong issue? :)\n. Breakdown: Issue is introduced due angular-mocks 1.5.7 -> 1.5.8\nhttps://fossies.org/diffs/angular/1.5.7_vs_1.5.8/angular-mocks.js-diff.html, second hunk\n. I have applied an explicitly delay covering everything. Strange, but I have also not much opportunity debugging angular-mocks.\n. A storage plugin must provide get and put only. Therefor it is full compliant with any Angular Cache compatible instance.\nSaid this: You can add all possible storage implementations on your own, you don't need our support.\nYou can develop a dedicated plugin (inspired by localStorage), but it can be a local solution also.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\nWe had an related issue (#1459), but that is fixed or not reproducible any more.\n. @mtwar  Thanks. Please have a look at https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\n. Thank you! Will have a look at it. Stay tuned.. see #1558 \n. @projenet  Thank you for starting Portuguese.\nBefore we can go deeper in this: If we will provide a Portuguese translation, we need all chapters to be translated -- not only the first one. :( Otherwise the users will not a full doc/guide.\nAlso a technical detail in Git/GitHub: As we describe in out Contribution Guidelines, you should start off the canary making a branch and then make a pull request to our canary.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Did you have taken a look into our guide, especially the chapter about security? https://angular-translate.github.io/docs/#/guide/19_security\n. I've updated the example here: http://plnkr.co/edit/UBD0vpwWpV7Pafb8pG0z?p=preview\nThe different result have the case in $translateProvider.useSanitizeValueStrategy('escapeParameters'); which escapes the parameters. And a date is treated as an object.\nThis is a bug! Fixed in ab1ecce\n. IMHO, the messageformat related question has been answered at the other issue already.\n. If you have a list of languages, you can translate just using the key as each of them. If you want to translate each key (language) in its language, you should have a look at translate-language: https://angular-translate.github.io/docs/#/api/pascalprecht.translate.directive:translateLanguage\nhtml\n<select ng-init=\"languages=['de', 'en']\">\n  <option ng-repeat=\"lang in languages\" translate-language=\"language\" translate=\"LANG.{{language}}\"></option>\n</select>\n. I don't get it. If you have a truthy (typeof define === 'function' && define.amd) expression, it will use this function define. What is the problem with that?\nThe only missing point here: The library does not require AngularJS, therefor you have to configure the dependency to AngularJS in your own (via shim). \n. Still not get your problem.\nhttps://github.com/angular-translate/bower-angular-translate/blob/2.11.0/angular-translate.js#L7-L19 is not using require anywhere; only define is being used, but conditionally by the expression already mentioned.\nIf there is no AMD context (i.e. RequireJS) available, the define function will not be invoked. If it is invoked, then you have a AMD context.\nIs it possible you have run into this issue? This would mean you have an AMD context, but load the files without it. \n. Mismatched anonymous define() module actually means you have an AMD context. If you don't use it, you should consider not loading it.\n. So you are using actually RequireJs, but not using it to load the files (because you have inject them on your own via <script>, and this all within an AngularJS application which does not support a real module system?\nWell, I got your point. But why you are doing such a stunt? We are using a common UMD header which means you will get this problem with the next library tomorrow again.\nDespite this: We can evaluate adding names into the define configuration. This must work in all published angular-* sub modules correctly. And the impact for existing solutions should be as minimum as possible.\n. Well, I see your issue. But honestly: Even if we fix this here, you will get this issue in the next library which is using such an UMD header. It is not uncommon. Perhaps it is better you scope your Javascript \"mini-apps\" into dedicated context scopes instead of attaching everything into one single page context.\n\nMaybe adding an unwrapped version in the dist is easiest?\n\nMaybe you can make PR adding such files into the build process? Perhaps for angular-translate.js: angular-translate.raw.js.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Thank you, we will have a look at asap.\n. Yeah, ongoing..\n. Picked as 233f30c\nThank you!\n. At this moment we have no Angular 2 support.\nAnd for the records, reasons are: Lack of time, \"agile/dynamic\" Angular2 api design in the past which requires additional work.\nIdeas do exist, but are not being implemented, see aso #995 \n. Really looks like the thing I would do when restarting this. ;)\n@mendeza What are the impressions? . No, will cut some. But no release today.. @jednorog  Please provide a working demo with the crash.\n. @jednorog  Please provide an isolated demo/test case only with your issue.\n. Hello,\nthis is a second reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nOutdated issues will be discarded after a period of time.\nLooking forward to hear from you.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Picked as e3aba1c\nThank you\n. A filter does not know its element context. It's a pure function with some arguments.\nThe namespace feature is defined as and for directives.\n. Hi @idenisovs ,\nAt first: We are actually using $cookieStore in the built-in store implementation. If this is limitation, the limitation also applies to this eventually.\nAnd second: We are using a simple \"store\" interface adapting the $cache interface of AngularJS using only get() and put(). Therefore you easily write your own store handler, even using native JavaScript Cookie operations.\n. Thanks, picked as f6bd4c0\n. Well, without any hint we cannot do nothing. \nAlso: please check using the latest/recent versions of the libraries if possible. \n. I'm closing this right now. As already mentioned in the issue template, we need a demo showing the issue. You are not the only user of translate and until now no one else have reported such issues.\nFeel free to open a new issue again if the issue stays and is related to angular-translate.\n. @hank-hong  You have chosen to escape all the content -- so this is working as intended.\nI would recommend having a look at the other strategies, but also having a look at #1101 \n. Relates to #1101 \n. This is done actually (as we removed all other languages in the guide).. Thank you, picked as 7476153\n. Ah.. the grunt file have to be patched adding the new js file also. Sorry, overseen this. \nPRs are welcome, then I can handle this next week. \n. Will be available in 2.12.1 shortly.\n. Here is a demo http://plnkr.co/edit/BjccjrhDqaweUHrkykx2?p=preview using the 2.12.1 tag, which is automatically the bower release of 2.12.1\n. Thank you. I've reworked this because some conflicted changes and minor styling issues.\nThank you.\n. We do not provide or support anything regarding \"localization\" -- only translation.\nPerhaps you are looking for https://github.com/lgalfaso/angular-dynamic-locale\n. ng-cloak covers loading of AJS itself (maybe untranslated values of filters) and will remove the class of AJS is \"ready\", and translate-cloak covers loading of (first) translations and will remove the class of translate is ready.\nAs everything is working with events side-by-side, I would add the cloaks or event hooks for something else outside a template always.. We do not use a cache directly, however, you can provide additional configuration options for $http if you want (https://github.com/angular-translate/angular-translate/blob/2.12.0/src/service/loader-static-files.js#L47).\nThis should cover all options you can make in AngularJS for XHR. If this does not help, it is a server/app issue in general.\n. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Do you mean the loader cannot find languages?\nYou can build your own loader (i.e. copy the default url loader) and add your custom logic\n. See docs https://angular-translate.github.io/docs/#/guide/16_error-handling\n. If the pages are not visited, the code will not be executed. \nIf the code is not executed, the translations will not be requested. \nIt just simple as that. Either you execute everything (prepared in isolated test context), or you have to develope a static analyze of our code. \nFor the moment we can provide the solution via the handler only.\n. Please provide a demo; what do you mean exactly?\nAlso please be aware: translate-cloak does not make sense using static translations. It is only used for dynamic/async loaded translations. If you need an expression cloak, you have to stick with ng-cloak.\n. Is this a dup of #1580 ?\n. Duplicate and will be fixed.. Basically this is an alternatively way generating/loading translations, right?\nBasically it is only a loader, and you can create you own plugin extending angular-translate. Something like angular-translate-script-loader..\n. Yeah. Contribution is welcome. I'm not aware of the release at all, perhaps API changes?\n. Ok.\nJust to be clearify: You can always override your local version (of messageformat) and pin that version explicitly. bower term is resolution, npm term is just a local dependency.\n. Issue/PR open #1661. in canary landed. Thank you, picked as e70e9ad\nThe  error/issue was correct: the translate-attr file itself had violated code styles -- which has been overseen because of the same reason: it was not in scope.\n. Did you already have checked out the latest added strategies since the 2.12 release?\n. Complete overview here: http://plnkr.co/rJ0R6GzHGbMVxhSa237C\n- sce: This strategy (just like sanitize) can be used, because you should trust your own translation texts (it's your code). Especially containing HTML, this is a requirement for advanced translation situations.\n- sceParameters: Well, the demo shows both are equal. However, I think there was a difference how trusted html will be escaped in filters (=> filters' output will be escaped always) . If this is not correct, we can skip this strategy obviously.\n\nEscapes interpolation parameters in service (and directive) context. However, we need to escape both the text and the parameters in directive context only.\n\nBecause filter's output will be escaped (see in sceParameters), we should think about removing the escaping on that specific sitiation. That would be possible now because a strategy is being aware of the context since 2.12.x (mainly: whether it's a filter or not).\n. I'm quite not sure I'm missing some critical case, but that would be one:\nhttp://plnkr.co/edit/O56vFM70tVbhh8DrUcfs?p=preview (look for \"escape2\") (3.1b)\njs\n.config(function($translateProvider, $translateSanitizationProvider) {\n  $translateSanitizationProvider.addStrategy('custom', 'escape2');\n  $translateProvider.useSanitizeValueStrategy('custom');\n})\n.factory('escape2', function () {\n  var htmlEscapeValue = function (value) {\n    var element = angular.element('<div></div>');\n    element.text(value); // not chainable, see #1044\n    return element.html();\n  };\n  return function (value, mode, context) {\n    if (mode === 'text' && context !== 'filter') {\n      value = htmlEscapeValue(value);\n    }\n    return value;\n  };\n})\n. Well, If you have a have computed safe string (by the service), you should bind it probably. I guess a trustAsHtml should work?\n. Hm, get it. This requires some work as directive and service cannot be distinguished at the moment.\n. Meanwhile, context has been added in mostly all calls.  The strategy sce is using this already.. Well, it you cannot trust your own translation texts, you will have to use escape.\nIf you can trust your translation texts (so trustAsHtml), you probably should always escape the params (because they are unsafe).\nIf you replace your document.write with a less \"explosive\" console.log (and count the different translation texts) as in http://plnkr.co/edit/I44HyUrXg6yPiu63LDWt?p=preview, you will see only the translation texts are being injected.\n. Link #1101 \n. trustAsHtml can be useful depending the situation of context.\nSee here for the current overview: http://plnkr.co/edit/rJ0R6GzHGbMVxhSa237C?p=preview\n. Hello,\nthank you for contacting us. \nHowever, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nFinally I highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nThis issue tracker is mainly for feature and bugs (issues) with the library angular-translate itself. But you're always free to add a feature request later on.\nThanks.\n. Well, but a Maximum call stack size exceeded should not happen in our internal code.\n@sajan45  Can you please provide a full example as described in our issue template?\n. No, this is not possible at the moment. Feel free to make PR adding such a base default parameters integration.\nIn your case, you could try to make solution with a generated translation map also.\n. @JacobJohansen  Thank you.\nWell, one question: If you can control this map, why you cannot control the requested file path? :)\nAnyway. Im with this, but we should add this feature to the url loader also. \nAdditionally, what do you think about adding an optional function resolver being more flexible?\n. Yeah, you are right.\n. Thank you.\nPicked as 132e49a\n. > I've not looked in the angular-translate codebase before but I think this is a breaking change when the users have multiple fallback languages\nYeah, well. I'm seeing this from this point: If a translation is available explicitly (even an empty string), it should be used and not skipped nor ignored.\nThe improvement fixes also a buggy situation.\n. Ongoing. Stay tuned. \n. It's okay so far. Picked as d76227e\n. Thank you for contribution.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Don't prefix with an absolute path '/folder1/folder2/langs/'.\n. Please have a look at https://angular-translate.github.io/docs/#/guide/05_using-translate-directive#using-translate-directive_post-compiling\nI think that is what you are looking for.\n. Also to be mentioned: https://angular-translate.github.io/docs/#/guide/19_security -- the chosen strategy is important.\n. Do you like providing a PR?\n. This is a plugin for the AngularJS framework. The technical concept as well as the implementation is part of the framework (scope, digesting, events). I do not want to not rephrase AngularJS details here.. :)\n- https://docs.angularjs.org/guide/introduction\n. We do interpolation and and the api does not allow disabling this as its part of the core features.\nIf I get this right, you are actually providing default values. Regarding the concept, perhaps you should read in our docs/guide about providing default or fallback translations?\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Sorry, you have had already provided a demo. I was flashed with the code above. Sorry about this.\nI think I got it: The problem is default texts are not interpolated with the interpolation params. At the moment, they are treated as static default texts.\nI can see the benefit of interpolate defaults also. We are welcome a contribution. :)\n. Putting together:\n<div translate=\"glossary.popup.after.close.button\" translate-default=\"otherwise will close in {{dialog_countdown_timer}} seconds\"></div>\nThis will work because the text will be interpolated by AngularJS template system. Actually, this is static text for angular-translate.  And said this, it means we do not provide interpolated default texts at the moment. Maybe this is a contribution worth.\n\nMy theory is the custom loader $translateProvider.useLoader('translationLoader'); auto-interpolates \n\nNope, the loader does not even know something about interpolation. And he should not.. > PS if a web service obj is returning an object (key, values of translations), is what Im doing correct loading them via $translateProvider.useLoader?\nIf your data contains a translation id like id = 'userName', you can use it in three ways with angular-translate built-ins: \n1. Available in scope.id: <span translate=\"{{id}}\"</span>\n2. Available in scope.id: {{id || filter}}\n3. $translate(id), $translate.instant(id). The file loader is to be used for JSON files. However, you can adapt its implementation for another layout like properties files.\n. Hello,\nthank you for contacting us. \nHowever, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nFinally I highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nThis issue tracker is mainly for feature and bugs (issues) with the library angular-translate itself. But you're always free to add a feature request later on.\nThanks.\n. Have a look here: https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translateProvider#methods_uniformlanguagetag\n. I don't get it. The locale negotiation behind the scenes (i.e. via determinePreferredLanguage()) is configurable with uniformLanguageTag(). However, if you apply a language explicitly, you are already in control. Where is the problem?\n. @Aides359 We would welcome your contribution :)\n\nAlter L165 to return locale instead of preferred\n\nThis would ensure not the requested but the actual used locale. I think that's fine. We have already some tests, but adding one test more covering this specific situation would make the PR more worth in addition\n\nAlter L1547 to get $translationTable[angular.lowercase(uses)]\n\nToo late in the flow, I think.\n. You cannot use the service in config phase.\nHave a look at ui-router's resolve(), otherwise the corresponding controller in use.\n. I get your point, but: In which case an error should be thrown?\n. Yeah, I got your point! :) But again: Which case should throw an error? If this is undefined and we throw an error on undefined, well, the filter will stop working effectively.\nReferences in the AngularJS changelog\n- filter: this is undefined\n- filter: no context anymore\nI don't see we should do anything here..\n. Should we switch the lined in mention to something like $parse(interpolateParams)({});?\n. Well, but the this===undefined thing is an AngularJS decision. Anyone who is working with filters will be faced with this.\nI've no problem replacing it with {} and adding notes into the docs. Do you like to take action making a PR?\n. 5cb94cb. Well, if you are defining the prefix vendor/i18n/en/ and suffix .json, it will result into vendor/i18n/en/fr.json for language fr. Suffix + language + prefix.\nIf you are planing to group language files into dedicate directories, you will have to build your own loader. That is easy, just have a look for custom loaders and use an existing loader (like the static files loader) for a start.\n. Hi @yusk90  \nThe error is thrown by (your chosen) interpolation adapter for messageformat. Btw: The minified code of messageformat does not help, the actual used version is not readable.\nAnyway: I don't seen an issue for angular-translate, and we cannot help. Perhaps I have missed the point, but the problem is because of an unsuitable translation.\n. The error is produced by messageformat, not by our adapter. Reading the messages it looks like few is illegal used.\nYou should break down the issue by calling messageformat directly with the given locale, text and params.\n. We don't need this.\n. That's right. AngularJS filters (and you are using it) are called multiple times. That's a core feature/behavior.\nSolution: Do not use function calls in expressions. This is a general recommendation, not related to angular-translate specifically.\n. Picked. Thank you. 8fe6f23\n. Hi @just-trey \nThat result is correct so far: AngularJS filters' output is escaped always (by AngularJS).\nI also recommend and linking to #1588 as we discussing how we can improve the situation with filters and services also.\nI'll close this as it duplicates #1588 actually. Feedback is still welcome.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Translation will be tried for\n\nobserveElementTranslation(iAttr.translate);\nupdateTranslations(); (last one)\nupdateTranslations(); (in observe of translate). Hello,\n\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hm, did you have missed saving something in the demo? I guess, at least there is one missing file (angular-sanitize).\n. Ok, demo working! \nWell, looks like sce does not working together with the linking feature (string based).\n. @MarijnMensinga It will take some days. If you can make a PR fixing the issue, it will faster. \n. Fix: 1ede55e\n. Added.\nangular.module(\u2018app\u2019, [\u2018pascalprecht.translate\u2019])\n       .config(($translateMessageFormatInterpolationProvider) => {\n         $translateMessageFormatInterpolationProvider.messageFormatConfigurer((mf) => {\n           mf.setIntlSupport(true);\n         });\n       });\n. Ehm.. $translate.isReady() returns a boolean, $translate.onReady(fn) consumes a callback and returns a promise.\nWhich one these behaviors make you feel these are duplicates of each other?\n. Gotcha.\nThank you for clarification.\n. OK: Feel free to add a PR covering this feature. Have a look at our contribution guideline for the required steps.\nI'll close this here.\n. Well, I don't think so. A simple serv ./demo (or any other tool like this) will work also. I think the server is actually not required anymore.\nThe demo use-case is somehow nice because it shows usage of XHR / loaders.\n. I'll rethink about this, but perhaps we can ditch it completely.\n. Solved in 0e197ce. In that case the ionic component is only a service also. Said that, the dialog can be given a template also (here: data) in which both translate's directive and filter work.\nCase closed.\nPlease understand we cannot handle AngularJS basic here.\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. Sorry, don't see that. Your getter does not return the stored value.. :)\n. A getter must return the value, i.e. https://github.com/angular-translate/angular-translate/blob/2.13.0/src/service/storage-local.js#L35-L41\n. AngularJS expression fix provided, but not an issue with translate actually.\nCase closed.\n. Well, this fixes the symptom but not the actual issue. In both cases (before the patch, after the patch) the actual feature in use (naming linking to another translation) will not work anymore.\n. And sorry: In canary landed a conflicting change. \n. Replaced with 1ede55e\nThank you anyway! \n. Either you configure the table right into the config phase, or you have to use the loader only responsible fetching the translations.\nYou can use a custom loader, you don't have to \"load\" data actually. It's just a function returning the data wrapped in a promise.\n. Why do you not use the loader only? You do not have to apply the translations on your own.\n. > ```\n\n// this will not populate the $translationTable\n$translateUrlLoader({\n                                  url : \"path_to_the_file/myTranslJson.json\",\n                                  key : \"en-us\"\n                                });\n```\n\nThis will not generate data into the table, that's right. But that is not how you have to use it. Neither this is documented like that.\n. @Vengefull  You are not using the components like in the documentation and guide explained, so you are getting a wrong result also. Sorry, that's it up to you.\n\nYet this is a provider and i can not use it else were but in the config.\n\nPerhaps to rephrase this: You define a loader in the config phase, but the loader will not be invoked in the config phase, but at any time later (and again).\n\nEven if i create a custom loader i still have to use it in the config phase\n\nYes, and that is not an issue.\n\nThe desired behavior for me is to dynamically load translations per page (in the resolve method of the routeProvider)\n\nAha! That simple piece of information you don't shared yet. You should have a look at the partial loader at https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translatePartialLoader\n. The loaders except additional options which includes the possibility to apply $http option for the actual XHR.\n. https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translateProvider (useLoader)\n. js\n$translateProvider.useLoader('anyloader', {$http: {}});\nDocumentation for $http is in the official AJS docs.\n. Also: https://angular-translate.github.io/docs/#/guide/13_custom-loaders (Additional options)\n. I also think this is not related to translate. Closing.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n. I've Safari Tech Preview 16 also and I don't see an issue with the mentioned demo base.\n. It does not make sense setting the namespace globally on the service. This would be a state which cannot and should not shared with all others (like filter, directive).\nThe namespace is particular useful only in context of a directive and its usage within hierarchic/contextual tag structure.\n. Thank you for contribution.\nDeletion no is correct, but deletion 2 not. Thank anyway!\nCurated and landed as 10546bc. thanks\n. Hello,\nin part of a \"Spring Cleaning 2017\", we are closing this issue as part of several others. The meta discussion is available here for full transparency.\nAt the end, we are a small team and have only limited resources (both time and human) available. Said this, we must keep the focus and scope on the project.\nWe are grateful and appreciate to everyone for each made contribution (regardless being code, idea, documentation, and support).\nWe are deprecating/closing all issues which fulfills a specific set of criteria: mainly outdated, nice-to-have, or just out-of-scope.\n\nAlthough the list has been curated to the best of our's knowledge, there will be some lack of understanding.\nOkay, there a different stories behind all open issues, but we do not have the time for everything:\n\nSupport: Because we have only limited resources, we cannot handle support questions any more. Please use appropriate boards like Stackoverflow.\nFeature requests or ehancements: Altough it is probalbly a great idea (otherwise it would be closed already), we can not giving more resources to things out of scope or which are useful for too specific scenarios only.\nBugs: Filed a long time ago, this bug either has a reasonable workaround, no effective solution without harming all others, or is lacking additional information/use-case.\nDocs: All documentation efforts not matching English will be abonded.\n\nThank you.\nangular-translate team\n\nFAQ\n\"But this is really important!\"\nWell, we are all humans. Maybe we have overseen an important issue. If we missed something, we hope you are reaching as again filing a new issue with the reference to the old one. But please be aware: A bug without further details and a demo included will be rejected again.\n\"But this would a great feature!\"\nReconsider: Are we really required to add something in order to make this feature happen? Or could you also create a project on your own utilizing this project?. We do have explicit dependency naming, see in artifact https://github.com/angular-translate/bower-angular-translate-handler-log/blob/2.13.0/angular-translate-handler-log.js#L22\n. We apply additional code within the build process.\n. Because it is not relevant for the code to run. It's an external request for minified code and eventually the strict di mode.\nThe source code is for maintenance and readability, but not for the build result.\nThere is no benefit including these optional code right into the source code -- unless the origin source code files would be released. And that's is not the case.\n. Anyway: Thank you for sharing contribution ideas.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Maybe a sanitize strategy chosen which removes html off values?. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Well, at first this is a requirement for the dev stack only as the package is not using any npm package/dependency at runtime. \nSaid that, I see the irritations but I'm also surprised yarn actually forced the explicit defined engines -- npm does not pay such a respect/attentention: as clearly visible in the logs @ashleymoogle is using 6.8 which isn't a >=6.9 (~LTS).\nIt is save to ignore the warning for this package. I do not know how we can separate dev and dist without introducing dedicated packages. \n. Rephrasing my post 4 days ago: This is primarily a dev-stack runtime. I (role of a package owner) simply do not care of older versions within my dev stack flow.\nThat is a little bit curious, because this package actually do not have any requirement to the npm/node environment (mainly a browser env target package).\nSaid that, the dependency is given out because we publish this package to npm directly. Maybe we have to consider making a dedicated package.\n. Alternatively we remove the engine part (only in package.json, we have to leave it for nvm and travis). That's not perfect, but perhaps more comfortable?\n. As I already (2x) said: this does make sense, but for internal usage. The package definition wasn't created and made being a public published one.\nSpeaking of the internal package (dev stack), I simply don't want to discuss my dev dependencies with the actual users. This is nonsense, and I guess most will agree. My thoughts of removing the version will lead to situations, in wich only a nvm-user (.nvmrc) or a TravisCI (.travis.yml) will have a technically requirement. But, well, Travis is not the only one who will install them: any contributor also. And the system must be as easy as possible, some people don't read guides (which need to be refreshed separately).\nSpeaking of the published package, the requirement is something else. In our case, we actually don't need any requirement.\nAnd here we go: We have a situation based on several decisions which is not comfortable. But I will not make any hasty reaction which has not being reflected enough.\n\nSummarise:\n\nRemove version off package.json in the main repo.  \nPro: no issues for the users\nContra: Machines, developers, contributors have to check their environment manually. Travis is checked, but other tools or people not. Contribution guideline must be refreshed on each dev dependency update also. Often people just ignore it.\n=> additional support work\n\n\nRe-locate the published package into the shadow repository bower-angular-translate, and creating a package.json init. \nPro: Dev stack and publishing is different\nContra: Unfortunately, this will create a dilemma: Until now, all files are within the npm angular-translate, but bower-angular-translate does include only the core, but not the additional loaders, etcpp. Don't get me wrong: You should use npm i angular-translate-loader-partial instead of node_modules/angular-translate/dist/angular-translate-loader-partial.js.\n=> break existing setups\n\n\nJust remove version of `package.json for the publishing process. => sounds/looks like hacking. I'm not feeling good.. :|. @eddiemonge  Thank your for that.\n\nThat's why I request for comment such things. Finally, I'm not feeling being totally wrong having such a requirement. ;) I'm fine with a custom field and an additional custom check.. :shipit: \n2.13.1. This sounds like controlling the app states which is behind our goal: translating. \nIn that special case I would recommend controlling states completely outside of translate. If this is really being broken down by querying the translation existence, you could work with the service call promise's rejection or translate-cloak with an explicit translation key payload. \nGr\u00fc\u00dfe\nJan Philipp\n. I'll close this being duplicate. See more at #1661. Yes, we should fix this. Do you want to provide a patch? Either we replace it with {} or remove it completely. Cannot say here what is better, should have a look into it.\n. Why should we publish this old version?\n. 1.1.1 is three years old right now. This is actually even far away of unsupported.\nTechnically, we have started publishing to npm with 2.2.1 -- any other version before must be curated. I don't see any effort doing this. If you really have a such old project and are don't want to update (i.e. not touching anything, but why do you want to switch the package manager?).\nSaid this, I highly recommend updating to a more recent version -- for example the 1.x releases do not have support for newer AngularJS versions.\n. Well, you will not be happy because that old versions lacking standard npm support (i.e. main/browser which results in not working in webpack out-of-the-box). Said this, it is not an easy drop-in usage. And if we curate this versions, it would be ridiculous not adding all others versions before 2.2 also. Also we do not have one, but a bunch of repositories to care of.\nIf you are really want to use this old version, you have to use the bower variant or maybe the npm (bower-angular-translate-* repositories) via git and tag. Legacy for legacy.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. ngSanitize is used for better escaping strings. . We don't support meteor as a dedicated plugin. You will also see the plugin you mentioned have another scope (planettraining).\nWe had already an issue about this (#1259) and I don't see we have to publish a specific plugin.\nSaid this, angular-translate is just like AngularJS a browser-targeted framework and therefor will be debuggable easily. Everything you do in your meteor app is possible without (speaking of AngularJS, not specific integrations/features).. Thank you for your contribution.\nPicked as ac2a038. Thank you, I think that is a very nice addition, but had no time to look deeper into it. Sorry :/. Yes. But it would be nice if at least one test ensures the additional param will be transported correctly. The idea behind the test was basically fine, only the api break not :). I've added one.. Thank you for contribution. curated and landed as 5de40de. @jakefreeberg  Yeah, the directive angular-attr is missing support for the translate-value-xyz attributes. Overseen... Maybe the internal should be adapted like in the translate directive... angular-translate is only for translation, but not localization.\nYou are looking for https://github.com/lgalfaso/angular-dynamic-locale or something else.. What are you missing? This here https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translateMessageFormatInterpolationProvider ?. Well, the guide is not a replacement for the API docs.\nBecause I'm not a messageformat user: If you think this is worthy to add, you are welcome extending the guide (PR). :). Hi,\nexactly this constraint is in the shadow repo only.\nHowever, before adding this we have to ensure we are actually compatible with 1.6. It is not adding a version only. That is not so easy. If you know what you are doing, you can override this version on your own always any time.\nThe test targets are managed by:\n existence of a directory here: https://github.com/angular-translate/angular-translate/tree/46ba474b9be218ed26ab71822f398cb5409440c8/test_scopes\n an entry for TravisCI here https://github.com/angular-translate/angular-translate/blob/46ba474b9be218ed26ab71822f398cb5409440c8/.travis.yml#L20-L25. Fine, tests added but there is something failing. That's why we don't open the version range in advance.\nHowever, you can always override the version with bower resolutions.. Sorry, no time yet. PR is still open, also for anyone helping outstanding issues.. The PR #1659 is still open. The issue is actually a promise rejection check (introduced in AJS 1.6). If someone can help out, that would be fine. Make the things faster.. Well, #1659 is still open for everyone.\nI'd sit down at this yesterday, but don't have a solution yet. Maybe it's a test scenario issue only (with custom $httpBackend.whenAsync implementation). . in canary landed. -> already released . Ok, mainly the issue is Possibly unhandled rejection. Although we could perhaps disable the check, this issue is still there: Where the heck is the missing promise handle?. If we disable the checks here, the error messages will be less verbose but still there.\nRegarding the unhandled rejection: I'm not sure.\n Looks like this test is enough to run (replace temporarily locally it => fit).\n Anywhere in the chain starting here is lacking a rejection handler. If this is rejection an error (let's say throw 'XYZ'), then XYZ will be the unhandled rejection message.. f74dd9a. in canary landed. I don't get it right. Can you please explain more or prepare a demo?. We don't have such a feature. Although it does make sense using the directive maybe, it opens new questions when using the filter or even the service. \nYou can implement a custom error handler which is configured for a specific languageId to return the actual requested translationId: https://angular-translate.github.io/docs/#/guide/17_custom-error-handler. Hello, \nthank you for this great contribution.\nTechnically, this PR is not ready as adding a feature for $translate.instant(\u2026), but not $translate(\u2026).\nAdditionally, I'm not sure if it would not be easier for you to create an own customer loader or post processor which removes null properties.. Thank you, picked as 1e57b4f. @vincent-zurczak  Thank you, great tool!. Please have a look at our documentation & guide: https://angular-translate.github.io/. Using our directive's feature \"Post Compiling\" -- if I get you right.. @Aides359 Ops, overseen. Filter is not an alternative because filter output is escaped always (by AJS). See here http://plnkr.co/edit/rJ0R6GzHGbMVxhSa237C?p=preview (demo because of something else, but last column is filter output)\nHello @Red-3 ,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Ah, okay. I get it.\nUnfortunately, we don't cover this use case (without using a filter). You can use a translated compilation of a directive also (see here https://plnkr.co/edit/XxIxpRRRteRcCg9soDNX?p=preview), but this relies on a sanitize strategy like sanitizeParameters because the text string must not be escaped/sanitized. Have a look at the translation helloworld.\nIf you have the translations (texts) under full control, this is fine. In most cases the parameters are unsafe because they are not under your control (used defined text like username).. I think I have answered the actual question here, too.\nEverything beyond this use cases is not covered, especially if you want to build a more efficient directive when using combinations with the compilation feature. As the service provides a full api, you can built your own special directive, too.. Out of scope. As I said already: You can build use the service directly also.. Hi @onepunchagency  Sorry for the delay, we have missed this issue.\nangular-translate is not made for providing configuration or structure logic. Said this, it will provide texts for texts (maybe interpolated, maybe in another language). It will not provide information like \"how many texts should be displayed\".\nThe focus of this library is translating only.. @Beastw00d  You are using angular-translate 2.9, that's outdated :)\nWe have fixed this months ago; fast-replacing with 2.13.1 removed the issue in the demo. Ok?. >  if I pass a huge object as translate-values, even though I'm only interested in one of the properties of this huge object in the translation, this causes serious performance issues.\nWell: Without knowing which values are used (using translate-values), we have to escape everything for that specific strategy.\nRegarding the demo: Is there something missing? It's a blank/white page.\n. Right, got it. Misunderstanding.\n~~angular-translate does not support filter support within the key expressions. In case of such a expression logic, you have to build your own filter (which you have already) and using $translate.instant(key).~~ => Wrong conclusion, see down.. Well, not clear enough: It is working without escapeParameters being enabled. But that's the thing: That is (perhaps) unsecure.. @jnizet I guess I got it, I understand the issue now.\nSee here (solved, with patched lib): https://plnkr.co/edit/79rTK2UTEjOVff5c7esi\nnull and undefined parameters not need be escaped.. Thank you both.\nPerhaps others will add some input also.\nMy current plan is to prepare end of months a list of points (mainly extract of the posts above).. Thank you for your input. The issue was 5 weeks open, that should be fine.\nI'll start the next days and will mark open issues with the label _2017_WillBeRejected. The next release will be a regular one (still having the AJS 1.6 issue open), but then I will start cutting things away: The list is identical with the list in my first posting here:\n\nOutdated/Old/Not-in-focus-anymore issues will be collected under the label _2017_WillBeRejected.\nThe list's issues will be closed with a nice message linking to this issue.\nIntegrating new policy about support, help: Readme.md, Docs/Guide-Homepage. Readme.md will refresh NPM page also directly.\nRemoving all languages except english from the guide, moving the generated files into a dedicated place for browsing only. Maybe with a big flash header about its outdated state.. Note: I have labeled a first bunch of issues with the label.. Ok, that is my text for the issue closing step: https://gist.github.com/knalli/acc2dfbfd6ad3a3f358ad9d6ba64ca4f Any comments or remarks?. Also, redesign README.md started: https://github.com/angular-translate/angular-translate/blob/feature/landing_care_support/README.md. * Redesign readme part of the 2.15.0 update released right now.\nWill starting closing rejected issues.... Case closed. :octocat: . Thank you both. It will take some time looking into it.. Sorry for the delay, but it has taken a while.\n\nThe only change is that the result of the complete request incl. post processing (say line 63 self.tables[lang]) will be stored in this.tables[lang]. (Note: this and self are the same, so the change should be using the alias self avoiding any confusion).\nSo, we have three scenarios:\n\nThe request is be successful (calling then()): The change will override the already existing data because this.tables[lang] would have been refreshed already.\n2.\nThe request is not successful and an errorHandler is given: On a successful alternative response, the tables will be refreshed with new data. Otherwise see 2.2\nThe request is not successful and no errorHandler is given. No update of the tables.\n\nBut as a result of this change, always there will be a promise stored in tableswhere it should not be. And all others do not expect a promise in a table.. Process of loading fixed, replaced by #1692. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Friendly reminder.. Thank you, will have a look at it.. Thank you again. Picked as d3214d2. This is an issue with your webserver, not angular-translate running only in the browser/client. If you cannot change the setting, you should convert the translations into the matching encoding.. Thank you :). Thank you. Picked as a3fb381.. fixed. Thank you, landed in 64a2353\nWe have already keywords in the shadow repos, but missed them in angular-translate actually. \ud83d\udeb6 . Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Sorry, but please build a demo with the code/feature/bug in question only.. Is this still an issue? 1. We need more information, 2. (noted) this is not the current version.. Alright, thank you.. Well, you have used the name ARIA_LABEL, so it will be aria_label (small cases). That is not an issue, actually.\nAnyway, as usual:\nAs we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. As I said already: Use the correct attribute name, ARIA_LABEL is not correct: https://plnkr.co/edit/ExYPNRpRl8f6cmkbORjJ?p=preview. There is no different syntax: It takes the given property name and uses it as an attribute name. Both keys aren't the same.. If you think there should be an addition in the docs, you are welcome for any suggestions (just as a pull request, our docs are in the source code).. That does not make sense. There cannot be any \"magic\" code because attribute cases are important for some other parties (clients, frameworks). Just because AJS supports several formats (like ngIf vs ng-if vs ng:if ng data-ng-if) that does not mean they are the same.\nIn addition, in this case also useful: translate-attr translate-attr-aria-label=\"ariaLabel\". Plnkr updated.\nA docs PR would be still nice, but we can close this, I guess.. -> translate-compile as being solved at SOF. You can implement your own cookie storage plugin. Just have a look at the default implementation and built it for your app.. Well, we don't care. Don't get this wrong: The api for a storage plugin is very simple. If you have a case which the default implementations do not work for you, just create your own.\nAnd indeed, multiple apps is not a regular situation.. Yep, that's the custom storage api. Everything else is custom impl.\nI'm sorry, but dealing with AngularJS/$cookieStore is up to you. I cannot help you with that. If the api does not supports your case, there would be the standard way left.. Do you think the check in jshint is incorrect?. Well.\n\nPlease rebase your commits against the latest canary, and squash your commits into a single or so commit. \nRegarding the tests: I'm not in this topic right now, I've to have a deeper look. If you want you can add copies of the tests in question and apply the intended demo case.. Apart from you should not been required testing our directive, you must ensure digest cycles in unit tests manually. And if the translations are loaded async and with promises (as it is used in a directive), this can be even more than one.. Maybe your test setup is too complex. Use just .translations() like here: https://github.com/angular-translate/angular-translate/blob/d4a04685340f900b3d2801051257484e58140368/test/unit/service/translate.spec.js#L63\n\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Curated, and landed as 8b2cea8\n@mtwar  Very, very great contribution and a big thank you! \ud83c\udf89 \n. ~~Ping: Looks like something has broken, see #1703~~. @mtwar  Thank you for this nice additions!\nGreat improvements. Landed as 351eb8f\nYep, another gif.\n. > This fix changes the operative element reference post-compile to the element reference provided to the postLink function, which always references the actual DOM content, thereby propagating the changes as expected. The erroneous behavior was observed when applying translate-cloak inside a directive template\nUh, .. good point. Gotcha.. Strike! Just another long outstanding issue fixed. Landed as a4d2795\n@mtwar Thank you!\nEhm..:  :). Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. No, the definitions are not provided by us.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nPlease don't give a \"simplified\" configuration away. And, btw, it is always a bad idea working with minified code. Minified code is legacy only and meant for people who do not combine/import the actual library code.\nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Friendly reminder. We need more information.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hello,\nthank you for contacting us.\nHowever, this issue tracker is intended for bugs, tasks, and features for the library angular-translate only.\nWe highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nFinally, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nThanks.. AngularJS filter do not have access to the current scope (in which $ctrl is hold). Therefor, the expression $ctrl.name cannot be resolved.\nYou must provide a full object, not an interpolation expression.\nScratch (look for ng-init): https://plnkr.co/edit/8T9d9GDbFCeYB7uF4Tuv?p=preview. => Write a custom loader.\nAlso relevant: #924. Well, I suggest the video-implementation will not update on attribute changes. You can track this down and updating the attributes via DOM directly.\nIn that case, you must defer the template rendering until the translation is available.. Well, demo case beats always theory.\nAlthough you are not using an explicit template which will be rendered, your page will be rendered also. That's AngularJS basic stuff.\nAs I have understand that correctly, you are missing a translated value. So again: Maybe the browser's video-tag implementation will not update changes of these attributes. This can be verified with manually updating it.. Ehm.. @peterwesterlund : For verifiying the point: Build your video tag, wait for rendering (or use a timeout) and then apply an attribute change via DOM api on your own. No AngularJS required.. Again: For verifying the point the missing attribute update is not reflected by the browser video-tag-implementation itself, you must update the attribute on your own. No AngularJS required, it is basic DOM API (JavaScript).\nIf you can verify (again: prepare a demo) that's not the case, we will have a look at again.\nOtherwise there will be no way of updating it. Then you have only the option to wrap the video tag into a deferred rendered component/template which will render the tags in question right after a (successful) translation.. Well, ok. By the way, some notes: That's not a simple test case, because there are a lot of files/libs attached which seems not to be required for this. Besides for demonstrating here, you should always isolate issues to the actual core problem. Minified code also is not helpful.\nI'm encourage you making more simple demo cases. I did not mean to make you angry, but this the only way of getting complex and in-app issues into a broader, general and simplified discussion -- e.g. here.\n<source src=\"http://example.org/{{'view-vid-nme' | translate}}\" type=\"video/mp4\">. \n\nSpeaking of angular-translate: It looks like the video url is stored as a translation. Wonder if this is a translation after all.\nThere is a request to the non-interpolated raw string made, because the browser will see this right before AngularJS is being invoked. Because of that common case, AJS has been prepared with ng-src. Alternatively, you build a own directive/component which attach a new tag after interpolation or with something like ng-if.\nAfter removing the csp header, the demo is able to load the external resource video after all (because my Chrome is not complaining any more).\nAnd it looks like the video will not be loaded inside the video tag when added with ng-src.. That is a simple test case isolating the issue and showing the problem with the DOM API: https://plnkr.co/edit/tBgKYbcXRWNJaNyZxJnF?p=preview\n\nThat's the proof it is not an issue with AngularJS (and therefore not with angular-translate): any changes on the video/source/@src will be not reflected.\n=> Build a dedicated template which ensures the video/source/@src will be filled right from the beginning.. And just for reference a poc https://plnkr.co/edit/5qRDFt6w9Xv7trypJZnx?p=preview. The first link shows the problem is not angular-translate or AngularJS at all, but that changes on video/source will not be reflected by the browser/implementation of the video tag. That's why isolating test/demo is important. \nThe second link is a proof of concept how such a component could look like.. Oh, this is bad. We have optimized and fixed the partial loading process for 2.14. So far, I can confirm the demo case.. Well, there was a conflict because of an additional addPart (why?) and a refresh+use combo. \nThat works, a $translate.use() only: https://plnkr.co/edit/SNzePFma6xOI2M4ipE1u?p=preview. But why refresh and use? Isn't the plnkr I've updated enough?. Hi.\nYes, that's a bug. You should use $translateProvider.use('en') in the config phase in order to let translate the correct language much more earlier than in run(), but the cloak issue is a bug.\nFixed in 2.15.1 coming im some seconds.. Hi @Arti3DPlayer Please file an issue at https://github.com/angular-translate/grunt-angular-translate so @firehist can take care of it.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. I have added some improvements to docs, api and used samples. Without rewriting the loader life cycle, we cannot do more.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Ok, great you have find the problem. Looking forward, I'm closing this issue.. Hi,\nplease have a look at your setup. You are using old versions both of Angular JS as well as angular-translate.\nAs we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Could you please update you environment using much more recent versions?. Also,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nYou can use your demo case for that, but there can be removed some stuff (like browser sync, minified code).\nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. @sadiksha \nWell, but we do not support such old versions. Before you open requests, you are encouraged to verify the issue with the latest. Also this demo is using different library component versions: 2.6.0 of angular-translate, but latest of partial-loader. I don't know your local setup, but you have to be carefully of selecting versions.\nAnyway: I don't see a problem except the buttons. But that's no issue with angular-translate because the filter works (you can verify with a filter in the template). The problem will be the bootstrap components which seems to bind the translation only once (too early). (https://plnkr.co/edit/CfQD2BXhRTULURmAB0gs?p=preview)\nI encouraged you having a look into the bootstrap documentation about other config options, or general support maybe on StackOverflow.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Maybe the angular-translate directive would regenerate a html element (translations with html value and enabled compilation), apart from this we do not regenerate HTML and therefore are not able to a) know and b) reload any existing controller.. > I'm assuming that because the controller is being loaded before $translate.use() has been executed that we're running into a reload immediately after the language has been set.\nAlthough that's true, the pending loader is being stored also. Without more details, there is nothing more to say. Maybe a look for more recent releases would be worth.. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. ~~After updating your dependencies, please check and verify your issue again.~~\nI've updated the plnkr template just now also.. And: A filter output is being escaped by AngularJS. I've made an overview of the available modes at http://plnkr.co/edit/rJ0R6GzHGbMVxhSa237C?p=preview. Also we have open discussion about solutions under the label ref:sanitization. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Given our API for loading translations incl. support for full custom loaders as well as the implementation of the specific partial loader, we have enough prepared for customized situations.\nMaybe, your question can and should be discussed on a more abstract way at SOF.. Hm, actually, we are only configuring the existing caching option of AJS. Unless we have configured something wrong (and your 2nd post), I don't see an issue within angular-translate... do you?\nOr: I didn't get it yet.. Well, if the request is made the cache has not being used, I would guess.\nIf the cache (templateCache) is not used by angular-translate, we must have a look into it (because that's a bug). And if the request is made, a negative response will probably purge the cache content (actually, quite reasonable).\nI can see in your case, that you are looking for a more \"offline variant\" of this. So maybe a custom loader in combination with a manifest or web worker is the thing you want.. Again: We are relaying on the AngularJS $http.cache. If this not working as expected for you, I would recommend a wrapper cache loader. Actually, such a loader is a very simple function only. Said that, you are able to provide such an improved caching algorithm.\nBecause we do not want to add this into the \"core\" also, maybe you want to publish this separately. Then we can add a link to this extra addon.. Hi, please have a look at our guide, in chapter Security.\nAn overview of the modes is available at http://plnkr.co/edit/rJ0R6GzHGbMVxhSa237C?p=preview \nWe have some open discussion in general about this topic.\nI'll close this issue, because we will not replace it. Otherwise we could never support unescaped content.. Actually, this is content. And you are pointing to the content's injection part.\n{{ctrl.binding}} is an implicit filter binding and will be escaped always (see also my last link). Again: We have different modes to support.\nWe strongly recommend to use IDs as translation keys which is meant without HTML or other structure code. Otherwise I cannot follow you... We haven't such a feature. Maybe you can create a self made version of a translation file and either use a custom loader for angular-translate or use a custom transformer within your build chain for creating a final translations file.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. @gtzinos  This project does only work in AngularJS 1.x based projects. Any support for Angular 2+ would require a full rewrite.\nAlthough we had/have plans for such things, there is no progress.\nYou could have a look at http://www.ngx-translate.com/, a project which looks nice and seems to follow some similar ideas.. Sorry, we neither know about nor will take care special support for Intel XDK. We are publishing packages listed in bower and npm, that's enough and is working.\nYour toolchain have to support one of both (bower/npm).\nIn your case: It sounds it does not support bower correctly.. I don't get it..?. Let's say for reference (writing less here)\n$UNSAFE=`<td translate=\"{{ unsafe }}\"></td>`\n\nThe AngularJS (filter) expression {{$UNSAFE}} will evaluate this to the translationId == $UNSAFE. This will be the same as calling $translate.instant($UNSAFE) respectively $translate($UNSAFE);\nangular-translate will try to resolve a translation, but this will fail probably\nbecause of the fail, the id will be used as-is (because escaping or something else is part of the translation process)\n\nThere are two things to say:\n1. You can intercept yourself and change the behavior of the \"failing text\": https://angular-translate.github.io/docs/#/guide/17_custom-error-handler, maybe add escaping on your own.\n2. Maybe it is not clear enough, but the doc says the translator can return the requested translation id. \nDespite the name, we strongly recommend to use the pattern/idea of \"ids\". \nObviously, sometimes there is need for building the translation id because of too dynamic use cases. But you have to know your bad user data; simply don't trust the user (input). If your app uses poisoned user input data for building a translationId, you have already a big problem. Fixing this one here with a general escape of the error is only fixing the symptom. The underlaying root problem (handling unknown/invalid/user input data) would be still unhandled.\nOn the other side, this default is being unsecure at default right now. I think we can go with escaping translation ids on error only.\nYou are welcome to provide a PR for adding such a feature: \n Starting point would be i.e. this, but there are some other directives' usages of error handlings.\n It would be good if we provide an optional opt-out like $translateProvider.enableDirectiveEscapingOnError(false) (like this)\n* Alternatively in the directives, a more solid variant would be in the service itself (see here, search for .reject(apply) -- unfortunately there is no context available which means filter/service call would be return escaped ids also.. Oops.. missed this one. Will have a look soon.. Ok, please start as PR, better to comment on the code.\n\nThe doc for interpolateNotFoundTranslationId is wrong about the default value.\nWithout executing the code, it does looks good. \nPlease add at least 3 tests (default, enabled, disabled).. Despite the remarks, it looks great. Well done! \ud83d\udc4d . Hello,\n\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. You cannot use one-way binding in combination with an asynchronous loader -- both are incompatible features limited due the fact an AngularJS filter is a pure function without any possible deferred execution context (no \"wait for load\").\nOption 1: Use no one-way binding (read: no binding which cannot be updated).\nOption 2: Use not an asynchronous loading setup which means all translations have to be available in the config phase.. Well, ok. \nBut beware default translations will not work, as well as translationId==translationText situations. Maybe in your situation a proper solution, but not in general. . Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. ... but this will not help in case of the request for numeric values. Intentionally, we only support strings (so '0' would be fine) because that's the common type of everything (i.e. an attribute value).. Well, I assume: The issue is not the transclusion per se, but the scope configuration (isolated).\n=> Either you switch to the filter, or add a nested tag.\nAn element having a translate-attribute (and so creating the directive instance) and additional inner content does not make sense at all.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.. Well, that's no actually, but using everything as expected! So no fear this will be forbidden anytime.. Sorry, but you are not providing any information. Is this a bug or missing detail in the documentation?. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Thank you, landed as 69c666a. Hello,\nthank you for contacting us.\nShort answer: You can built your own custom loader which also can read/transform any data you want.\nHowever, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nFinally I highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nThis issue tracker is mainly for feature and bugs (issues) with the library angular-translate itself. But you're always free to add a feature request later on.\nThanks.. You are right: You can yourself create a custom interpolation, then you have this under you control.. Thank you. Maybe you want contribute making a PR?. PR landed.. No. We only translate full strings, with parametrized arguments.. Maybe the additional language attribute https://angular-translate.github.io/docs/#/api/pascalprecht.translate.directive:translateLanguage ?\n. You can apply additional $http options for the used url loader using $http: {\u2026}, see here https://github.com/angular-translate/angular-translate/blob/2.15.1/src/service/loader-url.js#L35-L39.\njs\n$translateProvider.useUrlLoader(url, {\n  $http: {\u2026}\n});\nThe possible values for this are the same as defined in AngularJS itself when using $http({\u2026}).\nOtherwise use a custom loader.\n. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Well, however:\nIt looks like the circular dependency situation is made by our configuration. While angular-translate is in the chain of the dependency stack, it has only the parts $translateStaticFilesLoader and $translate under control. Everything else is up to you, including this \"errorInterceptor\".. I don't get it.. what is the issue? Is this a feature?. Ok.\nThat's not our goal. We translate for well-known translation ids, but not dynamic texts.\n\nbut I don't know how they manage this.\n\nThey use an api like Google Translate (obviously, they will not use Google Translate) -- either on server or client side. Server maybe because of api usage tokens... On the level of translation key resolving, you can use default values (i.e. as a directive's attribute) or an error handler.\nOn the level of translations part resolving (for partial loader), there is no such redirection.\nIf the existing partial loader implementation does not fit you needs, you can implement your own one. Maybe just fork the existing one.. :). You have three ways to use angular-translate:\n\nvia the service using $translate(key).then( (translation) => {\u2026}, \u2026) (one-time shot)\nvia the directive incl. derivates for attributes: this will watch for changes\nvia the filter: this will watch for changes\n\nIn case of the service, you have to listen for the events fired after translations are ready or have been updated. That's all not required using directive/filter.. We have documentation for you:\n\nhttps://angular-translate.github.io/docs/#/guide/18_events. I'm not sure: if you want to intercept events for loading start and loading finish, you can listen for the corresponding events (see docs). Otherwise you can also implement an own custom loader which maybe delegates to an actual one.\n\nThat's it?. Go to the project page here on GitHub, and click either on the top link or the documentation in the readme.. Again: use the documentation and have a look for our events publishing loading states or the section about custom loaders.\nI'm closing this issue because it is neither a bug nor a feature for angular-translate. You are looking for custom solution, and this is not the right place for this.\n\nThis issue tracker is intended for bugs, tasks, and features for the library angular-translate only.\nWe highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nFinally, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nThanks.. Maybe you got it wrong: I'm not upset. Only referencing to existing stuff here (see here, but also angular-translate.github.io).\nDue limit resources we are handling mainly bugs (incl. doc) at this level here. Features can be requested, but will be more likely rejected (because we are already support a lot of and most feature requests are either high level solutions based on existing ones or are very special custom features).. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nthis is a general reminder: We are still waiting for your reply with additional details. If you cannot help us, we cannot help you.\nLooking forward to hear from you.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. As already said: eventually you will have to look for something like ui router's resolve method or similar ideas.. Demo or it didn't happened. :)\n\nBut when the user navigates from view A to view B [\u2026] still get translated using the old language\n\nMaybe the view is rendered without an active AJS context? It's not \"live\"/not binded any more? Otherwise I cannot understand this.. Because this would mean the angular directive would not be getting active.\n\nBtw, why does the translate directive use scope:true, which inerhits everything from the parent scope. Wouldn't it be more secure to use an isolated scope?\n\nWell, I guess, it is because of the namespace feature?\nEdit: Currently, no idea what this has been introduced. If $scope.$parent is available on isolated ones, this would be an option maybe. I'm also not sure what the consequences are mixing different directives with isolated scopes onto the same element..\n. Please have a look at our docs, especially at https://angular-translate.github.io/docs/#/guide/12_asynchronous-loading. Well, indeed: The helper useStaticFilesLoader() is available without the actual implementation.\nMaybe we could improve the error message with a proper hint (if not exist raise custom error).\nMaybe you give a PR a try? :). Great! I guess this could be realized with the $injector just like in cookies https://github.com/angular-translate/angular-translate/blob/2.15.1/src/service/storage-cookie.js#L15-L41 ... Thank you. In which situation you got this? I wonder because two different people (you know... ;)) have been faced with this in a same time frame.. @evancarey Thank you. Sorry about that, but #1748 was first and also made by a first-time contributor like you. \ud83d\udc0e \nI have asked it already: How does have this triggered initially? Because we have this tests for years and it has made never problems until now... Well, it's running for years at Travis, I would guess they are using UTC. I'm not in UTC, so at least 2 different zones have worked. Strange... > Are you East of UTC? I'm West by 5hrs (CDT). Wonder if my being -5hrs from UTC is what puts my localized date object's day value into the previous day? 2016-08-21T00:00:000Z in my tz is Aug 20 2016 19:00:00 GMT-0500 (CDT). I'm guessing that if I were East of UTC by a couple of TZs the localized date would still come out as Aug 21.\nAh, gotcha. :). Thank you for contributing. Maybe you should add a test for the truthy true also?\nOtherwise everythings looks great \ud83d\udc4d . Yeah, :shipit:  Thank you!. @vgoma  thank you for contributing. We have had already several issues with misconfigured setups regarding RequireJS. Have a look in our search: https://github.com/angular-translate/angular-translate/search?q=requirejs&type=Issues\nOur current structure enforces the plugins like angular-translate-storage-local requires angular-translate and so one.\n\nangular-translate-storage-local requires angular-translate\nangular-translate-loader-static requires angular-translate\nangular-translate requires angular\netcpp. Maybe the lang key is not as expected? We have an additional API for the language tag resolving step calling uniformLanguageTag, see https://angular-translate.github.io/docs/#/guide/07_multi-language#multi-language_determining-preferred-language-automatically. I have prepared a demo, see here https://plnkr.co/edit/rJNHzQ?p=preview\n\nThe relevant code have been extracted in the override object. default is okay when using the underscore variant.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. The issue is being called because the loader should reject to the requested options.key like in url-loader.\nSee here in plnkr https://plnkr.co/edit/OKXGmAtPATxYO82f0o4e. Atm I have no idea how we could check this probably at runtime.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Also note: Maybe you are using non-angularjs APIs, so you should be aware of applying an additional scope digest?. If you add (HTML) fragments on your own into DOM, you have to compile the template on your own. That's an AngularJS base issue, not related to angular-translate.\njs\n// this will not work in an AJS app\n  this.loadTemplateString = function () {\n    document.querySelector('#templateStringDiv').innerHTML = `<div translate=\"\"> hello </div> \n                                                              <div>{{hello | translate}}</div>`;\n  }\nHowever, I would recommend to use an AngularJS directive + template, that's is much easier.. Hello,\nthank you for contacting us.\nHowever, this issue tracker is intended for bugs, tasks, and features for the library angular-translate only.\nWe highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nFinally, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nThanks.. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. @Anber Great contribution, thank you very much. Picked as 4a2c3ab & 41c7e1f\nThank you again!. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. Okay, well: We have additional \"sanitize\" strategies and as well the post-compile addition. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. I think this should work\njs\n$translate.use(sprache)\n  .then(function() {\n    $translate.refresh();\n  });\nI'm not sure, looks like this is a specific issue with partial loading and language changes at all. Alternatively, don't remove already loaded parts (depends on the number of translations).. @evancarey  Thank you for contributing, a nice addition.\nPicked as 633fbc9. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. That's because of the translate-namespace directive, which needs to manage the namespace somewhere. Stackable.\nIn that case the origin scope where the controller is being placed will be intercepted by the namespace directive. And a form tag comes in AngularJS with a dedicated controller and scope automatically.\nSome suggestions\n do not use translate-namespace or similiar directives with an isolated scope (I guess this will be not a practicable way at all speaking of any other 3rd party component you are maybe using)\n slice your stuff into dedicated components (not one controller for everything, i.e. a dedicated dialog/form controller in this case)\n* Use an alternative way of binding the AJS form controller, i.e. <form name=\"app.myForm\"> which would add the form to $scope.app.myForm. Personally, I would recommend the last option, because I would always try not using $scope indirectly but a controller scope whenever it is possible. Well, yes, app (controller scope) is $scope.app actually, but I hope you got the point. That's much more like Angular2 apps would be, and ensure data access is always being \"with a dot\".. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. ... and I also recommend using the search for this: https://github.com/angular-translate/angular-translate/search?q=ionic&type=Issues&utf8=%E2%9C%93\nPlease update you dependencies and provide a working example. We do not want to rebuild your ionic app.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Please have a look at our documentation: https://angular-translate.github.io/docs/#/guide/12_asynchronous-loading. This issue (FOUC) is well known and can be handled with either ng-cloak or translate-cloakwhich both are handled in our documentation.. Yeah, the approach of @dmitryevseev is a useful approach. For example, you could check for zero results of the error handler or something similar one.. @adarrra  Thank you for the nice contribution.. Picked as 8d7eeb0. How should be the translating work if there is no technical fallback default (aka  preferred) defined?. Can you please share a minimal working demo?. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Sorry for the delay. Overseen this here.\nAs everything is event based here, we should see this issue also when using a custom loader with a explicit deferred load (setTimeout). Can you provide a demo with this?\nIn the tests we are using such custom loader with different timings as well: https://github.com/angular-translate/angular-translate/blob/c7e743bb54b18f404e7ab5b91b88f842f144bbae/test/unit/service/translate.spec.js#L648-L696\nBasics: The promise resolve will be deferred with a specific amount of time.. Fix in canary.. \n.@samguergen as everything is a service finally (except a filter function maybe), that is simply not true :)\nBut on topic. \nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo\n. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Yeah, you are right: You cannot rely on a filter calling yourself (i.e. on a service) when having an asynchronous translation source.\nPlease have a look at our documentation, especially our guide at https://angular-translate.github.io/docs/#/guide\nIn that case I recommend also https://angular-translate.github.io/docs/#/guide/04_using-translate-filter. Because the libraries do not specify the requirement (there are no modules), the correct order is important. Therefor, this looks ok.\nGiven the error message, I cannot say more without details.\nMaybe the error \"module not available\" is produced by your own code because of a missing/too late dependency requirement on the module pascalprecht.translate.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Because this was \"okay\" as release 2.7.2 has been published.\nYou should consider using a more recent version which includes this already (see e7516dcc070a75d5d2da0ba912c6c64a03f8aafb). It must be karma, but it already in 2.8, although I would recommend the latest 2.15.x. The value of element's attribute translate is a string (otherwise you would have to write <span translate=\"'translationId'\"></span> always). Maybe use AJS interpolation (<span translate=\"{{item.dynamicTranslationId}}\"></span>) or use a dedicate component (and calling the service).. But remember to use the events so you get translation language changes correctly.. Maybe I am missing something.. but a map does not contain duplicate entries by specification. Or in other words: Any duplicate entry will be sorted out by the parser engine (i.e. Browser).. Ok, but the overriding (\"applying\") is a feature actually. For example, apply statics and apply dynamic later.\nAnyway, I get your point when using partial files. However, because of the uncountable scenarios of loaded files in different orders, I would recommend you use a dedicated build/test step in which you can ensure this right at build time (and not later at runtime).. @SimonSimCity  We could consider to call such a refresh implicitly (for the user). Did you have see some (performance) issues with this? \nMaybe you want make a PR for this?. I have added a watcher while fetching all parts, ~~but it is limited to a magic value of 3 retries~~. This would prohibit loops.\n\nhttps://plnkr.co/edit/aUqSfm?p=preview by #1703 @detollenaere\nhttps://www.webpackbin.com/bins/-Kyh4BSpIjpsSJmsWCfu by @SimonSimCity \n\nWhat do you think?. See also ad9213d\nThis line will fail on master/canary\nhttps://github.com/angular-translate/angular-translate/blob/ad9213da544169d8b7a307091f54fabce5246d61/test/unit/service/translate.partialLoader.spec.js#L68. try again. Why? The problem exists in partial loader only. What have I missed?. Well, that's right. $translate.use() returns the current, active language. Anything else would be incorrect as being something which could be in the future. Therefore, the difference is correct. That's also why adding a part after a successful language change would not cause this issue even without the proposed patch/workaround. \nIt is recommended to modify parts before a language change or after a completed change. But the order cannot be guaranteed by you (as an app developer) always, because the part could be added in a different place without knowing of a language change. That's why we need this additional workaround.\nSpeaking of the loaders: only the partial loader has an additional internal structure (modified by adding and removing parts at any time) which have a side-effects for active loadings. But the other loaders do not have such side-effects. Maybe there will be 2 loads in parallel, but never for the same language.. Technical background: Only the $translate service invokes the loaders and could handle the responses of them. That is why the partial loader cannot actively load itself (i.e. loading the parts just in time they have been added, and making addPart currently-loading-aware). We would need an additional back-channel on which loaders could notify they have been outdated.\nThe workaround patches the current active request and intercepts an additional refresh for missing parts added between load start and finish.. fyi: just picked the code above in the current canary branch. Hold for next release.. AngularJS 1.0 is too old and out of support for years. . We are running tests and cover the old 1.2 still. But honestly, get the latest one. Or stick with the old lib. We do not support this. . Well, we have documented the compatibility both in the readme as well as in the package descriptors (bower.json, package.json). If you ignore these, well,you cannot complain. . Sorry, but it has taken some more days as expected. \nMy full answer to the topic of old frameworks/deprecation notices and any future requests this related.\n\nAlthough we are claiming \"Translating your AngularJS 1.x apps\", you have to check the actual compatibility and especially the version matches between your local environment and the available packages. For example, we are providing information the current release is still working with AngularJS 1.2. Maybe it works in older ones, but will do not run tests against it and therefor do not support it. \nThe claim is required for everyone to be sure no one is using our framework with Angular 2+, because it is a complete other thing technically.\nBecause we are developing and building with the dependencies tools npm (and still bower) and are pushing the final package.json and bower.json always within the release, everyone can have a look which dependency in which version is (not) available. This is technical information and is meant as advice by the author. This means every time a new AngularJS version will be released, there have to be done at least one angular-translate release for \"official\" support: we had have a look and confirm it's working. Maybe it was \"needless\", but who knows it before? \nSome build/dependency handle incompatible versions (i.e. logging), and most of them have an option to overrule this setting. If you know you what you are doing, take you control.\nAs bower will complain if different versions of one release are used (solution: pinning aka \"resolve\"), npm will simply ignore other (read: newer) versions, unless such version is required explicitly.\nYou should never use minified code of libraries. Regardless AngularJS, or plugin angular-translate, or what ever. First: Most users are building their application (compiling), bundling, compressing), so an already minified scripts file is needless and will not result into a \"better\" one. The opposite will happen. Second: You must have a full working development/debugging environment, which is not possible with minified script files (i.e. missing debug symbols, missing object names, unreadable stacktraces).\n\nThat's the general part.\n\nOne additional point to the compatibility in general: Obviously, not every app can be update to the most reset release. That's not possible always due different constraints. But everything is moving, regardless your (maybe not \"yours\") project is moving or not. \n@robertochingon \nIn this case, if you are running an AngularJS of September 2012 (which is five(!) years old), you simply cannot expect updating angular-translate to latest will still work without changes. The issue shows you don't have looked into it before. Just update, and boom. Yeah, well... \ud83e\udd15 \nAfter having a look into your STO posts, the problem's history is something else.\n\nHowerver, I\u00b4m getting error in the call: TypeError: $translate(...).then is not a function\n\nThis means you had used an old version of angular-translate (because of the error message something < 2.0.0, later you said it is a 1.1), but also you had looked into the online documentation to the current version. => Different versions will not fit.\nOn the one hand, this is not comfortable for users having old versions, but on the other hand we cannot take care of 5 years old documentations. Sorry, that is impossible.\n\nncaught TypeError: g.has is not a function     at Constructor.$get (angular-translate.min.js:6)\n\nWhatever, see general point 4 above. But the documentation is not right because not the matching version. Maybe an incompatibility because of AngularJS 1.1 and AngularJS 1.2. AngularJS had has history of breaking changes between minor and even patch releases.\nYour options so far:\n1. Stick with the 1.1, and use the documentation of this release. This is not available online any more, but the sources are nearly full documented. If you use the non minified version, you will see it. In a nutshell: the service $translate() (angular-translate 1.x) can be compared with the service $translate.instant() (angular-translate 2+)\n2. Update to angular-translate most recent which would require updating AngularJS also.\nIMHO\n If you only have to fix something, I would not start any upgrade processes in a project.\n If the project is not in maintenance mode and should be developed actively, then the dependencies and frameworks should be updated. But this would mean an AngularJS 1.6 (as of today) also\nInfo regarding our package metadata\n angular-translate 1.1.1 was the last one supporting AngularJS 1.0\n angular-translate 2.0.0 starts supporting AngularJS 1.2+ only. This is a plugin for AJS, a web developing framework using basic technologies like JS, HTML and maybe CSS. \nIt is a common issue in Cordova apps, that developers do not understand the different modes. See more at Ionic's blog.\nYou are pointing out it is working in {{ionic serve}}. If it is not working in the other mode (like in a native app), it is not an issue with angular-translate, but with remote requests (\"XHR\") in the background in general (i.e. CORS).\nSo you will reproduce this issue with any \"local\" file loaded with standard XHR techniques.\nPlease use more appropriate boards like StackOverflow.. @jjabba  Thank you for all the great PRs! \ud83c\udfce \nI will have a look asap.. Thank you very much for these contributions. Same as in #1789 :). @jjabba  Thank you very much for these contributions.\nIt is very helpful splitting the different things in different pull requests, I welcome this \ud83d\udc4d \nBoth landed right now in canary and will be available the next release.\n(But there is no need for separating the change and the corresponding test -- unless something else  or technically required.). Thank you for contribution! :). Picked as 76f1339 -- thank you!. Are you sure the request is done? Because you must be aware of CORS.. Well, the thing is: This works, this is definitely a non angular-translate specific issue. I would say, it is even non related to AngularJS.\nDo you have tried translate instead of data-translate?\nBut we need more information.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nI'm closing this issue due inactivity. We have asked for additional details, but you could not helped us. Therefore we close this issue as not reproducible.\nIf you still have an issue, please create a new issue because we cannot be sure to track closed issues.. Thank you for using STO instead. Answer is available there for the record.. Gotcha \ud83e\udd47 \nThank you, didn\u2019t saw this when moving file. . Picked as 208345a  -- thanks!. If you want to be notififed globally, use the already mentioned $translateProvider.useMissingTranslationHandler('missingTranslationService'). See more here.\nIf you want to handle this locally, a filter is not appropriate. A directive have additional options for default/standard texts. See more here.. Sorry for the delay.\nShort: no idea.\nLong: The error is something AngularJS internal, but mostly when digest are.. well.. in a loop.\nAlso I would recommend NOT sending each error directly via HTTP, because you can produce a flood attack against your own server. That's bad.\nSo a proper solution (which also works around your issue): On error, invoke only a service of you (adding the label in question to an internal stack/queue). Independently and periodically, you check for content and send them as a bunch to your server. Maybe every 10 seconds (if more critical), or only every 60 seconds.. Thank you for this. Are you sure this will affect the 1.6 line? I guess it will be 1.7.. Maybe you want to make a PR with a replacement, maybe toLowerCase?. PR picked. Thank you very much!\nPicked as efc91c3. Ok, go ahead :). Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. This depends on the selected sanitization strategy. See this demo for the differences: http://plnkr.co/edit/rJ0R6GzHGbMVxhSa237C?p=preview. Also see documentation: https://angular-translate.github.io/docs/#/guide/19_security. Hello,\nthank you for contacting us.\nHowever, this issue tracker is intended for bugs, tasks, and features for the library angular-translate only.\nWe highly recommend our api documentation and guide available at https://angular-translate.github.io/. Because nothing is perfect, we are welcome any improvements or suggestions found in the docs also provided as a PR.\nFinally, we advise you asking common \"How to... ?\" questions at community boards like Stack Overflow because you will reach a bigger audience. Also, providing a complete example (i.e. using this plnkr template) might help everybody to find a proper solution faster.\nThanks.. @mnemotron It looks you are having issues with JavaScript respectively parallel function executions in general, but this is not the right area for this.\nThank you.. Structure: We have three endpoints/apis exposed by this library: directive, filter and service. Internally, the directive and the filter are using the service which ends up being only one actual endpoint/api: $translate() and its non-async buddy $translate.instant().\nHowever, most will use directive or filter only and will not have had an issue with this one.\nAs you had already discovered, I was also not happy with the change last year, but had to make a decision after a broken state. There are unit tests, but one special case had not been covered and overseen.\nComing to sce: the easiest way would be just returning a string, right? And because of the api is declaring a string will be returning (because we are translating only strings for strings). However, the idea of $sce is providing a trusted content which can be resolved within templates correctly as strings. They are not strings, but will be rendered like them. That's an AngularJS feature.\nThis does make sense when using our directives and filters, but can have issues when using the service. But fixing the service without having the context of the dependent components will change more.\nTechnically, there is currently a mismatch about signature and actual return. But semantically, this is still right: it is a (trusted) value of a string in an AngularJS app.\nYou can only have an issue with this, if you have the following situation:\n using the service directly (no directive nor filter)\n not injecting the translated values in a template\n* instead using the values within i.e. providing in Non-AngularJS components\n@tommck : What do you think of \n adding an additional hint to the APIs result types indicating that trusted value holders can be returned (because that is missing at least); \n and the service getting an optional opt-in flag for returning the untrusted value (example). > Definitely should add documentation hints for this, because it was really confusing. (the TypeScript typings are wrong too :) )\nWe are not providing TypeScript types. Or: That is not under our control.\n\nI'm just trying to figure out a situation where someone would ever want the TrustedHolderValueType type instead of a string.\n\nThat's standard using templates which includes directive and filter. Your not seeing this ;). Eh.. if you are only using our directive and filter and the service's returns only in templates, you have no rewrites. Just as I said: The trusted values are using by the templates internal service.. IMHO: value.toString() is not correct. As I remember correctly, it was needed to call the internal function. (ofc: which is bad) But I cannot verify this at the moment.\n\nWell, you have your app in mind. If have a library here used by a lot of different developers with different scales, minds and requirements. And it should fit for all. And here we go: Welcome to the unfinished field of #1101 and the beginning of the journey \"where and when we have to trust the value\". \ud83d\udc0e  (short and only valid answer: actually never \ud83d\ude04  )\n\nIf I change this to the untrusted value, we will have only a solution for strategy sce. There is also sceParameters left.\nIf the result is a \"trusted value\" (because that's what the result would be), we have a bunch of characters which MUST be injected fully trusted. No escaping is allowed. This will break a lot more.\n\nAnd finally this changes the behaviour: I have extracted the relevant strategy of my big demo, and applied the proposed change: http://plnkr.co/edit/dMhMcIzGSMSH4UlfXc2w?p=preview Note the subtile change of the result (colored text).\n\nAnd do not get me wrong: We want to have an ideal solution. I only do not think that the toString()-solution only will help.. I have added the demo an example using the filter. Eventually more understandable the the rest: trusted value holder (using $sce) allows html in AngularJS filter functions.. Well, if you don't want to put HTML (and others) into your app, you should simply use escape. Best method ever.\nBut if you want to use HTML in special cases a more controlled way, you will have the option to use $sce and others. But the chapter about $sce in the AngularJS docs is not short. That means something ;). > Also, if my change would break stuff, then there are some large gaps in the tests in the code base \nI'm not sure what you have changed. But you are welcome to fix it. :octocat: . > How did I know you were going to say that? \ud83d\ude04\nThat is still a community-driven project, help is welcome always.\n\nI've added all current strategies in this WIP branch. Mainly: This spec file.\nI'm still missing one special case, tests with special unicode chars, and maybe initial development of new/better strategies.. Ok, well. The intention of the escape is for escaping standard HTML security issues, but not the core feature of interpolation within an AngularJS app.\nHowever, the situation is:\n the translation texts are in general in-app provided: you are in control of them => secured\n the translation attributes (i.e. interpolated values) are being escaped\nAnd unless you opt-in into the optional post-compile feature (using interpolation within interpolated values), you cannot inject unknown content using an appropriate sanitization strategy.. Also: you can change the configure the default interpolation plugin.. @SimonSimCity  Thank you for contribution.\nWell, this is not working (obviously). The \"workaround\" is active always, not only for partial loaded content.\nI have prepared something, see #1781 . Simply: Don't. ;)\nThe problem is: there is no point whether the code (library, our point of view) could determine which role some of your parameters have. Without an additional parameters type meta model (param a is html safe, param b not), this is an impossible task.\nSo there are the following options left:\n\nOnly the translation itself defines (valid) HTML, but no parameters. In this case, you define a parameters-only escaping/sanitizing strategy because you would declare all translations texts as fine/secured. As you are shipping your texts on your own, you can treat them like any other internal resource file.\nYou request partial translation parts (maybe requested with the bulk/batch mode) and combine them afterwards to a custom translation. In this case, you can combine different request modes and result bindings.\nThe last option would be to reduce all relevant security options and adjust them all correctly for each translation and parameter. Actually not an option and never a recommendation. (But technically you could\u2026)\n\nAnd some final words: You should not have to build separated HTML in the translations (a standard recommendation about translating). So go with a simple You have a new message: {{linkAsHtml}} (if this have to be dynamically), but my recommendation would be You have a new message <a href=\"{link}\">{name}</a> (I know, it depends). Maybe that's a silly example (because of demo), because otherwise I would reconsider whether this additional must be in the translations after all.\nThis is a reflex by developers extracting everything and making it more reusable. But it should not make the thing too complex and reducing security.\nRegarding your question about sprintf: I don't get it. Where is the difference? It is actually nothing else than the interpolation, isn't it? Maybe this would be an alternative interpolation strategy (instead of AngularJS, with sprintf), but I don't know if this is worth enough.. @distinctdan Ehm, no, there are only variables/parameters. Nothing else like \"a normal angular expression\". Even this only works if it can be resolved by the given payload -- implicitly looked up by using the directive's scope, or explicitly given using filter (since AJS 1.2) and service api because both lacking a scope by design.\nSo, you can replace the default interpolation service with your own implementation (already said) to use other leading/trailing separators, but you won't get out of this dilemma. \nWell, until: Your write an interpolation service using two different interpolation strategies itself. But then you have to manage the different usage of two different types of parameters. However, because the interpolation strategy must care of the sanitization/escaping, you can control everything.. I guess you are wondering about a feature like an optional resource. No, that\u2019s not supported. \nYou can just copy the small loader and implement your own logic. . Documentation has a chapter about custom loaders, but more or less~ they are a function only. See the existing ones. . I don't think this is an issue with angular-translate. Hint: maybe another target/audience is better ;)\n1: I would change the code running without any side-effect; also that is better when working with asynchronous recursive calls (and callbacks).\n2: Moreover, I would replace the explicit calls with implizit promise resolvings.\nBlueprint: see here as standard implementation (non AJS): http://plnkr.co/edit/mHhtRIrcG7TIeAKzFhdo?p=preview\nIf you have with a working concept implementation (no issues with unresolved promises or rejected promises), please ping me again.. > This make it possible to exploit the applications when the translation texts is inserted by a a third party\nWell, it's a core feature the messages are being interpolated just as you will expect in an AJS application. So yes, maybe we can call it \"exploit\", but is no surprise.\nHowever, if you don't need this, you should ask yourself why you are using angular-translate. Maybe it's not the right tool for you. Do not modify the tool, but change the tool if it does not fit.\nAs already mentioned you can change the interpolation configuration (maybe with something \"no op\"-implementation): https://github.com/angular-translate/angular-translate/issues/1804#issuecomment-341105203. http://plnkr.co/edit/rdNybX?p=preview\njs\n// enabling new default interpolation\n $translateProvider.useInterpolation('noopInterpolation')\n// alternatively with addInterpolation and on-demand config\njs\n// simple noop interpolation service\napp.factory('noopInterpolation', function ($interpolate, $translateSanitization) {\n  var $locale;\n  var $identifier = 'noop';\n  return {\n    setLocale: function(locale) {\n      $locale = locale;\n    },\n    getInterpolationIdentifier : function () {\n      return $identifier;\n    },\n    useSanitizeValueStrategy: function (value) {\n      $translateSanitization.useStrategy(value);\n      return this;\n    },\n    interpolate: function (value/*, interpolationParams, context, sanitizeStrategy, translationId*/) {\n      return value;\n    }\n  };\n});. Which document?. While we recommend attaching a working demo always, I would say this is triggered because you are probably using a minified version but without explicit named dependencies. \nIdeally this would be an plugin in your build chain. But I do not know anything about your setup.. Again: This depends on your build tools/chain.. Should it not return sr-LATN (everything uppercase)?\nAnd yes: It's look like a bug, because I had thought the second part must be uppercase always (like en-GB or de-DE). Maybe you want to make a PR?\n\nOr can I pass my custom languageTagResolverFunction\n\nAt the moment, there is no option for adding custom languageTagResolvers. Again: PR is welcome, as part of the $translateProvider.\n\nOr can I pass my custom languageTagResolverFunction?\n\nNot directly, but you can provide a custom implementation for $translateProvider. determinePreferredLanguage(customFn). In your case, that's the only extension point you have atm.\n\n$translateProvider.uniformLanguageTag(undefined or 'no-op')\n\nI think an additional none could be useful. PR is welcome ;)\nNote: languageTagResolver will be used only if determinePreferredLanguage is not called with a custom resolver function.. > Isn't using undefined kind of a no-op?\nRight. That's what you requested. undefined is the noop.. This behaviour is not a bug. A filter must return data directly and cannot wait. Therefor the filter have to called again.\nIf you use the filter within templates, AngularJS will do this for you.\nBut if you call the filter explictly (outside of a template), then the same rules will apply like using $translate.instant().. Currently, this is supported as full-alias only.\nYou have two options I would say:\n1. Make a contribution which will add such a feature. We are welcome this!\n2. Create your own tooling in frontend of producing the data files for angular-translate (ala preprocessing). Great, thank you for contribution. Will have a look later.. Again, thank you very much for contribution.\nJust landed in canary! \u2b50\ufe0f . Quick solution: Despite the documentation, I would recommend setting the fallback in the config. It looks like it is a workaround for your issue.\nI would recommend this also, but we should have a deeper look into it\u2026. Sometimes, there are scope clashes in AJS applications. Sometimes we win, sometimes the others. Maybe today a problem with angular-translate, tomorrow in something else's directive.\nYou have the following options\n Change the directive priority https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translateProvider#methods_directivepriority\n use two different tags\n replace with translate filter. The partial loader does not need this method. It is loading the data itself, because it is* a loader. That is the reason why $translatePartialLoader.addPart also is not loading, but only hinting for a later loading.. Well, you should not relay on the existence nor the data value of this key. The key is maintained by angular-translate, not any 3rd party code.\nFor your case: Use .getAvailableLanguageKeys() (list of available keys) and .use() (current key).. Well: I would skip such checks and would not put ES6+ over this code.. we have simply no support for this. No idea what will happen in the future.\nHowever, this change is okay. Thank you for contribution!. > Why not bind translationTable on $translate\nBecause you (or your code) is not in charge of maintaining the state of this table. Is is already loaded? Will it be replaced? Will it be appended by additional parts? You (or your code) have no idea. That's because our plugin is managing this for you -- including changing languages, featuring fallback decisions, dynamic parameter injection and even asynchronous and partly loading.\nThis is a translation service api which helps you translation text for keys. So deal with it. \ud83d\udc30  This is not a blob/text string container. \nMaybe you don't need the translation api service overhead; in that case a simple JSON map is enough.. Thank you for contribution!. @ShankzPatil  Interesting local you have.\nCould you maybe explore issue #1101 a bit?  I have also added an overview + demo/hack see in https://github.com/angular-translate/angular-translate/issues/1101#issuecomment-315880432. I'm not sure what do you mean. We will not support multiline expressions. Maybe we should add an appreciate trim function for bugfixing?. The thing is: We are using the default interpolation feature by AngularJS -- but you can out-out/replace this. However, we do not have active support for multiline key values (translation ids containing new lines) which would go beyond any default usage. Said this, I would recommend using only simple keys -- without newlines. If this works, fine. But it is not intended. Translation ids are meant to be without newlines. Maybe that's worth for a discussion, however, not for this plugin any more.\nAdditionally, a directive with an interpolated text value is somehow special, too. The code in question is likely the check determining whether an additional interpolation is required (IMHO, an awkward and misplaced feature, but it is there, won't break features). If you can provide a fix which would help you and others, you are welcome. \ud83d\udc4d . Well, okay.\nAnd my last sentence is still valid: \n\nIf you can provide a fix which would help you and others, you are welcome. \ud83d\udc4d\n\nI see the problem you have, however, it does not have been issued for years. Maybe we/you can fix/enhance the way of loading the correct payload: Feel free to contribute. \nI will close this -- either this will be handled within a contribution (hint, hint) or effectivly-wontfix.. @dmigliorisi-we Yep, the filter's scope is undefined for years already. You are encouraged to replace your $ctrl approach with the much more modern way using bind controller. \nMore refs\n* https://blog.thoughtram.io/angularjs/2015/01/02/exploring-angular-1.3-bindToController.html. Also you cannot rely on the scope and a on-demand expression as you did with \"{COUNT: $ctrl.selectedAssigneesCount }\".\nThis is fine because it uses a pre-evaluated expression (not evaluated within the filter):\n{{ 'SELECTED_ASSIGNEES_COUNT' | translate:{COUNT: $ctrl.selectedAssigneesCount }:\"messageformat\" }}\nMaybe you also define messageformat as default which would remove the need of defining it.. @kensplanet No, as we see this as a translation library which is designed for translating text (string) with text (string) -- maybe parametrized. Therefor both plugins and internals are not expecting non-strings in general.. Ehm.. how should this even work in theory? If angular-translate aka the browser skips notice about the hash, the server will not find the corresponding resource. Because the resources (like the translation files) have changing urls, you are making the whole stuff using hashes. \nSkipping them would bypass the idea of the cache. That does not make sense.\nSo, if you have decided to use such a pattern, you have the following options:\n\nConfigure the urls probably with the hash. If you have a post processor already (like Webpack), you could maybe inject the dynamic url of the resulting artefacts while building them. Or: It looks like you have something similar for your branding stuff. Either you inject the actual path, or you inject the information about the path segments (i.e. via a dynamic generated JSON file). \nAlternatively, you could rethink the whole thing (depends on the size of files): If you are already building an \"app\", you can inject the actual translations without an async loading part. Definitely worth if the translation files are small.. You can build your own custom loader (see docs) doing whatever you want. It is only a function (service). . You should determine the differences between your code and the plnkr's one. ;) You can manually downgrade the library version; but this will be not an suitable approach for the future, obviously.. @alejnavarro  Thank you very much for your contribution effort.\n\nHowever, we have decided last year to remove any localized informations/texts (incl. German, which is native for the most contributors) because we do not have the time and ability for maintaining all translated guides and documentations.. @Sumangalaknair Sorry, but it looks like your demo-code in the plnkr does not contain something other than the base (do you have saved?)\nAlso I will not debug your application, but a (single) bug/feature of angular-translate only.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nthank you for contacting us.\nYour issue is masked due minified code. First use not minified code with actual payload, so we can understand your actual issue. . @aloysiustany Please provide a demo always. As we do not add explicit \"cursor management\", I would assume there taking something \"intelligent\" into account. Try switching filter/directive, or try using the service itself so you can apply the translation on your own for that field.. I have no clue what you have done. Maybe <input translate translate-attr-value=\"TRANSLATION_ID\"></span>, maybe <input translate-attr=\"{value: 'TRANSLATION_ID'}\"/>, maybe <input value=\"{{'TRANSLATION_ID' | translate}}\"/>.. Do have checked out the alternative with translate-attr? Do you have checked with a poc that's an AngularJS expression (without filter) behaving different? \nMy point is: I would guess this behavior is for all AngularJS bindings (curious: first time I've heard about this). Beside the alternative ways (translate-attr), there aren't other options and we are the wrong address.. @yupitomets  What do you have downloaded? The \"Source code (zip)\" files aren't corrupt and being generated by GitHub actually (it contains the current git branch's files status effectively). Additionally, we are adding angular-translate-vx.x.x.zip as a build result. But this isn't corrupt either. Maybe you have a download issue or an AV agent is causing trouble.. Maybe you have downloaded the *.tar.gz? Then you have to use a compatible extractor, obviously ;). Which program you are using for extracting?. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. @yuriipitomets  The current versions are angular-translate@2.17 and AngularJS 1.6. We have tests running our suite against the older one including the latest AngularJS 1.2.x. So it should work.\nBut if you have issues with very old versions and do not providing any information and demonstration, we cannot help. Effectively, the latter one will also provide your actual used versions.\nIn general I would recommend using the latest supported versions (AngularJS 1.3).. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Thank you for contributing. Picked as cdb1d7d. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n\nSure, you have added a demo. But we need a working editing demo like provided in a plnkr or similiar (that's up to you). This enables the following:\n\nYou build a demo only the relevant part of the code -- I cannot debug your application at all.\nWe all can see and make changes on the fly.\nNot using compressed files shows improved traces.\n\nFor example, I would see the actual configuration parts of translate. But I don't want to search in your minified app code. ;). @eluchsinger  Someone had already reported this some days ago #1835, but I cannot reproduce it. Neither my macOS nor a friend's Windows 7 have this issues.\nMaybe you have a chance of testing the archive with unzip -t <filename>? . @eluchsinger  Thank you for sharing your investigation report :) While this explains why it isn't an issue for me (running an unix derivate, somehow), I wonder why it has work on a friend's machine.\nAnyway: I've applied a change in the just relased 2.17.1. I hope this will fix the situation.. In 2.17.1 it contains an empty angular-translate folder?. I really have no clue what is going on.\n```\n$ ls -lisah angular-translate-2.17.1.zip\n8604350749 112 -rw-r--r--@ 1 user group    54K 22 Apr 22:46 angular-translate-2.17.1.zip\n$ file angular-translate-2.17.1.zip\nangular-translate-2.17.1.zip: Zip archive data, at least v1.0 to extract\n$ unzip -l  angular-translate-2.17.1.zip\nArchive:  angular-translate-2.17.1.zip\n  Length      Date    Time    Name\n---------  ---------- -----   ----\n        0  04-01-2018 00:32   angular-translate/angular-translate-handler-log/\n     1443  04-01-2018 00:32   angular-translate/angular-translate-handler-log/angular-translate-handler-log.js\n      592  04-01-2018 00:32   angular-translate/angular-translate-handler-log/angular-translate-handler-log.min.js\n        0  04-01-2018 00:32   angular-translate/angular-translate-interpolation-messageformat/\n     6541  04-01-2018 00:32   angular-translate/angular-translate-interpolation-messageformat/angular-translate-interpolation-messageformat.js\n     1447  04-01-2018 00:32   angular-translate/angular-translate-interpolation-messageformat/angular-translate-interpolation-messageformat.min.js\n        0  04-01-2018 00:32   angular-translate/angular-translate-loader-partial/\n    22399  04-01-2018 00:32   angular-translate/angular-translate-loader-partial/angular-translate-loader-partial.js\n     4727  04-01-2018 00:32   angular-translate/angular-translate-loader-partial/angular-translate-loader-partial.min.js\n        0  04-01-2018 00:32   angular-translate/angular-translate-loader-static-files/\n     3080  04-01-2018 00:32   angular-translate/angular-translate-loader-static-files/angular-translate-loader-static-files.js\n     1369  04-01-2018 00:32   angular-translate/angular-translate-loader-static-files/angular-translate-loader-static-files.min.js\n        0  04-01-2018 00:32   angular-translate/angular-translate-loader-url/\n     2065  04-01-2018 00:32   angular-translate/angular-translate-loader-url/angular-translate-loader-url.js\n      774  04-01-2018 00:32   angular-translate/angular-translate-loader-url/angular-translate-loader-url.min.js\n        0  04-01-2018 00:32   angular-translate/angular-translate-storage-cookie/\n     3178  04-01-2018 00:32   angular-translate/angular-translate-storage-cookie/angular-translate-storage-cookie.js\n      855  04-01-2018 00:32   angular-translate/angular-translate-storage-cookie/angular-translate-storage-cookie.min.js\n        0  04-01-2018 00:32   angular-translate/angular-translate-storage-local/\n     3637  04-01-2018 00:32   angular-translate/angular-translate-storage-local/angular-translate-storage-local.js\n      924  04-01-2018 00:32   angular-translate/angular-translate-storage-local/angular-translate-storage-local.min.js\n   131914  04-01-2018 00:32   angular-translate/angular-translate.js\n    24402  04-01-2018 00:32   angular-translate/angular-translate.min.js\n---------                     -------\n   209347                     23 files\n```\nThere are no relatives paths, no . directories.. You can implement your own interpolation service, but have to add all features on your own.. Well. Hardly. As you said already: The config is a life cycle phase which is done prior before anything else. \nYou can solve this issue with adding such values either within your page template processor (i.e. as HTML meta tags and re-parsing them again), a custom (blocking?) script injected with dynamic values and adding data to your DOM or with a custom AngularJS bootstrapper which loads (without AngularJS) some configurations before. \nPersonally, I'm fine with the first one (depends whether page modifications are possible).. Phew, well.\nFirst of all thank you reporting and getting in touch. Although I get your point, I have a problem of parsing with a regex HTML code for some critical steps like escaping. \n\nOne fast run is good, but a complete suite running in different environments is better. \nIs this really covering all bad and fancy html input vectors?\n\nWhile we talking, you can test yourself if this working using a custom strategy using the corresponding provider: https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translateSanitizationProvider. @eliranek1 Different environments are browsers in our case, effectively, yes. We have no explicit list of browsers, but have very moderate support which is also caused by the supported AngularJS versions.\nRegarding the actual performance, something like https://www.measurethat.net\nBut both depends on the input.. > @knalli I'm not quite sure what you want me to do with the translateSanitizationProvider. Can you please provide a little more detail?\n@eliranek1 This allows you adding custom strategies for escaping. A example is in my showcase.. Please provide demos in a fully working manner, we have already blueprints for this:\n\nPlease open this plnkr base.\nFork it (at the top left).\nEnsure the version of AngularJS and angular-translate is correct.\nEnsure all angular-translate plugins are available; reduce and remove anything you can.\nWrite a minimal as possible demo for your specific issue.\nSave and freeze. Provide us the final link to your demo.. And thank you for the perf demos already. As I said already, I'm still unsure about the coverage of all bad input. I simply not trust the pattern yet, needs more time for this. ;). @tregusti  \"Allow\" would imply we forbid it. That is not true. ;) So yes: Just install the version you want and override this decision with a custom resolution in case of bower. In npm, I think package-lock is your friend...\n\nSpeaking of testability in general, we have in test/scopes/ setups for test runnings against multiple AJS framework versions. If nothing breaks, a new default for 2 is okay, but a test against 1 should be exist for legacy support. The actual unit tests are here: https://github.com/angular-translate/angular-translate/blob/b633bf8c4740de9c867e83c48cc60b1a79b06016/test/unit/service/messageformat-interpolation.spec.js Maybe we can extend here some?. @samal84  is right, that is obviously out-of-scope.\nWe are still running our test suite against different setups (local bower environment, scopes defined via bower.json\u00a0files), see here https://github.com/angular-translate/angular-translate/tree/ee641d8f2c586364c48507af617a033ca33f1a1e/test_scopes Of course, only covered things within tests. There are obvious changes between AJS 1.2 and 1.6 which we and you have to handle. Anything else works as as expected.\nFor 1.7: I've pushed 080cd04, well,  we will see what will happen.. Yeah, the tests have been run successfully too. Stick with this until released.. Let's summarize:\n\nWe have 2018, we don't care about AJS 1.0.7.\nSupport for AJS 1.7.0 is in angular-translate@2.18.0 officially (but 2.17 works also). Arh, sorry about that. 2.18.1 is your friend. . This is partly issued by #1101\n\nShort story: You have to choose a strategy wisely depending on your need. You can use https://github.com/angular-translate/angular-translate/issues/1101#issuecomment-315880432 as a help.. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. @RostVY  Thank you digging for some info :)\nMaybe you want to make a contribution fixing this issue?. Please consider building your own custom loader (its actually only a function). You can delegate calls to the provided ones, or just rebuild the flow for your specific use case (maybe offline related situation within your Electron app).. https://angular-translate.github.io/docs/#/guide/13_custom-loaders. Ehm.. no, why? This is resolved via the dependency tooling. We don't ship vendors.. Well @leolux  -- no idea about grunt wiredep, but the main property is best/current practice and will be used by tools like webpack also. main is always the package's code, nothing else. \nAs already said: We ship no vendor code / other dependencies.. (Please write answers more specific. You want something to know, although I would to like to help.)\nIn case you asking what this tool is translating? Nothing itself, because you have to provide the translations. It's only the tool/glue between your translations and the app/templates.\nIn case you asking about the list of your provided languages: Well, actually you should know about this ;) But there is an api for that, please have a look at your documenation: $translate.getAvailableLanguageKeys() https://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate. Hi @GlauberF \ncould you please elaborate what exactly is not working? We have run our tests again AngularJS 1.7 without issues, however, maybe our tests are not covering everything.. Alright, this has been fixed in efc91c3733cac1554ce83bc78185f3070c4dad08 contained in 2.16 at first. You should consider updating this old version of angular-translate.. @lavorosas, the easiest one is to build your own storage plugin -- just have a look at the impl of cookie or localstorage. Basically, it's a get and put.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Note/reminder:\nIt looks like your environment is using an old or older release of AngularJS and/or angular-translate. After updating your dependencies, please check and verify your issue again.. @charlie-ablett You have to escape the interpolation '<span ng-show=\"variable\">\u2026' => '<span ng-show=\"\\'{{variable}}\\'\">\u2026'.\nSee also working demo: https://plnkr.co/edit/64C3QrKJJGZ9KKhoRvZs?p=preview\nThe reason for this: translate-compile only compiles the translation which means basically you have access to the actual current context (scope). Said this, <span ng-show=\"app.someVariable\"> would work, however, that would not be probably useful.\nThe translate-values aren't the scope of the compilation interpolation, but of the translation interpolation (one step before).\nIn a nutshell: The interpolation step must render the result (which means it will not work with complex structures because of serialization) and the result of this must be escaped probably for AngularJS.\n```\nvariable = 'test'\n// translation interpolation of ''\n\n// AJS template interpolation of the string above (no access to the values any more)\n\n```. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Well, you can add any language you want to have. I don\u2019t know what angular-translate can and should do. . Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Also I'm in doubt we are converting anything... Within a factory method, you are in the bootstrapping phase still. Translations are being resolved asynchronous.\nFirst: do not resolve translations in the \u201econstructors\u201c, only at runtime. \nSecond: alternately resolve them using the async way (promise) which would resolve later. . Yeah, that is a good resource getting the main thing about our async loading.\nYou should always remember: we load translations asap, but this is completed after running every constructor/factory/init method of any initial angular service and rendered components/filters. . undefined as a translation id (aka input argument) should be checked right in the service, before even requesting the internal stack.\nSo I think returning the rejection asap is far besser. Maybe you want to make the PR?. Well, if a function is returning a promise, it would be a surprise handling for exceptions also. That's why Promise.reject() exist.. Thank you for this change improving the docs.. Merged/picked wrong, but it is canary now.. You are not importing the package/module for translate cookie storage. Just add this, that\u2019s all. . Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue. \nFollow these steps:\n1. Please open this plnkr base.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove anything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.. Alright, thank you. Picked.. Hi @ShankzPatil, please have a look at our guide documenting all the events https://angular-translate.github.io/docs/#/guide/18_events . Hi @ericnewton76,\nhonestly, I really don't know why you are thinking a method/function with the name instant would be waiting or blocking ever. Really. instant. We had thought choosing this name would be clear enough..\nAnyway: There is no \"blocking\" concept after all the world of (browser's) JavaScript, well, except for browser provided APIs.\nThere is also a promise based variant as $translate('Page_Title_Label').\nPlease have a look at our documentation and guide.. @ericnewton76 What do you want?\n\nIf you want your translation now (aka instant): use $translate.instant() \nIf you want a translation (resolved): use $translate()\n\n\"Now\" and resolved are mutually exclusive goals.. Again:\n\nI need a method that will (potentially block) and give me a valid value... now.\n\nThese are mutually exclusive goals and are impossible. \"Blocking\" is not an option (you are in a browser environment), and valid+now is not possible as of loading (you already said this).\n$translate(array) would be an option, as well as post-updating the components labels (if possible) or even replacing it, or even delaying the rendering.. @sergeypayu  Thank you! :). Thank you. Picked as dbd9693 in canary. Will be available in the next regular release.\n@WallacePinho Please ensure you read the project's contribution guidelines which is helping everyone. Thank you.. @cschwaderer  Thank you for getting in touch.\nWhen using in templates, it looks like a stateful AngularJS filter ($stateful, see https://docs.angularjs.org/guide/filter#stateful-filters) is not compatible with an array as result.\nSee this:\napp.filter('demo', function ($filter) {\n  const f = function (x) {\n    const result = {}\n    x.forEach(v => result[v]=v)\n    return result;\n  };\n  f.$stateful = true; // << here\n  return f;\n});\nIf this filter is used in a template like <p ng-bind-html=\"['some_array'] | demo \"></p>, it will crash also. If it is not stateful, it will return an object instead.\nAs requesting multiple values (in an array) per filter/function is not forbidden per se (however, it would be not regular), I don't see we can handle this speaking of displaying a information. Just because the library (aka the filter function) does not know in which context it is being called. Sorry.. Actually, this sounds like you are looking for the partial loader, aren't you? \n\nhttps://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translatePartialLoaderProvider\nhttps://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translatePartialLoader. (Note: Please append running code within a tool like plnkr or so.)\n\nI'm not seeing your are using the partial loader, but your own?\nAnyway: In context of your original question/expectation\n\nExpected behavior is translationTable should have both the data : core translation data and additional translation data as both are needed as per the requirement.\n\nBasically, nothing is wrong with applying static defaults and a lazy/dynamic loader on top of this. However, this one have to provide everything as internally everything is replaced, but not appended.\nSo if our partial loader feature set is actually too much for you, a custom statics files loader which combines the remote data with your local data would be fine enough.\nPlease have a look at our guide regarding custom loaders: In a nutshell, a loader is just a pure function (AngularJS service) which returns a promise (e.g. backed by $http) -- you might have learned this already when building your custom partial loader. You can inject/modify this payload just before returning it. Maybe you just copy/paste the existing static files loader and build your own.. More or less this be done at this place https://github.com/angular-translate/angular-translate/blob/eda9f29b3343d84f43f9fa30a39a1ae636d1c494/src/service/loader-static-files.js#L80-L82. Hm.. I would say your configuration is not correct: You only register the stuff once within the init phase.\nPlease have a look at our demo at https://github.com/angular-translate/angular-translate/blob/eda9f29b3343d84f43f9fa30a39a1ae636d1c494/demo/ex11_load_partial_files.html#L42-L47\nMaybe with initial parts already https://github.com/angular-translate/angular-translate/blob/eda9f29b3343d84f43f9fa30a39a1ae636d1c494/demo/ex11_load_partial_files.html#L50\n... and adding a part is just https://github.com/angular-translate/angular-translate/blob/eda9f29b3343d84f43f9fa30a39a1ae636d1c494/demo/ex11_load_partial_files.html#L62-L63\nYou can run the demo code locally with: git clone https://github.com/angular-translate/angular-translate.git && cd angular-translate && npm install && npm run start-demo. > After running following command\n\ngit clone https://github.com/angular-translate/angular-translate.git && cd angular-translate && npm install && npm run start-demo\nI am hitting this url : http://localhost:3005/demo/index.html\nso on console I am having this error\nCannot GET /demo/index.html\n\nangular-translate@2.18.1 start-demo D:\\core-ui\\enterprise-ui\\core-ui\\angular-translate\nnode build_tools/server.js\n\nExpress server listening on port 3005\nGET /demo/index.html 404 3.021 ms - 154\n\nIt's /demo/index.htm, especially http://localhost:3005/demo/ex11_load_partial_files.html.. AngularJS is a framework for SPAs, I'm not sure what you are trying to solve.. In the demo ex11_load_partial_files, this is done via the \"load module\"/\"unload module\" calls. It's your part to combine this with something else like page routing.\nUsing pre-initialized translations in combination with the partial loader does not work, so:\n1. either use in both cases a partial loader (module a, module b)\n2. or don't use the partial loader and stick with pre-initialized translations and one static-files loader.. The loader is pure function service which means it must return something. In your case ('asyncLoader') it doesn't. You should return the promise actually.. @HeriTeo This is not a problem, although we have to concentrate for bugs only at this place.\nIn short: \njavascript\nangular.module('translationController', ['pascalprecht.translate'])\n    .factory('asyncLoader', function ($q,$http, $timeout, MiscService) {\n        return function () {\n            var deferred = $q.defer();\n            // your loader logic\n            return deferred.promise;\n        };\n    });\nSpeaking of general coding or JavaScript issues, I would recommend StackOverflow (https://stackoverflow.com/). Especially with tags like ours (https://stackoverflow.com/questions/tagged/angular-translate), you will find help from a larger audience. . @PascalPrecht  maybe only one watch?\njavascript\nscope.$watch('translationId+interpolateParams', updateTranslations, true);\nbeside this, I would say ok?\n. perhaps only deferred.resolve()\n. Oh, we are finally introducing codenames? notorious-northsea maybe? :P\n. Else?\n. What does this change? Is /*! something special?\n. Oops. I'd replaced the check value === scope.translationId with the flag successful which is the correct response by the \"core\". I would remove the comment?\n. The test would be okay if any of en and enEN would be available. But is not the intention of the test case?\n. I would at least suggest a terrority dependending translation...\n. Unless this is buggy.. and you won't notice in that test case.\n. In this test case, you both handle en_US and en being equal. That's okay in the \"real\" world, but here in a test you must be sure that really the right language has been used. Which means it would be a formal miss behavior if the language en_US would be used when a alias of en_US -> en is defined. \nok?\n. Well, our code (mostly the service) still has to been refactored/restructed. Anyway: In this case, the interpolateTranslation is only used in the \"instant\" case -> please rename this into interpolateTranslationInstant making intention and usage clear.\n. 0.0.0 ?\n. @PascalPrecht I think that is a catch? :+1: \n. Being available for all in the service, not only in scope of this.$get\n. unwatch will be called the first time the function will be invoked, but it is within a loop with multiple invocations actually? That looks bad, I'd say.\n. I think this should all wrapped in a master promise in order to work and make a proper process/workflow.\n. Actually, grunt-cli is only used by global commands (and therefor should be installed global). If you are in your local package, you can use always node_modules/.bin/grunt (or even profit my PATH=node_modules/.bin:$PATH\nThere are really relevant updates of grunt-cli we should be aware? Hopefully not..\n. Yes, bower@~1.2.8 are de facto broken. That's okay (but already fixed in canary)\n. Yeah, cleanup required :) Should be \"postinstall\":\"bower install\" and so on, that's right.\n. Locally, there is no need for grunt-cli anyway. That is only required for a global grunt.\n. At least for this one: gotcha. I've fix this in canary, that's out of this topic.\nlanded as dd9a7d3\n. browser Is this required?\n. Codestyle: Ensure you are running jslint.. \n. Codestyle: Ensure you are running jslint.. \nAnd so on.\n. Please be sure that a custom standard function would also work. Similar change like https://github.com/angular-translate/angular-translate/pull/712/files#diff-255d6d49cbc024fa0d5bc97fdd721bf4R919\n. perhaps not..?\n. Good point.\n. Good point.\n. 1) Regardless what publish do, this have to be a correct release and be committed. Said this, the release process is currently not part of npm, but npm is part of the process. And whatever is published, we have a released version in the repository.\nPerhaps we can combine these steps all together in future.\n2) Well: install installs only all missing requirements (like new packages or unmatching version ranges), update will also update all installed requirements to the latest. \n. Ah, okay. So this is only a override in case of. Will be removed later.\n. Currently a special case for canary only. Should not be merged in master.\n-Jan\nAm 08.09.2014 um 23:06 schrieb Nick Heiner notifications@github.com:\n\nIn package.json:\n\n\"repository\": {\n     \"type\": \"git\",\n     \"url\": \"http://github.com/angular-translate/angular-translate\"\n   },\n   \"scripts\": {\n-    \"postinstall\": \"bower install\",\n-    \"test\": \"karma start karma.unit.conf.js --single-run\"\n-    \"prepublish\": \"bower install\",\n-    \"shipit\": \"bower install && bower update && grunt release\",\n  but then again, if you want the results of the release to be committed to git, then why is /dist/ in .gitignore?\n\n\u2014\nReply to this email directly or view it on GitHub.\n. intended?\n. Should the error be propagated into the handler? Thinking about something like responseHandler(data, err)\n. Oh, change okay, old style was complete s.. Let it here, but you should consist to make such off topic changes outside (i.e. in a separated PR). A general recommandation. ;)\n\nFine!\n. Well, well, there should be violations.  :)\nif(responseHandler) { data = responseHandler(data); }\n1. No space before bracket\n2. I think a rule of no inline/simple blocks..\n. For example, loader-url.js does not return the data. It's rejecting with the requested key only.\n. I think it is a way more efficient to use\n$translate(translationIdsAsArray, scope.interpolateParams, translateInterpolation)\nwdyt?\n. Hm, that will not work for successful. \n. Yeah, that's right. I hadn't realized we need successful here.\n. @tspaeth : What do you mean? A missing line break?\n. ['catch'] is fine.\n. js\n        if(responseHandler) { data = responseHandler(data); }\n->\njs\n        if (responseHandler) {\n          data = responseHandler(data);\n        }\n. What about one of x requests failed or return invalid data?\n. nvm.. I've not read right.\n. Currently this is not acceptable for global functions. Before we can do this, we have to wrap the code with an IIFE.\n. That's unnecessary. (883-890)\n. typo\n. hm? :)\n. That's not a bugfix, just like noted here\n. Actually, ANY is a well-known wildcard tag name in the AJS documentation. I would not translate this.\n. Covers everything here:\n- First one: datosDeLaTraduccion and translationData not matching!\n- Second one (more seriously): I would not translate internal technical references like TRANSLATION_ID, username and so on: Given the same tokens, you can easily toggle between languages (in case of differences) and we have a cleaner code style.\n. Missing indention.\n. would not translate name and value\n. That does not look like a good entrypoint for the package. In general, we publish only the built artifacts, but no source files.\n. Yep. It would. It must be the same range like in the other ones.\n. why?\n. Opps.. didn't read carefuly enough. Ok!\n. Potentially this is a lot of work.. broadcast will notify every child scope.\n. So, in the end this all here: you have replaced this particular watcher (old) and replace it with a new event listener. I'm still looking for the 2 watcher reduction..\n. Ah.. because of the additional translate-language in in the h4. I didn't got this. Thanks.\n. This already fixes some issues I guess.\n. Hm.. translation (=> result) will be ignored completely?\n. Should not be $nextLang === translation.key?\n. I don't understand why this should be not HELLO. It's a valid key.\n. Why do we need tracking both states? If this could be changed at runtime I would understand.. but this this are one-time configuration things. Either there is a post processing function, or there is no one.\n. This exposes the internal structure. This lets others modify our internal storage, but without knowing it (therefor no implicit update/refresh). This can/will result into confusion later.\n. transaltion -> translation\n. Perhaps we should also add a test + doc about the situation when translation are loaded async but $translate.getTranslationTable(lang) will return null (i.e. because of loading in progress).\n. Wait for what? There is no trigger available.\n. Perhaps calling resut.$$unwrapTrustedValue()?\n. ",
    "simalexan": "Hello guys, \nPascal, first to tell you that your ng-translate work is awesome. Watching the repo & traversing the issues, keep up the good work! :)\nSecond, can you maybe assume, when the async data load will be completed and merged with the master branch?\nReally looking forward to it.\nCheers!\n. @PascalPrecht That's great! Thank you for a quick response. Holidays are soon here, so I hope I will grab some time to help, at least a little. I will \"snoop\" around, no worries. Thanks again.\n. ",
    "javierpavon2000": "Awesome job guys! \nI'm sorry I can't help you with the implementation because I'm new with angular, but I'm wating for this issue.\nThanks a lot!\n. ",
    "lanterndev": "Just stumbled on this thread and thought I'd ask, does anyone else experience the issue described in PascalPrecht/angular-translate-loader-static-files#1?\n. Meant to say, I replaced that line in my bower.json with `\"angular-translate\": \"git://github.com/PascalPrecht/angular-translate.git#0.8.0\" (upgraded to latest tag while I was at it) and it's working like a charm. Thanks for checking, and thanks for the awesome module!\n. Also meant to say, sorry for filing the duplicate ticket. I saw your comment in #31 and hope they update the registration for all of us soon.\n. confirmed! Thanks @PascalPrecht, bower.json updated accordingly. :)\n. Thanks for the super fast response! Is there an example of how you use it\nwith ng-bind-html-unsafe kicking around somewhere I could take a look at?\nAnd does that support live angular behavior in the markup? If not do you\nknow how hard that would be to add?\nOn Sunday, June 2, 2013, Pascal Precht wrote:\n\nHey @skivvies https://github.com/skivvies !\nYou're right, this is a common use case and angular-translate doesn't\ncover this very well.\nBut yea, just like you said, you could either split up the contents into\ndifferent translations and go with a directive/filter combination, or you\nput the html in the translation itself and in view-layer you use\nng-bind-html-unsafe to get it out properly. :)\nThis is exactly how I use it. If you have any idea how to make this\nbetter (at least in theory) lemme know! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/69#issuecomment-18810642\n.\n. Thank you so much for taking the time to write the plunk. I've been away\nfrom the computer since this morning but I look forward to checking it out\nwhen I get back.\n\nI'm following progress on the pluralization work, interested in that too.\nWill look out for ways I can help.\nOn Sunday, June 2, 2013, Pascal Precht wrote:\n\nHere you go: http://plnkr.co/edit/oyTsOV?p=preview\nThe plunk shows, how to use translation id's with ng-bind-html-unsafe. It\nalso shows, that it doesn't work with bindings :(\nAnd unfortunately I can not say how hard that is to implement. Have to\ntake a deeper look at it, but we're currently working on pluralization. I\nhope you can live with that for now?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/69#issuecomment-18812266\n.\n. Hey @PascalPrecht, it looks like using a new directive along the lines of the angular-html-bind directive from http://jsfiddle.net/andytjoslin/ctyfg/22/ rather than ng-bind-html-unsafe might do the trick. I'll give this a shot. \n\nIn the meantime, if you'd be open to one of us adding something to the docs demonstrating the included-markup use case, we could leave this open until then, or for sure feel free to just close the issue too.\n. Thanks @PascalPrecht, when I have a patch I'll convert this issue into a pull request and attach some commits!\n. I recently took a crack at a directive that would allow live angular bindings inside translations:\njavascript\n  .directive('compileUnsafe', function ($compile) {\n    return function (scope, element, attr) {\n      scope.$watch(attr.compileUnsafe, function (val, oldVal) {\n        if (!val || (val === oldVal && element[0].innerHTML)) return;\n        element.html(val);\n        $compile(element)(scope);\n      });\n    };\n  })\nHere is an example plunk that demonstrates it in action: http://plnkr.co/edit/Stb6IexTjG0AfzrB896Z?p=preview\nNot confident this is the best way to implement this, so feedback would be much appreciated!\n. Oh, just saw the new translate-compile directive in angular-translate 2.0 (congrats on the new release!) in http://angular-translate.github.io/docs/#/guide/05_using-translate-directive. That page doesn't actually demonstrate any live bindings inside a translated string though. I updated my plunk to demonstrate this next to the compile-unsafe method I've been using with angular-translate < 2.0:\nhttp://plnkr.co/edit/Stb6IexTjG0AfzrB896Z?p=preview\n. Thanks, @PascalPrecht. What @DWand said makes sense, that end users shouldn't have to download translation metadata meant just for the translators. Nonetheless, it'd be great if angular-translate supported one of the localization formats that Transifex supports. Do any of the formats listed on http://support.transifex.com/customer/portal/articles/971979 make sense to you for angular-translate?\n. wat\n. Thanks for the suggestion, @knalli. I thought of that, but the reason I created this issue is that since Transifex is such a popular translation platform, maybe it behooves angular-translate to support one of Transifex's supported formats out-of-the-box, rather than requiring users to go through an extra step. Have a look at some of the important projects that are using Transifex, if you're not already familiar with it:\nhttps://fedora.transifex.com/projects/p/fedora/\nhttps://www.transifex.com/projects/p/Mozilla-Firefox/\nhttps://www.transifex.com/projects/p/django/\nhttps://www.transifex.com/projects/p/bitbucketorg/\netc.\n. There is no single default format in Transifex; it accepts resources in any of the supported formats.\nMight be worth it for you to start a project there and experiment with it so you can see what it can do.\n. This sounds great, @PascalPrecht, thank you! And thanks @jamesandres for the helpful suggestions. (If the transformer you wrote for your Drupal project is something you could share, that could be super helpful!)\nOne thing that occurs to me though is, if there is any standard localization format (http://support.transifex.com/customer/portal/articles/971979 lists several) that it would be equally convenient for angular-translate to use, it could be better to switch to a standard format rather than not using a standard, no? Of course, this wouldn't preclude making the changes suggested above, and those would still totally be awesome.\n. Great news: Transifex just added support for the simple key-value JSON format angular-translate already uses! No more pre-processing needed! See transifex/transifex#254. Closing this issue as obsoleted.\n. Great to hear you're interested! Look forward to hearing more after you give it a think.\n. In case this might help anyone else in the meantime, a really brain-dead solution is in https://github.com/getlantern/www.getlantern.org/commit/849361cb36379a1f3e93b73e31a451f4a985ecee (and deployed to getlantern.org if you want to test). Look forward to doing something better in the future!\n. @PascalPrecht Psyched to hear it, thanks! And we'd be honored to be showcased on the angular-translate site. Thank you for asking!\n. Sweet!\n. I sure think so! Thanks for not forgetting about that use case, @PascalPrecht :)\n. Sure thing! Here's a translation of that Python code into Javascript in case it helps:\nhttps://gist.github.com/skivvies/8015981\n. Great, glad to help!\nOn Wednesday, December 18, 2013, Pascal Precht wrote:\n\n@skivvies https://github.com/skivvies perfect! Saves us work! :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/213#issuecomment-30850488\n.\n. Nice!\n\nOn Wed, Dec 18, 2013 at 11:12 AM, Pascal Precht notifications@github.comwrote:\n\n@skivvies https://github.com/skivvies step one landed as 7cbfabehttps://github.com/PascalPrecht/angular-translate/commit/7cbfabecc5c9d401a4f56792834be97a086b0aa2/cc\n@knalli https://github.com/knalli @tspaeth https://github.com/tspaeth\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/213#issuecomment-30854610\n.\n. \n",
    "jamesandres": "Aha! That fixed it. The 'translate' argument was a carry over from some old code..\n. Here is the updated fiddle in case someone stumbles across this http://jsfiddle.net/2AfGv/3/\n. Awesome, thank you Pascal!\n. I needed to delete the old branch and github nuked my pull request. Sorry about that.\n. I should have time this week to write some tests.\n. Thanks for your replies knalli and Pascal.\nknalli, yes I suspect it would be complicated. I'm not sure of the technical implications, but I'm a fan of setting the bar you want then trying to get as close to is as practical.\nPascal, I'm curious, what is it you don't like about the approach? Is it the technical headaches you foresee, or another reason?\nCommonly sites have a default language which is the native language of most users. It seems to me that having the raw HTML be readable / useful for the site maintainer and core users is an advantage.\nFor example, the Drupal project works in this way. Localized strings are printed like t('Hello @name.', array('@name' => $user->name)). Details http://drupal.org/developing/api/localization\nLikewise, the Django project uses python's _('Hello %(name)') % {'name': user.name} function for localization. Details here https://docs.djangoproject.com/en/dev/topics/i18n/translation/\nObjective-C takes this approach too, NSLocalizedString(@\"Hello %@\", nil), @(userName). High level tutorial here http://www.raywenderlich.com/2876/how-to-localize-an-iphone-app-tutorial \nOn the other hand, you are right, many projects use a token based approach. Rails for instance uses both a t() function and tokens simultaneously, eg: t :hello_user_msg, :name => user.name. Details http://guides.rubyonrails.org/i18n.html\nAs you can see, I personally favour the Drupal / Python / iOS approach and think it has advantages over the token approach.\n. Thanks @PascalPrecht, I appreciate you thinking it through.\nAnother way to reason about this is if we implement the aspect @knalli is referring to then an app developer can choose which approach to take. They could use 'TOKENS' or 'Human strings', whichever the see fit. That's cool.\nOne other tricky bit I noticed is embedded HTML. Is it possible, and/or difficult, to enable something like this?\n<span translate>Welcome to my <em>Angular</em> app.</span>\nThis is a slippery slope though. I can foresee people wanting complex expressions like:\n<span translate>Here we go down the <a ng-click=\"doSomething()\">slippery slope</a> {{user.name}}.</span>\nWe would need a clear way to define which of these is translatable and which isn't.\n. Testing this further locally, I feel Angular is much better set up to use the 'TOKEN' approach to translation. There are so many corner cases with the 'Human strings' approach, I don't think we would be able to fully implement it. I also doubt we could implement it cleanly, without complicating ngTranslate a lot.\nBest to use the tools as they were intended.\nI'll close this for now. It could be reopened if someone wants to pursue it :-).\n. Gah, PR is on master. Will fix.\n. Ah, lol. That's what I get for not reading the code carefully.\n. Just to chime in my 2 cents. I'm currently building an Angular project which consumes data from Drupal's web-services. The translation formats provided by Drupal are also different from what angular-translate expects (surprise, surprise). I also had to write a transformer to get the job done.\nI don't think that adding transiflex (or Drupal) support to angular-translate is the right architecture approach here. I would rather that angular-translate codebase stay simple and encourage:\n1. Pre-processing translation files using a build process (eg: Grunt) then loading them statically\n2. Integrate with the $http service used in angular-translate-url-loader to post-process translation data before it is fed into angular-translate\n. @skivvies the transformer I wrote was totally server-side so I'm not sure it would be helpful to you. If you are interested, however, I wrote this for Checkdesk a non-profit OSS platform for journalism fact-checking. Over here -> https://github.com/meedan/meedan-checkdesk/blob/develop/drupal/sites/all/modules/custom/checkdesk_services/checkdesk_services_i18n/checkdesk_services_i18n.resource.inc\n. I should add, this code is a work in progress. Certainly, it has not been tested in production yet ;-)\n. Sure thing\n. http://plnkr.co/edit/WgNSJgXiaA5l7pIChD7B\n. Yep that's working for me. Thanks!\n. Now on the canary branch.\n. ",
    "lichtner": "I would like to ask you, \"context\" are supported? Especially in English many words have many different meanings so it leads to ambiguities and translator cannot able to translate every word in correct meaning (I have many experiences with it). Can I define some \"context - explaining note\" (e.g. as it is in gettext)  for some translations if it is important?\n. @knalli may be key can be used as description.\n@PascalPrecht if you were a translator and should translate e.g. word \"date\" how to translate it without if you don't know context where this word was used? It is label for \"metting\" or some \"date of a day\"? \nGettext use this four functions in source code e.g. in php:\n``` php\ngettext($message)  // Translate a message.\nngettext($singular, $plural, $count) // Plural version of gettext.\npgettext($context, $message)  // gettext with contect.\nnpgettext($context, $singular, $plural, $count) // Plural version of gettext with context.\n// examples\ngettext('Hello world');\nngettext('%s item', '%s items', 3);\npgettext('date as a term', 'date');\n```\nSilly names of functions ;-) Gettext use primary language as a key but it does not matter. But as @knalli said key can contain some description. But it could be problem if I try to use some translation tool. Because context is important only for max 5-10% of strings and if I try to use some tool I should convert all keys as a context, but in most cases it could be useless. \nMay by small improvement of $translateProvider format can solve it:\njs\n$translateProvider.translations({\n    'simple-text': 'Simple text',\n    'text-with-different-meanings': {context: 'some description', text: 'date'}\n  });\nSo if I create some translation tool I can show context only if it is important. What do you think about it?\n. right it is only additional side information for translator\n. @knalli exactly so. context is only for translator, for you is irrelevant. You use only text property.\n. gettext don't use keys and don't have any translatorProvider table. Gettext have a scanner which scan source code and extract translations to file. So gettext have to put context into source. But you don't. For you is enough if context is in $translateProvider.\n. @knalli this is not problem:\njs\n$translateProvider.translations({\n  \"dialog\": {\n    \"title\": \"Form\",\n    \"context\": { context: \"description of context\", text: 'Context' } ,\n    \"text\": \"Please confirm...\"\n  }\n});\n. may be it will be performance problem because you have to test if translation is string or array\n. @PascalPrecht @knalli  sorry guys I misunderstand this example.\n. I am not sure if I will build new translation tool or if I build convert script from your format to some format which can I import to existing tools. \n. Now I develop new ng-app. In my previous apps (non ng) I need it and I used it. May be I will need also, now I am not sure. IMHO it is common feature for translation tools so I can help you develop better tool.\n. this was reason why I start this talk.\n. @DWand may be comment will be enough if javascript have some annotation which I can get via some reflection. But I don't now it annotation exists in javascript, do you know? Or I can create some comments scanner.\n. If I do some experiments with some translation tool I will send you feedback.\n. ;)\n. ",
    "cehoffman": "@knalli hit right on my concern. The amount of global ids vs. specific ids has been typically skewed heavily in the specific ids case for me.\nI hadn't thought about pushing the translation configuration down to the smaller components of the application, but wouldn't those pieces need to be angular apps as well. I'm going to look at that in more depth.\n. My main concern lines up with @knalli. The text for various elements are sometimes deemed special case quite often by people who are not actually coding the application. Hence I would like to specify every widget's text independent of others so any changes don't find their way into the history of the code base.\nIt might be beneficial to look at how ruby's i18n gem works. You can specify a chain of fallback lookup keys and rails does it so that if currently component1.form3.confirm button doesn't have any text the translate will use the text for component1.confirm and then confirm if that wasn't found. This allows the translators to drill down as specific as they want without ever needing to change the code base.\nI definitely oversimplified how the i18n gem works, but thats the general gist.\n. I prefer knalli's solution since it solves the main motivation I had for the issue. Looking at the transformer the main issue I see is that I also have to recreate the loader when all I'm interested in is converting whatever data I get by whatever means from a nested object to the flat namespace ngTranslate uses.\nIf you could specify transformers separately I could see making the namespace support from knalli's work a provided transformer that users can register if they want that functionality. That would then also let users chain transformers through multiple registrations.\n. ",
    "stulentsev": "This flat object thing is great! What about the namespace fallback chain, though? Guess, it's not implemented? :)\n. ",
    "MattiJarvinen-BA": "@stulentsev @PascalPrecht that fallback chain would be nice.\n\n@cehoffman It might be beneficial to look at how ruby's i18n gem works. You can specify a chain of fallback lookup keys and rails does it so that if currently component1.form3.confirm button doesn't have any text the translate will use the text for component1.confirm and then confirm if that wasn't found. This allows the translators to drill down as specific as they want without ever needing to change the code base.\n\nIs there an example implementation of that using useMissingTranslationHandler somewhere?\n. ",
    "franciscop-invast": "Probably too late, but according to an article I wrote about testing GZIP, the first point about reducing wasting space probably doesn't change anything/much since GZIP is very efficient for those.\nBut about an improvement for developers, I agree it's good :). ",
    "mormegil-cz": "Just an opinion: ng-pluralize is quite unflexible regarding localization. It allows you to \u201cpluralize\u201d a whole phrase based on a single number only. But what about cases like \u201cX new comment(s) by Y user(s)\u201d? In my attempt of an AngularJS localization tool, I went for another filter, which is flexible, but the resulting syntax is quite cumbersome:\n{{ \"commentcount\" | i18nparsed:12:3 }} with commentcount: \"$1 {{args[1] | plural:{one:'comment',other:'comments'} }} from $2 {{args[2] | plural:{one:'user',other:'users'} }}\nI was inspired here by the localization of MediaWiki.\n. Well, yes, but that\u2019s exactly what I\u2019m doing. The translation of commentcount includes an interpolation; only that I provided the plural filter so that I don\u2019t have to repeat myself declaring the pluralization rules of a language, and refer only to the CLDR plural classes. (Sure, for English, having {{ count == 1 && 'comment' || 'comments' }} is not that difficult, but you definitely don\u2019t want to repeat the rules e.g. for Croatian.)\n. @knalli The point is that one translation step (one translatable message, e.g. commentcount) might include multiple pluralizable runtime parameters affecting more parts of the one message (e.g. number of comments and number of commenting users). If you have your pluralization step as the root (like ng-pluralize wants to do), you are unable to do that. (Note that GNU gettext does the same, IIRC.) In that case, you are forced to pluralize the various pieces of the message (\u201cX comments\u201d, \u201cY users\u201d) separately and build artificial connecting messages (\u201c$1 by $2\u201d) to sew it up. And even then you lose some flexibility, because in some languages, some sentences might use more complex dependencies.\nIf you allow interpolations (or any kind of evaluating expressions) inside your translations, you are completely flexible. But in AngularJS, this means (IIANM) the pluralization tool needs to be a filter instead of a directive like ng-pluralize, which is unusable in this context.\n. @PascalPrecht I would say this construction is an overcomplicated attempt to be able to use ng-pluralize just because it is there, even though it is not really that useful. See my above comments: How would you do \u201cX comment(s) by Y user(s)\u201d with this? A filter is the only way to go, I am afraid.\nThe advantage of ng-pluralize (well, AngularJS in general) is that it already knows the CLDR pluralization rules. Which is why I (mis)used it, and I call $locale.pluralCat instead of building my own rules, even though I know this is not a documented API (yet?).\n. @knalli Yes, this is quite a different approach which might work. The only downside I see here is that translators can be generally a completely different group of people than application developers. But you are forcing translators to learn full-fledged JavaScript (plus your API) instead of just a simpler syntax. (And you need to review the translation for severe bugs and security issues.)\n. @PascalPrecht No idea what you mean. What I mean is:\nfunction ComplexMessage(commentCount, userCount) {\n    return commentCount + \" comment\" + (commentCount == 1 ? \"\" : \"s\") + \" by \" + userCount + \" user\" + (userCount== 1 ? \"\" : \"s\");\n}\nwritten in a translatable way. There are two parameters here (commentCount, userCount), the offset property does not change the fact ng-pluralize works with just one parameter (count). The offset functionality is IMHO just a bells-and-whistles feature (just substracting a constant from the numeric parameter), which is quite unnecessary given much more important features are missing.\n. @DWand The encoding-by-a-function solution would make the result not JSON, which would be a downside, I guess. You could do that in a bit more opaque way by wrapping it in an array instead of a function call, e.g.\n{\n    \"normal-key\": \"translation\",\n    \"ns-key\": {\n        \"subkey\": \"subtranslation\"\n    },\n    \"pluralized-key\": [{\n        \"thing1=1&thing2=2\": \"translation variant 1\",\n        \"thing1=few&thing2=0\": \"translation varint 2\"\n    }]\n}\nbut I agree it is not really beautiful. :-) But more to the point, I have reservations against this solution because of the multiplication of combinations, see my comment on the proposed patch.\n. @knalli: Well, that\u2019s basically the approach I took, isn\u2019t it? Only that I used AngularJS\u2019s native interpolation syntax ({{expression}}, provided by $interpolate).\nAnd as I have already said: the set of possible keys is fixed (and every language uses a subset of those), and the function number\u2192key is a per-locale constant. I.e. you could either use the already-implemented version from ngLocale (and ask for it to be publicized as a valid API), or copy/reimplement yourself in the localization framework. There is no reason every project/translator should reimplement that.\n. ",
    "lpaini": "Hi guys, I believe the best way is the @knalli proposal, we're implementing a lot of modules right now, but we think that we can develop this issue in a few weeks if it's not solved by then!\n. ",
    "fhemberger": "There is already a standardized format for translation of such cases called ICU Message Format and a good JavaScript implementation for it.\nIt also handles cases such as multiple plural forms (e.g. in some eastern languages), male/female versions, multiple placeholders, etc. This is a example usecase:\n{GENDER, select,\n    male {He}\n  female {She}\n   other {They}\n} found {NUM_RESULTS, plural,\n            one {1 result}\n          other {# results}\n        } in {NUM_CATEGORIES, plural,\n                  one {1 category}\n                other {# categories}\n             }.\n. ",
    "Narretz": "+1 for using a standardized way (if sensible)\n. Could you provide an example of what this looks like? It's hard to keep up when you don't know the interals well.\n. Thanks for the swift work. I will test this soon.\n. Yup, that works! Thanks! Is the difference documented? I must have read over it then.\n. I looked at  static / url loader, they are very simple indeed. \nSo for me the basic question is, why not make the whole API even simpler and turn three types of specifying an url into one? A custom loader is not difficult, but in so many cases it's also nothing but specifying a different url than you can describe with static / url loader. For example, when I have static files in dev and an endpoint in prod, at the moment I'd either need to write my own loader, or decide based on environment, which loader to use. If I had only one loader, it's be as simple as writing the templateUrl into a config, and off you go. Also, having a function as a second option to using a string is a pattern that is all over angular already, so it makes the code easy to discover.\nMy suggestion isn't that there should be only one loader: partialLoader can remain as is, but static / url should be one, and it should share the templateUrl format.\n. Hi @DWand , I totally forgot about this issue. :( But it's cool you want to take a stab at it. I'll implemented a very simple version of this for myself, I'll post it next week.\nBackward compability is a must here. Technically it could even live in a separate repo, but having it in core is probably the best. But that's not for me to decide.\n. So, here's the basic urlLoader I implemented:\n```\n'use strict';\nangular.module('mssRegApp').factory('translateUrlLoader', [\n '$q',\n '$http',\n function ($q, $http) {\nfunction parseUrl(templateUrl, targetLang) {\n  return templateUrl.replace(/{lang}/g, targetLang);\n}\nvar url;\nreturn function (options) {\nif (!options || (!options.templateUrl)) {\n    throw new Error('Couldn\\'t load static files, no templateUrl specified!');\n  }\nif (typeof options.templateUrl === 'string' || options.templateUrl instanceof String) {\n    url = parseUrl(options.templateUrl, options.key);\n  } else if (typeof options.templateUrl === 'function') {\n    url = options.templateUrl.call(this, options.key);\n  }\nvar config = {\n    url: url,\n    method: 'GET',\n    params: ''\n  };\nif (options.config && options.config !== null && typeof options.config === 'object') {\n    angular.extend(config, options.config);\n  }\nvar deferred = $q.defer();\n  $http(config).success(function (data) {\n    deferred.resolve(data);\n  }).error(function () {\n    deferred.reject(options.key);\n  });\n  return deferred.promise;\n};\n}\n]);\n```\nWhat can it do?\nThe first parameter is the templateUrl (bad name), which is either a string, where the loader will insert the current language code at the position that is specified, or you can define a function that will receive the current language key and must return the url where the translation lies.\nThe second parameter is the http config, so you can customize the request to your heart's content.\nExample config looks like this:\n$translateProvider.useLoader('translateUrlLoader', {\n    templateUrl : 'translations/translations-{lang}.json',\n    config : {\n      transformResponse : $httpProvider.defaults.transformResponse.concat(\n      [function(data) {\n        data = data.result;\n        return data;\n      }])\n    }\n  });\n. ",
    "saabi": "Though messageFormat apparently takes care of all the complexities and is based on a standard, suggesting that we don't need another engine, I still like your third proposal more as it seems to me to be the most flexible.\nAt some point, someone could even come up with a smaller but messageFormat-equivalent engine (as far as using the standard, not necessarily the API) and it would be great to be able to write a small piece of glue code to integrate it into angular-translate.\n. ",
    "tamtakoe": "Bad syntax. Better:\nphrase: April 15, 2013 Tom bought 1 pear and 2 apples\nTemplate:\n{{ 'SmthBoughtPearsAndApples' | i18n:date:name:sex:pearNum:appleNum}}\nLocale en-EN:\n'SmthBoughtPearsAndApples': '{1,date:fullDate} {2} bought {4} {4|pear|pears} and {5} {5|apple|apples}'\nLocale ru-RU:\n'SmthBoughtPearsAndApples': '{1,date:fullDate} {2} {3|\u043a\u0443\u043f\u0438\u043b|\u043a\u0443\u043f\u0438\u043b\u0430} {4} {4|\u0433\u0440\u0443\u0448|\u0433\u0440\u0443\u0448\u0443|\u0433\u0440\u0443\u0448\u0438|\u0433\u0440\u0443\u0448\u0438} \u0438 {5} {5|\u044f\u0431\u043b\u043e\u043a|\u044f\u0431\u043b\u043e\u043a\u043e|\u044f\u0431\u043b\u043e\u043a\u0430|\u044f\u0431\u043b\u043e\u043a}'\n. Add, please, this functionality https://github.com/lgalfaso/angular-dynamic-locale and option\n$translateProvider.synchronizeLocale = true\nIt is important. @danicomas is right\n\nif you want change the language, also want change the currency, date,...\n\nI think it is most popular case\n. You are right, translation and localization are different things. But we change it together very often.\nI offer make service $translateLocale.\n$translateLocaleProvider.synchronizeLocale {boolean} true \u2014 change locale if language was changed and inside out;\n$translateLocaleProvider.useUrlLoader\n$translateLocaleProvider.useStaticFilesLoader\n$translateLocaleProvider.useLoader('$translatePartialLoader' ... \u2014 Like translations loaders;\n$translateLocale.use {function} \u2014 take localeId and change locale (it makes sense if synchronizeLocale = false);\nWe don't cache locale, but if synchronizeLocale = true we use translations cache.\nP.S. for message format we use $translateMessageformatLocale from messageformat plugin or custom services. Each locale service listen $translateChangeSuccess event and change locale. $translateChangeSuccess need langKey argument (now it get only event argument). Translate  service listen $locale.id and change language\n. Like https://github.com/lgalfaso/angular-dynamic-locale. They load locale file, cache it, override old locale and broadcast $localeChangeSuccess. Very simple. 150 code lines.\n. $translateCache is not exist. I offer to make it. In reality it alias of $templateCache. $templateCache caches html-templates and be used by directives which use template. $translateCache caches json-translations and be used by translation loaders. $translateCache and $templateCache have the same api. It is easy for understanding for angular-developers.\nIt is required because now we can't include translation json-file into application js-file. We can use $translateProvider.translations(), but it work only in config section. Actually we can't build modular lazy-loading application (without polyfills) where translation have been included in the module js-file. We can load translation only from separate file. It bad, because it is extra request to server and we always require file (f.e. en.json) with unaltered name even if the translation has changed. Browser can cache it and we get old version. When translation is into module js-file which we random rename after every change this problem disappear.\n. > What is the reason it should be required?\nYou're right, it is not absolutely necessary. I can cache translations in my loader (I use it now). I do not argue. I offer change architecture of this module, to make it easier\n\nWhy should translations by the loaders being cached?\n\nGenerally application has two version: develop and build. For develop we don't care about performance and load each resource separately. For build we compile each module in one file. Ideally build looks like\nbuild_en\n|- index.html\n|- module1\n   |- 0e07709d34e5c415e8eea1a6f86f1e1c.js\n   |- locals\n      |- fr.json\n      |- de.json\n|- module2\n   |- 6705ef798c9b04b6a9d85dc6c74db136.js\n   |- locals\n      |- fr.json\n      |- de.json\n...\nWe include into js-module file all of its resources (javascript, css, templates, translation, small pictures...). We can't use config phase for including translations because we load other modules after Angular bootstrap (by AngularAMD f.e.). When we use $translateCache we can include current translations into module file on the fly. Current translations we take from cache which we had prepared in advance from json-files with translations by Grunt. When user change language we load other translation from seperate json-files for each loaded module (language changing is rare operation). Now we need write own loader for caching. It's not cool.\n. > At which point you need this cache?\nI try explain how I use $templateCache for modular project. For develop all templates load from server as separate files. For build I form extra code by Grunt. F.e.\nmodule1:\njavascript\ndefine([\n    'app'\n    ...\n], function(app) {\n    app.run(function($templateCache) {\n        $templateCache.put('templateUrl.html', 'template content');\n        ... //Here Grunt puts all templates from module1 folder\n    });\n})\nmodule2, module3...\njavascript\nthe same...\nIt is very easy. I think It is good way for cache translations too\n\nYou want to include all languages into one file?\n\nNo. Only current language. We have several build for each language. Current language we know from domain/session/server and give corresponding site version (f.e. from folder build_en). User get index.html and 0e07709d34e5c415e8eea1a6f86f1e1c.js (first module: css, html, translations, js in one file). Next: user go to other page and get 6705ef798c9b04b6a9d85dc6c74db136.js (second module, only all resources in one file). Next: user change language to fr and get module1/locals/fr.json and module2/locals/fr.json (separate translation file)\n. > Do you mean a completely new site?\nNo. It is other module of one site. In real situation we have some modules. F.e. common, auth, comments, mainPage, newPage, blogPage. User go to site.com/news and get module common, common load auth and newPage. Next user go to  site.com/blog. Router load blogPage. blogPage load comments. It is one site with one Angular app. I can load another module when the application is already running :-) https://github.com/marcoslin/angularAMD. It work excellent!\n\nWhy does the user should get still translations for module1?\n\nGood question. Ideally we have information about modules that are currently and load translations only for this. Really we suppose that all loaded modules are necessary and load translation for all loaded modules. I think, users change language more and more and more seldom then users load pages. There is no point in optimise it.\nOther answer (if I haven't understand question correct). User should get still translations for module1 because the first he open english version and next he change language to french.\n. Unfortunately I can't use original partial loader. I copy it, renamed and add one parameter into $http options: cache: true. Next I use for each module:\njavascript\napp.run(function($cacheFactory) {\n    var cache = $cacheFactory.get('$http');\n    cache.put('/compiled/module1/locals/en.json', '{\"MODULE1.HELLO\":\"Hi!\"}');\n    // Other translations string added by Grunt\n});\nI think not bad if cache will be true by default...\n. When no cache is needed? I can't think. On the contrary, it is needed for all situations. Angular templates cache by default. You can't switch off it. Translations are static resource like templates.\nWe also can add a cache options into existent loaders (url, static, partial) it solve the problem. But I think options cache: false need never nobody...\n. PR https://github.com/angular-translate/angular-translate/pull/524\n. There is not problem of dot notation. Your example doesn't work if we use filter. It plugin's bug.\nhttp://plnkr.co/edit/PtGl3tyZYECO0JSAFoYh \u2014 doesn't work\nhttp://plnkr.co/edit/JnPqKRzPKK9eXWoGAo50 \u2014 work (when I add this into filter)\n. OK. I need to write tests?\n. PR https://github.com/angular-translate/angular-translate/pull/511\nI dont know how test filter in template...\n. I add test and make rebase but \"readme\" commit stay on. Maybe I can try to make new branch from canary and push it?\nPlease, make step-by-step tutorial in Contribution Guidelines with Github commands\n. I started branch patch-1 on master. Next I rebased patch-1 to Canary. Next I pushed origin patch-1 --force. I think it will be easier if I make new PR. Write me, please, what steps should I take?\n. I squash it, but up to now can't make rebase.\ngit rebase canary\ngit push origin patch-1 --force\nput my commit on top readme commit\ngit rebase origin canary\nleads to a conflicts\nTry to rebase, please\n. I don't know what I have to do for removing readme commit. I try all variants!\n. Please, merge master on canary\n. My actions:\nFork angular-translate/angular-translate to tamtakoe/angular-translate by Github interface\nclj\n~/Projects $ git clone git@github.com:tamtakoe/angular-translate.git\n~/Projects cd angular-translate\n~/Projects/angular-translate (master)$ git checkout -b feature/enable-cache\n~/Projects/angular-translate (feature/enable-cache)$ git commit -am \"feat (loaders): enable cache\"\n~/Projects/angular-translate (feature/enable-cache)$ git push origin feature/enable-cache\nCreate PR angular-translate:canary  from tamtakoe:feature/enable-cache by Github interface\nI can not make correct PR from last version of master because canary was branched from old version of master. We need update canary from master\nPS. From what program you take this screenshot? gitk?\n. This is canary contain last master in my fork and I can't rebase it. I remove fork, fork it anew and make new PR https://github.com/angular-translate/angular-translate/pull/529.\nPlease, synchronize master in canary that was not problem.\n. I use it long time with cache enabled and with cache disabled. No difference (excluding extra request for translations, if they are not in the cache :-)\nI thought about unit test and decide that existing test work good. It checks if we delete part its cache is cleared. Native cache performance verified angular cache factory tests\n. > Moreover, the cache property cannot be only true but also a custom cache object constructed by the $cacheFactory\nYes! That is why I offered to make $translationCache. I made it. And make tests. See PR\n. If I make something for Angular I try make it at most like Angular style. Because 1) angular creators are more experienced than I am, 2) developers who will use my product learn it quickly. Why angular creators didn't make same API for template cache? I think, because it doesn't need anyone. I dont know why developers need to change only translation (or template) cache on own cache.\nIf you can change default cache, you write\njs\n$http.defaults.cache = $angularCacheFactory.get('defaultCache');\nIt change cache factory for translations. No problem.\nI propose to use $translationCache service instead of useCache or useDefaultCache methods not because it is good or bad, but because it is in angular style and more understandable.\nMaybe make it as first step? If someone to come here with same real problem we make custom cache support.\n. What about add this PR to master? Its important. We can't set translations to cache on build now.\n. My descision not provides language changing but angular-translate not provides it too. It can't change locale, it can't change translation for strings translated by $translate. We have to do it manually. Unfortunately language changing without page reloading is myth now. My descision is only first step.\n\nWhy is that even more worse?\n\nBecause it contains more letters. If you make a big project with a hundred and more controllers you will not embed the complex structures in each controller\n$translate('noticeBadRequest').then($message.error); \u2014 too verbose. And you have to inject $translate into each controller. All this is contrary to the principle of dry.\n\nBack to your errors service, why do you not write...\n\nWhat do $translate.translate does? I have no found it in the API\n\nAgain, where is the benefit for that interpolate utility?\n\nWe will have native parser of expressions like 'key | translate:opt'. I show above than there are real problems that we can not solve the existing methods in any big project\n. > The language can be changed at runtime\nNo :) At list you have to change locale manually by own code. I mean that angular-translate not provide interface language changing out of box.\n\nNot the number of letters should matter, but the readability of code...\n\nI agree. I mean that it is meaningless code for controllers. it is infrastructure code not buisiness logic. That's why it need to be in one place. By the way speaker on your video said \"You'll make the controllers as thin as possible\"\n\nDo not mix DRY with delegation or structures of async programming\n\nDo you know about resolve in routers?. It is one place where you do general async operations and use their result in controllers. You don't get the same data in each controller. Translation is the same situation. You move general async logic in one place and work sync in controllers.\nDoubleClick is much less then my project. I understand how they build project, but I don't understand how they develop it. Developers see [[ key | comment ]] syntax instead of normal text or rebuild project after each changing?\n. I wrote about it in my issues. Summary (what problems I encountered)\n1) changing locale if language was changing doesn't work\n2) using translate filter in deep expressions in templates is impossible\njs\nform-errors=\"{\n  required: '{'errorRequired' | translate}', //incorrect\n}\"\n3) using $translate service inside each controller some difficult\njs\n$translate('noticeBadRequest').then(function(title) {\n  $translate('noticeBadRequestDescription').then(function(description) {\n    $message.error(title, description);\n  })\n})\nNow you can't use angular-translate in serious project without crutches. And I am only talking about interface translations.\nMaybe I didn't understand your question. What do you mean when wrote about specific?\n. > including reloading all the stuff.\nWhat staff do you mean?\n\nYep. That's an limitation of AngularJS.\n\nI have made issue: https://github.com/angular/angular.js/issues/7340\n\nAnyway, since 2.1 I'd recommend\n\nGood! :+1: \nI still think it is difficult for big project. Likely in this situation we would load translations in router resolve section and use $translate.instant\n. > Given your example, which values can name be given? Infinite?\nIt is name of social network. But if we don't want to duplicate code of social button factory we need use name as variable. But we can use transit object, f.e.\njs\nvar translations = {\n  'socialName-facebook': $translate.instant('Facebook'),\n  'socialName-google+': $translate.instant('Google+'),\n  'socialName-vkontakte': $translate.instant('Vkontakte')\n}\nfunction createSocialButton(name, url) {\n    var translation = translations['socialName-' + name];\n    createButton(translation, url);\n  });\n}\nI think angular-translate not will be useful for production in nearest future, but it is absolutely necessary for develop, because we can't use build task with grunt-watch\n. @lepipele Angular-translate is the best \"framework\" for multilingual apps. It is true. And it may be better!\nYour way is good. Since version 1.3 there is ngMessages in Angular. Again it is for simple cases. You can't change all js-messages to html-messages. What about global server errors (502? 503...)? non form errors? errors of services without templates? You will heap up error templates to main.html? What about meta tags if you define it in router settings?\nI try two ways for realtime translation: include $translate into application subsystems (errors system, messages system, meta-tags system) and use $translate(...).then(...) into them. I find it too complicated. Or use $translate.instant() and load translations table in router resolve. It is easier. Now I use this way.\n. ",
    "mwunderlich": "Hi, \nI've just come across this discussion from last year while trying to find a way to support (multiple) plural forms in angular-translate. From the thread above, I understand that the current solution is somehow using messageformat.js to provide this functionality. \nIs there a code example somewhere that demonstrates how to support languages with several plural forms (such as Russian, Arabic or Gaelic)? Thanks a lot. \nCheers, \nMartin\n. ",
    "ChristianKohler": "Hi @PascalPrecht \nFirst of all, thank you for creating such a great translation module.\nThis works stand alone but not with yeoman (bower.json).\nE.g.\nbower info PascalPrecht/bower-angular-translate\ndoesn't work. I guess it's because the package name is \"angular-translate\". \nDo you have a idee how I could get this work with bower.json?\n. Great. It works with\n\"angular-translate\": \"https://github.com/PascalPrecht/bower-angular-translate.git#0.6.0\",\nin bower.json.\nThank you\n. ",
    "czechspekk": "Pascal :) cool !\nIt worksi perfectly out of the box \nGreat work \n. ",
    "mlegenhausen": "Not at runtime but in different modules\n```\nangular.module('a', []).config(function($translateProvider) {\n  $translateProvider.translate({\n    'foo': 'bar'\n  });\n}});\nangular.module('b', ['a']).config(function($translateProvider) {\n  $translateProvider.translate({\n    'foobar': 'barfoo'\n  });\n}});\n```\nThe result is that only foobar \"survives\" or I am doing it wrong?\n. I used it for a module that contains a directive which should be reusable so I don't want to register the strings for this in a single table and at another place I have app wide translations. Maybe I should say I currently don't use it for translation purposes but for mapping enum like strings to human readable text.\nCan you give me an example for my previous posted code?\n. And how to define in sub1 and sub2 other translations?\n. I used underscores _.extend method and it works like expected.\n. Thanks :)\n. ",
    "hydrotik": "I asked this in https://github.com/angular-translate/angular-translate/issues/680 but thought I'd ask here as well. Would be great to be able to get the selected language used in the config with translateProvider so that I can switch between entirely different templates that are assigned to my config. Sometimes not only is the content changing, but the structure and markup of the page changes.\n. Is it possible to get this in the translationProvider? For example I also want to switch between templates that are being loaded into my controller depending on the language.\n. To use the example that is in the other issue I referenced:\n``` javascript\nangular.module('ngApp', [\n        'ui.router',\n        'pascalprecht.translate',\n    //Pages\n    'ngApp.home'\n])\n\n.config(function myAppConfig($urlRouterProvider, $locationProvider, $translateProvider) {\n    $urlRouterProvider.when('', '/#!/home');\n    $urlRouterProvider.otherwise('/#!/home');\n\n    // removed Hash for url share support\n    $locationProvider.html5Mode(false).hashPrefix('!');\n\n    // Set Language Support\n\n    $translateProvider\n    .translations('en', { /* ... */ })\n    .translations('fr', { /* ... */ })\n    .registerAvailableLanguageKeys(['en', 'fr'], {\n        'en_US': 'en',\n        'en_UK': 'en',\n        'fr_CA': 'fr',\n        'fr_FR': 'fr'\n    })\n    .fallbackLanguage('en')\n    .determinePreferredLanguage();\n});\n\n```\nThen in my home sub module do something to the effect of:\n``` javascript\nangular.module('ngApp.home', [\n        'ui.router',\n        'ngAppContent'\n    ])\n/**\n * setup the config\n */\n.config(function config($urlRouterProvider, $stateProvider, $translateProvider) {\n    $stateProvider\n        .state(_moduleParams.id, {\n            url: '/home',\n            views: {\n                \"ui-view\": {\n                    controller:'HomeCtrl',\n                    templateUrl: _moduleParams.id + '/home.' + $translateProvider.use() + '.tpl.html'\n                }\n            }\n        });\n});\n\n```\nthis would enable me to use the angular-translate library to select an alternate template when the content contains different markup and visual layout. I realize this a wholehearted switch of the content, but I'd like to be able to do this as well as use the existing features for binding languages to template vars.\n. OK thanks, looks like I'm rolling my own provider.\n. ",
    "megahertz": "If you like to use  'Human strings', you can try mg-translate\n. ",
    "firehist": "@PascalPrecht and @knalli Thank you for your try to answer even if it's not necessar directly related to ngTranslate.\n1. This error appear in the http server which is served by ng-boilerplate console when I launch karma:continuous grunt task (launch karma test with this configuration: https://github.com/joshdmiller/ng-boilerplate/blob/master/karma/karma-unit.js)\n2. More details\n   - I updated src/app.js file by adding translateProvider configuration (https://github.com/joshdmiller/ng-boilerplate/blob/master/src/app/app.js)\nFROM\njavascript\n// Some code\n.config( function myAppConfig ( $routeProvider ) {\n    $routeProvider.otherwise({ redirectTo: '/home' });\n})\n// Some code\nTO\njavascript\n// Some code\n.config( function myAppConfig ( $routeProvider ) {\n    $routeProvider.otherwise({ redirectTo: '/home' });\n    /** Start edit **/\n    $translateProvider.registerLoader({\n        type: 'static-files',\n        prefix: 'i18n/',\n        suffix: '.json'\n    });\n    $translateProvider.uses('fr_FR');\n    /** End edit **/\n})\n// Some code\n- I didn't updated the related spec file src/app.spec.js (https://github.com/joshdmiller/ng-boilerplate/blob/master/src/app/app.spec.js)\n- I updated the karma config by adding some reference to ng-translate, ng-cookies\nMy question is how to test that the translateProvider try to catch the right url/file on the server. I tried a lot of different configuration inspired examples of different angular docs: http://docs.angularjs.org/api/ngMock.$httpBackend\nI hope that all this informations can help you to helping me :D \nHave a good day and again thanks for all!\n. @knalli Thanks. I already took a look to this file but the error \"Error: Unexpected request: GET i18n/fr_FR.json\" was still there.\nI'll try again and report here updates and results\n. Hey guys!\nThanks again for your responses.\nI removed\njavascript\n$translateProvider.uses('fr_FR');\nfrom my app.js and its works great.\nThank you!\n. Hey guys!\nFirst of all thanks for this lib ;)\n@PascalPrecht ask me there grunt-angular-translate to post a comment on this thread.\nI think that moving grunt-angular-translate into this project under angular-ui umbrella it's a good idea.\nThe only bad point of this lib, is that there is not an extraction tools, it's why I decided to develop this gruntjs project. It works in production since several months without any problems on our products (manager.teads.tv) and soonly on our website (teads.tv).\n. @PascalPrecht For sure! What's the steps?\n. @PascalPrecht It should be better I think to wait for a 2.0 release to move all project and release website.\nBTW, if you need some help about website or smth else, I'm free for helping!\n. MMh, I'll try to that.\nFor exemple the following translation : \"Hey, I really fan [icn_ok]!\"\nIt should be good to configure angular-translate to replace the [icn_ok] pattern by some custom code.\nIf translate service provide a custom method like the following code:\n$translateProvider.shortcodes({\n   '[icn_ok]': '<img src=\"http://icon_ok.png\" />'\n});\n// or\n$translateProvider.addShortcode('[icn_ok]', '<img src=\"http://icon_ok.png\" />');\nAnd then in the HTML:\n<h1>{{'My fabulous translation [icn_ok]!' | translate}}</h1>\nI use an image for this exemple, but you can think about anything else. This shortcode can allow people to use it into translations table/file without contact the developer (enterprise issue :D)\n. I was thinking about this kind of solution, like plural do in angular-translate.\n. ",
    "marplesoft": "I'd like to suggest re-opening this issue. I think the root problem wasn't addressed.\nIt seems to me that the core problem is that if you register some loader in your app module's config method, then it will make the http call to grab the json strings file upon app module initialization. Which is fine for the actual app. But when trying to do unit testing, as soon as you try to angular.mock.inject anything, anywhere, it will initialize the app and throw the error mentioned above: Error: Unexpected request: GET foo.json.\nIt seems to be a chicken and egg problem because you can't use $httpBackend.when('GET', 'foo.json'... because to even inject $httpBackend requires the app module to be initialized beforehand.\nThe only solution I've read about is to break out all your app \"components\" (i.e. services, filter, directives, controllers) into a different module from the main app module. Then during unit testing you only load the child modules and not the parent where the app initialization code (setting up of $translateProvider) happens. Seems sort of awkward to me but it is doable. \nAny other ideas? I'm not sure whether this is even an angular-translate problem, it may be more of an app module fundamental problem, but it seems one that needs solving if you want to unit test an app using angular-translate.\n. I've been struggling with this for days. If you can provide an example, that would be a huge help.\n. Thanks @knalli and @PascalPrecht. But I think I'm still missing something. To illustrate the problem I'm having (and the problem it seems that everybody who uses angular-translate would have), I've published a simple example here:\nhttps://github.com/marplesoft/unitTestingExample\nYou'll find a simple app that uses angular-translate with the static file loader and has one controller and one service. The app works fine. I've also written two unit tests which I run under karma/jasmine. You'll notice that I've employed your suggested approach to grab the $translateProvider and in my case, call translations(...) to provide mock data. This prevents the static file loader from kicking in and allows my unit test of the translations to work.\nHowever, you'll notice that my other unit test of my service fails with the following error:\nChrome 30.0.1599 (Mac OS X 10.8.5) additionService should add numbers correctly FAILED\n    Error: Unexpected request: GET strings-en.json\n    No more request expected\n        at Error (<anonymous>)\n        at $httpBackend (/Users/ryan/Dev/unitTestingExample/app/lib/angular-mocks.js:959:9)\n        at sendReq (/Users/ryan/Dev/unitTestingExample/app/lib/angular.js:9333:9)\n        at $http (/Users/ryan/Dev/unitTestingExample/app/lib/angular.js:9124:17)\n        at /Users/ryan/Dev/unitTestingExample/app/lib/angular-translate-loader-static-files.js:10:7\n        at loadAsync (/Users/ryan/Dev/unitTestingExample/app/lib/angular-translate.js:186:40)\n        at Function.$translate.uses (/Users/ryan/Dev/unitTestingExample/app/lib/angular-translate.js:286:13)\n        at /Users/ryan/Dev/unitTestingExample/app/lib/angular-translate.js:21:18\n        at Object.invoke (/Users/ryan/Dev/unitTestingExample/app/lib/angular.js:2990:25)\n        at /Users/ryan/Dev/unitTestingExample/app/lib/angular.js:2842:71\nChrome 30.0.1599 (Mac OS X 10.8.5): Executed 2 of 2 (1 FAILED) (0.648 secs / 0.03 secs)\nI could do the same mocking of the translation loader here but that would mean that in every unit test suite I write - could be 20, 50, 100 of them - regardless of whether the code under test has anything at all to do with angular-translate, I'd have to mock the translate stuff. Which seems really onerous to me.\nEither I'm missing a best practice here or something is sort of broken about this, no?\np.s. I'm not the only one with this problem, see here:\nhttp://stackoverflow.com/questions/17345928/how-do-i-test-controllers-with-angular-translate-initialized-in-app-config\nhttp://stackoverflow.com/questions/18876290/how-do-unit-test-with-angular-translate\n. Hi @DWand - appreciate the thoughts.  \nFor your first suggestion, sure I could break out some services and controllers that don't explicitly use $translate to their own module. Just seems like a lot of restructuring to be able to do testing. \nIn regards to mocking the loader, yes that's what I've done in my example. It does work, but would require me to repeat that for every single unit test suite in the project regardless of whether it uses $translate or not.\nAs I said earlier, I'm not so much blaming angular-translate for doing anything wrong. I'm not sure where the blame really lies, perhaps in the implementation of angular-mocks or a more fundamental aspect of angular's design. In any case, I can't imagine that I'm the first person to ever deal with this problem and there's got to be some kind of solution.\nMaybe there's a way to initialize the module once, mock the translate loader, then use that module instance for all test suites?\n. @PascalPrecht Yep it's becoming clearer now. Your suggestion would probably work for that one test suite, but angular mocks appears to tear down the injector and module after every test. So it doesn't look like you can hold any state in the $translateProvider from one test to the next. It seems like a non-starter to be able to unit test without doing some app restructuring.\nOne approach I can think of to solve this is to have the test runner exclude the app module's config function and instead have an alternate config function implementation for testing. In the later, you could declare some other method of loading translation data (either just use in-line .translations(...) or a mocked loader). The downside though is that you need to maintain two different config implementations and thus risk getting them out of sync and wasting time chasing down test errors.\nI might try this out today and post an example for feedback if I can get it working.\n. Yeah what you suggest is probably the only way to go. I still don't like having to spend cpu cycles setting up mocks for objects that aren't used - hundreds of times - when running my test suite but the perf cost probably isn't really that bad. \nThe point I was stuck on initially was how to avoid having to repeat that loader mocking code for every test but the solution is probably obvious: create a helper function that does module setup and call that rather than calling the module(...) function directly in your beforeEach methods.\nI'll work on updating my example project with this approach and then post it here.\n. So in that example, what is provider1? Is that what mocks the loader?\n. I created a branch of that example project that uses the helper function I mentioned. It seems to work fairly well. See what you think.\nhttps://github.com/marplesoft/unitTestingExample/tree/moduleHelper\nIn particular, see the following files:\nHelper function that sets up in-line translations (either default or a map passed in: Code\nUse of the helper function in a unit test that does a sanity check of the translation system: Code\nUse of the helper function in a unit test that has nothing to do with translation - just uses default (empty) translations: Code\n. I couldn't get that to work for some reason. Here's my helper:\n``` javascript\n'use strict';\nfunction myappModule(translations) {\n    var DEFAULT_LANG = 'en';\n    var DEFAULT_TRANSLATIONS = {};\nmodule('myapp', function config($provide, $translateProvider) {\n    $provide.factory('translateLoaderMock', function($q) {\n        return function loaderFn(options) {\n            var deferred = $q.defer();\n            return deferred.resolve(options);\n        }\n    });\n\n    $translateProvider.useLoader('translateLoaderMock', translations || \n                                                        DEFAULT_TRANSLATIONS);\n    $translateProvider.preferredLanguage(DEFAULT_LANG);\n});\n\n}\n```\nTests failed with:\nTypeError: $injector.get(...)(...) is undefined in /Users/ryan/exampleApp/app/bower_components/angular-translate/angular-translate.js (line 186)\n    loadAsync@/Users/ryan/exampleApp/app/bower_components/angular-translate/angular-translate.js:186\n    $translate.uses@/Users/ryan/exampleApp/app/bower_components/angular-translate/angular-translate.js:286\n    @/Users/ryan/exampleApp/app/bower_components/angular-translate/angular-translate.js:21\n    invoke@/Users/ryan/exampleApp/app/bower_components/angular/angular.js:2990\n    createInjector/<@/Users/ryan/exampleApp/app/bower_components/angular/angular.js:2842\n    forEach@/Users/ryan/exampleApp/app/bower_components/angular/angular.js:130\n    createInjector@/Users/ryan/exampleApp/app/bower_components/angular/angular.js:2842\n    workFn@/Users/ryan/exampleApp/app/bower_components/angular-mocks/angular-mocks.js:1791\nDo you see anything I did wrong?\n. ",
    "emiaj": "I stumbled upon this issue as well, I used a global hook that runs for each one of the tests:\nhttps://gist.github.com/emiaj/7209915\nWith this I don't have to worry to remember on injecting the code to reset the translate provider on each fixture.\nAnd if I need to create a test that involves asserting for translated content then I create a beforeEach that is under the scope of my fixture(describe(....)) and just override the default settings.\n. ",
    "x057": "Hi,\nI am using your partial loader plugin and and have problems testing it. I was thinking about the way you're doing your gets. \nangular-translate-loader-partial.js lines 14-17:\n$http({\n          method: 'GET',\n          url: this.parseUrl(urlTemplate, lang)\n        })\nWhy don't you give this a try:\n$http.get(this.parseUrl(urlTemplate, lang), {cache: $cacheFactory})\nI assume the json files would be cached and we could simply test with $cacheFactory.put(\"apps_route_to_json_file\", tests_route_to_json_file)\nThis could work. Right?\n. Hi again,\nI've hacked the angular-translate-loader-partial.js myself and used $templateCache for it.\nSo the get should look like this:\n$http.get(this.parseUrl(urlTemplate, lang), {cache: $templateCache})\nAnd some lines below:\nthis.$get = ['$rootScope','$injector','$q','$http','$templateCache',function ($rootScope, $injector, $q, $http, $templateCache) {...})]\nAnd of course line 10 should look like this:\nPart.prototype.getTable = function (lang, $q, $http, urlTemplate, errorHandler, $templateCache) {...\nThen in your tests before you start using .addPart or .uses add this:\ntemplate = $templateCache.get('app/i18n/main/en.json'); \n$templateCache.put('i18n/main/en.json', template);\nIt works perfect on my tests. Not 100% if templateCache is the ideal way to go though. But then again why not.\nDon't forget to preprocess json files...I actually preprocessed the json files with ng-html2js. Go figure.\nAnyway. Hope it helps.\n. ",
    "kaczmar2": "@emiaj When using the global hook (i18n.spec.base), I get [$compile:multidir] Multiple directives error: ex: error: [$compile:multidir] Multiple directives [myDirectiveA, myDirectiveB] asking for template on <div id...\nIs there a way to prevent this from happening?\n. Issue was when setting up directive unit tests - this had to be done in a particular way.  Otherwise, we would get the \"multiple directives\" error. You need to move the directive setup code before the mock data and call an additional $digest after the mock data setup:\n```\n// Wrong way\nbeforeEach(inject(function($rootScope, $compile)\n{\n  ... mock data ...\n  confirmMessage = angular.element('');\n  $compile(confirmMessage)(scope);\n  scope.$digest();\n}));\n// Correct way: we need the following workaround\nbeforeEach(inject(function($rootScope, $compile)\n{\n  confirmMessage = angular.element('');\n  $compile(confirmMessage)(scope);\n  scope.$digest();\n  ... mock data ...\n  scope.$digest();\n}));\n```\n. ",
    "aldopizzagalli": "thank you!!! You are saving my job and my time... ;)\n. ",
    "ianmurrays": "I don't mean to reopen this issue, but I managed to \"fix\" my tests using this module:\n``` javascript\n'use strict';\nangular.module('translateNoop', [])\n  .factory('$translateStaticFilesLoader', function ($q) {\n    return function () {\n      var deferred = $q.defer();\n      deferred.resolve({});\n      return deferred.promise;\n    };\n  });\n```\nJust include this in karma and import the module after your app:\njavascript\nbeforeEach(module('yourApp'));\nbeforeEach(module('translateNoop'));\nHope this helps. Previous solutions in this thread were not working for me and this seems to be simpler.\n. :+1: this would be really useful! I have a project where our translation keys are the actual phrases in english.\n. ",
    "erezcohen": "Sorry - not meaning to open this as well - however this could be useful:\nWe took the approach of ignoring the translation loader in unit tests, rather than being forced to modify each of the spec files.\nSee a simple solution at http://stackoverflow.com/a/29474122/145599.\n. ",
    "ilkercat": "@ianmurrays worked for me! ty\n. ",
    "gjungb": "As of http://kangax.github.io/es5-compat-table/ trim() is not supported in IE 8, wasn't sure this could matter ;-)\n. @PascalPrecht Since this is my first useful contribution to the OSS community I have to get acquainted a little more :-) Will have a closer look at the guide now...\n. ",
    "mboriani": "yes sorry, i have this two warnings:\nhttps://raw.github.com/PascalPrecht/bower-angular-translate/master/angular-translate.min.js-\nwas blocked due to a type mismatch MIME\nhttps://raw.github.com/angular/bower-angular-cookies/master/angular-cookies.min.jswas\nblocked due to a type mismatch MIME\n2013/5/13 Pascal Precht notifications@github.com\n\nAny other warnings or errors in your console?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/ng-translate/issues/46#issuecomment-17831180\n.\n. ok, i am doing it right now. I let you know.\nThanks for the prompt response\n\n2013/5/13 Jan Philipp notifications@github.com\n\n@PascalPrecht https://github.com/PascalPrecht\nhttp://stackoverflow.com/questions/7180099/including-js-from-raw-github-comperhaps..\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/ng-translate/issues/46#issuecomment-17831913\n.\n. it works guys. this was the example : http://plnkr.co/edit/MQtVIH\nThanks for the prompt response.\n. \n",
    "devreq": "Hi Pascal ,  i downloaded  last minified version angular 1.0.6,  and  this error not reproduced.\n. ",
    "doublemarked": "I spent the last hour debugging this same problem on my end. It turned out to be caused by the AngularJS Batarang extension being enabled in Chrome. I believe it's a bug in Batarang. Very very annoying.\n. For me it was just batarang.\n. That's a good suggestion, thanks.\n. Aha, @PascalPrecht, such a fast response! \nYes this is a little better, though still placing strings (even default placeholders) inside some JS feels wrong.\nAnother thought I had: It would be great if I could tell angular-translate to display an empty string instead of translation IDs. This would be far less jarring.\n. Actually, when I use the first,\nhtml\n<ANY translate=\"TRANSLATION_ID\"></ANY>\nI still see TRANSLATION_ID for a split instant.\nAnd hey, what's more - when I set in my DEFAULT_LANG a \"\" value for TRANSLATION_ID (as we discussed earlier), I still see TRANSLATION_ID flash for an instant. I only do not see TRANSLATION_ID if I set a non-blank value (for example, \" \").\nNot sure what to make of that. It may be something with my setup.\n. Aha, yes, I think you're right about the blank value evaluating as false. Sounds like a problem, right? Shall I make another Issue for that?\n. I can send a PR :)))\nI'm working on the plunk to reproduce the flash bug. Will update when I have something!\n. Here's a Plunk that demonstrates the flashing: http://plnkr.co/edit/xza4Am?p=preview\nNote two things:\n1. Overrides in app config work well.\n2. The second and third forms in the HTML still flash the translation ID while the locale is loading, despite the translation ID not being in the element body.\n. Great!\n. Hmm. I understand what you're saying, but not sure how those things relate to the flashing. In your plunk, you've uncommented both of the default values, and you've commented out the uses() call, disabled the locale file loading. It seems we then aren't using the async functionality at all, right?\nI've copied your plunk back over to mine, making the following small changes,\n1. Commented out one of the default values\n2. Uncommented the uses() call in the controller, so it grabs the locale file.\nDoing this, I still see the flashing.\nLet me know what you think?  http://plnkr.co/edit/xza4Am?p=preview\n. Thanks. I think what you're saying is that angular-translate is fulfilling\nthe translation obligation between config() and the use() call, and that\nthis is reasonable. That makes sense.\nI too have a locale (English) that is used most of the time. My goal here\nthough is to keep all locales together, not to have some sitting inline in\nthe App and the rest in a locale file.\nThis is particularly important when dealing with content maintainers, who\nshould be allowed to modify locale files and templates but not code.\nDo you have any ideas on how I might do that? Currently I'm always loading\nlocale in my controller, based on a URL component.\n. Yeah, maybe you're right. I should specify locale default as part of the production publication process, not at runtime. Good point.\n. Well, it's been fun working on this with you today! Thanks for your help :)\n. ",
    "mariussoutier": "Yes, it's certainly Batarang.\n. I don't know how, but it's just as simple as \"Enable batarang -> error\", \"disable batarang -> no error\", which is a shame because Batarang is extremely helpful, and so is angular-translate.\n. ",
    "danielmcormond": "This is a Batarang issue and has been fixed in https://github.com/angular/angularjs-batarang/commit/4eb6676a30af2e8a662f635214e23d71b2a3a0ad.\nA new version has not yet been released to the Chrome Web Store, but you can always install from source.\n. ",
    "markushausammann": "That was fast!! Thanks, I read the readme too fast and skipped over the link to the docs.\n. ",
    "lanlau": "great! i've tried to make a pull request, this is my first one ever....\n. @PascalPrecht sorry i didn't have time to work on it. will work on tne contribution guide this weekeend. i had some proxies issues at work with bower, i wasn't able to run the tests.\nEnvoy\u00e9 de mon iPad\nLe 30 mai 2013 \u00e0 22:09, Pascal Precht notifications@github.com a \u00e9crit :\n\n@lanlau still alive? :D Or should I take care of that?\n\u2014\nReply to this email directly or view it on GitHu\n. \n",
    "austinkottke": "Did anyone get this working ? So we can insert html ?\n. ",
    "ichernev": "ng-bind-html-unsafe is deprecated, and $sce.trustAsHtml should be used in conjunction with ng-bind-html. Is this implemented right now in translate?\n. I'm very sorry, I had stale cache and a custom angular-translate version before. The bower release is indeed good, you're using a separate repository for that, pretty cool :)\n. ",
    "guilload": "I could really use this feature too :)\n. Great!\n. ",
    "jkrot": "I think the example on the directive could be better but it works out of box with 2.0.\n. Would you recommend a better way to mock the staticFilesLoader functionality in a test?  I am having the same issue.\n. Hey @PascalPrecht currently just banging my head against the wall because I am not able to get any of my unit testing in karma and jasmine to like the async loaders.  Do you have any idea when help for this is going to be released?\n. Yea it is kinda what I was thinking,  now if I can only figure out the other problems I ran into when I upgraded from 1.0.7 of angular mock to 1.2.12.\n. I see the problem here, I expected the static file call to check the $translationCache before trying to make the $http call similar to what $templateCache does however that isn't what is happening.  I am not sure if this is really a bug or lack of documentation for $templateCache.. If the translations were in the cache, the http call failed but the translations didn't show even though they were in the cache already.  The app can basically run without internet if needed but checks for updated translations.  . From what I can tell the latter case is happening,  the cache is being purged due to the 404 response.  I had to work around this with a custom loader but wasn't something I was expecting.   Maybe an option for future configs for cache not to purge based on a failed load.. ",
    "mikkark": "The original question was also about using links and actually I'm not able to get that to work. I have a situation where I would like to feed the href url from the scope using curly braces. I have a plunker here: http://plnkr.co/edit/8eArYIXlcpybRqfhwcsl?p=preview. This is probably more a question of understanding how Angular works.\n. ",
    "tspaeth": "As of the current version (please don't refer or use to 2.0.0 anymore as it is very old now), you can use it in the directive (your second example) this way:\n<div translate=\"TESTING\" translate-compile translate-values=\"{'redirectUrl':redirectUrl}\"></div>\n. @chris2332 please do not duplicate comments in multiple tickets! (#576)\n. No, there is no such feature for \"locale specific link generation\" in this module. But maybe you could probably still do something with a filter/translate-filter and ng-href if really needed?\n. @Nicky-Agarwal Please don't comment on old, closed issues. \nFor \"how to\" - questions like you have, we suggest to ask these on Stackoverflow please - thanks: \nhttp://stackoverflow.com/questions/tagged/angular-translate\n. @cburghardt Could you specify your browser environment additionally? There have been a lot of changes to the ng-select / ng-options stuff though it might help to reproduce it directly :)\n. Analysis result:\nYup. There is a slight change in the select.js in AngularJS 1.22 causing this.\nhttps://github.com/angular/angular.js/commit/c2860944c61a0b910f703fe8a9717188ed387893#diff-0c5bee20e5ea71c419c05616636e4959R406\nIf you (for testing purposes) just add to L409:\n} else {\n  scope.$watch(render);\n}\nagain, the interpolation will work fine.\nBut more or the less, we'd need to understand the fix and reason for that and if there is not another approach of achieving the goal from 1.2.22+.\n. I'll try the next days. Sorry for the delay.\n. Okay... following this issue here https://github.com/angular/angular.js/issues/8651 and the suggestions, you could do something like this in the controller (just inject $element => controller definition element itself) - just modify it to select the right element for your purposes:\nangular.element($element[0].querySelector('select')).controller('ngModel').$render();\n. @jacqueslareau Careful when translating now - there have been a lot of improvements / additions to the docs for the 2.0.0 release! :-|\n. Well, it is a very old thread and the docs moved. Look here:\nhttp://angular-translate.github.io/docs/en/#/guide/14_error-handling\n. @vinyoliver please do not comment on closed issues if there is some issue you'd like to point out. thanks.\nAnyway: Did you read the referred chapters above on handling of non-existing translations?\n. Feel free to participate :-)\n. :+1: Optionally would be fine. \nThe second version looks familiar to most of us I guess. \n. Cool :+1: \n. np. Until the huge project goes into production, I guess angular-translate might have release 2.5.0 8-)\n. @zeeshanjan82 Please look into #260 - and we're happy to get any PR or concept work on this!\n. Is there something bad to say against upgrading the karma/jasmine stack in this improvement task? I just did it locally as I'm working with IDEA13 and I wanted to use the Karma-integration just coming up with Webstorm7 or IDEA13 :-). (so I volounteer for the next bad PR ;-) ) \nThe change is kind of small and works like a charm plus afterwards you can skip the var-JASMINE-config-dependency stuff.\n. @PascalPrecht see #273\n. Yep, this is the option. \nI'll \"re-integrate\" that version if the \"main\" guys think that this is cleaner. (was thinking the same, but coming from the java perspective, mixing types isn't always that adorable ;-) ).\n. yawn\nWell, here is the next version. I still see some potential optimizations like storing the fallback always as an array... no matter if 1 or n fallbacks exist...\nbut for now this should be the base for discussion :)\n. If you like it - nope. Should be done, hopefully working though (sometimes, the beauties... erm.. forget it 8-) )\n. Did you take a look at https://github.com/PascalPrecht/angular-translate/wiki/Dynamize-your-translations#passing-values-through-translate-service? \n. Quick and dirty based on your last public plunk... but the errors come popping up anyhow :)\nhttp://plnkr.co/edit/SQcCKR\nI didn't check if I miss something in my plunk. Maybe I'll also look into it later on.\n. @DWand I'll take a look. I was already a bit under way to analyze the problems and that the short term quick hack might be the refresh... \nI've got a delivery to finish until Sunday. If I'm faster, I'll take a look :-)\n. @PascalPrecht Well, you're mostly right. ;-)\nI think, we'll meet in the middle. The expected behavior is: \n- If primary fails - look for a translation in the fallback languages until a match is found\n- If fallback 'foo' fails, look at 'bar', if that even fails, look at 'bazinga' ... if that fails... well... display the key or whatever is configured as default action\nTo take a look at reality in my case: There might be translations of several languages in the app, but at the end, failures will fall back to English or German. (the stack above will probably consist of Spanish, Italian...)\nSo for some cases in my app, there will be 5 languages in memory probably as the fallbacks can be 4 additionally to the primary lang.\nConclusion: We're close together - maybe just my implementation is not correct :-)\nAs I see, #247 is already closed?\n. Well, the way it is currently (to load all fallbacks) isn't the way it ought to be :-). If we would manage it to load 1-n languages only after they're first needed, I also prefer that. \nAnd yes, I was also a bit worried about errors in the console of missing translations in case of missing files or sometimes also the default setting for missing translations at all. \nFor this second part I would suggest that we introduce a preference setting for the user how to handle missing files / languages. Either to have - as we call it - disco on the screen or to silently acknowledge this and probably delete the translation element from the fallback array or so on.\nSo I would see the following tasks (for me / you / whoever :-) ):\n- Make the fallback mechanism lazy loading and then caching a fallback language\n- Catch missing language files / 404 loaders\nAm I right? \n. Hm, does anyone of you know how to successfully execute a test with calling the \"CustomLoader\" factory several times? It is only executing the $timeout promise-resolve-function one time (which is understandable) - I currently don't know, how we should mock the factory for asynchronous loading of two separate language files :-|\nThe base test case is currently https://github.com/PascalPrecht/angular-translate/blob/master/test/unit/service/translate.spec.js#L640-L665...\n. @pavlo-yuriychuk I was more or less referring to https://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-29517923 when I was mentioning \"help\".\nBesides that to answer your idea: Yes, would be an option, but it has some implications of the current workflow I guess - regarding 404-handling etc.\n@PascalPrecht shall we discuss, whether to have a default fallback behavior for the fallback in case the fallbacks fail? ;-) \n. @DWand Ouch. Erm. A St Nicholas bug :-). \nShould be \nif ($uses === $fallbackLanguage[current]) {\nI'm sorry, couldn't do anything last week as project was keeping me away from fixing :-( \n. :+1: \n. Good idea, @knalli :+1: \nSomebody could do a sequence diagram? (e.g. with plantuml or similar...)\n. I am now confused with the comment of @knalli that I need a beer and I'll take a look at the sources of @Sanjo together with the rest then. Looks promising (har har) so far :-)\n. As I prefer looking at a usecase instead at test, I took the old ex7_load_static_files.htm from the demo dir and adapted it to the current \"problem\" case and current fallback-languages branch code.\nWell, somehow it works, but only somehow. :-)\nLazy loading currently doesn't refresh a key that is only to be found in the fallback languages. It will popup only, when switching to another language is invoked with uses. And what's weird: Another key only existing in another fallback-language does only come up, if THAT language is selected.\nI didn't have time to investigate into the source, but for testing purposes - here's a gist of that file (hopefully I haven't forgotten to include one of the source-parts in the correct order ;-) ):\nhttps://gist.github.com/tspaeth/99da51fc9ef0eb1defbd\n. @PascalPrecht @DWand @knalli small fix, big enhancement for the branch. ;-)\nsee #307 \n. @PascalPrecht and I had a longer discussion about how to handle the fallback mechanism in combination with the preferred languages if a user has selected (with storage) a different \"preferred\" language than the one defined via the app.config-provider. In that case, the \"app configured\" preferred language will be ignored - totally. \nTherefore the suggested first fix to this ugly behaviour is: attach the app configured preferred language to the fallback stack at the end.\n. As I'm still a bit busy - just a short reply:\n@pavlo-yuriychuk / @PascalPrecht and @Dwand : Well, this is something I would call a hotfix to the discusson on the #245 - solution. \nYour PR will not iterate through the \"not yet loaded\" fallbacks. Or will it do that? I'll have to check that together with what @Dwand pulled in. But your PR will fix that annoying error - sure :)\n. linking #245 \n. If someone could help me on my question in #245 I'll be happy to continue working on that topic :)\n. Simple answer: I agree with both of you ;-) :+1: \n. @jvandemo @PascalPrecht @knalli \nTaking an eye on our (mine? ;-) ) open issues currently it might be an idea to take a look at this modification for AGT (Angular-Translate) later on when there are resources for improvements / redesign or similar... so personally I would guess it's more something to take a look at on the long run.\n. @DWand The stuff does what it is expected to be I guess. I was using this morning also to improve it and just created a \"live page\" based on the good old demos without the Jasmine-spec.\nSee it here: https://gist.github.com/tspaeth/bfee4777a82ae3b48885\nIt falls back to the correct language. The only problem I currently see is that - no matter if all keys are already found in the primary lang - it always loads ALL async language packages just like I had to to it by calling refresh?! Is this the expected behaviour?\nSo the errors are at least gone - well done for that part. Gonna check the Jasmine-spec later on.\n. :+1: \nWhat was the outcome of your discussion about loading language files async? Any progress? ;)\nAs soon as I'll find time (perhaps over christmas), I'll go further with the testing stuff. Nevertheless I'll try to check in the upgraded karma-stuff also as mentioned in the other ticket...\n. @PascalPrecht Me too, but on the other hand - about how many Bytes are we talking about in average if we're using more than one fallback language - probably not too much?!\nIf somebody has real life values others than my project experince - I'm happy to get some figures.\n. @DWand thanks for the summary. :+1: \nFor 1) it could possibly be an idea to do it this way:\n- If there is no translation in the already loaded primary language:\n  - load fallback language(s) (iterative) as long as needed in the asynchronous matter (so for each translation language it will only happen once, if it is not already loaded / cached). \nIn this loader case, we display a \"please wait...\" box and (sorry, from the UX perspective this is probably not such a nice thing, but as you mentioned... async... I don't see a better EASY way) as soon as the translation(s) is loaded, disappears. This gets then more to an event based architecture probably.\nI did such things in the current project for \"long running tasks\" / \"too laggy server replies\". Maybe it is possible to adopt this in some way to the translation architecture. \nBut it is not a quick & dirty task I guess... \n. Was just an example how to achieve a good UX. It doesn't have to be in the translate project as for most cases I guess the logo image of a project will be larger than the gzipped translation tables 8-). \nLast time I have taken https://github.com/DanWahlin/AngularOverlay as a base - it is also doing fine and small. \nThanks for the promise tracker - didn't know that one :+1: \n. @DWand I was on exactly that topic two weeks ago within my current project as one of the current specs was \"IE8+ has to work\": IE8 lacks support for indexOf. But there are tons of \"fixes\"...\nSee http://stackoverflow.com/questions/3629183/why-doesnt-indexof-work-on-an-array-ie8.\nBut as Angular 2.0 will be dropping IE8... I don't see any problems further on :-)\n. @knalli Thanks. Sure I meant 1.3...I should go to bed soon :)\n. @DWand definately an advantage of the type safe and \"assistant-safe\" languages. :+1: \nBut me either - I'm coming more from the Java world (okok, and PHP, long ago), but JavaScript \"unfortunately\" is a \"must have\". BTW: WebStorm/IDEA has good assistants for \"what you have\", if you configure the library paths correctly. \n. So you want to display the logfile on the client with AngularJS I guess? :-)\nWhat kind of server engine do you use? Somehow the server frameworks might give more power when translating thousands of lines at once?\nBut in general: Why don't you scan and replace with regular expressions or simple string scanning on the keywords and then replace from the controller / service etc by invoking the translate-filter?\nOr use a directive to do the work!\n. I would also advise to the same direction as @knalli  The decision for the right architecture is IMHO heavily depending on the KPIs or less business style: the countable numbers... how many logfiles to be viewed and parsed, how many users doing it in parallel or throughout the day, how much is the total data etc.\nAlso some functional requirements might be important :-) - e.g. , \"switchable language on screen by clicking\"\nTo me, parsing the outgoing endpoint at bit in Spring MVC still sounds to be the most sophisticating approach. It looks different if your API should also be callable from other machine-services - but then I would probably use your lang-parameter approach, @igler \n. @DanielaValero Is this still an open ticket within 2.0.1?\n. I understand the intention, but I would say it is better to keep the application language-free if you want to have full internationality and find errors easily in the testing phase. \nIt is more a QA problem for me if someone missed a translation. And if a translation is not found - isn't there already some exception handling in the module? Maybe we can adapt that for errorfinding...\nThe argument for this default handling is: \"If the whole module is missing - there's at least the language content being displayed that the app-developer likes - as the directive attributes will be ignored\". :-) \nAs @DWand says: It's not hurting to add another configuration parameter, is it? Makes the whole module more universal. \nBut to have no breaking changes: Make the default the current behaviour.\n. Just my two cents...\n@bsr203 One really bad thing you have to keep in mind is: If your \"apps standard\" or \"apps native\" language has value changes for the translation keys, you always have to update your 'error fallback' texts to avoid inconsistencies. This can be quite a hassle within a larger translation table. And in real life translations are mostly not created by the app developers. (Therefore the request is a little bit mixing concerns / job roles - in a enterprise this would be a no-go).\nBTW: I wouldn't call it default locale, as for German people the Arabic writing would never be default or readable due to reading problems and currently in an enterprise app here the default handling is really different alltogether mixing Accept-Language headers, Top-Level-Domain-entry points and user preferences. :-)\n. Did someone say, it is already implemented? :-)\n. I'll be less unclear next time, making it more clear 8-) \n(Sorry, christmas time - mulled wine and so on makes the brain...)\n. \"N00b-question\": What is the problem with rtl - languages in the scope of angular-translate? Never thought about that, so if you have some links/resources or short explanation - would be fine.\n. BTW: The HTML specs themselves already help with orientation with the dir=\"rtl\" attribute for the  tag.\nhttp://www.w3.org/International/tutorials/bidi-xhtml/\nNever tried pushing some angular-stuff in the html - tag... will it be bidirectional there? :)\n. As I'm unexperienced as all of you guys within this topic, I'm not really sure, what the pitfalls will be - as @knalli already mentioned Sencha I also found some resources quite interesting on the mixed rtl-ltr and bidi style within the numbering etc. (didn't know that before):\n- http://www.w3.org/TR/i18n-html-tech-bidi/\n- http://stackoverflow.com/questions/14567945/pitfalls-when-performing-internationalization-localization-with-numbers\n- http://shinytoyrobots.com/2011/12/right-to-left-language-localization-in-rails-web-design/\n- On bidi: http://en.wikipedia.org/wiki/Bi-directional_text\n- http://www.i18nguy.com/markup/right-to-left.html\n. Quite interesting library when it comes to formatting (not only for rtl): http://momentjs.com/\n. sounds very good, @PascalPrecht. Now I understand what the approach is 8-)\n. @Chexpir As the RTL-implementation is still open, it has not been implemented yet. But we're happy if someone with knowledge could help out on a RTL implementation/feature :-)\n. Thanks @PascalPrecht. Didn't have the time to reply yet - still on holidays here. \nThe dependency itself has been in it before as Pascal mentioned. The tests should also work with 1.0.8 perhaps, but as we're in canary I thought it would be better to step forward and upgrade to the 1.2 release as 1.3 is already on the way... \nIf there is a relevant reason it could be changed back to 1.0.8.\n. @knalli Is this PR obsolete as for now? I just saw another PR flying by with changed Karma dependencies last days :-) \n. obsolete\n. @Purus  Sorry. No. That is - as mentioned on the index page - the old manual for Version 1.x :-)\nThe current docs are here: http://angular-translate.github.io/\nThey're generated from https://github.com/angular-translate/angular-translate/tree/master/docs\n. cookie storage is a fallback for client browsers that don't implement LocalStorage.\n. Didn't understand it either.\n. @xmlking Can we close this ticket? \n. Yes, thats already the right base. \nBut a user still has to browse walk to the other bower-repos to get the submodules also as \"binary distribution\". Isn't that a little bit to complex from the business end user perspective? I know that, but most beginners will hardly find out :-)\n. Proposals:\na) We (I can do that) should point the user to the corresponding repos directly in the guide - already in Installation and perhaps on the homepage also.\nb) The Homepage shall outline, that the provided link currently does not include the modules and we should provide a link (you know your repos better - where would a complete dist WITH modules fit in - new distribution repo or just in the homepage as static zip?) to an angular-translate dist with modules for easy use.\n. Short: Yes. I'm lacking that time \"shit\" also, but was just at that point for the setup of the new customer, so I just thought \"document now or never\" :-).\nBut I disagree a bit, that as an enduser you'll say \"wow, they're delivering me all this unneeded modules\". In a production deployment cycle, we usually have to customize the packaging tasks anyway in the enterprise area. That means replacing, minifying etc. - therefore at the developer level I really prefer having a set of maybe too much files for a project and then stripping them down than the otherway around. \nBut that maybe personal preference ;-)\nOff topic: Is there already an easy javascript way of replacing .js with .min.js files in general?\n@knalli Yes, it's only about translate-modules.\n. Bad E word... tse. It generates the money to engage in these non-profit stuff here ;-)\nThanks - that uglify was already what I found. But now I know, that's the only one. Gonna take a look :-)\nBack to topic: \n@knalli But the downside is so little bytes in our case...\n@PascalPrecht yes a) proposal is fine for me :+1:\nI'll try to push something to my fork until end of week\n. @PascalPrecht @knalli \nTo recap the old discussion: We setup a repo and just push in a dist folder there or just the zip as a download? Or we just push it to our documentation \"page\" (repo) itself as a zip and tgz? \nShall I prepare something with script and packaging process in grunt? \nFor future reference and usage we should initially integrate it in the release scripting (however this will be achieved).\n. I guess the problem lies more in angular-ui.\nhttps://github.com/angular-ui/bootstrap/blob/master/src/pagination/pagination.js#L108-L114\nHere is a slightly modified plunk for angular-ui that points into the direction you'll probably need...\n(watch console.log)\nhttp://plnkr.co/edit/IRcQ2Oedri7u5Duks6eg?p=preview \nIt is not developed totally, but there must be some more changes to the code to have angular-ui behave non static?!\n. @fischermatte Is the question / issue answered as far as \"angular-translate\" is concerned?\n. closing due to inactivity. feel free to reopen.\n. @LennyLip If you change that preferredLanguage - setter in the config phase and add a \n$translateProvider.use('en');\nto the setup, it'll work.\nAnd yes, I agree with @DWand that this construction should be cleaned up sooner or later...\n. Well, I would not do such things in the framework itself. This is more a \"business value\" than a library task. \nSo why not do it in the $log - part. Or translate the keys on the server side right after?\n. Nice :+1: \nBy the way: Does anyone of you have a performance test runner for checking how much some of these changes might influence apps in normal use cases? (e.g. having 20-30 keys per page)\nShouldn't we build one test case for this to check the overall performance of the watcher before and after?\n. I would need a $translateProvider.useDefaultTranslationWhenNotFound('DEFAULT TEXT') as proposed by @PascalPrecht in #258. Together with that one proposed here, we could cover this flexible cases, or?\n. If the fallback stack is already parsed and the preferredLanguage is also not replacing anything, currently we return the key. But the change would just to be return the customized text.\nOr did I not get the question?\n. hm. Well... somehow I'm a little bit confused now. :-)\nIn our project we use \n$translate.fallbackLanguage(...)\nto set the fallback-stack at runtime whenever a user changes his personal preferences.\n. @DWand you confuse me more now :-).\nI was just thinking about the originating question. And in the project for which I introduced the fallback-array, the userbased fallback-stack (could be) heavily dynamic. \nTherefore I was just wondering: \"Well, isn't it already possible today to change the fallback stack at runtime?\"\nOr I don't get the ticket intention yet...\n. Take a look at https://github.com/PascalPrecht/angular-translate/blob/master/src/service/translate.js#L275-L286\n. @elgerlambert Well, you're right. I just tested it with what we want here and true - this does... nothing ;) - just wondering what we made different at all in that particular project or it's just a fault of me...\nI can imagine of a lot of hacks to get that working, but probably we shall work on the 2.0 thing with the serviced fallback?\n. initial commit is in my repo currently. Maybe someone wants to take a look before PR.\nhttps://github.com/tspaeth/angular-translate/blob/canary2014/src/service/translate.js\nor in diff mode: https://github.com/tspaeth/angular-translate/compare/PascalPrecht:canary...canary2014?expand=1\n. I'm fine with that  :+1: never used anonymous ones though :)\n. @h-evers that does already work! \nand: A 'de' as default compatibility wrapper would also be fine 8-))) \n. :+1: \n. Checked with CURRENT AngularJS and CURRENT angular-translate 2.0.1 --- everything looks fine! http://plnkr.co/edit/ZWlhuk4HayhcTSluwt4Z?p=preview\n. That was the originating intention I had in 2013 ;-) :+1: \n. #330 \n. @PascalPrecht too much Cologne air? ;-)\nAnyway - I could probably start on that in 3-4 weeks. If somebody else volounteers - also fine with that :beers: \n. @knalli Is this some customer/user requirement or just a general question/idea? Looks useful, but the question to me is: Will it be used by anyone and does it have performance or other advantages?\n. @PascalPrecht Well, then I understand the initial requirement of https://github.com/PascalPrecht/angular-translate/issues/313#issue-26517723 wrong. As \n$translate.uses('nl_CUSTOMERID')\nwasn't in the initial fallbackLanguage-Stack, I understood that @elgerlambert was looking for a solution to dynamically change the fallback stack. @elgerlambert - wasn't it? :)\nAnd by the way: The requirement implemented now is the one that I definately needed in the big enterprise project (but as I figured out - it didn't work). The user must always be able to change the personal language stack during runtime. And in a SPA - I don't want him to get a http reload. :-)\nSo we probably have to clarify the targets on that again. \nTo me the question is more or less: Why should I have a \"setter\" on which fallback language to choose from? The preferred / use language should indicate what to use. If the translation text is not available there: Iterate through a single or cascade of fallback languages in subsequent order.\n. @PascalPrecht @knalli is there a spec or could someone just get me into \"what is it doing and why\"? Then sure I might have an opinion. Currently I'm not sure what the use case is :)\n. Well, if I understood you right: no, because we support hierachies/tree structures, so that\n{\"key1: \n  {\"key1a\":\"foo\",\n   \"key1b\":\"bar\"\n  }\n}\nwill be approachable by\nkey1.key1a - so when or how should the translation module decide when to traverse and when to give back an object to your app?\n. Could you either provide a small plunker on your example or post your $translateProvider - config in here? Thanks.\n. nevermind, but if you want to translate \"partial\" you should include it into locale-misc_en.json :-)\n. @ronny332 Sorry, was my fault. Forget the last comment.\nWe're figuring out the problem. #373 contains a hotfix that should work (careful as it is more or less not 100% tested).\n. Yeah, never trust a 2.0.0 for production 8-).\nClosing this one.\n. Could it be that the docs de<->en already were different before the last bits of new docs that have been added based on the PRs? Otherwise I'm wondering how it could be so different... \n. duplicate #398 \n. see #465 \n. see #373 \n. There is a breaking change: \n$translate.uses() -> $translate.use()\nTake a look here please for other changes: https://plus.google.com/+PascalPrecht/posts/UCKLrorMymq\n. all documentation is aligned. @evilaliv3 if not, please provide a link to where it is wrong. :-)\n. see #368 \n. Just my 2 cent... \n:+1 already a nice base document besides Pascal long G+ post :-). Maybe we should add a cross reference to the added chapters (even though it is a chapter itself) in the docs like fallbackLanguages and so on?\nAnd I'm not sure if the instant usage is already clear enough for everybody. What are the consequences for using it if using async loaders? No text? Waiting until loaded? Error?\n. Just a blind guess: Will it pass all fallback mechanisms correctly? Don't have the time to test it today. And as we're lacking unit tests on that topic currently :-)\n. Closing this one. \n@fiznool Yes, it is the same issue. \nBut if you find a clever alternative for updating without polluting the watchers... feel free to provide a PR :-) Really!\n. ...inspired by http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an ?\nBut yeah, this seems to be a very old and well known problem with Safari Mobile / Safari Private Browsing though.\n@PascalPrecht looks to me like a PR will be a good idea.\n. @aleksz Take a look at the partialLoader http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\nMaybe that already helps?\n. ie = Internet explorer?\nDo you have an example or plunker for that?\n. regarding the source: try \nhttps://rawgithub.com/angular-translate/bower-angular-translate/master/angular-translate.js\n. pinging @knalli \nmaybe we need a missinghandler call here in the instant part?\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1469-L1472\n. @gtessler24 is this still an issue with the current version? Could you provide a plunk in this case? Otherwise we'd close this ticket asap.\n. Hi!\nPlease keep in mind that for 2.0.0+ - the docs are these ones:\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\n. @egervari if you have a plunker / example for us, we can investigate on you problem.\n. pinging @gtessler24 @PascalPrecht can this be closed?\n. @gtessler24 Any more information or plunk on this problem? If yes, feel free to reopen.\nI tested an link with you parameters (only having angular-translate 2.0.x running) and it works!\n. @egervari The answer to the question would be \"yes\". Sure this is possible.\nE.g. write a controller around the head element or the title tag and then parse it.\n. Awesome work! I just commented on some of the links provided. Maybe we also need to correct them in the other languages also.\n. Please use the current and correct docs: http://angular-translate.github.io/docs/en/#/guide/14_pluralization\n. @virtualit786 can we close this or is there anything left to discuss?\n. I disagree to this blog post. A picture says more than a thousand words. They only state what should NOT be used, but they don't provide a good alternative.\nAs a key visual, flags are well known and don't always suggest in primary countries. And in Europe, there are dialects and differentiations between e.g. German that can be expressed exactly with flags.\n. you can add languages to e.g. the fallbackLanguage - Stack or define a new current language - just as you wish. So it is possible. But as always: It depends... on your requirements!\n. @altdeveloper  btw... the script-tags position below the < /body> is invalid in your plunk.\nThe plunk shows \"Hello Example\" here after changing that. But that is what is expected - isn't it?!?\nedit: Oh cool, /body is interpreted by github :D\n. If there still is  an issue, feel free to reopen.\n. @PascalPrecht Can we close this one though?\n. Hi there!\nI've retested all of the scenarios as far as I got them right.\nThe functionality is working correctly if you respect some of the documentation elements :-). Especially what is written in the last sentence of the \"Lazy loading at runtime\" section in http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading.\nThis means that it looks ugly, but then this will work like a charm (nevertheless that this should be optimized though..)\n$scope.thirdStep = function(){\n    console.log('thirdStep');\n    $translate.use('en-AU');\n    $translatePartialLoader.addPart('c');\n    $translate.refresh();\n    $translate.use('en-AU');\n  };\nRegarding the issues within \"translationId\", @devonhumes @Nate-Wilkins I don't see any problems in the current 2.2.0 - if the translationId input parameter contains an array, it is \"catched\" right above the trim and won't reach that trim statement.\nSo is there any defect / test open? @knalli ?\n. Thanks.\n@Francisc could you please send the PR to the canary branch?\n. Just my 2ct on Copy & Paste codeblocks in here... \nPlease note at least if this code was copied from SO or other sources to respect the code license agreements! e.g. if copied from SO, mention it!  If copied from elsewhere - similar applies probably\nhttp://stackoverflow.com/questions/2308134/trim-in-javascript-not-working-in-ie\nTo the functional part: I wouldn't put it into the angular-translate core as official IE8 support will be dropped in AngularJS (besides community engagement). \nSomeone could provide IE8 fixes as a separate js-file to be optionally included. \n. :+1:  nice. Thanks :)\n. This was never an intention of the fallback methods. \nWhen the preferred language is MISSING, the mistake is more an application problem than one of the used framework for translations - that is my opinion.\n. @newjs the plunk doesn't throw an error here. Moreover, the missing file is ...erm... loaded with fake content:\nRequest URL:http://run.plnkr.co/g5fhNdAwxq1wzAIg/locale-ja.json\nRequest Method:GET\nStatus Code:200 OK\n<link rel=\"stylesheet\" href=\"/markdown.css\" type=\"text/css\">\n. @dreamershl @newjs is this problem still existing in 2.2?\nThe plunks look okay currently?\n. closed due to inactivity. feel free to reopen.\n. First of all, thanks.\nSecond: Send PRs to canary.\nThird: As this is a breaking change to the current behaviour I wouldn't suggest that in this style - not as a default behaviour at least.\n. Did you read \nhttp://angular-translate.github.io/docs/#/guide/10_storages\nand\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\n?\n. Just my 2cent:\nPlease - we have to document it very well as a breaking change regarding 2.0 - stream. Not all users are upgrading from 1.x so they probably don't know the \"breaking\" behaviour from before and shout out when moving back this behaviour... :-)\n. Did you take a look at \nhttp://stackoverflow.com/questions/20609770/nested-e-directives-multiple-directives-asking-for-new-isolated-scope ?\nWhen you remove the replace:true in your directive - at least the example works.\n. Well, then just put another element like a \n<div> around your current template and it works.\n. Looking only at the code (without running it) it looks very good to me too :-) :+1:\n. @f2net closing due to inactivity. Feel free to reopen if you have a plunk. Thanks.\n. looks good to me. If all existing undefined and null \"catcher\" work, I'll give a :+1: and you're qualified for the next round 8-)\n. was just thinking about if there might be situations where the instant output array could lead to undefined or null (well, too much java in me) situations so calling null.FOO could occur without it getting handled in the instant function itself. I was just brainstorming about the possibility of this situation, but it will not happen because of the response always giving some value.\n. I also don't have a very strong opinion on that topic but only that it should work. It's just a proposal of the easiest possibilites now. And yes I'd also prefer an 'externalized' version string / file for that or a more professional integration. \nSo what should be the suggested PR-solution as for now?\n@PascalPrecht Regarding naming  - well, we could just collect a list of all seas and lakes on our planet (or 10-20 for now) and if @knalli has an prefix list, he likes, we can join these two words 8-) coming out with e.g. \"delicious-atlantic\" if you like that angular-style so much (I don't care bout that anyway, just looks funny and more rememberable for some people probably)\n. Yeah, I didn't like to write the version number INTO the \"raw\" source, but to have a discussion base, that was intended and rolled on :-)\nI also like that grunt plugin but in general, it looks like a normal & improved find & replace task. Isn't that also sufficient then?\n. :+1: \n. I guess we'll go for something out of #549 - therefore closing this one for now.\n. Could be a nice learning curve also for me. \nBut the traceur way might introduce some complexity with respect to bugs? Does someone of you have some experience with it?\n. replaced by #469 \n. Is this still an issue within the current version?\n. Hm. I just tried reproducing that on a normal test case based on the demos and also added testcases for instant and service on that.\nI wasn't able to reproduce any error if I input a \"null\" (or undefined) key from a scope variable and change it later on.\n@BillOTei Could you please setup a plnkr so we can investigate?\n(setup: angular-translate 2.5.2, AngularJS 1.2.28)\n. Hm... you're posting the global config from the app-bootstrap, right?\nBut how does translations get filled then from a controller?\nAnd btw: You shouldn't mix jQuery directly into angularjs (core) functionality from my point of view...\nSo it is clearer to use https://docs.angularjs.org/api/ng/function/angular.forEach\n. hm. grunt-angular-translate... @firehist can you help?\n. @paxal78 anyway. You're requesting something from/for the grunt-angular-translate, right? \nPlease file it here\nhttps://github.com/angular-translate/grunt-angular-translate/issues\n. As far as I got that: An issue in the grunt-angular-translate module/tool. Should be closed here after reading the last comment from paxal78!\n. @knalli: updated the code\n. @PascalPrecht So you want one commit with unchanged L1005 and one with only that changed invocation?!? I'm not sure if you meant that..\n. Hi @fkiller!\nI also took a look at the PR and thought the same as @PascalPrecht about the filters. I guess, this is more application level instead of \"module\" level. Neat helpers, but they shouldn't probably be a part of the module core.\n. :-)\nI guess Pascal also meant with 2) in #476 that you should get rid of the \"Update README.md\" https://github.com/onehippo/angular-translate/commit/71d37acb7684f06df73dfa406b6942890c171afb\n. @PYYuriy Please file issues on ng2-translate in their repository, this is the angular-translate module. Thanks. . The right way to use staticfilesloader is described in http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading \"Using staticFilesLoader\" ?!\nDid you read that chapter?\n. I've already an open PR that needs some more elaboration when using without fallbacks, but that should be a way to go... \nhttps://github.com/angular-translate/angular-translate/pull/469\n. Hi! Could your provide a full plunk for your example? I don't have that problem here. \nThat makes it easier to find the problem for us in your case.\n. Hot shoot in the foot... :-) \ntrying to add a check on \"is it already in a promise existing\" seems to fix it.\nIf you change line https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1363\nfrom\nif (!$translationTable[key] && $loaderFactory) {\nto this\nif (!$translationTable[key] && $loaderFactory && !langPromises[key]) {\n@angular-translate/core somebody willing to cleanup the promise element stack a bit? :-)\n. As for now, there is no function \"turned inside out\" that gives you direct access to the whole translation table of a certain language.\nSearch for static translation texts is a bit exotic, but might make sense for a translation editor. We can provide a small function that returns the promise to a translationTable for one language. Is this sufficient?\n. Closed due to inactivity and no other comments on this feature/question. \nAnyway: Feel free to reopen!\n. pinging @jshado1 \nSo is anything here an issue of angular-translate itself or more an application issue?\nOtherwise we should close this one!\n. @robertochingon \"$translate.uses\" <- are you still working on 1.x or is this a typo?\nJust to make sure...\nAnd then the question on your error: what's in line \"location.js:76\" ? Just the $translate('PAGE...) call? \n. @forresst : Great work. Could you please send this PR to the canary branch instead of master? Thanks.\n. As mentioned in #526 - please make the PR against canary branch. :)\n. Another perspective on this topic is to take care of correct cache headers sent by your server. If these are working, you won't need an additional client-side angular cache as the browser cache takes care of making the http (XHR) calls via network or just from the local cache. \nIn case you disabled local browser cache or you really want to give the client control over all cachable content - then, yes, then you'll have an advantage with the caching approach.\nAnd another question I've asked myself without diving into the code: Are we really hitting the $http - calls again after filling up the translation tables without cleaning / removing content explicitly? Or am I totally wrong there?\n. Isn't it going in the same direction as #426 at the end?!\n. That would be a great idea :-)\nIf you have the time - feel free to provide a PR. And before you make the same mistake as a few others: branch from/send PR to canary branch :-)\n. Thanks. Nice work as far as I can see. Could you please mind the commit-comments and amend them please as pointed out here?! \nhttps://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\nI didn't run my personal testcases on this now, but the code looks ok at first sight. tr_TR is not the best example case as it is nowhere used in our docs, but maybe you'll love to translate the docs to turkish? ;-)\n. Hi @DataPrintGrafik - would you mind setting up a plunk on this? Makes it much more easier to read as for now some of the code is just printed out as plain html text... thanks.\n. heres a clean fork of your approach http://plnkr.co/edit/MbJUaJ?p=preview\n. :thumbsup: \n. @PascalPrecht couldn't it have something to do with the approach I / we had to add the preferred language also at the end of the fallback stack? :-)\nYes, then we'll need a fix/different approach...\n. @spawnedc any updates on this \"issue\"? :)\n. Yup. Perfect :-) Thanks for the fast response. \n. Hi! Thanks for your report.\nWould you mind to tell us the versions of angularjs and angular-translate you are using or even better: Make a plunk out of your example, so we can follow on easier.\nThanks.\n. Does anyone of you have a publically accessible app or plunker for retesting by the angular-translate team?\n. pinging @thucnc @hagaih @Vheissu @OlmoAcerta for help.\nIs anyone of you able to put up a small plunker with the \"defect\" setup? \n(Hint: you can use one of the example-setups in the docs as a base so you don't need to add the libraries etc. manually).\n. So can we do anything for a better translate code then or shall we close this issue with won't fix?\n(I'd still love to see an example plunker :-) )\n. Thanks for the plunk. \nNote to \"testers\": It's really only reproducible on the IE10 and IE9 and maybe below. Not in the Emulator modes for IE10/9... on IE11. For those don't having one: Grab it on http://modern.ie \nBut anyway: I currently don't really have a useful fix in mind :-(\n. First, thanks for your PR :-).\nBut to process and discuss it, please take a look at\nhttps://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\nand make the PR against canary! Thanks.\n. pinging @PascalPrecht @knalli @DWand :-)\n. @PascalPrecht changed that \"version template line\" now.\n. pushing this up again... \ndocs for ru / uk / cn are missing anyway... pinging @DWand if this feature ever makes it into canary ;-)\n. @DWand any progress? :smile: \n. I cleaned up the whole plunkr a bit as loading libraries FROM the client is more than ugly...\nAfter that, the QUOTA-Error goes away. \n@graphefruit You should take some time to elaborate on the usage of plnkr.co :-)\nNew one: http://plnkr.co/edit/S4XeLMk8jpZ1norI3dtL?p=preview\nAs a side note: Then from an architectural perspective, on one side, the whole jQuery-Element-DOM-Manipulation is one of the NO-GOs in Angular architectures you should really take into account. Why don't you go for a different approach (e.g. directive without magic of jQuery)?\nAnd then to my solution - which is not more than a quick and dirty hacking the rendering process:\nAs you manipulate the DOM and also have a template it seems that your current way somehow finishes parsing / compiling right before showing the interpolation value. \nTherefore it will not be compiled and just showed as-is. As soon as you activate any angular-specific element IN that template, it will fire again - I didn't take a deepest look into the flow in your special mixing-architecture-case as I would never do it this way :-)\nBy adding $rootScope and $rootScope.$apply in the uiservice.js, you can fix the problem easily.\n(see plunk) \nBut as I said: Try a different approach.\n. I agree with @knalli - but it could be a solution to have a \"not found\" behaviour - \"replacer\" as similar as just introduced by the pluggable not found error handler introduced in the current canary / release branch?!\nThen it is out of our \"core\" and can do WHATEVER the app developer wants - flexible.\n. So, just had time just to elaborate on that topic:\n@rewoo did you take a look at the approach to build a custom interpolator? http://angular-translate.github.io/docs/#/guide/15_custom-interpolators\nAs you know, angular-translate is just using using the $interpolate - service (https://docs.angularjs.org/api/ng/service/$interpolate) - it has also some more possibilities already built into the service how to handle undefined (e.g. allOrNothing) params.\nIf building a certain configured base into the module, the problem is that everybody will come up with a different idea of how to handle the interpolation of undefined keys. So there we'll probably get into a mess if the core module provides a certain handling instead of defining a custom interpolator that does exactly what you want in your application?!\n@knalli A general idea could be that we start a small \"custom something marketplace\" with some error handlers / fallback handlers / interpolation handlers?! :-)\n. :+1: \n. at first: For your problem - maybe you could write a custom interpolator that just checks for an empty value and does what you developed for the \"core\" files instead of doing it there. \nThe advantage of this approach is: Backwards compatibility for everyone and flexibility.\nAnd because somebody else might have the problem and is seeking a solution: We are thinking about establishing an \" marketplace\" for exchanging custom extensions.\n. ... and if you use the search... then... you'll come to\n260\n. pinging @zbindenren : Can we close this?\n. @xelan Thanks for the bugfix. Could you please send the PR against canary branch and also take a look at the Contribution guidelines? Thanks :-)\n. awesome :-) :thumbsup: \n. pinging @RootMale - any feedback to the question? \n. Closed due to inactivity.\n. @davidbeijinho True. This functionality has not been implemented yet.\n. @JobaDiniz : Because #618 was to be the PR, but that one did not make it as it is. If you're interested in providing a PR - we're happy if you jump on - see #618 for remarks on current problems. \n. @Aides359 Please don't commit on old, closed defects.\nBut anyway, since yesterday you can use\nhttps://github.com/angular-translate/angular-translate/commit/3988af0\n- see the release notes for 2.11.0\n. Why do you use the filter in the code instead of the $translate - service?\nInject $translate and then call $translate('MY_KEY');\n. Pinging @red-0ne :smiley: \n. Can you provide a code example please?\n. take a look at messageformat itself. e.g. https://github.com/SlexAxton/messageformat.js/blob/master/locale/pl.js\nand pay attention to our bold doc note on http://angular-translate.github.io/docs/#/guide/14_pluralization :-)\n. Ideas on what?\n. ... depends on your directive - still. If you have replace or something else configured.\nEven though your directive is complex - can't you provide an anonymized simplified version? :-)\nOtherwise it's try & error guessing which is not what is efficient.\n. Well the error message says whats going wrong: Both directives try to create new isolated scopes on the same div. That won't work.\n. Well, for the strict mode - yes. Since ECMA5 it is deprecated. So feel free to provide a PR.\nReference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments/callee\n. An improvement for this would either be not to return the null or undefined value but a configured standard text or handing the \"error\" over to a pluggable module just as we did for \"not found\" keys. \nHow do you think about that?\n. As knalli said - I would also go for a directive though.\n. Hi @ephigabay! Thanks for your commit. Before proceeding further - please read the contribution guidelines:\nhttps://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\n- make PR in canary, not master\n- correct PR comment\nThanks.\n. So then we should continue to discuss it there!\n. Et en francais: Merci beaucoup :-)\n. @bra1n I was just thinking about your problem. Couldn't you achieve your goal with writing a custom error handler if we extend it a bit? \nhttp://angular-translate.github.io/docs/#/guide/17_custom-error-handler\nMaybe it is currently not working due to some limitations of what you can access inside it, but I'd like this \"open\" approach and then you don't have to \"work around\" with default values e.g. which could also be an option - or?: \nhttps://github.com/angular-translate/angular-translate/commit/a8026651b5fdc424c681c03cda1b1f749493ba26\n. @bra1n But you will not know anything until all async loader(s) are finished or aborted/rejected. Therefore all error handlers will only fire in case of a \"final\" situation correctly. And still as knalli said - something with a custom missingTranslationHandler could - probably - solve the problem.\nAnd last but not least the most important question: @knalli , @bra1n is there some concrete feature request / bug left in this issue or could we close it?\n. @Muphet There is a link to #986 which is still open and this one was closed as duplicate. Please comment on the open defects if there is any additional information to be added. Thanks.\n. @Francisc friendly test-case ping. If you don't have time the next weeks, we can probably try to help out. Just let us know!\n. @Francisc Any updates on this one? :)\n. Look for a custom loader! \nsee here: http://angular-translate.github.io/docs/#/guide/13_custom-loaders\n. Looks good to me mostly, but you should try to change the comments to fit the rules plus make a single commit etc: https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md \n. :+1: \n. Good approach :+1: \nI don't have any better idea to setup a per language configuration. The only thing could be to discuss the JSON-Structure or \"keyword\".\nJust as an idea, here is another, partly different approach (not having a preference for that - just for brainstorming):\nIn our bad-E-word projects with a REST and \"link following\"(HATEOAS) approach in mind, we just split the rest responses sometimes into metadata and content in a response, so that looks like:\n\u00b4\u00b4\u00b4\n{\n  \"__meta\": {\n    \"direction\": \"rtl\",\n    \"something\": \"else\",\n    \"wrapping_langs\": [\"EN_UK\",\" EN_US\"]\n  },\n  \"__translations\": {\n    \"HEADLINE\": \"My Headline\",\n    \"SUBHEADER\": \"They call me Subheader\"\n}\n\u00b4\u00b4\u00b4\nAnyway that breaks (could, must not - if e.g. we are using the __ prefix as outlined) the current parsing, but then it gives a \"separation of concerns\"...\n. @Ferhnir please don't comment on closed issues if reporting something new. Instead, open a new one. Thanks.\n. closing due to inactivity. Feel free to reopen if there is some open question left regarding angular-translate.\n. LGTM!\n. @koblass did you read through https://github.com/angular-translate/angular-translate/issues/197 ?\n. Add a \n$translate.use('fr');\nin the resolver section or in a run section - this is missing.\n. The preferredLanguage - setter does not automatically trigger a $translate.use() - it is as simple as that :-). The $translate.use triggers events etc. while the preferred setup only refines the language stack a bit more...\n. set a $translate.use('fr') in the config block also. Then it'll work.\nThere is really some things to clean up by the usage and \"play together\" of preferredLanguage,use,fallbackLanguage...\n. @rajeshsivakumar ping? any update? Closed due to inactivity. Feel free to reopen.\n. Hi @KevinLlopart!\nGood thing - thanks for your contribution! \nBesides reviewing, please read carefully through \nhttps://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md to make the PR compatible to our guidelines (can be done after review). \nThanks!\n. Thanks for your fix. Please read through \nhttps://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\nbefore making a PR. This means in case of this PR:\n- PR to canary branch\n- only one commit please instead of 2 for even only one line\n- try to make a test case if possible as it is a bit of \"new functionality\" for the instant part\n- stick to the commit comment styleguide\nAnyway: Great & thanks ;-)\n. Works fine here.\nSee http://plnkr.co/edit/3e2nz7W4kGxR0QPUsUqw?p=preview\n. see discussions at https://github.com/angular-translate/angular-translate/issues/72\n. Just as a quick fix:\nIf you inject $translate to the controller and then call\n$translate.refresh() - it'll work.\nAnyway, I'll have a look later on :)\n. @mdh-cc I checked your plunk now - sorry for the delays.\nThe issue is not the fallback or static loading itself.\nIt lies in using the FILTER which currently is synchronous and uses the .instant translation function internally.\nThis one was / is currently lacking full support on fallbackLanguages if they are loaded asynchronously.\nI'll prepare a PR on this. Until that - this is (probably - just wrote it as a fix, have to think about if this is sufficient) the code block to be added in .instant at the very end - the part after loadAsync is new. :\nlangPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]).then(function (translation) {\n              translations(translation.key, translation.table);\n            });\nChange it here: \nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1600\n. @Saftpresse99 @mdh-cc can we close this ticket?\n. What is the advantage of using this namespace concept in the case of translations? \nReusing same translation keys in different controller scopes / partials?\n. IE6-8 are missing a lot of standards and won't be supported officially here and also in angular.js. In this case it is e.g. String.indexOf ...\n. @knalli nope. Array.prototype.indexOf is missing in IE8 :-) Either we must integrate a \"compat\" prototype into it or it is not working in IE8.\nSo as you said, shim might fix these...\n. @steinerj We are using a \"server ping REST-Call\" (like you suggested as Option 2) to get the right stack in place.\n. @steinerj  just FYI - did you read https://github.com/angular-translate/angular-translate/issues/213 as the \"history\" of the feature?\nAnd as I did a lot of research for a project on this: There is currently no way of determine the Accept-Language sent / used by the browser from a  client-only side without dirty hacking. Therefore Option 2 is still the best way to go. \n. As for my current project, we're testing on the following required minimums:\n- Firefox: FF 10 (ugly error on outerHTML that needs a shim  - one possible fix - see https://gist.github.com/eligrey/1044128 // specification https://developer.mozilla.org/en-US/docs/Web/API/element.outerHTML ) upwards - FF 11 is better\n- Internet Explorer : IE9+\n- Chrome 26+\n- Safari 5.1+ \nAs for the well known technical issues and also security problems on IE8 and lower, I would also not support this officially any more. Some people will always be coming up with the \"backwards compatibility\" in enterprise companies, but this is more or less an issue that will hopefully eliminate itself the next 12 months zu 99,9% :-)\nAs for the other browsers, I'd say, that these specs go back the last 2-3 yrs which is quite fair in terms of \"system security and stability\"...\n. @Pascal: True, but besides for IE-browsers, the current FAQ doesn't state anything about minimum versions of FF, Chrome etc. And as you can see above - our current version has problems with FF10 for example... :frog: \n. Shall we have a further discussion on this or leave it as thrown in? \nThe FF10 outerHTML issue just popped up in a project again... :-)\n. In general, looks okay to me.\nFunny though to see that the native indexOf is slightly slower (sure, depends on the client) than the for loop :-) @see e.g. http://jsperf.com/array-of-strings-array-indexof-vs-for\nAs you retrieved the trim - shim from Mozilla, we must carefully read the license terms on the content! see https://developer.mozilla.org/en-US/docs/MDN/About#Copyrights_and_licenses\n(and then it gets complicated as content was differently licensed there over the years :-( )\n. ok :+1: \n. pinging @knalli @PascalPrecht here.\n. Hi!\nWell, looking at the plunk you provided and with respect to the promise natural structure, the reject will only be handled as the second function as you pointed out. The first \"then\" (or better success) - function is for a success. Only the second one will be called in case of errors. So this behaviour is as expected and has nothing to do directly related to angular-translate from my point of view.\nSo the approach to use the error handler is totally correct. Unfortunately, the master branch hasn't the necessary patches included. If you build an angular-translate module based on canary branch - it'll work! So either you'll have to wait until next release or just build it on your own as for now  - sorry :-)\n. Thanks for your commit. As you mentioned, first it should be checked, what else has to be done for non instant loaders. Then, please read the contribution guidelines https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md\nA general remark on this is somehow more on architecture:\nIf you have a good configured server side cache concept and the browser caches the language-json files (will probably also work on partials etc - I'm not sure) - then the async calls will probably occur in the javascript-level, but should not tackle the network itself. Yes, it overwrites the current translationtable in memory for this and is more \"expensive\" in terms of architecture.\nBut one advantage should be considered before changing this behaviour - I'd call it already a breaking one: I'm not sure, if we have users out there intentionally loading async tables again and again - e.g. during updating and testing phases for testing completeness of language tables.\nTherefore - to me - the default behaviour shouldn't change in the 2.x stream but this \"caching\" could be enabled by parameter. Even more, we had already some caching discussions in other tickets.\n. Linking #535 into this as we should probably also take care of \"mixed\" environments here, closing also that ticket.\n. @fidian As your comment doesn't really help without a plunk or a detailed setup, it's not feasible to talk about the reasons...\n. @PascalPrecht you meant @sajithvk?  :-)\nShort remark: Take care with this PR as there is already the other one for the instant function that fixes the fallback issue being already in canary at excatly the same line(s) - #654. Check twice on merge...\nBut the combination of this fix and #519 fix will improve consistency throughout network, sync and async behavior.\n. woops... will look asap. my mistake :bulb: \n. Looks good to me, but I would rename the description in the code / PR a bit.\nIt's not about \"loading\", but more about initializing \"in memory\" language tables before setting up the loaders to retrieve the corresponding language tables.\n@knalli have we ever allowed to add languages later at runtime (at least for fallbacks?)? If not, that must be checked if the flow would still allow that (as it is already noted in the TODO of this PR)\nSorry for the slight delay, folks :-)\n. @RodolpheGohard But that sounds syntactically correct. \nIf you have the same (partial) key in different namespaces - why should this be a problem of the module? \nBy the way: Is the code example correct? What is \nperson=\"user\"\nDid you mean translate=\"person.user\" ?\n. Just my two cents: Do you want to modify the received content or throw out items?\nWhy don't you cascade or $q.all - the promises so you can modify your loader promise afterwards in a cascaded promise?\n. Could you please setup a Plunker on your configuration / setup so we can take a look at the case and the used setup? Thanks :-)\n. And which version of angular-translate are you using, @gkp590? 2.1.x or 2.2.x?\nIf you could setup a small plunk, then we can have an easy look!\n. it could be an additional parameter on the translation service or filter or directive, but as there is quite some logic on automatic fallbacklanguage detection, that is not such an easy task to integrate it perfectly into the existing logic. The question is: What happens to the fallback logic in this case?\n. As for the loading part to load only selected keys or groups of keys, you can play around with a custom loader http://angular-translate.github.io/docs/#/guide/13_custom-loaders in combination with partial loader?\nTo ask a translation webservice for specific keys doesn't really make sense to me as this will dramatically slow down the whole app and complicate everything plus pollute the network a lot in some cases. Also in combination with fallbacks this will somehow kill the advantage of a client side SPA and ad hoc language changing. \n. Unfortunately you're right. Didn't read carefully enough last week :-).\nCurrently there is no direct way to ask the server from within angular-translate to only deliver specific keys via url loader or similar. \n. Pinging @PascalPrecht @DWand @knalli here.\nDoes anyone of you think, this would really be a good use case to specify the translation keys to be loaded from a webservice? I'm not really sure if something like this is really useful and feasible in conjunction with fallbacks etc.\nTo me, a partial loading mechanism would be the better way to go and then have the part-design on the server side already in place.\n. pinging @Saftpresse99 : anything left to discuss? Otherwise we'd close it here.\n. Somehow... could this from my feeling as we are in the filter-style again be in some relation to https://github.com/angular-translate/angular-translate/issues/622#issuecomment-49991764 ?\n. OK. I'll have a look asap.\n. First analysis note: As soon as you translate only one of the \"missing\" key via the directive, the missing translations will appear even on the filters, because the fb-stack will get loaded. Gonna investigate a bit more on the loader and instant implementation...\n. \"Last analysis note\" ... :-)\nIf I build angular-translate based on canary including the mentioned patch, it works?! @flatsteve did you swap the right one in your version?\nSee the modified plunk here:\nhttp://plnkr.co/edit/fpKouIYMIsIfhQMef956?p=preview\n. PR is here #654 \n. Updated plunk:\nhttp://plnkr.co/edit/b3Cvcs?p=preview\n. And please note that the wiki pages aren't anymore the up2date documentation. The docs (without plnkr) can be found here now:\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\n. hopefully fixes #622 and #651 \n. Could you either please setup an example or give us a bit more of information...\n. <button type=\"button\" translate>FOO.BAR</button> ?\n. Just google a bit around... http://sbdevel.wordpress.com/2014/02/12/watch-the-watchers-when-using-angularjs/\n... this could probably help!\nAnd angular-translate 2.0+ are capable of working with bind-once or using the directive - form they'll only will be invoked on language change event.\n. Would you mind setting up an example?\nI first thought \"wow, yes\", but then I played around with our tutorials and a bit of ngRoute but couldn't find a situation where the translate-cloak class is not removed.\nWhen is the useLanguage not fired because at least in the current canary version I'll always - even with the async callers - come to the useLanguage - function?!\n. Hm... without really diving deep into that. How about either custom url loader that already mixes the content together on the server side or to go with a fallback stack with something in the order of this:\ncustomer_DE\ncustomer_EN\ncommon_DE\ncommon_EN \n...\nSo whenever something is already found in the customer-translation, take that. If not: use default.\n. Look here: http://angular-translate.github.io/docs/#/guide/08_fallback-languages\n. Is this ticket open or closed or invalid?\nRegarding cache, please read e.g. #507, #529.\n. Oh, it was master... ok\n. Which version are you using?\n. Besides have a fix I agree with knalli. \nTo me, it is one of the base natures of these kind of SPA applications / web applications to handle asynchronous calls efficiently without blocking / waiting. \nAnd yes, there are complicated \"dynamic, translation changing apps\" out there being flexible all the time :-). So the event based pattern is the way I'd also advise!\n. I'm not sure if there are currently alternatives to the two solutions Pascal pointed out. Is there anything left in this ticket to keep it open? :-)\n. closed due to inactivity. Feel free to reopen.\n. Just for relationship in between tickets: This is somehow related to #468 even though targeting another issue and area of angular-translate.\n. sorry - tl;dr\nWhat is the issue regarding angular-translate?\nWhy not use ui-router for state routing and language url detection?\nI'm not really getting the problem as there are several methods of \"making it fit to every need\" from within the module or you own app.\n. Could you please setup a complete plunk as an example? Otherwise it is hard to guess your setup and help you. Thanks.\n. pinging @datenreisender \n. Have you read the manual and looked through the issues?\n. here is a general discussion about this https://github.com/angular-translate/angular-translate/issues/649\nSo, there is currently no general solution on that.\n. But you have read the BIG letter announcement regarding 2.0 - have you? :-)\nhttps://github.com/angular-translate/angular-translate/wiki\n. Thanks for your submission. You're right. We'll fix it with the next release.\n. Please be more specific on WHICH page. This doesn't really help. And again: are you looking at the OLD wiki or at the documentation here http://angular-translate.github.io/ ?\n. Ok. Thanks. There is already a pending PR on this, but it isn't merged yet. \nhttps://github.com/angular-translate/angular-translate/pull/465\n. True. ack. :+1: \n. Landed as https://github.com/angular-translate/angular-translate/commit/3169573d8e28c812a5750f7b530bb9ddd70f76fc in canary\n. What kind of setup do you use? Do you have a Plunker for us? \nI'm not really sure how you mean \"does not always work\".\nAlso in a lot of cases, it is not really \"the current language\" that is present. You have to make a distinction in between the preferred and fallback languages which might also be used for translations in case of some Keys being missing in the preferred or used language. Therefore the \"current language\" might only show you the language that should be used for the current page, but there is no guarantee i f you defined fallbacks!\n. Closing. If there is still something left - please let us know - then we'll reopen.\n. You're in the config phase of your application/module and not in a controller for the application?!\nIn the config phase, you cannot directly inject $http usually.\nSee here: http://stackoverflow.com/questions/17497006/use-http-inside-custom-provider-in-app-config-angular-js\nTry do initialize it in the .run phase with $translate\n. What are the links with href=\"#\" doing there?\n. Well, did you rewrite this code for the example or are the brackets really that way?\n'NOTIFICATIONS.ARCHIVE.ARCHIVE_N', \n    ).then(function (translations) {\nlooks a bit strange though...\n. @martialdidit And that means now what?\nThe syntax of your example is just broken. Therefore I'm not sure how  to reproduce the case if the example is already not correct :-)\n. Sounds like a known duplicate. Look at e.g. #640, #535 \n. Thanks for the nice example :+1: - makes it easy for us to find the problem.\nAnd this one is indeed a bug somehow.\nThe reason is the code in\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L764-L772\nA quick fix (as I'm still thinking about the right fix) is to comment out \nfallbackIndex = (index ...\nAfterwards, directive and $translate should call your fallback translation as well.\n. Hi! \nFirst - thanks for your contribution. \nFirst question: What is the (business) use case for this feature? \nAnd for somewhat reason the tests failed (maybe travis, maybe code - didn't check in detail). And please read the contribution guidelines as the commit message is not conforming to the standards. Also - yes - please always provide a test.\nAs an alternative you can always do a getter on $translate.fallbackLanguage() and then push in the new stack via setter?\nFrom a clear use case perspective, I'm really curious where you'll exactly kick out one fallback language if I have more than two registered before?!\n. The case I suggested is something we use when changing a fallback stack with multiple fallback languages.\nExample: User has primary language DE\nThe application provides a fallback of other languages he can configure itself. \nExample: EN, FR, RU\nHe is always able to change the whole combination: \nPrimary: EN\nFallbacks: FR,DE\nThen we just set the new stack and that's it. Call refresh and RU is now not loaded nor present anymore.\n. How is the $stateProvider configured and how does the translation filter call look like?\n. thanks.\nSorry to bother you again, but  for me in this usecase, a plunker would be very good. I'm not really sure, if everything plays together well and if we have an issue with angular-translate here :)\n. Ouch. Unfortunately also struggled over this issue in one of the current projects. \nWe should fix that :-)\n. Using bind-once makes a dependency to another module as we are backwards compatible. That's something I personally dislike here for a module being wide spread.\n. With 2.6 the second example at least works this way:\n<span translate>{{message + '.world'}}</span>\n. Nice feature/work. Great :)\nI don't have any further specific comments. \nBut I'd also prefer a more generic naming as @knalli suggested.\nOpen points that are missing or should really be added as early as possible are:\n- documentation / example cases\n. Here is some information on that:\nhttp://stackoverflow.com/questions/12592417/outerhtml-of-an-svg-element\nIn case of a missing implementation in the browser, we can copy the dom(part), create a fake node around the target element and then take the innerHTML of that as the \"outerHTML\"...\n. @Myeris without an example / plunker it will be very hard to guess what goes wrong in your setup.\nBut in general: Yes, if a translation key is not found in the preferred / currently used language, the module iterates through the fallback language/fallback languages according to the currently defined order looking for that specific key.\nIf it can't be found at all - the error handler is optionally called to provide some additional \"catch\" logic. If there is none defined, the Key is just displayed as a result of the whole process.\n. You're calling the translation service in that case?\n$translate('FOOBAR');\nOr are you using the filter? Just to check before looking into the flow :-)\n. Can be closed?\n. Agree!\nWe should drop support for 1.0.x and 1.1.x for further versions as AngulsrJS in these versions is already discontinued now for approximately one year and as we add new features, the \"shim\" / ugly fixes will only increase. \nThe old translate-versions still work with these AngularJS releases and have a basic feature set, but we cannot afford the resources to support all of these \"ancient\"AJS-releases.\n. kindly pinging @newjs if possible to help out? :smiley: \n. @DWand got any chance of improving the docs here? :-)\n. Cool :+1: \n. As this is still open... how should we handle the missing chinese docs? I'm not sure that we'll get a proper version in time and we're already progressing on new versions... \n. Is this something that the module should take care of? I'm not sure if this is a feature, a bug or a general question in case of \"module usage\"? For the last one, Stackoverflow or Google Plus will be the better place to ask!\n. What I can see: This occurs as soon as the localStorage contains the fallback Language as the current language key. \n. The \"using non-existing\" fallback-languages has already been discussed somewhere - I just can't find the ticket actually.\nBut yes, until now, the standard loader does not check the $http - response states for validity an puts it into the hands of the developer to provide consistent language setup. \nIf you want - feel free to provide a nice PR :-).\n. How about setting up the fallbacks?\n$translate.fallbackLanguage('fr-FR');\n. I'm still wondering, how the plunker should work in the setup of http://plnkr.co/edit/Vts9CW4VoJsXoSdllFsq?p=preview (besides that we must now change rawgithub.com -> rawgit.com) if there is NO fr-FR mentioned anywhere?!\nAs soon as you either define fallbackLanguage OR change the use in line 12 to fr-FR it works.\nMagic? :-)\n(tested against 2.4.1 as that is the current version - but looks fine also on 2.2.0)\n. maybe #641 ? Dunno.\n. Basically I guess the question is: are there any volunteering developers making a PR? \nAs in my projects, I'm not having the need for such a structure, so someone else should preferably develop such a feature - \n@lepipele are you interesting in making a PR on that thing? \nWe'd be happy to have someone helping out here. Any of the participants in this issue or ion #641...?\nOtherwise it's just a bit of endless paperwork / discussion on this issue :cry: \n. Only one general remark/question: This could be marked as a breaking change, or not?\nHow was the behavior before regarding the exception. \na) Would it be catched by the surrounding business app or \nb) was it lost in the translate.js already?\nIf it is b) - then I'm fine and I'd say LGTM .\nIf it is a) - we must think about the default setting as I expect projects catching this exception somewhere...\npinging @angular-translate/core \n. @ramseyfeng You can also have a look at #733 which is partly associated with this \"bug\" ... :)\n. Could you setup a Plunker with the complete setup please so we have a chance to find out what goes wrong? Thanks. Also details on the used module versions would be helpful.\n. (re)Define the fallback before the use definition in the run block.\n. Short patch - try changing this line\nif (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1080\nto \nif (translationTable !== undefined && Object.prototype.hasOwnProperty.call(translationTable, translationId)) {\n. But totally, yes it looks like the run block is done or even \"gone\" earlier than the config block is done... that seems to be a clash and the reason for this error.\nYou can test it if you delay the run section-setters for a second before executing them. Then everything is running fine.\nI don't have a 100% clever solution on fixing this for the instant function used behind filters as they ought to not return a promise. But maybe I'll find something being inspired by some SO solutions I've already seen. Everybody else is invited also :smiley: \n. Yes, we already have support outside of config and: Yes we need support for changing it during runtime.\nAnd as I said it  must be a bug or a general problem with the sync-filter approach?\n. Can you setup a plunkr with YOUR setup? Without that it'll be hard to guess... thanks.\n. It is indeed working, but due to the initialization an some kind of \"last wins\" principle, you can see that it is firstly translated to EN but then jumps back to DE as the loading of the json files might block / take a while.\nYou can see that EN works if you delay the setter in the controller a bit:\n$timeout(function () {\n    $translate.use('en');\n  }, 1000);\n. Try defining the fallback after preferred in the config section :-)\n. :+1: \n. By following the discussion here and on the initial detection mechanisms and also with the experience of how automatic language detection always differs from project to project, I would suggest to make the \"preferred\" detection mechanism also pluggable as for other parts in our module. That will reduce the discussions and provide a minimum \"best of breed\" approach making everyone happy having slightly different requirements!\n. As for a standardized module like angular-translate, it should stick to standards. \nThis means to me:\n- RFC 1766 https://www.ietf.org/rfc/rfc1766.txt (Content-Language definition) / RFC 3282 http://tools.ietf.org/html/rfc3282\n- RFC 2616 definition at http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html\n- ISO 639-1 and probably ISO 639-2 (\"your\" three-letter language codes)\n  plus maybe more :)\nAll other options are customization that should be done by custom language mappers (even though this doesn't mean, a community driven mapper library won't be useful :-) ).\nStill to keep in mind: which browsers are 100% compatible to the \"client based\" approach on detecting the correct language preferences instead of letting a service on the server side respond to a \"dummy\" request.\n. I guess then that the answer is sufficient? Therefore closing it. Feel free to reopen.\n. Could you please show a complete example as a plunker? The useFallbackLanguage will only \"position\" the \"cursor\" in an existing fallbackStack being defined before.\n. a) forked it as you've included the wrong URL for the static loader (always take a look at the console / network tab of your web debugger!)\nhttp://plnkr.co/edit/309zz2RGQmtmDAoD8q21?p=preview\nb) you MUST define the fallbackStack before \"positioning the cursor\" for useFallbackLanguage\n. I see what you mean now... :)\n. Forked your plunk, fixing it... :)\nhttp://plnkr.co/edit/yAK9tRFbAutsOerF3Cgr?p=preview\ntake care of\nhttp://stackoverflow.com/questions/18432584/ng-animate-animate-wrong-item-when-using-track-by-index-in-ng-repeat\nAND the explanation of the track by ... https://docs.angularjs.org/api/ng/directive/ngRepeat\n. Is the load order of the run() executions always the same? Otherwise you should put both calls into one run block.\nAnd second: tried a $translate.refresh() in the second run block after the use?\n. Read the manual?...\nhttp://angular-translate.github.io/docs/#/guide/17_custom-error-handler\n. linking in #765 for information when implementing this :)\n. see PR #767 \n. @gsaandy Please don't comment on very long, closed tickets. In case this feature doesn't work on instant, please open a new ticket within the system. Thanks.. Is this now a duplication of #761? Please reopen a ticket if the answer is not ok. Do not open another ticket with the same topic!\n. @zaidchauhan you can still comment on a closed ticket I guess and we'll be notified. Sorry, but we can't leave every question open as a lot of people will never close it. This would lead to an uncontrollable list of open issues or more or less helpdesk questions. \nAs this is a duplicate, please see #761 for the answer @knalli gave. And there are currently some situations, where translate-default might fail. We're already investigating these configurations to provide a stable fix for that.\n. Duplicate ;-) \nhttps://github.com/angular-translate/angular-translate/issues/626\n. Hmm... could you point out just in \"metacode\" the flow or the expected flow and setters?\nIt may have to do with this https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L836-L847 in combination with other detections.\nExample:\nconfig:\nPreferred language: DE\nfallback: EN, FR, IT\n...\n. By reading the code without testing, I guess that is indeed a corner case that is not covered currently or more or less the fallback mechanism doesn't \"change\" the storage key in this case as they don't resolve as reject currently.\nThe question to @angular-translate/core and @Francisc is: What shall be the normal expected behavior?\na) delete the storage key or \nb) use the first successfully resolved language (even on fallback) or\nc) use what $translate.use defines in the run section\n. Define \"the last request\" in terms of this constellation please.\nIf you have used fallbacks as I see and you should be familiar with asynchronous calls, there should be no way of cancelling or ignoring still pending requests just because $translate.use() is called. That shouldn't be the way.\nThe only question to me that is open is: When should the storage key (let us call that \"last used preferred user language\") be cleared or changed.\n. Hm, just a quick guess: Replacing \nhttps://github.com/angular-translate/angular-translate/blob/canary/src/service/translate.js#L1141-L1144\nfrom\ndeferred.resolve(translateByHandler(translationId));\nto\ndeferred.reject(translateByHandler(translationId));\ncould already be sufficient? \nBut I guess then we'll have to fix the \"reject block\" above in the thread as the tests are also failing now.\n. Hm, at a first, quick crosscheck: I would say no, nothing left...  :-)\n. ok... :) I'll have a look later on\n. See #877  - replaces this PR based on current canary\n. @kamituel still the missing instant support I guess.. :-) \nBut as I'm now already out of work - maybe I'll fix it over the weekend...\n. Instant support provided as per #871 ...\n. Is this a duplicate of #766 ?\n. As for me it sounds like the requested namespace - feature should correlate with a new \"partial loader\" being provided as an option to intelligently fetch parts. \nIf a part is not existing for a certain language ( = translation key not found in the namespace XY for language ABC), iterate to the next language and look in that part. If it is not found at the end, resolve / reject with what is configured - default interpolator or logger or whatever.\nThat could work, but then we need to have a clear distinction for what is a namespace and where to set it and how parts should be automagically fetched :-)\n. I don't know if I understood the question right - so I'll just try to answer it a bit longer:\nThe loaders always \"iterate\" through the defined set of languages (preferred + single fallback or multiplae fallbacks). If you now add the partial loader, this is somehow multiplexed by the partials.\nSo if you add the main part and want to translate \"FOO_BAR_KEY\" it first searches (in a basic setup) the preferred language or the one you currently have assigned with use(...). If the key can't be found in that LANG1_part1.json - File (or whatever the name is), it goes down the fallback stack (LANG2, LANG3...).\nAll the parts are put into memory in its language-dependent object. Therefore they're (if not refreshing) only loaded once.\nAnd if you have more than one part (e.g. main, customer, sales - related translations), it has to load all parts in all languages at the worst case. \nIf everything is found in the primary/preferred/current language tables - NO parts from fallback languages are loaded. :-)\nAnd on every key, the module iterates through the stack so the translation will always be fetched from the best matching language to your current language stack.\nFor the namespace topic, you should probably join the discussion in #641 or others :-).\n. No, you cannot do that with the standard loader. But how about implementing an own one as a derivate of the static files loader with for example throwing an event if a promise got resolved / data was loaded.\nOn the other side: you could also do it outside of the loader or even angular-translate just in plain $http? If the cache-settings are right on the server + client, it's only a call to the local cache :-)\n. Can I close this ticket as for now then @neilyoung2013 ? :)\n. Could be, but could not :-)\nIt just returns - e.g. in case of a language stack of DE, FR, EN, ES, IT, CN which one of these fallbacks is loaded in case of an async loading mechanism currently.\nNormally the whole stack would probably be done in under 1 second, but if you have a slow connection or large language files or a slow server, you could use this information for further purposes (status information, loading bar ... whatever) \n. proposed will not contain current. That is more or less the \"next one\", that is in/under load currently.\nIf you just take a look and search for \"nextLang\"here, you'll see yourself easily:\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js\n. Yes, that is intended for $nextLang as it is only used for watching the asynchronous loaders.\nThe current language that is used, will be returned with $translate.use() \n. Yeah, I've seen it on all github-projects that link to rawgithub.com - seems to be disconnected and now rawgit.com is the only source\n. Thanks for the report. Fixed right now.\n. Thanks for your suggestion. If you'd like, feel free to provide an implementation for this.\nPersonally I see more disadvantages in using this approach than advantages. Usually in a business environment, you will have translators being capable of translating one language to another - therefore creating translation texts for a complete language. Therefore an approach of key->langspecific-key->value will not support this efficiently. Moreover, it is (to me) more error-prone as you'll have more people working on one file. And also you have to load every language your user probably won't even need as it is packed into one file. This is pure traffic waste. :-)\nFor a small setup, this might work, but in a larger environment, this approach makes things complicate.\n. But still then, you'll load the translations for e.g. 24 languages you'll never need, but you'll need all translation keys for english as english is your current language and everything IS translated to english. So you have a useless payload of 23 languages being fetched.\nDid you already read the Getting started guide completely on static loaders, partial loaders etc?\nThis is what we currently can provide. Your own loader mechanism can also work with fetching only what you need, but the angular-translate internal structure is to work with one-file-one-language (or multiple parts for one language) or an in-memory object array with multiple languages.\n. Sorry, I don't understand the last question. \n. As angular-translate is a very wide known and used framework - there haven't been any complaints so far on performance and even all core developers are using it in various enterprise projects. Also you can have a look at some discussions on this - for example in #657 . \nAnd well, we're unable to answer your question for your setup as we don't know your exact setup, nor your server, nor your whole architecture. angular-translate provides a flexible-general-use-module for most purposes. If yours is currently different from all other approaches - feel free to provide improvements to the core if it makes sense for a common module and therefore other users. :-)\n. What will be \"a lot of objects\"? 100? 1000? 10000? Anyway. Still this amount shall work - just test it by yourself in some environments. So it is better to ask the AngularJS-community on using a massive amount of keys instead of us in the core team. You'll get a better answer I guess than here.\nOn the amount of keys - let's get the math for a simple example:\n10000 x approx 20 chars per Key = 200.000 Bytes Content plus Key => approx 250kByte memory consumption. Multiply it by 2-3 languages \"in memory\" < 1MB memory consumption or traffic to be downloaded ONCE (in case of a good configured browser caching mechanism).\nAs you don't have 2000 translations on a page (until you have large table models which will be loaded IN memory all together at once that have to be translated), you should not run into any memory or performance issues. And on how you handle large data sets to be displayed at once - this is more or less not a problem for this module :-)\n. Did you look on Stackoverflow for suggestions in general?\nE.g. this one: http://stackoverflow.com/questions/17289448/angularjs-to-output-plain-text-instead-of-html\n. So if the existing approaches don't fit - why don't you develop a custom loader that sanitizes the JSON-Structure right after loading it?\nBut on security remark I'd like to make: If you ONLY rely on client side code to do this kind of security-checks I'd rather say: don't only do that! You sanitize code on the server already to be fool-prove as a clever attacker could also modify or extend your existing client-side code (might be theoretical, but helps to make a clear architecture).\n. RTFM! \nhttp://angular-translate.github.io/docs/#/guide/06_variable-replacement\n. Thanks for your report. True - this example won't work with the 2.0 edition currently. We'll fix it soon.\n. I guess there is no tool as this is more a corner case (Esp. in an IDE tool for developers), but feel free to write one :-).\nAnd do you really think that keys that indeed are values is a good idea if you're not using English or another \"ASCII\" - language? That makes the translations hardly usable and maintainable internationally to me.\n. pinging @EvenOng \n. As I was pinged also... my 2 cent: I agree with Knalli :-)\nAnd what you could do (but still it is very bad practice): Watch the $rootScope.Ok - Variable for changes from within the link function in the directive and then assign somehow changes to the rendered template or rerender it...\n. pinging back @EvenOng  :smiley: \n. @lboynton On which version are you? Latest 2.6.x?\n. @lboynton could you check your setup against the just created PR locally? \nNot sure if it will fix it, but in that case, the value-attributes are initially present on the first $translate call already... just a try.\n@knalli I'm not pretty sure if it has any side effects for us. Could you have a cross-check please?\n. @lboynton Today I've commented on it again (see #948 comments) to provide a fix if you're using translate-values. Did you already test it included?\n. As knalli said: \"when changing (flipping) in between two languages\" (... if they were already loaded into memory once...)\n. pinging @sebastian-zarzycki : Anything left or can we close it? \n. okay. simsalabim :-)\n. Please use the current docs for version 2.x here: http://angular-translate.github.io/\n. @san983 could you elaborate a bit more on that? I'm just testing 1.3 with having only a angular-translate 2.2 installed in that project and there are no problems with these syntax on Safari.\nWhich version do you have?\n. Okay, got it reproducible as I was just upgrading from 2.2 -> 2.4.2 - but also on chrome :-)\n. @san983 could you try with the just-released 2.5.0 if your error still exists?\n. See https://github.com/angular-translate/angular-translate/pull/768 please.\nShould be available in the next version. \nPlease check if this fix is the one that fixes your problem.\n. Without a complete plunkr, it's always hard to guess with the crystal ball... so questions to me are:\n- did you check if newD is always set and never null / undefined (might happen initially at a watch)\n- do you only use the instant function directly? From a filter? As Service?\n. could you first try to change \nif(newD !== oldD){\nto \nif(newD !== oldD && newD !== undefined){\nand see if that works better?\n(just a blind shot)\n. You could write your own static files loader for example (take the provided one as an example) or you have to write a new option for the core module. And if you look at the tools chapter (20) of the manual, there is also a tool for converting po-files at least. That may also be a starting point.\n. @artuska Do you have any more questions or suggestions? \n. Hm. I guess the problem might be, that without working on partials, I don't know if the custom loader will approach loading an already known language again (from the point of view of the core module). \nCalling refresh after login might do the trick in combination with the custom loader. So if you're not authenticated, just give back the most needed translations from static texts and maybe after login invoke a refresh and then this loads the real translation files?\n. The Accept-Language header itself is not accessible from the client side. For further information, you might dive into #631 \n. Please take a look at the preferredLanguage section plus Language negotiation in the docs if you haven't done so already:\nhttp://angular-translate.github.io/docs/#/guide/07_multi-language\nhttp://angular-translate.github.io/docs/#/guide/09_language-negotiation\nWildcards are also allowed.\nSee: https://github.com/angular-translate/angular-translate/issues/426\nIf there are any questions left - don't hesitate to ask!\n. Closed due to inactivity. Feel free to comment further.\n. Hi! \nThanks for that good example / feature request description. \nJust to answer your ticket \"in reverse order\": \nPersonally I would probably go a little bit a different approach like either what you explained lastly with \"putting it to the controller\" or just do separate translations in the view. The question to me is:\nIs this some kind of dynamic composition?\nBecause if it is a static composition - what is the difference to calling two translation keys after each other? \nRegarding the multiple link feature - yeah, that is something that we should have a look at and fix it accordingly with probably a multi link feature. \n. which version of AngularJS are you using and which version of angular-translate?\nLooks more like the interpolation doesn't take place for the title as it is handled differently internally in the ionic framework?\n. @jorool you think we can do anything more here? Otherwise we'd just close that ticket.\n. Could you provide a full example please?\nDo you mean you're doing the following\n1) foo is undefined -> displayed as foo\n2) one minute or somewhere later, you set foo to some value and want it to be mapped - e.g.\n$scope.foo = 'HEADLINE'\n3) HEADLINE is defined as ... HEADLINE: 'I am the headline'\n?!?\n. And it might be related to #701 ?\n. I fully agree with knalli :-). It is like teaching a dog learning to fly...\nBut if someone is really willing or urged to do something with IE9/IE8 and CORS - there are some approaches:\n- http://blog.gauffin.org/2014/04/how-to-use-cors-requests-in-internet-explorer-9-and-below/\n- http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n. Cool to see that you have found a way that works. \nBut still I wouldn't put these ancient hacks into the base module. Any other opinions?\nOtherwise, we could close this. @knalli?\n. You could work with the \"translate-cloak\" directive.\nAs the documentation is currently lacking a proper sectoin:\nSee the example https://github.com/angular-translate/angular-translate/blob/f7ccb7fbdac184b6a8b216966ebf89b4a8d3fb5e/demo/ex10_translate-cloak.html\nDon't forget to add the corresponding css class to your css definitions.\n. It does what you define for its CSS-Style: Perhaps hiding all the untranslated content until all loaders are finished and the translation cycle is done.\n. Which ones are you using?\nThe current documentation can be found here: http://angular-translate.github.io/docs/#/guide\n. Is this a kind of duplicate of #787 / #789 ?\n. Thanks for the feedback. Then I'll just gonna close this as a duplicate. :-)\n. You mean if the translation for a key is non existing or empty?\nOtherwise I don't really get it :)\n. so you want translate to ignore\n<span translate=\"\"></span>\n?\n. Lovely :-) :+1 :tada: \n. Hi Rafal!\nI've just taken some time sunday morning at a coffee to at least have a first look at the setup. Yes, somehow it is not translating initially.\nI'll have a look as soon as I get the debug-bridge from chrome@mac -> chrome@emulator working. \nPlnkr for reproducible tests is up here: http://plnkr.co/edit/TvcITa\n. Okay, got the problem by remote chrome debugging - but not yet the real reason behind it.\ngetLocale() fails - more detailed this line gives back \"\" on Android 5:\nreturn ((angular.isArray(nav.languages) ? nav.languages[0] : nav.language || nav.browserLanguage || nav.systemLanguage || nav.userLanguage) || '').split('-').join('_');\nFun fact: nav.language is set.\n. @rafaellop exactly. Was just investigating and found that :-). So this is the reason for the error.\n@knalli yip.\n. Well, the recommended method is to provide a PR which gets reviewed and is then pushed into the next release accompanied by a test :-)\nFeel free to provide a fix for review. Currently, we're a bit short of time so I guess the patch won't be available today unfortunately (regarding me).\n. hm. Is the plunker showing this \"negative\" case? It's just the normal 2 language-switch-success-case, or?\nRegarding your request: \nWell. That depends. If you get a 404 on a static resource, the module currently thinks that there is no resource to load. In case of server side / resource application errors which might be fixed in the meantime, your concern will sound right, but as for me, I don't want the application to hammer the server hundreds of times just because \"it might be there some time\". That's useless traffic and delaying your app as it has to \"try & error resolve\" always.\nBut if you really need it - this feature could go into a configurable or customized behavior / pluggable module with a configuration parameter or whatever. \nSo if you'd like to see that in the module - we'd be glad if you want to provide a nice modular PR for this if there are not more users voting for this.  :-)\n. Do we have any testcase for this addition? :smile: \n. From an architectual point of view - this sounds logical to me and I don't know other alternatives besides that one you pointed out. \nAnd yes, this is not V2.x stuff - I agree.\nAnd we should anyway have a short chat about what and how should the next major version be ...\n. Somehow related to https://github.com/angular-translate/angular-translate/issues/749 ?\n. Hi!\nHow are you trying to detect this? A bit more of a code snippet or plunker would be helpful for further investigation.\n. Well, there is a good reason that no attachments are allowed here. Otherwise, exploits and drive-by downloads would be easy on github. Please put the code directly on a gist / plnkr as an alternative. \n. Is this some feature that gettext or messageformat provide in general or is this more or less a general wish?\nAt least speaking for the angular-translate core: Nope, there is currently no intelligence about an intelligent decision tree on \"null\" values built in.\n. From the clientside - perspective - is there any difference in between getting JSON-translations from a static server side file or from a server side service that delivers \"dynamic\" content? \nI'm not really getting the problem, as we don't know your architecture.\n. So, yes - if the base url for the rest api is really different - you must play around with a custom loader and the partial api as far as I guess your setup :-)\n. You could write your own partial loader as a modified version of the base partial loader provided by the module to fit your needs.\nThen you register your customized one as the partial loader. \nCurrently, the standard doesn't support module syntax or some other interpolations afaik.\n. Could you elaborate a bit more on the setup please? Which angular-translate version do you have? Newest 2.4.2? \nAnd if possible - could you put up a plunker or show the setup and an example filter usage? \n. Hi all!\nCould someone of the users having the problem on filters change this line \nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1080\nfrom\nif (Object.prototype.hasOwnProperty.call(translationTable, translationId)) {\nto \nif (translationTable && Object.prototype.hasOwnProperty.call(translationTable, translationId)) {\nand tell me if that helps? :-)\npinging @webpolis and @ritenv \nThis is already in canary, but not yet in master!\n. Sorry, didn't understand what you mean?!\n. Okay, could you setup a simplified Plunker showing that case? Otherwise it'll be hard to track...\n. Hi!\nWithout further investigation right now - maybe that helps https://github.com/angular-translate/angular-translate/issues/697 ?\n. Hi! \nAre you calling the translations via filter, directive or as service?\n. phew ;-)\n. As this will be a general breaking change (it has always been \"translate\" as attribute/directive), this should be something for a major release from my point of view.  \nPinging @angular-translate/core  here.\n. Maybe in the meanwhile we could add a second \"wrapper\" directive to maintain backwards compatibility whilst keeping the old one. Will it cause any troubles - does anyone know if just (re)defining an existing HTML5 attribute within AngularJS as an directive (but not actively using it) with still collide?\n. as data- in angularjs is just an automate-scanned alternative I would bet that it still reacts on translate AND data-translate. So it might not really help with respect to \"not using the translate attribute\".\n. Hm, I wouldn't do it without a prefix as we can't be sure if not any other library or whatever server side framework adds additions (you might also find AJS in some ugly mixtures with JavaEE frameworks as we both don't want to know, but I've seen this somewhere... :-) ).\nSo I would advise more something like\n<h1 x-ngtrans-message=\"translationId\"><h1> then or just ngtranslate or pptranslate ;-)\n. you'll collide with t3n somehow (maybe only we germans know that term as a print publication).\n. even though you might not use these modules in parallel, it'll collide with https://www.npmjs.com/package/ng-translation if you use \"ng-translate\" :)\n. Yep. Somehow I have the feeling, that this IS indeed a breaking change (even my own customer project was broken), causing a lot of troubles. We'll investigate that asap. \nIn most cases it will be sufficient if you comment out the referred lines.\n. Hm. I don't get any errors in the plnkr. Can you help me a bit on what should be seen/expected and what is being printed? :-)\n. Well, at least one update: I can see this error, but somehow I'd have to get myself into the ngRoute stuff again as I'm only using the ui-router resolvers and how it all interferes with the stack setup...\nPhew, quite a complex problem I guess... or even a very simple one... not sure...\n. Yup - I agree with that. True. Thanks for the feedback. \n. There are only two occurences: That one mentioned by @miraage and one in \nstorage-local.spec.js\nI'll take a look...\n. :+1:  LGTM\n. As I'm not really a bower user, I don't have a strong opinion on that. But as long as it will ease the use of the library - it's fine to me.\n. Is there anything left to be answered or fixed?\n. Okay. So... closing this one as I understood :-)\n. True. Thanks for the report. \nhttps://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L125\n. So this is more about directive inheritance in general or ist it something else? @knalli which issues should I take a look at to get into that a bit further?\n. Yes, this looks like a problem of the filter implementation in the current version. \nIf you use the directive syntax, the indicators are applied.\n. @snowball I've taken a look at that issue. Hopefully the linked #870 fixes your problem.\nAnyway, I've tested it also against 2.0.0 ... somehow I have the feeling that it never worked... :-)\n. LGTM. Pinging @angular-translate/core - please review someone else... :)\n. And in this case it is quite important to know on which versions of AngularJS and angular-translate you're working on.\n. And additionally: Please provide your app-config section as @paullofte pointed out in his example... You'll need to tell the translation system which language(s) to use and not only define the translation strings. Please see the simple example chapters: http://angular-translate.github.io/docs/#/guide/02_getting-started\n. Usually you should also use the promise based approach to resolve the translations async with the service here instead of getting the result from the instant - filter - variant, if this works for you.\nPlease see chapter 3 in the docs: http://angular-translate.github.io/docs/#/guide/03_using-translate-service.\n. pinging team... please review @angular-translate/core\n. I should not write tests after 10pm... I should not write tests after 10pm... I should not write tests after 10pm... I should not write tests after 10pm... I should not write tests after 10pm...  :-)\nTotally right, @knalli :cry:  - will fix it ...\n. Okay, hopefully fixed the test now correctly... my brain is still on holiday :-D\npinging @knalli again... sorry mate. :-)\n. woops... thanks :-)\nLGTM besides that the PR is going to master and that the comment is not according to the rules... :)\n. oh, there have been more files added ... yap, I agree with @knalli . Also, the commit comment format should be conforming to standards... also these special comments are really hard to interprete as an \"external\" for this PR...\n. When I'm running some of the angular-translate.github.io - demos (\"Getting started\" - just did a quick test) from within my iOS Browser (Safari on iPhone) - they work. So this is not true that translate will not work on iOS-devices in general!\n. Did you also try the directive-approach with sth. like \n<span translate=\"HEADLINE\"></span>\n? If not: Please check if that is working.\n. Did you take a look at http://angular-translate.github.io/docs/#/guide/09_language-negotiation on mapping languages? Might help?!\n. Yeah, looks like a bug or more an enhancement as it was never working per examples / tests.\nhttp://plnkr.co/edit/DF634EWQIUSyMkMWwx8N?p=preview\n. We don't know about your implementation so we cannot answer anything here without any code example.\n. pinging @taheerahamed - We'd love to help, but without an example, it is hard to guess... :)\n. Hi!\nIf you take a look at least at the short API:\nhttp://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate\nThere you'll see, that you can input $translate([ARRAY]).then... \nso yes - this is the right way you're doing, but you can skip the for loop then and just input your array.\n. Closed due to inactivity.\n. I don't get, what loading the ngLocale module has to do with angular-translate (not ng-translate btw!)? Could you explain that a bit more detailed?\n. Please don't comment on very old closed tickets as they're not worked on anymore. If there is an issue with angular-translate, please open a new ticket.\nIf you need general help, please use StackOverflow to have a broader audience as we're as a small team only able to fix bugs and introduce new features for the module here. Thanks.\n. Could you give us a bit more details - e.g. setup a simple plnkr for your setup? As you can see - the normal minification of the angular-translate works as service + directive + filter use the correct syntax. So we probably need to drill down a bit more on the setup.\n. pinging @gtesslerge \n. From the code review perspective - LGTM. Well done ;-)\nAs I'm not a user of the part approach - I can't give an opinion on the functional usability.\n. Closing this one as I think it is answered - feel free to reopen if I'm wrong.\n. @ozdemirr Please don't comment on closed, very old tickets to raise new topics.\nIn general, in your case, you'll have to recompile the blocks as they contain HTML and AngularJS-specific code, which is somehow the hardest way to get it really working. \nYou could also split it to senseful blocks where needed, making the code a bit unreadable.\nBut what is the general issue with your example?\n. As knalli said ...  the filter has no watcher on it and therefore doesn't work with 1.3... so it is not a valid comparison of the watcher-amount. Check with AngularJS 1.2 and 2.2 for a valid comparison. \nIs there anything more to do or can we close it?\n. Isn't it just like all the things discussed already in #535 and the referred other tickets there?\n. Couldn't - until someone has developed a pluggable mechanism - also http://angular-translate.github.io/docs/#/guide/09_language-negotiation help out with \"registerAvailableLanguageKeys\"? \n. The idea is good - but - Isn't it somehow another dynamic approach of a fallback mechanism? Instead of iterating through a defined stack, you'll try to be intelligent and risk 404 requests to the server for files that don't exist. To me - as the language code table is limited and probably your language support in the application also - it looks like putting up a short registerAvailable... setup in place sounds more stable and controllable.\nAnd - please consider that the client based determination of the accepted languages is not 100% cross browser stable due to access limitations. We've had some discussions on that already some time ago. \n. So, what if we do a feature-toggle for the \"normalization\" feature and rework the outstanding PR to be activated as an alternative or to activate a totally customized \"plugin\"?\nThat way we could keep compatibility as of now and open the module for further enhancements.\nAnd AFAIK it's from the coding perspective not such a big deal?!\n@knalli what do you think?\n. :+1: \n. I see some minor issues here:\n- there are no \"quotes\" around the placeholder expression -> will render invalid html\n- is there a reason why you're using the filter approach instead of  $translate('LEFT_NAV.SEARCH_ALL_FILES')?\n  If you inject $translate into the controller and do\n$translate('LEFT_NAV.SEARCH_ALL_FILES').then(function (data) {\n  $scope.placeholder = data; \n});\nwhat happens? (remark: it will not update on language change automatically - you have to watch that event probably) \n. So - then you could watch on a translate change inside the directive. Or if it was working already with the filter - also okay :-).\n. I don't see that issue with refresh there. I see more an issue on the translation key namings. You should NOT give the keys in the json files the same names always as they are all loaded into the same namespace in your case. Therefore overriding each other in some cases.\n. I wouldn't advise to completely disable caching - why should you do that? This means that also static resources would never be cached plus all AJAX-calls with not-changing content.\nFrom a perspective of data transfer limitation and delays this is really against all the principles... :)\n. related to #879 ?\n. (I'm not sure if I got the problem / place right, but:)\nWell, you're explicitly disabling the watchers / two way binding with the \":: \" prefix in your email.directive.html - so how should the update work in that case?\nIf you remove this prefix, also your upper \"E-Mail now in ...\" will be updated.\n. Well:\na) you should use the latest angular-translate and not 2.2.0\nb) you should use the right keys \"login.password\" and not \"password\" \nHere is the working, updated plunker (I was to lazy to swap the loader to a current version - so I left it at 2.2.0 as it seems to work ok for this demo:\nhttp://plnkr.co/edit/76oAY5y40BpFxCbi0WeR?p=preview\nAny defects or issues left?\n. Huh, but thanks :smiley: \n. Hm. Aren't you only mapping everything to en - no matter if it was en_US or en_UK?\nAnd for a fallbackLanguage - you should define another language than the one that will be mapped by the preferredLanguage.\nMaybe that helps. Otherwise - please setup a short plunkr.\n. My chinese is too bad ;-)\nAnd the french is too long ago to write a correct sentence...Sorry... \nBut maybe @firehist can help out once?\n. The plnkr isn't working correctly at all.\nBut anyway - the options for the standard static files loader are currently only able to take an option input object as defined in https://github.com/angular-translate/angular-translate/blob/master/src/service/loader-static-files.js\n@param {object} options Options object, which gets prefix, suffix and key.\nand not an Array of Objects. So if you need a totally different approach - yes you have to write a custom loader / parser.\n. Could someone of you share a complete plunker / example for this issue please? \nI don't get this error on directive usage in IE11 on my projects!\n. Okay. It happens on the interpolated usage of a translation key. That is an important information so we know where to look :smile: \nFirst Analysis: Works with 2.4.2 somehow.\n. Even without referring to the gettext project - angularjs is containing an issue on this as it is not directly an issue of angular-translate but the way of the module usage and transclusion I bet.\nSee https://github.com/angular/angular.js/issues/8659\nFollowing the advices there, you should write into the directive:\n<h1 translate=\"HELLO_PLNKR\"></h1>\nto avoid this problem.\n. Did you check on angular-translate 2.4.2 if the error happens there? \nIf not: Even though it is an old version - maybe it is working for your cases.\nBesides that: No, not something else besides your terminal workaround or patching angular.js itself :-)\n. @knalli The link in this comment does not work: https://github.com/angular-translate/angular-translate/issues/925#issuecomment-140412024 ... \"I've applied this for us also now\" leads to 404 :)\n. Sorry, guys. It works here?!\nSee forked plnkr http://plnkr.co/edit/IeysDIAGMy9RjioXZBbt?p=preview that includes the following versions:\n- latest (2.9.2) :+1:\n- 2.8.1  :+1:\n- 2.7.0  :-1:\nOn my IE11 11.0.9600.18097 everything works fine. with the two newer versions.\nNo error from the screenshot in the console. \nAs a proof of fix - if you activate the 2.7.0 -> error.\n. Could you please provide an example case / plnkr with your setup as the one knalli referred to does work?!\n. Yeah, outerHTML on SVG elements will not work correctly. For example see here: http://stackoverflow.com/questions/12592417/outerhtml-of-an-svg-element\n. You just have to write your own logic on processing the REST response and then call and set the stack correctly with\n$translate.use(....)\n. If you take a look at the documentation at https://docs.angularjs.org/guide/module, you'll see that basically, it is (better : should not be) not possible to use services in the configuration / bootstrapping phase. There are modules like https://github.com/philippd/angular-deferred-bootstrap or https://github.com/rajeshsegu/angular-lazy-bootstrap that might help here. But that is out of scope for our module. \n. No, this is correct. Please look here in the guide:\nhttp://angular-translate.github.io/docs/#/guide/03_using-translate-service\n. Just as a side note to extend the question: Where is translate-cloak set / attached? On a div element or on the body element?\n. is it ngCloak we are now talking about or just and only translate-cloak? :-)\n. So does one of you @mastix or @itonics-tbeauvais have a plunker or similar as a full test case?\n. You can use a wildcard according to https://github.com/angular-translate/angular-translate/commit/6f0ae3bf6dd873534c9957b2cce398b290c92da7\nMaybe it is missing in the docs, but that should work!\nso just do a\n'en_*': 'en'\n. Currently, the module is designed to \"follow the links\" in the same language tables as the missing key. No mixing of translation tables on following links in case a key is not found.\n. No, there are no plans. But feel free to hand in a PR on this.\n. Hi!\nCould you setup a short Plunkr for your problem as a demo to outline the problem? I've never seen this in my projects here, so there might be some combination not working or so...\n. In the filter (more precisely in the instant - translation function of the service), we have a check on if the key is null or undefined. In this case it returns the translationKey... (so in that case null or undefined). \n. Which angular-translate version are you using? There have been some fixes recently.\n. Did you take a look at the docs? Here is a list of the available events:\nhttp://angular-translate.github.io/docs/#/guide/18_events\n. Hm. Just figured out, that this doesn't help on translate-values - just translate-value... \nand translate-values seems a bit harder.\nThe way should be: Wait, until all attributes have been parsed, then run interpolation and messageformat...\n. Didn't have time to update the PR yet... but for the impatient:\nadd \n// initial setup\n        if (iAttr.translateValues) {\n          angular.extend(scope.interpolateParams, $parse(iAttr.translateValues)(scope.$parent));\n        }\nright here:\nhttps://github.com/tspaeth/angular-translate/blob/canarycurrent/src/directive/translate.js#L127\n. Do you have a Plunkr with an example and more details about the version / used browser(s)?\n. outerHTML had some issues on FF10 as far as I remember and/or IE9.\n. So if you can't solve your issue with the mentioned scope problem - still - please provide a Plunker!\n. Mh. Yeah. Indeed something is going wrong again on some ng-if etc. directives. There was a fix in #433 - maybe that doesn't trigger anymore.\nRegression test result: \n- Still Works with angular-translate 2.4.2 and started failing with 2.5.0. \n- AJS version not related directly to that\n. One side issue is, that angular-translate now thinks that you want to translate the keys\n\"pass.translated\" AND \"fail\" and in the case of the ng-if is doing some order differently.\nAsking @knalli : besides what goes wrong in detail: How should we behave in these cases? Do you think it is anyhow valid to have a combination of  these?\n<div translate=\"FOO\">BAR</div>\n. Yeah, thanks. As we are including the latest one of the messageformat module, this isn't working anymore. We'll have to patch it with the next release.\n. In the meanwhile, the url to messageformat.js changed also... I'll provide another package on documentation anyway, also fixing some links to the repos etc. which still contained some old pointers to the old repo :)\n. Do you have translations for both languages?\nFrom what I can read out of the code:\nFirst you set your preferredLanguage to en-gb (as your tablet has en-gb), then the last setting is grabbed from the cookie store and then you define a fallback for the case where translations are missing.\nSo the texts from\n\"config.getValue(....)/locale-gb-en.json\" will be picked first?!\n. Can you put up a short example plunker please? Otherwise it's hard to figure out the problematic details...\n. See \nhttp://plnkr.co/edit/h7qUlY?p=preview\nI pimped it a bit to be working. Some notes:\n- preferredLanguage takes only valid language keys (in your case 'de_DE')\n- you might need a registerAvailableLanguageKeys - section as the var \"language\" might just contain \"de\"\n  So if you now remove a key from one the de_DE file, the english text is shown here.\n. @mgurluk Sorry, I don't understand your question. Could you detail it a bit, please? Thanks.\n. Thanks for the report. You're right. We have to fix some of the examples as some dependencies have changed.\n. Hi! \nAs far as I know the implementation on partial loaders, I guess it is not meant to be a \"cascade\" for overloading the SAME translation keys and have a replacement to the \"last loaded key\". No - it concatenates the partial-files. Maybe this leads to duplicate keys even though. \nSo your approach will not work as you expect.\nBut I guess @DWand might have some more hints / clearer view of what is possible and what not.\n. @dietergeerts what you could test if there is a length limit somewhere else if you do some key like a.b.c.d.e.f.g.h.i.j - does that work or even not?\n. Thanks also from me and I guess there is nothing more to... erm... say here :smiley: \nclosing therefore...\n. @JamesBoon Well, I disagree on \n\nI think it is good to resolve all promises, but a non-existing translation should return nothing - and not its key. Shouldn't this be changed to return undefined instead?\n\nWe have a lot of different users using and requesting different behavior of \"non-existing\" translation keys. Therefore, you can customize the return value with a custom error handler. This is \"pluggable\" and the standard will return the key. If you need it differently - feel free to write the custom error handler :-).\nSee http://angular-translate.github.io/docs/#/guide/17_custom-error-handler\n. Please have a look at #948 \n. @knalli due to the #854 fix on #701 - https://github.com/angular-translate/angular-translate/blob/master/src/directive/translate.js#L147-L150\nOn possible fix is to extend the updateTranslations to check for undefined... but does it have any other consequences?\nif (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {\n. Remark for development:\nHappens only when defining preferredLanguage first and then the fallbacks.\nOther way around: works fine... \n. Did you include the angular-translate-loader-static-files file also?\n. @knalli yes. For example - based on what you've written here https://github.com/angular-translate/angular-translate/issues/500#issuecomment-39952291?\n. Please open a new defect together with a plnkr demonstrating your setup. thanks.\n. What does \"rendering\" the full page mean? And as Knalli already mentioned: If you have an issue to track and solve: Please file a new defect!\n. sounds so familiar... #535 / #900 look like they belong to the same \"family\" of errors.\n. Related to #981, #972 ?\n. Hi!\nThanks for your suggestion.\nAs you wrote, you would like to separate translations to two files as it is common practice. I would suggest to go that way. But also you write, that your existing page is already parsing. So how did you manage it? Extended the library so you would have a PR already in place?\nBut just my 2cents: I don't think that the core module of angular-translate should implement this exotic case. If there is enough request / demand for such a parser, it might make sense. \n. Regarding the service names - I don't have a 100% strong opinion. Usually on the application architectures we build, we try to avoid $ as prefix for our application and its modules to differentiate it from \"base modules delivered by the framework\" or similar. So from the other perspective: It is okay as a base module like this for me to have it prefixed.\nOn the namespace whilst keeping respect to Pascal, an organizational name as module base from a (whenever it might exist) next major version with a compat way of being partly backwards compatible sounds also ok to me. As the refactoring effort to me is somewhat high by looking at the checklist, I see anyway some issues on keeping a 100% compatibility with existing applications and their loaders / load mechanisms. (see async, fallback, filter issues etc.) \nMy 0.0199 Pence ;-)\n. Does it also still work seamlessly on Safari and IE9/IE10/IE11 plus Android and iOS Safari? (And even Cordova apps might be a special task). Before introducing such a large \"refactoring\", we must be sure not to break any existing browser out there... :-)\n. I guess it is removed from the Gruntfile.js in canary as far as I can see, so this should be fine then...\n. @lverre please you have the following choices for it to work correctly - it's more an issue of the combination / scope-creation for angular-translate and the ng-click-handling...:\nprefix the scope variables with a model var and initialize it beforehand\n<button ng-hide=\"mainmodel.isEditingName\" type=\"button\" class=\"btn btn-primary\" ng-click=\"mainmodel.isEditingName = true\" translate=\"SHARED_EDIT\">Edit</button>\nand in the controller, init it\nvar mainmodel = {};\nOr, beginning from AngularJS 1.3, the controllerAs syntax \n```\n\n...\n    Save\nCancel\nEdit\n```\nAnd also don't forget to update / change the corresponding variable name in the save - function :-)\nHope that helps...\n. We should do something - maybe a pluggable solution / handler is indeed the best solution as the handling will differ from case to case (esp. with fallbacks missing...). \nBut I'm wondering, that it will freeze on missing files? (404 case)\n. Thanks for your contribution. Even though the check might make sense in general, I'm asking myself:\nYou're not translating values/data here, right? You're just expecting a non-string value to be returned as-is?!\n. @greckin you're looking for error handling I would say:\nhttp://angular-translate.github.io/docs/#/guide/16_error-handling\nor customized\nhttp://angular-translate.github.io/docs/#/guide/17_custom-error-handler\n. Which version of Angular are you using?\n. You should definitely upgrade... $injector.has was introduced in 1.1.5 and 1.1.4 is more than slightly deprecated :-)\n. Please have a look at https://docs.angularjs.org/api/ng/filter/date and https://code.angularjs.org/1.3.15/docs/guide/i18n first since date parsing is more localization and not translation.\n. @furyscript Sorry, I don't understand what you meant with your last comment.\n. Which comment, @furyscript? I can't remember how it looked before... sorry :-)\n. Not in angular-translate. It's still localization and not part of this project here. \n. Well, just googled around... find an approach like mentioned here \nhttp://blog.novanet.no/creating-multilingual-support-using-angularjs/\nor here... \nhttp://www.mattzabriskie.com/blog/i18n-with-angular\n. What does \"run angular again/twice\" mean in detail? Is your app.run - block executed twice? \nBut this totally looks more like an application design problem than an angular-translate module problem.\n. I'm just a little bit unsure still... what do you mean by refresh page \"manually\"? \n. I'm fine with that. Actually thought that also several times...\n. So .... pushing up\n. Besides my comment: LGTM and shouldn't hurt, but please provide \n- [x] some test case(s)\n- [x] an english documentation snippet\n. LGTM, besides I'll provide a german translation as well for sake of completeness. Give me some minutes, @knalli - input will come today.\n. Okay. Done. See #1059... Please review shortly @knalli or @PascalPrecht  :-)\n. @neilyoung2013 / @richtmat Please check or stay tuned until next release. Perhaps #1419 is gonna fix this...\n. @MGMsystems / @neilyoung2013 please check if 2.10.0 fixes your issue(s).\n. Yup, looks like you're right that during https://github.com/angular-translate/angular-translate/commit/b68560160ea51b07030b0cc0ebc4ece440546ad0 - the Gruntfile.js didn't get changed / that file added.\n@knalli can you have a look? \n. Either we introduce a version switcher or just a second storage-cookie - adapter? How does this sound? Then it is not breaking but more feature toggle.\n. this.useNewCookieStorage .. ? sounds a bit better ;-)\n. But honestly - it might be the better approach to make it setter-based\n```\nthis.useCookieStorage = function (storage) {\n    if (storage) {\n      ...\n    } else {\n      return this.useStorage('$translateCookieStorage');\n    } \n  };\n```\nor so ...\n. yup. I'm also fine with that. @mchambaud how about these approaches to hand in a PR? :smiley: \n. Without further knowledge of your whole application, this is .. .erm... hard to answer without being totally unspecific...\n. If you're looking for the function - it was introduced with 2.4.0 - so please update to the most recent version.\n. How do you call the translation module? Service? Directive? Filter? And how do you set in the corresponding value?\n. Have you read http://angular-translate.github.io/docs/#/guide/06_variable-replacement ?\n. Based on knallis template, I have made some modifications that show the working filter with values:\nhttp://plnkr.co/edit/Kw4xr7U4UuQ1OZ3KwVoj?p=preview\nSo your issue must be somewhere else in your configuration I guess. \n. Probably 'value' is not a good key?\nSee here  - in general it works after renaming it:\nhttp://plnkr.co/edit/rFyd4z4sA3jXAzLFMkz5?p=preview\n. Could you upload / configure it in the plunkr I've provided?\nMaybe also your file encoding is wrong, or you're mixing \" and ' ... so many options :)\n. Should work - see https://github.com/angular-translate/angular-translate/issues/932\nI guess it's still missing in the docs - unfortunately. \nPlease check if it works and close the ticket afterwards. thanks.\n. Maybe this helps:\nhttps://github.com/angular-translate/angular-translate/issues/951\n. But that is exactly what you coded so far. You first change the locale texts and then go for a transition to the next (same) state with forced reload. \n. Yes, when you make browser based detection with preferredLanguage, it has a higher priority than the stored one in local storage currently.\n. What is your browsers primary language? UK? \n. Hm. Did you try (not the cleanest way, I know) using something like this (blind guess without code test) in the config section additionally at the end:\n$translateProvider.use($translateProvider.preferredLanguage());\n. Maybe #1433 helps also here? blind-guess Could somebody check? @sochka ?\n. ISO 639 is more talking about \"languages\" and \"macro languages\"... mh.... so many options :-) http://en.wikipedia.org/wiki/ISO_639-3\nregion is also ok to me.\n. The filter is called \"translate\" and not \"translation\"!\nSee http://angular-translate.github.io/docs/#/guide/04_using-translate-filter\n. test3 is also a promise!\n. Have you worked through the documentation a bit on how to work with the service stuff?\nLook here: http://angular-translate.github.io/docs/#/guide/03_using-translate-service\nAnd if you really want to be instant - see chapter \"instant\" or use the filter - http://angular-translate.github.io/docs/#/guide/04_using-translate-filter\n. @knalli We could dive in the messageformat issue, starting point would be  https://github.com/SlexAxton/messageformat.js/pull/71 - I'm just wondering, why 2.2 doesn't work correctly as the ticket is older than 2.2...\n. Before we really start a ping-pong analysis game or dig in the dirt - if you would put up a small Plunker, it would making support really much more simpler!\n(btw: the bracket syntax in the directive looks a bit suspicous)\n. Which version of IE do you use?\n. You're right. \nIf your system is running en-US and Internet Explorer is changed to a stack e.g. \n1. German (de-DE)\n2. English (en-US)\nit will still respond with en-US on querying \nwindow.navigator.browserLanguage\nwindow.navigator.userLanguage\nwindow.navigator.systemLanguage\nHonestly, then we don't have a client based solution for IE10 currently I guess :-(\nThe best approach is still to query a \"dummy\" serverresource and check the response to the Accept-Language headers (and for example return them as JSON)...\n. They really don't do better somehow :)\nTried in IE11: \njavascript:alert(window.navigator.userLanguage);\nThis was the language order setting in IE:\n\nuserLanguage -> de-DE\nbrowserLanguage -> de-DE\nsystemLanguage ->de-DE\nDoes it need more than a quit? MAybe a reboot?\nwindow.navigator.language IS supported since IE11, but not before.\n. There is no good and clean solution for IE10 downwards. And maybe IE11 will or is behaving a bit better, but in general still \"use a server based detection\" is the only reliable suggestion for all browsers here.\n@knalli do we have any task open in this ticket?\n. How shall we implement this as a general solution in this module if we don't know what and where the server lives and how it is configured to give appropriate response?\nBut in general, your suggestion is the general fool-safe preferred approach and somewhere in the old tickets we've suggested that. If you implement it as a small custom function matching your needs, it'll work also.\n. @knalli yup, looks like that... they're changing the module more often than I change some other things in life... d'oh\nPlease use the latest stable I would suggest... instead of the 0.3 non-stable...  https://github.com/SlexAxton/messageformat.js/tree/0.2.2/locale\n. This is somehow a thing we should discuss. But I'm just myself wondering, why \"simple UTF*\" conversion fails in the $sanitize-module this way. Needs a bit of investigation I guess as I'm too far away from using that. jqLite - functionality itself is okay.\nBut as it impacts also the security a bit on sanitizing elements, my first suggestion would be to introduce a \"trusthtml\" sanitize strategy as an additional option for those really wanting to open that door :-). \nSomehow a parallel issue exists also on angular itself to watch: https://github.com/angular/angular.js/issues/4790\n@knalli what do you think?\nAnd here is a little playground: http://plnkr.co/edit/w4Erw7yXHQp9d2ndr4HZ?p=preview\n. Linking in #1131 as a possible duplicate...\n. @b2mdevelopment what does +1 mean in this context here?\n. @Koblaid in 2.7 the sanitize strategy itself was implemented. So it is not like it \"broke\". It just got the security features on sanitizing from AngularJS 1.x.\n. Yeah, but that is intentional. See here http://angular-translate.github.io/docs/#/guide/06_variable-replacement\n. App Versions and Translation versions usually go together on releases and (continuous) builds. \nAnd if you're doing right with caching, you'll not run into any issues. \nSo yes, if you miss to translate your files all at once, fallbacks might help here. But if you update translations content and you forget to do this in all langauges, well, that's not technically solvable besides your idea of renamed keys. \nBut I'd more suggest to use other tools that could help here in building diff's of PO-files / translation files etc., so you see your changes before rolling out / deploying.\n. Hi! Sorry for the delay and a very big thanks for the contribution.\nBut one remark: Could you clean up the PR a bit onto the most recent canary, so that all these non-relevant old commits get out and it is easier to have a review - also it makes it easier to check the corresponding open defects! Thanks!\nAnd by the way - plase have a short look at https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md and the commit comment conventions close to the end if possible. Thanks!!\n. Hi!\nHave a look at the \"FOUC\" chapter here: http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\nand also at the translate-cloak which is similar to what ng-cloak could provide but translate-specific... maybe that helps on hiding the elements first : https://angular-translate.github.io/docs/#/api/pascalprecht.translate.directive:translateCloak\n. Which version are you using? You'll need at least 2.7.1 - see here: https://github.com/angular-translate/angular-translate/releases :-)\n. Hm, I've just forked the plunker template... I don't see an issue here: http://plnkr.co/edit/rFyd4z4sA3jXAzLFMkz5?p=preview\nDo you use any different setup with sanitize?\n. Could you setup a not-working version please - so it is better to understand what goes wrong? :-) \nBut it'll be related to sanitize I guess..\n. Then I'd close this as duplicate and if you're interested, follow the progress in #1101.\n. Are you using it in the bootstrap/config of your app? Or why calling $translateProvider?\nA Plnkr usually helps getting things easier for us.\n. a) could you please post a complete setup?\nb) Well, the thing is, that the variable given back by asking use() is only set in one of these cases:\n- $translateProvider.use() or $translate.use() is explicitly called\n- refresh is called\nMaybe I missed some.\nBut it's also depending on some asyncloaders responding or resolving.\nSo it also means in total, that you'll probably not get a reliable result in the config section. Maybe you'll get a result if you call it at the end of the config section, but preferrable I'd check if your logic can't be in the run section?\n. @knalli should that feature \"forceAsyncReload\" and the other stuff around it \"lead\" to this way of loading?\nAs I was not much involved, I'm not sure if that mechanism would work during \"bootstrapping\" already when initially loading up the whole infrastructure so you'll see the \"in memory\" translationtable before replacing it by the async version...\nIn general, sounds like a nice approach, but @M21B8 you could also try to use default texts initially until we've aligned the \"what should work, what not\"...  :-)\n. @knalli Definately. Still the old problematic \"friend\" in that structure...\nI guess, I'll paint a flow diagram on that soon, so that we'll implement it correctly.\n. The issue must be somewhere else, because in my projects, we're excessively making use of IE11 also... \nI've tested this here in IE11 and it works fine: http://plnkr.co/edit/WIPNqu8O3Ax6ofp2JiTJ?p=preview\nTo figure out what goes wrong, we'll need further setup or better a plunker - you can use mine as a base.\n. We really love to help and support, but these kind of \"how to\" questions really fit better on http://stackoverflow.com - please ask there as you'll reach a bigger user base audience.\nThis is the main issue/defect/feature tracker for the module and only in rare cases a basic first level support forum. Thanks.\n. Sorry, but I don't get it. Where is the angular-translate code?\n. Could you setup a Plunker where some angular-translate code / calls are visible or used? Otherwise I don't know what we should/could help here...  or I'm just not getting it... :-)\n. We'd need your config section also. Looks like a sanitation that happend. Please see #1101 for familarity. \n. Yes, setting sanitizeValueStrategy currently has some issues on utf8 chars. As mentioned - please follow #1101 \n. Yup. Due to missing messageformat or translate update I guess.\nProbably counts also for UK and CN?\nReferenceError: Locale fr could not be loaded: require is not defined\n    at Function.MessageFormat.loadLocale (https://cdn.rawgit.com/SlexAxton/messageformat.js/0.2.2/messageformat.js:48:20)\n. Some basic suggestions as I don'T know the complete setup of your app and I'm in a hurry:\n- try shifting the whole  $scope.ddSelectOptions to the \"then...\" block of the async response\n- check if $translate.instant might help depending on your translation language setup / loader setup\n. Please see #1094 . Closing this as a duplicate.\n. how do you add the dom elements to the tree? Are you compiling them with angularjs or just add them?\nA code example / Plunker would make life easier for us to support you.\n. Did you read the general documentation? See here: https://angular-translate.github.io\nIf you don't know what goes wrong - please post a Plunker. Thanks.\n. Your graphics / images or code blocks are missing.\n. Please read the documentation for using $translate - service @ http://angular-translate.github.io/docs/#/guide/03_using-translate-service\n$translate() returns a promise, so you must add the then block.\n. Hi!\nHave you read through the referenced link? There is also a link to the OWASP site referencing more information. \nIf you have any questions left, feel free to ask here a bit more specific. Thanks.\n. As we're simply using the $sanitize underneath for the several options on valueStrategy, it  might be worth while to have a look at these AngularJS discussions:\n- http://stackoverflow.com/questions/22994026/emoji-and-other-unicode-characters-not-appearing-correctly-in-angular\n- http://stackoverflow.com/questions/23230680/angularjs-displaying-html-unicode\n. ```\n{{ 'MSG_ENABLEREFRESHTOKEN' | translate: {'userName': scopeVariableName} }}\n{{ 'MSG_ENABLEREFRESHTOKEN' | translate: {'userName': 'MyName'} }}\n```\nthese should do.\n. Have you enabled any sanitze-strategy and read the http://angular-translate.github.io/docs/en/#/guide/19_security chapter?\n. Hi!\nThanks for your report. Well, yes, could be a typo. But the code example isn't complete anyway :-)...\n. Well, I won't use whole content blocks with directive etc. as translation values as then you're mixing layout and content, but that's up to you. In that case, the content needs to be compiled as well, so please add \"translate-compile\" to your paragraph:\n<p translate=\"content1\" translate-compile></p>\n. @Lukec1 is this something that is related to translation? I'm not really getting the issue. sorry.\n. Could you check if https://github.com/angular-translate/angular-translate/issues/920 helps?\n. @dacox Where do the \"wrong\" http-requests come from? Do you make a language detection/setting to invalid values upfront? And yes, registerAvailableLanguageKeys could probably help depending on the setup you've made currently.\n. @Koblaid Please post your setup as a Plunker or JSfiddle, so we know what and how it is registered. thanks.\n. @ramseyfeng without any code example - this is very hard to tell...\n. Please try to change the definition order in the change function\n```\n    $translate.use(lang);\n    $scope.fallbacks = $translate.fallbackLanguage(fallbacks);\n    $scope.lang = $translate.use();\n```\nThis is one of the things, where we'll have to clean up - it's pending a while, but it'll take a while still... :-|\n. Could you please show us a complete example of the issue as a plunker or jsfiddle? \n. You mean at which language in the fallback stack every key at the end was \"taken out\"?\n. Hi!\nThis is not directly an issue of angular-translate, but of messageformat - maybe http://stackoverflow.com/questions/19059580/client-on-node-uncaught-referenceerror-require-is-not-defined helps for you.\n. @trong291990 Without an example code as a plunker/fiddler or more complete information on your project setup, we can't really help.\n. closing as there seems to be no bug anymore.\n. Sorry for the delay, was on holiday :sunglasses: \nIt is exactly as @PascalPrecht described it. If you've set your current language for example to\n\"RU\"\nand your preferred was detected as \"EN\" and your fallback contains \"DE\" and \"FR\", it'll try to pick the language at last from your preferred language, so you get as a last resort a result... as far as I still remember it without looking into the code itself. \n. Hm, if you set your sanitize strategy to\n$translateProvider.useSanitizeValueStrategy('sanitized');\nit will also parse these basic html tags correctly and even should without any configuration on the strategy if it isn't a parameter (your example isn't).\nPlease have a look at http://angular-translate.github.io/docs/#/guide/19_security if you haven't done so already.\nI've just forked that example on the page and it works to me.\nhttp://plnkr.co/edit/z5vIXNxnHn9Fuk9wyJSa?p=preview\n. Are you talking about using angular-translate in an angular-directive that comes from the ionic framework? And what is the normal syntax - we have directive and filter :-) ?\n. Sounds a bit like the \"famous\" bugs on calendars etc in the bootstrap module when these elements where rewriting the view itself. But I'm not a ionic user nor expert :-)\nBut maybe \n- http://robferguson.org/2015/07/22/internationalisation-i18n-and-localisation-l10n-for-ionic-apps/\n- http://forum.ionicframework.com/t/angular-translate-does-not-work/28799/7\n- https://blog.nraboy.com/2014/08/internationalization-localization-ionicframework-angular-translate/\n  could help?\n. I can't see the fallback-stack definition in your setup.\n. before looking into it: Which browsers are you using?\n. The preferred language is additionally also added to the fallback stack as a last resort so in case you're currently having one of the fallback languages as \"used\" and there are more but none of the fallbacks contains the translation key, it will try as a last resort to look it up in \"all languages\". Therefore, the async loaders startup will load all languages. \nTake a look at $translate.fallbackLanguage in the service \n. Events? Please see http://angular-translate.github.io/docs/#/guide/18_events and check if one of the provided matches your needs.\n. Can you please explain what this defect / issue shall mean to us? Without any further explanation, this is not readable.\n. Did you read the documentation on Events? http://angular-translate.github.io/docs/#/guide/18_events\n. Hm, I don't understand what your issue is. Could you please provide a more descriptive example what you want to achieve and what is missing in angular-translate from your point of view?\n. As a basic concept of angular-translate, you should not mix multiple languages in one JSON structure but provide one JSON - structure per language.\nMixing is currently not possible nor detectable the way you want it to work.\nMaybe you can write a loader that wraps everything in the right place upfront, so you convert the mixed structure to a senseful \"clean translation table per language\". \n. But you know about \"our\" fallback-concept already implemented as described here: http://angular-translate.github.io/docs/#/guide/08_fallback-languages ?\n. I'm also wondering, why $translateChangeSuccess will not cover it or what the difference it. If there is a \"bug\" in that, we should preferably discuss or fix it before introducing a 98% clone :-)\n. No, there is no built-in way for that as the \"nested\" resolution is deeply integrated in the library. You'll have to overwrite the functionality if you want to have a traversal on the dots regarding translation matching of each of them.\n. @lucastschmidt  Maybe a good point to jump in is \"flatObject\" here... https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L272\n. ... that's what I wanted to say @knalli ;-)\nI think a pluggable and replaceable \"library\" of parsers (as for all other customizable feature) might be something worth while in the future... :)\n. Well, best would be to look a bit through our issue \"archive\" by searching for \"performance\" and \"large\" - you'll find several tickets handling individual tips like one time bindings etc. - but it is always a matter of \"what does large mean\".\n. Please have a look at the sanitize - issue #1101 - sounds like a well known \"problem\".\n. Can you give us a small plunker with some code of yours regarding this issue? As the Event itself is only emitted when uselanguage is called internally, we don't know where the issue is without example usage code. \n. so it should be \"license\" instead of \"licenses\" then and just be \"MIT\"?\n...\n \"license\": \"MIT\"\n...\n. Did you read the http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading chapter in our guide regarding cache stuff?\n. I'm asking myself if there really is any business value to the module as during config phase $translate.use and $translate.preferredLanguage both return values if queried - or am I just scanning our sourcecode quickly wrong in github.com? :-)\n. $translateProvider does expose preferredLanauge - or not?\nSee: https://github.com/cthrax/angular-translate/blob/feature/configTimeLocale/src/service/translate.js#L396\n. well, it highly also depends on your personal setup. In case of async loaders, the promises won't get rejected with a String input value. Then both will return the key within the success function. If this is right or wrong or intended, I'm not 100% sure... :-) \n@angular-translate/core Did anyone of you still have a historical knowledge how it should always be? Feels a bit minimum inconsistent...\n. Well, maybe http://stackoverflow.com/questions/12592417/outerhtml-of-an-svg-element might help here\n. @knalli is this deployment / upload already automated at some point in time? (didn't check)\n. you should use an angular-cookies version for the 1.3 stream and not for the 1.4 stream. In most cases, this will solve your issue.\n. Well, that depends on your stack. You currently won't be able to detect if a translation key is missing in one of the languages in your stack, but it will tell you if it is totally missing in a stack (if included fallbacks).\nFor eventing / catching please read http://angular-translate.github.io/docs/#/guide/17_custom-error-handler\n. Can't you do it with fallbacks? http://angular-translate.github.io/docs/#/guide/08_fallback-languages\nMaybe in combination with something out of the language negotiation and/or partial loading... \n. Without an implementation example as Plunker or Fiddle, it'll be hard to see the definitve issue...\n. Have you read the docs? http://angular-translate.github.io/docs/#/guide\nEspecially on Loaders/custom loaders?\n. Could you put up a short example with plunker?\nBut I think it's due to $sce / sanitation - please see http://angular-translate.github.io/docs/#/guide/19_security\n. Hm, isn't putting all translationIds themselves into scope putting  a lot of pollution to the scope variables/listeners? Or am I just interpreting it a bit wrong?\n. Just wondering: What is the usecase in overriding translations?\n. Well, if you attach translate-cloak to the body tag for example you'll see that there is a short flickering on visible, not-yet-translated keys. This is probably due to the way how all angular code will be initialized but the dom will already be shown initially.\nYou can get around this with a small tweak to the directive plus the body tag in my example also:\n- attach style=\"visible: none\" to the body tag.\n- Add something like\ntElement[0].style.display = null;\nright before this:\nhttps://github.com/angular-translate/angular-translate/blob/master/src/directive/translate-cloak.js#L35\nand then flickering should be gone but the text will only be displayed after it has been translated.\nHope that helps a bit... (but be careful if there are existing styles also on that node :-) )\n. translate-cloak=\"gross_yield.OVERVIEW\"\nIs that your CSS class name?\n. @oktay89 my fault... just didn't read carful enough... :)\n. Well it works in general?\nSee here: http://plnkr.co/edit/PFn2DAsR3D6Z52gz7lbn?p=preview\n. Please have a look at the notice on https://github.com/angular-translate/angular-translate/wiki - this wiki is targeting angular-translate 1.x and is just kept in for backwards documentation.\n. In general, the angular-module can't solve on issue on the FOUC you probably mean:\nIf the HTML file is loading and the browser starts rendering it - depending on the flow and script integration, it might show the \"raw html\" right upfront.\nThe only known solution to me is to set the body element to style=\"display: none;\" and then in an onload event reset this style. This is rather hacky, but seems to be the only cross-browser reliable way to reach your goal if you really need it.\n. Could it be that this is fixed since 2.8.x?\n. Thanks for this huge contribution. Great - as knalli said :-).\n. friendly reminder: @doppio any update on this?\n. and which error?\n. @elmalto What is a defined language if you're using partial and async loaders? We don't have a definitive setting telling the module what is a valid and \"accepted\" language. If the loader is able to find a translation-json on async calls, it's considered valid. And even if you are missing the async-file for some reason - it might still be a valid language for your overall application.\n. One thing to consider here is: Using a fallback-stack of languages won't change the current language being \"used\" - It might sound a bit irritating, but that's the way it was introduced. Example:\nYou're having EN, DE, FR, ES in your application defined.\nNow, you're viewing a page having EN as the \"current\" language. And the fallback for the current setup is configured as DE - FR - ES. \nIn case, you're missing some translations in EN, it tries to look them up (in that order) in DE, FR, ES. In case it finds one key only in ES -> it's taken from there and presented.\nBUT - in that case, the use - function won't change to ES.\n. But - how can we help or support here in any issues regarding angular-translate itself?\n. Caching-issues of the browser is usually not an issue of this module but more on your server setup and cache headers in case of external js - files. because, when you reload the app (e.g. F5 on windows etc.), it is completely re-initialized from what you request / cache from the server in terms of data and files.\n. Check your network flow and cache headers for retrieval of this files on e.g. the Chrome developer console.\n. innerHTML is replaced by using the directive. True.\n. Thanks for your contribution. \nPlease have a look at our contribution guidelines: https://github.com/angular-translate/angular-translate/blob/master/CONTRIBUTING.md - meaning in general: please create the PR against canary branch and check the format of the commit comment. Thanks.\n. @knalli LGTM.\n. LGTM, but just to make sure, maybe @gonzalo-roberto-diaz could you check if all is fine here? Thanks.\n. Could you provide a short Plunker/JSFiddle on your setup please? Thanks.\n. What does 'refresh' mean in detail? If you have a small complete example, it is much easier to help.\n. As Browser reload \"the f5 case\" always reinitializes the whole application, I bet it'll be hard to find out what you're doing wrong - especially without a Plunker / JSFiddle. Please provide one.\nBut in general I can tell you: This is normally working.\n. Thanks, but that still won't help as there is no example controller or state so I have an idea of how you're using the whole translation package in the controllers with routings etc...\nPlease provide a short Plunker, so we don't have to do \"try & error\"\n. Closed due to inactivity. Feel free to reopen.\n. Hi Reza!\nThanks for your offer - indeed, angular-translate would like to have some support on RTL languages from a native expert, but I'm not sure if you wanted to reach out for this here?\nTo make it a bit clearer: This is just the team of the angular-translate module and NOT of AngularJS itself. \nIf you want to reach out to the amazing guys at Google - the main repository can be found here: https://github.com/angular/angular.js\nNevertheless, if you're an interested Javascript developer and want to improve this module - you're very much welcome :-)\n. Hm, is this just a typo or are you missing the $ in front of cookies in the function head and the dependency injection?\n. @Gaurav-Ambasta issue is still there?\n. Please have a look at the chapters in the documentation http://angular-translate.github.io/docs/#/guide/04_using-translate-filter and  http://angular-translate.github.io/docs/#/guide/03_using-translate-service \nregarding the differences in between these two usage scenarios. \nPlease note that sanitizing and configuring in case of the filter will probably lead to this differences.\nSee http://angular-translate.github.io/docs/#/guide/19_security\n. Kindly the same discussion family as in #1101 ? If it is somehow different, then please point it out, otherwise we'd like to close it as a duplicate. Thanks.\n. I can't reproduce your issue. If I ask my Chrome Version 46.0.2490.80 m (64-bit) on Windows 7 (German) for window.navigator.languages looks like this:\n[\"de-DE\", \"de\", \"en-US\", \"en\", \"fr\"]\nWhat does chrome tell you if you enter \"window.navigator.languages\" in your console?\n. How do your chrome settings look like?\n\n. Closing it as there is no open points from my side.\n. I don't know your exact setup, but maybe invoking one of the matching events + invoking some digest might help?\nSee http://angular-translate.github.io/docs/#/guide/18_events\n. You're loading some elements / retrieving AJAX-requests on your webpage via http, while it has been retrieved via https (exactly what the error says). But I don't see why / how this related to angular-translate bugs?\nFeel free to reopen if you have more information that leads to a bug in angular-translate.\n. Besides the loading and 404 aspect you should have a look at the fallback syntax, which would additionally limit the languages the user can use / the system provides for consistency.\n. @fabritw As you've modified your comment - anything left to answer? :)\n. Isn't the discussion in #930 similar and helps?\n. Closed due to inactivity\n. How does $translate know which languages to take? I'm missing something like $translate.use('fr') or something.\n. Another approach: Did you have a look at our own test suite for maybe a matching example?\nhttps://github.com/angular-translate/angular-translate/tree/master/test\n. Hm? Isn't https://github.com/angular-translate/angular-translate/blob/920a9febc22f61368153d844f7cbefcfebb6ecec/test/unit/service/loader-static-files.spec.js using it?\n. how does the ion-component internally handle the parameter title? Maybe it's not an issue of angular-translate direct, but on the directive it is applied to... just a guess...\n. Hard to guess without an example Plunkr. Could you setup one?\n. Oh, ok. Then we should fix this there first :-) - thanks.\n. Hi!\nThanks for your report. \nAs this is the feature- and bug-tracker for the module, please ask \"How to do\" questions on the StackOverflow site as you'll reach a broader user base there. Thanks.\nhttp://stackoverflow.com/questions/tagged/angular-translate\nAnyway, you should look for partialloaders and a custom loader.\n. Currently you can only retrieve the keys you put in via \"registerAvailableLanguageKeys\" from exactly the same function during configuration, but not from controllers. Right.\nWhy not storing this key-object in an application-wide constant if you're anyway putting them in from within your business logic (outside the module)?\n. Please use the latest versions of angular and angular-translate if checking for issues.\nUsing 2.8.1 of angular-translate and e.g. AngularJS 1.4.8 - this issue doesn't come up.\n. As this is not the first time someone reports issues here in this \"initialization way\", I've looked a bit closer:\nHm, I guess the issue lies somewhere in here if the application is not initialized with the $uses variable but only with the $preferredLanguage - in this cases refresh skips the reloading of the parts as $uses is undefined:\nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1873\n@knalli what do you think?\n. English please! En anglais s'il vous pla\u00eet! Merci. . Won't this also work with a custom loader you develop perfectly matching to your requirements? (adopt the partial loader e.g.)\n. Just a general question: Do you have several DefaultTranslations? And are they language dependent? And what do you do further with them after being in the result of the missingHandler?\n. \"There is a bug in angularjs #1101\" - does this give the correct information? #1101 is the angular-translate issue. But is there another one directly in AngularJS?\n. If your remove the translationNotFoundIndicator it will work correctly. I assume that the translationNotFoundIndicator currently just detects if your active language doesn't contain the key and then print the indicator here.\n. You refer to http://blog.thoughtram.io/angular/2015/03/21/angular-and-i18n-the-new-world.html probably? \nWell, the i18n module mentioned is about a module (currently inactive afaik) supposed to be in the angular core and is not about angular-translate to be ported 1:1 into an Angular2 module.\nAs the architecture and approach of the Angular i18n module is somewhat different compared to angular-translate in the current architecture, this will not be \"upgraded\" to that I would say.\n. Hi! Thanks for the fast contribution. \nfunctionally looks good to me and formally nearly perfect :-)\n. You mean in case you configured a sanitizeStrategy named 'escape' or 'sanitize'??\nBecause: If you do not configure any sanitizeStrategy - it will not encode the text.\n. I don't see that issue - could you check your whole setup please or post a Plnkr of it.\nHere is a variant of what I've understood - contains a controller-only variable \"valueIntern\" and also includes partial loading - seems to work fine:\nhttp://plnkr.co/edit/FqCf4wV0Ft2Vyxzf1SUL?p=preview\n. If I understood the question right (I'm unsure): no, you can't \"non-translate\" one part per string currently. Either you put the prefix text also into the translation or separate your translation with a  or similar.\n. ?\n. Duplicate - please see https://github.com/angular-translate/angular-translate/issues/260\n. Is it a duplicate of https://github.com/angular-translate/angular-translate/issues/1307 ?\n. Upgrading to angular-translate 2.8.1 seems to help here.\n. And on the second part: angular-translate is not a locale-changer. Use $locale for that (e.g. in combination with https://github.com/lgalfaso/angular-dynamic-locale)\n. @pocesar but that's not the approach, angular-translate follows usually... see https://angular-translate.github.io/\nWhat you're \"looking for\" is what is not-yet finished https://github.com/angular/i18n which is taking better care of \"full text\" translations I would say...\n. could you set a used language  explicitly during setup phase with\n$translateProvider.use('en_US');\nand check if it works better?\n. Hi!\nAs you're doing instant translations and in combination use the \".use\" function with async - loading mechanisms, the instant will in this case fail as it doesn't wait for any async resources to be finished if not existing yet.\nI've modified your example a bit to demonstrate how it would work better - please also read the documentation carefully ($translate.use gives back a promise) at \nhttp://angular-translate.github.io/\nPlnkr:\nhttp://plnkr.co/edit/Ibq4EaFcvyUPGpqb81Jo?p=preview\n. I don't see a bug really, you just have to know about that static files loader is asynchronous and $translate.instant is synchronous. So mixing these two is not a good idea with this setup.\nSee the updated plnkr for a working version - you'll have to wrap your initial scope variable into another use - function.\nhttp://plnkr.co/edit/Ibq4EaFcvyUPGpqb81Jo?p=preview\n. How would you detect and decide what a translation string is?\nBut indeed there is some grunt task already: https://github.com/angular-translate/grunt-angular-translate\nAnd maybe, you'll get some inspiration of what is possible with the other repos like \nhttps://github.com/angular-translate/translate-compile\n. I don't have that issue when calling that git command from the command line. You probably need to increase the verbosity to see the issue. Looks like somewhat a network issue?\n. Again: Works fine here. \nPlease check if you're using any proxy or firewall that might cause issues or block ports on git:// urls. If you google for the \"Connection reset by peer\" with bower etc., you'll maybe get some hints / reasons.\n. @albertytau Without any example code - how should we help?\n. It's still too general from your description... but are you aware of the FOUC - chapter? http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading or the cloak directive?\n. If you use the filter, do it this way:\n<ul>\n  <li ng-repeat=\"myvalue in type\">\n    {{ 'TYPE_' + myvalue | translate }}\n  </li>\n</ul>\n. \"Name:\" might cause problems if you use it as a key. Did you try without?\n. I've copied your code with colon now - no problems. What versions of angular and angular-translate are you using?\n. @alexrada Could you - just to check - provide the angularJS + angular-translate versions you were using in the error case?\n. friendly reminder: @denjaland any update?\n. Hi!\nDid you see the chapter \"Multiple translation IDs\" in the manual? \nSee http://angular-translate.github.io/docs/#/guide/03_using-translate-service\n. Well, but angular-translate is only a translation module, not a business logic for your app :-).You can experiment with custom stuff, but in general I'd advise that you just give the translation logic the exact keys you need instead of relying on what the translation file provides. If you need the JSON for defining your questionnaire - angular-translate is not the right thing to look for in the first place...\n. Can #1125 help you getting some ideas? And by \"parameter\" you mean key?\nCompletely mixing the multiple translation table \"additions\" from different sources per language in memory is - as far as I still know - not really possible until now and we've had also some tickets about that (can't find them quickly).\n. @knalli I was also asking myself these questions you had :-)\n. two things:\n1) check if you have ngSanitize included - read https://docs.angularjs.org/api/ng/directive/ngBindHtml\n2) \n<span ng-bind-html=\"'Next'  | translate\"></span>\nshould be the correct way\n. What's the issue? See\nhttp://plnkr.co/edit/2lAzG0Md7O2IYvXBEgjr?p=preview\n. Well... if Next is not true or false... erm... yes. \n. Hm... taking  http://plnkr.co/edit/8J6SfdCqwY16lyzSoM2x?p=preview as an experimental base - I don't see an issue here?! Any details on a different setup you use?\n. Blind guess... look for loaders?\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\n. @Taewa what does \"out of angular\" mean? It is Javascript. So it depends where you put it and if the variable is visible in the config-section of an app or not?!\n. Just create yourself some json file containing translation content and point to it. \nIt is just an example \"foo\" and \"bar\" is quite common for dummy text :-)\n. Well, yes, write a filter, convert it with Javascript. Whatever you want. \nIt's nothing that looks like something related to angular-translate, or? We try to keep the module as generic as possible and you can always extend it with whatever you find or develop.\n. As this is somehow very, very special - you could still write an own directive, do some logic in there and call $translate from there.\n. Hi! Can you setup a short plunkr wit a complete example? As this \"bug\" comes up from time to time out in the user base, I'm now just collecting all the ways people setup fallbacks etc. and then find a solution that will \"cover\" all scenarios if possible. thanks.\n. Yes, this behavior is already a known \"bug\" but I instantly can't find the corresponding ticket number...\n. Yup, picking that. \n. @envision do you have the possibility to check if the PR (even though it might not be merged yet) will fix your issue (against canary probably)? Thanks.\n. the translate Filter is not asynchronous while the loaders are. If you need to get translations programmatically, try $translate('KEY').then(function (..... instead.\n. Can you point me to where The call to \"Browser.langauge\" comes from or where this is defined in browser specs?\n. What does \"wrong\" mean - do you have another language set as primary in your browser? Which browser do you use? Which languages are configured in it / the operating system.\nThere are a lot of buggy places for language detection client-side only, so I'd strongly suggest to send a \"language dummy ping\" to the server and resolve that result.\n. Nesting multiple translation directives does not work due to the replacement. Yes. Expected behavior currently.\n. @shiruken1 It is complaining because you haven't add the dependencies in the HTML file correctly as far as I can see. If you don't include the scripts correctly - it won't work :)\n. You could start off with a Plunkr @knalli created (updated with 2.8.1 some weeks ago)... - the code showing some things is from some experiments, but the dependencies / script links should be a good starting point...\n http://plnkr.co/edit/2lAzG0Md7O2IYvXBEgjr?p=info\n. Besides some typos that also needed to be fixed, here is a basic one, but I'm not so familiar with controlleras in combination the the translate-promises, ui-router AND partial loader... the scope-vars get lost during page transitions back and forth - no time to look deeper into it now.\nFor a \"how to\" I'd suggest: Use stackoverflow as you'll reach a broader base!\nhttp://plnkr.co/edit/BeAClaiOxvGN6kKpIINM?p=preview\n. Well, yes. Using instant with async loaders to retrieve the content / translations from the server might cause weird results as instant is simply doing what it says: Instantly translate the keys.\nIf the $http calls haven't been finished yet it will not take care of this.\n. Could you show a complete example as a plunkr? Just with the config - and it looks a bit weird if you don't define any translation keys, define an inline translation table and  I don't know what the expectation you have would be?\n. Did you read the next chapters besides the one you referenced on fallbacks?\nEspecially http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\nor partials?\nUsually you configure this as the async loaders \n. But for the setup above you pointed out, we're missing your async-loader configuration. Maybe to better support you - can you put up a complete plunker?\n. Hm, have you seen the examples in the demo folder here? \nEspecially I mean \nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex9_load_dynamic_files.htm\nAs you can see, there is no need to define \"empty\" translations.\nIf you simply add a fallback (de in this case) to the setup phase - I've tested locally:\n$translateProvider.fallbackLanguage('de');\n- the demo will try to find the translation in (without the cookie set) en_US and if this is not successful, look for it in a file / resource de.json on the server (as configured). \n. Question - Implementation should be:\nNo matter, what determinePreferredLanguage analyzed - the registerAvailableLanguageKeys - output defines the valid languages. \nTherefore if your browser is de-DE and this is the preferred due to this - which of the languages shall be chosen as the active one by the module?\nUsually, you could now define this wildcard mapping as a second parameter (maybe needing the correct mappings in before - didn'T test it:\nregisterAvailableLanguageKeys(languages, {\n      \"*\": \"ar\"\n    })\n. Hi! Have you read through http://angular-translate.github.io/docs/#/guide/19_security ?\n. My personal thinking here is: \nIt was never intended to handle complex \"keys\" with HTML inside - so meaning DOM-structures as keys. \n. To assist @knalli: We in the projects use Text - Keys like FOO.BAR.TEXT - no HTML constructs for the translations. HTML-code is surrounding the keys. That's the reason for example, why we didn't go for angular-gettext that time as this was the preferred approach.\nThe html-full-translation is a good alternative approach - as also angular i18n was planned to be. \nIt's nice, but also sometimes more complex to implement as library author and in the projects. \nThat's my 2cent...\n. I'm a bit far away from the topic itself. \nBut with a bit reading into the issue, I'll agree that changing the behavior to undefined without a switch is somewhat a breaking change (I can't judge on the side effects just by reading... ). So I would also say: yup, at least as an opt-in feature / toggle.\n. Did you read the chapter on http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading ?\n. If you really want to do have these values 1:1 inserted, you have to set the sanitize value accordingly (maybe to null). Sanitizing is working as specified in the docs as far as I can see in your example. \nLook around in the issues here - there are plenty of discussions on Sanitize functionality\n. Closing. Feel free to reopen in case some bug comes up or open a new issue. thanks.\n. maybe for some reason (I don't know your code), your $scope is not getting the event? Tried with $rootScope? \n. If it doesn't work in your case with the $scope - then you've already shown your solution. Clean it up in a destroy function. I wouldn't advise to modify such a core event now in the module as it might affect a lot of existing applications which work fine currently.\n. This is not possible with the standard sanitizers. But you can customize the behavior probably - search in the tickets or on the AngularJS site itself.\n. The functionality of a sanitizer is to remove malicious code parts and other stuff, so - if you want everything in there --> set the sanitizer to null.\n. I understand that \"issue\" and requirement, but currently we don't have a clear solution on this combination in the terms of angular-translate + sanitation. \nIf you have plenty of time to wait - the i18n submodule of Angular itself will someday be a better solution in these cases where the element order of html etc. is also important or changes in each language and you need sanitizers...\n. from a security point of view, this could open some holes in combination with disabled sanitizing etc. - just my 2cent\n. I agree with you, Knalli. This is a bit of encapsulating logic inside a text content - so more of the interpolation of the interpolation or \"cascading filters\".\n@tonyfinn Isn't it an option for you to use the directive and pass in the formatted date value? That would usually be the way to go.\n. @knalli didn't we have this request already in some other issues? I'll see what we can do ...\n. @iamdriz \n\nwhy would you want the key to show and not the original content?\n\nWell, at least speaking for the projects I am working on and where we use this module on, we're not putting dummy content in the node value/text, but only use Keys with either empty content/text or simply the key. \nAnd we want to see where texts are untranslated so we can feed in a translation at least for one language. To achieve that, we use an error handler but also we can see it on screen that it is untranslated.\nI guess, the approaches are simply different we have in the wild.\n. Could we combine this probably with #986 request?\n. I'd try to have a look, but won't manage it before the weekend.\n. On 1st thing: \"Test case in browser\"\nTested in browser with my long-term, own fallback-all-in-scenario on canary - branch. As soon as the if block\nif (!$uses) {\nis commented out -> works as expected. Otherwise not.\n. @knalli FYI: created a test for the issue locally\n. @sebek64 / @mkalafior - I've provided a small PR, can you have a try on it and patch it probably locally manually for a short test if your both scenarios will be fixed? Would be great. Or just wait if knalli has done his check and integrated it to canary.\nThis fallback / preferred / whatever stack is a bit grown too volatile :-)\n. Can you setup a short plnkr, so we have a valid testcase showing all configuration you have? thanks.\n. Ok. Got it. \nYes, the line you marked looks incorrect also to me. @knalli any reason for pushing in that if-section lately?\n. Duplicate of #1415 - closing in favor of this\n. Hm, if I exactly call your plnkr, my browser puts\n&lt;script&gt;alert(1)&lt;/script&gt;\ninto the output - isn't that expected and sanitizeD?\n. Now I see. yes. But it is not executed?\n. So at the end in this case it means:\nIf a translation key has no corresponding value in any language and the default behavior to show the key again is used - it might open a kind of XSS issue.\n. Did you have a look at the bunch of test suites we have for testing the functionalities?\nhttps://github.com/angular-translate/angular-translate/tree/master/test\n. Hm, I'll have a closer look at that example (by the way: do we have some documentation on that somewhere? Couldn't find it quickly) - didn't know that. \nMaybe, some things of the PR could be achieved with this, but in the $http.transformResponse - case, the translation values itself need to be modified, right?\n. Yes, you can do parts as far as I just tested. \nBut the advantage of the later \"intercepting\" is that you can react on the language you're in as a target (in case of fallbacks - can you get this in the $http.transformResponse? -- I'm not sure) and you can work on interpolation results / interpolation mistakes. And it will work on all async / in-memory loaders & translation-key models as they're already normalized in that stage.\nWe've had a project request as in the above description for translation purposes to have a small \"WYSIWYG\" - feature (or more \"What you see is where you need to translate the context\" for translators.\n. I guess, I know what you mean, but where exactly do you currently have an issue with the order of loading the scripts? (e.g. in oc.lazyLoad you can trigger dependencies and load order also)\nAnd on the other hand, this concept is already part of discussion on 3.0 - #995 \n. You know... no one reads it :sweat_smile: \n. what does it mean \"when I launch my app with Grunt\" ?\n. Without knowing your exact config - I'm not sure how we could help in your app development here. But if I search quickly on the web - it leads me to SO and this particular link:\nhttp://stackoverflow.com/questions/30885568/angularjs-unknown-provider-cookiereader\n. So what is the error here? You're anyway rejecting with \"options.key\" - so it will return the key.\nYou need to cascade here and call the staticFilesLoader I would say. \n. We're always happy to help, but for general \"how to\" questions, Stackoverflow is the best place to ask as there are more experts being able to help you. \nIn your case, I would suggest you should refer the staticFilesLoader factory and call it from your error part of the example code with sth like (don't have example code here currently):\nreturn $staticFilesLoader(options);\nor something similar (this is just an outline, maybe the quick - shoot is just a shoot in the foot ;-) )\n. Without your complete setup as an example case via plnkr.co - it is hard to guess what goes wrong. But please - use and try it with the latest version of angular-translate. We do not support any older releases like 2.2.0. Thanks.\n. Could you please provide a complete plnkr showing your setup? Without it, it is a bit hard to see what is wrong.\n. Are you really using an Angular 1.3.0 as a baseline?\n. But, honestly, try with the latest angularjs from the 1.3 stream. If the error still stays and has some relationship to angular-translate - ok. But otherwise, it's digging in the dirt of some angular-stuff. \nAnd for test / issue replication, it is always a basic to use the latest version of the core framework...\n. Have you searched through the issues on requirejs related things? Maybe the solution is already there?\nhttps://github.com/angular-translate/angular-translate/search?q=requirejs&type=Issues&utf8=%E2%9C%93\n. Hm, the first case I don't really get on where you insert variable a as the option code doesn'T contain it. \nSecond question: Do you really use angular-translate 2.1.0 or is this a typo?\nAlso it will be hard to guess that the issue could be without a complete example - that makes life easier. Possibly it also depends on how you process the title-label\n. But what does iterating a normal array have to do with angular-translate?\nIf you're iterating through \"cnames\", you have to put it into the scope and not fetch it as a part for angular-translate. But that's nothing that has to do with this module. The architecture is simply wrong you're using.\nIt's the best way to ask \"How To\" questions on Stackoverflow.com as we can only support fixing bugs or adding new features here.\n. Hm. Works? What is different in your setup?\nhttp://plnkr.co/edit/hLjZwKH8MptxkeOIsqp4?p=preview\n. Can you provide a complete plnkr setup with the language files? Either I'm overseeing an issue in the already-posted text part, or something is wrong :)\n. What shall this be? @th3nate ?\n. I'm sorry, I don't get it.\nEven it is better to ask \"how do I...\" questions on Stackoverflow (http://stackoverflow.com/questions/tagged/angular-translate) , as this is the feature-/bugtracker for angular-translate. Thanks.\n. Without IDEA and using your plnkr - I don't see this TS2345 error. I'm just getting simple 404 errors. \nBut I'm moreover wondering why the first translation file is loaded and the others get 404, BUT the translation is not displayed (as it should be in the translation array anyway). Maybe there is a promise.reject - issue ... \nBut your IntelliJ-IDEA issue is to me none (whatever IStaticFilesLoaderOptions might be)\n. Another approach is to write a custom directive that does the trick and fetches the two translation segments separately. \nNow, you're mixing the (synchronous) filter approach with the directive (async) approach, which is from an architectural view not really good.\nAnd one general remark: Please ask \"How To\" questions on StackOverflow as you'll there reach a broader audience with such questions.\n. Well, without a complete code example, it is hard to see if there is a bug.\n. You can't mix languages.\n. Maybe you have some UTF-8 issue? Did you check on this? e.g. have a look at #1101 \n. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. you could use the service with $translate or the filter - see the docs here: http://angular-translate.github.io/docs/#/guide/03_using-translate-service\n. @knalli Question to you - is this line https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1845 \nworking correct? (introduced by your commit in the range of 2.10 <-> 2.11) https://github.com/angular-translate/angular-translate/commit/bde935e110a470ad56d322e494fa9ae000ca610d\nShouldn't it reject if the user (in the referenced demo) tries to get de_DE, but it is not registered?\nIn this case\nif ($availableLanguageKeys.length > 0 && !aliasedKey) {\nleads to the values $...length = 0 and aliasedKey = undefined ... as aliasedKey is undefined -> shouldn't it reject?\nOr I'm getting it wrong \u2753 \n. Yup, looks okay regarding the error. As this error is a bit flaky to find, could also be the right solution \ud83d\udc4d \nAs long as all tests still run - coverage should in the meanwhile also be good enough for fallback stacks... \n. It works with IE10 - I can guarantee that as I've running several setups with IE10. So without further details or an example, we're unable to help.\n. And what does the developer console on IE10 say? Any errors?\n. On which version are you working and where is the angular-translate.js taken from? It sound either a bit as if you're missing somehow the standard Interpolator (https://github.com/angular-translate/angular-translate/blob/master/src/service/default-interpolation.js) - which should be in the dist file or you defined some other interpolator that is not existing?\n. As I never used angular-translate in an ionic application and without an example it is more-or-less blind guessing... is the file being included also containing the default interpolation? like here: https://github.com/angular-translate/bower-angular-translate/blob/master/angular-translate.js#L2652 ?\n. I don't understand really your issue with this explanation as the example code is incomplete somehow.\nIn general think of not using the instant calls here. \nAnd: Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. Without an example code or plnkr it's hard to help! As the 404 suggests, something is wrong on your setup.\n. Out of this snippet it's hard to guess any error. Please either provide a complete example as something around AdminCtrl seems wrong in first sight.\nAnd in general: \nPlease ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. I just saw, that you already crossposted? http://stackoverflow.com/questions/37182597/angular-translate-resolve-in-ui-router\n. I've not seen any issue yet coming up besides that it popped up in the customer project where the \"instant labels\" were missing the post processing information.\n. Register a complete wildcard element at the end of the registerAvailableLanguageKeys \n...,\n'*', 'de'\n})\n- did you try this already?\n. Please provide a complete Plnkr as an example, otherwise it is a try&error guessing without the controller etc. and your dependency injection in general.\n. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\nBesides that - have you read https://angular-translate.github.io/docs/#/guide/06_variable-replacement\n. use 'de' as the 5th parameter, not the 4th.\n. API-Documentation needs update here as far as I can see. :-)\n. As this is not the first time having \"one time bindings\" here - have a look at the issues #1450 and #1062 for some more ideas.\n. Maybe #1448 can help you here?\n. @satyavanu what part of your strings is shown as \"ASCII\"? If you could provide a screenshot and mark the error and expectation it might also help us. I don't get it either :)\n. LGTM - I also share knalli's remark :-)\n. Why should you put them into constants? In case you want to have them available immediately, why not putting them in the configuration section as documented in https://angular-translate.github.io/docs/#/guide/02_getting-started.\nBut anyway, maybe also having a look at the other sub-/sisterprojects helps a bit here to do some precompiling instead of async loading if you don't like it. E.g. https://github.com/angular-translate/translate-compile\n. Yeah, you're right. Thanks for the report. We'll fix it.\n. It's not fixed, so please don't close.\nThe correct chapter URL would be https://docs.angularjs.org/guide/filter by the way. Your one links to the API documentation and not the guide :)\n. Hi! \nThanks for the report. To help out - can you setup a short Plunker (plnkr.co) so we have a running example to take a look on?\n. @newjs Are you still active on Github an could help out? Would be great. Thanks. \n. Hi!\nHave a look at the bower - dist mirrors we currently provide - e.g. for the main module: https://github.com/angular-translate/bower-angular-translate\n. One thing I'm already seeing (even though I'm not Pascal...):\n$translate is returning a promise, so that is why you see \"object Object\" as the return value. Please see the documentation https://angular-translate.github.io/docs/#/guide/03_using-translate-service\n. As written in the template for the issue: Please provide a working code example. Otherwise it is hard to guess the issue. Thanks.\n. Please have a look at #1101 - it might be something on sanitation and UTF8.\n. If you take a look into the Travis Log it seems to fail from time to time the last builds. Locally, it runs here. So it looks more like a problem on the build server. Could be something locally also, but the errors on the build server are not really consistent.\n. @knalli Yup. No issues locally.\n. Hm. Ok. I'll check out to a clean folder and try again with that one.\n. after using a clean workspace and running\ngrunt run-script test-scopes\nI was able to reproduce the issue.\n. Yes, that is the default behavior. The error handler is IMHO called per language - so that's why you see it double on your second key and only once in case of german for the other key.\nThe \"tested\" language is also handed in as a parameter, so the error handler can log or react.\n. Looks like the directive \"translateAttr\" is not included in the dist build result.\n. @odedniv The translate-attr.js file is having some issues on the jshint step as well. (as introduced by #1550 )\n. Yup, it must be added somewhere around line 60 in that file, then it will be added to the core js.\nThe fix will probably take some days as @knalli is afaik off for some days and I'm not 100% aware of the release process currently. \ud83d\ude1e \n. angular-translate is a translation module while the official i18n modules for AngularJS target localization. These are two different things. \nBetter ask such \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience - if you really need some locale integrated stuff in angular-translate. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. You provided an example of the configuration, but not a complete example - that is bad as so many things could lead to this situation. (slow JS loader, order of scripts etc). Have you also used the translate-cloak stuff?\n. One thing that you always should have in mind: If e.g. the base html file already contains translation keys, you will nearly always see them shortly as they are loaded, immediately rendered and the javascript is loaded afterwards. This all depends - as said - on some complexity levels. If you really need some 100% hiding, the best is to hide the targeted elements somehow with inline CSS or similar. \nAnd a bigger JS file could still cause this behavior. \n. You should have a look into the developer console! Maybe your relative path to the template is an issue?\n.  @axetroy Please ask \"how do I...\" questions on Stackoverflow and please don't \"hijack\" an existing ticket with a probably different scenario.\nFile a question on  http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience (including a plunker). \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. Also, providing a complete example (as a Plunker) might help everybody to find the solution faster.\nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. In general LGTM. But from a readability view, I'd write it differently or just put this check in a function named \"isDefinedOrEmpty\" or similar.\n. This doesn't happen here. See this simple example on the versions you mentioned:\nhttps://plnkr.co/edit/7zdTmhZloVEaovjjy2DV?p=preview\nBut make sure that you include as well an implementation for cookie / storage.\nFeel free to modify the plnkr to show your problems in detail. Without an example code, it's hard to help.\n. The question is: What browser are you using and what are the locale settings. Client side detection is not as stable as also written in the documentation. Are all language files as well in place?\nAnd also try again with some latest angular-translate version.\nFor a better diagnosis, a Plnkr would be helpful.\n. what happens if your remove the / at the beginning? Then it is a relative path.\nTry that first\n. Hm. I'm a little bit irritated about the whole  blocks in the first and last comment here. The webserviceObject is expected to be async, huh? So the loader might catch... nothing? And how does it catch multiple languages here? \nAnd in general I'm wondering what the special corner case is here?\nYou're fetching some async translations containing variables that need to be interpolated with content coming from your application or elsewhere, right? Something special added?\n. is your properties file in A=B - style or as JSON-format? (just to make sure...)\n. No. it's not possible with the base we provide. You may have a look at #924 \n. When clicking on en-US or en-GB -- nothing is happening here and the keys are shown - and this is correct, as the system doesn't know anything about a fallback stack in your plunkr?!\nAlso one suggestion: Try to use the latest angular-translate library versions in your examples to cut out any other (already fixed) issues.\n. just a quick fix - if you change your mapping on the registerAvailable... from \"en-gb\" to sth like \"english\" and register it accordingly - all mappings will work. \nYes, somewhere the detection/mapping fails currently in this special case due to lowercase or matcher.\n. Have a look at the \"result\" of our build process - https://github.com/angular-translate/bower-angular-translate-storage-local , there you'll see in the minified - as well as the normal - version, that your fix is not needed as the injection takes place differently.\n. This looks already strange... \n<translate translate=\"test_id_2\"></translate>\n. Have a look in the documentation - see https://angular-translate.github.io/docs/#/guide/03_using-translate-service\n. I don't know exactly about Ionic - components. \nPlease ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. Also, the documentation at https://angular-translate.github.io is a good place to start looking for deeper knowledge on angular-translate.\nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on if needed. \nThanks.\n. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. Just a general note: \nPlease ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\nAnd this is not ng-translate by the way.\n. Closing to avoid double discussions in favor of the SO link.\n. Why don't you write\n{{(installedPillars.indexOf('LM') != -1 && installedPillars.indexOf('TM') == -1)?'JOB_MANAGER_FIELD_JOB_CODE':'JOB_MANAGER_JOB_ID' | translate }}\n??\n. What I'm missing: A testcase for this scenario\n. Hm. I don't get the issue. $translationTable will contain the async result as soon as it is available.\n. If you look at the documentation of https://angular-translate.github.io/docs/#/guide/12_asynchronous-loading and then think a bit further, what you do in the config section is:\n- Define what loader to use (can be your completely own written one) \n- What file path / pattern to look for language files or resources\nSo if you need something special, why not define your own (partial) loader, tell angular-translate to use that and implement the \"interface\" methods it is seeking for with what you need / want. \nAnd yes, in some point in time in the configuration section you NEED to tell the core module how to look for translation(s) (tables). \nYou call addPart from where you need whatever in the services / controllers - depending on your architecture. And if all the module currently provides as flexibility still not fulfills your requirement, maybe then - the architecture needs a review :-).\n. And if you want to prevent the browser in general to cache only the latest versions of \"files\" (including these JSON), have a look at the whole caching http headers like ETag etc. - but this is not an issue of our module here. \n. And what is the specific issue / question?\nPlease ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\n. Did you check on namespaces? (or do I get the question wrong?)\nhttps://angular-translate.github.io/docs/#/guide/02_getting-started\nYou can access\nFOO.translation\nand \nFOO.notes \n. The dot syntax is essential in the project currently. Feel free to provide a concept on how to achieve your suggestion without breaking changes, but I personally currently don't know what the goal is currently. Maybe you could provide a conceptional example / explanation.. Sorry, I don't get it.. Hi! Thanks for reporting this. If you have yarn < 0.16.0, please consider updating.\nAfterwards, you can add \"--ignore-engines\" to your yarn add command and it will pull angular-translate correctly.\ne.g.\nyarn add angular-translate --ignore-engines\n@knalli do we need a rollback again here for the package.json on dist and only have something like a \"node >= 6.9\" for development related stuff?\n. Hm, yes, it is some harder cut maybe for the yarn users. But to get to a LTS nodeJS environment plus a 3.x npm environment - from that point, it does make sense for the developer side. \nAnd for the yarn and user level  - a workaround is described above for the current version.\n. Yup, maybe we need such a dedicated one.\n. What I don't get basically: Why does it make sense to hide elements, if a translation is missing?\n. I don't really see this as an issue of the module, but an idea for this special case could be to work with the missingtranslationhandler and do some DOM manipulation inside by looking for the element that needs a visibility toggle based on the key? \nhttps://angular-translate.github.io/docs/#/guide/17_custom-error-handler \n. If you're looking for a better \"how to\" - forum - please use Stackoverflow as we only can help with issues and bugs, use: http://stackoverflow.com/questions/tagged/angular-translate \n- you'll reach a bigger audience. \nAnd yes, it doesn't provide the DOM-element reference directly. In case you only have an element once per page, you can search for it on the DOM and then do the necessary steps. \n. Thanks for the report. You're right. But gladly, until now it didn't cause any issues so far :smile: \n. a) never mix versions of a loader and a base of our module. Always take the same versions.\nb) Have a look at the demo https://plnkr.co/edit/NO9oIqtnWWsVMMuIXa6Y  -- I don't get any issues. So what is the problem?\n. LGTM\n. Maybe the last part \"Using Post processing functionality\" can help you here in combination with a \"uses\" call to determine current language and fallback etc. - see  https://angular-translate.github.io/docs/#/guide/16_error-handling. Could you please fill out all fields in the ticket form (expected behaviour etc.) and then as well, provide a working demo? thanks. \nI'm not getting it 100%.... Have you read about the security / escaping on https://angular-translate.github.io/docs/#/guide/19_security ? And maybe you should provide a complete example so we can see what goes wrong.. A complete example would be some plnkr according to the guidelines for issue filing. But anyway - I don't see an issue here. Look: https://plnkr.co/edit/TJm0BT?p=preview. Hi!\nI agree with you in most points, and even a bit more realistic, I see that maintaining only one language on the \"guide\" is the only solution to have a good documentation attached to the most current release. Maybe, we should introduce a \"this documentation was made for V ...\" stamp on the pages, so whenever someone out of the community updates the documentation to be in line, I'm happy with that.\nThe point on support is a major one, and I still think, it/we should or must be more straight forward to forward \"how can I\" - threads to StackOverflow or wherever, while reducing the support amount here.\nRegarding the feature and compatibility improvements - and this is the most crucial part - I personally would still try to reach out to the community and the i18n streams of the core team, so we see, what is already core-planned as the plans changed a lot the last 2yrs there as well. It could be an approach to rewrite this module in TypeScript or make it Angular2 compatible as a smaller step, but it must be worth while.\nCurrently, I'm still having a time shortage for everything besides business and family but will keep up supporting and fixing here with you \ud83d\udc4d \nAnd if we have an idea, where to go with useful radical refactoring (means to me: driven by projects / community), we should go there if we can effort this (means, mostly us two).\nFrom my business projects perspective, currently there is no feature driver in the background, so it'll all be volunteer work for me.\nI'm asking myself something like: \"Did we reach feature completeness already and the pending requests are more cosmetic and project specific requirements by the users?\". We could do a Skype call or similar to walk through the list and then refine it.... Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.\nBut you're right - it is not available yet during \"setup\" phase (config + run). So you'll not get a stable response during that phase.. Closing due to inactivity. Feel free to reopen in case any bugs appear further on.. Hi! \nTo help out - can you setup a short Plunker (plnkr.co) so we have a running example to take a look on?\nOtherwise, if you need more help on a \"how do I\" basis, please try asking this question on StackOverflow - you'll reach a broader audience there.\nThanks. . Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.. Sorry, I don't see any changes by you in this PR. Please recheck.. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.. Honestly, the question is 7 hours old - are you really expecting answers that fast?. Hello,\nas we had already mentioned in the issue's template, we need a working and as minimal as possible demo covering your specific use case or issue.\nFollow these steps:\n\nPlease open this plnkr base.\nFork it (at the top left).\nEnsure the version of AngularJS and angular-translate is correct.\nEnsure all angular-translate plugins are available; reduce and remove anything you can.\nWrite a minimal as possible demo for your specific issue.\nSave and freeze. Provide us the final link to your demo.\n\nThanks.. Do you have your configuration part at hand or even better as in the template mentioned - a short plnkr - example?. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.. Please ask \"how do I...\" questions on Stackoverflow: http://stackoverflow.com/questions/tagged/angular-translate - you'll reach a bigger audience. \nThis issue tracker is mainly the feature-/bugtracker for angular-translate. But you're always free to add a feature request later on. \nThanks.. Link to https://github.com/angular-translate/bower-angular-translate please\n. Link to https://github.com/angular-translate/angular-translate.git\n. https://github.com/angular-translate/angular-translate.git\n. https://github.com/angular-translate/angular-translate/graphs/contributors\n. https://github.com/angular-translate/angular-translate/graphs/contributors\n. see above\n. see above :)\n. https://github.com/angular-translate/angular-translate\n. https://github.com/angular-translate/angular-translate/wiki/Demos (anyway, outdated!)\n. hehe. yeah - isn't it a trend in the JS world? That was somewhat the idea. :dancers: \nWe shall have enough seas and lakes for the next hundred releases and we learn something 8-)\n. correct. is missing. thanks.\n. Yes, that was one of the lines I was also a bit thinking about. Agreed.\n. \"Never change a running test, add a new one with different setup\" :-)\nI guess that would be what we suggest...\n. Could be a better placeholder - definately. Shall I insert \"x.y.z\"  instead? I didn't want to provider '' as for test cases it could be good to have a templated test value.\n. We don't have to update it. That's why the grunt-version tasks is included and replaces it?!?\n. Ouh, in my generation a \"?!?\" is just a \"or did I miss something\"? :-)\nSo put the weapons back to the holster :-)))\nappropriate -> x.y.z. The parser just needs some value and for test cases I would suggest some abstract value anyhow.\n. ok. @PascalPrecht any other suggestion? If not, I'll fix the PR on that line.\n. Yes, some gap / missing code there. Damn... had it on my list in March, but forgot about it somehow :-(. \nShould be extended to contain the block with the return value: \nsee https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1057-L1061\nAs there are some more occurrences, we should make a function out of it I would say.\n. was this commit intentional?\n. Could you try to write a small ngdoc-conform comment for this? Thanks.\n. Looks good to me and should work. But could you please provide a test case on this element also?\nAlso, we should in this \"patch\" / release then fix or ... erm... implement the logic here \nhttps://github.com/mofux/angular-translate/blob/master/src/service/translate.js#L1146\nhttps://github.com/mofux/angular-translate/blob/master/src/service/translate.js#L1187\nalso :-).\n. This comment / Error doesn't make sense here?\n. same as above?\n. Is this the very short try-catch form? I'd prefer a more readable layout for this as minification is anyway \"compressing\" it a bit :)\n. Didn't know about the possibility of the shorted ['catch'] - statement. :baby_bottle: \n. Ah. Thanks. Didn't know that IE8 has problems on that :-).\nFor others as a reference, linking in http://stackoverflow.com/questions/23105089/angular-q-catch-method-fails-in-ie8 as an explanation.\nThe basic question is if we continue to support IE8. There will be more issues as well sooner or later :-)\n. add: This will overwrite the existing language table for this language key. It will not concatenate the table\n. Just curious: What das !(!value) exactly do? Avoid some undefined situation? :)\n. Hm, then I remember it wrong - didn't have time to look it up in the source. My fault. Whoops :-) But then please add the documentation just the way around so it is clear what will happen for all people taking a look in here.\n. So then it means: The previous value is overridden with that one from the async response in case it was already set.\n. Exactly. I fully agree with you. Don't start \"localizing\" the technical references. It should be identical across all languages. \n. Is this an addition compared with the other language-docs or was it only diffed on an older version? We shouldn't have examples that are not in-sync. \n. see the left side of this diff. There is no line 116 with \"translate-value-nombre\" (or translate-value-name)\n. Hm. The last sentence isn't really serious.\nAnd on the other side, the whole git clone won't work for end users as cloning the source repository won't help you in using a distribution and you need (as partly documented below) a compilation step giving you the dist - version.\nSo to me, this is more something for the Developers rather then for the end users.\n. Isn't it github.com/angular-translate/angular-translate.git ?\n. Why should it be ^1.4.7? Doesn't that exclude 1.2.x and 1.3.x as dependencies?\n. Just took it as it was below - could we have the situation where key is already running out if translation.key? Maybe I was just misreading it.\n. Yup. Kills some of the fallback-async issues :smile: \n. That is what I meant with the last comment: I first thought, that there might not be a difference in between key and translation.key , but due to a very slow reply, this could possibly happen after rethinking... or not? \n. Oh. This was just a reviewer test ;-). \nI'll have a look - you're certainly totally right.\n. Just saying: a \nreturn locale;\nwould also do, right?\n. JSHint complains \nExpected '{' and instead saw 'return'.\n. semicolon missing\n. semicolon missing after ()\n. { } brackets missing around the statement\n. {} missing\n. ",
    "danielbsig": "Yes, this is the solution I came up with as well (although I have an additional check if this is an array of promises, as I see it the JSON file could theoretically contain an array of language definitions, but this is unlikely...)\nAnd this works... kind of, but not completely. I'm not sure why, there seems to be a timing issue here, since some elements do get translated, but others won't. I'm not sure if a $scope.apply() would be needed, I have to investigate this a bit further.\nI'm also having problems with loading json files which contain sub-definitions, i.e. something like this:\n{\n    'myFirstSubApp': {\n        'FOO': 'bar',\n        'SMURF': 'barf'\n    }\n}\nbut this is another problem and shouldn't be a part of this issue :-)\n. Yep, that was next on my TODO list :-)\n. Check this out:\nhttp://plnkr.co/edit/Hx8eXN\nI may have made some errors, but at least this behaves in a similar way.\n. Ah thank you very much :-)\nI'm still a bit rusty when it comes to the concept of a promise. But this is then fully resolved!\n. BTW I don't think this needs to be very complicated. Just like there is a .uses(language) function, there could be a similar function: .invalidate(), which would simply inform the custom provider that it should reload the language files for the currently selected language. The provider could then either just reload whatever language files it deems necessary, or if it wants to use some sort of a caching it could do that.\n. Yes, but aren't they all executed at startup?\n. ... I would only be interested in those sub app which the user actually enters...\n. I think they are, otherwise they would be unable to register the routes required for that app to function correctly.\n. It is no hurry actually. I'll see if I can come up with a pull request, but don't hold your breath :-)\n. Great, didn't know about that project. Will check it out. Thanks!\n. ",
    "dylang": "Great, looking forward to trying it, thanks!\n. Should part of this ticket be to remove \"postinstall\": \"./node_modules/.bin/bower install\",? This step is not necessary when using npm instead of bower.\n. Nice work @NickHeiner, looking forward to #708 getting merged in and published.\n. ",
    "rkoch": "Great, thanks. Let me know if you need further information!\n. @DWand I actually already found a workaround - I am watching for the event translationChangeError and do a language reset (based on browser prefs) then. I think this is even better than my previous approach in .run(). But it would be cool if the plugin gets that a language does not exist and doesn't even start a request.\n@knalli I think you are right about not returning a value which isn't confirmed. But $uses could always return a promise (not just when used as setter) so if it is in the middle of a language change, it would defer until that's done. Of course a $proposedLang would do the job as well!\n. @PascalPrecht why not always return a promise in $translate.uses()? In the case that no change is pendent the promise would be instantly resolved with the language stored in $uses. This would also normalize the interface between getter/setter as both would return a promise then.\n. +1 for @knalli s method proposal. First I came up with the thought of $translate.usesAsync(), which would always return a promise and to not break the existing API but I think that's over the top. So $translate.proposedLanguage() is simple and straight forward.\n. @PascalPrecht I agree with you that proposedLanguage() should only return a valid value when an async loader is pending. Otherwise $nextLang should be undefined. If the table is already loaded no async loader has to be invoked so $nextLang should stay at undefined - I could have stated that more clear in my plunk.\n. awesome thank you!\n. great to hear, thanks.\ndo you have any plans for a release date yet?\n. @PascalPrecht I just upgraded my app to v1.1.0 and can now confirm that this issue is fixed - thanks for your work!\n. Well have fun there! It's not urgent, so no hurry ;-)\n. @PascalPrecht yup that's correct!\n. Ooh..How have I missed this!! Thanks for clarifying :)\n. ",
    "cburgdorf": "Ok, as my wife turned 30 just today, I'm faced with some time constraints. So here is the quick and dirty guide on what to do:\n1. setup grunt-html-snapshot to create snapshots of all pages of your site. Currently you need to list each page that should be saved (as it can be seen here: https://github.com/cburgdorf/couch-website/blob/master/Gruntfile.js#L16) With a future improvement of the grunt task, the task could spider the site itself to figure out all pages to take snapshots from. (Patches anyone?)\n2. Make sure 1.) is part of your release step and the snapshots are stored among all the other files that usually go into your dist folder. We currently save all snapshots into the root level of our dist folder so that we have files like snapshot____de-de_about.html directly placed next to the index.html file.\nSee: https://github.com/cburgdorf/couch-website/blob/release/snapshot____de-de_about.html\n3.Then configure your webserver to spit out those templates according to the hashbang spec. E.g. www.mypage.com/#/foo will be requested from your server as www.mypage.com/?escaped_fragment=/foo. So just configure your webserver to hand out the correct snapshot when it sees such a request.\n1. Also add <meta name=\"fragment\" content=\"!\"> so for pages that don't have a hashbang in it's URL but still depend on client side js to be functional. That's usually the root page of your side. With this meta tag we make sure that the google also requests www.mypage.com as www.mypage.com?/escaped_fragment= even so it has no hashbang itself.\nHope that helps.\n. I must agree that I don't see how angular-translate could help here. The different languages should be accessible via URL (e.g. mySite.com/en/foo vs mySite.com/de/foo) and then be saved via grunt-html-snapshot individually (e.g. https://github.com/cburgdorf/couch-website/blob/master/Gruntfile.js#L16).\n. What I would like to see is the ability to just evaluate the values once when they are needed. Then just register one $watcher that listens on a language switch. Only if a language switch occurs would we start any processing to update the values. So no matter how many translations we would use, there would only be one $watcher being used. I'm not exactly sure how it could be implemented but I have half assed ideas flowing through my head...\n. @ProLoser I'm aware that every {{}} creates a bind under the covers. My comment wasn't meant to provide a out of the box solution to the problem. More like \"thinking a bit out of the boxes\" :)\nI'm not even sure if my approach would be doable with angular as it stands today. However, just bear with me and assume we would use a custom bind directive instead of the built in one. Obviously you could easily pause/resume the binding as proven with this simple plunkr: http://plnkr.co/edit/SEBXFq?p=preview\n. I just had a look at the implementation of ngTranslate and noticed it uses this directive which hooks up the $watch. \nhttps://github.com/PascalPrecht/angular-translate/blob/master/src/directive/translate.js#L113\nSorry, I really don't know much about ngTranslate so this might be nonsense but...if it uses this directive anyway and hooks up a $watch itself then where exactly is the problem with my sketched stop/resume watchers approach?\n. Just to elaborate a bit further on the idea. It's not an entirely odd or new idea to suspend/resume bindings. In fact, every developer with a background on native GUI development will probably be familiar with the idea as it's usage can be found broadly among different GUI toolkits (e.g. http://msdn.microsoft.com/en-us/library/system.windows.forms.bindingsource.suspendbinding.aspx)\nI haven't looked deeply enough into the problem to claim that it's a possible solution for this particular problem here, however I think it's something worth investigating. I would really like you @ProLoser to elaborate why you think it doesn't make any sense. Could be that I'm missing something crucial.\n. Sure, you have to remove the watches. But that's a simple task as long as you save the deregister function returned by $watch.\nThis is what I also did here: http://plnkr.co/edit/SEBXFq?p=preview\nYou can abstract that into two simple functions that build the concept of suspend/resume bindings. \nAs you say, it would probably best to store all those suspend/resume functions in one big array (probably on some form of service). The directive itself should also still keep it's copy so that it can remove it from the array once the $scope is destroyed.\n```\n//somewhere in the translate directive\nvar unwatch;\nvar watch = function(){\n    unwatch = scope.$watch(attr.newBind, function ngBindWatchAction(value) {\n        console.log('running watcher');\n        element.text(value == undefined ? '' : value);\n    });\n}\nwatch();\nvar binding = {\n    suspend: unwatch,\n    resume: watch\n};\ntranslationService.registerBinding(binding);\n$scope.$on('$destroy', function(){\n    //we don't need to care anymore about this binding as the $scope is destroyed\n    translationService.unregisterBinding(binding);\n});\n//somewhere in the translationService\nvar suspendBindings = function(){\n    bindings.forEach(function(binding){\n        binding.suspend();\n    });\n};\nvar resumeBindings = function(){\n    bindings.forEach(function(binding){\n        binding.resume();\n    });\n}; \n```\n. ",
    "sgara": "I'm still pretty new to angular (and javascript in general) and I don't doubt you still have to change/add a few things before merging this but I'm glad if I can be of help.\nDo you want me to provide more tests and/or do some changes you mentioned ?\nYep, it's also my very first PR ;)\n. No problem! Got it for the tests, I have just been a bit lazy.\nI will be working on it tonight I think.\n. Hey @PascalPrecht,\nI made some minor changes and added some tests I could think of. Hope that's good enough :) Let me know if you think of something else!\n. Move to #87 \n. Still one thing to add\n. Great ! I'm happy I could help :)\nAnd btw, you did an awesome job with this module!\n. Well I hope that's only the first time ;)\n. Just my opinion : I think that using prefix for directives is a reaaally good idea (especially for names like 'values').\nYou avoid risks of name clashes this way ;)\n. You bet! I am running into such problems myself right now. I saw that you were working on a reusable angular component guide (didn't have the time to take a closer look sorry) and this should even land there as a best practice. \n. Hi,\nIn fact there already is such a feature even though I couldn't find it's place in the documentation. \nAnyway, it is called fallbackLanguage and it's used the same way preferredLanguage is :)\nStephane\nOn Jul 25, 2013, at 7:12, Christophe Levesque notifications@github.com wrote:\n\nIt seems that currently there is no support for a default fallback language.\nFor example, I develop my application in English and I have it translated in French. At the time I build my UI and labels, I may not have all the French translations yet so it would be nice to be able to tell angular-translate \"I'd like to show French but if you don't find the French string, show the English one\". Showing an English string is IMO better than showing a resource key. This is a feature that the Java resource bundle has.\nThanks for the library BTW! :)\n\u0081\\\nReply to this email directly or view it on GitHub.\n. Well I searched the 'Multi Language' section first so I guess that's where I would put it ^^\n. Anywhere near \"Decide which language to use\" seems like a good place to me\n. Oh yes I can do that, sure!\n. I'll see how #100 goes first but I might take care of that too\n\nMulti Language > Teaching your app more languages ?\n. Yep, that should definitely go into Getting Started\n. Didn't have the time to do... anything so far :( but I'm on it right now shouldn't take long!\n. Hi!\nThis is done on the server side. \nIf you use apache I suggest you read this : http://httpd.apache.org/docs/2.2/en/mod/mod_cache.html\nJust activate the mod, configure it, and everything is done automatically :)\nI have no experience with any other http server, sorry but I guess you could find similar things. Anyway, this is the server responsibility to check for file modifications and all.\n. Well it's simple caching but still I prefer rely on the server/browser to do that job.\nNow, if we're going that way, we should port the Modernizr test of localStorage instead of adding the whole lib as dependency.\nWe should support read (clean and rewrite), write and update (for partial refresh)\nThe module should be completely independent and optional\nIf think we should support both If-Modified-Since and Etag since I've seen some servers not handling one or the other.\n. To answer your questions I'm no expert but all browsers do that, even old ie8... as long as it is set on the server :)\nIf it's not you will never have cache anyway since it won't tell you if the file has been modified, it will just send you the file no matter what.\nBasically the browser you keep the file until you tell it to do otherwise, until the expiration date is reached or until the user decided to clear the cache.\nSince we're dealing with json files it might be a bit faster do to that ourselves but I honestly doubt it and even if it is I don't think the difference will be noticeable. \n. Oh and BTW (sorry for spamming you guys) : @DWand 's diagram truly rocks :p\n. Forget it, my bad\n. Always a pleasure ;)\n. I began to do so, stashed my work and cleared my stash -__-' I'll do it again\n. Well that shouldn't be a problem by the look of your script as long as you don't ignore them in the gh-pages branch :) but it's no big deal it was just annoying me to delete the site folder manually (typically because I'll forget to do so one day ^^)\n. Shouldn't we begin to pass args with those events as well ?\nFor example it could be interesting to know which language just succeeded/failed to retry / try another location.\n. Not even sure we need that much, broadcasting the key should be enough in many cases.\nMaybe adding a reason in case of failure (not found ? invalid json ?....)\n. smthg like $broadcast($translateChangeSuccess, 'en') and $broadcast($translateChangeError, 'en', 'I have a good reason for this')\n. I agree with @DWand on this one. $rootScope.$broadcast('$translateChangeStart'); should be the first operation of $translate.uses(), not useLanguage()\n. Well.. That would either duplicate the check or let $translate.load() without checks and neither of those are a good solution to me. Were you thinking of something else ?\nAlso, I let the possibility to use callbacks as function parameters but I think we can remove that safely in the end\n. Argh! Damn branches! ^^\nAnyway, after a good night sleep I would agree with you, I'll make the change.\n. Exactly what I was thinking, we should hide $translate.load(). Especially now that we removed the checks.\nFor the fallbackLanguage, it would be loaded whenever a preferredLanguage, isn't it what it is supposed to do ? Or could you provide me with a use-case where this doesn't do what we want ?\n. I see. \nOk let's load the fallbackLanguage when instantiating the $translate service, check if a load is needed and all. That makes sense and load() doesn't need to be public anymore so that's another good reason to make it private. \nI like the sound of that\n. Btw, I think load() will also come handy when dealing with cache to force the refresh for example.\n. As for the tests I updated them accordingly. We're not introducing anything new (on the contrary) so I didn't add any\n. Sure :)\n. Next time I PR to the wrong branch you can slap my face ;) Definitely have to be more careful.\n. :+1: \n. I'm on it!\nI already started working on this (and corrected those)\nI'll PR soon\n. A'right. Please notify me here when you're done reviewing the english version so that I can take your corrections into account before PRing ;)\n. Thanks pal! Great job. \nI'll finish all that as soon as I got time. Last 2weeks were crazy :)\nWe can close this issue I think. \nStephane\nOn Aug 11, 2013, at 17:58, Max Prichinenko notifications@github.com wrote:\n\n@sgara, my revision on the Guide is done )\n\u0081\\\nReply to this email directly or view it on GitHub.\n. Still working on it.\nI'm in holidays too so it goes slower than expected ;)\n\nStephane\nOn Aug 19, 2013, at 15:22, Pascal Precht notifications@github.com wrote:\n\nI re-open this until the fixes landed in master @sgara any progress? :)\n\u0081\\\nReply to this email directly or view it on GitHub.\n. Yeaaaaah! Just back from holidays. It should be should ready for tonight\n. Makes sense, that's coherent with many angular provider implementations.\nAnd I like this compact kind of coding (ah, coffescript...) ;)\n. Goddammit... \n. I thought I already did that. Well, I've done it again :)\n. Actually the shortcut feature could be helpful when trying to extend a key to a namespace without having to change the existing code. (let's say you had a foo module with foo.bar=\"bar\" and suddenly you want to create a new foo.bar submodule...)\nThis feature also has a lot of drawbacks but well, nobody's forced to use it after all. \"Use it at your own risks\" ;)\n\nOn the other hand, the linking is clearly a good idea!\n. Just one thing. Isn't just prefixing a word by '@' a little to simple ? Not that I can think of any case where you would want to begin a sentence by '@' (except here)\nMaybe we should use @{...} or @(...) instead for example.\n. :o how did you know ? ^^\nI will gladly! :) It might take me a little while though since I am still pretty busy at the moment. \nI could be able to send you the French version in something like 3 weeks I think. \n. Yep, it's just taking me ages... :/\nI'm getting close though!\n. I'll do my best and keep you updated then!\n. :+1: \n. ",
    "mwagena": "That's not enough, i need to parse a generic value to the language string..\nLike your doing with translate=\"\" values=\"\"\nOp 16 jul. 2013 om 18:49 heeft Pascal Precht notifications@github.com het\nvolgende geschreven:\nThink it should then be something like\nhtml\n<ANY title=\"{{ 'TRANSLATED_STRING' | translate}}\"></ANY>\nOn Tue, Jul 16, 2013 at 5:08 PM, Martijn Wagena\nnotifications@github.comwrote:\n\nIs it possible to use a translated string containing a variable in a\ntitle\nattribute?\nEg.\n\"TRANSLATED_STRING\" : \"this it the text for {{title}}\"\nThanks in advance.\nMartijn\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/PascalPrecht/angular-translate/issues/88>\n.\n\n\n/pp\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/PascalPrecht/angular-translate/issues/88#issuecomment-21055354\n.\n. Thanks! @knalli 's example helped me a lot! I guess i've missed it when reading your docs.\n. ",
    "erperejildo": "What about if we need to include html tags?\neg: \"translate<br />this\". @tspaeth  I've got the same problem. Running it with Meteor.\nI'm running both packages:\nimport Translate from 'angular-translate';\nimport TranslateJSONs from 'angular-translate-loader-static-files';\nAnd this is my .config:\n```\n.config(function ($translateProvider) {\n        'ngInject';\n    $translateProvider.useStaticFilesLoader({\n        prefix: 'locale-',\n        suffix: '.json'\n    });\n    $translateProvider.preferredLanguage('es');\n})\n\n``\nI've got alocale-es.jsonand alocale-en.json`.\nThe normal angular-translate works as expected with no extra-package.\nI have no errors.\nAm I doing something wrong?. Hi @knalli \nThe point is, I'm using Meteor, which is the only difference and I can't change the plnkr. I'll change later my code to do exactly the same (I'm at work now).\nDo I need ngSanitize? I think I had a warning related with that. Could be a reason?\nCheers. The plnkr works as expected.\n(using ngSanitize now as well)\nSo after this point I install angular-translate-loader-static-files following the documentation here:\nhttps://angular-translate.github.io/docs/#/guide/12_asynchronous-loading\nAnd I change my .config:\n```\n.config(function ($translateProvider) {\n        'ngInject';\n    //$translateProvider.translations('en', {\n    //    'test': \"Hello World!\"\n    //});\n    //$translateProvider.translations('es', {\n    //    'test': \"Hola Mundo!\"\n    //});\n\n    $translateProvider.useStaticFilesLoader({\n        prefix: 'locale-',\n        suffix: '.json'\n    });\n\n    $translateProvider\n        .preferredLanguage(\"en\")\n        .useSanitizeValueStrategy('sanitize');\n})\n\n```\nAnd I created 2 json files (locale-es.json and locale-en.json) in my project's root.\nNow, the translated text \"Hello World!\" changes to \"test\" (the label's name).\nI know it has to be something stupid but I can't find it. I found this package as well for Meteor:\nplanettraining:angular-translate-loader-static-files\nBut I don't know what is the name of the package to import it. \n. Ok fair enough. I'll try to figure out what's going on here:\nhttps://github.com/planet-training/meteor-angular-translate/issues/4#event-934029270\nIf we find a fix I'll publish it here anyway.\nThanks. Fixed:\nhttps://github.com/planet-training/meteor-angular-translate/issues/4#issuecomment-274867409. No, it's not an issue. I'm talking about a possible feature which translates automatically some content like comments (mostly).\nI know some social network like Facebook or Instagram already have this feature but I don't know how they manage this.. Ok, fair enough.\nThanks for your answer and sorry to bother.. ",
    "johannestroeger": "\n. ",
    "gargol": "Having same error after trying to integrate textAngular. Don't really know where it should belong. Opened the issue here (using ng-translate 2.1.0)\n. @PascalPrecht  well yeah, but when I include ngSanitize it conflicts with angular-translate module, throwing this error:\nUncaught Error: [$injector:unpr] Unknown provider: $$sanitizeUriProvider <- $$sanitizeUri <- $sanitize <- $sceDelegate <- $sce <- $interpolate <- $translateDefaultInterpolation <- $translate\nhttp://errors.angularjs.org/1.2.2/$injector/unpr?p0=%24%2...<omitted>...te\nI am on angular 1.2.2 with latest angular-translate installed.\n. Looks like the issue @knalli referred to is exactly the issue I am having. Thanks for helping out! ;)\n. Hi @PascalPrecht, dafault transformResponse is the one that angular provides by default. Here is a quoute from angular docs:\n\nThese defaults are again available on the $http factory at run-time, which may be useful if you have run-time services you wish to be involved in your transformations.\n. @PascalPrecht defaults can be seen here.\ncode is following (showing only relevant parts):\n\n``` javascript\n var JSON_START = /^\\s([|{[^{])/,\n      JSON_END = /[}]]\\s$/,\n      PROTECTION_PREFIX = /^)]}',?\\n/,\n      CONTENT_TYPE_APPLICATION_JSON = {'Content-Type': 'application/json;charset=utf-8'};\ntransformResponse: [function(data) {\n      if (isString(data)) {\n        // strip json vulnerability protection prefix\n        data = data.replace(PROTECTION_PREFIX, '');\n        if (JSON_START.test(data) && JSON_END.test(data))\n          data = fromJson(data);\n      }\n      return data;\n    }],\n```\n. Well you could set default transformations on your request, to make sure\nthose are always used and those global defaults would not break anything\ninside the library.\nOn Tue, Jan 21, 2014 at 4:55 PM, Pascal Precht notifications@github.comwrote:\n\n@Gargol https://github.com/Gargol Ah yea there we go. So what should we\ndo? If you reset http transformresponse interceptors globally, there's\nactually nothing we can do about it is it?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/300#issuecomment-32898152\n.\n. If you need help with this, I can take care of the implementation.\n. Okay :)\n\nOn Tue, Jan 21, 2014 at 5:26 PM, Pascal Precht notifications@github.comwrote:\n\n@Gargol https://github.com/Gargol Now that's sounds like a PR! Go for\nit!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/300#issuecomment-32901537\n.\n. \n",
    "bugwelle": "Yes, I'll do that :)\n. Sorry.\nIs it the wrong branch? Or is there anything else to change? :)\n. Wait, what? :D\nSo, what should I do? Should I create a new branch from canary (which makes sense to me)? Then this sentence is wrong:\nCheckout a new branch based on master and name it to what you intend to do:\n@PascalPrecht It isn't a problem, but it's annoying, since I have commits in my new branch that might be already in canary, or vice versa.\nI have no problem with creating a new branch from canary, but could you change the sentence in CONTRIBUTING.md?\n. ",
    "totof3110": "Sounds like what I need, I'll give it a shot. I too had checked the multilanguage section to see if angular-translate supported fallback but hadn't found any mention of it. Thanks!\n. True but that won't do message variable replacement will it? \"translate=\"{{foo.bar}}\" will translate the value of the scope variable foo.bar (whatever value that is) but there's no parameter being passed / replaced.\nIn my use case, I need to have some variable in the translatable message replaced with something variable (e.g. \"Hello {{fisrtName}}\"). Does that make sense?\n. @DWand : being able to filter message variable would be really nice too. Like:\nhtml\n<ANY translate=\"HELLO\" translate-value-name=\"{{currentUser | fullName}}\"></ANY>\nwhere \"fullName\" is a filter that formats someone's name (e.g. preprend a particle like \"Mr\" or \"Ms\" depending on the gender of the user).\nI'm not sure I understand your use-case that combines nested filters though... :-/\n. Awesome! Thanks @PascalPrecht! I'll give it a shot ASAP. :)\n. ",
    "deanapeterson": "Thanks\n. ",
    "laoyipay": "I had same problem, I solved it by using window.localStorage.getItem('NG_TRANSLATE_LANG_KEY') to get cached language directly from localStorage . ",
    "calebegg": "Submitted it again as #116 because I don't think it's possible to change the branch after the pull request has been submitted. Sorry for the clutter.\nWe are using it on a new project, yes. It looks better to me than both {{ 'KEY' | translate }} and KEY\n. Oh, sorry, didn't even see that Github stripped out my HTML. What I meant was {{ 'KEY' | translate }} and <span translate>KEY</span>\n. ",
    "ghost": "I am not maintaining a list of valid languages anywhere, they just exist for the async loader to find. So without maintaining a list of valid languages that have a translation file it would be nice to rely on the $translate service to know if the language I am setting is available.\nI would like to iterate through that list of languages the user has set in their browser and just stop as soon as one is a language I actually have translations for.\n. Supported languages are just not a well defined thing for this app so as translators go in and create new locale bundles it would be nice to avoid having them go do any other work or add the locale to a hard coded list for me to compare to. Having a list of available languages is not likely something I can have people maintaining properly.\nSo for me to send that list of available languages in the xhr it sounds like I would have to be maintaining it with every new language which is not ideal\n. I suppose I could write some code to iterate through my locale bundles and return the locale tag (he,en,de) from all the files looking at the prefix defined in:\n$translateProvider.useStaticFilesLoader({\nprefix: 'locales/locale-',\nsuffix: '.json'\n});\nWe have grunt converting all files for a language into a singe locale-xx.json file so that would be doable, would be nice if the module was aware of available locales somehow though\n. OK I appreciate your thoughts on this I think you're right about keeping it off the client. I Will probably reuse the prefix from the translate provider in some other code to get a dynamic list and only return valid ones to begin with. Thanks again. Makes more sense too\n. Yea thinking about it more I agree that it should probably be server side. Thanks Guys for the clarity.\n. So the Firefox I am running will switch back to en from the preferred language that I pull from an accept header:\n```\n  .run(['$translate', '$cookies', '$rootScope',\n    function ($translate, $cookies, $rootScope) {\n      var locale = $cookies.LOCALE;\n  //If the users language is not available and it has a dialect\n  //Eg. de-CH then remove the dialect and try for just the language (de)\n  //overwrite locale with the dialect removed to avoid infinite loop.\n  $rootScope.$on('$translateChangeError', function () {\n    if (locale.indexOf('-') > 0) {\n      locale = locale.split('-')[0];\n      $translate.uses(locale);\n    }\n  });\n\n  $translate.uses(locale);\n}])\n\n```\nand then set the title of the page based on routeProvider title:\n```\n   $routeProvider.when('/', {\n          title: 'home.title',\n          templateUrl: 'views/dashboard.html',\n          controller: 'DashboardCtrl',\n          helpAlias: 'dashboard'\n        })\n.run(['$rootScope', '$translate',\n    function ($rootScope, $translate) {\n      $rootScope.$on('$routeChangeSuccess', function (event, routeData) {\n    if ($translate(routeData.title) === routeData.title) {\n      var handler = $rootScope.$on('$translateChangeEnd', function () {\n        handler();\n        document.title = $translate(routeData.title);\n      });\n    } else {\n      document.title = $translate(routeData.title);\n    }\n\n```\nThe title gets set properly in say zh-cn for example, but then the language is immediately set back to en and everything else on the page is rendered as english, including page titles I navigate to after first load. I couldn't find anything that was really browser specific in your code but the behavior is pretty different on FF compared to Chrome, IE & Opera, and not executing the prefferedLanguage function in Firefox seems to have gotten more consistent behavior.\n. I see what my problem is now. I have a real Node server & a mock Node server to work with on my client side changes. So my mock server was just out of date and the timing of setting the cookie was off. Works fine on my code that is actually up to date....\nThanks guys. This really is an awesome library.\n. After checking Pascal's link i found something like:\n$translateProvider.useStaticFilesLoader({ /* ... */ });\n$translateProvider.useLocalStorage();\nI think it will be the best solution for me. I don't need to create a custom loader when using local storage. If i understand it correctly I'll use 2 translation sources (hope it won't get any problems with languages switching) at one time.\nThx for help :)\n. Thx for the response.\nUsing the refresh works in the plunker but unfortunatly not in my application.\nI will have a deeper look into the code tomorrow to determine the differnce between these two.\n. Hi again,\nmy application uses a customized static file loader which requests a list of available languages from the server and adds some addiontal checks before sending another request to get the language file. \nI don't know why but this custom laoder is the reason why the \"refresh\"-solution doesn't work for me. Please let me know, if you are interested in a plunker.\n. @tspaeth I updated the plunker with your suggested code and it works. Thanks for your support.\n. Oh. I missed that. Never mind, thank you very much!\n. Yeah, I forgot about that! Thanks, I closed it!\n. Thorsten,\nThanks for the explanation. Perhaps my issue report was somewhat incomplete, so I apologize.  I have added to the plunkr to demonstrate what I was trying to report.  \nhttp://plnkr.co/edit/lHSKRJKxJqlCTnWHxZcL?p=preview\nSee my Dynamic Text section at the bottom of the updated plunkr.  Basically I have one translation string being used in 3 different ways:\n- using an interpolation using the translate filter, \n- using an interpolation where the variable on the scope has been translated using the $translate service's instant method, and \n- using the translate directive (regardless of whether or not there are translation values)\nNotice that the string OK is displayed in bold only using the directive form, not in the other cases.  What I am looking for is a strategy that will display the string OK in bold across all forms.\nAlso, it would be wonderful if somehow the translate directive didn't overwrite existing inner HTML within the element on which it is used, or if there was an option to preserve vs. overwrite.  See the directive form with inner HTML.\nI hope this clarifies my request somewhat.  Thanks for taking the time to reply and assist.\nThanks,\nRich\n. Thanks for looking into this and for the feedback.  As I understand your explanation, the {{dynamicText}} string is being sanitized by AJS, so that once $translate.instant() is called in the controller function to generate the translated string, AJS will sanitize the string for display.  If this is the case, how would you recommend I display translated strings containing HTML that are created using the $translate service?  I tried wrapping the call to $translate.instant() inside $sce.trustAsHtml(), but it still displayed the tags in the web page instead of the OK I was expecting.\nThanks again.\n. I don't know how to use plnkr or jFiddle... sorry. \nBut it is easy to reproduce:\n1) in Json file just have \\' (escaped apostrophe )  like \"somekey\":\"some value \\'some inter text\\'\"\n2) use partialLoading with Json : \n.config([\n        '$translateProvider',\n        '$translatePartialLoaderProvider',\n```\n    'LANG',\n    'PATH',\n    function ($translateProvider, $translatePartialLoaderProvider,  LANG, PATH) {\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: PATH + 'i18n/{part}-{lang}.json',\n            $http: {cache: true}\n        });\n        //$translateProvider.useSanitizeValueStrategy('sanitize');\n        $translateProvider.preferredLanguage(LANG);\n    $translatePartialLoaderProvider.addPart('blog');\n    $translatePartialLoaderProvider.addPart('base');\n}])\n\n```\nError: \nUncaught TypeError: Cannot read property 'replace' of undefined\nSyntaxError: Unexpected token '\n. Thanks so much pointing me to it. I managed to use the $templateCache via late binding with\n$translateProvider.useLoaderCache('$templateCache').\n. browser refresh : F5\n. My code looks like this : \nangular.module('myApp.translate', ['pascalprecht.translate'])\n.constant('TRANSLATION_PARTS', [\n    'home',\n    'error',\n    'common',  \n    'user',   \n    'locations'\n]).config(function($translateProvider, $translatePartialLoaderProvider, TRANSLATION_PARTS) {\n    $translateProvider.preferredLanguage('en-US');\n    $translateProvider.useLoader('$translatePartialLoader', {\n        urlTemplate: 'assets/translation/{lang}/{part}.json'\n    });\n    for ( var i = 0; i < TRANSLATION_PARTS.length; i++ ) {\n        $translatePartialLoaderProvider.addPart(TRANSLATION_PARTS[i]);\n    }\n});\nI am injecting 'myApp.translate' as dependency into my main module\n. ",
    "akarelas": "I don't know how to fix it.\n. I know nothing about bower and barely know any JS at all. Sorry.\n. It looks like too much of a responsibility and a risk that something might go wrong. So I'm afraid I'll have to refuse :-)\n. Thanks. Didn't have time to help, sorry.\n. @knalli The <user> tag's directive isn't applied... it isn't \"compiled\"... Unless I'm doing something wrong. Do you think I'm doing something wrong?\n. @knalli If I do it that way, then when will $compile get executed? I need it to be executed whenever the translation language changes. I'm sorry, I don't have a clear picture of what I should do. Can you please be more specific?\n. I like the solution in the very last message of yours. Make compiling optional, to save on resources.\n. ",
    "iamakimmer": "I don't know bower and just learning but I'll take a stab at it this week.\nOn Saturday, August 3, 2013, Alexander Karelas wrote:\n\nI know nothing about bower and barely know any JS at all. Sorry.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/115#issuecomment-22052762\n.\n. \n",
    "derekhound": "Your suggestion is good for me.\nI'm a silly that I forgot translate filter can do the same thing.\nThanks for your help.\n. ",
    "chris2332": "@PascalPrecht I have encountered the following problem...\nAssume that the following KV pair to be translated: \"AMOUNT\":\"Amount (&pound;)\"\nIf I use the translate filter:\n<input type=\"text\" placeholder=\"{{ 'AMOUNT' | translate }}\">\nI get back \"Amount (&pound;)\" rather than \"Amount (\u00a3)\". \nAny ideas how I can work around this?\n. Using the directive works fine: translate=\"AMOUNT\"\nHow could I combine the directive with the placeholder property of the input tag though?\n. Thanks!\n. ",
    "mcamou": "The filter doesn't seem to work with ng-table's data-title attribute. If I do this:\n<table ng-table=\"defaultTable\" class=\"table table-responsive\" show-filter=\"true\">\n<tr ng-repeat=\"group in $data\" class=\"text-center\">\n  <td data-title=\"'{{ 'groups.id' | translate}}'\" filter=\"{ 'id': 'text' }\">{{group.id}}</td>\nI get a JavaScript error:\nError: [$parse:syntax] Syntax Error: Token 'groups.id' is an unexpected token at column 6 of the expression ['{{ 'groups.id' | translate}}'] starting at [groups.id' | translate}}'].\nhttp://errors.angularjs.org/1.2.15/$parse/syntax?p0=groups.id&p1=is%20an%20unexpected%20token&p2=6&p3='%7B%7B%20'groups.id'%20%7C%20translate%7D%7D'&p4=groups.id'%20%7C%20translate%7D%7D'\n    at http://localhost:9292/adminweb/bower_components/angular/angular.js:78:12\n    at Parser.throwError (http://localhost:9292/adminweb/bower_components/angular/angular.js:10047:11)\n    at Parser.parse (http://localhost:9292/adminweb/bower_components/angular/angular.js:9998:12)\n    at http://localhost:9292/adminweb/bower_components/angular/angular.js:10829:37\n    at http://localhost:9292/adminweb/bower_components/ng-table/ng-table.js:557:36\n    at http://localhost:9292/adminweb/bower_components/ng-table/ng-table.js:578:48\n    at Object.forEach (http://localhost:9292/adminweb/bower_components/angular/angular.js:326:18)\n    at Object.compile (http://localhost:9292/adminweb/bower_components/ng-table/ng-table.js:550:25)\n    at applyDirectivesToNode (http://localhost:9292/adminweb/bower_components/angular/angular.js:6115:32)\n    at compileNodes (http://localhost:9292/adminweb/bower_components/angular/angular.js:5708:15)  \nAny ideas?\n. Thank you for your very quick response. When reading your answer I realized that ng-table is actually interpreting the data-title parameter as an Angular interpolation itself, so adding the {{ and }} was unnecesary. This works:\n<td data-title=\"'common.id' | translate\" filter=\"{ 'id': 'text' }\">{{group.id}}</td>-\nThanks for a great library!\n. ",
    "artdias90": "Hi @PascalPrecht , sorry for bringing up this topic but, what if my placeholder element must be dynamically translated? Seems like using the translate filter does not trigger dynamic language changes.\n. Basically I need this input placeholder to be dynamic translatable:\n<input name=\"login_form_email\" type=\"email\" placeholder=\"{{'login.default_email' | translate }}\" required>\nSince I can't use the translate directive inside the placeholder, I must appeal to the filter. Seems like the filter doesn not watch for changes on $trannslate.use(), like the translate directive does. I tried to  call a function that uses the $translate service as well, but no success.\n. I see. Will work on it. Thank you for quick support!\n. what's the status on this issue?\n. Basically I registered a wildcard '*' as a fallback, and before the wildcard I set all other rules, this seems to work for me. IE 11 is getting the default Windows language.\n. translate=\"{{myVar? 'translation.string1' : 'translation.string2'}}\"\ngetting always the true case\ntried also without { } \n. ok so probably something on my model. Thanks\n. was just a matter of switching the wildcard position.\n. [SOLLUTION] Seems like a chrome update affected the way to choose default language. Sorry / you can close this\n. ",
    "armyofda12mnkeys": "Just wanted to add a question onto this ticket since I believe its related....\nI have links like so:\n<a href=\"http://example.com/privacy-policy.html\">Privacy Policy</a>\nI'd like to use angular-translate to populate the href in addition to the Privacy Policy link:\n<a href=\"http://example.com/privacy-policy-fr.html\">Politique de confidentialit\u00e9</a>\nso I'd like to do something like with angular-translate to set attribute and element text (and a default in case no key is found):\n```\n<a \ntranslate-href=\"privacy.policy.link\" translate-href-default=\"http://example.com/privacy-policy.html\"\ntranslate=\"privacy.policy.wordage\" translate-default=\"Privacy Policy\"\n\n\n```\n\nIs something like this in the plans for angular-translate or achievable in the current version?\nThanks,\nAri\n. K, sounds good. Easiest thing for now was just setting up a $translation_helper variable in the scope which can hold values for things like href. Thanks tspaeth.\n. Just curious, reading how attributes are added here... \nCan you set default values for the translation attributes via something like a 'translate-attr-default-placeholder' attribute like so:\n<input type=\"text\" ng-model=\"user.refine.checkbox.list.text\" translate translate-attr-placeholder=\"refine.list.type\" translate-attr-default-placeholder=\"Type here to refine the list\" />\n. Hey knali,\nhah, doh I forgot about the tag itself being inside the  tag... \nI fixed and its working now:\nhttp://jsfiddle.net/mje5yw9s/8/\nBtw is there a way to supply a default translation text without a tag as thats what got me stuck trying to get the translation inside the option in the 1st place?\nBasically is there an the equivalent of this:\n<option value=\"\" translate=\"PLEASECHOOSE\" translate-default=\"--Please Choose--\"></option>\ninto something like this (i couldn't find an example of how to do default text this way):\n<option value=\"\">{{'PLEASECHOOSE' | translate | translate-default('--Please Choose--') }}</option>\nI only saw examples of {{'PLEASECHOOSE' | translate}} without default text.\nAnyway, you can close this ticket after answering above.\nThanks for your help!,\nAri\n. It would be dependent on the business entering the translations they want via an app which gets them into the database (which unfortunately they may slightly lag behind), and then those get served by our web service to many ajax-clients (angular app) that pull those application-wide translations and questions for ~50 question questionnaires depending on the language they request. They aren't served via an easy JSON file we could update once since we'd have to update that and send that to potentionally many clients all over the world each time it gets updated. We are distributing the angular app once (maybe small updates to it per 6months-year) and letting the translations roll in from the DB (translations are far more volatile changing often per new questionnaire which introduces new countries/langs).\nBut we as the programmers know the English text at least that is behind the programming change so just like we used to do in Spring we try to do the same in Angular.\nIn spring it was a similar tag which you could put in the text attribute: \n\n. Let me try using an actual template with the variable in it vs manual html to pass the ngDialog. That might solve my issue. Will let you know Monday if it works.\n. so now I use templates (vs the translate.instant code i had above) completely, but still doesn't work: \n<div translate=\"glossary.popup.after.close.button\" translate-default=\"otherwise will close in {{dialog_countdown_timer}} seconds\"></div>\nWhen there is no translation, it works. it pulls the scope variable into the translate-default attribute's translation and I see a countdown of the $scope.dialog_countdown_timer variable 10..9..8....1 seconds. \nBut when there is a translation in my database, it still does immediate resolution of the variable the 1st time translations are loaded in the app via the $translateProvider.useLoader('translationLoader'); code (which gets the translations from a Web Service which gets from our database).\nIn Chrome debugger, i can see the key below has the {{dialog_countdown_timer}} literally when passed to the deferred.resolve(translations); line:\nglossary.popup.after.close.button : \"sonst wird geschlossen in {{dialog_countdown_timer}} Sekunden\"\n```\n$translateProvider.useLoader('translationLoader'); \n...\nangular.module('questionniareApp').factory('translationLoader', function ($q, $rootScope) {\nreturn function (options) {\n    var deferred = $q.defer(),\n        translations; //loop over translations returned by web service (passed into options) and assign to object-key lookup table.\ntranslations = $rootScope.webserviceObject.translationMap;\n\ndeferred.resolve(translations);\nreturn deferred.promise;\n\n};\n});\n```\nBut then when my code actually uses the translation in template loaded a bit further in my app, the template doesn't have access to the dynamic scope variable.\nI may have to go back to not using templates (and have \"sonst wird geschlossen in ### Sekunden\") in the database which then i'd use translate.instant('glossary.popup.after.close.button').replace('###','{{dialog_countdown_timer}}') ). and go back to hardcoding the html string to pass to ngDialog vs a template with translate attributes.\n. EDIT: removed as un-needed long code\n. > I think I got it: The problem is default texts are not interpolated with the interpolation params. At the moment, they are treated as static default texts.\nWell in a separate but similar issue, templates didn't work for me for non-default (German) texts.\nand $template.translate() in my original plunkr/1st post didn't work for non-default (German) texts.\nso its actually when it doesn't use the default translate-default attr where there is an issue (when it actually tries to do a lookup for the translate=\"glossary.popup.after.close.button\" key).\nI think it auto-interpolates them at some point earlier than I'd want. \nFor example generally what i want to do (dynamic scope variables in translations), is in this example I made http://plnkr.co/edit/OnR9oA?p=preview, under this area (the only difference being I am pre-loading all my translations at beginning of the app): \n\n\"Seconds: 3 seconds.\nSeconds: 3seconds.\nDEFAULT(used since translation not available): Seconds: 3 seconds.\"\n\nSo why does the above work; and whether I use $translate.translate() or templates, it doesn't work for me when it tries to display the same countdown text that was loaded earlier via useLoader...\nMy theory is the custom loader $translateProvider.useLoader('translationLoader'); auto-interpolates the variable at the beginning of the app and removes {{dialog_countdown_timer}} so I can't use that full translation later in my actual 'countdown-popup' template later in the app which is looking for the variable. Does that sound about right?\nI can create an other plunkr that shows the issue pop up via a custom loader maybe as that is probably the real issue.\nP.S. Im going to remove all that code I put a few posts back, as it gets offtrack.\nNot very familiar with angular-translate but I'll try to think of a optional way to ask the custom loader not to interpolate translations immediately. \nPS if a web service obj is returning an object (key, values of translations), is what Im doing correct loading them via $translateProvider.useLoader? \nor should I be loading them via another way (like in my controller once I get the value from the web service to be using some other function to assign the translations synchronously/realtime since the full web service object includes translations and has already been 'resolved')?\n. ",
    "Nicky-Agarwal": "Hi Guys\nI have to name a column in Ng Table as a combination of own string and model variable i.e LIST PRICE IN (isoCode).Here List Price In is own string and isoCode is a scope variable,how to use translate for it??\nwill data-title=\"'List price in isoCode | translate\"  be fine?\n. ",
    "yokeshwaranR": "i am new to the angularjs, how to change a specific language font size while using $translate in json files.\n. ",
    "kristofmoell": "Hello guys\nI'm using the translate in a directive. If I just want to translate one attribute value, the following works fine:\n<div help-me help-title=\"{{ 'COMPANY_TYPE' | translate }}\">\nBut when i have multiple values to translate, it doesn't work:\n<div help-me help-title=\"{{ 'COMPANY_TYPE' | translate }}\" help-text=\"{{ 'COMPANYTYPE_HELPTEXT' | translate }}\">\n. ",
    "jsteenkamp": "Typo in docs here: http://pascalprecht.github.io/angular-translate/#/guide/02_getting-started \nUnder section \"Teaching your app a language\" the function() is in the wrong place in both code examples showing app.config.\ufeff\n``` javascript\napp.config(function ['$translateProvider', ($translateProvider) {\n}]);\n```\nshould be\n``` javascript\napp.config(['$translateProvider', function($translateProvider) {\n}]);\n```\n. ",
    "oterral": "Yes same behavior.\nIt seems it works with function but not expression see http://jsfiddle.net/oterral/eUGWJ/24/\n. ",
    "elemoine": "I think the problem is related to the translate directive creating a new scope (scope:true). This works: http://jsfiddle.net/d75HA/.\n. > @elemoine ah yea, makes sense to me, I'll change the scope configuration and run the code against the tests.\nI doubt it will work, because the translate directive writes into the scope.\n. ",
    "Danita": "I'm glad to hear that, thank you :smile:\n. I'll try when I have some time! I'm not sure my JS level is up to par; this seems very well coded and documented.\n. :heart: \n. On the other hand, I think that it might be possible to overcome this limitation with a combination of a custom interpolator and a new filter that takes an arbitrary number of params and then replace them in the order specified in the translation. Something like this:\nController:\njavascript\n$scope.messages = [\n    { author: \"John\", body: \"Lorem ipsum\", type:\"message\" },\n    { author: \"Peter\", body: \"Lorem ipsum\", type:\"post\" },\n    { author: \"Nancy\", body: \"Lorem ipsum\", type:\"comment\" }\n]\nTranslation:\njavascript\n{\n    \"REPLY_TO\" : \"Reply this {%1} to {%2}\"\n}\nPartial:\nhtml\n<ul>\n    <li ng-repeat=\"message in messages\">\n        <p>message.body</p>\n        <a href=\"#\">{{ 'REPLY_TO' | translateReplacing:message.type:message.author }}</a>\n    </li>\n</ul>\nWhat do you think?\n. Sorry wrong button.\n. I... don't know what to say, I feel so noob :flushed:. In my tests doing something like that didn't work, but now that I tried again it does! Thank you @skifan!!\n. ",
    "SebC99": "I guess the problem comes from the filter function, where this line:\ninterpolateParams = $parse(interpolateParams)();\ndoesn't take into account any scope. So $parse cannot evaluate the inner expression against the scope of the element.\nI don't know how to solve this, but a dirty way could be to pass the scope to the filter as a third argument :\n{{ translation_id | translate:\"{param : expression}\":\"messageformat\":this }}\nThen in the filter function you could do something as :\nreturn function (translationId, interpolateParams, interpolation, scope) {\n      if (!angular.isObject(interpolateParams)) {\n        interpolateParams = $parse(interpolateParams)(scope);\n      }\n      return $translate(translationId, interpolateParams, interpolation);\n    };\nI haven't tested so it's just a guess!\n. as I wrote, it really seems to be this line: interpolateParams = $parse(interpolateParams)(); which causes the issue. Without any scope to parse in, it cannot interpolate anything.\nIt would be nice to be able to retrieve the element where the filter is applied and obtain the scope of this element to apply the parse function on it. But I don't know how to retrieve the element! \n. When I look at angular sources, I think that the interpolation are mainly done before applying the filter. The only filter I've found with an interpolation is the orderBy filter. And it uses $parse too (get = $parse(predicate);), but the resulting function is applied on the array value through the sort/comparator \nfunction(a,b){\n     return compare(get(a),get(b));\n}\nIn that case, the string key you provide as your comparator field is interpolate thanks to the object himself (it's a field of the object, so it works).\nIn angular-translate it's not the case, it's not a field of the translationId, so I guess we have to do the interpolation before the filter... but I don't know how!\n. Hum... I was thinking about the interpolation \"before\" the filter...\nso I look at the Danita example again, and I wondered how can we interpolate translate:'{user : message.author}' before the filter being called. Then I thought we could try something like translate:{user : message.author} instead:\nhttp://jsfiddle.net/UGLjh/\nWe have to see other examples to see if there is really an issue in fact!  :)\n. You're welcome.\nI think you can close the issue\n. You have to use $translate service instead of $translate filter. And it's ng-options with a s.\nYou should not use brackets as it should be a direct expression :\n<select ng-model=\"m1\" ng-options=\"translate('common.test1.' + i) for i in data\">\nand in the controller : $scope.translate = $translate;\nhttp://jsfiddle.net/26mbL/1/\n. I agree. Unfortunately, for elements like placeholder, we cannot use any directive, but only filters, so I end up with translation issues in forms placeholders.\nI tried to use the $sce service as I use it in other cases, but it's not working: it's useful for html tags, but not for html entities. \nThe only way I found, was to create a decodeHTMLentities function (based on a element.html(xxxx).text())\nBy the way your work is great, and I'm now able to switch between languages in a amazing way! Thanks!\nPS: my website is currently only in French (and not a pure angular one unfortunately), but if you visit it (www.zellno.com) and install my bookmarklet, you'll be able to see my pure angular webapp with your translate directive. Thanks again!\n. ",
    "ceelian": "Thanks for pointing out that syntax solution - helped me also to solve my use case. Maybe this could also be added to the documentation.\n. ",
    "AqquaBug": "Hi,\nI am very new to angular-translate, so please forgive me if this is a very stupid question!\nNow on this example that SebC99 has provided : http://jsfiddle.net/UGLjh/\nall seems well, however i am in a situation where i need the body to be translated as well\n$scope.messages = [\n    { author: \"John\", body: \"Lorem ipsum\" },\n    { author: \"Peter\", body: \"Lorem ipsum\" },\n    { author: \"Nancy\", body: \"Lorem ipsum\" }\n]\nbody variable in the messages array is \"Lorem ipsum\" which is in Latin, what if i needed that to be translated as well.Is there a way to do that, imagine that $scope.messages array is actuall coming from a json file through $http service, and that data in that file is in english.Which has multiple nested arrays with english data.\nHow can i change that body data which is Lorem ipsum while i am translating \"REPLY_TO\" : \"Reply to {{user}}\".\nI hope you can help me.\nThank you in advance\n. Hey knalli, thank you for your prompt reply.\nBut i mean this, please see the body variable in messages array :\nhttps://jsfiddle.net/orcun/m5znzcq9/1/\nWhere the body variable inside messages are now in English, what if I had millions of descriptions like that coming from a database into a .json file in different languages.\nIn your example and SebC99's examples it seems to me that we are translating the UI -User interface text, buttons, messages to user's etc.\nHow about if i need to change the data that coming from a database, like descriptions of an author in several languages.\nOr comments left for a product by customers, in 2 different languages, what would be the correct way to implement translations of this kind of data into our project.\nThank you for your help again\n. ",
    "LeoAJ": "Got it, thanks!\n. I did not solve it ...  =.= \nSorry for confusion.\n. Cool! Thanks, @skifan \nThat is help a lot!\nThanks again !!\n. ",
    "karol-f": "Thank @skifan - works for me too.\n. ",
    "pedrolsamaral": "Well it didn't work for me, maybe it's because of a new version update. I had to use translate.instant(key).\n. ",
    "fveyret": "just use a filter translate \n<select ng-model=\"m1\" ng-options=\"'common.test1.' + i  | translate for i in data\">\n. @PascalPrecht  it works like a filter search in ng-repeat, it just follows the logic angular :)\n. ",
    "arturgspb": "@fveyret, thanks a lot! Very good variant!\n. ",
    "cburghardt": "That used to work quite well with Angular 1.2.16. I have now updated to 1.2.22 and the translate filter in above scenario with ng-options does not work anymore. I only see the keys in the dropdown. Interestingly enough when I select an entry from the dropdown it seems to refresh and suddenly the translated entries show up.\n. It is a mobile setup: Cordova running on IOS 7\n. Is there any update on this? I would like to upgrade to a recent version.\n. ",
    "prithveesh": "@PascalPrecht I am trying to load 2 files one after another on different condition at the load time, and its the same issue, $nextlang variable is not getting undefined. So the 2nd file is not getting loaded. \nPlease find a sample code at \nhttp://plnkr.co/edit/2E7bWJXphRklwvC1I82x?p=preview\n. ",
    "KilianSSL": "@PascalPrecht Thanks. Helps. But i'm not quite sure where to add the eventlisteners best, if i have multiple modules as in the ng-boilerplate.\n. @PascalPrecht anyways i'd need to set the title from the child-module's controller too, and that's where on the initial page load the setTitle is being called before the translations are available.\napp.js\n``` JavaScript\nangular.module( 'ngBoilerplate', [\n  'templates-app',\n  'templates-common',\n  'ui.state',\n  'ui.route',\n  'pascalprecht.translate',\n  'ngCookies'\n])\n.run(function run( $rootScope, $state, $stateParams, titleService ) {\n    titleService.setSuffix( ' | Suffix whatever' );\n})\n.config( function myAppConfig ( $stateProvider, $urlRouterProvider, $translateProvider ) {\n    // Internationalisation\n    $translateProvider.useStaticFilesLoader({\n        type: 'static-files',\n        prefix: 'src/app/l10n/',\n        suffix: '.json'\n    });\n    $translateProvider.preferredLanguage('en_US');\n// Tell the module to store the language in the cookies\n$translateProvider.useCookieStorage();\n\n});\n```\nfoo.js\nJavaScript\nangular.module( 'ngBoilerplate.foo', ['ngBoilerplate'])\n.controller( 'FooCtrl', function LibraryCtrl( $scope, titleService, $translate) {\n  titleService.setTitle( $translate('FOO') );\n});\n. i did that initially, but figurred out it would only set the title once at $translateChangeSuccess, and not for further state changes to other modules. So probably i'm missing the point?\n. ",
    "nezo": "Hi everyone!\nMaybe we could use the \"when\" method of $q. This method is helpful when dealing with object that might or might not be a promise.\nThis way, it will not break everyone's storages nor it will force basic storages to return promises whereas they don't need it.\nHe is a quick example of how this method works:\njavascript\n$q.when(storage.get(key), function (langKey) {\n   // Deal with langKey\n})\n. ",
    "maxcook": "This is a serious issue. How else could we get a lang setting asynchronously?\n. ",
    "camilolopes": "@DWand great. It worked very well. This code could be added and wiki. could not be? \nWhy the translate did not work for 'pt' = portuguese\n  $translateProvider.translations('pt', {\n    'label.question.movie': 'Qual filme voc\u00ea gosta mais?'\n});\n. Nice, I will check again. I did not find easily this information. Thanks @DWand. \n. ",
    "privman": "I'm having this same problem. It looks like it is caused by the use of inline array dependency annotation in the definition of the translate provider (line 26 in version 2.1.0): the injector is looking for a $get function in the array ['$STORAGE_KEY', function ($STORAGE_KEY) {...}] instead of treating it as an annotation.\nIf I pass the constructor to the provider function directly without annotation it works, but I'm guessing that wouldn't work with minification.\n. My apologies, it turns out I was (accidentally) using an old Angular version, 1.0.2. Updating to 1.2.16 resolved the issue for me. Sorry for the false alarm.\nIf it's of any use, the line I was referring to is line 10 in src/service/translate.js (I'm using the bower concatenated angular-translate.js file), and the patch I was using as a temporary workaround is this:\ndiff\ndiff --git a/www/js/libs/angular-translate.js b/www/js/libs/angular-translate.js\nindex 74f2606..b0e05ba 100644\n--- a/www/js/libs/angular-translate.js\n+++ b/www/js/libs/angular-translate.js\n@@ -22,8 +22,8 @@ angular.module('pascalprecht.translate', ['ng']).run([\n     }\n   }\n ]);\n-angular.module('pascalprecht.translate').provider('$translate', [\n-  '$STORAGE_KEY',\n+angular.module('pascalprecht.translate').provider('$translate', //[\n+  // '$STORAGE_KEY',\n   function ($STORAGE_KEY) {\n     var $translationTable = {}, $preferredLanguage, $availableLanguageKeys = [], $languageKeyAliases, $fallbackLanguage, $fallbackWasString, $uses, $nextLang, $storageFactory, $storageKey = $STORAGE_KEY, $storagePrefix, $missingTranslationHandlerFactory, $interpolationFactory, $interpolatorFactories = [], $interpolationSanitizationStrategy = false, $loaderFactory, $cloakClassName = 'translate-cloak', $loaderOptions, $notFoundIndicatorLeft, $notFoundIndicatorRight, $postCompilingEnabled = false, NESTED_OBJECT_DELIMITER = '.';\n     var getLocale = function () {\n@@ -686,7 +686,8 @@ angular.module('pascalprecht.translate').provider('$translate', [\n       }\n     ];\n   }\n-]);\n+// ]\n+);\n angular.module('pascalprecht.translate').factory('$translateDefaultInterpolation', [\n   '$interpolate',\n   function ($interpolate) {\n--\nOf course, this patch wouldn't have a been a good solution anyway because it would not work when minified.\n. @bitliner best option would be to update the version of Angular you're working with, if you can. If you can't, and you don't need minification for your project, you can try the patch from my last comment. Be warned though that if you then minify your project you'll be getting errors again, because the patch removes the inline array annotation necessary for Angular to know which dependency to inject into the translate provider factory function, so again - best to update Angular.\n. ",
    "bitliner": "I have the same problem. I'm using angular 1.0.1\n. ",
    "LeventeNagy": "the problem is if i create a plunk it works there, i think i need to check in more deeply to my stuff, im using Laravel as back end maybe thats causing something\n. Checked the json, yup it had some problems sublime file generator saved it as text, thanks for your help\n. ",
    "rngadam": "Sorry Pascal, I actually thought I had closed this as a few minutes later I found the leftover directive that was causing this. \nIt's still strange, maybe a bug in the Grunt build for Yeoman as that locally is unused and wasn't causing problem in development.\nangular-translate is awesome BTW.\n. ",
    "bcamp1973": "ahhh...i forgot the quotes! i had tried it with an expression, but left the quotes out so of course it didn't work. Thanks!\n. anyone?\n. looks like the update solved it, thanks!\n. ",
    "qnodesign": "tooltip-html-unsafe is deprecated and it is not working with tooltip-html. Any suggestions?\n. ",
    "uhtred": "Same problem as @qnodesign, any ideas?\n. ",
    "starf": "use uib-tooltip-html=\"'{{myVar | translate}}'\"\ndo not forget the single quotes!\n. ",
    "soulesjms": "doesn't this work? \ntranslate-attr=\"{tooltip : 'TRANSLATION_ID'}\". ",
    "elbasityassine": "Is verry simple just add \n<a href=\"...\" [tooltip]=\"TRANSLATE_THIS | translate\" container=\"body\">...</a>\n. ",
    "devesh": "To elaborate, what I'm envisioning is something like the following in my source HTML:\n<ANY translate=\"TRANSLATION_ID\"\n     translate-values='{ username: \"PascalPrect\"}'>Hello, {{username}}</ANY>\nThis would turn into a <trans-unit> element with an id of TRANSLATION_ID containing a <source> element with a <ph> element.\nAlso, it would be useful to be able to run angular-translate in a \"no translations\" mode where it just interpolates the message text in the HTML with the translate-values given to the directive for quick no-build iterative development.\n. Hi @PascalPrecht. Thanks for investigating. By no-translations mode, I mean using the text in the HTML directly and interpolating it. So Hello, {{name}} would be rendered as Hello, devesh (ignoring the attributes for now) even without any localization JSON.\nThe goal is to write all the messages into the HTML, very similarly to how I normally would without translation, and have it render usably without a build step. Then when I want translation, I can extract the messages from the HTML with a build step, get translations from a translation service, generate the localization JSON from the returned translations with another build step, and see the localized version of my page.\nA slight improvement would be to use a description to send to the translators instead of a translation id in the HTML (Closure Templates does this) and to generate a translation id from the description. Then in the localization build step, you can replace the description attributes with translation id attributes.\n. No problem. If you'd like to start a separate project for this, http://angular-gettext.rocketeer.be/dev-guide/extract/ has an example of how this works using gettext pot and po files instead of xliff.\n. ",
    "quiaro": "Sure, no problem!\n. ",
    "bennyng": "Sure. Thanks for letting me know :)\nOn Thu, Sep 12, 2013 at 12:04 AM, Pascal Precht notifications@github.comwrote:\n\nHey @bennyng https://github.com/bennyng Could you please consider\nconventional commit messages (see contributing guide) and open the PR on\ncanary branch?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/166#issuecomment-24252983\n.\n. \n",
    "komakino": "Hi @PascalPrecht!\n- Since the translations are stored in json, there can't be a foo.bar if foo.bar.bar exists. But when the json is flattened, there can be. Loaders always return json, right? Otherwise, of course, it will fail.\n- Well, in a large application you may have a lot of language labels that have the same value. For example users.edit.save and system.settings.save would probably have the same value. If you choose to structure an application in certain ways the link thingy provides a valuable way to make the translations more maintainable by only having to change the value in one place. And it fits like a glove to the previous matter.\n- Yeah, I'm gonna work on that as soon as I have time.\n- Sorry, I missed that.\n/komakino\n. @sgara Yeah, that's sorta how i came to implement it; needing to extend a key that already existed.\n. @PascalPrecht Haha, seems like it! Will do.\n. How about '@:TRANSLATION_ID'?\n. Sorry. I'm abroad(Belgium) until the 12th, so i'm not going to be able to\nget to it until then.\n2013/9/24 Pascal Precht notifications@github.com\n\n@komakino https://github.com/komakino Any progress on sending the PR to\ncanary?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/167#issuecomment-24979011\n.\n\n\n/Salem Salln\u00e4s\n. Hi!\nOMG, I'm so sorry, i have totally forgotten about this. I just started my\nown company and I've been really busy.\nBesides I don't use these features myself anymore since I changed how my\ntranslations work abit.\nI could still do it, but I don't know when I'll have time. If you want(and\nhave the time ;)), feel free to \"steal\" my idea and implement it yourself.\n2013/11/8 Pascal Precht notifications@github.com\n\nHey @komakino https://github.com/komakino still around? :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/167#issuecomment-28025817\n.\n\n\n/Salem Salln\u00e4s\n. Hi @knalli!\nSee https://github.com/PascalPrecht/angular-translate/pull/167#issuecomment-24658651 for the reason.\nGlad I could help. I just started freelancing so I'm probably gonna be contributing alot to various projects from now on. I guess I have a bit to learn about contrib rules & customs. ;)\n. Ooops, I accidentally closed the PR. Sorry. Reopened now.\nThe linking only forwards the linked id to $translate, so it will behave exactly as normal.\nAnd thanks for your advice!\n. ",
    "ProLoser": "I looked at about 20 approaches to localization, and while I initially was going to reject your approach and roll my own, I realized that the reason for the large size of your module might very well because you are tackling an issue I didn't initially consider; performance.\nAre you caching/compiling/etc the translations? Or is every time a $scope.$apply() fire every single translation expression being re-evaluated?\n. Yeah then that completely defeats the purpose of me using this module. \n. Let's say you have 100 translated pieces of text on the page. Every single one of them now requires their own watcher and is going to exponentially ruin performance. First, I would provide the option to disable runtime translation because it's so rare a use case it has a serious negative impact. Second I would take a look at bindonce for angular who tries to tackle this sort of issue. Third, I would convert translations into normal text once and then only watch the value expressions instead of the entire translation.\n. If you specify that there will be no language switching, then you should\nessentially be doing bindonce to translate and only watch the\ntranslate-values. The only time you can't bindonce is if the source text\ncontains an expression.\nUnless it is a crucial point of the app, I don't see why it is important to\nhave the ability to change languages at runtime. I would be happy with just\nrefreshing the page to change language if it meant a large improvement in\noverall performance. OR I would want to look into actively rebuilding your\nbindonce bindings. But the bottom line is your app should not have to be\nscope watching every single piece of text on the page just because the user\nmay switch languages which I only expect to occur once. In fact for us this\nnever occurs because we are simply looking at what language your browser is\nset to when the page loads.\nOtherwise, I don't really see how this is better than doing {{ i18n['key']\n| format : 'token' }} and swapping out i18n manually. That's what ui-utils\n'format' filter was designed to assist you with.\nOn Sep 18, 2013 3:23 AM, \"Pascal Precht\" notifications@github.com wrote:\n\n@ProLoser https://github.com/ProLoser Hm.. I probably get you wrong,\nbut it isn't actually a rare use case to switch language during runtime\n(because thats what the module is for), is it? So regarding bindonce, I\njust had a little discussion about exactly that topic with other developers\nthis morning. And yea I'd definitely take a deeper look at bindonce. But\nthis would only makes sense for situations where you aren't providing more\nthen one language, right?\nRegarding the third point you've mentioned, could explain a bit more how\nmuch it differs from what angular-translate is currently do?\nThanks for your feedback man!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/169#issuecomment-24654368\n.\n. Frankly I'm considering looking at bindonce and seeing if we could do\nbindtwice where the first expression is only evaluated once and never\nwatched, but the expression the first one outputs can be continuously\nre-evaluated.\n\nFYI, I don't think giving the option to store the dictionary in cookies is\na good idea. Unless I'm mistaken, cookies are passed in every single\nrequest to the backend, so this might be bloating the payload of any\nrequest on the page.\nOn Sep 18, 2013 10:34 AM, \"Pascal Precht\" notifications@github.com wrote:\n\n@ProLoser https://github.com/ProLoser Thanks for you thoughts on this!\nI'll think about it and let you know what I'll do. Never had a look at\nui-utils format filter, so I'll have a look at this too!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/169#issuecomment-24683640\n.\n. Ah. I thought you store the dictionary to localstorage which would be a\nsignificant improvement in performance. It might even be useful to look\ninto storage via manifest (offline cache). But yeah just storing the\nlanguage makes sense.\n\nI'm assuming that you explicitly mention in the docs what you are storing.\nOn Sep 18, 2013 10:41 AM, \"Pascal Precht\" notifications@github.com wrote:\n\nStoring dictionary in cookies? This actually doesn't happen at all. The\nonly thing angular-translate stores into cookie (or localStorage) is a\nlanguage key.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/169#issuecomment-24684339\n.\n. @DWand we did that at my last company, and I kind of recommend it overall as it's a huge gain on performance with the tradeoff of having a slightly more complex build / production environment. But some people don't like that approach (like my current company).\n\n@cburgdorf sorry but that doesn't exactly make any sense. It sounds closer to my proposal of actively re-compiling everything if you change languages, but honestly that could be so complicated that for now (and simplicity-sake) I'd rather just have the page refresh. Watchers are automatically created by angular every time you do {{}}, and there is 1 created for every single place you do it.\n@knalli that's not exactly true, and is actually the BEST way to get performant i18n. There is no reason an AngularJS application can't sit on a dynamic or complex server. Although your commit is an interesting start, it does not address the fundamental problem: if you have 1000 pieces of text, you will have 1000 watchers. Even if the callbacks don't fire, the watched expressions are ALWAYS evaluated. The best way to fix this is to not use watchers for static translations.\nI haven't looked deeply at how bindonce works but my guess is that only the overarching bindonce is watched, and as soon as it becomes a truthy value, it unregisters its own watcher.\n. I'm not saying it's wrong. The general idea is probably correct. But the code will end up being more like... you have to actively REMOVE the watches, you can't simply disable them.\nIn this example: $scope.$watch('some expression', someFunction);\nsome expression is evaluated EVERY time, and is where the real performance hit occurs.\nSo yes, theoretically we can do listeners.push( $scope.$watch() ) and unsubscribe or resubscribe the listeners as needed.\n. Isn't this a massive memory leak? https://github.com/PascalPrecht/angular-translate/blob/master/src/directive/translate.js#L101-L104\n. Yeah I was going to say, you really need to look at his. Sorry @PascalPrecht but I will likely be switching over. He does not bother handling hot-swapping the translations, he merely translates during the compile phase and washes his hands clean of the issue. I honestly don't see a valid use-case to bother hot-swapping translations.\nPerhaps you 2 can merge projects? More than free to relocate em to the UI umbrella if you guys wanted lol.\n. ",
    "Superlukec": "Hi guys,\nI am building app using Angular JS and Phonegap 3.0. And I must say that this plugin helped me a lot to translate the applicaton. Thank you for your effort guys!\nI also had performance problem, but then I found bindonce plugin (https://github.com/Pasvaz/bindonce).\nOld way of using angular-translate:\n{{ 'sometext' | translate }}\nNew way:\nbindonce  bo-text=\"'sometext' | translate\"\nand it's working great.\nI have also tested it in Chrome extension AngularJS Batarang and there are no watchers for translated  variables.\n. ",
    "damianfarina": "About using bindonce\nSuppose I have the following in my template:\nhtml\n<p>{{ 'YOU_HAVE_N_MESSAGES' | translate: {count: myMessagesCount} }}</p>\nmyMessagesCount is fetched at some point and it's value is 4\nGenerated text is:\nYou have 4 messages\nBut after a while myMessagesCount changes!\nUsing bindonce, or any other way to stop watching translations, the new value won't be updated in the UI, right?\n. ",
    "johann-sonntagbauer": "Concerning performance implications with angular interpolation:\nIt is possible to unregister the watcher for simple (static) translations. I made a plunkr with the idea. http://plnkr.co/edit/vLB2SaVeenHdq527mfDX\nThe unwatch filter applied to the interpolation will unregister the interpolation watch on the first evaluation. So the interpolation will not take part in any $digest cycle any more. The implementation in the plunkr is pretty dumb but hopefully it could be a way to improve performance.\n. ",
    "keithdmoore": "I know this thread is a little stale.  I think I am in a similar situation  as @ProLoser here.  I never allow the user to change the language.  However, I would like for the translate library to store everything in localStorage and allow me to set an expiration time.  I would like the option to only reload when the translateProvider is being configured.  It would only load if the translations have expired.  Right now, I am storing the tranlations (from an external source) in localStorage.  I also store an expiration time and handle whether or not I go fetch them again.\n. Gotcha.  Nice library.  Great documentation.  Thanks for providing this.  Just a couple things that I got hung up on.  I came across an older post (http://www.ng-newsletter.com/posts/angular-translate.html) that said $translateProvider.useLocalStorage() would store the translations in local storage.  Looks like maybe that has changed for performance reasons.  \nThe other issue I had was that $translateProvider.(\"asyncLoader\") immediate fires the factory to load the translations.   I was to get around that be using a different language for a sign page and then perform a $translate.use(langKey) to load the \"real\" translations.    \nI was able to come up with a pretty elegant solution which I hope to blog about soon.\n. For the sake of others doing some Google sleuthing, I had the same issue and solved it using the suggestion from @knalli \nSince the backend webservice I am using is written in Java and I have easy access to modify it, I chose to change the server side.  \n```\n/*\n * Convert the value from something like \"Hello {0}\" to \"Hello {{arg0}}\"\n * @param value\n /\nprotected String  convertInterpolationSyntax(String value) {\n    Pattern p = Pattern.compile(\"\\{(\\d+)\\}\");\n    Matcher m = p.matcher(value);\nStringBuffer result = new StringBuffer();\nwhile (m.find()) {\n    m.appendReplacement(result, \"{{arg\" + m.group(1) + \"}}\");\n}\nm.appendTail(result);\n\nreturn result.toString();\n\n}\n```\nThen on the client side you can just do this:\n$translate.instant('hello_message', { arg0: 'World' });\n. I dont but then I have to do more work since Matcher.appendReplacement and Matcher.appendTail only accept a StringBuffer.   But you are correct, otherwise I don't need the threadsafe StringBuffer.\n. ",
    "gabzim": "\"Hey @johann-sonntagbauer we already implemented a suspend/resume mechanism. Translation Id's are only watched if needed (at least when using translate directive).\"\nI have not stumbled upon any documentation regarding this. Is there a place I can read about it? Is it a sort of \"bindonce\" implementation?\n. @PascalPrecht I don't mind doing that at all, I just don't understand the improvements and new additions well enough to do it (hence why I was asking for documentation). If I have time, I will look at the source code and see if I can come up with something.\n. ",
    "kasperlewau": "I might be a bit late to the party, but I figured I'd pitch in to the show and tell. We've been using angular-translate in conjunction with bindOnce quite successfully for our current project. \nThe code originates from Karl Seamon's talk at ng-conf \n- Link to the talk: https://www.youtube.com/watch?v=zyYpHIOrk_Y\n- Link to the code: https://github.com/kseamon/fast-bind\nthat I ported over to bower - angular-fast-bind. (The reason we're not using pasvaz's bindOnce solution is due to the fact that it doesn't seem to have a notifier principle built in.)\n\nThe way we utilize this is by exposing the currently used translation from angular-translate like so: \njs\n$rootScope.$on('$translateChangeSuccess', function () {\n  $rootScope.currentLanguage = $translate.use();\n});\nNote: It'd be pretty sweet if $translateChangeSuccess would $emit the language key in https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L836. \nThen we could simply do: \njs\n$rootScope.$on('$translateChangeSuccess', function (e, val) {\n  $rootScope.currentLanguage = val;\n});\n// Lookin' way nicer there friend!\n\nThen in our views we call the translate filter inside one of our fast-binds like so: \nhtml\n<div bind-notifier=\"currentLanguage\">\n  <span bind-on-notify=\"'translation.key' | translate'\"></span>\n  <span bind-html-on-notify=\"'translation.key' | translate\"></span>\n  <img bind-attr-on-notify=\"{ title: ( 'translation.key' | translate ), src: ( 'translation.key' | translate )\">\n</div>\nFootnote: Given that the syntax for this kind of usage isn't to my preference (I do like {{}}), and the somewhat lacking active development of angular-fast-bind, we might just switch over to using the translate directive and see how it fares in comparison performance wise. But it might just float someone elses boat!\nJust my two cents on the performance aspect of translated bindings, albeit a bit late! \n. ",
    "flashjames": "This is how I do it at the moment:\n```\n// my angular-translate setup in app.js\napp.config(['$translateProvider', function ($translateProvider) {\n  $translateProvider.useStorage('translationStorage');\n$translateProvider.useStaticFilesLoader({\n    prefix: 'translations/locale-',\n    suffix: '.json'\n  });\n}]);\n```\nIn every unit-test where I need to flush timeout's I need to add this:\n// In this test we need to do flush() so therefore this whenGET() is here.\n$httpBackend.whenGET(/^translations/).respond({});\n. ",
    "seniorpreacher": "Thanks for the answers guys!\nActually I need to use the stable version, so I'm stacked with the manual approach :)\n:+1: \n. ",
    "olja-insikt": "For those on a later version of angular ng-bind-html-unsafe has been replaced with ng-bind-html. \n. ",
    "jacqueslareau": "I can help with the french version.\n. @sgara let me know what's left to do. Thanks!\n. No news from @sgara \n. Will work on french-docs. Will keep you updated in a week.\n. Translated the installation page. Will try and do a couple more and make a PR.\n. ",
    "bogoroh": "Will work on the Dutch translation. Thank you!\n. ",
    "EpsilonRepo": "Hi,\nThanks for the quick reply!\nI replaced static with 'fix_de' and removed the fallbackLanguage (thought it was needed in case the translationService wouldn't answer).\nYes, the loader gets invoked with the 'fix_de' lang.\nLook like he ignored the preloaded static content.\n. @PascalPrecht, I replaced it everywhere.\n@DWand, That was a copy/paste error, sorry...\nI tried to put the code in a Plunker but it's the first time I use it...\nI can't see any outgoing requests when I load parts so I'm not sure it's working.\nI have problems adding and referencing the translate js files. Is there a template for angular-translate plunkrs ?\n. Hello,\nI created a Plunkr here http://plnkr.co/edit/4RjdmXFwL5RpOWhhMsWY.\nLooks like it has problems with the partial loader.\n. Please update your last plunkr by adding $translate.refresh(); after the addPart statement.\nYou'll see that it doesn't take the default language.\nThat is my problem\n. @DWand thanks for the advice.\nI tried it but I don't see how to set the text once i am in the handler function.\nhttp://plnkr.co/edit/4RjdmXFwL5RpOWhhMsWY.\nCould you take a look? I managed to write the translaed text to the log, but how can I put it into the translateProvider?\nIf I include the reference to it, I get a CirecularReference error.\n. I agree, keeping the statically loaded translations until those from the server are loaded would definitely solve my problem.\nAnything decided? Do you plan to do it this way?\n. Hi,\nNo problem, next week would be great :)\nJust one more question: If I load the first translations statically from code and then reload them with the partial loader, will the static ones be overwritten if I use the same key?\n. ",
    "rottingcorpse": "Doing addPart(), then refresh() in controller. No request to fetch translation js, things are still untranslated.\nSame thing from app.run() works just fine.\n. ",
    "virtualit786": "Hi Pascal,\nI am also facing the issue with parital loader and the plunk that you have last posted http://plnkr.co/edit/CAAdF1?p=info is also not working when switching languages. Just for a note, I am using latest angualr-js 1.2.13.\nCan you please respond with the fix?\nEven I tried the static file loader to load the language files and that was not working either!\n. I dont have a refernce to the table in the controller as the static table is only for the duration until the transaltions load up from the translation files. May be I was not clear, but the static table is working fine as shown in the plunk http://plnkr.co/edit/CAAdF1?p=info. But the tranlsations are not showing up even in the plunk and I am using the exact same code for the prototyping and is not working here. Just to be clear, I dont have a server side service for serving anything. All is in JS side and the tranlsation files are under i18n/teams/en.json and de.json. Have you seen the plun that Pascal have posted http://plnkr.co/edit/CAAdF1?p=info.\n. I See. I will try that !\nRegards,\nFarooq\nOn Wed, Apr 30, 2014 at 6:01 PM, Pascal Precht notifications@github.comwrote:\n\nSo yea the problem is probably that $translate.refresh() is called\nwithin the controller. Actually this has to be called before the\ncontroller is instantiated/called. In other words. this has to be handled\nwithin $routeProvider.when()\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/359#issuecomment-41793283\n.\n. Hi, \n\nI have observed the following issues in the documentation and wanted to bring this to your attention as my contribution to the community. \n1) http://pascalprecht.github.io/angular-translate/docs/en/#/guide/10_asynchronous-loading the demo is not working and shows the following on the page \n{{ 'HEADLINE' | translate }}\n{{ 'PARAGRAPH' | translate }}\nPASSED_AS_TEXT\n{{ 'PASSED_AS_INTERPOLATION' }}\nI tried the source for the same on Plunkr and JsFiddle but got the same results. And BTW, its not only here but everywhere in the documentation, the demos are not working anywhere on the documentation pages and Plunkr and JsFiddle which impacts really negatively on such a beautiful framework with extensive documentation. I tried the source code of these samples offline and the result was same i.e. not working and showing as its shown above on the documentation pages. \nI hope it gets fixed!\n. Hi Thorsten, \nIn the new documentian that you pointed @ http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading, the demo is working but in the Plunkr and JsFiddle code for the same demo, pressing germen button does nothing. Seeme like its missing the transaltion files. Can it be fixed?\n. Thanks for a quick reply Pascal. I got it now. Can you help me understand and fix why language is not chanigng when i call   $translate.uses(langKey) with the following configuration.\n.config(['$translateProvider', '$translatePartialLoaderProvider', function ($translateProvider, $translatePartialLoaderProvider) {\n    $translateProvider.useLoader('$translatePartialLoader', {\n        urlTemplate: 'i18n/{lang}/{part}.json'\n    });\n    $translateProvider.preferredLanguage('en-EN');\n}])\nand I get the following error when i call  $translate.uses('fr-FR'); from within the controller.\nTypeError: Object function (translationId, interpolateParams, interpolationId) {\n          var deferred = $q.defer();\n          translationId = translationId.trim();\n          var promiseToWaitFor = function () {\n              var promise = $preferredLangua...... } has no method 'uses'\n. Thanks again Pascal for a very quick reply and it was indeed as you described. I would suggest to avoid doing such method name changes or if we do, then probably an exception with a message suggesting that 'uses method is renamed to be use' kind of will help avoid frustration for people who did not read the updated document and their old code will be broken because of this change. \n. Great then! and wish all the best to angualr-tranlsate, really an excellent framework!\n. I want to change one thing in the issue description, its not for the first element only actually. \nWhen the app starts, MainCtrl is the one so the language part sets up to main and it works fine. When I move to PaAddCtrl from MainCtrl, then the translation of first element does not come from the positions.json file but instead comes from the main.json file. \nAnd when I move from PaAddCtrl's paview.html to MainCtrl's main.html, then all of the translations come from the pa.json file which was loaded by controller from where I am moving back to main. \nSo its not for first element, its for all elements. \n. Can i i somehow upload a zip file? I don't know how to host and place the translation .json files and I dont have an online server to host these files that I could refer to eith and Plunkr seems not support creating directories. OR i can upload and create all the files with code and you can figure out from it?\n. Dear Pascal, \nI have created the files and here is the link http://plnkr.co/edit/CMXnZjh1uPC1O4BbV0GI?p=preview \n. Thanks for pointing out and I have fixed the syntax errors. \n. Thats pretty much all the code that I am using from the docuemntation and examples for partual loader.\n. Have you been able to figure out the problem or otherwise can you please point out my missing provider for partial loader?\n. In line 6,78, i am using translatePartialLoader shown below. \n$translateProvider.useLoader('$translatePartialLoader', {\n        urlTemplate: 'i18n/{lang}/{part}.json'\n    });\n. I just updated the plunk and made it look like this\n    $translateProvider.useLoader('$translatePartialLoader', {\n        urlTemplate: '{lang}-{part}.json'\n    });\nand created the translation files according to this scheme. \n. Ok so i fixed it all now. Perhaps you can create a link to page1 and try that now\n. I have added the routes as well. Now can you please check it?\n. Dear Pascal! Any update on this issue? Or should I create a gist on github with actual code thats working locally?\n. I have shared at github the working example https://github.com/virtualit786/angular-translate-testing showing the problem. \n. Also note that if I uncoment \n//        $translatePartialLoaderProvider.addPart('main'); \nline from app.js then all the unit tests breakup \n. Dear Pascal and @egervari , \nIssue is still there and Ih ave uploaded the code for you guys at https://github.com/virtualit786/angular-translate-testing. \nIts not fixed or resolved. Can you please look at this working code. \n. Thanks for the quick reply!\nCan you please point me out to a spcific unit test in the test suit so I could direclty kind of go there!\n. We can close this \n\nOn Mar 21, 2014, at 3:07 AM, Thorsten notifications@github.com wrote:\n@virtualit786 can we close this or is there anything left to discuss?\n\u2014\nReply to this email directly or view it on GitHub.\n. Thanks Pascal! \n\nSent from my iPhone\n\nOn Mar 25, 2014, at 6:26 PM, Pascal Precht notifications@github.com wrote:\n$translate.instant('TRANSLATION_ID');\n\u2014\nReply to this email directly or view it on GitHub.\n. I used the $injector service to get an instance of $translation  service and it worked.\n                    var translation = $injector.get('$translate');\n. But if still there is a better solution than this, please suggest!\n. \n",
    "stevefiedler": "I agree, this is not working.  I am looking for a working example of partial loader to use it in my project, but to no avail.\n. ",
    "Sanjo": "I thought of a version range like:\n\"dependencies\": {\n    \"angular\": \"~1.x\",\n}\n. The main reason I opened this ticket is that I got the message \"Unable to find a suitable version for angular, please choose one:\" from Bower when I tried to install angular-translate. I could manually choose the right angular version (1.2) and it worked fine. But because of this message I wasn't absolutly sure that angular-translate is compatible with Angular 1.2. All other packages that I use and depend on AngularJS use a range for the AngularJS version. And you don't get this message from Bower when you install those packages.\n@knalli: That's right but 1.3 isn't out and I think it will take some time until it's out. But you could also limit this to \"<= 1.2\".\n. Ok, thanks for your detailed response. I will let you know if I find a bug. But so far it seems to work fine.\n. > angular-translate now has to fetch the table for preferredLanguage first, however when somewhere in the app\n\n$translate() is called and the initial table isn't loaded yet, it goes on and searches for a fallback language, even if in the > meantime the original table is loaded.\n\nI think it should only search for a translation in the fallback language if the key is missing in the preferred language.\nIf the preferred language isn't loaded yet and the fallback language is already loaded then just wait for the preferred language to finish loading.\nThanks for your effort.\n. I have done some work: https://github.com/Sanjo/angular-translate/commit/ed72b6f09248da3c6807b75841d483d64363d4db\nIt does what you want, with promises. A for loop doesn't work with promises.\nI splitted the big function into some smaller ones.\n. I've documented my added code now: https://github.com/Sanjo/angular-translate/commit/263c658f52b930a30dbfe6e5c5367360e59f6a83\nI think $fallbackLanguage should contain promises of the language tables because otherwise getTranslationTable will probably attempt to load the language multiple times (didn't test it yet).\nEdit: Here is the failing test: https://github.com/Sanjo/angular-translate/commit/1fd8f367c2d255f6780b7a8fc6e272e6194f3acd\n. A small bug fix: https://github.com/Sanjo/angular-translate/commit/1389a18e22a03ac10f678b020e15c14a306bd046\nThe error occurred when you loaded the demo with English as saved language (NG_TRANSLATE_LANG_KEY = en).\nI think getTranslationTable(langKey) is now obsolete. langPromises[langKey] can be used directly because langPromises is populated in the beginning, right?\n. Now, that every fallback language is loaded on the beginning, the nested promises are no longer necessary.\nSo I optimized them away: https://github.com/Sanjo/angular-translate/commit/c0cd80dcee42c3b096aef95a28f246912ac6a529 This makes the code also less complicated. I removed the functions, I introduced here https://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-32483734 and combined them into one. \nThis addresses @knalli s performance concern (https://github.com/PascalPrecht/angular-translate/issues/245#issuecomment-32591152). Each translation that involves fallback languages now only needs one promise regardless of the number of fallback languages.\n. Ok, I will rebase my commit then.\n. Here is the branch with my commits rebased on your latest version: https://github.com/Sanjo/angular-translate/commits/my-fallback-languages\nI tested both solutions and couldn't see any difference memory or CPU wise (with Chrome Web Tools Profiling).\n. ",
    "evilaliv3": "@PascalPrecht probably it's time to move dependency up to angular 1.2.0?\n. ok thanbs @knalli for the fast clarification.\nby the way can i ask you a reference on how to set local resolution inside bower.json?\n. hu solved:\n\"resolutions\": {\n     \"angular\": \"1.2.0\"\n   }\nthanks!\n. thank you for the fast response. probably is better to keep the issue open just to verify that all the documentation is aligned, i'm sure to have read uses here and there by today.\n. just as information, thanks to resolution of https://github.com/angular-translate/angular-translate/issues/374 i get all the things working but i still see this error (not distruptive)\n. thank you all.\n@PascalPrecht: what do you mean with: \"@evilaliv3 first, do yourself a favor and switch to translate directive where you can. \"?\n. @knalli i've rewritten it as this but it continue to not work. i've also rewritten it all using \"nodename\" lowercase\n       {{nodename}} makes use of GlobaLeaks software specifically designed to protect the identity of the submitter and of the receiver in the exchange of leaked materials.\nthe problem is that {{nodename}} is replaced by angular first and it replaces it with \"\" (empty) before translate acts\n. do you forsee any solution? \n. @knall: i think the same as tregusti that only 1.6 could allow the whole 1.5.x to be supported. \ngiven the current \"<=1.5.0\" at every 1.5.1, 1.5.2 etc that will fore sure follow easily you will have always to make a change and release.\ni would suggest to have < 1.6 to be sure to not require to release a package every time and it will all the user that using it, eventually will notice that a stupid change angular 1.5.6 will cause a breaking change for us and we will put then <=1.5.6 but at that time for a reason.\n. Yep i'm here suggesting the same.\nThe current dependencyis setting is:\nhttps://github.com/angular-translate/angular-translate/blob/master/package.json#L72\n\"dependencies\": {\n    \"angular\": \">=1.2.26 <=1.5\"\n  }\nthis makes the resolution find 1.4.9 preventing to setup the 1.5.0 if not specifically forced indipendently.\n. @knalli @PascalPrecht as far that you know is there some particular incomaptibility with angularjs 1.5.0?\n. @knalli any new on this front?. cool @knalli thanks!\nis there any ETA for the release?. @knalli @PascalPrecht: is there any workaround usable with the current implementation to disable the feature?. Thank you @knalli !\nThis is very helpful.\nWe are using angular translate because it perfectly fit with angular but we are currently not using any dynamic translation this is why :) thank you for your support and for your work.. ",
    "rubenv": "\nHe does not bother handling hot-swapping the translations, he merely translates during the compile phase and washes his hands clean of the issue.\n\nActually, it does do that.\n. Not really an override. The caching is good and I can imagine we want it as well. We just need an API to clear the cache (once) when the language changes.\n. ",
    "calleerlandsson": "@PascalPrecht Hey! Thanks for the quick reply! Sure I could call preferredLanguage()! Would that cancel the load of the initial file and instead load and use the new file?\n. @PascalPrecht Ok now I see. The issue is this: I can't set the preferredLanguage in the run block since that function exists on the $translateProvider which is only available in the config block. I need to set the user language in the run block since have to use some services that are not available in the config block to determine what language to use. I dont really get what you mean by using $translate.proposedLanguage() . How does knowing about that I'm currently loading en.json help me when I want to set the language to something else?\nThanks for your help!\n. @PascalPrecht The functionality I assumed was that the loading of the translation tables and the selection of what language to use was separate in the way that when I call preferredLanguage or uses that it instantly changes what language is set as the current one. If the language has not been loaded the call to uses or preferredLanguage starts the loading of the new language.\nThis would produce this behaviour:\n1. preferredLanguage('en') is called. Current language is now 'en'.\n2. Starts fetching en.json.\n3. uses('sv') is called. Current language is now 'se'.\n4. Starts fetching sv.json.\n5. sv.json finishes loading.\n6. en.json finishes loading.\nThis as opposed to the current behaviour:\n1. preferredLanguage('en') is called.\n2. Starts fetching en.json.\n3. uses('sv') is called.\n4. Starts fetching sv.json.\n5. sv.json finishes loading. Current language is now 'se'.\n6. en.json finishes loading. Current language is now 'en'.\n. @PascalPrecht Ok I totally get that. How is this normally solved? I guess its not that odd to set a preferredLanguage and then change it using uses based on stuff fetched from the web or from user cookies?\n. I solved it following @DWand s advice to skip the call to preferredLanguage() just call uses().\n. ",
    "daanporon": "yups it did help, thanks :+1: \n. Thanks for your response, i implemented my own service which configures angular-translate and $locale when changing locale.\n. indeed, the solution @Dwand proposes is also very good ... didn't thought about it that way :+1: for now i created a connector service when you set the locale on that one it will call the right methods on the $translate service and $locale service.\n. @PascalPrecht here you have a plunk explaining my problem:\nhttp://plnkr.co/edit/QN2xs3Tgvba0KWM29zpR\nFirst two are working perfectly, but the problem i'm having is that my variable is returned from the server so there is some delay before it's defined ... \n. hi, thanks for looking in to it ... but i can't see any changes in the plunk you made. \nMaybe you are right that in my case it isn't a job of angular-translate to take care of it. But there are use-cases where i think it is the job for angular-translate. I updated my plunk with a select box at the bottom: http://plnkr.co/edit/QN2xs3Tgvba0KWM29zpR?p=preview ... now i want to show a translation depending on the value selected in the select box. Even when i'm not concatenating the string it doesn't work. The only way i see now to make this working is using an ng-switch. I think angular-translate should keep watching the translationId (which it is also doing now with the $observe) and whenever the translationId changes it should update the translation ... because this is just what you expect with two way data-binding.\nMaybe we need to move this part: \n// Ensures any change of the attribute \"translate\" containing the id will\n        // be re-stored to the scope's \"translationId\".\n        // If the attribute has no content, the element's text value (white spaces trimmed off) will be used.\n        iAttr.$observe('translate', function (translationId) {\n          if (angular.equals(translationId , '') || !angular.isDefined(translationId)) {\n            scope.translationId = $interpolate(iElement.text().replace(/^\\s+|\\s+$/g,''))(scope.$parent);\n          } else {\n            scope.translationId = translationId;\n          }\n        });\nto the place where updateTranslationFn(); is right now ... and execute updateTranslationFn(); inside the $observe function.\n. ok, i just updated our resolve function to give the current location to the refresh ... and it seems to work for now. Thanks for the explanation!\n. indeed thanks @damienklinnert .. this fix will help us alot!\n. this will probably also partially fix this issue: https://github.com/angular-translate/angular-translate/issues/379 , if you have translation-values.\n. ",
    "JMDidon": "I have a similar problem using the last version (e.g 2.6.1).\nWhen using the translate filter on the first option of a select with a ng-options directive, the option remains empty (the key is not displayed).\nThe other contents are correctly translated.\n. I have the same problem, but even if I wrapped my call in a $translateChangeSuccess, the service keeps failing =/.\n. ",
    "maklemenz": "A callback might be a smaller performance impact. Keep in mind that this can be triggered several times a second because it is called with each digest cycle. Maybe multiple times every time you type something into an input field with ng-model.\nI would like to know what kind of manipulation you think of?\n. @PascalPrecht any update on this?\n. @knalli I would say using flag paramters in a function that does different things dependent on the flag is bad style. Methods should be named in a way explaining what they are doing (also explaining sideeffects) and they should only do one thing.\n. @DWand I want to load the translations needed for a specific page in the resolving process of that route and not at the startup. I have a lot of pages and want to save traffic for mobile devices.\nBut what I do  not want is to open a page and to see untranslated strings everythere, because the translation loads async. So I need a promise to determine the moment the translation is loaded and open the page once everything is available.\n. I use the angular-ui-router, but with the angular router it should look similar to this:\n$routeProvider.when('/customers', {\n    templateUrl: '/customer/list.html',\n    controller: \"CustomerListCtrl\",\n    resolve: {\n        specificTranslations: function($translatePartialLoader) {\n            // return promise, so page is loaded once translation is available\n            return $translatePartialLoader.addPartAndReturnPromise(\"customers\");\n        },\n        commonTranslations: function($translatePartialLoader) {\n            // return promise, so page is loaded once translation is available\n            return $translatePartialLoader.addPartAndReturnPromise(\"crud\");\n        }\n    }\n})\nI want to add the translations needed for a specific part of the application - here an administrative crud - once this part of the application is used.\nThis is a very small example, but think of the use cases on enterprise level.\n. @DWand You said that the refresh method has to be rewritten, so I did not test it yet\n. @DWand Your solution actually works for me. Big thanks for that!\nI made a simple helper function for easier syntax:\n```\n// the service\n.factory(\"RequireTranslations\", function($translatePartialLoader, $translate) {\n        return function() {\n          angular.forEach(arguments, function(translationKey) {\n            $translatePartialLoader.addPart(translationKey);\n          })\n          return $translate.refresh();\n        }\n    })\n// in your routes\nresolve: {\n    translations: function(RequireTranslations) {\n        return RequireTranslations('main', 'admin', 'customers');\n    }\n}\n```\n. ",
    "Grigorius": "Yes but those events only fire after you select a language - they don't fire on first (default language) translate. \nAs for DOM manipulation, when translating something <div>{{'KEY' | translate}}</div> you alter the div size - I would like to know when translation occured or completed to re-check div sizes or do other things.\n. Yes they do! I did not get them because the directive which tried to listen to them got executed after the broadcast event. (needed a couple of hours to figure it out)\nMy solution was to wait for the broadcast in the mainCtrl, and when the directive was loaded rebroadcast it.\n. @PascalPrecht Ok I think I understand now ... it would be nice if an event was fired after the DOM update, one approach would be to bind DOMSubtreeModified to each element and get a callback: http://jsfiddle.net/wvQUm/\nDoes this seem like a good feature to have?\n. Required no, but it would be useful to do DOM manipulation after translation (to rearrange the interface when translating English to Russian or Japanese - or to a right-to-left language).\n. I think that would be awesome.\n. I implemented this by just looking at the language - not at when the translation occurs. (When the user selects another language - change DOM accordingly - without waiting for translation to occur) (it may flicker but users don't constantly change language so I think that this is acceptable for most cases)\n. ",
    "colinmorelli": "Any updates on this?\n. Is there a reason this can't just be merged temporarily until a better solution comes up?\n. Understood, but this seems to solve the problem in an elegant way -\nprovides both a global setting and per-directive application. Is there\nsomething not quite right about it?\nOn Thursday, January 23, 2014, Pascal Precht notifications@github.com\nwrote:\n\n@colinmorelli https://github.com/colinmorelli If we just merge\ntemporarily we'd introduce breaking changes more often. Which is not what\nwe want.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/pull/191#issuecomment-33105752\n.\n. \n",
    "geekuillaume": "Ok thanks, I needed it to translate a third-part plugin and it used Arrays.\nI've found another way by passing it in a JSON and then parse it. It's not optimal but it do the trick !\nAgain thanks for this great module you made here ;-)\n. ",
    "mjrk": "+1 \nNote: Both links are \"Page not Found\"\nIt would be really great to have a helper method to explicitly check in advance if a translation exists. Also, if I could define a fallback-key that is used for non existent mappings.\n. ",
    "skawaguchi": "For anyone else looking: http://angular-translate.github.io/docs/en/#/guide/16_error-handling\n. :+1:\n. ",
    "vinyoliver": "When using $translate it would be much better if just print the key in case there was no translation instead of not doing nothing.\n. ",
    "snebjorn": ":+1:\n. How does it support (if at all) a fallback language? Since it's switching the entire translation table.\n. That's very nice :)\nThank you for clearing this up for me.\n. ",
    "mibamur": "Correct demo-examples PR https://github.com/PascalPrecht/angular-translate/pull/194\n. ### Ok.\nSo, what I must do?\nput and set only necassary additional modules path to\nhtml\n<script src=\"../bower_components/angular-translate/SOME_MODULE/MODULE_SCRIPT.js\"></script>\ncomment and add\njs\n// type: 'static-files' // deprecated\nreplace registerLoader() with useStaticFilesLoader() and add that\njs\n\"registerLoader()\" // deprecated\nPS\nWhat do you think about demo/README.md?\n. @DWand, Ok. Where we may do it better? Let`s open Issue about Russian, Ukrainian (Cyrilic languages) fixing, where you will show me text need for changes.\n. @knalli What do you mean \"Where is/was the problem?\"\n. #### lib src\ngrunt build will get latest angular-translate to dist/angular-translate.js\nbower install angular-translate will install from bower repo - and it may older than grunt build a little\nI thought that will better to show differents in source\nBecause there are three way to get angular-translate.js\n1) download from github\n2) manually build from source grunt build\n3) install from bower\nI think - Frontend developers did`t want make much work, they want:\nbash\ngit clone ... && cd ... # clone some project\nnpm install # install necassary dependency\nbower install # install necassary dependency from bower\ngrunt build # make (build) own \"fresh\" dist\nthen run example(demo) without any additional thing\nDemo\nDemo have old registerLoader() function that not exist\nPS\nmaybe I didt understand something and have little practice\nshow me please where Im wrong\n. @PascalPrecht please merge demo/README.md by hand\n. @DWand \u041c\u0430\u043a\u0441\u0438\u043c \u043d\u0435 \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0412\u044b \u043c\u043d\u0435 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0433\u0434\u0435 \u0435\u0441\u0442\u044c \u043d\u0435\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u0438\n. \u0445\u043e\u0440\u043e\u0448\u043e \u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u044e\n. ",
    "xtoff": "@PascalPrecht @DWand Is there an update on this functionality? I really need to manipulate my DOM elements with the translated text for my current project.. \nLike you said before, you can't fire 200 events after every translate directive, but isn't there a way to emit an event when those 200 events are done?\n. Mmh, I have also a workaround when I change my language, but I need this when my page is loaded for the first time.. \nTo be more specific, I want to execute my custom attribute directive (that does DOM manipulation on translated events) after all DOM elements are translated. \n. Oh, didn't see that chapter :)\nI think that helps me yeah.. The only problem is that I never know the structure of my JavaScript object. It is possible to have more questions or answers..\n. I understand :) I already use angular-translate in my app and the keys in my Javascript object are also used in a html page in my app with angular-translate. I'm going to try to extract the keys an put them in an array, so I can give as a parameter to the $translate service.\n. ",
    "jedmao": "@maklemenz I like your solution, but it's not working for me. If addPart() returned a promise, I could use it like so:\njs\n.service('RequireTranslations',\n  function($q, $translate, $translatePartialLoader) {\n    return function() {\n      var promises = [];\n      angular.forEach(arguments, function(translationKey) {\n        promises.push($translatePartialLoader.addPart(translationKey));\n      });\n      return $q.all(promises).then(function() {\n        $translate.refresh();\n      });\n    };\n  })\n);\nUnfortunately, since addPart() still does not return a promise, I cannot do this.\nI looked at the plnkrs in the other related issues, but they all call $translate.refresh() manually in each controller. @maklemenz's idea was to do it in the RequireTranslations service, where the refresh is only called in one place. This is a good approach.\n@PascalPrecht, why was this issue closed? I still think it has a place.\n. @DWand yes, the reason is two-fold:\n- FOUC. The page shouldn't render until the route is resolved and that resolution shouldn't happen until all of those promises are resolved. If you're requiring multiple language keys in one page, I don't want to know about it until all of them have finished. Only then do I want the refresh to happen.\n- So as to not repeat oneself and put the code all in one place, most of this logic can happen in the RequireTranslations factory, which means the resolve code is actually quite simple. This is important because it will have to be used on multiple pages.\n@maklemenz already made a perfect example of how simple the resolve could be:\njs\nresolve: {\n    translations: function(RequireTranslations) {\n        return RequireTranslations('main', 'admin', 'customers');\n    }\n}\n. Also, I realize $translate.refresh() returns a promise, but calling it immediately after the addParts is not working at all! I need to wait until those addParts are finished until starting the refresh. Maybe this is a bug?\n. @DWand thanks for the detailed explanation.\n- I can't use the refresh method, because I already tried this and, for whatever reason, its promise is resolved before it should be. I have to do a setTimeout for at least 25ms after this refresh promise is resolved before it actually has the correct translations in place.\n- Do you have an example of how I could call the loader by myself to initiate the loading process?\n- I'd rather not reinvent the wheel. I think what we have here is good. We just need to figure out how to work this kink out. I'd be happy to contribute to the code base if I could figure it out.\n. @DWand thanks for the example. I tried this and collected all of the promises returned, but when they all resolved with $q.all() it was still too soon.\nI guess I'll have to dig deeper.\n. Yeah. I'm throwing in the towel. There is no combination of anything mentioned that actually resolves the issue. I've tried to be creative, but the only thing that works is a setTimeout of at least 100ms. Obviously, this is NOT the solution. I'm eagerly awaiting any better solves.\n. Thanks @PascalPrecht. I was fully willing to submit a PR if I could find a solve, but there were no fruits of my laborious hacking. I wish I had a solve for you, but I spent almost 2 days trying to solve this issue, even changing this project's code. I hope your endeavors are more successful.\n. @owenXin are you using the state resolve property yet?\n. @owenXin thanks for the examples. This is actually exactly how I was doing it, but I was not getting successful results. In your example, the suppliers route would resolve before the supplier part was loaded. I'm also setting the following in my config block:\njs\n$translatePartialLoaderProvider.addPart('index');\n$translateProvider.useLoader('$translatePartialLoader', {\n  urlTemplate: '/translations/{part}/{lang}.json'\n});\n$translateProvider.useMessageFormatInterpolation();\n$translateProvider.useMissingTranslationHandlerLog();\n$translateProvider.preferredLanguage('en');\n$translateProvider.useLocalStorage();\nPlease, let me know if anything sticks out as totally wrong.\n. OK let me provide all the details of my implementation. I'm using browserify, so that's why you see require statements in here. I also cut-out any configuration stuff that's not relevant to this conversation:\n``` js\nangular.module('myApp', ['ui.router', 'pascalprecht.translate'])\n  .config(function($stateProvider, $translateProvider, $translatePartialLoaderProvider) {\n$stateProvider\n  .state('home', {\n    url: '/home',\n    templateUrl: 'views/home.html',\n    controller: 'HomeCtrl',\n    resolve: {\n      translations: function(requireTranslations) {\n        return requireTranslations('home');\n      }\n    }\n  })\n  .state('style-guide', {\n    url: '/style-guide',\n    templateUrl: 'views/style-guide.html',\n    controller: 'StyleGuideCtrl',\n    resolve: {\n      translations: function(requireTranslations) {\n        return requireTranslations('style-guide');\n      }\n    }\n  });\n\n// i18n\n$translatePartialLoaderProvider.addPart('index');\n$translateProvider.useLoader('$translatePartialLoader', {\n  urlTemplate: '/translations/{part}/{lang}.json'\n});\n$translateProvider.useMessageFormatInterpolation();\n$translateProvider.useMissingTranslationHandlerLog();\n$translateProvider.preferredLanguage('en');\n$translateProvider.useLocalStorage();\n\n})\n  .run(function($rootScope, $translate, $templateCache) {\n    $templateCache.put('views/home.html', require('./views/home.html'));\n    $templateCache.put('views/style-guide.html', require('./views/style-guide.html'));\n    $translate.refresh();\n    $rootScope.$on('$translatePartialLoaderStructureChanged', function() {\n      $translate.refresh();\n    });\n  })\n  .factory('requireTranslations', function($translatePartialLoader, $translate) {\n    return function() {\n      angular.forEach(arguments, function(translationKey) {\n        $translatePartialLoader.addPart(translationKey);\n      });\n      return $translate.refresh();\n    };\n  })\n  .controller('HomeCtrl', require('./controllers/home'))\n  .controller('StyleGuideCtrl', require('./controllers/style-guide'));\n```\nWith the above implementation, I see style-guide.helloWorld on my page when it resolves (loads). Only if I do a setTimeout or in the case of AngularJS, $timeout of 100ms or more do I see the translations actually shown on the page, so I know the files are being loaded properly; just, the refresh is happening too soon.\n. @owenXin I'm using the following in my template:\nhtml\n<h1 data-translate=\"style-guide.helloWorld\">Hello, world!</h1>\nping @prabinv\n. @owenXin I was creating a Plunker and stumbled upon, with the help of @prabinv, the part that was breaking everything. It turns out doing the following in the config block was the culprit:\njs\n.config(function($translatePartialLoaderProvider) {\n  $translatePartialLoaderProvider.addPart('index');\n});\nOnce that was removed, all the parts were loading just fine with the new requireTranslations factory.\nThere is, however, still an issue with FOUC on the index part, since there is no way (that I know of) to resolve the index.html content upon loading its \"part\".\n. @PascalPrecht I think it's safe to say that the original issue at hand here, that of addPart returning a promise, is in fact no longer an issue at all and can therefore be closed. Thanks, everybody, for your feedback and help. I'm pretty happy about where I'm at now.\n. @dwilt I haven't touched Angular in over a year now, nor do I have access to my eventual configuration; however, @prabinv might.\n. ",
    "owenXin": "@DWand @maklemenz \nThank you guys, your solution works for me, now I can async load the parts separately in different modules, and use them in the controller, service or any other part inside of the sub module.\nAnd also, use $translate.instant() if you want to get the translated text instead of the promise object, which would be help when you want to initialize some texts dynamically, such as column names, select options, etc.  Thank @DWand for informing me about this.\n. @jedmao Yes, i'm using the resolve property, and the way @maklemenz provided.\nAnd I add the following code to the module, without which some texts failed to translated... and the key are displayed. So you can try this in your app's run block.\n``` javascript\n  app.run(\n        ['$rootScope',  '$translate', '$translatePartialLoader',\n            function($rootScope, $translate, $translatePartialLoader) {\n            //to make the fallback language work, we have to referesh() the translate manually.\n            $translate.refresh();\n\n            $rootScope.$on('$translatePartialLoaderStructureChanged', function() {\n                $translate.refresh();\n            });\n        }\n    ]);\n\n```\n. @jedmao \nI just refactor the code, and found it also work without the refresh() on $translatePartialLoaderStructureChanged event.\nJust put them in the resolve property. Here's some of my router configuration:\njavascript\n$stateProvider\n          .state(\"home\", {\n            url: \"/\",\n            template: '',\n            resolve: {\n              translation: function($translate) {\n                return $translate.refresh();  // I added some common parts in the app config block\n              }\n            }\n          })\n  .state('suppliers', {\n          abstract: true,\n          url: '/suppliers',\n          templateUrl: 'views/supplier/supplier.html',\n          controller: 'SupplierCtrl',\n          resolve: {\n            translation: function(espRequireTranslations) {\n              return espRequireTranslations('supplier');\n            }\n          }\n        })\n. @jedmao Your config block looks just as the same as mine.\n``` javascript\n            $translatePartialLoaderProvider.addPart('common');\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{part}/{lang}.json'\n        });\n\n        $translateProvider.preferredLanguage('zh');\n\n        $translateProvider.fallbackLanguage([localeService.defaultLocale]);\n\n```\nSo I think the problem might lie on the place you use the $translate service.\nIn the controller I used the $translate.instant(\"OPT_ALL\") to get the translated text. Not sure how you use it.\nThe other thought is that, do you use the $translate service in the provide/factory/service blocks? Some of them are run when the module is loaded, or some modules are injecting them. But the  controller is instantiated when the view switches, as well as the resolve block.\nSo I think it would be more clear if you can give some more details about how you use it...\n. @jedmao I didn't find problems in your config and router codes. So are you using the translation in the template use the translate filter or use the $translate service in your js code?\n. @jedmao I was using the filter style for the translate as:\nhtml\n <a href=\"#/rfxList\">{{TXT_ORGANIZATION_PROFILE | translate}}</a>\nAfter see your code, I read the doc about the translate directive, it says the directive is better, so I change my code to the directive style:\nhtml\n<a translate>TXT_ORGANIZATION_PROFILE</a>\nAnd everything works fine just as before.\nSo it's very weird why your code not work. Maybe you can create a Plunker to see whether the issue is exist in it. And if so, we can debug and figure it out.\n. @DWand , I read all your posts in this loop, I'm also impressed by your enthusiasm.\nI also read and tried your plunker, it works fine except that all the languages are loaded in the initial stage.  As we put all the sub modules as the dependencies of the main module, so when we instantiating the main module, all the sub modules are load and the config functions are executed. So that all the language files are loaded.\nI think most of the cases to separate the language file is to use the dynamical loading, but in your solution, we can not make this.  So is there any better solution for the dynamical partial load?\n. @DWand thank you very much. I've tried the latest version, and the $translate service now is return a promise object, not the real translated text, even I call the addPart() in the config stage. And since I used the translate to initialize some options and grid columns name in the javascript code dynamically, the text will never be fullfilled even after the translate file is loaded. And it is really not handy to set every option text assignment in a \"then\" callback.\nI'm using the partial loader, and here's some my js code:\n    filterOptions = [{\n                value: \"ALL\",\n                name: $translate('OPT_STATUS_ALL')\n            }, {\n                value: \"ACTIVE\",\n                name: $translate(\"OPT_STATS_ACTIVE\")\n            } \n]\nThe name properties are empty all the time.\nAnd  @tspaeth or @PascalPrecht or @knalli, any problem with my code?\n. @DWand And as I'm using ui-router for the page routing. I think a better way is to put the addPart() in the state resolve property. So the controller will be instantiated after the part is loaded, as if the addPart() can return a promise object. The good thing is that we can use $translate() in the controller to get the translated text immediately, which I think makes more sense to everyone.\n. @DWand Thank you so much for the quick response. I've go through the discussion in #197 and will try the possible solutions. And will go back to you if I can find any better one. Thanks again.\n. ",
    "napstercake": "@jedmao maybe this is not part of  the issue here but I do not have any other site where I can make my question:\nThis code loads the translate by components, lets say I don't want to load \"index\", I need to load \"home\" because I need the user log-in.\njavascript\n.config(function($translatePartialLoaderProvider) {\n  $translatePartialLoaderProvider.addPart('home');\n});\nMy question is, where should I put this code? If I left this code on my config this will execute when my app load for the first time and it seems I can not put this inside a controller:\nAny advice?\n. @dwilt if I use $translatePartialLoader inside of a controller I always have this error:Unknown provider: $translateProviderProvider <- $translateProvider <- myController also if y use just use $translatePartialLoader.addPart('home') where should I specify my URL to consume my rest that will retrieve the translation table ONLY for home. :(\n. Where is the call to the REST service that retrieve me the translation table if I use only \njavascript\n$translatePartialLoader.addPart('contact');\nIn the config? If I call to my REST from the config it will fire everytime the page refresh right? So the concept of partialLoader is to load translation table on demand. I'm so confuse.\n. ",
    "dwilt": "@napstercake $translatePartialLoader.addPart('home);` should do it for you.\n@jedmao I'm having issues where the translation tables are not translated in my app even though I added a component during the config phase like @napstercake is doing and $translate.refresh() resolved. Any ideas?\n. @knalli From here: http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading (about midway down the page)\n\ntranslatePartialLoaderProvider configures $translatePartialLoader which means you're able to inject $translatePartialLoader into your controllers and services to make use of it. But why do you want to? As you can add a translation part to the loader via the provider, you can also do so with the provided service to manipulate loader state at runtime. So what does that mean? It means, you just have to inject the loader and use that one to add additional translation parts.\nLet's say we have a ContactCtrl within our contact module, things could look like this:\nangular.module('contact')\n.controller('ContactCtrl', function ($scope, $translatePartialLoader) {\n  $translatePartialLoader.addPart('contact');\n});\nThat wasn't hard, right? So what happens here is we manipulate our loaders state during runtime. This makes sure that angular-translate only loads specific translation data when we really want to. Once you added a new part, $translatePartialLoader fires an $translatePartialLoaderStructureChanged event.\n. @knalli could you explain how you'd use the partial loader here?\n. I was able to figure out how to achieve what I wanted to do (component-based locale files) via $translatePartialLoader\n\n$translateProvider.useLoader('$translatePartialLoader', {\n    urlTemplate: '{part}/locale-{lang}.json'\n});\nwith this kind of folder structure\napp\n-- components\n---- header\n------ header.jade\n------ header.js\n------ locale-en.json\n------ locale-es.json\n------ locale-de.json\n------ locale-jp.json\nif @shinrox wouldn't have posted a following message, I would be willing to close this.\n. ",
    "checketts": "@PascalPrecht I'm still around. So sorry for not replying earlier. I got pulled into a load of back-end code so I haven't been able to touch the front end stuff. I will address each of the points you made above (so embarrassing I misspelled pseudo, must have been thinking of the word sue)\nUse cases where this is helpful: This helps you get a second 'translation' created immediately and verifies that the design can handle longer words than the original English. \nLike the Wikipedia article says: It is like an over-eager intern translating everything it can http://en.wikipedia.org/wiki/Pseudolocalization .\n. I made it a constant so it would be available for use during the config, I think I can change it to be a value since that will allow extension/decoration if the need should arise while still allowing it to be available in the config method.\nI agree to the name change and making it an extension. I'm new to that part so I'll do my best and mimic how you've done it in the rest of the codebase.\nI've already provided some unit tests, were there any specific shortcomings or things I missed in those tests? I did just realize 2 new cases I need to add (key name spacing related)\n. I'll reopen this against the canary branch. (Not sure if there is a way to have changed it without closing the PR)\n. ",
    "szimek": "Thanks. For now I've switched to ng-include with separate template for each language, but it's a bit overkill for such simple and short HTML with just a single link with a directive, so I'll switch back to translations once the compilation works.\nThanks a lot for this library!\n. Sure. I've got the following directive:\ncoffeescript\nangular.module('directives')\n.directive \"myDirective\", ->\n  restrict: 'A'\n  replace: true\n  template: \"<div ng-if='loadingRoute'><span>{{ 'ROUTE_LOADING_INFO' | translate }}</span></div>\"\nand the following test:\n``` coffeescript\ndescribe 'myDirective', ->\n  $compile = undefined\n  $rootScope = undefined\nbeforeEach module 'directives'\n  beforeEach module 'pascalprecht.translate', ($translateProvider) ->\n    $translateProvider.translations 'en',\n      'ROUTE_LOADING_INFO': \"Loading...\"\n    $translateProvider.preferredLanguage('en')\n    return\nbeforeEach inject ($compile, $rootScope) ->\n    $compile = $compile\n    $rootScope = $rootScope\nit \"replace itself with a template when loadingRoute is true\", ->\n    html = \"\"\n    wrapper = $compile(html)($rootScope)\n    $rootScope.$digest()\n    $rootScope.$apply ->\n      $rootScope.loadingRoute = true\n    element = wrapper.children(\"div\")\nexpect(element.text().trim()).toEqual \"Loading...\"\n\n```\nInstead of providing translations directly in the test, I'd like to load them from the translation files that are normally used by my app via $translateProvider.useStaticFilesLoader(prefix: 'lang/', suffix: '.json'). I tried injecting $translateStaticFilesLoader instead of using $translateProvider.translations:\ncoffeescript\ninject ($translateStaticFilesLoader) ->\n  $translateProvider.useStaticFilesLoader(prefix: 'lang/', suffix: '.json')\nbut it caused karma server to hang. $translateProvider.useStaticFilesLoader is async, so maybe I need to return a promise somewhere or resolve it manually etc.\n. @knalli How would I do that? I can't read local files by providing a path using HTML5 File API, so I'm probably left with XHR anyway.\n. @knalli I'm not really sure :) I wanted to use the same language files in my unit test, so if somebody changes translations, I'd like unit test to fail. Probably it's a bad idea and it would be better to write e2e test for that, but I haven't set them up yet to work with mocked http backend :)\n. Thanks guys. I'll just leave it then as it is.\n. @knalli Thanks! Unfortunately, in my app I've got:\n$translateProvider.useSanitizeValueStrategy('escaped');\nand thus it doesn't work and still escapes HTML. It looks like it's going to be a default in the future, so is there a way to disable it in a specific place? Here's a Plunker that I used to check why it doesn't work http://plnkr.co/edit/4U2jcDN99Shyd5FIg2L4?p=preview\n. Went with the last option (no idea why I haven't thought about it sooner) and it works perfectly. Thanks!\n. ",
    "PaulL1": "Thanks for the answers Pascal.  \nI think the JSON file thing will get easier once I move out of architecture mode and into using it - I'm less likely to immediately conclude that something I changed in the translation configuration is the problem, and so I'll be more likely to look at the console.  As you say, this is one I just need to learn.\nOn keeping the ids straight, I'm trying to avoid having a separate tool as the source of all my translation strings.  My aim is that I create one \"master language\" that always has all the translations, and is what I base off.  Then the art is making sure that all the other translations have all the same keys as that one. I think the script to do this would be pretty straightforward, and probably also have the benefit of validating the JSON files at the same time.  I guess my real problem here is that I'd expect a gap between when I add functionality to the app and when someone else (who speaks more than 1 language...unlike me) goes and updates the translations.  So there's a real risk that some of them get missed - so then I have breakage in my application that isn't easily noticeable other than by users who happen to use that language.  I'll get around to building the checker, the main problem is that I mostly write Ruby or perl, not sure if that's as useful to people who are Javascript enabled.  :-)\nOn the final one, my main concern is that doing the translation ids on each field on each page (plus in a bunch of error messages and things that are generated in Angular code and then rendered on the pages) is a very detail oriented task.  It's pretty easy to get one misaligned - a slight typo or other mistake.  I know that I'm not great at testing detail like that, so I really want a way to make it easily visible that doesn't rely on me painstakingly visiting each page manually in each language and looking at every field to see if I got a translation.  I don't want to test the translation outcome in the sense of \"is this the right text\", but I do want to test the translation outcome in the sense of \"was there a translation for each of my keys, or did one of them not have a translation at all\".  My logic is that many if not most of the instances where a translation fails to find a value will be because I coded the translation key wrong, few if any would be because I had decided that item didn't need to be translated (and I suspect none of them would be because angular-translate itself had a defect).\nIdeally this would be a config option that said \"log error if no key found\" or something like that, and I could turn it on in test mode.  Then I'd get a console error (or some other sort of error if that offers better testing integration) if any of the translations on a given page fail to retrieve a value.\n. Ah.  That's exactly what I wanted.  I thought I'd read all the documentation!!  Thanks.\nIn case it's of interest to anyone, I've been working for a while on an AngularJS and Rails tutorial, I add to it as I find new things that I want to add to my sample app.  I've just completed the angular-translate portion of that: http://technpol.wordpress.com/2013/11/02/adding-translation-using-angular-translate-to-an-angularjs-app/\n. Good advice @knalli, thanks for that.  I'm not as good as I might be at writing grunt tasks, but it's something I should learn.  Once I've done that I'll post back here.\n. I'll look at this one and see what I can do.\nI'm also getting issues in general with partialLoader, and I'm wondering about just pushing all my translations into a single file instead.  My app probably won't be as big as I had worried, and the network cost of a single download isn't unreasonable.  Is partialLoader heavily used?\nThe current problem I have in my application looks to be an issue with the triggering of loads of the partials when the language changes.  The logic is something like:\n1. set partials to [a, b]\n2. set language to en-AU\n3. partials en-AU: [a, b] load correctly\n4. set language to fr-FR\n5. set partials to [b, c]\n6. partials fr-FR: [b, c] load correctly\n7. set language to en-AU\n8. Load for partial en-AU: [c] is not triggered, but should be as it's been requested and is not currently available\nI've tried to create a simplified plunker to demonstrate that, which is here:\nhttp://plnkr.co/edit/f3nOLa\nThe core of the code for that is a set of three buttons, calling three methods on the controller:\n```\napp.controller('MainCtrl', function($scope, $translate, $translatePartialLoader, $rootScope) {\n  $scope.a_thing = 'a_test';\n  $scope.b_thing = 'b_test';\n$scope.firstStep = function(){\n    console.log('firstStep');\n    $translate.use('en-AU');\n    $translatePartialLoader.addPart('a');\n    $translate.refresh();\n  };\n$scope.secondStep = function(){\n    console.log('secondStep');\n    $translate.use('fr-FR');\n    $translatePartialLoader.addPart('b');\n    $translate.refresh();\n  };\n$scope.thirdStep = function(){\n    console.log('thirdStep');\n    $translate.use('en-AU');\n    $translate.refresh();\n  };\n```\nUnfortunately it doesn't demonstrate this problem (or maybe it's related), but does give a different problem.\n1. When I click the first button it looks to retrieve the fr-FR-a.json file, but doesn't actually translate on screen.  It should have retrieved the en-AU-a.json file because the language was changed to en-AU before the addPart was called.  It looks to have used the preferredLanguage instead of the requested language to trigger the retrieve, or perhaps the asynch events have fired out of order.  Either way, it presumably doesn't translate because it actually needs en-AU-a.json\n1. When I click the second button it retrieves the fr-FR-b.json file and then translates both lines.  Presumably the translation works because both necessary files are present.\n2. When I click the third button it correctly retrieves both files for en-AU, and translates.\n3. If at step 2, I instead click button 1 again, then it retrieves the en-AU-a.json file, and translates correctly.\n4.  If I modify the order in the code to call addPart first, then $translate.use('en-AU') then it works correctly.\n5.  If I remove the preferredLanguage, then the first button retrieves no files at all, unless I reverse the order of the calls again, in which case it again works correctly.\nFrom all of this I am concluding that if you change the language immediately before calling addPart, then things don't work.  \nI can hypothesise a reason for it, if:\n1. We call $translate.uses(), which grabs some state about what files it needs, then makes an asynchronous call that we wait on\n2. We call addPart then refresh, which together synchronously request a file base on an un-updated language because $translate.use() hasn't completed\n3. $translate.uses() then runs, but since it grabbed some state before addPart was called, it doesn't know that it needs another file\nIf that were all true, then it would give the behaviour I think the test case shows.  For my application, I can work around this by calling addParts() before $translate.use().\n. ",
    "Aestek": "Hi @PascalPrecht, thanks to you for looking at it so fast :)\n. Okay i'll try to do this this week-end\n. @PascalPrecht, I've added some changes and provided unit testing, please let me know if it's ok for you\n. Thx @PascalPrecht :). In which way would you like to rethink this directive ? Is there features you'd like to add ?\nI was thinking of submitting a PR to replace .html() calls to $sce as I believe they can lead to XSS breaches when translate-values contain html.\n. ",
    "lehmamic": "I've found this: http://blog.greatrexpectations.com/2013/08/09/creating-nuget-packages-with-grunt/. But I don't know if it works with travis.\n. I had some free time, so I made it for you. Have a look at the pull request and feel free to adjust it to your needs.\n. Yes, automation is a must, even though I didn't know grunt before :)\nI wrote it on OS X :) You need mono installed, than you can create the package with the command mono nuget/nuget.exe pack angular-translate.nuspec.\nYou also can publish the package by this nuget.exe:\nhttp://docs.nuget.org/docs/creating-packages/creating-and-publishing-a-package\nPlease have also a look at the metadata of the nuspec file, perhaps you would like to adjust some of the info there.\n. Sounds familiar somehow ^^ Also thanks to you for your effort :)\n. @knalli I understand your dislike for binaries, but fact is, that angular gets very popular in the .net development, where nuget is a must. Would be a pitty not to have this great lib in our environment :)\n. @knalli Sorry I misunderstood you. \nActually I agree with you. Despite of that, there are two reasons why I put the binaries into the repository:\n1. I took the nugget.exe from Xamarin Studio, which places this exe on a different place for every OS. Setting up the build environment would become more difficult. (Do we want this?).\n2. A rather simple reason: Its just the way it is done with nuget.\nFor me it does not matter how the package is built, at the end you guys have to get along with it.\n. Sounds great :) Tell me if I can help you!\nI also updated the nuspec file to contain all js files of angular-translate. Creating a nuget package for every part would be to fine granular.\nI also tested the package generated by the nuspec. It works great :)\n. @knalli Unfortunately the default behavior of Visual Studio adds binaries to the solution.\n\nAs long as you don't change it manually, the binaries have to be check-in to the source control.\nNot nice, but it is like that. Seems that mono makes it better.\n. Yes it is IDE specific, resp. the only IDE which matters in .Net development. And if we check it in depends on the situation. We wount  if we can avoid it, means if we have control over our build environment and this is not always given.\nSomething like bower is not well known in the dnet community. I even did not know that it exists before I suggested this NuGet package.\nBefore NuGet was introduced we had no chance to dynamically resolve dependencies, so it was common to check in everything. So we have some improvement at least :)\n. I just found something which also could be interesting for us: https://npmjs.org/package/grunt-nuget\n. The  .nuget\\nuget.targets  file is an MSBuild script, used by the Visual Studio Environment to restore nuget package dependencies of your code. This has actually nothing to do with the package creation process we need.\nBut I just posted a link (https://npmjs.org/package/grunt-nuget). I didn't try it out yet, but I think it is pretty cool and will solve our problem.\nThe nuspec file is the package specification describing the package metadata and content. This is required to build the package. If you have a look at my branch, you also will find it.\n. Yep, I'm going to try it out this week end if I find some free time ^^\n. Theoretically you even could make continues deployment for the nuget package, but this would require to have the api key within the sources. I would avoid this.\n. I had a look into the source of this grunt plugin => seems to use the windows nuget... Perhaps this projcet needs some contribution by me ;)\n. I reworked the nugget task:\n1. I removed the binaries\n2. The nuget task downloads the nugget.exe with the grunt-curl plugin\nWhat do you think about this solution?\n. I made a branch on my fork:\nhttps://github.com/lehmamic/angular-translate/tree/nuget_externalbin\nThe rework ist in following commit:\nhttps://github.com/lehmamic/angular-translate/commit/fb2c29ffcf7c01b3fe21f927e7c82e87904bfcfa\n. Hi, sorry for late reply, I was on vacation.\nThis package is suitable for just now. Do we know if this guy will update his NuGet package? That is the reason I would prefere a NuGet pkg comming from the library owner.\n. ",
    "AlleSchonWeg": "Hi,\nany news about the nuget package?\nThank you!\n. I know this package and this package: http://www.nuget.org/packages/AngularTranslate.LoaderUrl/\nBut some files are missing. For example loader-partial.js or loader-static-files.js.\n. @lehmami , @PascalPrecht \nThe nuget package from SchmulikR : http://www.nuget.org/packages/AngularTranslate/ is not up to date. I prefer an package from the owner too.\n. Hi,\ni have a similar problem. Setting the fallback to \"en\" and determinePreferredLanguage detects \"fr\" for example, but i only have \"en\" and \"de\" translations the loader requests the \"fr file\" and gets 404. The translations fail. Angular translate should try the fallback language.\n. @PascalPrecht \nI think i have found a solution. I'am using the registerAvailableLanguageKeys function and register the available language keys and setup languagekeyaliases:\nKeyAliases = {\n        \"de_au\": \"de\",\n        \"en_UK\": \"en\",\n        \"de_CH\": \"de\",\n        \"*\": \"en\"\n      };\nAs the last entry i set * to en. If determinePreferredLanguage detects fr, which is not available, english is used. :-)\n. @tspaeth Yes, you can close this ticket.\n. Thanks for your answer. I have playing around with the custom loaders, but the options object only contains the language key and not the translation keys. Is there a chance to get the translation keys in a custom loader factory?\n. @PascalPrecht The problem is, that we have existing translations. These translations are not organized by parts. I know this is bad, but i cannot change the way the translations are saved, because other apps needs the existing structure and to reorganize all other apps is impossible.\nOk, i think it is not a angular translate problem. I will try a few other things...\n. No. Please close.\n. Thank you.\nWill you povide a fix in the next version?\n. ",
    "ghengeveld": "Unfortunately it's impossible to fetch the value of Accept-Language using only client-side JavaScript. There is window.navigator.userLanguage (IE) and window.navigator.language (others), but these contain only the language code of the browser GUI (only one value). The nice thing about Accept-Language is that it also provides alternative languages, in case the 1st isn't supported.\nThe only way to get the Accept-Language header in JavaScript is to send a request to the server which should return the value of the Accept-Language header. It would be very simple to implement in any server-side language, but it obviously won't be part of angular-translate. The best I can do is provide documentation with some code examples (in PHP and Node.js, everyone else is on their own to implement it). There is also a JSONP service that someone implemented:\nhttp://ajaxhttpheaders2.appspot.com/?callback=(function(headers){return%20headers['Accept-Language']})\n(source: http://stackoverflow.com/a/3335420)\n. #171 is a generic goal and doesn't describe a concrete implementation. #213 is a specific way to achieve the same goal. Personally I prefer very concrete issues so you'll know for sure when it can be closed. Theres two approaches:\n- Make #171 more concrete by providing more implementation details. There may be multiple solutions: use session.js, use window.navigator.language, use a request to get the Accept-Language header or, when loading the language file asynchronously, let the server return the correct language file depending on the Accept-Language header.\n- Make separate issues for each of the solutions, #213 being one of them.\n. ",
    "Voles": "Done! :-)\n. With pleasure. Thanks again for your presentation in Amsterdam! :-)\n. ",
    "holger-at-schottel-de": "Hi @PascalPrecht.\nSorry for doing wrong, I'm new to GitHub. Should I remove my fork and apply the changes to the canary branch?\n. ",
    "harinair": "@PascalPrecht MIT is the most accepted license. I have included this as a part of a commercial product and is going through the legal process to get the OSS approvals. In past I have seen MIT has the least resistance from legal. MIT and Apache are considered as \"blessed\" licenses.\n. ",
    "robinboehm": "Done #224 :)\n. It's possible to change the target branch in this PR or should I create a new one to canary?\n. ",
    "chinchang": "Ahh right. Thanks. Not sure if anything can be done to make it work with angular interpolation symbols.\n. ",
    "jameshines10": "Sure! We can give it a shot. It's a fantastic module. Thank you!\n. ",
    "cesutherland": "I'm interested in this as well.  What are the concerns with supporting right-to-left in this module?\n. Cool, thanks for looping me in!  That path to integration makes sense.  Considerations I'd had were primarily styling.  There are also issue where decisions would need to be made programmatically, such as rtl support for tables and for things like charts and graphs (thinking about axes and labeling).\nProbably it's enough to let the user declare when something is rtl:\n``` javascript\n$translateProvider.translations('ar',\n  { ... }, // Translation table\n  { rtl : true } // Options\n);\n$translate.isRTL(); // true\n```\nIt may also be possible to encapsulate a complete list of RTL languages within the library itself.  That's enough to let the user interact programmatically:\njavascript\n$scope.declarativeTableColumns = [ ... ];\nif ($translate.isRTL()) $scope.declarativeTableColumns = $scope.declarativeTableColumns.reverse();\nFor attaching a CSS class, I think it'd be better to have a directive and let the user decide where that class gets added vs. making a global decision.\n. Actually, I don't think it is bad but I don't know how one would do it an an 'angular' way without a directive.\n. ",
    "zeeshanjan82": "any updates whether angular-translate supports right to left languages?\n. thanks @knalli let me elaborate more on the issue and I am sure there is a solution to it. \nActually I am using Cordova and AngualrJS together to create an android application and I have a requirement where the application should determine the default language of the android device and then load the appropriate language json file which is also shipped with my angular app.\nThe issue comes when I am using navigator.globalization.getPreferredLanguage method of Cordova to find the default language when bootstrapping my angularjs application, at that time as its promise based It taken some miliseconds to determine the language but till then I have my main thread executing and going with a default language, so what I am doing now is , I use $translate service in my main controller to change the language in its init function but I would like angular-translate to wait for the cordova to return the default language and then use that when bootstrapping the application.\n. ",
    "jixiangcn": "Yes, \nthe HTML set \ncharset=\"utf-8\"\nALL js load with\n charset=\"utf-8\" \nand if I load language table from json file it works well, but with $translateProvider.translations('zh-CN',{}) I got unrecognizable characters(black square with a white question mark inside).\n. Thank you! \u8c22\u8c22\u4f60!\nI open the main.js file then save it with UTF-8, it works !!!\n. hi Ricardovalquin, \nYou should save the js file itself with utf-8 encoding.\nWith SublimeText, [File]->[Save with Encoding]->[UTF-8]\n. ",
    "ricardovalquin": "Hi Jixiangcn, currently I'm using angular translate for an ionic app, i make the translations \n$translateProvider.translations('en',{list of words});\n$translateProvider.translations('es',{list of words});\nfor english and spanish language, that works so great!!, but now, i need to add a new language, chinese..., how can i add these list of characters for my app?, please help me, i don't understand what do you mean with the all the js loaded with utf-8 encoding, that's no only for the xml and the html??\n. Ahh ok, thx so muchos, and... Can you bring me a link of the chinesse\ncharacters or what can i do forma that (about to import these character for\nan external file or whatever)\nEl 13/07/2015 22:06, \"Ji Xiang\" notifications@github.com escribi\u00f3:\n\nhi Ricardovalquin,\nYou should save the js file itself with utf-8 encoding.\nWith SublimeText, [File]->[Save with Encoding]->[UTF-8]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/228#issuecomment-121118335\n.\n. \n",
    "miukki": "it doesn't work for me.  in documentation it clearly describes. \n\nso for chinese language i m  using\n$translateProvider.useSanitizeValueStrategy('escaped');\nam i not right /? \n. ",
    "LordSputnik": "I'm not sure I explained very well - perhaps you could take a look at http://dev.waveplot.net and let me know whether your suggestion will fix the menu? I asked Pascal earlier and he said what I wanted to do was currently unsupported, but I'm not very experienced with angular so I may be missing something here.\n. Hmm, I've managed to achieve what I wanted with something like this:\n$translatePartialLoader.addPart('common');\n$translatePartialLoader.addPart('home');\nHowever, the other part of my problem which I didn't really mention was that the common translations don't need to be asynchronous here. If I could specify the menu items in my application configuration, that would same loading them later on.\n. Ah, that function looks like it would fix my issue. Then I can just add the common part statically. I worked around it temporarily by adding a static translation, then duplicating that in my asynchronous translations, so when the static translation gets deleted, the asynchronous translation is able to replace it.\n. This is also probably a duplicate of #175 - we've just got to the root problem from different starting points.\n. ",
    "danicomas": "angular-translate, should implement the plugin that @daanporon comment's, the @lgalfaso plugin: https://github.com/lgalfaso/angular-dynamic-locale\nangular-translate, only should populate the $scope inside the function $translate.uses(key). This functionallity that need is the same of the plugin use.\nOnly I would change, is adapting the plugin to promise functions, as I explained in this: \nhttps://github.com/angular/angular.js/pull/2458#issuecomment-31425755\n. I think that if you want change the language, also want change the currency, date,... in the same moment.\nBut your answer @DWand, It is not bad. The developer will choose the required modules.\n. I wanted connect angular-translate with https://github.com/lgalfaso/angular-dynamic-locale. Two projects using local storage useLocalStorage(). angular-dynamic-locale didn't have it. A few days, the project manager of angular-dynamic-locale developed a functionallity similar than angular-translate to save Local Storage.\nI close this issue.\n. ",
    "frapontillo": "This happens because the translate method returned by the provider always returns back the translationId. I don't know how this can currently be solved, though. It'd be nice to have some sort of temporary \"fallback\" for undefined or not yet translated ids.\nIdeas?\n. So can I provide a static subset of basic defaults of a language (e.g. 'en-US'), that will then be overridden by, for example, $translateProvider.useStaticFilesLoader?\nThis way I'd be able to use a static text until the files loader does its stuff.\nThank you.\n. Great, thanks! :+1: \n. @avmolchanov you can still rely on the resolve mechanism (based on promises) to load all of the data (including the default language) before initializing the controller, and thus the view. The problem persists for the page title and other pre-angular elements, but that's a completely different story.\n. ",
    "devorbitus": "Just out of curiosity, why not an option in the provider allowing for the directive to hide content until the asynchronous call to get translations returns? \n. In my case I just monkey patched the finished angular-translate.js file to add the following if statement just inside the link function of the translate directive...\nif (!(attr.translateHideUntil == undefined)){\n    element.hide();\n    scope.$on('$translateLoadingSuccess',function(){\n        element.show();\n    });\n}\nThen I placed the translate-hide-until attribute on the element I wanted hidden and it remained hidden until translations arrived.\nThe correct way to do this at a project level would be to add an option to the provider but I only had a couple items in my header that were FOUC.\n. To me, this just makes more sense than having to include a default language. Especially on a finished product that might be white labeled for different languages for different customers. You wouldn't want your German only customer to be forced to see a flash of English.\n. Yeah, I am in now way advocating for this to be the default behaviour just an option.\n. ",
    "mrmuh": "+1\n. ",
    "lpsBetty": "+1\n. I'm using the Url Loader, so when the server response is slow it shows the i18n keys.. not very nice ;)\n. @PascalPrecht sehr cool!\n. I'm using angular-translate with angular-translate-loader-url with the newest angular version 1.2.10\nand it works!\n. but with the filter it will work:\n{{ 'key.prefix.' + someVariable | translate }}\nunfortunately I can see FOUC: 'key.prefix.' .. is it possible to fix this by waiting if the key is complete?\n. just FYI:\n\n{{ 'key.prefix.' + someVariable | translate }}\nunfortunately I can see FOUC: 'key.prefix.' .. is it possible to fix this by waiting if the key is complete?\n\nyou can prevent the FOUC if you put a ng-if=\"someVariable\" around it ;) \n. :+1: \n. @knalli I don't get your plunker, the results are all the same?\n. @knalli  there were two missing end tags - that's why there was an JS error in your plunker, I forked it: http://plnkr.co/edit/ZWpeOBeH3RcFlveculnD?p=preview\nnow I see different results ;)\n. I think sceParameters would totally solve my problem!\n. Your plnkr does match the issue when you enable the useSanitizeValueStrategy as you described!\nWhat exactly do you mean by \n\nbuilding the text on yourself ?\n\nI have translate-compile very often in different parts of the code, often used to add a a-tag.. so maybe there I can use a custom directive..!\n. Ok, now I know, thank you!\nI don't think it is a special case? I often have links in translations and I don't want to have HTML in the translation.. E.g. I prefer a {{link}} placeholder instead of a long a-tag!\n. Sorry, it seems that I am a bit slow, .. :/   but it does not work as expected and you said it yourself in your first comment - so will there be a bugfix or not? ;)\nI mean, of course, I can make a directive that solves this, but I am really wondering, if I am the only one having this problem. \n. whatever strategy used, translate-compile is not working\n. http://plnkr.co/edit/qfM2PvjkX63z8k5Eo7HP?p=preview\n. @whjvenyl yes thought about that too ;)\nmaybe with one-time-binding: \n<a href=\"https://github.com\">{{::'translate_hello' | translate}}</a>\n. ",
    "BeOleg": "Great @PascalPrecht !\nThanks!, keep us posted!\n. Well, in Django, once you wrapped all the Strings at the views which you would like to translate, Django knows to generate\\migrate existing dictionary.\nThat's really cool and saves a lot of time.\nI am not sure how to implement such a feature though, it can be anything from a Python command line script to an IDE plugin.\n. :+1: \nAwesome, thank you so much!\nI do wish I haven't spent those 2 past days on doing the described above manually.\n. ",
    "pedrosanta": "+1\n. Yep, got that issue too. Using the translate filter works though.\n. @tspaeth Open the preview and choose German (non-preferred language). Perform subsequent reloads (using the reload button of Plunker, for instance), and the text on the popup, that is being translated using a $translate service promise, is outputting the translation keys - the promised are being resolved when the language is (still) 'undefined', and several 'Translation not found' warnings are outputted to the console.\nLike I said, if you comment either fallback language or preferred language, it works fine.\n. Hi @knalli.\nMy problem has to do with what I think it might be an issue, that lets $translate service promises resolve, or fail, (and translate directives to execute too) at a point when the language is still 'undefined' using async loading and if I set preferredLanguage (or when determinePreferredLanguage() is used too it seems).\nYes, if I return 'false' on the logger the promise is rejected. (I've updated the Plunker with that code.) But since promises are being used, and since several improvements were done on 2.x regarding async loading, the promise resolution should be hold back until the language is loaded, right?\nI mean, it works that way If I comment the preferred language set method - the language is read as 'de' from the local storage, is being loaded async and the promises only resolve when the 'de' table is available. It appears to me as setting or determining the preferred language might be messing with the async loading handling/promises resolution somehow.\nMeanwhile, I'll try to dig up the code and find more.\nThanks @knalli, @tspaeth.\n. @knalli Nice document. Yes, it seems like it. With those updates/changes I think the dependencies will be more clear and it will ease Bower workflow.\nBut since were on this topic, how do you feel about supporting (and assuming angular-translate works with) all AJS 1.x versions and have a more 'clear' support range like \"^1.2\"? \nI'm only talking about it because by sem ver guidelines any AJS API change of further 1.x versions should be backwards compatible.\nIt would also be more riskier, sure, since it would rely on the obedience of this guideline by the AJS devs, and the situation of having a version with the dependency \"^1.2\" that wont work with a new AJS minor version could happen, yes. But in other hand it could ease the maintainability of the dependencies (when there new AJS minor versions come out) and communicate the dependencies more clearly.\nI'm not sure if it's better to have a open ended range like \"^1.2\" too, but I'll leave it to consideration.\n. @knalli, @Belelros fair enough. \">=1.2 <=1.4\" it is.\n. ",
    "avmolchanov": "Hi @PascalPrecht! We are looking to use the feature in our product but this FOUC thing makes us put internationalization on hold. Is there a workaround that would help to pre-load selected (e.g. German) translation table synchronously? Thanks. BTW, the framework is great!\n. Great, thanks!\n. ",
    "leehambley": "An example of how to skip loading things in tests for people who are starting out would be quite welcome. Currently I have a choice of no i18n, or no tests, as I have in every controller test that previously worked, an error about unexpected GET requests.\nCan anyone post an example here, I'd be happy to pick up the the thread then, and add it to the wiki/README/whatever. \n. I can take a look and see if gettext or messageformat already support this, but it was just a request.\n. ",
    "maxmarkus": "There are lots of stackoverflow threads to that, but this one finally helped me: \nI created a i18nMock.js file which I load in files: [] just before the tests, but after the app, so the declaration of the i18n factory gets overridden by the mock.\njavascript\nangular.module('ds.i18n', ['pascalprecht.translate'])\n.config(function ($provide, $translateProvider) {\n  $provide.factory('customLoader', function () {\n    return {\n        $get: function(get){ return get; }\n    };\n  });\n  $translateProvider.useLoader('customLoader');\n});\nFor reference, this is how my translate factory looks like:\n``` javascript\n'use strict';\nangular.module('ds.i18n', ['pascalprecht.translate')\n.config(['$translateProvider', function ($translateProvider) {\n        $translateProvider\n            .useStaticFilesLoader({\n                prefix: 'locales/locale-',\n                suffix: '.json'\n            })\n            .registerAvailableLanguageKeys(['en', 'de'], {\n                'en_': 'en',\n                'de_': 'de',\n                '*': 'en'\n            })\n            .fallbackLanguage('en')\n            //.useLoaderCache(true)\n            .determinePreferredLanguage();\n        $translateProvider.useSanitizeValueStrategy('escaped');\n    }]);\n```\nHope this helps you.\n. ",
    "septagram": "Well, I can see why we have to mock data that comes from a remote server, and maybe sort of see why we would prefer to mock the local API responses, but see no reason at all why is it so difficult to load the local static files in our tests. There are tons of valid use cases for that.\nI can name you one regarding translations. Recently, a locale file for a language that nobody on the dev team speaks was modified improperly, breaking that locale completely. This might very well happen again, and the language is fairly popular with our users.. ",
    "pavelsl": "@septagram Agree with you.\nThis might be helpful for someone. But if you don't understand what you are doing better ignore this. \nPS: i have jest & webpack. This is my config for loading real file for making component tests work.\n```\ndescribe('my component', () => {\n  let $httpBackend\nconst translatinURL = 'app/translation/locale-en_GB.json'\n  const translationFile = require('./../../../translation/locale-en_GB')\nlet selectedIndex\nbeforeEach(() => {\n    angular.mock.module('myModule')\ninject((\n  _$httpBackend_,\n) => {\n  $httpBackend = _$httpBackend_\n\n  $httpBackend\n    .when('GET', translatinURL)\n    .respond(translationFile)\n})\n\n})\n```. ",
    "pavlo-yuriychuk": "@tspaeth Workflow that you have described is correct, but I would be happy if you add one more item: \nIf translation is not found anywhere - return original translation token. This would simplify the issues resolving for localization team.\n. Please review the fix that I have provided, It passes the unit tests (used grunt test). And let me know if I need to add more.\n. @tspaeth I had no time to debug it deeper. My project relies on dynamic loading of languages translation so it is critical not to have exceptions caused by $translate. As for now I am using this hotfix, because issue is reproduced every time we launch angular app. Please check with @Dwand if it is possible to add more checks or necessary iterations and it might help the project.\n. Are there any updates about this issue?\n. @DWand I have already switched my project to canary branch. Issue can not be reproduced right now, but I want to switch it back to some stable branch before release. So could you please check my fix, if it is still actual. I have no time to check why does it fail with the unit tests.\n. I have double checked and found that there was an issue with a grunt task that was invoking the build of angular-translate. So that I closed the issue.\n. ",
    "igorbljahhin": "Sorry, I am n00b for angular and your library. Thanks for hint, I discovered that I forgot to pass $translate to my controller's function.\n. Hi, \nthanks for response.\nOur existing HTML pages are not parsing, the translations are inserted as usual, like\n<h4 translate=\"global.waiting\" />\nshows the text in two languages at once\nBitte warten...<br>Palun oota...\nThis special requirement is the reason why I could not split translation files into separate languages. right now.\n. ",
    "mohanmanis": "I am also facing the same issue and when i am trying to execute this $scope.sendCartByEmail = function() {\nalert($translate('CART_SEND_EMAIL_SUCCESS'));\n}\nI am getting alert as [object object].\n.  am also facing the same issue and when i am trying to execute this $scope.sendCartByEmail = function() {\nalert($translate('CART_SEND_EMAIL_SUCCESS'));\n}\nI am getting alert as [object object].\n@PascalPrecht  can you throw light on this if i am doing anything wrong?\n. ",
    "davidmartinezros": "You have to do something like this:\npublic showIntroductionAlert() {\n    this.translate.get(\"IntroductionAlert\").subscribe(\n      key => {\n        window.alert(key);\n      }\n    );\n  }\nBecause the get method returns an Observable.. ",
    "bSratUoH": "How can we translate a text in javascript..\nfor example if I have a code like below in javascript what kind of keyword can be used to translate this \nfunction errorCallback(errorResponse) {\n      $scope.loginParams.errorText = 'The username and password that you entered don\\'t match.';\n      $scope.SigningIn = false;\n}\nlike in html we are using \n{{'key'|translate}} what will be used in javascript.. ",
    "jvandemo": "Interpolation, as implemented by angular-translate, is indeed very similar and will solve most use-cases.\nOne exception may be if you have an existing library of translations that doesn't use the AngularJS expression syntax, but that may be out of the scope of angular-translate.\nAt that point one could simply import the filter (from another module) and apply it to the translated string, as filters can easily be chained.\n. ",
    "pahlers": "@DWand Thanks, I was working on this bug my self. I'm glad that you fixed this.\n. ",
    "igler": "@tspaeth, I use Spring MVC on the server side which is connected to the client through a REST api. If there are better concepts to go with let me know (as I do not have to translate the log on client side). As I will fetch the log from the server through REST I can pass a ?lang= parameter and the client gets the correct language he/she uses.\n. Having the same problem.\n. ",
    "DanielaValero": "Was a problem with the strings I think. It is solved now.\n. Hi @DWand, thank you for your answer, your english is very good :+1: \nI found out why the request was being sent twice, in the main config I was setting the preferred language and in the main run I was setting the language again with translate.uses according to a cookie. Silly me.\nNow, the other part of my question. My app is modularised by view, the main view is the login page which has a link to the register page. On the one hand, the login strings are being added on its config, with this they are being loaded with the page. On the other hand, for the register page I added the strings in the controller, so they are not loaded on the main page load, but when the register page is rendered/requested. When I said user iteration I meant that the page is requested through the angular router, but not refreshed or reloaded.\nIf I understood what you explained to me, the addPart() method, when called inside the controller, will make the translations available after the route is requested, since they are returned as a promise (?). But they will be deleted on page refresh(), right?  \nIf the last paragraph was ok, then the current alternative for it is to use the new methods setPart() and deletePart(), which are made to avoid this issue, right?\nAs long as I understood, after seeing the examples you guys have provided to other users on these methods, is that the strings should be provided to them as .js but not as .json files. If so, I will add that the feature of generating the strings a .js on the plugin I am writing to transform .po files into a format which easily work with angular-translate, since our translators will get completely crazy if we send them js or json files, and won't be able to work with their usual tools. And I will get a solution for my strings load problem.\n. Hi,\nI tried the suggestion on the issue #197 but didn't work for me, the part was added to the table, but the request was never made on page load, just after the routing. Did this:\njs\nmyServices.factory(\"myLoadStrings\",\n      function($translatePartialLoader, $translate) {\n        return function() {\n          angular.forEach(arguments, function(translationKey) {\n            $translatePartialLoader.addPart(translationKey);\n              console.log(translationKey + ' added');\n          });\n            console.log('helper called: ');\n          return $translate.refresh();\n        };\n    });\nIn my module config:\njs\n   $routeProvider.when(myRoutes.login, {\n                         templateUrl: '/app/src/login/login.html',\n                         controller: 'LoginCtrl',\n                         title: 'layout/login',\n                         resolve:{\n                             translations: function(myLoadStrings) {\n                                 return myLoadStrings('login');\n                             }\n                         }\n                     });\n                 }]);\nAnd, If I have add the part on the controller, the requests order looks like this:\nLoaders have already the part: common-strings angular-translate-loader-partial.js:124\nXHR finished loading: \"http://local.dashboard/app/i18n/en/my-dashboard.common-strings.json\". angular.js:7883\nHi, I am a loader who just loaded a part app.js:66\nXHR finished loading: \"http://local.dashboard/app/src/login/login.html\". angular.js:7883\nLoaders have already the part: common-strings angular-translate-loader-partial.js:124\nLoaders have already the part: login angular-translate-loader-partial.js:124\nXHR finished loading: \"http://local.dashboard/app/i18n/en/my-dashboard.login.json\". angular.js:7883\nHi, I am a loader who just loaded a part app.js:66\nHola I am refreshing the table\nSo, It loads the login.json strings, but they are not available and the page shows me the key of the string. Is there a way to trigger manually the angular-translate loader?\n. Better, I will set a jsFiddle with this scenario, because I think this issue may be related with other issue I have, that when I switch languages between de and en, the change is broadcasted on the main controller (header and footer), but not to the views which are rendered with angular router. Maybe my problem is not a loading problem of the translations but a communication problem between these two parts of my app. Will come back to you soon with the link. \n. Hi,\nThis is the link:\nhttp://plnkr.co/edit/t115emmjWCaMzFBdhK6q\nAs you see there, the content in the blue bar and the bottom, load after the changeSuccess event, but I can't do the same with the json of the specific view, since it won't be available after using the routes but just after page load. \nAs well, when changing the language between german and english, everything outside the routes changes, but doesn't the content of the view. \nWhat do you think ?\nEDIT:\nWhat I've just found is that both issues are related, the not-update when switching the locale and the translatation-not-shown on page load, but this happens when I want to translate with the service, I tried using the directive, and both issues disappeared.\nI am quite new at angular, and still there are some theoretic parts I don't understand at 100% level.  Am I missing something when using the service? Maybe I will just take some minutes to read the code and I'll get it better. \nBy now, I will use the directive, but I would prefer doing the translations with the service. So, I have a short term solution.\n. Actually I didn't check. I will close it, and reopen it again in case I see it\n. Yes, actually sounds very logic. \n. Another ++ here\n. ",
    "elfreyshira": "@PascalPrecht, it is available from bower. However, the purpose of browserify is to not have to use bower anymore and solely use npm modules for both back-end and front-end dependencies.\nWe love the angular-translate project and it would be helpful to have it available via npm for our browserify goals.\n. @PascalPrecht, will publishing it to npm before the next release affect anything? I'm not understanding why it can't be published now. It would be nice to have the angular-translate project on npm sooner than later.\nThanks again for your and @DWand's efforts on this project! I appreciate your open-source contributions and hope that we can make angular-translate available to more audiences.\n. Awesome, thanks!\n. ",
    "NickHeiner": ":+1: for making this available in npm. You already have a package.json, so all you would need to do is run npm publish in this directory.\n. You don't need to introduce a separate package - just define a prepublish script in npm that does whatever build you need:\njs\n\"main\": \"index.js\",\n\"scripts\": {\n    \"prepublish\": \"grunt build\"\n}\nThen, if grunt build builds the single necessary file to index.js, running npm publish will build and publish for you.\n. > you are happy? Or am I missing something?\nI have submitted a PR that addresses everything needed to make this work: https://github.com/angular-translate/angular-translate/pull/708.\n. > We have actually not made anything ready for browserify.\nMaybe not intentionally, but my team is currently using this project via browserify, and it works fine! (Aside from the index.js being out of sync with what's in the actual repo, haha.)\n. That solution sounds great to me! :smile: \n. Oops - just saw the note about submitting PRs to the canary branch. Should I close this and re-submit?\n. Closing to re-send to canary.\n. Oops - looks like I have an error. I will take a look at that.\n. I think this is just failing because Travis can't start Firefox. Does it support running browsers like that? Would you be ok limiting the cross-browser testing for the browserify build? (I recognize the irony of that, haha.)\n. Mm, it still doesn't work. Odd. It looks like you have the right .travis content to use firefox:\nyml\n  - export DISPLAY=:99.0\n  - sh -e /etc/init.d/xvfb start\nhttp://karma-runner.github.io/0.8/plus/Travis-CI.html\n. It works when we take out Firefox. What do you think about that?\n. Looks good to me! I haven't tested it manually but it passed on travis and the code seems legit.\n. Closing in favor of #708.\n. Hmm... this is failing on travis. Any idea why that may be? At first glance, it doesn't seem that this change would cause that error - the tests pass for me locally.\n. Thanks! I have changed the message. \nI'm not sure if it will pass all the fallback mechanisms correctly - I had hoped that the unit tests provided exhaustive coverage of that, haha.\n. Sorry about the style issues - thanks for pointing those out.\nYou're right that the test wasn't actually running. I've fixed it.\n. Squashed.\n. Ha I just remembered that I've opened a similar PR earlier: https://github.com/angular-translate/angular-translate/pull/362. This one is better.\n. > The current version is likely a \"you build it yourself on/after npm install\", but it should be more like \"it is prebuilt before publish\". Going with me?\nI'm not sure what you mean by \"the current version\" (master or this PR?); this PR takes the latter approach which is what is recommend by npm.\nThe other files in dist will be fine. main provides a default, but end users can still explicitly pick them if they so choose.\n. > current = in repo, future ~ this pr\nThen yes, I think we are on the same page. :smile: \n. > We cannot use this PR directly, because it is based on outdated master and targeting not canary.\n:+1: \n. Looks good! I'm excited for this to land.\n. > Ok? https://www.npmjs.org/package/knalli-angular-translate\nYes! I was able to install that into my project and use it.\n. Cool. Thanks for fixing up the commit message and sending it to the right branch.\n. For .gitignore, node_modules matches any file or directory named node_modules anywhere in our tree. I recommend being a little more explicit and saying \"this is a directory at the root of our tree\". (This is the same approach I've taken with the rest of the file.)\n. As the comment above suggests, I recommend only including the minimum needed to run this package so npm install is faster for users. Some people like to include tests or things like that because they think it's an easier way to share them. I feel like if I want tests, I know where to find the repo on github. Overall, it's a matter of your preference.\n. npm prepublish is run as part of npm install (I'm not totally sure why this is), so now we need to make sure that we're starting Firefox before we install.\n. I made grunt-cli a dev dep. This has two advantages: 1) people contributing to this project don't need to have grunt-cli installed and 2) you get to specify exactly which version of grunt-cli you want to work with and everyone will use that automatically, instead of having potential errors arising when people have mismatching versions.\n. If we put 'karma' here, we will run all the 'karma' subtasks. Either karma:debug-unit or karma:debug-midway or both were hanging for me when I ran them as part of grunt build, so I explicitly wrote out all the other karma subtasks to omit them.\n. Could this use more detail? I actually don't know what the other files in dist are for. It may be good to add a note here explaining why one would want to use those other files, or a reference to docs explaining it.\n. This file pattern wasn't matching anything, because ngMidwayTester moved its directory from Source to src. However, even when karma wasn't picking up this file, all the tests still passed. Are the tests bad, or can this file just be omitted? \n. This was the same deal as noted above with karma not finding the file but all the tests passing anyway. I also don't know if angular-translate-interpolation-messageformat is a suitable replacement for angular-translate-interpolation-messageformat but I found it in bower_components and it seemed close enough haha. Do you have more insight on what to do here?\n. I gave this a version bump because I think this should be published to npm as soon as it is (hypothetically) merged, so that people can consume this package via npm again. Do you prefer to do version bumps in their own commit?\n. This didn't actually point to anything.\n. I assumed that this was the most reasonable default file to point people to. If people are using a build tool like browserify that would be reading this field, it seems safe to assume that they'll be capable (or even desirous) of handling minification themselves. Is there a different file to be listing as main? \n. This makes the module impossible to npm install as a consumer, as explained in more detail in the PR description.\n. No need for the ./node_modules/karma/bin prefix - npm automatically adds node_modules bins to the path before executing any of these commands.\n\npath\nIf you depend on modules that define executable scripts, like test suites, then those executables will be added to the PATH for executing the scripts. So, if your package.json has this:\n{ \"name\" : \"foo\"\n, \"dependencies\" : { \"bar\" : \"0.1.x\" }\n, \"scripts\": { \"start\" : \"bar ./test\" } }\n\nhttps://www.npmjs.org/doc/misc/npm-scripts.html\n. I got an error when trying to install via bower@~1.2.8, but bower@^1.3.9 worked just fine.\n. As noted above, this provides greater consistency and ease-of-use for contributors.\n. I'm not quite sure what you're saying, but there's no need to for grunt-cli to be installed globally. Using it in node_modules/.bin/grunt is safer.\n. No - browser is used by browserify if you want to specify a different file for use in the browser as opposed to on the server. In this case, we only have one form of the exported file, so main is fine. \n. Is this still needed? Doesn't bower universally use bower_components now?\n. For what it's worth, this matches a file or a directory at the root of this project. If you want to explicitly say only a directory (and I think being as explicit as possible is a good idea), then this should be /node_modules/ with a trailing slash.\n. It's a little odd in grunt to register a task with : in the name. Typically, : is used for delineating between a multitask targets. So if you have a multitask called build with targets foo, bar, and baz, then build:foo means \"run the build target foo\" and build means \"run all the build targets\". Making a task called build:foo violates the principle of least surprise, because it misleads one into thinking that there is a task named build with a target named all when there is not.\ntl;dr: I think this would be better as build-all.\n. If you want to ensure that these actions happen every time someone runs npm publish, they should be in the prepublish step.\nWhat does bower install && bower update do that bower install by itself does not?\n. Ah, yes, if you want the results of the release to be committed back to git, then this is more reasonable.\n. but then again, if you want the results of the release to be committed to git, then why is /dist/ in .gitignore?\n. ",
    "schickling": ":+1: \n. ",
    "jamesmorgan": ":+1: \n. ",
    "orizens": "hi.\nI'm trying to require angular translate, but am getting this error with browserify:\nError: Parsing file /home/my-project/node_modules/angular-translate/dist/angular-translate.js: Unexpected token (1873:0)\nplease assist.\nthanks.\n. UPDATE: the latest.\nI deleted the node_module directory and npm install it again.\nit works now.\nthanks.\n. ",
    "bsr203": "Thank you all for the quick response, and the positive tone. Angular translate work quite wonderfully for me, but my program is keep growing. This means, my default language file also growing. I do not have a problem writing a default language file, but the problem is\n- I need to load the whole default language file with the program. Splitting it across module is bit harder to maintain to see which keys are used by which module, and causes duplication. Also, if the user refreshes, unless I uses local store, it again has to be served.\n- I also can be assure about the default behavior. so, if the html rendered, it at least renders in the default locale.\nI like things simple, and not having too many ways to do the same thing. I would support the be  below as suggested by @DWand , though it would break the behavior\n1. User should provide a translation key with the translate attribute. Not sure how to enforce the same when used as element or filter (I never used them)\n2. Never modify the text() inside the element unless translation succeed.\n3. Missing translation should be logged for reporting and correction.\nBut, breaking the current behavior would not be  supported by most of the users, then I support having it configurable.\nthanks again for the feedbacks.\nbsr.\n. @tspaeth you have valid points. In my case, at least, I generate html through jade, hence one of the language I can support out of the box (by inserting at compile time - code generation). In my case it is safe to consider English as default language. Anyway, glad to see it is easier to support through a method, and doesn't affect overall functionality. Thanks again for you help. \n. @PascalPrecht sorry for bugging for this, but is there a way you can show me the code needed for this. I may patch locally for the time being. or can it be added to Canary branch. thanks a lot.\n. :-) you guys are great.. looked at the commits, but couldn't figure out how it is implemented (is it configurable? , or by default?). Can you please point me to how to use it and which branch is it. thanks again.\n. sorry, I read it wrong. That was my original qn, is it easy for you to show where it needs to be added in service. I would try patching till it is implemented by you guys.\n. Sorry, I didn't have time to look at it. Meanwhile, I am trying\nhttp://angular-gettext.rocketeer.be/, which has this feature and uses\nstandard po files.\nOn Wed, Jan 22, 2014 at 12:35 PM, Andreas Karlsson <notifications@github.com\n\nwrote:\n@bsr203 https://github.com/bsr203 any updates? Would love to see this\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/258#issuecomment-33046702\n.\n. \n",
    "akarl": "@bsr203 any updates? Would love to see this\n. @bsr203 Thank you! We are going to use this!\n. ",
    "sureshvsvb": "@PascalPrecht, @knalli  - I have the following scenario. I have locale file available but if keys are not available in that locale, i would like to use default/fallback language values. Does angular translate support this scenario ?\n. ",
    "red-0ne": "I think that providing the current direction for the current translation id is sufficient for the programmer.\nHaving the currently used language direction is useful for global styling purposes but not for a multi-language document. Suppose you are using ar language and your document is rtl and somewhere you have a translation_id that does not exist in arabic then you fall back to en but your document is always rtl directed. So the language direction should be available all across the template.\nIt would be great if both language and direction are available into the template. We could have filters for getting them.\nhtml\n<!-- empty string for currently used language -->\n<html lang=\"{{ '' | current_lang }}\">\n  <body dir=\"{{ '' | current_direction }}\">\n      <div\n        dir=\"{{ 'not_translated_id' | current_direction }}\"\n        lang=\"{{ 'not_translated_id | current_lang }}\"\n      >{{ 'not_translated_id' | translate }}</div>\n  </body>\n</html>\n. Of course. I just wanted to know if it is the way to go.\n. Pay attention to attributes that are manipulated by other directives? (already defined attributes)\n. how to deal with ... translate-attr-value=\"\" value=\"val\"..., ...translate-attr-value=\"\" value=\"{{var}}..., ...trnaslate-attr-value=\"\" directive-that-manipulates-value-attribute... ?\n. what about ...translate-attr=\"value\" value=\"ID\" ...? That way there would be no conflict\n. You are right, caring about other overrides is pointless\n. @PascalPrecht i am ok with you, It is wiser to deal with the issue once it arises.\n. For other directives that could change the value, we can observe the attribute for changes but these directives should be angular-translate aware.\n. Apparently there is no way to have a translate-attr-* directive without hacking angularjs $compile. So either we go with the translate-attr=\"value\" value=\"...\" way or translate translate-attr-value. For the second option, we have to code the behavior into the translate directive, like what is done with translate-value-*\n. There is no way to register a directive that is called for a \"wildcard/regex\" attribute. The only way to have translate-attr-x and translate-attr-y directive is to register each of them. Of course if you have an idea on how we can do it without registering each directive variant then I would be glad to know it.\n. Perfect. I'll make a pull request ASAP\n. The tests I wrote pass successfully. I branched as asked from canary\n. Most of the tests pass now. But the remaining ones are somehow problematic. When scope.translationId is an object (src/directive/translate.js#L111), it conflicts with $rootScope.translationId in the test suite ex: test/unit/directive/translate.spec.js#L68 due to scope: true of the directive. It is possible to rename one of the translationId so the tests pass but this is not a solution.\n. I made a major rewrite to the directive to avoid the above issue. By the way, I removed some watchers that were unnecessary (observers were enough)\n. @knalli, I think that it was introduced for performance reasons (it seems that it was an attempt to mimic the bind-once behaviour) but I don't think it ever fulfilled its objective. Maybe you should start using the angularjs bind-once?\n. Also, the PR #683 may cover this issue.\n. @tspaeth I understand your concerns\n. I remember this topic, this is where the idea emerged https://github.com/angular-translate/angular-translate/issues/169#issuecomment-24773028\n. If we pass an array to the translate service then it must be aware of it and of the fact that the promise resolution can be a mix of resolutions and rejections. So we cannot really have \"pure\" success and failure then() functions and must deal with an array of translations:\n```\n[\n  {\n    translation: string, // translation or translation_id\n    success: boolean\n  },\n  ...\n]\n```\nthat we have to loop into and apply applyTranslation\n. If we use $translate(translationIdsAsArray, scope.interpolateParams, translateInterpolation) we just use this loop src/service/translate.js#L731 to finally call $translate with a non-array value here src/service/translate.js#L728. I don't know if it is more efficient but the $translate in its array version does not behave as intended (the results object populated here src/service/translate.js#L724 should provide information about success or failure of the translation.\n. ",
    "lonormaly": "It would be great to enable such a support! \nThumbs up from Israel (Hebrew) :+1: \n. ",
    "poshest": "It would be great if these files could have the following attributes added, as they appear in the jQuery datepicker i18n files\ndayNamesMin: ['\u062d', '\u0646', '\u062b', '\u0631', '\u062e', '\u062c', '\u0633'],\nisRTL: true,\nshowMonthAfterYear: false,\nyearSuffix: ''\nCan't build as good a native datepicker as the jQuery one without these.  And by at least adding isRTL (or direction as in #604), a developer could easily add their own ng-class for RTL languages\n. ",
    "Chexpir": "@PascalPrecht What is happening with that directive that you commented on Dec 20, 2013? it sounds like the right approach to me. I am about to add it in myself in my project.\n. I think internally, angular-translate should contain whether each language is RTL or not. As angular-translate doesn't save all the world languages, it should be implemented in the structure we use to provide languages.\nI don't have angular-translate knowledge, so maybe I can help on the implementation, but I need clear guidelines on the design bit.\n. ",
    "innerpeace0": "How about taking the L20n approach and letting the localizer decide?\nA simple solution might be to use the css direction property. It can be applied to any element. \n. Other than your statement that this would require a meta change, I don't understand much of your reply @knalli, but I do think it would be quite simple to implement it by my idea of using something like TRANSLATION_ID._COMMENT_ or TRANSLATION_ID.SUB_ID._COMMENT_, etc. Authors can easily put them into their translation tables, but they won't put them into the actual app. For the most part, localizers won't need to translate them (except, perhaps, when the original language is something other than Engish), but will see them when they go to localize the strings.\nPerhaps your team could agree on some kind of convention so that there will be a consistency. The master plan that I see is being able to automate things so much that localizers will need to know no code in order to localize apps. \n. As I understand it, angular-translate wouldn't even have to skip the keys in the translation table with ._COMMENT_ if the author didn't put anything with that into the markup itself. They would just sit there in the translation tables and never be seen by the users. When automating the localizations, they would show up right under their parent keys.\nI like the ideas of going to an object and providing for comments within the object. I noticed that other users have a need for objects, not just strings. Is there a timetable for implementing this?\n. I agree that having a way to filter out the comments so that they don't get loaded where they are not needed is a good idea. That's one reason why I was hoping that you'd come up with some kind of standard convention for them. It sounds like this is already on the drawing boards for future enhancements. Add my vote to it. Thanks.\n. Along with this idea I was also thinking a localization website where localizers would find apps to localize. I'm new to git. I used ibiblio years ago, but they seem to be phasing out of open source and Google code is long gone. If I were to take the idea further, do you folks have access to the hosting capabilities? When you multiply the number of languages times the number of apps that might want this times the number of localizers in each language, then add all the users looking for and downloading localizations, the traffic could get quite huge.\nI'm thinking a MEAN stack would be best.\nI would like this thread to stay open and be tagged discussion and enhancement. After all, if we're looking at the end result of what developers internationalizing their apps with angular-translate will want, their apps will need to be localized. Right now, there's not much in place to facilitate that.\n. I'm thinking of a central place where authors of apps using AngularJS and angular-translate would list their apps and localizers in various locales could suggest translations and/or vote up or down previously suggested translations (similar to how answers are posted on stack overflow) without having to know any code.\nFor the most part, angular-translate, by itself, only has the i18n piece. My idea would tie in the l10n piece to make it easy for localizers to localize, without even having to even look at any code. \nI didn't see this in JHipster, but I may have missed it. \nBy having a central site for localization for apps using angular-translate, it would be easier to attract localizers in various locales. I could see students in various locales being assigned localization projects for their locales and being graded on them. The students would improve their skills at translation and everyone in their locale gets an app to use. \nThe potential for massive localization across the world is huge and what you already have with angular-translate is a great start. \n. Yes, it could be a huge project, and I also envision it being community driven. And, as you say, not easy. I also like your idea of being able to localize apps that use angular-gettext, and other libraries, too. If we really do it so the localizers see no code, whatever is under the hood should not matter. \nI don't have the expertise do so such a platform, but I see the need. Inner Peace has over 100 SPA's from the 1990's that are written in JS 1.1. In looking the ways to update them, being able to localize them easily and in many locales is the goal. \nWhen real estate developers build communities, even though they may build it in phases, they often start with a master plan. This helps everything tie together as the phases of community are built. I understand that you focus is your piece, and thank you for all your great work on it. As you update angular-translate, please keep in mind ways to easily tie it into something such as this.\nP.S. In looking at various libraries, from a localization viewpoint, I very much like the L20n concepts. I could see angular-translate being well suited for the i18n end of this. \nThank you for your great work.\n. Great. That's just what I wanted to hear. \nI must have misunderstood the docs. Perhaps a clarification might help others to not have similar misunderstandings.\nThanks.\n. How do you eat an elephant? I'm planning on doing mine at most, one sentence at a time. In some places, such as where I use some strings repeatedly, or where the sentences are long, I'm even breaking the sentences into smaller chunks. \nI forsee my code looking something like:\n```\n.  .\n.  .\n... (with translation id's being meaningful names rather than numbered)\n```\nThanks for posting the question. I'd like to hear from the experts if I'm on the right track before I go too far. \n. Duh!!! Of course complete sentences would be the smallest unit for something like terms and conditions, @knalli. A structure like <ADJECTIVE_ID> <SUBJECT_ID> <VERB_ID>.  would not work in many languages.\nWhat was I thinking? DRY. This is a good example of how developers need to put aside their DRY orientation when it comes to i18n. \nThanks for that clarification.\n. They way I envision it on my open source projects, I'd do the original in en-US, and volunteers in various locales would do the localizations. So, there would be a time lag, and not all translations would always be as current as the main version, particularly right after the release of an update.\nAnother advantage I like about angular-translate is where there isn't a translation for something, and the fallback language shows up, users can submit suggestions for translations of that key. That will also help keep the translations more current with the main version. \nYou folks have done a lot of things right. I am looking forward to using your app, now and as it evolves. Thank you for your great work so far.\n. No flicker in Pale Moon (Firefox derivitive) on an old old laptop running LxPup 15.05.\n. I will post there, but, even though it's a larger audience pool, I'm not sure it has a larger pool of people who know angular-translate. These kind of newbie questions could be classified as issue/defect/feature trackers for your docs and faq to help them become more complete.\n. I just signed up at stackoverflow.com and, as I suspected, the angular-translate pool is quite small. Of all the questions tagged angular-translate, about half have no answers at all and only 18 have been answered in the past month. While stackoverflow might be a place to ask newbie questions about angular-translate, I'm not sure that it will result in many useful answers, which is what I (and, I expect, other newbies) really want. Thanks. \n. ",
    "shahata": "The problem with making a resolution is that you have to do it each time angular minor version promotes (1.2.1, 1.2.2, 1.2.3, etc.). We are using angular-translate in multiple projects and all projects are built automatically in ci. What happens now is that every time the angular minor version is promoted, all of our automatic builds fail and we have to go over all those projects and push bower.json with the new resolution.\nAlso, I disagree that you should only promote the dependency if you have to. Every new angular project uses the latest stable version of angular and it doesn't make sense that everyone who tries to install angular-translate will get this warning and worry that maybe it is not safe to use angular-translate since it might break with angular 1.2. I know that this is not the case, but that's the first thought that came to my mind and I'm sure I'm not the first who thought that.\n. If it was up to me, I would update the bower.json dependency to angular#~1.2.0 and release it as angular-translate#1.2.0. Anyone who wants to use angular-translate that supports angular#1.0.8 will simply 'bower install angular-translate#1.1.1'. Obviously, any existing project will not get angular-translate#1.2.0 since they depend on angular-translate#~1.1.0.\n. ",
    "sarvesht": "Thanks, Looks like exactly what I needed..\n. ",
    "laurelnaiad": "Thanks @PascalPrecht -- does the promise it returns when you pass a language key to uses end up resolving to the language that is assigned?\nBasically I'm looking for some promise that I can rely on to know for sure that there are no pending loader actions.  I guess that if I only test when I'm actually changing languages, that uses will be ok for this purpose.\n. Looks good to me.  Thanks, @PascalPrecht!\n. ",
    "Nate-Wilkins": "So when we go to look up 'Hello World' in the initial translation objects (The ones that we setup with '$translateProvider') It won't find it because we aren't actually looking up 'Hello World' but '\\n    Hello World\\n'\nAdded a jsfiddle so you can see the JavaScript too\n. Not quite sure how to ping... @PascalPrecht or @knalli unless that's it - Still kinda new.\nI had some other remarks about the tool but don't think they really qualify as 'issues'\nA lot of times when I'm making my html whether it be templates or inline JavaScript I don't want to think about translations. I know English and English only although a few people may disagree with me and that's fine but I like to keep my html as close to the English translations as much as possible.\nAn example might be helpful:\n<div>This is my cool div element!</div>\nAnd in the JavaScript translations setup:\n$translateProvider.translations({\n    'This is my cool div element!': 'This is my cool div element!'\n});\nThat way when I'm writing my html I don't have to remember all these different IDs that map to different English translations. A different way of thinking but I think (in my opinion) that not caring to remember look up IDs is a plus.\nSo I tried to do this... And failed when I wanted to add data binding to the look up ID - I realize that this might be hard to include the data binding in the look up ID because the directives are being bound before they are executed....\n<div>This is my cool div element with {{ data }}!</div>\nAnd in the JavaScript translations setup:\n$translateProvider.translations({\n    'This is my cool div element with {{ data }}!': 'This is my cool div element with {{ data }}!'\n});\nI'm not sure if this is the direction you're willing to go - if it's worth restructuring the code to fit some of these use cases...\n. Sure thing @PascalPrecht. I'll send a PR after the holidays - been busy. \nWould translating before angular evaluates be a nice feature to have? I could also try to implement this if it's something people are going to want.\n. Would it be possible to change this behavior without interfering a lot with the base implementation?\n$interpolate(0)() indeed doesn't return '0' as a string but $interpolate('0')() does? Not sure what that means... I'll take a look at the source code eventually and maybe send a PR if you think it's worth implementing.\n. Gah I see... I can do this but again not sure if adding such a feature is good for maintainability in the long run?\nAny ideas?\n. I did not mean to merge that. My bad.\n. Sure thing love one liners! \n. Huh that's very strange I'm not entirely sure - it looks like it's always treated like a String so I'm not sure if it's a promise or where it handles that use case...\n. I'm going to look into this some more and verify the changes - still not convinced that translationId is a promise.\n. follow up: I cannot reproduce the problem before the fix... @knalli could you reproduce before the fix?\n. Right well kindof I would love to be able to do deffered.then(function () { /* do something */ }); but I'm finding that this then get's executed before the $translateProvider grabs the promise and asks for the  translations. So I end up with the translations but they're not injected into the $translateProvider yet...\nSo while I could execute 'x' amount of callbacks they're not very useful yet because I can't use $translate until it first receives the translations.\nI tried playing around with those events but I'm unable to get them working properly. Was there a specific design intention for having these events on $rootScope instead of using promises? (Or am I glazing over a feature :hamster:)\n. Bottom line is I want to call this\njs\nvar translation = $translate('My_cool_resource');\nBut only after the $translateProvider's loader has loaded them all.\n@tspaeth No I don't wish to modify the content I've received I just want to know when $translate is ready to call.\n. Right it's not. Well the returned promise is although it's returned to the $translateProvider that executes a then on it. But I want to executes a then after the $translateProvider does.\nI'll look into translate.use(...).then(fn) but I've tried accessing the $translateLoadingEnd event off $rootScope with no luck.\nIs $translate.use(...) specific to a particular language?\n. @knalli Tried using the translate.use(...).then(...) but I'm not getting anything back - creating a plunker to reproduce.\nEdit: Apparently I'm crazy because I got it to work in the plunker without the use of a promise. Sorry for all the trouble thanks!\n. :+1: This is rather important. Thanks for the demo the directive version of translate does not work however  the filter form does. I'm to guess that the filter 'watches' correctly while the directive needs that same functionality.\n. @knalli I forked and built canary (not sure if I did this right) looks to be worse? \nFork of fred's plunker\n@fredericsureau Could you verify?\n. Oops. It looks like theirs a bug when the model is set back to nothing it keeps the first character. Kindof odd.\n. Yea type in hello then remove it\n. Ah I see. Is there an existing issue for this or was this a side effect because of a change in canary?\n. > > Ah I see. Is there an existing issue for this or was this a side effect because of a change in canary?\n\nNo this behavior is also in stable.\n\nI meant like a github issue open to reference\n. The translate filter isn't recommended because of the performance impacts it has. Rather you should use the translate attribute instead.\nThis should work I've gotten it to work off the example of $translateProvider Here's the fork\n. js\ndirective 'test': {\n    restrict: 'EA',\n    replace: true,\n    template: '<div>Hello <span translate>World!</span></div>'\n}\nhtml\n<div no-translate>\n     <test></test>\n</div>\nExpected: (Display translation id or default language translation)\nhtml\n<div no-translate>\n    <div>Hello <span >World!</span></div>\n</div>\n. Was this recently fixed then? Or just moved to the 2.6.0 milestone?\n. @knalli So I think this bug is related but I'm not positive - In 2.5.0 if I put a interpolated value into the translate directive I end up getting the missing translation indicator duplicated within the resulting view.\n(When the interpolated value is removed - and modified)\nExample\n. I'm not sure about the directive service but I've decorated the translateDirective like so:\n``` js\nfunction ($delegate) {\n    var directive = $delegate[0];\nvar original = (function (old) {\n    return {\n        compile: old.compile\n    };\n}(directive));\n\n_.extend(directive, {\n    require: ['?^noTranslate'],\n    compile: function (tElem) {\n        var linkFn = original.compile.apply(this, arguments);\n\n        return function ($scope, element, attrs, controllers) {\n            if (controllers[0]) { return; }\n            return linkFn.apply(this, arguments);\n        };\n    }\n});\n\nreturn $delegate;\n\n}\n```\nThis is in regard to #707\nThis could probably be changed so I don't need a whole new directive but I don't have an access point if there's no controller - so maybe the interface on the controller would need things like translate, render? I'm not sure...\n. @knalli will this be merged when 2.6.0 releases? Or is this going to be merged to canary then to master?\n. @knalli man your fast - my bad \nThanks!\n. ",
    "xAlien95": "I mean adding a website \"to Home\" in iOS 7 as capable app allowing the user to download files on the client with a manifest attribute on the body tag, for example. Does .get() and .post() work if the phone is in airplane mode?\nThanks, this is the quickest reply I've ever seen eheh\n. @PascalPrecht Thank you so much! So I shouldn't take care of the Safari Client-Side Storage and Offline Applications Programming Guide. \"Well\", I was thinking to let users to download MySQL databases as a WebSQL ones, but if it isn't possible it'll let me save a lot of work :D\n. Thanks @knalli and @PascalPrecht I hope to test angular offline as soon as possible.\nThanks again! :)\n. ",
    "sja": "Hi! Something new here? I'd also like to know, why there is a direct Angular-Dependency.\n. ",
    "jonaswindey": "Based on the errormessage in the url I suppose it's the cookieStoreProvider?\n. My bad! Maybe add a small line of extra in the docs on http://pascalprecht.github.io/angular-translate/docs/en/#/guide/08_storages ? (after the block:\nAfter that make sure you've embeded it in your HTML document. Once it's embeded you can use $translateProvider method useCookieStorage() and angular-translate takes care of the rest.\nThanks!\n. ",
    "adityasaxena": "It is such a shame that the docs still don't contain anything about making ngCookies as a dependency. I just wasted/used (depending on how truly smart people look at it). Please add one line in the wiki and save others a bunch of time. Thanks!\n. ",
    "DenysVuika": "Spent lot of time before coming across this issue. Still no mentions for ngCookies within official documentation and samples. \n. ",
    "itmammoth": "I wasted a couple of hours...\nI hope the official document will be updated soon.\nThanks!\n. ",
    "Purus": "Spend lot of time today to figure this out.\nI have edited the Wiki page at https://github.com/angular-translate/angular-translate/wiki/Multi-Language\nPlease let me know if this is the correct thing to update.\n. Submitted a PR. Thanks.\n. ",
    "worldspawn": "I dont get why local storage has a dependency on the cookie storage. I didn't need angular-cookies and to use this lib, i now do for reasons that are quite unclear.\n. Ahh OK. Makes sense\n. ",
    "ibes": "His issue is not fixed in the docs:\nhttps://github.com/PascalPrecht/angular-translate/blob/master/docs/content/guide/en/10_asynchronous-loading.ngdoc#L241\nOh - it has - but not in master - so the live documentation is a month behind canary?!\nMay checkout canary or some other more up to date branch for you documentation or split branches?\nWhy hold back improvements in the documentation?\n. @PascalPrecht  Very nice to hear this. \nSo I won't start to implement angular-translate before next week an re-read the docs!\n. Yes. To avoid misunderstanding: use it in our product. \n. ",
    "joscha": "brilliant, thanks!\n. ",
    "xmlking": "Very good analysis @DWand .  I truly appreciate your time and effort.\nI tried defining angular-translate as dependency for growl but no luck. \nOut of four combinations, it is only failing when using PartialLoader and growl's  $http response interceptor,  so I am suspecting something wrong with this interceptor combination. \nRecently I am hearing  some problems in the forums about PartialLoader.  Not sure if it is messing with  $http response interceptors. \nUnfortunately I have to use both  PartialLoader and growl's  $http response interceptor. I will keep debugging... \n. Yep. I am following your recommendation as workaround.  \nI am not sure the right way to inject an already initialized 3rd party Provider into another 3rd party Provider's function.  \nI modified my local copy of code at  https://github.com/marcorinck/angular-growl/blob/master/src/growlFactory.js#L89-L95 with: \njavascript\n    function ($rootScope, $filter) {\n      var translate;\n      try {\n          var injector = angular.injector(['pascalprecht.translate']);\n          translate = injector.get('$translate');\n          //translate = $filter('translate');\n      } catch (e) {\n      }\n      function broadcastMessage(message) {\n        if (translate) {\n            console.log(translate);\n            message.text = translate(message.text);\n            console.log(message.text);\n        }\n        $rootScope.$broadcast('growlMessage', message);\n      }\nThis is not helping either. I guess, I am getting a new translate provider in growlFactory.js which is not the same one as initialized in my module. \n. Don't know how to fix the Circular dependency  problem between  two 3rd party modules in angular. \nIt is still a bug. May be I have to work with growl developer to resolve this. \nYou can close this as this problem related  to growl module , as they know it depends on translations module and it is growl's responsibility to avoid Circular dependency.\n@DWand thank you very much for finding the problem. \n. ",
    "AdamQuadmon": "@PascalPrecht I removed the $template function name, can sill be useful to have $templateProvider one?\n. mmm, I love IE!\nthat mean is not possible to use function names in a script like yours.\nToo bad, cause I like to have autocompletion (or at least no warning about not found class/methods) on my code (and also better error reporting in general).\n@knalli , May I ask you something else?\nIf I'm not wrong this shouldn't be an issue with this kind of named functions:\nangular.module('myModule', [])\n    .service('MyService',\n        function MyService(){\n    });\nas my understanding the issue is only related to this kind of assignment:\nvar $myService = function $myService(){}\nis that right?\nThank's for clarifications, forgive my ignorance!\n. ",
    "max-l": "That's what I thought (only after creating the issue though ;-))\nmessageFormat defines plurality rules such as : \n\nMessageFormat.locale.en = function ( n ) {\n  if ( n === 1 ) {\n    return \"one\";\n  }\n  return \"other\";\n};\n\nif I change it to \n\nMessageFormat.locale.en = function ( n ) {\n  if ( n === 0 ) {\n    return \"zero\";\n  }\n  if ( n === 1 ) {\n    return \"one\";\n  }\n  return \"other\";\n};\n\nI ge the behavior I want, but then I lose the generality of the rule.\nI guess the \"empty / zero\" case should be treated outside messageFormat or ng-translate,\nanyhow, I'll close the issue.\n. ",
    "dvberkel": "@PascalPrecht No problem, I will sort it out immediately.\n. ",
    "asm89": "@knalli I see your commit, but isn't the whole problem that it gets called with undefined?\n. @PascalPrecht @knalli Any news here? Any way we can help?\nWe also noticed the empty object, that still yields true in js, maybe that's the error?\n. ping @PascalPrecht \n. ",
    "donets": "This issue still happens\n. ",
    "arnaudpourbaix": "I have the same issue and it isn't really solved.\nI have a multi-module application. translate is using partialLoader with preferredLanguage and local storage. All this is located in config block of main module.\njavascript\n            $translateProvider.useLoader('$translatePartialLoader', {\n                urlTemplate : 'src/{part}/locales/messages-{lang}.json'\n            });\n            $translateProvider.preferredLanguage('en');\n            //$translateProvider.fallbackLanguage('en');\n            $translateProvider.useLocalStorage();\nIn all other modules, I have set translation in run:\njavascript\nmodule.run([ '$translate', '$translatePartialLoader', function run($translate, $translatePartialLoader) {\n        $translatePartialLoader.addPart('app/spell');\n        $translate.refresh();\n    } ]);\nI didn't choose controllers because I have many controllers per module and I supposed it would make more sense to put it on the module run configuration.\nIn one controller, I have this code:\njavascript\nconsole.log('proposedLanguage', $translate.proposedLanguage(), translate('SPELL.NAME_FIELD'));\n$scope.$on('$translateChangeSuccess', function() {\n    console.log('proposedLanguage after event', $translate.proposedLanguage(), $translate('SPELL.NAME_FIELD'));\n});\nLanguage is undefined and obviously, no translation is made. And event is not catched either. I can get this event by putting this block on of my main module run function, listening on rootScope.\nNow, if I add a fallbackLanguage, this one is used properly and I get my translation while proposedLanguage  is still undefined.\nStrange because my fallback language has the same keys. And I can confirm that any other translations are correctly using the local storage one.\nThis does mean that fallback language work when main language is not loaded yet. But if it works, this means main language could work too or I missed something.\nAll in all, I don't see how to properly correct things. I can't assign all my $translate in an event result, it's quite ugly. I am using a lot of $translate everywhere, especially to build components like grids (headers).\nOne possible hack would be to get local storage language and assign it as a fallback language. Ugly, but at least, it is contained in a small part of my application unitl I find a better solution.\n. Here is the plunker: http://plnkr.co/edit/jjMcRtyTt1l6MrNaTMQX?p=preview\nIn app.js, i have commented fallbackLanguage. If you click on mods, no translations are done.\nThen, if you change language, it works partially (english doesn't work for some reasons).\nActivate fallbackLanguage and it will work better.\n. @DWand, I'm impressed by your reactivity ! :) I removed refresh in both project and plunker and this doesn't solve the problem. But I agree it was not necessary to have them. \n. @DWand, thank you for clarification ! I will study more carrefully config module. I didn't know you could put different functions. In fact, I'm having hard times with angular and all related libraries. By the way, your plunker works great !\n. ",
    "LennyLip": "Same issue \nhttp://plnkr.co/edit/09VDgXTFOHGQIZ3qn282?p=preview\nwhy this code does not work as expected?! \n. +1 \nGot\n\"Could not translate angular Please check your Angular-Translate $translateProvider configuration\"\nsometimes for first time after reset browser cache\n. ",
    "rogercoder": "@tspaeth \nI did your trick of adding:\n$translateProvider.use('en');\nto the app config section. It makes LennyLip's plunkr work, and it made my app work ... but only if I didn't also have:\n$translateProvider.fallbackLanguage('en');\nin the config section. Setting the fallbackLanguage led to the problem coming back: the translation part I attempted to add in the controller was not working.\nOddly enough, in the plunkr it still works even with the fallbackLanguage() call.\nI see this issue is closed ... is that because it will be fixed in the next release? It would be nice if the guide (which is very well done, by the way) included a warning about using the partialLoader's addPart() method in a controller ... I just wasted half my afternoon!\n. ",
    "doppio": "+1. I just spend 3 hours trying to figure out why my app wouldn't work either like any of the examples I could find online. @rogercoder, thank you for your comment. I removed my fallback language and my JSON started getting loaded.\nAlso, why do we need to call $translateProvider.use() if we have a preferred language set? Shouldn't this be the language used if no other language is specified? This seems like it should be a very high-priority bug.\n. ",
    "shiruken1": "I've just spent a day at this, and although I wish the prior posts would've helped, I'm still stuck. I would appreciate any advice.\nMy config:\n```\n    angular.module('app.config').config(function($translateProvider) {\n    $translateProvider.useSanitizeValueStrategy('escapeParameters');\n\n    $translateProvider.useLoader('$translatePartialLoader', {\n      urlTemplate: '/lang/{lang}/{part}.json',\n    });\n\n    $translateProvider.use('en');\n    $translateProvider.preferredLanguage('en');\n\n    $translateProvider.fallbackLanguage('en');\n});\n\n```\nAfter my routes config:\n```\n    angular.module('app.routes').run(function ($rootScope, $translate, $translatePartialLoader) {\n    $rootScope.$on('$stateChangeStart', function(event, toState, toParams, fromState, fromParams){\n\n        var app = toState.name.indexOf('.');\n        if(app !== -1) {\n\n            var part = toState.name.slice(app+1, toState.length);\n            $translatePartialLoader.addPart(part);\n\n            var from = fromState.name.indexOf('.');\n            if(from !== -1) {\n\n                var old_part = toState.name.slice(app+1, toState.length);\n                $translatePartialLoader.deletePart(old_part, true);\n            }\n        }\n\n    });\n\n    // refreshes the view, having loaded the translation tables\n    //@TODO: FOUC issue\n    // $rootScope.$on('$translateChangeSuccess', function () {\n    $rootScope.$on('$translatePartialLoaderStructureChanged', function () {\n        $translate.refresh();\n    });\n\n});\n\n```\nThe translation filter works. Passing it as an attribute works. Interpolation works.\n...yet I can't use the service at all:\n```\n            $translate('TEST').then(function(out) {\n                $log.info('out: '+out);\n                vm.test = out;\n            });\n            $scope.$on('$translateChangeSuccess', function() {\n            $log.info('out: '+out);\n        vm.test = $translate('TEST');\n        });\n\n```\nNeither one of these give me anything. Please help!\n. @tspaeth Whoops! Thanks for that.\n\"Now I'm getting: $translateProvider.useSanitizeValueStrategy is not a function\" :disappointed:\n. That's what I get for copy-pasting... Alright, all set.\nJust kidding, now it gives me an unintelligible error. :sob:\n. @tspaeth Thanks for that! Alrighty, the Plunker's finally ready.\nThanks for your help, and thanks in advance for any tips/advice!\n. @tspaeth You got it working!\nBesides my typos and the obvious lack of \"var vm = this;\" what did you change?\n. Although it seems to go away after a few back-and-forth clicks between Page1 and Page2\n. Wow... holy typos, batman. I need to try reading this out loud 3 times fast:\n$translatePartialLoaderStructureChanged\nLOL.\nAlright, well, once again. thank you for your help, @tspaeth. My plunker's working, so now I'll go see what's different about my app.\nCheers!\n. BTW, for anyone interested in figuring out this bug: it still, nonetheless, craps out after a few back-and-forth clicks. I'll go out on a limb and say it has something to do with the $translatePartialLoader.deletePart() and $translatePartialLoader.addPart()\n. ",
    "pdwinkel": "The hack does not come with error handling ;-) \nSure, lang should be checked. \nYes, all the logging is in English, that way the support guys (and developers) know what is going on. Even when the user selected Arabic as language. \nThe confirm dialog is created with a messageId and optionally with messageValues, the translate directive will use these in order to show the message to the user (e.g. in Arabic). The id and values are also used to log the fact that the user has accepted or dismissed the confirm dialog (in English).\n. ",
    "utkant": "I have a case where you might have an editor where you want to show one language(a wysiwyg) and where the app around the editor is in another language. That would not be possible using only translate. It could probably be resolved if you could clone the translate modules to different names and specify a language for each module? \nthat way you could possibly use something like clone translate -> translate-editor and use translate-editor as your directive name with one config and language and translate as the other directive name?\n. I have a case where I would like the possibility to tell the translate tag which language to use.\nLike so:\n<p translate=\"keyHere\" translate-language=\"ScopeVariableHere/LanguageKeyHere\">\nHope this will be taken into consideration when creating this.\nIt would also be cool if we could set the default language for parts of the page like so:\n<div translate-default-language=\"ScopeVariableHere/LanguageKeyHere\">\nAll html elements inside this element will use the translate-default-language language...\n</div>\n. ",
    "tbandixen": ":+1: for multiple languages on one template.\nI have to present a preview, not in the user's language, but in the report language...\n. ",
    "scriby": "+1\n. ",
    "eekboom": "So, is this ready for production then?\nI am missing this feature because in 1.x it was easy to check the result of $translate() and decide whether to use the default - now it's more complicated due to asynchronous api.\n. Yes, please. Thorsten mentioned in the comments on the original pull request #445, that this breaks the current behaviour.\nIMHO the opposite is true: It fixes the broken behaviour of angular-translate 2.0.\nWe (dev) defined placeholders for all our input fields.\nThe translator decided to leave most of them empty (because most often there is also a label and nothing meaningful to add to that).\nSo after upgrading to angular-translate 2.0 almost all our forms now show raw translation ids in the input fields.\n. So: Is this translate-default working now (in 2.1.0)?\nIs it documented somewhere? I'd really like to use this feature, but there's a lot of discussions, proposals, the issues are fixed, but I can't get it to work :-(\n. Ok, after some more experiments:\nThe \"translate-default\" does not work, if there's a fallback language registered at the translation provider.\nTo me this feels like a bug, if the key is found neither in the preferred nor in the fallback language, then the default value should be used. Instead I get the raw translation key.\n. Why did you close this? I still have this problem even in 2.8.1.\nAs soon as I remove the call to \"fallbackLanguage()\" it works correctly.\n. ",
    "ceoaliongroo": "@PascalPrecht \nOk, something like this works:\nIn the JSON \n``` javascript\nSTATUSBAR: '' +\n      '' +\n      '' +\n      ' {{ item1 }} ' +\n      ' ' +\n      '({{ item2 }} % {{ item3 }})' +\n      '' +\n      ''\n```\nIn the directive:\n$translate('STATUSBAR', {\n      item1: $translate('OF'),\n      item2: $translate('ITEMS'),\n      item3: $translate('COMPLETE')\n    })\nStill have the issue of change RTL language. (It's like i need 2 templates for the position of the variables interpolated.)\nDo you offer a solution different to don't move the template to the table of translation?   \nthanks\n. Great, thanks! \n. ",
    "elgerlambert": "Hi guys,\nThanks for your fast replies and the discussion!\nI read about the option to specify an array of fallback languages. A nice addition, but like you I concluded this unfortunately doesn't solve my use case, since our 'base' translation tables are identical to each other in terms of translation string id's (they are both complete translation tables).\nYou're right in the sense that I would like to tell angular-translate which fallback-language should be active (or at least tried first).\nThere might be an opportunity to solve this problem/use case transparently.. whereby $translate.uses('locale') checks to see if the language has specified a region (i.e. 'language_region') and checks whether the 'language' is one of the available fallback languages..?\nUsing a partial loader seems rather complex for what I'm trying to achieve. I'm still trying to wrap my head around it, but I'll dig into your plunker further to see if it might be a viable option for the short-term.\nKind regards\n. Hi @tspaeth,\nThe documentation states that $translate.fallbackLanguage() only returns the current fallback language; it's a getter only, not a setter.\nWould be great if the documentation is incorrect and this is infact already possible! :)\n(I'll have to double check, but unfortunately I don't think that's the case)\n. @tspaeth I just tested $translate.fallbackLanguage('language') using 1.1.1 and this has no effect. I can find the lines of code you reference in 1.1.1 @ L111-L120, but it doesn't seem to work when used through the $translate service (as opposed to the $translateProvider, which does work).\n. Thanks guys for picking this up! Good luck working towards 2.0 release!\nKind regards\n. Hi guys,\nThe reason why my initial post didn't include 'nl' in the original fallback stack is because (although I was aware of the ability to do so) we weren't using a fallback stack. We weren't using one because it didn't/doesn't solve any of our needs.\nThe way I see it, the fallback stack provides further fallback for a fallback (allowing for incremental roll-out of a new language for example). Whereas what I need (framing my original issue) can be explained as better support for \"region\" fallback (given that: locale = language_region).\nAs I said, we're in the process of supporting a second language, so at this moment I don't have a strong opinion on whether I need to specify $translateProvider.fallbackLanguage(['en','nl']) during config and telling which to use during runtime or whether I need to change the whole fallback-stack during run time.\nThe way I see it I don't have a direct need to change the fallback-stack during runtime, I just want the ability to tell which one should be used.. Both of my fallback languages are equal; one fallback language will(/should) never depend on the other in order to provide a complete translation table.\nLike I said before, I see an opportunity to provide better region fallback transparently, whereby $translate.uses('language_region') automatically checks for the presents of an '_' indicating a region has been specified, if so it tries to set/load the 'language' as fallback language.\nReading @tspaeth last comment however it seems his use case is different then mine..\n. ",
    "h-evers": "I agree to the argumentation, i wondered about it myself... As long as the proposed\n$translateProvider.translations('de', {});\nworks the effort should be neglectable for us. Naturally there will be a perfect documentation - as always with ng-translate ;-)\n. ",
    "gerbsen": "This change is not reflected in the documentation: http://angular-translate.github.io/angular-translate/docs/en/#/guide/07_multi-language I always got the error message \"translate has no method uses\"!\n. ",
    "Shakeandbake": "I just realized that setPart is not even available to the $translatePartialLoader  :(\nWhat part would I add these dynamic translations to? They are not available in a static json file on the server, but were returned in a data call. I was hoping I could just continue to append to an existing part.\n. this is a terrible plunk but http://plnkr.co/edit/3kc8ZEZHitfpJcjWElS0\nThe idea being that the fetch data would return some translations aswell as invoke the usage of those translations. \n. I modified the existing partial loader to perform my requirements by copying the code from both the provider and the translate flatObject method and adding the following to the translatePartialLoader service: \njavascript\n var flatObject = function (data, path, result, prevKey) {\n          var key, keyWithPath, val;\n          if (!path) {\n            path = [];\n          }\n          if (!result) {\n            result = {};\n          }\n          for (key in data) {\n            if (!data.hasOwnProperty(key))\n              continue;\n            val = data[key];\n            if (angular.isObject(val)) {\n              flatObject(val, path.concat(key), result, key);\n            } else {\n              keyWithPath = path.length ? '' + path.join(NESTED_OBJECT_DELIMITER) + NESTED_OBJECT_DELIMITER + key : key;\n              if (path.length && key === prevKey) {\n                keyWithShortPath = '' + path.join(NESTED_OBJECT_DELIMITER);\n                result[keyWithShortPath] = '@:' + keyWithPath;\n              }\n              result[keyWithPath] = val;\n            }\n          }\n          return result;\n        };\n        service.setPart = function (lang, part, table){\n          if (!isStringValid(lang)) {\n            throw new TypeError('Invalid type of a first argument, a non-empty string expected.');\n          }\n          if (!isStringValid(part)) {\n            throw new TypeError('Invalid type of a second argument, a non-empty string expected.');\n          }\n          if (typeof table !== 'object' || table === null) {\n            throw new TypeError('Invalid type of a third argument, an object expected.');\n          }\n          if (!hasPart(part)) {\n            parts[part] = new Part(part);\n            parts[part].isActive = false;\n          }\n          if (!angular.isObject(parts[part].tables[lang])) {\n            parts[part].tables[lang] = {};\n          }\n          angular.extend(parts[part].tables[lang], flatObject(table));\n          $rootScope.$emit('$translatePartialLoaderStructureChanged', part);\n          return service;\n        };\nIn my case, I initialized a part 'g' for all languages to an empty object (to prevent the loader from trying to fetch from static files) and then added this part to all pages. Pages that receive dynamic translations from the server then can set them into the part and refresh translations to use. \nPerhaps ideally a more simple method could be added that takes a collection of keys in all languages so that translatePartialLoaderStructureChanged only needs to be broadcast a single time.\n. ",
    "AnalogJ": "Hey @PascalPrecht , I did a check with StaticFilesLoader + preloading, and everything seems to work for me. \n. ",
    "JohnPhoto": "This is not updated in the documentation. Took me a while and source-surfing to find out.\n. Ah! Sorry my bad, seems I was looking at old docs:\nhttp://pascalprecht.github.io/angular-translate/docs/en/#/guide\n. ",
    "rorymadden": "Thanks for the quick reply. This works now. \n. ",
    "mchambaud": "@knalli I would very much like to be able to use angular-translate plugins with browserify. Currently only the main module will work out-of-the-box.\n@NickHeiner I would love to see your implementation, do you have it on a public repository? \n. @knalli I'd rather use NPM all the way. Why not create an NPM package for each angular-translate module, each package can then have it's own package.json with main script. \nAt the moment I'm referencing the ./node_modules/.../angular-translate...js in package.json browser field which is not very scalable but works.\n. You currently have the following repositories:\n- angular-translate\n- bower-angular-translate\n- bower-angular-translate-storage-cookie\n- bower-angular-translate-loader-url\n- bower-angular-translate-loader-static-files\n- bower-angular-translate-loader-partial\n- bower-angular-translate-interpolation-message-format\n- bower-angular-translate-storage-local\nThis means you can easily install individual plugins using Bower but you cannot using NPM. You could change the repositories to:\n- angular-translate\n- angular-translate-storage-cookie\n- angular-translate-loader-url\n- angular-translate-loader-static-files\n- angular-translate-loader-partial\n- angular-translate-interpolation-message-format\n- angular-translate-storage-local\nAnd have a bower.json as well as a package.json files in each repositories. Packages would then be individually installable via Bower or NPM, which means people would be free to use which ever technology they want, including Browserify.\nAlso, the current NPM repository should probably not contain everything.\n. You could also add one package.json per plugins in the main repository to make them installable via npm\n. Pull-Requests:\n- angular-translate-storage-local\n- angular-translate-storage-cookie\n- angular-translate-loader-url\n- angular-translate-interpolation-messageformat\n- angular-translate-loader-partial\n- angular-translate-loader-static-files\n- angular-translate-handler-log\nNPMJS:\n- angular-translate-storage-local\n- angular-translate-storage-cookie\n- angular-translate-loader-url\n- angular-translate-interpolation-messageformat\n- angular-translate-loader-partial\n- angular-translate-loader-static-files\n- angular-translate-handler-log\n@NickHeiner \n. Using this with browserify means the user will\nnpm install angular-translate-storage-local --save\nand in his code \nrequire('angular-translate-storage-local');\nBrowserify will know which javascript file to include from package.json \"main\" field.\n. It would be even better if each modules exported it's name! But it would mean injecting each module into the app definition.\n. The way it is setup right now we need to install angular-translate as well as every angular translate modules required.\nIMO, this is ok. angular-cookies does not ship with angular so why would angular-translate-storage-local ship with angular-translate? Or angular for that matter.\nIt would also be a good idea to have different angular modules for each modules. \nangular.module('app', [\n    'angular-translate',\n    'angular-translate-storage-local',\n    'angular-translate-storage-cookie',\n    'angular-translate-handler-log'\n]);\nUsing browserify, it would be something like this:\nangular.module('app', [\n    require('angular-translate'),\n    require('angular-translate-storage-local'),\n    require('angular-translate-storage-cookie'),\n    require('angular-translate-handler-log')\n]);\n. @knalli There is no reason to install an optional angular-translate module unless you're already using angular-translate. Besides, package.json could/should have a dependencies for angular-translate. \n@DWand @knalli nothing stops us from having an index file which loads all other angular-translate modules. Modularization, if done right, allows for everybody to be happy =) \n. @knalli I will update the package.json to have angular-translate as a dependency.\nUpdated angular-translate-storage-local\nHow about this?\n. @knalli added you on all npmjs\n. I can't add you on this package, I have contacted NPM's support. There seem to be an issue on their end.\n. You should have access to the last one now.\n. I have translations which do not work anymore in 2.6.0\nWorks\n{{ 'hello.world' | translate }}\n<span translate=\"{{'hello'}}.world\"></span>\nDoes not work\n<span translate>{{'hello'}}.world</span>\nExample\nPlunker\n. Sure does, but why is the following broken in 2.6?\n<span translate>{{'hello'}}.world</span>\n. Hey @knalli, I need this feature done quickly. I could do it and send you a PR but it would be a breaking change prior to V3. \nWill you approve it, or should I just go custom for now?\n. $translateProvider.useSuperCookieStorage()?\n. #1441 \nNot very elegant but does the job for now.\n. I just realized angular uses $cookies in the background if it's available. We can set cookie options using defaults.\n. \ud83d\udc4d . I see 2.8.0 only for angular-translate repository. All other modules are still 2.7.2 event on the website, I've included links to help.\n. Seems like I still have access to the repositories! I will update them for you.\n. I've updated them all. \n. ",
    "SweVictor": "Oh, I see. We thought the parts were kept separate, obviously a misunderstanding then. Also read #316 but that is not really related to this as I see it.\nGiven that they all add to a large translations table - what happens when the key is the same in multiple parts? The last one loaded is retained? What happens if I switch back to the first part? And to get around that we would have to prefix all keys with the relevant part - after that we could use say \"common.addButton\" and \"dashboard.addButton\"?\nOptimally, we would like to use something like the code sample in the first post - when in part \"dashboard\" we can use {{addButton | translate}} to get the dashboard.addButton translation, {{addButton | translate, common}} or similair to get the common.addButton translation. Given that the prefixing works as discussed in the above paragraph, it will probably work - this and the first code sample is more to elaborate on the use case.\n/Victor\n. Hi again,\nThanks for the clarifications and the extremely quick and helpful replies!\nWe will probably go the namespace route, but maybe extend the loader to add\nthe prefix client-side based on an optional argument.\nThanks again!\n/Victor\nOn Feb 7, 2014 5:27 PM, \"Max Prichinenko\" notifications@github.com wrote:\n\nIf there are same keys - the last one will win. Just be careful, because\nwe don't handle a sequence in which parts were added. It also doesn't\nmatter which one is loaded first or last - we merge the parts after each of\nthem is successfully loaded. It relies on a default js implementation of\nwalking through the properties of an object.\nYou can delete a part. In this case the deleted part will not be merged to\nthe resulting translation table. The loader will return a translation table\nwithout any key from this particular part next time it is called.\nIf translations have different namespaces - they are different. Not matter\nin which part they are situated. Default rules of using namespaces are\napplied. So, yes, you'll be able to use \"common.addButton\" and\n\"dashboard.addButton\", because \"addButton\" keys will not be in conflict due\nto the different namespaces.\nThere are no API in angular-translate now to use a code like {{addButton\n| translate, common}} for prefixing, but you can use {{'common.addButton'\n| translate}} instead.\n\nReply to this email directly or view it on GitHubhttps://github.com/PascalPrecht/angular-translate/issues/341#issuecomment-34461910\n.\n. \n",
    "tkrotoff": "@PascalPrecht It's cumbersome to write each time:\nHTML\n<p>{{'HELLO' | translate}}</p>\n<p translate>HELLO</p>\ninstead of simply:\nHTML\n<p>{{'HELLO' | tr}}</p>\n<p tr>HELLO</p>\nThis is why all other translation systems (Qt, Rails, Gettext...) use a short syntax.\n. >  if angular-gettext also uses this syntax we have to namespace everything\nangular-gettext already uses the same existing syntax: translate for the directive and the filter, moving to the same short syntax does not change anything here about name clash.\n\nthis would introduce a big breaking change\n\nOf course, however providing a script that changes all translate to tr (or i18n,...) is easy.\nMaybe both the long and short syntaxes can live together (this is complex to achieve).\n. ",
    "fantomas": "@tkrotoff I had the same issue. Therefore I added:\nangular.module('app.filters', []).filter('t', // custom name for translate filter.\n    [ '$filter', function($filter) {\n      var translateFilter = $filter('translate');\n      return function($parse, $translate) {\n        return translateFilter($parse, $translate);\n      }\n    } ]);\nThat way I can use in my views:\n<h1 class=\"page-header\">{{ 'Statistics' | t }}</h1>\nThis is just a patch and would be nice to have it somehow as a config the name of the filter. I agree with @PascalPrecht on his objectives, but I think that for the most cases when there will be no conflicts, the shorter version is more appreciated.\n. ",
    "marcalj": "Maybe will be safe to wait for v2.0, do you have some plans or approximate schedule? (like in 1 month or 2 weeks, maximum 3 months, etc)\nIf you think will take some time will be safe to get rid of it and I will try to create a plunk to replicate the bug.\nThanks for your help!\n. Wow excellent! I will wait without any doubt! :P\nShit, I'm a fucking early adopter! :)\n. @PascalPrecht Hey, I'm using 2.0.1 and static loader is requesting 3 times my en.js file! (I have 3 languages configured). :(\n. Wow I got it!! Proof of concept code:\n``` js\nangular.module('app')\n    .provider('iidatabase', function () {\n        // Class definition\n        function iidatabase (objectStore, query, timeout) {\n            this.objectStore = objectStore;\n            this.query = query;\n            this._timeout = timeout;\n        }\n    iidatabase.prototype.value = function () {\n        var self = this;\n        var object = {time: Date.now()};\n\n        self._object = object;\n\n        self.refresh();\n\n        return self._object;\n    };\n\n    iidatabase.prototype.refresh = function () {\n        var self = this;\n\n        this._timeout(function () {\n            self._object.time = Date.now();\n\n            self.refresh();\n        }, 1000);\n    };\n\n    // Method for instantiating\n    this.$get = function (dbjs, $timeout, $rootScope) {\n        return function (objectStore, query) {\n            var a = new iidatabase(objectStore, query, $timeout);\n\n            return a.value();\n        };\n    };\n});\n\n```\nSo now in a controller you can have this:\njs\nfunction myCtrl ($scope, iidatabase) {\n    $scope.timer = iidatabase('miau', function (server) {\n            return server.country.get(3)\n        });\n}\nAnd your $scope.timer will have an updated timestamp updated every second!!\nThe point is, to include in $translate we will have to add one $rootScope.$on watcher, but I don't know if you want to get rid of watchers for performance reasons.\nWhat do you think?\n. Yes!! I saw yesterday the comment from Misko in stackoverflow. Great improvement!\nI'll ping you when I finish my work with IndexedDB, will be more easy now. My problem is with unit testing, I didn't use it seriously... it's time to work on it.\nSorry for the off-topic! I'm looking forward for v2.0! ;)\n. For this cases I use a manual bind with instant translate's function or {{ 'NAMESPACE.' + option |\u00a0translate }}. I think it's more performant than your gist. Maybe worth create an jsperf :)\n. Any update? :)\n. Any update? :)\n. I'm really interested on this feature.\n@knalli we need to translate the params too. For example\nTranslation key: \"NUMBER_OF\": \"You have {{type}} on this {{object}}.\"\n\"type\" and \"object\" are also strings that need to be translated.\nFor example: You have comments on this post.\nFor example: You have pictures on this pin.\nWe could follow the link notation on translation definitions and for example use:\n{{ 'NUMBER_OF' || translate:'{type: \"@:TYPE1\", object: \"@:OBJECT3\"}' }}\nTYPE1 and OBJECT3 should be real translation keys.\nI'm migrating one big project from Backbone to AngularJS and this would be super helpful to us.\nThanks!\n. You think the params are not generic, and I want to use a dynamic key, so I think your example don't solve our petitions.\nIn your last plnkr I need something like this:\nORIGINAL\n\"TEXT_KEY_WITH_PARAMS2\": \"This is also text with param '{{'HEADLINE' | translate}}'!\"\nBAD PROPOSAL\n\"TEXT_KEY_WITH_PARAMS2\": \"This is also text with param '{{ {{ANOTHER_PARAM}} | translate}}'!\"\nYou get the idea? I don't like this solution, to set how you define params, doesn't have flexibility. I think it's better if we can define if each parameter is a translation key or not.\nSo for example I can use (in your example):\nWITH TRANSLATION KEY: This is also text with param 'Hello there!'!\n<p translate=\"TEXT_KEY_WITH_PARAMS2\" translate-value-param=\"@:HEADLINE\"></p>\nWITHOUT: This is also text with param 'manual text'!\n<p translate=\"TEXT_KEY_WITH_PARAMS2\" translate-value-param=\"'manual text'\"></p>\nWITHOUT: This is also text with param 'variable text'!\n<p ng-init=\"DemoB2='variable text'\" translate=\"TEXT_KEY_WITH_PARAMS2\" translate-value-param=\"DemoB2\"></p>\n. Thanks, for sure it's not easy, but is very powerful! :)\nYour proposal: <p translate=\"KEY\" translate-value-param=\"{{'V' | translate}}\"></p> have to work using a filter completely too, because I often get the translation key programatically, for example {{ 'GROUP1_' + fooVar |\u00a0translate }}, so this have to work too, maybe:\n{{ 'GROUP1_' + fooVar |\u00a0translate:'{param1: \\'@:INSIDE_GROUP_\\' + fooVar2 }' }}.\nLet me figure out what it's more useful or if it's worth the effort to implement this or not according to community acceptance.\n. Hey, I figure it out that this is working: \"TEST1\": \"Hola {{ pepito | translate }}.\",. I think is enough for my project right now. Let's see what community thinks.\n@bielmenezes is ok for you?\n. This should be in the documentation by the way :)\n. \"NUMBER_OF\": \"You have {{ type | translate }} on this {{ object | translate }}.\"\nThen: <p>{{ NUMBER_OF |\u00a0translate:'{type: varWithStringKey, object: \\'OTHER_KEY\\'}' }}\nHope it helps! :)\n. Agree. Cheers! ;)\n. :+1: \n. ",
    "adamreisnz": "I can confirm that my app is also loading the en.json file twice. Once for $translateProvider.preferredLanguage('en'); and once more later for $translate.use('en'). Even when using local storage.\nI'm using 2.0.1.\n. ",
    "rafaellop": "Hello,\nI've been looking for information about $translateChangeSuccess which doesn't fire for me in the case of using fallbackLanguage and preferredLanguage together with useStaticFilesLoader() and I've found this issue. I decided to reopen it because it is related to the $translateLoadingSuccess event.\nI've just updated to the newest 2.3.0 and found that a part of my interface is not translated. This is a list which is populated with items from an array that is built depending on the user language. This is only happening for the fallbackLanguage and the preferredLanguage which are different in my case. The .config looks like this:\n```\n$translateProvider\n    .useStaticFilesLoader({\n    prefix: 'lang/locale-',\n        suffix: '.json'\n    })\n.preferredLanguage('pl')\n.fallbackLanguage('en')\n.registerAvailableLanguageKeys( ... ) \n.determinePreferredLanguage()\n.useStorage('StorageService');\n\n```\nThere are five different languages in the application. If the app starts and the Storage language (NG_TRANSLATE_LANG_KEY) is one of the defined languages (preferred and fallback) two XHRs are done and two $translateLoadingEnd events are emitted. \nIf the Storage language is different than these two config languages, then third XHR is done. This is also OK. There's however one difference. For the third language the $translateChangeSuccess is emitted while it is not for the two previous languages. \nThe sequences looks like this:\n```\nsequence 1 (Storage langid is preferred or fallback language)\nXHR for lang1\n$translateLoadingEnd emitted\nXHR for lang2\n$translateLoadingEnd emitted\n\nsequence 2 (Storage langid is different than pref. or fallb.)\nXHR for lang1\n$translateLoadingEnd emitted\nXHR for lang2\n$translateLoadingEnd emitted\nXHR for lang3\n$translateLoadingEnd emitted\n$translateChangeSuccess emitted\n```\nIn my opinion the \"Sequence 1\" should finish with emission of the $translateChangeSuccess event for the last language that is finally used. In that case the logic needed for separate languages could be done in one place, instead of two different places as it is necessary a the moment. It would be event helpful enough to have access from the $translateLoadingEnd to some information about the language key for which the event has been emitted. \nRegards,\nRafal\n. W dniu 2014-09-21 21:49, Jan Philipp pisze:\n\nHave a look at 73b289d\nhttps://github.com/angular-translate/angular-translate/commit/73b289d18f080b0784c331406843e685b56db07c\n(part of upcoming 2.4). Is this okay?\n\nThanks, should be OK.\nRegards,\nRafal\n. Me to, thanks Maciek!\n. Hi tspaeth, thank you for checking this. And regarding the bug, maybe the nav.languages array is somehow initialized on Android 5 Chromium engine with empty string and returns it for the item [0] instead of beeing undefined? Just guessing.\n. Hello, what would be the recommended method for fixing this? I'm about to release a new version of my app and I would prefer to use the official version, but if it must be forked then no problem :-) Just want to know your suggested solution. \n. @knalli Thank you for the fix. I've checked it on a desktop chrome, Android 5.0 (API 21) in emulator and on a device with Android 4.0.4 and it does translate correctly and recognize the system language. Thank you. \n. ",
    "arthurgurov": "Still not fixed. I can see three requests for the same language file on release 2.6.1.\n. Hey guys, do you plan to handle this issue?\n. ",
    "Alirz": "this is my main.js :\nrequire.config({\n    baseUrl: '/app',\n    urlArgs: \"v=1.0\"\n});\nrequire([\n      'app',\n'directives/fonixtextbox',\n    'directives/fonixbutton',\n    'directives/fonixgrid',\n    'services/dataService',\n    'services/messageService',\n    'services/dropdownHelperService'\n],\nfunction () {\n    angular.bootstrap(document, ['app']);\n});\nthis is my app Module :\ndefine([\"services/routeResolverService\"], function () {\n    // Declare app level module which depends on filters, and services\n    var app = angular.module('app', [\"routeResolverServices\", \"ngResource\", \"ngRoute\"]);\n    app.config(['$routeProvider',\n        'routeResolverProvider',\n        '$controllerProvider',\n        '$compileProvider',\n        '$provide',\n        '$translateProvider',\n        function($routeProvider, routeResolverProvider, $controllerProvider, $provide, $translateProvider) {\n$translateProvider.useStaticFilesLoader({\n            prefix: 'i18n/bundle/locale-',\n            suffix: '.json'\n        });\n        $translateProvider.uses('en_US');\n.......\n```\n    }]);\nreturn app;\n```\n});\ni try to load Angular-translate with define but $translateProvider is not Inject \n. this is my old config but dosent worked\nvar app = angular.module('app', [\"routeResolverServices\", \"ngResource\", \"ngRoute\", \"pascalprecht.translate\"]);\n    app.config(['$routeProvider',\n        'routeResolverProvider',\n        '$controllerProvider',\n        '$compileProvider',\n        '$provide',\n        '$translateProvider',\n        function($routeProvider, routeResolverProvider, $controllerProvider, $provide, $translateProvider) {\n```\n        $translateProvider.useStaticFilesLoader({\n            prefix: 'i18n/bundle/locale-',\n            suffix: '.json'\n        });\n        $translateProvider.uses('en_US');\n}]);\n\nreturn app;\n```\n});\nHow can i include AngularJS translate module\n. I changed My app Module with your config but still has same error when i use \"translateProvider\"  (undefined method useStaticFilesLoader ) Should I Change AngularJS translate with define command or something?\n. ",
    "schmod": "The proposed translate DOM attribute is likely a bigger problem, and could be a big potential source of conflicts in the future:\nhttp://www.whatwg.org/specs/web-apps/current-work/multipage/elements.html#dom-translate\n. ",
    "gruppjo": "Hi @PascalPrecht. You're welcome and thanks for your reply.\nIsn't this just translating two keys at the same time?\nIf it is, it's a little different from what I proposed, where the returned translation _is_ an object or array.\nThat way you could use angular-translate for a whole variety of configuration/settings in your webapp which depend on the user's language.\n. @Zemke, I think so too but apparently this is not a feature the owner are interested in.\n. ",
    "alejandrolsca": "The array syntax already landed in angular-translate. Closing this one<----i cant find that in the docs, can you please share it? thanks in advance\n. ",
    "brunomperes": "Is requesting an object possible/implemented?\nI could find the object return on the docs, when requesting various translation IDs as an array, but not when the ID stores an object inside.\n. Kinda of, I thought it could return all translations in a namespace, for instance:\n{\n     \"key1\":  {\n         \"key1a\":\"foo\",\n         \"key1b\":\"barr\"\n      }\n    }\nso the key1 ID would return the whole key1 object, with its keys and translation values\n. ",
    "maciej-gurban": "Did this go into development at any point? I was hoping to use nested object like PolyglotJS is using, to manage my translations easier (contain translations of one component's strings in one object). Here's an example from Polyglot's docs:\n```\npolyglot.extend({\n  \"nav\": {\n    \"hello\": \"Hello\",\n    \"hello_name\": \"Hello, %{name}\",\n    \"sidebar\": {\n      \"welcome\": \"Welcome\"\n    }\n  }\n});\npolyglot.t(\"nav.sidebar.welcome\");\n=> \"Welcome\n```\n. ",
    "Zemke": "I don\u2019t see why this was closed. The array syntax to translate multiple keys is nothing like getting a whole translation object. I think the feature request is still valid, isn\u2019t it?\n. I see the point of focusing on the single purpose of this module. In the project I work in, we use it for something else.\nWe want to share the backend\u2019s enumerations with the frontend and we generate a localization file for that which hosts JSON replicas of the Java enums that are used in the backend. Here it would be useful to have access on whole structures of data.\nBut I still see your point, that it\u2019s not the problem you\u2019re trying to solve with this module.\n. ",
    "bdurrer": "I got here because I wanted to put list of available formats of an datepicker into an array.\nBut the workaround is actually really easy enough: Just put the list of date formats into a single string, separate them with something (eg semicolon) and split them after loading.\n$scope.dateFormats = $translate.instant('datepicker.dateFormats').split(';');\nFor lists you'll be repeating over them anyway, so you can just use {{'myEnumNames.' + value | translate}} inside the repeated part. I can't imagine all too many cases where the absence of this feature would be a big pain?\n. ",
    "gabrielfgularte": "@PascalPrecht \n@marcalj \nI've made a simple directive to take care of this. It's kind of handmade code, but it helped me a lot.\nhttps://gist.github.com/gabrielfgularte/8d8b0e934b254b46284a\nYou can see a working example here: http://jsfiddle.net/gabrielfgularte/y2gfn7pe/\n. ",
    "JWGmeligMeyling": ":+1: \n. ",
    "marcust": "Yes, I guess your patch is more robust against empty strings\n. ",
    "ronny332": "From my boot.js (the 'locale-misc_en.json' gets loaded always directly within the boot steps, every value from this file is working very well).\nboot.js\n```\napp.config(function ($translateProvider, $translatePartialLoaderProvider) {\n  // translate\n  $translateProvider.useLoader('$translatePartialLoader', {\n    urlTemplate: '/i18n/locale-{part}_{lang}.json'\n  });\n  $translatePartialLoaderProvider.addPart('misc');\n  $translateProvider.preferredLanguage('en');\n});\napp.run(function ($rootScope, $translate, user) {\n  $rootScope.$on('$translatePartialLoaderStructureChanged', function () {\n    $translate.refresh();\n  });\n});\n```\nFrom the directive where \"UC_headline\" (from above) is used:\nuserConfig.js\n$translatePartialLoader.addPart('userConfig');\nNothing special in my eyes, mostly of the code comes directly from the wiki pages.\nI can reproduce the issue directly from the code with:\nworks\n$translatePartialLoader.addPart('userConfig');\n      $translate.refresh();\n      $translate('UC_headline').then(function(val) {\n        console.log('sucess: ', val);\n      }, function(err) {\n        console.log('error: ', err);\n      });\nand\ndoes of cause not work\n$translatePartialLoader.addPart('userConfig');\n      $translate.refresh().then(function() {\n        $translate('UC_headline').then(function(val) {\n          console.log('sucess: ', val);\n        }, function(err) {\n          console.log('error: ', err);\n        });\n      });\nOf cause I have to wait for the refresh (which is normally done from the rootscope), but the output is exactly the same.\nMaybe I can find the reason for this in the translate code, it looks like a reaction for the refresh for the directive is missing.\n. sorry, it is added inside a controller to get it loaded dynamically with the page which is connected to it.\n. here is a link to plunker:\nhttp://plnkr.co/edit/clmYd65taY0pqaBfQvtO?p=preview\nboth test values (directive and filter) are preloaded at the first configuration, both partial values are coming from a dynamically loaded json file. the filter version works, the directive version doesn't.\nplease try to reload the plunker a few times. sometimes it is working even for the directive. this seems to be time related issue. but as I understand the binding of angular-translate correctly, this should not matter.\n. sorry, what exactly do you mean? All values are only for testing, I've extracted the matching part to show the problem in an easier way.\n\"partial\" is the key for the value \"partialValue\". It is shown with the filter, but not with the directive. In my eyes this is a bug, except I did something wrong ;-).\n. @tspaeth \nseems to work, very nice to see in combination with the delayed update. I will keep using v1.1.1 for the production software, but for the development version v2.0 will do its job fine ;-).\nThank you!\n. ",
    "fiznool": "I just wanted to weigh in with my own experiences with this issue. The plunker I have just created is very similar to the updated one from @daanporon.\nIn short, I'm having the same issue using the translate directive, expecting it to update the translation when the underlying scoped variable changes, but it doesn't. I guess I'll move over to using the translate filter instead, with an ng-show to hide the content until it is displayed.\nThis really isn't as nice as the translate directive, though - I was using the directive to prevent the FOUC, as described above. It would be great if this issue could be somehow solved - for example, could you explicitly define in your controller which translation IDs you'd like to be observed for the duration of the view? This opt-in behaviour would allow performance to only be mitigated if the developer needs this functionality.\n. ",
    "apassant": "Hmm, but when using use() in a controller, it changes the local storage value - I guess that's another method and that's why I'm confused?\nThat being said, if there's another way to do the following, I'd be glad to know\nif(lang.length == 2 && langs.indexOf(lang[1]) != -1) {\n        // set lang and save value in local storage\n    } else {\n        // Get from localstorage, or use default value if none\n    }\n. @PascalPrecht @DWand got it, thanks! I've just made it work by - indeed - using translateProvider. useLocalStorage() in the app definition and $translate.use(foo); in the main controller\n. ",
    "jdarling": "Thanks, I'll give it a look and ask.\n. ",
    "iranreyes": "I don't understand you, sorry but my english is a little poor.\n. Ok, sorry i got it. This is not a bug is just a recomendation for improve the library....\n. ",
    "kannix": "Yep stackoverflow, but this one ;)\nhttps://stackoverflow.com/questions/9659103/how-to-detect-users-on-an-iphone-with-private-browsing-enabled\n. ",
    "ocombe": "It's a real problem my users can't use my app in private browsing on safari desktop or iOS... I was hoping that you'd fixed it... I'll try to do the PR.\n. Thanks @kannix for the code, I just did the PR ;-)\n. ",
    "devFBO": "'displayName' is a field of ng-grid's columns definition, not a part of its data (see https://github.com/angular-ui/ng-grid/wiki/Defining-columns).\nBut applying the translation result later is a good idea. I can do something like:\n\n$scope.colDefs = [{ field: 'field1', displayName: 'key1'},\n                     { field: 'field2', displayName: 'key2'}];\n    $scope.gridOptions = {\n        data: 'myData',\n        columnDefs: 'colDefs '\n    };\nangular.forEach($scope.colDefs, function(value){\n$translate(value.displayName).then(function(data){value.displayName = data;});\n});\n\nThanks\n. ",
    "Spadavecchia": "$translate service added the instant function 2.0.0 (2014-02-16) version\nhttps://github.com/angular-translate/angular-translate/blob/master/CHANGELOG.md#200-2014-02-16\n. ",
    "isaaclyman": "As of 2.15.1, it looks like $translate.uses has been replaced 1:1 with $translate.use.\nEDIT: This change was made in 2.0.0.. ",
    "aleksz": "Please correct me if I got something wrong\nHaving hierarchy x.y.z and partialLoader requesting x.y.z, I would have to return all labels in x.y.z and also all labels in x.y and then x.\nI would like to avoid loading upstream garbage when I don't use it. I know that it would be perfect to eliminate garbage, but world is not perfect :D\n. I was thinking about solution where filter invocation with missing label key triggers request for this exact key. Probably keys would be accumulated for batch request.\n. Actually, I was able to implement it :)\nOn Feb 28, 2014 1:16 AM, \"Thorsten\" notifications@github.com wrote:\n\nClosed #387https://github.com/angular-translate/angular-translate/issues/387\n.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/387\n.\n. \n",
    "BerndWessels": "Great, thanks.\nJust as a comment, the 2.0 promise based version is much longer and it would be great to have a shorthand to programatically get the translation for a given key.\nCheers\nBernd\n. ",
    "vedmack": "Since I found this thread for the same reason I'll just leave a notice that you can use the $translate.instant() , read docs for more\n. ",
    "gabrielAnzaldo": "Thanks @vedmack that works, you save me a lot of time.\n. ",
    "temitope": "@vedmack thanks as well. huge time save. wasnt expecting the promise return. instant() was clutch\n. ",
    "rodrigograca31": "Thanks @vedmack it works perfectly!\n. Ok. I've searched around and had only found one issue talking about this problem and was not exactly this, but I can see now that you guys have discussed this many times....\nIMHO this should \"simply work \", If I say to the plugin that my \"translated data\" is in X file, it should get it and return it not carrying if it's string, array, number, etc....\nThanks for the help.\nP.S.: For future reference: I've solved it by including a file with all translations in this format:\njavascript\nvar beacons = [\n    {\n        \"id\": 1,\n        \"title\": {\n            \"pt\": \"Title 1\",\n            \"es\": \"\",\n            \"en\": \"\",\n            \"fr\": \"\"\n        },\n        \"img\": \"\",\n        \"text\": {\n            \"pt\": \"Text 1\",\n            \"es\": \"\",\n            \"en\": \"\",\n            \"fr\": \"\"\n        }\n    },\n    {\n        \"id\": 2,\n        \"title\": {\n            \"pt\": \"Title 2\",\n            \"es\": \"\",\n            \"en\": \"\",\n            \"fr\": \"\"\n        },\n        \"img\": \"\",\n        \"text\": {\n            \"pt\": \"Text 2\",\n            \"es\": \"\",\n            \"en\": \"\",\n            \"fr\": \"\"\n        }\n    }\n];\nThe controller:\njavascript\n$scope.beacons = beacons;\n$scope.language = $translate.use();\nThe view:\nhtml\n<ion-list>\n    <ion-item ng-repeat=\"beacon in beacons\" href=\"#/app/beacon/{{beacon.id}}\">\n        {{beacon.title[language]}}\n    </ion-item>\n</ion-list>\n. ",
    "savcha": "Sorry ie = i.e. = Latin \"id est\" = English \"that is\"\nI'll create a plunker and attach it.\n. http://plnkr.co/edit/eXIFPOE0ZBOExHQMo51s?p=preview\nBtw is there a standard way to embed angular-translate in plunker? I had to copy the source in because I couldn't find a cdn and using https://raw2.github.com/angular-translate/bower-angular-translate/master/angular-translate.js didn't work because it's transferred as a text file. I also noticed all the examples in the tutorials are broken because of this.\n. The rawgithub link works with plunker, thanks.\n. ",
    "mozey": "Ah! Thanks it makes perfect sense now, I missed that bit in the docs.\n. ",
    "varunis": "@PascalPrecht Thanks! Changing the variable from double {{}} to single {} fixed my problem.\n. ",
    "gtesslerge": "Hi Pascal.....  I will try to find the time to plunk it.   Let me know when the next version gets released.  How to I get this thread to watch email to me?\n. button type=\"button\" title=\"translate w/o a filter here\" >\n. ",
    "geetee24": "Was this fixed in 2.0.1 yesterday?  Thanks\n. It is still broken in latest code.\nIf I set fallback to en_US\nand try to set my locate to say XX,\nthe $translate will not default to en_US\n. Oops it was stripped from the message box:\ninput type=\"checkbox\" value=\"remember_me\" data-ng-model=\"m_User.boolRememberMe\" translate=\"signInRememberMePlaceHolder\" /> \n. Thanks. So then what is the proper way of getting translate to work on an INPUT html element listed below WITHOUT resorting to using a filter (for performance reasons).\ninput type=\"checkbox\" value=\"remember_me\" data-ng-model=\"m_User.boolRememberMe\" translate=\"signInRememberMePlaceHolder\" />\nbelow works but back for perf. reasons:\ninput type=\"checkbox\" value=\"remember_me\" /> {{ signInRememberMePlaceHolder | translate}}\nThanks :)\n. I dont understand your question?\nI want it for I want to keep track of the version that we use in our app.  And you would have to auto increment it after each release.\n. ",
    "egervari": "I think you're problem is similar to one I have with the partial loader. Whenever I refresh the browser's page, especially with firebug open, there is a significantly good chance the translation won't happen, even when wrapped in the appropriate event callback. Going to another page and then back seems to fix the problem, but the results seem to be wild and inconsistent. The documentation for the partial loader has actually gotten worse since the latest versions. \nI'm really debating to go back to an inferior loading mechanism that consumes more bandwidth and cpu cycles. Anything to get rid of the loading inconsistency issues :/\n. Actually, I did investigate the problem, and my issue was that I was loading the part and refreshing in ui-router's resolve sections. When I moved this code to the controller itself, everything worked as normal. When it was in the resolve section, the code would get executed, but the actual translation files would not be pulled from the url at all on the first time. It would work subsequent times though, until you pressed f5 - then the problem happened all over again.\n. His problem might be a little different.\nIf angular-translate is really supposed to work fine when put in resolve blocks (and it's kind of intuitive to think it might be better to put them here actually), then maybe that is something to look into with the partial loader. Putting the translation statements in your controller seems like the wrong place for this kind of code. I think the translations failing to load on the first time is a pretty big concern and shouldn't be taken lightly. Just because I can put the code in the controllers to fix my personal problem does not mean the issue is solved I don't think. I think it makes perfect sense that it should work in resolves - it will probably reduce flickering of breadcrumbs and things like this.\n. Thanks for the response.\nI didn't even know this website still existed. The one on the main github page does not work:\nhttp://angular-translate.github.io/angular-translate/\nMight want to correct that link :-)\nTime to do some reading! I was looking for it, but I only found the newsletter article on the new version, which was not very indepth.\n. I have another question that relates to the first one.\nWhat if I have an array of titles. Each of these needs to be translated at the same time.\nWith the new promise structure, this is actually kind of weird to do, as the order of the titles is also important.\nThe reason I have this array is that it represents the full breadcrumb for a particular page. For example, it could be:\nMyAppName | Company > Acme Corp > Users > Bob Jones\nAll of these breadcrumbs need to be translated, as this is what is going in the HTML title tag.\nIs there still a way to do this?\nThanks!\n. Hrm, would this not be easier if we could just pass a bunch of keys to the $translate service at the same time, and get all of the results back in 1 then() block? Seems like a much easier solution to me. Something to think about for next release?\n. ",
    "gtbuchanan": "Yes, this is still a problem. See this plunker taken from this answer on StackOverflow. I can confirm this is also still the case if I use the $translate service in the controller after $translate.refresh is called.\n. This is my current undesirable workaround:\napp.run(['$rootScope', '$translate', '$interval', function ($rootScope, $translate, $interval) {\n    $rootScope.$on('$translatePartialLoaderStructureChanged', function () {\n        if ($translate.use()) {\n            $translate.refresh();\n        } else {\n            var token = $interval(function () {\n                if (!$translate.use()) return;\n                $translate.refresh();\n                $interval.cancel(token);\n            }, 10);\n        }\n    });\n}]);\nThe issue is $translate.refresh is usually executed in the controller before the initial load of the language has completed and $uses is set, so $translate.refresh actually just does nothing in this case.\nI would think $translate.refresh either needs to consider $nextLang, or $translate.use needs to execute the pending refresh when it finishes.\nOur locale is being loaded from a cookie so the translations are loaded in the run block. Additionally. we do not have a fallback language set on the client as this is handled in our server.\n. ",
    "ena1106": "@egervari Thank you so much. Putting the addPart and refresh inside the controller fixed the issue I was having. I generate pdf from html using the tool wkhtmltopdf from command line. With the code in the resolve of the route, generated pdf had all the keys instead of the translations.\n. ",
    "jeffburton": "I figured it out. I am using the oc.lazyLoad library in combination with ui-router. the addPart call has to be in the resolve for the state, rather than in the controller function. Here is an example. \n$stateProvider\n     .state({\n        name: \"logon\", \n        url: \"/logon\", \n        views: { \"mainView\": { templateUrl: 'app/logon/logon.html' } },\n        resolve: { \n            test: ['$ocLazyLoad', '$translatePartialLoader', \n                function($ocLazyLoad, $translatePartialLoader) \n                    {\n                    $translatePartialLoader.addPart('logon'); \n                    return $ocLazyLoad.load({ name: 'logonModule', \n                        files: ['app/logon/logonModule.js']\n                    });\n                }]}\n        })\n. ",
    "joaomvfsantos": "It's good to realize that you can also use $translate.instant(id) to get the same behavior as pre 2.0.0. \n. ",
    "exislow": "Damn! Read the docs two times and googled a lot, but haven't seen this option :-/ Thank you!\n. Thank you Pascal! It would be great, if you could describe it more explizit in the docs!\n. ",
    "akleiber": "This does not work for me. The directive is just deleted and I will instead have the plain element.\nExample with ng-src here http://plnkr.co/edit/pV9AurCNnbgn8VJasuMc?p=preview\nWhat am I missing? I am actually trying to use an ui-sref directive on an a element. But after translation the ui-sref directive is just stripped from my a element.\n. Okay - ngSanitize removes the ui-srefdirective. \n. I am interested in an extended link functionality too. Like @joaovieira asked for.\nReusing already defined translation keys would be handy.\n. ",
    "LeoLozes": "@akleiber did you find any solution to have ui-sref working with ngSanitize?\n. @Phisherman thanks, I did find this same solution and it worked fine with 'sanitizeParameters' :)\n. ",
    "christianmalek": "@LeoLozes You could change the variable escaping to\njs\n$translateProvider.useSanitizeValueStrategy('escapeParameters');\nor\njs\n$translateProvider.useSanitizeValueStrategy('sanitizeParameters');\nSource: https://angular-translate.github.io/docs/#/guide/19_security\n. ",
    "emadd": "Ok.  Updated to 2.0.1.  Error is gone but the html still isn't rendering into the span.  I made a few changes to no avail. Any suggestions?\nSource\n<div id=\"warning\" ng-show=\"warningMessage\" class=\"alert alert-warning\">\n    <i class=\"fa fa-asterisk\"></i>&nbsp;<span ng-bind-html=\"'{{warningMessage | translate}}'\"></span>\n    <button type=\"button\" ng-click=\"warningMessage=''\" class=\"close\"><i class=\"fa fa-times\"></i></button>\n</div>\nOutput...\n<div id=\"warning\" ng-show=\"warningMessage\" class=\"alert alert-warning\">\n    <i class=\"fa fa-asterisk\"></i>&nbsp;<span ng-bind-html=\"'Your profile is currently not published.  &lt;a href=/editProfile&gt;Edit Your Profile&lt;/a&gt;'\" class=\"ng-binding\"></span>\n    <button type=\"button\" ng-click=\"warningMessage=''\" class=\"close\"><i class=\"fa fa-times\"></i></button>\n</div>\n. Yes.  It was syntax.  \n<span ng-bind-html=\"warningMessage | translate\"></span>\nworked\n. ",
    "kevinchevallier": "Hey, any chance we can write something like this?\n<span ng-bind-html=\"warningSpecificMessage || warningDefaultMessage | translate\"></span>\n. ",
    "thiagog3": "@kevinchevallier I think it could help you:\nng-bind=\"((variable1 || variable2) | translate)\"\n. ",
    "omarcresp": "  doesn't work well. This text is rendering the HTML tags :disappointed: \n(soory if i wrote bad, i speak spanish). ",
    "tommck": "FYI: $translate.instant() returns an object when you use the 'sce' sanitize setting. take it a step further and just use TypeScript?. string: \"Remove Object {{foo}}\"\njavascript object:\nvar contextObject = { foo: 'hi' };\ntranslate call: {{'string' | translate:contextObject}}\nif we change foo to \"hello\", the translation doesn't change\n. I'm using 2.8.1\nI will try to repro it in a small example\n. As usual, when trying to reproduce it, I realized that the error is mine, not in angular-translate :)\nSorry for the trouble.\n. So.. you allow PRs with zero unit tests?. You write a service to handle it:\n$translateProvider.useMissingTranslationHandler('missingTranslationService');\n\n. It's because this line of code is just the result of $sce.trustAsHtml, which is an object\nhttps://github.com/angular-translate/angular-translate/blob/c7e743bb54b18f404e7ab5b91b88f842f144bbae/src/service/sanitization.js#L79. Both escape and sanitize return strings.  It should be consistent, shouldn't it?. Definitely should add documentation hints for this, because it was really confusing. (the TypeScript typings are wrong too :) )\nSo you're saying we'd have to pass an additional parameter in every instance where we wanted to just get a string back?\nI'm just trying to figure out a situation where someone would ever want the TrustedHolderValueType type instead of a string.\nSeems to me that the default should be string and opt-in to getting the TrustedHolderValueType . > That's standard using templates which includes directive and filter. Your not seeing this ;)\nRight, but they never actually want that type.. they want the string that is being rendered.  What is the value in returning the TrustedHolderValueType rather than just a string, since it's always rendered as such?. One fundamental issue I see here is that changing your strategy from 'escape' to 'sce' requires code changes in the rest of the app.\nThat doesn't seem like a good side effect to me\n(In my case, there are over 125 places in our large app that would have to change). right, but there are many instances where we use the javascript directly (> 125 instances in our app).\nStill don't see what problem it causes to just return a string. the entire issue would be solved if we removed the custom code from src/service/translate.js that you pointed to and changed the return value; to return value && value.toString(); in the 'sce' strategy\nThere are no other mentions of \"trust\" in the code base\nI made this change in my local 'canary' branch and all tests are passing. I understand what the $sce does, but I thought that we couldn't put HTML in our translation strings at all. I didn't think that was a goal or even desired.\nThat's a HUGE assumption that I made that I thought was based on reality.. Also, if my change would break stuff, then there are some large gaps in the tests in the code base. well, I guess I'm going to create my own service to translate to strings for use in javascript and write an ESLint rule to disallow other uses in order to avoid this issue.\nI still think there's a fundamental consistency issue with it returning an object, when I'd never expect that, especially as a developer on a large project where you might not understand the \"big picture\".. > Well, if you don't want to put HTML (and others) into your app, you should simply use escape. Best method ever.\nUnfortunately, that screws up simple \"&\" being in a string. > I'm not sure what you have changed. But you are welcome to fix it. :octocat:\nHow did I know you were going to say that? \ud83d\ude04 \nAll I changed was 3 files.. the return value && value.toString() thing mentioned above along with fixing one unit test that unwraps and removed the special code in the translate service that handles unwrapping.\nWith those changes, all unit tests pass on all scopes.  Nothing is testing to make sure HTML is rendering properly through translation.\nAs far as adding tests, I'm apparently not sure what the assumptions of functionality are, since I didn't even think it was supposed to allow HTML content. Do we have a list of things that need to be tested?\n. Oh nice. Looks like some good tests in there.. I'm sure my changes would break those :). What's wrong with the brackets being executed?\nSometimes we use {{ paramName | filterName }} in our translation strings and expect that to work.. the docs say \"escape: escapes HTML in the translation\".. that's all it does.\nhttps://angular-translate.github.io/docs/#/guide/19_security. ",
    "newjs": "I squashed the commits into 1 and also updated the links per tepaeth's notes. Plz merge the zhdocs branch. Thanks!\n. Hi let me know whether there is anything else need to be done for this PR. This is my fist github commit, so if anything is not correct let me know i wil fix it. Thanks!\n. Some language if specific to a country, it can be expressed as Country-Language some kind of format or attached to a flag. But others that are used by people from many countries, we should refrain from associating the GENERIC language name with the specific country flag. For instance, the documentation has British flag associated to English language. Either the flag should be removed, or the \"English\" should be rename to \"British English\".  \nAnother approach, is instead of Spanish, we use espa\u00f1ol, \u7b80\u4f53\u4e2d\u6587 for Simplified Chinese. This way the language chooser is multi lingual itself. this way also more visual (even though just text) for the user.\njust my 2 cents.\nI \n. thanks for the reply. it does however require me to add those languages in my code beforehand, is that correct? What if I don't know what languages I might want to add in the future?\n. :-) I should rephrase my question: is there any sample code to pass language code and fall back stack dynamically to angular-translate? We can have a small program that watch some location and determine what's added/removed.\n. Sometimes it happens when language pack installation for some reason failed. but the application works fine with or without the language pack.\nthe fall back is a safe keeper. it should at least be attempted.\n. I am encountering something interesting. \nThis is my plunker\nhttp://plnkr.co/edit/tHrBeY0Ur0rhp0xNuWpA?p=preview\nit works on the plunker runner. However the same code I deployed on tomcat 6.0.35, on latest chrome, it complains that \nFailed to load resource: the server responded with a status of 404 (Not Found) \nhttp://localhost:8080/ngtrans/locale-ja.json\nand all strings display as the keys.\nAnyone ever running into similar issues?\n. yes, it is served via tomcat. I will try tomcat 7 and node next week... \n. Hi, I updated my plnkr and was able to reproduce this issue in plnkr as well. \nhttp://plnkr.co/edit/tHrBeY0Ur0rhp0xNuWpA?p=preview\n. pull 676 for simplified and traditional chinese docs\n676\nhttps://github.com/angular-translate/angular-translate/pull/676\n. mistakenly request to merge to master. close this. send a new PR to merge to canary.\n. Thanks for pinging, will look into this shortly. Sorry just got a new job a few weeks ago, kinda crazily busy.\n. ",
    "joaoafrmartins": "that was fast! ty\n. @tspaeth i was just browsing the new docs and wondering what happened.. are there any plans to include an automatic translation api in this?\n. https://www.npmjs.org/package/mstranslator and https://www.npmjs.org/package/yandex-translate look like a good starting point... is there any insterest in this?\n. bing is way better btw\n. ",
    "benpriebe": "Hi,\nIn the plunkr the main-fr.json has been removed so there's no way it should come down as a 200 OK. When you check chrome dev tools there are errors in the console log. Maybe there's a caching issue somewhere.\nOn page load, if you look at the result translations they just show the key names and not a translated value because the main-fr.json doesn't exist and it couldn't fall back to the main-en.json.\nThanks for the bit about the error handler. That will achieve what I want.\nI can't help but feel that it would be a nice feature to have the loader fall back to the \"fallback language\" if it can't find a preferred language file table. Do you agree?\n. I understand your point and think I agree with it. \nI'm thinking if I put in an error handler that just returns an empty translation table if it can't find the {lang}.json file, then the fallback file will be picked up anyways and then angular-translate will work as I hope it does.\nI will try this when as soon as I can and confirm.\n. For anyone who comes across this post, this is how I created an error handler that will resolve an empty translation table when the loader can't find a server side file. This will allow your fallback file translation tables to be used.\n```\nangular.module(\"appModule\")\n  .factory(\"i18nPartialLoaderErrorHandler\", [\"$q\", function ($q) {\n    return function (partName, languageKey) {\n      return $q.when({});\n    };\n}]);\n$translateProvider.useLoader(\"$translatePartialLoader\", {\n  urlTemplate: \"{part}/{lang}\",\n  loadFailureHandler: \"i18nPartialLoaderErrorHandler\"\n});\n```\nIf you use this approach with physical files however the browser will report a 404 in the error console/network tab which isn't ideal.\nThe solution I ended up going with was to use a server side endpoint that dynamically returned the contents of the file (if it existed) otherwise just returned an empty translation table \"{}\". \ne.g.\nInstead of something like this:\nhttp://app.website.com/i18n/string.en-AU.js\nI used something like this:\nhttp://app.website.com/i18n/strings/en-AU\nAnd had the server resolve that address to a physical file if it existed and returned the contents as \"application/json\". If the file didn't exist, I just returned \"{}\".\nHope this makes sense.\n. wrong repo. sorry, my mistake.\n. Yes. Setting the default to 'en' fixes the problem. Setting the locale for further translations is fine. \n. ",
    "appsolutegeek": "Yep I noticed this issue the other day. +1. Would be great if it worked with fallbackLanguage.\n. Sure here is an example \nhttp://plnkr.co/edit/0iVCc7fM04aZteSxcNpl\n. So in the plunk, you will notice the MainCtrl, this is where, in my real app, I read from local storage and assign a .use(language).\nThe LoginCtrl, is the controller that is attached to a view on route. \nLoginCtrl has the addPart but the MainCtrl calls .use FIRST, this is to do with the inheritance of the controllers, the MainCtrl is higher up on the scopes, which in needs to be.\nI hope my example is easy to understand.\n. This is the package I am currently using https://www.npmjs.com/package/angular-i18n\n. ",
    "360disrupt": "Is it possible to use the wildcard in the first part as well?\n$translateProvider.registerAvailableLanguageKeys(['en_*','en'], {\n    'en_*': 'en'\n  })\nOtherwise you need to register all available keys?\n. ",
    "hippegger": "+1\nOpen source projects will not use any of the bower modules as long as these are not properly licensed. I vote for this issue because we want to use angular-translate  in our open-source CMS.\n. So I can ignore 1), right?\nAbout 2) that's fine, I can do that.\n. Hi Pascal,\nI totally messed up my forked repository.\nI could delete my fork and start from scratch. Any advice?\nSorry, just starting with git\n. Tnx. I'd rather learn something new so please help me out\n. So, the problem is if I now click on PullRequest in my license-improvements branch of onehippo / angular-translate I see many many commits that would end up in the PR. Aparently I merged lots of changes from  canary somehow.\n. OK, basically I want to create a PR containing only the changes in b8546a45b4f08b7a20b740a3d577cb4afe4baf3f\n. OK, I'll read your instructions and execute them step by step.\n...\n. Finally there. Just to be sure with yourOrigin you mean the literal origin?\n. I'm still on my local canary branch so I'm not sure what I should fill in for yourOrigin\n. Done\nTo https://github.com/onehippo/angular-translate.git\n- b8546a4...f42ac2e canary -> canary (forced update)\nSo now I can create a PR from my canary branch on github, right?\n. Ah, just realized it. So all is fine now. Thanks for your help\n. OK, working on it. \nAlso noticed one thing: in package.json there's a property 'license', but in the Gruntfile it references pkg.licenses, so in the generated license header you don't see MIT in it.\n. Since the licence property in package.json is a string\nI can change \n<%= _.pluck(pkg.licenses, \"type\").join(\", \") %>\ninto \n<%= pkg.license %>\nIn the Gruntfile, unless you anticipate having multiple licenses\n. Got it. Adding the following to bower.json fixes the problem. Shall I add it to the PR?\n \"licenses\": [{\n    \"type\": \"MIT\",\n    \"url\": \"http://www.opensource.org/licenses/MIT\"\n  }]\n. Done\n. OK\n. Is it OK to do a force push (-f) after my git commit --amend?\nGuess so, since I'm the only one pushing ...\n. @knalli Are you sure you have all 3 of my commits? In the last one I added the licenses array to bower.json, so can you please verify your local bower.json has that too?\n. Yes it is. It will prevent removal of comments by uglify if you  add the option preserveComments 'some' (as I did). You can read the details here:\nhttps://github.com/gruntjs/grunt-contrib-uglify#preservecomments\n. ",
    "jscti": "Hi,\nThanks for the (very) quick reply.\nI thought this also (tried with objects instead of inline-variable) but when reverting back to a static template file (same code but only without $templaceCache), it's working perfectly ..\n. Well, i already took me one day to understand the problem :D\nIn fact, I just discover that even without $templateCache, the bug is reproducted :\nso :\ninline template - not working : http://plnkr.co/edit/IQrJdwmjdYSian2L2Sxy?p=preview\n$templateCache template - not working : http://plnkr.co/edit/6ZAJLHs0d3AWIvf9x7cb?p=preview\nstatis template - not working : http://plnkr.co/edit/XME6mJpgDmMOopfuj8HJ?p=preview\nI think I only have a basic problem like you said (ng-repeat scope) but i really don't know how to  fix this, could you give it a try ?\nThanks\n. Any news on this issue ?\nI checked my code and it seems I'm doing it right with ng-repeat scopes..\n. Hello\nNop, I stick with v1, can't upgrade to v2 :(\nDo you have the same bug ?\n. Seems it's now working since the latest version (2.1.0)\n. ",
    "EnchanterIO": "bixibu did you solve it at the end?\n. not yet, will write here later i was just informing myself. BTW: awesome module so far ! :+1: \n. ",
    "yllieth": "I still have this issue in both version 2.2.0 and 2.4.0 of angular-translate. I finally added a decorator to override preferredLanguage method : \n``` javascript\nangular\n  .module('myApp', ['pascalprecht.translate'])\n  .config(function($provide) {\n    $provide.decorator('$translate', function($delegate) {\n      var _preferredLanguage = $delegate.preferredLanguage;\n  $delegate.preferredLanguage = function() {\n    var guessed = _preferredLanguage();\n\n    // ensure that $preferredLanguage looks like fr_FR or fr_fr [Safari], and not \"fr-fr\" of just \"fr\", ...\n    var language = guessed.match(/^[a-z]{2}([-_][a-zA-Z]{2})?$/);\n    if (language !== null && language[0] === guessed) {\n      var splittedLanguages = language[0].replace('-', '_').split('_');\n      if (splittedLanguages.length === 1) {\n        // fr => fr_FR\n        return splittedLanguages[0].toLowerCase() + '_' + splittedLanguages[0].toUpperCase();\n      } else if (splittedLanguages.length === 2) {\n        // fr_fr => fr_FR\n        return splittedLanguages[0].toLowerCase() + '_' + splittedLanguages[1].toUpperCase();\n      }\n    }\n\n    return guessed;\n  };\n\n  return $delegate;\n});\n\n})\n```\nBy doing so, preferredLanguage is always well-formatted (en_US, fr_FR) even if detected language looks like fr, fr_fr, ...\nI thought that resolution of #722 in 2.4.0 will address this issue, but it still relevant for me.\n\n:information_source: My configuration of $translateProvider is \njavascript\nangular\n  .module('myApp', ['pascalprecht.translate'])\n  .config(function($translateProvider) {\n    $translateProvider.fallbackLanguage('en_US');\n    $translateProvider.determinePreferredLanguage();\n    $translateProvider.useStaticFilesLoader({ prefix: './locales/', suffix: '.json' });\n  })\n. With pleasure! But if I propose this as a PR, I'm going to directly include it in the code, not as a decorator. I think negociateLocale function is the best place, isn't it ?\n. \n",
    "SpoBo": ":+1: \nIt's also broken inside an ng-repeat: http://plnkr.co/edit/YNtCf6hkZ7fn3DGTPm2B\n. Ok I could use this syntax. In our case it's actually a bit cleaner.\nBut the first scenario just isn't supported?\nedit:\nActually after testing it, the translate-values=\"person\" syntax doesn't work for us. We're passing an object that has a link to a scope. angular-translate tries to copy it internally which gives an error from angular.\n. ",
    "damienklinnert": "fix is here https://github.com/angular-translate/angular-translate/pull/454\n. ng-repeat is tested now as well.\n. Added test for ng-repeat and rebased commit.\n. ",
    "mohlendo": "@PascalPrecht Done\n. ",
    "devonhumes": "I don't know if this is desired functionality or not, but using trim means you can't pass an array of ids to be loaded. Is there a reason that you can only translate one id with the partial loader, but you can translate an array of ids with the normal service?\n. This also should fix #640 \n. These seem to be failing due to npm and bower.\n. Thanks! Sorry for that problem.\n. Sorry, I already created another one. If you can't guess this is the first\ntime I've worked with github pull request. :)\nOn Mon, Aug 4, 2014 at 11:40 AM, Pascal Precht notifications@github.com\nwrote:\n\n@devonhumes https://github.com/devonhumes you can just rebase your\nbranch onto latest canary, no need to close this PR.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/pull/661#issuecomment-51091901\n.\n. So this passes on my local box, a Mac, using Chrome, Firefox and PhantomJS\n. I'm using 2.2.0\n. Here is a test that reproduces the issue.\n\n```\nit('should cause $translate to wait until it is completed', function() {\n  var refreshCompleted = false;\n  var refreshCalledFirst;\n  $translate.refresh().then(function() {\n    refreshCompleted = true;\n    console.log('refresh');\n  });\n$translate('EXISTING_TRANSLATION_ID').then(function () {\n    refreshCalledFirst = refreshCompleted;\n    console.log('translated');\n  });\n  $timeout.flush();\nconsole.log('expecting');\n  expect(refreshCalledFirst).toBe(true);\n});\n``\n. I am not saying that we need the translations immediately after that, what I am saying is that we need to call the $translate service after calling $translate.refresh(). With the current implementation, if we do that then the call to the $translate service does not wait for the asynchronous calls to the server to complete. In short $translate, becomes _synchronous_ NOT _asynchronous_\n. That is the temp solution that we came up with, but is there a reason that $translate can't wait for loaders created from$translate.refresh()`?\nThe translate service is supposed to wait for any existing promises for the preferred or determined language. (src/service/translate.js:753)\nvar promiseToWaitFor = (function () {\n  var promise = $preferredLanguage ?\n    langPromises[$preferredLanguage] :\n    langPromises[$uses];\nHowever, all promises created with $translate.refresh() do not add their promises to langPromises, so it will just try to translate with the current translation tables, without getting the new language parts.\n(src/service/translate.js:1496)\n```\nif ($fallbackLanguage && $fallbackLanguage.length) {\n  for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {\n    tables.push(loadAsync($fallbackLanguage[i]));\n  }\n}\n// reload currently used language\nif ($uses) {\n  tables.push(loadAsync($uses));\n}\n``\n. Sorry if I came across as argumentative. :) You're right that this does work. I still believe that it would be useful to have $translate wait, but using the event based system does allow for translation changes.\n. Let me explain our use case a little. We are loading a set of isolated widgets on the page. Each of those widgets could be developed by a different team or by a third party. The translations for a widget are loaded as part of the setup of each widget by calling$translatePartialLoader.addPart('part');then$translate.refresh()`. \nIf the widget developer needs to call the $translate service then it should wait on $translate.refresh(). That way each widget developer does not have to sprinkle his code with $rootScope.$on since the call to $translate.refresh() happens outside of the widget. Can you see a better alternative? \nWe don't know if we are ever going to allow users to change their language without a page refresh.\n. Will do!\n. ",
    "Francisc": "Sure, there's another minor typo, I'll gather them in one commit.\nThanks.\n. Oups...\n. Thanks as well.\n. Hm, so this is expected behavior?\nIt's strange because typically, the way you choose to convert a key to its value shouldn't produce different results.\n. Also, if I am not mistaking, the default now is this:\n$translateProvider.useSanitizeValueStrategy(null);\nWhich should mean HTML should output as HTML unless a value of escaped is passed in.\n. I understand. I think the filter should also return HTML in accordance to the sanitization strategy for consistency. But it's not a major issue.\nAlso, thank you for the recommendation.\n. I've used $sce in the past to allow filters to output HTML.\nI'll take a look at this in detail this weekend.\n. You're right, it's not possible currently.\nThe only way a filter will return unescaped HTML is by combining $sce.trustAsHtml() service method and ngBindHtml directive.\nHere's a Plunk:\nhttp://plnkr.co/edit/SUH83VtqHA4NA58pua6y?p=preview\n. I think it's cheaper to just use ngIf or similar combined with translate.\nThanks, Jan.\n. I found an awful solution...\nHTML\n<div ng-pluralize count=\"count\" when=\"{\n    '1':'1 {{&quot;SINGULAR&quot; | translate}}',\n    'other':'{{count | number}} {{&quot;PLURAL&quot; | translate}}'\n}\"></div>\n. Hahaha.\n. I did, but I didn't notice anything there.\nI'll read it again, thanks.\n. Thanks, Pascal.\nI took a quick look in all 4 sections about storage (+custom) and async (+custom) and there is no mention of what you say. At least not in the English version.\n. I think it's better if you write this.\nYou know it way better than I do.\n. Thank you.\n. Hello,\nHere's a Plunk: http://plnkr.co/edit/o3fxRBRu492hPVDwj2Cp?p=preview.\n. Any news on this?\n. I will take a look, but angular-translate should not be telling you how to write directives.\nreplace:true can be very important.\n. I know, but that's also a workaround / solution that requires author to change his or her code in order to accommodate angular-translate.\n. My code works if I remove the translate directive from the custom directive template.\n. But yeah, the errors are very vague and useless in such situations.\n. If this is OK, issue should be closed.\n. Great, thanks.\n. \n. I could, but not this week unfortunately.\nHow would this be done with the current workflow though? get() from storage? Save in variable?\n. By flying around you mean outside of angular-translate or inside?\nWhat I was asking: How can you get the current language key when a $translateChangeSuccess event is fired?\n. Ah, OK, I understand.\nBut still, how would you do that now, when this feature isn't implemented?\nIs there a way of getting the key from inside angular-translate?\n. Ah right, I remember reading something like that in the Guide, however, it's not mentioned in the API Reference I think.\nOK, so I'll try to take a look at this as soon as I can.\n. I haven't forgotten about this, will get around it soon enough.\n. slowly and quietly exists the room\n. Hey. Sorry for being vague.\nThis only happens when you're using the same language for current from storage and fallback and trying to translate  non-existing key.\nFor example, if you have en-US as the language loaded by a custom async loader as well as the language set with fallbackLanguage(), angular-translate will throw an error if a non-existing key is encountered.\nI know the scenario is hard to get your head around and demo code would help, but I can't do it now.\nLet me know if that makes sense to you.\n. I'm not sure I can do that too soon, but I'll try to make a test case from my code.\nHow does that sound to you?\n. Hey,\nI'm away on holiday so I won't be able to in the next 10 days at least.\nI also owe Pascal a pull request to enable passing the locale on events. which is being delayed.\nSorry.\n. I forgot. The error still happens.\nI still need to make a plunkr to demo, unless you want to try.\n. OMG! OMG! That's perfect.\nThanks.\n. Config (i.e. app.config(...)):\nFallback: EN\nStorage: FR\nRun (i.e. app.run(...)):\n$translate.use(EN);\nI believe this is what happens:\nAngular-Translate (AT) reads fallback language (EN).\nAT initiates fetch for EN.\nAT reads FR from storage (e.g. localStorage).\nAT initiates fetch for FR.\nAT gets the command to use EN.\nAT writes EN to storage.\nThe fetch FR promise resolves => AT uses FR and writes it to storage.\n. Angular-Translate should always use the last request.\nSo even if a language starts loading (async) from the config phase, if $translate.use() is called, ignore or even cancel the on-going file load, and do as $translate.use() requested.\n. if you look at the \"happenings\" timeline, the last request is $translate.use(EN); in the app.run(...) block.\nWhy do you say you cannot cancel AJAX calls? Of course you can. And even if you couldn't, when a language finishes loading it should have a way to check if that's the last requested language. For example, if in the mean time a call to $translate.use was made.\nJust changing code for when storage key is updated, would only fix this issue after a refresh.\nAlso bear in mind that this is a new issue. It did not happen previously.\nThe difference between new and previous for me is v2.2.0 and current version.\n. OK, I think I understand.\nBut let's say there's no loading going on when you call that method.\nIf that's the case, does it always returns the locale that is currently in use?\n. Looks like $nextLang gets set to undefined after loading is done.\nHm. There should be a method that returns the current language being used.\n. Wow, that's awesome. The docs should be clear about this.\nCalling $translate.use() is not intuitive that it will actually return anything.\nI think a function that returns $translate.use() would be nice. Sort of like syntactic sugar.\n. It doesn't have to be a breaking change, just don't remove $translate.use() (yet).\nAs for naming, current is nice, but I'd make it sound like the action you're really performing.\nSo, something like getCurrentLocale or similar.\n. ",
    "kylewelsby": "For people who are googling, this error is presnted in the console as.\nTypeError: Object doesn't support this property or method\nSave yourself the time from debugging this and polyfill String#trim().\nBest of luck \n. ",
    "rhullah": "I had to polyfill Array.indexOf() as well.  I used the polyfill from MDN.\n. ",
    "dreamershl": "I got similar case. the following code try to use local storage and determine the browser setting. But the fallback setting won't be able to really used. \nIdeally the fallback language should be the safe guard against any unfound language.   \n$translateProvider.useStaticFilesLoader({\n                                                                        'prefix': '/i18n/locale-',\n                                                                        'suffix': '.json'\n                                                                    })\n                          .useLocalStorage()\n                          .registerAvailableLanguageKeys(['en'], {\n                                                                       'en_SG': 'en',\n                                                                       'en_UK': 'en'\n                                                                   })\n                           .fallbackLanguage('en')\n                           .determinePreferredLanguage();\nIssue 1:  Store the 'undefined' into the local storage\nIf the browser configured language isn't 'en', such as 'zh', the code here in 'angular-translate.js' should check whether the '$translate.use()' is undefined or not before store the value into the local storage.\nif (!storage.get(key)) {\n    if (angular.isString($translate.preferredLanguage())) {\n      $translate.use($translate.preferredLanguage());\n    } else {\n      storage.set(key, $translate.use());\n    }\nIssue2:  Stored \"NG_TRANSLATE_LANG_KEY\", will be always high priority even the specified file can't be loaded from server.\n. ",
    "JohnMarkT": "Another solution, but not much better:\nhtml\n<div ng-pluralize count=\"count\"\n    ng-init=\"singularText = 'SINGULAR'; pluralText = 'PLURAL'\"\n    when=\"{\n    '1':'1 {{singularText | translate}}',\n    'other':'{{count | number}} {{pluralText | translate}}'\n}\"></div>. ",
    "roxeteer": "This may be a breaking change, but I would count this as a bug fix. We can't use angular-translate 2.x in production without tricks (basically telling our localization team to use \" \" instead of \"\" when something should have no content). The 1.x version that we had before behaved correctly.\nLocally the tests are passing, so I don't know why Travis build fails.\n. @tspaeth Do you want me to re-submit the pull request to the correct branch?\n. New pull request added: https://github.com/angular-translate/angular-translate/pull/447\n. @PascalPrecht Any idea when 2.0.2 will be released?\n. ",
    "jokermt235": "\nWell, then just put another element like a\n<div> around your current template and it works.\n\nMy error was about not closing directive right  like that  fixed a problem )). ",
    "miraage": ":up: \n. Thanks you.\n. Solved problem by installing ngCookies module. Please, update docs according to this issue.\n. @zloy531 you need to include angular-translate-storage-local.\n. I'm blind. Thanks you reply.\n. Hey, what about this?\nhttp://angular-translate.github.io/docs/#/guide/17_custom-error-handler\n. /app/common/locales/en.js is loaded with 200 OK.\nThree requests, en.json, en_US.json, undefined.json.\nFirst OK, but I've no idea why others are called..\nOkay, I will check and reply.\n. It was an undefined value for NG_TRANSLATE_LANG_KEY on localStorage.\nI removed it, now en.json, en_US.json are called.\n. I still have no idea why en_US.json is loaded while I've en.json loaded with 200 OK...\n// upd\n\nMaybe I need to make en.json being served as application/json?\n. When I change determinePreferredLanguage() to preferredLanguage('en') - fine.\nLet me do some tests/debugs, then I will reply wtih results.\n. determinePreferredLanguage() uses getLocale() function when here is no languages defined.\nLooks like next scenario:\n1) trying to use en_US locale (result of getLocale())\n2) en_US.json not found (most likely, for an unknown reason, browser shows requests in wrong order)\n3) go fallback to en locale\n4) loading en.json\nAny ideas, advices?\n. I removed fallbackLanguage('en') = works fine.\n. Finally! Got it:\n$translateProvider\n    .useLocalStorage()\n    .useStaticFilesLoader({\n        prefix: '/app/common/locales/',\n        suffix: '.json'\n    })\n    .fallbackLanguage('en')\n    .determinePreferredLanguage();\nUsing this configuration works fine (changed functions order).\nIssue has been resolved. Maybe you can update docs to point this interesting use case.\n. Maybe add 3rd parameter to method instant()?\n. @knalli - wonderful idea.\n. @mdemille, imho, pull should look like @knalli answer.\n. ",
    "toogle": "see #489\n. Done.\n. ",
    "Chklang": "Hi\nSorry for delais, but i've worker on another thing since 1 week.\nThanks for your response. I've re-tried to call the $translate and... it's works...\nThe difference with before it's that now i include only static url files, but before i has included all translates plugin. Maybe it's the cause....\nThanks for your work!\n. Ho thanks!\n. Just to know : Why do you haven't used the translate directive instead of this filter?\n. Yes, i've understood why you have added the filter, it's a good thing to translate special cases. But title attribute isn't a special case (same thing for tag <input type=\"button\" value=\"mykey\"/> where \"mykey\" must be translated.\nBut it's just my vision, maybe isn't the better.\n. Unfortunately i'm on work and here GIT protocol is blocked. But if i thing it i will do it when i will back to my home, but it's not sure that i thing it ^^\nThanks for all these replies.\n. ",
    "AlexCppns": "@DWand Sure:\n```\napp.config([ '$translateProvider', 'SETTINGS', function ($translateProvider, SETTINGS) {\nvar locale_fr = {\n     HEADER_NAMESPACE: {\n        TITLE: \"Bienvenue sur le site des Bisounours\",\n        DESCRIPTION: \"En travaux...\"\n     }\n  };\n  var locale_en = {\n     HEADER_NAMESPACE: {\n        TITLE: \"Welcome to the CareBear FanSite\",\n        DESCRIPTION: \"Work in Progress..\"\n     }\n  };\n$translateProvider.translations('en', locale_en);\n  $translateProvider.translations('fr', locale_fr);\n$translateProvider.preferredLanguage(SETTINGS.LANGUAGE);\n}]);\n```\nThen in a controller:\n```\napp.controller(\"CareBearHeaderController\", [ '$scope\", \"$translate\", function($scope, $translate){\n  $translate('HEADER_NAMESPACE').then(function(header_hash) {\n    console.log(header_hash);\n},function(error){ \n    console.log(error);\n  });\n}]);\n```\nconsole.log(error); returns  'HEADER_NAMESPACE'\n. Oh, it's pretty bad then, I'll have to find a workaround. For now I am directly loading some json (effectively bypassing $translate) to fill up the FAQ translations (a long array of { TITLE: 'title', CONTENT: 'content' }).\n. ",
    "bostrom": "I'll look into it if I can find the time for it. \n. @PascalPrecht Can you check that commit and see if it's good for a pull request?\n. Ok, first ever pull request as #593. Don't know if it went down alright? \n. Hm, not sure why the 702cb5e commit showed up there... \n. Cool. Could you still explain to me why your 702cb5e commit shows up here? \n. Ok. So I could have created my feature branch off of canary instead of master and that would have left that commit out? Sorry about the questions, just trying to learn :)\n. I see. Well in each contributor's defence your contributing guidelines say:\nCheckout a new branch based on master and name it to what you intend to do:\nExample:  $ git checkout -b BRANCH_NAME \nUse one branch per fix/feature\nPerhaps update that to mention branching the canary branch? ;)\nAnyways, it was fun to be able to contribute. Keep up the good work! \n. @knalli I understand, thanks for the explanation!\n. ",
    "capaj": "This enables us to check for translation overflows automatically in our e2e and have a nice short syntax without the need to fall back to filters. Nice work.\n. ",
    "f2net": "I've seen that the undefined.json request happens only with the useLocalStorage() when I change the browser language to DE and clean the browser localstorage to see the language change. Than everything works bad (no translation even if I change to italian) until I go to an existing language and clean the browser localstorage again.\nTo have a default language when the determinedPreferredLanguage does not exist in the translation, what do you suggest?\nThank you again for your great support and your great and well documented module.\n. ",
    "colmaengus": "Hi,\nWe've also run into this problem where scope variables are initially null.\nIt would be useful if $translate.instant detected null as well as undefined and empty string.\nRegards\nColm A\n. ",
    "BillOTei": "yes it is\n. Hi, sorry for the delay, I am having the issue when using $translate.instant('unknown_id') inside a controller with the translation data set from a json object .config(function($translateProvider, $httpProvider) {\n        $.each(translations, function(lang, token) {\n            $translateProvider.translations(lang, token);\n        });\n        $translateProvider.preferredLanguage('en');\n    });\nwill try to do a plkr asap\n. yes that is the case, translations is just a json object, filled from the backend. But in any case, even if it was just an empty {} that would just display the translation ID right? just as in a promise?\n```\n$translate('unknown_id').then(function (translatedValue) {\n});\n\n```\nthanks for the hint angular foreach\n. ",
    "paxal78": "Use case: i use grunt-angular-translate with option nullEmpty = true\nSo: i can put all translations.....run GRUNT and only when i change the NULL values i will see the translations... otherwise all my translation will be blank.... very annoying:)\nIn my case developer and translation are two different persons\n. my idea\n```\n for (var j = 0, d = possibleLangKeys.length; j < d; j++) {\n          var possibleLangKey = possibleLangKeys[j];\n          if ($translationTable[possibleLangKey]) {\n            if ($translationTable[possibleLangKey][translationId] === null) {\n              result = translationId;\n            } else if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {\n              result = determineTranslationInstant(translationId, interpolateParams, interpolationId);\n            } else if ($notFoundIndicatorLeft || $notFoundIndicatorRight) {\n              result = applyNotFoundIndicators(translationId);\n            }\n          }\n          if (typeof result !== 'undefined') {\n            break;\n          }\n        }\n```\nin detail\n[....]if ($translationTable[possibleLangKey][translationId] === null) {\n    result = translationId;\n} [....]\n. no, grunt-angular-translate is right.\n. ",
    "TimotheeJeannin": "Ok, after a little bit of digging, the translate is built this way:\njavascript\n  return {\n    restrict: 'AE',\n    scope: true,\nThe fact that it creates a child scope that will prototypically inherit from its parent makes ng-click=\"myThing.myModel = null\" work, but ng-click=\"myModel = null\" not work.\nAs the scope prototypically inherit from it's parent, the myModel property of the translate directives shadows the myModel property of the parent. \nIs that expected behavior ? Why does the translate directive need it's own scope ?\n. ",
    "petebacondarwin": "All these ideas sound fantastic.\n- Grunt as a tool has served us well but Gulp can be better. It may also be worth looking at Broccoli but I think for angular-translate's purposes it would not provide that much benefit. Tasks that automate releases are also a real benefit to you and the community. It means that you'll be able to provide bug-fix releases really quickly to the users, and you can spend more time improving the code rather than doing tedious project related tasks.\n- Dgeni would love to have another friend in angular-translate.  More and more people are starting to show an interest but only through real usage can we nail down the best features to add to help grow it into the go-to tool for documentation generation.\n- Be aware that writing in ES6 right now does have its pitfalls. I would definitely suggest experimenting with the compiled ES5 code before committing to this direction.  One consideration would be that angular-translate should be looking to the future of AngularJS and preparing itself to support AngularJS 2.0, which will involve a major rewrite of many parts of angular-translate.  Perhaps this would provide the opportunity to migrate to ES6?\n- Perhaps you might consider component as a package format too?\n. I think what Jan is suggesting is that if you are to support Angular 1.3.x\nand 1.2.x, then you need multiple branches. Say angular-translate 2.0.x\nwould work with Angular 1.2.x and angular-translate 2.1.x would work with\nAngular 1.3.x.  Then you may release new versions for both of these\nbranches on a regular basis.  This is standard practice when using semver.\nOn 30 March 2014 14:55, Pascal Precht notifications@github.com wrote:\n\nIf we want to release more often and earlier, we cannot use only one\nrelease branch (alias master).\nWhy?\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/471#issuecomment-39025954\n.\n. AngularJS uses semver like this: You have dev branches named after the\nminor version. So new features should go in master/2.1.x branch\n\nappend: At the moment we're adding additional feature in the 2.0er release\nwhich is actually not semver anymore. This should be the next 2.1. But a\nbugfix could be applied to the next 2.0er-patch\n\nReply to this email directly or view it on\nGitHubhttps://github.com/angular-translate/angular-translate/issues/471#issuecomment-39026709\n.\n. That sounds good to me.\nOn 30 March 2014 16:42, Jan Philipp notifications@github.com wrote:\n\nThat sounds interesting. This would mean they are treating their master\n(master branch variants) being the default target like our canary branch\ntoday. I'm not sure this split is really required. It would fit for us: one\ndefault target branch (master) for the next planned version (holding either\nthe next minor or the next major). And for each major/minor released\nversion a dedicated branch for patches. Only if we plan to work on\ndifferent \"next versions\" simultaneously, we would have to introduce\nanother master/x.y\n\nReply to this email directly or view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/471#issuecomment-39028667\n.\n. \n",
    "9mm": "This should probably be added here I think: http://angular-translate.github.io/docs/#/guide/03_using-translate-service\nI searched around for a good hour. Eventually found this github issue.\n. Hey, I guess the fiddle didn't work.\nYes, I see XHR for the *.json files.\nWhat I'm trying to say is if you delete this part it stops working:\n$translateProvider.translations('en', {\n    \"HEADLINE\": \"What an awesome module!\",\n    \"PARAGRAPH\": \"Srsly!\",\n    \"PASSED_AS_TEXT\": \"Hey there! I'm passed as text value!\",\n    \"PASSED_AS_ATTRIBUTE\": \"I'm passed as attribute value, cool ha?\",\n    \"PASSED_AS_INTERPOLATION\": \"Beginners! I'm interpolated!\",\n    \"VARIABLE_REPLACEMENT\": \"Hi {{name}}\",\n    \"BUTTON_LANG_DE\": \"german\",\n    \"BUTTON_LANG_EN\": \"english\"\n  });\nBut that portion is already in the *.json file, so why do I have to include it again? \nThanks!\n. Ok awesome. That's what I figured. Here's my complete code though copied and pasted, I'm pretty sure it's not a bug on my end, although maybe you can see something below.\nbower.json\njson\n    \"angular-translate\": \"^2.6.1\",\n    \"angular-translate-loader-static-files\": \"^2.6.1\",\n    \"angular-translate-storage-local\": \"^2.6.1\"\nconfig() block of app.js\n```\n  // angular-translate\n$translateProvider.useStaticFilesLoader({\n    prefix: '/static/languages/',\n    suffix: '.json'\n  });\n  $translateProvider.preferredLanguage('en');\n  $translateProvider.useLocalStorage();\n```\nen.json\njson\n{\n  \"HEADLINE\"   : \"Headline english\",\n  \"INTRO_TEXT\" : \"Intro english\"\n}\ntest.html\nhtml\n<p translate>HEADLINE</p>\n<p translate>INTRO_TEXT</p>\nI can see the request to en.json returns successfully, and has the proper content type of application/json.\n. That Plnkr you sent doesn't work?\n. Do you have any ideas how I can debug this? I've checked every conceivable thing I can think of... my code is identical to yours. The translations just don't show. I can see the JSON files are dynamically being fetched, but the translation text doesnt change and just remains as the translation key. Is there a debug option or something?\n. So I'm not sure what this means, but this is what I've narrowed down...\nIt appears to originate in angular-translate-loader-static-files.\n```\n    $q.all(promises).then(function (data) {\n      var length = data.length,\n          mergedData = {};\n  for (var i = 0; i < length; i++) {\n    for (var key in data[i]) {\n      mergedData[key] = data[i][key];\n    }\n  }\n\n  deferred.resolve(mergedData);\n}, function (data) {\n  deferred.reject(data);\n});\n\n```\nIn my case, data is a single object it appears, instead of an array: {0: {translations: 'show up here} }.\ndata.length returns undefined, so the loop never gets called, and mergedData ends up being just {}.\nIf I make it say data = [data[0]] at the top of the function, works fine. I guess I'll just kind of try to dig in further, although I dont really know how another module could be interfering.\n. I do have angular-bluebird-promises in my bower.json, however I thought if your library is injecting $q directly than it would use the correct $q and not the slightly modified one.\n. I don't know what its from, but I wrote my own loader and just bypassed the issue.. Thanks!\n. @jgodi I bet you wrote that comment praying that I were still alive, but not hopeful for a reply. Today is you're lucky day, let me go dig it up.\n. It's hard to tell what I changed on this code from the default loader I took it from (because they were in the same commit), but here it is in full:\napp.js\n$translateProvider.useLoader('customTranslateLoader', {\n    prefix: '/static/languages/',\n    suffix: '.json'\n  });\n$translateProvider.useLocalStorage();\n$translateProvider.preferredLanguage('en');\nclient/app/translate/custom_loader.factory.js\n```\n// This custom factory for angular-translate solves the dilemma where\n// $q.all() returns an object instead of an array. We are modeling \n// the 'angular-translate-loader-static-files' loader\napp.factory('customTranslateLoader', function ($http, $q) {\nreturn function (options) {\nif (!options || (!angular.isArray(options.files) && (!angular.isString(options.prefix) || !angular.isString(options.suffix)))) {\n  throw new Error('Couldn\\'t load static files, no files and prefix or suffix specified!');\n}\n\nif (!options.files) {\n  options.files = [{\n    prefix: options.prefix,\n    suffix: options.suffix\n  }];\n}\n\nvar load = function (file) {\n  if (!file || (!angular.isString(file.prefix) || !angular.isString(file.suffix))) {\n    throw new Error('Couldn\\'t load static file, no prefix or suffix specified!');\n  }\n\n  var deferred = $q.defer();\n\n  $http(angular.extend({\n    url: [\n      file.prefix,\n      options.key,\n      file.suffix\n    ].join(''),\n    method: 'GET',\n    params: ''\n  }, options.$http)).success(function (data) {\n    deferred.resolve(data);\n  }).error(function (data) {\n    deferred.reject(options.key);\n  });\n\n  return deferred.promise;\n};\n\nvar deferred = $q.defer(),\n    promises = [],\n    length = options.files.length;\n\nfor (var i = 0; i < length; i++) {\n  promises.push(load({\n    prefix: options.files[i].prefix,\n    key: options.key,\n    suffix: options.files[i].suffix\n  }));\n}\n\n$q.all(promises).then(function (data) {\n  data = [data[0]];\n  var length = data.length,\n      mergedData = {};\n\n  for (var i = 0; i < length; i++) {\n    for (var key in data[i]) {\n      mergedData[key] = data[i][key];\n    }\n  }\n\n  deferred.resolve(mergedData);\n}, function (data) {\n  deferred.reject(data);\n});\n\nreturn deferred.promise;\n\n};\n});\n```\n. ",
    "soluml": "+1 to adding this to the guide. \n. +1 ... I'm currently seeing the TRANSLATION_ID or a brief second before the translated text comes through. It's very noticeable on slower connections. Would love to default it to something else or hide the text entirely while it waits for the translation.\n. Sorry, it sounded very similar to this issue. I've tried translate-cloak and it doesn't solve the issue. If I had the default text showing instead of the variable ID, it would look nicer.  I'll keep looking around the docs, thanks!\n. ",
    "rodrigobranas": "+1 works better!\n. Hello @rajush, is exactly the same situation that I experience. For the placeholder, I'm doing the same thing, with the filter. However, would be much better use the directive.\nThanks for replying!\n. Maybe, one solution for this case would be using the \"Controller as\" approach. This way, you have control over the $scope object and could pass it's reference directly, avoiding the new $scope.\n. ",
    "mort3za": "Also we can use it this way: \n$filter(\"translate\")(\"translation_id\", {interpolations_params});. ",
    "steelx": "$translate.instant returns me TrustedValueHolderType instead of a string. ",
    "alejandroiglesias": "$filter(\"translate\")(\"translation_id\", {interpolations_params});\nThat also returns me a TrustedValueHolderType instead of a string. How can I fix it?\nAnd what is a TrustedValueHolderType anyways?. ",
    "styopdev": "@steelx @alejandroiglesias \nFor getting value from TrustedValueHolderType  I used $sce.valueOf method\njavascript\nvar translation = $translate.instant(translationKey);\nvar translationText = $sce.valueOf(translation);. ",
    "arcelan": "In 2018, we also need this.... ",
    "narek-king": "@styopdev thank you . ",
    "shlensky": "In 2019, we also need this.... ",
    "zloy531": "Hello. Sorry, but I have same problem when use $translateProvider.useLocalStorage();:\nUncaught Error: [$injector:unpr] Unknown provider: $translateLocalStorageProvider <- $translateLocalStorage <- $translate\nI'm include ngCookies:\nangular.module('starter', ['ionic', 'ngCookies', 'pascalprecht.translate']) and of course add <script src=\"lib/angular-cookies/angular-cookies.min.js\"></script>.\nWhere can be my error?\n. ",
    "Fattouh92": "@zloy531 I had the same error, i included:\n/angular-translate-storage-cookie/node_modules/angular-cookies/angular-cookies.min.js\nand\n/angular-translate-storage-cookie/angular-translate-storage-cookie.min.js\nand it worked. downloaded from npm\n. ",
    "fkiller": "@PascalPrecht @tspaeth Thanks for the feedback. I know that it's kinda breaking change especially on formatting, so I understand the fraction. The reason that I switch to $interpolate because there is no moment to cook {lang} when configuring translateProvider. (Correct me if I'm wrong)\n. ",
    "rjokelai": "Sorry, did not notice https://github.com/angular-translate/angular-translate/pull/445\n. ",
    "davidrehakcz": "Html file:\n\n\nJavascript file:\nvar app = angular.module('fincalcApp', ['ngRoute', 'pascalprecht.translate']);\n// Angularjs i18n configuration\napp.config(['$translateProvider', function ($translateProvider) {\n```\nvar v_lang = window.navigator.userLanguage || window.navigator.language;\n$translateProvider.preferredLanguage(v_lang.substring(0, 2));\n$translateProvider.useStaticFilesLoader({\n    prefix: '/locales/lang-',\n    suffix: '.json'\n});\n```\n}]);\nAnd i have folder \"locales\" with several lang-*.json files.\n. Im not sure if i understand. Im quite new to cordova. Anyway its everything packed into one apk and then deployed into android emulator.\n. Version android: 4.1.2\n. @knalli You are most probably right. If i dont use the static loader, it works just fine. \n. Allright, i have managed to fetch the json via sync ajax request and now i would like to assign it to translations:\n$translateProvider.translations(v_lang, v_json);\nWhere v_lang is the language and v_json is localized json.\nAny idea?\n. I have json file as follows:\n{\n    \"navbar.home\" : \"Home\"\n}\nI load this file into the javascript object v_json using ajax request.\nI would like to then simulate something like:\n$translateProvider.translations(\"en\", {\n    \"navbar.home\" : \"Home\"\n});\nBut using the javascript object v_json (parsed using method $.toJSON()). Something like:\n$translateProvider.translations(\"en\", v_json);\nI tried above but it doesnt work. Hope its more clear now.\n. Ohh well. I try again :-) Thanks a lot though for beeing patient.\nAs i already said, im trying to develop mobile application using cordova so i can target it to several platform. After some research i have decided to go with Angularjs for backend and Ratchet for frontend. Furthemore, i have to deal with the i18n. Again after some research i decided to go with angular-translate library.\nI have setup main index.html and using angularjs templating(routing) system. Each of the partial html  files does contain the \"translate\" parameter for each html tag i would like to translate.\nThen based on the documentation i have configured angularjs routing as well as the translation.\nNow, i would like to use for each of the language separate json file and then just load if based on the device locale. As i said, it works just fine if i do use the basic usage as follows:\n$translateProvider.translations(\"en\", {\n\"navbar.home\" : \"Home\"\n});\nBut once i try to use the real json files, that are read by ajax request, it doesnt work.\nvar v_json  = $.ajax(...etc..)\n$translateProvider.translations(\"en\", v_json);\nNow i would like to ask, if there's a way to achieve above. Also, as mentioned above, the static file loader was unfortunately not working, while beeing deployed to real/emulated device. Ripple-emulator is just fine.\n. I have managed to workround it as follows. I have created for each language separate javascript file, that contains configuration for just one language. Thus its file per language configuration, that i wanted to achieve with json files. So far so good, but i would appreciate help with fixing it properly.\n. ",
    "woodxxman": "I have got the same problem as you do, finally i found the problem is the path not correct\nso please double check the path $translateProvider.useStaticFilesLoader({\n    prefix: '/locales/lang-',\n    suffix: '.json'\n}); prefix should be without \"/\" if the file located in the same order as index.html\n. ",
    "jclalala": "So we're also on Cordova and angular-translate works fine.\nThe problem using StaticFilesLoader is as @woodxxman indicated; that the context path of your Android Webview is different from your development environment.\nE.g. Under localhost DEV web context,\nprefix: '/locales/lang-' <-- would yield http://localhost/locales/lang-\nUnder your Android Webview context,\nprefix: '/locales/lang-' <-- would yield file:///locales/lang-\nSo what you want to do is remove the leading '/' so your Android Webview would load,\nfile:///android_assets/www/locales/lang-\nThe above is assuming that your index.html is under file:///android_assets/www/\n. ",
    "salvisb": "This was still relevant in 2016. :) Thanks @jclalala , that worked for me!\n. ",
    "ourarash": "Still relevant. In my case, it solved the problem with using ng-translate in ionic. Thanks @jclalala!. ",
    "dfblaze": "Still highly relevant in 2017 - thank you @jclalala!. ",
    "phuwin": "In my case, when I inspect the phone with webview, it doesn't even load my json file. I checked network tab in the chrome inspector, no error about the .json file, it's not loading and seems like useStaticFilesLoader doesn't even run in Android... I am so confused now!!. No luck with useStaticFilesLoader, I put the translations as angular constants and inject the translations into config (not the best way to do this but it works, and the locales are in separate files so it is easier to modify).\nangular.module(\"app\").constant(\"en\",{\n    \"ADMIN\":\"Admin\",\n    \"UPCOMING_EVENTS\":\"Upcoming Events\"\n})\nangular.module(\"app\").config (function($ionicConfigProvider,$translateProvider,en,fi){\n    var isApp = !document.URL.startsWith('http');\n    if (isApp) document.addEventListener(\"deviceready\", onDeviceReady, false);\n    else {\n      setUpLang();\n    }\n    function onDeviceReady() {\n        console.log(\"onDeviceReady\");\n        setUpLang();\n    }\n    function setUpLang(){\n        getLang(function(locale){\n            locale = locale.split(\"-\")[0];\n            console.log(locale)\n            $translateProvider.translations(\"en\",en)\n            $translateProvider.translations(\"fi\",fi)\n                    .preferredLanguage(locale).fallbackLanguage('en').useSanitizeValueStrategy('escapeParameters'); \n            $translateProvider.use(locale)\n        })\n    }\n    function getLang(callback){\n      if (navigator.globalization) navigator.globalization.getLocaleName(\n          function (locale) {\n            if (typeof callback === \"function\") callback(locale.value);\n          },\n          function () {\n            console.log(\"Something is wrong. Language is set to english\")\n            if (typeof callback === \"function\") callback(\"en\");\n          }\n      ); else if (typeof callback === \"function\") callback(\"en\");\n    }\n})\nAn addition critical is that in device runtime, for some reason angular-translate  doesn't use the preferred locale automatically (eventhough it works perfectly in web browser), I need to add $translateProvider.use(locale) after the configuration to make it work in my device. ",
    "popovevgeny": "Here's what I found, it works:\nRegistering the interceptor later (doing so in a run() block instead of a config() block might already do the trick)\nhttp://stackoverflow.com/a/21632161/1495554\n. ",
    "molerat619": "I'm sorry but after 20 minutes of reading issues, I finally want to ask, if  $translateProvider.useDefaultTranslationWhenNotFound() has been implemented and how I can use it.\nI want to let a translation for a key fallback to english if the key is not available in the current language.. ",
    "kleinph": "This is a duplicate of issue #455 \n. No $translateProvider.registerAvailableLanguageKeys() is chainable, but $translateProvider.determinePreferredLanguage() is not (in this certain case).\nIf you look at https://github.com/angular-translate/angular-translate/blob/457c020dfa35131bd2a65214e9f146eeb0b1512f/src/service/translate.js#L628 you can see that there is no return this;\nI am using version 2.0.1.\nShould I make a pull request?\n. If you specify the aliases parameter you will not end in this else path.\n. Sure. I read in your contributing guide that one should branch of form master and send the PR to canary.\n. Done\n. ",
    "nktssh": "@PascalPrecht cloud you, please, provide the correct way of using this module?\n. I'm using staticFileLoader in this way.\nfile: app.js\nangular.module('_', [_])\n    .config(function ($translateProvider) {\n        .....\n        $translateProvider.useStaticFilesLoader({ prefix: \"some prefix\", suffix: \".json\" });\n        ....\n    })\nIs it right way to us staticFileLoader?\nAlso, can it load all files in async way on the first start of app? I see big delay when change language...\n. nope. Great thanks for it.\n. ",
    "philippd": "ok, see #494 as i couldn't figure out how to change it in this pr ;)\n. new pr targeting canary: #514 \n. ",
    "InstanceOfAnObject": "Well, if one part request went wrong is because something in not working properly on the server-side.\nI don't see why we should show and half translated version of a website.\n. The app will be unusable if instead of the translated text I show translation keys.\nAnyway, IMHO there must be a way to know if all parts were loaded correctly and let the user choose to do something about it or not. \n. ",
    "xeroply": "I just ran into this issue and I think maybe I can clarify why the current behavior is undesirable with a couple of examples:\n1. I'm showing a loading indicator (spinner) while various assets specific to a module are lazy loaded, including i18n files (via the partial loader). When these finish (whether successful or not), I need to hide the spinner. I'm attaching to various promises, including the one from $translate.refresh() to know when to do this.\nHowever, if the newly added translation part fails to load, the $translate.refresh() promise is not only not rejected, it's never resolved either. It just hangs there forever, and so does my spinner.\n1. I'm also returning the $translate.refresh() promise as part of a promise chain in a ui-router resolve function (the Guide advertises this as a feature, in fact: \"Since $translate.refresh() returns a promise, it works beautifully together with either ngRoute module or UI Router.\"). However, since this promise is never rejected nor resolved when there's a loading error, the state transition just hangs in limbo forever.\nAs you can see, this behavior clearly breaks the promise pattern. A promise should either resolve or reject at some point. And rejecting it, contrary to \"breaking the app\", is the only way to provide a chance to detect that something has gone wrong and react in some reasonable way. In an ideal world, the rejection value would indicate which language key failed in the refresh (and which part, if using translate partial loader), but that's not as essential.\n. ",
    "JeroMiya": "I haven't tested it, but the pull request @tspaeth submitted should work for my use case if it works as advertised. Thank you! Closing.\n. Effectively, translateFunc works like the filter, except you can invoke it from code, not just the template. It is more of a convenience for dynamic databinding. Generally speaking I would use the global error handler rather than pass in a custom errorFunc for each call - I just provided it here as an optional argument to translateFunc because this method would otherwise hide the promise used to retrieve the translation.\n. ",
    "mdemille": "Has this had any progress? I'm in need of a way to get the translation table, just like the original poster. See my stackoverflow question: http://stackoverflow.com/questions/29240325/angular-translate-get-translation-table\n. I think I got it. Let me know if I need to do anything else \nhttps://github.com/angular-translate/angular-translate/pull/977 \n. ",
    "skiant": "I've got a similar need for an app I'm working on (display a directive three times in a single view, each time in a different language), and I found this ticket while looking for a solution.\nIs there something I can do or progress made already?\n. Thanks for the quick reply.\nI guess the changes in v3 architecture would make this very hard to backport into v2, and v3 isn't ready for production use?\nThis feature is quite important for our users, hence I'll probably need to find a way to circumvent the current limitation.\n. Got it, thank you very much for your time.\n. ",
    "odedniv": "This is allowed on #1328 and added to 2.9 milestone. Should this be closed?\n. Another option is to have a standalone translate-attr directive similar to ng-class:\nhtml\n<div translate-attr=\"{ title: 'TITLE' }\">\n  ...\n</div>\nIt should also allow a one-time bind with the :: prefix, but still watch for language changes. This is my issue with the filter: I can't use a one-time bind since language changes will not be detected, so I have to create an extra watch for a static value.\nWhat do you think?\n. @knalli I wasn't thinking of replacing the current translate-attr-*, just adding to it. Actually not even adding to it since it would be a separate directive altogether (the translate-attr-* is handled inside the translate directive if I understand correctly).\nI don't see any breaking changes, unless you'd also like to remove the other style (which I personally think you should, I can explain my reasons if you like), but that would be in a major version anyway. Maybe deprecate it for now.\nAs for the work required I would gladly do it, though I'm afraid of breaking stuff since the translate directive is pretty complex and last time I tried to add something many edge cases failed. If you know you'll have the time to code-review my work I don't mind putting my time on it (the filter is a real pain in many ways).\n. Ha weird... well the docs should be updated\nThanks!\n. Yes, just saw it, already done. It seems to have failed a test, I'm working on it.\nI also looked at the tests while implementing and tried to figure out where to squeeze mine, but failed to... I would love it if I could get some guidance there (or a pull request to my branch or something).\nTests are always the most cumbersome part of a repository :smile: \n. Should I insert/fix the tests with commit --amend or new commit?\n. Just fixed failing tests, new tests will come tomorrow (will update with a comment).\n. Added tests. Not sure I'm using language negotiation properly there, please go over it before pulling.\n. For anyone coming here to work around it and get objects/arrays from this library I suggest the following: use JSON.stringify in the translation configuration on your object/array, and JSON.parse when you retrieve it.\nI understand that this library is not meant to be used this way, but in my case I had an object built by many attributes and nested objects. I really didn't want to translate each and every attribute's value and just wanted each language to provide the full object structure.\n@knalli the original thread #352 is locked, but I suggest you add this comment there for anyone else still interested in doing this in spite of your warnings.. Note that this is a very basic implementations. I was looking through the translate directive and there were a bunch of complexities I either didn't understand, or wasn't sure how to fit them nicely.\nSo I used a straight-forward approach instead of trying to get all the features supported by translate directive - as a start (documentation matches).\n. canary seems to be failing, opened an issue: #1552.\n. @knalli what do you think about this solution? (in regards to #1027)\n. Well I don't know any language other then English, will someone translate my addition to the docs?\n. I am getting this error locally as well. I got it before creating the pull request, but I thought it was a local problem and now I see Travis is getting this as well.\nIt's a fresh clone of the project, and node_modules/angular/package.json state 1.5.8. Running npm run clean-test-scopes didn't help.\nBottom line, it's not just Travis.\n. Running grunt test I don't see any error, not sure how else to trigger them.\nShould the new file maybe be added to https://github.com/angular-translate/angular-translate/blob/master/Gruntfile.js ?\nIs there some build process to run?\n. In this case I won't be touching anything... Glad to see people need it :smile:\n. @a-change this looks like a separate bug (which is not really stackoverflow material in my opinion).\nLooks like the way translate-attr adds the attributes doesn't compile the element in the way ng-attr-* does for example (you can add new directives with ng-attr-*).\nIn my short search I couldn't find where ng-attr-* is implemented, though I'm afraid it's not a normal directive. If you can find how they do it and add a pull request that would probably be best, otherwise I encourage you to open a separate issue for this.\nPS. what you wrote about ui-select might actually be a priority issue (or more than that if translate-attr is triggered on the next digest with a watcher), which is another different issue that might even be harder to solve.. @jamesbrobb which issue? Multiple things are discussed here. You should submit a new issue with your specific problem (this issue has been closed).. @jamesbrobb I told @a-change as well - this is not related to the original bug opened by @nunof07, why not open a separate issue that can be discussed with a proper title?. Well actually I just saw that it was wrong (as I created a new directive), so I fixed it... Any reason not to?\nI know from my experience that it allows elements, and you can see that from the code.\n. ",
    "JerryBels": "@odedniv maybe wait for 2.9 to be released and then close ? :)\nGreat work btw !\n. For now I simply define my translations in the controller using $translate service, and then use a regular one time binding :: in the view. I guess it's the best I can do until angular-translate adds the :: functionnality to its filter and such ?\nI don't really want to use your extension, @ajwhite , because I don't want to have to define an HTML element for every piece of text I want translated, since I actually rely heavily on the translate filter :/\n. @ajwhite actually, a question : do you think the performance gain worth installing your extension and adding elements to bind translations to ? Wouldn't the HTML be more heavy, so this nullify the improvement ?\n. Hey @ajwhite, thanks for answering :) Are you planning to run these tests ? If so, I would be very interested if you could give your conclusions here whenever it's done !\nI must say I don't really know how to run that kind of tests myself :/\n. Hello, and thanks for answering,\nwhich method should I try with that new release ? Filter ? Directive ? Service ? Something else ?\n. Okay, I tried with many ways, didn't help :(\nSomething I didn't specified, all my files are in local (no remote loading) so I really don't get why the filter (or any other way, whatever) returns the key first before the translation takes place and sets the right text. Since there IS a value to display ( the key, for example 'tabs.gallery' ), even ng-cloak won't work...\n. @mr-White +1, great idea to return blank instead of the key, I think (or at least give this possibility as a configuration option).\nbtw, last version didn't solve the issue.\n. Hey, thanks @knalli  for the share, I will take a look at what I can do with it :)\nAs for my configuration, I will detail my setup a bit more. So it's a mobile app based on Ionic framework - which relies on Angular. \nI have a file \"locales.jsincluded inindex.html` which contains : \nvar translations = {\n    languages: [\n        'en',\n        'fr'\n    ]\n};\nIn my .config I'm using $translateProvider to configure the languages as follow : \n```\nfor (var i=0; i<translations.languages.length; i++)\n            $translateProvider.translations(translations.languages[i], translations[translations.languages[i]]);\n    $translateProvider.fallbackLanguage('en');\n    $translateProvider.useSanitizeValueStrategy('escape');\n\n```\nAnd that's all. After that the routing hapens, and on the loaded page I first see the translation ID, no matter if I use the directive, filter or service to get the translations, and then the wanted translation appears.\nOne thing to note is when I test it on the browser, I usually doesn't see the translation ID, and when I do it's changing to the wanted translation so fast it's barely seeable. Don't know if this can help figure out what's wrong though.\n. Hey @knalli ,\na demo will be hard to provide since it's only seeable on phones and using Cordova, a codepen or such opened with a regular PC would look good. When testing my app on PC there is no issue.\nI could provide a video of what is happening, along with code, if it can help.\nAlso I still have to try the custom error handler that you mentionned before, just didn't have time to work on this again yet (rush at work, you guys know how it is), will do this in a week or two.\n. @rdesoky thanks, man ! You saved the day. \nHere was the issue : I was calling a function that did $translate.use(/lang_id/), but in the deviceready event callback ! Calling it out of this callback fixed the issue.\n. ",
    "daemon1981": "Sorry didn't find a related issue\nI've just started to use your librairy and got blocked on this feature\nI propose to fix the demo ex1_basic_usage. It's a little fix but may be it can help other developpers to go directly to the right syntax.\nhttps://github.com/angular-translate/angular-translate/pull/504\n. thx !\n. ",
    "forresst": "I just noticed that the German version does not contain these 2 parts : more precisely, the two paragraphs that contain angular-translate-interpolation-default.\n. I will make the necessary\n. New in #545\n. I will make the necessary\n. New in #544 \n. With pleasure sir !\n. @tspaeth : ton fran\u00e7ais est excellent ! ;-)\n. Oups ! @PascalPrecht : Je m'appelle Pascal (Almost, it lacks a p ...) ;-)\n. Done #737\n. @knalli Warning : The English version contains German\nhttps://github.com/angular-translate/angular-translate/blob/master/docs/content/guide/en/12_asynchronous-loading.ngdoc#L269-L271\n. ",
    "lcarva": "A little late, but if anyone comes across this, using unicode characters will get the job done. Instead of \"&nbsp;\" use \"\\u00A0\". This is particularly handy for attributes such as placeholder and title.\n. If I pass an object to translate-values that has a function as an attribute, that function will be invoked. I'm not sure if it's a security concern, but it's unexpected behavior. It's even more problematic, if I'm passing an object that has methods with side effect in it (like making API request).\nI easily got around this issue by creating a new strategy that would simply ignore attribute functions. Shouldn't angular-translate do this out of the box?\nIt's also inconsistent that this only occurs if jQuery is used.\n. Yeah. I think making it configurable might be the best option. It would definitely solve my use case.\n. It'd be nice if there was a best practices article. I didn't realize earlier that when an object is used as a param and a escape strategy is used, it'll actually escape every attribute recursively. I understand the reason for it, and don't disagree, but it's not obvious at first.\nWhat I end up doing is using a simplified version of the object just for translate:\n<div translate=\"some.key\" translate-values=\"{ spam: bigObj.spam }\"></div>\n. ",
    "mischkl": "I guess this can be closed as it was added with b685601?\n. ",
    "polyclick": "Prolly has to do with the fact that angularjs website is marked as 'insecure' and the .js include doesn't work.\nOr am I the only one receiving a ssl certificate safety warning at: https://angularjs.org/\n. Works in firefox tho\n. Works again! ;) thanks!\n. ",
    "endorama": "+1\n. ",
    "HansCz": "Here's what I get in the chrome console:\n[blocked] The page at 'https://angular-translate.github.io/docs/#/api' was loaded over HTTPS, but ran insecure content from 'http://rawgithub.com/angular-translate/bower-angular-translate-handler-log/master/angular-translate-handler-log.min.js': this content should also be loaded over HTTPS.\nmaybe finding the string 'http://rawgithub.com/angular-translate/bower-angular-translate-handler-log/master/angular-translate-handler-log.min.js' and replacing it with '//rawgithub.com/angular-translate/bower-angular-translate-handler-log/master/angular-translate-handler-log.min.js' would fix the issue?\nI'd try it out it myself, but have no idea how to test it before submitting a pull request. Anybody know how?\n. ",
    "mtgleeson": "I had a similar problem where it was making 3 calls to my configured useUrlLoader URL:\napplication.config(['$translateProvider', function ($translateProvider) {\n    $translateProvider.useUrlLoader('/messages');\n    $translateProvider.preferredLanguage('en');\n    $translateProvider.fallbackLanguage('en'); // have now removed this line\n    $translateProvider.useSanitizeValueStrategy('escaped');\n}]);\nAfter moving .fallbackLanguage('en'); I now only get 1 call to my URL. \nThis also seem to fix translate-cloak which wasn't working prior to this change. I think what was happening here was multiple call were made to my message URL, the translate-cloak class was being removed on the first $translateLoadingSuccess event from the first URL call made - but before the translations were made on the 2nd or 3rd URL calls so I was still seeing the flicker of un-styled content (FOUC). \n. ",
    "Rhionin": "Just adding a voice. I'm also seeing this problem, and have verified that it occurs when both preferredLanguage() and fallbackLanguage() are called. If only one is called, one file request is made. But if both functions are called, three requests are made.\nThis also occurs on StaticFilesLoader and PartialLoader, so my guess is that this doesn't relate to the loaders at all.\n. ",
    "tedyyu": "@perttuk have you submitted the issue to angularjs? I'm also pending on the fix.\n. ",
    "pkozlowski-opensource": "@PascalPrecht could you guys try to narrow it down if you think that problem comes from AngularJS? This is hardly a minimal reproduce scenario for an AngularJS bug :-/\n. ",
    "perttuk": "ok, thanks for the info\n. ",
    "caitp": "You know, this could also be fixed in angular-translate in the short term on https://github.com/angular-translate/angular-translate/blob/master/src/service/default-interpolation.js#L88 (I think, not positive here)\nBasically\njs\n$translateInterpolator.interpolate = function (string, interpolateParams) {\n    if ($sanitizeValueStrategy) {\n      interpolateParams = sanitizeParams(interpolateParams);\n    }\n    return $interpolate(string)(interpolateParams || {});\n  };\nGiving it an empty object should be just as good, even after the changes that were added recently. Slightly less performant (you don't really want to use a static object in case someone decides to assign things to it in the expressions), but good enough if it takes another week to get the fix in. I don't think undefined contexts was ever meant to be supported, really.\n. ",
    "jshado1": "It is definitely a race condition: wrapping the content of the stateChange event callback in a $timeout for ~~2000~~ 500 resolves the issue. In fact a timeout without any wait works about 90% of the time.\n. I'm doing it this way because of a unique condition with the title tag: it can't have children. Ordinarily, I would just use span tags to do this, but that's not possible for this because they would be printed literally.\nI need to translate 3 separate parts:\n$rootScope.windowTitle = 'My Site - {part1} - {part2}';\n$rootScope.windowTitle = 'My Site - Current Page - Something else';\nNormally I would do:\n<h1><span translate=\"mySite\">My Site</span> - <span translate=\"{{$root.$state.name}}\"></span> - <span translate=\"{{someScopeParam}}\"</span></h1>\nI don't think variable replacement is an option because the parts that I'm replacing also need translating--instead of something like Page {{x}} of {{y}} (which I do successfully elsewhere).\n. I'd like to nip this in the bud by setting the language at app init to avoid multiple translation passes--when preferredLanguage is set and the language is subsequently changed (apparently even when immediately changed) with use(), angular-translate first runs with the preferred language, and then again with the new language. IMHO, that's unnecessarily expensive. Having a fallback is great, but the cost of the current behaviour is unwarranted.\nIdeally, I'd like to be able to pass a function (with injectables) to $ranslateProvider.preferredLanguage() like this:\njavascript\n$translateProvider.preferredLanguage([\n    '$myService',\n    function( $myService ) {\n        // do some stuff\n        return langKey;\n    }\n]);\nThat way the correct language is set from the start.\nI am aware of $translateProvider.detectLanguageAutomatically(), but that is not dynamic enough because it uses only browser info. In my case, the order of preference is:\n1. Supported language specified in the URL\n2. Supported language requested by browser or from localStorage/cookie from previous visit\n3. App default language\nThanks for your suggested workaround with $watch. I'll give that a try. I think I'll also try to get it to work with $rootScope.$emit() teamed with $rootScope.$on() for efficiency because $watch is expensive.\n. I tried the $watch, but I encountered the race condition--it only works with breakpoints/timeout:\n``` javascript\n$rootScope.$watch('windowTitleParts', function watchWindowTitleParts(parts) {\n    if ( parts.pt1 && parts.pt2 ) {\n        $rootScope.windowTitle = 'My Site - ' + parts.pt1 + ' - ' + parts.pt2;\n    } else if ( parts.pt2 ) {\n        $rootScope.windowTitle = 'My Site - ' + parts.pt2;\n    }\n},true);\n$rootScope.$on('$stateChangeStart',\n    function updateWindowTitle( event , toState , toParams ) {\n        $translate('windowTitle.pt2').then(function( string ) {\n            $rootScope.windowTitleParts.pt2 = self.pt2 = string;\n        });\n        if ( angular.isDefined( toParams.itemId ) ) {\n            $rootScope.windowTitleParts.pt1 = self.pt1 = toParams.itemId.capitalize();\n        } else {\n            var stateTitle = toState.data.title.replace(' ','_').camelize();\n            $translate( 'fe'+stateTitle ).then(function( string ) {\n                $rootScope.windowTitleParts.pt1 = self.pt1 = string;\n            });\n        }\n    }\n);\n``\n. I also tried this, which I think is more in-line with your suggestion, butthen()never gets called regardless of breakpoints/timeout. I combined everything into the sameparts` obj to reduce the number of watches, and set $watch arg3 to true so it would watch the whole object.\n``` javascript\n$rootScope.$watch('windowTitleParts', function watchWindowTitleParts(parts) {\n    console.log('parts: ',parts);\n    if ( 'pt1' in parts ) {\n        if ( 'val' in parts.pt1 && 'pt2' in parts && 'val' in parts.pt2 ) {\n            $rootScope.windowTitle = 'My Site - ' + parts.pt1.val + ' - ' + parts.pt2.val;\n        } else {\n            $translate( parts.pt1.key ).then(function( string ) {\n                $rootScope.windowTitleParts.pt1.val = self.pt1.val = string;\n                console.log('pt1: ', self.pt1);\n            });\n        }\n    } else if ( 'pt2' in parts ) {\n        if ( 'val' in parts.pt2 ) {\n            $rootScope.windowTitle = 'My Site - ' + parts.pt2.val;\n        } else {\n            $translate( parts.pt2.key ).then(function( string ) {\n                $rootScope.windowTitleParts.pt2.val = self.pt2.val = string;\n                console.log('pt2: ', self.pt2);\n            });\n        }\n    }\n},true);\n$rootScope.$on('$stateChangeStart',\n    function updateWindowTitle( event , toState , toParams ) {\n        $rootScope.windowTitleParts.pt2 = self.pt2 = {key: 'windowTitle.pt2'};\n        if ( angular.isDefined( toParams.itemId ) ) {\n            $rootScope.windowTitleParts.pt1 = self.pt1 = {val: toParams.itemId.capitalize()};\n        } else {\n            var stateTitle = toState.data.title.replace(' ','_').camelize();\n            $rootScope.windowTitleParts.pt1 = self.pt1 = {key: 'fe'+stateTitle};\n        }\n    }\n);\n```\n. I believe this is an issue with the lib itself. Perhaps not a bug, but I think this should work. But the only way I can think of would be a fundamental change to how the directive works.\n. ",
    "robertochingon": "Hi, I have same problem.\nIf I do:\n$rootScope.title = $translate(pageTitle);\nInitially my app is in english, so I need to change english --> spanish (not working) --> english --> spanish (working)\nAnd If I do this:\n$translate('PAGE_TITLE_INDEX').then(function( string ) {\n                console.log (\"title:\" + string); \n            });\nI get a javascript error: \nTypeError: undefined is not a function\n    at Object.$scope.changeLanguage (http://localhost/js/controllers/location.js:76:44)\n    at elementFns (http://localhost/lib/angular/angular.js:6365:19)\n    at Object.$get.Scope.$eval (http://localhost/lib/angular/angular.js:8057:28)\n    at http://localhost/lib/angular/angular.js:12268:13\n    at http://localhost/lib/angular/angular.js:12130:11\n    at Array.forEach (native)\n    at forEach (http://localhost/lib/angular/angular.js:130:11)\n    at NgModelController.$setViewValue (http://localhost/lib/angular/angular.js:12128:7)\n    at http://localhost/lib/angular/angular.js:14626:18\n    at Object.$get.Scope.$eval (http://localhost/lib/angular/angular.js:8057:28)\nI have read @jshado1 approaches but honestly I think I\u00b4m not skilled enough, so I don\u00b4t really understand what he is doing? Could you help with any workaround (if exists)?\nUPDATE:\nI think I have fixed it this way:\n$translate.uses(langKey).then(function() {\n                 $rootScope.title = $translate('PAGE_TITLE_INDEX');\n            });\n. This is the title of the github project: Translating your AngularJS 1.x apps. So, supposely it should work on angular1.0.7, right?\nTo migrate to a newer angular version is not an option right now. If angular-translate is not compatible with any angular version, could you please let me know which version of angular-translate is compatible with angular1.0.7? . Ok, I have checked compatibilities. Let\u00b4s try in another way. Could you please confirm which version of angular-translate resolves the service $translate as a promise (so .then can be used in the service). Is not clear to me which version is supporting this functionality reading the logs.. ",
    "luisromangz": "Thanks from the fast answer, I see the motivation on using $emit now.\n. ",
    "spawnedc": "Quite similar, but different issues at the same time. Maybe I can fix both in the same PR.\n. Thanks for the heads up, I was just about the start working from the master branch :)\n. I am so sorry, can't believe I missed the contributing doc :/ I will amend my commit messages as soon as I can.\nAlso, I would love to translate the docs to Turkish! \n. Please ignore this PR, I created a new one: #537\n. @PascalPrecht I'll quad check this time ;)\n. Sure will do!\n. @tspaeth I started translating the docs but unfortunately there are lots of things going on in my life lately, so I couldn't find a chance to continue my work. Will give you guys an update as soon as I can.\n. The intention of the test is to see if calling use('en_EN') would actually load the en language.\n. If a user wants to provide one file for all English languages (en_*) then they would want to provide one translation, and it would be much better to use better representation of the language, no?\n. Can you be more specific please? I don't really see the problem, probably I'm missing something.\n. OK things are clearer now, thanks for the explanation. The test case you want is done for the Turkish language. \nit('should load the language with the exact match first even if a wildcard is used'\nSo it tries to use the exact language first, then goes to the alias or wildcarded option. In the test case, we have tr_* -> tr alias, but also tr_TR language is added to the available language keys. So if tr_TR is requested, it will try to load tr_TR first, if it's not in the available language keys, then it tries to find the wildcarded alias.\n. OK, an explanation that simple would've been enough :) I'll update.\n. ",
    "DataPrintGrafik": "Hi,l thanks for reply, i'm a newbie of plunker... i tried to put some code (missing angular and angular translate reference js...):\nhttp://plnkr.co/edit/17JjOy?p=info\nthe problem is very simple.. call $translate after addPart doesn't return translated string, calling on event (for example mouse click) or using directives on html it work!\n. thanks, do you have some suggestion about the problem?\nwhy calling $translate on button click or using directives instead of $translate service it work, but calling $translate on controller init doesn't work? i'm missing some angular-translate concept?\n. Thanks i solved the problem calling $translate on $translateChangeEnd event!\n. ",
    "atarsh": "Any news on this? I bumped into the same issue.\n. http://plnkr.co/edit/RlLrKrOH4FCsWSZJ4egO?p=info\nI basically copied your example, it's not working all the way (locale files return empty for some reason) but that's besides the issue - on my localhost they load fine.\nhowever, you can see in the network tab that locale-en.json is being loaded, while it obviously shouldn't.\nif you comment out fallbackLanguage it doesn't try to load en locale, but you also don't get a fallback language :)\n. @PascalPrecht I don't think it is anything to do with being an array or a single language - the point is that my \"en\" translation are already defined in-line, they shouldn't be loaded from external file even if I did pass in an array that includes \"en\".\n. @PascalPrecht right, my point is that it doesn't matter if you select multiple languages as a fallback or a single language as a fallback, if one of the languages selected is defined in-line (rather than in an external file), the library shouldn't try to load it.\nI'll be waiting for updates on this...\nthanks a lot!\n. ",
    "SimoneSabba": "I've the same problem! Have you solved in same way?\n. ",
    "techjacker": "haha okay thanks anyway!\n. you're right it does work with inline templates when I use a vanilla angular set up with ui-router.\nHowever, when I use it with ionic the text in the tabs title attribute doesn't get interpolated, it just outputs TAB_ABOUT instead of the actual translation:\nJavaScript\n  <ion-tab title=\"{{ 'TAB_ABOUT' | translate }}\" ui-sref=\"about-loggedin\">\n    <ion-nav-view name=\"about-tab\"></ion-nav-view>\n  </ion-tab>\nI guess ionic are the guys to chase up on this. Thanks for your help.\n. ",
    "rockstardev": "@tamtakoe I try to avoid advocating - but angular-translate is probably the best \"framework\" for multilingual apps that's currently available. And it's best exactly because it works client-side - i.e. you can switch resources without reloading pages.\nIn your case I think it's problem of architecture, rather than angular-translate. I had somewhat similar problem - say I needed to get some status string from server, i.e. \"Please verify your email\". So when I get that string from server I would do:\n$translate('Please verify your email').then(function(translationVal) {\n    $scope.myHtmlBoundString = translationVal;\n});\nNow, I quickly stumbled upon problem - when I switch language, that \"Please verify your email\" string would remain there. Until I started thinking about it and obviously, better approach is to directly assign that string I get from server and in HTML have something like:\n<span translate=\"{{myHtmlBoundString}}\"></span>\nNow, when I switch language, that string also gets translated dynamically = win. To be honest, I do have few issues with this approach, but probably I am doing something wrong so my next post will be question to devs here.\n. I mean, let's say I have following text:\n\nHello world, I am first sentance.\nNow, this sentance needs to be on newline.\nAnd this one\n\nNow let's say I want to translate all that as conceptually same item. Do you require me to break down all that into\n\n{{ \"FIRST_SENTANCE\" | translate }} < br />\n{{ \"SECOND_SENTANCE\" | translate }}<br />\n{{ \"THIRD_SENTANCE\" | translate }}\n\nOr there is easier way to do this with just one value?\n. @PascalPrecht Sorry to bother you with this, but can you please give me an example of translations containing markup? I've been banging my head since yesterday with this. Just a simple example would be perfect, like how would I put this block in translation:\n<p>First Sentance <br/> \nSecond Sentance </p>\n<p>Paragraph</p>\n. ;( That doesn't work since </p> tags are outputed as HTML encoded - text ends up being single line with HTML tags visible. \nSo, this is not supported case? I mean there must be a way to solve this since I find it hard to believe that in production someone would break everything into single sentences and then merge them like {\"SENTENCE_ONE\"|translate}<br />{\"SENTENCE_TWO\"|translate}\n. @PascalPrecht Now you can see how confusing this was for me when I couldn't figure out this simple usage. OK, thanks - and please consider making this part of tutorial. I'll close the issue and thanks again.\n. Can we then start discussion on this? Because I really think this would be welcome addition if it doesn't impact performance too much. It helps a lot with clarity, typing and is natural extension of namespaces - if you are allowing:\n{\n    namespace: {\n        title: \"Title\",\n        body: \"Body\"\n    }\n}\nThen instead of:\n<div>\n    <p translate>namespace.title</p>\n    <p translate>namespace.body</p>\n</div>\nWe should be able to support:\n<div translate-ns=\"namespace\">\n    <p translate>title</p>\n    <p translate>body</p>\n</div>\nThis is definitely not a critical feature, but it would be nice to have.\n. @knalli @tspaeth\nCan we get this issue reopened? Or, if there is already another similar issue merged into that?\n. Yeah - that seems similar enough. So, from what I understand there needs to be technical discussion on how this should be implemented? Or this style is what everybody agrees is the best:\n<div translate-ns=\"namespace\">\n    <p translate>title</p>\n    <p translate>body</p>\n</div>\n??\n. @tspaeth you can see from discussion that @irnc and @EdgarsZagorskis expressed willingness to give it a try. @knalli just said: \"However we probably have to discuss some implementation (proposals), for example performance trade offs or other stuff.\"\nDoubt that my AngularJs knowledge is good enough for coding this - but I am definitely willing to test. Plus, once branch / repo for this feature is created I can review code and see if there is anything I can help with.\n. What we can do for now is definitely merge all these discussions in one, keep it open and start getting more people involved in discussion.\n. ",
    "tflori": "Yes, thats rights. But I don't have time for that, sorry. I just started to surround all angular files in my project with an IIFE using strict mode but then my IDE said \"hey! you can't use arguments.callee() in strict mode\"...\n. ",
    "hagaih": "Hi!\ni'm using AngularJS v1.2.16 and angular-translate - v2.1.0 - 2014-04-02\n. ",
    "OlmoAcerta": "We are seeing the same issue, in one single app we created. This app doesn't work on any IE9 that we try. Other (extremely similar) apps DO work, so we suspect there need to be \"conditions\" for it to fail.\nWe're working on a small testcase to isolate these conditions and will share when done. \nFWIW a simple \"lots of s\" test /does/ work, so the issue must be something else.\n. We have been able to fix this issue in our app. afaict the problem is not with angular-translate but with the way it interacts with angular-bootstrap's  under IE9. Other versions are unaffected. A  outside the  does work. We have opted to cease using .\n@knalli i am currently under some time pressure so unable to investigate further. I hope this helps other people who stumble on this issue.\n. @tspaeth fwiw we have yet to see this issue after upgrading to 2.4.1 (we were on 2.2.0)\n. ",
    "thucnc": "@OlmoAcerta  I got the same issue on IE10. Is it the same root cause ?\n. ",
    "Vheissu": "Witnessing this happening in IE10 as well. We could not find a way to get it to work using {'translationkey' | translate} so instead we have to resolve to using the $translate service and then using promise objects to set $scope variables and use those.\nSo something like this:\n$translate('translationkey').then(function(text) {\n    $scope.optionval1 = text;\n});\n$translate('translationkey2').then(function(text) {\n    $scope.optionval2 = text;\n});\nThen use the scope values you have just created in your template instead. Ideal? Not exactly, but it does help resolve the problem for the time being until an official fix is committed or I get the time to find a fix myself.\n. ",
    "ktj": "I had similar issue, but I don't think the bug is in angular-translate.\nIf you use force repaint hack in IE with select, it should fix the problem.\n. ",
    "rdukeshier": "I ran into this same issue on IE 10.  Here's the plunk.  \nIt appears to only happen when inside a transcluded directive (ng-repeat in my example):\nhtml\n<div ng-repeat=\"item in vm.collection\">\n  <select ng-model=\"item\">\n    <option value=\"a\">{{ 'valueA' | translate }}</option>\n    <option value=\"b\">{{ 'valueB' | translate }}</option>\n    <option value=\"c\">{{ 'valueC' | translate }}</option>\n  </select>\n</div>\nApplying the translate filter in ng-options seems to be a viable workaround:\nhtml\n<div ng-repeat=\"item in vm.collection\">\n  <select ng-model=\"item\" ng-options=\"option.value as option.translationId | translate for option in vm.options\">\n  </select>\n</div>\n. ",
    "elad": "Hi,\nAt the very least, is it possible to make the locale key an optional argument to useUrlLoader? So that if only one argument was provided, it will default to the existing behavior, but if there are two, it will behave similarly to translations()?\nAs in:\n```\n// Current behavior\n$translateProvider.useUrlLoader('foo/bar.json');\n// Explicitly specify locale\n$translateProvider.useUrlLoader('en_US', 'foo/bar.json');\n```\nIf that's okay with you, I'll submit a pull request for it. :)\nEDIT: I see this issue is on the roadmap for 3.0.0, so while I'm here, I'd also like to suggest that the solution should ideally allow both constants and URLs to be used.\nEDIT 2: Please ignore the above. I could do what I wanted by slightly modifying the static files loader and forcing async reload. No change request from me. :)\n. ",
    "mateusleon": "Hello there! This pull request will be made? I was searching for a solution and this pull request will made it! Can you please merge this patch? Thanks a lot.\n. ",
    "juanpujol": "Sorry, is not clear how to use that $http on the loader. I want to load my parts via jsonp. I tried this:\n$translatePartialLoaderProvider.addPart('3');\n$translateProvider.useLoader('$translatePartialLoader', {\n  urlTemplate: translateUrl + '/api/translation/{part}?locale{lang}&callback=JSON_CALLBACK',\n  $http: {    \n    method: 'JSONP'\n  }\n});\nBut I still get the No 'Access-Control-Allow-Origin', so is not working.\nCan somebody help me please?\nThank you.\n. Is not working. Before I had a forked version of the partial, forcing the method attribute. (https://github.com/juanpujol/bower-angular-translate-loader-partial/blob/master/angular-translate-loader-partial.js#L20) This worked fine, but I want to use the new v2.4 solution now.\n. Yes, just swapped back the arguments and it worked like a charm =)\n$http(angular.extend({}, {\n  method: 'GET',\n  url: this.parseUrl(urlTemplate, lang)\n}, $httpOptions))\nThank You.\n. :+1: \n. Thank you @knalli\n. ",
    "graphefruit": "Hello Pascal,\nsorry for the delay, I had no internet the last weeks.\nI'll try to provide a sample this evening.\nUntil later\nGreetings\nGraphefruit\n. Finally got it working:\nhttp://plnkr.co/edit/D8DAIRXuZcnWx8PDz1Av?p=preview\nSorry little bit messed up code.\nFinally its just the:\ntestview.html and the uiservice.js.\nVia the bodyController.js I instance a dynamic view.\nIf you include the \"<link stylesheet />\" in the testview.html again you'll the the text will be translated.\nIf any questions are open feel free.\nGreetings\nGraphefruit\n. Hello together,\nshort update: Had a skype-session with PascalPrecht yesterday evening.\nWe found a first workaround instead of using:\nhtml\n {{ 'TO_TRANSLATE' | translate }}\nwe're using:\nhtml\n <span translate=\"TO_TRANSLATE\"></span>\nWith this, we can dismiss our \nhtml\n<link href />\nin testview.html:\nAlso we found out: plunkr having tons of todo, with the curly-brace expression, with the translate-attribute, plunkr is chilling.\nMaybe it helps:)\nFor having another in depth look, it would be good to do another meeting via skype/ts3 e.g.\nGreetings\nGraphefruit\n. Hello knalli,\nI'll insert this error again, refresh the plunkr link in 2 minutes.\nGreetings\n. @knalli I'm not that deep into AngularJS but isn't the BodyController the \"root-dom-node\" for the test-controller with its testview.html - Template ?\n. Hey @tspaeth, thanks for your update.\nMaybe we can take a call together, in german its easier to discuss tbh.\nIts a very specific architecture thats true ;)\nGreetings\nGraphefruit\n. Hey @knalli , don't know if its still an issue on \"your-side\" or on my side, after meeting with Pascal, I'm using the translate-directive now mostly.\nLooked forward to have a short meeting with @tspaeth to maybe get a better architecture.\nIn my opinion this case can be closed.\nThanks to all helping hands so far.\nGreets\nGraphefruit\n. ",
    "rewoo": "I would welcome a \"not found replacer\" as @tspaeth suggested.\n. @tspaeth I do not get your suggestion right away. You suggest to create a unified error handling object (marketplace) which can be customized and configured to act on different types of errors for angular-translate?\n. @tspaeth Regarding custom interpolators: I do not think that custom interpolators will work. As far as I understand the code, the interpolator will be called only if the translationId is available.\n@PascalPrecht What do you mean by translate-default? I cant find any documentation about your translate-default. Could you give me an hint?\nI had a look to the custom error handler to try solving my problem. Is there any reason why \na) the interpolateParams are not used in the error handler? Only translationId and $uses are used parameters. I think it would make sense to add interpolationParams and maybe also interpolationId (or the Interpolator).\nb) the result of the error handler is not used everywhere. The handler is called but the result is dropped (as suggested in the doc) in $translate.determineTranslation, $translate.determineTranslationInstant() and $translate.instant(). Only $translate.resolveForFallbackLanguage() uses the result of the error handler. If the result is used everywhere the result handler can resolve (and interpolate through a) ) missing translations.\n. Just as a small refactoring for readability. Don't mind if you prefer the original version.\n. ",
    "taz": "Hi, thanks for the response!\nI've incorporated what you suggested (I think) into a new example, but it still didn't work.\nIt might not help that the example is a bit basic. Let me give you another scenario to try. I've modified the plunk so it's a bit clearer. http://plnkr.co/edit/SnnTmq2wc9aqEKlsTbws\nSay I have a form with a dedicated area for errors, these errors are triggered on $http.error().\nThese errors are all translated strings and all contain html and/or angular code. I need to dynamically change the value in the error span depending on the error returned from the server.\nie: \nWhere error_string is a value on the scope, as suggested. \nIt will only be updated the first time it is evaluated. Which is to be expected, because the translate directive is \"translate once\". But I can't use the translate filter to keep a binding to it because I need the text to be compiled.\nie: {{error_string | translate}} doesn't compile the result, but does update.\nSo unless I'm still missing something, I can either have dynamic updates via the filter, but no compilation -or- Static strings with compilation, but not both.\nWhat I'm after is either a filter with compile, or a directive which allows dynamic+compiled updates...\nNow I could split the strings up into their components (the error, then the link), but it's just so much more elegant to handle an error as one string.\nDoes that make more sense? :-)\n. Wow that was a quick reply. Much appreciated.\nI looked at $translate... but I'd also need to interpolate/compile the result and sce it etc, it seemed... cumbersome :-)\nWhich is why I wondered if taking advantage of the existing translate-compile functionality by short circuiting to it with a translate-dynamic was just easier (provided it didn't break anything)? It looks to be doing essentially the same thing as handling it manually elsewhere.\nI don't understand the second part of your suggestion though about wrapping it in another translation though...\n. Sorry, this is becoming less an 'issue' and more a QA session on how to use translate! :)\nSo if I understand the point you added on to your previous comment, if I create the following:\n$translateProvider.translations('en', {\n    'my_error': 'Hi: {{text}}'\n  });\nwith a corresponding\n$scope.text = 'This is my \"dynamic\" error';\nIt should result in <span translate-compile translate=\"my_error\"></span> outputting as \"Hi: This is my \"dynamic\" error\". \nAnd whenever I change $scope.text, it should cause an update?\nBecause that's not what I'm getting (which could be why I'm not understanding)...\nhttp://plnkr.co/edit/SnnTmq2wc9aqEKlsTbws?p=preview\n. Ooooooooooooh! ding :-) http://plnkr.co/edit/SnnTmq2wc9aqEKlsTbws?p=preview\nIt was using the scope reference that was causing me grief. That's much, much better!\nI still think there's some room for making this ~~easier~~ ~~more intuitive~~ more idiot proof :-)... but that works, so that's the main thing :-)\nThank you very much for your patience and explanations!\n. Having implemented this change in my project now, I guess the last thing I'd like to say is that while it works, it does tie the presentation implementation a lot closer to the code in my opinion.\nIf I want to mix and match string content, some compiled, some html, some plain, it's more difficult to do as the controller needs to know to pass the string through $translate and the template needs to know to pass it all through the correct ERROR translation Id with translate-values to pass a variable to it vs. just applying translate=\"id\" or id | translate.\nBeing able to flag a translate directive as \"dynamic\" so that it mimics the functionality of the filter WITHOUT having to have values explicitly passed in would still be very handy I think, as you could treat all these cases in a relatively consistent manner without having to have the controller doing the translation. \nWith the accepted method, if the UI designer wants to change a translation string to include an html element, or a compiled element, they also need to alter the controller to get the end-result string from $translate.\nIt makes the handling a bit inconsistent.\nFor a dynamic string with no html/bindings, I can use translateId | translate\nFor a static string with html/bindings, I can use translate-compile translate='translateId'\nIn both cases the controller just needs to push the relevant string into the $scope.translateId variable and it updates (although only once in the latter case!)\nBut when it comes to a dynamic string with html/bindings, I need to modify the controller to return the string, (not its id) and then bind it all together in the template.\nIt just seems like it could be more straight forward, hence the suggestion of a translate-dynamic option or something similar. At least then it's a conscious decision to opt-in to the performance penalty.\nAnyway, I've said my piece, I'll leave it with you. Thanks again for the help, it was greatly appreciated.\n. I've managed to get it working without the need of the $translate service in the controller by changing the translated string to 'my_error': '{{error | translate}}' and assigning the translateId directly to the scope value 'error_string'.\nThis decouples design from code a little bit more (it's always a translateId being stored), but I'm wondering what effect this has on processing in the end... :-)\nFinal plunk is here:\nhttp://plnkr.co/edit/m4YIgwg8ki1PvY4CCQJQ?p=preview\nI don't think I can make it any simpler than that without modifying the translate directive?\n. ",
    "islavi": "Regarding the same issue,\nI have huge text that I want to translate (terms and condition).\nI want to be able to format it in en.json like this:\n`\n\"DESCRIPTION\": [\n```\n      \"Lorem ipsum dolor sit ci nec.\",\n  \"<p>Quis tantas accumsaorreant. Ex eam assum facete.</p>\",\n\n  \"<p>Discere honestat eu summo sanctus.</p>\",\n\n  \"<p>Ex unum viris re periculis ex vel.</p>\",\n\n  \"<p>Id duo dolore signifecing an pro.</p>\"\n\n```\n]\n`\nIs there a way to use multiple lines?\n. ",
    "zbindenren": "Sorry for the late response. We fixed the problem with:\n``` javascript\n  $translateProvider.registerAvailableLanguageKeys(['de', 'fr', 'it', 'en'], {\n    'de_': 'de',\n    'fr_': 'fr',\n    'it_': 'it',\n    'en_': 'en'\n  });\n$translateProvider.determinePreferredLanguage();\n/\n   * The fallback language is not working ...\n   * $translateProvider.fallbackLanguage('en');\n   * The following workaround sets the preferred language to english,\n   * if the detection failed or the detected language is not known.\n   /\n  var language = $translateProvider.preferredLanguage();\n  if (language === undefined || !language.match(/(en|de|fr|it)./)) {\n    $translateProvider.preferredLanguage('en');\n  }\n```\n. ",
    "mehmedju": "Do you have any idea how make that ?\nI've recently started use ng-translate and I don't have many experience.\nThanks\n. This is one template part of my directive:\n<button type=\"button\" class=\"btn btn-success btn-sm\" data-ng-click=\"applyColumnFilters()\" id=\"submit-FILTER_TYPE_PLACEHOLDER\">{{'ID1' | translate}}</button>\n        <button type=\"button\" class=\"btn btn-default btn-sm\" data-ng-click=\"cancelColumnFilterSelection()\" id=\"cancel-FILTER_TYPE_PLACEHOLDER\">{{'ID2' | translate}}</button>\nI want just somewhere define values of IDs.\nFor example: ID1=value1, ID2=value2, and as result I could see value1,value2 instead of ID1,ID2.\n. Sorry I'm having problem with inserting code here,so I'm trying manually give u some example:\n< table>\n< th> {{ 'ID1' | translate }} < /th>\n< th my-directive > {{ 'ID1' | translate }} < /th>\n< /table>\nIn the first th will be applied translating, but in second will not.\nNote: In the second th I included my directive.\n. @knalli thanks a lot, but the code is big, directive is very complex.\nI'm going once again to try explain issue.\nHence, in my project is supported translating.Wherever I apply something like this:\n{{ 'translateID' | translate }}, it works correctly, but when I call my directive in code and within it try set {{ 'translateID' | translate }} translating isn't executed.\nIs problem with my directive or I should set something additionally in my model how I be able to use this within content of directive.\nThis works  < div> {{ 'ID1' | translate }} < /div>, but\nThis doesn't work  < div my-directive> {{ 'ID1' | translate }} < /div>\nThanks a lot !\n. < div class=\"dropdown display-inline\">\n    < a class=\"btn btn-filter dropdown-toggle\" data-toggle=\"dropdown\" data-ng-click=\"prepareFilterByColumn('FILTER_TYPE_PLACEHOLDER')\">\n        < i data-ng-class=\"isFilteredBy('FILTER_TYPE_PLACEHOLDER') ? 'fa fa-filter' : 'fa fa-chevron-circle-down'\">\n```\n\n< ul class=\"dropdown-menu filter\" role=\"menu\" aria-labelledby=\"dropdownMenu1\">\n    < li role=\"presentation\">{{ 'GridColumnFilter.SortAscending' | translate}}\n    < li role=\"presentation\">{{'GridColumnFilter.SortDescending' | translate}}\n    < li role=\"presentation\" class=\"divider\">\n    < li role=\"presentation\" class=\"filter-search\" data-stop-event=\"click\">\n        < p>\n            {{'GridColumnFilter.FilterLabel' | translate}} \u00b7 {{'GridColumnFilter.LinkSelectAll' | translate}}\n            \u00b7 {{'GridColumnFilter.LinkClear' | translate}}\n\n\n        < div class=\"filter-options\">\n            < ul>\n                < li data-ng-class=\"{'active': item.checked}\" data-ng-repeat=\"item in filterableItems | filter:filterText\"\n                    data-ng-click=\"addColumnFilter(item)\">{{ item.name }}\n\n\n\n    < li role=\"presentation\" class=\"divider\">\n    < li class=\"filter-confirmation\" data-stop-event=\"click\">\n        {{'GridColumnFilter.ButtonSubmit' | translate}}\n        < button type=\"button\" class=\"btn btn-default btn-sm\" data-ng-click=\"cancelColumnFilterSelection()\" id=\"cancel-FILTER_TYPE_PLACEHOLDER\">{{'GridColumnFilter.ButtonCancel' | translate}}\n    < /li>\n< /ul>\n```\n< /div>\n. Template of the directive is above.\nAll translate IDs within it is worked, but within < div> where is called this directive any content isn't translated\n. Hej Jan,\nI solved mentioned issue.\nI needed in two span/div tags separate it.\nThanks for your concern\nAll best\nOn Sun, Jun 29, 2014 at 2:00 PM, Jan Philipp notifications@github.com\nwrote:\n\nPing @mehmedju https://github.com/mehmedju Any updates?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/572#issuecomment-47452541\n.\n\n\nMehmed Jusi\u0107\nSoftware Engineer  Product Development\n_Maestral_Solutions | Sarajevo\nFounding Member of HUB387\nMilana Preloga 12/3\n71000 Sarajevo\nweb: maestralsolutions.com | twitter: @maestralsol\nhttp://twitter.com/maestralsol | linkedin: maestralsolutions\nhttps://www.linkedin.com/company/maestral-solutions-llc\n. I understood what is the issue, but does have anyone solution on this?\n. Guys,\nI've just solved this.\nYou should only separate this two directives in different tags. I've done it on the next way:\n< div data-ms-filter-by-column=\"feature\" data-table-source=\"moviesTable\" data-clear-filters=\"clearColumnFilters\">\n< span translate=\"Feature.Label\">< /span>\n < /div>\nI hope that someone will have benefit of this.\n. ",
    "rolandpeelen": "@PascalPrecht \nCheck. Ok. This:\n{{'CONTENT.CREATE.WHOSMASTER' | translate}}\ncreates the string: \n\"Who is the Master?\"\nWe would like to highlight the \"who\" and the \"master\" by making it bold. Is there an easy way to do so without making three translations with which we make the first and last one bold?\n. @PascalPrecht - Awesome. Thanks!\n. ",
    "chrisie": "I already have a fallback language defined and it doesn't seem to make a difference. By looking through the code I arrived at the same conclusion, that an undefined preferred language isn't handled all too well, so I ended up creating my own function to determine the preferred language. It would be nice however to have the default determinePreferredLanguage function handle all cases (ex. by returning the fallback language if the language sent by the browser is not in the available languages) since my feeling is that an application that can actually support any language the browser sends will be a very rare occurrence.\n. Yes, that's what I'm doing right now, at least until another solution comes up. Thank you.\n. ",
    "swisstofu": "One question about this topic, I would like to use determinePreferredLanguage to determine preferred language (yes, not a surprise!) for the user, but only his locale is included within $availableLanguageKeys. But this is not working as the method negotiateLocale() just returned the given locale by default if not found in availableLanguage array. I would say that it should return the $fallbackLanguage instead, shouldn't it ? otherwise user can have a non supported locale as preferred. What do you think ? \nthanks for your feedback\n. PR created : https://github.com/angular-translate/angular-translate/pull/803\n. Thanks @dwand for your answer, doing the following as you suggested will solve my problem, so I close this PR\n$translatePartialLoaderProvider.setPart('fr', 'mytranslations', {\n...\n}\n$translatePartialLoaderProvider.addPart('mytranslations');\n. ",
    "firstdoit": "Perfect. That's probably it.\nThe event is generated by a non-angular component, unfortunately.\n. ",
    "fischermatte": "hi knalli, thx for the offer :-) but i am sorry - would love to contribute, but i am currently way to busy. \n. ",
    "JobaDiniz": "+1 on this one. Currently we are configuring the languages twice, one for angular-translate and one for our app to know which language are available, so the user can choose. Repeated code it's not so great.\n\"However, keep in mind that when using asynchronous loaders, languages are not registered until they are loaded.\"\nWe use async loaders, but it should handle this somehow. Maybe, tell angular-translate which languages we support without passing the key values table, and also tell to use async. I mean, we need to make async work and also know right away which languages are supported.\n. Is this implemented? If no, why this issue is closed?\n. In fact, it would nicer to get language from browser too.\nLanguage -> storage or fallback to determinePreferred or fallback to defaultLanguage.\n. I agree, the name use for getting the current language is not intuitive, despite it is documented.\n$translate.current() would make more sense. However, this would be a major breaking change, so there is that...\n. ",
    "KevinLlopart": "Hmm... After having given it a try, I think maybe it's not such a great idea to split the language key because then you cannot use it to set the language.  I am gonna commit a simpler and more efficient solution.\n@PascalPrecht do you think you could merge my latest commit?\n. I don't think splitting the language key is accurate because after that you cannot set the language with it anymore. I've made another pull request that implements #566.\n. Hi @PascalPrecht! In fact I ran exactly in the same issue when I went beyond the POC and switched to a lazy (async) version. \nWell I didn't like the idea to have code duplication, so I put the translations server-side and made a route to get a list of available locales by stating files.\nI don't see a way to do it client-side without writing kind of duplicates, which could be painful to maintain and might lead to mistakes/missing translations when changing the available locales. As far as I am concerned, maybe we could assume the method works only for non-lazy use of angular-translate and perhaps even make a fallback for lazy uses with the method you suggested (but I still think it is a bad idea, we'd better explain the limitations in the API).\n. ",
    "davidbeijinho": "for me its not working I getting\nTypeError: Object function (translationId, interpolateParams, interpolationId) { .... ..} has no method 'getAvailableLanguageKeys' \nI try\nOnce could just say something like:\n$translateProvider.registerAvailableLanguageKeys(['en', 'fr', 'de', es']);\nAnd later at runtime:\n$translate.getAvailableLanguageKeys();\n/// returns ['en', 'fr', 'de', 'es']\n. ok, thanks \n. ",
    "WuglyakBolgoink": "+1\n. ",
    "fxck": "Yes, this would be useful.\n. ",
    "Aides359": "@knalli @PascalPrecht May I take it that with return $availableLanguageKeys; I could use (apart from feeling really dirty with calling register as a getter) registerAvailableLanguageKeys() to get the registered languages?\nEdit: I just relaized that registerAvailableLanguageKeys is only available on the provider :\\\nAny updates on that issue?\n. From the linked SO post adding this polyfill\nObject.defineProperty(SVGElement.prototype, 'outerHTML', {\n    get: function () {\n        var $node, $temp;\n        $temp = document.createElement('div');\n        $node = this.cloneNode(true);\n        $temp.appendChild($node);\n        return $temp.innerHTML;\n    },\n    enumerable: false,\n    configurable: true\n});\nseems to fix this.\n. Could you link me the docs of $translate.ready()? I can't seem to find it.\nWhile skimming through the docs I found $translate.onReady(fn). Would that help to resolve this problem? If yes, would it be an option to let $translate.onReady(fn) fire $translateChangeSuccess natively to avoid having to write duplicated code?\n. @knalli While doing refactoring I came across this part again. I did try $translate.onReady() and it seems to work.\nWhat do you think of the idea to let $translate.onReady() fire $translateChangeSuccess?\nHaving to define the same behaviour twice in .onReady() and $translateChangeSuccess is not really nice for maintainability and kind of violates the concept of least surprise.\n. Maybe describing my current situation will help clarifying my point:\nI am using $translateChangeSuccess to synchronize language with $locale as proposed in #276 by @DWand \n$rootScope.$on('$translateChangeSuccess', function ()\n{\n    $tmhDynamicLocale.set($translate.use());\n});\nSince on page load the $translateChangeSuccess event is missed I'd have to go for something like this\nfunction syncLanguage()\n{\n    $tmhDynamicLocale.set($translate.use());\n}\n$rootScope.$on('$translateChangeSuccess', syncLanguage);\n$rootScope.$on('$translateReady', syncLanguage);\nwhich would be kind of redundant and counter-intuitive.\nAs I see it $translateChangeSuccess should be fired (as it does) and recognizable (it is missed) after page load so triggering $translateChangeSuccess in $translateReady seems like a fitting solution.\n. Not sure if I get my point across... \nWhat I need is an event that notifies me on any language change (as $translateChangeSuccess does), including the very first set language for instance set by preferredLanguage(), determinePreferredLanguage(), useLocalStorage(), ... (which does fire $translateChangeSuccess but before $rootScope.$on('$translateChangeSuccess', ...) is registered, so the event is missed there.\nAs far as I can tell it would be a sufficient fix to trigger $translateChangeSuccess when onReady is called (since onReady fires a bit later and the event would be caught correctly).\n. No worries. \nIt's been some time so I can't find the apropriate docs right now but I would expect translateChangeSuccess to fire on every language change, even the first one from nothing -> preferred language after page load/reload.\nThis first event is missing however.\nAfter further analysis/debugging it became clear, that the missing event is fired by angular translate, however the event is fired before any event listeners (i.e. set up in angular.module('app', []).run(..) are registered, thus the event is never caught and appears to be missing.\n. Cool, didn't know about that method yet.\nHowever if I understood it correctly this only configures the value returned from .determinePreferredLanguage(), right?\nFurthermore, I think the problem I have described above is rather a general problem, since a language tag is accepted as a valid tag matching the defined languages but then does not resolve to the correct translation.\n. Okay, I've just quickly put together a plnkr (https://plnkr.co/edit/uCxtKi?p=preview) demonstrating the problem (note that I've just put together this language setup scenario).\nJust click on English (en-US) and then English (en-GB) - what you will see is the spanish translation although the language is set to English.\nThis is due to https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L164 matching the lower-case preferred locale with the available locales successfully but then returning preferred (uppercase) instead of locale (lowercase) in L165.\nBecause of that the locale is set to en-US and then when translating in https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1547 it tries to access $translationTables['en-GB'] which is undefined (in contrary to en-gb which would be defined). Since no translation table for the locale is found the next language form the fallback stack is taken.\nIn my opinion there are two solutions:\n- Alter L165 to return locale instead of preferred\n- Alter L1547 to get $translationTable[angular.lowercase(uses)]\n. Odd, apparently my JS changes didn't save properly.\nAlso you are right about updating (I just took some random template I could find), however the issue also applies to the current version.\nI have updated the plunker respectively.\n. I did realize that, still I expect it to be rather common to register the languages on their language tag and since any situations where the registered language matches the used language when comparing case insensitive but not when comparing case sensitive cause this problem (strangely enough no one seems to have experienced this problem before) it's probably better to fix this before anyone else runs into it.\nAlso as I said, the proper fix to this is really simple, however I am not absolutely sure if it has any side-effects (if you tell me which solution is preferred I wouldn't mind creating a PR for it).\n. I just realized that this is not as easy as first expected.\n\nThis would ensure not the requested but the actual used locale.\n\nThis is actually not the case - while this is true with language keys registered in lower case, it breaks on any other configuration (however this is not due to the proposed change but also in current production code)\n. Is the server even in use anymore? It looks quite neglected.\n. Ah, ok. So you mean something like this?\n```\n// Template\n\n// Translation\n{\n    \"header\": \"Advice {index}: \", \n    \"earlyBird\": \"The early bird catches the worm\"\n}\n```\nThe html tag in the translation string will probably confuse translators, won't it?\nDo you know how this will do performance wise against the filter alternative (extra compile of translated content vs. use of translate filter on passed value)?. I could not follow the other problem mentioned here (sadly I currently don't have the time to dig into it deeper) but I think that does answer my the question.\nCurrently my mentioned approach seems to work just fine, it's just rather ugly to have html inside the translated string.\nWould this be a wanted feature or is this out of scope for angular-translate?. ",
    "kishmiryan-karlen": "@PascalPrecht I think this should be included in the documentation.. ",
    "cSilas": "I tried and since I put the v 1.2.16 of AngularJS and upgrade pascalprecht.translate module $translate('MY_KEY') no longer works. The result is console.log($translate ('MY_KEY')) = {}; While console.log($filter('translate')('MY_KEY')) = MY_KEY(the result is the key not the value).\n. I'll start with the migration guide! Sorry for my useless question. \nAgain thank you for your help\n. ",
    "ScottONeal": "Maybe I am missing something, but I didn't see an update on this ticket.\nI haven't come up with a solution that I liked using a syntax of:translate-attr-*=\"translationId\"\nI just created a quick plunkr using a object literal convention like:\n<ANY translate-attr=\"{ 'title': 'translationId' }\">\nhttp://plnkr.co/edit/1NfcEO?p=preview\nI can draft a PR if this is a direction you want to go.\n. ",
    "sochka": "How do I translate an attribute only but not tag contents? See what I'm saying:\n<span\n            translate translate-attr-title=\"CLONE_THIS_WIDGET\">\n        <i class=\"glyphicon fi-page-copy\"></i>\n      </span>\nThis replaces the inner content of span tag entirely , probably trying to translate it.\n. Thanks, that helped.\n. Ok, but how do I make the following:\n1) first time user goes to the website systems uses determinePreferredLanguage\n2) After this point it remembers the last used language, even if it was changed manually?\nSeems like the default use-case for many websites?\n. And how this example works then? http://angular-translate.github.io/docs/#/guide/10_storages  If preferredLanguage has higher priority than language in storage, why after hitting f5 my language is saved?\n. I think I found the problem. Almost sure this is a bug.\nI have 'uk' language saved in my local storage. If I run app with this code ukrainian is used (as expected).\n$translateProvider\n    .useSanitizeValueStrategy('escape')\n    .registerAvailableLanguageKeys(['en', 'uk'], {\n      'en*': 'en',\n      'uk*': 'uk'\n    })\n    .useStaticFilesLoader({\n      prefix: '/translations/',\n      suffix: '.json'\n    })\n    .determinePreferredLanguage()\n    .useLocalStorage();\nIf I add fallbackLanguage like in the original code:\n$translateProvider\n    .useSanitizeValueStrategy('escape')\n    .registerAvailableLanguageKeys(['en', 'uk'], {\n      'en*': 'en',\n      'uk*': 'uk'\n    })\n    .useStaticFilesLoader({\n      prefix: '/translations/',\n      suffix: '.json'\n    })\n    .determinePreferredLanguage()\n    .useLocalStorage()\n    .fallbackLanguage(['en', 'uk']);\nAnd run the app - english is used. Why fallbackLanguage should have influence on that?\nA bug or expected (but why?) behaviour?\n. en_US.\n. As a temporary solution I'm doing something like that:\napp.config(($translateProvider) =>\n  $translateProvider\n    .useSanitizeValueStrategy('escape')\n    .registerAvailableLanguageKeys(['en', 'uk'], {\n      'en*': 'en',\n      'uk*': 'uk'\n    })\n    .useStaticFilesLoader({\n      prefix: '/translations/',\n      suffix: '.json'\n    })\n    .determinePreferredLanguage()\n    .useLocalStorage()\n).run(($translate) => \n  $translate.fallbackLanguage(['en', 'uk'])\n);\nThis - works. (just by moving fallbackLanguage invocation from $translateProvider in config phase to $translate in run phase.\n. I can't repro this on your plunkr but don't have time to test it on my code now. Will write a comment here if  I have this issue again (currently I'm using some workaround).\n. Hi @knalli, @tspaeth , I just came back to this issue. Here is a demo: http://wdc-app-develop.herokuapp.com/ . If you click Ukrainian - it won't change the language but after hitting F5 - the language finally changes. All the relevant setup code is here: https://github.com/kpi-wdc/wdc/blob/master/assets/js/i18n.js , in other files there is only usage of $translate service, filter and directives. Could you have a look at this please? This is really annoying that I can't find a problem, I even tried debugging your code a bit -- no luck.\nP.S. in this demo the only changing word is the \"Language\" just above the language bar. This word in Ukrainian is called \"\u041c\u043e\u0432\u0430\". Russian translations are not actually set up, so don't worry about that one not working.\n. Or maybe other project contributors (@DWand ?) have some idea what's going on?\n. Oh, I just noticed something really interesting. Replacing $translate.use(...) with $translate.use(...); $translate.refresh() fixes the problem, at least in cases I tested. Are you supposed to manually call refresh?\n. @tspaeth , No, I tried and it doesn't matter. The problem happens when changing the language, not when setting up the configs.\n. ",
    "tpluscode": "Sure, but there isn't much fiddling really.\nApp configuration:\napp.config(['$translateProvider', function($translateProvider) {\n    $translateProvider\n    .useStaticFilesLoader({\n        prefix: \"i18n/\",\n        suffix: \".json\"\n     })\n     .addInterpolation('$translateMessageFormatInterpolation')\n     .useMessageFormatInterpolation()\n     .preferredLanguage('pl');\n}]);\nLang file for English:\n{\n    \"SITEMAP\": \"Sitemap\",\n    \"PRODUCER\": \"{NUM, select, one{Producer} other{Producers}}\"\n}\nView fragment:\n<span translate translate-values=\"{ NUM: 'other'}\" \n           translate-interpolation=\"messageformat\">\n           {{ 'PRODUCER' }}\n</span>\nAnd here's the stack trace tail:\nUncaught Error: Plural Function not found for locale: pl messageformat.js:26\nMessageFormat messageformat.js:26\n$translateInterpolator.setLocale angular-translate-interpolation-messageformat.js:14\n(anonymous function) angular-translate.js:386\nforEach angular.js:323\n$get angular-translate.js:384\n. I'm using latest packages from bower\n. Oh my. Indeed I seem to have read all the docs but the bolded note. Sorry :)\n. ",
    "cazacugmihai": "If I have a site translated in 10 languages, I need to import each language when a page is accessed? Ex:\n<script src=\"path/to/messageformat/locale/en.js\"></script>\n<script src=\"path/to/messageformat/locale/de.js\"></script>\n<script src=\"path/to/messageformat/locale/fr.js\"></script>\n...\n<script src=\"path/to/messageformat/locale/10thLang.js\"></script>\nI thought that all I need to to is to import only the default language script (ex: en.js), than the others will be loaded asynchronously (when user switch the language), by these helpers:\n<script src=\"../bower_components/angular-translate/angular-translate.js\"></script>\n<script src=\"../bower_components/messageformat/messageformat.js\"></script>\n<script src=\"../bower_components/angular-translate-interpolation-messageformat/angular-translate-interpolation-messageformat.js\"></script>\n<script src=\"../bower_components/angular-translate-loader-url/angular-translate-loader-url.js\"></script>\n<script src=\"../bower_components/angular-translate-loader-static-files/angular-translate-loader-static-files.js\"></script>\n<script src=\"../bower_components/angular-translate-storage-cookie/angular-translate-storage-cookie.js\"></script>\n<script src=\"../bower_components/angular-translate-handler-log/angular-translate-handler-log.js\"></script>\nI'm asking this because if I import only the default language, when I try to change to another one (let's say \"de\"), I've got this error:\n\nError: Plural Function not found for locale: \"de\".\n\nThanks,\nMihai\n. ",
    "zymtx5g79k": "Is there any ideas?\n. I can't find root of problem, seriously! It looks too difficult for me. Is there an example file with roles to get proper pluralization?\nI have dictionary files.\nen.json\n{ \"have\": \"You {count} {count, plural, one{time} few{songs} other{times}}\" }\ncmn_TW.json\n{ \"have\": \"You {count} {count, plural, one{time} few{songs} other{times}}\" }\nAnd translate provider.\ntranslate_provider\nfunction translate_provider($translateProvider) {\n  var locale = 'en';\n  $translateProvider\n    .registerAvailableLanguageKeys(['en', 'cmn_TW'], {\n      'en_US': 'en',\n      'en_UK': 'en',\n      'cmn_TW': 'cmn_TW'\n  })\n    .useMessageFormatInterpolation()\n    .preferredLanguage('en')\n    .fallbackLanguage('en')\n    .useSanitizeValueStrategy('escape')\n    .useLoader('translationLoader', { locale: locale })\n    .use(locale);\n}\nI have error after call $translate.use('cmn_TW');\nI can change language, save and reload page. It works with new language after reload page only ):\n. Found! messageFormat have default pluralization rules like /src/locales.js (https://github.com/format-message/message-format/blob/master/src/locales.js). You need to write own pluralization rule If you have own language indicator.\n. ",
    "apneadiving": "actually once-text=\"'TITLE' | translate\" seems to do the trick\n. ",
    "ephigabay": "Added PR\nhttps://github.com/angular-translate/angular-translate/pull/579\n. ",
    "mkanev": "Understood. Will do next time.\n. ",
    "SachaMPS": "sorry... this is not due to translate...\n. ",
    "bra1n": "angular-translate - v2.2.0 - 2014-06-03\nI tested it by intentionally breaking the URL for the StaticFilesLoader:\n$translateProvider\n    .useStaticFilesLoader\n      prefix: 'not-existant/lang-',\n      suffix: '.json'\n    .fallbackLanguage 'en_GB'\n    .preferredLanguage 'en_GB'\nAnd in the view:\n<header translate=\"titles.settings\">Settings</header>\nWhere I would end up seeing \"titles.settings\" instead of \"Settings\".\n. Sure, here it is: http://plnkr.co/edit/rWPV9PMTzBo3qmwfUTt9?p=preview\nThis uses a working translation URL, in order to see what I'm talking about, just modify the prefix on line 6 of the script.js to something that's not working anymore.\nExpected behaviour: site shows \"Here is some placeholder text\"\nActual behaviour: site shows \"email.needHelp\"\nI need to clarify though, that my original statement, that the translation key is shown before the translations are done loading, is wrong. However, they should also not be shown when the translations can't be loaded, I think. :)\n. Ah okay, that would be great to have. :) My experience so far was that translations that have their actual text as the ID tend to get messy the bigger your project becomes (especially because the very same English sentence / word could be translated into 2 different versions depending on context, which would not be possible with such translation IDs), so while I think it would be a nice feature, it probably would be less useful than keeping the element content for missing translations.\nAnyways, glad to have this issue cleared up! Feel free to close it / convert it into a todo.\n. @tspaeth Yeah, this would kind of sidestep the issue here, but then you'd end up with tags that look like <ANY translate=\"missing.id\" translate-default=\"This is some text\"></ANY> where writing <ANY translate=\"missing.id\">This is some text</ANY> looks cleaner & simpler and would actually show the placeholder text in case of a JS error that prevents Angular / Angular-Translate from working, or when you open your view templates directly.\n. Concerning a solution like translate-default, I wrote earlier:\n\nYeah, this would kind of sidestep the issue here, but then you'd end up with tags that look like <ANY translate=\"missing.id\" translate-default=\"This is some text\"></ANY> where writing <ANY translate=\"missing.id\">This is some text</ANY> looks cleaner & simpler and would actually show the placeholder text in case of a JS error that prevents Angular / Angular-Translate from working, or when you open your view templates directly.\n\nWhile it does work, it still has the problem of not being usable without AngularJS as a placeholder (ie. when you open the templates directly or there is a problem with the Angular Engine). The placeholder would basically have to be wrapped in the extra attribute, when it would be easier (and cleaner) if it could be taken from the content of the tag instead.\nKeep in mind that the original situation where this problem occured was, when the translation file was not loaded yet, for example due to slow internet connection. So at that point, Angular Translate would probably not know, yet, that it has to use the translate-default attribute for the content.\n. So this is working as intended? Okay, I guess the documentation should mention something like that, then. :)\n. :+1: for this PR, ran into the same issue just now.\n. Yup, that fixed it. Thanks!\n. ",
    "aklauza": "Hi,\nI am not sure what was the outcome for the initial issue. In the following code, is it possible to leave the text as is when header.title is not found?\n<header translate=\"header.title\">My title in my home language</header>\nBy default, this is not happening. From a user point of view, I believe it is better if the user sees \"My title in my home language\" than \"header.title\" in the browser. It is also the default behaviour that other i18n tools follow (like cakePhp i18n). I am not sure why $translate does replace text when there are no valid translations.\nThanks\n. I don't think default behaviour should be with developer interests in mind, but user experience. There is  an angular-translate-handler-log specifically developed to log everything that is missing.\nRegarding the default-value, I think there is something like that already implemented, and I don't think is a valid solution, as it clutters the code, and makes it \"less HTML\". My point is, why do I have to worry to add translate-default attributes everywhere when there is already a default text in the HTML that is being completely ignored?\n. Ok, so I understand it is possible to introduce that config option and default it to false so it keeps doing exactly the same as always and it is still compatible with earlier versions. In this case, I would only have to change the flag to get my expected behaviour.\n. ",
    "dietergeerts": "I think that default behavior is really good to pick up the parts that still need to be translated. But for what you want, it would be nice to have an options of a default value in case it's not found in the form of an extra attribute maybe?\n. I get your point, though we use this differently. We just put our key on the place where the text will come, instead of some default value. We then provide translations files for both the default/fallback language and the others. It's easier and as the keys are all UPPERCASE, it's easy to identify where they are and see if everything is translated....\n. This would be awesome! We now have modules with each their own translation sets, as our product can enable/disable modules depending on some configuration. So we have to add them to the main angular-translate translation set with some sort of prefix. Because of this, we end up with long keys like MODULE_NAME.GROUP_NAME.LABEL.KEY. So it will definitely improve readability and spare use of such long keys, which now gives us many splitted lines.\n. @einyalynn , this doesn't work here on the latest release. When using translate-value-*, it isn't translated at all.\n. Hi, I also see this issue. And I see the exact same as @mastix: On initial load everything is fine, but when loaded with ngRoute (/#/), the translation keys are visible. Are there any good workarounds in the maintime?\n. OMG! I'm sorry. I discovered why it didn't work! The translations json object was very big that I didn't noticed there was a duplicate key further in the file...\n. Yes, we do this. With our gulp build, we set which language to choose and just inject the language json object into our javascript code. Once the app does it's config, we let that object being used by angular-translate.\n. It has angular-translate included and configured.\n. Why would you use defaults? Just provide translations in all languages, far better and easier to do.\n. ",
    "Muphet": "topic closed, problem not solved. got exactly same issue\n. ",
    "mugwump": "thank you, that was quick&very helpful! \nI came up with this very,very simple loader: \n``` javascript\ncommon.factory('digestedLoader', function ($http, $q) {\n    // return loaderFn\n    return function (options) {\n        var deferred = $q.defer();\n        // do something with $http, $q and key to load localization files\n    var language_file = \"language-\" + options.key +\".json\";\n    var resolved_language_file = Soundtaxi.TemplateMap[language_file];\n\n    $http.get(resolved_language_file).success( function(data, status){\n        // resolve with translation data\n        deferred.resolve(data);\n    }).error(function(data,status){\n        // reject with language key\n        deferred.reject(options.key);\n    });\n\n    return deferred.promise;\n};\n\n});\n```\nwhere Soundtaxi.TemplateMap[language_file] is a static map, that maps the logical filename onto a digested path. You can probably extend this with adding prefix/suffix as options, but this way it works for us.\n. ",
    "DrMabuse23": "thx for \"doesn't do any redirects \" :) . i only forget $event.preventDefault(); on my language chooser. \nthx again and nice weekend !\n. ",
    "tunguski": "Could someone from core team tell me will you consider pulling this request? I'm not shure should I spent time for fixing tests. If there is a chance that this code will land in project, I'll fix them.\n. I've reverted .gitignore modification, added ngdoc for translateByHandler function, squashed all commits to one on master branch in my fork, but...\nI have to create PR to canary branch? Is it possible to modify this PR or I should create new one? Canary is few commits after master, so it should rebase all missing commits from master? I'm a little bit confused and need some clarification. :)\n. So I think I've fixed things @tspaeth comments are about. One commit with message angular style (I hope), no .gitignore changes and ngdocs styled comment to added function. If something more is needed to pull this PR, just write! ;)\n. Do you know estimated time for this PR to be released? I'm using own copy of angular-translate.js at the moment, but it's not too pretty workaround. Bug fix release maybe? :)\n. Value returned from handler is not assigned to result. Is it ok? As I understand http://angular-translate.github.io/docs/#/guide/17_custom-error-handler, string returned from handler should be returned from translate.\n. I've created this PR #594. But it breaks test with fallback languages. I've looked at code that uses missing translation handler, but I'm not sure what is the proper way to fix error.\n. ",
    "hohwille": "Just as a feedback: using HTML markup is bad for security as it opens the door for injections. Allowing newlines would be safe when using in pre or verbatim tag.. ",
    "xiaolei": "\\n will show as line break if you apply below style to the element:\nwhite-space: pre-wrap. ",
    "elron": "While xiaolei's answer works,\nit doesn't replace two break-lines into a paragraph. I've created a pipe for this, I wrote an answer here: https://stackoverflow.com/questions/35999185/angular2-pipes-output-raw-html/51236958#51236958\nIt works like wordpress's wpautop(). ",
    "foluis": "\n\\n will show as line break if you apply below style to the element:\nwhite-space: pre-wrap\n\n<div style=\"white-space: pre-line;\">\n     {{content}}\n</div>. ",
    "lavor": "Thank you for your answer knalli, I have already study the documentation and I know that from version 2 the service is returning promise.\nBut I don't know, how to translate label within translate-values directive.\nThe use case I want to implement is translating an error message, that describe the error in some field and name of that field I want have localized also.\nCould you suggest the another solution as mine, please?\n. I've ended up with the first option, translating values in advance within controller.\nThank you for pointing me in the right direction.\n. ",
    "BrtSmpsn": "Yes, translate-cloak works perfect when used in body or other root level elements. But in dynamic elements this is not usable. I'm add this quickfix for translate-cloak:\nhttps://gist.github.com/BrtSmpsn/e2b400510a69c55922bc\nThis acceptable only for simple cases of usage for translate and translate-cloak (both directives must be used for element and simple expressions will be used). Maybe you can recommend more stable and comples solution for dynamic elements (like ng-repeat)?\n. You are right, I remove all translate-cloak from children elements on pages and add new one to body, this solve issue.\n. Hide not initialized blocks on page instead on entire body is more preferable for me, this show 'ready to use' page content immediatelly and open hidden content later when data loaded and initialized. But I agree, use translate-cloak in ng-repeat is a bad idea, using translate-cloak in repeater parent is enought, this alow to hide not initialized blocks on page at load time.\n. ",
    "FrankPerryCarbonite": "Sorry to bother you, looks like our anonymous git access is broken.\n. ",
    "siriusastrebe": "sry fer teh trouble\n. I was checking out your project to demo github to a colleague of mine.\nPicked the angular translate 'cuz we're using it in our company's project.\nSorry if I caused you confusion.\n- SIrius\nOn Thu, Jun 12, 2014 at 11:18 AM, Pascal Precht notifications@github.com\nwrote:\n\nHey, everything okay with you?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/pull/600#issuecomment-45928442\n.\n. \n",
    "mzabriskie": "@PascalPrecht\nI've updated my code to use determinePreferredLanguage(). I am actually using the server to detect the locale then injecting that into the client so that I can get a more reliable locale. As you said the client is pretty screwy.\nI am now supplying my own function to determinePreferredLanguage() and things are working as expected: https://github.com/mzabriskie/mushroom-kingdom-pizzeria/blob/master/public/js/app.js\nThanks!\n. Really? I set my locale for Chrome to it-IT, though my app only supports it. When I take out registerAvailableLanguageKeys() I get a 404 requesting it-IT and no translation happens (it doesn't fallback to en). With registerAvailableLanguageKeys() in place however, it requests it and everything works as expected.\n. No worries. Glad to know it's working as expected and not by chance :)\n. ",
    "bastoune": "@PascalPrecht : thanks for the answer\n1) Yes, as I said, the console show me the the HTTP GET to the file is a success \n2) I do :     \n$translateProvider.preferredLanguage('en');\n3) JSONs are shown at the end of my question\n. Thank you, shame on me, here is my json correctly written:\n{\n    \"SORTBY\": \"Sort by\"\n}\n. There is actually no need for a plunker, it does work well with my Json correctly written.\nI tried to make a plunker anyway but I don't manage to import your library :s\n. Exactly!\n. ",
    "Ferhnir": "Hi guys, why that example not working in plunker?\nhttp://plnkr.co/edit/c7LMLI?p=preview\n. ",
    "cedricziel": "Confirmed on my side as well.\n. ",
    "koblass": "Hi @PascalPrecht,\nI've been able to provide you an example of the issue.\nHere it is: http://plnkr.co/edit/HJpx4uM6DdBmJBqbfTRw?p=preview\nSo basically my example loads a first partial translation file called \"common\" and then need to load a second translation file called \"main\" within the resolve \"locales\" method.\nI found out (when creating this example) that i you don't load the first partial file (common) this is working fine.\nLet me know if something is not clear.\nBest\nDaniel\n. Yes @tspaeth, I did, but as mentioned within this post, I use the refresh to get the promise.\nThe thing is that it works fine if I call \"addPart\" only one time, but if it is called multiple time then the refresh returns before all the translations are loaded...\n@knalli this was just for the example, in my real life situation of course the parts are completely different.\n. Hi @PascalPrecht, I just saw that you released a new package, so I've tested this issue against it and no luck, the issue is still there...\nDo you have any clue about this ?\nps: I've updated my plunker sample to have something cleaner and easier to understand... Let me know if something is unclear...\nThanks\nDaniel\n. Thanks @tspaeth, it works !\nBut what I don't understand is why the translation within the common was displayed properly and why the preferredLanguage is not enough and we need to specify the lanuage using the \"use\" method...\nBecause for instance, if I add the part within the \"config\" this is working without the use of the \"use\" method. \n. ",
    "ptgamr": "Any news on this?\nI put addPart in resolve(), then it does not work.\nI put addPart in the .run() section then it works.\nVery strange!\n. Yes I do.\n@all: after upgrading to angular-translate to 2.5.2, this does not happen any more. It's all good now.\nmy bower.json:\n\"angular-translate\": \"~2.5.2\",\n \"angular-translate-loader-partial\": \"~2.5.2\",\n\"angular-translate-loader-static-files\": \"~2.5.2\",\n. ",
    "juristr": "Hi guys, not sure I'm having the same issue, but maybe.\nI'm having a modular application structure, where each module loads its localized messages through the partial loader. I configure it in the main module\n``` javascript\n.config(function($translateProvider) {\n    $translateProvider.useLoader('$translatePartialLoader', {\n      urlTemplate: './locale-{lang}.json'\n    });\n// fallback language\n$translateProvider.preferredLanguage('en');\n\n})\n```\n..and then each module adds its parts\njavascript\n.config(function($translatePartialLoaderProvider) {\n    $translatePartialLoaderProvider.addPart('mymodule');\n  })\nSo far so good, the loading of the locale files seems to work properly. The issue I'm experiencing is that when refreshing the page, the language isn't set properly on the $translate service. Since I'm setting it based on the user's preferences I added a route resolve to make sure the controller and the page don't load until I've got the user and set the language on the $translate service. Something like this:\n``` javascript\n$stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'module_page.html',\n        controller: 'DemoController',\n        controllerAs: 'vm',\n        resolve: {\n          currentUser: function($log, $q, $translate, user){\n            var deferred = $q.defer();\n            user.getCurrent()\n              .then(function(result){\n                $log.debug('Route resolve. Setting lang to ' + result.language);\n                // set the language based on the user's preferences\n                $translate.use(result.language);\n            $log.debug('Route resolve. Lang is: ' + $translate.use());\n\n            // refresh (not even sure this is needed)\n            $translate.refresh()\n              .then(function(){\n                $log.debug('$translate.refresh. Lang is: ' + $translate.use());\n                deferred.resolve();                    \n              });\n\n          });\n\n        return deferred.promise;\n      }\n    }\n  });\n\n```\nBut it doesn't work. Although I'm setting the language to \"de\", invoking $translate.use() returns \"en\" (the preferred language).\nWhat's interesting is that if I add a separate resolve on the router state definition\n``` javascript\n    $stateProvider\n      .state('home', {\n        url: '/',\n        templateUrl: 'module_page.html',\n        controller: 'DemoController',\n        controllerAs: 'vm',\n        resolve: {\n          currentUser: function($log, $q, $translate, user){\n            // same as above\n            ...\n          },\n      ensureLanguage: function($translate){\n         $translate.use('de');\n         return $translate.refresh();\n      }\n    }\n  });\n\n```\n...then it surprisingly works?!? I fear I'm doing a really silly mistake somewhere...Could anyone take a look at it?? Here's the Plunker: http://plnkr.co/edit/pb8qO3J604QNri0Wf7uz?p=preview\n. @DWand I could swear I verified whether use() returns a promise...but yea...indeed :smile: \nYour suggestion seems to solve my issue, thx a lot :+1: \n. I came across this issue today morning. Obviously I could simply use $translate.use(userLanguage) once I fetch the user settings from the backend. But then I came across the Wiki article about custom storage providers with the following code sample:\njavascript\napp.factory('myCustomService', function ($http, dep2, dep3) {\n    return {\n        set: function (name, value) {\n          // do something with $http to set value\n        },\n        get: function (name) {\n          // do something with $http to get value\n        }\n    };\n});\nSeeing the comment \"do something with $http to set value\" I assumed that it would be possible to write a custom service to fetch the language from the backend, which then would be a \"better home\" for the language setting. With an async API I obviously tried to return a promise that resolves with the desired language...\nGiven that this doesn't work, I'd at least remove the comment in the Wiki in order to not mislead users. @knalli What's your though on that?\n. > The docs you're linking to are outdated.\n@PascalPrecht Oh..didn't know, just found them on Google and they didn't seem to be obsolete (last edit on September 2014)\n\nSo as already mentioned, asynchronous storage support is not given in angular-translate...\n\nThat's fine, there are other ways to do it. The only thing as mentioned are the docs that tend to mislead. Maybe they should be removed or at least place a notice with a link to the correct ones.\n. > :( Lesson learned: Updating a wiki footer results into updating each wiki page on GitHub...\n@knalli  oh, I see.. :smile: \n. @tspaeth I see. Ok, I'll give it a try and post back any results I got. Thx for now.\n. oh, I see. will give it a try, thx\n. I had a similar issue, where I have a series of potentially independent angular modules which use angular-translate for doing the localization. Each module should be free to use its own angular-translate loader, so one may directly pass the translations to $translate while other modules may use the partial loader and so on. In the end, when instantiated within a single application they should all play together nicely.\nSo I created this custom loader: https://github.com/juristr/angular-translate-loader-pluggable.\nMaybe it can help you with your use case as well. Let me know :smile: \n. The point is that within my angular widget I embed translations using the $translateProvider. But now, when I embed that widget within another application that uses $translatePartialLoader, translations break...\n// Rephrase: What are best practices for embedding angular-translate locales within reusable components/libraries?\n. @knalli Awesome, thx for the hint. I'll give it a go\n. @knalli Ok, I came up with this 1st draft of a pluggable loader delegator: http://plnkr.co/edit/ygaMvPBxYN3VWXEesWto?p=preview\nWould be cool if you could give it a look and provide me some feedback on potential issues/improvements. I'd then like to create a package out of it s.t. it can be reused by others.\nthx!\n. > Unless I've not overseen it I would suggest rethinking the requests and processings of your translation resolvings, but yes, something like this.\nSorry, didn't quite get it. :smile:  What do u mean by that?\n\nIt does not make any sense to hold the translations in the loader (as you did). Only for the process of combining/merging this would be required eventually (within the function returned by $get, but not outside).\n\nWell the probl here was that initially I delegated the static translations directly to the $translate.translations function, in order to avoid having to deal with them in my loader (just as you said). The probl is that in that case my $get of the loader won't be invoked. I assume this is because then the $translate service assumes to be used as the holder of the translations and ignores any other loaders. :question: \nNot sure whether that's right, but it was also one reason why I started to build this loader. Once you provide the translations like $translationProvider.translations('de', {...}), other loades like the static file loader etc are ignored.\n. (meanwhile I extracted the functionality in a dedicated library: https://github.com/juristr/angular-translate-loader-pluggable)\n. @knalli Awesome, would be cool if u report me any kind of improvements directly on my repo: https://github.com/juristr/angular-translate-loader-pluggable/issues. That'd be great.\nI'm still not sure I fully understood your doubts. Maybe I can help u if you provide indicate the line of code where there could be some potential conflicts. Note that I only keep the translates internally for those that are passed directly to my loader with the translate(...) function (as described further above). Would like to delegate that to the core angular-translate logic as well, but that didn't work out.\nMeanwhile, thx!\n. ",
    "islemus": "Hello guys,\nI would like  to point out that while the issue raised by  @koblass and  @ptgamr is fixed in version 2.6 it reappears in the release 2.7.0.\nI.E. in the plnkr http://plnkr.co/edit/HJpx4uM6DdBmJBqbfTRw?p=preview adding $translate.use('fr') in the resolver will solve the issue in 2.6.1 but not in 2.7.0\n. Indeed, adding a  $translateProvider.use(); in the config block solves the issue in 2.7.0\nThanks !\n. ",
    "jmorvan": "Hi @PascalPrecht ,\nIts meant for extending languages from services or directives so after the\n.config\n. @PascalPrecht, thanks for your time. \nI understand my use case is probably not common and I have enough elements to make this work now. \nI am probably not using the right approach here but simply using async loading is not enough for me in this case but the custom loader solution proposed by @jerrad in SO works. \nI just don't see the need for the added complexity, exposing translation tables seems like the easiest way IMHO though I probably don't know all the background mecanics and the effect such a change could have on them. I'll keep my modified source for now....\nThanks again for your time.\n. ",
    "PierreReliquet": "Forgot to follow the contributing guide. I'll make another one\n. In fact I did not contribute because that PR was considered not general enough. By that I mean that the transformation chain should have been implemented directly in angular-translate and not only in the static files loader. So my code is not available in the trunk. \nConsequently that was the implementation for a transformation chain and I just did implement the JSONdid not implement a the properties => json converter, I just wrote a simple converter to illustrate my implementation inside a test so it is not complete at all : \nJavaScript\nfunction(data) {\n  var splitted = data.split('\\n');\n  var result = {};\n  angular.forEach(splitted, function(pair) {\n    result[pair.split('=')[0]] = pair.split('=')[1];\n  });\n  return result;\n}\nIf you look carefully at that code what should be done is basically handle the fact that a properties file can include multiple lines variables. \n. I see your point and totally agree with it.\nIn fact, I am just working for now with the static file loader which explains why I did not get the big picture. However, I think it could be interesting to add a transformer chain to let people get any data with angular-translate and then just transform them into a valid JSON object.\nI close this PR and let you think about the idea of a whole transformation chain..\n. ",
    "wokier": "Hi. I have understood you contributed to have a hook to tranform properties file to angular-translate key/value object. Could you share your transformer code, as well as a full example of usage ?\n. Does this 'Custom Loader' feature is a more official way to do it ?\nhttp://angular-translate.github.io/docs/#/guide/13_custom-loaders\n. ",
    "mofux": "Thanks for the hint :) I just figured out this has already been fixed in the canary branch, just a couple of days ago :) https://github.com/angular-translate/angular-translate/commit/7625951de2474049be78294fa129c32ea46df6a9\n. ",
    "kdekooter": "Sorry Thorsten, should have dug a little deeper.\n. ",
    "kthblmfld": "I am having the same issue. Injecting $translate and calling refresh() on it seems to just repeat the initial lookups and fail all over again.\nI haven't had any luck with determinePreferredLanguage(), so I cribbed the code into a variable called 'userLang'. In bootstrap config, I have:\n        $translateProvider.preferredLanguage(userLang);\n        $translateProvider.fallbackLanguage('en');\nI am using the useStaticFilesLoader to retrieve the available translation files, and locale-en is successfully found. However, if I change the preferredLanguage in the browser to 'ar' (non-existent translation file), 2 GETs happen (404 on 'ar', 200 on 'en'), yet the translations fail.\nInjecting $translate into the main app controller and watching $rootScope.$translateChangeError() detects the issue, but attempting to modify the translation config and following with $translate.refresh() only repeats the initial problem. Will keep digging, but if something stands out as an obvious mistake, please let me know. Thanks!\n. I have managed to get some fallback behavior with $translate.use('foo_FOO') instead of refresh(). The default failover appears to be having issues (possibly fixed in another PR), and I am now experiencing \nthis issue which should be settled in the next release. Impressive turnaround time.\n. ",
    "idododu": "@tspaeth instead of \"{{FOO.Bar.bax | translate}}\", some people lie \"{{Bar.bax}}\" because it is short.\n. full di declaration can avoid errors when uglify this js\n. ",
    "nbaronov": "@knalli, @PascalPrecht\nHey guys,\nYes,  the issue is in 59aa2a01dca73b8343eadd77d41dcb294bfad89a.\nAs I wrote in the top post, the exception is thrown when $window.localStorage is checked if it is not null on angular-translate-storage-local.js, line 25:\njavascript\n    var hasLocalStorageSupport = 'localStorage' in $window && $window.localStorage !== null;\nSo the fix I thought about is to move the access to $window.localStorage inside try block (lines 28-30), so the exception is caught.\n. @knalli \nYes, $window.localStorage !== null throws SecurityError: Dom Exception 18.\nI've found it out by decomposing the statement \njavascript\nvar hasLocalStorageSupport = 'localStorage' in $window && $window.localStorage !== null;\ninto something like this:\njavascript\nvar hasLocalStorageSupport;\nif ('localStorage' in $window) {\n  if ($window.localStorage !== null) {\n     hasLocalStorageSupport == true\n   }\n}\nand noticed the exception was thrown from this line:\njavascript\n  if ($window.localStorage !== null) {\n. @knalli I'll check the guidelines and create a PR. It might also fix issue #384.\n. ",
    "JackieWYB": "After removing the block cookie settings from safari, works like a charm. thanks @nbaronov .. ",
    "steinerj": "Thanks for replying so promptly. Yeah, I saw it in the docs. It's good that you are aware of it, but the docs don't really reflect that awareness ;) I would try not to waffle around the problem in the docs, but instead clearly state the issue, using an example.\nI know there's plenty of workarounds. In our case we can just render the locale into our javascript from the backend.\nI was more on about exploring options of how to change the function, so that it really does what it says on the tin.\n. @tspaeth As a matter of fact I didn't :) Sorry about that. Then I'd opt to clarify the docs.\n. ",
    "StefanSchoof": "Hello,\nI have a similar Issue and try to use the \"server ping REST-Call\". My problem is that I the determinePreferredLanguage is called in the config on the Provider, but to write the function calling the REST Service I need $resource, which is not available in config.\nCan someone please give me sample Code, how I use determinePreferredLanguage with a REST Call to get the Acccept-Headers Values?\n. The use of the accept header for the language of the app is a fix requirement and a flicker will not accepted. Therefore I see no other way as wait and block until the request is done.\nI have a server Request that is needed for startup and I would add there a lang key and use it for the app. Currently after the resource is loaded, a $use is called and the app shows thereafter.\nThe best way I could think of the reduce the number of request in a row, would If the urlloader first request with no lang key and the server returns the languages and the resources for the language that the server decides. But I think this is no function of the url loader.\n. Thanks, the idea with the injection of the delivered html is a good solution for me, I hadn't think about.\n. ",
    "jasonmarston": "This also means there is no need to specify a fallback language, and using determinePreferredLanguage is a breeze.\n. I should say specifically it was the angular-translate-loader-static-files javascript I modified\n. ",
    "Ciget": "Ops, that`s my fault. I thought that there is some function, that will return just localized value. \nThanks a lot for help.\n. ",
    "gergelyke": "Ok, will resubmit again!\n. Wooo, the canary is behind master?\n. Ok :)\n. Any updates on this ? :)\n. Code samples added on or after August 20, 2010 are in the public domain. No licensing notice is necessary, but if you need one, you can use: \"Any copyright is dedicated to the Public Domain. http://creativecommons.org/publicdomain/zero/1.0/\"\nwe should be okay ;)\n. Was added here: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/Trim$revision/43457\n. When can I expect it in the master?\n. thx\n. If you could merge this in the meantime, I could use it with bower - would be much appreciated :)\n. ",
    "fidian": "I was subscribed to this bug because of the lack of caching of the promises.  In my setup, which may be flawed at the moment, angular-translate will try to fetch a locale file.  Before that request came back, a second request was being issued for the exact same language file.  The browser's cache won't help in that instance because the first one has not been returned from the server yet.\n. True!  I was not looking for diagnostic help.  Just citing one instance where relying on the browser's cache and good caching strategy on the server doesn't reduce the number of requests going to the server.  I'm sorry for the confusion.  Right now I'm basically implementing my own promise cache in my custom loader before returning it to angular-translate and having that cache specifically for the fallback languages is annoying.\n. @knalli - The behavior you describe appears to be exactly what I was battling.\nHere's a plunker.  Eliminating the first $translate.use() line lets the translation work.  http://plnkr.co/edit/kkGOvQTPliQmVoafsAmx?p=preview\n. @knalli - I've looked at the commit and that seems to be a good way to solve the problem.  Did you update the plunker to test your change?\n. Looks like it still is not working.  On load the \"TITLE\" should not just say \"TITLE\".  No interaction should be required to get the title to show the UK version.  As it says in the example, \"If you see \"TITLE\" only then translation did not work.\"\n. ",
    "leonprou": "@knalli \nThis is still an issue on 2.5.2, any luck fixing it?\n. ",
    "aaronleesmith": "I think this is a very good idea, especially for large apps. +1\n. ",
    "zgmnkv": "+1 should be very useful!\n. In my case I added an http interceptor and expected params to be always an object.\n. ",
    "stefankorun": "I was here trying to find the same thing. It would be a great feature for this awesome module. +1\n. ",
    "RodolpheGohard": "I see a problem where you have some directive/included content at different levels of nesting.\nHere's an example. We have a person directive for displaying a person with this template:\nhtml\n   <span translate>person.name</span>: {{person.name}}\nThen you have this page:\nhtml\n<header>\n   welcome, <span person=\"user\"></span>\n</header>\n<section translate-namespace=\"friends\" ng-controller=\"friendsController\">\n<ul>\n  <li ng-repeat=\"friend in friends\"><span person=\"friend\"></span></li>\n</ul>\n</section>\nHere, you have a problem with nesting, where the first translate directive call is not namespaced and resolves to person.name, whereas the second resolves to friends.person.name, which may not be desirable behaviour.\n. @tspaeth Sorry it was ambiguous. In my previous example, Person is a directive:\nI renamed the translation key to common.name for more clarity:\njavascript\nmodule.directive('person', function() {\n    return {\n        replace:true,\n        scope: {person:'&'}\n        template: '<span translate>common.name</span>: {{person.name}}'\n    }\n});\nnow, you can imagine this directive rendering the translation differently given the current outside namespace.\n. Here is a more specific list of hacks used:\n- Use the missing translation handler to send '...' when a translation is missing. This has the drawback of sending sometimes '...' to calls to $translate() in controllers. This is a problem.\n- Even when the webservice fails, send a resolved promise because if we reject, the custom loader will never be called again.\n- Call $translate.refresh(); to invoke the loader. Don't know why but this seems hacky.\n. The '...' feature is to avoid an unfriendly Flash of Unloaded Content. While the translations are being loaded, printing '...' feels more friendly and it indicates that content is being loaded, than printing an empty string or just the translation Id. But this is mainly my point of view here.\nThe main feature I was trying to explain is automatic loading. I know it is done through some hacks, and it constrain you to have a backend and to use a certain syntax for translations keys (dot syntax). I have little knowledge of angular-translate. I had thought of this system before, and realised angular-translate covered most of my use cases.\nAs per fallbacks, I had to store the translations my own way because I couldn't find a way to extend the translation set angular-translate uses internally. I guess this makes this fallbacks feature unusable.\nTo be honest, I don't need this feature so I didn't search for ways to keep it nicely.\nAs you can see, this quick solution kind of break the library, and I was hoping you guys here could give me clues on how to do this things in a more convenient way, or if that was feasible at all.\n. After reading your answer again, allow me to add that the '...' is to be used in the view with directives and filters.\nOf course, this behaviour become troublesome when using $translate(key). I guess using the missingTranslationHandler was not the right way to do this. Maybe a custom directive would be more appropriate.\n. @tspaeth thanks for your feedback.\nI'm intrigued by:\n\nf a part is not existing for a certain language [...], iterate to the next language and look in that part.\n\nWhat is a next language here ? is that a fallback language ? does that mean that, if a translation exists in the fallback language, it will never be fetched in the prefered language ?\nThe definition of the namespace could be dynamic. Here is a raw pseudo-code:\njavascript\n$partialAutomagicalProvider.setNamespaceGetter( function getNamespace(translationId) {\n    return translationId.split('.')[0];\n} );\n. I tried to dig a little , but I can't find a way to do this automatic partial loader correctly.\nThe problem stands in $translate service. When it can't find a translation, it directly triggers the missing translation handler. I found no way to postpone the resolution of the promise, which is mandatory if I want to implement this scenario:\n- call $translate('group.key')\n- 'group.*' is not loaded yet\n- async load the group\n- return a promise which will be resolved when the group is loaded\nIn the current configuration, here is what I can do:\n- call $translate('group.key')\n- group.key is not found\n- call missing translation error handler\n- the missing translation error handler triggers async loading\n- but since the missing translation must return a string, return '...'\nSo from here, once the async loading finishes, the translations are updated. Any subsequent call to $translate return the right translated value.\nThis is fine when using the translate directive because the digest cycle refreshes the translations when the async loading  calls back.\nBut inside controllers with $translate() it doesn't work and return \"...\"  because of the above scenario.\n. ",
    "bcldvd": "+1\n. ",
    "hippee-lee": "@knalli We haven't come back to it yet. Translation is lower on our list of priorities right now. Perhaps the partial loader will work for you as @PascalPrecht suggested above. \nIt's been a more than a month since I worked with that part of our component and I can't remember the exact details, but, the partial loader wasn't working for us when we tried to use it from the bower_compnent. We will need the ability to load / extend the translation table from the bower_component though so I expect we will revisit how we extend the translation table for our needs. \n. ",
    "zkirill": "From my understanding Angular is generally not great for SEO at this time. One workaround is to have something like PhantomJS load the page, save the result and then have that result served as cached static content by the server whenever a client identifies itself as a crawler.\n. ",
    "geminiyellow": "OK, got it . there is no indexOf in ie8. so just add Array.prototype.indexOf()\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function (searchElement, fromIndex) {\n```\n        var k;\n    // 1. Let O be the result of calling ToObject passing\n    //    the this value as the argument.\n    if (this == null) {\n        throw new TypeError('\"this\" is null or not defined');\n    }\n\n    var O = Object(this);\n\n    // 2. Let lenValue be the result of calling the Get\n    //    internal method of O with the argument \"length\".\n    // 3. Let len be ToUint32(lenValue).\n    var len = O.length >>> 0;\n\n    // 4. If len is 0, return -1.\n    if (len === 0) {\n        return -1;\n    }\n\n    // 5. If argument fromIndex was passed let n be\n    //    ToInteger(fromIndex); else let n be 0.\n    var n = +fromIndex || 0;\n\n    if (Math.abs(n) === Infinity) {\n        n = 0;\n    }\n\n    // 6. If n >= len, return -1.\n    if (n >= len) {\n        return -1;\n    }\n\n    // 7. If n >= 0, then Let k be n.\n    // 8. Else, n<0, Let k be len - abs(n).\n    //    If k is less than 0, then let k be 0.\n    k = Math.max(n >= 0 ? n : len - Math.abs(n), 0);\n\n    // 9. Repeat, while k < len\n    while (k < len) {\n        var kValue;\n        // a. Let Pk be ToString(k).\n        //   This is implicit for LHS operands of the in operator\n        // b. Let kPresent be the result of calling the\n        //    HasProperty internal method of O with argument Pk.\n        //   This step can be combined with c\n        // c. If kPresent is true, then\n        //    i.  Let elementK be the result of calling the Get\n        //        internal method of O with the argument ToString(k).\n        //   ii.  Let same be the result of applying the\n        //        Strict Equality Comparison Algorithm to\n        //        searchElement and elementK.\n        //  iii.  If same is true, return k.\n        if (k in O && O[k] === searchElement) {\n            return k;\n        }\n        k++;\n    }\n    return -1;\n};\n\n}\nif (typeof String.prototype.trim !== 'function') {\n    String.prototype.trim = function () {\n        return this.replace(/^\\s+|\\s+$/g, '');\n    };\n};\n```\nbefore angular-translate, everything is good.\n. ",
    "c0debreaker": "Thanks folks. I'll take a look at the number filter.\n. ",
    "gkptechi": "I will try to setup plunk and let you know. \n. I am currently on version 2.0.0 which has this issue however look like it is fixed in 2.2.0.\nThanks\nGautam \n. ",
    "flatsteve": "Hi @PascalPrecht. Thanks a lot for the response!\nThis is a bit thrown together but it explains my problem:\nhttp://plnkr.co/edit/onSlce1thOmyp9zXfLA2?p=preview\nAs you can see switching between German and English has no problems but if you click German then reload the page it will remember you selected German and load the German translation file but will not fall-back to the English file for the missing translation (in this case it will show the 'PARAGRAPH' id). \nAs I say mate - I'm probably doing something really wrong. Just been banging my head against this for an hour or two so if you can help it would be amazing. \n. Hi @tspaeth. I tried swapping out \nlangPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]);\nfor \nlangPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]).then(function (translation) {\n    translations(translation.key, translation.table);\n});\nand also registering a wildcard defaulting to 'en' in registerAvailableLanguageKeys. \nNone of this has fixed the issue. \nI appreciate you guys looking at this. Is there a workaround I've missed by any chance? Is the issue the way I'm implementing the translate filter?\nCheers again. \n. @tspaeth :) it works a charm! \nI had updated my angular-translate.js file (v.2.2.0) using the snippet of code mentioned above on my local project and it didn't work. Now that I have copied the source of the four files from your plunker and overwritten my project files everything works perfect - on refresh the Japanese text is inserted as well as the English fall-back. \nI clearly missed some important changes or possibly didn't clear my local storage properly. Sorry for taking up your time dude.\nAnyway; thanks so much for your help, this project has really made localizing my application a breeze. Appreciated! :+1: \n. ",
    "bayy": "I have the same problem with the partial loader, too.\n. ",
    "chrisscholly": "Here's a plunker that illustrates the issue: http://plnkr.co/edit/UJXvdW\nUse this url only to see how it works (because of url tricks). Use the urls below to run the example.\nTo reproduce the bug:\n1. http://run.plnkr.co/plunks/UJXvdW/#/en_US\n=> 'Hello there!'\n1. Replace en_US by de_DE: http://run.plnkr.co/plunks/UJXvdW/#/de_DE\n   => 'Hello da!'\n2. Replace back de_DE by en_US: http://run.plnkr.co/plunks/UJXvdW/#/en_US\n   => stays at \"LOADING...\" (while 'Hello there!' should appear, as step 1).\n   This is because cloak class is not removed at step 3.\nIf we listen to '$translateChangeEnd' instead of '$translateLoadingSuccess' in translateCloak directive, it will works as well and 'Hello there!' will display at step 3.\n. Thank you @knalli for implementing :) Can't wait to use the next release of angular-translate ! :)\n. ",
    "JPM84": "Ok, merging the two files on the server was our fallback plan. But I am interested in your second solution. How can I configure such a fallback stack in angular-translate?\n. @tspaeth: Thanks, I now understand how you can use the language fallback feature for overriding language keys. I have written a quick plunker for this: http://plnkr.co/edit/HJhgApkmEcgaLccqscSw?p=preview . Should solve our problem.\n. ",
    "jandudulski": "What if you don't have an impact on the translation source?\n. :ok_hand: \n. ",
    "spencerwi": "Not quite the PR you'd asked for, but another pain point discovered from live-fire usage in a single-page-app for $currentEmployer. We've got ng-switch loading in partials that use the translate, and since the same templates are used for partials and as pages in some cases, translate-cloak is also applied. \nBut since translation loading finishes before some partials get loaded in (i.e. before ng-switch value is changed), translate-cloak's compile hook never removes the .translate-cloak CSS class -- because the $translateLoadingSuccess event is never fired again.\n. Seems like I misunderstood the guidelines:\n\n\nCheckout a new branch based on master and name it to what you intend to do\n  ...\nMake your changes\n  ...\nCommit your changes\n  ...\nMake a pull request  \nMake sure you send the PR to the canary branch\n\n\nI'll rebase onto canary in my fork, then.\nAs for the linked PR: that has the same problem: what happens when the event gets fired before the directive is compiled for an element? As a user, I would expect the element not to be cloaked (and the translation to be immediately applied). Under current behavior, the element is cloaked indefinitely, because it never \"catches\" the event.\n. Rebased feature branch onto Canary.\nWith respect to partial loading, etc: I'll admit this is a na\u00efve implementation; as soon as at least one loader completes, the $translate service updates is flag to say that it's loaded translations (and any future translate-cloak elements are not hidden).\n. ",
    "epeleg": "This page is a very simple one and does not use ui-router at all.\nThe issue for me is that the localStorage is reading automatically setting\nthe language that was previously stored and I can not prevent it from\nhappening.\nand causes a flicker of the previously used language when I am getting to\nthe page before I get to update the language based on the URL...\nI was expecting it to be possible for me to configure the\n$translateProvider in my page module's .config() but failed to find a way\nto both use the $localStorage but override its previously saved language.\nOn Sun, Aug 10, 2014 at 12:26 PM, Thorsten notifications@github.com wrote:\n\nsorry - tl;dr\nWhat is the issue regarding angular-translate?\nWhy not use ui-router for state routing and language url detection?\nI'm not really getting the problem as there are several methods of \"making\nit fit to every need\" from within the module or you own app.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/667#issuecomment-51710133\n.\n. Personally I thing the best thing would be to have a stack of language\nresolver functions (like the one you use to parse the preferred language\nfrom the browser locale),\nthe developer will pass an array of preferedLanguageResolveProviders.\n\nwith $localStorageLanguageResolveProvider,\n $browserUserAgenLanguageResolveProvider and $URLLanguageResolveProvider\nbeing examples for optional \"out of the box\" preferred language resolvers.\nThe set of preferedLanguageResolveProviders can and should be set up via\nthe $translateProvider so that the language can be determined once on the\nfirst call to $translate.\nany such preferedLanguageResolveProvider should provide an object with a\nresovle() function that will return either a language or null.\nThe process of actually resolving a function would look through and call\nthe resolve functions until it finds one that returns a language which is\nnot null.\nEyal Peleg\nOn Sun, Aug 10, 2014 at 2:55 PM, Pascal Precht notifications@github.com\nwrote:\n\nHey @epeleg https://github.com/epeleg!\nFirst, thanks for the very detailed issue description. It's great that you\nalready came up with a solution that works for you but also share your\nthoughts about how it could work for others.\nFor now I would say you have to stick with your solution, since it's a\nvery specific use case here. However, I like your idea of just making\nit possible to pass an optional higher order function to\nuse[WhatEver]Storage() to let developers opt-in to something.\nI think this is something that is not very expensive when it comes to\nimplementations, and at the same time it gives us full flexibility.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/667#issuecomment-51712800\n.\n. Anton, where you able to resolve this?\n. o.k., thanks.\n. \n",
    "artuska": "I've made fast workaround on line 1363 in src/service/translate.js just deleting some code in if statement:\nBefore:\n1363: if (!$translationTable[key] && $loaderFactory) {\nAfter:\n1363: if ($loaderFactory) {\n. No. I made custom StaticFilesLoader as you suggested. Thank you!\n. I have the same problem \u2014 translate with translate-attr-title just does not work in some cases: http://plnkr.co/edit/TNUzo6DsxyJg2oEuW73g?p=preview\n. Just turn off the sanitize strategy 'cos it is totally broken:\nangular.module('app').config(function($translateProvider) {\n    $translateProvider.preferredLanguage('en');\n    $translateProvider.useSanitizeValueStrategy(null);\n});\n. @knalli right click on any of the examples and look in DevTools \u00abElements\u00bb tab \u2014 HTML tags are missing \u2014 all my div and span tags are gone! Is it translate-attr-* or empty translate ruins my HTML or is it Angular?\n. @knalli No, I did not tried canary, I've just waited for the 2.8.2 version or something :) Now I see 2.9.0 was released today so this will definetely work.\n. ",
    "datenreisender": "I was not yet able to boil down the problem from our full blown application into a plunk.\n. ",
    "hippich": "I looked through manual and issues and did not find a solution. Could you please point me to it? Or right keywords to use?\n. Ah, it was closed so I did not see it. Ok, closing this as a duplicate I guess.\n. ",
    "databasedude": "Ok, let me be more specific.  I'm not looking at any documentation.  I'm looking at the PROJECT DEMO CODE as mentioned in the title.  The \"project\" that I'm referring to is this one, where I'm making these comments: https://github.com/angular-translate/angular-translate/\nI also said \"ALL BUT ONE demo page has this bug\" which means ALL DEMO PAGES EXCEPT FOR ONE.  Here is a list of the pages with this bug:\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex10_translate-cloak.html (line 73).\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex1_basic_usage.htm (line 105)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex2_remember_language_(cookies).htm (line 61)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex3_remember_language_(local_storage).htm (line 66)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex4_set_a_storage_key.htm (line 60)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex5_set_a_storage_prefix.htm (line 60)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex6_namespace_support.htm (line 74)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex8_lazy_load_files_without_autoupload.htm (line 63)\nhttps://github.com/angular-translate/angular-translate/blob/master/demo/ex9_load_dynamic_files.htm (line 52) \nThe only file that does not have this error is \"ex7_load_static_files.htm\".\nHope that helps.\n. ",
    "jrnorrisjr": "I added a context value in the configuration that I can prepend to the urlTemplate that solved the issue.\n. Adding the context did not fix the issue and the behavior is very strange.  This is what I'm doing:\n$translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: configuration.appContext + '/modules/{part}/{lang}.json'\n        });\n        $translatePartialLoaderProvider.addPart('app-i18n');\nThe application is deployed in tomcat so the url should be http://localhost/myapp/modules/app-i18n/en.json.  If appContext is an empty string the url that is used by the loader is http://localhost/modules/app-i18n/en.json so the file is not loaded.  If appContext is set to any value such as xyz, the url that is used by the loader is http://localhost/myapp/xyz/modules/app-i18n/en.json.  So for whatever reason the loader somehow picks up the context and appends the value from appContext.\nThis is very strange behavior and I'd really appreciate it if anyone has any ideas on how to resolve the issue.  This is a big show-stopper for us.\n. Ok, I figured out what the problem was.  If the value of appContext doesn't start with a \"/\" then the behavior is what I posted.  If the value of appContext is \"/myapp\" then it works as expected.\n. ",
    "bashekking": "in my navigation bar I want to display an icon of the language that is currently used.\nI want to set $scope.language_key=??\n$translate.use() does not always work. see also http://stackoverflow.com/questions/20444578/get-current-language-with-angular-translate\n. ",
    "phw": "A method that would return the currently \"activated\" language (the language the should be used at the moment) would be really nice, especially if the language auto detection is being used. It is quite common that you have a UI element that allows the user to select the language, and which ideally does show the currently active language. The fact that the fallback language might lead to some strings being shown in a different language is more or less unrelated to this.\nI can confirm that $translate.use() is not a reliable way to get the active language. I do use the following to determine the active language, and it seems to work for me:\nvar activeLanguage = $translate.use() ||\n    $translate.storage().get($translate.storageKey()) ||\n    $translate.preferredLanguage()\n. I can confirm this issue. It happens to me when I upgrade to angular-translate 2.5.2, version 2.4.2 works fine. Both times using messageformat 0.1.8\n. Might be resolved then, I have to validate this against the latest version. For now I just copied over the bug report.\nI will report back.\n. Seems to be resolved using version 2.11. Thanks\n. ",
    "superandrew": "Of course, and sorry. I thought it was by design.\nSo here's my code:\n$scope.changeLanguage = function (langKey, languageName) {\n        $scope.selectedLanguage = languageName;\n        $scope.langKey = langKey;\n        $translate.use($scope.langKey);\n}\nand here's more or less the code to change language:\n<li><a href=\"#\" ng-click=\"changeLanguage('it', 'Italiano')\">Italiano</a></li>\n<li><a href=\"#\" ng-click=\"changeLanguage('de', 'Deutsch')\">Deutsch</a></li>\n<li><a href=\"#\" ng-click=\"changeLanguage('en', 'English')\">English</a></li>\nYou can see a live example here: www.puntonove.it however the code is uglified so it shouldn't be too easy to debug it.\nPlease tell me how can I help you figure out the problem, and thanks\n. I guess this was a big mistake of mine, I am very sorry, didn't notice it. Thanks a lot for help.\n. ",
    "mpgn": "@tspaeth I rewrite the code, i edit the code\n. Sorry, I forgot to give you some news, i just change and use this syntax: \n$translate.instant('TRANSLATION')\nIt's more readable in the code, works like a charm ! \n. ",
    "Hirse": "I just updated the two files in my project and it seems like the behavior is unchanged.\nThe strings-en.json file is still requested even though the language is already declared in translate-config.js.\nI didn't test the other mentioned special cases yet though.\n. ",
    "devknight": "@knalli: I've proposed changes via pull request. Can you review and merge? Thanks in advance!\n. ",
    "ramseyfeng": "Thanks for the quick response, I hope it was caused by cache too :-D\nI also have a question here, is there such a possibility that filters goes faster than the language file is successfully loaded.\ni notice that in $translate.use method, it invokes loadAsync method to load the language file when the first time translate is needed, it is an Async call, so if the application just start to load the language file, meanwhile the first filter on the page is rendering, is it possible that the translate can not find the correct translation in this case? \nIf the answer is yes, is there a mechanism to make sure that at least one language file is successfully loaded before the application's first page begin to render?\n. Yes, directive is OK. \nSince it only appear once with a quick flash, and filter will update its value on every $digest circle, it should be fine to use it.\nActually we are doing migration for angular translate, we want to upgrade our version from 1.1.1 to 2.2.0. \nCurrently there are lots of codes in the templates are using the angular filter, and we just want to find an easy way to do the upgrade.\nThanks for your kindly explanation!\n. \nActually i found all the words in parent controller got translated well, but the template with sub-controller didn't updated, could you kindly help me on this?\n. ",
    "twwwt": "Angular's changelog on 1.3.0-beta.19 has a comment on this:\n\n$parse: due to 8863b9d0, this in filters is now undefined and no longer the scope\nIt's a bad practice for filters to have hidden dependencies, so pulling stuff from\nscope directly is not a good idea. Scope being the filter context was never\ndocumented as public API, so we don't expect that any significant code depends\non this behavior.\nIf an existing filter has a dependency on the scope instance, the scope reference\ncan be passed into the filter as a filter argument (this is highly discouraged for\nnew code):\nBefore: {{ user.name | customFilter }} After: {{ user.name | customFilter:this }}\n\nI have opened an issue to re-introduce this behavior for filters. Please, vote for it if you agree with me.\n. Yes.\n. If I understand @cdloh right, the question is the following. Consider this paragraph:\nhtml\n<p translate=\"some_translation_table_key\">Here is some content</p>\nThe text within the <p> tag is in some language, English in this case. It is furthermore assumed that all texts that appear this way (i.e. that should be translatable) are in the same language throughout the entire application. By placing the translate directive onto the <p> tag, angular-translate should essentially leave the text as it is as long as its current language is set to English. Otherwise, it should take the key some_translation_table_key, lookup the translation in the corresponding language table, and replace the text by its translation. The point is, that one has to tell angular-translate that the default language used by translatable texts appearing directly in HTML is xy (English in this case). The advantage of this approach is that one doesn't need a translation table for the default language since it is implicit in HTML.. Hi\nI agree with putting focus on the important things. From my point of view, this is currently support for Angular 1.6. Second, fixing security-related issues. I think it is not that important to agree on an accepted strategy on how to handle the rest (feature requests, bugs, pull requests). Just do what you believe is necessary.\nThanks for all your work that went into this project!. ",
    "jangot": "Sorry, it is't solution.\nI knew that I can push object instead of string, but I want to parse my expression.\nThis is common practice in my project: translate:'{date:dateFilter(video.date)}' \nI can push object {date:...} but dateFilter(video.date) will be string dateFilter(video.date). It is't correct.\n. I got it. It is sadly. \nI have a lot of work now.\n. ",
    "Burgov": "Hi,\nA common use case scenario for this is when you use the partial translations loader in combination with a language switcher somewhere on the site. If you switch to ten different languages in a row, and then do .addPart, it will actually call the loader 10 times, once for each language.\nIf I get it right, your suggested solution is something that has yet to be implemented, correct?\nPerhaps there is a better solution for the above problem. I'd be happy to hear and if necessary help implement it.\n-edit: and to answer your last question: the place to call this is in the change listener if the old language != the fallback language\n. @tspaeth hm. I'll investigate it a little further, but it appears that when setting a new language using use(), the old language is pushed onto the fallback language stack. Can you confirm this?\nIn either case I'll check to see if I can solve this issue without any necessary patches later on.\n. I understand now what was happening: I had set a preferredlanguage, which is always automatically pushed onto the fallbacklanguages stack.\nIt might be useful to add a method to change or unset this preferredlanguage, but I was able to solve my specific problem elsehow.\n. ",
    "Jacky-Lau": "You can use the html tag  to break the line with an unsafe filter after the translate filter, like {{'abc' | translate | unsafe}}\nHere is the code of my unsafe filter:\nangular.module('filters.unsafe', []).filter('unsafe', ['$sce',\nfunction($sce) {\n    return function(value) {\n        return $sce.trustAsHtml(value);\n    };\n}]); \n. ",
    "Tyl68": "Thank's a lot for your answer, I will try that.\n. I tried this solution, but it does not work for me, I still see the  instead of having a line break.\nActually, I don't understand why the author says (in #595)  that it should work, even without the unsafe filter ..\nI have the last version though.\nIt would be nice the the author add a comment on this issue :o)\n. Sorry but this does not help me a lot, all my libraries are up to date, especially the angular-translate one, and I don't know how to use a directive in this case.\n. Ok thanks a lot Pascal, it works perfectly with the directive.\nThanks also Knalli, I hadn't understood your answer correctly.\n. Hi,  I face another issue, I use $translate.instant('MESSAGE_ID') in my javascript code, but there again it seems not to interpret  tags, is there a workaround ?\n. Is there a way to add line break with $translate.instant('MESSAGE_ID') ?\n. I tried \\n but it doesn't work.\nI now know that I have to use the directive instead of the filter in the html code.\nBut this message is not in the html code, it is in the javascript code, because I have to generate a string in a scope variable that will be bind later,  that's the reason why I use $translate.instant().\nI don't figure out how to use the directive in this case, can you be more precise please ?\n. ",
    "paolodm": "@Tyl68 would you mind posting a snippet of your solution? \n. Nevermind, I found it. I didn't realize that the \"directive\" @PascalPrecht was talking about was referring to angular-translate's own translate directive. Here it is for anyone who ever stumbles upon this thread:\njs\n     <strong translate=\"DATE_RANGE\" translate-values=\"{{ bill.dateRange }}\"></strong>\nNote that the translate-values property. (Other sites have it as just 'values'. The api must have changed since then.)\n. ",
    "chrxs": "Hi, the state is configured for the second view (search results):\njs\n$stateProvider.state('searchResults', {\n      url: '/{locale:[a-z]{2}}/search-results',\n      params: {\n        locale: {value: null}\n      },\nI've used a build of master branch for ui-router as it seems to include ability to specify optional params in the url, apparently this isn't yet in their release.\nIn the HTML the filter looks like:\n{{ 'Test' | translate }}\n. yeah I think you're right, I actually don't think it's an issue with angular-translate\n. ",
    "aymericbeaumet": "Thanks for busying yourself with it. Keep in touch!\n. Thanks\n. ",
    "fredericsureau": "I just tried canary but it does not solve the problem entirely\nHere is a Plunkr : http://plnkr.co/edit/hsX6b8mUiHsAVVNkFO7z?p=preview\n. ",
    "aikrez": "Thank you!\n. ",
    "johannesjo": "Might be releated to this one https://github.com/angular-translate/angular-translate/issues/949#issuecomment-77576009\n. +100\n. Turns out this was related to an incompatibility of v.2.5.1 with ngMessages. It works with v.2.6.1\n. Testing in chrome. Issue does not seem to be resolved also for 2.6.1. \n. Setting the directive priority fixes the issue:\n$translateProvider.directivePriority(222);\n. You need an additional expectGET for the translations file. You can circumvent this by excluding the module from the tests as I found out, but still, it could be really annoying.\n. ",
    "dcleao": "Made the changes you requested.\n. Just now, read your last comment on the promise-based response handler... :-)\n. Rebased.\n. Oh...ooops. No not intended. The fact is that the project wide .jshintrc isn't being taken into account, when I call grunt, and so I added that for being sure that at least the braces were ok.\nPlacing here all the flags in .jshintrc, really returns a \"thousand\" violations...\n. I'm not sure how that would work with the already existing error handler, which only exists for the partial loader.\nIf the meaning in the property name would say \"this transforms successfully received data\", then I think that the code is already at the right places. \nIf it should be meant as general response handler (as its name currently implies), then, like you say, it should receive another parameter with the error.\nWould then, also need to change the way the rejects are being handled in the other loaders (url and static).\nPerhaps a good signature would be a function that receives a xhr promise and returns a new one.\nThat would give it total freedom on how to handle all the cases...\nNot sure what's the way you feel this should go.\nEDIT - the handler could be something like this:\njavascript\nfunction responseHandler(promise, partName, lang) {\n    return promise.success(function(data) {\n         return myTransform(data);\n   });\n}\nFor the Url and Static loaders, the arguments would be: promise and key?\nAnyway. Are you picking this from here?\n. ",
    "Soviut": "@knalli I agree. I was hoping to find out if this was a known issue with a workaround.\nIt's also possible for Translate to broadcast an event when each translated element has finished translating (though this could get noisy). Another possibility would be to optionally add a class to the element to indicate it contains translations; Like an inverse translate-cloak.\n. @knalli The class would be simply for classification reasons. However, I think the events could be useful if you're using other directives that rely on content being present. They'd alert when the DOM has been updated, as opposed to when the translation data has loaded.\nI'm having to create a crappy polyfill directive that essentially watches the objects on a timer to see if they've changed size. The $translateLoadingSuccess only fires once on page load and the Safari rendering issue happens later to new content elements. So translate-cloak doesn't work on them.\n. @knalli I agree this is ugly. I'm hoping this can be solved with just style tweaks, but I'm having to create polyfills until I find that.\n. @ritenv I was having this issue with angular 1.3.x and angular-translate 1.2.0. I updated to angular-translate 2.4.2 and this solved the issue.\n. ",
    "jbarbede": "Sorry, my fault... forgot that issue. I was forcing the language.\n. ",
    "Pumpuli": "This is still broken in IE. Reason is the same: https://github.com/angular-translate/angular-translate/blob/92bc9551279fc2f5bc7daaedebc87adede8b3713/src/directive/translate.js#L118 SVG elements don't have outerHTML. Or at least they didn't have, and that's still true in IE11.\n. ",
    "rcollette": "We're seeing that using data-translate directive does not work in Chrome either, despite the applied fix.\n. I believe the performance issue with $broadcast was resolved quite a while ago.   It doesn't actually \"broadcast\" in like DOM events.  It's a publish subscriber model so only the actual subscribers are going to be called.\n. Scratch that.  This was all confusion because someone in our environment had coded a test stub incorrectly, returning a promise in all cases.  Sorry for the confusion.  Closing.. ",
    "circlingthesun": "https://github.com/rubenv/angular-gettext is also affected. @rubenv thinks its a good idea to bug the Angular.JS team into supporting an override. See the comments in the treads above.\n. ",
    "acutus": "Apparently there is a way to signal that a filter is stateful: \nhttps://docs.angularjs.org/guide/filter\nhttp://plnkr.co/edit/?p=preview\nEdit:\nOk, knalli beat me to that, but leaving the links here in case that's of any help.\n. Hep, I did get a bit confused there :) (didn't try out running against that new scope yet). Are you saying the whole filter.$stateful = true didn't work with that setup or just that there was something with this specific pull request? If latter, just ignore this and go with your patch. I don't care where the fix comes from, just that it gets applied.\nI'm running against 1.3rc2 and at least visually stuff started working after setting .$stateful = true.\n. Ah, ok there are failing tests with that correct scope, missed that somehow there.\n. ",
    "AbrahamAlcaina": "Hi I don't know if it is the same bug.\nBut when I tried to use in angular 1.3.0-rc2 I see this in batarag:\n\nThis is the code:\njs\n<img src=\"/shareBlack.png\" alt=\"{{::'SHARE'|translate}}\" class=\"action-element\" data-ng-attr-title=\"::'SHARE'|translate\" data-ng-click=\"startShare()\" /> \n...\n<span class=\"text-initial\" data-ng-show=\"feed.totalComments == 1\" data-ng-bind=\"::'COMMENT'|translate\" />\nThe html generated is correct, the text appears properly, but it seems that have a watch.\n. With the new version one-time binding \"::\"  the translation filter, it seems do not remove the watch expression\n. ",
    "orrc": "Thanks for this solution, it's very helpful.\nI agree; there's usually not much point in determinePreferredLanguage returning a language which isn't in the list of available languages keys.\nWhile I understand that determinePreferredLanguage() can take a function parameter, it's an unnecessary pain to have to then define a function which should be built-in for what must be the most common use case.\n. ",
    "apreg": "Thank you for this trick. It really helped me!\n. ",
    "Myeris": "Your solution helped me out a lot but I still got an issue and I don't know if I'm doing something wrong or if it's just the way it's supposed to be.\nFrom what I understand, if a key is missing from my preferredLanguage, the fallbackLanguage should replace it, right? However, for some reason, it does not. Any thoughts?\n. Thanks a lot ! The error handler was the solution to my problem. Everything works like a charm now.\n. ",
    "screendriver": "+1\nThank you for the trick with the *. I expected 'fallbackLanguage()' does the same but it did not.\n. ",
    "feefk": "Thanks a lot!!!\n. ",
    "tandibar": "Hi, this \"fix\" really helped me. I think it is counter intuitive that determinePreferedLanguage is able to return a locale which is not in defined available language keys.\nOr is there a misunderstanding here? I wonder why this issue is closed.\n. Ok, but if i call determinePreferedLanguage() it will internally set the language to the determined language, or am I wrong? It will at least set what is returned by $translateProvider.preferredLanguage().\nI had a problem with this code:\n```\n$translateProvider\n  // see: http://angular-translate.github.io/docs/#/guide/09_language-negotiation\n  .registerAvailableLanguageKeys(['en', 'de'], {\n    'en_US': 'en',\n    'en_UK': 'en',\n    'de_DE': 'de',\n    'de_CH': 'de'\n    })\n  .determinePreferredLanguage();\n// interpolation for pluralization\n  $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n```\nIn a polish Browser the last line will fail with Plural Function not found for locale: pl_PL which leads me to the assumption that determinePreferredLanguage() is setting something internally. If I change the code to (as suggested by @mrzepinski):\n```\n$translateProvider\n// see: http://angular-translate.github.io/docs/#/guide/09_language-negotiation\n.registerAvailableLanguageKeys(['en', 'de'], {\n  'en_US': 'en',\n  'en_UK': 'en',\n  'de_DE': 'de',\n  'de_CH': 'de',\n  '*': 'en'\n  })\n.fallbackLanguage('en')\n.determinePreferredLanguage();\n// interpolation for pluralization\n$translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n```\neverything works fine. So in this case determinePreferredLanguage() will not return or set pl.\n. Hi, we got this behavior again. And as I understand your spec it is another case. Our case is:\nwhile preferred language is still loading,\nanother language will be requested and\nis returning after the preferred one\nIn this case the unprefered language will be used.\n. To be precise we are configuring (.config) the $translateProvider with available languages (de and en) and prefered language (de) and then in a .run block we load the language from the local storage and try to use it via $translate.use(loadedLang). If it is let's say 'de' we will sometimes get 'en' because 'en' was loaded slower.\n. Yes, i think that is our case. So did you fix anything to get your spec working or did it just work? I other words: did you find the reason why it did not work for us?\n. ",
    "wongkwl": "You are right.  It is not resolved in 2.3.\n``` javascript\nError: langPromises[langKey] is undefined\nthis.$get</getTranslationTable@http://localhost:9088/AngularUI/scripts/vendors/angular-translate-2.3.0.js:413:13\nthis.$get</getFallbackTranslation@http://localhost:9088/AngularUI/scripts/vendors/angular-translate-2.3.0.js:422:11\nthis.$get</resolveForFallbackLanguage@http://localhost:9088/AngularUI/scripts/vendors/angular-translate-2.3.0.js:458:13\nthis.$get</fallbackTranslation@http://localhost:9088/AngularUI/scripts/vendors/angular-translate-2.3.0.js:481:11\nthis.$get</determineTranslation@http://localhost:9088/AngularUI/scripts/vendors/angular-translate-2.3.0.js:502:15\nthis.$get</$translate/<@http://localhost:9088/AngularUI/scripts/vendors/angular-translate-2.3.0.js:326:15\nqFactory/defer/deferred.promise.then/wrappedCallback@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:11572:15\nqFactory/ref/<.then/<@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:11658:11\n$RootScopeProvider/this.$get</Scope.prototype.$eval@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:12701:9\n$RootScopeProvider/this.$get</Scope.prototype.$digest@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:12513:15\n$RootScopeProvider/this.$get</Scope.prototype.$apply@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:12805:13\ndone@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:8378:34\ncompleteRequest@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:8592:7\ncreateHttpBackend/</xhr.onreadystatechange@http://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js:8535:1\nhttp://localhost:9088/AngularUI/scripts/vendors/angular-1.2.24.js Line 10071\n```\n. It seems solves the $fallbackLanguage growing problem.  But the preferred language in langPromises is still missing.\n. I am using directive such as\nhtml\n<span translate>UNKNOWN_KEY</span>\n. It works now.  Thank you @knalli \n. ",
    "aputivlskiy": "I'm also experiencing this error. \n- Preferred language: ru-ru\n- Fallback language: en\n- Current used translation: en\nVersion: 2.3.0\njavascript\nTypeError: Cannot read property 'then' of undefined\n    at $get.getTranslationTable (http://localhost:3000/bower_components/angular-translate/angular-translate.js:413:34)\n    at $get.getFallbackTranslation (http://localhost:3000/bower_components/angular-translate/angular-translate.js:422:11)\n    at $get.resolveForFallbackLanguage (http://localhost:3000/bower_components/angular-translate/angular-translate.js:458:13)\n    at $get.fallbackTranslation (http://localhost:3000/bower_components/angular-translate/angular-translate.js:481:18)\n    at $get.determineTranslation (http://localhost:3000/bower_components/angular-translate/angular-translate.js:502:15)\n    at http://localhost:3000/bower_components/angular-translate/angular-translate.js:326:15\n. Canary version works for me too. Thanks!\n. ",
    "lucasconstantino": "From the docs;\n\nAngularJS 1.2 provides animation hooks for common directives such as ngRepeat, ngSwitch, and ngView, as well as custom directives via the $animate service. These animation hooks are set in place to trigger animations during the life cycle of various directives and when triggered, will attempt to perform a CSS Transition, CSS Keyframe Animation or a JavaScript callback Animation (depending on if an animation is placed on the given directive).\n\nI know it is a bit complex, but yeah, it is responsability of a custom directive to make AngularJS understand it can be animated and handle it by the AngularJS animation system. Say you have a translating element as follows:\n<div translate class=\"animate-translation\">TEXT</div>\nUsing AngularJS $animate factory I could allow for CSS only animations like the following:\n```\n.animate-translation {\n  transition: all 1s;\n}\n// Translated text is entering, DOM has just being replaced.\n.animate-transition.ng-enter {\n  opacity: 0;\n}\n.animate-transition.ng-enter-active {\n  opacity: 1;\n}\n```\nThat would make any translated text, when the language change, apper with a fade in to that page. That's what I mean. Has anyone accomplished this?\n. ",
    "fortesl": "Working now. I did upgrade to the latest version, maybe just needed the upgrade. closing the issue\n. ",
    "ds82": "I'm having the same problem right now. Just upgraded to 2.5.0, but the problem persists.\nI'm using the staticFilesLoader and listening on $rootScope in a service .. I suppose the event is fired before my service is instantiated - but that's only guesswork .. \nEdit: confirmed my guess .. \n. ",
    "ramondeklein": "I had some pretty weird issues with this module in combination with RC-2 as well. In my case the development builds worked fine, but the production version didn't translate during startup. Tags that were loaded afterwards worked fine. The production version is minified, uglified and uses some CDNs instead of local scripts. Both versions use AngularJS 1.3 RC.2.\nBased on your previous comment I tried the latest version in the patch-for-ajs1.3 branch and that fixes my problems. It would be great to have a stable release of angular-translate soon that fixes the problem and converts it into a stateful filter.\n. Just upgraded and I can confirm that it works with RC2. Thanks for the support!\n. ",
    "joehui": "OK.  It works now with the latest release.  Thanks for the speedy response.\n. ",
    "david-hollifield": "I'm not sure I understand what you're saying. Should I not be trying to use onetime binding for my translated strings?\n. Thanks! Gotcha.\n. @ajwhite Nice!\n. I'm having a similar problem where my directive's scope is being \"overridden\" by translate's scope. My directive contains an input that uses translate and translate-attr-placeholder to show placeholder text. I have a directive binding for that input's text value using the \"=\" setting. When translate exists on the input control, that binding result ends up in translate's scope instead of the scope defined by the \"=\" setting.\n. I resolved the problem by creating my own directive that works a little differently. You use it like so:\n<input type=\"text\"\n           name=\"state\"\n           class=\"form-control\"\n           ng-model=\"region\"\n           placeholder=\"Payment_State\"\n           translate-attr=\"placeholder\"\n           required>\nThe directive has the list of attributes (separated by ';') to translate and each attribute contains the translate key. The directive is pretty simple, not as elegant, but won't destroy my scopes:\n```\n(function (module) {\n    \"use strict\";\nmodule.directive(\"translateAttr\", translateAttr);\n\ntranslateAttr.$inject = [\n    \"$filter\",\n    \"$timeout\"\n];\n\nfunction translateAttr($filter, $timeout) {\n    return {\n        restrict: \"A\",\n        link: link\n    };\n\n    function link($scope, $element, $attrs/*, controller*/) {\n        var attrNames = $attrs.translateAttr.split(\";\"),\n            translateKey,\n            translateValue;\n\n        _.each(attrNames, function (attrName) {\n            attrName = _.trim(attrName);\n\n            $timeout(function () {\n                translateKey = $element.attr(attrName);\n                translateValue = $filter(\"translate\")(translateKey);\n\n                $element.attr(attrName, translateValue);\n            }, 100);\n        });\n    }\n}\n\n})(angular.module(\"app.directives\"));\n```\n. ",
    "ajwhite": "Just happened to come across this. I've been working on a solution for one-time binding the translations with an extension to pascalprecht.translate, https://github.com/ajwhite/angular-translate-once\nMore on how it works: http://atticuswhite.com/blog/angularjs-translate-once-angular-translate-one-time-binding/\n. Great question @JerryBels. I'd be quite interested in doing some performance tests on that theory. It may add to the initial phase of constructing the DOM, but I can't say for sure how much overhead it will add.\nWould be interesting to do a test with 100, 1,000, and 10,000 elements versus filters, invoke a few digest cycles, and see how things look\n. @JerryBels -- probably not for a little while. I welcome you to submit an issue and either myself or a member from the community will pick it up at some point :)\n. No - the filter can still return the undesired value. The localization files are not loaded synchronously, so there is no guarantee that they will be available of a onetime binding is used. \n. I've been using a custom directive that extends upon angular-translate\nhttps://github.com/ajwhite/angular-translate-once\n. ",
    "tangorri": "Hi,\nusing ::oneTimeBinding.\nI meet the same problem, on certain rare circonstances the app fails to translate key (because of asynch loader). I agree I should have think about it, but it should be indicated as 'dangerous' in documentation. Removing watchers is usefull because we can use directive in massive repeated loop...\n. ",
    "mebibou": "Would this work <h3>{{::value = ('FeaturedProducts' | translate)}}</h3>? I haven't tried though\nOr maybe an uglier version if it doesn't cut it: <h3 ng-init=\"value = ('FeaturedProducts' | translate)\">{{::value}}</h3>\n. ",
    "lopesc": "Is there any advantage to using this: <span translate = \"{{::'KEY'}}\"></span>.   I assume that just the bit inside the double quotes \"{{::'KEY'}}\" will be removed from the watcher  (since it is an expression).  This will resolve to just \"KEY\", and the directive itself will still be watching that attribute - Therefore for one to use a bind-once-and-forget approach, they would be limited to the filter only. \n. @PascalPrecht @knalli \n. @PascalPrecht @knalli \n. Thanks @knalli \n. ",
    "bmhumadi": "I was able to use one-time binding without any library like bind-once\n<span translate=\"play\"></span>\nto \n<span>{{:: 'play' | translate }}</span>\nI hope this helps others. It took me hours to find this solution. ",
    "dkonemann": "Same problem here.\nIs there really no workaround for using $translate.instant('string_id') from js?\n. ",
    "fedotxxl": "If you do really need translations inside config phase do following:\n1. Configure angular-translate in preload module\n2. Share $translate service (window.$translate = $tranlate)\n3. In run method of preload module bootrap your main application (angular.bootstrap(document, [\"app\"]);)\n4. In your application replace $translate module:\n.factory(\"$translate\", function () {\n       return window.$translate;\n   })\n5. $translate will be same for both applications. You can use window.$translate in your config phase (or share it other way)\nThis worked for me\n. ",
    "Sadi-1992": "hi fedotxxl, angular is a lot of new stuff for me. \nI have to translate the Name and description of a widget, too. But i dont really understand what i have to do. can u Show me your solution on an example? which files have i to modify? \nIm really confused.... heres my question on stackoverflow:\nhttp://stackoverflow.com/questions/41018345/how-to-filtertranslate-config-widget-title-in-angular-blur-admin. ",
    "cronosreloaded": "You can use the filter right in the HTML:\n{{ datepickerPopupConfig.clearText | translate }}. ",
    "marsh73": "Okay, so based on this... one solution would be to explicitly tell my app to $translate.use('en-US') or whatever default language prior to calling my initial refresh upon page load. This seems to work, though it does not follow all the tutorials I have seen.\n. I'm not using any router.\nhere is a functioning plunker. http://plnkr.co/edit/Vts9CW4VoJsXoSdllFsq?p=preview\nhere are the problems I'm still seeing.\n- setting $translateProvider.preferredLanguage('en-US') seems to disable to use the 'en-US' file. I imagine this is why the refresh() method is not doing anything.\n  - I tried $translate.fallbackLanguage('fr-FR'); but wasn't able to get that to work.\n- I'm able to set the language by setting $translate.use('en-US') but the problem occurs when I introduce localstorage. I have to write logic looking for the cookie or storage key, which seems like I'm adding some redundancy.\n. ",
    "irnc": "@knalli Besides the already implemented namespaces, this issue asks about another concept, namely the translate-prefix directive.\nConsider following markup and the long namespaces used:\nhtml\n<div class=\"welcome\">\n  <section id=\"login\">\n    <h1 translate>start-page.welcome.login.heading</h1>\n    <p translate>start-page.welcome.login.help-text</p>\n  </section>\n  <section id=\"sign-up\">\n    <h1 translate>start-page.welcome.sign-up.heading</h1>\n    <p translate>another.namespace.id</p>\n  </section>\n</div>\nIt would be more convenient to have translate-prefix directive at parent element, e.g.\nhtml\n<div class=\"welcome\" translate-prefix=\"start-page.welcome\">\n  <section id=\"login\" translate-prefix=\".login\">\n    <h1 translate>.heading</h1>\n    <p translate>.help-text</p>\n  </section>\n  <section id=\"sign-up\" translate-prefix=\".sign-up\">\n    <h1 translate>.heading</h1>\n    <p translate>another.namespace.id</p>\n  </section>\n</div>\nWhat do you think about this approach? Would you be willing to see relevant pull request?\n. I will give it a try. But do not expect PR sooner than mid-April I guess due to taught work schedule.\n. ",
    "xnf": "First i gave up and started on using namespaces in keys as namespace.subnamespace.key, but it indeed breaks the layout for small elements such as buttons, tabs, menus. So having namespaces as argument would be cool and it would be even compatible with current solution. I hesitate to do that, but since knalli said \"we like pull requests\", i could give it a go :)\n. ",
    "ericq": "During my test via manipulating the chrome browser language setting, I received different language determined by the angular-translate. The language can be \"en\" or \"en_US\", depends on my chrome setting. But I want to both \"en\" \"en_US\" pointing to the same static language file, which itself could be a false expectation -- but I just want to simplify it. \nI found the following solution, if the language key contains \"en\", then use the \"en\" as the language key\nvar language = $translate.proposedLanguage();\n  if (language && language.toString().indexOf('en')!== -1) {\n            $translate.use('en);\n   } \n. oops. I didn't see that link. Sorry. I just improved my app by following the link you provided. Thanks so much.\n. Thanks Knall,\nI used angular-dynamic-locale to dynamically load the angularjs-i18n local, which is used by the datepicker. But I need to do extra work to synchronize the language between the angular-translate and angularjs-i18n. \nAlso one more note, the datepicker does not respond to the language change, so I have to do an explicit reload of datepicker as the following.  \n```\n $scope.$on('$localeChangeSuccess', function() {  // event triggered by the angular-dynamic-locale\n        console.log('$localeChangeSuccess');\n    var bak = new Date ($scope.appointment.date); // appointment is my application object, replace it with whatever you're using\n    $scope.appointment.date = bak;\n});\n\n```\n. ",
    "jirihelmich": "It is caused by uglify2 mangle. Affects all angular parts, not just translate module.\nhttp://beletsky.net/2013/11/using-angular-dot-js-with-require-dot-js.html\n. ",
    "SandeepThomas": "@ericq , can you explain how you integrated angular-translate with ui-datepicker? thanks\n. oh.. thank you..\ni should use it like this right?\n$translate('hello', null, null, null,'de').then(function (translation) {\n    _this.forcedtext = translation;\n});\n. ",
    "greckin": "It was a b) case. I have added only additional handling of a rejected promise. This promise is not returned, so I believe it is not a breaking change.\n. Somehow I missed the obvious fact that it has to be applied as HTML. Mea culpa, I do not know what I was thinking.\nAnyway, could you explain why a key that is missing is still applied? Is it for any other reason than to be clearly visible for user that translation is missing?\nWhen I was inspecting code I have noticed \"translate-default\" attribute for translate directive. Now I wonder would it be beneficial to allow  setting a global \"translate-default\" using $translateProvider? This would allow to have some custom message in case of missing translation or even could be useful for automation tests that could try to locate that particular text on a screen?\n. Perfect, you guys thought of everything. Cheers\n. Yes, this is handling of a promise reject case. Written in brackets because of IE8 is considering 'catch' as a keyword.\n. ",
    "alodium": "hi @knalli - in line 913 we call translateChangeEnd - again, too soon.\nI tried to implement the fix but translateCloak listener is called too soon again, via the event on 913. \n. with translatePartialLoader:\nline 1452:\nlangPromises[key] = loadAsync(key).then(function (translation) {\n              translations(translation.key, translation.table);\ntranslation.table - can be an empty object / different table. the specific translation is not inside.\nSo the code assume that the translation is ready. it even get replaced in the html with the same key, but the translation table can be wrong.\nuseLanguage(translation.key);\nthe above call will trigger translateChangeEnd - cause the cloak class to be removed, even when the translation is not in the html.\nIn any case it might be our special case that we cant find. on my debugging, this event is just being called before the translation is in the HTML.\ntranslate-cloak=\"my.key\"\nAlso didn't work. \nWill keep looking. Thanks!\n. ",
    "andertun": "I use latest stable version of angular (1.2.25), angular-translate v2.4.0, angular-translate-loader-static-files v2.4.0. \nI will try to make a plunker tonight, but I'm afraid it might be hard to trigger.\nI am mostly interested in knowing how/when this error occurs. It looks like it tries to translate to 'da-dk' before this language-file has arrived, and therefore fails.\n. I can upload the stack trace here. This time the errors was triggered when I changed the fallback stack to [\"da-dk\", \"en-us\", \"sv-se\", \"no\"]. It only happens the first time \"da-dk\" is chosen as the first fallback language. If I change to \"en-us\" and back to \"da-dk\" it works without errors.\n\n. When I change to 'da-dk' as fallback, and after all errors, I see this:\n\nI.e. the language file da-dk.json arrives and the console stops complaining.\n'no' is norwegian, maybe I should use \"no-no\"... the country code and language code are the same.. :)\n. Here is a plunker\n\nI have not been able to reproduce the same errors I see on my production site (i.e. the \"Can't interpolate\" errors), but I have seen \"TypeError: Cannot read property 'key' of undefined\" as well. I am able to trigger it if I Stop the preview, and then Run again. However, the error doesn't show up every time. \nI have tried with a delay responseInterceptor to simulate latency, but it doesn't look like it makes any difference if the response is delayed or not.\nI think the problem is that I change language in the .run function.\n. Okay @tspaeth , I now set fallback before the use definition in the run block. And the Can't interpolate error shows up...\n\n. I am now able to reproduce the error. See this plunker\nIt looks like the error happens if I use a language as fallback, and then change to using it as first priority language with use().\nIn my plunker the error doesn't break the page, but on my website this error breaks the page.\n. Yes @knalli it looks like that is the case.\n. @knalli If I'm not misunderstanding the docs, we already have support for fallback outside of config. So I guess it's just a bug?\n. I also see this issue, using:\n- angular 1.3.7\n- angular-translate 2.5.2\n- messageformat 0.1.8 (can't use 0.2.1 yet, right?)\n. ",
    "xi": "Sorry for not supplying it directly. Here you go: http://plnkr.co/edit/9wqU518ahePBHV5Macy2\n. Ok, I see this is not a bug. I still think it's confusing that the language is set after the ajax request has completed, but that's how it is.\nCan you explain how I can fix my code? How can I set the language in the controller as early as possible?\n. I did use that at first but I did not behave like I had expected. Can you give an example, maybe modify the plunker?\n. Great, that works. I have no clue why it works, but it does.\n. ",
    "riconegri": "+1\n. Great...\n. ",
    "tclift": "I started work on this issue before finding this PR. Oops.\nMy first thought was that it would have been ideal if we could delay resolution of the preferred language until it was required. That way we could have avoided references to window and used an injected $window once the provider was initialised. Still on the table, but not a small task, so let's ignore that for now.\nThere's another way to mock window.navigator that should make the tests shorter and clearer, as well as calling the real getLocale method. It makes use of Object.defineProperty:\n``` javascript\ndescribe('$translateProvider#determinePreferredLanguage()', function () {\ndescribe('when using built-in detection', function () {\n    var navigator = window.navigator;\n    var setNavigator = function(navigator) {\n      Object.defineProperty(window, 'navigator', {\n        value: navigator\n      });\n    };\nafterEach(function () {\n  window.navigator = _navigator_;\n});\n\nit('should take window.navigator.language=en as-is', function () {\n  module('pascalprecht.translate', function ($translateProvider) {\n    setNavigator({ language: 'en' });\n    $translateProvider.determinePreferredLanguage();\n  });\n  inject(function ($translate) {\n    expect($translate.preferredLanguage()).toEqual('en');\n  });\n});\n\nit('should normalize window.navigator.language=en-us to en_US', function () {\n  module('pascalprecht.translate', function ($translateProvider) {\n    // as seen in Safari\n    setNavigator({ language: 'en-us' });\n    $translateProvider.determinePreferredLanguage();\n  });\n  inject(function ($translate) {\n    expect($translate.preferredLanguage()).toEqual('en_US');\n  });\n});\n\n});\n// ...\n});\n```\nWe can see similar code in Firefox here to uppercase the country code, although they are normalising to dashes (not underscores) as per BCP 47.\nPeople are going to have their own preferred language code format depending on the technology they are using. I think the best way is for angular-translate to standardise on one format, rather than trying to be flexible about the formats it returns. Of course, it can still accept and parse any language code format you throw at it, but I think it should internally normalise this and return codes in that format (i.e. rather than having the developer configure a custom normalisation format and using that everywhere, which could be rather complicated).\nI'm not totally sure about the surface area of applying a policy like that, but in the case of $translateProvider#determinePreferredLanguage(), it's like asking angular-translate to pick a locale for you based on the browser environment. It needs to normalise to something to avoid browser inconsistency, but any format we pick might be incompatible with the format the developer expects (e.g. when calling $translate.preferredLanguage()). If people were relying on a format like en-us while using the function in this way then that was only ever going to work on Safari (and vice versa if relying on en_US with Chrome). Are there any cases where that was OK and worked as expected? Otherwise can we rule that out as a valid use case and go ahead and change it?\nMaybe this conversation should go elsewhere? :)\n. @tspaeth shall we see if we can flesh out what that might look like?\nAs far as I can tell, angular-translate currently treats language tags as opaque references (i.e. doesn't try to parse out the language or country). Is that correct? Do you anticipate this will be true in the future as well?\nMy understanding is that in practice browsers exclusively send language codes in the format \"en\" (language only) or \"en_US\" / \"en-US\" / \"en-us\" (language and country). Doing some quick searches I see a few examples of three character language-only codes like \"ast\", but I didn't see any of those with countries included. Of course, users can enter their own language codes, and things like \"de-DE-x-goethe\" and \"zh-Hant\" are valid, so we should at least not choke on them. Do others agree with this summary?\nIf we assume the above is true, we can probably get away with attempting normalisation only when we see specific formats.\nSo maybe the result of getLocale is passed through one of two built-in normalisation functions (underscore or hypen), or a custom one. E.g.:\njavascript\nvar normalizeLangKeyHyphen = function (langKey) {\n  // if format looks like \"en_US\", replace underscore with hyphen\n  if (langKey.match(/^\\w{2}_\\w{2}/) != null) {\n    // first underscore\n    langKey = langKey.replace('_', '-');\n  }\n  // if format looks like \"en-us\", lowercase language and uppercase country code\n  if (langKey.match(/^\\w{2}-\\w{2}/) != null) {\n    langKey = langKey.substring(0, 3).toLowerCase()\n      + langKey.substring(3, 5).toUpperCase()\n      + langKey.substring(5);\n  }\n  return langKey;\n};\nand it could be configured like:\njavascript\n$translateProvider.useHyphenLangKeyFormat()\nor:\njavascript\n$translateProvider.useUnderscoreLangKeyFormat()\nor:\njavascript\n$translateProvider.useCustomLangKeyFormat(function (langKey) {\n  // custom normalization\n});\nThoughts?\n. - Langauge tags in RFC2616 are based on RFC 1766.\n- RFC 1766 was obsoleted by RFC 3066, which was obsoleted by RFC 4646, which was replaced by BCP 47.\n- ISO 639-1 and ISO 639-2 are used in BCP 47.\nSo I think BCP 47 is the main standard to look at.\nThe ICU project makes extensive use of and reference to BCP 47, if that helps, although for some reason they internally normalise using an underscore separator (even though both BCP 47 and RFC 3066 specify a hyphen), but externally canonicalise using a hyphen.\nWe can see the ICU project's canonicalisation implementation here. My sample code above does the basics just for the first hyphen separator, lowercase language code and uppercase country code.\nOr we could go all in with BCP 47?\n. Introducing a fallbackLanguage exposes the issue. E.g.:\n$translateProvider.fallbackLanguage('en_US');\nNot sure why yet.\nAlso, in the partial loader example, line 22 has an error (unloads module A instead of B).\n. Problem:\n$translatePartialLoader depends on $translate (hard-coded on its $get function). $translate depends on a loader factory, which might be a $translatePartialLoader. To avoid a circular dependency, $injector is used to get a handle to $translatePartialLoader in the loadAsync function. This is normally fine, except when calling loadAsync directly from $translate's $get function. It can't be done at that time, because the providers are still initializing, so we receive the circular dependency error.\nThis call to loadAsync from $get is only triggered if a $fallbackLanguage has been provided.\nSolution A:\nRemove $translatePartialLoader's dependency on $translate. It seems to only use it to look up the configured loader cache. Perhaps the cache loader could be injected (with eviction part of its spec), or perhaps the partial loader could send an event requesting cache eviction.\nSolution B:\nWrap the if ($fallbackLanguage... block in a $timeout function. I've tested this locally and it seems to work fine.\nSolution A seems cleanest and removes the circular dependency altogether (instead of working around it), but perhaps you want to wait for a minor release to implement it. Solution B seems the simplest and least friction.\n. @jmcollin78 Oh by the way, a workaround is to use $translate.fallbackLanguage in run (instead of $translateProvider.fallbackLanguage in config). No need to downgrade. I tried that first, but hit a bug that required me to upgrade again :)\n. FYI this is a breaking change for anyone implementing a custom storage provider. Due to this guard the custom storage service must implement put.\nThe commit comments suggest that this wouldn't be the case until 3.0, and the docs still refer to set only.\nPerhaps the guard should be for get && (put || set)?\n. @knalli The Guide, Custom Storages chapter\n. OK. So it was intended to be breaking for 2.5, not 3.0?\n. ",
    "soinil": "Wow. I'm really impressed by the response time. Your solution took care the issue so it was an user error all along.\n. ",
    "jmls": "I've tried to write a plunker, but can't seem to get even the basic working\nhttp://plnkr.co/edit/84Chc7JXZmAIKrrrGs8R?p=preview\nif I uncomment \n// $translateProvider.preferredLanguage('en');\nthen the demo doesn't show {{name}} propertly, so I don't know what I've done wrong ;(\n. great work - I was looking for this exact functionality. How can I use the canary branch with bower ? I've tried a bower install with \"canary\" but got this error\nbower angular-translate#canary     ENORESTARGET Tag/branch canary does not exist\nAdditional error details:\nAvailable tags: 0.4.2, 0.4.3, 0.4.4, 0.5.1, 0.5.2, 0.6.0, 0.7.0, 0.8.0, 0.8.1, 0.9.0, 0.9.1, 0.9.3, 0.9.4, 1.0.0, 1.0.1, 1.0.2, 1.1.0, 1.1.1, 2.0.0, 2.0.1, 2.1.0, 2.2.0, 2.3.0, 2.4.0, 2.4.1, 2.4.2, 2.5.0, 2.5.2, 2.6.0, 2.6.1, 2.7.0, 2.7.1, 2.7.2\nAvailable branches: master\nthanks\n. ",
    "leads": "Thanks for the reply. Didn't think to try it the way you suggested, that works fine. But i'll keep in mind any performance issues.\n. On SO a solution was mentioned to get rid of 'track by index' and it works. Though that isn't an ideal solution.\nhttp://stackoverflow.com/questions/26159297/angular-translate-and-pagination/26160081#26160081\n. ",
    "zaidchauhan": "<h3 translate=\"SCREEN1_TITLE\">Substitute Text</h3>\nIn above case i would like to see 'Substitute Text' instead of SCREEN1_TITLE. And customTranslationHandler will help to place same default text for all keys but, my requirment is that It should show value that is already there in absense of translation.\n. Yes it is,\nBut I do not have rights to reopen because it is closed by you.\nYou should ask the person who has created ticket before closing it.\n. ",
    "gsaandy": "should be add support for $translate.instant ?. ",
    "alphapilgrim": "@knalli were the docs ever updated for this? wanted to reference this for our team.. ",
    "maxaon": "same issue. Using injector and manual get seems solves issue\n. ",
    "jmcollin78": "@maxaon could you give more information about the workaroung you told about ?\n. @tclift Thank's for your explanation. I will wait for an official release fixing the problem. I'm back to the 2.3.0 release which is fine.\n. @tclift Thx, it works great !\n. +1 same pb for me.\n. It seems that option \"escapeParameters\" resolve the case. It can be a valuable workaround.\n. ",
    "CatoTH": "@knalli I had the same issue, and https://github.com/angular-translate/angular-translate/commit/0c01b128464c55dc02739c99784c75c58c21e055 solved the issue in my case.\n. ",
    "kamituel": "Is there anything blocking this PR from being merged? Would be nice to see it in the next release.\n. I see. Are there plans to have this kind of functionality? Otherwise I guess I will need to not include more translation keys in the prerred language file. That's a pity, because in my case those are two very similar files - en and en_US. \n. ",
    "danielroop": "+1\n. ",
    "clarkio": "+1\n. ",
    "johnpapa": "+1 ... Love to see this added to support complex objects and arrays\n. ",
    "adrianObel": "+1\n. ",
    "Swissbite": "It would also be great if I could get the array.\njavascript\n'content': [\n    \"Das ist ein langer Satz\",\n    \"Das ist ein zweiter langer Satz\",\n],\nand in the controller:\njavascript\napp.controller($translate, $scope) {\n$translate('content').then(function(contentArray) {\n  $scope.content = contentArray;\n}))\n}\nand the corresponding view\nhtml\n<ul>\n<li ng-repeat='item in content'>item</li>\n</ul>\n. @knalli I disagree. This may be a workaround. But it's not a full support of an array.\nMy idea was to support arrays without knowledge of its length. \nCurrently there is no benefit of arrays in translation, it is handled as a normal Jason object and the developer has to know the length of the array.\nArrays would be perfect for lists if they are easy editable without the necessary to either edit the template or to handle the logic in the controller.\n. ",
    "stryju": "@nikolayhg \nthe keys are being \"flattened\", so just change your notation to \"invalid\" path, like so: http://plnkr.co/edit/K3pbBD7hJcjHJrjo1X4C?p=preview\n\ntl;dr\nuse array.index.property, not array[index]property, like people.0.name\n\ni'd love, however, to get the full array, as in @Swissbite example - currently struggling with that...\n. as a workaround, you can:\n1. use translate-cloak directive with trial and error...\nhtml\n<p ng-repeat=\"key in keys\" translate=\"{{ ::key }}\" translate-cloak=\"{{ ::key }}\"></p>\nnow, just style the .translate-cloak class to hide the element\n...not elegant, but \"works\"\n2. use $translate service and again - trial and error\n``` js\n$translate( keys, function ( result ) {\n  var translated = result.filter( function ( translation, index ) {\n   return translation !== keys[ index ];\n  });\n// use the translated in for-each or sth...\n```\nthis one fails hard, if key SHOULD equal the translation...\n. maybe keeping the current logic + extending it with aliases would be an option?\n\nin the \"ideal world\", this would be possible:\njs\n{\n  FOO: {\n    BAR: {\n      BAZ: [\n        \"xxx\"\n        \"yyy\",\n        \"zzz\"\n      ],\n      QUUX: \"abc\",\n      WUT: function( $scope, SomeService ) {\n        return SomeService.serviceMethod( $scope );\n      }\n    }\n  }\n}\nhtml\n<h1 translate=\"FOO.BAR.QUUX\"></h1>\n<ul ng-init=\"alias = ('FOO.BAR.BAZ'|translate)\">\n  <li ng-repeat=\"item in alias\">{{ item }}\n</ul>\n<p translate=\"FOO.BAR.WUT\"></p>\n. the WUT part isn't - true - but except for that, it is ;-)\n\ni don't know how big of a performance hit would it be to have a key accessor be a structure crawler, like:\n``` js\nfunction accessor( obj, key ) {\n  var chain = key.replace( /[\\s([\\w_]+)\\s]/g, '.$1' ).split( '.' );\n  var chainLength = chain.length;\n  var chainStep = 0;\n  var alias = obj;\ntry {\n    while ( alias !== void 0 && chainStep < chainLength && typeof alias !== 'string' ) {\n      alias = alias.hasOwnProperty( chain[ chainStep ] ) ?\n        alias[ chain[ chainStep++ ] ] :\n        void 0;\n    }\n  } catch( e ) {\n    alias = void 0;\n  }\n// won't allow to return a 1-char substring ;-)\n  if ( typeof alias === 'string' && chainStep < chainLength ) {\n    return void 0;\n  }\nreturn alias;\n}\n```\nthen\n``` js\nvar cache = {\n  FOO: {\n    BAR: {\n      BAZ: [\n        \"xxx\"\n        \"yyy\",\n        \"zzz\"\n      ],\n      QUUX: \"abc\"\n    }\n  }\n}\naccessor( cache, 'FOO' ) // { BAR: { BAZ : [ 'xxx', 'yyy', 'zzz', ], QUUX: 'abc' } }\naccessor( cache, 'FOO.BAR' ) // { BAZ : [ 'xxx', 'yyy', 'zzz', ], QUUX: 'abc' }\naccessor( cache, 'FOO[BAR]' ) // { BAZ : [ 'xxx', 'yyy', 'zzz', ], QUUX: 'abc' }\naccessor( cache, 'FOO.QUUX' ) // 'abc'\naccessor( cache, 'FOO.BAR.BAZ' ) // [ 'xxx', 'yyy', 'zzz', ]\naccessor( cache, 'FOO.BAR.BAZ.0' ) // 'xxx'\naccessor( cache, 'FOO.BAR.BAZ[0]' ) // 'xxx'\naccessor( cache, 'FOO.BAR.BAZ.0.1' ) // undefined\n```\n. and to answer\n\nwhat happens when a non array was requested with -repeat way?\n\nhtml\n    <p>Hello {{name}}!</p>\n    <ul>\n      <li ng-repeat=\"x in name\">{{ x }}</li>\n    </ul>\noutput:\n\nHello World!\n- W\n- o\n- r\n- l\n- d\n\nhttp://plnkr.co/edit/yziOimu2KHUk9pB3JLm9?p=preview\n. ",
    "pfried": "+1 this would be awesome, we are having the use case of a list with a varying number of bullet points per language like\n[ \"bullet point 1\", \"bullet point 2\" ]\nvs.\n[\"Listenpunkt 1\"]\nas they are translations (not per key of course) it would be great to have a syntax supporting ng-repeat and returning the translation  strings\n. @stryju  Could you create a plunker with a small demo? because i have problems understanding the syntax you used. I would like to try the first solution\n. I guess it would be the best if we could get to the array itself somehow.\nGet the translation array:\n$scope.translations = $translate('keyOfTheArray');\nPut it in the view\n<div ng-repeat=\"translation in translations\">\n  <p>{{ translation }}</p>\n</div>\nThe translate filter is used inside of an element. As one usually needs to repeat HTML Elements i do not think there is a use case other than accessing them by index. Maybe something like\n<p>{{ 'keyOfTheArray' | translate::1}}</p>\nThe translate directive could be extended using another attribute. But it will \"break\" the directive anyway as it is not intended for repeated elements:\n<ul translate=\"keyOfTheArray\" translate-repeat=\"true\">\n  <li>{{ translation }}</li>\n</ul>\nI think it would be the best if we could get the array in the controller and just use an ng-repeat for those non associative arrays.\n. ",
    "cabloo": "My solution to this:\nJSON:\njson\n{\n    \"ACTIONS\": [\n          \"Test Action 1\",\n          \"Test Action 2\"\n    ],\n    \"ACTION_COUNT\": \"2\",\n}\nTemplate:\njade\nul(ng-init=\"items = _.range(0, 'ACTION_COUNT' | translate)\")\n  li(\n    ng-repeat=\"item in items track by $index\"\n    translate=\"ACTIONS.{{$index}}\"\n  )\nRequires lodash/underscore available in $scope, e.g.\n``` js\nangular\n    .module('app.core')\n    .run(appRun);\n/*\n   * @ngInject\n   /\n  function appRun($rootScope, ) {\n    $rootScope. = _;\n  }\n```\nA directive that uses the appended _COUNT could make this whole thing transparent to the developer.\n. ",
    "dackmin": "+1\n. ",
    "dangjian": "+1. ",
    "kensplanet": "+1. For Approach1, the {{BRAND}} value is available to the Angular application at runtime through a jQuery AJAX call it makes even before bootstrapping the Angular app. The app does have the dynamically generated revision details generated through Grunt.\njavascript\nfileRevMap = {\n    \"message_bundles/default/en.json\": \"message_bundles/default/en.xxxxxxxx.json\",\n    \"message_bundles/default/fr.json\": \"message_bundles/default/fr.xxxxxxxx.json\",\n    \"message_bundles/brand1/en.json\": \"message_bundles/brand1/en.xxxxxxxx.json\",\n    \"message_bundles/brand1/fr.json\": \"message_bundles/brand1/fr.xxxxxxxx.json\",\n    \"message_bundles/brand2/en.json\": \"message_bundles/brand2/en.xxxxxxxx.json\",\n    \"message_bundles/brand2/fr.json\": \"message_bundles/brand2/fr.xxxxxxxx.json\"\n    .\n    .\n    .\n    and so on for the rest of the brands\n}\nBut even with these details, how do I inject them in the $translateProvider code above since the revision hashes for all the files could be different. I was thinking if I could somehow intercept the REST call which Angular Translate makes when fetching the resources, I could somehow transform it to the one present in the fileRevMap variable above.. So, here is what I have done. I intecepted the request using $httpProvider and modified it. fileRevMap is my map containing the revisioned file names.\njavascript\n $httpProvider.interceptors.push(function (fileRevMap) {\n    return {\n      request: function (config) {\n        config.url = fileRevMap[config.url] || config.url;\n        return config;\n      }\n    };\n  });\nSo, no changes from Angular Tanslate. I can still use the static loader. So, you can close this issue.. ",
    "timtos": "Seems to be the case. Sorry, I did not found this ticket as I was searching the code and not the issues for 'circular dependencie' issues... My fault. Anyway, thank you for your answer! So I will close this issue and watch #766. But good to know, that this issue is already a known issue...\n. ",
    "neilkyoung": "Thank you for your quick response on this. Is there anyway to access the json translation file after the call has been made to get it via useStaticFilesLoader?\nI have tried $locationProvider.translations(); but this returns an empty object.\n. Thank you for your response on this tspaeth. I will give that a go! :-)\n. I am also having the same issue with this. In my configuration block I have:\n```\n$translatePartialLoaderProvider.addPart('home');\n$translateProvider.preferredLanguage('gb');\n$translateProvider.fallbackLanguage('gb');\n$translateProvider.useSanitizeValueStrategy('escapeParameters');\n$translateProvider.useLoader('$translatePartialLoader', {\n      urlTemplate: '/app/data/lang/{part}/{lang}.json'\n});\n```\nI run the following code in my resolve functionality to refresh the locale translation:\n```\ntranslate: ['$route', '$rootScope', '$translatePartialLoader', '$translate', '$q', '$timeout', function ($route, $rootScope, $translatePartialLoader, $translate, $q, $timeout) {\nif ( !$route.current.params.locale ){\n                  var locale = 'gb';\n                }\n                else{\n                  var locale = $route.current.params.locale;\n                }\n                var deffered = $q.defer();\n                $rootScope.locale = locale; \n                console.log('Route resolve. Lang to use is: ' + locale);\n                $translate.use( locale ).then(function(){\n                  console.log('Route resolve. Lang is: ' + $translate.use());\n                  deffered.resolve();\n                });\n                return $translate.refresh();\n            }]\n```\nWhen I load the first time using /gb the translation displays correctly. I then change to /es and it loads in spanish but when I revert back to /gb it still displays the spanish version and $translate.use still tries to load the spanish translation.\n. This seems to work. Many thanks for your quick resolution.\nOn Fri, Mar 4, 2016 at 3:59 PM, Thorsten Sp\u00e4th notifications@github.com\nwrote:\n\n@MGMsystems https://github.com/MGMsystems / @neilyoung2013\nhttps://github.com/neilyoung2013 please check if 2.10.0 fixes your\nissue(s).\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1055#issuecomment-192333632\n.\n. \n",
    "webpolis": "Mmh.. cookie issue :)\n. :+1: Same here. Angular 1.3.4, and angular-translate-loader-partial 2.4.2\nI do an ng-include of a view, let's call it sidemenu, which content looks something like\nhtml\n<div controller=\"sidemenu\" ng-init=\"initialize()\">...</div>\nIn the initialize() method of this newly instantiated controller, I add the translation parts, but there isn't even a http request for the part.\n. Thanks. Tested it.\nThe first condition will be met just like the second one, so I don't think that would change anything. I don't see errors in the console.\n. I tested your fix but didn't work.\n. ",
    "hyzhak": "@tspaeth \nThanks for feedback. \n\nAnd also you have to load every language your user probably won't even need as it is packed into one file.\n\nIt is not one file - it is one entity from collection. So if you have for example one shop with fields: name, and address. In scheme you will have just i18n of its name, address. So if web app support a lot of languages it should provide more locales in one entity but it will be only name and address on different languages. Ever more there way to provide API with something like:\nGET /shop?locale=eu-US,ua-UA,de-DE\nto get only some subset of localization..\nDo you think it should be implemented server side only and don't use angular-translate module at all?\n. Ok, thanks, it sounds reasonable. I will try implement custom loader. But did you ever get before custom loaders for very huge among of translated user generated objects and only few number of languages?\n. I mean case, When we have a lot of objects in DB. And each objects has some fields, for example name and address. In general all unique, number for objects not limited, but we have only few number of supported languages. Is your proposed custom loader will work? Shouldn't we have unloader as well to unload translation of objects which we already don't require? Have you seen such case? Is angular-translate good enough for it?\n. @tspaeth Ok, Do you have examples, how to use angular-translate when do you have a lot of objects with fields which should be translated so you just can't put all them inside of one file as well you can create something like dictionary because all objects are user generated content. Just imagine something like iStore, where you should translate all fields like name, description and other. \nSo users should be able to get translate of each object in a store as well as a list of objects and can scroll down this infinity list and request as much as possible objects.\nI'm using MEAN stack if it helps and sure RESTful API.\n. I have asked you because this module works with i18n. So I thought that you should know how to solve such issue. Maybe it will be really better idea to ask community, if you don't work with i18n big data in angularjs apps.\n. ",
    "robguthrie": "Sorry if the HAML is confusing!\n. Thanks Knalli. When I do it that way, I find that there is no sanitization at all.\n%span{translate: \"KEY_FOR_HTML_STRING\", translate_values: '{name: author_name}'}\nIs there an Angular Translate recommended way of sanitizing replacement values in this form?\n. Thanks @tspaeth thats good to know, however, it's not a final solution. \nI want to sanitize the replacement variables because if user data is not sanitized, then pages are vulnerable to XSS attacks.\nThe default behaviour of the translation library I use should be safe in these very common occasions where I want to translate a string with some user data inserted.\nIf I make a pull request to sanitize replacement variables before inserting them into a translation string with html, would it be accepted?\n. Cool. Thanks for the suggestion happy to consider that. I'll keep thinking about the best way to do it. \n. ",
    "LarsKlaudius": ":+1:  Thank you!\n. ",
    "frodefi": "I was actually not thinking of this as an IDE tool, but a command line tool... What would be the easiest approach to cover at least 80% of the cases (or said differently, the cases that handles simple text cases and nothing more)? Perhaps by make a special version of the filter and the directive to write to file in addition to make the translation as normal (to be used only \"first time\")?\nAnd I was thinking of translating from english to other languages (but other can of course do what they feel like).\n. Yes. I have various text fragments that I want to translate and I would want to avoid the repetitive task of copy that text fragment into a json file, to be used as both the key and value (I need to translate an existing app). Perhaps I am overkilling it, and should  just actually do that copy and paste, possibly would be the quickest, but maybe my case is not so unusual (translate an existing app) and it could be beneficial to make a tool for this...\n. ",
    "zygimantus": "So, is there a tool to do this?. ",
    "EvenOng": "Yes, i added to my main div, the same thing still happen\nclass=\"container\" translate-cloak\n. Sorry, i'm busy with other recently. \nthis is the sample\nhttp://plnkr.co/edit/h9k0vOj9mTRd6ZWMLHtS?p=linter\n. ping @knalli @tspaeth \n. ",
    "mike-yashin": "Issue occurs when $parse(interpolateParams)(this) is called\nhttps://github.com/angular-translate/angular-translate/blob/master/src/filter/translate.js#L57\n. Yep, I was thinking about missing scope.\n\nWhat happens using the directive?\n\nIn AJS 1.3 it fails with JS error in console and does nothing.\nIn normal conditions it should do string resource translation (i10n) and additionally pass variable that helps to perform correct pluralization. Filter works in default way without pluralization but this is not enough for us\n. Well, first time when I tried directive it didn't work either - maybe I've done some typo. After you comment I tried once again and now directive works. Thanks a lot!!!\nI think documentation should be updated stating that in AJS 1.3+ filter do not have access to scope. This documentation I mean http://angular-translate.github.io/docs/#/guide/14_pluralization\nBtw, if anybody will be googling - one more related issue #694 \nPS for other guys, we have two solutions here\nStore complex filter parameter to more simple variable \n<pre ng-init=\"xyz={COUNT: myCount}\">{{ 'test.count' | translate:xyz:'messageformat'}}</pre>\nor use directive\n<b translate=\"test.count\"\n            translate-values=\"{ COUNT: myCount }\"\n            translate-interpolation=\"messageformat\"></b>\n. ",
    "tqmukas": "I think no. As you can see in the example, I use AngularJS v1.2.26.\n. ",
    "gontard": "I have exactly the same problem. Any news ?\n. @knalli the problem is not that string is empty or undefined. The problem is that interpolateParams is just an 'empty object'.\nIn my case stringcontains the message format pattern but the interpolateParams are just {} so MessageFormat fails to evaluated the access to the attribute. In the plunker example the problem is the same the COUNT and AMOUT are not yet ready when the interpolation is invoked. \n. ",
    "morgoth": "The same issue here after upgrading angular-translate to 2.5.2 (on 2.4.2 it works fine)\n. Yes, I was thinking exactly about such keys.\nActually, when I now look at the source https://github.com/angular-translate/angular-translate/blob/adeaa3e3a19f46cc4d40de8665f7e4492fce8475/src/directive/translate.js#L141\nit works, but result is rather surprising, having key translate-value-my-special-think it is available as mySpecialThink - do you think it could be documented?\nI think it would be more clear if the key would be \"underscorized\" to my-special-think, but this might be a breaking change.\nWhat do you think?\n. ",
    "einyalynn": "don't know if this is helpful for anyone in the short term, but if you start forcing interpolation combined with using the translate-value-* directive you can get around this.\nHere's an updated plunker of the original bug:\nhttp://embed.plnkr.co/Qg3OuIlcGZ6G4Kij6tz6/preview\n. ",
    "RBLU": "also seeing this issue when updating to 2.5.2 (with angular 1.3.10). reverted to angular-translate 2.4.2 - there we don't experience this issue.\n. ",
    "lboynton": "Not sure if this is relevant, but for me interpolate() is being called twice. The first time interpolateParams is an empty object, the second time interpolateParams is correct; it contains the object passed into translate-values=\"\". Should the first call not be happening?\n. @tspaeth 2.5.2, but I also get the same problem with 2.6.1. 2.4.2 does not throw this error, like other people have mentioned. Using angular 1.3.14 and messageformat 0.1.8.\n. Thanks @tspaeth, I did test out your changes and they didn't seem to fix the problem for me. I intended to do some more testing but haven't got round to that yet.\n. ",
    "ombr": "Is there any news on this issue ?\n. ",
    "andreialecu": "I just tried the latest canary but couldn't get it to work at all initially. The main .js was broken for my app. I got an error saying Unknown provider '$translateSanitizationProvider' which I was able to resolve by reordering the .js files in Gruntfile.js, and putting src/service/sanitization.js right after src/translate.js then rebuilding.\nAnyway, after getting canary working, I verified that this bug still isn't fixed and I'm getting the same errors in the console: Error: MessageFormat: 'count' isnt a number..\nIn my project, the count value is populated dynamically from a REST service, so it isn't available right away.\nI have edited the original plunker here: \nhttp://plnkr.co/edit/UZlzqvmx9JSKQyn3o6Bo?p=preview\nThe error still occurs in the part I highlighted, but the others seem fine. Changing ng-show to ng-if seems to fix it, but I'm not sure I can do that in my code without breaking other things. Any ideas?\nJust a way to supress the error from happening would be good, because otherwise everything seems fine and displays properly.\n. A little bit offtopic, regarding the $translateSanitizationProvider issue: here's the broken/original canary version:\nhttp://plnkr.co/edit/hiyJbo49bkLpR4pTrMgt?p=preview\nThis is the broken .js as generated by grunt build:\nhttps://gist.githubusercontent.com/andreialecu/70ee6839d72221993d3e/raw/95dcc0bfba72602d94188df6c0eca1be904ed5d7/angular-translate-broken.js\nPaging @marklagendijk and @knalli regarding https://github.com/angular-translate/angular-translate/commit/12dbc5754c8315d41144794918f1ec8ca34c601e\n. @knalli I have updated the plunker originally posted at the top of this thread to the latest canary.\nhttp://plnkr.co/edit/UZlzqvmx9JSKQyn3o6Bo?p=preview\nThere's a certain use case where the exception is still logged, even though everything works.\nIs there any way to get rid of it? The only way I can see that works is to add ng-if to the element so it isn't created if that value doesn't exist, but it is a bit cumbersome to add it to all my elements. I think the exception should simply just be ignored, as with vanilla (non MF) angular-translate.\nAlso, translate-value-* doesn't seem to work at all with MF, is this expected?\n. I think this should be reopened, since it is an issue when using webpack/browserify and locales. \nMessageFormat v0.3.0-1 fixes this, so perhaps pin that version instead?\n. ",
    "sebastian-zarzycki": "Because it doesn't fire at all for me. Afaik it only fires when you explicitly change the language by use(). I'm using static file loader and setting prefferedLanguage(key).\n. From what I could see, before $translateLoadingEnd is fired, translations are merged and updated, but I don't remember correctly now, maybe I'm wrong. $translateChangeEnd feels like a weird event to trigger upon loading new language - why would it? The language is set at the very beginning, then translations are loaded using static file loader. $translateLoadingEnd feels like a good event to use, or if not, there should be another one that guarantees that translations are loaded and ready for .instant() use (I do have good reasons to use instant translation, I often need translations in a sychronous way in my controllers, not in templates). As stated before, $translateChangeEnd doesn't fire and looking at the code, I have no idea why would it, since use() method is never directly called.\n. Will not be fired when? During application start? \n. I think it can be closed, apologies for the confusion. For a reason I cannot really explain, I suddenly started receiving $translateChangeEnd properly. I've been upgrading a lot of tangential libraries during the process, maybe something fixed it. For the time being, though, Angular 1.3.1 and newest Angular-Translate seem to be working fine.\n. ",
    "OhSoGood": "Thanks Knalli. For future readers, I discovered a good discussion on that topic here: http://stackoverflow.com/questions/20540877/correct-use-for-angular-translate-in-controllers\n. ",
    "san983": "On 1.3.x {{ 'TRANSLATION_ID' | translate }} does NOT work on latest Firefox / Safari, but it does en latest Chrome\nOn 1.2.x {{ 'TRANSLATION_ID' | translate }} DOES work on latest Firefox / Safari / Chrome\n. Hi @tspaeth! It's fixed! Thanks buddy =) \n. ",
    "tomasaschan": "Hm... if you guys don't package Angular Translate for NuGet, then I guess I should just ask for it in the right place instead =) I don't really see the point in having more than one NuGet package for the same thing, so I don't think there is much merit in you guys spending time on this when someone else already has a packaging toolchain setup somewhere. I'll see if I can get in touch with the NuGet package owner instead.\nThanks for the reply!\n. ",
    "adi86": "Here is plunker: http://plnkr.co/edit/bKqhwZ2hPzXguwM01Z4K?p=preview\nIt behaves little different than in ma app because there translations aren't loaded and in plunker are.. but error in console still remains\nEDIT\nI checked and in getFallbackTranslationInstant function if I added \nif(!$translationTable[langKey]){\n            return result;\n        }\nIt works like a charm... \n. I checked it already :/ without any success... \n. ",
    "16n": "@DWand & @tspaeth Thank you for the response!\nI really missed the option of a custom loader. I think I will try it this way where I will implement all the translation logic in there. I'll see if the refresh trick works. \n. I have no issues with ionic popups and angular-translate. \nI really don't see the point of using the filter in the controller. You should use the $translate service that gets you the translated text. This is how I do it:\njavascript\n $translate(['NEXT']).then(function(translations) {\n            var confirmPopup = $ionicPopup.confirm({\n                title: title,\n                template: message,\n                buttons: [\n                    {\n                        text: '<b>'+translations.NEXT+'</b>',\n                        type: 'button-positive',\n                        onTap: function(e) {\n                            return true;\n                        }\n                    }\n                ]\n            });\n        });\n. @jorool the whole point of the promise is to avoid the problem you are facing.\nYou do invoke the service BEFORE the translations are fully loaded. You should put your popup INSIDE the promise block to fully avoid this problem.\n. ",
    "mephinet": "Thanks, Thorsten, for providing this link! So I guess, moving the decision from the client to the server, which has access to the Accept-Language header, is the way to go for us.\n. ",
    "jorool": "The app is open-source too, available at https://github.com/jorool/netanimations-app/tree/development\n. AngularJS is at 1.2.12 and angular-translate is at 2.4.2\nI can't say that yet.\nI'm looking after this at the Ionic popup code...\nhttps://github.com/driftyco/ionic/blob/d3026edffce08b5614777cba086c703775953a2f/js/angular/service/popup.js\nLooks like that title, subtitle has ng-bind-html tag and the message (template attribute) is loaded after as a html template, what sounds fair...\nAny idea about an alternative?\n. I'm trying to translate the title and keep it in a variable like this:\n$scope.title = $filter('translate')('INFORMATION');\nSo the call of Ionic popup get like this\n$ionicPopup.alert({\n    title: $scope.title,\n    template: \"{{'SEQUENCE_NUMBER_PRESENTATION_1' | translate }}\"\n})\nBut I get this result on the title:\n\nThe string 'INFORMATION' is a key inside a translation registered via $translationProvider in the app.js file (https://github.com/jorool/netanimations-app/blob/development/www/js/app/app.js):\n$translateProvider.translations('pt-br', {\n    LANGUAGE: 'Idioma',\n    PORTUGUESE: 'Portugu\u00eas',\n    ENGLISH: 'Ingl\u00eas',\n    CONFIGS: 'Configura\u00e7\u00f5es',\n    ANIMATIONS: 'Anima\u00e7\u00f5es',\n    ABOUT: 'Sobre',\n    CONTINUE: 'Continuar',\n    INFO: 'Informa\u00e7\u00e3o',\n    ANIMATION_END: 'Fim da anima\u00e7\u00e3o.',\n    //.....and so on...\nWhat am I doing wrong?\n. @daseinhorn I see. But is your title translated? My problem was only with the title of the popup.\nI saw your code and got it working like this:\n$translate(['INFO']).then(function(translations) {\n       $scope.title = translations.INFO;\n});\n//some code...\nvar tl = new TimelineMax();\n        tl.call(function() {\n            tl.pause();\n            $ionicPopup.alert({\n                title: $scope.title,\n                template: \"{{'SEQUENCE_NUMBER_PRESENTATION_1' | translate }}\"\n            }).then(function() {\n                tl.resume();\n            });\n        });\n//more code...\nThanks, guys.\n. Just like this?\n//codes\n        var tl = new TimelineMax();\n        tl.call(function() {\n            tl.pause();\n            $translate(['INFO', 'SEQUENCE_NUMBER_PRESENTATION_1']).then(function(translations) {\n                $ionicPopup.alert({\n                    title: translations.INFO,\n                    template: translations.SEQUENCE_NUMBER_PRESENTATION_1\n                }).then(function() {\n                    tl.resume();\n                });\n            });\n        });\n        //more codess\n. It does.\nClosing issue.\nThanks.\n. ",
    "jacop85": "title: $filter('translate')('HELLO_WORLD'),\n. ",
    "apiening": "Thanks @jacop85, that works for me!\n. ",
    "amanthaIsuru": "Thanks @jacop85 . It also worked for me. You have to added it controller like this in my case\n.factory('AuthService', [ '$filter', '$http', '$base64','Session' ,'$state', '$location', 'ApplicationSettings', '$ionicPopup', 'USER_ROLES', '$rootScope',\n 'refreshTextFields','$ionicLoading', function ($filter, $http, $base64,Session ,$state, $location,ApplicationSettings , $ionicPopup, USER_ROLES,  \n  $rootScope , refreshTextFields,$ionicLoading, $$translate) {\nThe order of the parameters does matter  i.e if you added the $filter at the end it will give some error like TypeError : blah blah . ",
    "oshitha123": "@knalli \nHow can apply custom css class for $ionicPopup.alert\n. ",
    "SakthiSureshAnand": "could anyone please post a link which shows pure ionic 1 app able to change the different language also I want to show some contents in \"TAMIL\" ..., in my app.., . ",
    "mjamin": "Yup, very much so. :) Sorry, didn't see that one.\n. ",
    "raghavan85": "JSONP for serving a static file from CDN is not a reasonable solution. \n.  access-control-allow-origin * works for chrome firefox ie10+ but not in ie 8 or 9. Apart from access-control-allow-origin, what else would I need to get it working ?\n. Okay.. this is how I kinda ended up doing in a hacky way.\nForked and modified translate loader partial: https://github.com/raghavan85/bower-angular-translate-loader-partial\nUsed jpillora's xhook for IE 8, 9. https://github.com/jpillora/xhook\nand added   $.support.cors = true;\n. Yea, it can't be added to the base version due to its jQuery nature, but its a good workaround for those who will need also need to support IE 8+. \n. ",
    "sirinibin": "thanks\n. ",
    "geekyme": "what does translate cloak do ? \n. got it lol. that is useful\n. ",
    "thany": "Not sure about #789, but yes, #787 looks suspiciously duplicate-ish to this one.\n. ",
    "tobiaszwaszak": "empty\n. @PascalPrecht so my only solution is delete translations with empty string?\n. ok, i can use other solution, but it is possible? without any hacks?\n. ",
    "ghprod": "I solved with something like this\n``` js\n(function() {\n    'use strict';\nangular\n    .module('starter.translations', [\n        'pascalprecht.translate'\n    ])\n\n    .config(function($translateProvider) {\n        // log all not found ID and return as promise\n        $translateProvider.useMissingTranslationHandlerLog();\n\n        $translateProvider.translations('en', translations_en);\n        $translateProvider.translations('id', translations_id);\n\n        $translateProvider.preferredLanguage('id');\n    })\n\n    .factory('TranslateFactory', TranslateFactory);\n\nfunction TranslateFactory($translate)\n{\n    var factory  = {};\n\n    factory.r   = function(translateId) {\n\n        return $translate(translateId).then(function (res) {\n            return res;\n        })\n    }\n\n    return factory;\n}\n\n})();\n```\nAnd call it from other controller/place\nTranslateFactory.r('Some_Key');\nDont forget to include angular-translate-handler-log.min.js\n. ",
    "ti-dev": "It is the same as your example except that I use paths instead of map. But moving them both to map I get the error Script error for: ngTranslate \u2026 and Load timeout for modules: ngTranslateMessageFormat \u2026.\n. I have with this require.config the error which I wrote in my first post.\n. Okay, here is my main.jsconfig, but why should app.config(['$translateProvider', function ($translateProvider) {know sth. about '$translateMessageFormatInterpolation'?\n```\nrequire.config({\n    paths: {\n        // \u2026\n        ngTranslate: 'bower/angular-translate/angular-translate',\n        ngTranslateMessageFormat: 'bower/angular-translate-interpolation-messageformat/angular-translate-interpolation-messageformat'\n    },\nshim: {\n    // \u2026\n    ngTranslate: {\n        deps: ['angular']\n    },\n    ngTranslateMessageformat: {\n        deps: ['ngTranslate']\n    }\n}\n\n});\nrequire(['angular', 'app', 'translate'], function(angular, app) {\n    angular.element().ready(function() {\n        angular.bootstrap(angular.element(document.getElementsByTagName('html')[0]), [app['name']]);\n    });\n});\n``\n. Incomplete? I did some comments//\u2026, so that I do not have to write everything down. Yes, a typo, because I can not copy & paste. But angular translate works, and angular translate and the other JavaScript files are loaded, I can see it in the head section. So why isn't it recognized?\n. And no, I take one more time a look into my code snippet, there is no typo, it must berequire(['angular', 'app', 'translate'], function(angular, app)The name'translate'is right, this is independent of the name of which I use for thepaths`.\n. And if I do this\napp.config(['$translateProvider', '$translateMessageFormatInterpolationProvider', function ($translateProvider, $translateMessageFormatInterpolation) {\n  // \u2026\n  console.log($translateMessageFormatInterpolation);\n  $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n}]);\nwith the console.log($translateMessageFormatInterpolation); I get the message in the console:\n[object Object] {$get: Array[3]}\n- [functions]\n- $get\n-- [Object Array] [\u2026]\n---- 0 \"$cacheFactory\"\n---- 1 \"TRANSLATE_MF_INTERPOLATION_CACHE\"\n---- 2 function ($cacheFactory, TRANSLATE_MF_INTERPOLATION_CACHE) { \u2026\n-- __proto__\nSo I see this bower package inside my app.config, but how can I add now the Interpolation?\nWith this line:\n$translateProvider.addInterpolation('$translateMessageFormatInterpolation');\nI get the message SCRIPT5009: 'MessageFormat' is undefined.\n. Thanks a lot for your reply! I appreciate it a lot, because I am stuck with this problem.\nSo, I try it one more time in a complete way which is my current implementation.\nIn my bower.json I have \"angular-translate-interpolation-messageformat\": \"~2.4.2\" and I use AngularJS version 1.12.18.\nI have a main.js with the require.configstuff:\n```\nrequire.config({\n    paths: {\n        // \u2026\n        translate: 'lang/Language'\n        ngTranslate: 'bower/angular-translate/angular-translate',\n        ngTranslateMessageFormat: 'bower/angular-translate-interpolation-messageformat/angular-translate-interpolation-messageformat',\n        messageFormat: 'bower/messageformat/messageformat',\n        messageFormatLocaleEn: 'bower/messageformat/locale/en'\n    },\nshim: {\n    // \u2026\n    ngTranslate: {\n        deps: ['angular', messageFormat]\n    },\n    messageFormat: {\n        deps: ['angular']\n    },\n    messageFormatEn: {\n        deps: ['angular']\n    },\n    ngTranslateMessageFormat: {\n        deps: ['ngTranslate', 'messageFormatEn']\n    }\n}\n\n});\nrequire(['angular', 'app', 'translate'], function(angular, app) {\n    angular.element().ready(function() {\n        angular.bootstrap(angular.element(document.getElementsByTagName('html')[0]), [app['name']]);\n    });\n});\n```\nSo translate is the file Language.js so that is globally included. There I use my $translateProvider:\ndefine(['app'], function (app) {\n  //\u2026\n  app.config(['$translateProvider', function ($translateProvider) {\n    // \u2026\n    $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n    $translateProvider.translations('en', languageEn); // languageEn is defined\n    $translateProvider.preferredLanguage('en');\n  }]);\n});\nAnd in my app.js I have:\ndefine(['angular', 'ngTranslate', 'ngTranslateMessageFormat', 'ngTranslateMessageFormat'], function (angular) {\n  return angular.module('myApp', ['pascalprecht.translate'])\n});\nSo my HTML with the included JavaScript files have this order:\n- main.js\n- app.js\n- Language.js\n- angular.js\n- messageformat.js\n- en.js\n- angular-translate.js\n- angular-translate-interpolation-messageformat.js\nSo the order seems to be okay? Or do I have to change sth.?\nThe only error which I get is SCRIPT5009: 'MessageFormat' is undefined.\nI get this in this order:\n- File en.js Line 1, Column 1.\n- File angular.js, Line 3874, Column 11\nangular.js - Line 3874 is the line with throw err;.\n```\n  function createInternalInjector(cache, factory) {\nfunction getService(serviceName) {\n  if (cache.hasOwnProperty(serviceName)) {\n    if (cache[serviceName] === INSTANTIATING) {\n      throw $injectorMinErr('cdep', 'Circular dependency found: {0}',\n                serviceName + ' <- ' + path.join(' <- '));\n    }\n    return cache[serviceName];\n  } else {\n    try {\n      path.unshift(serviceName);\n      cache[serviceName] = INSTANTIATING;\n      return cache[serviceName] = factory(serviceName);\n    } catch (err) {\n      if (cache[serviceName] === INSTANTIATING) {\n        delete cache[serviceName];\n      }\n      throw err;\n    } finally {\n      path.shift();\n    }\n  }\n}\n// \u2026\n\n```\nSo yes, something is wrong with my configuration setup, but I am not sure what. Everything is included, but maybe in the wrong order, so that MessageFormatis not yet initialized.\nMaybe you can see what the problem is?\n. > Your module translate does not define (or being defined in shim) any dependency to angular-translate (you named it ngTranslate).\nI added 'ngTranslateMessageFormat' in translate / Language.js:\ndefine(['app', 'ngTranslateMessageFormat'], function (app) {\nso ngTranslateMessageFormatshould now be a dependency of translate / Language.js.\n\nFinally, you define in your app.js basically three dependencies: angular, ngTranslate and ngTranslateMessageFormat (twice?!). Again, you have not paid attention to the transitive dependencies and the order/level or dependencies.\n\nOh, twice ngTranslateMessageFormat this is of course only wrong here, not in my source code.\nNow I have in main.js:\nngTranslate: {\n  deps: ['angular']\n},\nngTranslateMessageFormat: {\n  deps: ['ngTranslate', 'messageFormat', 'messageFormatEn']\n}\nIn app.js I removed ngTranslateMessageFormat:\ndefine(['angular', 'ngTranslate'], function (angular) {\n  return angular.module('myApp', ['pascalprecht.translate'])\n});\nBut unfortunately the same error\u2026\n. So I write in app.js:\ndefine(['angular', 'ngTranslateMessageFormat'], function (angular) {\n  return angular.module('myApp', ['pascalprecht.translate'])\n});\nand in Language.js:\ndefine(['app'], function (app) {\nNow it should base on ngTranslateMessageFormat?\n. No, here is Language.js:\ndefine(['app'], function (app) {\n  //\u2026\n  app.config(['$translateProvider', function ($translateProvider) {\n    // \u2026\n    $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n    $translateProvider.translations('en', languageEn); // languageEn is defined\n    $translateProvider.preferredLanguage('en');\n  }]);\n});\nAnd this is main.js where it is included:\nrequire(['angular', 'app', 'translate'], function(angular, app) {\n    angular.element().ready(function() {\n        angular.bootstrap(angular.element(document.getElementsByTagName('html')[0]), [app['name']]);\n    });\n});\nThe order in HTML is:\n- main.js\n- app.js\n- Language.js\n- messageformat.js\n- en.js\n- angular.js\n- angular-translate\n- angular-translate-interpolation-messageformat\nBut I still get the same error\u2026\n. I created a sample project which can be downloaded here:\nhttp://www.file-upload.net/download-9929162/AngularTranslate.zip.html\nThere I have problems to get it running, so you will see the 'MessageFormat' is undefined.\nI start the application using http-server. Maybe you can find the reason why it does not work.\n. ",
    "httpete": "messageformat.en is the problem here, relying on embarrasing globals. A wrapper will fix this\n// utisl/MessageFormatWrapper.js\ndefine([\n    'messageFormat'\n], function (MessageFormat) {\n    // create a global variable\n    window.MessageFormat = MessageFormat;\n// also return the module so it can be used in other AMD modules from here\nreturn MessageFormat;\n});\nand then:\nmessageFormatEn: {\n        deps: ['./utils/MessageFormatWrapper']\n    },\n. Glad to help @mnishihan globals are LAME. \n. ",
    "mnishihan": "@httpete You saved my day. I was banging my head for hours while trying to load locale files using requirejs along with messageformat and using the wrapper actually solved the issue.\n. ",
    "voliva": "This is taken from angular translate code. It's the translate directive for Attributes and Elements (restrict: 'AE'): http://codepaste.net/3xfg4o \nAs I can read, the translation gets from updateTranslationFn in line 79, but that gets updated only when scope.translationId is changed. And when is scope.translationId changed? The only place I found is inside iAttr.$observe('translate', function (translationId) { ... in line 26, and I'm almost sure it's not set anywhere as it's an isolated scope.\nIf I run this with ionic beta13, which uses Angular 1.2, then, surprisingly, the function in line 26 gets called also for element tags. But with ionic beta14, which uses Angular 1.3, it doesn't; only gets called for attributes.\nIf you need more info I will make a plunker on monday.\n. Indeed, I'd close this and continue in your new issue #822 (as it's more elaborated).\nThank you so much!\n. ",
    "viniciuspires": "So... is it working with 1.3?\nI need to upgrade my application to Angular 1.3, and I just need this library to work... If this is working, is it possible to update the bower.json to accept Angular 1.3? I'm getting the following error: ECONFLICT Unable to find suitable version for angular\n. Oooooh... That worked. \nI'd buy you a beer if I was on Germany now. lol\nThanks a lot!\n. ",
    "Kageetai": "Oh, that is a bit embarassing. :)\nI really didnt think about that in JSON. \nThanks alot.\n. ",
    "brokenalarms": "Oh, I'm sorry, the changes I made weren't saved into the plunk. I don't think this made the problem clear - I am not talking about having the StaticFileLoader automatically try and load the file. \nTry this:\nhttp://plnkr.co/edit/HzHnAJIzurSh4oJbQADb?p=preview\nVery simply, I set the language to English on first run. The DK file is not present. Click on the DK option once, it reads from the StaticFilesLoader, which correctly generates an error return to the promise (put console.error in the StaticFilesLoader JS to see this. The second time you click on the DK option, the behaviour should be exactly the same - the first fetch by the StaticFilesLoader was a failure, so the language file is still not present and should be prevented from loading (which would show the keys).\nHowever, there must now be an actual undefined table registered for DK internally by angular-translate, as on the second click the StaticFilesLoader is bypassed entirely, the (presumably) undefined internal table is read, the language change is reported as a 'success'...and the keys are shown on the screen.\nIt seems to me that the StaticFilesLoader should not be bypassed until it hands angular-translate a at the least present and preferably non-empty language file, and that a simple error check is missing in this regard (but I don't have the skills (yet ;) to be able to see where exactly angular-translate reads from the StaticFilesLoader and determines it has 'successfully' received the language from it. \n. ",
    "yabasha": "@DWand thanx for your help\n. @DWand Is there a way to delete previously loaded parts without giving the id of the part, for example deleteAllParts() \n. @DWand Thanx\n. @DWand thanx a lot man\n. @PascalPrecht ok i'll search for another bidirectional solution\n. ",
    "snoopyart": "tlho' lu'*\n. ",
    "bielmenezes": "Hello guys,\nThanks for the quick reply.\nI did some tests with shortcuts and I don't think  that they could fit this requirement (or at least I wasn't able do it).\nThe problem is that the shortcuts need to be defined at message level and they can't be passed as parameters (like variable replacement), What I am suggesting is something like a mix of both Variable replacement and Shortcuts features. \nThe developer should be able to call the $translate service passing the key of the message he wants and passing others keys as parameters that should be translated too and used to variable replacement.\n. Hello @marcalj,\nI'm not sure if doing this way will be enough for me.\nHow would you do to configure your first example?\n\"NUMBER_OF\": \"You have {{type}} on this {{object}}.\"\n. Great @marcalj!! Yes, using the translation in this way will help me a lot.\nIn my opnion this workaround will solve our requirements by now, but if the angular-translate provide a more flexible way to do that, like you purposed earlier, it will be better. Of course, I think we have to wait whether this is a important requirement for more developers or just for us.\nThank you guys,\n. ",
    "SchizoDuckie": "Seems to be working well. thanks!\n. ",
    "abhishekgouda": "dude its very easy   you just have to check key every time there is a change using ng-change if you found arabic then you should use dir=\"rtl\" in html and you should use ng-hide to show such cases only you should do vice versa operations in html but fact is need to duplicate templates so it may reduce efficiency and will exactly consume double space for html \n. i implemented it\n. yaa it can be done by angular-translate find the following zip file you\nwill get a form with 5 langauges including arabic\nopen the folder and open (registration.html) i have given an\noptions to change languages at the top see for arabic rest all i did not\ntraslate but used\n_langauge name to indicate the chang let me know if there are any issues\nOn Mon, Mar 14, 2016 at 12:11 PM, kamleshpawar2006 <notifications@github.com\n\nwrote:\nHi\nI am working on a website which needs to be made in arabic and english. so\ncan anybody tell me if this can be done by any means like using angular\ntranslate. And it would be helpful if you add a code snippet so demonstrate\nit.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/835#issuecomment-196168395\n.\n. find the attached zip file\n\nOn Mon, Mar 14, 2016 at 12:57 PM, abhishekgouda patil gouda.abhi@gmail.com\nwrote:\n\nyaa it can be done by angular-translate find the following zip file you\nwill get a form with 5 langauges including arabic\nopen the folder and open (registration.html) i have given an\noptions to change languages at the top see for arabic rest all i did not\ntraslate but used\n_langauge name to indicate the chang let me know if there are any issues\nOn Mon, Mar 14, 2016 at 12:11 PM, kamleshpawar2006 \nnotifications@github.com wrote:\n\nHi\nI am working on a website which needs to be made in arabic and english.\nso can anybody tell me if this can be done by any means like using angular\ntranslate. And it would be helpful if you add a code snippet so demonstrate\nit.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/835#issuecomment-196168395\n.\n. i sent the zip file along with the mail check out i sent a form\nwith validation i am also new to github so check it along with mail id just\ndownload and extract the file and you will get all files open\nregistration.html along with it and if you need any help you can further\ncontact me\n\n\nOn Tue, Mar 15, 2016 at 1:05 PM, kamleshpawar2006 notifications@github.com\nwrote:\n\nThanks abhishekgouda for your effort,\nBut i could not find attachment(i am new on github).\nAnd i want to add content through form elements such as text field and\ntextarea. so please help me on this also.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub:\nhttps://github.com/angular-translate/angular-translate/issues/835#issuecomment-196703659\n. i also dont know how to post on git hub but if only problem is with\ndirection of the page display you dont have to worry much you just add\ndir=\"auto\" attribute in html tag thats it that will take care of\neverything    actually your whole template\n\n\nOn Wed, Mar 16, 2016 at 12:49 AM, Thorsten Sp\u00e4th notifications@github.com\nwrote:\n\nWell, there is a good reason that no attachments are allowed here.\nOtherwise, exploits and drive-by downloads would be easy on github. Please\nput the code directly on a gist / plnkr as an alternative.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/835#issuecomment-196982402\n. DID YOU GET THAT OR NEED ANY HELP\n\nOn Wed, Mar 16, 2016 at 7:40 AM, abhishekgouda patil gouda.abhi@gmail.com\nwrote:\n\ni also dont know how to post on git hub but if only problem is with\ndirection of the page display you dont have to worry much you just add\ndir=\"auto\" attribute in html tag thats it that will take care of\neverything    actually your whole template\n\nOn Wed, Mar 16, 2016 at 12:49 AM, Thorsten Sp\u00e4th <notifications@github.com\n\nwrote:\nWell, there is a good reason that no attachments are allowed here.\nOtherwise, exploits and drive-by downloads would be easy on github. Please\nput the code directly on a gist / plnkr as an alternative.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/835#issuecomment-196982402\n. \n\n",
    "kamleshpawar2006": "Hi\nI am working on a website which needs to be made in arabic and english. so can anybody tell me if this can be done by any means like using angular translate. And it would be helpful if you add a code snippet so demonstrate it.\n. Thanks abhishekgouda for your effort,\nBut i could not find attachment(i am new on github).\nAnd i need to add content through form elements such as text field and textarea. so please help me on this also.\n. Yes i got your point.I tried this:\n<html dir=\"auto\">\n<head>\n    <meta charset=\"utf-8\">\n</head>\n<body>\n<span >\u062a\u0623\u0645\u064a\u0646 \u0627\u0644\u0633\u064a\u0627\u0631\u0629</span> \n</body>\n</html>\nand it worked. charset=\"utf-8\" is improtant here..\nBut now i want to fill data through text field in arabic now. Please advise.\nThanks \n. ",
    "sayacoub": "Thanks for the anwser Max!\nYeah I also think that my solution would be a custom loader, but I don't really know how to code it. The example provided in http://angular-translate.github.io/docs/#/guide/13_custom-loaders is a really simple one and it doesn't help me very much. \nAt first i need to call a local file that would have a url like \"{lang}.json\", but as soon as I'm logged in, the url would be something like \"someUrl{lang}\" (so I'm gessing \"{part}{lang}\").\nI thought about a custom loader that would accept one more parameter like \"{partOne}{lang}{partTwo}\", but I have trouble coding it.\nWould you have an example of such a custom loader?\nRegards, Sami.\n. ",
    "cainaf": "Awesome! Thank you Jan!\n. ",
    "yjaaidi": "Of course :). That's what we already did but I'm a bit of a design maniac and would prefered to extend loader-static-files. Today, it just retrieves the response from the server but maybe tomorrow it could trigger events or perform some additional magic.\nAnyway, this is not a real issue, just a feature request to keep the code clean.\nThank you for you fast reply and for this great module ;)\nYounes\n. Oh! I just meant that if the static loader evolves, it would be nice to\nbenefit from it's evolution through inheritance our extension.\nAnyway, I think we can close the issue. Sorry for the trouble ;)\nOn Thu Nov 27 2014 at 7:05:52 AM Max Prychynenko notifications@github.com\nwrote:\n\nHi, @yjaaidi https://github.com/yjaaidi. As for me, if you are planning\nto add some events/magic and keep your code clean, it would be much better\nto use a custom loader. This way you are able to write a good code instead\nof set of workarounds.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/838#issuecomment-64749677\n.\n. Hi Jan,\n\nSorry, my description was not very clear.\nActually, there's an issue with mapInterpolationParameters ; any parameters that you pass will be recursively processed by this function that \"escapes/sanitizes\" all the properties, sub properties etc... but at the end we will only use few properties in the interpolation applied by \"MessageFormat\" library.\nIn addition to this, without one-time binding, every translated item will reprocess all properties recursively at every digest cycle.\nThis can have an impact on performance.\nIt would be better if \"MessageFormat\" could call our \"escape/sanitize\" function on every item we interpolate.\nFor example, suppose, we have the following params:\n{\n  user: {\n    firstName: 'Foo',\n    friends: [\n      {\n        firstName: 'John'\n      }\n      ...\n    ]\n  }\n}\nand suppose our message format looks like this:\n'Hello {user.firstName}.'\nIt is currently a waste of time to escape all the firstName properties of every friend.\nOf course, a workaround would be to only pass the properties we are using in the message format and in most cases we are in this situation but it comes handy to pass a user object to interpolate it's firstName property and the side-effect is that all the properties and sub proberties will be \"escaped/sanitized\" even though we are not using them in the message format.\nActually, instead of looping recursively through properties, maybe we could use MessageFormat's formatters and apply a custom formatter to \"escape/sanitize\" strings...\nhttps://messageformat.github.io/messageformat.js/doc/MessageFormat.formatters.html\nBut I don't think that it is actually possible to add a default formatter for all strings.\nThanks for your help!\n. ",
    "bjohnso5": "Would you recommend then doing the custom load + refresh at runtime from my component, which would then theoretically add any missing translations from the configured translations? \nMy concern is that we'll need to be providing the \"default\" text values for both of our supported languages, so if my module is the one that is in charge of the overriding, theoretically then I'd be replacing anything currently configured with my \"defaults\", instead of the other way way around.\nI cloned the source, and I'm also not seeing any way that I could be inspecting the currently registered translations to be able to just \"patch the holes\". Does that mechanism exist?\n. Sorry, just realized I hadn't responded to your last question. This issue can be closed, I worked around my issue (I realize it's kind of a specific niche case, and it makes no sense to include a general purpose way to achieve it in the library) by adding some preprocessing in my build pipeline that generates an angular module to add the translations in a config block. This makes it so that my default translations are available at bootstrapping time, and a consumer is free to call .translations() with overrides that are applied properly.\nThanks for your help, and sorry again for the neglect!\n. ",
    "josephfinlayson": "We're also looking at this for supporting translations for a customisable module, that can be extended for each client. It has a default translation set that can be customised for each particular client:\nSo the base set might include\nLOGIN_MESSAGE: \"Hello, and welcome.  Login!\"\nClient A would be happy with this, but client B might want the message:\nLOGIN_MESSAGE: \"Yo yo yo homie, you should login!\"\nAny suggestions on how to architect this. Currently fiddling around with constants, and _.extend(DefaultENTranslations, ClientENTranslations)\n. Ah, this is how I do it: \nhttp://plnkr.co/edit/9BLcwRqTu8SZNw68EHUR?p=preview\n. ",
    "cberez": "OK found it, I was escaping the simple quotes of my JSON...\nThanks for your help!\n. Here's the configuration of my angular app : \npublic/\n |-- app/\n     |-- app.js\n     |-- app.config.js\n     |-- components/\n     |   |-- module1/\n     |       |-- module.config.js\n     |       |-- module.controller.js\n     |-- translations/\n         |-- module1/\n             |-- lang1.json\n             |-- lang2.json\nThe translations directory contains pre-defined texts such as titles, menus, ...\nSome pages are dynamic and the content is retrieved from a REST API, the page's content is formatted in JSON with available languages\n. Ok but then I have to get the data in my custom loader ? Can't I get it in my controller (to be able to manipulate it if needed) and then inject the data in the translate module ?\n. I was looking at the $translatePartialLoadercode and I noticed the following function :\nthis.setPart = function (lang, part, table) {\n    if (!isStringValid(lang)) {\n        throw new TypeError('Couldn\\'t set part.`lang` parameter has to be a string!');\n    }\n    if (!isStringValid(part)) {\n        throw new TypeError('Couldn\\'t set part.`part` parameter has to be a string!');\n    }\n    if (typeof table !== 'object' || table === null) {\n        throw new TypeError('Couldn\\'t set part. `table` parameter has to be an object!');\n    }\n    if (!hasPart(part)) {\n        parts[part] = new Part(part);\n        parts[part].isActive = false;\n    }\n    parts[part].tables[lang] = table;\n    return this;\n};\nIt is never used but seems to be exactly what I need, I'm currently extending the provider to expose it but is there a reason to its declaration and non-use ?\n. So I can use it with the $translatePartialLoaderProvider but not the $translatePartialLoader\nI can't use it in my controller then, why not make it available to the service ?\n. ",
    "varunmc": "I found that including the angular-translate and AngularAMD are not compatible. If I were to comment out the AngularAMD module I see that angular-translate is working. Any comments?\n. I found that loading angularAMD after angular-translate works as expected. Closing Issue.\nHere is my requireJS config:\njavascript\n    require.config({\n        deps: ['app'],\n        paths: {\n            angular: [\n                '//ajax.googleapis.com/ajax/libs/angularjs/1.3.5/angular.min',\n                'lib/bower_components/angular/angular.min'\n            ],\n            angularAMD: [\n                '//cdn.jsdelivr.net/angular.amd/0.2/angularAMD.min',\n                'lib/bower_components/angularAMD/angularAMD.min'\n            ],\n            angularTranslate: [\n                '//cdnjs.cloudflare.com/ajax/libs/bower-angular-translate/2.0.1/angular-translate.min',\n                'lib/bower_components/angular-translate/angular-translate.min'\n            ],\n            angularTranslateLoader: [\n                '//cdnjs.cloudflare.com/ajax/libs/bower-angular-translate-loader-partial/2.0.0/angular-translate-loader-partial.min',\n                'lib/bower_components/angular-translate-loader-partial/angular-translate-loader-partial.min'\n            ],\n            uiBootstrap: [\n                '//cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.12.0/ui-bootstrap.min',\n                'lib/bower_components/angular-bootstrap/ui-bootstrap.min'\n            ],\n            uiRouter: [\n                '//cdnjs.cloudflare.com/ajax/libs/angular-ui-router/0.2.11/angular-ui-router.min',\n                'lib/bower_components/angular-ui-router/release/angular-ui-router.min'\n            ],\n            uiRouterExtras: 'lib/bower_components/ui-router-extras/release/ct-ui-router-extras.min'\n        },\n        shim: {\n            angularAMD: ['angularTranslateLoader', 'uiBootstrap', 'uiRouterExtras'],\n            angularTranslate: ['angular'],\n            angularTranslateLoader: ['angularTranslate'],\n            uiBootstrap: ['angular'],\n            uiRouter: ['angular'],\n            uiRouterExtras: ['uiRouter']\n        }\n    });\n. ",
    "dawsontan": "We had a similar issue, and we worked around it by doing the followings:\n1. set the urlTemplate to '{part}/locale-{lang}.json'.\n2. when adding part, you can add the module specific path, like './module2' or './common/auth'.\nIt is a bit hackish, but it seems to work.\n. ",
    "splintor": "We had a similar problem, with different files in different paths, but in our case, that language was the name of a directory with list of translation files, to the file paths have differences both before the language (various paths) and after the language (various filenames).\nWe are now looking into using the option to pass a function to urlTemplate, so we can return the needed path based on the part and language, but not using a single template.\nhttps://github.com/angular-translate/angular-translate/commit/401204a\n. ",
    "ritenv": "I will set a plunker with elaborate details shortly, I was hoping if it was a known implementation default and if I could be guided.\n. @PascalPrecht I have verified that I am on the latest version, and I see the translateFilter.$stateful = true; within the filter declaration in the source files. I am using this filter for placeholder on a text box (if that helps identify the issue).\nI am trying to create a plunk, but I am unable to replicate the issue there.\n. Here is a plunk: http://plnkr.co/mjjuRa\nI have used the translate filter within the HTML - that doesn't work.\nI have also used $translate() directly via controller - that works.\nThe en.json file is loaded remotely to have a delay.\nHope this helps.\nEdit: Updated with a frozen plunk.\n. @knalli thanks for pointing out, that was a typo in the plunker that lead me to believe I have reproduced the bug.\nI have verified I am using the single-quotes in my production but still have the same issue.\nI am unable to reproduce it on a delayed sample code (http://riten.io/translate-bug/)\nI will try to spend more time on replicating the exact scenario that we have in our project and get back.\n(Meanwhile, a shout to @webpolis if he can reproduce the issue on a plunk)\n. @knalli Unfortunately, we could not generate it on a plunk, but still face the same in our project. We managed by a workaround wherein we created a custom filter that calls $translate directly, as below:\nangular.module('concierge').filter('translater', [\n  '$translate',\n  function ($translate) {\n    var myFn = function(label) {\n        return $translate.instant(label);\n    };\n    myFn.$stateful = true;\n    return myFn;\n  }\n]);\n. Yeah, \"angular-translate\": \"~2.4.2\" and \"angular\": \"1.3.6\"\n. Yes, that's the confusion. Somehow this works.\n. Cool, thanks @knalli for your intervention.\n. ",
    "minhajkk": ":+1: \n. ",
    "mlem": "Hi,\nsorry but we went a different way. We had \"only\" 4 messages to swap. So we created a <div>msg</div> for each box and changed the ng-show state accordingly (sometimes you can see two of them at the same time).\nIt's still an issue, but atm we don't need this to be working.\nCheers,\nMartin\n. ",
    "tomi-heiskanen": "I recall they are directives but I can check once I'm back to work.\n5.12.2014 17.20 kirjoitti \"Thorsten\" notifications@github.com:\n\nHi!\nAre you calling the translations via filter, directive or as service?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/848#issuecomment-65803803\n.\n. Hi!\n\nI can confirm the translations are included in the views using directives, like this:\n<span translate=\"COMMON.OK\"></span>\n. I can confirm that 2.5.0 fixed the issue for us in our application.\nTried to create a Plunker for the issue but I didn't come up with a solution to control the XHR loading order in Plunker.\n. Made a Plunker to reproduce with 2.4: http://plnkr.co/edit/sjnnt2Ul7RAwZ3pw5M8w?p=preview\nHad to modify $translateStaticFilesLoader to wait before processing the other XHR. If you are still interested, you should be able to create a testcase based on this.\n. ",
    "demirag": "Yes, this is definitely a breaking change. Using a \"wrapper\" directive might solve the problem but I think directive should be renamed on the next major release because imo using an html attribute name is simply wrong. Perhaps no one using html5 translate attribute nowadays but it might change in near future and become a bigger problem. For now, I have renamed it in my project.\n. I think safest option is to prefix this. \"ng-translate\" or better \"pp-translate\". For the backwards compatibility, we can still support \"translate\" attribute for a while to give time everyone to migrate.\n. Yeah ng-translate might collide again any time. I would go for pp-translate to be more safe. \n. ",
    "xsegrity": "I'm new to angularjs but would using the \"data-\" prefix not solve the issue (e.g. data-translate)?\n. Ah right - that makes sense. Like I said < new guy :)\n. ",
    "creitzel": "+1 for wrapper in current major version.   It would help to give developers time to migrate their code in preparation for the next major version when support is dropped for the conflicting attribute name \"translate\".   \nMy suggestion for the new attribute name: \"message-id\".   The \"-id\" part reflects that the values are the ID of the actual text that is to be retrieved.\n. ",
    "brownknows": "Just wondering if there is a release on the immediate horizon with this change.   Thanks.\n. ",
    "Sjors": "I found a workaround, though I haven't tested it extensively.\nUsage, if you want the HTML 5 behavior:\nhtml\n<span translate=\"no\">Hello World</span>\nJust make sure you don't use lower case no or yes for any real translation.\nCustom directive:\n```js\nangular\n  .module('yourApp')\n  .directive('translate', translate);\nfunction translate () {\n  const directive = {\n    restrict: 'A',\n    compile: compile,\n    priority: 1\n  };\n  return directive;\nfunction compile (elem, attrs) {\n    if (attrs.translate === 'no' || attrs.translate === 'yes') {\n      // HTML5 tag. Prevent angular-translate from processing this.\n      attrs.translate = undefined;\n    }\n  }\n}\n```\nThe original directive should have a lower priority, e.g.:\njs\n$translateProvider.directivePriority(0);. ",
    "coojam": "Another example, we have lots of code like this...\n<td width=\"200\" translate>lync-ev.powerview.call.{{key}}</td>\nwhich worked fine before but now this results in...\n<td width=\"200\" translate=\"\" class=\"ng-scope ng-binding\">lync-ev.powerview.call.Call length</td>\nwhere it has resolved the key but appended it to the static part of the key.\n. ",
    "Zertz": "Wrong branch.\n. I think ideally the syntax would be as follows:\n$translateProvider\n  .useStaticFilesLoader([{\n    prefix: '/path/to/locales/',\n    suffix: '.json'\n  }, {\n    prefix: 'more/relative/locales/',\n    suffix: '.json'\n  }])\nHowever, since $http and key are added to the options object, the array becomes an object again, except with numbered keys:\n{\n  \"0\": {\n    prefix: '/path/to/locales/',\n    suffix: '.json'\n  },\n  \"1\": {\n    prefix: 'more/relative/locales/',\n    suffix: '.json'\n  },\n  \"$http\": \"...\",\n  \"key\": \"...\",\n}\nUnless I'm missing something, this makes it a bit tricky to loop through in a non-hacky way.\n. Alright. Should I commit docs here or make another PR?\nAlso, I'm thinking suffix should be optional and default to an empty string rather than having to pass an empty string.\n. There you go. I did the docs I could!\n. If one fails, then the promise is rejected and no data at all is returned. Do you you think this case should be handled differently?\n. ",
    "Antonio-Laguna": "I agree with @knalli saying that AJS doesn't follow a strict semver pattern. Of course people can later on overwrite on their bower files to install whatever they choose but at least, angular-translate states that works with  \"1.2 to 1.4\"\nI think this is a nice document and it covers everything I can think of.\n. ",
    "luizfilipe": "@PascalPrecht and @knalli I think this not solve this issue, what I want is use a date filter into JSON property that is used by translate directive, passing the date with translate-values. I\u00b4ve tried  use translate-compile directive and $translateProvider.usePostCompiling(true)  also, but neither of these angular-translate features resolves the problem, the date still shown like a simple date.toString() without the provided format.\n. @PascalPrecht  @knalli thoughts?\n. @PascalPrecht @knalli Any attention will be welcome.\n. Guys I\u00b4ve found the solution, thanks.\n. I think you want something like this:\njs\n$http.get('/app/v1/friends/' + friendId).success(function (translateToken) {\n  $scope.translateToken = translateToken;\n});\n- JSON files based on possible values for a social app.\nen.json\njson\n { \n    \"COLLEAGE\": \"Colleage\",\n    \"FRIEND\": \"Friend\",\n    \"BEST FRIEND\": \"Best Friend\",\n    \"GIRLFRIEND\":  \"My Girl\",\n    \"BOYFRIEND\": \"My Boy\"\n}\npt.json\njson\n { \n    \"COLLEAGE\": \"Colega\",\n    \"FRIEND\": \"Amigo\",\n    \"BEST FRIEND\": \"Melhor amigo\",\n    \"GIRLFRIEND\":  \"Minha namorada\",\n    \"BOYFRIEND\": \"Meu namorado\"\n}\n@ HTML\nhtml\n<p translate={{translateToken}}></p>\n@Cfsattva Maybe this works like you want. If not, please, be more clear.\n. @Cfsattva you have doubt about the api? If yep, plz copy and paste the code thats simulates the problem....\n. ",
    "LiamK": "Hi, @luizfilipe, \nWhat was the solution?\n. I just tried using the the 'sce' parameter and it works as far as the translations were concerned.  However, it also triggers a digest loop error, which is not there with either 'escape' or 'sanitize' params.\nAny idea what might be the problem?  I removed the watch() statements in the controller but that had no effect.\nUPDATE: I tried sceParameters and that worked.\n. ",
    "bborowin": "@luizfilipe could you summarize your solution pls?\n. ",
    "jasonvlambert": "It didn't work for me either using the translate-values={myDateVar: someScopeObject.myDateVar} format.\nI eventually found that it did work if I used the translate-values={{translationData}} format, where         $scope.translationData = {\n            myDateVar: someDateValue\n};\n. ",
    "envision": "Still no solution?\n. We are experiencing this bug also\n. When using .determinePreferredLanguage().fallbackLanguage('en_US') English doesn't get applied. But when using determinePreferredLanguage() only, then my browser's language Finnish gets applied.\nSo using this on config:\n$translateProvider.useStaticFilesLoader({\n    prefix: '/lang/',\n    suffix: '.json'\n})\n.registerAvailableLanguageKeys([ 'en_US', 'pt', 'fi_FI', 'ko_KR', 'zh_CN' ], {\n    'en-*': 'en_US',\n    'fr-*': 'fr_FR'\n})\n.determinePreferredLanguage();\nAnd then using this on run returns empty? Yes I have declared the provider.\nconsole.log($translate.use());\n. Even this logs twice \"undefined\", but does load the static file and change the language:\nconsole.log($translate.use());\n$translate.use('fr_FR');\nconsole.log($translate.use());\n. :+1: \n. Sure do @tspaeth \u2013 I have now verified this fix worked for me, thanks a lot! Fallback language's translation string is now loaded if target language doesn't have it translated.\n. @knalli thanks, I had not seen that yet. So what I'm looking is with setting 'java' as documented here. Seems to be working!\n. Great, thanks @knalli \u2013 it would be nice to have an example there also, but found this from SO:\n.controller('foo', function ($rootScope, $scope, $translate) {\n    $rootScope.$on('$translateChangeSuccess', function () {\n        $scope.pageTitle = $translate.instant('PAGE.TITLE');\n    });\n})'\n. This could work but I'm using PhraseApp to manage translations and the files are structured as single file per language...\n@saoron is there a way to specifically define the language used with $filter('translate') ?\n. ",
    "dani-inside": "I was facing the same issue and found a solution for using the date filter in translate-values directive. It's about using brackets to make the statements correct. \n<div translate=\"translateKey\" translate-values=\"{date: (model.date | date:'dd.MM.yyyy')}\"></div>\n. ",
    "Cfsattva": "Sorry,\nIn this moment ng-repeat {{p.name}} shows the content in the array (Today, This week, This month and All stats) but I'd like to translate that content to other two languages and have this translations in each json file. I have other translations in the app but text comes from labels in the same view for example:\nBefore I had pFriends/p\nNow I have p translate=\"FRIENDS\"/p Using json files like this:\nen.json  {\"FRIENDS\": \" Friends\"}\nes.json  {\"FRIENDS\": \" Amigos\"}\nBut now I'd like to translate the content in the array that I have in a service:\nvar array = [];\narray.push(new P('current', 'Today'));\narray.push(new P('week', 'This week'));\narray.push(new P('month', 'This month'));\narray.push(new P('all', 'All stats.'));\n. So my en.Json file could be something like:\n{\"current\": \" Today\",\n \"week\": \"This week\",\n \"month\": \"This month\",\n \"all\": \"All stats\"\n}\nSorry I know these are silly questions but I am really new at this...\n. If I have this in a Controller:\n.controller('CheckDetailController', ['$scope', '$translate', '$state', '$stateParams', '$log', '$timeout',\n    'restService', 'timeService', function ($scope, $translate, $state, $stateParams, $log, $timeout,\n                                            restService, timeService) {\n$scope.name = 'Loading check info...';\nIs it possible to change just like this:\n$scope.name = $translate('LOADINGCHECK');\nHaving in the en.Json file:\n{\n\"LOADINGCHECK\": \"Loading check info...\"\n}\nBecause I did it and didn't work.\n. Ok\n. All good thanks! @luizfilipe \n. How can I do this whithout putting the html in the json file?\n. Is it possible?\n. @PascalPrecht You are right, thanks!\n@knalli Thanks man! Also works with directive:\n<small><span translate=\"YET\"></span><a href=\"/#/signup\" translate=\"REGISTER\"></a></small>\n. Yeah sorry! Thanks to all\n. ",
    "shystruk": "Yup.\nBig Thanks!)\n. ",
    "keirlawson": "Yup, found this issue when upgrading from 1.x, broke a bunch of our tests\n. ",
    "paullofte": "@jar240 here's an example using a setup of translations in the config of $translateProvider similar to what is done in the getting started docs.  http://plnkr.co/edit/9iBdVoiSKsHqhKt6xDDS?p=preview\none thing I noticed that if the preferredLanguage was not set it would not look up the value, so that might be missing.\nif nothing else, this might be a place for you to start from in order to provide an example\nAlso, I'm new to this code as I am just doing research around available i18n projects for angular.  However, I thought gettextCatalog was part of the gettext project.  I'm going to do some research as I hadn't seen an example that bridged the 2 projects yet, I'm interested in seeing a working example if that is what you are able to do here.  \nhope this helps,\n--Paul\n. ",
    "jar240": "Whoa, yes I'm an idiot... sorry for wasting your time, I'm using angular-gettext. I've closed it.\n(was also evaluating angular-translate, which is the cause for the mixup)\n. ",
    "rajush": "@knalli I'm using translate-attr-placeholder with ng-model on the input tag\nhtml\n<input placeholder=\"Regular Placeholder\" translate translate-attr-placeholder=\"text\" translate-value-browser=\"{{app.browser}}\" ng-model=\"inputvalue\">\nand the problem is that the ng-model scope value seems to be undefined when tried to access from the controller. \nBut when used as a filter placeholder=\"{{ 'text' | translate }}\", it works fine and I can access the ng-model scope variable from the controller. \nQ: Is there a way that ng-model scope value could be accessed in a controller while using translate as an attribute instead of a filter?\nAny suggestion will be greatly appreciated! Thanks.\n. @zycbob Thank you! \ud83d\udc4d\n. This is something I faced too. I had a similar question posted here: [https://github.com/angular-translate/angular-translate/issues/874]\nFor now, I'm using filter within the expression of the placeholder placeholder=\"{{ 'text' | translate }}\" which binds the scope to the controller, until I find a way to figure it out. I hope there is way to solve this without using a filter.\nThanks!\n. ",
    "zycbob": "@rajush \n<input placeholder=\"Regular Placeholder\" translate translate-attr-placeholder=\"text\" translate-value-browser=\"{{app.browser}}\" ng-model=\"$parent.inputvalue\">\n. @brada1703 As I can see it's working here:\nhttp://plnkr.co/edit/n0FSlJoUlWCXQFEmY5oi?p=preview. ",
    "brada1703": "This worked perfectly for the placeholder, but is there a way to do it with the title?\nI have tried, \n<div class=\"col-sm-2\" data-toggle=\"tooltip\" data-placement=\"bottom\" title=\"Regular Title\" translate translate-attr-title=\"RESERVATION_emailaddress\" translate-value-browser=\"{{app.browser}}\">\nwhich didn't work.\nAny idea?\nThanks!. ",
    "saeb-panahifar": "Thanks, It's useful. . ",
    "dbclkclk": "@knalli issue is fixed. Thanks. \n. ",
    "thejourneyoflife": "@knalli  When I choose angular-translate as my multiple language solution,its works well in the browser,but when i deploy or emulation using xcode emulator,its only display the prop like this \napp.title and have not translate \n. ",
    "RonMen": "Hi.\nSince the other issue was closed I will try here. In iOS running the page on a local server in Safari and also within an iOS app it isn't possible to get translations. So this isn't really a problem of iOS together with Cordova build apps, it seems a problem of in iOS Browser as well.\n. OK, think we might go a little deeper into some configs here?\nMy modules are the following:\n'ngRoute','ngAria','ngAnimate','ngMaterial','mobile-angular-ui','pascalprecht.translate',   'ui.bootstrap','leaflet-directive'\nMy setup for the translations in the config is like this one:\n``` javascript\n...\n// german\n$translateProvider.translations('de_DE', {\n    HEADLINE:  'Eine \u00dcberschrift',\n    MENU_SETTINGS: 'Einstellungen',\n    BTN_BACK: 'Zur\u00fcck',\n    BTN_MENU: 'Men\u00fc',\n    BTN_CLOSE: 'Schlie\u00dfen',\n    BTN_REFRESH: 'Aktualisieren'\n});\n// english\n$translateProvider.translations('en_US', {\n    HEADLINE:  'Some Headline',\n    MENU_SETTINGS: 'Settings',\n    BTN_BACK: 'Back',\n    BTN_MENU: 'Menu',\n    BTN_CLOSE: 'Close',\n    BTN_REFRESH: 'Refresh'\n});\n$translateProvider.determinePreferredLanguage();\n...\n```\nWithin the template I'm using this for example:\n{{ 'HEADLINE' | translate }}\nFor\nThis is working great using Chrome browser and also within an Android-App container but it isn't working on other browsers and within an iOS-App container.\nI also tried to use something like this definition  shown in the Getting-Started:\n``` javascript\n...\n// german\n$translateProvider.translations('de', {\n...\n});\n// english\n$translateProvider.translations('en', {\n...\n});\n$translateProvider.determinePreferredLanguage();\n...\n```\nSomething I'm missing?\nRegards\n. Hi.\nI tried this now and it is also not working in other browsers than Chrome. It's rendered like that in Firefox:\n<span class=\"ng-scope\" translate=\"HEADLINE\">HEADLINE</span>\nSomething broken because of the modules used?\n. @knalli no there aren't any errors in the logs. See the attached screenshot.\n\n. So. I cleared all Caches and tried again in Chrome, FF on Windows and Safari on MacOSX debugging some breakpoints using german browser interfaces for now:\nChrome only works this way:\n// german\n$translateProvider.translations('de_DE', {\n...\n});\nFF after resetting cache works this way:\n// german\n$translateProvider.translations('de', {\n...\n});\nSafari on MacOSX after resetting cache works this way:\n// german\n$translateProvider.translations('de_de', {\n...\n});\nSo if this isn't that strikt it wouldn't be nice since I would need to add a lot translations to support the one language only.\nI also tried running it on iOS (simulator only, devices are on the road today) changing the devices language to german. The local of the call is \"en_us\" (it isn't \"en_US\"), the navigator.language of the simulator is \"en-us\" and so it isn't german and only worked this way to get translations, but since device language is german it isn't correct:\n// english\n$translateProvider.translations('en_us', {\n...\n});\nFor iOS it might be the simulator running into an issue here, I need to try further when the devices are back here. Also to get some Cordova running for test to see if this is also\n. Never found this until now. Will give this a try for the browsers again and check devices using Cordova when they are back to me.\n. ",
    "taheerahamed": "@knalli which means it is an issue of placeholder directive which i had included ?\n. ",
    "mathilde-pellerin": "@PascalPrecht Thanks for your answer, we will manage that manually then.\n. ",
    "christw92": "@PascalPrecht So how can we use localization (l10n) with angular-translate then? I found the docs saying something about l10n support but the docs seem to focus on the i18n part.. Ok, I think I understood. But as far as I know l10n refers to localization and i18n refers to internationalization. And as you just mentioned, localization is not a thing that is covered by angular-translate. Therefore I suggest to remove the \"l10n\" from the docs in the link I mentioned (to avoid misleading people with that information)\nIt says the following:\n\nYou want to bring i18n and l10n to your Angular apps and couldn't find an easy way how to do it? angular-translate got you covered.\n\nBut it might also be possible that I have got a wrong understanding of those terms, I'm not an expert in that field.. ",
    "jmayday": "So, combining my approach and @DWand hint, I would suggest do it like this:\napp/\n--assets/\n----translations/\n------de.json\n------en.json\n--js/\n--app.js  // the implementation in the config file\n$translateProvider\n   .useStaticFilesLoader({\n     prefix: 'app/assets/translations/',\n     suffix: '.json'\n   })\n   .registerAvailableLanguageKeys(['en', 'de'], {\n                       'en-us': 'en',\n                       'en-uk': 'en',\n                       'de-de': 'de',\n                       'de-ch': 'de'\n   });\n. Forgot to add - staticFilesLoader should just do it's job having it configured like shown above. In my case it does. What about you @manulitopetito?\n. I know that this is old question but I just found it and have simple answer so maybe it's helpful for someone. \nCode on your side was buggy as you should use overloaded deletePart which takes removeData boolean flag. It was present in angular-translate 2.12.1.\n   * @param {boolean=} [removeData=false] An indicator if the loader has to remove a loaded\n   * translation data physically. If the `removeData` if set to **false** the loaded data will not be\n   * deleted physically and might be reused in the future to prevent an additional xhr requests.\n\n$translatePartialLoader.deletePart(part, true)\n$translatePartialLoader.addPart(part);\n$translate.refresh();. ",
    "mabouchalkha": "i have to install require.js?\n. ok i found the solution\nin the index.html we have to inculde \n```\n/path/to/messageformat/locale/lang.js\n```\nthank you a lot\n. ",
    "anuradhabandara": "I got the same problem.Why are we again load the lang.js file from index , since we use static file loader?\n. ",
    "pascalberger": "+1. Would be nice to have an actively maintained and up to date NuGet Package. Also with an NuGet package dependent on the modular angular.core (or no dependency so that the user can choose) as already requested in #797\n. The author just updated the existing NuGet package to the latest version: https://www.nuget.org/packages/AngularTranslate/\n. angular-translate-storage-cookie.js is not part of the NuGet package. The AngularTranslate package only contains the core file (angular-translate.js), the AngularTranslate.LoaderUrl additionally the angular-translate-loader-url.js file. \n. ",
    "epicbugs": "I can confirm the package update and but it still has one small glitch. It appears that the angular-translate-storage-cookie.js file has somehow slipped through the cracks, so to speak.\nThe version of angular-translate-storage-cookie.js I got from NuGet on 20.01.2015 18:31 (GMT +02:00) contains the following header:\njavascript\n/*!\n * angular-translate - v2.4.0 - 2014-09-22\n * http://github.com/PascalPrecht/angular-translate\n * Copyright (c) 2014 ; Licensed MIT\n */\nWhen using the cookie storage option with that one, the updated Angular Translate package fails with Uncaught Error: Couldn't use storage '$translateCookieStorage', missing get() or put() method!.\nAlthough I managed to fix it manually, I sent a message about it to the author of the package also, I hope he will find the time to fix it.\nI also discovered that at least in our scenario when migrating from 2.1.0 to 2.5.2, we had to register available languages with $translateProvider.registerAvailableLanguageKeys(); during the configuration phase. Without it, there was only a beautiful white screen with Uncaught TypeError: undefined is not a function     \nangular-translate.js:182 written inside the console window.\nOther than that, it's all good. Thank you very much!\n. Aah, my mistake then, apologies. You're right, the cookie storage file is not a part of the AngularTranslate package. Nor does it presently seem to be a part of any other one, so go figure.\nBut nevertheless, the updated 2.5.2 package itself seems to be working and at least for me that's good enough. Hence for the time being the problem is solved. Thanks!\n. ",
    "puppeteer701": "Refreshes custom loader\n$translate.use('en-us');\n$translate.refresh();\n. ",
    "njlg": "When using useStaticFilesLoader() in my example, $translateProvider.use() returns undefined until the static JSON file has been fetched from the server.\n. ",
    "dereksantos": "I've updated the code and test to make sure the priority is applied regardless of what order the http responses are received. Thanks for your feedback DWand.\n. I'll remove the unnecessary lines.\nIt sounds like we should only be processing tables for parts that are active. In fact I think this is what the code used to do. So we need to add if (part.isActive) around that code.\nI'm not very familiar with the use-cases for active vs. non-active parts, so let me know if that makes sense.\n. I'll go with the second option.\nAlso, I believe these lines can be removed since the else block can never be reached.  The loaders.length condition will always be true, and an empty array should still resolve with {}.\nhttps://github.com/dereksantos/angular-translate/blob/prioritized-partial-loader/src/service/loader-partial.js#L304\nhttps://github.com/dereksantos/angular-translate/blob/prioritized-partial-loader/src/service/loader-partial.js#L317-L319\n. Here's a test plnkr. It appears to work as expected.\nhttp://plnkr.co/edit/8BUluatfWNb8AWAIYvgc?p=preview\n. That's good. You're right about 0 being falsy. In any case, I think it's a bit cleaner without that condition. \nLet me know if you'd like to see any other changes.\n. Thanks for your feedback and help with this pull request!\n. ",
    "diestrin": "You can't access the objects in that way, you can obtain strings in the translations result, so you need to provide the full key in the $translate function\njavascript\n    $translate(['REMOTE.filterModal.filterModalTitle']).then(function(translations) {\n       console.log(translations['REMOTE.filterModal.filterModalTitle']);\n    });\n. ",
    "eruecco87": "That resolved my problem, Thanks!!\n. ",
    "Hirbod": "I've a better approch for this. (IMHO)\nThis is how I did it:\nFirst, one global function\njs\n if (!String.prototype.format) {\n    String.prototype.format = function() {\n        var str = this.toString();\n        if (!arguments.length)\n            return str;\n        var args = typeof arguments[0],\n            args = ((\"string\" == args || \"number\" == args) ? arguments : arguments[0]);\n        for (arg in args)\n            str = str.replace(RegExp(\"\\\\{\" + arg + \"\\\\}\", \"gi\"), args[arg]);\n        return str;\n    }\n}\n2)  \njson\nMYKEY: \"This  {link} redirects to {something}\";\nMYLINK: \"LINK-TEXT\";\nSOMETHING: \"SOMETHING\";\nhtml\n<ANY ng-bind-html=\"WHATEVER\"></ANY>\nThen just call a translate Promise inside of your controller, and then\njs\n$scope.WHATEVER = translations.MYKEY.format({link: '<a href=\"\">'+translations.MYLINK+'</a>', something: \"key/translations/whatever\" })\nIf I need to translate some links or vars, I will always do this in the controller\n``` js\n            var transArray = [\n                'SHOW_PROFILE', \n                'CHAT', \n                'GREET',\n                'ABORT',\n                'GREET_SUCCESS',\n                'GREET_FAILED'\n            ];\n        $scope.trans = {};\n        $translate(transArray).then(function (translations) {\n\n            angular.forEach(translations, function(value, key) {\n                $scope.trans[key] = value;\n            });\n\n        });\n\n```\nThen access it with \njs\n$scope.trans.KEY\nand if I want to change some placeholders inside of it\njs\n$scope.trans.KEY.format(....)\n. ",
    "ozdemirr": "Hi @PascalPrecht and @knalli \nThere are other situations. \nFor example, let's think for an e-commerce website that supports 2 languages(Turkish and English)\nWe want to say \"You can access your orders on orders page\"\nThis is in HTML;\n<p>\nYou can access your order on <any ui-sref=\"customer.orders()\">orders page</any> \n</p>\nBut for Turkish;\n<p>\nSipari\u015flerine <any ui-sref=\"customer.orders()\">sipari\u015flerim</any> sayfas\u0131ndan ula\u015fabilirsin \n</p>\nHow to deal with it? another language structure makes harder.\n. ",
    "tantommy": "Hi DWand,\nSorry if I wasn't clear.  To access this property to display on html, I would do this {{vm.config.label}}, so yes you are correct.\nI tried {{vm.config.label | translate}} but I do not get the translated version, just the regular ID.\nIt seems like it's not able to resolve the expression vm.config.label before running it through the translation filter.\n. I have to hit the refresh button on my browser in order to see the translation take effect.\nHere is a demo on plunkr:\nhttp://plnkr.co/edit/2Fa9P2szD8dFgWUSS9So?p=preview\nThe an explanation is in the README but the tldr is:\nswitching languages using the dropdown does not work on the label. it only works after i refresh the page.\n. I realized this after messing with the demo.  The demo works fine if I take away the \":: \" prefix, but in my project it's not doing the same thing.  There may be some other issues that I'm not seeing.  Thanks for the response though, we can close this for now.\n. ",
    "lovedota": "@knalli  @tsaikd  Thanks !\n. ",
    "kumarharsh": "Ah well, I see what the cause is. I'll remove the fallbackLanguage part.\nBut this is not very clear in the docs, nor was I able to search that issue via the Github issues search...\nThe main point still remains... that this behaviour is a bug, right?\n. ",
    "sscovil": "@knalli I think I'm experiencing the same issue, using angular-translate-loader-partial. I have a fallback language foo and a preferred language bar, where foo is included in the app and bar is in a json file. http://plnkr.co/edit/f9xSe9ic9zMCNmsc0Tkc?p=preview\nI expect that it will use foo until bar is loaded, but instead it is trying to load foo.json and getting a 404...and falling back to foo, never attempting to load bar. Is this a bug? Or am I doing something wrong here?\nThanks in advance!\n. ",
    "seblucas": "Thanks for the pointer I missed registerAvailableLanguageKeys.\nUnfortunately, It isn't a silver bullet at all. A easier way (from my point of vue) would to probe available language by testing each static file (I use angular-translate-loader-static-files).  For example if the browser return fr_FR : \n- Try to load localization_fr_FR.json\n- If the file is not found then strip the country and try to load localization_fr.json\n- if the file is not found load the default language : localization_en.json\nI've never checked how static files are handled and if my proposition is feasible. If it is, would you accept a PR about it ?\nThanks for your answer.\n. I agree with you. I'm just being lazy. \nMy app has currently 18 language code. Each language can have 3 to 12 different country code so if I want to use registerAvailableLanguageKeys the list is going to be big ... really big.\nFor now my quick & dirty fix has been to : \n- Copy paste getFirstBrowserLanguage (from angular-translate sources) inside my $translateProvider configuration\n- Add a new function getLocaleWithLanguageOnly that calls getFirstBrowserLanguage and strips the country code. If the language returned is empty, then it call a rest method to add a better guess.\n- call determinePreferredLanguage with my own function : \n$translateProvider.determinePreferredLanguage(getLocaleWithLanguageOnly);\nBut I'll have to add support for country code one day or another, so I seek a better solution. About the client based determination, I've read some discussions and I know that.\nAnyway I'll say it's more my problem (and my laziness) so thanks again for your time and feel free to close this issue.\n. Indeed, even if there are breaking changes, normalization is always good. I'll tweak my copy of getFirstBrowserLanguage to use this PR. Thanks for the information.\n. Agreed\n. Yes I know, that what I already do, I explained here https://github.com/angular-translate/angular-translate/issues/901#issuecomment-73015377 .\nI just wished for an integrated solution\n. Thanks for your answer, I'll close this issue as we explained a lot of workaround in this issue.\nThanks again for your time, it's really appreciated.\n. ",
    "patrickbr": "Yes, we are doing it like that at the moment. However, we fear that this can lead to redundant file requests. Does the $partialLoader know about translation files/parts it has already loaded?\n. Perfect, then I guess this issue can be considered closed :)\n. ",
    "Bessonov": "I run in the same issue. Controllers are lazy loaded and trigger addPart in ui-route resolve to load translations. However, the behavior of angular-translate isn't deterministic. For example in following (stolen) plunker, if you click first on Mods and then on French - french language is loaded. But not in other ways.\nrefresh() is'nt solution, because:\n1. This lead to loading much more than needed. The policy of project is to lazy load all what possible: controllers, directives, resources, services, (bigger) templates, translations, css and so on... but:\n2. For perfomance and UX reasons translations for fallback/default language delivered through $translateProvider.translations in .config. And because this can't be loaded with partial loader after refresh.\nIs there any solution for this or I do something wrong?\n. Thank you, @DWand! But it does not help in my setup (it's a little bit complicated to create plunker with all aspects). The problem is similar to #175. See Plunker from Pascal: replace 'uses' with 'use' in app.js:51 (or use my fork) and then click on German, Test, English.\n. ",
    "sharanmunyal": "yes. I just verified. It didn't update on using $translate('').then()\n. sounds good. I will stick to the filter then. Thanks for the reply @tspaeth \n. @DWand so I want to translate \"Version 2 of 3\". I am wondering how do I translate 2 or 3 to different languages?\n. Well I am looking for a way how we could translate the number. I agree I can always translate 'Version' and 'of' from the above string.\n. I am not sure if I explained it correctly. The number 1 is written \u090f\u0915 in my native language. I think I will have to precompute in the translation table and store it.\n. So I am setting my browser language to French and I don't have the 'fr' translation table. Instead of falling back to 'en', it shows me the translation ID. So there are two calls made. One for strings_en.json(this succeeds but remains unused) and one for strings_fr.json(this fails as expected).\n. @knalli Here is the plnkr URL using the template you mentioned http://plnkr.co/K4Qz3vbGHDcD8SexvUEL. If you change your browser to use language say 'French' as the first option and open the index.html in Plnkr, it shows the key instead of downloading the English translation table and using the values from that.\n. ",
    "Lukec1": "Many thanks!! I've lost many time to solve MY mistake :)\nSOLVED!\n. @tspaeth  many thanks, that solved my first problem. Now i have another question...\nIn URL i write some attributes and get it in controller with $location.hash(). How can i show/open hidden information in div? I'm trying with  changing model value(baseInfoOpen or codeInfoOpen in plnk case) to true, but it not open hidden div.\n. @tspaeth thanks anyway.\nIssue is solved.\n. ",
    "dolphinsd": "Adding global config solves the issue:\n// from http://stackoverflow.com/questions/16098430/angular-ie-caching-issue-for-http\napp.config(['$httpProvider', function ($httpProvider) {\n    //initialize get if not there\n    if (!$httpProvider.defaults.headers.get) {\n        $httpProvider.defaults.headers.get = {};\n    }\n    //disable IE ajax request caching\n    //$httpProvider.defaults.headers.get['If-Modified-Since'] = '0';\n    $httpProvider.defaults.headers.get['Cache-Control'] = 'no-cache';\n    $httpProvider.defaults.headers.get['Pragma'] = 'no-cache';\n}]);\n. ",
    "robjames": "Yep, not sure this should be closed. \nI need to do the same as @sharanmunyal (but for Chinese). I guess i will have to add them all as keys?\n. ",
    "liamkeaton": "@knalli I was getting undefined back when I was using the wrong interpolationId which broke interpolation and did not give me any useful errors.\n. ",
    "uberspeck": "Here's a plunkr of the issue I'm seeing. Anything using the directive translates, anything using the filter does not...\n. ",
    "goliney": "@tspaeth Sir, you saved my day. \n. ",
    "ruiaraujo": "Thanks\n. ",
    "llopv": "I have the same problem, and the workaround right now is to call the fallbackLanguage after define the language:\njs\n$translateProvider\n...\n.determinePreferredLanguage();\n.fallbackLanguage('en')\nIf you want to test the issue, I have a demo:\ngit clone -b tranlate-issue --depth=1 https://github.com/llopv/angular-seed/\n. ",
    "aykutyararbas": "Thanks\nAykut~\n\nOn Feb 11, 2015, at 11:31 PM, Thorsten notifications@github.com wrote:\nThe plnkr isn't working correctly at all.\nBut anyway - the options for the standard static files loader are currently only able to take an option input object as defined in https://github.com/angular-translate/angular-translate/blob/master/src/service/loader-static-files.js\n@param {object} options Options object, which gets prefix, suffix and key.\nand not an Array of Objects. So if you need a totally different approach - yes you have to write a custom loader / parser.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "janhmueller": "Actually, Aykut is correct. You should be able to pass a files array to the loader. Its both in the docs \"Alternatively, if you have multiple translation files in distinct locations, you may instead supply an array of files to the loader\" + code example and in the code, if you look a bit closer. Aykut's changes seem to fix it.\nBest, Jan\n. ",
    "jmaister": "Thanks for the answer!\nI'm going with the solution of creating a custom interpolator. It replaces {0}, {1}, ..., {n} with the values from the parameters.\nAbout the parameters, I went with the array mode. It gets quite difficult to read the code on the template as it needs to create a map inside the curly braces inside the string... but it works too.\n```\n more complicated \n{{'INFO' | translate:'{0:'+status.step+', 1:'+ status.total+'}'}}\n clearer (for me) \n{{'INFO' | translate:[status.step, status.total]}}\n```\n. ",
    "DOrlov77": "Yep - I failed on this issue too.\nThe problem is the translate directive tries to resolve a not existing node in IE.\nMy suggestion is to set the translate directive as terminal to fix the order of the things.\nWhile waiting the official fix my workaround is:\n``` javascript\nangular.module('pascalprecht.translate')\n    .config(function($provide) {\n        $provide.decorator('translateDirective', function($delegate) {\n            var directive = $delegate[0];\n            directive.terminal = true;\n        return $delegate;\n    });\n});\n\n```\n. Just try to debug in IE11.\n. try this plunker: http://plnkr.co/edit/IVKLzm0ejhyyBP421Rn8?p=preview\n\n. But having a few big enough projects I couldn't replace all these occurrences...\nCurrently I just use the trick with terminal only in one place and it seems to fit my needs.\nHave you better sugestion(s) ?\n. :) Ok\n. ",
    "valotas": "We have the issue with v2.6.0\n. ",
    "McShazy": "@DOrlov77  I haven't jumped into the Angular source code too much to see what exactly it's doing, however, just to have some references, this might be a related: https://connect.microsoft.com/IE/feedbackdetail/view/944330/invalid-argument-error-when-changing-nodevalue-of-a-text-node-removed-by-setting-innerhtml-on-an-ancestor#\n. ",
    "wawyed": "Any updates on this?\n. ",
    "brafkind": "Any updates on this?\n. ",
    "cfey": "It's still happening, I'm using angular translate 2.8 \n. ",
    "mahpour": "Confirmed not fixed in v2.9.2 with IE v11.0.9600.18205\n. It won't throw the exception in my application through happy path. Exception happens after view loaded and translate is rebinding... does that help?\n. I found the origin of problem in my code. I had an angular directive to render some shapes as svg and used translation inside a  tag in the svg tag which was causing the issue. The error was changed when I switched to translate attribute as oppose as angular filter though.\nNew exception message:\n\"Unable to get property 'match' of undefined or null reference [object Object]\" \nhttp://plnkr.co/edit/VSMwwartq3emEApmIMuH?p=preview\n. ",
    "abdheshkumar": "Oh.!! Thanks for quick reply.\n@tspaeth  I am not able to call resource in $translateProvider.determinePreferredLanguage function.\nhow can i inject $resource or $http services in that function.? \n. ",
    "mastix": "+1 - same issue here.\n. Ok, fixed it... sort of. Let me clarify:\nI've added it to the body-tag and added the translate-cloak class (opacity: 0). That works fine... The initlal page loads without flickering! But when I use ngRoute to display another part of the page (SinglePageApplication), then the new part (new controller) will NOT show the translated elements as the translateFinishedEvent (or whatever that event is called) is not being triggered (I guess).\nI've changed the translate-cloak CSS class to use \"background-color: red\", and now I can see that when the whole page loads... everythings is cool and cloaking works (no red parts on the page). As soon as I click on my link (that loads \"/#/\" (so actually the same page(!), but with ngRoute => SinglePageApplication)) the translate cloak class does not get removed (so every translated text stays red in this case!)! So I guess I have to pass the translateprovider to each controller so that SPA works, am I right?\nIn short: translate-cloak works, but as soon as I use ngRoute to replace a section of the page (with a new controller), the controller view's translate-cloak classes do not get removed.\nEdit: A $translate.refresh() in the controller seems to trigger that event. Is that the solution?\nRegards,\nSascha\n. ",
    "itonics-tbeauvais": "+1 to @mastix , couldn't have said it better myself.  Although.. it is in the initial page load load and not an ngRoute redirect.  \nThe problem I am seeing is that ngCloak isn't working at all.  I see the translation key flicker, then it loads the strings properly.  translate-cloak has no effect.\nIsn't the body not to be shown until the strings are loaded?  I know this will create an initial delay for the user but we can cache later.\n. You are right @tspaeth, I meant translate-cloak.\nI am not using a partial loader for the initial page being loaded (login) and that is where the issue is more apparent.\n. Running at the end of the Sprint, I will have to add one in a day or two.\n. Here here!  Any update?\n. Interesting.. thanks! :)\nLet me give that a shot.\n. ",
    "amamf": "translate-cloak doesn't work for me, since, in a way, it is implemented incorrectly, I'm wondering why it's not implemented by analogy with a native ng-cloak directive. The problem with the current implementation is that if some text needs to be translated and it resides e.g. in index.html, then in this case translation keys will not be hidden until angular is initialized and translate-cloak can come into play. In fact this directive should have been implemented as a native one, so that you can add the translate-cloak to target elements as a class rather than as an attribute. In this case it would have worked properly. At the moment, in order to make it work I need to add both the translate-cloak class and the translate-cloak attribute. The simplest solution to that issue would be just allow to declare the translate-cloak directive as a class. \n. ",
    "chachou29": "Thanks a lot for this quick answer, but please could you be more specific ?\n. ",
    "djmccormick": "Thanks, @DWand. I tried your first method and it works like a charm. I'd love to see support for this baked into angular-translate some day.\n. ",
    "sajit": "@DWand In my use case I dont know the URL of the XHR request needed to load up translations beforehand.  Hence I need to update the translations after I get the data back. Is there a way to do this? Other than have a global translationsProvider object and call the translations method of that? \n. ",
    "leolux": "@DWand Translations can be added with $translateProvider.translations(). Is it possible to overwrite the value of an existing translation outside the configuration phase (within a controller) as well?. Sorry, my fault! The issue was caused by a wrong namespace nesting within my language maps.\nIn general do you know some gist or extension for checking mismatching keys in a list of local maps? I think it would be helpful during development to avoid such kind of issues when dealing with larger data sets.. Thank you very much! I am going to implement a dedicated component because I think that components are more clean and flexible.. Because \"grunt wiredep\" is able to import the scripts into index.html automatically based on the \"main\" attribute of each high level dependendy and in the result the messageformatn.js file is missing and would have to be added manually each time.\nMaybe the concept of \"grunt wiredep\" reaches its limits. Alright, thanks! \nI am going to switch to webpack anyway.. ",
    "guyzk": "@leolux \nUsing the hacky suggestion provided by DWand it is possible.\nYou can do this by using angular $provide in your app's config method in following way:\n$provide.value('$translateProvider', $translateProvider);\nThen in your controller you can set the key using the regular provider function as follows:\n$translateProvider.translations(langKey, {key: value});\nThis worked out for me... . ",
    "canda": "Great, thanks.\nThe Docs should be updated then\n. ",
    "tobika": "ups, thank you @DWand, when I use the promise everything works fine.\nI was reading an old tutorial where $translate was a call without a promise. Just checked the official docs and everything is well explained there. Sorry for that.\nIn your code example I think you wanted to write then instead of when\nThanks for your fast responses everybody.\n. ",
    "antonsekatskii": "You can use ngBindHtml directive:\nhtml\n<div ng-bind-html=\"'TEST.NAMESPACE' | translate\"></div>\nWorks like a charm.\n. ",
    "FarSeeing": "But null and undefined values are supported?\n. OK, close this issue, I will fix this on our side by adding custom filter-wrapper.\n. ",
    "AntonTrapp": "Thanks for your answer, hope the material team will fix the issue. Btw. thanks for the good work and the support!\n. Not using material any more, but I think I wrote a directive and did the translation manually and constructed the HTML with the translated text instead. (works like hardcoded)\n. ",
    "thanuzz": "I've created a workaround by extending the Angular Material Placeholder directive. I've created an overrule js file in my project with the following code:\n```\n(function () {\n    'use strict'\nangular.module('app.core').config(['$provide', function ($provide) {\n    $provide.decorator('placeholderDirective', ['$delegate', '$translate', function ($delegate, $translate) {\n        var directive = $delegate[0];\n        var link = directive.link;\n\n        directive.compile = function () {\n            return function (scope, element, attr, inputContainer) {\n                link.apply(this, arguments);\n\n                $translate(attr.placeholder).then(function(translation) {\n                    inputContainer.element.find('label').text(translation);\n                });\n            };\n        };\n\n        return $delegate;\n    }]);\n}]);\n\n})(); \n```\nThe placeholder attribute's value should be the translation key:\n<input ng-model=\"myProfile.phone\" placeholder=\"myProfile.phoneNumber\" type=\"tel\"  />\nThe decorator injects the $translate service. In the extended link function the translate service is called with the placeholder value and the label text is changed with the translate result.\nmd-no-float or static labels\nIf you're using the 'md-no-float' attribute or static labels you should add the following line to the 'then' callback function :\nelement.attr(\"placeholder\", translation);\none-time binding vs dynamic binding\nThe above example is for one-time binding. If you also need the placeholder and labels to be dynamically changed when the language changes you could add a $translateChangeEnd listener and replace the compile return function with the following code:\n```\nreturn function (scope, element, attr, inputContainer) {\n    link.apply(this, arguments);\nsetTranslation();\n\n$rootScope.$on('$translateChangeEnd', function () {\n    setTranslation();\n});\n\nfunction setTranslation() {\n    $translate(attr.placeholder).then(function (translation) {\n        inputContainer.element.find('label').text(translation);\n    });\n}\n\n};\n```\nDon't forget to also inject the '$rootScope' in the decorator. Please take into mind each input field has his own event listener. Don't know yet if this will cause performance issues. I think there should be better solutions for this. \nHope this helps!\n. ",
    "tothtibor9182": "Use this code below instead of  directive:\nIt will work as same as  directive:\n<button class=\"md-button md-ink-ripple\" type=\"button\" ng-click=\"controller.doSth()\">\n       <div class=\"md-ripple-container\" style translate=\"yes\">CONTEXT</div>\n</button>. ",
    "tot-ra": "How is it different from https://github.com/angular-translate/angular-translate/blob/master/bower.json ?\n. When doing bower update, i get conflict of angular version. It might be my project ofcourse, but why do angular-translate-cekyy#1.2.0, angular-translate-loader-static-files-ceky#0.1.9 resolve to strict 1.2.0?\n\n. Ok, thanks, I've uninstalled angular-translate-cekyy and that solved the problem, sorry for your time\n. ",
    "MagdaN": "Yes, that was the problem, updated to the latest version and now it works! Thanks.\n. ",
    "kentcdodds": "Actually, it's available as of 1.3.14. But no, I'm not saying that angular-translate needs to consume angular in that way, I'm just saying that angular-translate should, itself, export the module name using UMD.\n. Yeah, sorry :-) \n. Sweet glory! :+1: Thanks!\n. Note, I suppose that I could use {{:: SOME_ID | translate }} and that would actually be better, but there are some cases where the interpolateParams will change, so I'd just like to avoid the $stateful filter :-) Thanks!\n. @knalli, I think I'm confused. Not sure what that commit has to do with my request.\nI should say that I decided to write my own filter for various reason, so I no longer really need this feature personally. I'll go ahead and close it. Feel free to implement if you want :-)\n. I know that for CommonJS it is messageformat, with AMD, I checked and it is not exposed with a name. So people would have to shim it themselves. You would essentially be deciding the shim for people, but that's better than not providing anything at all (like the current scenario). Thanks for being willing to fix this issue :-)\n. Thanks for your fast response and all of your work on this library :-)\n. Do you mind letting me know when this gets released so I know when I can pull out my workaround? Thanks!\n. :+1:\n. ",
    "NicolaiKilian": "I've found the solution:\nI had to update ngDialog to version 0.3.11\n. ",
    "cskiwi": "Hmm I looked at it, but didn't find any, even searched for 'event' on it, but no result. probably did something wrong. thx!\n. Where are these events getting called?\nI mean then is it on $translate? or $rootscope?\n. Ignore ^^, I need to read better! :/ \n. I have translations for nl-be and en-us.\nDoes it matter in witch order the configs are?\nin that case I'm trying to load them in the following order:\nfirst check cookie storage for setting,\nif no cookie, check devices lang\nelse fallback on en-us\nEDIT After looking in it some more, I found that some translations are done correctly.\nI think it's the one that are being done via <any translate=\"something\"></any> that are doing wonkey\nEDIT yep only those aren't in the fallback language \n. This here represents the issue:\nhttp://plnkr.co/edit/fewCSr?p=preview\nas you can see, the top ones aren't translated, while the bottom ones are correctly translated, but I would love to use the top translation method. this only happens when the preffered language is an invalid one\n. ",
    "pauljoey": "Hey guys. Just wanted to round off this issue with a related clarification. \nDo you consider the following usage/behaviour to be officially supported by angular-translate or more of a out-of-spec behaviour that could change in the future? \nhtml\n<div translate=\"\">Default Content</div>\nRetains contents and outputs \"Default Content\"\nWe have several instances where we allow specification of either a string identifier OR a raw string and use that syntax (<div translate=\"{{contentID}}\">{{content}}</div>) which currently does work as we like. We were wondering if you think that we could continue to rely on this behaviour.\n@tspaeth @knalli\n. Ah! So the answer is effectively \"no\" - this is not correct usage. It just appears to behave in the manner that we thought because there is no translation string defined for \"Default Content\".\nEffectively, \n<div translate=\"{{contentID}}\">{{content}}</div>\nIs the same as:\n<div translate=\"{{contentID ? contentID : content}}\"></div>\n. ",
    "gaui": "Yes thank you, angular-translate-storage-cookie.js was missing. Thank you.\n. ",
    "mgurluk": "hello,\nHEADLINE or {{HEADLINE}} or {{translate.HEADLINE}} Is it necessary to use the < h1 > tag that is not working outside?\n. ",
    "brandonhesse": "Is there any comments from developers on fixing this?\n. ",
    "wildwest-service": "Mr.tspaeth and Mr.knalli\nThank you for fix :)\nI'm impressed at quick responses!\n. ",
    "wahidnory": "Thanks for the reply and the time to review this :)\n. ",
    "cilginbok": "Overriding would be very usefull when defining multilanguaged description or keywords with json files.\nDoes somebody have trick for this?\n. ",
    "geemang2000": "I'm curious of this too. I have a JSON object namespace: appTypes with a list of Key / value pairs in it. \nIn my page I have:\n<td>{{item.settings.type | translate }}</td>\nI want to translate against the appTypes namespace. Is there a way to do this ?\n. ",
    "BrutalBrutus": "How did you find reliable linguists?\n. ",
    "gylippus": "@BrutalBrutus  For our initial huge set of translations we went with Andovar They were really great to work with and provided a project manager, local linguists who had worked with apps+keywords, and we also needed a lot of studio quality audio produced as well. \nFor updates with just a few phrases and even just our What's New sections, we have been using Unbabel who according to our users have been doing a great job. They only charge $0.03 per word and one of the coolest things is that they let you choose the tone of the translation, ie. formal, informal, friendly... and provide other notes to the linguists as well. \n. ",
    "JamesBoon": "I think it is good to resolve all promises, but a non-existing translation should return nothing - and not its key. Shouldn't this be changed to return undefined instead?\nNevertheless, if you need to have $translate(ids) fail if one key was not found, try this:\njavascript\n$q.all(ids.map(function(id) { return $translate(id); }))\n    .then(function(resultArray) { ... },\n        function() { \n            // failed\n        });\nIf you want to have all promises resolved, but want the missing translations to contain undefined, I have created two workarounds for this.\nIf an array of translations is enough, you could go with this solution:\n``` javascript\n$q.all(ids.map(createPromises))\n    .then(function(resultArray) { ... });\nfunction createPromises(id) {\n    // if the translate promise fails,\n    // it will now be resolved and return 'undefined' instead\n    return $translate(id).catch(angular.noop);\n}\n```\nIf you need the translation keys, try this one:\n``` javascript\n$q.all(ids.map(createPromises))\n    .then(resultToObject)\n    .then(function(resultObject) { ... });\nfunction resultToObject(results) {\n    var resultObject = {}, i;\n    for (i = 0; i < results.length; i++) {\n        resultObject[ids[i]] = results[i];\n    }\n    return resultObject;\n}\n```\n. @tspaeth, @knalli ok, didn't know about the custom error handler. That is quite a cool feature, ty :smile: \n. Hi @knalli,\nthank you for the info.\nI have created some tests for this and had some problems with this proposal. The PR #970 fixes this. Please have a look and tell me what you think.\n. Closed by #970 \n. cool, ty :smile: \n. I guess it is intended that $translate.use() will return a rejected promise, if a language file could not be loaded. It should not use the fallback language.\n@hjzheng This snippet should fix your current problem:\njavascript\n$scope.changeLanguage = function (langKey) {\n  $translate.use(langKey).catch(function () {\n    $translate.use($translate.fallbackLanguage());\n  });\n};\nPlease note, that the missing language file will never be re-requested, as there is a bug which does not clear the internal cache. PR #970 will fix this as soon as it is accepted :smirk:\n. ",
    "powerpixelsoft": "Hi guys,\nThe error handler simply refuses to work in my case. Would you assist me please?\nI have loaded the script as the last script from angular-translate.\nI have added $translateProvider.useMissingTranslationHandlerLog() in my app config.\nI have a non-existing key in one of my html templates in a filter.\nIt simply doesn't do anything, I see no activity in the console, no errors, nothing. The wrong key is just displayed as it is.\nPlease let me know where could I search for the problem..??\nThanks in advance!\n. Sorry, my bad! My warnings were disabled in the console. :D. Hi knalli,\nThank you for your answer. Would you additionally be so kind to give me a small use-case example for using $translate(..) and subscribing for an event? \nHere is a little code sample from my scenario.\nI use TypeScript:\n$onInit() : void {\nthis.$translate('KEY').then((result: string) => {\n              someVMVariable = result;\n           });\n}\nThis is how I am using it now. Why do I do it this way? Because my html files are templates and they have to stay as clean as possible.\nThanks in advance!. Thanks, I must have missed it accidentally!\nCheers!. ",
    "jgodi": "@9mm Could you share the custom loader by chance?\n. Turns out that it is not possible to do what I want to do without a CustomLoader or something. I just started using https://github.com/RobbinHabermehl/gulp-angular-translate and added it to a part of my build step. It is better anyway because the language will be loaded right away rather than async.\n. ",
    "zoltanradics": "Thanks. It works! That was exactly i am looking for.\n. ",
    "jcalfee": "We had calls in our code to try and change the preference via calls to $translate.use(\"...\") ..   I changed those call to $translate.preferredLanguage(\"...\") and got much better behaviour.  Maybe a small note under \"use\" that says call preferredLanguage to actually change the preferredLanguage.  Your suggested update sounds great too.  Thank you..\n. I fixed the title .. sorry about that ;)\n. ",
    "filidorwiese": "I understand, so there is no workaround to use the one-way binding syntax with the ng-translate filter if asynchronous loading is involved. Does using the translate directive offer improved performance for large-scale apps that use hundreds of translatable strings throughout the views? Or is the overhead of compiling hundreds of directives more then it could save?\n. Thanks for your replies :)\nTo me it's feels wrong to not use one-time bindings on the hundreds of strings that I know won't change after successful translation. I do admit that in our current code-base I haven't experience performance issues either, however I've noticed that the watch count is going upwards rapidly and I want to plan ahead to avoid having to re-factor the entire code base later on after we've added more and more translations. Especially since we have a strong mobile user base that we need to support.\nUsing the translate directive looks to be the answer since it only updates the translations when needed instead of during every digest loop, it definitely decreases the watchers count.\n. Thank you, it seems your patch did fix my issue.\n. ",
    "shaderzak": "@filidorwiese So I tried some ugly workaround. This works for me, but now AJAX for synchronous is depreciated and some years later it will not work. Hope it will help you somehow.\nangular.module('app.services', ['ngSanitize', 'pascalprecht.translate'])\n.config(['$translateProvider',  function($translateProvider) {\n        var language = 'en';\n        $translateProvider.preferredLanguage(language);\n        $translateProvider.fallbackLanguage(language);  \n        $.ajax({\n            dataType: \"json\",\n            url: \"languages/\" + language + \".json\",\n            data: {},\n            async: false,\n            success: function (data) {\n                $translateProvider.translations(language, data);\n            }\n        });\n    }\n]);\n. ",
    "mkoczorowski": "Why this is closed? is there a solution ?\n. ok thanks. I will look into this.\n. ",
    "Uxspy": "Thanks, that's Great!\n. ",
    "vanthiyathevan": "@DWand Thanks for the info.\n. ",
    "ptrussart": "Ok that was the issue actually :)\nI did not read the documentation well enough. \nThanks a lot for this very quick answer.\n. ",
    "satmaramani": "@tspaeth Thanks Man. ",
    "djindjic": "does your client app have angular-translate included and configured or you do this in directives lib?\n. Yes, something like that. I will try to change my app architecture.\nThanks!\n. ",
    "nilsi": "Thank you for the help. \nI suspect it's your first point that is the problem. Not sure how to solve it though.\nWill investigate this further and share my findings.\n. Hum, the problem is somehow that angular-translate is rendering to fast before text being loaded?\nIf I put a delay:\nsetTimeout(function () {\n    $('.text').text($translate.instant('START'));\n}, 1000);\nThen googlebot shows the rendered text. \nDoes this make sense? any idea how I can solve this?\n. ",
    "wa0x6e": "I'm hitting the same issue, pre-prender takes the page screenshot before all translations are loaded. \nPrerender does have take a event, signalling that the page is fully loaded. What is that \"event hinting\" you're talking about ?\nIt'll help if we can have an event each time a translation begins to load, and another when the translation is loaded, so we can have for example an array of started translation, and another of loaded translation, then compare the size of the two arrays to know if all translation were processed, then hinting pre-render.\n. Thanks, didn't knew about that event section\n. ",
    "Alphavader": "Was very frustrating for me too. Google Speed is rendering the full page - but cache und crawler not.\n. ",
    "siasjustin": "Nice, in the comments... it says 'I'm closing this, but feel free to comment.'  then right below it says ... \"Please do not comment on closed issue\" - if this issue is closed, where is the solution?\n. ",
    "genaromadrid": "Hey @knalli i think it is a problem with angular-translate, not only for SEO but for testing with a headless browser. I know you have a section about this (testing) in the documentation but it just doesn't solve it. If you try to load a page with angular-translate with phantomjs it doesn't load correctly. In some configurations (e.g. with ngRoute) it always loads the $urlRouterProvider.otherwise page.\nI been making some tests and the funny part is that if you remove $translateProvider.forceAsyncReload(true); it loads... of course that brings a lot of other problems.\nWhat do you think? Should i create an new issue for this?\nCheers\n. Indeed.. everybody that has build apps with angular knows that SEO is a shitmess. And usually you choose to build static pages either with services like prerender.io or manually with a headless browser. The problem with angular-translate is that it doesn't even let you. \nIf you use angular-translate with async loading, you wont be able to get in goolge, bing or any other search engine. Not even tools like pingdom will see your site correctly.\nIs not a big deal, we decided to take another approach but I just wanted to notice it here.\nP.S. @knalli I really like angular-translate, i'm not criticizing it, you guys have done a terrific job. I've used it in other projects that don't need SEO.. The general view is that phantonjs can render correctly any page of an app without the need of listening for ajax responses, it just works. When you add angular-translate, phantomjs (and apparently any other headless browser) always render the root_page, even when you try to render a different one.\nI tried to listen to $translateChangeEnd and $translateLoadingSuccess and then trigger the render but it doesn't work. My guess is that somehow, angular-translate is messing with the digest cycle, i didn't dig too much into it.\nFor the technical view of point, i think it would be better to create a demo app and test it from there. Maybe i'm missing something. \nI'll try to create the repo next week and we can figure out the problem from there.\nWhat do you think?. > That is not true, partly. If you have a very simple site with javascript generated content, this will work eventually by accident. But you have to wait in PhantomJS for ready events as well.\nOk, Let say you wait for 1 minute (way too much) for all ajax requests to be completed before rendering the page. This should eliminate the problem, but it doesn't, it still renders the wrong page. \nLook, maybe you're right and i'm simplifying the process, and since its very complex i think that its better to analyse it in a demo app. . Ok, i'll create a new issue and start the POC repo when i get the chance.\nCheers. ",
    "willi1s": "@knalli In fact even with the current preferred language set to en_GB as request to refetch is still made.\nI have created a plnkr of the issue\nI followed the call stack back into angular-translate and the code in question is below.\nNote that if a fallback language is specified and we have a loaderFactory then always go and load the fallback language, maybe a simple check here to see if this language is pre-loaded?\n```\n      if ($loaderFactory) {\n    // If at least one async loader is defined and there are no\n    // (default) translations available we should try to load them.\n    if (angular.equals($translationTable, {})) {\n      $translate.use($translate.use());\n    }\n\n    // Also, if there are any fallback language registered, we start\n    // loading them asynchronously as soon as we can.\n    if ($fallbackLanguage && $fallbackLanguage.length) {\n      var processAsyncResult = function (translation) {\n        translations(translation.key, translation.table);\n        $rootScope.$emit('$translateChangeEnd', { language: translation.key });\n        return translation;\n      };\n      for (var i = 0, len = $fallbackLanguage.length; i < len; i++) {\n        langPromises[$fallbackLanguage[i]] = loadAsync($fallbackLanguage[i]).then(processAsyncResult);\n      }\n    }\n  }\n\n  return $translate;\n}\n\n```\nI have worked around the issue for now by creating an empty en_GB.json file, but perhaps a fix to angular-translate would be better.\n. ",
    "hjzheng": "Thanks @JamesBoon \n. ",
    "dimitriscsd": "Thank you for the immediate response.\nHere is where I found the reference for that plunker:\nhttps://github.com/angular-translate/angular-translate/wiki/Asynchronous-loading\nOn Fri, Mar 27, 2015 at 3:40 PM, Jan Philipp notifications@github.com\nwrote:\n\nUpdated plunker: http://plnkr.co/edit/RJugnMpptbHCnPjDqVgm?p=preview\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/983#issuecomment-86942933\n.\n. \n",
    "donataswix": "@knalli I read that, but it's confusing because I don't understand how bower.json in https://github.com/angular-translate/bower-angular-translate-interpolation-messageformat gets generated? There is no messageformat dependency recorded in bower.json of angular-translate repo.\n. Pardon my lack of knowledge, but as I understand there's nothing I can do to help right now?\n. ",
    "darrylkuhn": "I wanted this too so I took a stab at it. You can see it here https://github.com/angular-translate/angular-translate/compare/master...aristamd:master and for those that just want to bring it into their project a complied / minified version is available here: https://github.com/aristamd/bower-angular-translate. \nNot sure all the implications of these changes since I'm new to the project. I changed a few of the test cases since the expected behavior had changed but otherwise all tests pass. Would love to merge this in to origin if suitable. Cheers!\n. Anything I can do to support the review process?\n. ",
    "tiblu": "Looks good to me! (http://plnkr.co/edit/fTDtCfq6c95J1H1EEp1m?p=preview)\nThanks for all the work @darrylkuhn @knalli \n. It's there in the bower, but not in the source - https://github.com/angular-translate/angular-translate/blob/master/src/service/handler-log.js.\n- How does it get added to the Bower version?\n- What's the consideration not having it straight up in the source code?\n. Why in the build process, why not code it like you mean it? What's the benefit? Just out of curiosity.\n. OK, cool. Thanks for the insight and maintaining this great project! \n. ",
    "gsaini": "Can you please elaborate which you suggested above or any eaxmple?\n& I suggest, It would be great if you can provide $translate.refreshAll() method which can be use to clear all translate tables.\n. @knalli @DWand - I am getting the below issue after using the angular-translate.js (build of canary branch from dist folder).\nTypeError: preferred.split is not a function\n    at negotiateLocale (angular-translate.js?dc=1430365756901:183)\n    at Function.$get.$translate.use (angular-translate.js?dc=1430365756901:1563)\n    at Object.app.config.getTranslateKeys (states.js?dc=1430365756901:45)\n    at Object.invoke (angular.js?dc=1430365756901:4169)\n    at proceed (angular-ui-router.js?dc=1430365756901:411)\n    at invoke (angular-ui-router.js?dc=1430365756901:407)\n    at study (angular-ui-router.js?dc=1430365756901:386)\n    at $Resolve.resolve (angular-ui-router.js?dc=1430365756901:490)\n    at resolveState (angular-ui-router.js?dc=1430365756901:2889)\n    at Object.transitionTo (angular-ui-router.js?dc=1430365756901:2601)\n. ",
    "luaks": "I'm sorry, I don't even recognize autoformatting changes anymore.\nI'll do that right away.\n. Wrong branch\n. AFAIK ngAnnotate only takes care of inlined functions, though I am not sure about that.\nOn the other hand, although there is ngAnnotate in the toolchain, there still was the array definition of the service, which made ngAnnotate rather unnecessary ;-)\nI could have also used the array syntax with the variables, but it looks a lot cleaner this way.\n. whoops wrong button\n. Ah I've just checked it and ngAnnotate does follow the references, so defining $inject by hand is not a necessity, shall I remove the $inject definitions?\n. @knalli I've tested it in both firefox and chrome using console.trace() and it worked in both of them.\n. I have just checked it and of course it works in the non minified code (wrong way of thinking from my side).\nWhen working with the minified code there were quite a few issues I've had.\nFirst of all, according to MDN this ia currently a firefox only feature, so it did not work in chrome.\nSecond, there were some very weird issues with firefox. Although the displayName was used, when printing a function with console.log, it was used in neither the stacktrace of an error nor console.trace.\nI'll have another look into this later, because it seems to work, but not all the way.\n. awesomr, thanks for the merge\n. Thanks a lot!\n. ",
    "marklagendijk": "Is it possible to configure it in such way that it uses $sanitize instead of doing .text? I do want to be able to use HTML in my labels, but don't want to introduce this security issue.\nAlso I don't agree with the current strategy of: let's keep this serious security issue for backwards compatibility. I would rather see a major version bump with this listed as a breaking change, and maybe the possibility to turn it off. I'm afraid that otherwise many people will overlook this in the documentation, like I did.\n. Oh, ok. So you are open to fixing this properly, which means introducing a breaking change? I could see if I can find the time to implement this.\nActually, I looked in the docs and it turns out that $sanitize has been available since 1.0. Using it has a drawback, though. Since ngSanitize is released as a separate module, people do have to include it manually. However, I do think this is worth is, because I agree with you that default security should be as high as possible.\nI hope you didn't take my comments as critique of the highly appreciated work you guys are doing on this module. I only meant to provide some constructive feedback.\nBtw, I quickly looked through the code. It looks like that when you specify 'escape' only the values are sanitized, and not the translation texts themselves. I think it would be best to also sanitize the texts.\n. Thanks! I will look into this issue and make a proposal about how we should fix it. Hopefully I will also find the time to actually implement it, as soon as we agree on how it should be done.\n. I am willing to implement this. My proposal would be to do it as follows:\n1. Refactor the sanitazation strategies in $translateDefaultInterpolation so they are usable for both sanitizing the values and sanitizing the whole result.\n2. Implement sanitizing the whole result.\n3. Use the $sanitize strategy as the default for the whole result. And either the escape strategy or nothing as the value sanitizing strategy. It might make sense to use no value sanitizing by default, because the whole result will be sanitized by $sanitize. This way you would have a both secure and powerful default.\n4. Allow setting both strategies. I would say that besides strings which refer to a known strategy, we should also allow to directly pass a (custom) sanitizing function. \n@knalli what do you think? Does this sound like a good approach?\n. The idea I had was to have two kind of strategies:\n1. sanitizeValueStrategy\n2. sanitizeTranslationStrategy\nThe idea of the sanitizeTranslationStrategy is that it would be applied on the whole result, after interpolation.\nWas your idea to use one strategy both? This would be possible. We could just call the same sanitize function (belonging to the currently selected strategy) in both cases. This function should then check whether it got passed an object (-> params) or an string (-> whole translation), and act accordingly.\nThis would also make it a non-breaking change, so it could already be released as part of 2.x. We could just add several strategies:\n1. escaped: keep this exactly the same, for backwards compatability. Warn in the docs against using it. The name should be deprecated.\n2. escapedParameters: new name for the old escaped strategy. \n3. sanitizedTranslation: sanitizes the whole result, does nothing with the parameters.\n4. sanitizedTranslationEscapedParameters: sanitizes the whole result, and escapes the parameters (useful if the parameters come from user input, and you want to forbid HTML).\n5. escapedTranslation: escapes the whole result, does nothing with the parameters (because they are already escaped as part of the whole result).\nIn 3.0 we would change to either sanitizedTranslation or sanitizedTranslationEscapedParameters as the default strategy.\n@knalli let me know what you think. If you have suggestions for better names they are also welcome.\nEdit: by injecting $sanitize from inside the strategy function, it would not break any applications which do not reference ngSanitize.\nEdit2: what branch should I create the pull request against? Canary?\n. Your examples are correct. Only the sentence in stragey 1. escaped is incorrect: \"Everything will be escaped. Actually the safest one, but obviously not always what you want.\". This is true of Strategy: 5. escapedTranslation, but not of escapedParameters.\nI will work out the other two strategies:\nTemplates\n\nThis is an example with a <b>malicious</b> translation string <span onclick=\"alert('XSS')\">xss attack</span>!\nThis is an example of a <b>malicious</b> param {{ param }}\n\nStragey 3. sanitizedTranslation\nThis strategy calls $sanitize on the whole translation, after interpolation.\n1. This is an example with a <b>malicious</b> translation string <span onclick=\"alert('XSS')\">xss attack</span> => This is an example with a <b>malicious</b> translation string <span>xss attack</span>\n2. This is an example of a <b>malicious</b> param <span onclick=\"alert('XSS')\">xss attack</span>! =>This is an example of a <b>malicious</b> param <span>xss attack</span>!\nStragey 4. sanitizedTranslationEscapedParameters\nThis strategy escapes parameters using the escapedParameters strategy. The strategy also calls $sanitize on the whole translation, after interpolation. \n1. This is an example with a <b>malicious</b> translation string <span onclick=\"alert('XSS')\">xss attack</span> => This is an example with a <b>malicious</b> translation string <span>xss attack</span>\n2. This is an example of a <b>malicious</b> param <span onclick=\"alert('XSS')\">xss attack</span>! =>This is an example of a <b>malicious</b> param &lt;span onclick=\"alert('XSS')\"&gt;xss attack&lt;/span&gt;!\n. Sounds good. Please see this gist. As a proposed implementation. \nThe only problem with your proposed naming is that 'escaped' now has a new meaning. In the current version of angular-translate it means 'escapedParameters'. Do you think it is acceptable to change that without bumping the major version?\nEdit: after some refactoring iterations the code in the proposal is now quite clean. Please let me know what you think.\n. I think we could solve the backwards compatibility issue by using slightly different names:\n- sanitize\n- escape\n- escapeParameters\n- sanitizeParameters\n- sanitize-escapeParameters\nThis way we could do:\njavascript\n// Backwards compatibility for deprecated 'escaped'\nsanitizeValueStrategies.escaped = sanitizeValueStrategies.escapeParameters;\nI must say that I slightly prefer this naming :).\n. @knalli I was planning to refactor the strategies to its own $translateSanitization service (one service for all strategies). This service would supply the following functionality:\n1. Configuring the current sanitation strategy. The interpolation services should not be responsible for this.\n2. Providing the different sanitation strategies.\n3. Allowing adding sanitation strategies via a provider.\n4. Supplying a sanitize function, which would be used by the different interpolation services.\nDo you agree with this approach?\nAs for $sanitize, it has been available since Angular 1.x, but always as part of the separate ngSanitize module. This means that you have to add a reference to add a script reference to angular-sanitize.js and a dependency on the ngSanitize module. \nBy using the $injector I made sure that it only fails if you actually are trying to use a sanitation strategy which uses $sanitize. I think that in these cases you should get a fatal error, because the code is unable to do what you requested. We should, however, add a more friendly error message, explaining how it can be fixed (either by adding ngSanitize, or by switching to another sanitation strategy).\n. @knalli can you please review this commit?\nI took the following approach:\n- Created a $translateSanitization provider which contains all the strategies and maintains the currently selected strategy.\n- Refactored the interpolators to use $translateSanitization\n- Refactored $translate to use the $translateSanitizationProvider to set the strategy.\nI think this approach is quite powerfull:\n1. In the most common use case you just select the strategy you want via $translate.useSanitizeValueStrategy, just as it was before.\n2. If you want to use a custom strategy you can just pass the strategy function to $translate.useSanitizeValueStrategy.\n3. If you want even more control you can inject the $translateSanitizationProvider to change the strategies via $translateSanitizationProvider.strategies.\nLet me know what you think. If you agree with this approach I will finish it, and make tests etc.\n. Ok, thanks! I added support for specifying a chain of strategies in this commit.\n. @knalli see pull request #1014.\n. I adjusted the formatting settings in WebStorm and reformatted the code. Apart from that I fixed a small bug, and improved the sanitization tests in the interpolators.\n. @knalli you're welcome. Thanks for the way you helped with designing and reviewing this. I think we made an huge improvement to the security of angular-translate.\n. @knalli question: when do you expect to be the new version (2.7.0?), with this feature in it to be released?\n. @tsubik I think that the preceding . should not be needed. So:\nhtml\n<div translate-namespace=\"client\">\n  <div translate-namespace=\"posts\">\n    <h1 translate>title</h1>\n  </div>\n</div>\n. @tsubik not necessarily. I would expect it to look in the current specified namespace, and if not found, go up the namespace tree to look if it is specified on that level.\njavascript\nvar translations = {\n  buttons: {\n    ok: 'OK!'\n  }\n  myApp: {\n    myForm: {\n      buttons: {\n        goAway: 'Go away!!'\n      }\n    }\n  }\n}\nhtml\n<div translate-namespace=\"myApp.myForm\">\n  <button translate='buttons.goAway'></button>\n  <button translate='buttons.ok'></button>\n</div>\n. ",
    "Heshyo": "I had an issue with the sanitization as I was passing the whole $scope as parameter (the string to translate was dynamic and could contain different variables, so it felt easier/cleaner to just pass the scope than creating a brand new object with only the needed properties). When trying to sanitize the whole $scope, I end up with a stackoverflow exception.\nI guess it means we're trying to sanitize everything from the passed object, while maybe we could try to sanitize only the necessary properties, ie the ones that are actually used by the current string to translate.\n. ",
    "fracz": "I would leave the filter.$stateful configuration and conditional for applications that do not need to change the language on the fly feature. Stateful filters are generally not recommended as they are evaluated on every digest cycle. Changing the language with \"normal\" link and page refresh seems to be a better idea. User generally does not change the language very often...\n. ",
    "RichardBradley": "Consider changing the error info when the Promise returned by $translate fails. See discussion on #1516. \nUsing the translation key as the error info is a) unconventional, as this param is usually information about the error, b) redundant, as the caller will already have the translation key to hand, and c) ambiguous as it prevents any other error info being passed here.\n. > That's not promises are working and used to be used. A promise have at least two callbacks: A success and a failure.\nWell, you say that, but if you look in the docs there are 9 calls to \"$translate\" which use a \"then\" operator, 8 of which pass only one callback.\nOnly the example in \"Migration Guide\" uses an error callback.\nI'll create a doc PR\n. Also, it is strange to reject the promise with the translation id, rather than the error reason. The docs for Promise say:\n\nA pending promise can become either fulfilled with a value, or rejected with a reason (error)\n\nThe promise ought to be rejected with a failure reason like Error(\"No matching translation key found\"), not with the translation id. The caller will already have the translation key to hand.\nSo this code from the \"Migration Guide\":\nvar stringFromService;\n$translate('translationId').then(function(translation) {\n  stringFromService = translation;\n}, function(translationId){\n  // Unable to translate given translationId\n  stringFromService = translationId;\n});\nought to look more like:\nvar stringFromService;\nvar translationId = \"MY_TEXT\";\n$translate(translationId).then(function(translation) {\n  stringFromService = translation;\n}, function(error) {\n  // Unable to translate given translationId; fall back to displaying the ID to the user:\n  stringFromService = translationId;\n});\n. > Perhaps with an addition marker that error is the requested translationId (key).\nPlease could you clarify what you mean here? I don't quite follow, sorry.\nMaybe comment on which line you'd like me to change in the \"files changed\" view?\n. I have made the same changes to the code in all the translated docs and updated this PR.\nI have not been able to copy across the wording changes to the translations, as I don't speak those languages. :-(\n. > It's actually not an error, but a translationId.\nWell, it will be the translationId in the case where the translation Promise has failed due to a key-not-found.\nIf the Promise has failed for any other reason, it will be something else.\nAs discussed on #1516, I think it's confusing and potentially ambiguous to use the Promise \"error\" value to return the translation Id here.\nI think user code should either look like 1:\n$translate(\"MY_TEXT\").then(function(translation) {\n  stringFromService = translation;\n}, function(error) {\n  stringFromService = error;\n});\nor 2:\nvar stringFromService;\nvar translationId = \"MY_TEXT\";\n$translate(translationId).then(function(translation) {\n  stringFromService = translation;\n}, function(error) {\n  // Unable to translate given translationId; fall back to displaying the ID to the user:\n  stringFromService = translationId;\n});\nI have used (1) in the docs in the attached PR, as (2) is quite verbose.\nOK to leave, or do you strongly prefer 3:\n$translate(\"MY_TEXT\").then(function(translation) {\n  stringFromService = translation;\n}, function(translationId) {\n  stringFromService = translationId;\n});\n?\n. Thanks, looks good to me\n. ",
    "lverre": "That's because fiddle doesn't allow me to use a newer version. But I have the issue on my website as well and it uses angular 1.3.14.\n. Thanks!\n. ",
    "bl4de": "@knalli :\nThank you for such quick response, I've just found this in doc (I don't know how I missed it earlier, shame on me :P )\njavascript\n$translate('HEADLINE').then(function (headline) {\n    $scope.headline = headline;\n  });\nbut I'd rather do something like this:\njavascript\n  message: $translate.translate('ERROR')\nBut I see as $translate service returns a promise - it's the only option right now, am I right?\n. @knalli \n\nno live changes of the translation at this point\n\nUnfortunately I have to handle more than one language and have to provide language switch option.\n. @knalli \nOf course they won't :) Just looking as simple way to do this as possible :) And it seems this migth be the solution I've been looking for.\n@DWand \nThis is also good solution, however I'm trying to do this directly in controller as I do not want to create/modify anything but this one single line of code (where I should provide translated message).\nThanks guys for your help.\n. @knalli \nYep, solution with $translate('KEY').then( /* show notify stuff */) works perfect.\nOnce again thank you.\n. ",
    "dmitryevseev": "@DWand Oh, yes, thank you. It's the exact duplicate. I'll close mine\n. I would try to introduce a custom error handler for the test which make it to fail if no translation found:\nhttps://angular-translate.github.io/docs/#/guide/17_custom-error-handler. Thank you for the response @knalli .\nYou're right it can be reproduced with the custom loader too, here is a demo (with timeout of 1s for both languages)\nBut I'm also seeing de_DE showing untraslated content even with timeout time set to 0 for both languages.\nIt's though working in the case when first language takes longer to load than second (2s vs 1s)\nHope that helps. @samguergen I'm sure I used it inside the service, could you share some code?\nPlunker with the issue would be perfect. ",
    "LeleDev": "Thank you\n. ",
    "DmitryGonchar": "Should I reopen it to master branch instead of canary?\n. @knalli Well, the docs say\n\nyou could provide at least one language with your app without having to load it asynchronously. If your app then uses this provided language as default language, using $translateProvider.preferredLanguage(), you won't have this FOUC, \n\nand then the code (in the docs) goes\n$translateProvider.translations('en', {\nand\n$translateProvider.preferredLanguage('de');\nwhere languages are different. In your plunker they are the same (both are 'default'). Am I missing something?\n. Exactly. But this is what code in the docs does. preferred language and static language are different ('en' and 'de'). Therefore, I assumed there was a mistake in this code\n. No problem :)\n. ",
    "Clempops": "I fixed the problem, it wasn't linked with angular-translate\n. ",
    "pedrocatre": "Ok thank you for the detailed explanation!\nI guess for now the best choice is to have the translations in the code. I cannot afford two way data binding in the translations in one of the views that can have more than 100 form fields being displayed with several bindings :/ or I can fork and make the change, seems easy enough.\n\"treating undefined as being no specific result\": would it make sense to make this behaviour configurable (or just change the default behaviour) given how one time binding works?\n. I did not mean 100 bindings, I know that would be fine. I said more than 100 elements each with their own bindings. It is fine on my machine but on a slower machine running ie9 it has an impact.\nThanks again. For now I will just import the language files, in the short term it makes it even faster to load because it does not have to make an extra request for a file, and I only have two languages. If this changes down the line I'll probably make a PR.\n. ",
    "senthanal": "So, in the custom loader, deferred.resolve( mergedData ); where mergedData is combining responses of custom loader's and static file loader's?\n. I've done that. I merged both static files response and also custom loader's response. I see also angular translate's internal $translationTable[key] is updated. \nHere, I've a different issue.\nThe translations implemented via directive is showing translation ids instead of values but translations implemented via filter are working properly. Further strange stuff, this happens after every hard reload. Just normal reload does works properly for both directive and filter based translations.\nAnything, am doing wrong here?\nThanks :)\n. Further investigation.\nif (!promiseToWaitFor) {\n          // no promise to wait for? okay. Then there's no loader registered\n          // nor is a one pending for language that comes from storage.\n          // We can just translate.\n          determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText).then(deferred.resolve, deferred.reject);\n        } else {\n          promiseToWaitFor.then(function () {\n            determineTranslation(translationId, interpolateParams, interpolationId, defaultTranslationText).then(deferred.resolve, deferred.reject);\n          }, deferred.reject);\n        }\ndetermineTranslation from this code is not invoked for every hard reload. The normal reload(F5) calls determineTranslation from this code and translations via directive is working. I now, am writting wierd. Its just my desparation resolve this issue. Anyways, thanks for the fast responses.\n. Anyways thanks. do you remember that issue? may be I find some useful information there....\n. @roy650 Hi,\nAs mentioned before by @DWand, we can't use both loaders(static and custom) approach. So, in my case, I removed static loaders and used only custom loaders. Follows just an idea on how to merge translations from different resources.\nvar deferred = $q.defer(); // to work with promises\n....\nvar languageLoaderPromises = []; // Collects translation loaders promises\n....\nlanguageLoaderPromises.push($http.get(...)); // Loads translations from a resource\n.....\nlanguageLoaderPromises.push($http.get(...)); // Loads translations from another resource\n....\n$q.all(languageLoaderPromises).then(function(response) { // Merge responses from both resources\n      var data = {};\n      for(var i in response){\n           angular.extend(data, angular.isArray(response[i].data) ? response[i].data[0] : response[i].data);\n      }\n      deferred.resolve(data);\n});\nreturn deferred.promise;\nIts just an idea. There could be other solutions. This worked for me :)\nHope it helps! happy coding!!\n. ",
    "roy650": "@DWand @senthanal hi,\nCan you please elaborate on how to get the response from the static loader in order to merge it inside the custom loader?\nThanks!\n. @senthanal looks great!\nFor now, we'll probably use something like that, so - Thanks!\nStill, for future reference... @DWand mentioned that it would be possible to merge with the result from the static loader... And it would be great if he gave us a clue on how to achieve that.\nOn a more general note - my use case for the custom loader is for an ability to load the translations from a web resource and to be able to fall back to an alternative resource, should a web connection not be available (it's a hybrid-mobile-app, so the alternative is a local resource) - so if you have any other ideas for accomplishing that, I'd appreciate it.\nThanks anyway for the reply!!\n. ",
    "tsubik": "Good point. I had this code in translate directive at first and now I don't remember why I've moved it into service. I will move this functionality into updateTranslation function in directive.\n. @marklagendijk Then you won't have any possibility to use translation key from out of the namespace.\n. I didn't want to overcomplicate this. Fallbacks are great but only on language level. I think that looking up the tree to find key would bring too much confusion to every project. It would be more difficult to locate which translateKey is used. If I had some defaults translations in project I would rather use @:shortcut.\nvar translations = {\n  buttons: {\n    ok: 'OK!'\n  },\n  myApp: {\n    myForm: {\n      buttons: {\n        ok: '@:buttons.ok',\n        goAway: 'Go away!!'\n      }\n    }\n  }\n}\nAnd as @DWand has mentioned dot is used to notice that the key is located in some namespace. About the filter, We can work around this by using simple filter for prefixing key like so {{ '.buttons.ok' | prepend:translateNamespace | translate }}.\n. Hmm I am not sure. Let's say we have some complicated form which we want to reuse in many parts/modules in our application. We can have translations as follows:\nvar translations = {\n  moduleA: {\n  },\n  moduleB: {\n  },\n  shared: {\n    form: {\n    }\n  }\n}\nThen you set the namespace in your component to shared.form and if your modules have also set a namespaces then including this component in moduleA or B will not work, translations will be searched for in namespace moduleA.shared.form instead of in shared.form. I believe that in most cases nesting won't be needed and overwriting current namespace is more important. My proposition is to leave dots if you want to append to current namespace and without dot if you want overwrite. This approach will be more consistent. Anyway I need to change code to look current namespace also in parent scopes, right now it is not working with isolated scopes.\n. It should work with isolated scopes now. What do you mean by parallel scopes?\n. ",
    "davmelmeggeo": "Hm, good points.\nExposing the keys loaded with a given part would be useful. If not in a seperate function, then maybe another option would be that the keys could be added as a second (optional) parameter on the $translatePartialLoaderStructureChanged event?\nThen the following could be used:\n$rootScope.$on('$translatePartialLoaderStructureChanged', function (name, keys) {\n            $translate.refresh().then(function () {\n                $translate(keys).then(function (translations) {\n                    //Assign scope translations\n                    $scope.translations = translations;\n                });\n            });\n        });\nThis also gives the user the option of saving those name - keys relations locally so they can be accessed later.\n. @DWand, @knalli - firstly thanks for your help. \nOn the event front, I see now that its impossible, I hadn't checked, sorry. \nSo it looks like a function to fetch the keys for a given part and language would be the best way to go. The function already seems to be in place to check if a part is loaded (isPartLoaded) so the user can check if the part is loaded before trying this 'getKeys' function - so if the part is missing, undefined, or not yet loaded the function could just return an error? \nA function like this is a start:\nservice.getKeys = function (name, lang) {\n                if (!isStringValid(lang)) {\n                    throw new TypeError('Couldn\\'t set part.`lang` parameter has to be a string!');\n                }\n                if (!isStringValid(part)) {\n                    throw new TypeError('Couldn\\'t set part.`part` parameter has to be a string!');\n                }\n                if (service.isPartLoaded(name, lang)) {\n                    return Object.keys(parts[name].tables[lang]);\n                } else {\n                    throw new ReferenceError('No part is loaded for part: ' + name + ' and language: ' + lang);\n                }\n            };\nBut this does not handle nested keys. So Object.keys(parts[name].tables[lang]); would need to be replaced with a function that fetches all the keys in nested object as dot notation namespaces. (if i read the docs correctly)\nIf you guys think this approach is ok then I can write a function to do that and then you can check it over. \n. OK, lets start back at the original problem and see if we can find the best solution. I only started using this library recently so am probably not in the best position to suggest the solution.\nThe problem:\nServer side we split the translation list up into 'parts', each containing the translations necassary for a particular area of the software front end. This is useful because 'parts' can be loaded only when needed.\nAt present, we need to double up the list, all the keys need to be listed backend for the translation definitions AND then also frontend in order to fetch them with $translate(keys).\nThis requirement to explicitly list the keys is not good - one could argue that all translations are somewhere front-end anyway becuase that is where they are used, but all the different keys are used/encountered asyncronously (especially when loading translations dynamically from data). \nBecause of this an option to load and translate ALL translations for a given part when loading an area of the software would be very useful. \nPossible solutions:\n1) Have access to the keys loaded in a given part through the partial loader.\n--- discussed above.\n2) Have a $translate function that can fetch translations for a part instead of an explicit list of keys\n--- obvious point here is that the $translate module shouldn't know anything about 'parts'\n3) I can't think of any more - but maybe you have some suggestions for alternative solutions?\n. Yep, maybe I am missing something and there is an easy solution.\nFirst situation:\nSome translations are bound directly to the template via a scope variable. So\nThe template contains things like this:\n ng-bind=\"translations.translation_key\"\nAnd the scope needs things like this:\n$scope.translations.translation_key\nAnd we load translations into the scope like this:\n$translatePartialLoader.addPart(tcPart); //Adds all translations for this section of the software\n            $translate.refresh().then(function () {\n                $translate(laTranslationKeys).then(function (translations) {\n                    //Assign all translations used in this section to the scope\n                    toScope.translations = translations;\n                });\n            });\nlaTranslations currently needs to be defined, it can't be built from detecting the use of the translations in the template because the template is loaded asynchronously and so we need to list all the translations used in the template explicitly before calling $translate.\nSecond situation:\nSome data is loaded later into the controller after initialization, maybe due to user interaction like a search and translations are built from the returned data\ne.g.\n1) We fetch data from the server which contains a field 'name'\n2) We want these 'name's to be displayed differently depending on country\n3) So you generate translation keys from this data ('translation_key_name_1', 'translation_key_name_2' ect...)\n4) These translation keys are all defined backend and so are added with the part in the $translatePartialLoader.addPart(tcPart); \n5) Problem - these translation are not available front end until after we call $translate on them. \nOn load there is no way of knowing that these will be used later so they can't be loaded by any method of 'first detect what translation keys are used then call $translate for these keys'. \nIt seems to me that the only solution to these problems would be if I could call $translate on ALL the translation keys in the part. Then they are all available to use. \nThis would also be a tidy solution as it allows for a standardized loading of all traslations in a given section at the start of loading that section.\nHave I missed something that means these 2 things wouldn't require a definitive list of the translation keys?\n. OK, I see now. It seems I had not understood some things as well as I should have before opening an issue.  \nSorry for wasting your time. But thank you very much for your help. \n. ",
    "BendaCoding": "right.. dont know what drove me there :-)\n. ",
    "Davide95": "When I type \"ls angular-translate\" the output is:\npowershell\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----       02/05/2015     14:05                demo\nd-----       02/05/2015     14:05                docs\nd-----       02/05/2015     14:05                identity\nd-----       02/05/2015     14:05                src\nd-----       02/05/2015     14:05                test\nd-----       02/05/2015     14:05                test_scopes\n-a----       02/05/2015     14:05           1065 .bower.json\n-a----       02/05/2015     14:05             38 .bowerrc\n-a----       02/05/2015     14:05            147 .editorconfig\n-a----       02/05/2015     14:05            309 .gitignore\n-a----       02/05/2015     14:05            351 .jshintrc\n-a----       02/05/2015     14:05            265 .npmignore\n-a----       02/05/2015     14:05            487 .travis.yml\n-a----       02/05/2015     14:05            764 bower.json\n-a----       02/05/2015     14:05          23880 CHANGELOG.md\n-a----       02/05/2015     14:05           4467 CONTRIBUTING.md\n-a----       02/05/2015     14:05            979 generate_site.sh\n-a----       02/05/2015     14:05          17881 Gruntfile.js\n-a----       02/05/2015     14:05           1075 karma.midway.conf.js\n-a----       02/05/2015     14:05           1398 karma.unit.conf.js\n-a----       02/05/2015     14:05           1234 karma.util.conf.js\n-a----       02/05/2015     14:05           1094 LICENSE\n-a----       02/05/2015     14:05           1725 package.json\n-a----       02/05/2015     14:05          68336 presentation.png\n-a----       02/05/2015     14:05         257179 presentation2.png\n-a----       02/05/2015     14:05           3851 README.md\n-a----       02/05/2015     14:05            613 server.js\n-a----       02/05/2015     14:05            293 update-docs\nand I don't know why there aren't angular-translate.js and angular-translate.min.js.\nI think that something is wrong\n(Sorry for my bad English but I'm not native)\n. I've cleaned up my cache typing \"bower cache clean\" and I've tried to reinstall it, but it doesn't work. \nSorry to bother you\n. ",
    "Discmt": "Is preloading a language the only way to remedy the issue? I was of the opinion there might be a way to just output blank strings until the translations complete. \n. ",
    "nwhittaker": "Why not treat translate-attr-... as a standalone directive -- so it doesn't get the translate directive's side-effect of inserting the translation as a text node?\n. Maybe calling the directive something like translate-attrs would be a little clearer?\nhtml\n<input translate-attrs translate-attr-title=\"titleTranslationId\" translate-attr-placeholder=\"placeholderTranslationId\">\n. @MateuLlull, I found passing the values as an object instead of a string got me access to the outer scope:\njavascript\n<input type=\"text\" ng-model=\"user.rating\" placeholder=\"{{ 'RATING_PLACEHOLDER' | translate:{name: user.name} }}\">\nhttp://plnkr.co/edit/GmjJ0tpKvo37eEvLU5N4\n. ",
    "JonQuarfoth": "@nwhittaker That sounds like a great idea to me\n. ",
    "Drarok": "Was just creating a Plunker to report this exact issue: http://plnkr.co/edit/I0XfI44KwxrYty2y7oG0?p=preview\nI'd love for translate-attr-\u2026 to be its own standalone directive. As a workaround in the meantime, I've been doing:\nhtml\n<tr title={{ 'my.i18n.key' | translate }}\"><i class=\"\u2026\"></i> <p>\u2026</p></tr>\n. Could have a translate-attr directive that only does the attr part?\n. Hmm, my only issue with that is the conflict between attrs plural to enable it, and attr singular when listing the attributes.\n. ",
    "sushidub": "@knalli We're using translate heavily on a very large project and really looking forward to this issue being resolved. We're currently doing the following everywhere within our markup .\nhtml\n<a href=\"url\" translate>HOMEPAGE.VIEW_PLAN_DETAILS<ng-svg class=\"icon-arrow\" src=\"/img/icon-arrow-link.svg\"></ng-svg></a>\nWe lose all child elements within any element with the translate directive. As in the example here, the inline svg icons.\nGranted there are workarounds for this particular example, but ideally it would be ideal to pass something like an object property to a config file on page load that tells translate not to touch certain elements or ones with a specific class. In our case it would allow us to target the svg element properties (stroke, fill, etc) from CSS.\nThanks in advance for all your work. \n. ",
    "000panther": "I currently have the same issue and want to avoid using filters ... \n. I would recommend posting this issue somewhere in the security manual, where there is currently no strategy recommended - highlighting the current bug and also the solution (using escape for now). It took me three days to notice that this is a known bug! While this time I tried different versions, I thought my sanitation was not gripping correctly.\nTL:DR: IMHO this bug + intermediate solution should be in the security docs! \nhttp://angular-translate.github.io/docs/#/guide/19_security\nI will make a pull request.\nBTW: In my case \u00d6 \u00dc \u00c4 \u00fc \u00f6 \u00e4 & are also double escaped.\n. OK. I added a german version too!\n. Well according to the description in the bug report the bug is in the behaviour of angular $sanitize. Maybe angular translate is using it wrong. \n. ",
    "dsine-de": "I'd also love to see this feature. I want to translate a title attribute and the element contains an inline SVG.\n. ",
    "BonsaiDen": "@tspaeth $translate itself doesn't freeze, but anything that expects $translate.refresh() to eventually get resolved / rejected will (in this case it's ui-router where the state change will never finish and the App gets hung up after clicking on a link etc.).\nI initially ran into the 404 problem when I was trying to both give $translate a list of known language and then let it figure out the preferred language of the user. It ended up adding two languages to the internal fallback list, trying to request both and since one of them didn't exist, it never resolved $translate.refresh(), again freezing ui-router. \nWhile $translate will use one of known \n. ",
    "benjaminpick": "Sorry, I should have made a pull request against canary, closing this.\n. Well ... you're right, the flaw is deeper in my application logic. However, it took some time for me to find out the reason for this, as angular doesn't give line numbers when intrapolating statements. So I guess an error would be fine if it would be more clearly angular-translate-related ...\nFor completeness, the tests should also do integer, undefined and so on. I will add them on Friday (if you like).\n. I have added the current return values in the commented part. Esp $translate([]) == {} is a bit inconsistent but you're right, this normally shouldn't happen.\n. ",
    "jeserkin": "According to code it should, yes, but as far as I can tell, when I print window object in console (Chrome), then only language code is present in localStorage. I've specified urlLoader and translates do come in, but I don't see them under localStorage. Are they placed there at some other time?\n. Okay. And where does it hold translates, that are requested with urlLoader? At the same time seems a bit odd to say .useLocalStorage(). Doesn't seem to be very self explanatory code. I would assume, that translates are plates in Local Storage.\n. Well... So so. But okay. All in all it is good. Now the next question. As far as I've seen this plugin uses it's own storage solution. Why not ngStorage?\n. I see. Okay.\n. ",
    "samuelgoldenbaum": "ended up with the following:\nIn Controller:\n```\nfunction mapTranslationsToScope (t, trim) {\n        _.forEach(t, function(v, k) {\n            k = (trim) ? k.substring(k.lastIndexOf('.') + 1) : k;\n           $scope.t[k] = v;\n        });\n    }\nvar translations = [\n                \"pages.get-started.title\",\n                \"pages.get-started.terms\",\n                \"pages.get-started.subheader\",\n                \"pages.get-started.name\",\n                \"pages.get-started.email\",\n                \"pages.get-started.password\"\n            ];\n$translate(translations).then(function (t) {\n    mapTranslationsToScope(t, true);\n});\n```\nIn partial\n{{ t.terms | translate }}\n. Quite right! - I assumed the translations needed to be provided by the controller.\n. ",
    "McAroney": "Angular v1.1.4\n. Thanks.. A mans gota do whata mans gota do.\n. ",
    "dreamweaver1231": "Hi,\nFound the issue..\nWas using one way binding in the directive template hence it was not getting updated on language change\n. ",
    "hendricius": "Could you elaborate a bit more on how you were able to fix this? Did you pass the translations directly to the directive?\n. ",
    "furyscript": "Yes but there isn't translate of date @tspaeth \n. Now I'm using \"angular-i18n\" translator for the dates, and I use bower to install it.\nhttps://github.com/angular/bower-angular-i18n\nI need that the users can change that language in application, but with this translator can not because it is loaded with Grunt so I must preload the JS file. \nThere is a function that translates dates according to local?? @tspaeth \n. up\n. I update the comment see now.\n. Now I'm using \"angular-i18n\" translator for the dates, and I use bower to install it.\nhttps://github.com/angular/bower-angular-i18n\nI need that the users can change that language in application, but with this translator can not because it is loaded with Grunt so I must preload the JS file.\nThere is a function that translates dates according to local?? @tspaeth\n. Ok! I think you close. Maybe you know how to set dynamic localization?\n. ",
    "pmoelgaard": "Currently I have to do the following in the configuration:\njavascript\n      $translateProvider.registerAvailableLanguageKeys(['en'], {\n        'en_US': 'en',\n        'en_UK': 'en'\n      });\n      $translateProvider.useUrlLoader('i18n/locale')\n      $translateProvider.useSanitizeValueStrategy('escaped');\n      $translateProvider.useLocalStorage();\n      $translateProvider.determinePreferredLanguage();\n      $translateProvider.fallbackLanguage('en');\nHowever, it would be nice to be able to do the following:\njavascript\n      $translateProvider\n        .registerAvailableLanguageKeys(['en'], {\n          'en_US': 'en',\n          'en_UK': 'en'\n        })\n        .useUrlLoader('i18n/locale')\n        .useSanitizeValueStrategy('escaped')\n        .useLocalStorage()\n        .determinePreferredLanguage()\n        .fallbackLanguage('en');\n. Well, it's not consistently implemented, I found the first to fail is storageKey(string).\n. Of the list below, only storageKey seems to return undefined\n``` javascript\n  $translateProvider\n\n    .registerAvailableLanguageKeys(['en'], {\n      'en_US': 'en',\n      'en_UK': 'en'\n    })\n\n    .useUrlLoader('i18n/locale')\n\n    .useSanitizeValueStrategy('escaped')\n\n    .determinePreferredLanguage()\n    .fallbackLanguage('en')\n\n    .useLocalStorage()\n    .storagePrefix('myprefix.')\n    // storageKey has to be the last because it's not chained like the others.\n    .storageKey('currentLocale');\n\n```\n. If I'm not mistaken, it seems to be easily solved by adding the following to line 844 in angular-translate.js\njavascript\nreturn this;\nSo it becomes like this\n``` javascript\nvar storageKey = function (key) {\n  if (!key) {\n    if ($storagePrefix) {\n      return $storagePrefix + $storageKey;\n    }\n    return $storageKey;\n  }\n  $storageKey = key;\n  return this;\n};\n\nthis.storageKey = storageKey;\n\n```\n. So I can, excellent, thanks, couldn't find it mentioned in the document, but see it now in the code !\n. ",
    "yieldnow": "Sorry, duplicate https://github.com/angular-translate/angular-translate/issues/967\n. ",
    "imamovic": "Problem is when model is not populated with data and property of model is undefined. \n. Here is full error trace: \n``` error\n$translateSanitizationProvider/htmlEscapeValue()angular...late.js (line 283)\n$translateSanitizationProvider/mapInterpolationParameters()angular...late.js (line 307)\n$translateSanitizationProvider/mapInterpolationParameters/<()angular...late.js (line 300)\nforEach()angular.js (line 331)\n$translateSanitizationProvider/mapInterpolationParameters()angular...late.js (line 298)\n$translateSanitizationProvider/strategies.escapeParameters()angular...late.js (line 137)\n$translateSanitizationProvider/this.$get</applyStrategies/<()angular...late.js (line 213)\nforEach()angular.js (line 323)\n$translateSanitizationProvider/this.$get</applyStrategies()angular...late.js (line 209)\n$translateSanitizationProvider/this.$get</<.sanitize()angular...late.js (line 277)\n$translateDefaultInterpolation/$translateInterpolator.interpolate()angular...late.js (line 2365)\n$translate/this.$get</determineTranslation()angular...late.js (line 1721)\n$translate/this.$get</$translate()angular...late.js (line 1331)\nlinkFn/updateTranslation()angular...late.js (line 2633)\nlinkFn/updateTranslations()angular...late.js (line 2625)\n$RootScopeProvider/this.$get</Scope.prototype.$digest()angular.js (line 14308)\n$RootScopeProvider/this.$get</Scope.prototype.$apply()angular.js (line 14571)\ndone()angular.js (line 9698)\ncompleteRequest()angular.js (line 9888)\nrequestLoaded()angular.js (line 9829)\nreturn angular.element('').text(value).html();\nangular.js (line 11655)\n```\nProblem is when in function  \"mapInterpolationParameters\" is send object\njavascript\nvar object = {\n   field: \"name\"\n   message: \"{javax.validation.constraints.NotNull.message}\"\n   type: \"Operator\"\n   valid: false\n   validator:\"required\"\n   value: undefined\n}\nIt go through every parameters and call function htmlEscapeValue(value). When get on property \"value\" error is happened because value= undefined. \nValue is undefined because form user valdr (plugin for validation) and object used on form is Angular resource object. When new resource object is created value are undefined. \n. Test this \njavascript\n\"angular.element('<div></div>').text(undefined).html()\"\nwithout included jquery. \nIf you do not have included jquery, \njavascript\n\"angular.element('<div></div>').text(undefined).html()\"\nthrow error. \nIf you have included jquery, this : \njavascript\n\"angular.element('<div></div>').text(undefined).html()\"\nreturn \"\". \nNow this is not related to this plugin (but it will be good if you fix this or write jquery as dependency), it is problem in angular jqLite. (behavior in jquery and jqLite is not same). \nPlease write can I expect your solution without jquery dependency.\n. ",
    "mathroule": "Same issue without jQuery included.\n. ",
    "Guria": "I want to get all available translation keys for language or for just one namespace. With $translate service  I have to provide certain translation keys only.\n. ",
    "mikila85": "$translate.use()\nchanges the language being viewed!\ni want to \"pre-download\" another .json language\nit is changing my preferredLanguage\ncan see in:\nhttps://angular-translate.github.io/docs/#/api/pascalprecht.translate.$translate\n\"use(key)\nTells angular-translate which language to use by given language key. This method is used to change language at runtime. It also takes care of storing the language key in a configured store to let your app remember the choosed language.\nWhen trying to 'use' a language which isn't available it tries to load it asynchronously with registered loaders.\"\n. @knalli please help\n. I'm sorry didnt mean to nagg i just was not sure if you can see my note after you closed the ticket so i memo'ed ur name.\nmy problem was with $translate.instant, not being able to get the new language after use is fired untill the json is downloaded.\ni solved it by waiting for the broadcase of\n$translateChangeSuccess\nand then doing my logic.\nthanks :)\n. btw did you ever encounter a problem when changing language then refreshing the page the angular starts twice (reaches after app.run().. refresh page by it self and run angular again) ?\nor should i investigated more in my code?\nonly does that when changing language, if default is not changed everything works great.\n. might be, i checked your simple demo files and it does not do this behavior.\nnot only that the app.run - block executed twice, the whole page refreshes and reloads everything.\nthis happens ONLY if i change the language.\nsteps (working well):\n1. load app\n2. refresh page - manually\n3. app loads\nsteps: (problem)\n1. load app\n2. change language (with $translate.use and useStaticFilesLoader)\n2. refresh page - manually\n3. app half loads -> page refresh mid load (as if i pressed refresh again) -> app loads again completely\n. press F5 ..\njust realized this only happends when \"Cache killer\"(chrome extention) is enabled.\nstill strange why it reacts to angular-translate like this but i can live with that.\n. ",
    "acourtiol": "Thanks for your answer. We already use fallbackLanguage (as our application is partially translated in 25+ languages we often fallback to english on missing translations) and partial loader don't answer our needs.\nI checked angular-translate code and found the two culprits lines: \n- https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1666\n- https://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L1964\nIf we already loaded translations using the $translationProvider.translations for a certain language key the async loader will not be called.\n. I just linked a pull request, I will look at the #981 issue. Thanks for the help.\n. I just looked at the #981 issue. It's different to mine as he tried to load, through async loader, different languages that weren't already declared using $translationProvider.translations.\nTo detail a little more our situation, we want to use $translationProvider.translations to declare common translations to all our applications, and then complete them with specific application translations loaded through async static loader.\nTo give you an example extracted from one of our application, we declare in our core components: \n$translateProvider.translations('en', {\n    feedback.hover.title: 'Give us your feedback'\n    feedback.hover.text: 'Feedback'\n});\nAnd then, in our application, we try to load, using the async static file loader, the current locale-en.json which contains translations that needs to be merged with the already declared translations in our core components: \n{\n  \"error\": \"Error\",\n  \"service.unavailable\": \"Service is temporary unavailable\",\n  \"unauthorized\": \"You're no more authenticated and will be redirected to the login page\",\n  \"demo.title\": \"Components\",\n  \"success.label\": \"It is a success\"\n}\n. @tspaeth Thanks for the comments, I'll do that asap :smile: \n. @tspaeth I added some test cases and documentation snippets (both english and french as it's my native language). Let me know if it's good for you !\n. @PascalPrecht Thanks for all those comments, for sure we can rename the method :smiley: \n. @PascalPrecht @tspaeth I updated everything like you said. Tell me if it's ok for you :smiley: \n. I just fixed a typo in the documentation as I forgot to change the function name from useForceAsyncReload to forceAsyncReload.\n. @PascalPrecht Done :smiley: \n. @PascalPrecht is this good to you ? :smiley: \n. :+1:\n. I've tested on our application myself and when activated it concatenated the table using angular.extend(). We have both translations provided using $translationProvider.translations and $translateProvider.useStaticFilesLoader.\n. I do not know what it does, I just copied it from the code snippet of $translate.usePostCompiling :sweat_smile: \n. This goes here: \nhttps://github.com/angular-translate/angular-translate/blob/master/src/service/translate.js#L236\n. Yes, exactly.\n. @AurelieV gave the answer:\n!(!value) handle undefined and null cases here\n. ",
    "atd": "@knalli thank you for your quick response!\nPlease, let me know if I can give a helping hand\n. Perfect! \nI'll send a pull request for the docs\n. https://github.com/angular-translate/docs/pull/4\n. Ops! not canary\n. I searched for the right word :smile: \nThat is how it is called in Wikipedia http://en.wikipedia.org/wiki/Locale\nBut RFC 5646 uses region http://tools.ietf.org/html/rfc5646#section-2.2.4\n. ",
    "jdrouet": ":+1:\n. ",
    "Paulmolin": ":+1: \n. ",
    "Marcpepe": ":+1: \n. ",
    "rdubigny": ":+1: any chance to get this merged ? we need this feature for our project quite soon\n. ",
    "richtmat": "@knalli when the application starts up, the language files are loaded as expected. But if I use $translate.use(lang) to early (i.e. languages are not completely loaded), $translate.use(lang) is useless because finally, when the languages are loaded, the determined preferred language is used.\n. ",
    "MGMsystems": "We have the same/similar issue.\nWe set a language via url but the preferred one is used.\nScenario:\nWe set preferred language 'en' in the app.config.\n$translateProvider.useSanitizeValueStrategy('sanitize');\n $translateProvider.useStaticFilesLoader({\n            prefix: 'languages/',\n            suffix: '.json'\n        });\n$translateProvider.preferredLanguage('en');\nAnother config sets the routing.\nIn that routing the resolve of the main state we do $translate.use($stateParams.locale);\nLooks like this:\n$stateProvider.state('main', {\n            abstract: true,\n            url: '/{locale}',\n            templateUrl: 'main/main.html',\n            controller: 'MainController',\n            controllerAs: 'main',\n            resolve: {\n                setLanguage: ['$stateParams', '$translate', function($stateParams, $translate) {\n                    $translate.use($stateParams.locale);\n                }]\n            }\n        })\nIn this case we set /nl/ in the url\n80% of the times we see that 'nl' is loaded correctly. In other cases 'en' is set as the language.\nEven when the url is /nl/\nOn the network tracking we see a request for 'en.json' and 'nl.json'.\nThere we see that if nl.json is done loading before en.json the language is set in 'en'\nBut if nl.json is done loading after en.json it is correct and uses the url language.\nYou can clearly see this when you throttle the network.\n\n@knalli Hope this help clarify the issue and you can look into this.\n@richtmat does this describe your issue as well?\n. @knalli I understand, but sometimes the preferred language is used and not the later set language.\nThis because the preferred language json took longer to load.\nI expect the url language to be used.\n. ",
    "geonom": "Thanks a lot! Already good to know that it is not going to work that way :+1: \nTried to change the internal data structure directly after each language change, but somehow only the first change works, any subsequent language change will not change the group translation anymore - updated the jsbin:\nhttp://jsbin.com/cobeyucopo/4/edit?html,js,console,output\nThe same happens in my own application, so probably a case of me misunderstanding either javascript or angular - not an issue of angular-translate anymore :)\n. Thank you very much!\n. ",
    "sigismondm": "In the snippet below I reach out to an endpoint that retrieves appropriate translation file. I ran an experiment by changing the language in the browser to see if it will fallback to english. \n.config(['$translateProvider', function($translateProvider) {\n    $translateProvider.useUrlLoader('/locale/data?format=mf')\n      .useCookieStorage()\n      .registerAvailableLanguageKeys(['en'])\n      .determinePreferredLanguage()\n      .fallbackLanguage('en');\n  }])\nIn my controller I did a  console.log( $translate.proposedLanguage()) and the output was the same as the language I set my browser to. I expected that it would've been english.\nAm I doing something wrong or this is an issue? Thanks.\n. ",
    "hartmannj": "The same happens in my project as well.\n$translateProvider\n.useSanitizeValueStrategy(null)\n.useStaticFilesLoader({\n    prefix: '/assets/landing/translations/locale-',\n    suffix: '.json'\n})\n.registerAvailableLanguageKeys(['en', 'zh-HK', 'zh-CN'], {\n    'en*': 'en',\n    'zh': 'zh-HK',\n    'zh-TW': 'zh-HK',\n    'zh-Hant': 'zh-HK',\n    'zh-Hans': 'zh-CN'\n})\n.fallbackLanguage('en')\n.determinePreferredLanguage()\n.useCookieStorage();\nIf I set my browser language to German, the script tries to download the German language file, fails and shows the placeholders instead of using 'en' as fallback.\nRight now I fix the problem by putting following code snippet into the run method:\nif(['en', 'zh-HK', 'zh-CN'].indexOf($translate.use()) < 0) {\n    $translate.use('en');\n}\n. ",
    "seemsindie": "What do you need to know, all i can tell you is i have a huge list of translations. And a lot's are displayed on the page of the app. When i open angular batarang i see a really big list of watchers that watch for translations that take a long time Image\n. @RyanQuackenbush Thanks man.\n. ",
    "RyanQuackenbush": "If you do not expect to change the language on the fly (possibly without app refresh), look into one-time bindings in the Angular docs (scroll down / find 'One-time'). Still will be slow the first time.\nEdit:\nRecommend using this add-on since angular-translate does not support one-time bindings out of the box\n. ",
    "SubZero-0": "ok,\ngot it...\nhttps://github.com/angular-translate/angular-translate/issues/694\n. ",
    "sclausen": "Sorry, I already made an appropriate version, but lost the version number while pasting the fiddle :-[ Sorry!\nIt's here: http://jsfiddle.net/urk9nkog/2/ \nThe Problem with the filter or the directive is as I asked: Is there a more elegant way than coding my own filter to sort by translation?\n. ",
    "ruw8279": "The easiest way is to apply the translate filter inside the order by filter:\n<select name=\"comboBox\"\n  ng-options=\"object.id as object.name | translate for object in ArrayOfObjects | orderBy:'name | translate' \">. ",
    "TheHacker66": "It should look like this (the one you see is the browser's tooltip, not the bootstrap one).\n\nThat behaviour you mentioned indeed wrong. I was using marquee tags and forgot to remove them. Now titles and authors should scroll on hover only.\n. If i use the filter method it only works for the first (default) language, it doesn't change when i switch languages (you can try yourself, I have reverted changes).\nI will look into the bootstrap directive, thanks.\n. ",
    "joris-lambrechts": "I can confirm that using Angular UI Bootstrap it is possible to do so as @knalli described: \n<div tooltip=\"{{'KEY' | translate}}\">Hover for tooltip</div>\nPS: Why are you using both Angular UI Bootstrap and the default Bootstrap + jQuery? I think it's better to use just one (preferably the Angular version)\n. ",
    "pselden": "Is it that the angular interpolation conflicts with the translate interpolation? Would changing the interpolation markers fix things?\nI also tried escaping the {{}} internally but that just spits out the key as well:\nhtml\n<span>{{ 'Showing \\{\\{pageStart\\}\\} - \\{\\{pageEnd\\}\\} of \\{\\{total\\}\\}' | translate:{pageStart:vm.getPageStart(), pageEnd: vm.getPageEnd(), total: vm.getTotal()} }}</span>\nResults in: Showing {{pageStart}} - {{pageEnd}} of {{total}}\n. Thank you for the help, I'll explore alternatives.\nI really didn't want \"expressions\" in my keys, just placeholders that could be pulled out and used by the angular-translate formatter.\nI was hoping that 'Showing {{ pageStart}}' could be used in my html and be used as if it were were the translation id directly -- same as if using \"Showing {{ pageStart }}\": \"Showing {{ pageStart }}\" in my translations file.\nPotentially if there was a way to set the intepolation markers of the angular-translate interpolaters to something else so I could use: \"Showing {pageStart}\". Edit: -- used messageFormatInterpolation but the issue persists (no error, just spits back out the key). I suppose it does not try to do the variable interpolation at all if the key is not found.\n. ",
    "yannickglt": "Hi guys!\nI proposed this PR to solve a bug we got on production. Do you think the solution I proposed is good?\nIf it is, could you accept the PR or how could I improve it to be acceptable?\n. @knalli Do you think there is a better way to do that? You can tell me what do you expect and I'll try to make the changes.\n. Sure! I'll do it asap. Thanks for your advice. \n. That's done!\n. No I guess it is not @daniel-franz. I will investigate on this issue and let you know.\n. @knalli the PR #1225 should fix the issue raised by @daniel-franz and @eyoung1980.\nI removed the abort solution as it does not concern only the translate#use method, but also translate#fallbackLanguage (and possibly every method calling translate#loadAsync). I chose another solution targeting only the translate#use method. The goal of #1070 was to avoid that the slowness of some requests modify the order of the languages to use.\nA new unit test covers the case described above. You can try running it on your master branch (which should fail because of #1070) and on #1225 to check that the PR does the trick.\n. ",
    "daniel-franz": "This cancels the request for the fallback language in our case using the static files loader.\nThis is our configuration:\n```\n    $translateProvider.useStaticFilesLoader({\n        prefix: 'locales/',\n        suffix: '/translation.json'\n    });\n$translateProvider\n    .registerAvailableLanguageKeys(['de', 'en'], {\n        'de*': 'de',\n        'en*': 'en'\n    })\n    .determinePreferredLanguage()\n    .fallbackLanguage('en');\n\n```\nIn version 2.7.2 and before translations not available in \"de\" were read from \"en\". As the request to \"en\" gets canceled now, only items from \"de\" are available. Was that intended? @knalli \n. ",
    "elizabeth-young": "I'm having the same issue as @daniel-franz.\nI was loading the app with the browser language set as fr and then dynamically changing the language to en-GB but because the fallback language request had been cancelled the translations were not available.\nIn my case removing the fallbackLanguage and setting a default in registerAvailableLanguageKeys solved my issue.\n$translateProvider.registerAvailableLanguageKeys([\"en-GB\", \"fr-FR\"], {\n            \"en*\": \"en-GB\",\n            \"fr*\": \"fr-FR\",\n            \"*\": \"en-GB\",\n        });\n. ",
    "m-assaf": "I call it from my config.js file like this:\nfunction configLang($translateProvider, $translatePartialLoaderProvider, moment) {       \n        $translateProvider.useLoader('$translatePartialLoader', {    \n            urlTemplate: 'app/{part}/lang/{part}.lang.{lang}.json'\n        });\n    $translatePartialLoaderProvider.addPart('settings');\n    $translateProvider.useMessageFormatInterpolation();\n    $translateProvider.preferredLanguage('en');\n}\nIn my core.module.js file i do the following:\n(function () {\n    'use strict';\n    angular.module('app.core', [\n        'ngAnimate', 'ngSanitize',\n        'blocks.exception', 'blocks.logger', 'blocks.router',\n        'ui.router', 'ngplus',\n        'mm.foundation',\n        'pascalprecht.translate',\n        'angular-data.DSCacheFactory'\n    ]);\n})();\nIn my controller i do:\n```\n(function() {\n    'use strict';\n    angular\n        .module('app.settings')\n        .controller('UserController', UserController);\n    UserController.$inject = ['$translate', '$filter', '$scope', 'DSCacheFactory', 'authenticationservice', 'user', '$q',\n        'dataservice.companies'];\nfunction UserController($translate, $filter, $scope, DSCacheFactory, auth, user, $q, companies) {\n//Here is my content\n   $scope.translationId = 'TRANSLATION_ID';\n    $scope.values = {\n        value: 78\n    };\n\n}})();\n```\nIn my JSON file i have :\n{\n \"settings\": {\n        \"TRANSLATION_ID\": \"Hello there!\",\n        \"WITH_VALUES\": \"The following value is dynamic: {{value}}\"\n}}\nIn my view i have:\n<pre>{{ 'settings.TRANSLATION_ID' | translate }}</pre>  => output: Hello there!\n <pre>{{ 'settings.translationId' | translate }}</pre>             => output: settings.translationId\n <pre>{{ 'settings.WITH_VALUES' | translate:{value: 5} }}</pre> => output: {{ 'settings.WITH_VALUES' | translate:{value: 5} }}\n <pre>{{ 'settings.WITH_VALUES' | translate:values }}</pre> => output: {{ 'settings.WITH_VALUES' | translate:values }}\n. The last 2 lines don't work for me:\ntranslate=\"settings.VARIABLE_REPLACEMENT\" translate-values=\"{ name: 'PascalPrecht'}\"\n translate=\"settings.VARIABLE_REPLACEMENT\" translate-value-name=\"PascalPrecht\"\n. Here my console log, he don't like the face that we have {{}} inside my JSON file:\n\n. I have always the same error (angular dont like my brackets inside the JSON):\n\n. Ok, i never use Plunker, i will try to upload exactly the same files and tell you when i finish it. \nThank you @tspaeth.\n. I have ID in my JSON language file, this ID is called TITLE, i try to retrieved with this:\nvar translated_title = $translate('settings.TITLE');\nNow i pass my arguments as you said : getStates(translate), i dont have the error, but i can't retrive the value of my ID. Now in my console i have the following value [ retrived with console.log(translated_title); ] : Promise {$$state: Object}\n. I change to the following :  \n```\nfunction appRun($translate, $filter, $q, routerHelper, logger, $state) {\n        routerHelper.configureStates(getStates($translate, $filter, logger));\n    }\nfunction getStates($translate, $filter, logger) {\n      var test1 = $translate('settings.USER_DATA');\n      var test2= $translate('settings.USER_DATA').then(function(translation) {\n                            logger.error(translation); });\n       var $translate = $filter('translate');\n       var test3 = $translate('settings.USER_DATA');\n        console.log(test1);\n        console.log(test2);\n        console.log(test3);\n    // Here is my other code....\n}\n```\nFor console.log(test3) i have the following:\nIn my console i have : \nError: User Information / Undefined\n(anonymous function) @ angular.js:11699\nerror @ logger.js:33\n(anonymous function) @ settings.route.js:40\nprocessQueue @ angular.js:13292\n(anonymous function) @ angular.js:13308\n$get.Scope.$eval @ angular.js:14547\n$get.Scope.$digest @ angular.js:14363\n$get.Scope.$apply @ angular.js:14652\ndone @ angular.js:9734\ncompleteRequest @ angular.js:9924\nrequestLoaded @ angular.js:9865\nUser Information is the right answer because in my JSON file i have the following:\n{\n    \"settings\": {\n        \"USER_DATA\": \"User Information\"\n    }}\nIn my view (at the title of the page) it show me taht : settings.USER_DATA\nWhy can't retrieve the right translation in my view ?\nWhat i do it wrong?\nThank you\n. Didn't work with promise ?\nHow can i do it ? \n. Hello,\nI always don't know how can i do translate inside inside my 'route' module, any idea ? (i want to translate title in the state above)\n. @knalli Yes i read the article... I have module 'settings' wich is composed from 'settings.html', 'settings.controller.js', 'settings.module.js' and 'settings.route.js' and languages JSON files (lang/settings.lang.en.json, lang/settings.lang.de.json, lang/settings.lang.fr.json and lang/settings.lang.it.json). The code aboce is inside 'settings.route.js''.\nWhat i need is to translate 'title' inside this file.\n. ",
    "ChrisFan": "Well, as you mentioned, yes, in my code I first change the locale texts and then go for a transition...\nThat's just because I didn't find a better solution.\nI'm wondering if there's something like this.\nthis.changeLanguage = function(locale) {\n  ...\n  $translate.set(locale); // something like this, only set locale, and it would take effect after the transition\n  $state.transitionTo($state.current, $stateParams, { reload: true });\n}\nI'd tried to update the localStorge, but it only work after I refresh the page.\n. ",
    "senthilakr88": "is determinePreferredLanguage() works for Internet Explorer?  for me its not working in IE. It works fine in firefox and chrome. did anybody else had the same issue?\n. I use IE 10\n. Hi knali,\n    I'm trying to use localize my app. so by using determinePreferredLanguage() i'm letting angular decide my browser language. when i use that function for firefox it works fine and when the browser language changes. but for IE it is always en-US. it is not capturing the browser language change on my app start\nhere is my code \nangular.module('hp.wcm.estudio.localization', ['pascalprecht.translate', 'ngCookies'])\n    .config(['$translateProvider', '$httpProvider', function($translateProvider, $httpProvider) {\n```\n    $translateProvider\n        .useStaticFilesLoader({\n            prefix: 'assets/messages/messages-', \n            suffix: '.json'\n        })\n        .registerAvailableLanguageKeys(['en', 'de','es', 'fr', 'it', 'ja', 'ko', 'zh', 'zh_CN', 'zh_TW'], {\n             'en': 'en',\n             'de': 'de',\n             'es': 'es',\n             'fr': 'fr',\n             'it': 'it',\n             'ja': 'ja',\n             'ko*': 'ko'\n         })\n        .determinePreferredLanguage();\n}]\n```\n);\nI'm doing this in the config of the module. is that a problem?\nThere is no error message. simply it doesn't compute the browser language . it is always en-US\n. ",
    "joshvito": "I cannot get .useLocalStorage to work as described in the documentation.\nThe application loads with the English translation files as expected. I can interact with the page to switch the language as expected. THe last selected language key is stored in local storage in my browser as expected.\nHowever, when I refresh the page, it always loads in English. This happens even when the language key is set to another such as 'ja';\nPlease advise, it seems I am missing something or my configuration is set incorrectly.\n```\nvar app = angular.module('ybWeb', ['ngRoute', 'ngCookies', 'pascalprecht.translate']);\napp.config(['$translateProvider', '$translatePartialLoaderProvider', '$locationProvider', function($translateProvider, $translatePartialLoaderProvider, $locationProvider) {\n    //main app config\n    $translateProvider.useSanitizeValueStrategy('escape');\n$translateProvider.preferredLanguage('en');\n$translateProvider.fallbackLanguage('en');\n$translateProvider.useLocalStorage();\n\n$translateProvider.useLoader('$translatePartialLoader', {\n    urlTemplate: '/m/src/i18n/{part}.{lang}.json'\n});\n\n$locationProvider.html5Mode({\n    enabled: true,\n    requireBase: false\n});\n\n}]);\napp.controller('translateCtrl', ['$translate', '$scope', '$location', '$translatePartialLoader', 'getReturnDataSvc', function ($translate, $scope, $location, $translatePartialLoader, getReturnDataSvc) {\n$scope.languages = [\n    {code:\"en\",\n        name: \"COMMON.LABEL.ENGLISH\"},\n    {code:\"ja\",\n        name: \"COMMON.LABEL.JAPANESE\"}\n];\nconsole.log($translate.versionInfo()); //2.11.0\nconsole.log($translate.storage().get());//logs last selected language on refresh\n\n$scope.selectedLang = $scope.languages[0];\n\n$scope.changeLanguage = function (language) {\n    $translate.use(language.code);\n    $scope.refreshTranslation();\n};\n\n$scope.refreshTranslation = function(){\n    $translate.refresh();\n};\n\nfunction getTranslationPath(locationPath){\n    //ToDo: move to svc\n    //generates a period separated path string for passing to $translationPartialLoaderProvider\n    var path = locationPath.replace(/\\//g, \".\");\n    var pathArr = path.split(\".\");\n    var extension = pathArr.pop();\n    var leading = pathArr.shift();\n    return pathArr.join(\".\");\n}\n\n$translatePartialLoader.addPart(getTranslationPath($location.path()));\n\n}]);\napp.run(['$rootScope', '$translate', function ($rootScope, $translate) {\n        $rootScope.$on('$translatePartialLoaderStructureChanged', function () {\n            //this forces a translation refresh every time we change the object assigned to the $translatePartialLoader\n            //we can use $translatePartialLoader.addPart() in our controllers and not have to manually call $translate.refresh()\n            $translate.refresh();\n        });\n    }]\n);\n```\n. @tspaeth Adding a wildcard to the end of registerAvailabelLanguageKeys does indeed fix the issue of the loader looking for non-existent .json file.\nIf this is the intended use, it should be added to the documentation. I would still expect the fallbackLanguage to to be used in the case of a missing language file.\n. ",
    "sainath168": "Any update on this?\nI faced some problem too. I made some temporary fix like this in the controller init function where it comes after login or when refresh/F5 did,\nvar storageKey = $translate.use();\nif (storageKey !== \"en-US\") {\n      $translate.use(storedKey);\n       $translate.refresh();\n}\nBut why it is not considering language key \"NG_TRANSLATE_LANG_KEY \" that is stored in cookies by default. Reason for angular translate taking preferredLanguage with higher priority than on that is stored in cookies?\n. ",
    "rafaelgondim": "This pull request fix some issues when using requests interceptors on $httpProvider. The interceptor can return new promisses that overrides the \"success\" and \"error\" callbacks\n. ",
    "realityking": "Any news on this? It' been a while.\n. The old methods are now deprecated: https://docs.angularjs.org/api/ng/service/$http\n. ",
    "nioe": "Same problem here...\nWhen using the filter to translate values like {{ VALUE | translate }} and $translateProvider.useSanitizeValueStrategy('sanitize'); the output result is for example &amp; instead of &...\n. I investigated a bit on this issue... I don't think anymore that it is a problem with the filter.\nIf I use for example <p ng-bind-html=\"'TRANSLATION_KEY' | translate\"></p> it works fine. On the other hand if I define a sanitized variable in my controller like $scope.sanitizedText = $sanitize('&'); and bind it with a binding expression in my template like <p>Test {{ sanitizedText }} the output is Test &amp; as well...\nThe issue only appears if a binding expression ({{ }}) is used, not with a directive...\n. I created a very minimal example to reproduce the issue with AngularJS 1.4.0 and angular-translate 2.7.2: https://jsfiddle.net/xzrbLrce/. Feel free to play arround with it.\n. ",
    "marlonmleite": "Yes, it seems that the problem happens only with {{ 'ANY' | translate }}.\nPlunk updated.\n. ",
    "dweremeichik": "Per https://docs.angularjs.org/api/ngSanitize/service/$sanitize ng-bind automatically escapes.\nWhich is why we are seeing the following functionality break: \n<p>{{ 'TEST' | translate }}</p>\n<p ng-bind=\"'TEST' | translate\"></p>\nA double sanitation is occurring. When you debug it in you browser, it appears fine at first, but if you \"Edit as html\" you find that what you are seeing is actually:\n<p class=\"ng-binding\">This is a test with &amp;lt; &amp;gt; &amp;amp; &amp;#228; &amp;#246; &amp;#252;</p>\nWhich means that it is taking the initial escape of \n&lt; &gt; &amp; &#228; &#246; &#252;\nand escaping it again.\n. I saw it when using Google chrome. Pop open the developer console. Inspect\nthe html, then right click and edit as html, you should be able to see what\nI am talking about.\nOn Tue, Jul 7, 2015, 2:42 PM S\u00e1mal Rasmussen notifications@github.com\nwrote:\n\n@dweremeichik https://github.com/dweremeichik I am not seeing any\ndouble escaping when inspecting OPs plunker.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1081#issuecomment-119298337\n.\n. \n",
    "parkmap": "Is it okay to do not use \"$translateProvider.useSanitizeValueStrategy('sanitize');\";\nif not use, it occurs an alert, security message on the developer console.\n. ",
    "eggyknap": "One place the above workarounds don't work, at least as far as I can see, is in \"placeholder\" attributes in  elements -- and presumably anywhere else you need to set an attribute to a translated value, instead of setting an element's contents.\n. ",
    "tonystar": "+1\n. ",
    "DaAwesomeP": "I have this problem too. @angular-translate How far off is this fix?\n. :+1: Happens in for other characters too (such as accents): #1081\n. Would it be possible to make a workaround with a custom filter?\n. ",
    "99sono": "\"If I use for example \nng-bind-html=\"'TRANSLATION_KEY' | translate\"it works fine.\n'''\nGood work around, thanks.\n. ",
    "rodneicouto": "My workaround was: \n\napp.filter('cbTranslate', ['$translate', function($translate) {\n        return function(input) {\n              return $('< div/>').html($translate.instant(input)).text();\n        }\n    }]);\n\nAfter i use in html \n{{'user.shared.search' | cbTranslate }}\nOBS.: Put \"DIV\" together with \"<\"\n. ",
    "iashraful": "ng-bind-html=\"'your-translate-key' | translate\"\nIt's working fine for me :smile: \n. ",
    "edenworky": "Is this nearing a fix?\n. ",
    "qazqwertish": "I had translate on all the rest of the Application. My fault.\nThank you so much! Sometimes you are so focused that you don't see the obvious.\n. ",
    "eeiswerth": "What did you find? I just did a simple test with a 1000 messages. One page translated using filters and another page translated using the directive approach.  Using Chrome's timeline tool I found the directives approach took twice as long (959.9ms vs 402ms for the filter approach). To calculate those numbers I summed loading, scripting, rendering, paint, and other times. I did not include idle time. I also found the heap size was ~24320352 vs ~16878484 when comparing directive vs filter approach, respectively.  This was just a very simple test, but it seems to be contrary to what the docs say.\nMy tiny little test seems to show the filter approach performs better. At least right now.\n. ",
    "borisbsu": "Per Using translate directive guide, the preffered way is to use translate directive:\n\nAnother way to translate contents within the view layer is to use the translate directive. Using translate filter is great, but using translate directive is better. It turned out that having too many filters in a view sets up too many watch expressions, which is why angular-translate also provides a directive to translate your contents in view layer.\n. \n",
    "Zhouzi": "Ok sorry guys, my bad. The documentation is actually pretty clear! Apart from the remaining error on the missing locale, which is related to messageformat.js, everything is fine so I guess this issue can be safely closed. Thanks and keep up the good work! :)\n. ",
    "binbinan": "@knalli I am experiencing the same issue with the Web site (and with our own application) when trying to use pluralization and angular-translate.  I am loading the locales/{lang}.js file along with messageformat.js and angular-translate-interpolation-messsageformat.js.\nAlso when opening the plnkr.co URL you provided I get an error in the console.  It functionally works, but it throws an error every time the language is switched to German.\nOur app works after the translation buttons are pressed a few times, but still throws an error in the console every time.\nMore seriously, if the preferred language is set to anything other than English it refuses to load at all, as Zhouzi said.\nThis is all in Chrome 43.0.2357.124.\n. ",
    "gustavekossi": "I have try this without translate it works but i can't use internationalization\n\n\n. I have also try this,still doesn't work!\n\n\n. Thanks for your answer but the problem is i'm calling exactly the same expression {{'HEADLINE' | translate}} which display Hello there! both use the same controller\n\n. Finally i solved this issue by surrounding the function which calls my json translations by a setTimeout() with a delay of 1000ms\nI'm not sure it's the best to solve this issue but anyway it works now.\nThank you guys\n. yes exactly pour everything is working perfectly when i put the setTimeout from l.60 to 68 and wait 1s.it seems that link function is executed at the end of directive but i don't know how to remove the setTimeout and use link function instead\n. \n\nthe project is too big, but you can see here my module the directive i created to handle my translations normally i should be more clear. i'm using introjs framework to describe my webpage  and translations appear in the tooltip when i put the setTimeout it's working but not when i remove it\n. \nthis is my angular translate. i'm calling an api to retrieve dynamically the current language\nit's work pour the problem is i'm obliged to delay my function in order to see my translation \n\nhere 's my translation\n. ",
    "rsnyman": "I've just set this up on Plunker, and I seem to have figured out what the problem is. As per http://angular-translate.github.io/docs/#/guide/19_security I set the sanitation policy to \"sanitize\". As soon as I set it to that, translation seems to break. If I change that to \"escape\" then translation works fine.\nhttp://plnkr.co/edit/bzHZYcSkUTzZ3FS5YZwh?p=preview\n. On my code at work where I'm experiencing the problem, yes. Oh, and when I changed to \"escape\" it didn't help.\nIs there any way I can get angular-translate to output MORE logging? I'm unable to troubleshoot this effectively because it fails silently.\nSide note: The documentation wasn't very explicit about including ngSanitize.\n. P.S. Even with sanitize installed correctly, this is still happening. There must be a conflict somewhere, just a pity I can't debug it.\n. I have to use translation IDs without underscores. \n. The problem is that I have many other dependencies and a rather complicated application which I can't just dump out here for all to see. Without proper debugging I cannot narrow down the problem, so I have just resigned myself to having to live without underscores.\n. Yes, your example works. My application still doesn't work, despite angular-translate being set up exactly the same way as your example.\n. I'd really appreciate more debugging. Is there not some way I can step through what angular-translate is doing? It's clearly some sort of interference from another AngularJS module, but I can't track anything down.\n. Thanks, I haven't seen that before. I'll give it a try.\n. Ah, I found out what was causing the problem. We have a transformResponse hook, and it was interfering with the language files being loaded from the server. Thanks for the help.\n. ",
    "gonzalo-roberto-diaz": "@knalli no, I don't think so. Language names have been capitalized already.\n. Closing this one, and starting to push to canary.\nBTW, @knalli, thanks for finding out the typo!\n. Jan,\n\u00a0Anything wrong with my contribution? What kind of commit messages did you expect?\nI am looking forward to contribute more, but it builds upon this!\nCheers\nGonzalo\n      From: Jan Philipp notifications@github.com\n To: angular-translate/angular-translate angular-translate@noreply.github.com \nCc: gonzalo-roberto-diaz gonzalo_diaz@yahoo.com \n Sent: Sunday, July 19, 2015 9:25 AM\n Subject: Re: [angular-translate] Spanish translation of the docs. (#1137)\nThank you again, that looks awesome!We'll have to change the commit messages slightly, but we can take care of this.\u2014\nReply to this email directly or view it on GitHub. \n. Jan,\u00a0\nAny news about merging my Spanish translation?\nDo you need anything else for it to be good?\nGonzalo\n      From: Jan Philipp notifications@github.com\n To: angular-translate/angular-translate angular-translate@noreply.github.com \nCc: gonzalo-roberto-diaz gonzalo_diaz@yahoo.com \n Sent: Sunday, July 19, 2015 7:25 AM\n Subject: Re: [angular-translate] Spanish translation of the docs. (#1137)\nThank you again, that looks awesome!We'll have to change the commit messages slightly, but we can take care of this.\u2014\nReply to this email directly or view it on GitHub. \n. Thanks! I am eager to contribute more stuff on top of it :)\nGonzalo\n      From: Jan Philipp notifications@github.com\n To: angular-translate/angular-translate angular-translate@noreply.github.com \nCc: gonzalo-roberto-diaz gonzalo_diaz@yahoo.com \n Sent: Thursday, August 20, 2015 11:59 PM\n Subject: Re: [angular-translate] Spanish translation of the docs. (#1137)\nI'm quite busy currently. I'll try to pack the new stuff in the next days on canary. Thank you, and stay tuned.\u2014\nReply to this email directly or view it on GitHub.\n. Thank you. \nI don't know how to keep several forks open in my repository at the same time., so please merge this so I can contribute more.\n. Thank, you, @marclr !\n. @tspaeth,  I don't understand this comment.\n. Got it. Done!\n. ",
    "mobinni": "I think so after a short glance at the library. Quick question, does it search for all the translations in HTML for instance and generate static HTML, for instance:\nlocales\n- nl.json\n- en.json\nAfter task\ndist\n     - views (en views)\n     - nl\n        - views (nl views)\nThis so you have base routes to certain translated views?\n. No problem I will!\n. ",
    "szukaiLee": "http://stackoverflow.com/questions/1043339/javascript-for-detecting-browser-language-preference\nUse the return HTTP 'Accept-Language' header can determine the preferred language.\nplease try to implement this to support IE.\n. ",
    "akatasonov": "I'm trying to make angular-translate work, so yes - this question is related to angular-translate :)\n. That's what this question is about. From the doc Note: Please make sure to embed a corresponding locale file provided by MessageFormat. These files provide locale rules for a specific locale this is required to get proper pluralization!\nPlease look into the repo of MessageFormat. There are no locale files provided, as far as I can see.\nDoes the documentation need to be updated? Am I supposed to write that local file myself?\nThank you.\n. @tspaeth Thanks! I will give it a try\n. ",
    "vance": "Mismatched anonymous defines. Don't get this with other libs. Only angular translate and ng-table, which support AMD. They are tagged included in Karma (still loaded just with HTML), but still fail. I've seen this happen with several projects with different configs and environments. \nBelow is the jasmine 2 config for grunt-contrib-jasmine and the karma.conf for Karma tests (running in phantom)\njasmine: {\n            src: [\n                './src/main/app//*[^(.Int)].js',\n                './src/main/commons//*[^(.Int)].js',\n                './src/templates.js',\n            ],\n            options: {\n                keepRunner: true,\n                build: true,\n                vendor: [\n                    //'src/main/resources/lib/jjv.js',\n                    'src/bower-lib/jquery/jquery.js',\n                    'src/main/resources/lib/nanoScroller.js',\n                    'src/bower-lib/angular/angular.js',\n                    'src/bower-lib/angular-mocks/angular-mocks.js',\n                    'src/bower-lib/angular-resource/angular-resource.js',\n                    'src/bower-lib/angular-route/angular-route.js',\n                    'src/bower-lib/angular-loader/angular-loader.js',\n                    'src/bower-lib/angular-cookies/angular-cookies.js',\n```\n                'src/main/resources/lib/debugger/dimple.v1.1.2.min.js',\n                'src/main/resources/lib/Stacktrace.js',\n            //'src/bower-lib/stacktrace-js/dist/stacktrace.js',\n\n            'src/main/resources/lib/angular-translate.js',\n            'src/main/resources/lib/angular-translate-loader-static-files.js',\n\n            'src/main/resources/lib/i18n/angular-locale_en-us.js',\n        ],\n        // we don't need this now that specs are in src\n        //specs: 'src/**/*.Spec.js',\n        helpers: 'src/**/*.Helper.js',\n        host: 'http://127.0.0.1:8000/',\n        template: require('grunt-template-jasmine-requirejs'),\n        templateOptions: {\n            requireConfig: {\n                baseUrl: '.grunt/grunt-contrib-jasmine/',\n                paths: {\n                    // External libraries\n                   // 'jjv': 'src/main/resources/lib/jjv.js',\n                    'jQUery':   'src/bower-lib/jquery/jquery',\n                    'nanoScroller': 'src/main/resources/lib/nanoScroller',\n                    'angular': 'src/bower-lib/angular/angular',\n                    'angularCookies': 'src/bower-lib/angular-cookies/angular-cookies',\n                    'angularMocks': 'src/bower-lib/angular-mocks/angular-mocks.js',\n                    'angularResource':  'src/bower-lib/angular-resource/angular-resource',\n                    'angularRoute':  'src/bower-lib/angular-route/angular-route',\n                   // 'angularScenario': 'src/main/resources/lib/angular-1.2.23/angular-scenario',\n                    'pascal': 'src/bower-lib/angular-translate',\n                    'translateStaticFilesLoader':'src/bower-lib/angular-translate-loader-static-files/angular-translate-loader-static-files'\n                },\n                shim: {\n                    'angular': {\n                        'exports': 'angular'\n                    },\n                    'jQuery': {\n                        'exports': '$'\n                    },\n                    'nanoScroller': {\n                        deps: ['jQuery']\n                    },\n\n                    'angular-ui.utils': {\n                        deps: ['angular']\n                    },\n                    'angularMocks': {\n                        deps: ['angular'],\n                        'exports': 'angular.mock'\n                    },\n                    'angularResource': {\n                        deps: ['angular'],\n                        'exports': 'angular.resource'\n                    },\n                    'angularRoute': {\n                        deps: ['angular'],\n                        'exports': 'angular.router'\n                    },\n                    //'angularScenario': {\n                    //    deps: ['angular'],\n                    //    'exports': 'angular.scenario'\n                    //},\n                    'angularTranslate':{\n                        deps: ['angular'],\n                        'exports':'pascalprecht.translate'\n                    },\n                    'angularCookies':{\n                        deps: ['angular'],\n                        'exports':'ngCookies'\n                    },\n                    'translateStaticFilesLoader':\n                    {\n                        deps:['angular'],\n                        'exports':'translateStaticFilesLoader'\n                    }\n\n                }\n            }\n        }\n    }\n\n},\n\n```\n// ALSO just loading files directly in karma fails.\n//\n//\n//\n//\nmodule.exports = function(config) {\n```\nvar conf = {\n    basePath: '',\n    singleRun: true,\n    files : [\n        // we can't do them all because it breaks\n        {\n            pattern: 'src/bower-lib/jquery/jquery.js',\n            included: true\n        },\n        {\n            pattern: 'src/main/resources/lib/nanoScroller.js',\n            included: true\n        },\n        {\n            pattern: 'src/bower-lib/angular/angular.js',\n            included: true\n        }, \n        {\n            pattern: 'src/bower-lib/angular-mocks/angular-mocks.js',\n            included: true\n        }, \n        {\n            pattern: 'src/bower-lib/angular-resource/angular-resource.js',\n            included: true\n        }, \n        {\n            pattern: 'src/bower-lib/angular-route/angular-route.js',\n            included: true\n        },\n        {\n            pattern: 'src/bower-lib/angular-cookies/angular-cookies.js',\n            included: true\n        },\n        {\n            pattern: 'src/main/resources/lib/Stacktrace.js',\n            included: true\n        }, \n        {\n            pattern: 'src/main/resources/lib/angular-translate.js',\n            included: true\n        },\n        {\n            pattern:'src/bower-lib/angular-translate-loader-static-files/angular-translate-loader-static-files.js',\n            included: true\n        },\n        //bake down the templates\n        {\n            pattern: 'src/main//*.html',\n            included: false\n        },\n        {\n            pattern: 'src/main//.gif',\n            included: false\n        },\n        {\n            pattern: 'src/main//*.Int.js',\n            included: false\n        },          \n        {\n            pattern: 'src/main/app//.js',\n            included: true\n        }, \n        {\n            pattern: 'src/main/commons//*.js',\n            included: true\n        },     \n        {\n            pattern: 'src/main/resources/lib/i18n/angular-locale_en-us.js',\n            included: false\n        },\n        {\n            pattern: 'test/KarmaSpecRunner.js',\n            included: true\n        },\n        {\n            pattern: 'src/templates.js',\n            included: true\n        }\n    ],\n    exclude: [\n        'lib/angular-1.2.16/docs//.',\n        'lib/angular-1.2.16//*min.js',\n    ],\n    plugins: [\n        'karma-jasmine',\n        'karma-phantomjs-launcher',\n        'karma-requirejs',\n        'karma-chrome-launcher',\n        'karma-js-coverage'\n    ],\n    frameworks: [\n        'jasmine',\n        'requirejs'\n    ],\n    browsers: [\n        'PhantomJS'\n    ],\n    preprocessors: {\n        'src/main/app//!(Spec|RangeSlider|DebuggerController)+(.js)': ['coverage'],\n        'src/main/commons//!(Spec|SchemaDefinitions|Scrollable|Debug|DynamicLocale)+(.js)': ['coverage'],\n    },\n    coverageReporter: {\n        type: 'lcov',\n        dir: 'test/coverage/'\n    },\n    reporters: [\n        'dots',\n        'coverage'\n    ]\n};\nconfig.set(conf);\n```\n};\n. Where are these jsfiddles or plnkrs that use Jasmine + angular translate? The ones on the demos page do not include jasmine. https://github.com/angular-translate/angular-translate/wiki/Demos. \nLike I said, this is a failure when trying to use with Jasmine/Require. If there was an example that would be great. Maybe I'm totally off base, but I don't have a good working scenario to look at. thanks for you time!\nJust got to reading this: http://dontkry.com/posts/code/browserify-and-the-universal-module-definition.html\nSo far, in configuring our setup, we tried every variation of jasmine/karma configs to not include, do include, only load but not add to 'exports' in the config etc. which is why I lean toward it not being the setup, since only (and all) UMD style headers seem to break running under Jasmine. ng-table did this too. My suspicion is that if other people are having this problem, they're just deleting the UMD header, too.\n. Thanks for the example! I have configured (in my case) grunt-jasmine and karma-requirejs properly. There was a problem with the requirejs shim for Karma. Jasmine was trying to both load it from plain js resource and load it as a module, I think. \n. Turns out I had used 2.5.2 instead of 2.7.2. When I said it worked, Bower was always using the old version due to another dependency by translate-loader. After manually copying  the UMD version (2.7.2) over, we get the error that the module cannot be found at all. So, what is the reasoning behind using UMD? How could this be resovled in Karma? \nThis is the current Karma runner requirejs config:\n```\nrequirejs.config({\nbaseUrl: '',\npaths: {\n    // External libraries\n    'angular': '/base/src/bower-lib/angular/angular',\n    'jQuery':'/base/src/bower-lib/jquery/jquery',\n    'angularMocks': '/base/src/bower-lib/angular-mocks/angular-mocks',\n    'angularCookies': '/base/src/bower-lib/angular-cookies/angular-cookies',\n    'frisby': '/base/test/lib/frisby',\n    'pascalprecht.translate': '/base/bower-lib/angular-translate/angular-translate',\n    'angucomplete-alt': '/base/bower-lib/angucomplete-alt/angucomplete-alt' // THIS LIB HAS SAME PROBLEM\n},\nshim: {\n\n    'frisby': {'exports': 'frisby'},\n\n    'angular': {'exports': 'angular'},\n    'angular-ui.utils': {deps: ['angular']},\n    'angularMocks': {deps: ['angular'], 'exports': 'angular.mock'},\n    'angularCookies': {deps: ['angular'], 'exports': 'ngCookies'},\n    'angucomplete-alt': {deps: ['angular'], 'exports': 'angucomplete-alt'},\n    'pascalprecht.translate': {deps: ['angular'], 'exports': 'pascalprecht.translate'},\n    'jQuery': { 'exports':'$'}    ,\n\n},\n\n// Ask Require.js to load these files (all our tests).\ndeps: dependencies,\n// Set test to start run once Require.js is done.\ncallback:window.__karma__.start\n\n});\n```\n. *addendum: seems to work fine in Jasmine, for some reason only the Karma runner has this issue.\n. That's usually my first resource, and I've exhausted it. I've got a few thousand points there, i'm no stranger =)Thanks for looking at this. I guess I can chalk this up to having some dependency error and maybe need to update Karma and RequireJS, though its only a minor dot version upgrade.  Seeing as all my other dependencies work fine, i'm going to downgrade to translate 2.5.\n. http://i.imgur.com/bKGj4no.jpg?1\n. ",
    "nthibert": "I have just updated to 2.7.2 and I use requirejs for a lot of my projects. Everything with the changes made work well. Although, when I compile the code down and mix in to 1 file I get an exception \"angular is not defined\". I believe the issue comes from these lines:\ndefine([], function () {\n      return (factory());\n    });\nI believe angular needs to be passed in as a dependency, then passed in to the factory as a param. IE:\ndefine([\"angular\"], function (angular) {\n      return (factory(angular));\n    });\nI believe until this is fixed, I will have to revert to an older version.\n. @knalli Thanks for all the responses. I do have to disagree with your statement that the problem is on our side (there are some problems but I fix those ;) ). I may have not explained my situation properly. As I do know the paths property for requirejs. We implement this lib around the 2.5.x mark. While the implementation went smooth because we used a shim. Also, I like to tell you that we are using r.js to compile everything down into 1 file. The other day, I change the version to 2.7.2. This is when the error of \"angular is not defined\" appeared. So when I went looking, I found that when you used the UMD and then I compiled everything into 1 file (where angular is getting compiled into the same file) angular was not part of the closure or the global space. So everything started failing. So after your first message, I tried my approach and referred to another angular lib that is doing the same sort of thing (ng-table) and it worked. I think when it comes to using the UMD with AMD to not assume angular is loaded in the global space. Below is the implementation I spoke of. \n(function (root, angular, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module unless amdModuleId is set\n        define([\"angular\"], function (angular) {\n            return (factory(angular));\n        });\n    } else if (typeof exports === 'object') {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(angular);\n    } else {\n        factory(angular);\n    }\n}(this, window.angular || null,  function () {})\nPlease let me know if there is another way around this. Where I need to compile angular and angular-translate into the same file. \nYour code is rock solid and easy to use. Please don't consider this as a personal issue. We are peers just reviewing code and making suggestions. \nThanks for the hard work. \n. ",
    "Stefan-Rein": "First things first: Without the r.js optimizer and trying to include all modules in one file, everything works fine.\nAssuming you use the r.js optimizer and the mainConfigFile for configuration, you maybe want some setup likes this:\nYou want to use one module name (AMD module id) and get all dependencies in the right order. (for the \u201ename\u201c property in the options in r.js)\nLets call this \u201eappStarter\u201c, by which the optimizer should put all modules in the right order (because of putting all modules in one big file). \nNon AMD dependencies should be defined in the shim of the require config file and your app dependencies from the main app module.\nLike this:\njavascript\nrequire.config({\n...\n    paths: {\n        appStarter: \"./app\"\n    },\n    shim: {\n        appStarter: {\n            deps: [\"angular\"]\n        }\n    }\n...\n});\nSetting this up we get the non AMD dependencies first in the file and then the rest modules defined in the app.js in the right order.\nBut now, if you want to load, say some service for the translate-module e.g. \u201estorage-local\u201c, you need to define the dependency on the angular-translate module, so it is loaded after the translate module. But now the translate module has to be defined in the shim.\nAnd the output, from before:\njavascript\ndefine([], function () {\n    return (factory());\n});\nbecomes:\njavascript\ndefine('angularTranslate',[], function () {\n    return (factory());\n});\nAnd now, instead of being directly invoked from the IIFE, the module just get assigned and the factory function isn\u2019t called, therefore getting this message:\nModule 'pascalprecht.translate' is not available!\nangular-translate.js\nFix 1:\nCall factory() after the define (angular-translate.js) and the angular module is defined.\nFix 2:\nRemove the UMD header\nr.js:\njavascript\n...\nname: \"appStarter\",\ninsertRequire: [\"appStarter\"],\nout: \"app/build.js\",\nskipModuleInsertion: true,\n...\nrequire.config\n``` javascript\n{\n    paths: {\n        \"appStarter\": \"./app\",\n        \"angular\": \"../path/to/angular\",\n    \"angularTranslate\": \"../path/to/angularTranslate/angular-translate\",\n    \"angularTranslateLoaderPartial\": \"../path/to/angularTranslate/service/loader-partial\",\n\n    \"angularTranslateCookie\": \"../path/to/angularTranslate/service/storage-cookie\",\n    \"angularTranslateLocal\": \"../path/to/angularTranslate/service/storage-local\",\n    \"angularCookies\": \"../path/to/angular/angular-cookies.min\"\n},\nshim: {\n    \"appStarter\": {\n        deps: [\n            \"angular\",\n            \"angularCookies\",\n\n            \"angularTranslate\",\n            \"angularTranslateCookie\",\n            \"angularTranslateLocal\",\n            \"angularTranslateLoaderPartial\"\n        ]\n    },\n    \"angularCookies\": {\n        deps: [\"angular\"]\n    },\n\n    \"angularTranslate\": {\n        deps: [\"angular\"]\n    },\n    \"angularTranslateCookie\": {\n        deps: [\"angularTranslate\"]\n    },\n    \"angularTranslateLocal\": {\n        deps: [\"angularTranslate\"]\n    },\n    \"angularTranslateLoaderPartial\": {\n        deps: [\"angularTranslate\"]\n    }\n}\n\n}\n...\n```\nAny better ideas? Thanks in advance!\n. Hey, thanks for the fast answer!\nI try to describe the problem:\nWith the above described setup and the original angular-translate module (v.2.7.2) my SPA crashes with following error: \nModule 'pascalprecht.translate' is not available! \nWith the \"fix solutions\" the occurring error doesn't come up, everything work as expected.\nI'm setting something up.\n. Here is a repository:\nhttps://github.com/Stefan-Rein/angular-translate-requirejs-problem\nPlease do the following:\nindex.html (now working, default loading with require):\nComment current script tag out and use the build.js script tag\nYou get an error in the console, app crashes.\nNow go in: assets/libs/angularTranslate/angular-translate.js\nAnd add outcommented the line 15\n. @knalli I just copied some files around for example - but yes, I would use npm and include the plugins.\nYour solution is working. My fault was to think it should be enough to declare the angularTranslate dependency just in the shim of the config.js for the appStarter.\nBut of course since your plugins are AMD, I need to call them.\nThank you! Maybe the ones above had the same problem and it could save someone some time with the same issue.\n. ",
    "n00dl3": "same problem with any utf8 character, \"\u00e9\u00e8\u00eb...\"\n. ",
    "badr-ghatasheh": "Hi @knalli \nI Updated the issue, I seem to have mixed the function names.\nHowever, the issue still applies to 'sanitize' strategy and utf8 characters. \n. ",
    "samal84": "More people having this issue (including us): http://stackoverflow.com/questions/31002499/angular-translate-sanitisation-fails-with-utf-characters\n. I'm hoping you mean 1.7.0. Anything below 1.2.x is not supported upstream at all: https://docs.angularjs.org/misc/version-support-status. You'll also have to bump the angular version in package.json from \">=1.2.26 <=1.6\" to \">=1.2.26 <=1.7\". I was having issues with that, that's how I found this issue :). For now I am unblocked by using the Selective dependency resolutions feature of Yarn, and just added this to package.json:\n\"resolutions\": {\n  \"angular\": \"1.7.0\"\n}\nI'm not seeing any issues with angular-translate 2.17.1 when forcing it to use angular 1.7.0 like this.. ",
    "b2mdevelopment": "+1\n. ",
    "barbogast": "Seems like this worked with angular-translate 2.6 and broke with 2.7. \nI created a plunkr: http://plnkr.co/edit/ALPTqS68SXdpKkFfH2jl\nYou can change the loaded version of angular-translate in the index.html file from 2.6 to 2.7 to see the difference.\n. Ah, alright, sorry, I didn't know that\n. registerAvailableLanguageKeys() did work for me to prevent unwanted 404s. Maybe the order of the $translateProvider calls is relevant? I did call registerAvailableLanguageKeys() before everything else.\n. Well, it does work for me. Do you want the plunkr as example for @dacox ?\nAnyway, I made one: http://plnkr.co/edit/LIHAIirw0MgiwRj9p8PH\nIt does not try to load any unavailable files. But there is another strange thing: \"locale-en.json\" seems to be loaded twice. The second loading disappears when I disable line 19 ($translateProvider.use('en');). Could be a bug?\nIn my own code I don't see this effect since the main translation is loaded as angular module. So for me everything is fine.\nHope that helps :)\n. ",
    "JOELJOSEPHCHALAKUDY": "Had the same problem with hebrew , solved when  i set SanitizeValueStrategy  to null\n$translateProvider.useSanitizeValueStrategy(null);\n. You have two options:\n1. Use the strategy sanitizeParameters which will only sanitize the dynamic parameters, but not the actual translation (template). If you have the translation under control (but not the dynamic values), this will work.\n2. Use the strategy escape (or escapeParameters) which does not use sanitization but escaping.\nFor me there was a  problem with hebrew text  and   was solved when i set SanitizeValueStrategy  to null\n$translateProvider.useSanitizeValueStrategy(null);\n. ",
    "rafa-as": "+1\n. ",
    "johnpeb": "I think documentation should be further improved to remove sanitize as a documented option - people see it and copy and paste and it works well enough for the issue not to be noticed until an obscure bug shows up just before a deadline!\nIf a translations system can't handle unicode characters it is not a translation system.\nAs well the first paragraph should be corrected to qualify the security FUD:\n\nThis means your app is vulnerable for serious attacks (see: OWASP) if you use untrusted localization files.\n. \n",
    "mydata": "Whether this patch changes will be available as a release version, which can be used in our code?\n. ",
    "danielbolivia": "Hi everyone.\nWell I have the same problem here,  but I think the problem could be when we use $translateProvider.useSanitizeValueStrategy('sanitize');...someone says when we do this its ocurre a double sanitize, could be because we Injected the script for sanitize and we do this $translateProvider.useSanitizeValueStrategy('sanitize'); is a double sanitize? \nI think we dont need sanitize becasue  We already injected script sanitize..\nMaybe that's the problem? or I am wrong? \n Please contribute.\nThanks.. ",
    "augnustin": "For the records, I got it working thanks to the reference above:\n\nChange .useSanitizeValueStrategy parameter to 'sce' \n\n$translateProvider.useSanitizeValueStrategy('sce');. ",
    "keybeth": "I tested with all strategies but I cannot translate a placeholder. Also I put HTML entity, hexa code, and the character and nothing doesn't work . The literals are good, but in the input placeholder never put the correct character.\n<input type=\"email\" name=\"email\" class=\"form-control\" required autofocus ng-model=\"ctrl.login.email\" translate-attr-placeholder=\"attribute.email\" translate>\nlocale*es.json\n\"attribute.email\":\"Correo electr\u00f3nico\",. @knalli, I don't have problem when translate the character like literal\nThe next line works, with \"attribute.email\":\"Correo electr&oacute;nico\", in my locale.json\n<label for=\"inputEmail\" class=\"sr-only\">attribute.email</label>\nbut, with the same configuration doesn't work here:\n<input type=\"email\" name=\"email\" class=\"form-control\" required autofocus ng-model=\"ctrl.login.email\" translate-attr-placeholder=\"attribute.email\" translate>\nAlso, I tried \n<input type=\"email\" name=\"email\" class=\"form-control\" required autofocus ng-model=\"ctrl.login.email\" placeholder=\"{{'attribute.email' | translate}}\">\nWith sce, null,escape,sanitize strategy with or without params, but nothing works in the placeholder param.. @knalli I did the test and when a took the translatiosn form there:\n.translations('es', {\n        'attribute.email': 'Correo electr\u00f3nico'\n    })\n was good, but when I took the translation from the static file:\n$translateProvider.useStaticFilesLoader({\n        prefix : 'i18n/locale-',\n        suffix : '.json'\n    })\nno was good. I copied and pasted the same string line like I see in my browser to do the first configuration without any other configuration. It seems a trouble from static files\n. ",
    "rmakara": "We had the same problem with our application just before go-live. :) We found that Github issue to look for the solution, but unfortunately changing sanitize strategies didn't work. We use Magento as backend application and Angular for frontend application. In our case, the problem wasn't in ngSanitize, nor Angular translations as we thought at the beginning. The problem was in the process of merging many JavaScript files into one, which is done by Magento to optimize the page.\nFiles before the merge were UTF-8 but after merge we had the only one file that wasn't properly encoded and we had \"rubbish\" in sanitized text strings. To solve the problem we turned that Magento's merging process off.. ",
    "barbecube": "Hi, I'm facing problem with encoding when using sanitize strategy and translate-attr- directive or translate filter. Directive translate works ok. Using version 2.17.0. Is there fix coming? Thanks . ",
    "astronati": "The bug is still reproducible. ",
    "fynnfeldpausch": "Is there any progress on this issue?\nEdit:\nFor anyone interested, I am currently using the following workaround. Feedback welcome.\n.config(function($provide) {\n    $provide.decorator('translateFilter', function($delegate) {\n        return function() {\n            var result = $delegate.apply(this, arguments);\n            return angular.element('<div/>').html(result).text();\n        };\n    });\n});.\n",
    "auchEnia": "We would be hapy to switch to sceParameters strategy, but unfortunatelly it is not as secure as sanitizeParameters. The user can still provide for example <img src=\"x\" onerror=\"alert('test')\"> as an input text value and if that value is then used as a translation parameter, the onerror function is actually executed. The only strategy which prevents this behaviour is the sanitizeParamaters. There is also no way to provide some sort of black/white list in $sce to filter out this kind of stuff.. ",
    "pjindal612": "Hi,\nI looked into FOUC chapter at http://angular-translate.github.io/docs/#/guide/12_asynchronous-loading and added default translations using .translations(), But I didn't work for me. It is still flickering before displaying actual content. Since, I am using static files loader for different languages, I have to force asynchronous reloading. When I added .forceAsyncReload(true), I got below error:\nUncaught Error: [$injector:modulerr] Failed to instantiate module ULC due to:\nTypeError: $translateProvider.forceAsyncReload is not a function\n    at http://localhost:3000/app/index.js:138:24\n    at Object.invoke (http://localhost:3000/bower_components/angular/angular.js:4203:17)\n    at runInvokeQueue (http://localhost:3000/bower_components/angular/angular.js:4109:35)\n    at http://localhost:3000/bower_components/angular/angular.js:4118:11\n    at forEach (http://localhost:3000/bower_components/angular/angular.js:323:20)\n    at loadModules (http://localhost:3000/bower_components/angular/angular.js:4099:5)\n    at createInjector (http://localhost:3000/bower_components/angular/angular.js:4025:11)\n    at doBootstrap (http://localhost:3000/bower_components/angular/angular.js:1452:20)\n    at bootstrap (http://localhost:3000/bower_components/angular/angular.js:1473:12)\n    at angularInit (http://localhost:3000/bower_components/angular/angular.js:1367:5)\nhttp://errors.angularjs.org/1.3.15/$injector/modulerr?p0=ULC&p1=TypeError%3\u20262F%2Flocalhost%3A3000%2Fbower_components%2Fangular%2Fangular.js%3A1367%3A5).\nAny idea why I am getting this error? Also, Can you please specify How can I use translate-cloak with my application?\n. I was using 2.7.0. Now I upgraded version to 2.7.2 ans I am not getting above error any more. Also, translations seems to be working fine for most of the places. Currently, I am getting this flickering issue for placeholder. My code looks like:\nhttp://plnkr.co/edit/#!/tpl:8rFfZljYNl3z1A4LKSL2\nAny idea about this?\n. ",
    "crshumate": "bump\n. My issue is with the placeholder attribute value for a text input. If I translate it in an html element it displays fine. However placeholder value does not. I forked your plunker to show what I mean. \nhttp://plnkr.co/edit/JBbsdcd7YpUolfDyc5Yc?p=preview\nAs you can see it is working correctly. I checked my versions with yours. \nAngular 1.4.0\nAngular Sanitize 1.4.0\nAngular Translate 2.7.2\nAngular Translate Loader Static Files 2.7.2 (we don't use partial loader)\nCould the different versions be causing the issue?\n. Ok I found the issue:\n$translateProvider.useSanitizeValueStrategy('sanitize');\nWhen I change it to the less strict:\n$translateProvider.useSanitizeValueStrategy();\nIt works just fine. \nResource: http://angular-translate.github.io/docs/#/guide/19_security\n. ",
    "bmichaelis": "This is the exact same problem I'm trying to solve.\n. ",
    "badpenguin": "I wish to know wich language useLocalStorage() and detect language haved finded out in app.config()\nOf cource $translate.use() its working in my app.controller('home')\nbut, if possibile, i wish to know the language that's going to be used a little earlier.\n. i've a few other settings that are based on the locale choosed, i will try to read them from localStorage directly or by moving to the run/ready section\nthanks :)\n. ",
    "thecyberd3m0n": "maybe that's something wrong with my configuration\n$translateProvider\n                .useStaticFilesLoader({\n                    prefix: 'i18n/LJPromApp/locale-',\n                    suffix: '.json'\n                })\n                .determinePreferredLanguage()\n                .fallbackLanguage('en')\n                .useSanitizeValueStrategy('escaped');\n. http://plnkr.co/edit/RxUwdwblWfoNIHjqFRMA?p=preview\nI tried with my configuration, and it's works too on IE. You're right, it's something in my code\n. I'm sorry, I was using old version 2.6.1. After upgrade to 2.7.2 the problem disapeared\n. ",
    "robhicks": "Thanks for your help. Here's my config:\n``` javascript\nexport default function translator($translateProvider, $translatePartialLoaderProvider) {\n  var fs = window.FS || {};\n  if (!fs.appPath) fs.appPath = '';\n  if (!fs.simpleLocale) fs.simpleLocale = function() { return \"en\" };\n$translatePartialLoaderProvider.addPart('templates');\n$translateProvider\n  .useLoader('$translatePartialLoader', { urlTemplate: fs.appPath + '/locales/{part}_{lang}.json' })\n.preferredLanguage(fs.simpleLocale())\n.useSanitizeValueStrategy('sanitize');\n}\n```\n. Thanks, I read the thread and the docs again on security and changed the sanitation strategy to 'sanitizeParameters', which cleared up my issue.\n. Okay, thanks. I'll track it down in messageformat.\n. ",
    "pascalmouret": "Sorry for not answering earlier, the notification got lost in my inbox.\nCurrently bower installs version 0.1.7, so neither of them I'd say :smile: \n. ",
    "mukulgupta2507": "$translate.instant worked like a charm. Just want to confirm, there is no issue in using $translate.instant in place of regular $translate which return a promise. Is there any situation where I should avoid using $translate.instant() ?\nThanks\n. ",
    "amfg": "Hello, sorry for the late response.\nThe library creates new element via document.createElement and then it appends to another DOM.\nI have actually solved the issue by passing translating function instead of the string, now it works properly.\n. ",
    "amaalej": "@amfg  could you please share a snippet of your code?\n. ",
    "M21B8": "Damnit, sorry, have put them back in.\n. ",
    "vaneshmali": "Solved, Thanks.\n. ",
    "kotfilemon": "@knalli as I wrote, we use your static-files-loader, so our translations are in json files. your demo works, but our case still does not. please, check it out with static files.\n. ",
    "Ins87": "I just faced this problem\n+1\n. ",
    "GenisDiaz": "I had the same problem and I could fix it removing the next line in my code:\n$translateProvider.useSanitizeValueStrategy('sanitize');\n. Yep, but is the one form I found to fix it. I will be alert to possible fixes.\n. ",
    "hdn8": "Worked!  But this creates a security issue I suppose...\nOn Thu, 16 Jul 2015 at 11:56 GenisDiaz notifications@github.com wrote:\n\nI had the same problem and I could fix it removing the next line in my\ncode:\n$translateProvider.useSanitizeValueStrategy('sanitize');\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1131#issuecomment-121912677\n.\n. It seems to work with sanitizeParameters or escape, only with sanitize it causes the error\n. \n",
    "luschinK": "Damm,\nI spent so many hours to find this solution. Thank you so much !\n. ",
    "ixrock": "Is there anybody alive?\n. ",
    "joaovieira": "Any way of getting this behaviour:\njson\n{\n  \"actions\": {\n    \"action\": \"Action\",\n    \"actions\": \"@:actions.action + 's'\",\n    \"details\" \"@:actions.action + ' Details'\"\n  }\n}\n?\n. ",
    "aszharite": "any updates on this?\n. ",
    "ZoeyYoung": "Thank you for your answer..\n\nI think I know why I confused.\nI used the jqueryUI before use this module. I look into the jqueryUI source code, and found:\nin datepicker-ja.js:\ndefine([ \"../datepicker\" ], factory );\nthen in datepicker.js:\ndefine([\n   \"jquery\",\n   \"./core\"\n], factory );\nThen I know the datepicker module depends on jquery and ./core..\nSo I thought maybe you forgot to write the deps...something like:\nangular-translate.js\ndefine(['angular'], function () {\n  return (factory());\n});\nangular-translate-loader-static-files.js\ndefine(['angular-translate'], function () {\n  return (factory());\n});\nSorry for my poor English : (\n. @knalli \nIn http://requirejs.org/docs/api.html#config-shim\nI found the comment below:\n//Remember: only use shim config for non-AMD scripts,\n//scripts that do not already call define(). The shim\n//config will not work correctly if used on AMD scripts,\n//in particular, the exports and init config will not\n//be triggered, and the deps config will be confusing\n//for those cases.\nDoes it mean that you don't need to call define in the module, since you didn't add any deps?\n. ",
    "theremin": "in my code it helped to change my translations from\n..\n\"password_length\": \"The password must consist of at least {{length}} characters.\",\n..\nto\n\"password_length\": \"The password must consist of at least {length} characters.\",\nthe double curly bracket notation i have used without the messageformat implementation.\n. ",
    "whjvenyl": "Use the translate-filter then:\nthis.a = '<a href=\"https://github.com\">{{\"translate_hello\"|translate}}</a>';\n. ",
    "FrancescoMussi": "Hi guys! I am getting too this error message: pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. \nHas been found a solution?\n. Ah ok, I see. So basically all I have to do is to add $translateProvider.useSanitizeValueStrategy('sanitize'); in the config, right?\n. Ok, thank you!\n. Yeah sorry, that was the normal syntax for me.. \nYes i am using it in the angular-directive ion-view in Ionic Framework\nElsewhere in the app is working smoothly.\nIn this way is not working:\n<ion-view view-title=\"'profile_edit' | translate\">\n. Ok. This is the solution: \n<ion-view view-title=\"{{ 'profile_edit' | translate }}\">\nI had to use the brackets on normal attributes.\n. Thanks for replying.\nI know that documentation, is about date formats.\nI am looking for possible solutions for two days but didn't find yet...\n. Ok i needed to move on so for now i have made a directive to translate the date object.\nIt is cumbersome but is working:\nhttp://stackoverflow.com/questions/37744029/angularjs-how-to-translate-a-date-object/37785397#37785397\nLooking forward for better solution.\nThanks anyway.\n. ",
    "hmendezm": "Thanks for your reply. I already removed the quotes but If I do that, the value of the variable is not show as supposed to.  So If I have {{ 'TRANSLATION_ID' | translate:'{ userName:{{authentication.userName}}\"}' }} without \"\", this show the name of the variable so How I do this in angular-translate? the example in the documentation uses a static value which is not too realistic. Usually, you use variables to populate variables in the translation.\nBest Regards\nH.\n. HI Knalli, \nSo sorry I did not follow your recommendation. With your recommendation is work now. \nNote: The other problem is the html that I have in the Translation that it is not render.\nexample:\nUser <strong>USERNAME</strong> has enabled <strong>Refresh Tokens</strong> once logged in, to refresh your current access token click on the button below.\nBest Regards\nH.\n. Thanks tspaeth. knalli recommendation fix the problem with the value. Still I have problem with the html that it is not render correctly. \n```\nUser <strong>USERNAME</strong> has enabled <strong>Refresh Tokens</strong> once logged in, to refresh your current access token click on the button below.\n```\n. thx tspaeth, I will read it and yes I am using $translateProvider.useSanitizeValueStrategy('escaped'). I am using escape because it is the only one that allow me to have stress in the words. The app is for many countries such as Spain, USA, America Latina etc.\nI will try with the other option to see what fit with the requirements.\nBest Regadrs\nH.\n. ",
    "HopefulLlama": "Is this not already possible by using a spinal-case to denote your secondary English language?\nI.e.:\n```\n...\n$translateProvider.translations('en-blahblah', {\n    TITLE: 'Hello module',\n    FOO: 'This is a paragraph in the module.',\n    BUTTON_LANG_EN: 'english',\n    BUTTON_LANG_EN-BLAHBLAH: 'english the second',\n    BUTTON_LANG_DE: 'german'\n  });\n...\n```\nAnd then use like normal?\n. ",
    "kojiwakayama": "Thanks @knalli. Its possible to use the url loader but it would be a hack. Our use case is to cache bust the json files via query string params.\n. ",
    "dylansmith": "@knalli there is no technical reason why query params are invalid in the context of any URL, whether it references static files or not. Cache busting is a perfectly valid and widely-used use case.\nI personally don't see how adding an optional params object detracts in any meaningful way from the simplicity and ease-of-use of this loader; the primary use case is not impacted in any way. Forcing users to use $translateUrlLoader and provide semantically invalid values for the queryParameter and key options is less clear and straightforward in my opinion.\n. ",
    "vivianhewen": "hi, this is the demo : http://jsfiddle.net/L7yb14pu/3/\nI don't know how to upload my i18n-en.json file. can you add it to your project and test?\n{\n      \"LABEL_TILESETTING\": \"Tile Setting\"\n}\nI found if I use static file to load, the issue will happen. But if i load the translation by this way:\n$translateProvider.translations('en', {\n                \"LABEL_TILESETTING\": \"tile\"\n            });\nit will work very well.\n. I have solved this issue by using static file loader, thanks:)\n$translateProvider.useStaticFilesLoader({\n              prefix: '/languages/i18n-',\n              suffix: '.json'\n          });\n. ",
    "Tak0r": "after some more investigation is seems like it happens only in combination with $translatePartialLoaderProvider and adding translations asynchronosly.\nThe fiddle would be like this but the translations come with the partial loader from a translation service endpoint\nhttp://jsfiddle.net/gh5vh10r/6/\nLet's assume the following:\nThe string (Employee {{Employee}} logged in!) is correctly returned from the endpoint and the translation provider actually finds it. the message variable {{Employee}} gets replaced and after that the missing translation handler is triggered. with a string obviously not present in the collection.\nhope this clarifies it a bit.\n. This can be closed... \nangular-growl-v2 uses the translate filter by default. Because of that the missing translation handler will be triggered with the already \"replaced\" string which is not avaiable...\nI couldn't remember that it had that functionality.\n. ",
    "dacox": "@tspaeth I don't believe it does. The fallback is actually working just fine for me. If it fails to download a translation table that I don't have, it falls back to english.\nWhat I would like is to have a way of not even trying to download translation tables if I know I don't have them - this will avoid unnecessary HTTP requests.\nI thought maybe registerAvailableLanguageKeys might help but that doesn't seem to be what it's for.\n. ",
    "shinrox": "I'm also having problems figuring out how to use the partial loader with this kind of app structure too :disappointed: \nHow do I insert more content into the same language when a new component is loaded?\nThe main goal is to be able to copy the hole component folder into another project, and all the translations specific/default to that component just goes with it. Without the need to copy a separate file or copy/paste the keys into a main translation file.\nty\n. @knalli hmmm, what if my languages are angular constants and not json files? \nThis is the structure that I use, and everything is bundled together with gulp, and again I can import the modules on different projects\n``` coffee\napp.coffee\nangular.module('myModule.constants', [])\nangular.module('myModule.services', []) #etc...\nload everything to one module\nangular.module('myModule.scripts', [\n  'myModule.constants' #etc...\n  'pascalprecht.translate'\n])\nmain module depends on the 'module aggregator'\napp.module('myModule', [\n  'myModule.scripts'\n])\n```\nI use this structure cause I think it's easier to test separate parts and stuffs :stuck_out_tongue_winking_eye: \nAnyway, I want to define my module languages like this\n``` coffee\nconstants.coffee\nangular.module('myModule.constants')\n.constant 'myModule_enUS', {\n  en_US : {\n    MYMODULE:\n      TITLE: 'My title'\n      TEXT: 'My text'\n  }\n}\nangular.module('myModule.constants')\n.constant 'myModule_ptBR', {\n  pt_BR : {\n    MYMODULE:\n      TITLE: 'Meu t\u00edtulo'\n      TEXT: 'Meu texto'\n  }\n}\n```\nHow can I add those parts to the translate service, so I can use it like this without worrying about the module languages in every project?\nhtml\n<!-- template.html -->\n<h2>{{'MYMODULE.TITLE' | translate}}</h2>\n<p>{{'MYMODULE.TEXT' | translate}}</p>\nI did it like this, but I'm not quite sure if it's the best way or even the correct one\n``` coffee\nseparate file to hold all keys and load on config\nangular.module 'myModule.constants'\n.constant 'translations', {}\nfactory to load the translations constant above\nangular.module 'myModule.factories'\n.factory 'i18nLoader', ($q, translations)->\n  loader = (options)->\n    deferred = $q.defer()\nif translations[options.key]?\n  deferred.resolve(translations[options.key])\nelse\n  deferred.reject('no translations found') # not sure how to handle this\n\nreturn deferred.promise\n\nreturn loader\nservice that add new keys to the constant 'on demand'\nangular.module 'myModule.services'\n.service 'i18nService', ($translate, translations)->\nservice =\n    addTranslation: (lang, values)->\n      if !translations[lang]? # if first time adding language\n        translations[lang] = {}\n  angular.merge translations[lang], values\n\n  $translate.refresh() # call refresh to use the loader (right?)\n\nreturn service\ncontroller\nangular.module 'myModule.controllers'\n.controller 'Ctrl', (i18nService, myModule_enUS, myModule_ptBR, $language)->\n  # just to illustrate the use but I'm adding keys depending on language ...\ni18nService.addLanguage('pt_BR', myModule_ptBR)\n  i18nService.addLanguage('en_US', myModule_enUS)\napp config\nangular.module 'myModule'\n  .config [ '$translateProvider', ($translateProvider) ->\n$translateProvider.useLoader('i18nLoader', {})\n$translateProvider.useMissingTranslationHandlerLog()\n$translateProvider.useSanitizeValueStrategy('escaped')\n$translateProvider.preferredLanguage('pt_BR')\n\n]\n```\nSorry about the long post, but I hope I could illustrate what I'm trying to do :P \nty\n. Ok by me.\nBut my question continues about the constant mode that I've posted.\n. My question was if my approach is ok, or if there's any other better way of doing with constants. =)\n. @pocesar try changing your html to <div translate>{{ 'Meu texto aqui' }}</div>\nyour other lang json keys should be like.\n```\n//en.json\n{\n\"Meu texto aqui\" : \"My text here\"\n}\n```\nWhile configuring angular-translate, if you use a language that doesn't have a json, it won't find the key and keep the text passed as interpolation (Portuguese), when switched to en (in this example) it will get the key value.\nBut this is not a great way to translate things =P, but I think it'll work until you manage to adapt all the text to json. Well, if you're planning to use angular-translate of course.\n. ",
    "gauravbhavsar": "I am loading dependency in angular module like this :\ndefine(['angular','uiRouter','pascalprecht.translate'],function(angular)\n{\n    return angular.module('app',['ui.router','pascalprecht.translate']);\n});\nand config :\n```\n.config(function ($translateProvider) {\n        $translateProvider.translations('en', {\n            'SIGN_IN': 'Sign In',\n            'FOO': 'This is a paragraph'\n        });\n    $translateProvider.translations('de', {\n        'SIGN_IN': 'einloggen',\n        'FOO': 'Dies ist ein Absatz'\n    });\n        $translateProvider.preferredLanguage('en');\n\n})\n\n```\n. Thanks @knalli \nI was loading translateUrlLoader as well after pascalprecht.translate in angular.module, may be that's why getting error.\nnow its working correctly.\nmany thanks\n. ",
    "proog": "Thanks for your reply.\nYour suggestion does fix my specific example, but introduces an issue where clicking Sailor and then Pirate changes \"Ahoy world\" to \"Hello world\", which it shouldn't.\n. So if I understand correctly, this is a known issue?\nIt seems to me that the options for working around this issue are to avoid changing fallbacks during runtime or use the translate filter instead of the directive.\n. ",
    "rgolea": "Why don't you pass in the filter?\nreturn {\n            templateUrl: '/app/directives/ngCampRenvoi.html',\n            restrict: 'AE',\n            scope: {\n                rendata: \"=\"\n            }, \n            controller: ['$filter', '$scope', function ($filter, $scope) {\n                $scope.fq = $filter('translate')('REN_FREQ');\n            }]\n            }       \n});\nMaybe it's not what you've expected but I've used it like that and it works well.\n. @h4d3s2004 You need to switch languages but you would've had to anyways. Does it work?\n. I saw your directive and I'm pretty sure you're about to do a directive called ngCampRenvoi. Don't use ng since it's saved for the core dev team... Use your own prefix. I use rg for mines... use yours\n. Feel free to close this issue.\n. @dangercris thank you... But I'm not sure why...\n. Glad I could help \n. I think so, yes... Imagine that I've translated 100% of the english language to spanish and in the meanwhile someone adds stuff to english... I would like to know which keys got to fallback so I can translate the missing ones too. It's a way to know how far is one language behind the other so the language can be fully translated. Is it too difficult?\n. And maybe it should do on config something like devEnvironment(true) so it doesn't broadcast events when it's not necessary. Thank you @tspaeth for answering.\n. Found out how to do it by using .useMissingTranslationHandlerLog(). Haven't found it in the docs until now. Thanks!\n. ",
    "ilutiu": "Hi\nThank you.\nIs there a way to to retrieve a text in a language different than the current language?\u00a0 Or I need to switch languages ?\nBest regards,Claudiu \nOn Friday, August 7, 2015 12:58 AM, Rares Golea <notifications@github.com> wrote:\nWhy don't you pass in the filter?        return {\n            templateUrl: '/app/directives/ngCampRenvoi.html',\n            restrict: 'AE',\n            scope: {\n                rendata: \"=\"\n            }, \n            controller: ['$filter', '$scope', function ($filter, $scope) {\n                $scope.fq = $filter('translate')('REN_FREQ');\n            }]\n            }\n});\nMaybe it's not what you've expected but I've used it like that and it works well.\u2014\nReply to this email directly or view it on GitHub. \n. It works. Mersi. \nOn Friday, August 7, 2015 3:56 PM, Rares Golea <notifications@github.com> wrote:\nI saw your directive and I'm pretty sure you're about to do a directive called ngCampRenvoi. Don't use ng since it's saved for the core dev team... Use your own prefix. I use rg for mines... use yours\u2014\nReply to this email directly or view it on GitHub. \n. ",
    "dangercris": "@rgolea your are a Genius!\n. ",
    "donalmurtagh": "I read the docs and found the solution here - apologies\n. ",
    "xenoterracide": "yeah sorry, I only found links to the minified versions (didn't really find a good plunkr starting point), and as with the stack I showed, I'm using bower. updated my plunker to use non minified variants\nin that the tooltip is just the letter, it does not use the text from translate.\nThe only way I can think of to do to do this right now is to process the loop as a 2 step view, prepopulating the values in the controller. Unless I find a way to do an iterator in ng-repeat... but any and all of that is a work around. Because I would think, that there should be some way to pass \"values\" into the filter, and/or translate should work on md-tooltip\n. ",
    "vstene": "Hmm, yes. It also seems to fail if the loader is not async as well.\nhttp://plnkr.co/edit/ZDwPU0I7QBm4WWT3f7WX?p=preview\nIt works fine if the language is en though. \nAnyways, I \"solved\" my problem by using ngMessageFormat.\n. I updated from 2.6.0 to 2.7.2 and the problem is not present there. Short lived issue!\n. ",
    "herrherrmann": "I'm having pretty much the same problem: German special characters like \u00f6, \u00e4, \u00fc and \u00df don't get parsed properly to title and tooltip directives.\nThis one should say Priorit\u00e4t:\n\n. ",
    "eidng8": "just a reminder that the link in th post has located part (if not root) of the problem, thx to @lgalfaso\n. ",
    "jmijmi": "Is there any error or warning in console?\n. ",
    "kyro38": "Nothing gets printed in the console. \nAlso, using the filter instead of the directive works fine.\n. ",
    "masi-kun": "Had this issue switching from 2.5.2 to 2.7.2. \nIf your language JSON files are surrounded by square brackets, remove them and it should be fine.\n. ",
    "aupp": "@knalli My simple reply is because I'm a noob :) I never did a pull request before.\nIt slipped my mind adding the feature to the directive + service as well - I'll do that.\nRegarding the commit messages - what should they look like?\nAnd there are two commits because I realized I forgot to handle the special characters a while after my initial commit.\n. So how do I do this. Should I remove this PR and do a new one with only 1 commit and the correct commit message style?\n. Oh, yes! I would. But I need to do it right this time. Had alot on my hands lately and forgot about this! Will try to do a proper PR asap!\n. ",
    "ciro207": "I downloaded right now the minified version from repository. And the problem occurs again.\nLet me explain again, maybe in a better way.\nThe problem is just that a.$inject = [\"a\", \"b\"]; is missing. I'm not telling that file does not work inside the application, I am only reporting that ng-annotate is not validating the minified versione (and, in my case, stop the build process).\nIn the diff you can see the part of code that ngAnnotate reports as missing. Have you try to check the file with a command like ng-annotate --add --remove angular-translate-loader-static-files.min.js -o test.js and then find the differences? Did you get the same result as mine?\nThanks!\n. Any news guys?\n. I did. I downloaded the file you attached, then I checked it with ngAnnotate and I got the error. Have you try to check the file indeed? Don't you have the same error?\n. Because in our build process we checked every angular related files with ngAnnotate and the previous version did not have this problem. But if you say this is not a problem, I will try to bypass it.\n. ",
    "jtomaszewski": "Yeah, +1. It was working like this but then it has been broken in some version.\n. ",
    "JeremyPinhel": "Error occur when minify my code because i forgot  DI annotations.\n. ",
    "mateullull": "No way. If I put the filter in the placeholder attr then I can't pass my scope var. I tried this:\nhtml\n<input type=\"text\" placeholder=\"{{ 'RATING_PLACEHOLDER' | translate:'{name: user.name}'}}\">\nBut obviously didn't work.\n. Ok, Demo:\nHTML:\nI have this angular model:\njavascript\nvar user = {\n       name: 'John',\n       rating: 0,\n       ....\n}\nAnd I want to put this placeholder over a textarea: 'Write the rating for John', but, obviously, I want to change the name dynamically, for this, I need to put a variable in the placeholder.\nThis can be solved by using translate translate-attr-placeholder. But, with this, I can't user ng-model for capture the rating.\nSo, this code works for printing the user name, but does not store the user rating:\nhtml\n<input type ng-model=\"user.rating\" translate translate-attr-placeholder=\"RATING_PLACEHOLDER\" translate-value-name=\"{{ user.name }}\">\nBy the other hand, this code works for storing data in ng-model, but I can't pass the user name:\nhtml\n<input type=\"text\" ng-model=\"user.rating\" placeholder=\"{{ 'RATING_PLACEHOLDER' | translate:'{name: user.name}'}}\">\nThe message that print this is: 'Write the rating for'\nThis plunker is an example of the issue. For numbers, it works, but not for strings and variables.\n. Yes! It works! My problem was that I was passing a string to the translate filter and not an object. All the examples of Angular-translate docs are passing a string to the filter and not an object, maybe it must be added to docs for other users can solve the same issue.\n. ",
    "wenzhixin": "https://github.com/angular-translate/angular-translate/blob/master/docs/content/guide/zh-cn/03_using-translate-service.ngdoc#L87\n. I mean this line: $rooScope is typo.\n. OK, got it.\n. ",
    "trong291990": "I always get lang=undefined in url \n. ",
    "claustres": "You are mixing the translations and your data, which is not a good idea in general.\nIndeed translations in the JSON can only be accessed through an ID, you do not directly manages the JSON so you can loop over an array.\nYou need to have a JSON for your static translations such as 'field1' then a JSON structure in the Angular scope to manage your dynamic content (the thumbnail array) so that you can loop with ng-repeat and ask for dynamic translation of the content.\n. ",
    "bencsbalazs": "I know this is old, but I think it works as below:\n*ngFor=\"let thumbnail of ('pages.page1.thumbnails' | translate)\"\nand then you can use the thumbnail variables inside the loop.. ",
    "Tickolas": "Hey again!\nFinally got some time to build an example, see here: http://plnkr.co/edit/8nTHZ7blDcnbLUAvLpsS?p=preview \nHowever, now that I try removing our bugfix divs as above the problem seems to have disappeared. Possibly there was some issue with an unclosed tag above or something. I'll let you know if we encounter the bug again!\n. ",
    "cmmcleod": "Understood, but is this the best behavior when the fallback stack is explicitly set?\nIn my particular case this is not the desired behavior, but there are no means to disabled it.\n. ",
    "th3nate": "they do fit my needs, \nthe problem is i need to wait for a json configuration object that contains the path that will be used in urlTemplate (declared in config phase).\nand the json response only happens after the config phase.\nso basically i'm asking if there's a way to override the path from outside the config?\n. cant really provide a demo because im working remotely via secured VPN.\nas i said, i am using translate-cloak but the translate key still flickers before loading.\nim partially loading the relevant translation inside the controller and it takes a 1-2 sec until the key hides itself and the actual value shows properly\n. its a bit hard to set up a working demo but ill try to explain my best.\nfirs of all the translation loads inside a directive's template:\njavascript\n        var directive = {\n            restrict:         'EA',\n            replace:          true,\n            scope:            {},\n            controller:       LoaderController,\n            bindToController: true,\n            controllerAs:     'vm',\n            template:         '<div class=\"welcome-overlay\">\\\n                                    <div class=\"welcome-loader f-s-22 text-center\" id=\"loader\">\\\n                                        <span class=\"block\" \\\n                                        translate-cloak \\\n                                        translate=\"Loader.Text.Welcome\" \\\n                                        data-ng-if=\"vm.firstLogin === false || vm.hideText === false\"><span>\\\n                                    </div>\\\n                                    <div class=\"welcome-loader-time f-s-22 text-center\" \\\n                                    data-ng-if=\"vm.firstLogin === false || vm.hideText === false\">\\\n                                        <span>{{vm.LastLoginTimeSO}}</span>\\\n                                    </div>\\\n                                </div>'\n        };\nAnd inside LoaderController im calling for the partial translation:\njavascript\n$translatePartialLoader.addPart('SO_GetLoaderData', directoryName);\n$translate.use('en');\n$translate.refresh();\n. ",
    "laberg": "For @tspaeth answer, the strategy is 'sanitize' and not 'sanitized' ;). ",
    "jwilde2000": "Angular's translation feature is cool in that you can essentially place all the translation code inside the markup without having to manipulate the DOM with TypeScript.  Still, however, you have to add and maintain that markup code for every single string in your entire app, amounting to thousands of instances, and then translate by emailing the resource files around, and then see the results only by deploying the translated resource files.  Post-processing translation platforms like GlobalizeIt allow you to have all the same control with no code, online translation and instant publishing.  To set it up in your Angular project, you can these steps: http://www.globalizeit.com/Translate/Angular.  Full disclosure: I'm a cofounder :). ",
    "gowthamanvt": "Sorry.! Finally I see the proper implementation from the docs. I was facing some issue from IE 11 browser, where the \"$translateProvider.determinePreferredLanguage();\" is not set up properly. Hence the app automatically falls back to \"en\" (I have set thru $translateProvider.fallbackLanguage('en_US');)\nAny Idea, How to set proper browser language in IE 11..? I have set to German(de_DE) from settings but it was taking userLanguage as default (en_IN)..! Could you pls help to sort out this..?\n. Thanks @tspaeth for the response. \nI am using angular translate for first time and just got confused with using multiple loader.\nI have written the code part I am using, please provide a sample snippet to utilize staticFilesLoader in case any error in customLoader. It would be a great help for me.\napp.config([ '$translateProvider', function ($translateProvider) {\n$translateProvider.determinePreferredLanguage();\n  $translateProvider.fallbackLanguage('en_US');\n$translateProvider.useLoader('customLoader');\n$translateProvider.useSanitizeValueStrategy('escaped');\n}]);\n. Thanks for the kindness & idea @tspaeth ..\nI have got the flow and now am able to call staticFilesLoader. :) \n. ",
    "julmot": "@tspaeth Firefox\n. Okay but this does not answer my question why the fallback language is loaded even if no fallback situation is there? Let's say all my translations are available in the requested language then the fallback language will never be used. But as you say the file is beeing loaded nevertheless for the case that something is not available in the requested language.\n. My fault. I searched on Google, but this page seems to be not indexed (searched for \"angular-translate events\").\n. I will try to describe it. Let's say I have a blog and my current route requires the page to show all blog-threads. So I am loading the blog-threads-database which could look like:\njavascript\n{\n  \"some-article\": {\n    \"title\": {\n      \"en\": \"Title for English\",\n      \"de\": \"Title f\u00fcr Deutsch\"\n    },\n    \"content\": {\n      \"en\": \"My <b>Blog</b>\",\n      \"de\": \"Mein <b>Blog</b>\"\n    }\n  }\n}\nAfter I have loaded the database I (or angular) will parse the JSON object and I will save it to a class-variale. After that a ng-repeat will loop over each article in this class-variable. For example\nhtml\n<div data-ng-repeat=\"(blogKey, blog) in myClass.blogThreads\">\n  <!-- Logic goes here -->\n</div>\nInside the ng-repeat I would like to output the language-related title. If the app-language is \"en\" for example I would like to print the english title from the database (\"Title for English\"). How to achieve this? Well, currently I need to build a directive that I will call like this:\nhtml\n<div data-translateBlogProp=\"theDatabase.title\"></div>\nNow the directive will search if the model \"title\" has a property with the defined language. If yes, it will replace the text with this property-value. If not, it will fallback to the fallback-language-value (e.g. \"en\").\nIs it clear now?\n. The reason why I am using the translation inside the JSON structure and not a JSON file for each language is that I am having a fallback language. So if for example the title is not available in my requested language \"de\" it will fallback to \"en\". However, this does not affect other properties like the \"content\". But if I would use a different file for each language I would need to map the data from different JSON objects which is more complicated for me, since this is not possible on the view-side of angularjs (like it is now with a custom directive).\n. Yip, I have read this. But how should I solve my problem with this?\n. The problem with this workaround (different files for each translation key) is that I have to find the related object in a different file maybe for each key. This will cause performance issues and is also less comfortable for development. For my solution I have to search in siblings for the fallback key only.\nWhat is the use case of the translator in multilanguage databases? I mean multilanguage databases with fallback languages are not \"too special\"?\n. I am also not a fan of this method, but it's necessary. I can explain you why. The translation should be done on each property separately and not for all properties inside the file. So we have a blog title and it will be checked if this specific property is available in the requested language. If not, the fallback language title will be used. However, this will not affect the translation for other properties. Your use case makes only sense if it would since you have to reload properties from different files which makes it very complex.\n. That shouldn't be so much complicated, refer: https://github.com/julmot/jmBoilerplate/commit/36a5e96065334e746d044652962f268b7227b84a\njavascript\n$rootScope.language = $translate.use();\n$rootScope.$on(\"$translateChangeSuccess\", function(){\n    $rootScope.language = $translate.use();\n});\nUsage in HTML:\nhtml\n<html lang=\"{{ $root.language }}\">\n. An implementation should not be fixed for the html-tag. You could set the attribute also on e.g. <div>-tags.\n. yes. This will cause a conflict with angular-route as it uses 1.5.0.\n. made the same\nhttps://github.com/julmot/jmBoilerplate/commit/560a06f91dc7f2877f3034adea67310a30ce7b36\n. ",
    "fotofinder": "Would it be correct to translate a dummy string and to assume that when this translation has completed use() returns the correct value?\njavascript\n$translate('DUMMY').then(function(data){\n   $rootScope.interfaceLang = $translation.use();\n});\nupdate:\nNo, the above code doesn't reliably return a value from use()\nOr is there an event to listen to?\nWrapping the above code in an $translateLoading* listener doesn't work either.\nSo my conclusion is to not store this on a scope, but to always use use() and fallback if it returns undefined.\nThanks for all your replies.\n. see my updated comment\n. strange,\ngrunt test as well as nom run test-scopes passes locally\n. Puh!\nShall I reopen it? Or can you do it on your own?\n2015-09-03 19:25 GMT+02:00 Jan Philipp notifications@github.com:\n\nThe error was not your fault.\nWe are still welcome for your addition\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/pull/1199#issuecomment-137519896\n.\n\nSie erhalten diese Nachricht, weil Sie in Google Groups E-Mails von der\nGruppe \"it-team\" abonniert haben.\nWenn Sie in dieser Gruppe einen Beitrag posten m\u00f6chten, senden Sie eine\nE-Mail an it-team@fotofinder.com.\nGruppe besuchen: http://groups.google.com/a/fotofinder.com/group/it-team/\n\n\n\nmit freundlichem Gru\u00df,\nFrank Wesemann\nFotofinder GmbH         USt-IdNr. DE812854514\nSoftware Entwicklung    Web: http://www.fotofinder.com/\nPotsdamer Str. 96       Tel: +49 30 25 79 28 90\n10785 Berlin            Fax: +49 30 25 79 28 999\nSitz: Berlin\nAmtsgericht Berlin Charlottenburg (HRB 73099)\nGesch\u00e4ftsf\u00fchrer: Ali Paczensky\n. due to #1201 \n. I experienced that $translateChangeSuccess is not fired on application startup.\nIf it should, I can investigate. Or we fire $translateChangeSuccess also on application start\n. @tspaeth : Your are right $translateChangeSuccess is fired on startup. May be I wrongly listened to $translateChangeStart or missed it somehow ( it was late yesterday  ).\nEitherway:\nThis patch doesn't add any value. I therefore close this PR\n. ",
    "thanhson1085": "Thanks for your response. I meant that I need Angular-translate support the different JSON structures.\nFor example:\nAngular-Translate is able to works with either en_US.json:\n{\n    \"translation_key\": \"Hello\",\n}\nor:\n{\n  \"translation_key\": {\n    \"value\": \"Hello\",\n    \"files\": [\n      \"path_to_view\"\n    ]\n}\nThe second format is support by grunt-locales.\nIn my project, I used angular-translate. But I also use grunt-locales to generate and update json translation files if have any changes in templates or controllers.\nHowever, grunt-locales and angular-translation are using different json file format. So I have to pull a request to make it work together.\nI created this issue to hope that angular-translate is able to support differment json file formats.\n. Thanks. I found an alternative solution. So we should close this issue.\n. ",
    "ericjames": "My karma unit tests don't like .json files.  Is it possible to dynamically load a .js file and define the object name inside?\nie: translation-en.js\nvar translation_en = {\"something\":\"something\"};\ninstead of: translation-en.json\n{\"something\":\"something\"}\nFor example:\nmyApp.config(function($translateProvider) {\n  $translateProvider.useStaticFilesLoader({\n    prefix: '/i10n/translation-',\n    suffix: '.js',\n    name: 'translation_en'\n  });\n});\n. @knalli Ah ok I was a little confused, yes you're right the files right now are basically global objects which isn't good.  I reproduced the json files and it passed karma, probably was a formatting problem. \n. Yeah it looks like sanitized is the future, that means the templating for translations will have to be rethought and simplified since we can only use sanitized HTML. \n. ",
    "lucastschmidt": "@tspaeth thanks for the answer. \nOne more thing, do you know exactly which \"component\" needs to be replaced in this case? \nAnyways, thanks for the answers, closing this. \n. @tspaeth, I was able to change the resolution algorithm, to support the infiniteModifier.modifier.page.key algorithm\nhttps://github.com/lucastschmidt/angular-translate/commit/225f4568db154c2a7978418149514cd188abda34\nI dont know if it makes sense to add this feature to the lib. The way that I did, if the translationId exists in the object, it returns fine, otherwise it tries that crazy algorithm that I dont know the name, but for us makes a lot of sense. \nAdded some tests as well.\nBasically, what we did is this:\n- each page has its own context for translation, eg: projects.\n- in this page we can then have a ok button, eg: projects.ok\n- in another page we can have an ok button as well, eg profile.ok\n- we can then create a translationId as ok\n- if we wish to customize the translation in the projects page, we could do it, by translating projects.ok.\nWe can even support some more crazy customization, like some custom dynamic modifier. I did not test if a dynamic modifier would work, or how it could work in an angular app. But in theory, it may be possible for me to do something like: github.projects.ok, anotherOrganization.projects.ok. Not my requirement right now, so I did not test if there is a way to do something like that in angular.\n. ",
    "aralroca": "Thanks!\n. ",
    "ghostd": "Sorry for the noise.\nI'm preparing a PR for the tests.\n. ",
    "Myrdivar": "Sure, here it is:\nhttp://plnkr.co/edit/Z69W7dyPNMHBLJGMchCI?p=preview\nGo to page two, change the language and you'll see only one alert. Select page one and then two again and when you change the Language you'll see two alerts.\n. ",
    "nehero": "Oh I totally do! I use the built in filters for all of the views to display to users. \nHowever, I also have a feature that includes sending out an email with dynamic data, but prefixed by some of the titles in my translation file. There are quite a few so I was looking for a way to streamline the process instead of typing out a long array as the $translate() argument.\n. ",
    "cthrax": "So is there any movement on this? Do you need something else from me?\n. @tspaeth $translate is not available during the config stage, only $translateProvider. The \"use\" method of $translateProvider returns the private variable $uses, which is set by \"use\". If one is detecting the language, then $uses is not set until $translate is instantiated, so the \"preferredLanguage\" is calculated, but the $translateProvider does not expose that preferred language, likely due to the fact that it may not be the language used based on available translations.\nSo in short, no it does not return values at config time.\n. @tspaeth ah, I am/was using an old version I guess. This appears to have fixed what I wanted. https://github.com/angular-translate/angular-translate/commit/6014a813c6495b2a2d86215acdc2f4b8d690487b\nThanks for pointing it out and I retract my PR.\n. ",
    "feimosi": "Thanks for the response, so how can I set up angular-translate to be more consistent? \n\"the promises won't get rejected with a String input value\" I'm not sure what do you mean by that. I always pass a string, either alone or in an array, and the first case can fail.\n. Ok, you're right here. It's not that obvious what to do with collections, but in my case I had only one-element array which should fail, am I right? Also how can I determine which translation failed inside the promise-success callback? I think it'd be better if those not found properties were nulls/undefined inside the returned object.\n. So basically I cannot determine which translations are missing and which are valid.\n. Perfect, thanks for the information.\n. I understand, thanks for letting me know.. ",
    "fenyiwudian": "yeah.1.3 stream's angular-cookies works well,thank you.\n. ",
    "vinkaga": "My main issue with SlexAxton/messageformat.js is that it may not be supported well. No, I don't have any experience with it but it seems to have the same API.\n. Never mind, I got it. I just did\nJavaScript\nvar translations = require('../i18n/locale-en.json');\nand used translations for assertions. :)\n. ",
    "dpogue": "messageformat.js also requires the use of unsafe-eval if you're using Content Security Policy\n. ",
    "eemeli": "Piping in here as a messageformat.js co-author. Its development and support continues actively, as it has over the past few years. The extended pause in production release updates last year was due to slowness in getting our docs updated; that's now happened with messageformat.github.io.\nI noticed that it looks like this project is using a version of messageformat.js that's three years old and 209 commits behind our latest release, 0.3.1. We're currently in the middle of another major update (SlexAxton/messageformat.js#138), and it might be a good time to consider updating directly to that; it provides improved multi-language support, better pre-built module output, and easier-to-use custom formatting functionality. This also happens to be a really good time to express any wishes you might have about the library's interfaces.\nThe unsafe-eval use is unfortunately a requirement for how messageformat.js operates when generating translation functions -- the whole point of the tool is to take in an ICU MessageFormat string and output a corresponding JavaScript function. If you'd like to limit that, messageformat.js can be used as a preliminary stage in a build tool, outputting the source code of an AMD/CommonJS/ES6 module of your strings that can then be e.g. stored to disc for inclusion in later compilation stages.\n. Ah, hadn't noticed that you had a canary branch that dropped references to the module with the v0.1.6 dependency.\nIt looks like the only calls you make to the messageformat.js API are $mf = new MessageFormat(lc) and $mf.compile(string), and those aren't going to change even with the latest proposed update -- it's only messing with more complex features.\nI think I'll also put together a quick PR for a slight change in you messageformat.js output caching; it's a bit sub-optimal atm.\n. Yes, exactly that would be my recommendation, as now made in PR #1432. Essentially, the messageformat.js .compile() method is a relatively heavy operation, and the way the library's commonly used, the same compiled function may well get called multiple times. If you have an ability to cache it, you should do so.\n. The API has changed a bit, but assuming that this comment is still accurate in its description of how you use it, no changes should be needed.\n. ",
    "danielwegener": "Which essentially excludes everyone using proper CSP (unsafe-eval somehow defeats its purpose)? Too bad. . ",
    "svikasg": "A particularly hacky way to try and get this to work is,\n$translateProvider\n  .determinePreferredLanguage( )\n  .registerAvailableLanguageKeys( [ 'en', 'uk', 'de' ], {\n      us: 'us',\n      uk: 'uk',\n      de: 'de'\n   } )\n  .useStaticFilesLoader( {\n     prefix: '/localization/i18n/',\n     suffix: '.json'\n   } )\nYou end up creating a dummy language 'uk', but for my particular case it would require changing the in-use en_uk to uk_uk  and also change service requests ( which bring in region specific data ).\nI was hoping for a second level of linking for same language to load different files. \nBut I shall try and follow your recommendation for fallback languages ( which I do have currently ).\n. I've tried using the language codes en_US and en_GB. These still default to the same en.json file instead of the their individual files (us.json and gb.json).\n. Use of determinePreferredLanguage() here seemed to default fetching the en.json file for regions en_GB, en_US. I had the app use $translate.use( langKey) on load based on current locale and it fetches appropriate JSON files now. \nAs for the use of different JSON files for same language based on determinePreferredLanguage(), I will have to look a little further to see what wrong I was doing ( or my thinking of determinePreferredLanguage and its usage for same language ) or if its really an issue.\n. ",
    "HoplaGeiss": "I got a little confused with the docs. \nI didn't look in asynchronous loading.\nThanks\n. ",
    "khwerhahn": "Thx for the answer. The strange thing is, that the Umlaute work everywhere else perfectly fine. Its just the inputs placeholder don't seem to work:\n<input type=\"text\" name=\"position\" id=\"position\" placeholder=\"{{ 'SIGNUPFORM.INPUTS.POSITION.PLACEHOLDER' | translate }}\" ng-model=\"position\" />''\nA \"normal\" paragraph for example works without a problem:\n<p><translation translate=\"ANALYTICS.INFOSTATE.THIRDPARAGRAPH\"></translation></p>\n. ",
    "skovalyov": "@tspaeth You are right. But there are interpolateParams, preText, postText and translateNamespace already there from this directive. And I am not insisting that my solution is right, but what would be the other way to get the specific element translationIds from another directive? The reason I need it is mentioned in the commit comment - I am creating a sort of inline translation tool for the project where we use angular-translate and I would like to share IDs without ID duplication or duplicating the same code for extracting those from the angular-translate which would be also not reliable when angular-translate evolves further.\n. My inline translation tool directive now starts like this:\njavascript\nreturn {\n  restrict: 'A',\n  link: function(scope, element, attrs) {\n      var onClick = function(event) {\n        event.stopImmediatePropagation();\n        var translationId = attrs.translate;\n        ...\n        ...\n        ...\nSo basically I'm getting translation ID from translate attribute only. But it is only one of the option provided by angular-translate. And I would like to support all options. But then I need to duplicate a lot of angular-translate code including translation IDs interpolation, both in the element text and attributes. It is of course possible, but does not seem to be a reliable solution. That's why I consider there should be some nice way to share translation ID from angular-translate translate directive.\n. Ok, I see. Probably I need to find an alternative way to achieve the goal behind this proposed change.\n. ",
    "unsaluto": "About the own loader, I'd like to use it but I also want my default values (in .json files) to be loaded immediately, without waiting for the REST call response.\nAbout the second method, this is interesting, but how can I use it to override the translation tables I have (say en_GB, it_IT, pl_PL) ?\n. Currently I have \"default\" data stored in JSON file, I'm able to read it and this is pretty awesome. BUT: upon a REST call that I'd fire later, some of the values should be overridden.\nExample:\nAt the beginning (.conf) I load the following JSON files via static files loader:\ni18n/locale-en_GB.json\njavascript\n{\n    \"market.marketplace.title\": \"Marketplace\",\n     \"market.marketplace.descr\": \"Here is a description\",\n     \"market.available.items\": \"Available items\"\n}\ni18n/locale-it_IT.json\njavascript\n{\n    \"market.marketplace.title\": \"Marketplace\",\n     \"market.marketplace.descr\": \"Ecco una descrizione\",\n     \"market.available.items\": \"Oggetti disponibili\"\n}\nVery nice, values are loaded IMMEDIATELY. And I want to keep things like this.\nNow, the rest call returns this data:\nREST Call response data:\njavascript\n{\"en_GB\", \n        {                   \n           \"market.marketplace.title\": \"ENGLISHTITLE\",\n           \"market.marketplace.descr\": \"ENGLISHDESCR\"\n        },\n    },\n    {\"it_IT\", \n       {\n           \"market.marketplace.title\": \"ITALIANTITLE\",\n           \"market.marketplace.descr\": \"ITALIANDESCR\"               \n       }\n    }\nWhat I want is that translation tables values get overridden. So my translation tables should look like this now:\n(English table)\njavascript\n{\n    \"market.marketplace.title\": \"ENGLISHTITLE\",\n     \"market.marketplace.descr\": \"ENGLISHDESCR\",\n     \"market.available.items\": \"Available items\"\n}\n(italian table)\njavascript\n{\n    \"market.marketplace.title\": \"ITALIANTITLE\",\n     \"market.marketplace.descr\": \"ITALIANDESCR\",\n     \"market.available.items\": \"Oggetti disponibili\"\n}\nI managed to create a custom loader that loads the new values, but I can't have this custom loader work in conjunction with the static files loader (which I want to keep, if possible). \n. So that's not possible. Got it.\n. People may want to see labels as they prefer. It's a configuration matter. So if I (developer) say that the title of a page should be \"Marketplace\" in English and \"Marketplace\" in Italian, an italian user may want to change the italian label in \"Mercato\", and leave the english label as it was. This configuration will be applied only for THIS user, while all other users will keep seeing \"Marketplace\" in both languages (unless they, in turn, change the labels as they want). So the REST call is used to get the user's language configuration.\n. ",
    "oktay89": "@knalli Just updated to 2.8.1 - same issue:\nspan class=\"col-md-2 pageTitle\" translate-cloak=\"gross_yield.OVERVIEW\"></span\nAfter page load and translation complete, translate-cloak class still doesnt get removed as class from my element, so it still says invisible\n. This is the key that is getting translated through the key-value pairs in my .json files.\n. I use ui-router and on \"$stateChangeSuccess\", i load the .json file in the correct language for the selected state like this:\n$translatePartialLoader.addPart(module, $translate.use());\nAfter that:\n$translate.onReady() gets called from angular-translate-cloak.js\nand this function calls removeCloak(), which should remove the css class translate-cloak from all elements with translate-cloak=\"key\" directive.\nRemoving class from the html elements, thats what fails in my Angular application\n. Great, your fix in 2.9.0 solved the problem. Thanks!\n. ",
    "myonara": "You're right. I made a mistake in the language files. Now it is working.\n. ",
    "leye0": "Using this attribute made my page crash. I have this version:  \nangular-translate - v2.6.0 - 2015-02-08 \nAdding translate-cloak attribute (replacing translate with translate-cloak)\nprevents the resource from being translated, so I guess I'm using the wrong\nversion?\nFor other propositions to prevent FOUCs, I prefer my solution of using\nAngular's preLink and postLink feature. css(opacity, 0), then in\napplyTranslation: css(opacity, 1). Almost just two lines.\nOn Tue, Oct 6, 2015 at 6:00 PM, Jan Philipp notifications@github.com\nwrote:\n\nPlease have a look at our a Guide about FOUC\nhttp://angular-translate.github.io/docs/#/guide/12_asynchronous-loading%23asynchronous-loading_fouc---flash-of-untranslated-content,\nas well the translate-cloak directive\nhttp://angular-translate.github.io/docs/#/api/pascalprecht.translate.directive:translateCloak\n.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1246#issuecomment-146014829\n.\n. - Oops, I should have removed this phrase. Actually, It just prevents the\n  translation, but it doesn't crash.\n- Ok, I will update. My version contains translate-cloak, but maybe I'm\n  experiencing other bugs, then.\n- :P I'm still curious to know who really wants to see this element during\n  the time it is not translated. I'll check your code to see how you are\n  hiding the item without just affecting the style.\n\nOn Tue, Oct 6, 2015 at 6:28 PM, Jan Philipp notifications@github.com\nwrote:\n\nFollowing remarks:\n- Crash?! We would like to see this!\n- The current release is 2.8.1. Please consider an update. Also 2.6\n  has followed patch releases...\n- No, a css hack in the main directive is not a proper solution.\n  Sorry. ;)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1246#issuecomment-146020176\n.\n. The issue with the raw HTML showing with bindings is nicely solved using\nng-cloak on the ng-app DOM element. The only issue I had is with my\ntranslation keys showing. And my final question was about why\nangular-translate was not just hiding the DOM element in preLink and\nshowing it in applyTranslation using the opacity css property. I'm starting\nto wonder if placing the translation in an attribute would solve my issue,\nthough the \"collapsing\" effect of empty DOM elements would impact the\nlayout much more than just applying opacity 0 -> 1, which doesn't affect\nthe layout.\n\nOn Wed, Oct 7, 2015 at 3:40 AM, Jan Philipp notifications@github.com\nwrote:\n\nTake also into account: ng-cloak and translate-cloak.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1246#issuecomment-146102808\n.\n. \n",
    "asafse": "Thanks for the quick response.\nI'm managing all of my modules over JSPM - working with bower, github and npm.\nI tried running 'sudo jspm install bower:angular-translate-storage-local' and got same error.\nIs there a workaround?\n. Thank you so much knalli!\nI've omitted the 'npm' and let JSPM install lead the way - it solved it.\n. My server side is Rubi On Rails.\nI find this issue only with these JSON files while resources such as images, css etc are always being updated - what is the difference?\nIs there a best practice to approach this issue?\n. ",
    "Nehon": "Found out that there is a determinePreferredLanguage() method that finds what language to use depending on the browser setting (strangely enough it can return different things than localeProvider, but it's consistent with the browser settings).\nBut it has the same issue, use() returns en_US\n. ",
    "S8nsick66": "I did some testing, maybe the next googler will save some time with this info.\nDoesn't work (the label is not translated):\njavascript\n<label translate>My label</label>\n<label><translate>My label</translate></label>\n<label>{{ 'My label' | translate }}</label>\nWorks but is deprecated and doesn't look as nice:\njavascript\n<md-select-label>{{ 'My label' | translate }}</md-select-label>\nWorks and looks nice (until a value is selected) but is without a label element:\njavascript\n<md-input-container>\n  <md-select ng-model=\"selectedState\" placeholder=\"{{ 'My label' | translate }}\">\nBest:\njavascript\n<md-input-container>\n  <label>{{ 'My label' | translate }}</label>\n  <md-select ng-model=\"selectedState\" placeholder=\"{{ 'My label' | translate }}\">\nPlunker: https://embed.plnkr.co/aRD0aTljBc7846suJNGC/\n. ",
    "rhclayto": "Check out this issue in Angular Material's queue: https://github.com/angular/material/issues/8781\nI solved this problem with a little hint from DevVersion over there.\n. ",
    "baroudihassan": "It's Ok. My json files was invalid ! \n. ",
    "wtreur": "I'm having the same issue. I've added an isolated test in a local copy of translate.spec.js to confirm:\n```\ndescribe('$translate#use() with language negotiation and fallback', function () {\nbeforeEach(module('pascalprecht.translate', function ($translateProvider) {\n      $translateProvider\n          .translations('en', { 'WELCOME': \"Welcome!\"})\n          .translations('nl', { 'WELCOME': 'Welkom!' })\n          .fallbackLanguage('en')\n          .determinePreferredLanguage(function () {\n              // mocking - copied from translate.determineLocale.spec.js\n              var nav = {\n                  language: 'de'\n              };\n              return ((\n                  nav.language ||\n                  nav.browserLanguage ||\n                  nav.systemLanguage ||\n                  nav.userLanguage\n                  ) || '').split('-').join('_');\n          });\n  }));\nvar $translate;\nbeforeEach(inject(function ($translate) {\n      $translate = $translate;\n  }));\nit('should use the fallback language when an unavailable language is provided', function() {\n      expect($translate.use()).toBe('en');\n  });\n});\n```\nResult from grunt test\nChrome 46.0.2490 (Mac OS X 10.11.0) pascalprecht.translate $translate#use() with language negotiation and fallback should use the fallback language when an unavailable language is provided FAILED\n    Expected 'de' to be 'en'.\n        at Object.<anonymous> (/Users/wtreur/Development/angular-translate/source/test/unit/service/translate.spec.js:567:36)\nChrome 46.0.2490 (Mac OS X 10.11.0): Executed 391 of 391 (1 FAILED) (2.155 secs / 2.005 secs)\nWarning: Task \"karma:unit\" failed. Use --force to continue.\n. By the way, using the following setup for $translationProvider the test will pass:\n$translateProvider\n  .translations('en', { 'WELCOME': \"Welcome!\"})\n  .translations('nl', { 'WELCOME': 'Welkom!' })\n  .fallbackLanguage('en')\n  .preferredLanguage('de'); // Manually setting preferred language to 'de' instead of negotiation\n. @tspaeth I see your point and now I come to think of it, I think the issue I described in the test is perhaps related, but not the same. What do you think?\n. I see! And since you can either provide all the translations during the configuration or using lazy loading you can't actually 'know' beforehand what language is actually available with $translate.use() as well.\n(Perhaps this bit below needs to be asked at stackoverflow)\nSo if I understand correctly, during runtime, there is no way to determine if a negotiated language using determinePreferredLanguage() is actually available. Given your example I figured 'available language' == At least 1 translation for that language is available\n. As to answer the question myself, using the setup below I am able to accomplish the same thing as using .fallbackLanguage('en') and receiving that language with $translate.use(). I'm not sure if it is supposed to be used like this, but it works for me and perhaps is suitable for you as well @elmalto\n$translateProvider\n    .translations('en', { 'WELCOME': \"Welcome!\"})\n    .translations('nl', { 'WELCOME': 'Welkom!' })\n    .registerAvailableLanguageKeys(['en', 'nl'], {\n        'en_*': 'en',\n        'nl_*': 'nl',\n        '*': 'en'\n    })\n    .determinePreferredLanguage()\nNow, when the browser has de_DE as language setting $translate.use() will return en while nl_NL as browser language will still result in nl\n. ",
    "abou-emish": "I will be more specific, the ASP.NET MVC bundling is just a tool for CSS and JS minification, when i enable bundling i got this error in my AngilarJS application\nModule 'pascalprecht.translate' is not available! You either misspelled the module name or forgot to load it. If registering a module ensure that you specify the dependencies as the second argument.\ni faced this problem before in my AngularJS controller, the reason is common with JS Minifiers, Minifiers will shorten identifiers where possible, they won't modify any string literals in your code. The idea is to provide the dependency names as a separate array of strings which will survive the minification process. My favorite approach to pass this array to the constructor function is through the $inject property.\n. I'm not sure, maybe the plugin should use dependency as mentioned in my previous comment in its inner code. \n. Dear,\ni was using the plugin file that is already minified \"angular-translate-min.js\" i replaced it with the original one because some people reported that minification of a minified file may cause issues , and the problem is gone, and the plugin is working fine.\nBut, after adding \"storage-cookie.js\" to my application i faced a new problem\njavascript\nUnknown provider: nProvider <- n <- $translateCookieStorage <- $translate\nThe problem solved by applying the concept i mentioned in previous comment\n\nProvide the dependency names as a separate array of strings which will survive the minification process\n\ni changed the way the factory is defined in \"storage-cookie.js\" file.\n``` javascript\nangular.module('pascalprecht.translate')\n/\n * @ngdoc object\n * @name pascalprecht.translate.$translateCookieStorage\n * @requires $cookieStore\n \n * @description\n * Abstraction layer for cookieStore. This service is used when telling angular-translate\n * to use cookieStore as storage.\n \n */\n  .factory('$translateCookieStorage', ['$cookieStore', function ($cookieStore) {\n  'use strict';\n\n  var $translateCookieStorage = {\n\n      /**\n       * @ngdoc function\n       * @name pascalprecht.translate.$translateCookieStorage#get\n       * @methodOf pascalprecht.translate.$translateCookieStorage\n       *\n       * @description\n       * Returns an item from cookieStorage by given name.\n       *\n       * @param {string} name Item name\n       * @return {string} Value of item name\n       */\n      get: function (name) {\n          return $cookieStore.get(name);\n      },\n\n      /**\n       * @ngdoc function\n       * @name pascalprecht.translate.$translateCookieStorage#set\n       * @methodOf pascalprecht.translate.$translateCookieStorage\n       *\n       * @description\n       * Sets an item in cookieStorage by given name.\n       *\n       * @deprecated use #put\n       *\n       * @param {string} name Item name\n       * @param {string} value Item value\n       */\n      set: function (name, value) {\n          $cookieStore.put(name, value);\n      },\n\n      /**\n       * @ngdoc function\n       * @name pascalprecht.translate.$translateCookieStorage#put\n       * @methodOf pascalprecht.translate.$translateCookieStorage\n       *\n       * @description\n       * Sets an item in cookieStorage by given name.\n       *\n       * @param {string} name Item name\n       * @param {string} value Item value\n       */\n      put: function (name, value) {\n          $cookieStore.put(name, value);\n      }\n  };\n\n  return $translateCookieStorage;\n\n}]);\n//$translateCookieStorageFactory.displayName = '$translateCookieStorage';\n```\nI think this way of definition should be used in every where in the plugin code.\nWhat do you think ?\n. ",
    "charumaheshwari": "Is there any update on this issue? As this is a valid scenario which is happening. As far as css and js is concerned, caching doesn't happen for them because those files are minified and versioned again. \nConsidering above statement, the solution is to do versioning of the json files too? Please confirm. ",
    "Heinerion": "+1\n. The package would be published as silintzir:angular-translate, where silintzir is the name of @silintzirs Meteor Account.\nIf you'd like to see your name, you'd need to register to meteor.\nAfter that you could release the package as knalli:angular-translate or angular-translate:angular-translate. Whatever name you chose for your account.\n. I'm sorry, I got the question wrong.\nI have to admit I didn't pay really much attention to @silintzir s package.js, I would just love to include the real and up-to-date angular-translate package in meteor.\nThe idea would be to ship the generated js file unminified as package.\nNot the sources, but the already built script.\nIn a meteor project, this file would be used unminified while debugging and would be minified with the rest of the application in production mode.\nIf I misunderstood your questions again, please refer to Angular-Meteor and find the headline Solution 1\n. Alright, thanks for your effort anyway!\n. ",
    "suomiton": "Now I had the time to try this again and figured out it was the RequireJS and Angular-translate that had some conflicts. When I removed RequireJS from my project everything worked fine. Although I don't understand why Angular-Translate and RequireJS does not work when loaded separately. \nHere a screenshot on how scripts are loaded \n\nAnd the ***Deps.js file is being compiled with Browserify but source looks like this \n\nIf I remove Angular-Translate or RequireJS everything works. Why is it that those scripts can't co-exist on same page? \n. Also noticed that if I load require.js dependency after the Angular components the site works. Though it might raise some other issues.\n. ",
    "moshen": "Oops, missed that.  I'll close and create a new PR.\n. :beers: Thanks!\n. ",
    "pratik14": "@mattlavallee  you need to include ngSanitize module to get this working. \n. ",
    "mattlavallee": "@pratik14, I apologize for messing up the sample code.  In my application I am including ngSanitize and pascalprecht.translate so the missing module is not the problem\n. Thanks for clarifying @knalli \n. ",
    "iJungleboy": "You are awesome :)\n. @ahmeij I've also been looking into transifex. So far I was able to use a kind of manual import to then compare & evaluate how much is translated, but it doesn't feel quite right yet. They have some kind of scripts you could also run to sync with github, I'll have to do some testruns to see if it can cover the entire process like that. \n. For anybody else trying to find a temporary workaround, my solution is to keep a comma-separated list of keys for all items I need to forward to TinyMCE, and then loop through these to lookup the translations and then forward them to TinyMCE. Not perfect, but works and keeps all my translations in one place.\n. Very cool :). I'll test it within the next few weeks. \n. To anybody who is interested - here's how I used the angular-translate table to translate TinyMCE in 2sxc\n``` javascript\n    // Initialize the tinymce resources which we translate ourselves\n    function initLangResources(editor, language, $translate) {\n        var keys = [], mceTranslations = {}, prefix = \"Extension.TinyMce.\", pLen = prefix.length, primaryLan = \"en\";\n    // find all relevant keys by querying the primary language\n    var all = $translate.getTranslationTable(primaryLan); \n    for (var key in all)    \n        if (key.indexOf(prefix) === 0) \n            keys.push(key);\n\n    var translations = $translate.instant(keys);\n\n    for (var k = 0; k < keys.length; k++)\n        mceTranslations[keys[k].substring(pLen)] = translations[keys[k]];\n    tinymce.addI18n(language, mceTranslations);\n}\n\n```\n. ",
    "rwberendsen": "Actually, the issue is a misnomer. To get a minimal example that showed the erratic behaviour, I needed to include a dependency: angular-material. And, the issue also arises with attributes that do not have a hyphen. Instead, I now suspect it has something to do with an interaction with angular-material stuff. See: http://embed.plnkr.co/5WsEmKQ3gnGWnzSR7w6k/preview\n. Perhaps, the issue should be closed, since what I am trying to do, in fact, is using a translate directive inside somebody else's directive (angular-material, in this case). Perhaps mixing directives in one element does not work in general?\n. Closing issue, since it is incorrectly formulated.\n. ",
    "5y": "Hi,\nThank you for your suggestion.\nI following up this topic with Angular main Repo, and if there is an solution for working on the l10n-fa i'm interesting for working on it :)\nBests,\nReza\n. ",
    "Gaurav-Ambasta": "@PascalPrecht  I am using translate Partial Loader to load my json files. Also below is the sequence of execution  :\n      $translateProvider.preferredLanguage('en-us');\n      $translateProvider.useCookieStorage();\n      $translateProvider.useLocalStorage();\n      $translateProvider.uniformLanguageTag('bcp47').determinePreferredLanguage();\n      $translateProvider.fallbackLanguage('en-us');\nThe error which it is throwing  \"Failed to instantiate module ../.../en-US.json due to \" Module is not available.\n. To get rid of the error \"Failed to instantiate module ../.../en-US.json\" which occurs while executing test cases, the custom loader seems to be working. But after adding the custom loader in before Each, other set of unit test cases are breaking which are mostly related to Unexpected request and some expectation failure. Can you please suggest  ??\n. @Knalli Thanks for your response , I went through the shared link , However , adding the custom loader does help to resolve 'failed to instantiate .. en-us.json ' errors but how to resolve other unexpected request errors.\nAlso I am calling a service in angular run block in order to determine the language and using $translate.use() to set it up. This is also causing my unit tests to fail. Any pointer / suggestion is much appreciated !!\n. sorry ,its a typo..\n. ",
    "Zero-Hassan": "I noticed that when using translate as directive there are a lot of watchers in the element where it is. but using it as filter, there are zero watchers.!!. ",
    "Tudes": "I'm not sure, but I think I had the same problem. Can you change sanitize to escape\n. ",
    "SamVerschueren": "If you use escape, it will be printed like this\nCities &amp;amp; Suburbs\nNot sure why sanitize isn't working when using the filter. Is this a bug or is it by design? Experiencing the same issues.\n. ",
    "adeopura4": "Hi  artuska - Could you clarify what is the impact of changing the sanitize strategy?. ",
    "jgsacris": "That is strange, I have the same version of Chrome but 32-bit and I get:\n[\"en-US\", \"en\", \"de\", \"es\"]\n\"window.navigator.language\" returns \"de\" though.\n. You are right! Indeed the order of the languages on the settings is the order of the languages array of the navigator. Still I find strange that the language attribute returns \"de\", the language of the chrome interface is german and I still get an english website, but I guess if thats the preference that the user set it should be OK!\nThanks\nSent from my iPad\n\nOn 02 Nov 2015, at 14:54, Thorsten Sp\u00e4th notifications@github.com wrote:\nHow do your chrome settings look like?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "fabritw": "https://angular-translate.github.io/docs/#/guide/08_fallback-languages\njavascript\n$translateProvider\n    .registerAvailableLanguageKeys(['en', 'de'], {\n      'en_*': 'en',\n      'de_*': 'de'\n    })\n    .fallbackLanguage('en')\n    .determinePreferredLanguage();\n. ",
    "marcelorio": "Thank you for the fast reply knalli.\nIndeed the isReady() inside the onReady() is a bit redundant. I only used it as a test to see if it would show up in the console, and it does, but the translation isn't loaded. \n. I was using $translateProvider.preferredLanguage, but taking it from the code did not solve the problem..\n. ",
    "matikun86": "I don't know if it's the same cause but I was using $translateProvider.preferredLanguage and I think that was firing the onReady callbacks. I removed that line and onReady fired correctly (at least the first time)\n. ",
    "sovattha": "Thank you for your answer, but it does not help or maybe it is only part of the solution.\nI get the same result.\n. I did search for a matching example using the $translateStaticFilesLoader but none of your examples uses it.\n. It does, thank you and it is the same code I already copied :)\nBut I am looking for a working example. I am struggling here with my example. Do you see what I am missing in my code above?\n. Thank you knalli, yes in a way, you are right. I try to test too much things in the same test.\nI will follow your guideline. Thanks!\n. ",
    "mladenp": "I think you have the same problem as me. It seems language is not switched if content is in different controller. \n. ",
    "snowcxt": "Here's the index.html:\nhtml\n<script src=\"bower_components/angular/angular.js\"></script>\n<script src=\"bower_components/angular-cookies/angular-cookies.js\"></script>\n<script src=\"bower_components/angular-translate/angular-translate.js\"></script>\n<script src=\"bower_components/angular-translate-loader-partial/angular-translate-loader-partial.js\"></script>\n<script src=\"bower_components/angular-translate-storage-cookie/angular-translate-storage-cookie.js\"></script>\n<script src=\"bower_components/angular-translate-storage-local/angular-translate-storage-local.js\"></script>\nthe bower.json\njson\n\"angular\": \"~1.4.7\",\n\"angular-cookies\": \"~1.4.7\",\nand also I remove the bower_components folder and runbower install\nthe app.js\njavascript\nangular\n    .module('app', [\n        'pascalprecht.translate',\n        'ngCookies',\n        // something else ...\n    ])\nIs there anything else I have to check?\n. I went into the bower_components folder and check the package.json of angular and angular-cookies. They are version 1.4.7\njson\n  \"name\": \"angular\",\n  \"version\": \"1.4.7\",\n  \"description\": \"HTML enhanced for web apps\"\njson\n  \"name\": \"angular-cookies\",\n  \"version\": \"1.4.7\",\n  \"description\": \"AngularJS module for cookies\"\n. BTW, I just degraded to use angular-cookies 1.3. Now everything works.\njson\n\"angular\": \"~1.4.7\",\n\"angular-cookies\": \"~1.3.20\",\n. Can you send me the link?\n. It works for me. Do you have any recommendations for me to clean the local cache?\n. ",
    "dvisockas": "Frankly, I just copied and formatted this info from http://angular-translate.github.io/docs/#/guide/00_installation\n. It is usual that libraries have their installation instructions in their Readme, so people wouldn't have to click and search.\nBut it's your repo, your rules ;)\n. ",
    "ahmeij": "I found https://www.transifex.com yesterday, it seems they offer exactly the management of the translation files, the json format used by angular-translate is supported.\n. ",
    "mwz": "Having $translate.instant() accepting a null sanitization strategy would be useful, alternatively calling $translateSanitization.sanitize(value, mode, \"null\") would also work for me.\nI've been using the following as a workaround:\n$translateSanitization.useStrategy(null);\nvar translation = $translate.instant('KEY');\n$translateSanitization.useStrategy('escape');\n. ",
    "RenaldasK": "+1 Having same issue\n. ",
    "wlepinski": ":+1: \n. ",
    "stianlp": "Nevermind...\nWhen you think you've read all the docs, and then after writing a wall of text, you find registerAvailableLanguageKeys method....\nMark this as solved. My bad.\n. ",
    "tjad": "So was anything ever written or published ? \n@knalli your response is rather distorting - asking the community to contribute without providing support (and closing the issue with essentially nothing done). Most unattractive.\n. @knalli I am a bit unsure now, are you stating that I shouldn't develop this as a part of the staticFilesLoader module ? \n. I have been following the documentation to get the code down - it's running with all tests passing and have looked into the staticFilesLoader module. My initial thought was to include support for yaml there - as it might become a preferred method of maintaining static files for translations.\nI am busy converting my padrino application into angular and have now hit i18n, angular-translate is great, however doesn't support YAML, which currently all our translations are in. Objectively looking at this, padrino has a nice style of maintaining i18n files ( specifically the loading of yaml files http://padrinorb.com/guides/localization/ )\nThe transformer sounds good in terms of modularization - so perhaps I'll go that route that it wont involve changes to the core code.\nApologies for the above, I don't understand the just of the conversation - and am not allowing it to become an impediment.\nAnd thanks for your response!\n. The implications of including this into the core, are that I would take the route of using js-yaml, which probably wont be acceptable - as you stated, you can't include every bit of code that may fulfill a use-case, will point to the solution from here.\n. I eventually decided to use a more javascript friendly storage format for my translations, cson, a coffeescript json variant that transpiles to pure  json  which has supporting grunt utilities grunt-cson, this gives the syntax similar to YAML that I was looking for without the requirement of causing the client to include a YAML parser.\nI further added code to flatten my structures so that the nested object keys become concatenated into one separated by . implemented as suggested using a custom loader.\nThanks for your pointers @knalli, - What an awesome module! Srsly!\n. ",
    "ppollono": "Well I found 2 solutions for this:\n- Decorate the $translateProvider with a getter/setter of my appLanguages \n- Using constants. \nMaybe will be a nice add to angular-translate since he is responsable of the internationalization of my app.\nThanks for the answer. :+1: \n. ",
    "weldelmongi": "pour r\u00e9soudre ce probl\u00e8me il faut lors de la config du module d'ajouter cette ligne\n $translateProvider.useLoaderCache(true);\n. i have face this bug and i have solve it ,as i mentioned before in french language ,so\nto solve the problem i have configure the  \" $translateProvider\" to use the cash by adding this line of code when making the configuration of the module :\n$translateProvider.useLoaderCache(true);\n. ",
    "niaher": "It's a bug. Please check the pull request #1674 \nIf the same part is requested multiple times in quick succession, then multiple parallel HTTP requests will be fired. The fix here, makes sure that there's only 1 HTTP request per part.. ",
    "toxidev": "Hello!\nI'm not an expert, but I think you can try this <h1 translate=\"some.key\"><h1/>\n. ",
    "vlasenko": "@knali I want to prevent flow of untranslated content. Translate-cloak DOES NOT completely prevents this, because it doesn't wait until all translation futures on a page get resolved. To reproduce this in JavaScript debugger set the breakpoint at the end of removeCloak funtion in angular-translate and at the end of angular.js $digest method, refresh a page and when debugger stops in removeCloak press continue, when debugger stops in the end of $digest method you should see FOUC. This is not expected behavior from angular-translate because translate-cloak is supposed to prevent FOUC, why else is it needed?\n. > Anway: What about specifying an additional translationId within translate-cloak? Does this work for you?\nNo, I still see untranslated keys after the finish of first $digest cycle.\n\nAlternatively, you can use <h1 translate=\"some.key\"></h1> which will render only AFTER the first resolving (so no FOUC)\n\nThis somewhat works, but I don't see such elements in the DOM after the end of first digest, so I suspect there will be some page element jumping issue when they appear, but I'm not sure.\n. Again what I want is FOUC issue prevented completely, e.g. I don't show the region of page protected by say translate-cloak until it's fully ready.\n. Yes, I'm using dynamic and static translations at the same time. Thanks for the pointer! So the workaround for me is to completely switch to static translations for now?\n. Yup, understood, thanks.\n. @knalli Thank you. I'm going to play with this version during next 2 days and will let you know how it goes.\n. @knalli It doesn't solve my issue, though it might work better then before. My issue is I want to prevent completely even for a nanosecond time showing of untranslated keys by web browser. To reproduce this in JavaScript debugger set the breakpoint at the end of removeCloak function in angular-translate and at the end of angular.js $digest method, refresh a page that contains async translation keys and when debugger stops in removeCloak press continue, when debugger stops in the end of $digest method you should see FOUC. This is not expected behavior from angular-translate because translate-cloak is supposed to prevent FOUC.\nThe plunkr provided does not completely simulate the described problem. \n. Why to reproduce it using plnkr at all? The steps to reproduce involve JavaScript debugger. It's easy to reproduce it this way.\n. Well, I can show you a demo in a plunkr, but reproduction will still involve JavaScript debugger. If it will suffice you, then I will prepare it. I understand that you want to get rid of JavaScript debugger to work with this issue, it will be much more convenient to you, but this will require some time from me to investigate deeply angular and angular-translate to have clear understand what's going on wrong and I have no time right now to do this and the issue is not so important for me. It will be nice to have it sorted out but without major time investments.\nI disagree about timings. The thing is if translate-cloak is working properly there should be no moment when browser shows untranslated keys, but right now there is clearly such a moment at the end of first angular digest cycle, when cloak is removed.\n. Yes\n. Yes, I think so too. Thank you!\n. ",
    "LoicMahieu": "I'm late!\nMy purpose is only to allow us to use both a missing handler and the default text.\nI needed to add logic on default translation and return a modified version.\nThis PR gives more scope to the missingTranslationHandler.\nI hope I answer your question. Thanks\n. ",
    "jimmykane": "The resolution of this by e3c20631058e393b698ed655ee47635d7bcaa837 has resulted into when an indicator is not set then the id is interpolated and sanitised opposing to the rest of the reject returns where they just call the applyNotFoundIndicators method. Also bypysses the rejection handler translateByHandler. \nI will be refactoring this so that it follows the specs of all other calls most important following sanitization strategy and regards to issues: #730 and #1297 and commit: 01fecd0efd15f153aa019fda11c4a1ecc6ab0fda to be able to resolve #1722 \nWorth to mention in order to prevent a breaking change. \n@shkrobova I need to mention as well that as discussed in #1722 with @knalli  I will provide a $sanitizeNotFound opt out for the user. \n. @knalli Using the 'escape' strategy the escaping does not really work. \nIn the above plunkr provided you can see that still, the text is bold. \nHere is a screenshot: \n\nAs you can see I edited the code, keeping the strategy and still this is not escaped. \nMaybe it's me not understanding this correct. \nLet me explain: \nI recently started working on a project that we use angular translate. We got a security audit and the security audit revealed tons of issues related to angular translate (latest version). \nWe configure angular translate to use SanitizeStrategy of 'escape', but when using it as an attribute, the content is not escaped. \nSo for example if in a controller I do this: \n$scope.unsafe = '<script>alert(1)</script>';\nand I have an element that needs to get this unsafe var translated like so: \n<td translate=\"{{ unsafe }}\"></td>\nThe alert still shows. \nWhat do you think? . Thanks a lot @knalli \nI was suspecting the same on why it does not escape in this case, but I have to admit it was not self-implied, when adding the strategy, or in the docs, thus the confusion on my side. \nRegarding user input, a lot of times you have already saved user input and other times it is for convenience. For example when you supply translations via 3rd party. You cannot trust completely the 3rd party. It's a possible attack vector as you see in this case. \nI am going to take a look and see if I am capable of sending a PR and I will notify you accordingly. \nThanks again for your time and your effort. . @knalli Fixed most of the issues on production. Hopefully tomorrow I can start with the PR. \n. @knalli I have made some progress on this. \nI see that most of not found translation id's go through the applyNotFoundIndicators. \nThat prepends and appends the missing indications if they are set. \nI am though in doubt if the 'escaping' should happen if there are indicators or if there are not indicators. \nI can understand that this feature is used to detect the missing translations for example: \n++TRANSLATION_ID++\nEscaping the translation id might cause some unwanted behaviour. \nOn the other hand, I can escape it only if there are no indicators, which I presume is the case on development setups, and that will not change the current state that users expect, but still, that content might cause an issue. \nWhat do you think? . I will provide a cleaner method fixing an inconsistency that was found in #1314 as well. How about this: \nhttps://github.com/angular-translate/angular-translate/compare/master...jimmykane:feature/interpolate_not_found_translation_ids. Any update on this ? \n. Ping\n. @knalli  Will do sir! Need some time . ",
    "wstoettinger": "thanks for your quick response! \nyes, exactly that post. that means, we have to wait, i guess. \n. ",
    "shkrobova": "Hi! Thanks for the fast commit check. Can I expect that it will be included in the next release?\n. ",
    "bezzad": "Hi, thanks for your guidance.\nBehzad Khosravifar\nOn 2 December 2015 at 00:10, Thorsten Sp\u00e4th notifications@github.com\nwrote:\n\nHi! Thanks for the fast contribution.\nfunctionally looks good to me and formally nearly perfect :-)\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/pull/1316#issuecomment-161088980\n.\n. \n",
    "uoziod": "Yes, that helped!\nThank you\n. ",
    "p1tt1": "mh... ok.\nyes can put the prefix in each translation, but this is not a good style. And I can't put the prefix in a other htlm-element, because I think this is not possible within a html-header-title.\n. This works and is a nice solution:\nhtml\n<title translate>Prefix{{TranslationID}}</title>\n. ",
    "ArnaudValensi": "I  agree, but here, the problem is that messageformat uses this to load the code:\n(function ( root ) {\n...\n})( this );\nI'm not sure about what does browserify, but if it does nothing special, this is window. Also it is why we have to load a local doing this:\nrequire('./node_modules/messageformat/messageformat.js');\nrequire('./node_modules/messageformat/locale/fr.js');\nOr, maybe there is another way to load locales without being overridden when we load angular-translate-interpolation-messageformat? \n. I tryed using browserify-shim and injecting as depency but I was not able to do it. But maybe I did it wrong. Do you have an example?\n. @patlux That's perfect!\nThank you.\n. ",
    "patlux": "@ArnaudValensi:\nUse the prerelease (v0.3.0-1) of messageformat.js. @NeverwinterMoon created a fork with the prelease:\nThe only difference is the version:\nNeverwinterMoon/bower-angular-translate-interpolation-messageformat@49e7b29dd1778cd63330ec95906bf48825a40629\n``` bash\ninstall locales\nnpm install --save make-plural\ninstall fork of  bower-angular-translate-interpolation-messageformat\nnpm install --save git+https://github.com/NeverwinterMoon/bower-angular-translate-interpolation-messageformat.git\n```\n``` javascript\nangular.module('yourModule', [\n  require( 'angular-translate' );\n  require( 'angular-translate-interpolation-messageformat' );\n])\n.config( function( $translateProvider ) {\n$translateProvider\n    .addInterpolation('$translateMessageFormatInterpolation')\n    .preferredLanguage( 'en' );\n});\n```\nSee: https://github.com/SlexAxton/messageformat.js/issues/120\n. ",
    "cleavera": "No this is more about when the requests are returned out of order and some translations are lost.\neg. P = Promise, T=Partial translation\nRequest: P1(T1), P2(T1, T2), P3(T1, T2, T3)\nResponse: P1(T1), P3(T1, T2, T3), P2(T1, T2)\nAvailable translations: T1, T2\nThen if you manually then perform another translation refresh:\nAvailable translations: T1, T2, T3\n. ",
    "cspeer": "Hi there,\nis there a release date for 2.9.2? I would really like to see this fix released soon :+1: \nThanks,\nChris\n. Well,... never mind. I don't know why I thought this would be added in 2.9.2\nThanks!\n. ",
    "amit1911": "hi, is this issue fixed? I am still facing this issue in 2.15. I am on angular 1.26 btw but using v2.15 for angular-translate. Should i be using a different version of angular translate for angular v 1.26?. ",
    "pocesar": "@knalli an example directly from my code:\nhtml\n<div class=\"titulo-sub\" translate>Um para\u00edso em meio a belezas naturais e exclusividade.</div>\nIt won't translate. By full text I mean I'm not using an ID like BEAUTY_TITLE\n@tspaeth that's just an example, my div looks like \nhtml\n<div class=\"metering\" translate>1.000.000 m\u00b2</div>\nI'm not even using ngLocale in my project\n. ",
    "kenp77": "You mean use $translateProvider.use('en_US') instead of $translateProvider.preferredLanguage('en_US') ? Yes i did but still have the same issue.\n. I created a plunk : http://plnkr.co/edit/U7xbn621mF60UgkxkXiO?p=preview\n. how come the translation works fine with  : $translateProvider.translations() even if i use the combination of \"instant\" and \".use\" ?\nYour plunks show the key \"HELLO\" when i load the page. And why you have \"hello\" two times ? \nHTML\nHello\n  <p>\n    <a href=\"#\" ng-click=\"setLang('en_US')\">English</a> |\n    <a href=\"#\" ng-click=\"setLang('fr_FR')\">French</a>\n  </p>\n  <p>{{hello}}</p>\nI think the bug is more with StaticFilesLoader.\n. ",
    "toni-moreno": "thank you very much @tspaeth , I will test this grunt task.\n. ",
    "VaibhavP17": "I had the following dependency in my bower.json -\n    \"angular-translate\": \"~2.7.2\",\n    \"angular-translate-loader-static-files\": \"~2.7.2\",\n    \"angular-translate-loader-url\": \"~2.7.2\"\nOne running the command - \"bower install\" , I get the above mentioned error. I even updated the version of these dependencies to 2.8.1 (latest) but still no luck. Can you please try installing it using bower? I don't think there is any network related issues as all other libraries are getting downloaded just fine. \n. Yes, you got that right. I executed the following command - \ngit config --global url.\"https://\".insteadOf git://\nand it worked just fine. Thanks a lot :+1: \n. ",
    "memee": "I confirm, it's working. I think it's an issue with missing fallback language json file but I cannot check it now. Sorry, could be closed.\n. ",
    "MichaReiser": "Yes, having two different directives would be the cleaner solution. But as this would be a major (breaking) change, so I don't think we can consider this as a solution. \nThe implementation checks in the updateTranslations functions if the translation id for a specific key (i think this is the attribute/element-name) is defined. Why can we not change the check to exclude everything where the check is falsy.\nbefore:\njs\nvar updateTranslations = function () {\n     for (var key in translationIds) {\n         if (translationIds.hasOwnProperty(key) && translationIds[key] !== undefined) {\n             updateTranslation(key, translationIds[key], scope, scope.interpolateParams, scope.defaultText);\n        }\n    }\n};\nafter:\njs\nvar updateTranslations = function () {\n     for (var key in translationIds) {\n         if (translationIds.hasOwnProperty(key) && translationIds[key]) {\n             updateTranslation(key, translationIds[key], scope, scope.interpolateParams, scope.defaultText);\n        }\n    }\n};\nFrom my point of view I believe that translating \"\", null or undefined is kind of useless. The translation id should always be a string (attr and also text return a string or undefined). \nOr do I miss a point?\n. ",
    "yaronguez": "Any plans to add such a feature?  Something comparable to angular.extend  that allows any module to extend the translation table without overwriting anything that's already in it would be an invaluable addition.\n. Making assumptions is what I'm trying to avoid. I want to use angular-translate to provide localized messages in my plugin. I don't want to assume whether or not the app using my plugin uses angular-translate.  If the app IS using angular-translate, I don't want my plugin to override the app's translation table. Also, if the app is using angular-translate and decides to provide its own customized set of messages for my plugin, it would be nice if they could simply add those messages to their existing translation table and my plugin would just defer to those messages.\nThis could be accomplished by an optional parameter used when loading a translation, something like use useStaticFilesLoader({files: [], merge: false});  If merge is true, the loader wouldn't replace the existing translation table, it would append to it and skip any existing duplicate entries.\nApologies if I'm misunderstanding the way this works. When I was using my own home brewed localization service, I had an addIfNotExists() method to add new translations to an existing set.\n. ",
    "tahoemph": "I originally made that change but thought it odd that the default grunt task did more test then 'test' task itself.  One thing you might consider is changing the default task to do jshint:all and karma:unit as this fits fairly close with the description of the default action in the documentation.\n. So if I pushed a delta to change messageformat from ~0.1.6 to 0.2.x that would be accepted, right?  The problem I have is that to somebody using the angular-translate it looks like you are saying that the (dirty) 0.1.6 is what is normal.  Playing version roulette by just bumping that to (for example) 0.2.2 seems wrong.  If I hadn't noticed the usage in ngdoc I probably would have assumed I was way out of line doing that.\n. I created a PR in the bower repo.  I don't think the dependency should be in the angular-translate repo as it comes through angular-translate-interpolation-messageformat or am I missing something?\n. ",
    "mr-White": "Watching eagerly. \nThe flickering of translatable ID's before the JSON dictionaries resolve are an unfortunate side-effect of what appears to be the design of angular-translate's $translate service. \nI believe it would yield a better UX if the service were to return blank strings instead of translatable ID's, when there are no available translations. That way simple implementations of the app with async loading of JSON dictionaries are not coupled with a flash of translation ID's.\nIf the service is mean't to return translation ID's to help the dev debug their app, then I hope this is changed since dev's should rely on the useMissingTranslationHandlerLog() for recording missing translation ID's\ntldr; I'm reading this thread with great interest. Ping me, if there is a way I can help\n. @knalli Thank you for the share! \n@tinyfly check out the custom error handler for dealing with the FUOC, peace ~\n. ",
    "albertytau": "Both ng-cloak, translate-cloak are not working for my ionic app.\nWithin the menu, part of the elements are translated and part are not translated.\nPlease help\n. Thanks @tspaeth, i do run my code on ionic as well. My code like what @JerryBels presented.\nIt runs perfectly on a slow device which can display after the translation function completed. However, when I run on my iPhone 6s, partial labels are translated and partial labels are not translated. It may because I have a long list of labels for translation. I try to sort my labels and move those not translated labels on the top of the list, but it does not work. How can I ensure all labels are translated before it can be displayed. Interestingly. it switches the translation if I press on the label which is a side menu item.\n. ",
    "rdesoky": "@JerryBels, make sure that you call $translate() after $translate.use(/lang_id/) returned promise has been resolved.\n. @JerryBels I am glad that I could help\n. ",
    "louisdoe": "I used \n$translateProvider.useSanitizeValueStrategy('sanitizeParameters');\nand it seems to work now.\n. ",
    "denjaland": "Hi - are you taling aabout a plugin?  if you are, I'm interested to know since I'm actually looking for some way to lazy-load translated items based on its namespace :-)\n. To add to this.  It seems to be only occuring in MacOS Safari.\n. I'll dig into that asap.\n. sorry - I lost sight of this issue.  It can be closed as you did though.. ",
    "pdanpdan": "It looks like the example from\nhttps://angular-translate.github.io/docs/#/api/pascalprecht.translate.directive:translateNamespace\nin the bottom of the page is not working\n. - angular-translate-loader-partial\n- angular-translate-storage-cookie\n- angular-translate-storage-local\n... all live in separate files, and all need \"angular-translate\" file to be loaded before they can execute.\n\"angular-translate\" creates a module \"pascalprecht.translate\", and all the other files use the same module.\nIf the files are loaded out of order (using async or other method) one might end up loading \"angular-translate-loader-partial\" before \"angular-translate\".\nIf each file (\"angular-translate-loader-partial\", ...) would create a separate module depending on \"pascalprecht.translate\" it would work well.\nLike: angular.module('pascalprecht.translate.storage.local', ['pascalprecht.translate'])\n. ",
    "Steve30": "I see! Thank you! \n. ",
    "alexrada": "So it seems the error also appears when the translate is not in the JSON file.\n. Yes, it works without the colon.\n. With colon and with null translation in json file using useStaticFilesLoader.\nI think that was the combination that didn't work. \nI had to fix it by both removing colon and adding translation as was a real live app.\n. So I have this (angular bootstrap directives)\nuib-tooltip=\"{{'Email addresses to receive notifications'|translate}}\">\nIn language.json this is null\n\"Email addresses to receive notifications\": null\nAnd the error:\nhttps://docs.angularjs.org/error/$interpolate/interr?p0=%7B%7B%27Email%20addresses%20to%20receive%20notifications%27%7Ctranslate%7D%7D&p1=TypeError:%20Cannot%20read%20property%20%27substr%27%20of%20null\n. ",
    "fcorneli": "I've been playing around a bit. Solution is actually quite easy. Example:\nxml\n<inline-translation>\n        <translation lang=\"en\">\n            test <b>en</b>\n        </translation>\n        <translation lang=\"nl\">\n            test nl\n        </translation>\n        <translation lang=\"fr\">\n            test fr\n        </translation>\n    </inline-translation>\nwith a directive implementation:\njavascript\napplication.directive(\"inlineTranslation\", ['$rootScope', '$translate', function ($rootScope, $translate) {\n            var directive = {};\n            directive.restrict = \"E\";\n            directive.replace = true;\n            directive.link = function ($scope, element, attrs) {\n                var translations = {};\n                angular.forEach(element.find(\"translation\"), function (translationElement) {\n                    if (angular.isUndefined(translations[\"default\"])) {\n                        translations[\"default\"] = translationElement.innerHTML;\n                    }\n                    translations[translationElement.getAttribute(\"lang\")] = translationElement.innerHTML;\n                });\n                var translation = translations[$translate.use()];\n                if (angular.isUndefined(translation)) {\n                    translation = translations[\"default\"];\n                }\n                element.html(translation);\n                element.data(\"translations\", translations);\n                var translateChangeEndListener = $rootScope.$on(\"$translateChangeEnd\", function () {\n                    var translations = element.data(\"translations\");\n                    var translation = translations[$translate.use()];\n                    if (angular.isUndefined(translation)) {\n                        translation = translations[\"default\"];\n                    }\n                    element.html(translation);\n                });\n                $scope.$on(\"$destroy\", function () {\n                    translateChangeEndListener();\n                });\n            };\n            return directive;\n        }]);\n. In the general case, indeed you want to keep i18n out of the layout. But on the other hand, in some cases you also want to prevent nonsense like\n<p translate>PARA1</p>\n<p translate>PARA2</p>\n<p translate>PARA3</p>\n<p translate>PARA4</p>\n<p translate>PARA5</p>\nand after a \"change request\" ending up with\n<p translate>PARA1</p>\n<p translate>PARA3</p>\n<p translate>PARA3b</p>\n<p translate>PARA4</p>\n<p translate>PARA5</p>\n<p translate>PARA5b</p>\n<p translate>PARA5c</p>\n. ",
    "SebastianPickl": "Thank you for your quick answer!\nYes, i meant key, I've edited my Answer.\nMy issue was actually quite similar to #1125 and I managed to get my code working with the https://github.com/juristr/angular-translate-loader-pluggable library.\n. ",
    "pdore-netfore": "@knalli When supplying your own translation handler, the promise should be rejected when a key is missing (the same way as it does when using the default handler)\n. Please merge if reviewed\n. ",
    "outilio": "1) ngSanitize is still included\n2) I tried this before, but this does not work\nI have no ideas anymore :(\n. I got the failure...\nI used ng-show=\"Next\". If I delete this tag, It will be translated!\n<div ng-show=\"Next\" class=\"alert alert-warning\">\n    <span ng-bind-html=\"'Next' | translate\"></span>\n</div>\n. ",
    "nmoinvaz": "I noticed that before the translation is loaded 'Next' will be displayed. If you want to change this behavior you can do something like this:\n<div class=\"alert alert-warning\">\n    <span ng-if=\"('Next' | translate) != 'Next'\" ng-bind-html=\"'Next' | translate\"></span>\n</div>\n. ",
    "Brijeshlakkad": "I found solution on: ng-bind-html\ninsert $sce (Strict Contextual Escaping) service to your controller.\nand then use ng-bind-html.\nFor instance:\n<div ng-bind-html=\"success_modal_val\"></div>\n<script>\nmyApp.controller(\"BrijController\", function($scope,$http,$sce) {\n    $scope.make_transaction=function()\n    {\n         $scope.success_modal_val=$sce.trustAsHtml(\"<h2>BL</h2>\");\n    };\n});\n</script>. ",
    "elmalto": "Sorry about this. Added versions, will create a plunkr asap. I added this here since angular-translate is the only dependency that is causing an issue\n. ",
    "TimonVS": "Any progress on this issue @elmalto?\n. This issue can be closed. We updated to Lodash 4 without any problems. And as @knalli mentioned, Angular Translate doesn't even have a dependency on Lodash.\n. ",
    "Taewa": "@knalli @tspaeth \nI am sorry for not enough info and thank you guys for quick response.\nSimply, I want to create javascript file for all the translation data.\nhttp://angular-translate.github.io/docs/#/guide/07_multi-language\nThis one helped me. thank you @tspaeth \nBut I have still a question.\nAccording to the below url, you will see 'Source' section.\nhttp://angular-translate.github.io/docs/#/guide/07_multi-language\nIn this source, translation sources are out of angular. (translationsEN, translationsDE)\nI thought in the beginning, I could put these into either provider or factory.\nHowever, since these provider or factory can not be injected into angular config, I couldn't make it.\nSo I put this translation code out of angular too. It works.\nBut I am wondering if it's possible to put inside angular.\nThank you!\n. ",
    "ccomparone": "ahh ok I understand! Thank you ;-)\n. ",
    "yobre": "Ok but in this case\nhtml\n<h5 translate=\"WIDZ_LANG_AVAILABLE\" translate-values=\"{ value: '{{languages.length}}'}\"></h5>\nI can't use angular filter and i don't know how to capitalize. have you any ideas?\n. ",
    "xMonkfish": "Here is one I've set up below - it's not failing for precisely the same reason as when I run locally though. \nhttps://plnkr.co/edit/UG9NPZDmxF29sw44cxjU\nIn this case it appears to be failing because it waits for an asynchronous load which fails (presumably to fetch the en_GB locale although I've not confirmed.)\nThe Chrome Network tab does show the en_GB file failing, but a successful call to fetch the fallback en_US language. The sample does work if your language is set to en_US.\n. Ignore the above. I noticed the plunkr had used an old version of the library. Changing it from 2.6.0 to 2.8.1 means it can't be recreated there. I will make sure that this isn't the reason it's failing in production too. We use Visual Studio's version prompts for our bower file. So not sure if that is what has happened here too.\n. I've tried again this morning on our production code and can't get it to fail there anymore either, so I'll close this issue. I'll see if anyone else has the problem internally as I believe it may be related to if things happen to load in a certain order. Then again I may have just been unlucky.\nThanks for your time.\n. Hi again.\nI've managed to reproduce this issue on Plunker now (along with a work around)\nTurns out the fault is caused if you call fallbackLanguage before determinePreferredLanguage while using an async loader.\nIf you swap the function calls around then it works as expected. https://plnkr.co/edit/r7YNxfMPBfVaXnLVm4ak?p=preview\n. ",
    "zhenyong": "@knalli \nThank u so much. I misunderstand the purpose of 'translate-cloak' .\n. ",
    "wangpengxpy": "Browser.language = navigator.language;\nso the result is zh-cn but wrong....\n. hi,solve the problem,it's result from my code...\nthanks for your reply.\n. ",
    "chris0550": "The directive is working fine. See my plunker: http://plnkr.co/edit/21ys4WwiWKh4VaomFNGQ?p=preview\n. The problem is that the  surrounds the  tag. The translate directive replaces the content (which is the link) of  with the translation. So the result is Click.\n. ",
    "cathaloneill": "I am not trying to use two different  tags. I am trying to use a  tag and an  tag within it. See my plunker: http://plnkr.co/edit/DLD4FNUD0I9w5DpbzxFI?p=preview\n. ",
    "albi34": "If you want nested translations you can use the translate filter instead of the directive: \n {{\"LINK_A\" | translate}}\nhttp://plnkr.co/edit/u8Tymno17T4L2BVJBugS?p=preview\n. ",
    "tomlandia": "+1 would be perfect if you could read and overwrite translations from outside of angular. Right now I'm using a custom loader using translations from an external variable.\n. ",
    "stchar": "How about if it just returns object like $translationTable[traslation_id]\n. Good point. I like your idea to use angular.copy().\n. Yep, my bad.\n. ",
    "jcwatson11": "I agree with knalli. I thought this was a problem at first too, but later deleted my comment from this thread because I understood what knalli just explained.\n. ",
    "brenolf": "Thanks @tspaeth, so I basically deleted my filter and it started to work.\n. ",
    "BrentWheeldon": "Work this out:\n$translateProvider.\n    translations(\"en-US\", {}).\n    translations(\"en-GB\", {}).\n    fallbackLanguage(\"en\")\n  $translateProvider.forceAsyncReload(true)\nWe need to pass in empty objects, and then call forceAsyncReload. This isn't very obvious, why do I need to call forceAsyncReload?\n. @tspaeth I may be totally misunderstanding how I should be configuring this. All of our translations come from the backend, we have no inline translations. If that's the case, do we need to declare these translations? Can we just do $translate.use(\"en-US\") at runtime to change to \"en-US\"? Because that didn't work. Do I need to do the forceAsyncReload after the use call?\n. Yes, and it works for the first language. But when I change languages (with a use call) none of the translations are found for the new language.\n. Sorry, I'd excluded that. A complete example of what our working, though probably not optimal, solution is here. Is there a cleaner way to do what we're doing?\n. Going to close this for now - I've not had a chance to get back to it yet. I'll update when I pick it up again.\n. ",
    "cstefanache": "I will open a pull request for it soon.\n. Pull request opened: https://github.com/angular-translate/angular-translate/pull/1387. All the details are added in the pull request message. I changed my initial proposal with watchers on the translate-language directive in order not to introduce a new configuration and preserve the $watch functionality only when needed.\n. Regarding the watcher reduction: with each isolated scope, the previous version would register one 'translateLanguage' watcher regardless the presence of the translate-language directive usage. The commit contains a new demo file: ex14_translate_language.htm that uses twice the translate-language directive (previous implementation: 14 watchers, current implementation: 12 watchers) by avoiding adding 'translateLanguage' watchers for the following DOM node elements:\n<h2 translate=\"SUBHEADER\">Subheader</h2>\n<p translate>HTML_KEYS</p>\n. The purpose of notifying child scopes is to make sure that all child nodes will be updated accordingly. I have added two unit tests to the existing stack that are testing the following:\nit('should not change parent scope language', ...)- the current translateLanguage change should not affect translations in the parent scopes\nit('should not be changed by parent scope language' - preserve language preference below the current scope\n. ",
    "danpantry": "Hm, that's interesting. When I searched for angular-translate on the npmjs website it wasn't coming up. Thanks.\n. This appears to be the usePostCompiling() setting being set to true.\n. @tspaeth Not a requirement I can move away from, unfortunately. It is decided by issues outside of my control. I am gradually upgrading Angular as I go along - when I joined this project a year ago, it was still on 1.2.26. I am hoping to upgrade to Angular 1.4-5 in the next few months.\nSome rather critical components rely on older versions of Angular. To give you an example, one of the components completely breaks if we disable the debug information on $compileProvider.\n. @knalli  I've raised it with angular-translate simply because by removing the url loader line, the issue goes away. It seemed rather instinctive to therefore place blame on angular-translate - especially as the rest of the app works fine without that specific line.\n. I gave it a whack with Angular 1.5 and it appears that the issue is somewhere in our code, and it's just something to do with angular-translate that is showing that issue in our code when we enable the url loader.\nThank you for the quick responses.\n. @knalli  I agree, I did give a look of the package before posting here and I saw nothing untoward either. However, I wanted to post just to be sure. Grasping at straws isn't fun :-)\n. ",
    "PaulAnnekov": "@knalli $translate.use() has stopped working. No errors on call. Language is just not changing.\n. +1, I want to create my own language detection logic and getLocale() can help me to write less.\n. @tspaeth yes. How should it help me? As I understand, default strategy for 2.9.0 is escapeParameters. But I don't have parameters and it just sanitizes my string. \nI have found that here https://github.com/angular-translate/angular-translate/blob/c5c20ac7e06d8569c79019b340102ce30fad8572/src/directive/translate.js#L257 I get not Hello <b>world!</b> translationId, but sanitized Hello world! one. So if I will use \nes.json\n{\n  'Hello world!': '\u00a1Hola <b>Mundo!</b>'\n}\nEverything starts working. I think that directive sanitizes translationId somewhere...\n. @knalli let's go back to the real life. Nobody uses some complex html inside translations. In 99.99% cases you use:\n1. <b></b>\n2. <span class=\"\"></span>\n3. <a href=\"\"></a>\nAdding ability to use html inside translation key will add another format that can be used as translationId - original English string (like in gettext). It's implemented in angular-gettext library, but angular-translate is more powerful. Changing text() to html() on this line https://github.com/angular-translate/angular-translate/blob/c5c20ac7e06d8569c79019b340102ce30fad8572/src/directive/translate.js#L159 will make this work.\nI propose to make key getter optional. By default it will be text(), but you can pass your own function like:\nfunction getter(element) {\n  return element.html().replace(/\\s+/g, \" \");\n}\nor even replace text() with html().replace(/\\s+/g, \" \").\nBTW, translationId inside translate attribute's value supports html: translate=\"{{'Hello <b>world!</b>'}}\", so we can make inner text consistent with attribute's value. I see no problems with this, only more flexible solution.\nI can make a PR.\n. ",
    "leoc": "Anyways, I reordered some things and now it appears to work. Thanks for this package!\n. ",
    "iCodr8": "And what did you reordered? I have the same issue.. ",
    "craig-at-rsg": "@elpeq Is a language failing to load, and then you're using forceLanguage? I handled the rejection from the static file loader and that let me continue. \nreturn $translateStaticFilesLoader({\n                            prefix: 'languages/',\n                            key: options.key,\n                            suffix: '.json'\n                        })['catch'](function () { return {};\n})\n. @knalli Thanks for the response. \nI have a couple issues, most likely from my not understanding how this is supposed to work:\n1. It looks like I have to call registerAvailableLanguageKeys. I was getting an error in an indexOf method because of an undefined array without this. I'd rather not register these up-front, and handle the lookup in my custom loader.\n2. This registerAvailableLanguageKeys call is hard-coded into the client, and the mapping would map en-gb to en, so my custom loader gets asked for en, but en-gb might be an available language for a user after they register with the server.\nIs there an easy way around this? Maybe the indexOf method could be patched to handle undefined arrays so I wouldn't need to register during config? \n. I'll try to reproduce it - my first attempt didn't work; I've made too many changes since I put it in.\nHowever, this call was failing because $fallbackLanguage was undefined: indexOf($fallbackLanguage, $preferredLanguage)\n. I was calling useFallbackLanguage without specifying any fallbacks ahead of time; I was trying to have a local language fall back to its general one, so for en-US I was trying to do $translate.useFallbackLanguage('en'). Is this supported?\n. Closing - I don't know what the issue was, but I have something working...\nThis catch lets me load an empty translation, which lets it just use the fallback instead:\nreturn $translateStaticFilesLoader({\n                            prefix: 'languages/',\n                            key: options.key,\n                            suffix: '.json'\n                        })['catch'](function () { return {}; })\n. ",
    "elpeq": "Hello @knalli \nI've adapted your demo and added a 3 language pt_PT that shows, that the force language doesn't work. \nhttp://plnkr.co/edit/6BJPNGqS0YYo2fBJb8jf?p=preview\n. ",
    "almeidap": "Forcing a language is now working in version 2.11.0 but it produces errors when trying to switch to another language afterwards:\nangular.js:13236 TypeError: Cannot read property 'key' of undefined\n    at angular-translate.js:2216\n    at processQueue (angular.js:15552)\n    at angular.js:15568\n    ...\nYou should be able to reproduce the issue if you click in any language button on the updated demo Plunk (see console for stack trace):\nhttp://plnkr.co/edit/3YVgipajDFwLuYBVVBeh?p=preview\nFYI, angular-translate determines my preferred language as French, which is correct.\n. In fact after some more testing, it looks like forcing a translation only works properly when using the translate pipe. Take a look to the improved demo again:\nhttp://plnkr.co/edit/3YVgipajDFwLuYBVVBeh?p=preview\n- When using the translate-force directives, it fails radomly (probably due to the promise mechanism behind the scene).\n- Note that I had to comment the $translateProvider.determinePreferredLanguage() call as it seems to conflict with $translateProvider.fallbackLanguage() (see #1075) and breaks completely translate-force.\nUnless there is something wrong in the demo, this issue should be reopened again.\n. @knalli you are welcome ;)\n. ",
    "ArniDzhan": "could you please update release here too? \nhttps://github.com/angular-translate/angular-translate/releases\n. sorry, what I meant is that if you try to install without specifying version 2.9.0.1 then bower installs 2.9.0\nI though it has to do with this project not being updated.\n. ",
    "tregusti": "Why not use <1.6 instead? <=1.5.0 will prevent patch updates for angular to be supported. And since angular follows semver, supporting 1.5.0 should also allow support for 1.5.1-9.\n. My bad. No, they are not following semver, one dot off. But all releases in 1.5.x is most probably compatible with eachother. So you could support all of those. And even if <= 1.5 would work, as you wrote above, the intent is much more clear with < 1.6. At least for me. \n. ",
    "dceddia": "Haha, well, yes :)\nWould it not be better to simply ignore the recursive references? As a user I imagined that it would only sanitize the params that my translation string required (which wasn't the case, but still). I think the \"principle of least surprise\" would be to just sanitize everything while removing the recursive references.\nSee #1401\n. ",
    "darkylmnx": "so why is the translate filter escaping ?\n. okay i see, thanks\n2016-02-13 14:11 GMT+01:00 Jan Philipp notifications@github.com:\n\nso why is the translate filter escaping ?\nBecause that's how AngularJS is treating filters' output. It is encoded\nalways.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1398#issuecomment-183662520\n.\n\n\nCordialement Darkun91@gmail.com\n. ",
    "pascal08": "I have to apologize, I was on the wrong track. This issue was caused by something completely different. Though, I'm still groping in the dark why I was pointed to \"TranslationLoaderFactory\". \nThanks for your reply and your time to look into the issue. Much appreciated. :+1: \n. Check if your code is minification-proof. Also check if you are injecting the right dependencies. I remember it had something to do with a combination of these things.\n. ",
    "nooruddinabbas": "I know this is an old thread but could you tell me what was causing injector.get() is not a function. Because I am stuck with the same error...\n. ",
    "rolandjitsu": "Ok, so the way I solved this was by using .determinePreferredLanguage(). It looks like on first page load, that is the only way to make this work. The only problem is that during config phase you do not have access to $location, so that makes things a little less ideal:\njs\nconst langs = [\n    'en',\n    'da'\n];\n$translateProvider.determinePreferredLanguage(() => {\n    let parts = window.location.pathname.split('/');\n    let part = parts.find((part) => langs.includes(part));\n    return part;\n})\n. ",
    "geo242": "@aliok  I experienced this issue as well, but the real issue ended up being that my language aliases didn't match anything, so the determinePreferredLanguage function was returning undefined, which meant that the preferred language wasn't available on the first call to $translate.use(). Adding a timeout \"fixed\" it, but once I fixed my available language key aliases, it all worked without a timeout. Hope this helps. . ",
    "jculverwell": "Also not working for me using \n\n. ",
    "fmgs31": "The reason for this is that there is a wrong checking when asking for the key in the fallback language. I can do the pull request if you want\n. ",
    "cniaulin": "Yes same issue here. @fmgs31, did you push the pull request ? \n. ",
    "iamdriz": "Is this the same as: https://github.com/angular-translate/angular-translate/issues/1413\n. @knalli Is that commit a fix for this issue? Thanks\n. @knalli Hi, I've read the documentation. However I'm not seeing anything that allows the current inline content to be used as the fallback. All the examples show either using a global error fallback or specifying the default as an attribute... I want it to use the actual inline content that is already there.\n. @knalli Any updates on this? Thanks.\n. @knalli Cool. Why do you believe this is not a bug out of curiosity? As if the key isn't defined in any translation, why would you want the key to show and not the original content?\n. @tspaeth I can appreciate it is a good quick and easy way to see where missing translations are, but I think it'd be better to have this handled by the error handler and just let it fallback to whatever original content is there. In my opinion anyway :)\n. In any case, it'd be great if this could be an option.\n. ",
    "nmpribeiro": "Well, I did read it some time ago for part loading... is it this? It seams I never saw this on any real case example...\nloadFailureHandler: 'MyErrorHandler' ?\nupdate: I have a costumErrorHandler that returns \" \" so that we do not see the 'TRANSLATION_ID' on the markup. But the thing is, before the translation is processed, we see the 'TRANSLATION_ID' which is really not desired.\nupdate: FOUC - Flash of untranslated content\nOk thanks @tspaeth \n.preferredLanguage( 'preferedLocal' ) did the trick\n. ",
    "ludydoo": "Hi there, it seems to be working like a charm!\nI'm going to check this out later today.\nThank you both for your help\n. ",
    "why520crazy": "use $rootScope should be ok\uff0ci use it in controller or directive\uff0cif use $rootScope.$on(\"$translateChangeSuccess\",function(){ })\uff0cit must need freed when controller destroy\uff0c\nYou can modify to $rootScope.$broadcast ?\n. thanks very much. I think there is no problem so modified, but choice is yours.\n. ",
    "mutumarieru": "okay, i'll check but i guess passing the html through the translate-values doesn't work too ?\n. I know that but like said in the comments, i want to not escape in only\nsome really really tiny parts of my app where i have content blocks full of\nlink that i can't break into smaller translations. French, Japanese or\nSwedish don't put verbs and nouns at the same place like in english so it's\nvery complicated to break down content containing external links into small\nbits of translations.\n2016-02-23 17:22 GMT+01:00 Thorsten Sp\u00e4th notifications@github.com:\n\nThe functionality of a sanitizer is to remove malicious code parts and\nother stuff, so - if you want everything in there --> set the sanitizer to\nnull.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1410#issuecomment-187771120\n.\n\n\nCordialement\nAriel Dorol - Lead D\u00e9veloppeur Front chez Mutum\n. thanks a lot\n2016-02-28 20:54 GMT+01:00 Jan Philipp notifications@github.com:\n\nMainly, this is a request for adding sanitization mode by directive. That\nmeans by service calls (async + sync).\nI have put this at the \"Contribution Welcome\" list.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1410#issuecomment-189933999\n.\n\n\nCordialement\nAriel Dorol - Lead D\u00e9veloppeur Front chez Mutum\n. ",
    "mkalafior": "I have the same issue and noticed also, that this line (angular-translate:2112) is causing the problem:\n} else if (langPromises[key]) {\nand if we change it to:\n} else if (langPromises[key] && langPromises[key].$$state.status !== 1) {\nchanging languages is working again. \nIt seems that when fallbackLanguage method is used, after file with translations is loaded, promise isn't removed from langPromises object. \n. ",
    "sebek64": "Yes, I can confirm that 2.9.1 does not have this problem. So we can stay with 2.9.1 until a fix is made.\n. Confirming that 2.10.0 fixes the bug, thanks to all who worked on the solution.\n. ",
    "bahram-aliyev": "Thank you for the reply.\nExcuse me for disturbing you, I did not notice that the author of the package in not a member of the dev team. I will contact the author and ask him to update the package.\n\nAt last but not least: Contributions for an mostly automatic process uploading releases to Nuget are welcome.\n\nDon't get me wrong, but I believe that it would be beneficial for all of us if you get in touch with the author of the package. May be he has already got the tools for uploading releases to NugeGet. The package is quite popular, 22003 download, so it would be nice to have your support as a dev team member.\n\nPersonally, I would manage javascript dependencies only with NPM, Bower or JSPM.\n\nThank you for the recommendation, I am considering to use bower in the future, but NugGet is still a very convenient tool for me.\nThank you for the great tool, \nRegards.\n. ",
    "carlo-feudo": "Hello, be aware that there are two line printed in the example. \nThe first is correct and expected, the second one is hidden by plunked engine because there is actually the Script executable as dom node.\nCheers\nCarlo\n. Not in plunker but in a normal app it is executed by the browser unfortunately, shall we extend the sanitation to the keys as well? \nSounds pretty dangerous. I manage to execute jQuery code.\nCheers\nCarlo\n. Hi there, \nthe problem is the line number 2871 (angular-translate.js, directive translate) as for the following:\niElement.empty().append(scope.preText + value + scope.postText);\nbasically the function jQuery append will append the text (key) as node html.\nIf you modify the line with:\niElement.empty().**append**(scope.preText + $translateSanitization.sanitize(value) + scope.postText);\nit still wont work.\nTo make it \"work\" apparently I need to replace the append method with the text method, like\niElement.empty().**text**(scope.preText + $translateSanitization.sanitize(value) + scope.postText);\nThe side effect of this is that I won't be able to specify any html in the .json languages files, i.g. BR tags\nThoughts?\nCheers, \nCarlo\n. Hi, as you can see from the chrome inspector the script attached form the directive translate is a real DOM node as the function sanitize function is not in place for keys and with the append() method it will be transformed in a real node.\n\n. Hi @knalli I have mange to reproduce a nasty one.\nI want to say that sometimes we could use angular-translate to handle keys coming from the server, hence this could be nasty.\nI have published the test on Heroku, have a look:  https://angular-translate-test.herokuapp.com/\nyou will se that the script inject as key is:\nthis.a = \"<div onmouseover=\\\"javascript:alert(2);\\\">MOUSE OVER ME!</div>\";\nPlease let us know what you think\nCheers, \nCarlo\n. Definitely, a solution could be in case of key reflection to use the method .text() instead of .append()\nCheers\n. ",
    "blaryjp": "Hello guys,\nI share my solution:  use missingTranslationHandlerLog\nhttp://plnkr.co/edit/0BguvH79prDTvy0oJxE3?p=preview\nCheers,\n. ",
    "barillax": "Just a note, we saw this XSS in the wild in our app. We got lucky because the injected text was only displayed back to the user who had just entered it, but it basically followed the same formula described above:\n1. User changed their nickname to be ><img src=x onerror=alert(document.domain)>\n2. App displays the user's nickname in a translated string like so:\n   <p translate=\"welcome_x\" translate-values=\"{'name', currentUser.nickname}\"></p>\n3. Result: an alert box pops up.\nEDIT -- this doesn't seem to be a real issue for us, ignore!\n. My bad guys. I think I figured out that we had a codepath that was disabling sanitization in this particular scenario. Angular-translate seems to prevent the issue when \"escape\" is enabled as the sanitization strategy.\n. ",
    "bryanbraun": "@knalli, we ran into this issue recently.\nIn our case, it's hard to say \"don't use translation based directly on user input,\" because many of our use-cases are for generic, reusable components, in a UI kit. We want the components to support translation, but a downstream user may need to display user content with them.\nI feel like a good solution would be to sanitize the key with the same sanitization strategy that is set for the library as a whole.. ",
    "gruberb": "Yes. With no results. Can you have a look is this the way to test $translate? Because I could not think of another solution and I am trying for hours now.\n. ",
    "mattlewis92": "Thanks so much for the quick response! :smile: \n. ",
    "alpalmerxactware": "Can this method be used with only a translationId and the desired language? If so how? If not, what is the minimum needed to to use this method for translation?\nI ask, because I'm currently attempting to make this work, but I only get the fallback translation when using the following: \n$translate.instant('INSTANCE_CREATE.ADMINISTRATOR', undefined, undefined, this.settings.culture);. @knalli Thanks for the link. I have actually looked at that and it leaves much to be desired imo. \nFor example: Can the interpolateParams object be empty? or are there some minimum required values? Is there an existing example somewhere of this method being used and working?\nShort story, Its not working for me, and I'm not sure why.. ",
    "RodolpheNivelet": "It mean I use grunt for development. So after doing\ngrunt serve\n. Thank you for the link but i'm perfectly sur my angular-cookies is the same version as my angular (1.4.6).\nI know it because I downgraded angular-cookies for 1.5.0 to 1.4.6 after bower asked me to update it.\nEvery forum topic on the internet that is related to this problem is people having a diferent version of angular-cookies and angular\n. Hi,\nI had a dependency problem it is resolved now thank you.\n. ",
    "clembou590": "Hello.\nthank you very much for this answer and also for the good job that has been done in this project. sorry for the delay of my answer. \nI wrote with capital letter not to shout but just to emphasize that I was having an issue.\nI am using directive and filters in almost everything, however sometimes it's not possible and I have to code using the service.\nThanks again for the function you gave me but when I have 50 'keys\" in the namespace I still have to write them all  down to get the translation.... \nthe directive translate-namespace is kind of what I need... but what I need is in fact the service....\n. ",
    "renegadeds": "Can confirm I have a similar issue. When I use the $translate.use() function in ionic (which uses ui-router), the content of the app will translate just fine, but the nav title of the previous page and the back button pointing to it will not. If I navigate to another tab and back again however, it will update itself. This suggests a caching issue which is probably ui-router related.\n. ",
    "sammiwei": "@renegadeds thanks for the insights. I had a similar issue . @robertomcampos What I have done is do a $state.reload() in the translate controller, and it worked for me. Hopefully this will help you a little. \n. ",
    "raphaelyancey": "I didn't see #1101. The problem is fixed with escapeParameters but with this strategy, boolean translate-values are cast to strings. Therefore I must do {{ bool == 'true' ? 'truthy' : 'falsey' }} instead of a natural {{ bool ? 'truthy' : 'falsey' }} in my translations (and that's what made me dig the problem in the first place). \n. ",
    "PortalGuy": "Knalli many Thnx!!! that was right on the target!! , \n. ",
    "Sharmasonu": "yes..i am aware of that..we can use scope. But I have a Website with 15 pages....and I don't want to use controller for adding the contents...I have created JSON files for each page...actually 2 JSON files..one for english and one for spanish...\n. ",
    "adrianbader": "Hm. I see. Even with 2.9.2 (the version I used) it works. I will check, what is different in my project...\nThanks for your quick response and the plunker!!\n. I really do not understand, what I have made... as I wanted to trace down this problem today, I can no more see a problem in my real project... I must have messed up somthing. I am really sorry for this wrong issue notification!\n. ",
    "trks1970": "Thank you for the explanation. On second thought, it is quite logical.  is good enough for me.\n. ",
    "wooderz": "That doesn't work for me as the header is a shared component so can only have one key in the directive. \nI'm using angular ui-router so have got it working by deleting all the parts currently loaded upon a $stateChangeSuccess event, but it would be nice to have the option within angular-translate to enforce 1 part at a time when calling addPart\n. ",
    "wandiong": "I got the solution\nmake sure your json key is same as your scope target\nexample \nvar ID : {'generator' : 'genset'}\nvar EN : {'generator' : 'generator'}\n$scope.items = $scope.tenantAllocated = [{ \n//same with json key \nid : 1,\ncode : 'generator' \n}]\nthen on your view\njust do something like {{items.code |translate}}\nhope it works :)\nnote : it also might be working on looped array too I presume\n. for what I want to know is, how can I made translation filter look like in usual usage which is looks like {{'something'|translate}} in controller?\nedit : I've made it by using $translate.instant(my_translate_id) , but it wont dynamically translating. is there any way to made it dynamically? \n. ok... I get it @knalli  , after I re-read the documentation, yep I missed out loader.. thanks for helping :smile: \n. ",
    "KillerCodeMonkey": "Heyho, ey looked through the source code of angular translate and if i recognize it correctly i found some events are triggered like this:\n$rootScope.$emit shouldn't it $rootScope.$broadcast\nCheers!\n. Okay thanks for clearification. Does not know that it triggers for both! :+1: \n. ",
    "Sayvai": "angular: 1.4.8\nangular-transltate: 2.10.0\nGoogle Chrome: 50.0.2661.75\nI get the same issue as @Aides359 also.\nIn my case, I register the $translateChangeSuccess event inside a controller (upon instantiating controller).\nSo 90% of the time the event does fire after during / after controller instantiated. But roughly 10% of the time I strongly believe the event is emitting before the controller is instantiating (i.e. to register event). So using $translateChangeSuccess event is unreliable. I tested this scenario by constantly refreshing the page several times.\nCould there be a way to improve the events' reliability?\n\nThe reason I register this event inside a controller is because I get untranslated translation key names back from the $translate() constructor call inside the promise success handler when only the fallback language is adopted after failing to get primary locale via a network request. Hence the decision to use and wait for translateChangeSuccess to fire before attempting to get translations using $translate().\n. ",
    "j3hyde": "Wanted to add a couple cents to this.  I have the same need:  I need to know when a translation run has completed regardless of whether that is the first one or when the language has been changed later on.\nIn my testing I find that:\n- $translateChangeStart is either not fired or is fired before my handler is registered.\n- $translateChangeEnd and $translateChangeSuccess are fired properly however...\n- when I use useMissingTranslationHandler() to set a handler, that handler is fired after $translateChangeEnd and $translateChangeSuccess have already fired.\nIn my application I am trying to summarise the missing translations.  To do this I use a missingTranslationHandler to collect all the translations but need to know when the process is finished.\nA simplified plunker is here: http://plnkr.co/edit/GIPS7W3sNgm006kAW5wm?p=preview\nNote: a slightly different issue appears to be that $translateChangeStart only fires (or only fires late enough) when I use $translate.use() within app.run().  Different issue but it displays similar timing problems.\n. ",
    "EightArmCode": "In case anyone finds this thread and still doesn't know what to do - the solution on this SO question worked for me http://stackoverflow.com/questions/41998073/how-to-do-error-handling-for-the-event-translatechangesuccess. ",
    "studentIvan": "Solution here https://atticuswhite.com/blog/angularjs-translate-once-angular-translate-one-time-binding/\n. ",
    "hornetnz": "You can ignore for now the fact I'm using Typescript. I see now that someone installed a TS version (https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/angular-translate/angular-translate.d.ts), which looks to be behind on version. \nI'm more interested in why my Plnkr doesn't work. I'm guessing it may be a simple path issue, as I dont know how pathing works for files in your plnkr code. \nBeyond that, your sample demos techincally don't work either...it has the code for multiple json locations, but is using the json thats in that same file. Therefore the example is invalid. I noticed that issue on many of the examples.\n. ",
    "merlosy": "Hum, have you considered ES6 templates?\nMaybe this link can give you a hint (quick google search): http://jaysoo.ca/2014/03/20/i18n-with-es6-template-strings/\nRgds,\n. ",
    "devboxr": "Hi there,\nI know about the sanitization strategies, however, this did not solve my problem. What did the trick was a sanitize filter + ng-bind-html, which does work but does not feel like it was intended to be used like that. I am relatively new to AngularJS, learning it at work (I know a decent amount of JS though), and this just doesn't feel right.\nAn example would be, having an element in the translations like so:\nAlready a customer? <a href=\"{{ href }}\">Log in here!</a>\nor\nI read and agree to the XXX Ltd <a href=\"{{ href }}\">Terms and Conditions</a>\nHow would this be done, without AngularJS escaping the elements automatically? I first thought this is a angular-translate issue, but then realised that AngularJS is actually escaping \"unsafe\" strings automatically.\nQuestion now is, is there any better practice in using elements like the ones above, without the sanitize filter?\nI understand that this may fall out of the angular-translate scope, but am sure that I am not the first one to encounter this problem and I am happy to hear any approach on this.\nThanks a bunch in advance!\n. ",
    "iamrutvik": "@aqarain , Have you solved this issue? I am having the same problem.\nHere is my code snippet :\nI have ar.json and en.json stored in i18n folder at root of www folder.\nin config : \n$translateProvider.useStaticFilesLoader({\n        prefix: 'i18n/',\n        suffix: '.json'\n    })\n    .preferredLanguage('en');\nOn change language function : \n$scope.changeLanguage = function (lang) {\n        var appLang = lang;\n        if (appLang == 'ar') {\n            $translate.use(appLang);\n        }\n        else if (appLang == 'en') {\n            $translate.use(appLang);\n        }\n    };\n@knalli Can you help please?\n. ",
    "sl3dg3hamm3r": "P.s.: I could use something like this: $translateProvider.useSanitizeValueStrategy('escape');\nBut this results in:\n<i>Text</i> --> fine\n<i>Text</i> --> fine\n<i>Text</i> --> fine\n&lt;i&gt;Text&lt;/i&gt; --> Oops, double encoding, not fine\nFurthermore, this would work neither anymore: <p ng-bind-html=\"'MyKey' | translate\"></p>\nI basically don't know how to resolve my escape-dilemma, if I want to use translate as directive...\n. ",
    "Rafvb": "@knalli Indeed, I will try to add a unit test.\nIts a bit busy at the moment, so I'm not sure if I can add it this month.\nI'm also not really sure this did not break anything else.\n. Hi @knalli \nThis seems to be fixed in the latest release.\nWhen I use the latest release in the plunker example it works:\nhttp://plnkr.co/edit/7aK8JaIGvQklgkuEMbgt?p=preview\nBut when I replace the same code with an older version of ng-translate (2.8.0) it does not work:\nhttp://plnkr.co/edit/rVdOQLnzoIN8jCMbFXHf?p=preview\nSo the problem was fixed somehow \ud83d\udc4d \n. ",
    "amoldorkar-ezest": "yes, I have seen this but found some confusion...\nPlz suggest me the excact solution\n. ",
    "neelvadgama-hailo": "+1\n. ",
    "mostafabarmshory": "+1\n. ",
    "aaani": "Thanks. I just moved this question to stackoverflow: http://stackoverflow.com/questions/36721231/translate-code-that-is-outside-angular-with-angular-translate\n. I am 100% with you on this. I understand security is super important. But in our use case all the translated strings are static and live in the codebase, and we trust them. \nAlso I understand your point - \n\nAt the moment we have no \"production mode\"; we only have a minified version which is.. well.. minified source.\n\nIs there anyway this could be added to new/future feature requests?\n. Thanks for your thoughts. I'll opt-in for the old default mode then. \ud83d\udc4d \n. ",
    "omarmeky": "I am seeing this issue in version 2.13.1. Has it resurfaced?. ",
    "laudess": "There is a resx to json converter somewhere, that is what I used\n. ## This is my translate file, where I define the options\n` angular.module('app.translate', ['pascalprecht.translate'])\n  .config(['$translateProvider', function ($translateProvider) {\n$translateProvider.translations('es-ES', {\n          TEXTO: 'fsdfdsfsd',\n          INTRO_TEXT: 'And it has i18n support!'\n      });\n```\n  $translateProvider.useStaticFilesLoader({\n      prefix: '/Assets/strings.',\n      suffix: '.json'\n  });\n$translateProvider.registerAvailableLanguageKeys(['es-ES', 'en-EN', 'pt-PT'], {\n      'es': 'es-ES',\n      'en': 'en-EN',\n      'pt': 'pt-PT'\n  });\nPREFERRED_LANGUAGE = navigator.language || navigator.userLanguage || navigator.browserLanguage || navigator.systemLanguage || DEFAULT_VALUE;\n$translateProvider.useSanitizeValueStrategy('escape');\n  console.log(PREFERRED_LANGUAGE);\n$translateProvider.preferredLanguage(navigator.language);\n```\n}]);\n`\nAnd this is how I show it on the view\n{{ 'INTRO_TEXT' | translate}}\nOn the screen of my IE10 I only see : INTRO_TEXT\nbut on chrome I see: And it has i18n support!\nThank you\n. No erros on developer console\n. Any idea?\n. Ok I found the solution for the issue. The problem was in this line:\n$translateProvider.preferredLanguage(navigator.language);\nInternet explorer 10 is returning different value for navigator.language than the other browsers\n. ",
    "clijiac": "just use something like gulp-resx2 to convert your resx file to json file then you can use angular-translate.\n. ",
    "Satej7": "Actually for our .Net to Angular migration project , I need to implement localization using ngx translate. Is there any way I can convert resx files into JSON. ",
    "alaingiller": "Is there any progress on this issue? And any idea when will come next release with this fix? Thanks!\n. ",
    "leonardoResendeLima": "Same problem. Apparently the Edge also gets tweaked when trying to retrieve the language from the localStorage or localSession.. ",
    "rafaelcoutinho": "I have not defined any interpolation. \nthe version is:\n    \"angular-translate\": \"^2.11.0\"\n. it does not happen if i comment out determinePreferredLanguage. well since i don't need this method that's all fine\n. ",
    "lukee910": "I think you will have to return the translation ID's in the JSON Arrays and add those translation keys to where you're loading your translations from (e.g. JSON Object with TranslationID-Text Pairs).\nYour directive will be like this: (The new | translates are marked)\n<md-card class=\"card-bg card-height\">\n  <md-card-title layout=\"column\" class=\"about-card\">\n    <md-card-title-media class=\"center-elements\">\n      <img class=\"md-media-lg\" ng-src=\"{{data.image}}\" alt=\"{{data.imageAlt | translate}}\"/> <!-- here -->\n    </md-card-title-media>\n    <md-card-title-text>\n      <div class=\"md-headline card-title-padding\">{{data.heading | translate}}</div> <!-- here -->\n    </md-card-title-text>\n  </md-card-title>\n  <md-card-content>\n    {{data.content | translate}} <!-- here -->\n  </md-card-content>\n</md-card>\nThe data JSON might look like this:\n{\n  \"information\": [{\n    \"heading\": \"ReliabilityID\",\n    \"content\": \"ReliabilityContentID\",\n    \"image\": \"../IMG/shield.svg\",\n    \"imageAlt\": \"...\"\n  }, {\n    \"heading\": \"ProfessionalismID\",\n    \"content\": \"ProfessionalismConentID\",\n    \"image\": \"../IMG/people.svg\",\n    \"imageAlt\": \"...\"\n  }, {\n    \"heading\": \"DevelopmentID\",\n    \"content\": \"DevelopmentContentID\",\n    \"image\": \"../IMG/cogwheel.svg\",\n    \"imageAlt\": \"...\"\n  }]\n}\nThose IDs (however you are going to call them, the ID examples I've given are not very good) should be loaded via the usual $translate-mechanism. (I don't know anything about the partial loading, you're going to have to ask someone else for those things)\n. ",
    "akempes": "You could try:\n```js\nangular.module('app')\n.config(function( $translateMessageFormatInterpolationProvider ){\n    'use strict';\n$translateMessageFormatInterpolationProvider\n    .messageFormatConfigurer(function ($mf) {\n\n        var $filter = angular.injector(['ng']).get('$filter');\n\n        $mf.addFormatters({\n            currency: function(v) { return $filter('currency')(v) }\n        });\n\n    });\n\n});\n```\nIt worked for me... But I had to add \"messageformat\": \"^1.0.2\" to the bower file.. Sorry, the dependency was typo. It should be \"messageformat\": \"^1.0.2\" due\nto the addFormatters function.\nMet vriendelijke groet, Arjan Kempes\nCREATIVE SKILLS\nARJAN KEMPES WEB DEVELOPER\nCREATIVE SKILLS, VEERDIJK 42R, 1531 MS, WORMER\nT: 075 647 69 40 F: 075 647 69 41\n2016-12-08 9:54 GMT+01:00 Jan Philipp notifications@github.com:\n\nWhy angular-flashmessage? :)\nAnd yes, messageFormatConfigurer has been added, meanwhile. We can close\nthis as fixed. #1619\nhttps://github.com/angular-translate/angular-translate/issues/1619\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1479#issuecomment-265687061,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AE0jtdUI_Ml8ZWaa9dgt_SV6TXmSEmoqks5rF8XfgaJpZM4IRwf7\n.\n. \n",
    "dryanmas": "The app I was working on when I initially discovered the bug was using 2.11, so no it does not work with 2.11. \n. ",
    "sandeep-pareek": "@knalli Wonderful. I found what I wanted and I think this issue can be closed. This was what I was looking for.\ncheers! \n. ",
    "austinjalexander": "@knalli Thank you! I'll check to see if $translate.uniformLanguageTag() does the trick!  :)\n. ",
    "JordanAlimi": "@knalli Thanks for the response and information. I agree my usage isn't in line with the documentation but I do feel that the translate attribute shouldn't be affecting Angular's parsing if nothing is being translated.\nThe translate attribute should act the same way as other HTML attributes and not cause issue if nothing is set. This can be seen with the style attribute not affecting the style of a DOM element if set to blank space here.\n. ",
    "qichangjun": "anyway,thanks for help\n. ",
    "essivision": "Hi\nI added https://plnkr.co/edit/YnQBUQfgQBoR39Q35p0d?p=preview\nwhen run this code error me\n\nhttp://errors.angularjs.org/1.4.8/ng/areqp0=AdminCtrl&p1=not%20aNaNunction%2C%20got%20undefined\n. \n",
    "sarazhang123": "@knalli Can you tell me the meaning of SOF? I also need to resolve this issue. Thx. ",
    "danielbair": "Inside the function are system button labels that need to be translated. I provided the actual en.json and th.json files to show what needs to be translated. I can find no examples for angular-translate that translate non-html objects like in this function. I have managed to get translation working on all other areas of my application, but not this function. I don't know where to begin or how to make it happen for this one.\n. I tried that. It does nothing but break the application. There is seriously lacking good examples on how to translate content that doesn't touch the html dom (ie. stuff that gets passed to the system). There are tons of examples for how to translate html elements, but no real world examples for translation inside of the controller functions, and nothing that exists that fits the code in my question. If there was an example that paralleled the code I gave, I would be able to proceed. \n. I have now posted this question here... http://stackoverflow.com/questions/37336133/how-to-angular-translate-controller-function-objects\n. ",
    "Delagen": "$filter(\"translate\")(translaterId, params)\n. @danielbair \n```\n.controller([\"$filter\",....],function($filter,....){\nvar translateFilter=$filter(\"translate\");\n...\nbuttons: [\n                        { text: translateFilter('CAMERA') },\n                        { text: translateFilter('LIBRARY') }\n                    ]\n...\n})\n```\nor when translations isn't loaded already\n```\n.controller([\"$q\",\"$translate\",....],function($q,$translate,....){\nvar translateFilter=$filter(\"translate\");\n$q.all({\nCAMERA:$translate('CAMERA'),\nLIBRARY:$translate('CAMERA')\n}).then(function(translations){\n...\nbuttons: [\n                        { text: translations.CAMERA },\n                        { text: translations.LIBRARY }\n                    ]\n...\n})\n})\n. I think error near\nif (angular.isString($preferredLanguage) && indexOf($fallbackLanguage, $preferredLanguage) < 0) {\n        $fallbackLanguage.push($preferredLanguage);\n      }\n```\nwhen $fallbackLanguage does not equal $preferredLanguage\n$fallbackLanguage turns into array and load both translations (may be sometimes wrong)\nsince it, switch between start up language to second (both in $fallbackLanguage) is impossible\nI simply change my app to call .fallbackLanguage earlier than .preferredLanguage to exclude this behavior\nSince it my app works as expected.. ",
    "jfcere": "@knalli Thx for your reply and your time, this is really appreciated!\nFollowing the documentation here \n\nuse([key])\nTells angular-translate which language to use by given language key. This method is used to change language at runtime. It also takes care of storing the language key in a configured store to let your app remember the choosed language.\n\nI am currently using $translateProvider.useLocalStorage() which sets a key with specific name in the local storage. If I don't use $translate.use() when the language is changed, the local storage won't be updated (unless I do it manually and that means I would have to hard-code the same key name as Angular-Translate uses and who knows if it would ever change). That means that when the application will reload it will use the non-updated key value and therefore won't change the language in the application.\nSo basically I was looking for a \"built-in\" way to tell Angular-Translate to use a new language (change the language in local storage) without fetching/refreshing automatically the translations.\nAm I missing something ?\nThanks again!\n. @knalli I agree that it might be complicated to understand with all the provided code.\nI'll make a running example and link it back here soon.\n. ",
    "chrisbygrave": "Doesn't the suggested workaround have unintended consequences?\nLet's say I use:\n$translateProvider.registerAvailableLanguageKeys(['en', 'ja'], {\n    'en*': 'en',\n    'ja*': 'ja',\n    '*': 'en'\n  }).determinePreferredLanguage();\nAnd a user comes with a browser configured with ['de', 'ja']... we should pick up 'ja' as a second preference, but with the '*' entry, the user would get 'en'.\n. ",
    "DiV666": "Ok, thanks for your response.\nI removed fallbackLanguage from config and now is working perfect.\nI thought fallbackLanguage does not affect the primary language returns, but I can make do without that option.\nThank you very much.\n. ",
    "cmorgant": "You should be able to do this using directives!\n\nSince version 2.0, translate directive comes with another neat feature to pass values into your translations. We just learned how to use the translate-values attribute, which is nice, but what if we could in some cases be a bit more declarative in our code. What if we only want to pass in one or two values but declare these explicitly in our HTML?\nWell, in angular-translate >=2.0 you can do exactly that. You are able to define your own translate-value-* attributes.\n\nSource: Guide\n<div class=\"form-group\">\n    <label name=\"Sorting\" translate>sorting_name</label>\n    <input type=\"text\" name=\"sortingInput\" ng-model=\"sorting\"/>\n    <div ng-messages=\"myForm.sortingInput.$error\" ng-if=\"myForm.sortingInput.$dirty\">\n        <div ng-message=\"required\">\n            <span translate-value-name=\"{{'sorting_name' | translate}}\">required_validation</span>\n        </div>\n    </div>\n</div>\nAnd like Pascal said:\n\nIf that isn't a cool feature, I'm sold.\n\nThanks for that awesome module that surprises me everyday!\n. ",
    "4kochi": "Ok. Thanks. I will have a look. \n. Seems to be a problem with angular 1.5.x. The command TEST_SCOPE=angular_1.5.x grunt test fails. The other angular versions are fine.\n. ",
    "reda-alaoui": "Hello,\nIt seems that this behaviour appeared between 2.4.1 and 2.11.0\nWe discovered it when updating angular translate library.\nWe have a process that call angular-translate for a bunch of keys for translation. We store all related promises in an array and then call $q.all on it.\nBefore, when one of the key was missing, the promise was resolved anyway with the key of each missing translation.\nNow, the rejection of one promise implies the rejection of all promises.\nMoreover, I think this is akward since the filter does not behave this way. It just returns the key when the translation is missing.\nIs it possible to fallback to previous behaviour by introducing a setting for example?\n. ",
    "satyavanu": "sorry please check this link  :+1: \nhttp://output.jsbin.com/nitagojeqo#\n. when you switch to russian, The ascii values gets displayed : \u00d6\n. in the last comment I posted link, here is my question,\nlet's say I am translation json as  {\"tittle\" : \"test\u00dc\"}.If i use translation filter  {{\"tittle\"  | translate}}   I expect the text should be displayed as test\u00dc but it displays as  test\u00dc\n. ",
    "vikeen": "@knalli, fair enough. Thank you for clarifying and acknowledging this.\n. ",
    "SebastianSchirmer": "@knalli Thanks for your really fast reply! Let's say we'd call the above translation id 20 times from different places in the code like this:\n<span translate translate-values=\"{ adminemail: vm.adminEmail }\">userprofile.popup.title.email_to_admin</span>\nWhat we'd like to achieve is that we do not have to pass in the variable into the directive 20 times so that we could use it just like this:\n<span translate>userprofile.popup.title.email_to_admin</span>\nHowever, the key-value pair in our translation json file would still look like this:\n\"userprofile.popup.title.email_to_admin\": \"Send an email to {{ adminemail }}\"\nand {{ adminemail }} would be replaced by a global variable somewhere. In other words, we would like to get rid of padding in the same scope variable into the directive again and again.\n. ",
    "froger-me": "That seems to do the trick - although I'm really not sure about performance with that cache thing.\nInspired from http://embed.plnkr.co/EK2TYI1NZevojOFDpaOG and https://glebbahmutov.com/blog/async-angular-filter/\nMaybe there would be a way to clear that cache variable once it grows big?\n```\n// Including ngTranslate\nangular.module(\"ngTranslate\", [\"ng\", \"pascalprecht.translate\"])\n.config([\"$provide\", \"$translateProvider\", function (n, m) {\n    var $TranslateProvider = function () {\n        var n, t = {};\n        this.translations = function (n, r) {\n            if (!n && !r) return t;\n            if (n && !r) {\n                if (angular.isString(n)) return t[n];\n                t = n\n            } else t[n] = r\n        }, this.uses = function (r) {\n            if (!r) return n;\n            if (!t[r]) throw Error(\"$translateProvider couldn't find translationTable for langKey: '\" + r + \"'\");\n            n = r\n        }, this.$get = [\"$interpolate\", \"$log\", function (r, a) {\n            return $translate = function (e, i) {\n                var l = n ? t[n][e] : t[e];\n                return l ? r(l)(i) : (a.warn(\"Translation for \" + e + \" doesn't exist\"), e)\n            }\n        }]\n    };\n    $TranslateProvider = angular.extend(m, $TranslateProvider);\n    n.provider(\"$translate\", $TranslateProvider)\n}]);\nangular.module(\"ngTranslate\").directive(\"translate\", [\"$filter\", \"$interpolate\", function (n, t) {\n    var r = n(\"translate\");\n    return {\n        restrict: \"A\",\n        scope: !0,\n        link: function (n, a, e) {\n            e.$observe(\"translate\", function (r) {\n                n.translationId = angular.equals(r, \"\") ? t(a.text())(n.$parent) : r\n            }), e.$observe(\"values\", function (t) {\n                n.interpolateParams = t\n            }), n.$watch(\"translationId + interpolateParams\", function () {\n                a.html(r(n.translationId, n.interpolateParams))\n            })\n        }\n    }\n}]);\nangular.module(\"ngTranslate\").filter(\"translate\", [\"$parse\", \"$translate\", function ($parse, $translate) {\nvar cached = {};\nfunction translateFilter (translationId, interpolateParams) {\n\n    if (translationId) {\n        if (translationId in cached) {\n            return typeof cached[translationId].then !== 'function' ? cached[translationId] : undefined;\n        } else {\n            if (!angular.isObject(interpolateParams)) {\n                interpolateParams = $parse(interpolateParams)();\n            }\n            $translate(translationId, interpolateParams).then( function (translation) {\n                cached[translationId] = translation;\n            });\n        }\n    }\n}\ntranslateFilter.$stateful = true;\nreturn translateFilter;\n\n}]);\n```\n. does not work with messageFormat interpolation: using a SAP, change state, come back to previous state, interpolation in message format isn't done and it displays the uninterpreted expression - Darn!\n. That seems enough - I'd like to point out I'm new to angular.\n```\nangular.module(\"pascalprecht.translate\").filter(\"translate\", [\"$parse\", \"$translate\", function ($parse, $translate) {\nvar cached = {};\nfunction translateFilter (translationId, interpolateParams) {\n\n    if (translationId) {\n        // seems very hack-ish\n        if (translationId in cached) {\n            // seems very hack-ish\n            var result = (typeof cached[translationId].then !== 'function') ? cached[translationId] : undefined;\n\n            // seems very hack-ish\n            if (Object.keys(cached).length > 100) {\n                cached = {};\n            }\n            return result;\n        } else {\n            if (!angular.isObject(interpolateParams)) {\n                interpolateParams = $parse(interpolateParams)();\n            }\n            // in truth, the whole thing seems hack-ish\n            $translate(translationId, interpolateParams).then( function (translation) {\n                cached[translationId] = translation;\n            });\n        }\n    }\n}\ntranslateFilter.$stateful = true;\nreturn translateFilter;\n\n}]);\n```\n. Well, the fact is, as I said, I have very little idea where I'm going with that (=> \"I'd like to point out I'm new to angular.\").\nAfter trying for hours to make the filter work with nested translations, I thought I'd open an issue to ask for advice, and meanwhile that wouldn't prevent me from trying and solve the issue I have on my own. Obviously I am prepared to receive feedback pointing out I said a lot of irrelevant things and went in bad directions -_-'.\nNow, it seems I did something wrong form the beginning, because the nested translations work without any changes. I do not know what I did wrong, but I'm sure it was because all that code is useless, the translations are displayed properly now. It's not an issue to make mistakes, but not knowing where is annoying.\nLong story short, seems it's a false alarm.\n. I know where I messed up now - the dreadful end comma in my nested translation:\n{\n    \"NAMESPACE\": {\n         \"TRANSLATION_ID\": \"A value\",\n         \"ANOTHER_ID\": \"Another value\",\n    }\n};\nSo, yeah, totally unrelated.\n. ",
    "delorge": "you can pass your translations into application constants and start using them immediately. hence, no need to download them separately\njavascript\nangular\n .module('myApp', [])\n    .constant('en_US', {\n      'HELLO_WORLD': 'Hello world!'\n    })\n. well I find it unmaintainable when I have 200 lines of each language in a single file, so i split them into different files. Of course, you don't have to put them into constants; you can import them if you use es6/requireJS, but if you don't, angular constants look reasonable beacause they are available immediately and may be declared in separate file.\nI don't say that my approach is best, but in my experience it worked out quite well.\n. ",
    "sergeykolesnikov": "Thanks for your answers! Yesterday I found out a solution. I just pass all translations from API to $rootScope variable when app starts, after this I take translation from there, so now I don't have a problem with time after first language change.\n. ",
    "timkraut": "@knalli Indeed, this works! Thanks a lot!\n. ",
    "sdecandelario": "Yes, i saw this, better to close the PR and i try it to make it again!\n. ",
    "courchef": "Perfect! Thank you very much.\nMay I suggest to add this link on the home page of the project, in the Installation section?\n. ",
    "JedI-O": "Finally had time to create a small Plunker:\nhttps://plnkr.co/edit/IT2CLQudpBYDZctdVI7z?p=preview\nYou see: Changing the language from English to Latin changes the text directly put on the page, but doesn't change the ng-options inside the select.. ",
    "giri7io": "I fixed your plunker,\nhttps://plnkr.co/edit/JeZDNw7HozXhTDIZDjOA?p=preview\nAs per documentation:\n\nReturns a translation instantly from the internal state of loaded translation.\n\nI think it translates(based on loaded translation language) and returns a string instantly, \nit's unaware of later changes to translation language\ninstead you can use 'translate' filter \nhope this helps.. ",
    "spiroid": "I can't reproduce the travis output.\nUnit tests are running fine on my laptop. Moreover, it seems that the failing unit test has nothing to do with the refactored code. \n*edit: * the issues reported by travis in unit tests seems to happen in an unrelated pull request #1545\n. hi @knalli,\nThanks for the feedback.\nI updated  the PR to the latest commit on canary as of today.\nI saw the context parameter :+1: \nIt will surely help to have more context on what called the translation functions.\nI assume it is better to use one of the new sanitize strategy than a null value. To be compatible with the existing code base, i kept that possibility.\n. ",
    "mudin3i": "@tspaeth  There are many issues related to this.\nI didn't see them before.\n$translateProvider.useSanitizeValueStrategy();\nworks for me!\nThank you\nMudin\n. @knalli  Yeah you are right. Is there any other way to solve my issue instead of setting useSanitizeValueStrategy(null)?\n. Hello @knalli,\nThank you for a great work!\nI just updated to 2.12.1 and it is working with\n$translateProvider.useSanitizeValueStrategy('sanitize');\n. ",
    "JamesHenry": "An important update to this is that Chrome 52 is no longer Canary - it is stable.\nMoving between 51 and 52, my production app has now changed in its handling of Missing Translation errors when fallbacks are available. It used to silently fallback to the configured fallbackLanguage but now throws an error in every case which is hammering my logs.\nTo confirm: No code changes were made, the behaviour changes purely by changing browsers.\nIf you feel that this might be unrelated to the failing tests above, I would be happy to open a new issue\n. New issue created: https://github.com/angular-translate/angular-translate/issues/1554\n. Updated description with plnkr https://plnkr.co/edit/1q4logYLNvKB0Rf7JG1q?p=preview\nAs you can see the fallback language is taking effect - foo is being translated to bar - but it is logging an error to the console\n. Now I feel like I am going mad as the behaviour seems consistent across Chrome 52, FF and Safari... :smile:\n. I apologise if this has always been the behaviour and I have just somehow not observed it. It is possible that there was a caching (of selected language) issue to blame for me seeing one behaviour pre-update and another post.\nIf you can confirm that is what is supposed to happen, feel free to close the issue and I will work out a better way to handle it in my app!\n. Thanks @tspaeth, sorry for the false alarm\n. ",
    "Psysoul": "+1 Issue exists and can be reproduced ie:\n1. Use 'en' as preferredLanguage\n2. Try to use $translate with forcedLanguage set to 'de'\nResult:\n$translate fails even tho the translation files are being loaded from the network.\nAs Jzahka wrote it could be fixed at L1115, similar to this:\n```\n var promiseToWaitFor = (function () {\n          var promise;\nif (forcedLanguage) {\n    promise = langPromises[uses];\n} else {\n    promise = $preferredLanguage ?\n            langPromises[$preferredLanguage] :\n            langPromises[uses];\n}\n```\n. ",
    "jzahka": "https://github.com/angular-translate/angular-translate/pull/1459 implements the same fix that I suggested, fine by me if this is closed. Thanks!\n. ",
    "mtwar": "I have a fix for this and am trying to figure out how to pull request on this repository. I haven't checked, but this may also fix 1480. Please verify whether this implementation resolves your issue. Here is my local commit message and code fix:\nfix(translateCloak): incorrect element reference\nIn some instances, the element actually injected and populated in the DOM appears to be a copy of the template element passed to $compile. In this situation, although translate-cloak's logic operates normally, the changes apply to the template, not the actual DOM content, so the cloak is never removed. This fix changes the operative element reference post-compile to the element reference provided to the postLink function, which always references the actual DOM content, thereby propagating the changes as expected. The erroneous behavior was observed when applying translate-cloak inside a directive template.\n```\nfunction translateCloakDirective($translate, $rootScope) {\n'use strict';\nreturn {\n    compile: function (tElement) {\n      var applyCloak = function (element) {\n        element.addClass($translate.cloakClassName());\n      },\n      removeCloak = function (element) {\n        element.removeClass($translate.cloakClassName());\n      };\n      applyCloak(tElement);\n  return function linkFn(scope, iElement, iAttr) {\n    //Create bound functions that incorporate the active DOM element.\n    var iRemoveCloak = removeCloak.bind(this, iElement), iApplyCloak = applyCloak.bind(this, iElement);\n    $translate.onReady(iRemoveCloak);\n    if (iAttr.translateCloak && iAttr.translateCloak.length) {\n\n      // Register a watcher for the defined translation allowing a fine tuned cloak\n      iAttr.$observe('translateCloak', function (translationId) {\n        $translate(translationId).then(iRemoveCloak, iApplyCloak);\n      });\n      // Register for change events as this is being another indicicator revalidating the cloak)\n      $rootScope.$on('$translateChangeSuccess', function () {\n        $translate(iAttr.translateCloak).then(iRemoveCloak, iApplyCloak);\n      });\n    }\n  };\n}\n\n};\n}\n```\n. @knalli I have looked at the guide, but I'm currently running into 403 and permission denied when pushing my branch. I do have some time to deal with this now that our product at work is in GA though :) \nI also found another issue with the logic here and can include that as well; basically, the $translate.onReady handler needs to be assigned in an else branch off the iAttr.translateCloak conditions, otherwise it is always called and the cloak removed onReady, even if the specified translationId is not available yet. That change, along with a change I am submitting for $translate.refresh to reassign the language promise, will result in translate-cloak working appropriately with the $translatePartialLoader by gradually uncloaking the page as controls load their strings files.. Fix: https://github.com/angular-translate/angular-translate/pull/1689. Fix: https://github.com/angular-translate/angular-translate/pull/1689. The problem here is that the promise for the language is not reassigned during refresh, so $translate incorrectly reports that the translations are loaded for the table that the partial loader is updating. I have a fix and will post it as soon as I figure out why I don't have permission to push to the repository.\n. The fix I made for this also causes a regression where the translate cloak directive will not decloak on the first load of a particular part. This is due to a problem in the way the promises from loadAsync are handled in refresh. The $q.all promise resolves after all of the handlers on the individual promise queues, which will always cause determineTranslation to have a cache miss on the first call to $translate after a part is added, this first call being the one from the translate-cloak directive. The fix is to just add the translations call (to update the global table) to each promise queue individually before the q.all promise is established. I'll include this as well with the other fix I mentioned previously. I think I now have two for translate-cloak, two for refresh, and one for the partial loader that together make them behave sanely together. I'll be sure to post them soon; bug me if I don't!. Fix here: https://github.com/angular-translate/angular-translate/pull/1688. The change you're attempting here will cause an unexpected behavioral change because no subsequent call will ever create a new request, regardless of the success or failure of the original call, whereas the original code would try again. If the code using the partial loader has its own logic to retry the part registration/fetch (perhaps because it has some server status monitoring), then your implementation will cause a regression. \nI propose a more extensive change to chain promises for subsequent calls. Such an implementation will allow subsequent calls to execute a retry on failure, but no parallel HTTP requests will be made and success will pass through without extra requests. This is in-line with the intent of the original logic, which prevents duplicate requests on success. I made this change for our app but have not had an opportunity to resolve why I can't push to this repository yet; here is a diff with my changes: https://www.diffchecker.com/QPAr2sVy. My commit list got a little messy from how I forked/updated this, but it's just my work in the diff :). I see I'm getting test failures because of the use of \"this\", but the original function also used \"this\" and I'm handling it correctly with closure scoping. Should I be concerned about this?. I refactored it, will resolve the test failures ASAP.. @knalli this last test appears to be failing due to the intended behavioral change, which is that duplicate HTTP requests should not be made. The test is written assuming that five HTTP requests will be made for the three parts in its loader, whereas only three HTTP requests are now made. Should I just rewrite the test to account for this?. This is not safe to merge unless https://github.com/angular-translate/angular-translate/pull/1693 is also merged.. ",
    "projenet": "Portuguese translation\n. ",
    "saoron": "You can do it in the view\n<select ng-repeat=\"language in languages\">\n      <option translate=\"LANG.{{language.CODE}}\" ></option>\n </select>\nAnd in your translation JSON just keep a translation for the languages for each language.\n{\n    \"LANG\":{\n       \"EN\": \"English\",\n       ...\n    }\n}\n. ",
    "KrekkieD": "when it uses the define I need to require the translate file in order for the module to be registered (it runs factory() only when the module is required). Since my angular app is not using require or any other AMD loader I cannot load the translate module, since I dont require anything. \nA fix here could be to run factory() before the define([], function () { return factory(); }), but that still does not fix the error Mismatched anonymous define() module which happens when you load the file not via the AMD loader but by using a script tag (since no name is provided in the define, i.e. define('pascalprecht.translate', [], function () { ... }).\n. See these fiddles :)\nGood: No requirejs present: https://jsfiddle.net/0vxw61xy/2/\nBad: With requirejs present: https://jsfiddle.net/keoqdhyw/\n. That's indeed what is happening. The reason it's like this is that it's being used on a corporate website which features angular stuff and legacy non-angular stuff based on AMD modules. Our angular app is using a build process that wraps all files together, the libs itself (i.e. angular, translate) included.\nI think adding names into the defines may actually be more complicated than it seems.\nWould it not be possible to align with angular or ui-router in terms of implementation? Since angular is kinda weird in terms of module scoping I'm not sure how much actual benefit the AMD wrapper provides. The AMD effect can be achieved by configuring requireJS to load the file as non-AMD source. I do understand that would be a breaking change though. \nMaybe adding an unwrapped version in the dist is easiest?\n. ",
    "eliasson": "Would it be possible to have a separate release including this fix?\n. ",
    "mendeza": "Meanwhile, there is no shortage of others filling the void for Angular 2+, for example https://github.com/ngx-translate is being used by a team in my company who previously used angular-translate with Angular 1.\n. Well, my team hasn't used it, and I can't speak for the other team, but they are starting to build enterprise software with it, though still in early days. In fairness, the ngx project describes itself as \n\nAn implementation of angular translate for Angular 2\n\nmeaning of course that it is at the very least strongly inspired by this project.\nDon't be disheartened, with increased community effort there is still plenty of room for a next-gen version of Angular Translate. It is well-established, respected, and mature compared to many other ephemeral projects. \nOut of curiosity, now that the Angular 1.6 test has passed do you intend to cut a release, or will wait until this list is cleared? https://github.com/angular-translate/angular-translate/milestone/34\n. ",
    "mickyinba": "the working application is on this URL (language switching is temporarily disabled but language defaults to using JSON translation file for en-AU. There is another JSON translation for lv-LV which can be accessed if cookie value is edited):\nhttps://memberstest.icompetenatural.com/#/\n. Where is the documentation for this?\n. ",
    "skyboyer": "since translate -namespace stores namespace name in $scope it's possible to fetch it and use for filter:\n{{translateNamespace + '.bar' | translate}}. ",
    "Triplecorpse": "Resolved. Cannot use $translateProvider.translations() and $translateProvider.useLoader(); simultaneously\n. ",
    "vprasanth": "@webattitude I can't seem to reproduce this \ud83d\ude15 \n. ",
    "webattitude": "weird, but I'm not surprised...\nI can't figure out what is going on\n. Also I'm not sure what to do to point out the source of this\n. Yes, of course, sorry for that. I just hoped someone has had the same issue.\nI'll just do as you say, update the lib and keep in touch.\n. ",
    "hank-hong": "@knalli  Thank you very much. It's OK now by using sanitizeParameters.\n. Hello @knalli  \nThanks for your response, but could you please tell me how to read the json in some special path if I won't prefix with an absolute path.\nFor example, if the json in \"/folder1/folder2/langs/\" on server, how can I set the configuration?\n$translateProvider.useStaticFilesLoader({\n      prefix:  ???  ,\n      suffix: '.json'\n    });\nIf I didn't prefix with a path, it doesn't work.\nThanks\n. Hello @tspaeth  \nIt works, only remove \"/\" at the beginning.\nThank you so much, it puzzled me for a long time. I think it's the best way.\nThanks again!!!\n. ",
    "SiegfriedEhret": "Wow I clicked on \u00abimprove this docs\u00bb from the website that ask me to update from master branch, and the PR comment ask me to PR\u00a0against canary, I'm not sure what do to.\n:gift_heart: \n. ",
    "kopancek": "Added a PR, feel free to review.\n. ",
    "dbrgn": "Doesn't seem to work for me though... Maybe I'm doing something wrong? Can someone confirm that it works now with the version installed through bower?\n. @knalli thanks. strange, then I'll have to debug some more :)\n. ",
    "a-change": "Hi,\nDon't know if it's a bug or it isn't supposed to work this way or just my errors somewhere, but it seems that translate-attr=\"\" doesn't work for directive attributes, like in this case with ui-select: \n<ui-select-match translate-attr=\"{placeholder: 'PLACEHOLDER'}\">{{$select.selected.value}}</ui-select-match> (angular-translate: 2.13.1, angular: 1.6.1)\nHere's a plunkr: https://plnkr.co/edit/r5aBGLVXIqXoxWvJSWge?p=preview \nIn this case it seems it successfully adds the attribute to the wrapping <div> but not to the <input> element inside it. Filter works fine and adds the attribute both to the <div> and the <input>.\nA similar thing is reported here: http://stackoverflow.com/questions/41035450/angular-translate-directives-attribute-without-the-filter. ",
    "jamesbrobb": "Did this issue ever get resolved? I'm still experiencing it in version 2.15.1. @odedniv sorry, should have been more specific. I'm referring to the previous point raised by @a-change.\nUsing translate-attr to set a bound attribute does not appear to work.. Will do, thanks for the response\nOn 23 Jun 2017 09:48, \"Oded Niv\" notifications@github.com wrote:\n\n@jamesbrobb https://github.com/jamesbrobb I told @a-change\nhttps://github.com/a-change as well - this is not related to the\noriginal bug opened by @nunof07 https://github.com/nunof07, why not\nopen a separate issue that can be discussed with a proper title?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1577#issuecomment-310609696,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ABq8tcbKinqLeunMi-3tGpHgj2LHSGD_ks5sG3vUgaJpZM4J1uEP\n.\n. \n",
    "SET001": "I also have $translate.use('en'); in my main controller but that does not change anything\n. I'm using browserify to put all my files and libraries in single file so there is no need to show JS loader. I do not loading translation from anywhere, I declare them in application configuration as show in my first post.\nIn templates I'm trying both ways:\n<li ui-sref-active=\"active\"><a ui-sref=\"news\" translate>common.home</a></li>\nand\n<li ui-sref-active=\"active\"><a ui-sref=\"news\">{{'common.home'|translate}}</a></li>\nIs this problem suppose to happen when all translation strings declared in application configuration block?\n. Thank you. Indeed those phrases were on base html file. I have to move them to ui-router templates or use translate-cloak\n. @tspaeth,  what problems do you mean saying \"And a bigger JS file could still cause this behavior.\". Currently on my local dev environment the whole application concatenated in 5MB file (which loads in ~200-250\u2009ms)\n. ",
    "AkkiKumar9487": "Thanks for your reply\nThis Post Disable Cache helped me, Not it is working fine.\n. ",
    "axetroy": "@tspaeth @knalli \nHello, I have some problems with this.\n```javascript\n// ====== app.config.js ======\n  $translateProvider.useLoader('translationLoader', {\n    files: [\n      {\n        languageKey: 'en-US',\n        shortKey: 'en',\n      },\n      {\n        languageKey: 'zh-CN',\n        shortKey: 'zh',\n      },\n      {\n        languageKey: 'zh-HK',\n        shortKey: 'hk',\n      }\n    ]\n  });\n$translateProvider.useSanitizeValueStrategy('sanitize');\n  //  $translateProvider.translations('zh-CN', i18n.zh);\n  // $translateProvider.translations('en-US', i18n.en);\n  // $translateProvider.translations('zh-HK', i18n.hk);\n  $translateProvider.preferredLanguage(i18n.lang);\n// ====== translateLoader.service.js ======\nclass TranslateLoader {\n  constructor() {\n    this.langs = {};\n  }\n$get($http, $q, co) {\n    'ngInject';\nconst provider = this;\n\nreturn options=> {\n  let files = options.files || [];\n  let key = options.key;\n\n  let localeFile = _.find(files, v=>v.languageKey === key);\n\n  return co(function*() {\n    if (!localeFile) return yield $q.reject(options.key);\n\n    let fileName = `${localeFile.shortKey}.locale.json`;\n\n    if (!fileName) return yield $q.reject();\n\n    let resp = yield $http(angular.extend({\n      url: '/assets/locale/' + fileName,\n      method: 'GET'\n    }, options.$http));\n\n    let lang = resp.data;\n\n    provider.langs[key] = lang;\n\n    return yield $q.resolve(lang);\n\n  }).catch(function (err) {\n    console.error(err);\n    return $q.reject(err);\n  });\n\n};\n\n}\n}\nexport {TranslateLoader};\n```\nThe problems is: it will work in Chrome, not work at Firefox.\nin the Chrome runtime, it will load the lang-pack and init the program. all work like expect.\nbut in Firefox, it will load the lang-pack too, but it will not init, all HTML is origin code.\njson\n{\n  \"hello\": \"hello world\"\n}\n```html\n{{'hello' | translate}}\n chrome has been compile \nhello world\n firefox not compile at all \nhello\n```. ",
    "ruisilva450": "I missed the point. Edited the original issue\n. That is a great help, but doesn't solve my primary issue. \nI don't want to have to visit all pages so that I have this error logs.\nEDIT: I can't find a way for this to work. Seems so simple, yet I can't see any messages on console after using $translateProvider.useMissingTranslationHandlerLog()\nNo error throwing also.\nMy code: \n$translateProvider.preferredLanguage(languageDefault);\n$translateProvider.useMissingTranslationHandlerLog();\n$translateProvider.useLoader('customLoader', {\n     serviceBase: servicebase\n});\n$translateProvider.useSanitizeValueStrategy('escape');`\n. ",
    "mynameisrufus": "I will just leave it here for the googles then :)\n. ",
    "arty-name": "I can\u2019t be sure, but for my relatively simple use cases I have just plugged the new version in and it works. Mayme @eemeli himself can comment.\n. ",
    "karl-freeman": "If you're referring to the \"sce\" and \"sceParameters\" strategies, I have tried them in our use case and checked their source code, but they don't seem to be a clean solution to our issue.\n- sce:\n  - Trusts the translation text as HTML. It can be used as a crude workaround to the doubly-escaped ampersand problem, but it does not seem like the correct approach to \"trust\" our translation text \"as HTML\" when it does not contain any HTML. \n  - Escapes interpolation parameters in service (and directive) context. However, we need to escape both the text and the parameters in directive context only.\n  - Using $sce to trust certain strings as HTML actually creates more XSS vulnerabilities than using the null strategy, since Angular's sanitization gets bypassed.\n- sceParameters:\n  - Trusts all interpolation parameters as HTML. This seems to me like an insecure approach. When testing this strategy, the end result appeared the same as when using the null strategy.\nIs there anything I'm missing?\nHere is the plnkr I used for the test: http://plnkr.co/edit/OYLnLicpe3WMuS61Y1ku?p=preview\n. Thank you for the provided demo. The \"escape2\" strategy looks close to what we need: directive and filter both look the same, they resist XSS, and you can still use ng-bind-html to explicitly use any string as HTML while using others as plain text. All good.\nHowever, the \"service\" variant of the \"escape2\" strategy can be seen doubly escaped: once by $translate and a second time by Angular's templating mechanism.\nIn addition, I see a legitimate reason for using the $translate service without HTML escaping: Imagine a situation where you are building a CSV file with translated messages. You wouldn't want to see the < character converted to &lt; in a CSV file that has nothing to do with HTML.\nThe solution would be to use three different contexts (service/filter/directive) instead of the current two. Would that fit the current philosophy of angular-translate?\n. For HTML templates, yes, I can insert the service-computed string using data-ng-bind-html, which makes it render correctly, but it makes the template more verbose and misleads by using the word \"html\" despite only working with a plain text message.\nFor the CSV output mentioned earlier, let's say the generated CSV file needs to be uploaded using an HTTP POST request. If you added strings to the CSV file using $translate and \"escape2\", it will contain HTML entities. You would then need to strip them somehow. It would be preferable if those were never added to the string in the first place.\nThe three contexts (service/filter/directive) still seem to me like the most reasonable solution.\n. ",
    "sajan45": "Well, I found out that it was due to some improper linking of translation ids. So I will close this issue now.\nThanks for this amazing module and your quick response.\n. ",
    "TheWrongAlice": "Did this get anywhere? I need this :D\n. ",
    "JacobJohansen": "@knalli \nWe the map contains a file name with a hash attached. its unique per file\n. @knalli \nLooking at the URL loader, I'm not sure what would be gained by adding the file mapper feature since it's based on directly injecting the correct URL. it could still be added. \nI'm not sure how the function resolver would be more beneficial, I currently can't come up with any other use cases to justify adding the layer of abstraction.\n. ",
    "FagnerMartinsBrack": "@knalli Any news on this one?\n. @tspaeth \ntbh, given the state of the codebase and that we have a decent coverage of this use case, I don't think this will add much value. Although I definitely agree that it is useful to create code composed of small functions because it can be self-documented.\nI would suggest to add this issue as a comment to the test and create a function !isValidFallback(fallbackValue) (as you see, also renaming result to a more meaningful name since we are still working on this line).\n. Are we expecting only undefined here? If yes can't we just if (result === undefined)?\n. ",
    "pdjole": "Hey, i also tried simple tutorials and it works, i suppose it has to do with our project's huge and complex dependency mechanism. I cannot model it well in plankr, so sorry for trouble, i will find a way around it.\n. ",
    "hemachandrav": "Thanks. After removing \"/\" at the beginning it's working for me.. ",
    "kaythree": "A=B format. See the properties file below\nGCC_USERNAME=\"User Name\",\nGCC_PASSWORD=\"Password\",\nGCC_LOGIN_TEXT=\"Login\"\n. This is what I am trying to read the properties file..\n\n\n{{ 'GCC_USERNAME' | translate}} : \n{{ 'GCC_PASSWORD' | translate}} : \n\n\n\n. ",
    "provegard": "Here: \nhttps://github.com/angular-translate/angular-translate/blob/master/src/filter/translate.js#L61\n...since that line of code doesn't work properly in all cases given the parse context will be null/undefined.\n. But sure, it works as long as the parsed object doesn't depend on the scope. Perhaps that's a valid use case?\n. That has no effect as far as I know, the end result will be the same. But sure, it's clearer than using this.\nGiven ES6 Proxy support, we could catch all property access on the context, and throw a descriptive error in that particular case, but it would only help in modern browsers, so I guess it's not worth the hassle.\nPerhaps there's nothing to do about this. But a big note in the documentation would be good!\n. Sure, I'll fix!\n. ",
    "yusk90": "Hi @knalli \nOk, sorry for minified code, updated version: https://plnkr.co/edit/CmFVg7v5wHVzx7bPHn8r?p=preview.\nI've also added text that doesn't use messageformatting and it translates correctly both ways. I don't sure if it's a problem with angular-translate-interpolation-messageformat or with messageformat itself. For me it looks like for pluralized message plugin somehow doesn't change locale. Hope it helps a little.\n. At the same time if I start app with\n$translateProvider.preferredLanguage(\"ru\");\nit works as expected for all cardinals, but still messageformat doesn't detect locale change when switching between languages.\nOk, if it's not a problem with angular-translate adapter, I'm sorry for taking your time.\nWill try to dig deeper into problem.\n. ",
    "fmunafokion": "Here it's: https://plnkr.co/edit/FRgoJTVt8yrX8E25cvlU?p=preview\n. You are right, \"it does not make sense setting the namespace globally on the service\", without changing it when needed.\nWhat if each page has a different namespace, each page one and only one namespace? Or, module speaking, what if each module has only one page? A developer should add the directive, translate-namespace, on each page. Adding setTranslateNamespace is the only way to avoid this boilerplate code in each page.\nFurthermore, the same applies using modules with more than one page, the standard way. It could be possibile to automate namespace changes, intercepting navigation between modules, without adding the directive on each page of module.\nFilippo\n. ",
    "MarijnMensinga": "Sorry the translation had to be done via filters in order to get the error, I updated the plnkr:\nhttps://plnkr.co/edit/iWdsq62cnGAY3mdN3aTM?p=preview\n. @knalli are you planning on creating a fix for this? If so, when will it be released you think?\n. I've created a PR #1630 \nThis fixes my problems.. I'm not 100% sure this is enough for a permanent fix in the entire library?\n. @tspaeth unfortunately I'm not deep enough in the code of angular-translate to create a testcase/unittest. The only thing I know is that these steps need to be taken to reproduce the problem:\n1. Use two different languages (eg. EN and DE)\n2. Set one langauge as fallback for another (e.g. EN is fallback)\n3. Select current language (e.g. DE is current language)\n4. Set sanitation strategy to sce \n5. Translate a string that only exists in the fallback language via filter (e.g. {{\"hello\"|translate}})\n6. The error will now occur\nDemo: https://plnkr.co/edit/iWdsq62cnGAY3mdN3aTM?p=preview\n. Thanks for the permanent fix. I already thought mine wouldn't be enough.\n. ",
    "fromi": "Thanks :)\n. ",
    "siebenfarben": "onReady does not \"Returns whether the service is \"ready\" to translate (i.e. loading 1st language).\"\nI understand, what the functions do. Only the documentation is duplicated, as I wrote above.\n. ",
    "MarcoDias7": "As I understood this, we use this to translate something directly in the controller, and pass it to the view with $scope.variable = translated value.\nI'm not sure I get it, I couldn't make it work for my case.\nIn my controller I have some popups :\nvar alertPopup = $ionicPopup.alert({\n            title: \"Erreur\",\n            template: data\n        });\nAnd I want to translate the title there.\nSo, if I have an error field in my translations array, I should do :\n$translate('error').then(function (error) {\n    $scope.error= error;\n  }, function (translationId) {\n    $scope.error= translationId;\n  });\nand put $scope.error in Title field of my popup ?\nI didn't understand the purpose of TranslationId, could someone explain ?\n. ",
    "Jay031": "I'm sorry I will do this! I should've known!\nThanks \ud83d\udc4d \n. ",
    "rishab-pdx": "team can you help me on this ?\n. Thanks for your swift and reactive reply,\nSorry for the typo I meant angular-translate not ng-translate.\nI just did that stack overflow link.\nDo you have any solution regarding this question ? @tspaeth \nThanks.\n. ",
    "omairkhan": "I think If you see carefully i have given the plnker url in the\nstackoverflow. please have a look in it. its really important for me to\nresolve it.\nRana Umair\nOn Sun, Oct 30, 2016 at 10:45 PM, Jan Philipp notifications@github.com\nwrote:\n\nHello,\nas we had already mentioned in the issue's template\nhttps://github.com/angular-translate/angular-translate/blob/master/ISSUE_TEMPLATE.md,\nwe need a working and as minimal as possible demo covering your specific\nuse case or issue.\nFollow these steps:\n1. Please open this plnkr base\nhttps://plnkr.co/edit/8vRLnfGmtg51qZFfDeVc?p=preview.\n2. Fork it (at the top left).\n3. Ensure the version of AngularJS and angular-translate is correct.\n4. Ensure all angular-translate plugins are available; reduce and remove\nanything you can.\n5. Write a minimal as possible demo for your specific issue.\n6. Save and freeze. Provide us the final link to your demo.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1628#issuecomment-257165974,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACaw7RZ9HN2iEpAyJws1cQYss0GbT-vkks5q5NepgaJpZM4Ke2lJ\n.\n. Thanks Jan. I am sorry to be rude little :)\nbut \ud83d\udc4d\n\n\u062c\u0632\u0627\u06a9 \u0627\u0644\u0644\u06c1 \u062e\u06cc\u0631\u0627\u064b\nRana Umair\nWebsite http://www.accordax.com | Mob : 0092-3224201085\nOn Mon, Oct 31, 2016 at 5:56 PM, Jan Philipp notifications@github.com\nwrote:\n\nA getter must return the value, i.e. https://github.com/angular-\ntranslate/angular-translate/blob/2.13.0/src/service/\nstorage-local.js#L35-L41\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/angular-translate/angular-translate/issues/1628#issuecomment-257286707,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/ACaw7Vz9pYQ410G1FfHZkAHbpwcgu6xQks5q5eVwgaJpZM4Ke2lJ\n.\n. \n",
    "Vengefull": "Getting the translations from a rest service and populating the $translationTable are 2 different things.\nYou are correct that the $translateUrlLoader is returning the data wrapped in a promise but this is not enough for the $translation to visualize the translations, since it is searching inside the $translationTable.\nAs i saw the only way to populate the translation is by using the $translateProvider.translations('lang',translations); at config phase where you are not allowed to use service/factory etc.  to fetch the translations => all users must hard code their translations ?\n. because the $translateUrlLoader is simply getting the translations wrapped in a promise - right ?\nAfter that the $translate (service/filter) is searching the passed translation id/key/param in the $translationTable which is not populated by the loader.\nexample:\nmyTranslJson.json\n{\n```\n \"first.translation\":\"This is my translation\"\n}\n```\n```\n// this will not populate the $translationTable\n$translateUrlLoader({\n                                  url : \"path_to_the_file/myTranslJson.json\",\n                                  key : \"en-us\"\n                                });\n```\nWhen the $translation (service/filter) is called it will look inside the $translationtable = >\n//code from the sources\nfor (var j = 0, d = possibleLangKeys.length; j < d; j++) {\n          var possibleLangKey = possibleLangKeys[j];\n         // next lines of code are passed because there is no $translationTable\n          if ($translationTable[possibleLangKey]) {\n            if (typeof $translationTable[possibleLangKey][translationId] !== 'undefined') {\n              result = determineTranslationInstant(translationId, interpolateParams, interpolationId, uses);\n            }\n          }\n          if (typeof result !== 'undefined') {\n            break;\n          }\n        }\n. knalli you are right about the documentation ->\n $translateProvider.useUrlLoader('foo/bar.json');\nYet this is a provider and i can not use it else were but in the config.\nAlso the $translateUrlLoader is a service which i guess could be used as it is outside the provider ?\nEven if i create a custom loader i still have to use it in the config phase, but unfortunately that is now what i want to achieve. \nThe desired behavior for me is to dynamically load translations per page (in the resolve method of the routeProvider)\n. @knalli \nI will take a look at it. \nThank you for the quick responses and the information .\n. actually i have one more question,\n$translatePartialLoader doesn't have service setPart() that i could use outside the config part.\nOnce again i am stuck at this config phase of the project.\nThe service addPart only sets the part name + priority. That doesn't allow adding content to the part.\nShould i config all \"Parts\" in the config phase?\nHow could I load different language translations to this part if i change the language ?\n. I will ignore the architecture thing.\nSo i did all the steps described in the documentation about the partial loader and how ppl could change the translations by this peace of code \nangular.module('contact')\n.controller('ContactCtrl', function ($scope, $translatePartialLoader, $translate) {\n  $translate.preferredLanguage('en');\n  $translatePartialLoader.addPart('contact');\n  $translate.refresh();\n});\nBut after the first call to the server there is no second one after the code above.\nThe first call in the config phase is ok, the data is returned wrapped in a promise - everything looks ok.\nBut in the controller when i call $translatePartialLoader.addPart('contact'); and the other things described in the documentation there is no second call to repopulate the translations for different part (create in the controller).\nIs it normal? - if yes then this still stays a limitation in the config phase or i don't do it right ?\nAnd which part of the api guarantees that the first call in the config part will be done when the controller is loaded and the user is trying to change the translations\n. ",
    "kresogalic8": "Okay @tspaeth thanks, i'll ask there.\n. ",
    "mitomm": "I'll see what I can do with the plunker if I find some more time (since I have to setup an async call to some server to load the bootstrap modal).\nI guess you are not seeing any issues in the demo base because those translation tags are not inside a directive that is loaded at a later point in time. Regular translation on the initial page work fine for me too.\nAlso, I just noted that I don't see the issue on my server (only while testing locally). So I guess it wouldn't even work in a Plunker. \nIm really sorry for those unspecific descriptions and I'm quite aware that it is really hard to replicate. Maybe someone else simpler situation with the same issue.\n. First of all, sorry for my late response.\nI tried hours to replicate the issue in a plunker. But, it seems to always work fine there. \nHowever, I was still able to narrow down the issue to a more specific situation.\nIt seems that the issue is related to .useSanitizeValueStrategy('escape'). If I leave out that line in my code, everything works fine.\nI also quickly looked into the angular translate code found that it has to be related to one of those lines:\nvar htmlEscapeValue = function (value) {\n  var element = angular.element('<div></div>');\n  element.text(value); // not chainable, see #1044\n  return element.html();\n};\nNot sure if this is still related to #1044 or if somebody else has an idea on what the issue might be related to?\nI guess it's rather expected, but still I'll point out that if I modify the above code to: \nvar htmlEscapeValue = function (value) {\n  return value;\n  };\neverything works fine.\nI'm really sorry that I still can't provide a minimal test case in a plunker (since the bug doesn't seem to occur there. For reasons beyond my understanding).\nIf I can provide further details, please let me know.\n. Btw, not sure if it helps but replacing those three lines with the same jquery counter parts produces the same results for me.\nvar htmlEscapeValue = function (value) {\n  var element =   $('<div></div>');\n  element.text(value);\n  return element.html();\n};. All issues are gone in the new Preview version 19. So I guess it was a safari bug.. ",
    "Syco54645": "\nDid you check on namespaces? (or do I get the question wrong?)\n\nThis would work but only if we are following that format for everything. Right now we only use that format if we need notes.. \"FOO\": { \"translation\": \"Translated Foo\", \n              \"notes\": \"Limit to a total of 20 characters\" \n      },\n\"BAR\": \"Translated Bar\"\nIs what I would like to accomplish where there is a way to define the library to always look at the \"translation\" key for the translation if it exists. Otherwise just use the value provided for the key. I do not see a way to configure this sort of thing. Hopefully I explained that clearly enough to make sense.. So a few of the problem translations are\n\"Est:\" : \"Est\u00a0:\",\n\"Estimate: High to Low\" : \"Estimation\u00a0: \u00e9lev\u00e9e \u00e0 plus faible\",\n\"Estimate: Low to High\" : \"Estimation\u00a0: faible \u00e0 pus \u00e9lev\u00e9e\"\nbetween \"Est\" and \":\" and \"Estimation\" and \":\" there is an ascii character 160 and that is showing as \u00a0 I have tried a.. of the various sanitation methods with no change. We are currently using the escape strategy as the docs note that there is a bug with the sanitize mode.. Sorry about that. Your example has shown what the issue was and I now have it sorted out. Thanks! In short I am now using escapeParamters sanitation service.\n. ",
    "nishantk9870": "when i remove the translate directive from the input the value getting assinged to model as expected \n. this works when a object is created in controller and a property is assigned to ng-model.\n. ",
    "krzysieki": "I started to use yarn (version 0.16.1) and this problem occurred.\nYarn gains popularity and I suppose that this trend can only improve.\nDo you really need node >6.9 for development? Most of JS features are available in node >6.\nMoreover there are situations when we cant upgrade node. Some CI systems still use node max version 4. \n. ",
    "eddiemonge": "For the package.json having the engine that high makes no sense unless there is something in the code that absolutely breaks on node versions less than that. If it is just to run dev tests and things like that then that should be in the travis or dev runner files, not the package file. . Why are you making it more complicated? You could keep it the same, remove the engines field and add a devEngines field with a check like this one https://github.com/facebook/fbjs/blob/master/packages/fbjs-scripts/node/check-dev-engines.js#L29-L61 (found from https://github.com/npm/npm/issues/9765)\n\nPro: \nKeeps the existing setup, no issues for the user\nDoesn't require a shadow repo (like the bower one which isn't really needed either)\nDev stack and publishing repo are the same (having them be different is a con, not a pro)\nCons:\nSome uses could ignore the warnings and notices. Do you really want a user like that contributing anyway though\n. \n\n\n",
    "alexnikolis": "We have an app that deploys to different regions with a slightly different version to each region. In general, the difference is only a slight text change to an info box or tooltip based on regulations for that region. Each region will have a different suite of languages and some regions won't have text for a particular info box/tooltip at all.\nSince the layout and functionality remain otherwise identical, I would really like to drive displaying the info boxes based on whether a translation is available at all. It's much easier for us to simply maintain a base json language file and merge additional json files as needed per region than 50 different template files.\n. I apologize if this is not the correct outlet for this discussion. I did a quick search before posting on where to discuss features and the consensus seemed to be the issue tracker since github doesn't have another built in discussion forum. While my issue is not nearly as ubiquitous, I've seen other feature requests on here and figured, since I'm having the issue, other might as well. It also doesn't seem too outlandish to me since missing IDs are expected in large apps and there is already functionality that manipulates the DOM based on missing translation data (translate-cloak).\nMy problem with using the error handler is that it doesn't seem to provide any reference to the element. I suppose I could set the element ID as the translation ID, but that seems confusing. \n@knalli I think it would make a lot of sense for translate-cloak to include this functionality when an explicit ID is provided, but it currently does not. We are actually having issues in general with using translate-cloak within transcluded content. Here's a plunker demonstrating both:\nhttp://plnkr.co/edit/agR6WG1qtjRwCWVynCKi?p=preview\nBelow is our present, quick-and-dirty workaround. I would love feedback for a better approach and would be happy to work on a pull request if anyone had a better idea of how to integrate this into the project. \n```\nfunction TranslateHideDirective($translate, $rootScope) {\n    var directive = {\n      link: link\n    };\nfunction link(scope, elem, attr) {\n  $translate(attr.translate).catch(function() {\n    elem.addClass(\"hidden\");\n\n    var removeOnChange = $rootScope.$on('$translateChangeSuccess',\n      function() {\n        $translate(attr.translate).then(\n          function() {\n            elem.removeClass(\"hidden\");\n          },\n          function() {\n            elem.addClass(\"hidden\");\n          });\n      });\n\n    scope.$on(\"$destroy\",\n      function() {\n        removeOnChange();\n      });\n  });\n}\n\n```\n. Hey Naimikan, here's a workaround I found in another issues thread. It's a bit awkward but seems to be working. Basically we now rely on adding translation in the resolve config option of a route declaration. Since $translate.refresh() returns a promise, we can delay loading a page until we confirm the translations have resolved.\nIt is also recommended that you create a helper service to reduce boilerplate:\n```\n(function() {\n  \"use strict\";\nangular.module(\"app\")\n  .factory(\"translationResolver\", [\"$translatePartialLoader\", \"$translate\",\n      function($translatePartialLoader, $translate) {\n        return function() {\n          angular.forEach(arguments, function(translationKey) {\n            $translatePartialLoader.addPart(translationKey);\n          });\n          return $translate.refresh();\n        };\n      }\n  ]);\n})();\n```\nYour route declaration will look like this:\nangular\n    .module(\"app\")\n    .config([\"$routeProvider\", function($routeProvider) {\n      $routeProvider.when(\"/app/my-page\", {\n        template: '<my-page></my-page,\n        resolve: {\n          translations: [\"translationResolver\",\n              function(translationResolver) {\n                return translationResolver('i18n/my-page');\n              }]\n        }\n      });\nEdit: Also, if you are interested in looking into this issue further, we found the default translation cache used by angular translate to be particularly problematic. i.e. $translateProvider.useLoaderCache(); results in the error. However, the gulp-ng-lang2js plugin makes use of this cache, so it's difficult to use a different cache and still rely on translation loaded up-front.\n. ",
    "Naimikan": "+1!. ",
    "felixmosh": "Because there are users that uses it... and it available on Bower repo but not in NPM.\n. Yeah, but i do want to move to new build system that involves Webpack, and without that its a problem.\nIf it is an easy task for you to publish that version you probably will help not just me.\nIf not, i will solve it in different way.\n. ",
    "joelongstreet": "What do you all think?. Sounds good. I went ahead and backed out the changes for the tests. Is this what you were asking for?. I'm sorry. I don't understand how it's possible to write a test which verifies a translationId returns as expected if only the string of a translation (and not the translationId) returns. Can you provide an example please.. That's awesome! Thanks!. ",
    "jakefreeberg": "I think I see how I might implement this but let me run it past you:\nWithin the translate-attr directive, you're watching the translateValues attr for updates.\nIf I did an Object.getOwnPropertyNames(attr) and started watching anything that started with translateValue I should be able to feed those values in.\nDoes that sound about right? \nI've had no \ud83d\udc4d  on this so I'm not sure its worth the effort, but I'd live to give a little back here so I may do it.. Thank you for managing the project and communicating it's status. I now understand that I may need to dig a bit harder and contribute to solutions for problems in this repo. I will pass this information on to other developers within my company who are using this codebase.. ",
    "timmipetit": "Ah indeed. I guess I expected something about this option on this page: https://angular-translate.github.io/docs/#/guide/14_pluralization. ",
    "sodac": "thanks a lot, i'm going to look into it and post the results\n. Ok, thanks a lot! This is what worked for me:\nDuring the post Processing i add a specific string containing the language, like \"###en-us\" to the translation.\nLater, when i receive the translation i split the received translation at the ###, seperate the translation from the language, and check if the language from the translation is the same as the active language.\nMaybe not the best way but it works.\nThanks a lot for guiding me to the post processing functionality!. ",
    "alippai": "I wanted to add a PR as well, but I can't find the given constraint. :S. It's stable now: https://github.com/angular/angular.js/blob/master/CHANGELOG.md\nMaybe the release notes and breaking changes will help to identify the problem. . ",
    "spock123": "The issue is with the $http service breaking changes. ",
    "z3ntu": "Can I expect this to be fixed in the near future?. ",
    "IliyaF": "Sure. I have updated the issue. Thanks. I managed to solve this using translate-default directive.\n Thanks. ",
    "cdloh": "~~Note that I have done this by setting the preferred language to a language whos resource doesn't exist but this results in an error in the browser.~~\n~~eg~~\n$translateProvider.preferredLanguage('XX-NO-LANG')\n~~Is there another way to do it?~~\nAbove doesn't work as the promises reject.. Apologies that I wasn't clear but twwt is spot on in this case.\nI got around this currently by having a English translation table that had no content / translations in it and disabling fallback so it essentially doesn't translate anything.. ",
    "GuyMograbi": "Thanks so much for pointing out I should add the same for $translate. done. \nRegarding your loader/processor comment - I just don't want translate to break. currently it breaks on null values. \nSo I want to define some default behavior, and if someone wants to change that behavior they can use loaders and processors. \nCurrently it feels too much like a bug.\nBut I admit this is a matter of taste. . Hi, what does that mean? Will is be accepted or is it rejected?. ",
    "Red-3": "@knalli\nI have this same question. \nWe have found that using angular-translate filters created considerable performance issues in our app - especially in IE11/Edge. So I'm refactoring the app to use the angular-translate directive and avoid using filters and bindings where possible.\nWe already include the translated field name in the (translated) error message using nested filters. The syntax I want to replace is:\n<small ng-message=\"required\">{{'error.field.required' | translate:{field:('common.myFieldName' | translate)} }}</small>\nIn my bundles (common_en.json & error_en.json) I have:\n{\"common.myFieldName: \"Field Name\"}\n{\"error.field.required\": \"{{field}} is required.\"}\nExpected output when required validator is violated:\n\nField Name is required.\n\nMy first attempt to use the directive. This works (but is inefficient and still relies on using the filter to translate the embedded token): \n<div ng-messages=\"vm.receiptDetailForm.driver.$error\">\n    <small ng-message=\"required\" translate=\"error.field.required\" translate-value-field=\"{{'common.myFieldName' | translate}}\"></small>\n</div>\nThis (which is what I think you're recommending) doesn't work:\n<div ng-messages=\"vm.receiptDetailForm.driver.$error\">\n    <small ng-message=\"required\" translate=\"error.field.required\" translate-value-field=\"common.truckNumber\" translate-compile></small>\n</div>\n1) Please could you explain what I'm doing wrong?\n2) Please could you improve your documentation of the \"Post Compiling\" feature and provide an example, because it makes very little sense to me (and I can't get it to work)?\nBTW: The link is broken when you click \"Improve this doc\" on your documentation page - it gives a 404 error.\nThx. @knalli Thanks for responding quickly.\nHere it is:\nhttps://plnkr.co/edit/leGbBcoxsCq7GubOkfEu?p=preview\n. ",
    "Beastw00d": "That does fix the issue. I should have checked that first. @knalli thanks for the quick response.. ",
    "jnizet": "I don't disagree with escaping everything. I just think a big red warning should be in the documentation about that, because it can have a significant impact on performance, that doesn't exist with the null strategy.\nRegarding the demo, no, nothing is missing. The point of the demo is to show that instead of showing \"France\" in the <h1> as it should (and as it does if you use the null strategy rather than the escapeParameters strategy), it shows nothing, because the strategy replaces the null value of the localName field by an empty string.. Great. Thanks @knalli. Keep up the great work!. ",
    "prabhjotkaur10": "yep sure...\nThanks.. ",
    "aquette": "@knalli thanks for considering this PR.\nThis seemed more consistent and reflecting the reality to us (Eaton and 42ity.org team), and we thought you would be interested in having this kind of feedback / contrib. Not that many people are looking into these area after all ;). ",
    "PawelDecowski": "@tspaeth How it wasn\u2019t my first place to ask the question is beyond me. Thanks!. For reference: http://stackoverflow.com/questions/41773278/how-to-implement-angular-translations-in-dependencies. ",
    "naperkovskiy": "Sorry I did another push, should be up now. ",
    "peterwesterlund": "All right, finally, here is the demo:\nhttps://plnkr.co/edit/5G3jJxF3DSfClzfopGEg?p=preview. Okay I changed to revolunet / angular-carousel instead. But having problem with the nested carousels. They won't appear. And after som debugging I found that they doesn't when coming from inside a translation string. There's still problem with the touch swipe functionality even testing outside translation string. But one problem at a time. So, how do I get the carousel from translation string to be built?. No, you can close this. I changed to another slider.. Well, as you can see on the link you referred to, I have already asked the question there but without any response. And I have been working with this the whole day. Trying other carousels and try learning how to do on my own. But aren't getting any further. This was kind of my last hope.. Yes, the answers usually comes after just minutes or at most some hour. Longer time tend to reduce the hope for answers. But of course I still hope for a response there. There's still hope. But I honestly thought I were allowed to ask the question here. Didn't meant to do anything forbidden. I just waited to write here because I expected more quickly response on Stackoverflow. I have actually struggled with this problem for some days now. So writing on Stackoverflow wasn't my first thing to do either. Always trying hard to resolve my issues alone before asking for help.\nWhen nothing worked, it also made me think it might be a bug. What do I know? Since I can't find any descriptions about how to do this in the documentation. Maybe it should work without any extra coding.\nThe link to the question on Stackoverflow: http://stackoverflow.com/questions/42020499/how-do-i-activate-a-angular-carousel-markup-loaded-with-a-translation-string. Not sure I understand. And I'm not using templates. All the HTML is in one big file. Im using <div ui-show=\"activeTab == 2\">Tab 2 content</div> to display the different \"pages\".\nShouldn't translate-compile work? I tried that but didn't work.. Okay so if I wanna manually update it. How do I do that? So that it updates it after translate is loaded.. But when I apply the attribute change, I need to know what language is chosen so that the right attribute value can be placed. So I need that info from angular-translate.. Finally, here is a demo: https://plnkr.co/edit/ZZPJL1ReOC0ZOz4VI4kU?p=preview. I'm sorry but I don't understand a bit what you are talking about. And I'm not sure if you meant your demos should work but they did not work for me anyway.\nAnyway I have understand this may be too difficult for me at this stage. I will have to do an ugly solution having the html inside the translate string..\nI really wish I understood what you described. But sorry.. ",
    "adofito": "Hi knalli,\nThanks for the prompt response but it doesn't work.\nI changed the case, the code looks like this now:\n<button \n        ng-click=\"undelete($event,id)\"\n        translate-attr=\"{aria_label:'Products.Create_Product.Undelete_Variant'}\"\n        translate=\"Products.Create_Product.Undo\"\n        ng-if=\"id.deleted\">\n  UNDO\n</button>\nI changed the case and this the html generated:\n<button  ng-click=\"undelete($event,id)\" translate-attr=\"{aria_label:'Products.Create_Product.Undelete_Variant'}\" translate=\"Products.Create_Product.Undo\" ng-if=\"id.deleted\" aria_label=\"Deshacer Borrar\">Deshacer</button>\nso the aria-label property is still being written as aria_label and the screen reader can't parse it.\n-Carlos. Plunker here:\nhttps://embed.plnkr.co/lkaSKP4aM5Q6BFlLGGdy/. Cool. Got it. So, the syntax is different with dashed attributes. Do you need help updating the documentation?. The doc reads as this:\n<ANY translate-attr=\"{ ATTRIBUTE_NAME: 'TRANSLATION_ID' }\"></ANY>\nThe actual functioning code here is\n<ANY translate-attr=\"{ 'ATTRIBUTE_NAME_WITH_DASHES': 'TRANSLATION_ID' }\"></ANY>\nThanks a lot. My point is not the case but the quotes around the attribute name when it contains a hyphen in the name. I assumed the ATTRIBUTE_NAME was just a placeholder not an actual style suggestion (as in, it should be all caps).\nSo, attribute without dashes no quotes needed, attributes with dashes in the name need quotes in the name.. ",
    "Flignats": "So, is it because I have multiple ng-apps that a custom storage solution is required?. Ok, so I went ahead and created a custom storage. However, I'm still having the same issue where the cookie is being set uniquely to each page.\nMy storage:\n```\napp.factory('languageStorage', function ($cookieStore) {\n    return {\n        put: function (name, value) {\n            $cookieStore.put('language', value);\n        },\n    get: function (name) {\n        return $cookieStore.get('language');\n    }\n}\n\n})\n```\nWhen using Chrome Dev Tools to view the cookie ( Application > Storage > Cookies ) I seen an entry for language with its value.\nBoth pages have the same cookie entry but the values remain unique to themselves. The 'Path' values are not the same, could this be causing an issue? Angular 1.3.15 does not support adding an options object to the cookie, so cannot add in { path: '/' } as a third parameter.\nThey have their respective paths:\n/Account\n/Profile. Unfortunately, I think the issue is related to the infrastructure and that 1.3.15 does not support a third options parameter. This is supported in 1.4.\nStill, localStorage does allow for persistent language settings, so there is that as a workaround.\nThanks for the help knalli.. ",
    "bschmitz9": "I'm testing to make sure the strings are being translated correctly within the template of a custom component I'm building. All works fine when translate is used as a filter but not as a directive. Running digest cycles manually in the beforeEach and within each necessary test doesn't seem to work either. It still interprets the \"button.label\" literally and doesn't translate. . Yep that does it. Thanks for the help!. ",
    "MSchip": "Here's the configuration simplified:\n```\n/ global module /\n'use strict';\n/**\n * Services                                                                                                 Directives - Web Components\n\n*/\nvar angular = require('angular');\nrequire('../../node_modules/angular-translate/dist/angular-translate.min');\nvar app = angular.module('i18n-implementation', ['pascalprecht.translate']).config(['$translateProvider', function ($translateProvider) {\nvar eng = 'eng';\nvar spa = 'spa';\nvar deu = 'deu';\n\nfunction get(argument) {\n    if (argument === 'eng') {\n        return {\n            testOne: 'English',\n            testTwo: 'EnglishTwo'\n        };\n    }\n    if (argument === 'spa') {\n        return {\n            testOne: 'Spanish',\n            testTwo: 'SpanishTwo'\n        };\n    }\n    if (argument === 'deu') {\n        return {\n            testOne: 'German',\n            testTwo: 'GermanTwo'\n        };\n    }\n};\n\n$translateProvider.translations(eng, getTranslationData(eng));\n$translateProvider.translations(spa, getTranslationData(spa));\n$translateProvider.translations(deu, getTranslationData(deu));\n\n$translateProvider.useSanitizeValueStrategy('escape');\n$translateProvider.fallbackLanguage(eng);\n$translateProvider.preferredLanguage(eng);\n\n}]);\nmodule.exports = app;\n```. ",
    "chewax": "Found solution. The problem was originated by headear size suported by nginx.\nIm closing the issue.\n. ",
    "detollenaere": "The additional addPart was well a mistake ;). But without this additional addpart, the bug is still there with the refresh + use combo. I will see if I can bypass the refresh step in my project. \n. Like I said, I will check in my project but I think it will be enough for us. I just want to inform you that the bug still occurs in this case. Thanks. ",
    "Tebra": "A quick update, I deleted all the other dependencies from my bower.json and added only angular.js and angular-translate.js and now it's working. So my setup is ok. \nI will now add the other dependencies one after the other to try and find out which one is causing the collision with angular-translate. \nI will post my findings here in hope that it helps other people.. ",
    "stephanebouget": "@Tebra I have the same issue since today.\nDid you find the dependency that causes the collision ?. ",
    "pfigueiredo": "For anyone having this problem checks the order of loading.  having it load at the end and making sure that angular-translate loads before angular-translate-loader-partial... as I was using angular-translate-loader-partial in my case.\n. ",
    "sadiksha": "Hi, Can you please have a look at this issue? \nThank you.. Hi,\nI am working on it. I will get back to you soon.. Ok @knalli thank you. I will try to create a stackoverflow issue about it. As for this issue, you can close it. Thank you.. ",
    "mota57": "UPDATE\nAs I see here is that the language is loaded asynchronous..therefore that's the reason of the issue.. If I do it  synchronously it will render all the html properly. My apologies for open and not need it issue. ",
    "malaupa": "This issue is not about the content. It is about the key which is used to determine a translation. We use HTMl content as well, but for the default translation case, which is, not to find any content for the key, should be escaping like a normal {{ctrl.binding}}-binding does.. OK, thank you for the clarification. I will use the a factory for useMissingTranslationHandler to escape keys. . ",
    "serchduran": "Thanks. ",
    "GabrielGil": "May this be what you're looking for?\njson\n{\n  \"COMMON\": {\n    \"OK_TEXT\": \"OK\"\n  },\n  \"ANOTHER_NAMESPACE\": {\n    \"OK_TEXT\": \"@:COMMON.OK_TEXT\"\n  }\n}\nhttps://angular-translate.github.io/docs/#/guide/02_getting-started. ",
    "gtzinos": "Okay thank you. You have a great project, upgrade it.. ",
    "amitparrikar": "I came up with a solution for One-Way Data-binding:\n'use strict';\nangular.module('MY_APP_MODULE').filter('i18n', function ($filter) {\n  function _i18n(input) {\n    var val = $filter('translate')(input);\n    if(input === val){\n      return;\n    }else{\n      return val;\n    }\n  }\n  _i18n.$stateful = true;\n  return _i18n;\n});\nOne-Way template data-binding is complete when the value bound is not undefined. ",
    "dhaval85": "Thank you. I managed to get it work using forceAsyncReload(true). :). ",
    "ZappaFan": "Hi,\nI had this problem as well, for me this happened because I was registering a partial loader;\n$rootScope.$on('$stateChangeStart', function () {\n      $translatePartialLoader.addPart('translation');\n      $translate.refresh();\n    });\nRewriting this for ui-routers new transition hooks gives\n$transitions.onStart( {}, function (transition) {\n      $translatePartialLoader.addPart('translation');\n      $translate.refresh();\n    });\nand then it worked fine. Hope this helps!. A plunker would be great, I tried to make one but it ended up working and now I can't get it to break nicely... (it's at https://plnkr.co/edit/S3RHEs9hsZgS4WVdXRCu?p=preview ). ",
    "nipmarsh": "Still not working for me... I'm also using the partial loader...\nYou want a plnkr and maybe some coffee?. ",
    "Darkein": "Hi,\nthanks for your answer.\nI'm sorry, because i needed a fast solution i spoke about how i could do it.\nBut the feature should be \"make the delimiter chars customizables\".\nDo you want me to create a \"proper\" new feature?. ",
    "jlongo-daitan": "Hello\nI\u2019d like to contribute. I\u2019m checking internally here in the company here if I can, because the time I found this bug I was working.\nRegards\nJo\u00e3o S\u00e1vio Ceregatti Longo\nSoftware Engineer\n+55.19.3112.1200 ext.1280\nDaitanGroup | www.daitangroup.comhttp://www.daitangroup.com/ | Accelerating.\u2122\nPrivileged and confidential. If this message has been received in error, please notify sender and delete it immediately.\nConte\u00fado confidencial. Se esta mensagem foi recebida por engano, favor avisar o remetente e apag\u00e1-la imediatamente.\nFrom: Jan Philipp [mailto:notifications@github.com]\nSent: s\u00e1bado, 20 de maio de 2017 13:07\nTo: angular-translate/angular-translate angular-translate@noreply.github.com\nCc: Jo\u00e3o Savio Ceregatti Longo jlongo@daitangroup.com; Author author@noreply.github.com\nSubject: Re: [angular-translate/angular-translate] .catch is breaking IE8 (#1733)\nThank you. Maybe you want contribute making a PR?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHubhttps://github.com/angular-translate/angular-translate/issues/1733#issuecomment-302882317, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AUWuJnTjLgnMLPHXOUCw_kQ833ewObKGks5r7w-YgaJpZM4Nf5Ln.\n. ",
    "marianborlean": "Hello,\nYou are right, it was related to injecting translate in the errorInterceptor. So everything is fine, thank you so much for your quick response, this issue can be closed.. ",
    "thfeng": "I am facing the same problem. my template was loaded before translate service to load the language file. . ",
    "hani647": "Can you please send me document link please? :) I appreciate your help. I'm using static file loader but problem is that my file is 120KB large so that if someone changes language then it takes 10 to 15 secs to download that file for that time user is not aware what is going on so to update user I need a GIF loader so that I'm using $translate.use() function to load my JSON file now I want that when I call $translate.use() then a GIF loader will be initialized which will last till entire file is downloaded. Can you please share a snippet if possible? I appreciate your help, Thank ! . Wait Wait Wait... Its not a bug? Really? My entire webpage is rendered but JSON file is still loading... Isn't a major bug? please buddy if you don't want to help? so no problem but please don't be upset.. Cheer Up ;) . Ok no problem I understand. Thanks For Your Quick response \ud83d\udc4d . grrrr. I've already gone through your documentation and also tried using different events but still the same result :`( . Any suggestions?\n. Well I might guess it's an angular bug !! \n. ",
    "kptLucek": "If you're using ui.router, you might consider placing an resolve with resolving your language in there.. ",
    "PAnvesh": "You can define the strings in a seperate file (languages/lan-en.json), and use below\n$translateProvider.useStaticFilesLoader({\n    prefix: 'languages/lan-en',\n    suffix: '.json'\n  });. ",
    "lararogu": "And where should I place the json file?.Now i have it in the same folder as my app config file but I am not getting the expected string values in the html view.. thanks,now is working!. ",
    "harryyuanfeng": "a, find solution for myself, I need to do:\nbower install angular-translate-loader-static-files\nconfuse sometime that I can see theuseStaticFilesLoader  function without loading the angular-translate-loader-static-files.min.js script. Sure.. ",
    "afitiskin": "There is simple fix for the problem: we need to change mapInterpolationParameters in /src/service/sanitization.js to this:\n```javascript\nvar mapInterpolationParameters = function (value, iteratee, stack) {\n    // simple check if value is Boolean\n    if (value === true || value === false) {\n      return value;\n    }\n    // following is the same as before\n    if (angular.isDate(value)) {\n      return value;\n    } else if (angular.isObject(value)) {\n      var result = angular.isArray(value) ? [] : {};\n  if (!stack) {\n    stack = [];\n  } else {\n    if (stack.indexOf(value) > -1) {\n      throw new Error('pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object');\n    }\n  }\n\n  stack.push(value);\n  angular.forEach(value, function (propertyValue, propertyKey) {\n\n    /* Skipping function properties. */\n    if (angular.isFunction(propertyValue)) {\n      return;\n    }\n\n    result[propertyKey] = mapInterpolationParameters(propertyValue, iteratee, stack);\n  });\n  stack.splice(-1, 1); // remove last\n\n  return result;\n} else if (angular.isNumber(value)) {\n  return value;\n} else if (!angular.isUndefined(value) && value !== null) {\n  return iteratee(value);\n} else {\n  return value;\n}\n\n};\n```\nBut, this way will work wrong with new Boolean() values. To cover new Boolean() we have to use something like lodash.isBoolean\n. PR is merged, so I think we can close the issue. @knalli Done, please check it. ",
    "TheTalisman": "LOL, exactly the same as my solution... fix: Timezone and DST agnostic Unit test #1748. @evancarey Yeah, easy to have happen.\nI was just curious to see if you had a different solution =). Like @evancarey, I ran into this with my first pull and build attempt. So, I have no insight into any over time changes to the behavior. But, I'm pretty sure that there was at least the possibility repro'ing this for quite some time.\nAs I believe that I noted in my PR, the timezone that I was running under when I initially encountered it was PDT. I ran a bunch of validation tests, changing my machine's location all around the world and the running the tests to verify the fix.\nOut of curiosity, @evancarey, what TZ were you running under on the machine your repro'd this?\nAnyway, the problem would vary because the test date was generated as a UTC date while an unqualified new Date() created in Chrome is generated as a local date. Since only the date portion of the timestamp was being compared, in order for a repro to occur the build machine had to be in a TZ where the conversion from UTC to local resulted in the hours being shifted enough to push the date portion of the timestamp into a different day. If you test the previous version, and set the local machine to different timezones around the world, you'll see that some locations will repro while others won't, because their local time offset against UTC is not enough to change the day (this will depend on the current time, too). As an aside, to make matters a little more complicated, Chrome's default Date usage used to be UTC and they switched it to local time, I'm not sure though what rev that happened in =). ",
    "evancarey": "@TheTalisman Yeah, I should a checked before going through the trouble of submitting the pull request. Didn't see yours until after.. @knalli dunno.  What's the tz of your build/test server? Can't say why it's a new problem because I'm a new user of your lib.. Are you East of UTC? I'm West by 5hrs (CDT). Wonder if my being -5hrs from UTC is what puts my localized date object's day value into the previous day? 2016-08-21T00:00:000Z in my tz is Aug 20 2016 19:00:00 GMT-0500 (CDT). I'm guessing that if I were East of UTC by a couple of TZs the localized date would still come out as Aug 21.. ",
    "calioto": "I added that to my code and the application still displayed France French instead of Canadian French. Here's my code snippet. Any other ideas?\n```javascript\n        $translateProvider\n            .translations('de', SRNEXT_WIDGET_NLS_DE)\n            .translations('en', SRNEXT_WIDGET_NLS_EN)\n            .translations('es', SRNEXT_WIDGET_NLS_ES)\n            .translations('fr_CA', SRNEXT_WIDGET_NLS_FR_CA)\n            .translations('fr_FR', SRNEXT_WIDGET_NLS_FR_FR)\n            .translations('it', SRNEXT_WIDGET_NLS_IT)\n            .translations('ja', SRNEXT_WIDGET_NLS_JA)\n            .translations('ko', SRNEXT_WIDGET_NLS_KO)\n            .translations('pt', SRNEXT_WIDGET_NLS_PT)\n            .translations('zh_CN', SRNEXT_WIDGET_NLS_ZH_CN)\n            .translations('zh_TW', SRNEXT_WIDGET_NLS_ZH_TW)\n            .registerAvailableLanguageKeys(['de', 'en', 'es', 'fr_CA', 'fr_FR', 'it', 'ja', 'ko', 'pt', 'zh_CN', 'zh_TW'], langMap)\n            .uniformLanguageTag('bcp47') // enable BCP-47, must be before determinePreferredLanguage!\n            .determinePreferredLanguage()\n            .fallbackLanguage(['en']);\n```. ",
    "Ssabin-devalore": "https://plnkr.co/edit/TaUcRyTNlGpl1yZuQieo?p=preview \nChange the language and the template string will load into div.\nThough i don't use angular-sanitize.js and i cant upgrade the versions in my project. ",
    "NilakArgento": "Tried also\n version of angular-translate:2.15.2\n version of angular:1.6.5\nResult is same as previous. ",
    "AndreasHo": "Hello,\nsry for waiting long time... now i have created an example in plunker.\nhttps://plnkr.co/edit/CoMg4zFuKV8h0LSWe742?p=preview\nHere the steps of the error:\n\nStart: State \"start\" + language \"DE\"\nChange state to \"stop\"\nChange language to \"EN\"\nChange state to \"start\"\nChange language to \"DE\"\n\nNow you don\u00b4t see the translated value, you see \"start.INFO\".. @knalli is there a solution?. ",
    "vicary": "@knalli Your workaround did the trick but still FOUC, should really resolve inside the library before it renders out any content IMO.\nNot sure if I should open a new issue.. ",
    "yrtimiD": "The main documentation site doesn't have docs for this new parameter. Can anybody update it?. ",
    "AngularPlayer": "Hi, here the plnkr : \nYou can see the controller of myForm switch from $scope to $scope.$$childHead and inversely by adding or removing the translate-namespace directive.. I agree, i didn't know we are able to do that, your last suggestion is just perfect :+1: . ",
    "MykhailoKyrychenko": "We have fallback language set by default. ",
    "thomasthiebaud": "I'm facing the same problem right now. Did you find a solution ?. ",
    "Smashman": "Using a loadFailureHandler fixed this issue.. ",
    "tranvicuongit": "I just get something right, thanks all!. ",
    "SimonSimCity": "@marcdepelteau Please take again a look at your demo and also include the results you see in the browsers console.\nYour demo is trying to load a file from https://cdnjs.cloudflare.com/ajax/libs/angular-translate/2.15.2/angular-translate-loader-static-files.js, which doesn't exist. You have to change this path in your script-tag to https://cdnjs.cloudflare.com/ajax/libs/angular-translate-loader-static-files/2.15.2/angular-translate-loader-static-files.js and it will work.. @marcdepelteau As I said ... please check out your browsers console and work yourself up from there. If you want, I can assist you in that, provided you first do all you know, keep struggling until you don't know more. Tell me everything you've done and we continue from there on.. Could well be a duplicate of #1704, #1703 ... The issue #1703 can at least be solved by the work-around I provided here.. Was about to check it out but only got a 500-error when looking for https://run.plnkr.co/6n3Uc9MttusynxQV/angular-translate.2.17-dev.js, which you included in my example .... @knalli seems to work ... but this would now have to be implemented in every loader that acts asynchronously, and in addition: You'll still have the potential of a race-condition in the use() method if it's used by another service ...\nBut yes, it works for this use-case.. To me it doesn't matter what component the problem was in combination with, but rather the source of it.\nThe source is (at least as of how I see it), that in the $translate.use() method, you only set the language after a promise has returned. (see here)\nIn your implementation of use(), every language loader is running using a promise. Means, that when using a translation-provider, that uses a promise here, these two results on the console will differ:\njs\n$translate.use('es').then((lang) => console.log(lang)); // Will return 'es'\nconsole.log($translate.use()); // Will return whatever value it was before we called the use-method.\nAnd it won't matter how long the promise will delay the result, because it's anyways just executed after the current thread has finished. For this reason, every interaction, that happens before the promise resolves, will still be using the old language. Hope this clarifies what I am up for. This also yields for the case when there's no async action done by the promise. In this case, the promise will resolve once the process is idle. Means, that if you have  another promise you registered earlier, it will be executed before this.\nTry the following in any angular project (or get $q from somewhere else ...):\n```js\nvar b = 1;\n$q.all().then(() => { console.log(b); });\n$q.all().then(() => { b = 2; });\nconsole.log(b);\n```. Sounds reasonable ... you have to decide for either the one or the other ... either you have the promised value as \"current language\" or the actual current one until the change is completed. Both has down- and upsides in my eyes, and it's always the question what you do in the time between.\nGo for the workaround you have in place, I'd say.. @SteveQiu does my workaround, provided in #1781 fix it?. I guess I underestimated it pretty much \ud83d\ude04  I didn't put much time into it and was therefore only focused on the bug I have instead of looking for a solution that helps the plugin as unit. Good you took some time and got on it .... ",
    "marcdepelteau": "@SimonSimCity Thanks Simon! The example does work now, but when I upload all the files to a folder in SharePoint, it does not work! . ",
    "uguurozkan": "I just found something useful. If you add translate-cloaked, key doesn't show up.\n<title translate-cloaked translate=\"APP.TITLE\"></title>. ",
    "kpat143": "Thank you.. ",
    "stnor": "Something like this added to pascalprecht.translate.$translateProvider#translations before the call to angular.extend should work:\njavascript\n      for (var key in translationTable) {\n        if ($translationTable[langKey][key]) {\n          console.warn('pascalprecht.translate.$translateProvider: Duplicate translation key \\'' + key + '\\' [' + langKey + ']');\n        }\n      }\nI wasn't sure how to inject $log there, hence console.warn over $log.warn.. Yes, of course, but if I have multiple translation files and accidentally overwrite a value already registered I would like to know about it.\nEg module X registers enGB \"hello\": \"hi\" and then module Y overwrites it with \"hello\": \"Hi!\" would produce a warning.. Fair point.. ",
    "jjabba": "@knalli Thanks for an awesome module, glad to try and make it even more awesome, my product is dependent on it.. @knalli Thanks for the quick pr-processing! I'll bundle fixes and tests in the future.. ",
    "iliasadfenix": "yes. It showing result on network tab as expected.. ",
    "zishon89us": "https://stackoverflow.com/questions/46695028/errorinjectorunpr-unknown-provider-translatemissingtranslationhandlerlogpr. ",
    "dariusk": "Forked from master, my mistake, re-opening a new PR.. ",
    "CrackerakiUA": "I have looked at your code, added modifications which helps me out. On the use side it's something like \n$translate.failCallback(function(word){\n    // Code\n}); But i am not sure if i can make proper PR as you do coding or if you need this at all. I would like to have that.. ok, i will try. ",
    "ManRueda": "Sure, i don't know if it was using the angular one for some reason, but if native toLowerCase it's ok, i will send a PR.. I didn't  see the question about the version, looking the Angular.js branches and the pre-releses that are in Bower, the change will be in 1.6.7. ",
    "elihosseini": "https://cdnjs.cloudflare.com/ajax/libs/angular-translate/2.18.1/angular-translate.js\nyour angular.js not compatible with your angular.-translate.js\nchange angular translate version with this. ",
    "SteveQiu": "@SimonSimCity Thanks for replying, but unfortunately no. If your investigation holds true, our app can be running also in race condition because we didn't set fallback language on purpose. We intended to load the language right after our app starts. There could be a conflicts between whether to load language pack or not. I am hoping that the solution can be more universal. I am working on the plunker and see if I can reproduce my bug. Mean a while, we are using 2.13.1 which seems to be running ok.. https://plnkr.co/edit/q4XD5roUZv6G2tz2Mc83?p=preview. ",
    "robertas88": "Hello,\nI have similar issue with $translate.use().\nI have forked example above to make it sort of work but some issues are still there:\nhttps://next.plnkr.co/edit/mlsS1RmOK9fm5q6e?preview\nSteps to reproduce:\nrun (en is preferred language and controller c1) -> de -> c2 -> en\nLoading c1 $translate.refresh() loads en-c1.json but unlike $translate.use() this will keep loading promise in memory. This mean when we are in c2 and try to load en-c2.json, $translate.use() thinks that loading en-**.json is still in progress and returns old promise. $translate.use() uses function clearNextLangAndPromise(key) to clear unnecessary promises on promise.finally(). This function should be used in other translations loading functions.\nEnviroment:\n\nversion of angular 1.5.11\nversion of angular-translate 2.18.1. \n",
    "deadmann": "config:\n```\n$q.all(\n            [\n                $http.get(\"/App/translations/global.en.json\"),\n                $http.get(\"/App/translations/global.fa.json\"),\n                $http.get(\"/App/translations/app.en.json\"),\n                $http.get(\"/App/translations/app.fa.json\")\n            ]\n        )\n            .then(function (response) {\n            $translateProvider.translations('en', {\n                global: response[0].data\n            });\n\n            $translateProvider.translations('fa', {\n                global: response[1].data\n            });\n\n            $translateProvider.preferredLanguage('en'); // -->moved to run.js\n    }, function (response) {\n\n    });\n\nrun:\nvar run = function ($rootScope, $state, $stateParams) {\n        $rootScope.$state = $state;\n        $rootScope.$stateParams = $stateParams;\n    };\n```\nrootController ( <html app=x controller=mainController ></html>):\n```\nself.globalEvent = {\n            onStateChanging: function () {\n                var state = $rootScope.$state;\n                $translate.use(state.params && state.params.lang || 'en')\n                    .then(function (key) {\n                        console.log(\"Language Changed to \" + key + \".\");\n                    }, function (key) {\n                        console.log(\"Could not change the language.\\n\\r\" + key);\n                    });\n            },\n    //Watch State Change or $stateProvider\n    $rootScope.$on('$stateChangeStart',self.globalEvent.onStateChanging); // -> fires when state is changing\n    //$rootScope.$on('$stateChangeSuccess', self.globalEvent.onStateChanged); // -> fires when state has changed successfully\n    //$rootScope.$on('$stateChangeError', myFunc); // -> fires when state change has failed\n\n```\nroute as parent of all other route:\n.state('root', {\n                url: '/{lang:(?:en|fa)}',\n                abstract: true,\n                template: '<div ui-view=\"\"></div>',\n                params: {lang: {squash:true, value: 'en'}}\n            })\nopen url: \nhttp://localhost:60421/#!/fa/insert\nConsole: \nLanguage Changed to en.\nangular.js:14642 pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details.\n(anonymous) @ angular.js:14642\nshowNoStrategyConfiguredWarning @ angular-translate.js:261\nsanitize @ angular-translate.js:306\n$translateInterpolator.interpolate @ angular-translate.js:2892\n$translate.instant @ angular-translate.js:2615\ngetBaseTypesSelectDataList @ sharedService.js:29\ninitialize @ nestInsertController.js:510\ncontroller @ nestInsertController.js:531\ninstantiate @ angular.js:5055\n$controller @ angular.js:10975\n(anonymous) @ angular-ui-router.js:4203\n(anonymous) @ angular.js:1385\ninvokeLinkFn @ angular.js:10520\nnodeLinkFn @ angular.js:9909\ncompositeLinkFn @ angular.js:9149\npublicLinkFn @ angular.js:9014\nlazyCompilation @ angular.js:9405\nupdateView @ angular-ui-router.js:4122\n(anonymous) @ angular-ui-router.js:4074\n(anonymous) @ angular.js:1385\ninvokeLinkFn @ angular.js:10520\nnodeLinkFn @ angular.js:9909\ncompositeLinkFn @ angular.js:9149\npublicLinkFn @ angular.js:9014\n(anonymous) @ angular-ui-router.js:4213\n(anonymous) @ angular.js:1385\ninvokeLinkFn @ angular.js:10520\nnodeLinkFn @ angular.js:9909\ncompositeLinkFn @ angular.js:9149\npublicLinkFn @ angular.js:9014\nlazyCompilation @ angular.js:9405\nupdateView @ angular-ui-router.js:4122\n(anonymous) @ angular-ui-router.js:4071\n$broadcast @ angular.js:18698\n(anonymous) @ angular-ui-router.js:3427\nprocessQueue @ angular.js:17000\n(anonymous) @ angular.js:17044\n$digest @ angular.js:18182\n$apply @ angular.js:18480\ndone @ angular.js:12501\ncompleteRequest @ angular.js:12727\nrequestLoaded @ angular.js:12655\nload (async)\n(anonymous) @ angular.js:12638\nsendReq @ angular.js:12446\nserverRequest @ angular.js:12198\nprocessQueue @ angular.js:17000\n(anonymous) @ angular.js:17044\n$digest @ angular.js:18182\n$apply @ angular.js:18480\nbootstrapApply @ angular.js:1952\ninvoke @ angular.js:5040\ndoBootstrap @ angular.js:1950\nbootstrap @ angular.js:1970\nangularInit @ angular.js:1855\n(anonymous) @ angular.js:33826\nmightThrow @ jquery-3.1.1.js:3570\nprocess @ jquery-3.1.1.js:3638\nsetTimeout (async)\n(anonymous) @ jquery-3.1.1.js:3676\nfire @ jquery-3.1.1.js:3305\nfireWith @ jquery-3.1.1.js:3435\nfire @ jquery-3.1.1.js:3443\nfire @ jquery-3.1.1.js:3305\nfireWith @ jquery-3.1.1.js:3435\nready @ jquery-3.1.1.js:3915\ncompleted @ jquery-3.1.1.js:3925\n3mainController.js:51 \nLanguage Changed to fa.\nFirst it doesn't change to FA, secondly even though it said it change to fa, it still returns english language data :|. ",
    "mnemotron": "Thanx for the advice.. ",
    "AbijithRad": "I don't think the angular brackets should be complied when the sanitization strategy is 'escape'. \n'escape' should display whatever content as it is.\nAlso, the compilation started happening after version 2.4.0 of angular-translate. Angular-translate v2.3.0 used to display it as it is.. Is there a way to avoid compilation of angular brackets then?\nExpressions like this \n{{'a'.constructor.prototype.charAt = 'b'.concat; $eval('exploit=1}}} alert(1);//');}}\ncan create security issues in the client.. ",
    "distinctdan": "We're already using the sprintf library in our project, so for now I wrote a simple directive that interpolates the args into the string and renders that html to the DOM during the compile phase of the directive. Then, angular will actually fill in the {{ }} placeholders when it compiles the directive's inner html, so there's no risk of XSS. I'm still curious if this can be done with angular-translate though.\nHere's the updated plunker with my directive: http://plnkr.co/edit/06zvQ0ISdDOSHRa7TMh6?p=preview. Unfortunately, this is a fairly common use case. \"Don't\" simply isn't an option. Your example isn't an option because if you do You have a new message: {{linkAsHtml}}, that doesn't solve the problem. You're still interpolating html and user-supplied data in the same string. In your second one, putting html in your strings is an option, but it's considered a bad practice because it gives your translators an opportunity to accidentally mess stuff up. \nIt seems the issue is really that you guys are using the same characters as angular, {{ }}, to define a variable. So in, You have a new message: {{startLink}}{{messageName}}{{endLink}}, startLink and endLink should be handled by angular translate, and shouldn't be escaped at all. However, messageName is a normal angular expression, and should be ignored. If you guys had a way to change your characters that define an expression, it could work. C# uses things like {0} and {1}, while sprintf can do positional or named args like %1$s or %(linkStart)s. ",
    "aleen42": "I have tried a ugly solution, where I can run code above after an attempt to detect whether files are existed before. It's ugly because it results in two network requests for one same file. Can I solve this problem with other solutions?. Is there any tutorial about how to re-implement a loader like useStaticFilesLoader. \ud83d\udc4c  I will check the source code directly. I have created a custom loader like the following snipppet, but I found that the first rendered page will not get the corresponding translated item, and how can I work around this problem?\n```js\napp.factory('useExistentStaticFilesLoader', function ($http, $q) {\n    return function (options) {\n        var deferred = $q.defer();\n        var localeObject = {};\n        var count = 0;\n        var recursiveRequest = function () {\n            var item = options.files[count++];\n            if (!item) {\n                deferred.resolve(localeObject);\n                return;\n            }\n        $http.get(item.prefix + options.key + item.suffix).then(function (result) {\n            angular.merge(localeObject, result.data);\n            recursiveRequest();\n        }).catch(function () {\n            deferred.resolve(localeObject);\n        });\n    };\n\n    recursiveRequest();\n\n    return deferred.promise;\n};\n\n});\n```. It seems it is not related to the version of angular-translate, but how can I solve this problem?\n. = = \nDO NOT USE INFERENCE!!\njs\nangular.module('hxphone.language', [])\n    .factory('customLoader', [\n        '$http',\n        '$q',\n        function ($http, $q) {\n            /** ... */\n        }\n    ])\n    .config(['$translateProvider', function ($translateProvider) {\n        /** ... */\n    }]);\nHope author to update document.. \nPerhaps you can read this answer on StackOverflow: https://stackoverflow.com/a/27343848/5698182. \ud83d\udc4c . ",
    "tenjaa": "Some ideas come when writing it down properly...\nI can probably just say\n$translateProvider.uniformLanguageTag(undefined or 'no-op')\nand when getting the locale angular translate won't find this resolver and ignores it if I see it right?. > Should it not return sr-LATN (everything uppercase)?\nPossible yes. I'm only sure it is not sr-Latn (the expected one) but I will check tomorrow.\n\nAnd yes: It's look like a bug, because I had thought the second part must be uppercase always (like en-GB or de-DE).\n\nThe second part can also be the script, which consists of four letters, first uppercase followed by three lowercase.\nFor reference:\nhttps://tools.ietf.org/html/bcp47#section-2.2.3\nhttps://www.unicode.org/iso15924/codelists.html\n\n\n$translateProvider.uniformLanguageTag(undefined or 'no-op')\n\nI think an additional none could be useful.\n\nIsn't using undefined kind of a no-op?\nvar locale = getFirstBrowserLanguage() || '';\nif (languageTagResolver[uniformLanguageTagResolver]) {\n  locale = languageTagResolver[uniformLanguageTagResolver](locale);\n}\nreturn locale;\n\nIf the uniformLanguageTagResolver is unknown (=> NOT default, bcp47, java or iso6931) it should not execute its function, right?\n\nNote: languageTagResolver will be used only if determinePreferredLanguage is not called with a custom resolver function.\n\nNot in our case, as we call $translateProvider.resolveClientLocale() manually. Thanks for accepting the pull request :)\nThis can be closed now. . ",
    "bkimminich": "Seems to be more of a problem with the ribbon JS I'm using. I'll downgrade to an image.. ",
    "mmanista": "Just realised that the provider has this method and the service doesnt (yet). Not sure if it's intentional (not developed yet). Please feel free to close it if it has not been developed yet or something. ",
    "ShankzPatil": "i found that after applying sanitization\n        $translateProvider.useSanitizeValueStrategy('sanitize');\ntext showing as \n& #2738;& #2761;& #2711;& #2751;& #2728;\nnow i added strategy null working fine.\n        $translateProvider.useSanitizeValueStrategy(null);\ntext showing as  \u0ab2\u0ac9\u0a97\u0abf\u0aa8\nplease suggest.. ",
    "tsalzinger": "the problem is that it behaves differently from angularjs itself as explained above\nhtml\n{{ 2\n+ 2\n}}\nwould correctly evaluate to 4 but when the same is applied within a translate directive it doesn't work.\ni only checked the code briefly and found out that you just check the element text via a regex to decide whether or not an interpolation has to be performed or not.\njust trimming / replacing the newlines is probably not a good solution as then a template like\nhtml\n{\n{ 'myKey'}}\nwould be detected as interpolation altough in angularjs core it wouldn't be\nisn't there a way of just reusing angularjs core logic here instead of creating some kind of regex which tries to replicate something that angularjs does internally?\nfor example also mutli interpolations are not possible\nhtml\n{{'prefix'}}{{'suffix'}}\n(i also extended the plunkr)\nNote that if you don't want to fix that this is of course your decision, but then at least update the documentation that this is NOT angularjs interpolation and there are unsupported usecases. i think we are still talking about 2 different things here.\ni never wrote anything about newlines wihtin translation keys - where did you get that idea from?\nplease just have a look at the supplied plunkr and the issue should be more then obvious, i even updated it once more to show the issue in another scenario.\nand just for reference: i know that i can use the translate pipe instead of the directive for example, or just ensuring all expressions are always single line, but as stated before it just behaves differently to regular angularjs interpolation.\ni'm also aware that you using the angularjs interpolation feature, i was talking about the regular expression you use to decide whether or not interpolation is necessary that is broken, nut the interpolation itself.. ",
    "dmigliorisi-we": "I've gotten this to work with the directive approach. I suppose I'll have to go that route for now.. ",
    "aloysiustany": "I am not able to understand when you say \n\nTry switching filter/directive, or try using the service itself so you can apply the translation on your own for that field\n\nPlease can you give me more details on what should be tried ?. I have <input value=\"{{'TRANSLATION_ID' | translate}}\"/>. ",
    "yuriipitomets": "I've download zip file from assets, and I can't extract it on multiple Windows machines.\nhttps://github.com/angular-translate/angular-translate/releases/download/2.17.0/angular-translate-2.17.0.zip . I guess it is build in in Windows 7. MB3 -> Extract all. \n\n. Which version of Angular 1.x is minimum required to work with latest angular-translate?. ",
    "kumar04anil": "https://plnkr.co/edit/sqPF45?p=preview\n. ",
    "nzamps": "Thanks @amorek, adding  translations(translation.key, translation.table); does work!\n} else if (langPromises[key]) {\n        // we are already loading this asynchronously\n        // resolve our new deferred when the old langPromise is resolved\n        langPromises[key].then(function (translation) {\n         // add this >>\n          translations(translation.key, translation.table);\n          if ($nextLang === translation.key) {\n            useLanguage(translation.key);\n          }\n          deferred.resolve(translation.key);\n          return translation;\n. ",
    "eluchsinger": "@knalli  I am using Windows 10, hence that command is not available on the normal CMD. When I used the unzip -t command on bash on it, the .zip file passed all checks. \nMore insights: If I try to unzip it using the extract function of Windows, I get an error \"... is invalid\". When I unzip it using 7zip, I get an empty folder structure. Look at the results of the 7zip archive test:\n\nI think I found the reason for the problem. If I open the archive with the 7zip tool, I get an empty folder. \n\nWhen I click on the ., I can see the rest of the folders. This seems to be a UNIX-Specific kind of error, since in Windows you don't have the . folder. Please look at the folder path in this directory: \n\n. @knalli I can see the folders now, but they are still empty.. angular-translate-loader-url, angular-translate-storage-local, etc are all empty.. I can see there is disk space allocated for the files. The size of the folders is correct.\nMaybe I can look into it soon. I have installed Linux on my machine - just for fun.. ",
    "liamtarpey": "@knalli thank you! Just built a prototype and works exactly as expected. :). ",
    "cristiangiagante": "I need to do something similar, how can I inject new texts on runtime to translate new texts after the angular config phase was procesed? I don't understand the explanations of @knalli . ",
    "eliranek1": "Making this change will affect the end result of some special html encoded entities by turning them into numbers.\nFor example: > will change from &gt; to &#36;. Thanks for the quick reply, Jan.\nDo you have a way of testing a \"complete suite running in different environments\"? I assume by different environments you mean browsers, correct? I would be happy to test this out - is there a list of supported browsers somewhere?\nThis will convert all unicode chars with a charcode of 0000-9999. I believe this should cover well over the html characters.\nI'll play around with the trnaslateSanitizationProvider and let you know if I need help.. I created a quick perf test on measurethat.net please check out the results in the meantime. Looks to be almost 4x faster:\n139k Ops/Sec vs 420k Ops/Sec\nhttps://www.measurethat.net/Benchmarks/ShowResult/11560. The results above were from chrome 66.\nEdge 41:\nElement Creation: 37k Ops/Sec\nRegex: 813k Ops/Sec\nFirefox 59:\nElement Creation: 331k Ops/Sec\nRegex: 1,580k Ops/Sec\nIE11:\nElement Creation: 11k Ops/Sec\nRegex: 874k Ops/Sec.  @knalli I'm not quite sure what you want me to do with the translateSanitizationProvider. Can you please provide a little more detail?\nI created a test app that does two things:\n1) Has a compare function (button) where I downloaded a giant list of characters and then encoded each character with both the current and the proposed function. Then I compared the strings, if they were different I decoded each and compared the values to make sure they both resolved to the same char again. This test did not find any issues.\n2) It has two more buttons to run through the list of chars + a random number to avoid chromes optimization engine and it writes the time it took to the console.\nI have attached this test app for your review.\ntranslation.zip\n. ",
    "lianee": "you should also look at bower-angular-translate-storage-cookie, there is still a wrong dependency in bower.json:\n\"angular-cookies\": \">=1.2.26 <1.7\". ",
    "RostVY": "I confirm that there's an issue. I'm using the latest AngularJS version 1.7.2 and the latest angular-translate version 2.18.1.\nI have debugged the sources and on the screenshot below you can see that the\ndefaultInterpolator.interpolate() is used when the result is not found in the translation table. \nAnd you can see on screenshot that there's interpolationId, which has been passed to the method. So the defaultInterpolator should not be used, but the interpolator, whose interpolationId has been passed.\n\n. @knalli I wish I could, but I really don't want to - I'm on vacation without access to computer and without any wish to see computers, source codes and so on.  If noone fixes during next month, I may rethink my decision.. @ericnewton76 nope :(. I have not tried and I am unsure how it is supposed to work. Using\nresult = translationId;\n in the line, which is highlighted on my screenshot could resolve some of issues. But I'm not sure if that's correct solution which will have no side effects.. ",
    "ericnewton76": "@RostVY lol, I can relate to \"without any wish to see computers, sources codes and so on.\"\nDid you ever solve your issue with angular-translate?. Perhaps (as mentioned) an alternative method call would be good? How about $translate.waitfor(\"Page_Title_Label\") ?\nRealistically, I'm seeing that others are looking to $translate.instant with the same expectations as I... we acknowledge that the language tables either havent fully loaded (ok, so wait) or failed to load (ok, so fallback) but in either case wait.\nYes unfortunately thats a blocking call... its just pretty darn important though! lol. You didn't address the issue of the willingness to wait for that translated data to be available.\nSometimes I need that translation... now.  What are we to use in that case?  Being async and all is nice, but sometimes its too late.  \nSee the plunker... the ui-grid setup needs those translations so it can get column defs setup... and the isAlive filter is returning odd results because of the timing issue.. So I get what you're saying... use either of these, instant or $translate but if it ain't ready, it aint ready...\nI'm saying I'm okay with a blocking call if the translation tables aren't ready... ie (haven't loaded|are loading|failing to load|time-out, fallback) because I need that translated string due to the design of a particular component that I dont have control over.\nYou're saying $translate.instant will give you a value \"Now\" but I'm finding it won't give you a valid value \"Now\". \nI need a method that will (potentially block) and give me a valid value... now.  Not on the next tick, but now, because (for example) I'm having to prepare a gridOptions object that the ui-grid wants to get its render on.\nNow perhaps I need to use \n$translate([\"grid-translation-id1\", ... , \"grid-translation-idN\"]).then( (trans) -> {\n  _this.gridOptions.somethingThatNeedsTranslating = trans[\"grid-translation-id1\"];\n})\nwhich means the grid doesnt even get a chance to render placeholders until after the translate tables fully load.. Or another alternative recommendation (from you, etc) would be to directly inject the translation tables into the source javascript.\nThis is possible due to using a build server, but should be acknowledged that this is effectively the same as a blocking call during the config phase that could guarantee the translation tables are loaded, at least the non-fallback scenarios.. ",
    "ChaitanyaBabar": "The issue was resolved  when i changed the sanitize strategy . Used the following $translateProvider.useSanitizeValueStrategy(\"escaped\");  in the config function. \nCan have a look at the sanitize strategy.. ",
    "GlauberF": "Version agular-translater\n\nErro\n\n. ",
    "javorosas": "Sorry, this only shows how much I didn't understand cookies. Each cookie is independent, so if my session cookie is httpOnly and secure, that doesn't mean it's the same case for all cookies on the site.\nI'm closing now.. ",
    "charlie-ablett": "The template was different (and had heaps of console errors) when I checked earlier. Hence why I didn't submit a code sample. I'll try your new one now.. Question updated as requested. (I can try updating the libraries, but will involve a heap of work with colleagues to coordinate). The issue may just be a syntax thing I'm missing.\nOther than this little issue, the library is solid. Thank you for all your work :). @knalli Thanks for your attention so far. On my project and on the plunkr above (https://plnkr.co/edit/Pacl7EXx3dgVrGX2rDYj?p=preview) I've updated the version of angular-translate, angular-sanitize and angularjs to latest. The issue persists - would you be able to take look again?\nMany thanks.. ",
    "khmyznikov": "Confirm. In my case all JSON already cached but sometimes, only some elements are not translated. Refresh helps, but annoying. No errors in console. Usually broken {{ 'TITLE' | translate}} this kind of usage, but not all, just some.. ",
    "jpike88": "Gotcha. ",
    "michschu": "@knalli : Thanks so far.\nNot sure, I understand what I have to do in detail here. Do you think, I should follow these lines?. ",
    "gabbsmo": "How does \"returning the rejection\" give more information about where the invalid argument was passed? Not questioning at all I am just not very familiar with the source code. . ",
    "Fattal": "thanks.\nimport \"angular-translate-storage-cookie\";\nThat's working\n. ",
    "madhurirode21": "I tried using partial loader as follows but still after implementing partial loader, because of $translate.refresh function, translationTable has been dropped and refill with new data.\nAs I debug code for $translate.refresh, my current understanding is that, $translate.refresh function is responsible for next 2 steps:\nhttps://github.com/angular-translate/angular-translate/blob/351eb8fc9018e14aa091dab09e4d31c43acbaa49/src/service/translate.js\n\nFind loader of respective asynchronous call (by Using method loadAsync called in loadNewData method) and load translation data from customeLoader(if defined)\nIf locale is not defined(this is my case), drop current translationTable and refill it with the data loaded from step 1.\n\nHow can I implement partialLoader without making $translate.refresh call.\nThis is little bit urgent. Immediate response ll be really appreciable. \n. Just want to add if I comment $translate.refresh($translate.use());  from ABC-translations.js then loader will not get invoked and $translateRefreshEnd' will not be triggered.\nWhat changes are needed to work PartialLoader without $translate.refresh function.. Please find plunker for the same\nhttps://embed.plnkr.co/OSjVjmwUDuktXOrUnT6D/ \nI am still struggling to fix it. Please help me for the same. locale-processors.js : contains code for adding core translation data  at bootstap ( it works fine)\nabc-sidebar_en.json : contains data which needs to be added dynamically\nexample.js : this is a module in app which will call 'ABCTranslation.addTranslation' to add/append translation data dynamically \nABC-translations.js : this module contains custom loader which is useful to add data dynamically and definition for 'ABCTranslation.addTranslation' method \n. After running following command \ngit clone https://github.com/angular-translate/angular-translate.git && cd angular-translate && npm install && npm run start-demo\nI am hitting this url :  http://localhost:3005/demo/index.html \nso on console I am having this error \nCannot GET /demo/index.html\n\nangular-translate@2.18.1 start-demo D:\\core-ui\\enterprise-ui\\core-ui\\angular-translate\nnode build_tools/server.js\n\nExpress server listening on port 3005\nGET /demo/index.html 404 3.021 ms - 154. App is up now. with   \"/demo/index.htm\"\nBut it does not resolve the issue.\n'git clone https://github.com/angular-translate/angular-translate.git '\nMy app is multi modules where translation data has to be added dynamically from another\npage.\nPlease guide me in that direction.\n. Yes within single page application also,\n\nFrom one module 'A', I am trying to load core translation data by using $translateProvider.translations\nFrom another module 'B', I am loading new translation data by using partialLoader and calling $translate.refresh() after it\n\nat Step 2,  because of refresh function, it is dropping data loaded at step 1 and adding only module 'B' data which I dont want\nas On module 'B', I want to display translation data from 'A' as well as ''B'. Thanks for your suggestion.\nWe are trying to explore on it and ll get back to you.. Closing this issue as if now as approach needs to be redefined.. Closing as duplicate issue. ",
    "HeriTeo": "@knalli \nsorry i was looking a way for load translation data from angular service return\nbut thanks any way. ",
    "mruoss": "Can you explain to me why this error doesn't make sense?\n. OK I see, that makes sense.\n. ",
    "AurelieV": "My answer seems to have disappeared ;'(\n\"not not\" handles null, undefined AND empty string cases\n. ",
    "gterzian": "any ideas why it's failing?\n. ",
    "nizhu": "We're dealing with strings so 0, undefined, null, false and NaN are all invalid IMO. \n. "
}