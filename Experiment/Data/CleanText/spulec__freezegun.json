{
    "spulec": "I applaud the effort, but no.\n. Thanks for reporting this Neal!\n. Oops, silly mistake. Forgot datetime needed to be a subclass of date. Fixed and pushed a new version to PyPI.\n. I put in a quick fix that will make addition and subtraction work. I'll go back at some point and reconsider other operators. If you find any, please reopen this ticket or open another ticket.\n. This was also fixed by https://github.com/spulec/freezegun/commit/0453e5f47efd1d0d79af973e5ddcf9fa83b2ca40\n. Ah, you are correct. It looks like I fixed now(), but not utcnow(). Fixed with https://github.com/spulec/freezegun/commit/768a60f453c70517b6191fb9df29cd4ff8e78d7f and added tests. Going to push a new release in a minute.\n. Also, thanks!\n. I believe that's the same issue as #30 \n. The lines assert not isinstance(now, FakeDatetime) and assert not isinstance(now, FakeDate) are not expected to pass. Once freeze_time is imported, all datetime/date instances will be instances of FakeDatetime/FakeDate and all references to datetime.datetime/datetime.date will actually be references to the classes FakeDatetime/FakeDate.\nThe thought is that this will all go on transparently behind the scenes and people will be able to just think of it all as datetime.datetime. Feel free to reopen if this is somehow causing issues in your test writing.\n. Hi there,\nThanks so much for taking the time to do this and apologies for the delay in responding.\nThis looks great, but I have one or two concerns. If you have time to discuss/fix, great. Otherwise, I can pull the request in and make the changes myself.\nIf we're going to add support for the time module, we need to support all of the methods (time.clock(), time.timezone, etc). I don't want people to see the time module being mocked and assume incorrectly that all of the methods are mocked.\nSecond item is that we need to add some docs.\nTo reiterate, if you have some more time to work on this, great. Otherwise, I'll take the great start you've given me and run with it.\n. Heh, yeah I haven't done any work on this.\nI agree with your comments.\nMake the changes and we can close this out. Also note that we are now python 3 compatible. Not sure if that changes any of your existing code.\n. Hi Dan,\nThanks a lot for taking the time to report this.\nI'm not exactly excited that we have to special case timedeltas like this. I think it might be a little cleaner if we flipped it and did something like\npython\nif isinstance(result, real_datetime):\n    return date_to_fakedate(result)\nelse:\n    return result\nIt seems to be more explicit about what our intentions really are.\nThoughts?\n. Thanks Dan!\n. Hi Hannes. I really like the idea, but don't think there is an easy way to do this with how the code is setup. One thing you can do is\npython\nfrom freezegun.api import FakeDatetime\nnow = datetime.datetime.now()\nassert isinstance(now, FakeDatetime)\nIf you can think of an easy way to do this, please reopen this issue because I would love to have it.\n. Hi Chris. I have just pushed version 0.0.9 that should fix your problem. Feel free to reopen this issue with the failing code if it still doesn't work.\nGlad to head you like it!\n. now() not accepting timezones is definitely a bug and should be fixed.\nI'm not able to recreate the django saving bug though. isinstance() checks should all pass for the current version of freezegun.\n. That would be great. Thanks.\n. I think that a lot of these issues should be fixed in the newest release. Freezegun now only mocks datetime/date when activated. I haven't actually tested with django yet though.\n. I think this should all be fixed with the latest release.\n. Yes, unfortunately that library imports datetime classes instead of just the datetime module. One workaround is to import freezegun before importing anything django. Sorry that there's not currently a better answer.\n. This should be fixed in the newest release due to https://github.com/spulec/freezegun/commit/a9cc66ce1f6c932e239dada6ee743783f75f3ca7. Sorry it took so long to find a good solution.\n. Yes, this is a known limitation of the library (there's a warning in the README). The other workaround involves just importing the datetime module and using that instead of importing classes from the module. Sorry that there's not currently a better answer.\n. Are you running this exact code? It works on my local machine.\nIf you are using this exact code, can you let me know some more details about your setup? Python version, OS, freezegun version, etc.\nIf you are not using this exact code, can you show me the code you are using?\n. Okay. So I think the problem here is the aliasing of the datetime import as dt.\nThe following code works:\n``` python\nfrom freezegun import freeze_time\nfrom datetime import datetime\nfreezer = freeze_time('1980-01-01')\nfreezer.start()\nassert datetime.now() == datetime(1980,1,1)\n```\nThis is definitely a bug, but I want to spend some time figuring out the best way to fix it. I've opened a new issue for this at https://github.com/spulec/freezegun/issues/64. \nThanks for reporting it.\n. I have pushed a fix to master that I think will address this. Can you give it a test?\n. The reason freezegun mocks on import is to accomodate those that do from datetime import datetime before freezegun is activated. If you can find a good workaround, I'll be happy to pull it in.\n. Sorry, my comment was unclear. What works now is if someone imports freezegun, then does from datetime import datetime and then uses the decorator.\nWhen freezegun first started, it didn't do any of this patching on import, but then I got a bunch of complaints. The issue is that people can't always control how third-party software imports datetime.\nSorry that this all kinda sucks. It's my least favorite thing about this library. We could do something like\npython\nimport freezegun\nfreezegun.dont_patch()\nand have dont_patch revert the patching.\nThat seems pretty gross to me though. Another idea is to have a different branch that works the old way.\n. This should be fixed in the newest version.\n. Just to be completely clear (in case people find this issue in the future), Freezegun will not work directly with Pandas, but Freezegun now only mocks datetime when it is activated allowing use of Freezegun in non-Panda tests.\n. Thanks!\n. Hi Mark. I apologize for the delay in responding. I'm actually working on a new branch of this project (ctypes) that changes freezegun to mostly be done with ctypes. It should solve most of these issues.\nSince that is going to change a lot of things, I don't want to take any big pull requests until I get that branch merged in. I'll leave this open and revisit post-merge.\nThanks again.\n. Hey Mark,\nI'm finally getting around to this again. I think that most of these issues have been addressed with the exception of adding FakeTime. If you want to refactor this pull request to add that and add a couple tests, I'll happily pull it in.\nThanks again.\n. Closing since this was done with f3b0b1089acd746d4bfd98f13d34cfb84fd59832\n. Thanks Matthew!\n. Thanks Javier!\n. Yeah, that's not great.\nI'm working on a new branch (ctypes) that will solve this problem. It doesn't work with python 3 yet though. If you're using python2, it'd be great to have some people start testing that branch.\n. Yes, most likely. You can try the ctypes branch and see if that gives you any luck.\n. Not a perfect solution, but it seems like the best one for now.\n. If you can add a test or two, I'll happily pull this in.\n. Excellent. Thanks!\n. It looks like this breaks on Python 3. https://travis-ci.org/spulec/freezegun/jobs/6890595\n. If you get a chance, can you try the https://github.com/spulec/freezegun/tree/ctypes branch on App Engine? It will eventually become master for freezegun once I get the python 3 tests passing.\n. Any chance that the latest release fixes any of this?\nIf not, I probably will close as wont-fix unless we can find something wrong with freezegun outside of GAE. I do appreciate you opening the ticket regardless. The fixes will be helpful to future users who search for this.\n. Can you confirm that the most recent version doesn't work? If it doesn't work, what happens?\n. Probably the same as https://github.com/spulec/freezegun/issues/69\nYou could try an older version until that issue is resolved.\n. No worries. Also note that I've pushed a new release since that commit.\n. :beers:\nThanks Roman, this is great! Merged, updated the README, and pushed a new version to PyPi.\n. This is great. Thanks for your work.\nIt looks like there are some issues with the tests for python 2.6 and 3.3. If you can fix those, I would love to pull this in. Let me know if I can be of help.\n. Great, thanks for your work!\nI'm planning on pushing out a new version later today.\n. Thanks Gilles!\n. Thanks Luke. Just pushed a commit to fix this and pushed out a new release (0.1.11).\n. Awesome, thanks Fredrik!\n. Thanks for reporting this. It should be fixed with https://github.com/spulec/freezegun/commit/204d756353048b04fe84db9e8c23a6211dee2b93\n. Hi there,\nI can't seem to reproduce this. Can you post any more code around it? Pickleing in general should definitely work.\n. Thanks for the solid test case. This is definitely a bug. My notes so far:\nWhen pickling, the Pickler looks at the module of the object's class and grabs the class by name. If the object's class and the class that the Pickler loads from the module are not the same object, it raises an error. \nIn our example: real_datetime has a class of datetime.datetime. When the pickling occurs, sys.modules['datetime'].datetime is actually FakeDatetime which is why we get the error.\nhttp://hg.python.org/cpython/rev/db9762529f45\nIt's not immediately clear to me if Python is being overly protective by checking if klass is not object as opposed to if klass != obj. If it was checking the later, we could fix this by overwriting FakeDatetime.__eq__.\nIt looks like one possible solution would be to register a custom function with copy_reg, but I'm not that familiar with that module.\nAny thoughts? I usually try to steer clear of pickling so this certainly is not my forte.\n. No, I unfortunately don't have a very good solution yet.\n. I pushed a commit to master that should address this. Anyone want to test?\n. Freezegun 0.2.0 is now released. Thank you all for your patience.\n. Hey Hynek,\nSorry for the issues.\nIt looks like six is altering sys.modules while Freezegun is iterating over them.\nI believe it was caused by this commit: https://bitbucket.org/gutworth/six/commits/fc2decf405ea6bcd3226bb1b77069d2a2279e0b7.\nI still don't really understand based on that traceback how those lines in six are occurring at the same time as freezegun is iterating over sys.modules, but I have confirmed that removing those two lines from Six will fix the issue. It looks like mod_name at that point is 'six.moves.tkinter_tix'.\nI will continue looking into and keep an eye on https://bitbucket.org/gutworth/six/issue/54/dependency-on-optional-tkinter-gdbm which I think may be related.\n. Should be fixed with #32\n. I can't say I'm completely pumped about having to add this, but if it helps get the job done let's do it.\nThanks for your contribution Andy!\nI'll push a new version shortly.\n. Thanks Ralph!\nThe original reason for freezing it was https://github.com/spulec/freezegun/issues/31\n. Just pushed out 0.1.13\n. Thanks Mat. Fixed with https://github.com/spulec/freezegun/commit/1ec95e12a5d3f066427510516fb9f42e83ff864b\n. Hey Chris, sorry about that. Can you try running against master now? I think the commit below should fix it.\nhttps://github.com/spulec/freezegun/commit/918a9736b2402377425496546cdf20d403a22afa\nIf so, I'll push out a new version.\n. Yeah, that might be the best solution. I'll try to take a look at it tonight again.\n. Thanks Chris! Will push out a new version later today.\n. Release 0.1.14 pushed to PyPI.\n. Thanks Jeroen!\n. According to this, python-dateutil>=2.1 should now work with python 2.6 and 2.7. Is there some other reason to not use the new version?\n. No worries. It's certainly possible there is still a bug in the new version of dateutil (or freezegun's interaction with it). Let me know if it looks like that is the case.\n. It looks like Django has an older version of six.\nhttps://github.com/django/django/blob/master/django/utils/six.py#L107-L119\nvs\nhttps://bitbucket.org/gutworth/six/src/a875ac34c777fe801569c6c5299bf1a35aa578cd/six.py?at=default#cl-111\nI think this issue was solved by https://bitbucket.org/gutworth/six/commits/e914c4c89b073b7eacb440a8bf456dd1d28018ba\n. I believe this is fixed with #40. Please reopen if there are still issues.\n. Thanks Jeroen!\n. Hmmm, it looks like sqlite3 was detecting that this is not a real datetime object. I've added custom adapters. Can you test against master?\nI'm not completely happy with this solution, but I couldn't think of anything else since it looks like the sqlite3 type comparison is being done in C.\n. Version 0.1.16 is pushed. Thanks again for reporting this!\n. Ah, you are completely right. Thanks Rob!\n. Ooops, pushed now. Thanks.\n. Awesome! Thanks.\n. It does. I've added the classifiers. Thanks!\n. Thanks!\n. I like the idea, but am a bit worried about backwards compatibility. Maybe a parameter to pass to the decorator.\nMy biggest concern is that it could cause harm to the 90% of users that wouldn't use the feature (imagine they are using some third party library that decides to call sleep()). With a parameter though, I think it would work.\n. That seems reasonable to me. I would accept a pull request with that as a default-off parameter.\n. I don't think that should require any changes to freezegun to make work. If you do the Raw use, then patch sleep to increment the freezer.time_to_freeze.\n. @jdunck that sounds good. I think it would actually make a lot of things easier.\n. This is definitely strange. datetime.utcnow() should definitely return a timezone-naive datetime. Looking into the boto code, it seems that self._credential_expiry_time should certainly be naive as well.\nI'm guessing the reason it passes locally is because boto start to bail when it realizes you are not on an EC2 machine. I'm guessing CircleCI runs on EC2 so boto is attempting to grab CircleCI's IAM credentials.\nIf I get some time to spin up a CircleCI (or probably any EC2 machine), I'll try to dig into this more. A quick fix might be to create a dummy boto config to short-circuit the authentication logic.\nPS: as soon as I saw the email for this issue, I thought to myself: \"Crap, who am I going to blame for this?\" :)\n. Okay. The Z in 2014-07-30T01:00:00Z is causing Freezegun to return a timezone-aware datetime for utcnow. A quick fix is to just remove the Z from your test, since everything is UTC anyway so it shouldn't change anything.\nFreezegun should probably be changed, but I'm not positive what behavior Freezegun should have when someone passes in a timezone-aware string. For this scenario, Freezegun should probably just strip it off. If someone passes in a non-UTC datetime, we should probably be smarter and convert it.\n. Fixed with fb8f822e3c0a74c6136876ac975e654a4a715add\n. Awesome. Thanks Andrew!\n. This is a good idea. If we can get the tests working, I'll happily merge.\n. Thanks Richard!\n. Can you try running against master and let me know if that fixes the issue?\n. I wanted to make sure I documented this stack overflow question that explains the problem.\nhttp://stackoverflow.com/questions/19614658/how-do-i-make-pytest-fixtures-work-with-decorated-functions\nI would prefer not to require the decorator package as a dependency, but there may not be a lot of other options. We can try to use some of the logic the package uses.\n. No, I haven't had any time. We can try to use whatever logic the decorator package uses.\n. Good catch. Thanks!\n. Great idea. Thanks Tye!\n. Thanks Roman! I'll work on getting a release out shortly.\n. Version 0.1.19 is on PyPI. Thanks again!\n. Great. Thanks Donald! I will try to get a new release out soon.\n. Sorry about that. I've changed the class-based decorator to impact all non-private methods now.\n. I think this is the same bug as #57. I'm going to close this and start working on fixing that. Feel free to follow along there.\n. Thanks for reporting.\nI don't think we ever implemented reading the timezone from a datetime that is passed it. I'll see what that would take.\nA workaround for now is to do something like with freeze_time(\"2014-10-14-07\", tz_offset=-6):.\n. I don't think I really understand what this is trying to accomplish.\nSo if a user passes in \"1970-01-01T00:00:00-04:00\", which is not midnight UTC, then we want utcnow() to return midnight UTC?\n. Got it. You are right. I had been reading it wrong.\nWhy the changes to requirements.txt? If you can remove those, I will happily merge.\n. Thanks for your work!\n. Unfortunately, we can't use the version from __init__ without importing everything which fails since the dependencies aren't installed at that point (take a look at Travis to see what I mean).\nI'm going to close this out, but please feel free to reopen if you come up with a better solution.\n. Thanks for reporting.\nI've pushed a fix with 747e496124ab42b497e9e099d5a93d7c419da827. Can you check that it works?\n. Thanks for reporting it. I'll try to get a new version out within a day or two.\n. Great, thanks Donald!\n. Thank you!\n. Thanks for reporting!\nThis should be fixed with #70. Feel free to reopen if it still seems to happen.\n. Thanks for reporting.\nI'm having trouble reproducing this. When I save the above code as tester.py and run python -m cProfile tester.py, I get the following:\n0.2.3: ~0.063 seconds\n0.2.2: ~0.065 seconds\nIt definitely varies a bit, but I'm not seeing the 100x change you are seeing. Is the code you have listed the actual code you are running?\n. Okay, so the slowdown is a result of https://github.com/spulec/freezegun/issues/64. We need to iterate through all the attributes of a module to see if there are any aliased datetimes, dates, or times. I can't currently think of a faster way to do this.\nI just pushed a fix that will make stop a lot faster though. We now store all of the changes we make and then just revert those. Can you give HEAD for a spin?\n. @simon-weber thanks for the suggestions! I am probably leaning toward the first one.\n. PRs welcome. I was actually just working on a work project that uses freezegun as a dependency and ran into this. Within a minute of hitting the bug, I checked my email and saw this PR. Sometimes open source is really great.\nThanks for your help!\n. Just saw your question: I think all of those ifs should really be elifs so I don't think it matters. Is that right?\n. Oh, I see.\nI'm always a bit nervous to have blanket excepts like that. I think I would rather wait and see if people run into other issues before making the change.\n(going to fix the if/elif in master shortly)\nThanks again!\n. As soon as I tried the new version with my work project I ran into a RuntimeError so it appears that your suggestion is necessary. Added with 47d113e7a50e99ccfab2b7e4259c29e1666ea60c.\nGoing to do some more testing, but I will release a new version shortly.\n. Ooh, I just pushed a change to master (for completely unrelated reasons) that I think might fix this. Can you give it a spin?\nIf it does, I'll push a new version.\n. Great, I have pushed v0.2.6 to PyPI. Feel free to reopen if any issues persist.\nGlad to hear it!\n. Excellent!\nThanks for your help Andreas. I will push a new release shortly.\n. (new version released: 0.2.7)\nThanks for the note. You made my day.\nI used to have a very similar hacky solution used throughout my projects and finally got fed up with it. Now we can centralize the hacks all in one place :)\n. Thank you again! I will push a new release shortly.\n. I had not intended for the tests to be included with the distributions. That is now fixed with https://github.com/spulec/freezegun/commit/47bcd0fc156ecdaed219cdbd9a2ac8b80a632bad.\nThanks.\n. This was the original reason. I'm open to alternative suggestions, but tend to be -0 on things like a nested tests directory inside of the freezegun module.\n. Ah, I missed one!\nThanks for opening. I'll try to get around to fixing this. If anyone else gets a minute and wants to take a stab at a pull request, feel free.\n. I've added support for time.strftime, time.localtime, and time.gmtime with #78.\nIf you can give it a test on your end, I'll update the docs and push out a new release.\n. Pushing out a new release now. Feel free to reopen if things don't seem to work.\n. Thank you!\n. Sorry about that. It was a bug in an old version of freezegun. You should be able to fix by using a newer freezegun.\n. Thanks. This definitely seems like the right way to do it.\n. I think we can close this since #83 was merged. Feel free to reopen if I missed something though.\n. Thanks!\n. I knew this day would eventually come....\n. I have just pushed out version 0.3.0 to PyPI with Wheels. Thanks for the push!\n. Universal wheel created for 0.3.1 (I think). Let me know if it doesn't look right.\n. Awesome\n. After digging into this a bit, I don't think the issue is with freezegun. Try running the following on python2 and python3 and notice the different results.\npython\nimport datetime\nfrom dateutil.tz import *\ntz = gettz('Europe/London')\nprint(tz.fromutc(datetime.datetime(2014, 4, 26, 12, 1).replace(tzinfo=tz)))\nAlso notice that if we change the datetime to datetime.datetime(2014, 1, 26, 12, 1), then everything works.\nI don't have more time to dig into this right now. If you keep digging, let me know what you find.\n. Hmmm, very interesting.\nI'm going to close this for now. Feel free to reopen if I can be of assistance or you think there is an easy workaround for freezegun to use, although I am a bit worried it could create more confusion. Also, feel free to comment here if any progress is made on your Python ticket.\n. Awesome, thanks!\n. This is great! Thank you!\n. Not sure if you know this, but freeze_time already accepts a tz_offset argument.\nIf your suggestion was just to make it cleaner so that we could pass in 'nice' timezone names, then I could get behind that.\n. Ah, right. I had forgotten about your second point. PR welcome.\n. Going to close this with support for @shreevatsar 's solution\n. Happy to accept a PR for it, but don't want to leave the issue open forever.\n. You make good points and I agree, especially if this is necessary to get the Django TestCase working.\n. Thank you again!\n. Thank you for opening this. Your point is very valid. I would like to fix this somehow, but have a few thoughts/questions I'm trying to think through. Any feedback appreciated.\n- I think we would need to have some sort of backwards-compatibility. No idea how this would work.\n- Should the time passed into freezegun be used as the local time or utc time?\n- What if the time passed in has a timezone as well or a tz_offset is passed?\nI'm also quite worried about how the documentation will read.\n. @bryanhelmig happy to accept a fix.\nAgree with thoughts on 1 and 3.\n2 makes me a bit nervous. I fear that this would force the majority of users to change their code (that is just a hunch). If we wanted to keep utc default, we could add a local argument to override it. As you noted, we will make people upset either way. \n. One thing I didn't realize until now is that our existing support for tz offsets already makes the assumption that we are passing the time for utc use. From the README:\npython\n@freeze_time(\"2012-01-14 03:21:34\", tz_offset=-4)\ndef test():\n    assert datetime.datetime.utcnow() == datetime.datetime(2012, 01, 14, 03, 21, 34)\n    assert datetime.datetime.now() == datetime.datetime(2012, 01, 13, 23, 21, 34)\nIf we wanted to keep this all working, would the fix be a matter of setting tz_offset to default to time.timezone / 3600?\n. Yes, open to a PR with a clean merge and tests passing.. Great, thank you!\n. 0.3.2 is now released.\n. Thank you!\n. Thank you!\n. Thanks for opening.\nCan you try the master branch and see if the commit I just pushed fixes the issue?\n. Great. Heads up that I just pushed out freezegun 0.3.3 with the fix.\n. #WontFix\n. Thanks for opening. You are correct. Should be fixed now.\n. Agh, thanks. Added.\n. Thanks for opening!\nCan you test now with the latest commit on master? I think it is solved.\n. I just pushed out 0.3.4 for anyone that does need this fix.\n. Which version of freezegun are you on? We've had this issue in the past, but I thought it was fixed with https://github.com/spulec/freezegun/issues/13\n. I think Pandas does some C-level manipulation or use of the datetime/time modules. I've dug into it a bit, but not found a way that we could work around it.\n. Thanks for opening! I have recreated the issue.\nThis is a result of a performance improvement that was made with https://github.com/spulec/freezegun/commit/ac163a5c534b4728bd082d3f67d956b1df71f04c. Clearly we will need to rethink a better way to do that.\nFor now, you can try using an older version.\n. @UberFarmer  Do you have a test case for it breaking on 0.2.3? My test cases all pass on 0.2.5\n(obviously we still need to fix in master too, but I just want to ensure I understand the issue fully)\n. this should be fixed with #119 \n. Thanks, I changed it to assert datetime.date.today() == datetime.date(2012, 01, 13) which seems the clearest.\n. The easiest workaround for now is to pass the ignore parameter with the deprecated modules. That obviously isn't ideal, but I don't have a better answer right now.\nSuggestions welcome.\n. Thanks for the push, I was being lazy\n. This is great. Thanks for the help!\n. Thanks!\n. Thanks!\n. Ah, good catch\n. Looks great. tick is perfect.\n. Thanks!\n. Great, thanks!\n. Looks like this caused some issues with the tests\n. Thanks!\n. You can access freezegun.api.real_datetime to get the real datetime class. You can also grab an alias to the datetime class before patching.\n. Thanks for opening!\n. I have confirmed this is a bug. Due to how time is mocked (compared to datetime), the fix is going to take a bit of work.\n. No progress, feel free to take a stab at it.\n. Thanks for this!\nThe test seems to be that newer Coverage versions don't support python 3.2. I've fixed in master.\n. agreed\n. Any idea how ZODB gets the time? Unfortunately, if it makes a system call for this we won't be able to do anything.\n. Thank you!\n. thanks!\n. Thanks!\n. Thanks!\n. thanks!\n. Fixed with https://github.com/spulec/freezegun/pull/125\n. Decided to merge https://github.com/spulec/freezegun/pull/125 instead, because I'm not quite ready for a release yet.\n. thanks!\n. This seems like either a bug in cffi or dir, right? Is it an expected case that dir will raise this type of error?\n. This appears to be fixed in cffi > 1.5.2 according to #126 \n. Thanks!\n. Closed with #135 \n. thanks!\n. thanks!\n. 0.3.7 is now available\n. Going to close this for now since I haven't responded in a long time (my bad).\nIf you are still interested: I don't exactly understand the use case here. When do we want to freeze a short distance in the future? Just trying to figure out if the use-case is common enough to add support.\n. Okay, that makes sense. Can you add a test? I'll be happy to merge.. Hmmm, they seem to be working for me. Are you on master?\nTravis ran them without issue: https://travis-ci.org/spulec/freezegun/builds/199854719. thanks!\n. No update from me. Would be open to someone taking this and running with it.. Yes, this is fixed in master with https://github.com/spulec/freezegun/pull/135. I'll hopefully be able to get a new release out soon.\n. 0.3.7 is now available.\n. Hmmm, I get the same TypeError even without freezegun. Are you on the newest freezegun and pytz? What version of python?\n. thanks!\n. 0.3.7 is now available\n. Agreed, would be happy to accept a PR.\n. Just to make sure I understand, you want to patch the datetime module, but not the time module?\n. Great, thanks!\n. thanks!\n. I can't seem to find this method in the python documentation (https://docs.python.org/2/library/datetime.html).\n. Oh, my bad. I just haven't pushed out a new release yet. Feel free to install from Github and I should be getting a new release out soon.\n. Version 0.3.8 is now released. thanks!\n. Version 0.3.8 has been released. Does calling dir(py.test.cmdline) throw an exception?\n. Can someone give me a script to recreate this so I can try to dig more?. Do you know how JWT creates the expires datetime?\n. Thanks for opening.\nI believe this is a dupe of https://github.com/spulec/freezegun/issues/89. A solution is at https://github.com/spulec/freezegun/pull/136, but it hasn't been merged in yet.\nI'm going to close, but feel free to reopen if you think my assessment is wrong.. Thanks for opening. This is an interesting issue.\nReading through the uuid1 code, it seems to not work when moving time backwards. Notice how _last_timestamp is used.\nI suppose we could file a bug with python. I'm not sure if they will consider this a valid use case.\nYou can work around this by setting uuid._last_timestamp = None. \n. This should now be fixed with #172. Is this necessary? Should we ever be calling _time_to_freeze if there isn't cls.times_to_freeze?\n. I'm trying to figure out the scenario in which this happens. Do you have a test to reproduce the issue?\n. thanks!. Version 0.3.9 is now released!. Thanks!\n. I've just released 0.3.8.\nYes, that is the correct way to use it.\n. I don't know of a way to make this work. I'm going to close, but feel free to reopen if there is a possible solution here.. Thanks!\n. Excellent, thank you!\n. Great, thank you!\n. Going to close this for now. Feel free to rebase and add some tests and I'd be happy to help get this merged.. Thanks!\n. Thanks for the suggestion. Added. Yes, I believe @romgar is correct. Going to close this, but feel free to reopen if something else comes up.. Thanks!. Hmmmm.\nTwo possible solutions:\n1). It looks like pg8000 has a list of types that it can accept self.py_types. You could try appending the freezegun class to that list.\n2). If you do from freezegun.api import real_date, you can get access to the real date module to do any casting you need.\nLet me know if neither of those work. I can't think of a way to make this work by default.. I've added python 3.6 to Travis and everything seems to be passing. https://github.com/spulec/freezegun/commit/88f69903b3ac66b3894be00ef89d597e34f88f5e\nI'm struggling to recreate this issue. Anything else that might be different about your environment?. Great, thank you!. A bit unintuitive, but we use requirements.txt for dev requirements and prod requirements are in the setup.py: https://github.com/spulec/freezegun/blob/master/setup.py#L8-L12. Freezegun isn't designed to work like this. You will need to get the original freeze_time instance back to disable the freezing. Can you store the freeze_time instance as a global somehow so that it can be accessed in the place where you want to stop freezing?. No problem.. I can't think of any way to do this. Pytest seems to evaluate the function before running the test.\nFeel free to reopen if you can think of another way.. Thanks, will work on getting a new release out.. How are you using freezegun (decorator, context manager, raw use)?. If you look at the traceback, you can see that the freezegun exception is happening only after another exception already happened: KeyError: 'modification'\nIdeally, freezegun would always be able to cleanup, but if it is being used in the raw use mode, I'm not sure how that will be possible.\n. Ah, got it. I am confused then. Can you throw some print statements inside of the freezegun start and stop to see if they are unbalanced?. I'm a bit confused. In the test_offset, you are now passing a tz_offset, but only changing the first assertion.. Is this the same as #89?. It seems that pytest.mark.asyncio is skipping the decorator? Any more insight into what it is doing?. I believe this is a duplicate of https://github.com/spulec/freezegun/issues/89\nLet me know if you don't think that is the case.. If it doesn't work, I'd be happy to accept a PR to make it work. It seems like a reasonable use case.. Fixed with #187. Yes, I think this change isn't necessary. Are you seeing any issues without the change?. I'm debating if we should find a more extensible way to do this. The idea of maintaining a list of all modules that might need real time modules doesn't seem ideal.. Awesome work, thank you!. From what I can see, this is freezegun behaving in the expected manner. Yes, you will need to unfreeze if you want time to progress.\nPlease reopen if I am misunderstanding.. Can you confirm what version of freezegun you are using?\nThe tests that use this code are passing on Travis: https://github.com/spulec/freezegun/blob/master/tests/test_datetimes.py#L64-L77\nAny idea what else about your environment would be different?. See here: https://github.com/spulec/freezegun/issues/176. Hmmm, that doesn't seem right. Here is an example of the test generally working: https://github.com/spulec/freezegun/blob/master/tests/test_datetimes.py#L64-L77\nCan you give more details of your model files or anything else? Anywhere you might accidentally be casting to a date?. Thanks for opening this.\nCan you talk more about the use case? It isn't clear to me why it makes more sense to have two entry points.. thanks!. My guess is that it won't do any of that stuff, but I can't say that I've tested it.. Hmmmmm..... that doesn't seem great :/\nCan you add some print/log statements inside of freezegun on start and stop? Somehow the internal state of the freezegun stack is getting messed up and it is doesn't have a datetime to return.\nAlternatively, if you think you can reproduce a small test case that would be helpful (though I know that can be hard with a real django project like that).. Thanks for opening.\nOne interesting thing: this works if you change frozenat to something like 2017-01-01 01:23:45. I've dug a bit, but I'm not sure why changing that would break the unpatching of uuid.. It seems the tests are failing in a recursive loop. Any idea why?. Awesome, thanks!. I believe that version hasn't been released yet. Will hopefully get it out soon.. I applaud the effort, but no.\n. Thanks for reporting this Neal!\n. Oops, silly mistake. Forgot datetime needed to be a subclass of date. Fixed and pushed a new version to PyPI.\n. I put in a quick fix that will make addition and subtraction work. I'll go back at some point and reconsider other operators. If you find any, please reopen this ticket or open another ticket.\n. This was also fixed by https://github.com/spulec/freezegun/commit/0453e5f47efd1d0d79af973e5ddcf9fa83b2ca40\n. Ah, you are correct. It looks like I fixed now(), but not utcnow(). Fixed with https://github.com/spulec/freezegun/commit/768a60f453c70517b6191fb9df29cd4ff8e78d7f and added tests. Going to push a new release in a minute.\n. Also, thanks!\n. I believe that's the same issue as #30 \n. The lines assert not isinstance(now, FakeDatetime) and assert not isinstance(now, FakeDate) are not expected to pass. Once freeze_time is imported, all datetime/date instances will be instances of FakeDatetime/FakeDate and all references to datetime.datetime/datetime.date will actually be references to the classes FakeDatetime/FakeDate.\nThe thought is that this will all go on transparently behind the scenes and people will be able to just think of it all as datetime.datetime. Feel free to reopen if this is somehow causing issues in your test writing.\n. Hi there,\nThanks so much for taking the time to do this and apologies for the delay in responding.\nThis looks great, but I have one or two concerns. If you have time to discuss/fix, great. Otherwise, I can pull the request in and make the changes myself.\nIf we're going to add support for the time module, we need to support all of the methods (time.clock(), time.timezone, etc). I don't want people to see the time module being mocked and assume incorrectly that all of the methods are mocked.\nSecond item is that we need to add some docs.\nTo reiterate, if you have some more time to work on this, great. Otherwise, I'll take the great start you've given me and run with it.\n. Heh, yeah I haven't done any work on this.\nI agree with your comments.\nMake the changes and we can close this out. Also note that we are now python 3 compatible. Not sure if that changes any of your existing code.\n. Hi Dan,\nThanks a lot for taking the time to report this.\nI'm not exactly excited that we have to special case timedeltas like this. I think it might be a little cleaner if we flipped it and did something like\npython\nif isinstance(result, real_datetime):\n    return date_to_fakedate(result)\nelse:\n    return result\nIt seems to be more explicit about what our intentions really are.\nThoughts?\n. Thanks Dan!\n. Hi Hannes. I really like the idea, but don't think there is an easy way to do this with how the code is setup. One thing you can do is\npython\nfrom freezegun.api import FakeDatetime\nnow = datetime.datetime.now()\nassert isinstance(now, FakeDatetime)\nIf you can think of an easy way to do this, please reopen this issue because I would love to have it.\n. Hi Chris. I have just pushed version 0.0.9 that should fix your problem. Feel free to reopen this issue with the failing code if it still doesn't work.\nGlad to head you like it!\n. now() not accepting timezones is definitely a bug and should be fixed.\nI'm not able to recreate the django saving bug though. isinstance() checks should all pass for the current version of freezegun.\n. That would be great. Thanks.\n. I think that a lot of these issues should be fixed in the newest release. Freezegun now only mocks datetime/date when activated. I haven't actually tested with django yet though.\n. I think this should all be fixed with the latest release.\n. Yes, unfortunately that library imports datetime classes instead of just the datetime module. One workaround is to import freezegun before importing anything django. Sorry that there's not currently a better answer.\n. This should be fixed in the newest release due to https://github.com/spulec/freezegun/commit/a9cc66ce1f6c932e239dada6ee743783f75f3ca7. Sorry it took so long to find a good solution.\n. Yes, this is a known limitation of the library (there's a warning in the README). The other workaround involves just importing the datetime module and using that instead of importing classes from the module. Sorry that there's not currently a better answer.\n. Are you running this exact code? It works on my local machine.\nIf you are using this exact code, can you let me know some more details about your setup? Python version, OS, freezegun version, etc.\nIf you are not using this exact code, can you show me the code you are using?\n. Okay. So I think the problem here is the aliasing of the datetime import as dt.\nThe following code works:\n``` python\nfrom freezegun import freeze_time\nfrom datetime import datetime\nfreezer = freeze_time('1980-01-01')\nfreezer.start()\nassert datetime.now() == datetime(1980,1,1)\n```\nThis is definitely a bug, but I want to spend some time figuring out the best way to fix it. I've opened a new issue for this at https://github.com/spulec/freezegun/issues/64. \nThanks for reporting it.\n. I have pushed a fix to master that I think will address this. Can you give it a test?\n. The reason freezegun mocks on import is to accomodate those that do from datetime import datetime before freezegun is activated. If you can find a good workaround, I'll be happy to pull it in.\n. Sorry, my comment was unclear. What works now is if someone imports freezegun, then does from datetime import datetime and then uses the decorator.\nWhen freezegun first started, it didn't do any of this patching on import, but then I got a bunch of complaints. The issue is that people can't always control how third-party software imports datetime.\nSorry that this all kinda sucks. It's my least favorite thing about this library. We could do something like\npython\nimport freezegun\nfreezegun.dont_patch()\nand have dont_patch revert the patching.\nThat seems pretty gross to me though. Another idea is to have a different branch that works the old way.\n. This should be fixed in the newest version.\n. Just to be completely clear (in case people find this issue in the future), Freezegun will not work directly with Pandas, but Freezegun now only mocks datetime when it is activated allowing use of Freezegun in non-Panda tests.\n. Thanks!\n. Hi Mark. I apologize for the delay in responding. I'm actually working on a new branch of this project (ctypes) that changes freezegun to mostly be done with ctypes. It should solve most of these issues.\nSince that is going to change a lot of things, I don't want to take any big pull requests until I get that branch merged in. I'll leave this open and revisit post-merge.\nThanks again.\n. Hey Mark,\nI'm finally getting around to this again. I think that most of these issues have been addressed with the exception of adding FakeTime. If you want to refactor this pull request to add that and add a couple tests, I'll happily pull it in.\nThanks again.\n. Closing since this was done with f3b0b1089acd746d4bfd98f13d34cfb84fd59832\n. Thanks Matthew!\n. Thanks Javier!\n. Yeah, that's not great.\nI'm working on a new branch (ctypes) that will solve this problem. It doesn't work with python 3 yet though. If you're using python2, it'd be great to have some people start testing that branch.\n. Yes, most likely. You can try the ctypes branch and see if that gives you any luck.\n. Not a perfect solution, but it seems like the best one for now.\n. If you can add a test or two, I'll happily pull this in.\n. Excellent. Thanks!\n. It looks like this breaks on Python 3. https://travis-ci.org/spulec/freezegun/jobs/6890595\n. If you get a chance, can you try the https://github.com/spulec/freezegun/tree/ctypes branch on App Engine? It will eventually become master for freezegun once I get the python 3 tests passing.\n. Any chance that the latest release fixes any of this?\nIf not, I probably will close as wont-fix unless we can find something wrong with freezegun outside of GAE. I do appreciate you opening the ticket regardless. The fixes will be helpful to future users who search for this.\n. Can you confirm that the most recent version doesn't work? If it doesn't work, what happens?\n. Probably the same as https://github.com/spulec/freezegun/issues/69\nYou could try an older version until that issue is resolved.\n. No worries. Also note that I've pushed a new release since that commit.\n. :beers:\nThanks Roman, this is great! Merged, updated the README, and pushed a new version to PyPi.\n. This is great. Thanks for your work.\nIt looks like there are some issues with the tests for python 2.6 and 3.3. If you can fix those, I would love to pull this in. Let me know if I can be of help.\n. Great, thanks for your work!\nI'm planning on pushing out a new version later today.\n. Thanks Gilles!\n. Thanks Luke. Just pushed a commit to fix this and pushed out a new release (0.1.11).\n. Awesome, thanks Fredrik!\n. Thanks for reporting this. It should be fixed with https://github.com/spulec/freezegun/commit/204d756353048b04fe84db9e8c23a6211dee2b93\n. Hi there,\nI can't seem to reproduce this. Can you post any more code around it? Pickleing in general should definitely work.\n. Thanks for the solid test case. This is definitely a bug. My notes so far:\nWhen pickling, the Pickler looks at the module of the object's class and grabs the class by name. If the object's class and the class that the Pickler loads from the module are not the same object, it raises an error. \nIn our example: real_datetime has a class of datetime.datetime. When the pickling occurs, sys.modules['datetime'].datetime is actually FakeDatetime which is why we get the error.\nhttp://hg.python.org/cpython/rev/db9762529f45\nIt's not immediately clear to me if Python is being overly protective by checking if klass is not object as opposed to if klass != obj. If it was checking the later, we could fix this by overwriting FakeDatetime.__eq__.\nIt looks like one possible solution would be to register a custom function with copy_reg, but I'm not that familiar with that module.\nAny thoughts? I usually try to steer clear of pickling so this certainly is not my forte.\n. No, I unfortunately don't have a very good solution yet.\n. I pushed a commit to master that should address this. Anyone want to test?\n. Freezegun 0.2.0 is now released. Thank you all for your patience.\n. Hey Hynek,\nSorry for the issues.\nIt looks like six is altering sys.modules while Freezegun is iterating over them.\nI believe it was caused by this commit: https://bitbucket.org/gutworth/six/commits/fc2decf405ea6bcd3226bb1b77069d2a2279e0b7.\nI still don't really understand based on that traceback how those lines in six are occurring at the same time as freezegun is iterating over sys.modules, but I have confirmed that removing those two lines from Six will fix the issue. It looks like mod_name at that point is 'six.moves.tkinter_tix'.\nI will continue looking into and keep an eye on https://bitbucket.org/gutworth/six/issue/54/dependency-on-optional-tkinter-gdbm which I think may be related.\n. Should be fixed with #32\n. I can't say I'm completely pumped about having to add this, but if it helps get the job done let's do it.\nThanks for your contribution Andy!\nI'll push a new version shortly.\n. Thanks Ralph!\nThe original reason for freezing it was https://github.com/spulec/freezegun/issues/31\n. Just pushed out 0.1.13\n. Thanks Mat. Fixed with https://github.com/spulec/freezegun/commit/1ec95e12a5d3f066427510516fb9f42e83ff864b\n. Hey Chris, sorry about that. Can you try running against master now? I think the commit below should fix it.\nhttps://github.com/spulec/freezegun/commit/918a9736b2402377425496546cdf20d403a22afa\nIf so, I'll push out a new version.\n. Yeah, that might be the best solution. I'll try to take a look at it tonight again.\n. Thanks Chris! Will push out a new version later today.\n. Release 0.1.14 pushed to PyPI.\n. Thanks Jeroen!\n. According to this, python-dateutil>=2.1 should now work with python 2.6 and 2.7. Is there some other reason to not use the new version?\n. No worries. It's certainly possible there is still a bug in the new version of dateutil (or freezegun's interaction with it). Let me know if it looks like that is the case.\n. It looks like Django has an older version of six.\nhttps://github.com/django/django/blob/master/django/utils/six.py#L107-L119\nvs\nhttps://bitbucket.org/gutworth/six/src/a875ac34c777fe801569c6c5299bf1a35aa578cd/six.py?at=default#cl-111\nI think this issue was solved by https://bitbucket.org/gutworth/six/commits/e914c4c89b073b7eacb440a8bf456dd1d28018ba\n. I believe this is fixed with #40. Please reopen if there are still issues.\n. Thanks Jeroen!\n. Hmmm, it looks like sqlite3 was detecting that this is not a real datetime object. I've added custom adapters. Can you test against master?\nI'm not completely happy with this solution, but I couldn't think of anything else since it looks like the sqlite3 type comparison is being done in C.\n. Version 0.1.16 is pushed. Thanks again for reporting this!\n. Ah, you are completely right. Thanks Rob!\n. Ooops, pushed now. Thanks.\n. Awesome! Thanks.\n. It does. I've added the classifiers. Thanks!\n. Thanks!\n. I like the idea, but am a bit worried about backwards compatibility. Maybe a parameter to pass to the decorator.\nMy biggest concern is that it could cause harm to the 90% of users that wouldn't use the feature (imagine they are using some third party library that decides to call sleep()). With a parameter though, I think it would work.\n. That seems reasonable to me. I would accept a pull request with that as a default-off parameter.\n. I don't think that should require any changes to freezegun to make work. If you do the Raw use, then patch sleep to increment the freezer.time_to_freeze.\n. @jdunck that sounds good. I think it would actually make a lot of things easier.\n. This is definitely strange. datetime.utcnow() should definitely return a timezone-naive datetime. Looking into the boto code, it seems that self._credential_expiry_time should certainly be naive as well.\nI'm guessing the reason it passes locally is because boto start to bail when it realizes you are not on an EC2 machine. I'm guessing CircleCI runs on EC2 so boto is attempting to grab CircleCI's IAM credentials.\nIf I get some time to spin up a CircleCI (or probably any EC2 machine), I'll try to dig into this more. A quick fix might be to create a dummy boto config to short-circuit the authentication logic.\nPS: as soon as I saw the email for this issue, I thought to myself: \"Crap, who am I going to blame for this?\" :)\n. Okay. The Z in 2014-07-30T01:00:00Z is causing Freezegun to return a timezone-aware datetime for utcnow. A quick fix is to just remove the Z from your test, since everything is UTC anyway so it shouldn't change anything.\nFreezegun should probably be changed, but I'm not positive what behavior Freezegun should have when someone passes in a timezone-aware string. For this scenario, Freezegun should probably just strip it off. If someone passes in a non-UTC datetime, we should probably be smarter and convert it.\n. Fixed with fb8f822e3c0a74c6136876ac975e654a4a715add\n. Awesome. Thanks Andrew!\n. This is a good idea. If we can get the tests working, I'll happily merge.\n. Thanks Richard!\n. Can you try running against master and let me know if that fixes the issue?\n. I wanted to make sure I documented this stack overflow question that explains the problem.\nhttp://stackoverflow.com/questions/19614658/how-do-i-make-pytest-fixtures-work-with-decorated-functions\nI would prefer not to require the decorator package as a dependency, but there may not be a lot of other options. We can try to use some of the logic the package uses.\n. No, I haven't had any time. We can try to use whatever logic the decorator package uses.\n. Good catch. Thanks!\n. Great idea. Thanks Tye!\n. Thanks Roman! I'll work on getting a release out shortly.\n. Version 0.1.19 is on PyPI. Thanks again!\n. Great. Thanks Donald! I will try to get a new release out soon.\n. Sorry about that. I've changed the class-based decorator to impact all non-private methods now.\n. I think this is the same bug as #57. I'm going to close this and start working on fixing that. Feel free to follow along there.\n. Thanks for reporting.\nI don't think we ever implemented reading the timezone from a datetime that is passed it. I'll see what that would take.\nA workaround for now is to do something like with freeze_time(\"2014-10-14-07\", tz_offset=-6):.\n. I don't think I really understand what this is trying to accomplish.\nSo if a user passes in \"1970-01-01T00:00:00-04:00\", which is not midnight UTC, then we want utcnow() to return midnight UTC?\n. Got it. You are right. I had been reading it wrong.\nWhy the changes to requirements.txt? If you can remove those, I will happily merge.\n. Thanks for your work!\n. Unfortunately, we can't use the version from __init__ without importing everything which fails since the dependencies aren't installed at that point (take a look at Travis to see what I mean).\nI'm going to close this out, but please feel free to reopen if you come up with a better solution.\n. Thanks for reporting.\nI've pushed a fix with 747e496124ab42b497e9e099d5a93d7c419da827. Can you check that it works?\n. Thanks for reporting it. I'll try to get a new version out within a day or two.\n. Great, thanks Donald!\n. Thank you!\n. Thanks for reporting!\nThis should be fixed with #70. Feel free to reopen if it still seems to happen.\n. Thanks for reporting.\nI'm having trouble reproducing this. When I save the above code as tester.py and run python -m cProfile tester.py, I get the following:\n0.2.3: ~0.063 seconds\n0.2.2: ~0.065 seconds\nIt definitely varies a bit, but I'm not seeing the 100x change you are seeing. Is the code you have listed the actual code you are running?\n. Okay, so the slowdown is a result of https://github.com/spulec/freezegun/issues/64. We need to iterate through all the attributes of a module to see if there are any aliased datetimes, dates, or times. I can't currently think of a faster way to do this.\nI just pushed a fix that will make stop a lot faster though. We now store all of the changes we make and then just revert those. Can you give HEAD for a spin?\n. @simon-weber thanks for the suggestions! I am probably leaning toward the first one.\n. PRs welcome. I was actually just working on a work project that uses freezegun as a dependency and ran into this. Within a minute of hitting the bug, I checked my email and saw this PR. Sometimes open source is really great.\nThanks for your help!\n. Just saw your question: I think all of those ifs should really be elifs so I don't think it matters. Is that right?\n. Oh, I see.\nI'm always a bit nervous to have blanket excepts like that. I think I would rather wait and see if people run into other issues before making the change.\n(going to fix the if/elif in master shortly)\nThanks again!\n. As soon as I tried the new version with my work project I ran into a RuntimeError so it appears that your suggestion is necessary. Added with 47d113e7a50e99ccfab2b7e4259c29e1666ea60c.\nGoing to do some more testing, but I will release a new version shortly.\n. Ooh, I just pushed a change to master (for completely unrelated reasons) that I think might fix this. Can you give it a spin?\nIf it does, I'll push a new version.\n. Great, I have pushed v0.2.6 to PyPI. Feel free to reopen if any issues persist.\nGlad to hear it!\n. Excellent!\nThanks for your help Andreas. I will push a new release shortly.\n. (new version released: 0.2.7)\nThanks for the note. You made my day.\nI used to have a very similar hacky solution used throughout my projects and finally got fed up with it. Now we can centralize the hacks all in one place :)\n. Thank you again! I will push a new release shortly.\n. I had not intended for the tests to be included with the distributions. That is now fixed with https://github.com/spulec/freezegun/commit/47bcd0fc156ecdaed219cdbd9a2ac8b80a632bad.\nThanks.\n. This was the original reason. I'm open to alternative suggestions, but tend to be -0 on things like a nested tests directory inside of the freezegun module.\n. Ah, I missed one!\nThanks for opening. I'll try to get around to fixing this. If anyone else gets a minute and wants to take a stab at a pull request, feel free.\n. I've added support for time.strftime, time.localtime, and time.gmtime with #78.\nIf you can give it a test on your end, I'll update the docs and push out a new release.\n. Pushing out a new release now. Feel free to reopen if things don't seem to work.\n. Thank you!\n. Sorry about that. It was a bug in an old version of freezegun. You should be able to fix by using a newer freezegun.\n. Thanks. This definitely seems like the right way to do it.\n. I think we can close this since #83 was merged. Feel free to reopen if I missed something though.\n. Thanks!\n. I knew this day would eventually come....\n. I have just pushed out version 0.3.0 to PyPI with Wheels. Thanks for the push!\n. Universal wheel created for 0.3.1 (I think). Let me know if it doesn't look right.\n. Awesome\n. After digging into this a bit, I don't think the issue is with freezegun. Try running the following on python2 and python3 and notice the different results.\npython\nimport datetime\nfrom dateutil.tz import *\ntz = gettz('Europe/London')\nprint(tz.fromutc(datetime.datetime(2014, 4, 26, 12, 1).replace(tzinfo=tz)))\nAlso notice that if we change the datetime to datetime.datetime(2014, 1, 26, 12, 1), then everything works.\nI don't have more time to dig into this right now. If you keep digging, let me know what you find.\n. Hmmm, very interesting.\nI'm going to close this for now. Feel free to reopen if I can be of assistance or you think there is an easy workaround for freezegun to use, although I am a bit worried it could create more confusion. Also, feel free to comment here if any progress is made on your Python ticket.\n. Awesome, thanks!\n. This is great! Thank you!\n. Not sure if you know this, but freeze_time already accepts a tz_offset argument.\nIf your suggestion was just to make it cleaner so that we could pass in 'nice' timezone names, then I could get behind that.\n. Ah, right. I had forgotten about your second point. PR welcome.\n. Going to close this with support for @shreevatsar 's solution\n. Happy to accept a PR for it, but don't want to leave the issue open forever.\n. You make good points and I agree, especially if this is necessary to get the Django TestCase working.\n. Thank you again!\n. Thank you for opening this. Your point is very valid. I would like to fix this somehow, but have a few thoughts/questions I'm trying to think through. Any feedback appreciated.\n- I think we would need to have some sort of backwards-compatibility. No idea how this would work.\n- Should the time passed into freezegun be used as the local time or utc time?\n- What if the time passed in has a timezone as well or a tz_offset is passed?\nI'm also quite worried about how the documentation will read.\n. @bryanhelmig happy to accept a fix.\nAgree with thoughts on 1 and 3.\n2 makes me a bit nervous. I fear that this would force the majority of users to change their code (that is just a hunch). If we wanted to keep utc default, we could add a local argument to override it. As you noted, we will make people upset either way. \n. One thing I didn't realize until now is that our existing support for tz offsets already makes the assumption that we are passing the time for utc use. From the README:\npython\n@freeze_time(\"2012-01-14 03:21:34\", tz_offset=-4)\ndef test():\n    assert datetime.datetime.utcnow() == datetime.datetime(2012, 01, 14, 03, 21, 34)\n    assert datetime.datetime.now() == datetime.datetime(2012, 01, 13, 23, 21, 34)\nIf we wanted to keep this all working, would the fix be a matter of setting tz_offset to default to time.timezone / 3600?\n. Yes, open to a PR with a clean merge and tests passing.. Great, thank you!\n. 0.3.2 is now released.\n. Thank you!\n. Thank you!\n. Thanks for opening.\nCan you try the master branch and see if the commit I just pushed fixes the issue?\n. Great. Heads up that I just pushed out freezegun 0.3.3 with the fix.\n. #WontFix\n. Thanks for opening. You are correct. Should be fixed now.\n. Agh, thanks. Added.\n. Thanks for opening!\nCan you test now with the latest commit on master? I think it is solved.\n. I just pushed out 0.3.4 for anyone that does need this fix.\n. Which version of freezegun are you on? We've had this issue in the past, but I thought it was fixed with https://github.com/spulec/freezegun/issues/13\n. I think Pandas does some C-level manipulation or use of the datetime/time modules. I've dug into it a bit, but not found a way that we could work around it.\n. Thanks for opening! I have recreated the issue.\nThis is a result of a performance improvement that was made with https://github.com/spulec/freezegun/commit/ac163a5c534b4728bd082d3f67d956b1df71f04c. Clearly we will need to rethink a better way to do that.\nFor now, you can try using an older version.\n. @UberFarmer  Do you have a test case for it breaking on 0.2.3? My test cases all pass on 0.2.5\n(obviously we still need to fix in master too, but I just want to ensure I understand the issue fully)\n. this should be fixed with #119 \n. Thanks, I changed it to assert datetime.date.today() == datetime.date(2012, 01, 13) which seems the clearest.\n. The easiest workaround for now is to pass the ignore parameter with the deprecated modules. That obviously isn't ideal, but I don't have a better answer right now.\nSuggestions welcome.\n. Thanks for the push, I was being lazy\n. This is great. Thanks for the help!\n. Thanks!\n. Thanks!\n. Ah, good catch\n. Looks great. tick is perfect.\n. Thanks!\n. Great, thanks!\n. Looks like this caused some issues with the tests\n. Thanks!\n. You can access freezegun.api.real_datetime to get the real datetime class. You can also grab an alias to the datetime class before patching.\n. Thanks for opening!\n. I have confirmed this is a bug. Due to how time is mocked (compared to datetime), the fix is going to take a bit of work.\n. No progress, feel free to take a stab at it.\n. Thanks for this!\nThe test seems to be that newer Coverage versions don't support python 3.2. I've fixed in master.\n. agreed\n. Any idea how ZODB gets the time? Unfortunately, if it makes a system call for this we won't be able to do anything.\n. Thank you!\n. thanks!\n. Thanks!\n. Thanks!\n. thanks!\n. Fixed with https://github.com/spulec/freezegun/pull/125\n. Decided to merge https://github.com/spulec/freezegun/pull/125 instead, because I'm not quite ready for a release yet.\n. thanks!\n. This seems like either a bug in cffi or dir, right? Is it an expected case that dir will raise this type of error?\n. This appears to be fixed in cffi > 1.5.2 according to #126 \n. Thanks!\n. Closed with #135 \n. thanks!\n. thanks!\n. 0.3.7 is now available\n. Going to close this for now since I haven't responded in a long time (my bad).\nIf you are still interested: I don't exactly understand the use case here. When do we want to freeze a short distance in the future? Just trying to figure out if the use-case is common enough to add support.\n. Okay, that makes sense. Can you add a test? I'll be happy to merge.. Hmmm, they seem to be working for me. Are you on master?\nTravis ran them without issue: https://travis-ci.org/spulec/freezegun/builds/199854719. thanks!\n. No update from me. Would be open to someone taking this and running with it.. Yes, this is fixed in master with https://github.com/spulec/freezegun/pull/135. I'll hopefully be able to get a new release out soon.\n. 0.3.7 is now available.\n. Hmmm, I get the same TypeError even without freezegun. Are you on the newest freezegun and pytz? What version of python?\n. thanks!\n. 0.3.7 is now available\n. Agreed, would be happy to accept a PR.\n. Just to make sure I understand, you want to patch the datetime module, but not the time module?\n. Great, thanks!\n. thanks!\n. I can't seem to find this method in the python documentation (https://docs.python.org/2/library/datetime.html).\n. Oh, my bad. I just haven't pushed out a new release yet. Feel free to install from Github and I should be getting a new release out soon.\n. Version 0.3.8 is now released. thanks!\n. Version 0.3.8 has been released. Does calling dir(py.test.cmdline) throw an exception?\n. Can someone give me a script to recreate this so I can try to dig more?. Do you know how JWT creates the expires datetime?\n. Thanks for opening.\nI believe this is a dupe of https://github.com/spulec/freezegun/issues/89. A solution is at https://github.com/spulec/freezegun/pull/136, but it hasn't been merged in yet.\nI'm going to close, but feel free to reopen if you think my assessment is wrong.. Thanks for opening. This is an interesting issue.\nReading through the uuid1 code, it seems to not work when moving time backwards. Notice how _last_timestamp is used.\nI suppose we could file a bug with python. I'm not sure if they will consider this a valid use case.\nYou can work around this by setting uuid._last_timestamp = None. \n. This should now be fixed with #172. Is this necessary? Should we ever be calling _time_to_freeze if there isn't cls.times_to_freeze?\n. I'm trying to figure out the scenario in which this happens. Do you have a test to reproduce the issue?\n. thanks!. Version 0.3.9 is now released!. Thanks!\n. I've just released 0.3.8.\nYes, that is the correct way to use it.\n. I don't know of a way to make this work. I'm going to close, but feel free to reopen if there is a possible solution here.. Thanks!\n. Excellent, thank you!\n. Great, thank you!\n. Going to close this for now. Feel free to rebase and add some tests and I'd be happy to help get this merged.. Thanks!\n. Thanks for the suggestion. Added. Yes, I believe @romgar is correct. Going to close this, but feel free to reopen if something else comes up.. Thanks!. Hmmmm.\nTwo possible solutions:\n1). It looks like pg8000 has a list of types that it can accept self.py_types. You could try appending the freezegun class to that list.\n2). If you do from freezegun.api import real_date, you can get access to the real date module to do any casting you need.\nLet me know if neither of those work. I can't think of a way to make this work by default.. I've added python 3.6 to Travis and everything seems to be passing. https://github.com/spulec/freezegun/commit/88f69903b3ac66b3894be00ef89d597e34f88f5e\nI'm struggling to recreate this issue. Anything else that might be different about your environment?. Great, thank you!. A bit unintuitive, but we use requirements.txt for dev requirements and prod requirements are in the setup.py: https://github.com/spulec/freezegun/blob/master/setup.py#L8-L12. Freezegun isn't designed to work like this. You will need to get the original freeze_time instance back to disable the freezing. Can you store the freeze_time instance as a global somehow so that it can be accessed in the place where you want to stop freezing?. No problem.. I can't think of any way to do this. Pytest seems to evaluate the function before running the test.\nFeel free to reopen if you can think of another way.. Thanks, will work on getting a new release out.. How are you using freezegun (decorator, context manager, raw use)?. If you look at the traceback, you can see that the freezegun exception is happening only after another exception already happened: KeyError: 'modification'\nIdeally, freezegun would always be able to cleanup, but if it is being used in the raw use mode, I'm not sure how that will be possible.\n. Ah, got it. I am confused then. Can you throw some print statements inside of the freezegun start and stop to see if they are unbalanced?. I'm a bit confused. In the test_offset, you are now passing a tz_offset, but only changing the first assertion.. Is this the same as #89?. It seems that pytest.mark.asyncio is skipping the decorator? Any more insight into what it is doing?. I believe this is a duplicate of https://github.com/spulec/freezegun/issues/89\nLet me know if you don't think that is the case.. If it doesn't work, I'd be happy to accept a PR to make it work. It seems like a reasonable use case.. Fixed with #187. Yes, I think this change isn't necessary. Are you seeing any issues without the change?. I'm debating if we should find a more extensible way to do this. The idea of maintaining a list of all modules that might need real time modules doesn't seem ideal.. Awesome work, thank you!. From what I can see, this is freezegun behaving in the expected manner. Yes, you will need to unfreeze if you want time to progress.\nPlease reopen if I am misunderstanding.. Can you confirm what version of freezegun you are using?\nThe tests that use this code are passing on Travis: https://github.com/spulec/freezegun/blob/master/tests/test_datetimes.py#L64-L77\nAny idea what else about your environment would be different?. See here: https://github.com/spulec/freezegun/issues/176. Hmmm, that doesn't seem right. Here is an example of the test generally working: https://github.com/spulec/freezegun/blob/master/tests/test_datetimes.py#L64-L77\nCan you give more details of your model files or anything else? Anywhere you might accidentally be casting to a date?. Thanks for opening this.\nCan you talk more about the use case? It isn't clear to me why it makes more sense to have two entry points.. thanks!. My guess is that it won't do any of that stuff, but I can't say that I've tested it.. Hmmmmm..... that doesn't seem great :/\nCan you add some print/log statements inside of freezegun on start and stop? Somehow the internal state of the freezegun stack is getting messed up and it is doesn't have a datetime to return.\nAlternatively, if you think you can reproduce a small test case that would be helpful (though I know that can be hard with a real django project like that).. Thanks for opening.\nOne interesting thing: this works if you change frozenat to something like 2017-01-01 01:23:45. I've dug a bit, but I'm not sure why changing that would break the unpatching of uuid.. It seems the tests are failing in a recursive loop. Any idea why?. Awesome, thanks!. I believe that version hasn't been released yet. Will hopefully get it out soon.. ",
    "andrewgross": "Mr. Freeze: You're not sending ME to the COOLER! \nhttp://www.imdb.com/character/ch0000185/quotes\nI suggest these instead of error messages\n. Mr. Freeze: You're not sending ME to the COOLER! \nhttp://www.imdb.com/character/ch0000185/quotes\nI suggest these instead of error messages\n. ",
    "nealtodd": "Hi Steve,\nNo problem. Thanks for looking at the issues so quickly. This'll be a very useful library for my unit tests.\nSlight issue still with the dateutil library because isinstance(freezegun.api.FakeDatetime, datetime.date) is False, whereas isinstance(datetime.datetime.now(), datetime.date) is True:\n```\nIn [1]: import datetime\nIn [2]: import dateutil\nIn [3]: d = datetime.date.today()\nIn [4]: type(d)\nOut[4]: \nIn [5]: isinstance(d, datetime.date)\nOut[5]: True\nIn [6]: d + dateutil.relativedelta.relativedelta(days=1)\nOut[6]: datetime.date(2012, 12, 13)\nIn [7]: d = datetime.datetime.now()\nIn [8]: type(d)\nOut[8]: \nIn [9]: isinstance(d, datetime.datetime)\nOut[9]: True\nIn [10]: isinstance(d, datetime.date)\nOut[10]: True\nIn [11]: d + dateutil.relativedelta.relativedelta(days=1)\nOut[11]: datetime.datetime(2012, 12, 13, 17, 14, 30, 291827)\nIn [12]: from freezegun import freeze_time\nIn [13]: d = datetime.date.today()\nIn [14]: type(d)\nOut[14]: \nIn [15]: isinstance(d, datetime.date)\nOut[15]: True\nIn [16]: d + dateutil.relativedelta.relativedelta(days=1)\nOut[16]: datetime.date(2012, 12, 13)\nIn [17]: d = datetime.datetime.now()\nIn [18]: type(d)\nOut[18]: \nIn [19]: isinstance(d, datetime.datetime)\nOut[19]: True\nIn [20]: isinstance(d, datetime.date)\nOut[20]: False\nIn [21]: d + dateutil.relativedelta.relativedelta(days=1)\nTypeError                                 Traceback (most recent call last)\n/vagrant/ in ()\n/home/vagrant/.virtualenvs/upshot/local/lib/python2.7/site-packages/dateutil/relativedelta.pyc in radd(self, other)\n    245     def radd(self, other):\n    246         if not isinstance(other, datetime.date):\n--> 247             raise TypeError, \"unsupported type for add operation\"\n    248         elif self._has_time and not isinstance(other, datetime.datetime):\n    249             other = datetime.datetime.fromordinal(other.toordinal())\nTypeError: unsupported type for add operation\n/home/vagrant/.virtualenvs/upshot/local/lib/python2.7/site-packages/dateutil/relativedelta.pyc in radd(self, other)\n    245     def radd(self, other):\n    246         if not isinstance(other, datetime.date):\n--> 247             raise TypeError, \"unsupported type for add operation\"\n    248         elif self._has_time and not isinstance(other, datetime.datetime):\n    249             other = datetime.datetime.fromordinal(other.toordinal())\nTypeError: unsupported type for add operation\n```\n. Hi again Steve,\nThink there might still be a problem with how the instances are resolved to classes. E.g. I think isinstance(myFakeDatetime, datetime.datetime) is True because datetime.datetime gets assigned to FakeDatetime.\nWhen used in conjunction with something like dateutils there's an inconsistency as to what datetime.datetime is. Easier seen with a test:\n```\nimport datetime\nfrom dateutil.relativedelta import relativedelta\nfrom freezegun import freeze_time\ndef test_dateutil():\n        d1 = datetime.datetime.now()\n        #print type(d1)  # \n        assert isinstance(d1, datetime.datetime)\n        d2 = d1 + relativedelta(days=0)\n        #print type(d2)  # \n        assert isinstance(d2, datetime.datetime)\n======================================================================\nFAIL: test_dateutil.test_dateutil\n\nTraceback (most recent call last):\n  File \"[...]test_dateutil.py\", line 12, in test_dateutil\n    assert isinstance(d2, datetime.datetime)\nAssertionError:\n    assert isinstance(FakeDatetime(2012, 12, 13, 16, 0, 38, 500929), .)\n    datetime.datetime(2012, 12, 13, 16, 0, 38, 500929) = FakeDatetime(2012, 12, 13, 16, 0, 38, 500929) + relativedelta(days=0)\n    #print type(d2)  # \n\n\nassert isinstance(datetime.datetime(2012, 12, 13, 16, 0, 38, 500929), .)\n```\n\n\nAlthough type(d2) gives <type 'datetime.datetime'>, isinstance(d2, datetime.datetime) is False.\n. I was getting a similar error when using the freeze_time decorator on a test in a Django 1.6 app. The pickling error was cropping up when adding an object to the cache in middleware. Although freezegun was decorating the whole test at least one of the datetime attributes of the object was a 'real' datetime ((EDIT:) where the object would have been created in the test setup, i.e. outside the decorator).\nI haven't dug any further into that aspect but based on that I can reproduce a pickling error when a real datetime is pickled after freezegun has started (where it pickled okay before):\n```\nIn [1]: from freezegun import freeze_time\nIn [2]: import datetime\nIn [3]: import pickle\nIn [4]: import StringIO\nIn [5]: f=StringIO.StringIO()\nIn [6]: real_datetime = datetime.datetime(1970,1,1)\nIn [7]: type(real_datetime)\nOut[7]: datetime.datetime\nIn [8]: pickle.dump(real_datetime, f)\nIn [9]: freezer = freeze_time(\"1970-01-01\")\nIn [10]: freezer.start()\nIn [11]: fake_datetime = datetime.datetime(1970,1,1)\nIn [12]: type(fake_datetime)\nOut[12]: freezegun.api.FakeDatetime\nIn [13]: pickle.dump(fake_datetime, f)\nIn [14]: pickle.dump(real_datetime, f)\nPicklingError                             Traceback (most recent call last)\n in ()\n----> 1 pickle.dump(real_datetime, f)\n/usr/lib/python2.7/pickle.pyc in dump(obj, file, protocol)\n   1368 \n   1369 def dump(obj, file, protocol=None):\n-> 1370     Pickler(file, protocol).dump(obj)\n   1371 \n   1372 def dumps(obj, protocol=None):\n/usr/lib/python2.7/pickle.pyc in dump(self, obj)\n    222         if self.proto >= 2:\n    223             self.write(PROTO + chr(self.proto))\n--> 224         self.save(obj)\n    225         self.write(STOP)\n    226 \n/usr/lib/python2.7/pickle.pyc in save(self, obj)\n    329 \n    330         # Save the reduce() output and finally memoize the object\n--> 331         self.save_reduce(obj=obj, *rv)\n    332 \n    333     def persistent_id(self, obj):\n/usr/lib/python2.7/pickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)\n    398             write(NEWOBJ)\n    399         else:\n--> 400             save(func)\n    401             save(args)\n    402             write(REDUCE)\n/usr/lib/python2.7/pickle.pyc in save(self, obj)\n    284         f = self.dispatch.get(t)\n    285         if f:\n--> 286             f(self, obj) # Call unbound method with explicit self\n    287             return\n    288 \n/usr/lib/python2.7/pickle.pyc in save_global(self, obj, name, pack)\n    751                 raise PicklingError(\n    752                     \"Can't pickle %r: it's not the same object as %s.%s\" %\n--> 753                     (obj, module, name))\n    754 \n    755         if self.proto >= 2:\nPicklingError: Can't pickle : it's not the same object as datetime.datetime\n```\nHope that helps in troubleshooting.\n. @spulec Looks good!, for me at least.\nThe original app unit test I had problems with gets the pickling error with 0.1.19 but succeeds with master. The pickling error in the example I reported also goes away with master under Django 1.6 and 1.7.\nThanks for the fix. Could you do a 0.1.20 release to PyPI, assuming no one reports any problems?\n. Hi Steve,\nNo problem. Thanks for looking at the issues so quickly. This'll be a very useful library for my unit tests.\nSlight issue still with the dateutil library because isinstance(freezegun.api.FakeDatetime, datetime.date) is False, whereas isinstance(datetime.datetime.now(), datetime.date) is True:\n```\nIn [1]: import datetime\nIn [2]: import dateutil\nIn [3]: d = datetime.date.today()\nIn [4]: type(d)\nOut[4]: \nIn [5]: isinstance(d, datetime.date)\nOut[5]: True\nIn [6]: d + dateutil.relativedelta.relativedelta(days=1)\nOut[6]: datetime.date(2012, 12, 13)\nIn [7]: d = datetime.datetime.now()\nIn [8]: type(d)\nOut[8]: \nIn [9]: isinstance(d, datetime.datetime)\nOut[9]: True\nIn [10]: isinstance(d, datetime.date)\nOut[10]: True\nIn [11]: d + dateutil.relativedelta.relativedelta(days=1)\nOut[11]: datetime.datetime(2012, 12, 13, 17, 14, 30, 291827)\nIn [12]: from freezegun import freeze_time\nIn [13]: d = datetime.date.today()\nIn [14]: type(d)\nOut[14]: \nIn [15]: isinstance(d, datetime.date)\nOut[15]: True\nIn [16]: d + dateutil.relativedelta.relativedelta(days=1)\nOut[16]: datetime.date(2012, 12, 13)\nIn [17]: d = datetime.datetime.now()\nIn [18]: type(d)\nOut[18]: \nIn [19]: isinstance(d, datetime.datetime)\nOut[19]: True\nIn [20]: isinstance(d, datetime.date)\nOut[20]: False\nIn [21]: d + dateutil.relativedelta.relativedelta(days=1)\nTypeError                                 Traceback (most recent call last)\n/vagrant/ in ()\n/home/vagrant/.virtualenvs/upshot/local/lib/python2.7/site-packages/dateutil/relativedelta.pyc in radd(self, other)\n    245     def radd(self, other):\n    246         if not isinstance(other, datetime.date):\n--> 247             raise TypeError, \"unsupported type for add operation\"\n    248         elif self._has_time and not isinstance(other, datetime.datetime):\n    249             other = datetime.datetime.fromordinal(other.toordinal())\nTypeError: unsupported type for add operation\n/home/vagrant/.virtualenvs/upshot/local/lib/python2.7/site-packages/dateutil/relativedelta.pyc in radd(self, other)\n    245     def radd(self, other):\n    246         if not isinstance(other, datetime.date):\n--> 247             raise TypeError, \"unsupported type for add operation\"\n    248         elif self._has_time and not isinstance(other, datetime.datetime):\n    249             other = datetime.datetime.fromordinal(other.toordinal())\nTypeError: unsupported type for add operation\n```\n. Hi again Steve,\nThink there might still be a problem with how the instances are resolved to classes. E.g. I think isinstance(myFakeDatetime, datetime.datetime) is True because datetime.datetime gets assigned to FakeDatetime.\nWhen used in conjunction with something like dateutils there's an inconsistency as to what datetime.datetime is. Easier seen with a test:\n```\nimport datetime\nfrom dateutil.relativedelta import relativedelta\nfrom freezegun import freeze_time\ndef test_dateutil():\n        d1 = datetime.datetime.now()\n        #print type(d1)  # \n        assert isinstance(d1, datetime.datetime)\n        d2 = d1 + relativedelta(days=0)\n        #print type(d2)  # \n        assert isinstance(d2, datetime.datetime)\n======================================================================\nFAIL: test_dateutil.test_dateutil\n\nTraceback (most recent call last):\n  File \"[...]test_dateutil.py\", line 12, in test_dateutil\n    assert isinstance(d2, datetime.datetime)\nAssertionError:\n    assert isinstance(FakeDatetime(2012, 12, 13, 16, 0, 38, 500929), .)\n    datetime.datetime(2012, 12, 13, 16, 0, 38, 500929) = FakeDatetime(2012, 12, 13, 16, 0, 38, 500929) + relativedelta(days=0)\n    #print type(d2)  # \n\n\nassert isinstance(datetime.datetime(2012, 12, 13, 16, 0, 38, 500929), .)\n```\n\n\nAlthough type(d2) gives <type 'datetime.datetime'>, isinstance(d2, datetime.datetime) is False.\n. I was getting a similar error when using the freeze_time decorator on a test in a Django 1.6 app. The pickling error was cropping up when adding an object to the cache in middleware. Although freezegun was decorating the whole test at least one of the datetime attributes of the object was a 'real' datetime ((EDIT:) where the object would have been created in the test setup, i.e. outside the decorator).\nI haven't dug any further into that aspect but based on that I can reproduce a pickling error when a real datetime is pickled after freezegun has started (where it pickled okay before):\n```\nIn [1]: from freezegun import freeze_time\nIn [2]: import datetime\nIn [3]: import pickle\nIn [4]: import StringIO\nIn [5]: f=StringIO.StringIO()\nIn [6]: real_datetime = datetime.datetime(1970,1,1)\nIn [7]: type(real_datetime)\nOut[7]: datetime.datetime\nIn [8]: pickle.dump(real_datetime, f)\nIn [9]: freezer = freeze_time(\"1970-01-01\")\nIn [10]: freezer.start()\nIn [11]: fake_datetime = datetime.datetime(1970,1,1)\nIn [12]: type(fake_datetime)\nOut[12]: freezegun.api.FakeDatetime\nIn [13]: pickle.dump(fake_datetime, f)\nIn [14]: pickle.dump(real_datetime, f)\nPicklingError                             Traceback (most recent call last)\n in ()\n----> 1 pickle.dump(real_datetime, f)\n/usr/lib/python2.7/pickle.pyc in dump(obj, file, protocol)\n   1368 \n   1369 def dump(obj, file, protocol=None):\n-> 1370     Pickler(file, protocol).dump(obj)\n   1371 \n   1372 def dumps(obj, protocol=None):\n/usr/lib/python2.7/pickle.pyc in dump(self, obj)\n    222         if self.proto >= 2:\n    223             self.write(PROTO + chr(self.proto))\n--> 224         self.save(obj)\n    225         self.write(STOP)\n    226 \n/usr/lib/python2.7/pickle.pyc in save(self, obj)\n    329 \n    330         # Save the reduce() output and finally memoize the object\n--> 331         self.save_reduce(obj=obj, *rv)\n    332 \n    333     def persistent_id(self, obj):\n/usr/lib/python2.7/pickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)\n    398             write(NEWOBJ)\n    399         else:\n--> 400             save(func)\n    401             save(args)\n    402             write(REDUCE)\n/usr/lib/python2.7/pickle.pyc in save(self, obj)\n    284         f = self.dispatch.get(t)\n    285         if f:\n--> 286             f(self, obj) # Call unbound method with explicit self\n    287             return\n    288 \n/usr/lib/python2.7/pickle.pyc in save_global(self, obj, name, pack)\n    751                 raise PicklingError(\n    752                     \"Can't pickle %r: it's not the same object as %s.%s\" %\n--> 753                     (obj, module, name))\n    754 \n    755         if self.proto >= 2:\nPicklingError: Can't pickle : it's not the same object as datetime.datetime\n```\nHope that helps in troubleshooting.\n. @spulec Looks good!, for me at least.\nThe original app unit test I had problems with gets the pickling error with 0.1.19 but succeeds with master. The pickling error in the example I reported also goes away with master under Django 1.6 and 1.7.\nThanks for the fix. Could you do a 0.1.20 release to PyPI, assuming no one reports any problems?\n. ",
    "jtsoi": "@spulec , I think this is still an issue, or something changed in later releases...\nFailing test: \n@freezegun.freeze_time('2001-01-01')\ndef test_picke_mock_time():\n    import cPickle as pickle\n    data = {'time': datetime.datetime.utcnow()}\n    result = pickle.loads(pickle.dumps(data))\n    compare(result, data)\nRuns fine without the freezegun decorator, with the decorator, raises:\nPicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime\nIt would be good to have this test as a regression.\nI would send a pull-request, but I can't figure why it is broken. Maybe you can find the problem using this test.\n. @spulec , I think this is still an issue, or something changed in later releases...\nFailing test: \n@freezegun.freeze_time('2001-01-01')\ndef test_picke_mock_time():\n    import cPickle as pickle\n    data = {'time': datetime.datetime.utcnow()}\n    result = pickle.loads(pickle.dumps(data))\n    compare(result, data)\nRuns fine without the freezegun decorator, with the decorator, raises:\nPicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime\nIt would be good to have this test as a regression.\nI would send a pull-request, but I can't figure why it is broken. Maybe you can find the problem using this test.\n. ",
    "foxx": "Still happening with cPickle and python-rq.\nFile \"local/lib/python2.7/site-packages/rq/job.py\", line 303, in save\n    obj['data'] = dumps(self.job_tuple)\ncPickle.PicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime\n. Still happening with cPickle and python-rq.\nFile \"local/lib/python2.7/site-packages/rq/job.py\", line 303, in save\n    obj['data'] = dumps(self.job_tuple)\ncPickle.PicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime\n. ",
    "sralmai": "Your delay in response pales in comparison to mine. I apologize.\nYour concerns:\n1. adding full support for time module\n     I agree with adding time.timezone support. I will do this (and related function changes). But time.clock is a trickier (platform dependent) issue. And in any case, I don't believe it should change when time changes. Otherwise, we would break a(n implied, at least) strictly monotonic increasing guarantee. Programs stuck in my spaciotemporal plane don't run backwards ;).\n2. adding docs\n     Absolutely. I will do this.\nI'd like your feedback (and agreement) before I implement changes.\n. And months later... I still haven't touched this. Based on your comments on the other adding time.time() branch, your rework using ctypes should resolve this, anyways.\n. Your delay in response pales in comparison to mine. I apologize.\nYour concerns:\n1. adding full support for time module\n     I agree with adding time.timezone support. I will do this (and related function changes). But time.clock is a trickier (platform dependent) issue. And in any case, I don't believe it should change when time changes. Otherwise, we would break a(n implied, at least) strictly monotonic increasing guarantee. Programs stuck in my spaciotemporal plane don't run backwards ;).\n2. adding docs\n     Absolutely. I will do this.\nI'd like your feedback (and agreement) before I implement changes.\n. And months later... I still haven't touched this. Based on your comments on the other adding time.time() branch, your rework using ctypes should resolve this, anyways.\n. ",
    "dnmiller": "I like the suggestion. I've updated the pull request.\n. I like the suggestion. I've updated the pull request.\n. ",
    "hexsprite": "Looks like freezegun has an incomplete implementation of datetime.now.  It needs to support the tz argument for that to work.\nI've had another problem with Django as well.  In django.db.models.fields both DateField, DateTimeField have to_python methods that check is the value passed isinstance of datetime.datetime or datetime.date\nFor some reason real datetimes can get passed to it and this causes isinstance() to return False causing a failure.  Maybe it's not clear where freezegun should be imported to avoid that but for now I have monkeypatched the to_python to check for both freezegun and real datetime objects.\n. @lorin it ain't pretty but it works for me...\nnot sure if there's a more elegant way of getting around an isinstance() check in the original code...\n```\nimport datetime\nimport freezegun\nimport logging\nimport warnings\nfrom django.conf import settings\nfrom django.db.models.fields import DateField, DateTimeField\nfrom django.utils import timezone\nlog = logging.getLogger(name)\ndef monkeypatch_fields_for_freezegun():\n    _original_datefield_to_python = DateField.to_python\n    _original_datetimefield_to_python = DateTimeField.to_python\nlog.warn(\"monkey patching Django Date fields for freezegun support\")\n\ndef _datefield_to_python(self, value):\n    if isinstance(value, freezegun.api.real_datetime):\n        if settings.USE_TZ and timezone.is_aware(value):\n            # Convert aware datetimes to the default time zone\n            # before casting them to dates (#17742).\n            default_timezone = timezone.get_default_timezone()\n            value = timezone.make_naive(value, default_timezone)\n        return value.date()\n    if isinstance(value, freezegun.api.real_date):\n        return value\n    return _original_datefield_to_python(self, value)\n\ndef _datetimefield_to_python(self, value):\n    if isinstance(value, freezegun.api.real_datetime):\n        return value\n    if isinstance(value, freezegun.api.real_date):\n        value = datetime.datetime(value.year, value.month, value.day)\n        if settings.USE_TZ:\n            # For backwards compatibility, interpret naive datetimes in\n            # local time. This won't work during DST change, but we can't\n            # do much about it, so we let the exceptions percolate up the\n            # call stack.\n            warnings.warn(\"DateTimeField received a naive datetime (%s)\"\n                          \" while time zone support is active.\" % value,\n                          RuntimeWarning)\n            default_timezone = timezone.get_default_timezone()\n            value = timezone.make_aware(value, default_timezone)\n        return value\n    return _original_datetimefield_to_python(self, value)\n\nDateField.to_python = _datefield_to_python\nDateTimeField.to_python = _datetimefield_to_python\n\nmonkeypatch_fields_for_freezegun()\n```\n. if I get a moment I'll try to create a minimal test case that demonstrates the isinstance() issue\n. Looks like freezegun has an incomplete implementation of datetime.now.  It needs to support the tz argument for that to work.\nI've had another problem with Django as well.  In django.db.models.fields both DateField, DateTimeField have to_python methods that check is the value passed isinstance of datetime.datetime or datetime.date\nFor some reason real datetimes can get passed to it and this causes isinstance() to return False causing a failure.  Maybe it's not clear where freezegun should be imported to avoid that but for now I have monkeypatched the to_python to check for both freezegun and real datetime objects.\n. @lorin it ain't pretty but it works for me...\nnot sure if there's a more elegant way of getting around an isinstance() check in the original code...\n```\nimport datetime\nimport freezegun\nimport logging\nimport warnings\nfrom django.conf import settings\nfrom django.db.models.fields import DateField, DateTimeField\nfrom django.utils import timezone\nlog = logging.getLogger(name)\ndef monkeypatch_fields_for_freezegun():\n    _original_datefield_to_python = DateField.to_python\n    _original_datetimefield_to_python = DateTimeField.to_python\nlog.warn(\"monkey patching Django Date fields for freezegun support\")\n\ndef _datefield_to_python(self, value):\n    if isinstance(value, freezegun.api.real_datetime):\n        if settings.USE_TZ and timezone.is_aware(value):\n            # Convert aware datetimes to the default time zone\n            # before casting them to dates (#17742).\n            default_timezone = timezone.get_default_timezone()\n            value = timezone.make_naive(value, default_timezone)\n        return value.date()\n    if isinstance(value, freezegun.api.real_date):\n        return value\n    return _original_datefield_to_python(self, value)\n\ndef _datetimefield_to_python(self, value):\n    if isinstance(value, freezegun.api.real_datetime):\n        return value\n    if isinstance(value, freezegun.api.real_date):\n        value = datetime.datetime(value.year, value.month, value.day)\n        if settings.USE_TZ:\n            # For backwards compatibility, interpret naive datetimes in\n            # local time. This won't work during DST change, but we can't\n            # do much about it, so we let the exceptions percolate up the\n            # call stack.\n            warnings.warn(\"DateTimeField received a naive datetime (%s)\"\n                          \" while time zone support is active.\" % value,\n                          RuntimeWarning)\n            default_timezone = timezone.get_default_timezone()\n            value = timezone.make_aware(value, default_timezone)\n        return value\n    return _original_datetimefield_to_python(self, value)\n\nDateField.to_python = _datefield_to_python\nDateTimeField.to_python = _datetimefield_to_python\n\nmonkeypatch_fields_for_freezegun()\n```\n. if I get a moment I'll try to create a minimal test case that demonstrates the isinstance() issue\n. ",
    "lorin": "@hexsprite Is your monkey-patch workaround available somewhere? I'm also running into a problem on Django because the to_python method fails:\nFile \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/query.py\", line 1593, in insert_query\n    return query.get_compiler(using=using).execute_sql(return_id)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/sql/compiler.py\", line 909, in execute_sql\n    for sql, params in self.as_sql():\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/sql/compiler.py\", line 872, in as_sql\n    for obj in self.query.objs\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 292, in get_db_prep_save\n    prepared=False)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 717, in get_db_prep_value\n    value = self.get_prep_value(value)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 712, in get_prep_value\n    return self.to_python(value)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 684, in to_python\n    raise exceptions.ValidationError(msg)\ndjango.core.exceptions.ValidationError: [u\"'2013-01-24 21:31:16.235381' value has an invalid date format. It must be in YYYY-MM-DD format.\"]\n. @hexsprite Is your monkey-patch workaround available somewhere? I'm also running into a problem on Django because the to_python method fails:\nFile \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/query.py\", line 1593, in insert_query\n    return query.get_compiler(using=using).execute_sql(return_id)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/sql/compiler.py\", line 909, in execute_sql\n    for sql, params in self.as_sql():\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/sql/compiler.py\", line 872, in as_sql\n    for obj in self.query.objs\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 292, in get_db_prep_save\n    prepared=False)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 717, in get_db_prep_value\n    value = self.get_prep_value(value)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 712, in get_prep_value\n    return self.to_python(value)\n  File \"/Users/lorin/.virtualenvs/myvenv/src/django/django/db/models/fields/__init__.py\", line 684, in to_python\n    raise exceptions.ValidationError(msg)\ndjango.core.exceptions.ValidationError: [u\"'2013-01-24 21:31:16.235381' value has an invalid date format. It must be in YYYY-MM-DD format.\"]\n. ",
    "PuercoPop": "I've just that If I swap the order of the import the testcase works fine, but from the pep8\nImports should be grouped in the following order:\n1. standard library imports\n2. related third party imports\n3. local application/library specific imports\n. I've just that If I swap the order of the import the testcase works fine, but from the pep8\nImports should be grouped in the following order:\n1. standard library imports\n2. related third party imports\n3. local application/library specific imports\n. ",
    "jorgearanda": "The warning in the README is gone, but this is still failing for me.\n. That code works, but this, for instance, fails:\n```\nfrom freezegun import freeze_time\nfrom datetime import datetime as dt\nfreezer = freeze_time('1980-01-01')\nfreezer.start()\nassert dt.now() == dt(1980,1,1)\n```\n...whereas importing datetime.datetime after the call to start() succeeds:\n```\nfrom freezegun import freeze_time\nfreezer = freeze_time('1980-01-01')\nfreezer.start()\nfrom datetime import datetime as dt\nassert dt.now() == dt(1980,1,1)\n```\nI have similar issues using the @freeze_time decorator.\nI'm on Mac OSX 10.10, python 2.7.1, freezegun 0.2.2.\n. Awesome, thanks!\n. That was extremely fast, and it works. Thanks a lot for fixing this!\n. The warning in the README is gone, but this is still failing for me.\n. That code works, but this, for instance, fails:\n```\nfrom freezegun import freeze_time\nfrom datetime import datetime as dt\nfreezer = freeze_time('1980-01-01')\nfreezer.start()\nassert dt.now() == dt(1980,1,1)\n```\n...whereas importing datetime.datetime after the call to start() succeeds:\n```\nfrom freezegun import freeze_time\nfreezer = freeze_time('1980-01-01')\nfreezer.start()\nfrom datetime import datetime as dt\nassert dt.now() == dt(1980,1,1)\n```\nI have similar issues using the @freeze_time decorator.\nI'm on Mac OSX 10.10, python 2.7.1, freezegun 0.2.2.\n. Awesome, thanks!\n. That was extremely fast, and it works. Thanks a lot for fixing this!\n. ",
    "merwok": "Same issue here: importing freezegun has uncool side effects.  Given the usage as decorator or context manager, this was fully unexpected to me.  Can I help fix this?\n. Hm, if someone imports datetime from datetime before the first import of freezegun (e.g. a web app that imports models on startup and the models import datetime, but freezegun is only imported after, in app.tests), it won\u2019t work anyway, will it?  IOW, recommended form of import becomes \u201cimport datetime\u201d everywhere, and then import-time monkey-patching is not necessary.  My own code would need changes as I always import classes from datetime, but I wouldn\u2019t mind doing that if it allowed me to use freezegun instead of tedious mock.patch + datetime.\n. I am not sure that we can find a satisfactory solution.  The problem in my case is that I need to control the return value of datetime.now in one module but without overriding the datetime type, as another module is for example checking types to know how to convert objects to JSON.  These constraints seem at odds with what freezegun users want (according to the complaints you described earlier).  I think I\u2019ll have to write a shortcut function like patch_datetime('module', 'wanted time') using the regular mock module.\n. Great news!  Thank you for considering our use cases.\n. Same issue here: importing freezegun has uncool side effects.  Given the usage as decorator or context manager, this was fully unexpected to me.  Can I help fix this?\n. Hm, if someone imports datetime from datetime before the first import of freezegun (e.g. a web app that imports models on startup and the models import datetime, but freezegun is only imported after, in app.tests), it won\u2019t work anyway, will it?  IOW, recommended form of import becomes \u201cimport datetime\u201d everywhere, and then import-time monkey-patching is not necessary.  My own code would need changes as I always import classes from datetime, but I wouldn\u2019t mind doing that if it allowed me to use freezegun instead of tedious mock.patch + datetime.\n. I am not sure that we can find a satisfactory solution.  The problem in my case is that I need to control the return value of datetime.now in one module but without overriding the datetime type, as another module is for example checking types to know how to convert objects to JSON.  These constraints seem at odds with what freezegun users want (according to the complaints you described earlier).  I think I\u2019ll have to write a shortcut function like patch_datetime('module', 'wanted time') using the regular mock module.\n. Great news!  Thank you for considering our use cases.\n. ",
    "akshayjshah": "It's only marginally less gross, but there could also be two different import paths:\npython\nfrom freezegun import freeze_time  # doesn't patch on import\nfrom freezegun.clobbering import freeze_time  # patches on import\n. It's only marginally less gross, but there could also be two different import paths:\npython\nfrom freezegun import freeze_time  # doesn't patch on import\nfrom freezegun.clobbering import freeze_time  # patches on import\n. ",
    "mlakewood": "Hi,\nNo problems about the delay. We've been using my patched version at work, so it certainly hasnt been holding me up at all.\nIm curious the reason to go with using ctypes to do this kind of thing.\nJust let me know when/if you would like me to have another go at the merge. Although hopefully the changes to behaviour that i'll pointed out will go into the new branch.\nCheers\nMark\n. Hi,\nNo problems about the delay. We've been using my patched version at work, so it certainly hasnt been holding me up at all.\nIm curious the reason to go with using ctypes to do this kind of thing.\nJust let me know when/if you would like me to have another go at the merge. Although hopefully the changes to behaviour that i'll pointed out will go into the new branch.\nCheers\nMark\n. ",
    "schinckel": "Okay, it looks like decorating a test method works, just not a TestCase.\nThis is because the decorator returns a function, and the django test runner looks for subclasses of unittest.TestCase.\nI am working on a patch.\n. Oh, and I'm fairly sure that the coverage detection fails. Without my test, it still report 100% coverage, even though 4 lines of code are not executed.\n. Okay, I see this has been fixed in trunk.\nSorry.\n. Yeah, I see that now. PyPI was down when I was attempting to look before.\n. Okay, it looks like decorating a test method works, just not a TestCase.\nThis is because the decorator returns a function, and the django test runner looks for subclasses of unittest.TestCase.\nI am working on a patch.\n. Oh, and I'm fairly sure that the coverage detection fails. Without my test, it still report 100% coverage, even though 4 lines of code are not executed.\n. Okay, I see this has been fixed in trunk.\nSorry.\n. Yeah, I see that now. PyPI was down when I was attempting to look before.\n. ",
    "coveralls": "\nCoverage remained the same when pulling 6767a33f1709e47129e997dc49573f188756fca2 on schinckel:master into 376a7d8a9cf6dd9dbeca7f12907146e7e2ca7e3b on spulec:master.\nView Details\n. \nCoverage remained the same when pulling 637852e69e619d1f122f943c3aa324096c191ce0 on PuercoPop:master into 376a7d8a9cf6dd9dbeca7f12907146e7e2ca7e3b on spulec:master.\nView Details\n. \nCoverage decreased (-2.34%) when pulling 6e69b481cc763e8781e8872fadd589467384baf0 on jgeewax:patch-1 into c1ab91a9f2d95f3a7b9f779fd84d83bd6affa0e7 on spulec:master.\n. \nCoverage remained the same when pulling c1c6b9b1c8ed7e44c87d91d54ca70f7414cd314d on jgeewax:patch-1 into c1ab91a9f2d95f3a7b9f779fd84d83bd6affa0e7 on spulec:master.\n. \nCoverage decreased (-1.52%) when pulling d9869544147b4b9fe717bbcd567ce2f72994f4e1 on jgeewax:patch-1 into b90027ce1b66d07c77030f2ffeb99010e19f7493 on spulec:master.\n. \nCoverage remained the same when pulling f3b0b1089acd746d4bfd98f13d34cfb84fd59832 on imankulov:fake_time into 993019226f2ea11617a7c6b36c562d3b4b91ccab on spulec:master.\n. \nCoverage remained the same when pulling 2603fc0d88c45f934e210983aa150b9e8417ab01 on mgeisler:master into 8ed7826e1262168e3d9157b16401d607f0c7a237 on spulec:master.\n. \nCoverage remained the same when pulling a780b6ba3377794b198e3c31688eac3eee65f581 on mgeisler:master into 8ed7826e1262168e3d9157b16401d607f0c7a237 on spulec:master.\n. \nCoverage remained the same when pulling f68b92fd70e737e0b637f334c8d58485f9cf1195 on EvaSDK:misc-fixes into 7c484dbec767f4d3fd86ba4962c33f96cbc8de6b on spulec:master.\n. \nCoverage remained the same when pulling 19d2216677e82a983f4e677d10fad1a8a665e64f on feffe:master into d2b4be440193ab6a262b3551f7ee5a09fb0b6ec5 on spulec:master.\n. \nCoverage remained the same when pulling f627be59881f26b7da4392e89189e09d1153b215 on ralphbean:master into d52cc2e00c4e179f7054cb8b7e031114f50379ca on spulec:master.\n. \nCoverage decreased (-0.1%) when pulling 456190f4e862cd5fbc9fe4c9fe0a7c1b814b881b on eternicode:testcases-with-setup into ca343a4abbcbf5fe72a6030923b5e540229c815d on spulec:master.\n. \nCoverage increased (+0.06%) when pulling e6c8aea79027145c07bc105b467046b96de4cc7a on Naddiseo:patch-1 into fb8f822e3c0a74c6136876ac975e654a4a715add on spulec:master.\n. \nCoverage decreased (-0.01%) when pulling 5597e3071d7d9d59152bea3cf1cb087c2d300f92 on tyewang:cleanup into 39a736870493a20a41bc1798a3828e6cb5ddf9fb on spulec:master.\n. \nCoverage increased (+0.15%) when pulling 32bf46362f3e90d8c0c71c45679f58cc27fcdfc0 on tyewang:allow_nested_freezing into 39a736870493a20a41bc1798a3828e6cb5ddf9fb on spulec:master.\n. \nCoverage increased (+0.18%) when pulling 70ce48b0365dcc4dac139eb839c9ebff9a0ecc56 on imankulov:fix_astimezone into 39a736870493a20a41bc1798a3828e6cb5ddf9fb on spulec:master.\n. \nCoverage increased (+0.03%) when pulling 7b3a9d055b8efbf0580117d07c645198f03f1df9 on dstufft:fix-pytest into aa72636480ff1656839eb8ad5b12795f7533f478 on spulec:master.\n. \nCoverage decreased (-3.26%) when pulling 2a7b35f45472c7140a7275c2a1e6657d2b974642 on indradhanush:fix_utcnow_for_timezone_aware_object into 75d73e2a8f9c184d0fa99fcadaf59a4c6d1f35f0 on spulec:master.\n. \nCoverage remained the same when pulling 17a967fa20148e387f96c4cc39ac9ad3a684f2ce on indradhanush:fix_utcnow_for_timezone_aware_object into 75d73e2a8f9c184d0fa99fcadaf59a4c6d1f35f0 on spulec:master.\n. \nCoverage increased (+0.26%) to 98.43% when pulling 76cc551711750577ecfe8a838395c429438c7b42 on more-time-funcs into 0823bcf8feaa910a79ee53c5f1d8c68b2784869f on master.\n. \nCoverage increased (+0.05%) to 96.45% when pulling 3df705306766a755a9b16d565db0ecdd9f6a8267 on joac:master into 270e3cae8216878d4c83d3d39001e37ff457649d on spulec:master.\n. \nCoverage decreased (-1.5%) to 94.721% when pulling 24500f1cbde4e65b505703fb0be33650591ec49f on xeor:master into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage increased (+0.3%) to 96.481% when pulling 24500f1cbde4e65b505703fb0be33650591ec49f on xeor:master into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage remained the same at 96.188% when pulling 0bb8d3e89a7928192b8746273d6e5b36045b5e83 on Affirm:upgrading into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage remained the same at 96.188% when pulling 666ffa333a9f9b54a19e5d4912b7c5b307c1a9f8 on Affirm:bumping into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage increased (+0.3%) to 96.481% when pulling 9c472de500859a285149b41876da10896e17948a on sebatyler:master into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage increased (+0.02%) to 96.793% when pulling 9714f9d53bdab2e06593f227b2a0b53c56f82b2c on mindojo-victor:master into a6653a3044dfc249c9741fcc20e7ee4b87c568db on spulec:master.\n. \nCoverage decreased (-0.6%) to 96.21% when pulling 60a8844c7db4c2e73906c3e566b8570ee652491e on danqing:master into a6653a3044dfc249c9741fcc20e7ee4b87c568db on spulec:master.\n. \nCoverage remained the same at 96.21% when pulling c832af1da0cbaf241ae496e84d74da85a484eb7d on vincentbernat:fix/tz-gmt-14 into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage decreased (-0.5%) to 95.726% when pulling 88b1f06d959015d916d116e7687c8e26ea4b2a57 on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage decreased (-0.5%) to 95.726% when pulling 35b2fc1c3d7db2074cbdcf079413b2a8b0a5b100 on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage decreased (-0.5%) to 95.726% when pulling 35b2fc1c3d7db2074cbdcf079413b2a8b0a5b100 on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage increased (+0.05%) to 96.264% when pulling 85b4e9cdb3cb3b053c7529b03d97066a9ffa081c on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage increased (+0.01%) to 96.221% when pulling c25a81f0c063e2f23c13860337a5bcd44fcda135 on pelme:old-style-classes into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage increased (+0.01%) to 96.221% when pulling 0caeeaf61325d2bdab96034330a7051b317091eb on pelme:old-style-classes into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage remained the same at 96.21% when pulling e9a64f38b45cfd50517db78e917e403a00e8461b on sobolevn:patch-1 into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \n\nCoverage increased (+0.6%) to 96.848% when pulling 1861d266db3fc6b94d8a075d31967209b746128d on aleksihakli:master into edc32fc67a40db3a1754a47600e2ec94ad1b3e6c on spulec:master.\n. \n\nCoverage decreased (-1.0%) to 95.879% when pulling ca57472621b34bb478dcf34398091958f4b74679 on romuald:patch-uuid into ac60f99391950ea90947a2ef0edb830309e58ad1 on spulec:master.\n. \n\nCoverage increased (+0.6%) to 96.456% when pulling b23129ebe8cfe4cb1c256eb08208ba425813377e on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage increased (+0.6%) to 96.474% when pulling 199c655fff81e6c24db102ed8086ce58ba283896 on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage increased (+0.6%) to 96.474% when pulling 199c655fff81e6c24db102ed8086ce58ba283896 on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage increased (+0.6%) to 96.474% when pulling 8d5193e42adceabcbfc9e105d76d446948c6bbb5 on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage remained the same at 95.879% when pulling a906e24e7e71659660428d87b3e420ea4a45040d on remcohaszing:fix-ignore into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.01%) to 95.89% when pulling f9c50f7b75c351e0a9b02f54124d4ba3c8c015c3 on remcohaszing:gax into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling 2396f50ded4e15fee6ec7b1bcef1441fcef905c8 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage decreased (-0.2%) to 95.687% when pulling aa617fb9ad35e5502c7759769c05ebd6f66ea265 on sblondon:master into 8049c14b1d10e1a2ed3130e7be4aee0c9520f510 on spulec:master.\n. \n\nCoverage decreased (-0.2%) to 95.687% when pulling aa617fb9ad35e5502c7759769c05ebd6f66ea265 on sblondon:master into 8049c14b1d10e1a2ed3130e7be4aee0c9520f510 on spulec:master.\n. \n\nCoverage increased (+0.03%) to 95.968% when pulling 89fcec942fac9727204b97a036092ca6cd53931b on CrazyPython:feature/seconds-for-tick into 8049c14b1d10e1a2ed3130e7be4aee0c9520f510 on spulec:master.\n. \n\nCoverage increased (+0.02%) to 95.989% when pulling fab73c311249aea94b71ac577fea52f4f4237bdb on awbacker:uuid1-last-timestamp-patch into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.02%) to 95.989% when pulling a54c4ff854661a9ee827cd8945bb888748a31371 on awbacker:uuid1-last-timestamp-patch into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.02%) to 95.989% when pulling 292b6109c05e7cc75a70d384b49badb691c144d9 on awbacker:uuid1-last-timestamp-patch into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.04%) to 96.011% when pulling bd3a78f5f0a37a45f310fc4a41e3c32a45978b33 on Syeberman:timedelta_tz_offset into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.2%) to 96.164% when pulling 2c1a7243ed19b9b9a036dbafaa9095d221fa2a48 on qntln:feature/time-monotonic into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage decreased (-0.02%) to 95.949% when pulling d165c164defd8931e013bbd95f0c8705ec7cb38b on qntln:feature/time-monotonic into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage decreased (-0.8%) to 95.165% when pulling 3b48ac0efdd13fbeeacf386d64f2683c6166dfbb on sheepsy90:master into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage decreased (-0.2%) to 95.733% when pulling 503f6e49c6d0f8cd775f1b73d46139cde232c248 on terrycain:master into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \nCoverage remained the same when pulling 6767a33f1709e47129e997dc49573f188756fca2 on schinckel:master into 376a7d8a9cf6dd9dbeca7f12907146e7e2ca7e3b on spulec:master.\nView Details\n. \nCoverage remained the same when pulling 637852e69e619d1f122f943c3aa324096c191ce0 on PuercoPop:master into 376a7d8a9cf6dd9dbeca7f12907146e7e2ca7e3b on spulec:master.\nView Details\n. \nCoverage decreased (-2.34%) when pulling 6e69b481cc763e8781e8872fadd589467384baf0 on jgeewax:patch-1 into c1ab91a9f2d95f3a7b9f779fd84d83bd6affa0e7 on spulec:master.\n. \nCoverage remained the same when pulling c1c6b9b1c8ed7e44c87d91d54ca70f7414cd314d on jgeewax:patch-1 into c1ab91a9f2d95f3a7b9f779fd84d83bd6affa0e7 on spulec:master.\n. \nCoverage decreased (-1.52%) when pulling d9869544147b4b9fe717bbcd567ce2f72994f4e1 on jgeewax:patch-1 into b90027ce1b66d07c77030f2ffeb99010e19f7493 on spulec:master.\n. \nCoverage remained the same when pulling f3b0b1089acd746d4bfd98f13d34cfb84fd59832 on imankulov:fake_time into 993019226f2ea11617a7c6b36c562d3b4b91ccab on spulec:master.\n. \nCoverage remained the same when pulling 2603fc0d88c45f934e210983aa150b9e8417ab01 on mgeisler:master into 8ed7826e1262168e3d9157b16401d607f0c7a237 on spulec:master.\n. \nCoverage remained the same when pulling a780b6ba3377794b198e3c31688eac3eee65f581 on mgeisler:master into 8ed7826e1262168e3d9157b16401d607f0c7a237 on spulec:master.\n. \nCoverage remained the same when pulling f68b92fd70e737e0b637f334c8d58485f9cf1195 on EvaSDK:misc-fixes into 7c484dbec767f4d3fd86ba4962c33f96cbc8de6b on spulec:master.\n. \nCoverage remained the same when pulling 19d2216677e82a983f4e677d10fad1a8a665e64f on feffe:master into d2b4be440193ab6a262b3551f7ee5a09fb0b6ec5 on spulec:master.\n. \nCoverage remained the same when pulling f627be59881f26b7da4392e89189e09d1153b215 on ralphbean:master into d52cc2e00c4e179f7054cb8b7e031114f50379ca on spulec:master.\n. \nCoverage decreased (-0.1%) when pulling 456190f4e862cd5fbc9fe4c9fe0a7c1b814b881b on eternicode:testcases-with-setup into ca343a4abbcbf5fe72a6030923b5e540229c815d on spulec:master.\n. \nCoverage increased (+0.06%) when pulling e6c8aea79027145c07bc105b467046b96de4cc7a on Naddiseo:patch-1 into fb8f822e3c0a74c6136876ac975e654a4a715add on spulec:master.\n. \nCoverage decreased (-0.01%) when pulling 5597e3071d7d9d59152bea3cf1cb087c2d300f92 on tyewang:cleanup into 39a736870493a20a41bc1798a3828e6cb5ddf9fb on spulec:master.\n. \nCoverage increased (+0.15%) when pulling 32bf46362f3e90d8c0c71c45679f58cc27fcdfc0 on tyewang:allow_nested_freezing into 39a736870493a20a41bc1798a3828e6cb5ddf9fb on spulec:master.\n. \nCoverage increased (+0.18%) when pulling 70ce48b0365dcc4dac139eb839c9ebff9a0ecc56 on imankulov:fix_astimezone into 39a736870493a20a41bc1798a3828e6cb5ddf9fb on spulec:master.\n. \nCoverage increased (+0.03%) when pulling 7b3a9d055b8efbf0580117d07c645198f03f1df9 on dstufft:fix-pytest into aa72636480ff1656839eb8ad5b12795f7533f478 on spulec:master.\n. \nCoverage decreased (-3.26%) when pulling 2a7b35f45472c7140a7275c2a1e6657d2b974642 on indradhanush:fix_utcnow_for_timezone_aware_object into 75d73e2a8f9c184d0fa99fcadaf59a4c6d1f35f0 on spulec:master.\n. \nCoverage remained the same when pulling 17a967fa20148e387f96c4cc39ac9ad3a684f2ce on indradhanush:fix_utcnow_for_timezone_aware_object into 75d73e2a8f9c184d0fa99fcadaf59a4c6d1f35f0 on spulec:master.\n. \nCoverage increased (+0.26%) to 98.43% when pulling 76cc551711750577ecfe8a838395c429438c7b42 on more-time-funcs into 0823bcf8feaa910a79ee53c5f1d8c68b2784869f on master.\n. \nCoverage increased (+0.05%) to 96.45% when pulling 3df705306766a755a9b16d565db0ecdd9f6a8267 on joac:master into 270e3cae8216878d4c83d3d39001e37ff457649d on spulec:master.\n. \nCoverage decreased (-1.5%) to 94.721% when pulling 24500f1cbde4e65b505703fb0be33650591ec49f on xeor:master into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage increased (+0.3%) to 96.481% when pulling 24500f1cbde4e65b505703fb0be33650591ec49f on xeor:master into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage remained the same at 96.188% when pulling 0bb8d3e89a7928192b8746273d6e5b36045b5e83 on Affirm:upgrading into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage remained the same at 96.188% when pulling 666ffa333a9f9b54a19e5d4912b7c5b307c1a9f8 on Affirm:bumping into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage increased (+0.3%) to 96.481% when pulling 9c472de500859a285149b41876da10896e17948a on sebatyler:master into 69a54db04f59166aeeb5ec6e72335e505404acd2 on spulec:master.\n. \nCoverage increased (+0.02%) to 96.793% when pulling 9714f9d53bdab2e06593f227b2a0b53c56f82b2c on mindojo-victor:master into a6653a3044dfc249c9741fcc20e7ee4b87c568db on spulec:master.\n. \nCoverage decreased (-0.6%) to 96.21% when pulling 60a8844c7db4c2e73906c3e566b8570ee652491e on danqing:master into a6653a3044dfc249c9741fcc20e7ee4b87c568db on spulec:master.\n. \nCoverage remained the same at 96.21% when pulling c832af1da0cbaf241ae496e84d74da85a484eb7d on vincentbernat:fix/tz-gmt-14 into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage decreased (-0.5%) to 95.726% when pulling 88b1f06d959015d916d116e7687c8e26ea4b2a57 on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage decreased (-0.5%) to 95.726% when pulling 35b2fc1c3d7db2074cbdcf079413b2a8b0a5b100 on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage decreased (-0.5%) to 95.726% when pulling 35b2fc1c3d7db2074cbdcf079413b2a8b0a5b100 on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage increased (+0.05%) to 96.264% when pulling 85b4e9cdb3cb3b053c7529b03d97066a9ffa081c on pelme:ignore-deprecation-warnings into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage increased (+0.01%) to 96.221% when pulling c25a81f0c063e2f23c13860337a5bcd44fcda135 on pelme:old-style-classes into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage increased (+0.01%) to 96.221% when pulling 0caeeaf61325d2bdab96034330a7051b317091eb on pelme:old-style-classes into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \nCoverage remained the same at 96.21% when pulling e9a64f38b45cfd50517db78e917e403a00e8461b on sobolevn:patch-1 into 11d9ead16a55fd31fb545a663a2b758049b4b40d on spulec:master.\n. \n\nCoverage increased (+0.6%) to 96.848% when pulling 1861d266db3fc6b94d8a075d31967209b746128d on aleksihakli:master into edc32fc67a40db3a1754a47600e2ec94ad1b3e6c on spulec:master.\n. \n\nCoverage decreased (-1.0%) to 95.879% when pulling ca57472621b34bb478dcf34398091958f4b74679 on romuald:patch-uuid into ac60f99391950ea90947a2ef0edb830309e58ad1 on spulec:master.\n. \n\nCoverage increased (+0.6%) to 96.456% when pulling b23129ebe8cfe4cb1c256eb08208ba425813377e on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage increased (+0.6%) to 96.474% when pulling 199c655fff81e6c24db102ed8086ce58ba283896 on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage increased (+0.6%) to 96.474% when pulling 199c655fff81e6c24db102ed8086ce58ba283896 on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage increased (+0.6%) to 96.474% when pulling 8d5193e42adceabcbfc9e105d76d446948c6bbb5 on feature/speed-up-module-search into 88f69903b3ac66b3894be00ef89d597e34f88f5e on master.\n. \n\nCoverage remained the same at 95.879% when pulling a906e24e7e71659660428d87b3e420ea4a45040d on remcohaszing:fix-ignore into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.01%) to 95.89% when pulling f9c50f7b75c351e0a9b02f54124d4ba3c8c015c3 on remcohaszing:gax into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling b1e3e49e21c5452103be0bce176ee3f4468ca678 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage increased (+0.06%) to 95.935% when pulling 2396f50ded4e15fee6ec7b1bcef1441fcef905c8 on azmeuk:lambdas into 894fe1f9b13ad4b3fff942a5cbc2166640e712e4 on spulec:master.\n. \n\nCoverage decreased (-0.2%) to 95.687% when pulling aa617fb9ad35e5502c7759769c05ebd6f66ea265 on sblondon:master into 8049c14b1d10e1a2ed3130e7be4aee0c9520f510 on spulec:master.\n. \n\nCoverage decreased (-0.2%) to 95.687% when pulling aa617fb9ad35e5502c7759769c05ebd6f66ea265 on sblondon:master into 8049c14b1d10e1a2ed3130e7be4aee0c9520f510 on spulec:master.\n. \n\nCoverage increased (+0.03%) to 95.968% when pulling 89fcec942fac9727204b97a036092ca6cd53931b on CrazyPython:feature/seconds-for-tick into 8049c14b1d10e1a2ed3130e7be4aee0c9520f510 on spulec:master.\n. \n\nCoverage increased (+0.02%) to 95.989% when pulling fab73c311249aea94b71ac577fea52f4f4237bdb on awbacker:uuid1-last-timestamp-patch into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.02%) to 95.989% when pulling a54c4ff854661a9ee827cd8945bb888748a31371 on awbacker:uuid1-last-timestamp-patch into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.02%) to 95.989% when pulling 292b6109c05e7cc75a70d384b49badb691c144d9 on awbacker:uuid1-last-timestamp-patch into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.04%) to 96.011% when pulling bd3a78f5f0a37a45f310fc4a41e3c32a45978b33 on Syeberman:timedelta_tz_offset into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage increased (+0.2%) to 96.164% when pulling 2c1a7243ed19b9b9a036dbafaa9095d221fa2a48 on qntln:feature/time-monotonic into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage decreased (-0.02%) to 95.949% when pulling d165c164defd8931e013bbd95f0c8705ec7cb38b on qntln:feature/time-monotonic into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage decreased (-0.8%) to 95.165% when pulling 3b48ac0efdd13fbeeacf386d64f2683c6166dfbb on sheepsy90:master into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. \n\nCoverage decreased (-0.2%) to 95.733% when pulling 503f6e49c6d0f8cd775f1b73d46139cde232c248 on terrycain:master into 385a78d004b0566c6cbf98c304fb89a57bad0005 on spulec:master.\n. ",
    "fredrik": "I've noticed that datetime objects created by freezegun can't be pickled:\npickle.PicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime.\nIs that related to the isinstance issue described here? Seems likely.\n. I've noticed that datetime objects created by freezegun can't be pickled:\npickle.PicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime.\nIs that related to the isinstance issue described here? Seems likely.\n. ",
    "pnegahdar": "Any updates on this issue? The core should really return an instance of datetime...\n. Any updates on this issue? The core should really return an instance of datetime...\n. ",
    "reason-systems": "Experienced the same kind of issue with GAE. The ctypes branch indeed solves the problem without requiring any monkey-patching.\n. Experienced the same kind of issue with GAE. The ctypes branch indeed solves the problem without requiring any monkey-patching.\n. ",
    "gsakkis": "Also stumbled on this with GAE. Any chance that the ctypes branch is merged to master? \n. This is weird.. when I tried the latest version from pypi a week ago it was behaving like a no-op; it was using the current datetime instead of the faked one. Now I tried it again and it works but there's a different problem: it's much slower than the ctypes version. For the same single test:\n- after pip install git+https://github.com/spulec/freezegun.git@ctypes\nreal    0m0.982s\n  user    0m0.826s\n  sys 0m0.156s\n- after pip install freezegun==0.3.2\nreal    0m17.678s\n  user    0m16.077s\n  sys 0m1.591s\nSame observation with other tests too.\n. After digging into it with the profiler, I isolated it to the import of six.moves:\n```\n$ python -m timeit \"from freezegun import freeze_time; freeze_time('2012-01-14').start()\"\n1000 loops, best of 3: 1.85 msec per loop\n$ python -m timeit \"import six; from freezegun import freeze_time; freeze_time('2012-01-14').start()\"\n1000 loops, best of 3: 1.93 msec per loop\n$ python -m timeit \"import six.moves; from freezegun import freeze_time; freeze_time('2012-01-14').start()\"\n10 loops, best of 3: 301 msec per loop\n``\n. Also stumbled on this with GAE. Any chance that the ctypes branch is merged to master? \n. This is weird.. when I tried the latest version from pypi a week ago it was behaving like a no-op; it was using the current datetime instead of the faked one. Now I tried it again and it works but there's a different problem: it's much slower than the ctypes version. For the same single test:\n- afterpip install git+https://github.com/spulec/freezegun.git@ctypes`\nreal    0m0.982s\n  user    0m0.826s\n  sys 0m0.156s\n- after pip install freezegun==0.3.2\nreal    0m17.678s\n  user    0m16.077s\n  sys 0m1.591s\nSame observation with other tests too.\n. After digging into it with the profiler, I isolated it to the import of six.moves:\n```\n$ python -m timeit \"from freezegun import freeze_time; freeze_time('2012-01-14').start()\"\n1000 loops, best of 3: 1.85 msec per loop\n$ python -m timeit \"import six; from freezegun import freeze_time; freeze_time('2012-01-14').start()\"\n1000 loops, best of 3: 1.93 msec per loop\n$ python -m timeit \"import six.moves; from freezegun import freeze_time; freeze_time('2012-01-14').start()\"\n10 loops, best of 3: 301 msec per loop\n```\n. ",
    "imankulov": "Just a note. Travis CI revealed some timezone-related corner cases, which I fixed now. Then I re-committed my changes with git commit --amend and extended the codebase with a bunch of tests.\n. Thank you!\n. Just a note. Travis CI revealed some timezone-related corner cases, which I fixed now. Then I re-committed my changes with git commit --amend and extended the codebase with a bunch of tests.\n. Thank you!\n. ",
    "mgeisler": "Thanks! I saw that you ran tests on Python 2.6 to 3.3 and double-checked when the with keyword was introdued (Python 2.6). I didn't think about 2.6 lacking SkipTest and the exception syntax in 3.3.\nI'll update the pull request with fixes for that!\n. Please let me know if there is anything missing here.\n. Thanks! I saw that you ran tests on Python 2.6 to 3.3 and double-checked when the with keyword was introdued (Python 2.6). I didn't think about 2.6 lacking SkipTest and the exception syntax in 3.3.\nI'll update the pull request with fixes for that!\n. Please let me know if there is anything missing here.\n. ",
    "lukesneeringer": "Thanks! :)\n. Thanks! :)\n. ",
    "apmarathe": "Sorry for the strange formatting of the DateMockerTestCase class. (I didn't do any formatting myself.)\n. Also looks good for us. (I tried it on Django 1.6 by the way.)\nWe would also appreciate a release to PyPI so that we can install the package directly rather than using the 'ctypes' branch.\nThanks!\n. Sorry for the strange formatting of the DateMockerTestCase class. (I didn't do any formatting myself.)\n. Also looks good for us. (I tried it on Django 1.6 by the way.)\nWe would also appreciate a release to PyPI so that we can install the package directly rather than using the 'ctypes' branch.\nThanks!\n. ",
    "qcaron": "Hi! This error still exists with Django 1.6.5. Any update??\n. It's sad but I simply ended up removing the app from my project. Instead I have added date attributes to objects' methods to specify test values when needed. It's not that bad finally because I also can replay failed batches anytime.\nHope you will be able to fix this pickle error soon because that is only problem with your package Steve :)\n. Hi! This error still exists with Django 1.6.5. Any update??\n. It's sad but I simply ended up removing the app from my project. Instead I have added date attributes to objects' methods to specify test values when needed. It's not that bad finally because I also can replay failed batches anytime.\nHope you will be able to fix this pickle error soon because that is only problem with your package Steve :)\n. ",
    "lucaswiman": "I'm guessing the issue is caused by the auto_now_add and auto_now keyword arguments passed to django DateField and DateTimeField.  Since django imports the datetime.datetime class directly , if freezegun is imported after django.utils.timezone, then the reference to the original datetime is maintained. Django then proceeds to instantiate ordinary datetime/date objects, and pickle fails above.\nI think you could fix this by either patching it directly for django (ie monkeypatch django.utils.timezone.datetime), or by monkeypatching everything in sys.modules that has datetime.datetime in its __dict__.\n\nIt's not immediately clear to me if Python is being overly protective by checking if klass is not object as opposed to if klass != obj. If it was checking the later, we could fix this by overwriting FakeDatetime.__eq__.\n\nMoot point, but I think you'd actually need to override it on the metaclass for class equality to work, eg:\n``` python\n\n\n\nfrom datetime import datetime\nclass MetaFoo(type):\n...     def eq(self, other):\n...         return True\n... \nclass Foo(object):\n...     metaclass = MetaFoo\n...     def eq(self, other):\n...         return False\n... \ndatetime == Foo\nTrue\nFoo == datetime\nTrue\n``\n. I'm guessing the issue is caused by theauto_now_addandauto_nowkeyword arguments passed to djangoDateFieldandDateTimeField.  Since django imports thedatetime.datetimeclass directly , if freezegun is imported _after_django.utils.timezone, then the reference to the originaldatetime` is maintained. Django then proceeds to instantiate ordinary datetime/date objects, and pickle fails above.\n\n\n\nI think you could fix this by either patching it directly for django (ie monkeypatch django.utils.timezone.datetime), or by monkeypatching everything in sys.modules that has datetime.datetime in its __dict__.\n\nIt's not immediately clear to me if Python is being overly protective by checking if klass is not object as opposed to if klass != obj. If it was checking the later, we could fix this by overwriting FakeDatetime.__eq__.\n\nMoot point, but I think you'd actually need to override it on the metaclass for class equality to work, eg:\n``` python\n\n\n\nfrom datetime import datetime\nclass MetaFoo(type):\n...     def eq(self, other):\n...         return True\n... \nclass Foo(object):\n...     metaclass = MetaFoo\n...     def eq(self, other):\n...         return False\n... \ndatetime == Foo\nTrue\nFoo == datetime\nTrue\n```\n. \n\n\n",
    "Geekfish": "I think I have replicated this as well:\n``` python\nmiddleware.py\nimport datetime\nclass UserActivity(object):\n    def process_request(self, request):\n        if request.user.is_authenticated():\n            request.session['last-activity'] = datetime.datetime.utcnow()\ntest.py\nclass MyTestCase(BaseTestCase):\n    def test_some_stuff():\n        with freeze_time(frozen_date):\n            self.authenticate_user()\n            self.client.post(reverse('some.view'))\n```\nResults in:\n...\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/core/handlers/base.py\", line 201, in get_response\n    response = middleware_method(request, response)\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/middleware.py\", line 38, in process_response\n    request.session.save()\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/backends/db.py\", line 57, in save\n    session_data=self.encode(self._get_session(no_load=must_create)),\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/backends/base.py\", line 87, in encode\n    serialized = self.serializer().dumps(session_dict)\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/serializers.py\", line 14, in dumps\n    return pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)\nPicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime\n. I think I have replicated this as well:\n``` python\nmiddleware.py\nimport datetime\nclass UserActivity(object):\n    def process_request(self, request):\n        if request.user.is_authenticated():\n            request.session['last-activity'] = datetime.datetime.utcnow()\ntest.py\nclass MyTestCase(BaseTestCase):\n    def test_some_stuff():\n        with freeze_time(frozen_date):\n            self.authenticate_user()\n            self.client.post(reverse('some.view'))\n```\nResults in:\n...\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/core/handlers/base.py\", line 201, in get_response\n    response = middleware_method(request, response)\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/middleware.py\", line 38, in process_response\n    request.session.save()\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/backends/db.py\", line 57, in save\n    session_data=self.encode(self._get_session(no_load=must_create)),\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/backends/base.py\", line 87, in encode\n    serialized = self.serializer().dumps(session_dict)\n  File \"/Users/geekfish/.virtualenvs/my_project/lib/python2.7/site-packages/django/contrib/sessions/serializers.py\", line 14, in dumps\n    return pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)\nPicklingError: Can't pickle <type 'datetime.datetime'>: it's not the same object as datetime.datetime\n. ",
    "neithere": "I believe the problem is on six's side, but since it's a well-known library which is widely used (to my knowledge) and is very likely to be installed along with freezegun (which is enough to break things), I think it's freezegun that should be adapted (at least until  six becomes smarter).\nAlso I'm not sure if there should be any additional changes to the patching phase but the workaround works for me as is.\n. I believe the problem is on six's side, but since it's a well-known library which is widely used (to my knowledge) and is very likely to be installed along with freezegun (which is enough to break things), I think it's freezegun that should be adapted (at least until  six becomes smarter).\nAlso I'm not sure if there should be any additional changes to the patching phase but the workaround works for me as is.\n. ",
    "Turbo87": ":+1: just discovered this gem of a library, but when I ran it with py3 on Travis it failed. would be great to have this problem patched away.\n. @pokidovea did you develop a solution yet?. :+1: just discovered this gem of a library, but when I ran it with py3 on Travis it failed. would be great to have this problem patched away.\n. @pokidovea did you develop a solution yet?. ",
    "ralphbean": "Thanks for merging, @spulec.\nCould you possibly put out a new release?  Our travis builds are failing https://travis-ci.org/fedora-infra/datagrepper/jobs/19756029\n. Rad.  Thank you :)\n. Thanks for merging, @spulec.\nCould you possibly put out a new release?  Our travis builds are failing https://travis-ci.org/fedora-infra/datagrepper/jobs/19756029\n. Rad.  Thank you :)\n. ",
    "MatMoore": "On second thought it seems using __version__ directly is probably not a good idea as it requires all the dependencies to be installed already :rooster: \nThe __version__ should probably still be updated but feel free to close this.\n. On second thought it seems using __version__ directly is probably not a good idea as it requires all the dependencies to be installed already :rooster: \nThe __version__ should probably still be updated but feel free to close this.\n. ",
    "Kwpolska": "I\u2019m afraid it\u2019s not fixed\u2026 \u2014 so maybe it\u2019s something else.  I\u2019d suggest replacing the view with a list \u2014 this is why Python 2 works and has always worked.\n. This issue seems to be caused by py in 1.5.x versons, as rolling back to 1.4.34 works. I reported this as pytest-dev/py#169.. This has been fixed in py 1.5.2, at least for me.. I\u2019m afraid it\u2019s not fixed\u2026 \u2014 so maybe it\u2019s something else.  I\u2019d suggest replacing the view with a list \u2014 this is why Python 2 works and has always worked.\n. This issue seems to be caused by py in 1.5.x versons, as rolling back to 1.4.34 works. I reported this as pytest-dev/py#169.. This has been fixed in py 1.5.2, at least for me.. ",
    "izquierdo": "Sorry, I was looking at https://labix.org/python-dateutil, where it says\nPorted to Python 3, by Brian Jones. If you need dateutil for Python 2.X, please continue using the 1.X series.\nBut the info in your link is more recent, so it's fine to not merge the PR.\nI noticed this because of a test that broke in my code with the upgrade of dateutil, but I'll consider it a problem in my code then.\nThanks.\n. Sorry, I was looking at https://labix.org/python-dateutil, where it says\nPorted to Python 3, by Brian Jones. If you need dateutil for Python 2.X, please continue using the 1.X series.\nBut the info in your link is more recent, so it's fine to not merge the PR.\nI noticed this because of a test that broke in my code with the upgrade of dateutil, but I'll consider it a problem in my code then.\nThanks.\n. ",
    "ashchristopher": "@spulec I verified that this seems to be fixed in master.\nThanks.\n. @spulec are you expecting to cut a new official release soon?\n. @spulec I verified that this seems to be fixed in master.\nThanks.\n. @spulec are you expecting to cut a new official release soon?\n. ",
    "FedericoCeratto": "Thank you!\n. Thank you!\n. ",
    "adamchainz": "I'd like an option for time to generally keep ticking after freezing, so that two now() calls surrounding a long computation can get the actual difference rather than 0 seconds. I'm not using freezegun for tests though so much as re-running a computation as if it were a different day.\n. You don't need to put pytz in the requirements, it can be optional (try: import; except ImportError: pytz = None pattern) and then only used if timezone is passed.\n. Came across some problems in my project with subclasses whose setUpClass called super(), have fixed for this by not creating a subclass, added super() tests, and re-squashed the commits.\n. :sparkle: :rainbow: :horse:\n. This is great, I've wanted this since it stops the weird world where every instruction executes at the same time. However tick should affect everything, not just datetime.datetime.now()... so time.time(), datetime.date.today() etc. too.\n. It's okay I'll split my review feedback into a PR\n. Basically some stuff I commented on #108. I was mistaken about unittest skipUnless since ofc Python 2.6 doesn't include it :scream_cat: \n. Thanks, looks like I did a git fail and added and pushed some prototype changes in my rebase. Thanks for telling me though - Travis doesn't email contributors on PR failure. Fixed now!\n. I'd like an option for time to generally keep ticking after freezing, so that two now() calls surrounding a long computation can get the actual difference rather than 0 seconds. I'm not using freezegun for tests though so much as re-running a computation as if it were a different day.\n. You don't need to put pytz in the requirements, it can be optional (try: import; except ImportError: pytz = None pattern) and then only used if timezone is passed.\n. Came across some problems in my project with subclasses whose setUpClass called super(), have fixed for this by not creating a subclass, added super() tests, and re-squashed the commits.\n. :sparkle: :rainbow: :horse:\n. This is great, I've wanted this since it stops the weird world where every instruction executes at the same time. However tick should affect everything, not just datetime.datetime.now()... so time.time(), datetime.date.today() etc. too.\n. It's okay I'll split my review feedback into a PR\n. Basically some stuff I commented on #108. I was mistaken about unittest skipUnless since ofc Python 2.6 doesn't include it :scream_cat: \n. Thanks, looks like I did a git fail and added and pushed some prototype changes in my rebase. Thanks for telling me though - Travis doesn't email contributors on PR failure. Fixed now!\n. ",
    "benkuhn": "I would be interested in implementing a mock for sleep--we have some integration tests that I'd love to be able to run sleep during rather than routing our code around the sleep calls when under test.\nJust want to check how to do this before I dive in--the right thing to do here is to create a FakeSleep class analogous to FakeStrfTime, have its call method move forward the time_to_freeze variable of the factory, and (if the parameter is supplied) patch it in everywhere the FakeStrfTime class is patched in?\n. I would be interested in implementing a mock for sleep--we have some integration tests that I'd love to be able to run sleep during rather than routing our code around the sleep calls when under test.\nJust want to check how to do this before I dive in--the right thing to do here is to create a FakeSleep class analogous to FakeStrfTime, have its call method move forward the time_to_freeze variable of the factory, and (if the parameter is supplied) patch it in everywhere the FakeStrfTime class is patched in?\n. ",
    "jdunck": "I would argue for a back-channel way to advance time.  (Maybe also time.sleep should advance, but there should be a test-specific way to advance time as well.)  As an example, freezegun.warp(seconds).\n@spulec I started a local branch to support time.sleep/freezegun.warp, but immediately ran into the fact that FakeTime is constructed with an actual time_to_freeze rather than a reference to the possibly-nested times_to_freeze.  What do you think about moving that FakeDateTime.times_to_freeze out to a thread-local stack that start/stop push and pop from?\n. I would argue for a back-channel way to advance time.  (Maybe also time.sleep should advance, but there should be a test-specific way to advance time as well.)  As an example, freezegun.warp(seconds).\n@spulec I started a local branch to support time.sleep/freezegun.warp, but immediately ran into the fact that FakeTime is constructed with an actual time_to_freeze rather than a reference to the possibly-nested times_to_freeze.  What do you think about moving that FakeDateTime.times_to_freeze out to a thread-local stack that start/stop push and pop from?\n. ",
    "arnuschky": "A freezegun.warp(seconds) would be awesome! :+1: \n. What I currently use as an intermediary (ugly) hack:\n```\n        now = datetime.now()\n        # do something\n    now += timedelta(seconds=0.3)\n    with freeze_time(now):\n         # do something 0.3 secs later\n\n    now += timedelta(seconds=0.4)\n    with freeze_time(now):\n         # do something 0.4 secs later again\n\n``\n. Afreezegun.warp(seconds)` would be awesome! :+1: \n. What I currently use as an intermediary (ugly) hack:\n```\n        now = datetime.now()\n        # do something\n    now += timedelta(seconds=0.3)\n    with freeze_time(now):\n         # do something 0.3 secs later\n\n    now += timedelta(seconds=0.4)\n    with freeze_time(now):\n         # do something 0.4 secs later again\n\n```\n. ",
    "vartec": "I've worked around the issue by doing this:\n@mock.patch('time.sleep')\n    def test_timeout(self, mock_sleep):\n        with freeze_time() as frozen_time:\n            mock_sleep.side_effect = lambda seconds: frozen_time.tick(timedelta(seconds=seconds))\n            .... I've worked around the issue by doing this:\n@mock.patch('time.sleep')\n    def test_timeout(self, mock_sleep):\n        with freeze_time() as frozen_time:\n            mock_sleep.side_effect = lambda seconds: frozen_time.tick(timedelta(seconds=seconds))\n            .... ",
    "andresriancho": "PS: Do I get extra points for using two projects from @spulec in the same bug report? ;)\n. Keep me posted, some of my unittests are disabled until this is fixed :)\n. The workaround fixed! :+1: \nAgreed that the Z should be auto-stripped, maybe raising some warning?\n. Gracias!\n. PS: Do I get extra points for using two projects from @spulec in the same bug report? ;)\n. Keep me posted, some of my unittests are disabled until this is fixed :)\n. The workaround fixed! :+1: \nAgreed that the Z should be auto-stripped, maybe raising some warning?\n. Gracias!\n. ",
    "eternicode": "datetime.datetime.utcnow always returns a naive datetime object, so FakeDatetime.utcnow should probably convert a tz-aware cls.time_to_freeze to UTC then strip the tzinfo from it before returning it?\nFakeDatetime.now also has the same problem of returning tz-aware datetimes when no tz arg is provided but the freeze time indicates a tz.\n. Works for me! :+1: \n. datetime.datetime.utcnow always returns a naive datetime object, so FakeDatetime.utcnow should probably convert a tz-aware cls.time_to_freeze to UTC then strip the tzinfo from it before returning it?\nFakeDatetime.now also has the same problem of returning tz-aware datetimes when no tz arg is provided but the freeze time indicates a tz.\n. Works for me! :+1: \n. ",
    "nfelger": "Hm, looks like this fixes the first issue (discovering the test in the decorated class), but not the second one (mixing freezegun function decoration with py.test fixture dependency injection).\n. Is there any update on this?\n. Thanks so much for putting in the time to fix this! I just tried applying this to our test suites, and it works perfectly and makes the tests so much easier to read. :smiley:\n. Hm, looks like this fixes the first issue (discovering the test in the decorated class), but not the second one (mixing freezegun function decoration with py.test fixture dependency injection).\n. Is there any update on this?\n. Thanks so much for putting in the time to fix this! I just tried applying this to our test suites, and it works perfectly and makes the tests so much easier to read. :smiley:\n. ",
    "pelme": "pytest looks at the the __wrapped__ attribute to be able to inspect the original function.\nPython 3.2 functools.wraps sets __wrapped__. mock uses the same mechanism to be compatible with pytest and just sets __wrapped__ for Python <3.2:\nhttps://code.google.com/p/mock/source/browse/mock.py#79\n. Thank you very much for the quick response+merge and for creating and maintaining freezegun!\nI have hundreds of tests which used a home grown, old, buggy, hacky and very scary similar implementation to freeze_time. My own version also implemented the decorator/context manager interface, everything just worked when I replaced it with freezegun. Amazing!\n. Awesome, I hope I can buy you a beer sometime! :)\n. This PR originally had a broken fix, it is now amended and should be correct!\n. pytest looks at the the __wrapped__ attribute to be able to inspect the original function.\nPython 3.2 functools.wraps sets __wrapped__. mock uses the same mechanism to be compatible with pytest and just sets __wrapped__ for Python <3.2:\nhttps://code.google.com/p/mock/source/browse/mock.py#79\n. Thank you very much for the quick response+merge and for creating and maintaining freezegun!\nI have hundreds of tests which used a home grown, old, buggy, hacky and very scary similar implementation to freeze_time. My own version also implemented the decorator/context manager interface, everything just worked when I replaced it with freezegun. Amazing!\n. Awesome, I hope I can buy you a beer sometime! :)\n. This PR originally had a broken fix, it is now amended and should be correct!\n. ",
    "tyewang": "Glad to help :)\n. Glad to help :)\n. ",
    "indradhanush": "@spulec I just sent you a PR. It was already implemented. Just seemed to be wrongly done.\n. pip install -r requirements.txt seems to be failing for Python 3.3\n. Hi @spulec, would you please review this?\n. Take a look at the following snippet:\n```\nIn [34]: import pytz\nIn [35]: from datetime import datetime\nIn [36]: from freezegun import freeze_time\nIn [37]: ist = pytz.timezone('Asia/Kolkata')\nIn [38]: d = datetime(2014, 10, 8, 7)\nIn [39]: local = ist.localize(d)\nIn [40]: with freeze_time(local):\n   ....:     print datetime.utcnow()\n   ....:\n2014-10-08 12:30:00\nIn [41]: local\nOut[41]: datetime.datetime(2014, 10, 8, 7, 0, tzinfo=)\n```\nThe UTC offset of IST is +5:30. So local here means 10th October, 2014, 7 AM. The same time in UTC should be 10th October, 2014, 1:30 AM, but it comes up as 12:30 PM the same day. The offset calculation was done wrong.\n. Done. :)\n. @spulec I just sent you a PR. It was already implemented. Just seemed to be wrongly done.\n. pip install -r requirements.txt seems to be failing for Python 3.3\n. Hi @spulec, would you please review this?\n. Take a look at the following snippet:\n```\nIn [34]: import pytz\nIn [35]: from datetime import datetime\nIn [36]: from freezegun import freeze_time\nIn [37]: ist = pytz.timezone('Asia/Kolkata')\nIn [38]: d = datetime(2014, 10, 8, 7)\nIn [39]: local = ist.localize(d)\nIn [40]: with freeze_time(local):\n   ....:     print datetime.utcnow()\n   ....:\n2014-10-08 12:30:00\nIn [41]: local\nOut[41]: datetime.datetime(2014, 10, 8, 7, 0, tzinfo=)\n```\nThe UTC offset of IST is +5:30. So local here means 10th October, 2014, 7 AM. The same time in UTC should be 10th October, 2014, 1:30 AM, but it comes up as 12:30 PM the same day. The offset calculation was done wrong.\n. Done. :)\n. ",
    "sambodanis": "@jedipi\n. Whoops, meant to submit on our fork\n. @jedipi\n. Whoops, meant to submit on our fork\n. ",
    "wesleykendall": "Looks good! Thanks for taking care of this.\n. Issue might be a red herring since our tests are wrapped in the decorator. Looking into if it's a celery issue and will reopen if I can pinpoint that this is caused by freezegun\n. Just verified that pinning freezegun to 0.2.2 does not cause this error to be thrown. Unfortunately this error is not caused on an open source app of ours, but I can try to recreate it on one of our open source apps if that might help debug\n. Looks good! Thanks for taking care of this.\n. Issue might be a red herring since our tests are wrapped in the decorator. Looking into if it's a celery issue and will reopen if I can pinpoint that this is caused by freezegun\n. Just verified that pinning freezegun to 0.2.2 does not cause this error to be thrown. Unfortunately this error is not caused on an open source app of ours, but I can try to recreate it on one of our open source apps if that might help debug\n. ",
    "svenstaro": "Probably this is due to 70518d630c71a37d3c651dee7b73d347b5d75405\n. Probably this is due to 70518d630c71a37d3c651dee7b73d347b5d75405\n. ",
    "mbox": "Seeing similar issues with using freezegun from ipython shell with a Django environment that includes hiredis and celery.\nE.g. triggered on start() when trying to access the __file__ attribute (since there's no file in interactive shell), and again when comparing hiredis.version to real_datetime\nFix is to add extra exception handling to deal with these\n. One question/issue - this uses a minimal approach to exception handling, but arguably it should do pokemon catching since if anything goes wrong while patching/unpatching it's probably better to keep going rather than bomb out and leave things in an odd state\n. I'm more thinking that the code should be:\ntry:\n   if attribute_value == real_datetime:\n               setattr(module, module_attribute, FakeDatetime)\n   if attribute_value == real_date:\n                setattr(module, module_attribute, FakeDate)\n   if attribute_value == real_time:\n                setattr(module, module_attribute, fake_time)\nexcept:\n   pass\nrather than being explicit about which exceptions to catch. But agree that it should be if/elif not if/if\n. PS thanks for a nifty tool!\n. Yes, just ran into exactly same issue on my project!\nOn Monday, 29 December 2014, Steve Pulec notifications@github.com wrote:\n\nAs soon as I tried the new version with my work project I ran into a\nRuntimeError so it appears that your suggestion is necessary. Added with\n47d113e\nhttps://github.com/spulec/freezegun/commit/47d113e7a50e99ccfab2b7e4259c29e1666ea60c\n.\nGoing to do some more testing, but I will release a new version shortly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spulec/freezegun/pull/70#issuecomment-68283740.\n\n\nSent from my phone, please excuse any mistakes.\n. Seeing similar issues with using freezegun from ipython shell with a Django environment that includes hiredis and celery.\nE.g. triggered on start() when trying to access the __file__ attribute (since there's no file in interactive shell), and again when comparing hiredis.version to real_datetime\nFix is to add extra exception handling to deal with these\n. One question/issue - this uses a minimal approach to exception handling, but arguably it should do pokemon catching since if anything goes wrong while patching/unpatching it's probably better to keep going rather than bomb out and leave things in an odd state\n. I'm more thinking that the code should be:\ntry:\n   if attribute_value == real_datetime:\n               setattr(module, module_attribute, FakeDatetime)\n   if attribute_value == real_date:\n                setattr(module, module_attribute, FakeDate)\n   if attribute_value == real_time:\n                setattr(module, module_attribute, fake_time)\nexcept:\n   pass\nrather than being explicit about which exceptions to catch. But agree that it should be if/elif not if/if\n. PS thanks for a nifty tool!\n. Yes, just ran into exactly same issue on my project!\nOn Monday, 29 December 2014, Steve Pulec notifications@github.com wrote:\n\nAs soon as I tried the new version with my work project I ran into a\nRuntimeError so it appears that your suggestion is necessary. Added with\n47d113e\nhttps://github.com/spulec/freezegun/commit/47d113e7a50e99ccfab2b7e4259c29e1666ea60c\n.\nGoing to do some more testing, but I will release a new version shortly.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spulec/freezegun/pull/70#issuecomment-68283740.\n\n\nSent from my phone, please excuse any mistakes.\n. ",
    "matino": "Hi, using cProfile gives me the same results as you got, however the tests were done on ipython with line_profiler like this:\nPython\n%load_ext line_profiler\n%prun test()\nAlso all my project tests that call freeze_time got much slower on 0.2.3 (and 0.2.5).\nI managed to duplicate this on 2 computers with Ubuntu 14.04 OS.\n. Thanks for quick help, I'll give it a try on Friday.\nAs for making start faster - I have no idea yet, but I'll give it a though.\n. Hi, using cProfile gives me the same results as you got, however the tests were done on ipython with line_profiler like this:\nPython\n%load_ext line_profiler\n%prun test()\nAlso all my project tests that call freeze_time got much slower on 0.2.3 (and 0.2.5).\nI managed to duplicate this on 2 computers with Ubuntu 14.04 OS.\n. Thanks for quick help, I'll give it a try on Friday.\nAs for making start faster - I have no idea yet, but I'll give it a though.\n. ",
    "simon-weber": "I ran into this too. For anyone who can't wait for a fix, I wrote a drop-in alternative that's much faster (2 orders of magnitude on my machine) but only supports a subset of what freezegun does: https://github.com/simon-weber/python-libfaketime.\nSome ideas on making freezegun faster:\n- make the new behavior optional:\n  - easiest fix I can think of\n  - doesn't fix the problem for people who need aliased module support, though having folks find-and-replace is probably easier than adding freezegun support :grin: \n- abuse the garbage collector to make the search for aliased modules faster: \n  - potentially a quick fix\n  - I'm not sure if a) it'd work, or b) it'd even be much faster (since python probably doesn't keep a reverse index for all objects?)\n  - pretty ridiculous\n- change the replacement logic to install patches once, then leave them in place and dynamically turn them on and off:\n  - probably the most robust solution, but might take some time to implement\n  - introduces some overhead on non-mocked date/time calls. https://pypi.python.org/pypi/wrapt could alleviate some of that if needed\n  - this is what https://github.com/venmo/btnamespace does (code)\nHope that helps!\n. I ran into this too. For anyone who can't wait for a fix, I wrote a drop-in alternative that's much faster (2 orders of magnitude on my machine) but only supports a subset of what freezegun does: https://github.com/simon-weber/python-libfaketime.\nSome ideas on making freezegun faster:\n- make the new behavior optional:\n  - easiest fix I can think of\n  - doesn't fix the problem for people who need aliased module support, though having folks find-and-replace is probably easier than adding freezegun support :grin: \n- abuse the garbage collector to make the search for aliased modules faster: \n  - potentially a quick fix\n  - I'm not sure if a) it'd work, or b) it'd even be much faster (since python probably doesn't keep a reverse index for all objects?)\n  - pretty ridiculous\n- change the replacement logic to install patches once, then leave them in place and dynamically turn them on and off:\n  - probably the most robust solution, but might take some time to implement\n  - introduces some overhead on non-mocked date/time calls. https://pypi.python.org/pypi/wrapt could alleviate some of that if needed\n  - this is what https://github.com/venmo/btnamespace does (code)\nHope that helps!\n. ",
    "pokidovea": "ping. The problem is urgent. I have about 0.5 sec per api.py:223(start) call. It is called 127 times, so total time is ~1 minute only for freezegun start. \n. I wrote my own simple tool https://github.com/pokidovea/immobilus It works on another principle. it is much faster.. ping. The problem is urgent. I have about 0.5 sec per api.py:223(start) call. It is called 127 times, so total time is ~1 minute only for freezegun start. \n. I wrote my own simple tool https://github.com/pokidovea/immobilus It works on another principle. it is much faster.. ",
    "Deimos": "I know \"me too\" comments aren't helpful, but I want to emphasize how significant of an issue this is. I saw Freezegun suggested for the \"control time in tests\" case in multiple places, so I installed it today and modified 3 of my tests to utilize it. Those 3 tests now run slower than all of my other tests combined, which includes over 20 tests involving extremely slow operations like generating and verifying Argon2 hashes.\nThis level of performance makes Freezegun completely unusable in any setup that runs tests often (which relies on making sure the entire set of tests finishes very quickly). It looks like an excellent library and I really wish I could use it, but the effect on my tests' running time is far too large.. @hltbra Hmm, that branch just completely crashes for me at the moment. On Python 3.6:\n```\n\n      result[mod_name] = (id(module), hashlib.md5(','.join(dir(module))).hexdigest(), attrs)\n\nE           TypeError: Unicode-objects must be encoded before hashing\n```. I added some encoding to both places that do the hashing to fix that error so I could test it, and it's definitely considerably faster.\n\nPreviously, the first test using Freezegun took about 0.45s, with all other ones using it taking about 0.15s each.\nAfter applying that patch, the first test takes about 0.25s, and then there doesn't seem to be much significant effect at all on any of the others using it.\nSo now it seems to just be a fairly small one-time cost, which is definitely way better. Thanks, I think that's definitely a much better approach if it's possible to implement it similar to that method.. Works without any modifications necessary now, results seem about the same as I mentioned in there with the previous version - about 0.25s duration on the first test, and then it's difficult to tell if there's any change to other ones. Seems to just add about 0.25s to the run time in total, from a few unscientific runs.. I know \"me too\" comments aren't helpful, but I want to emphasize how significant of an issue this is. I saw Freezegun suggested for the \"control time in tests\" case in multiple places, so I installed it today and modified 3 of my tests to utilize it. Those 3 tests now run slower than all of my other tests combined, which includes over 20 tests involving extremely slow operations like generating and verifying Argon2 hashes.\nThis level of performance makes Freezegun completely unusable in any setup that runs tests often (which relies on making sure the entire set of tests finishes very quickly). It looks like an excellent library and I really wish I could use it, but the effect on my tests' running time is far too large.. @hltbra Hmm, that branch just completely crashes for me at the moment. On Python 3.6:\n```\n\n      result[mod_name] = (id(module), hashlib.md5(','.join(dir(module))).hexdigest(), attrs)\n\nE           TypeError: Unicode-objects must be encoded before hashing\n```. I added some encoding to both places that do the hashing to fix that error so I could test it, and it's definitely considerably faster.\n\nPreviously, the first test using Freezegun took about 0.45s, with all other ones using it taking about 0.15s each.\nAfter applying that patch, the first test takes about 0.25s, and then there doesn't seem to be much significant effect at all on any of the others using it.\nSo now it seems to just be a fairly small one-time cost, which is definitely way better. Thanks, I think that's definitely a much better approach if it's possible to implement it similar to that method.. Works without any modifications necessary now, results seem about the same as I mentioned in there with the previous version - about 0.25s duration on the first test, and then it's difficult to tell if there's any change to other ones. Seems to just add about 0.25s to the run time in total, from a few unscientific runs.. ",
    "hltbra": "I think it's possible to keep a warm cache of modules in freezegun and avoid iterating over all modules over and over for each test. I am working on a patch (branch speed-up-module-search) and it sped up freezegun's own tests by almost 1/3.\nMy changeset is not finished yet, but can you give it a try and see if it improves your tests speed, @matino and @Deimos? Please run your tests against the branch speed-up-module-search.\n. Sorry, @Deimos, I just pushed changes to that branch (refactoring and python3-compatibility). I am opening a PR and will tag you. Please fetch the latest changes and let me know if it works as is.. Nevermind, the latest version of freezegun (0.3.5) does not have this issue.\n. I will test this against moto later. I think there's a bug after running this against a work (private) project.. I think it's possible to keep a warm cache of modules in freezegun and avoid iterating over all modules over and over for each test. I am working on a patch (branch speed-up-module-search) and it sped up freezegun's own tests by almost 1/3.\nMy changeset is not finished yet, but can you give it a try and see if it improves your tests speed, @matino and @Deimos? Please run your tests against the branch speed-up-module-search.\n. Sorry, @Deimos, I just pushed changes to that branch (refactoring and python3-compatibility). I am opening a PR and will tag you. Please fetch the latest changes and let me know if it works as is.. Nevermind, the latest version of freezegun (0.3.5) does not have this issue.\n. I will test this against moto later. I think there's a bug after running this against a work (private) project.. ",
    "jplehmann": "\"Me too\" -- I am using 0.3.9 and am observing something like 30ms per call to the context manager, making my test suite multiples slower.  I am hoping the previous PR will fix this.. \"Me too\" -- I am using 0.3.9 and am observing something like 30ms per call to the context manager, making my test suite multiples slower.  I am hoping the previous PR will fix this.. ",
    "boggsboggs": "I think that change does fix it.  At least, the interactive check I pasted above doesn't fail any more.\nThanks!\nAlso, thanks for open sourcing this project.  It's certainly making the tests in my current project much cleaner.\n. I think that change does fix it.  At least, the interactive check I pasted above doesn't fail any more.\nThanks!\nAlso, thanks for open sourcing this project.  It's certainly making the tests in my current project much cleaner.\n. ",
    "keszybz": "Hm, but why? Running tests is a nice way to check that things are OK. Not just in freezegun itself, but e.g. in dependencies.\n. I think that #27 was bogus. If I revert HEAD (so I'm effectively at freezegun@7da4cef779),\npip install .\ndoes not install tests. Neither does\npip install freezegun==0.2.8\nNeither does\npython setup.py install --user\nNor\npython setup.py sdist\npip install `pwd`/dist/freezegun-0.2.8.tar.gz --user\nI think that the reporter from #27 might have had an old egg in his git checkout directory.\n. Hm, but why? Running tests is a nice way to check that things are OK. Not just in freezegun itself, but e.g. in dependencies.\n. I think that #27 was bogus. If I revert HEAD (so I'm effectively at freezegun@7da4cef779),\npip install .\ndoes not install tests. Neither does\npip install freezegun==0.2.8\nNeither does\npython setup.py install --user\nNor\npython setup.py sdist\npip install `pwd`/dist/freezegun-0.2.8.tar.gz --user\nI think that the reporter from #27 might have had an old egg in his git checkout directory.\n. ",
    "pypingou": "You can ship the tests in the tarball without nesting them in the module itself (because they should not be installed).\n. You can ship the tests in the tarball without nesting them in the module itself (because they should not be installed).\n. ",
    "paulfurley": "Ah OK - thanks @spulec. Apparently my dependency updating isn't working as planned ;)\n. Ah OK - thanks @spulec. Apparently my dependency updating isn't working as planned ;)\n. ",
    "prophile": "You are a gentleman and a scholar. Any chance of a universal or Python 3 wheel?\n. Works fine under Python 2.7 and Python 3.4. Thanks.\n. You are a gentleman and a scholar. Any chance of a universal or Python 3 wheel?\n. Works fine under Python 2.7 and Python 3.4. Thanks.\n. ",
    "PeterJCLaw": "Thanks. It turns out that it only expresses an issue when the timezone has an ordinary offset of 0 (ie UTC), but does have a summer-time component.\nI've raised an issue against Python 3.4 here: http://bugs.python.org/issue23600.\n. Update: It's been fixed in the python 3.4, 3.5 and 3.6 streams.\n. Thanks. It turns out that it only expresses an issue when the timezone has an ordinary offset of 0 (ie UTC), but does have a summer-time component.\nI've raised an issue against Python 3.4 here: http://bugs.python.org/issue23600.\n. Update: It's been fixed in the python 3.4, 3.5 and 3.6 streams.\n. ",
    "charlax": "Yes, I've seen tz_offset. The problem is that (1) it requires explicit knowledge about the offset (2) the offset changes depending on the datetime.\n. A similar thing happens with pytest:\nTraceback (most recent call last):\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/freezegun/api.py\", line 427, in wrapper\n    with self:\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/freezegun/api.py\", line 320, in __enter__\n    self.start()\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/freezegun/api.py\", line 366, in start\n    for module_attribute in dir(module):\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_apipkg.py\", line 143, in __dict__\n    self.__makeattr(name)\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_apipkg.py\", line 125, in __makeattr\n    result = importobj(modpath, attrname)\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_apipkg.py\", line 48, in importobj\n    module = __import__(modpath, None, None, ['__doc__'])\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_code/assertion.py\", line 89, in <module>\n    from py._code._assertionold import interpret as reinterpret_old\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_code/_assertionold.py\", line 3, in <module>\n    from compiler import parse, ast, pycodegen\n  File \"/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/compiler/__init__.py\", line 27, in <module>\n    DeprecationWarning, stacklevel=2)\nDeprecationWarning: The compiler package is deprecated and removed in Python 3.x.\nI'm using the latest version of pytest.\n. I added py to ignore to fix it.\n. Yes, I've seen tz_offset. The problem is that (1) it requires explicit knowledge about the offset (2) the offset changes depending on the datetime.\n. A similar thing happens with pytest:\nTraceback (most recent call last):\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/freezegun/api.py\", line 427, in wrapper\n    with self:\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/freezegun/api.py\", line 320, in __enter__\n    self.start()\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/freezegun/api.py\", line 366, in start\n    for module_attribute in dir(module):\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_apipkg.py\", line 143, in __dict__\n    self.__makeattr(name)\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_apipkg.py\", line 125, in __makeattr\n    result = importobj(modpath, attrname)\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_apipkg.py\", line 48, in importobj\n    module = __import__(modpath, None, None, ['__doc__'])\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_code/assertion.py\", line 89, in <module>\n    from py._code._assertionold import interpret as reinterpret_old\n  File \"/Users/ca/.virtualenvs/package/lib/python2.7/site-packages/py/_code/_assertionold.py\", line 3, in <module>\n    from compiler import parse, ast, pycodegen\n  File \"/usr/local/Cellar/python/2.7.11/Frameworks/Python.framework/Versions/2.7/lib/python2.7/compiler/__init__.py\", line 27, in <module>\n    DeprecationWarning, stacklevel=2)\nDeprecationWarning: The compiler package is deprecated and removed in Python 3.x.\nI'm using the latest version of pytest.\n. I added py to ignore to fix it.\n. ",
    "shreevatsar": "Just FYI: one can already pass freeze_time a timezone-aware datetime object:\nd = datetime(2015, 8, 18, 8, 51, 50, tzinfo=pytz.timezone('America/Los_Angeles'))\nwith freeze_time(d):\n    print datetime.now()\n(prints 2015-08-18 08:51:50-08:00)\n. Just FYI: one can already pass freeze_time a timezone-aware datetime object:\nd = datetime(2015, 8, 18, 8, 51, 50, tzinfo=pytz.timezone('America/Los_Angeles'))\nwith freeze_time(d):\n    print datetime.now()\n(prints 2015-08-18 08:51:50-08:00)\n. ",
    "agriffis": "AFAIK you can also pass a timezone in the string, right?\npython\nwith freeze_time(\"2015-03-09 09:00:00 PST\")\n. Regarding my previous comment, it turns out that dateutil's parser returns an aware datetime IFF the timezone in the string matches the default timezone of the host. In all other cases, dateutil's parser ignores the given timezone and returns a naive (and unadjusted) datetime.\n```\n\n\n\nparse(\"12:00 EST\")\ndatetime.datetime(2016, 1, 4, 12, 0, tzinfo=tzlocal())\nparse(\"12:00 CST\")\ndatetime.datetime(2016, 1, 4, 12, 0)\nparse(\"12:00 MST\")\ndatetime.datetime(2016, 1, 4, 12, 0)\n```\n\n\n\nDefinitely fails the principle of least surprise for me, but there you have it.\n. I agree it should be the local time. Caller can specify UTC as the timezone if they want that.\n. Actually, it should probably default to UTC, so that developers in different timezones working on the same project won't see different results in their tests.\n. AFAIK you can also pass a timezone in the string, right?\npython\nwith freeze_time(\"2015-03-09 09:00:00 PST\")\n. Regarding my previous comment, it turns out that dateutil's parser returns an aware datetime IFF the timezone in the string matches the default timezone of the host. In all other cases, dateutil's parser ignores the given timezone and returns a naive (and unadjusted) datetime.\n```\n\n\n\nparse(\"12:00 EST\")\ndatetime.datetime(2016, 1, 4, 12, 0, tzinfo=tzlocal())\nparse(\"12:00 CST\")\ndatetime.datetime(2016, 1, 4, 12, 0)\nparse(\"12:00 MST\")\ndatetime.datetime(2016, 1, 4, 12, 0)\n```\n\n\n\nDefinitely fails the principle of least surprise for me, but there you have it.\n. I agree it should be the local time. Caller can specify UTC as the timezone if they want that.\n. Actually, it should probably default to UTC, so that developers in different timezones working on the same project won't see different results in their tests.\n. ",
    "ze-phyr-us": "@spulec That's a shame. While it works, it's a bit clumsy for an extremely common use case. (I, at least, have zero Python projects that can afford to ignore time zones.)\n. Just ran into this problem too \u2013 my frozen test code was importing Pandas, and Pandas import failed with\nTypeError: type 'pandas.tslib._Timestamp' is not dynamically allocated but its base type 'FakeDatetime' is dynamically allocated\nI got it to work by explicitly importing Pandas before the test code runs.\n. Hi @spulec, what do you think about this PR? Is it good to be merged and released?. @spulec That's a shame. While it works, it's a bit clumsy for an extremely common use case. (I, at least, have zero Python projects that can afford to ignore time zones.)\n. Just ran into this problem too \u2013 my frozen test code was importing Pandas, and Pandas import failed with\nTypeError: type 'pandas.tslib._Timestamp' is not dynamically allocated but its base type 'FakeDatetime' is dynamically allocated\nI got it to work by explicitly importing Pandas before the test code runs.\n. Hi @spulec, what do you think about this PR? Is it good to be merged and released?. ",
    "jesteria": ":fireworks: :dancers: :fireworks: \n. :fireworks: :dancers: :fireworks: \n. ",
    "homeworkprod": "Oh, and Freezegun's fake date/time lacks milliseconds compared to the default update. I've tested on Python 3.4.2.\n. > I think we would need to have some sort of backwards-compatibility. No idea how this would work.\nStaying completely backwards-compatible probably won't work.\n\nShould the time passed into freezegun be used as the local time or utc time?\n\nI'd say this should be the local time. If it should be UTC, either a separate function with some _utc suffix should be provided (just like datetime.now() and datetime.utcnow() in the stdlib), or a keyword argument like utc=True or similar could be used.\n\nWhat if the time passed in has a timezone as well or a tz_offset is passed?\n\nPassing an optional timezone via a keywords argument should be possible. If that is the case and the time value already specifies timezone, a ValueError could be raised.\n. > ``` python\n\n@freeze_time(\"2012-01-14 03:21:34\", tz_offset=-4)\ndef test():\n    assert datetime.datetime.utcnow() == datetime.datetime(2012, 01, 14, 03, 21, 34)\n    assert datetime.datetime.now() == datetime.datetime(2012, 01, 13, 23, 21, 34)\n```\n\nBTW, did you notice that the above code uses octal values? This works for integers up to 7, but will fail for 8 and 9 (see https://github.com/github/linguist/issues/1939 on why the syntax highlighting of the console output currently doesn't work):\n``` pycon\n\n\n\n07\n7\n08\n  File \"\", line 1\n    08\n     ^\nSyntaxError: invalid token\n```\n\n\n\nSee here:\n- https://www.python.org/dev/peps/pep-3127/\n- https://docs.python.org/3/faq/programming.html#how-do-i-specify-hexadecimal-and-octal-integers\n. @bryanhelmig, you're welcome. :)\n. Oh, and Freezegun's fake date/time lacks milliseconds compared to the default update. I've tested on Python 3.4.2.\n. > I think we would need to have some sort of backwards-compatibility. No idea how this would work.\nStaying completely backwards-compatible probably won't work.\n\nShould the time passed into freezegun be used as the local time or utc time?\n\nI'd say this should be the local time. If it should be UTC, either a separate function with some _utc suffix should be provided (just like datetime.now() and datetime.utcnow() in the stdlib), or a keyword argument like utc=True or similar could be used.\n\nWhat if the time passed in has a timezone as well or a tz_offset is passed?\n\nPassing an optional timezone via a keywords argument should be possible. If that is the case and the time value already specifies timezone, a ValueError could be raised.\n. > ``` python\n\n@freeze_time(\"2012-01-14 03:21:34\", tz_offset=-4)\ndef test():\n    assert datetime.datetime.utcnow() == datetime.datetime(2012, 01, 14, 03, 21, 34)\n    assert datetime.datetime.now() == datetime.datetime(2012, 01, 13, 23, 21, 34)\n```\n\nBTW, did you notice that the above code uses octal values? This works for integers up to 7, but will fail for 8 and 9 (see https://github.com/github/linguist/issues/1939 on why the syntax highlighting of the console output currently doesn't work):\n``` pycon\n\n\n\n07\n7\n08\n  File \"\", line 1\n    08\n     ^\nSyntaxError: invalid token\n```\n\n\n\nSee here:\n- https://www.python.org/dev/peps/pep-3127/\n- https://docs.python.org/3/faq/programming.html#how-do-i-specify-hexadecimal-and-octal-integers\n. @bryanhelmig, you're welcome. :)\n. ",
    "bryanhelmig": "We ran into this in the wild and fought it for a good while - I have some thoughts on how we might fix and document it. @spulec I'd be happy to fix this in a PR if you could confirm there is a good chance it'll merge.\nBy \"past behavior\" I mean now() ~= utcnow() which is the bug. By \"future behavior\" I mean now() and utcnow() behave correctly when frozen.\n1. For backwards compatibility - an opt-in switch (both global & kwarg) that enables future behavior. We log a single warning if utcnow() is used in under freezegun. The warning can have a link to a full doc page. In a pre-decided future version (say when we go 1.0.0) we drop the warning and drop the bug.\n2. Presumption of local vs. utc and naivety - I think the time passed in should be presumed \"local\" if naive. We have to decide one way or another and disappoint someone. If utc default is undesirable (because you use now() in code) - the workaround depends on your (and team members') timezone. If local default is undesirable (because you use utcnow() in code) it seems simpler to document a workaround that says \"add -00:00 to your freeze argument\".\n3. If TZ is supplied (which is the presumption of point 2) - you'd have to hold onto that timezone and convert to system local and UTC for both now() and utcnow().\nWhatcha think @spulec?\n. Yeah - people will be upset either way. I think it boils down to which side of the divide is larger? Folks who use now() exclusively? Or folks who use utcnow() exclusively?\nEither way - we can respect the system timezone fairly simply with:\npython\nimport time\ntime.tzname\nIf you provide freeze_time('2015-01-16T20:00:00+00:00') or any other time with a timezone - code should work either way.\nThe tricky part is naive freeze_time('2015-01-16T20:00:00'). People 100% have to workaround this bug now if you mix now() and utcnow() as it diverges - so fixing it means we 100% will break stuff. So, just gotta break stuff in the right direction. :-)\n. Ah - that may be - thanks for the heads up!\nI wasn't even aware of tz_offset - so if the datetime string has a TZ in it too, feels like we could set that to tz_offset as well which is more natural and smooths some edges.\nI'm traveling this week but I'll slap together a PR when I'm back.\n. Woah @homeworkprod - the more you know!\n. isdst is currently wrong too - haven't figured that one out. The \"fix\" is really inelegant as well. :shrugs:\nMainly putting it out there just in case someone else hits the same thing.\n. We ran into this in the wild and fought it for a good while - I have some thoughts on how we might fix and document it. @spulec I'd be happy to fix this in a PR if you could confirm there is a good chance it'll merge.\nBy \"past behavior\" I mean now() ~= utcnow() which is the bug. By \"future behavior\" I mean now() and utcnow() behave correctly when frozen.\n1. For backwards compatibility - an opt-in switch (both global & kwarg) that enables future behavior. We log a single warning if utcnow() is used in under freezegun. The warning can have a link to a full doc page. In a pre-decided future version (say when we go 1.0.0) we drop the warning and drop the bug.\n2. Presumption of local vs. utc and naivety - I think the time passed in should be presumed \"local\" if naive. We have to decide one way or another and disappoint someone. If utc default is undesirable (because you use now() in code) - the workaround depends on your (and team members') timezone. If local default is undesirable (because you use utcnow() in code) it seems simpler to document a workaround that says \"add -00:00 to your freeze argument\".\n3. If TZ is supplied (which is the presumption of point 2) - you'd have to hold onto that timezone and convert to system local and UTC for both now() and utcnow().\nWhatcha think @spulec?\n. Yeah - people will be upset either way. I think it boils down to which side of the divide is larger? Folks who use now() exclusively? Or folks who use utcnow() exclusively?\nEither way - we can respect the system timezone fairly simply with:\npython\nimport time\ntime.tzname\nIf you provide freeze_time('2015-01-16T20:00:00+00:00') or any other time with a timezone - code should work either way.\nThe tricky part is naive freeze_time('2015-01-16T20:00:00'). People 100% have to workaround this bug now if you mix now() and utcnow() as it diverges - so fixing it means we 100% will break stuff. So, just gotta break stuff in the right direction. :-)\n. Ah - that may be - thanks for the heads up!\nI wasn't even aware of tz_offset - so if the datetime string has a TZ in it too, feels like we could set that to tz_offset as well which is more natural and smooths some edges.\nI'm traveling this week but I'll slap together a PR when I'm back.\n. Woah @homeworkprod - the more you know!\n. isdst is currently wrong too - haven't figured that one out. The \"fix\" is really inelegant as well. :shrugs:\nMainly putting it out there just in case someone else hits the same thing.\n. ",
    "bitdivision": "Is this project still maintained? It would be good to get something merged for this.. Is this project still maintained? It would be good to get something merged for this.. ",
    "tleach": "Thanks for merging. When are you next planning to cut a release?\n. Thanks for merging. When are you next planning to cut a release?\n. ",
    "daveFNbuck": "No problem, just glad to have the bug patched :)\n. No problem, just glad to have the bug patched :)\n. ",
    "jpulec": "That looks to have done it. Thanks so much!\n. That looks to have done it. Thanks so much!\n. ",
    "craigcitro": "awesome, thanks @spulec!\n. awesome, thanks @spulec!\n. ",
    "nickpresta": "@spulec is it likely for this fix to make it into a tagged release in the near future?\nEDIT: Release 0.3.3 solved my issue actually. Thanks.\n. @spulec is it likely for this fix to make it into a tagged release in the near future?\nEDIT: Release 0.3.3 solved my issue actually. Thanks.\n. ",
    "anentropic": "Installed current pip version today\nOn 26 Jun 2015 19:30, \"Steve Pulec\" notifications@github.com wrote:\n\nWhich version of freezegun are you on? We've had this issue in the past,\nbut I thought it was fixed with #13\nhttps://github.com/spulec/freezegun/issues/13\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spulec/freezegun/issues/98#issuecomment-115825695.\n. Ah, I have read the other issue and I see it is the same symptom but a different case\n\nIt was fixed in #13 for the case of import freezegun kills non-frozen tests which import Pandas\nMy case is a frozen test that contains code that imports Pandas\nIs there any insight into why Pandas spits the dummy? Is it something that could be solved?\nI'm currently using python-libfaketime instead \n. Installed current pip version today\nOn 26 Jun 2015 19:30, \"Steve Pulec\" notifications@github.com wrote:\n\nWhich version of freezegun are you on? We've had this issue in the past,\nbut I thought it was fixed with #13\nhttps://github.com/spulec/freezegun/issues/13\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/spulec/freezegun/issues/98#issuecomment-115825695.\n. Ah, I have read the other issue and I see it is the same symptom but a different case\n\nIt was fixed in #13 for the case of import freezegun kills non-frozen tests which import Pandas\nMy case is a frozen test that contains code that imports Pandas\nIs there any insight into why Pandas spits the dummy? Is it something that could be solved?\nI'm currently using python-libfaketime instead \n. ",
    "UberFarmer": "I was getting the same bug in some cases with Python 2.7, I tried downgrading to fix the issue. The problem was still happening on 0.2.3, but was fixed when I downgraded to 0.2.2. So I bet the issue is not due to ac163a5c534b4728bd082d3f67d956b1df71f04c, but rather a change between 0.2.2 and 0.2.3.\nOnce it's in the corrupted state, we can repro with calls to datetime.datetime.utcnow(), here's the partial stack trace from 0.2.3:\nenv/local/lib/python2.7/site-packages/freezegun/api.py:137: in utcnow\n    result = cls._time_to_freeze()\nenv/local/lib/python2.7/site-packages/freezegun/api.py:142: in _time_to_freeze\n    return cls.times_to_freeze[-1]\nE   IndexError: list index out of range\n. Turns out my bug may be caused by a different set of events than @spulec , but the symptoms are the same once it happens.\nI can't get a really nice repro for you, but here's some more info. When a certain set of dependencies are installed (not sure exactly which combination, but some are definitely related to werkzeug/flask), trying to test the following code causes freezegun 0.2.3+ to enter a corrupted state. Once it's in the corrupted state, it behaves as specified in my previous comment.\n``` lang=python\nfrom freezegun import freeze_time\nimport unittest\nclass FreezegunTestCase(unittest.TestCase):\n@freeze_time('2015-01-01')\ndef test_break_freezegun(self):\n    pass\n\n```\n```\n\npy.test -rs --tb short test.py\n=========================================================================================== test session starts ============================================================================================\nplatform linux2 -- Python 2.7.9 -- py-1.4.30 -- pytest-2.6.4\nplugins: flask\ncollected 1 items\n\ntest_freezegun.py F\n================================================================================================= FAILURES =================================================================================================\n____________ FreezegunTestCase.test_break_freezegun ___________\nenv/local/lib/python2.7/site-packages/freezegun/api.py:302: in wrapper\n    with self:\nenv/local/lib/python2.7/site-packages/freezegun/api.py:218: in _enter\n    self.start()\nenv/local/lib/python2.7/site-packages/freezegun/api.py:250: in start\n    if attribute_value == real_datetime:\nenv/local/lib/python2.7/site-packages/werkzeug/local.py:360: in \neq = lambda x, o: x._get_current_object() == o\nenv/local/lib/python2.7/site-packages/werkzeug/local.py:297: in _get_current_object\n    return self.__local()\nenv/local/lib/python2.7/site-packages/flask/globals.py:34: in _find_app\n    raise RuntimeError('working outside of application context')\nE   RuntimeError: working outside of application context\n===================================================================================== 1 failed in -19180615.45 seconds =====================================================================================\n```\nEven if we don't know the cause, it looks like this problem could likely be fixed through better exception handling in the freezegun _freeze_time::start() function, so even when an unexpected exception is raised, freezegun doesn't enter a bad state.\n. I was getting the same bug in some cases with Python 2.7, I tried downgrading to fix the issue. The problem was still happening on 0.2.3, but was fixed when I downgraded to 0.2.2. So I bet the issue is not due to ac163a5c534b4728bd082d3f67d956b1df71f04c, but rather a change between 0.2.2 and 0.2.3.\nOnce it's in the corrupted state, we can repro with calls to datetime.datetime.utcnow(), here's the partial stack trace from 0.2.3:\nenv/local/lib/python2.7/site-packages/freezegun/api.py:137: in utcnow\n    result = cls._time_to_freeze()\nenv/local/lib/python2.7/site-packages/freezegun/api.py:142: in _time_to_freeze\n    return cls.times_to_freeze[-1]\nE   IndexError: list index out of range\n. Turns out my bug may be caused by a different set of events than @spulec , but the symptoms are the same once it happens.\nI can't get a really nice repro for you, but here's some more info. When a certain set of dependencies are installed (not sure exactly which combination, but some are definitely related to werkzeug/flask), trying to test the following code causes freezegun 0.2.3+ to enter a corrupted state. Once it's in the corrupted state, it behaves as specified in my previous comment.\n``` lang=python\nfrom freezegun import freeze_time\nimport unittest\nclass FreezegunTestCase(unittest.TestCase):\n@freeze_time('2015-01-01')\ndef test_break_freezegun(self):\n    pass\n\n```\n```\n\npy.test -rs --tb short test.py\n=========================================================================================== test session starts ============================================================================================\nplatform linux2 -- Python 2.7.9 -- py-1.4.30 -- pytest-2.6.4\nplugins: flask\ncollected 1 items\n\ntest_freezegun.py F\n================================================================================================= FAILURES =================================================================================================\n____________ FreezegunTestCase.test_break_freezegun ___________\nenv/local/lib/python2.7/site-packages/freezegun/api.py:302: in wrapper\n    with self:\nenv/local/lib/python2.7/site-packages/freezegun/api.py:218: in _enter\n    self.start()\nenv/local/lib/python2.7/site-packages/freezegun/api.py:250: in start\n    if attribute_value == real_datetime:\nenv/local/lib/python2.7/site-packages/werkzeug/local.py:360: in \neq = lambda x, o: x._get_current_object() == o\nenv/local/lib/python2.7/site-packages/werkzeug/local.py:297: in _get_current_object\n    return self.__local()\nenv/local/lib/python2.7/site-packages/flask/globals.py:34: in _find_app\n    raise RuntimeError('working outside of application context')\nE   RuntimeError: working outside of application context\n===================================================================================== 1 failed in -19180615.45 seconds =====================================================================================\n```\nEven if we don't know the cause, it looks like this problem could likely be fixed through better exception handling in the freezegun _freeze_time::start() function, so even when an unexpected exception is raised, freezegun doesn't enter a bad state.\n. ",
    "toopy": "Same issue with freezegun==0.3.5, ok with 0.3.4. Sorry I do not ave clean code sample to demonstrate my case. It's difficult to isolate because it happens in kind of complex test :/\n. Same issue with freezegun==0.3.5, ok with 0.3.4. Sorry I do not ave clean code sample to demonstrate my case. It's difficult to isolate because it happens in kind of complex test :/\n. ",
    "jcugat": "I submitted PR #119 which fixes the issue @coagulant reported (including a test which reproduces it). Can you take a look @spulec and check if you like the way it's solved?\nThere is another case I found that is not fixed, but I couldn't find a solution for:\ndef test_import_after_start():\n    with freeze_time('2012-01-14'):\n        from datetime import datetime as our_imported_datetime\n        assert our_imported_datetime.now().year == 2012\n        assert our_imported_datetime.now().month == 1\n        assert our_imported_datetime.now().day == 14\n    assert our_imported_datetime.now().year != 2012\n    assert our_imported_datetime.now().month != 1\n    assert our_imported_datetime.now().day != 14\nSince our_imported_datetime it's not a module attribute, it can't be unpatched. Any ideas?\n. Found another (really minor) bug and fixed it in the same PR.\n. I've rebased this branch with the latest changes from master and also applied the improvements made in e93c7b4 to the code I added in stop().\nLet me know if you need anything else.\n. I submitted PR #119 which fixes the issue @coagulant reported (including a test which reproduces it). Can you take a look @spulec and check if you like the way it's solved?\nThere is another case I found that is not fixed, but I couldn't find a solution for:\ndef test_import_after_start():\n    with freeze_time('2012-01-14'):\n        from datetime import datetime as our_imported_datetime\n        assert our_imported_datetime.now().year == 2012\n        assert our_imported_datetime.now().month == 1\n        assert our_imported_datetime.now().day == 14\n    assert our_imported_datetime.now().year != 2012\n    assert our_imported_datetime.now().month != 1\n    assert our_imported_datetime.now().day != 14\nSince our_imported_datetime it's not a module attribute, it can't be unpatched. Any ideas?\n. Found another (really minor) bug and fixed it in the same PR.\n. I've rebased this branch with the latest changes from master and also applied the improvements made in e93c7b4 to the code I added in stop().\nLet me know if you need anything else.\n. ",
    "GDICommander": "I have the same issue with 0.3.7, I am using a pytest fixture that uses \"freeze_time\":\n@pytest.yield_fixture\ndef frozen_clock():\n    with freeze_time(\"2012-01-14 12:00:01.123\"):\n        yield\nOne of the tests that does not use this fixture hits this issue when using structlog and datetime.utcnow():\n```\nrdv_load_test_agent\\tunnel.py:475: in load\n    data = await self._send_message('LOAD', path=bpt_file)\nC:\\Python35\\Lib\\contextlib.py:77: in exit\n    self.gen.throw(type, value, traceback)\nrdv_load_test_agent\\tunnel.py:112: in monitor_transaction\n    event_log.info(event, outcome=outcome, duration=duration, **kwds)\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\structlog_base.py:176: in _proxy_to_logger\n    args, kw = self._process_event(method_name, event, event_kw)\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\structlog_base.py:136: in _process_event\n    event_dict = proc(self._logger, method_name, event_dict)\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\structlog\\processors.py:213: in stamper\n    event_dict[key] = now_method().isoformat() + 'Z'\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\freezegun\\api.py:191: in utcnow\n    result = cls._time_to_freeze()\ncls = \n@classmethod\ndef _time_to_freeze(cls):\n\n\n  return cls.times_to_freeze[-1]()\n\nE       IndexError: list index out of range\n\n```\nIf this can help, here is the code in structlog that gets and uses \"utcnow\":\nnow_method = getattr(datetime.datetime, 'utcnow' if utc else 'now')\n        if fmt is None:\n            def stamper(self, _, __, event_dict):\n                event_dict[key] = calendar.timegm(time.gmtime())\n                return event_dict\n        elif fmt.upper() == 'ISO':\n            if utc:\n                def stamper(self, _, __, event_dict):\n                    event_dict[key] = now_method().isoformat() + 'Z'\n                    return event_dict\n. I have the same issue with 0.3.7, I am using a pytest fixture that uses \"freeze_time\":\n@pytest.yield_fixture\ndef frozen_clock():\n    with freeze_time(\"2012-01-14 12:00:01.123\"):\n        yield\nOne of the tests that does not use this fixture hits this issue when using structlog and datetime.utcnow():\n```\nrdv_load_test_agent\\tunnel.py:475: in load\n    data = await self._send_message('LOAD', path=bpt_file)\nC:\\Python35\\Lib\\contextlib.py:77: in exit\n    self.gen.throw(type, value, traceback)\nrdv_load_test_agent\\tunnel.py:112: in monitor_transaction\n    event_log.info(event, outcome=outcome, duration=duration, **kwds)\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\structlog_base.py:176: in _proxy_to_logger\n    args, kw = self._process_event(method_name, event, event_kw)\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\structlog_base.py:136: in _process_event\n    event_dict = proc(self._logger, method_name, event_dict)\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\structlog\\processors.py:213: in stamper\n    event_dict[key] = now_method().isoformat() + 'Z'\n..\\venvs\\rdv_lta_pagagne\\lib\\site-packages\\freezegun\\api.py:191: in utcnow\n    result = cls._time_to_freeze()\ncls = \n@classmethod\ndef _time_to_freeze(cls):\n\n\n  return cls.times_to_freeze[-1]()\n\nE       IndexError: list index out of range\n\n```\nIf this can help, here is the code in structlog that gets and uses \"utcnow\":\nnow_method = getattr(datetime.datetime, 'utcnow' if utc else 'now')\n        if fmt is None:\n            def stamper(self, _, __, event_dict):\n                event_dict[key] = calendar.timegm(time.gmtime())\n                return event_dict\n        elif fmt.upper() == 'ISO':\n            if utc:\n                def stamper(self, _, __, event_dict):\n                    event_dict[key] = now_method().isoformat() + 'Z'\n                    return event_dict\n. ",
    "johtso": "I'm having the exact same issue as @GDICommander \n. I'm having the exact same issue as @GDICommander \n. ",
    "mindojo-victor": "Is there a workaround for this? Version 0.2.2 is not installable.\n. Hm, after fixing other failing tests, this works too. Looks like an exception is not handled somewhere.\n. Here is my attempt to fix this: https://github.com/spulec/freezegun/pull/155\n. > Should we ever be calling _time_to_freeze if there isn't cls.times_to_freeze?\nYou mean to check if cls.times_to_freeze is empty in each place where we call _time_to_freeze?\n. I don't have the reproducible tests. It happens sometimes. Looks like it depends on test sequence. Some tests patch the datetime module, then next test_* is module is run, but the decorator is already finished. I am using nose2.\nIf I were to decide what to do with this, I would not try to restore original datetime module. Just leave the module patched: if there is a frozen datetime to return, return it, otherwise return pass through to the original datetime. This would make the implementation much simpler.\n. Actually I am not using Django models in my case -- I use MongoEngine. I don't know if it's possible to find all references to datetime.datetime.utcnow in the memory.\n. Is there a workaround for this? Version 0.2.2 is not installable.\n. Hm, after fixing other failing tests, this works too. Looks like an exception is not handled somewhere.\n. Here is my attempt to fix this: https://github.com/spulec/freezegun/pull/155\n. > Should we ever be calling _time_to_freeze if there isn't cls.times_to_freeze?\nYou mean to check if cls.times_to_freeze is empty in each place where we call _time_to_freeze?\n. I don't have the reproducible tests. It happens sometimes. Looks like it depends on test sequence. Some tests patch the datetime module, then next test_* is module is run, but the decorator is already finished. I am using nose2.\nIf I were to decide what to do with this, I would not try to restore original datetime module. Just leave the module patched: if there is a frozen datetime to return, return it, otherwise return pass through to the original datetime. This would make the implementation much simpler.\n. Actually I am not using Django models in my case -- I use MongoEngine. I don't know if it's possible to find all references to datetime.datetime.utcnow in the memory.\n. ",
    "ask": "You could catch all warnings and ignore them using with warnings.catch_warnings(..)\n. You could catch all warnings and ignore them using with warnings.catch_warnings(..)\n. ",
    "zmsmith": "I've pushed an updated and full implementation. Let me know if it needs anything.\n. I added an explicit test for time (which was missing prior, though there was a test for date). Let me know if I'm missing any cases:\nhttps://github.com/zmsmith/freezegun/blob/93b532e57b5aa6466c65b26d545ce1e4b1e15baa/tests/test_ticking.py\n. I've pushed an updated and full implementation. Let me know if it needs anything.\n. I added an explicit test for time (which was missing prior, though there was a test for date). Let me know if I'm missing any cases:\nhttps://github.com/zmsmith/freezegun/blob/93b532e57b5aa6466c65b26d545ce1e4b1e15baa/tests/test_ticking.py\n. ",
    "joegilley": "bump.\n. bump.\n. ",
    "yelled3": "@spulec IMO, this is a fairly important issue - is there any progress with this?\n. @spulec IMO, this is a fairly important issue - is there any progress with this?\n. ",
    "neilsh": "Generally speaking, what's the difference between how the two are mocked, and what would need to change?\n. Generally speaking, what's the difference between how the two are mocked, and what would need to change?\n. ",
    "pablodo": "Im experiencing something similar. When freezing time, time.time returns the timestamp in UTC, and datetime returns it with my local timezone:\n```\n\n\n\nwith freezegun.freeze_time('2016-11-21 15:00:00'):\n...     print datetime.now()\n...     print datetime.fromtimestamp(time.time())\n... \n2016-11-21 15:00:00\n2016-11-21 12:00:00\n``. Im experiencing something similar. When freezing time,time.timereturns the timestamp inUTC, anddatetime` returns it with my local timezone:\n\n\n\n```\n\n\n\nwith freezegun.freeze_time('2016-11-21 15:00:00'):\n...     print datetime.now()\n...     print datetime.fromtimestamp(time.time())\n... \n2016-11-21 15:00:00\n2016-11-21 12:00:00\n```. \n\n\n",
    "azmeuk": "Also, when a tz_offset is provided, it is ignored.\n```python\n\n\n\nwith freezegun.freeze_time('2016-11-21 15:00:00', tz_offset=6):\n...     print (datetime.now())\n...     print (datetime.fromtimestamp(time.time()))\n... \n2016-11-21 21:00:00\n2016-11-21 12:00:00\n. @hltbra @spulec I am very interested in improving the performances of freezegun. Is there something I can do to help with this PR?. @rodude123 The sample of code I provided raises this exception: `TypeError: freeze_time() expected None, a string, date instance, or datetime instance, but got type <type 'function'>.`. My bad. Reinstalling my virtualenv solved this.. Also, when a tz_offset is provided, it is ignored.python\nwith freezegun.freeze_time('2016-11-21 15:00:00', tz_offset=6):\n...     print (datetime.now())\n...     print (datetime.fromtimestamp(time.time()))\n... \n2016-11-21 21:00:00\n2016-11-21 12:00:00\n``. @hltbra @spulec I am very interested in improving the performances of freezegun. Is there something I can do to help with this PR?. @rodude123 The sample of code I provided raises this exception:TypeError: freeze_time() expected None, a string, date instance, or datetime instance, but got type .`. My bad. Reinstalling my virtualenv solved this.. \n\n\n",
    "aehlke": "It seems the failing test is a false negative. It's complaining about syntax in a coverage.py file?\nI did add a test for this new functionality and it passes locally for me.\n. I updated this (and squashed commit) to have a proper API, so you can do:\nwith freeze_time(initial_datetime) as frozen_datetime:\n        frozen_datetime.tick()\n(please see test for full example)\n. If someone can point me in a direction as to why the build is failing, I'll gladly work on a fix for it: https://travis-ci.org/spulec/freezegun/jobs/85430272 Not sure how to interpret this error as it doesn't appear to be related to my changes.\n. Thanks for merging. Would be nice to extend this to the decorator as well.\n. It seems the failing test is a false negative. It's complaining about syntax in a coverage.py file?\nI did add a test for this new functionality and it passes locally for me.\n. I updated this (and squashed commit) to have a proper API, so you can do:\nwith freeze_time(initial_datetime) as frozen_datetime:\n        frozen_datetime.tick()\n(please see test for full example)\n. If someone can point me in a direction as to why the build is failing, I'll gladly work on a fix for it: https://travis-ci.org/spulec/freezegun/jobs/85430272 Not sure how to interpret this error as it doesn't appear to be related to my changes.\n. Thanks for merging. Would be nice to extend this to the decorator as well.\n. ",
    "tonyseek": ":smile: \n. :smile: \n. ",
    "mbarrien": "What's the status on this? This solves some issues that's keeping me from upgrading past 0.2.2.\n. What's the status on this? This solves some issues that's keeping me from upgrading past 0.2.2.\n. ",
    "marccerrato": "I need this too. I would be great to listen from @spulec.\nMeanwhile I will be using @jcugat fork.\n. I need this too. I would be great to listen from @spulec.\nMeanwhile I will be using @jcugat fork.\n. ",
    "evenicoulddoit": "+1 please :D\n. +1 please :D\n. ",
    "gertjanol": "+1 please fix/merge this!\n. +1 please fix/merge this!\n. ",
    "adepue": "+1 this is breaking for me as well\n. @mmailhot Opened a PR for fixing this.\n. Thanks!\n. +1 this is breaking for me as well\n. @mmailhot Opened a PR for fixing this.\n. Thanks!\n. ",
    "droanr": "+1 this breaks.\n. +1 this breaks.\n. ",
    "tomo-otsuka": "+1\n. +1\n. ",
    "ibiternas": "+1\n. +1\n. ",
    "olivierlefloch": "Can we get a release for this please? cc @spulec Thanks!\n. Thanks a lot! (and thanks for the ping :) )\n. Can we get a release for this please? cc @spulec Thanks!\n. Thanks a lot! (and thanks for the ping :) )\n. ",
    "peterbe": "FYI, upgrading to 0.3.6 solved this for me. So I guess that answers @olivierlefloch's question :)\n. FYI, upgrading to 0.3.6 solved this for me. So I guess that answers @olivierlefloch's question :)\n. ",
    "JanMalte": "0.3.6 didn't solved it for me. As soon as I have cffi installed, the tests of my project fail with the following exception:\nTraceback (most recent call last):\n  File \"/project/env/lib/python3.4/site-packages/django_dynamic_fixture/ddf.py\", line 539, in get\n    self._save_the_instance(instance)\n  File \"/project/env/lib/python3.4/site-packages/django_dynamic_fixture/ddf.py\", line 515, in _save_the_instance\n    instance.save()\n  File \"/project/project/project/models.py\", line 32, in save\n    self.created_date = timezone.now()\n  File \"/project/env/lib/python3.4/site-packages/django/utils/timezone.py\", line 322, in now\n    return datetime.utcnow().replace(tzinfo=utc)\n  File \"/project/env/lib/python3.4/site-packages/freezegun/api.py\", line 191, in utcnow\n    result = cls._time_to_freeze()\n  File \"/project/env/lib/python3.4/site-packages/freezegun/api.py\", line 196, in _time_to_freeze\n    return cls.times_to_freeze[-1]()\nIndexError: list index out of range\n. It seems like it is fixed in cffi, but there isn't a new release for cffi yet. The fix is only available in the git repository of cffi.\n. +1\n. Seems like it won't be fixed in cffi and therefor a fix must be provided by freezegun\nhttps://bitbucket.org/cffi/cffi/issues/250/integers-as-keys-in-module\nA PR already exists for a fix in freezegun: https://github.com/spulec/freezegun/pull/127\n. Please merge this PR as the error won't be fixed in cffi (see #126 )\n. 0.3.6 didn't solved it for me. As soon as I have cffi installed, the tests of my project fail with the following exception:\nTraceback (most recent call last):\n  File \"/project/env/lib/python3.4/site-packages/django_dynamic_fixture/ddf.py\", line 539, in get\n    self._save_the_instance(instance)\n  File \"/project/env/lib/python3.4/site-packages/django_dynamic_fixture/ddf.py\", line 515, in _save_the_instance\n    instance.save()\n  File \"/project/project/project/models.py\", line 32, in save\n    self.created_date = timezone.now()\n  File \"/project/env/lib/python3.4/site-packages/django/utils/timezone.py\", line 322, in now\n    return datetime.utcnow().replace(tzinfo=utc)\n  File \"/project/env/lib/python3.4/site-packages/freezegun/api.py\", line 191, in utcnow\n    result = cls._time_to_freeze()\n  File \"/project/env/lib/python3.4/site-packages/freezegun/api.py\", line 196, in _time_to_freeze\n    return cls.times_to_freeze[-1]()\nIndexError: list index out of range\n. It seems like it is fixed in cffi, but there isn't a new release for cffi yet. The fix is only available in the git repository of cffi.\n. +1\n. Seems like it won't be fixed in cffi and therefor a fix must be provided by freezegun\nhttps://bitbucket.org/cffi/cffi/issues/250/integers-as-keys-in-module\nA PR already exists for a fix in freezegun: https://github.com/spulec/freezegun/pull/127\n. Please merge this PR as the error won't be fixed in cffi (see #126 )\n. ",
    "ben-davis": "@JanMalte did you manage to fix this?\n. @JanMalte did you manage to fix this?\n. ",
    "skakri": "@spulec when can we expect a new release? Not a big fan of outdated dependencies (i.e cryptography) nor istalling dependencies from git master. :)\n. @spulec when can we expect a new release? Not a big fan of outdated dependencies (i.e cryptography) nor istalling dependencies from git master. :)\n. ",
    "allardhoeve": "Yes, a release would be appreciated.\n. Yes, a release would be appreciated.\n. ",
    "felliott": "Never mind, just saw the closed issue.  Sorry for the noise!\nCheers,\nFitz\n. Oops, this is still broken.  The error is in (or is also in) this line which is not in the try/catch block.  Calling dir(module) on _cffi_backend._extern_py causes the crash.   Please let me know if I can provide any other information.  Thank you!\nCheers,\nFitz\n. Never mind, just saw the closed issue.  Sorry for the noise!\nCheers,\nFitz\n. Oops, this is still broken.  The error is in (or is also in) this line which is not in the try/catch block.  Calling dir(module) on _cffi_backend._extern_py causes the crash.   Please let me know if I can provide any other information.  Thank you!\nCheers,\nFitz\n. ",
    "sfontana": "Also affected by this issue\n. Also affected by this issue\n. ",
    "Adaptification": "+1 Even if it is an upstream bug, it would be nice if freezegun worked around the bug by itself until it was fixed.\n. +1 Even if it is an upstream bug, it would be nice if freezegun worked around the bug by itself until it was fixed.\n. ",
    "thinkt4nk": "+1\n. +1\n. ",
    "kdeldycke": "CFFI seems to have been fixed: https://bitbucket.org/cffi/cffi/issues/250/integers-as-keys-in-module\n. As a result a simple requirement of cffi > 1.5.2 should be enough to close this issue.\n. CFFI seems to have been fixed: https://bitbucket.org/cffi/cffi/issues/250/integers-as-keys-in-module\n. As a result a simple requirement of cffi > 1.5.2 should be enough to close this issue.\n. ",
    "eisensheng": "I would suggest to use the following snippet to fill module_attributes in order to fix this issue since it handles non string type keys more gracefully.\npython\n[k for k in module.__dict__.keys() if isinstance(k, str)]\nIt's beyond me why cffi won't fix the issue. They're stretching the definition of module global keys. \n. I would suggest to use the following snippet to fill module_attributes in order to fix this issue since it handles non string type keys more gracefully.\npython\n[k for k in module.__dict__.keys() if isinstance(k, str)]\nIt's beyond me why cffi won't fix the issue. They're stretching the definition of module global keys. \n. ",
    "frgtn": "I think #125 fixes this but hasn't been released yet.\n. @asyschikov there is also #126 that deals with dir() when module members can't be compared.\n. I think #125 fixes this but hasn't been released yet.\n. @asyschikov there is also #126 that deals with dir() when module members can't be compared.\n. ",
    "asyschikov": "@frgtn Great! Interesting, I was also having troubles with cryptography (more specifically with underlying cffi). \n. @frgtn Great! Interesting, I was also having troubles with cryptography (more specifically with underlying cffi). \n. ",
    "lamby": "No problem. Feel like making a new release? :)\n. :+1: \n. I was testing something based on relative times (a cron-ish type thing...) so it would express the intention of the test far, far better and more succinctly to specify the timedelta rather than calculate the values. Please could you reconsider? :). Sure\u2026 however, I'm seeing a bunch of test failures already so probably isn't a good time to add tests:\n```\nrm -f .coverage\nnosetests  ./tests/\n........FF.........S....FFF.......F...S...S..FF.F........F............SSS..\n======================================================================\nFAIL: tests.test_class_import.test_import_localtime\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(self.arg)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 451, in wrapper\n    result = func(args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/tests/test_class_import.py\", line 83, in test_import_localtime\n    assert struct.tm_mday == 14\nAssertionError: \n    time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1) = fake_localtime_function()\n    assert time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1).tm_year == 2012\n    assert time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1).tm_mon == 1\n\n\nassert time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1).tm_mday == 14\n\n\n======================================================================\nFAIL: tests.test_class_import.test_import_time\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(self.arg)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 451, in wrapper\n    result = func(args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/tests/test_class_import.py\", line 39, in test_import_time\n    assert fake_time_function() == expected_timestamp\nAssertionError: \n    FakeDatetime(2012, 1, 14, 0, 0) = .(2012, 1, 14)\n    FakeDatetime(2012, 1, 14, 12, 0) = FakeDatetime(2012, 1, 14, 0, 0) - .timedelta(seconds=.timezone)\n    1326495600.0 = .mktime(FakeDatetime(2012, 1, 14, 12, 0).timetuple())\n\n\nassert fake_time_function() == 1326495600.0\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_simple_api\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 48, in test_simple_api\n    assert time.time() == expected_timestamp\nAssertionError: \n    freezer.start()\n\n\nassert .() == 1326495600.0\n    assert ..now() == .(2012, 1, 14)\n    assert ..utcnow() == .(2012, 1, 14)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_tz_offset\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 75, in test_tz_offset\n    assert time.time() == expected_timestamp\nAssertionError: \n    freezer.start()\n    assert ..now() == .(2012, 1, 13, 23, 21, 34)\n    assert ..utcnow() == .(2012, 1, 14, 3, 21, 34)\n\n\nassert .() == 1326507694.0\n    freezer.stop()\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_tz_offset_with_today\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 84, in test_tz_offset_with_today\n    assert datetime.date.today() != datetime.date(2012, 1, 13)\nAssertionError: \n    freezer.start()\n    assert .date.today() == .date(2012, 1, 13)\n    freezer.stop()\n\n\nassert .date.today() != .date(2012, 1, 13)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_time_localtime\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 189, in test_time_localtime\n    assert time.localtime().tm_year != 2012\nAssertionError: \n\n\nassert .localtime().tm_year != 2012\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_nested_context_manager\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 331, in test_nested_context_manager\n    _assert_datetime_date_and_time_are_all_equal(datetime.datetime(2012, 12, 25))\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 341, in _assert_datetime_date_and_time_are_all_equal\n    assert timezone_adjusted_datetime == expected_datetime\nAssertionError: \n    assert .date.today() == FakeDatetime(2012, 12, 25, 0, 0).date()\n    FakeDatetime(2012, 12, 25, 13, 0) = ..fromtimestamp(.())\n    FakeDatetime(2012, 12, 25, 1, 0) = FakeDatetime(2012, 12, 25, 13, 0) + .timedelta(seconds=.timezone)\n\n\nassert FakeDatetime(2012, 12, 25, 1, 0) == FakeDatetime(2012, 12, 25, 0, 0)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_nested_context_manager_with_tz_offsets\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 352, in test_nested_context_manager_with_tz_offsets\n    assert datetime.datetime.now() > datetime.datetime(2013, 1, 1)\nAssertionError: \n\n\nassert ..now() > .(2013, 1, 1)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_min_and_max\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 455, in test_min_and_max\n    assert datetime.datetime.min.class != real_datetime\nAssertionError: \n    assert ..max.class == FakeDatetime\n    assert .date.min.class == FakeDate\n    assert .date.max.class == FakeDate\n\n\nassert ..min.class != real_datetime\n    assert ..max.class != real_datetime\n    assert .date.min.class != real_date\n\n\n======================================================================\nFAIL: tests.test_import_alias.test_time_alias\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(self.arg)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 451, in wrapper\n    result = func(args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/tests/test_import_alias.py\", line 13, in test_time_alias\n    assert time_aliased() == 0.0\nAssertionError: \n\n\nassert time_aliased() == 0.0\n\n\nName            Stmts   Miss  Cover   Missing\nfreezegun           8      0   100% \nfreezegun.api     323     22    93%   21-22, 54, 66, 218, 227, 242-243, 246, 269, 318, 339, 427, 429, 435-437, 466-467, 485-487, 506-507\n\nTOTAL             331     22    93%\nRan 75 tests in -160132982.942s\nFAILED (SKIP=6, failures=10)\nMakefile:8: recipe for target 'test' failed\nmake: *** [test] Error 1```. @spulec \n\nAre you on master?\n\nYes.\nIf I use tox I get a recursion issue:\nGLOB sdist-make: /home/lamby/git/forks/freezegun/setup.py\npy26 create: /home/lamby/git/forks/freezegun/.tox/py26\nERROR: InterpreterNotFound: python2.6\npy27 inst-nodeps: /home/lamby/git/forks/freezegun/.tox/dist/freezegun-0.3.8.zip\npy27 installed: appdirs==1.4.0,coverage==3.7.1,coveralls==1.1,docopt==0.6.2,freezegun==0.3.8,funcsigs==1.0.2,mock==2.0.0,nose==1.3.7,packaging==16.8,pbr==1.10.0,pyparsing==2.1.10,python-dateutil==2.6.0,requests==2.13.0,six==1.10.0\npy27 runtests: PYTHONHASHSEED='3342122603'\npy27 runtests: commands[0] | make test NOSE_ARGS=\nrm -f .coverage\nnosetests  ./tests/\n..........F...........S....FFF........F...S...S..FF.F........F..................EEEEETraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/bin/nosetests\", line 11, in <module>\n    sys.exit(run_exit())\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/local/lib/python2.7/site-packages/nose/core.py\", line 121, in __init__\n    **extra_args)\n  File \"/usr/lib/python2.7/unittest/main.py\", line 95, in __init__\n    self.runTests()\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/local/lib/python2.7/site-packages/nose/core.py\", line 207, in runTests\n    result = self.testRunner.run(self.test)\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/local/lib/python2.7/site-packages/nose/core.py\", line 65, in run\n    stop = time.time()\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 57, in __call__\n    return calendar.timegm(current_time.timetuple()) + current_time.microsecond / 1000000.0\n  File \"/usr/lib/python2.7/calendar.py\", line 614, in timegm\n    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\nRuntimeError: maximum recursion depth exceeded while calling a Python object\nMakefile:8: recipe for target 'test' failed\nmake: *** [test] Error 1\nERROR: InvocationError: '/usr/bin/make test NOSE_ARGS='\npypy create: /home/lamby/git/forks/freezegun/.tox/pypy\nERROR: InterpreterNotFound: pypy\npy32 create: /home/lamby/git/forks/freezegun/.tox/py32\nERROR: InterpreterNotFound: python3.2\npy33 create: /home/lamby/git/forks/freezegun/.tox/py33\nERROR: InterpreterNotFound: python3.3\npy34 create: /home/lamby/git/forks/freezegun/.tox/py34\nERROR: InterpreterNotFound: python3.4\npypy3 create: /home/lamby/git/forks/freezegun/.tox/pypy3\nERROR: InterpreterNotFound: pypy3\n___________________________________ summary ____________________________________\nERROR:   py26: InterpreterNotFound: python2.6\nERROR:   py27: commands failed\nERROR:   pypy: InterpreterNotFound: pypy\nERROR:   py32: InterpreterNotFound: python3.2\nERROR:   py33: InterpreterNotFound: python3.3\nERROR:   py34: InterpreterNotFound: python3.4\nERROR:   pypy3: InterpreterNotFound: pypy\nAny ideas?\n. Ah, okay. Feel free to close :). No problem. Feel like making a new release? :)\n. :+1: \n. I was testing something based on relative times (a cron-ish type thing...) so it would express the intention of the test far, far better and more succinctly to specify the timedelta rather than calculate the values. Please could you reconsider? :). Sure\u2026 however, I'm seeing a bunch of test failures already so probably isn't a good time to add tests:\n```\nrm -f .coverage\nnosetests  ./tests/\n........FF.........S....FFF.......F...S...S..FF.F........F............SSS..\n======================================================================\nFAIL: tests.test_class_import.test_import_localtime\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(self.arg)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 451, in wrapper\n    result = func(args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/tests/test_class_import.py\", line 83, in test_import_localtime\n    assert struct.tm_mday == 14\nAssertionError: \n    time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1) = fake_localtime_function()\n    assert time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1).tm_year == 2012\n    assert time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1).tm_mon == 1\n\n\nassert time.struct_time(tm_year=2012, tm_mon=1, tm_mday=15, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=6, tm_yday=15, tm_isdst=-1).tm_mday == 14\n\n\n======================================================================\nFAIL: tests.test_class_import.test_import_time\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(self.arg)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 451, in wrapper\n    result = func(args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/tests/test_class_import.py\", line 39, in test_import_time\n    assert fake_time_function() == expected_timestamp\nAssertionError: \n    FakeDatetime(2012, 1, 14, 0, 0) = .(2012, 1, 14)\n    FakeDatetime(2012, 1, 14, 12, 0) = FakeDatetime(2012, 1, 14, 0, 0) - .timedelta(seconds=.timezone)\n    1326495600.0 = .mktime(FakeDatetime(2012, 1, 14, 12, 0).timetuple())\n\n\nassert fake_time_function() == 1326495600.0\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_simple_api\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 48, in test_simple_api\n    assert time.time() == expected_timestamp\nAssertionError: \n    freezer.start()\n\n\nassert .() == 1326495600.0\n    assert ..now() == .(2012, 1, 14)\n    assert ..utcnow() == .(2012, 1, 14)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_tz_offset\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 75, in test_tz_offset\n    assert time.time() == expected_timestamp\nAssertionError: \n    freezer.start()\n    assert ..now() == .(2012, 1, 13, 23, 21, 34)\n    assert ..utcnow() == .(2012, 1, 14, 3, 21, 34)\n\n\nassert .() == 1326507694.0\n    freezer.stop()\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_tz_offset_with_today\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 84, in test_tz_offset_with_today\n    assert datetime.date.today() != datetime.date(2012, 1, 13)\nAssertionError: \n    freezer.start()\n    assert .date.today() == .date(2012, 1, 13)\n    freezer.stop()\n\n\nassert .date.today() != .date(2012, 1, 13)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_time_localtime\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 189, in test_time_localtime\n    assert time.localtime().tm_year != 2012\nAssertionError: \n\n\nassert .localtime().tm_year != 2012\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_nested_context_manager\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 331, in test_nested_context_manager\n    _assert_datetime_date_and_time_are_all_equal(datetime.datetime(2012, 12, 25))\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 341, in _assert_datetime_date_and_time_are_all_equal\n    assert timezone_adjusted_datetime == expected_datetime\nAssertionError: \n    assert .date.today() == FakeDatetime(2012, 12, 25, 0, 0).date()\n    FakeDatetime(2012, 12, 25, 13, 0) = ..fromtimestamp(.())\n    FakeDatetime(2012, 12, 25, 1, 0) = FakeDatetime(2012, 12, 25, 13, 0) + .timedelta(seconds=.timezone)\n\n\nassert FakeDatetime(2012, 12, 25, 1, 0) == FakeDatetime(2012, 12, 25, 0, 0)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_nested_context_manager_with_tz_offsets\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 352, in test_nested_context_manager_with_tz_offsets\n    assert datetime.datetime.now() > datetime.datetime(2013, 1, 1)\nAssertionError: \n\n\nassert ..now() > .(2013, 1, 1)\n\n\n======================================================================\nFAIL: tests.test_datetimes.test_min_and_max\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(*self.arg)\n  File \"/home/lamby/git/forks/freezegun/tests/test_datetimes.py\", line 455, in test_min_and_max\n    assert datetime.datetime.min.class != real_datetime\nAssertionError: \n    assert ..max.class == FakeDatetime\n    assert .date.min.class == FakeDate\n    assert .date.max.class == FakeDate\n\n\nassert ..min.class != real_datetime\n    assert ..max.class != real_datetime\n    assert .date.min.class != real_date\n\n\n======================================================================\nFAIL: tests.test_import_alias.test_time_alias\n\nTraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.venv/lib/python2.7/site-packages/nose/case.py\", line 197, in runTest\n    self.test(self.arg)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 451, in wrapper\n    result = func(args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/tests/test_import_alias.py\", line 13, in test_time_alias\n    assert time_aliased() == 0.0\nAssertionError: \n\n\nassert time_aliased() == 0.0\n\n\nName            Stmts   Miss  Cover   Missing\nfreezegun           8      0   100% \nfreezegun.api     323     22    93%   21-22, 54, 66, 218, 227, 242-243, 246, 269, 318, 339, 427, 429, 435-437, 466-467, 485-487, 506-507\n\nTOTAL             331     22    93%\nRan 75 tests in -160132982.942s\nFAILED (SKIP=6, failures=10)\nMakefile:8: recipe for target 'test' failed\nmake: *** [test] Error 1```. @spulec \n\nAre you on master?\n\nYes.\nIf I use tox I get a recursion issue:\nGLOB sdist-make: /home/lamby/git/forks/freezegun/setup.py\npy26 create: /home/lamby/git/forks/freezegun/.tox/py26\nERROR: InterpreterNotFound: python2.6\npy27 inst-nodeps: /home/lamby/git/forks/freezegun/.tox/dist/freezegun-0.3.8.zip\npy27 installed: appdirs==1.4.0,coverage==3.7.1,coveralls==1.1,docopt==0.6.2,freezegun==0.3.8,funcsigs==1.0.2,mock==2.0.0,nose==1.3.7,packaging==16.8,pbr==1.10.0,pyparsing==2.1.10,python-dateutil==2.6.0,requests==2.13.0,six==1.10.0\npy27 runtests: PYTHONHASHSEED='3342122603'\npy27 runtests: commands[0] | make test NOSE_ARGS=\nrm -f .coverage\nnosetests  ./tests/\n..........F...........S....FFF........F...S...S..FF.F........F..................EEEEETraceback (most recent call last):\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/bin/nosetests\", line 11, in <module>\n    sys.exit(run_exit())\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/local/lib/python2.7/site-packages/nose/core.py\", line 121, in __init__\n    **extra_args)\n  File \"/usr/lib/python2.7/unittest/main.py\", line 95, in __init__\n    self.runTests()\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/local/lib/python2.7/site-packages/nose/core.py\", line 207, in runTests\n    result = self.testRunner.run(self.test)\n  File \"/home/lamby/git/forks/freezegun/.tox/py27/local/lib/python2.7/site-packages/nose/core.py\", line 65, in run\n    stop = time.time()\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 57, in __call__\n    return calendar.timegm(current_time.timetuple()) + current_time.microsecond / 1000000.0\n  File \"/usr/lib/python2.7/calendar.py\", line 614, in timegm\n    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\n  File \"/home/lamby/git/forks/freezegun/freezegun/api.py\", line 122, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\nRuntimeError: maximum recursion depth exceeded while calling a Python object\nMakefile:8: recipe for target 'test' failed\nmake: *** [test] Error 1\nERROR: InvocationError: '/usr/bin/make test NOSE_ARGS='\npypy create: /home/lamby/git/forks/freezegun/.tox/pypy\nERROR: InterpreterNotFound: pypy\npy32 create: /home/lamby/git/forks/freezegun/.tox/py32\nERROR: InterpreterNotFound: python3.2\npy33 create: /home/lamby/git/forks/freezegun/.tox/py33\nERROR: InterpreterNotFound: python3.3\npy34 create: /home/lamby/git/forks/freezegun/.tox/py34\nERROR: InterpreterNotFound: python3.4\npypy3 create: /home/lamby/git/forks/freezegun/.tox/pypy3\nERROR: InterpreterNotFound: pypy3\n___________________________________ summary ____________________________________\nERROR:   py26: InterpreterNotFound: python2.6\nERROR:   py27: commands failed\nERROR:   pypy: InterpreterNotFound: pypy\nERROR:   py32: InterpreterNotFound: python3.2\nERROR:   py33: InterpreterNotFound: python3.3\nERROR:   py34: InterpreterNotFound: python3.4\nERROR:   pypy3: InterpreterNotFound: pypy\nAny ideas?\n. Ah, okay. Feel free to close :). ",
    "WhyNotHugo": "Any updated on this? We're seeing some breakage downstream because of this issue.. Any updated on this? We're seeing some breakage downstream because of this issue.. ",
    "nebulans": "New release would be really useful for me\n. New release would be really useful for me\n. ",
    "JDiPierro": "@nebulans FYI in case you don't know: You can specify a specific commit in your requirements.pip file. We've got this for freezegun right now:\n-e git+git@github.com:spulec/freezegun.git@e79c0fbf1cbd722201f7997b20559f79f3810d3b#egg=freezegun\nThough a new release would really make sense considering the severity of this bug...\n. @nebulans FYI in case you don't know: You can specify a specific commit in your requirements.pip file. We've got this for freezegun right now:\n-e git+git@github.com:spulec/freezegun.git@e79c0fbf1cbd722201f7997b20559f79f3810d3b#egg=freezegun\nThough a new release would really make sense considering the severity of this bug...\n. ",
    "toxinu": "My previous tests were with:\n- Python: 3.4.4\n- Pytz: 2016.4\n- Freezegun: 0.3.7\nWith Python: 2.7.11+:\n``` python\nimport pytz\nfrom datetime import datetime\nfrom freezegun import freeze_time\nWith freezegun\nwith freeze_time('2015-12-10 08:00:00'):\n    d = datetime.utcnow().replace(tzinfo=pytz.UTC)\n    # d.tzinfo is empty\n    d.astimezone()\nTypeError: astimezone() takes exactly 2 arguments (1 given)\nWithout freezegun\nd = datetime.utcnow().replace(tzinfo=pytz.UTC)\nd.astimezone()\nTypeError: Required argument 'tz' (pos 1) not found\n``\n. My previous tests were with:\n- Python:3.4.4- Pytz:2016.4- Freezegun:0.3.7`\nWith Python: 2.7.11+:\n``` python\nimport pytz\nfrom datetime import datetime\nfrom freezegun import freeze_time\nWith freezegun\nwith freeze_time('2015-12-10 08:00:00'):\n    d = datetime.utcnow().replace(tzinfo=pytz.UTC)\n    # d.tzinfo is empty\n    d.astimezone()\nTypeError: astimezone() takes exactly 2 arguments (1 given)\nWithout freezegun\nd = datetime.utcnow().replace(tzinfo=pytz.UTC)\nd.astimezone()\nTypeError: Required argument 'tz' (pos 1) not found\n```\n. ",
    "sheepsy90": "Added pull request. @spulec What about this pull request - i kind of need the functionality i added a lot - might be useful for others as well. Added pull request. @spulec What about this pull request - i kind of need the functionality i added a lot - might be useful for others as well. ",
    "jurriaan": "The ignore option should make sure the specified modules can access the original time/datetime methods. Currently it only works for datetime.\nI wanted the ignore option to work for modules that use the time module, so that these modules can call the original time.time method. This currently doesn't work, because it's not the time module that's patched, but rather the individual methods of this module. That means that, since the time module is shared among all modules using it, it's also being patched for modules specified in the ignore option of freeze_time.\n. The ignore option should make sure the specified modules can access the original time/datetime methods. Currently it only works for datetime.\nI wanted the ignore option to work for modules that use the time module, so that these modules can call the original time.time method. This currently doesn't work, because it's not the time module that's patched, but rather the individual methods of this module. That means that, since the time module is shared among all modules using it, it's also being patched for modules specified in the ignore option of freeze_time.\n. ",
    "joac": "@spulec FYI\n. @spulec FYI\n. ",
    "xeor": "@spulec will you release this in a new version soon? v0.3.7 doesnt contain this.. Thanks :)\n. @spulec will you release this in a new version soon? v0.3.7 doesnt contain this.. Thanks :)\n. ",
    "ghost": "It's in the freezegun readme\nhttps://github.com/spulec/freezegun#moving-time-to-specify-datetime\nIt's also in the source on GitHub, actually. Just not on PyPI.\nhttps://github.com/spulec/freezegun/blob/master/freezegun/api.py#L280\n. Ah, alright. Thanks for the help!\n. It's in the freezegun readme\nhttps://github.com/spulec/freezegun#moving-time-to-specify-datetime\nIt's also in the source on GitHub, actually. Just not on PyPI.\nhttps://github.com/spulec/freezegun/blob/master/freezegun/api.py#L280\n. Ah, alright. Thanks for the help!\n. ",
    "ezarowny": "Bumping this. Can you push a release to PyPI?\n. Bumping this. Can you push a release to PyPI?\n. ",
    "sebatyler": "@spulec Do you have a plan to release for this PR?\n. @spulec Do you have a plan to release for this PR?\n. ",
    "leonsas": "No it doesn't:\npython\nIn [6]: dir(py.test.cmdline)\nOut[6]:\n['__class__',\n '__delattr__',\n '__doc__',\n '__format__',\n '__getattribute__',\n '__hash__',\n '__init__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__']\n. No it doesn't:\npython\nIn [6]: dir(py.test.cmdline)\nOut[6]:\n['__class__',\n '__delattr__',\n '__doc__',\n '__format__',\n '__getattribute__',\n '__hash__',\n '__init__',\n '__new__',\n '__reduce__',\n '__reduce_ex__',\n '__repr__',\n '__setattr__',\n '__sizeof__',\n '__str__',\n '__subclasshook__']\n. ",
    "poulainv": "Same issue! Any idea?\n. Same issue! Any idea?\n. ",
    "firlevapz": "I just ran freeze_time with Django 1.11 and python 3.5 and it gives me exactly the same problem with py.test and py.test.cmdline are None.\nIt works when calling it with @freeze_time('2016-05-05', ignore=['py.test']). I just ran freeze_time with Django 1.11 and python 3.5 and it gives me exactly the same problem with py.test and py.test.cmdline are None.\nIt works when calling it with @freeze_time('2016-05-05', ignore=['py.test']). ",
    "remcohaszing": "Sorry, turns out it was a bug in my own code. Everything works as expected.\n. I must have done something wrong when I encountered this issue. Can't reproduce it myself.. Sorry, turns out it was a bug in my own code. Everything works as expected.\n. I must have done something wrong when I encountered this issue. Can't reproduce it myself.. ",
    "romuald": "I don't seem to have this issue, as uuid1 does not seems to be patched by freezegun at all (always return the current time)\n(your test passes)\n\npython 2.7\nfreezegun 0.3.7 and 0.3.8\n\nedit that's because my python is using the system's (Linux) uuid_generate_time and not its own version. I've created a new test module since I'm not sure where the correct place was. I don't seem to have this issue, as uuid1 does not seems to be patched by freezegun at all (always return the current time)\n(your test passes)\n\npython 2.7\nfreezegun 0.3.7 and 0.3.8\n\nedit that's because my python is using the system's (Linux) uuid_generate_time and not its own version. I've created a new test module since I'm not sure where the correct place was. ",
    "AndreasBackx": "@spulec could a new release be published to Pypi that includes this and the other new changes? We're currently using the latest commit for testing because of this bug.. @spulec could a new release be published to Pypi that includes this and the other new changes? We're currently using the latest commit for testing because of this bug.. ",
    "flokli": "Also got bitten by this one. I'm not sure whether it's feasible for freezegun to walk through imported django models, check for default attributes and replace them with methods of FakeDatetime (and the reverse when exiting the context), but this would be a way how to fix it.\n. Also got bitten by this one. I'm not sure whether it's feasible for freezegun to walk through imported django models, check for default attributes and replace them with methods of FakeDatetime (and the reverse when exiting the context), but this would be a way how to fix it.\n. ",
    "romgar": "AFAIK, this is not a freezegun issue but a Django behaviour.\nauto_now_add and auto_now fields are relying on pre_save signals to update the value of the field.\nWhile this pre_save signal is emitted when using save() on the instance, it is not emitted when using update(), which explains why this field is not updated.\nYou can also test by removing your freeze_time call and see that the updated_datetime field has not been updated anyway.. AFAIK, this is not a freezegun issue but a Django behaviour.\nauto_now_add and auto_now fields are relying on pre_save signals to update the value of the field.\nWhile this pre_save signal is emitted when using save() on the instance, it is not emitted when using update(), which explains why this field is not updated.\nYou can also test by removing your freeze_time call and see that the updated_datetime field has not been updated anyway.. ",
    "elcolie": "Thank you I will check it again as soon as possible. Me too. No worry I will reopen it again if I found another information. Thank you very much.. No idea. OSX 10.12.2 should not bother this case.. @sliverc\nI do not understand. How do you use it suppose I want to solve the waring in #190 \n. @sliverc \nGithub acts strange on my comment. Markup does not has a color on then. Neitherpython or bash works.\n```pytnon\nfrom poinkbackend.apps.commons.tests import *\nfrom freezegun import freeze_time\nfrom poinkbackend.apps.rewards.models import Reward\nfrom poinkbackend.apps.commons.tests import branches\ndef test_queryset(branches):\n    silom = Branch.objects.filter(name='Silom').first()\n    from django.utils import timezone\n    import datetime\n    with freeze_time(\"2017-11-01 9:30:23\", tz_offset=+7):\n        # Thailand Time\n        mommy.make(Reward, title='Teddy Bear', poink=100, description='Black Bear',\n                   active_date=timezone.now(), expiry=timezone.now() + datetime.timedelta(days=5),\n                   branch=silom)\n    with freeze_time(\"2017-11-03 9:30:23\", tz_offset=+7):\n        today = timezone.now()\n        assert 1 == Reward.objects.filter(expiry__gte=today).count()\nwith freeze_time(\"2017-11-07 9:30:23\", tz_offset=+7):\n    today = timezone.now()\n    assert 0 == Reward.objects.filter(expiry__gte=today).count()\n\ndef test_expired_reward(rewards):\n    \"\"\"Must not be able to get redeem\"\"\"\n    with freeze_time(\"2099-11-01 9:30:23\", tz_offset=+7):\n        assert 0 == Reward.lives.count()\n```\nHere are my warning messges\n```bash\n===================================================================================== test session starts =====================================================================================\nplatform darwin -- Python 3.6.3, pytest-3.2.3, py-1.4.34, pluggy-0.4.0 -- /Users/sarit/.pyenv/versions/3.6.3/envs/poink/bin/python\ncachedir: .cache\nDjango settings: poinkbackend.config.settings.local (from ini file)\nrootdir: /Users/sarit/Code/poink, inifile: pytest.ini\nplugins: django-3.1.2\ncollected 2 items\npoinkbackend/apps/rewards/tests.py::test_queryset PASSED\npoinkbackend/apps/rewards/tests.py::test_expired_reward PASSED\n====================================================================================== warnings summary =======================================================================================\npoinkbackend/apps/rewards/tests.py::test_expired_reward\n  /Users/sarit/.pyenv/versions/3.6.3/envs/poink/lib/python3.6/site-packages/django/db/models/fields/init.py:1451: RuntimeWarning: DateTimeField Reward.active_date received a naive datetime (2017-11-01 09:30:23) while time zone support is active.\n    RuntimeWarning)\n  /Users/sarit/.pyenv/versions/3.6.3/envs/poink/lib/python3.6/site-packages/django/db/models/fields/init.py:1451: RuntimeWarning: DateTimeField Reward.expiry received a naive datetime (2017-11-21 09:30:23) while time zone support is active.\n    RuntimeWarning)\n-- Docs: http://doc.pytest.org/en/latest/warnings.html\n============================================================================ 2 passed, 2 warnings in 2.18 seconds =============================================================================\n```\nPlease advise how to do it correct way.. I just change from pytest to Django unittest. Then I can not reproduce this problem. Thank you for your reply. I will try my best to understand it. Thank you. OSX: 10.12.5\n```python\nclass Order(AbstractSoftModelController):\n     ...\nclass AbstractSoftModelController(AbstractSoftDeletionModel, AbstractModelController):\n    \"\"\"\n    Shortcut for mixing Soft Delete and Model Controller\n    \"\"\"\nclass Meta:\n    abstract = True\n\nclass AbstractTimeStampMarker(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=(\"Created at\"))\n    updated_at = models.DateTimeField(auto_now=True, verbose_name=(\"Updated at\"))\nclass Meta:\n    abstract = True\n\nclass AbstractModelController(AbstractTimeStampMarker):\n    created_user = models.ForeignKey(User, related_name=\"%(class)s_created_user\", verbose_name=(\"Created User\"))\n    updated_user = models.ForeignKey(User, related_name=\"%(class)s_updated_user\", verbose_name=(\"Updated User\"))\nclass Meta:\n    abstract = True\n\n```\n```python\npython manage.py showmigrations  --settings=eneos.config.settings.local\norders\n [X] 0001_initial\n [X] 0002_order_suggestion_for_customer\n [X] 0003_auto_20170330_2012\n [X] 0004_order_sales_datetime\n [X] 0005_auto_20170425_2120\n [X] 0006_auto_20170518_1857\n [X] 0007_auto_20170518_2039\n [X] 0008_auto_20170605_2158\n```\nI would like to make sure that I am not missed any migrations.\nbash\npython manage.py makemigrations --settings=eneos.config.settings.local\nHey, I'm Local!\nNo changes detected\n. Hope it will be gone in Django2. Thank you I will check it again as soon as possible. Me too. No worry I will reopen it again if I found another information. Thank you very much.. No idea. OSX 10.12.2 should not bother this case.. @sliverc\nI do not understand. How do you use it suppose I want to solve the waring in #190 \n. @sliverc \nGithub acts strange on my comment. Markup does not has a color on then. Neitherpython or bash works.\n```pytnon\nfrom poinkbackend.apps.commons.tests import *\nfrom freezegun import freeze_time\nfrom poinkbackend.apps.rewards.models import Reward\nfrom poinkbackend.apps.commons.tests import branches\ndef test_queryset(branches):\n    silom = Branch.objects.filter(name='Silom').first()\n    from django.utils import timezone\n    import datetime\n    with freeze_time(\"2017-11-01 9:30:23\", tz_offset=+7):\n        # Thailand Time\n        mommy.make(Reward, title='Teddy Bear', poink=100, description='Black Bear',\n                   active_date=timezone.now(), expiry=timezone.now() + datetime.timedelta(days=5),\n                   branch=silom)\n    with freeze_time(\"2017-11-03 9:30:23\", tz_offset=+7):\n        today = timezone.now()\n        assert 1 == Reward.objects.filter(expiry__gte=today).count()\nwith freeze_time(\"2017-11-07 9:30:23\", tz_offset=+7):\n    today = timezone.now()\n    assert 0 == Reward.objects.filter(expiry__gte=today).count()\n\ndef test_expired_reward(rewards):\n    \"\"\"Must not be able to get redeem\"\"\"\n    with freeze_time(\"2099-11-01 9:30:23\", tz_offset=+7):\n        assert 0 == Reward.lives.count()\n```\nHere are my warning messges\n```bash\n===================================================================================== test session starts =====================================================================================\nplatform darwin -- Python 3.6.3, pytest-3.2.3, py-1.4.34, pluggy-0.4.0 -- /Users/sarit/.pyenv/versions/3.6.3/envs/poink/bin/python\ncachedir: .cache\nDjango settings: poinkbackend.config.settings.local (from ini file)\nrootdir: /Users/sarit/Code/poink, inifile: pytest.ini\nplugins: django-3.1.2\ncollected 2 items\npoinkbackend/apps/rewards/tests.py::test_queryset PASSED\npoinkbackend/apps/rewards/tests.py::test_expired_reward PASSED\n====================================================================================== warnings summary =======================================================================================\npoinkbackend/apps/rewards/tests.py::test_expired_reward\n  /Users/sarit/.pyenv/versions/3.6.3/envs/poink/lib/python3.6/site-packages/django/db/models/fields/init.py:1451: RuntimeWarning: DateTimeField Reward.active_date received a naive datetime (2017-11-01 09:30:23) while time zone support is active.\n    RuntimeWarning)\n  /Users/sarit/.pyenv/versions/3.6.3/envs/poink/lib/python3.6/site-packages/django/db/models/fields/init.py:1451: RuntimeWarning: DateTimeField Reward.expiry received a naive datetime (2017-11-21 09:30:23) while time zone support is active.\n    RuntimeWarning)\n-- Docs: http://doc.pytest.org/en/latest/warnings.html\n============================================================================ 2 passed, 2 warnings in 2.18 seconds =============================================================================\n```\nPlease advise how to do it correct way.. I just change from pytest to Django unittest. Then I can not reproduce this problem. Thank you for your reply. I will try my best to understand it. Thank you. OSX: 10.12.5\n```python\nclass Order(AbstractSoftModelController):\n     ...\nclass AbstractSoftModelController(AbstractSoftDeletionModel, AbstractModelController):\n    \"\"\"\n    Shortcut for mixing Soft Delete and Model Controller\n    \"\"\"\nclass Meta:\n    abstract = True\n\nclass AbstractTimeStampMarker(models.Model):\n    created_at = models.DateTimeField(auto_now_add=True, verbose_name=(\"Created at\"))\n    updated_at = models.DateTimeField(auto_now=True, verbose_name=(\"Updated at\"))\nclass Meta:\n    abstract = True\n\nclass AbstractModelController(AbstractTimeStampMarker):\n    created_user = models.ForeignKey(User, related_name=\"%(class)s_created_user\", verbose_name=(\"Created User\"))\n    updated_user = models.ForeignKey(User, related_name=\"%(class)s_updated_user\", verbose_name=(\"Updated User\"))\nclass Meta:\n    abstract = True\n\n```\n```python\npython manage.py showmigrations  --settings=eneos.config.settings.local\norders\n [X] 0001_initial\n [X] 0002_order_suggestion_for_customer\n [X] 0003_auto_20170330_2012\n [X] 0004_order_sales_datetime\n [X] 0005_auto_20170425_2120\n [X] 0006_auto_20170518_1857\n [X] 0007_auto_20170518_2039\n [X] 0008_auto_20170605_2158\n```\nI would like to make sure that I am not missed any migrations.\nbash\npython manage.py makemigrations --settings=eneos.config.settings.local\nHey, I'm Local!\nNo changes detected\n. Hope it will be gone in Django2. ",
    "gimbo": "I probably should also have mentioned:\n```\n$ pip list\nPackage         Version\n\nflake8          3.2.1\nfreezegun       0.3.8\nmccabe          0.5.3\npg8000          1.10.6 \npip             9.0.1\npsycopg2        2.6.2\npycodestyle     2.2.0\npyflakes        1.3.0\npython-dateutil 2.6.0\nsetuptools      32.3.1 \nsix             1.10.0 \nSQLAlchemy      1.1.4\nwheel           0.29.0 \n```. Demo code repo: https://github.com/gimbo/freezegun_pg8000_bug. I probably should also have mentioned:\n```\n$ pip list\nPackage         Version\n\nflake8          3.2.1\nfreezegun       0.3.8\nmccabe          0.5.3\npg8000          1.10.6 \npip             9.0.1\npsycopg2        2.6.2\npycodestyle     2.2.0\npyflakes        1.3.0\npython-dateutil 2.6.0\nsetuptools      32.3.1 \nsix             1.10.0 \nSQLAlchemy      1.1.4\nwheel           0.29.0 \n```. Demo code repo: https://github.com/gimbo/freezegun_pg8000_bug. ",
    "thilakdesing": "Hey Spulec,\nThere's a workaround using singleton class. However, i got it working by designing the util as below,\nUtil having start freezer at global scope.\nThe same Util having two classes for stopping freeze and starting again.\nThanks,\nThilak\n. Hey Spulec,\nThere's a workaround using singleton class. However, i got it working by designing the util as below,\nUtil having start freezer at global scope.\nThe same Util having two classes for stopping freeze and starting again.\nThanks,\nThilak\n. ",
    "nolanlum": "Any update on merging this PR? I'm also interested in the speedups this provides, but I'm running into a strange bug with the module cache:\n```\nmodule = \ndef _setup_module_cache(module):\n    global _GLOBAL_MODULES_CACHE\n    date_attrs = []\n    all_module_attributes = _get_module_attributes(module)\n    for attribute_name, attribute_value in all_module_attributes:\n        if id(attribute_value) in _real_time_object_ids:\n            date_attrs.append((attribute_name, attribute_value))\n\n\n  _GLOBAL_MODULES_CACHE[module.__name__] = (_get_module_attributes_hash(module), date_attrs)\n\nE       AttributeError: name\n\n/usr/local/lib/python2.7/site-packages/freezegun/api.py:85: AttributeError. Any update on merging this PR? I'm also interested in the speedups this provides, but I'm running into a strange bug with the module cache:\n```\nmodule = \ndef _setup_module_cache(module):\n    global _GLOBAL_MODULES_CACHE\n    date_attrs = []\n    all_module_attributes = _get_module_attributes(module)\n    for attribute_name, attribute_value in all_module_attributes:\n        if id(attribute_value) in _real_time_object_ids:\n            date_attrs.append((attribute_name, attribute_value))\n\n\n  _GLOBAL_MODULES_CACHE[module.__name__] = (_get_module_attributes_hash(module), date_attrs)\n\nE       AttributeError: name\n\n/usr/local/lib/python2.7/site-packages/freezegun/api.py:85: AttributeError. ",
    "ktosiek": "The best way to do this reliably with py.test would be using markers. Something like this: https://docs.pytest.org/en/latest/example/markers.html#marking-platform-specific-tests-with-pytest. Depends on who wants to maintain it.\nI guess a separate plugin would be nice as it would be more explicit (and it's a few instructions added to each test, think of performance! ;-)).\nActually, I might whip something up later today - I've already written that code once, the core should be <50 lines. it's mostly packaging and testing.. Well, that took longer than expected. I have a basic implementation here: https://github.com/ktosiek/pytest-freezetime/blob/master/pytest_freezegun.py. I'll put it on pypi when it's a bit more useful (mostly docs and access to the freezer in tests).. The best way to do this reliably with py.test would be using markers. Something like this: https://docs.pytest.org/en/latest/example/markers.html#marking-platform-specific-tests-with-pytest. Depends on who wants to maintain it.\nI guess a separate plugin would be nice as it would be more explicit (and it's a few instructions added to each test, think of performance! ;-)).\nActually, I might whip something up later today - I've already written that code once, the core should be <50 lines. it's mostly packaging and testing.. Well, that took longer than expected. I have a basic implementation here: https://github.com/ktosiek/pytest-freezetime/blob/master/pytest_freezegun.py. I'll put it on pypi when it's a bit more useful (mostly docs and access to the freezer in tests).. ",
    "sliverc": "markers would certainly be a good idea... question is though whether such should be part of freezegun directly or of a different pytest-freezegun plugin?. @ktosiek \nTested the marker and it works like a charm... Thanks.. @elcolie I don't think your issue has anything to do with pytest. Rather a django issue potentially.\nSee https://docs.djangoproject.com/en/1.11/topics/i18n/timezones/.\nWhat I usually do to create a timezone aware datetime in Django\nfrom django.utils import timezone\nd = timezone.now().replace(year=2017, ...). Not tested but I assume if you create the time you want to freeze with timezone.now() and .replace() as my example above you can pass it on to freeze_time and warning should disappear.\nd = timezone.now().replace(year=2017, ...)\nwith freeze_time(d):\n   .... markers would certainly be a good idea... question is though whether such should be part of freezegun directly or of a different pytest-freezegun plugin?. @ktosiek \nTested the marker and it works like a charm... Thanks.. @elcolie I don't think your issue has anything to do with pytest. Rather a django issue potentially.\nSee https://docs.djangoproject.com/en/1.11/topics/i18n/timezones/.\nWhat I usually do to create a timezone aware datetime in Django\nfrom django.utils import timezone\nd = timezone.now().replace(year=2017, ...). Not tested but I assume if you create the time you want to freeze with timezone.now() and .replace() as my example above you can pass it on to freeze_time and warning should disappear.\nd = timezone.now().replace(year=2017, ...)\nwith freeze_time(d):\n   .... ",
    "brianmay": "This was via Gherkin tests. I have a suspicion I know what is happening, although it is truly weird it only happened randomly - and AFAIK only when testing with selenium/Firefox (never when testing selenium/Chrome).\nWe had a test that did the following:\nWhen I login with user \"schattin\"\nGiven today's date is 2017-04-29 and time is 5:40h\nWhen I login with user \"schattin\"\nThe failure occurred on the first login. So I am guessing somehow freezegun was somehow initialized but never given with a date/time. Which may not be the fault of freezegun, I am not really sure how the components interact.\nThe tests mean while would continue with the second log in, and everything would work fine.\nI removed the first login before the time travel, and it has solved the problem.\n. That first exception is just this:\ntry:\n    modification = kwargs['modification']\nexcept KeyError:\n    modification = timezone.now()\nI would have used an if statement myself, however this isn't my code. Point is however it is not an error here to generate a KeyError exception, but expected behaviour when calling this function without any kwargs.. It looks like to me that start and stop are being called equal times.\nBut: _time_to_freeze is being called before the first start.\nWill try to investigate when/how start is being called.. Oh, yuck. I just changed the code to print \"start.1\" when start is called, and then \"start.2\" when it returns, and \"get\" when _time_to_freeze  is called.  \nI get \"start.1\", \"get\", and \"start.2\" in that order.\nI am assuming that the start function doesn't actually call _time_to_freeze function. Please correct me if I am wrong.\nI am now suspecting a race condition between two threads, that has nothing to do with freezegun. . Oh I think I understand the race condition now (disclaimer: not tested). I think there are a number of factors, none directly related to freezegun. It looks like in running the tests, we have two threads, one to interact with the web browser, and one to handle server stuff from the client.\nthread1 --> browser --> thread2 (http server)\nIn thread1 we login to the web browser. However we don't wait for a response. We then execute the next step, which is to freeze the datetime. At this stage the browser gets around to issuing the request to login, and the request is placed and processed in thread2 while thread1 is still busy freezing the time.\n. I don't think there is any point keeping this bug open. Closing.. This was via Gherkin tests. I have a suspicion I know what is happening, although it is truly weird it only happened randomly - and AFAIK only when testing with selenium/Firefox (never when testing selenium/Chrome).\nWe had a test that did the following:\nWhen I login with user \"schattin\"\nGiven today's date is 2017-04-29 and time is 5:40h\nWhen I login with user \"schattin\"\nThe failure occurred on the first login. So I am guessing somehow freezegun was somehow initialized but never given with a date/time. Which may not be the fault of freezegun, I am not really sure how the components interact.\nThe tests mean while would continue with the second log in, and everything would work fine.\nI removed the first login before the time travel, and it has solved the problem.\n. That first exception is just this:\ntry:\n    modification = kwargs['modification']\nexcept KeyError:\n    modification = timezone.now()\nI would have used an if statement myself, however this isn't my code. Point is however it is not an error here to generate a KeyError exception, but expected behaviour when calling this function without any kwargs.. It looks like to me that start and stop are being called equal times.\nBut: _time_to_freeze is being called before the first start.\nWill try to investigate when/how start is being called.. Oh, yuck. I just changed the code to print \"start.1\" when start is called, and then \"start.2\" when it returns, and \"get\" when _time_to_freeze  is called.  \nI get \"start.1\", \"get\", and \"start.2\" in that order.\nI am assuming that the start function doesn't actually call _time_to_freeze function. Please correct me if I am wrong.\nI am now suspecting a race condition between two threads, that has nothing to do with freezegun. . Oh I think I understand the race condition now (disclaimer: not tested). I think there are a number of factors, none directly related to freezegun. It looks like in running the tests, we have two threads, one to interact with the web browser, and one to handle server stuff from the client.\nthread1 --> browser --> thread2 (http server)\nIn thread1 we login to the web browser. However we don't wait for a response. We then execute the next step, which is to freeze the datetime. At this stage the browser gets around to issuing the request to login, and the request is placed and processed in thread2 while thread1 is still busy freezing the time.\n. I don't think there is any point keeping this bug open. Closing.. ",
    "kaztai": "Thank you for your response.\nFor the above sample,\ntest_nooffset is when tz_offset is not specified.\ntest_offset is when tz_offset is specified.\nAssertionError will occur in two places when you run the test.\nfreeze_time(\"2017-01-01 00:00:00\", tz_offset=9)\nWhen writing, I understand that the time string is UTC and that the time zone of local time is +9:00.\nIn that case, datetime.now() and datetime.now(JST) should be equal.\nAnd datetime.now(UTC) and datetime.utcnow() should always be equal.\nHowever, the results of the test are different.. Thank you for your response.\nFor the above sample,\ntest_nooffset is when tz_offset is not specified.\ntest_offset is when tz_offset is specified.\nAssertionError will occur in two places when you run the test.\nfreeze_time(\"2017-01-01 00:00:00\", tz_offset=9)\nWhen writing, I understand that the time string is UTC and that the time zone of local time is +9:00.\nIn that case, datetime.now() and datetime.now(JST) should be equal.\nAnd datetime.now(UTC) and datetime.utcnow() should always be equal.\nHowever, the results of the test are different.. ",
    "rodude123": "I think it should accept both I have tried both and both work fine. I think it should accept both I have tried both and both work fine. ",
    "korkmaz": "@remcohaszing startswith already does that.\nsee the documentation.\n```\nstr.startswith(prefix[, start[, end]])\nReturn True if string starts with the prefix, otherwise return False. prefix can also be a tuple of prefixes to look for. With optional start, test string beginning at that position. With optional end, stop comparing string at that position.\nChanged in version 2.5: Accept tuples as prefix.\n``\nhttps://docs.python.org/2/library/stdtypes.html#str.startswith\nhttps://docs.python.org/3/library/stdtypes.html#str.startswith\n. @remcohaszingstartswith` already does that.\nsee the documentation.\n```\nstr.startswith(prefix[, start[, end]])\nReturn True if string starts with the prefix, otherwise return False. prefix can also be a tuple of prefixes to look for. With optional start, test string beginning at that position. With optional end, stop comparing string at that position.\nChanged in version 2.5: Accept tuples as prefix.\n```\nhttps://docs.python.org/2/library/stdtypes.html#str.startswith\nhttps://docs.python.org/3/library/stdtypes.html#str.startswith\n. ",
    "dhui": "@spulec Any plans on pushing a new release to PyPi? I'd love to start using this functionality in our tests!. If you'd like another data point, I prefer using the same name. e.g. allow freeze_time() to support generators.. @spulec Any plans on pushing a new release to PyPi? I'd love to start using this functionality in our tests!. If you'd like another data point, I prefer using the same name. e.g. allow freeze_time() to support generators.. ",
    "pomeo92": "Yes its expected manner, but not desired. This makes freezegun completely useless in projects with Amazon. I'll try to change that. Just need time to understand the code of the freezegun. Thanks for response.. Yes its expected manner, but not desired. This makes freezegun completely useless in projects with Amazon. I'll try to change that. Just need time to understand the code of the freezegun. Thanks for response.. ",
    "axper": "I would like to inform that I am also experiencing the same RuntimeWarning in Django.. I would like to inform that I am also experiencing the same RuntimeWarning in Django.. ",
    "sblondon": "As the function generates several differents datetimes, I think it's more explicit with a plural name function.\nThere is no specific needs more than that.\nDon't hesitate to refuse this patch if you're not convinced.. As the function generates several differents datetimes, I think it's more explicit with a plural name function.\nThere is no specific needs more than that.\nDon't hesitate to refuse this patch if you're not convinced.. ",
    "cypreess": "So this was super esoteric. Probably something very very custom to my code.\n1. I run tests from console not from pycharm\n2. I was able to found there in one of the tests some helpful error that happend with code.\n3. Error was connected to the fact I have customized User model with customized username field (I am using email field as username directly), and django-allauth was making some assumptions using ACCOUNT_USER_MODEL_USERNAME_FIELD variable  that was not set properly in my settings.py. Therefore this was failing all my other tests that were creating fake User object using factory_boy app. \n4. This error in almost all other tests for completly unkown and not understandable reasons was raising actually cls.tz_offsets[-1]  IndexError: list index out of range rather than the proper error that happend.\n5. After fixing the settings.py variable all tests went immedietly green without furter investigation.\nSorry for bothering you.. So this was super esoteric. Probably something very very custom to my code.\n1. I run tests from console not from pycharm\n2. I was able to found there in one of the tests some helpful error that happend with code.\n3. Error was connected to the fact I have customized User model with customized username field (I am using email field as username directly), and django-allauth was making some assumptions using ACCOUNT_USER_MODEL_USERNAME_FIELD variable  that was not set properly in my settings.py. Therefore this was failing all my other tests that were creating fake User object using factory_boy app. \n4. This error in almost all other tests for completly unkown and not understandable reasons was raising actually cls.tz_offsets[-1]  IndexError: list index out of range rather than the proper error that happend.\n5. After fixing the settings.py variable all tests went immedietly green without furter investigation.\nSorry for bothering you.. ",
    "awbacker": "This is the output for 4 or 5 different time values I tried using the script fg.py\n like python fg.py \"2088-01-01 01:23:45\"\n```\n 2088-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.171666\n during  : 2088-01-01 02:23:45\n after   : 2088-01-01 02:23:45\n2066-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.362340\n during  : 2066-01-01 02:23:45\n after   : 2066-01-01 02:23:45\n2018-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.510006\n during  : 2018-01-01 02:23:45\n after   : 2018-01-01 02:23:45\n2017-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.652049\n during  : 2017-07-06 14:15:26.652049\n after   : 2017-07-06 14:15:26.671410\n2000-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.792602\n during  : 2017-07-06 14:15:26.792602\n after   : 2017-07-06 14:15:26.808358\n. uuid1() is trying to prevent duplicating the guid, but its not taking into account bad system clocks or our tricks.\n`uuid1()` :\ncurrent = gen_posix_ts\nif current <= last_timestamp:\n    current = last_timestamp +1\nlast_timestamp = current\nreturn new_uuid_using(current)\n``\nSo, there is really no way around this without patching up the uuid1 call (or that module in general) since it is keeping track of things itself.  I think the simplest would simply be to setuuid._last_timestamp = None` on start/stop of freezegun so it doesn't play stupid games like this.\nI am pretty sure that a misbehaving system clock could also land us in hot water here, at least theoretically, so this doesn't look like a real problem with freezegun itself.  . Any chance of getting this (and others?) merged and deploying a 0.4? I can't use it in the current state.. Also, when doing local dev I needed to manually run pip install python-dateutil, its not in requirements.  Not sure if this is intentional.. It \"fakes\" theisinstance(obj, _class) check for the FakeDate class when FakeDate is used as the class argument.  For example:\nisinstance(real_date(2017,1,1), FakeDate) -> True (but its clearly not!)\n\nI suppose you could throw an exception in there or use pdb.set_trace() and see what tests/code causes that to be executed. \nFor a more complete example:\n```\nclass F1(real_date):\n    pass\nclass F2(with_metaclass(FakeDateMeta, real_date)):\n    pass\nf1 = F1(2017, 1, 1)\nf2 = F2(2017, 1, 1)\n\nisinstance(real_date(2017,1,1,), F2): True  # calls F2.metaclass.instancecheck\n  isinstance(real_date(2017,1,1,), F1): False\n  isinstance(f1, F2): True   # calls instancecheck, f1 is a datetime so it passes\n  isinstance(f2, F2): True\n```\n\nOk, I guess that makes sense now that I think about it for a few minutes and read the code... \ud83d\ude1e \nLater on in actually setting up the module we have this:\n```\nChange the modules\ndatetime.datetime = FakeDatetime\ndatetime.date = FakeDate\n```\nSo Freezegun changes the datetime module and inserts itself as the class that gets used when you make a date/datetime, transparently.  Without the __instancecheck__ override I suppose checks like this would always fail (if they had a REAL object not a faked one).  I guess this can happen since its not the first module imported?  Not clear on the mechanics.\n``\nisinstance(my_datetime_obj, datetime.datetime) # false, since that now returns FakeDateTime\n. This is the output for 4 or 5 different time values I tried using the script [fg.py](https://github.com/spulec/freezegun/files/1127787/fg.txt)\n likepython fg.py \"2088-01-01 01:23:45\"`\n```\n 2088-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.171666\n during  : 2088-01-01 02:23:45\n after   : 2088-01-01 02:23:45\n2066-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.362340\n during  : 2066-01-01 02:23:45\n after   : 2066-01-01 02:23:45\n2018-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.510006\n during  : 2018-01-01 02:23:45\n after   : 2018-01-01 02:23:45\n2017-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.652049\n during  : 2017-07-06 14:15:26.652049\n after   : 2017-07-06 14:15:26.671410\n2000-01-01 01:23:45\n\nbefore  : 2017-07-06 14:15:26.792602\n during  : 2017-07-06 14:15:26.792602\n after   : 2017-07-06 14:15:26.808358\n. uuid1() is trying to prevent duplicating the guid, but its not taking into account bad system clocks or our tricks.\n`uuid1()` :\ncurrent = gen_posix_ts\nif current <= last_timestamp:\n    current = last_timestamp +1\nlast_timestamp = current\nreturn new_uuid_using(current)\n``\nSo, there is really no way around this without patching up the uuid1 call (or that module in general) since it is keeping track of things itself.  I think the simplest would simply be to setuuid._last_timestamp = None` on start/stop of freezegun so it doesn't play stupid games like this.\nI am pretty sure that a misbehaving system clock could also land us in hot water here, at least theoretically, so this doesn't look like a real problem with freezegun itself.  . Any chance of getting this (and others?) merged and deploying a 0.4? I can't use it in the current state.. Also, when doing local dev I needed to manually run pip install python-dateutil, its not in requirements.  Not sure if this is intentional.. It \"fakes\" theisinstance(obj, _class) check for the FakeDate class when FakeDate is used as the class argument.  For example:\nisinstance(real_date(2017,1,1), FakeDate) -> True (but its clearly not!)\n\nI suppose you could throw an exception in there or use pdb.set_trace() and see what tests/code causes that to be executed. \nFor a more complete example:\n```\nclass F1(real_date):\n    pass\nclass F2(with_metaclass(FakeDateMeta, real_date)):\n    pass\nf1 = F1(2017, 1, 1)\nf2 = F2(2017, 1, 1)\n\nisinstance(real_date(2017,1,1,), F2): True  # calls F2.metaclass.instancecheck\n  isinstance(real_date(2017,1,1,), F1): False\n  isinstance(f1, F2): True   # calls instancecheck, f1 is a datetime so it passes\n  isinstance(f2, F2): True\n```\n\nOk, I guess that makes sense now that I think about it for a few minutes and read the code... \ud83d\ude1e \nLater on in actually setting up the module we have this:\n```\nChange the modules\ndatetime.datetime = FakeDatetime\ndatetime.date = FakeDate\n```\nSo Freezegun changes the datetime module and inserts itself as the class that gets used when you make a date/datetime, transparently.  Without the __instancecheck__ override I suppose checks like this would always fail (if they had a REAL object not a faked one).  I guess this can happen since its not the first module imported?  Not clear on the mechanics.\n```\nisinstance(my_datetime_obj, datetime.datetime) # false, since that now returns FakeDateTime\n. ",
    "Artimi": "@spulec What do you think about this PR? I have added ability to ignore time.monotonic and also other functions.. @spulec I looked into this but with no success. When I run it using makefile it fails, but when I run nosetest directly from command line it ends with two errors:\n```\n$ nosetests --with-coverage ./tests/\nnose.plugins.cover: ERROR: Coverage not available: unable to import coverage module\n......................S..............SSS......S......S...S.........................EE...\n======================================================================\nERROR: Failure: ImportError (No module named mock)\n\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/nose/loader.py\", line 418, in loadTestsFromName\n    addr.filename, addr.module)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 47, in importFromPath\n    return self.importFromDir(dir_path, fqname)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 94, in importFromDir\n    mod = load_module(part_fqname, fh, filename, desc)\n  File \"/home/sebekpet/projects/freezegun/tests/test_ticking.py\", line 3, in \n    import mock\nImportError: No module named mock\n======================================================================\nERROR: Failure: ImportError (No module named mock)\n\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/nose/loader.py\", line 418, in loadTestsFromName\n    addr.filename, addr.module)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 47, in importFromPath\n    return self.importFromDir(dir_path, fqname)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 94, in importFromDir\n    mod = load_module(part_fqname, fh, filename, desc)\n  File \"/home/sebekpet/projects/freezegun/tests/test_utils.py\", line 1, in \n    import mock\nImportError: No module named mock\n\nRan 88 tests in 0.828s\nFAILED (SKIP=7, errors=2)\n```\nIt is strange that problem occurs directly in nose before testing actually starts AFAIK:\nFile \"/home/sebekpet/.virtualenvs/freezegun2.6/lib/python2.6/site-packages/nose/core.py\", line 207, in runTests\n    result = self.testRunner.run(self.test)\n  File \"/home/sebekpet/.virtualenvs/freezegun2.6/lib/python2.6/site-packages/nose/core.py\", line 65, in run\n    stop = time.time()\n  File \"/home/sebekpet/projects/freezegun/freezegun/api.py\", line 65, in __call__\n    return calendar.timegm(current_time.timetuple()) + current_time.microsecond / 1000000.0\n  File \"/usr/lib/python2.6/calendar.py\", line 608, in timegm\n    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1\n  File \"/home/sebekpet/projects/freezegun/freezegun/api.py\", line 130, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\nDo you have some idea why is this happening?. @spulec What do you think about this PR? I have added ability to ignore time.monotonic and also other functions.. @spulec I looked into this but with no success. When I run it using makefile it fails, but when I run nosetest directly from command line it ends with two errors:\n```\n$ nosetests --with-coverage ./tests/\nnose.plugins.cover: ERROR: Coverage not available: unable to import coverage module\n......................S..............SSS......S......S...S.........................EE...\n======================================================================\nERROR: Failure: ImportError (No module named mock)\n\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/nose/loader.py\", line 418, in loadTestsFromName\n    addr.filename, addr.module)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 47, in importFromPath\n    return self.importFromDir(dir_path, fqname)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 94, in importFromDir\n    mod = load_module(part_fqname, fh, filename, desc)\n  File \"/home/sebekpet/projects/freezegun/tests/test_ticking.py\", line 3, in \n    import mock\nImportError: No module named mock\n======================================================================\nERROR: Failure: ImportError (No module named mock)\n\nTraceback (most recent call last):\n  File \"/usr/lib/python2.7/dist-packages/nose/loader.py\", line 418, in loadTestsFromName\n    addr.filename, addr.module)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 47, in importFromPath\n    return self.importFromDir(dir_path, fqname)\n  File \"/usr/lib/python2.7/dist-packages/nose/importer.py\", line 94, in importFromDir\n    mod = load_module(part_fqname, fh, filename, desc)\n  File \"/home/sebekpet/projects/freezegun/tests/test_utils.py\", line 1, in \n    import mock\nImportError: No module named mock\n\nRan 88 tests in 0.828s\nFAILED (SKIP=7, errors=2)\n```\nIt is strange that problem occurs directly in nose before testing actually starts AFAIK:\nFile \"/home/sebekpet/.virtualenvs/freezegun2.6/lib/python2.6/site-packages/nose/core.py\", line 207, in runTests\n    result = self.testRunner.run(self.test)\n  File \"/home/sebekpet/.virtualenvs/freezegun2.6/lib/python2.6/site-packages/nose/core.py\", line 65, in run\n    stop = time.time()\n  File \"/home/sebekpet/projects/freezegun/freezegun/api.py\", line 65, in __call__\n    return calendar.timegm(current_time.timetuple()) + current_time.microsecond / 1000000.0\n  File \"/usr/lib/python2.6/calendar.py\", line 608, in timegm\n    days = datetime.date(year, month, 1).toordinal() - _EPOCH_ORD + day - 1\n  File \"/home/sebekpet/projects/freezegun/freezegun/api.py\", line 130, in __new__\n    return real_date.__new__(cls, *args, **kwargs)\nDo you have some idea why is this happening?. ",
    "wang-ye": "Thanks very much. Very clear explanation @awbacker . Thanks very much. Very clear explanation @awbacker . ",
    "pganssle": "Fixed upstream. Thanks @Kwpolska for referencing the py ticket.. Fixed upstream. Thanks @Kwpolska for referencing the py ticket.. "
}