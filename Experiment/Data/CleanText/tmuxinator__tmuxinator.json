{
    "aziz": "fixed in 0.2.0\n. Thanks, it was great! just merged it\n. it should be fixed in 0.3.0\n. investigating this problem. could you also mention your tmux version.\n. solved, thanks to Chris Apolzon.\n. Thanks Chris, \nI'll merged your changes to the repo. a new version of the gem is coming this weekend. \n. Thanks merged. the pre commands could be handy.\n. Thanks Bj\u00f8rn\n. Thanks a lot\n. Thanks, this is awesome\n. I'll look into it. thanks for the idea\n. been quite busy with the day job and personal life. this feature is a good one and hope I can add it soon\n. released in 0.5.0\n. yes. you can find my personal tmux.conf here\nPlease note that I have a lot of custom key bindings that you might not be comfortable with. remove or customize the key binding section. My default font is \"Monaco 13px\". \nAslo note that you might not get the exact same colors, since I've customized them in Terminal and iTerm2. \n. fixed it in repo. gonna release a new version of gem soon.\n. you need to create a directory called .tmuxinator in your home, this was part of the code but some how lost due to merging a couple of pull requests. the new patch in coming as soon \n. Thank Adam!\n. Thanks for this great PR\n. merged, thanks a lot.\n. Thanks for reporting, this is more like a bug that will be fixed in the next release. \n. Thanks, this is really cool. I should remember to document it first\n. I tried several times to find some time for this project but I failed, but don't worry now I found a collaborator. \nStarting this week @franciscoj is helping me maintaining Tmuxinator. So stay tuned for a lot of new features and , finally, merging some of those old pull requests. \n. thanks \n. I hope I could find some time this weekend. I've been away from tmux for a long time and I need a refresher. but I'll definitely start a spring cleaning here!\n. Added 'cli_args' option to the YAML file\n. fixed it. \n. done, thanks for the feedback.\n. Merged Dennis's pull request.\n. Thanks for reminding Christopher. I've added you as a collaborator.\n. @Soliah added travis-ci hook https://travis-ci.org/aziz/tmuxinator\n@dennisreimann thanks for your offer. I think it's better to let @Soliah work on the next version. You can always help him by sending pull requests.\n. @Soliah I like the idea. the best code in no code. :+1:\n. Sorry for the delay Chris, I've been away this weekend. Just added you as a gem owner. great job dude. :+1: \n. ",
    "mignev": "I have the same problem!\n. My tmux version is 1.4 too.\n. ",
    "agibralter": "I just ended up going in and manually writing my foo.tmux script... basically I'm finding that tmuxinator is getting the window indexes wrong.\n. I'm using 1.4.\n. ",
    "rspeicher": "Same problem here. It seems to be with assigning the first window to be \"1\". When my tmux session comes up, I've got 0 and 2-x, but not 1.\nEdit: Yeah, confirmed the above. Manually editing the generated .tmux, removing the tmux set-option base-index 1 line, and then decrementing each window identifier by 1 fixed the problem in that one definition.\n. ~ [ brew info tmux ]\ntmux 1.4\nhttp://tmux.sourceforge.net\nDepends on: libevent\n/usr/local/Cellar/tmux/1.4 (2 files, 516K)\nhttp://github.com/mxcl/homebrew/commits/master/Library/Formula/tmux.rb\n. ",
    "bmaland": "It works correctly if you have set -g base-index 1 in your ~/.tmux.conf. tmuxinator tries to set this dynamically in the generated .tmux file but apparently this doesn't work properly.\n. ",
    "rahult": "Same problem\nbash\nsession not found: Project\nset option: default-path -> \"/Users/rahult/Project\"\nset option: base-index -> 1\nwindow not found: Project:1\nwindow not found: Project:1\nwindow not found: Project:1\nwindow not found: Project:1\nwindow not found: Project:1\n[exited]\nConfiguration file looks like this\nyaml\nproject_name: Project\nproject_root: ~/Project\nrvm: ruby-1.9.2-p180@Project\ntabs:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        -\n  - shell: git pull\n  - server: rails s\n  - console: rails c\ntmux 1.4 and I have set  \nbash\nset -g base-index 1\n. ",
    "rickmzp": "Same problem\n. Upgrading to latest iTerm2 fixed the problem for me :thumbsup:\n. ",
    "doitian": "It can be reproduced by starting a non-existing session in a tmux session\nFor example, start_project will start your project session and ensure it has not started yet.\n1.  Open a tmux session such as tmux new -s parent\n2.  In tmux session parent, run start_project\nA simple fix is setting TMUX to null when creating the tmux session\nenv TMUX= tmux new-session -d -s <%=s @project_name %> -n <%=s @tabs[0].name %>\n. Sent a pull request #13\n. This patch also invokes 'rvm' for empty commands\n. Why tmuxinator start not working for you? start really attach to existing session if it has already started.\n. @Soliah test added\n. @Soliah it's introduced since 1.7 http://sourceforge.net/projects/tmux/files/tmux/tmux-1.7/\n. ",
    "scottillogical": "this still happens to me...where do i put the set default-path line?\n. ",
    "festlv": "In case anyone comes here from Google search of similar title- for me it was Oh-My-Zsh's plugin, last-working-dir what caused staying in current directory when starting mux project.\n. ",
    "yevgenko": "sound good :)\n. Can't get this working, am I missing anything?\ntor version\n(erb):7:in `render': undefined method `[]' for nil:NilClass (NoMethodError)\n        from /home/wik/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/erb.rb:753:in `eval'\n        from /home/wik/.rvm/rubies/ruby-1.9.2-p180/lib/ruby/1.9.1/erb.rb:753:in `result'\n        from /home/wik/.rvm/gems/ruby-1.9.2-p180@global/gems/tmuxinator-0.3.4/lib/tmuxinator/config_writer.rb:24:in `render'\n        from /home/wik/.rvm/gems/ruby-1.9.2-p180@global/gems/tmuxinator-0.3.4/lib/tmuxinator/cli.rb:143:in `start'\n        from /home/wik/.rvm/gems/ruby-1.9.2-p180@global/gems/tmuxinator-0.3.4/bin/tor:6:in `<top (required)>'\n        from /home/wik/.rvm/gems/ruby-1.9.2-p180@global/bin/tor:19:in `load'\n        from /home/wik/.rvm/gems/ruby-1.9.2-p180@global/bin/tor:19:in `<main>'\n. cool, tnx, still minor issue, need to update .gemspec, because tor symlink not there and there is TODO file which I don't see in repository...\n. :thumbsup:\n. ",
    "thedeeno": "ah, I'll look into that today. Using 'start' (either implicit or explicitly) works fine but some of the other cli methods are calling render for some reason.\n. Ok, fixed. The exe was calling an internal 'start' method. I just renamed it to prevent the collision with the new 'start' method.\n. indeed, aziz said not to mess with the version information in the readme though. You around aziz? It'd be nice to make this official.\n. I think tmuxinator is a lot to type by default. It's easy to alias, but one thing I'd like to eliminate with this change is the need to modify terminal profiles.\nThat said, if we can't find a good alternative we should just drop the short name idea.\n```\nhow's this?\nmuxi \n```\n. ",
    "mdp": "I'm all for this change, my only concern is the addition of 'tor' as an executable. It's already an executable on my system(https://www.torproject.org/) and it's not terribly uncommon.\nCould we use a different short name, or just allow the user to alias tmuxinator to something else?\n. Works for me. Doing a quick search it looks like both 'muxi' and even 'mux' are available.\n. ",
    "tswicegood": "+1 for the start command.  Not sure if it needs an extra shorthand, though, because you could easily alias it.\n. ",
    "adamyonk": "Thanks! Being able to ssh into a remote machine and \"tmux attach\" makes for a killer remote and collaborative editing setup when working with other developers.\n. \\o/\n. +1\n. ",
    "jsmestad": "Yep I would love to see this feature added as well. Trying to track down the default location now..\n. @pengwynn in addition to this, would you support the -C startup flag for iterm2 integration? :D\n. Yep\nOn Saturday, April 20, 2013, Francisco J. wrote:\n\nI've detected the same issue and it was related to my zsh config. Are you\nusing zsh?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/102#issuecomment-16702231\n.\n\n\nRegards,\nJustin Smestad\njustin.smestad@gmail.com\n. :+1: for a generic pre_tab: method.\n. ",
    "pengwynn": "+1\n. @aziz Could some of us pitch in to apply some patches?\n. ",
    "hkarthik": "+1\n. ",
    "tomfarm": "Thanks a lot!\n. ",
    "maser": "+1\n. ",
    "Soliah": "With subdirectory support, I don't think this is necessary anymore. Tab completion should also help here.\n. This is the wrong issue to report this in. Seems like you can't source the completion files?\nPlease raise a new issue for the problem you're having.\n. @stabenfeldt, I've updated the readme with the correct instructions regarding completion.\n. This can be achievable with tmux as it is now: http://stackoverflow.com/questions/9812000/specify-pane-percentage-in-tmuxinator-project\n. Addressed in #107 with new debug option. Closing.\n. I agree with @richo. Closing.\n. Addressed in #107. Closing.\n. I've managed to rebase this and #79 on top of master and have been using my fork successfully with rbenv. Have a look at #96.\n. Closing in favour of #51.\n. Closing as #96 fixes this.\n. What does tmux show-options -g | grep index give you?\n. @jottr, raise a new issue please.\nProvide tmux.conf, tmuxinator project file, output of tmux show-options and what version of tmuxinator you're using.\n. @amiel, I'm happy to accept PRs. You'll probably want to manually put this on top of the 0.7.0-wip branch though as things have completely diverged since 0.6.0.\n. This doesn't seem like a popular feature and would require some interesting changes to the project file structure so I'm gonna drop it.\n. Closed in favour of #78 \n. Fixed by 85d0048\n. Please refer to the pre_window section of the readme.\n. Actually here is a link: https://github.com/aziz/tmuxinator#interpreter-managers--environment-variables\n. This is probably fixed so closing.\n. I'm running zsh 5.0.2 and am not having problems with completion. Closing.\n. This is pretty fundamental change in the behaviour of windows and panes, so I don't think it would be appropriate.\n. Closing as #96 fixes this.\n. The base-index is now queried from tmux in 0.6.0.\n. If people still want this I'd appreciate it if someone could rebase this on top of current HEAD.\n. Addressed in #107, with the new debug option. Closing.\n. Unfortunately, tmuxinator doesn't run in a way that would allow it to execute a command at the end of a tmux session. All tmuxinator does is output a set of shell commands that starts the session. Once the session is running and you're attached, the tmuxinator Ruby process exits.\nYou'd need some sort of daemon/background process that would monitor tmux's sessions, and when one ended, ran the appropriate configured command.\nHowever, if anyone has any ideas of how to implement something like this, I'd be interested in reading your thoughts.\n. Yup it's in pre atm. Couple things I still need to do for #100.\n. mux debug project is your friend.\n. Looks like wemux doesn't have a start-server option. wemux isn't a simple wrapper to tmux and I think it'll require a lot more work to get it working properly with tmux.\nMy first thought would be a separate template.erb specifically for wemux, with an option in the project file, but that seems like a lot of work. Happy to accept PRs though.\n. @athal7, this is looking really good!\nI do have some ideas on how to structure this with a bit more indirection but for now this should work.\n. This is linked to zolrath/wemux#34, so if people want to send a PR there to fix this upstream we can get this merged.\n. This seems like a popular feature that I'd really want to add. However the way tmux wrappers work typically (including tmuxinator) is outputting a set of shell commands that starts the tmux session, attaching you to the started session and then exiting. tmuxinator has then no knowledge of the tmux process. \nBecause of this, as far as I can see, there are two ways to approach this given the way tmux works:\n- Have a persistent process that runs in the background that can monitor the state of active tmux sessions and run the specified commands when a pane / window gets closed. This would be a lot of work and I really wouldn't want to go down this route. (I'd love to be proven otherwise; pull requests welcome).\n- An alternative would be to close sessions via a tmuxinator close window <name> or tmuxinator close pane command. This could work but is quite a bit more cumbersome.\nIf anyone else has suggestions I'd love to hear other ways to to tackle this.\n. That's not a bad idea @xntrik. It'd have to be a top level item in the config though: So:\nyml\ntabs:\n  - editor: vim\n  - logs: tail -f log/development.log\n  - console:\n    panes:\n      - bundle exec rails console\n      - mysql database\npost_tab:\n  - editor: :wq\n  - logs: C-c\n  - console:\n    panes:\n      - exit\n      - \\q\nThis would close all applications provided each pane/window had the process running in them. After that we can close all the windows via tmux kill-window or tmux kill-pane. \nCouple of things though:\n- If a process doesn't exit cleanly because the specified exit command didn't work for some reason, the process will be killed ungracefully once the kill pane/window command is issued\n- If post_tab is defined, exit commands would have to be provided for all panes/windows.\nThoughts?\n. I'm gonna tag this for 0.8.0. It'll require a bit more thought but I think it is doable.\n. @ramonjavaier yes it is.\n. Closing in favour of jlipps/tmux-safekill.\n. Yea it's broken on master unfortunately. I can't back merge it either because #107 is a rather big cleanup and refactor.\nStill a number of things left to fix up before I can merge in #107, namely shell completion and rbenv/rvm support. I'm hoping to get it finished this weekend if time permits.\n. @fgrehm, if you can live without rbenv/rvm support and shell completion, give the 0.6.0-wip branch a try. It'd be good to know of any issues whilst I'm still working on it.\n. @fgrehm, oh I just meant that the 0.6.0-wip branch is broken in terms of setting an rbenv or rvm version when starting a project.\nOther than that it should work as normal.\nTo try out the the branch, clone down the repo, checkout the branch and do the following:\ngem uninstall tmuxinator\ngem build tmuxinator.gemspec\ngem install tmuxinator-0.5.0.gem\n. Ok so after some testing, this feature breaks tmux's send-keys option.\ntmux seems to treat period's as delimiter between windows and panes. tmuxinator uses send-keys to issue commands to windows which breaks when there's a period present.\nEg. tmux send-keys -t foo.withperiod:0 vim will not function correctly as it will attempt to look for a session \"withperiod:0\" in session \"foo\".\nI think I will just add a warning indicating tmux's behaviour with periods in project names.\n. I'd also be willing to help out too.\n. @aziz, @franciscoj it seems like progress has stopped trying to keep tmuxinator alive. Would it be possible to let someone else who has volunteered in this issue to help out?\n. #149 fixed an issue where you could specify an array of commands for a window. I think that would suffice unless there's something else this enables?\n. Can you give me an example of what you'd like to run?\n. Seems like the most common use case for this would be for SSHing into a remote server and executing commands.\nI can adapt the array style syntax for the project file, but instead of doing cmd1 && cmd2 && cmd3 I'll do\ncmd1 C-m\ncmd2 C-m\ncmd3 C-m\nSo for example, if you specify:\nwindow:\n  - server1:\n    - ssh server@example.com\n    - cd /var/log/foo\n    - tail -f log\nthis will be used as the shell script output:\nssh server@example.com C-m\ncd /var/log/foo C-m\ntail -f log C-m\nI just tried this in a shell script and that works, as send-keys seems to wait for a good exit status from the previous  command before executing the next one.\nI should be able to get this out maybe this weekend, along with the other fixes on master.\n. I've pushed up 0.6.6.pre. Can some of you test it and report back? Thanks.\n. Yup I need to find some time to do the panes stuff. Sorry for the delay so far. I've got a pretty packed month ahead so if anyone wants to send PRs that'd be great.\n. @runar, @chuanma I've pushed 0.6.6.pre.2 with support for send-keys and panes. Please refer to the readme on master and the send-keys section.\nCould you please test and report back?\n. Apologies, I left a pry in pre.2. Please try pre.3.\n. This would be nice, but I'm not sure how to go about implementing it. It'd probably have to involve some big changes in the way tabs are specified in the YAML currently.\nI'd be welcome to pull requests once the #107 is merged into master.\n. The commits referencing it have diverged significantly, so yes it's still open. Appreciate any PRs\n. Also I'm referring to this commit e45e259b17b5571c5949822208b3b508396933f1\n. @aziz, could you please hookup ~~gemnasium~~ and travis-ci?\n. Completion still isn't working, rbenv/rvm still pending but everything else should work.\nRegarding completion I was scratching my head as to why the completion was still showing up even though I had stopped sourcing the completion script. After some investigation, because I use sorin-ionescu/prezto I have zsh-completions/zsh-completions installed. This has an existing completions script.\nI will submit a pull request to zsh-completions once this branch is merged into master removing that completion script.\n. @aziz, I'm thinking about omitting RVM/rbenv support in favour of the pre option. This is because I don't think this will scale out to other types of version managers like NVM (#110). There's also things like virtualenv and pythonz.\nIf we just document the pre command clearly, it's as simple as rvm use or rbenv shell. What's your opinion of this?\n\nSo I just realised that the pre option would need to be specified for each tab/window. I'd like to introduce a pre_tab or pre_window command that would get executed in each window before any specified commands. This would solve requirements for setting environment variables and / or particular versions of interpreters.\n. @aziz, I'd like to push a pre version to Rubygems. Could you add me as an owner? gem owner tmuxinator -a chris@chowie.net\n. Those willing to test can install 0.6.0 via: gem install tmuxinator --pre\nIf you have any issues, please run mux debug project and gist the resulting shell script.\n. @iamdustan, thanks for testing.\nI've removed the rbenv and RVM options in favour of a pre_tab: option. Place a command in there, like rbenv shell 2.0.0-p247 and it'll run before any pre commands for panes and windows. This is so we don't have interpreter specific options, as that wouldn't scale out to things like NVM, pythonz etc.\nCould you gist your project file too? You're right, and I haven't taken into account a change in base-index for panes as well as windows. Need to fix that.\nI'll see if I can put back the mux project shortcut now that I've chosen to use the thor gem.\nI'll need to add some deprecation warnings for the older settings in project files.\n. Thanks @iamdustan. I'll hopefully get around to fixing these issues this weekend.\n. I've just pushed up 0.6.0.pre.3 to RubyGems. Please remove the pre version and install pre.3:\ngem install tmuxinator -v 0.6.0.pre.3 --pre\n/cc @iamdustan\n. So couple more things before I release this version:\n- [ ] Need to add deprecations for rbenv/rvm and handling them gracefully\n- [ ] Update the README\n- [ ] Moar tests :sparkles:\nAnyone have a nice tmux theme I can use for the screenshot? Something with panes and a project file open?\n. Last thing I'm gonna do is remove the idea of \"tabs\" and replace it with \"windows\" as tmux has no notion of tabs. This will deprecate the tabs option, but I will maintain backwards compatibility until version 0.8.0.\n. Oops, forgot about cli_args. Might rename this to tmux_options and deprecate cli_args as it's bit more descriptive. Related to #116.\n. I'm in the process of cleaning up the code base in #107 and will have a look at this issue soon.\n. Related to #115 \n. The current shell completion does this.\n. If this is on version 0.5.0, please give 0.6.0.pre.3 a go. Refer to #107 for details.\n. Can you give 0.6.0.pre.3 a go? Please refer to #107 for details.\n. @iamdustan Are you using the native integration with iTerm2? It relies on a patched version of tmux. http://jtimberman.housepub.org/blog/2012/01/28/iterm2-with-tmux/\n. Solved with #293.\n. #111 related.\n. Set cli_args in your project file to -f /path/to/conf.\n. Oh wait sorry, you misunderstood what I meant.\nI meant to add cli_args: as an entry into the project file not on the command line as an option.\nSo in your project.yml:\nproject_name: foo\nproject_root: ~/code\ncli_args: -f ~/.tmux-osx.conf\n. Looks like you're replying by email so you can't see my edited comment. Here it is again:\nSo in your project.yml:\nproject_name: foo\nproject_root: ~/code\ncli_args: -f ~/.tmux-osx.conf\nNow this may or may not work in 0.5.0. Can you please try?\n. Can you please try pre.4?\ngem uninstall tmuxinator\ngem install tmuxinator --pre -v 0.6.0.pre.4\n. 0.6.0.pre.5 is up. Please try that instead.\n. Please use 0.6.2 and have the tmux_options option present:\nproject_name: Sails Chat rm\nproject_root: ~/testproject\ntmux_options: -f ~/.tmux-osx.conf\ntabs:\nmain:\nmain2:\nvim: vim\nserver: sails lift\nmysql: mysql5 -uroot -ppassword sails\n. Merged. Thanks.\n. What version of Ruby, tmuxinator?\nIf you're using 0.6.x can you gist the output of mux debug?\n. Hm, I don't have any parsing problems running your project, so I think this is caused by a difference in platform.\nWhat distro and version of Linux are you using? Could you try the following for me in an IRB session?\n```\n\nirb\nirb(main):001:0> require \"yaml\"\n=> true\nirb(main):002:0> yaml = YAML.load(File.read(\"/Users/Soliah/.tmuxinator/test/test.yml\"))\n=> {\"project_name\"=>\"Tmuxinator\", \"project_root\"=>\"/home/hak8or/cryptos\", \"tabs\"=>[{\"main\"=>{\"layout\"=>\"7d8c,237x81,0,0{120x81,0,0[120x40,0,0,120x40,0,41],116x81,121,0[116x26,121,0,116x26,121,27,116x27,121,54]}\", \"panes\"=>[nil, nil, nil, nil, nil]}}]}\nirb(main):003:0>\n```\n\nLastly, here's the output of debug when I run the project (note that I'm using zsh, so change the first line to #!/bin/bash if you're using bash:\nIf you try running that does it work?\n```\n!/bin/zsh\ntmux start-server\\; has-session -t Tmuxinator 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /home/hak8or/cryptos\n# Run pre command.\n# Create the session and the first window.\n  tmux new-session -d -s Tmuxinator -n main\n# Set the default path.\n  tmux set-option -t Tmuxinator default-path /home/hak8or/cryptos 1>/dev/null\n# Create other windows.\n# Window \"main\"\ntmux splitw -t Tmuxinator:1\ntmux splitw -t Tmuxinator:1\ntmux splitw -t Tmuxinator:1\ntmux splitw -t Tmuxinator:1\ntmux select-layout -t Tmuxinator:1 7d8c,237x81,0,0{120x81,0,0[120x40,0,0,120x40,0,41],116x81,121,0[116x26,121,0,116x26,121,27,116x27,121,54]}\n  tmux select-pane -t Tmuxinator:1.1\ntmux select-window -t 1\nfi\ntmux -u attach-session -t Tmuxinator\n```\n. Oh sorry I meant to run the ruby stuff with your config. The test.yml was just me testing out your config. \nWhat version of tmux are you running as well?\n. @hak8or, any luck with running the above Ruby code with your config as the argument?\nSo something like\nyaml = YAML.load(File.read(\"/home/hak8or/.tmuxinator/my_project.yml\"))\n. I'm moving pretty fast with bug fixes so 0.6.3 is out that should fix this. I just tried:\n\n. @hak8or, most of that would be from my dotfiles. I think the vertical separators are in my .tmux.conf. The colour stuff is from a modified zprezto theme.\nNote that my dotfiles are setup mostly for OSX so your mileage will vary on Ubuntu.\n. @hak8or, actually I think the vertical separators may be a bi-product of my font, Source Code Pro.\n. Pull requests welcome!\n. Sorry for the delay on this version. I'll be attempting to finish 0.7.0 during RailsCamp Sydney '13. Until then PRs are more than welcome.\n. If you run tmux start-server\\; show-window-options -g | grep pane-base-index on the command line what do you get?\nThe base_index option has been removed as I'm now asking tmux directly for the base index via the above command. Sorry I forgot to add a deprecation for it.\n. I think there are some issues with Ubuntu that I'll have to test. Can your try setting the pane-base-index to 1 in your tmux.conf?\nAlso can you run\nmux debug [project] and gist the output?\n. I am querying tmux though, so will have to investigate further. \n\nOn 31 Jul 2013, at 10:58 pm, Philipp Gildein notifications@github.com wrote:\nDoesn't seem to be Ubuntu specific. I am running tmux 1.8 and tmuxinator 0.6.2 on Arch linux and I got the same problem with base-index 1.\nWould be great if this could be supported by tmuxinator. A quick check with tmux show-option -g base-index should be enough to make different base-indexes work.\n\u2014\nReply to this email directly or view it on GitHub.\n. If pane-base-index works I know what to do to fix this. I'll try and push a fix tomorrow.\nOn 31 Jul 2013, at 11:08 pm, Christopher Chow chris@chowie.net wrote:\nI am querying tmux though, so will have to investigate further. \n\nOn 31 Jul 2013, at 10:58 pm, Philipp Gildein notifications@github.com wrote:\nDoesn't seem to be Ubuntu specific. I am running tmux 1.8 and tmuxinator 0.6.2 on Arch linux and I got the same problem with base-index 1.\nWould be great if this could be supported by tmuxinator. A quick check with tmux show-option -g base-index should be enough to make different base-indexes work.\n\u2014\nReply to this email directly or view it on GitHub.\n. What version of zsh are you running?\n\nOn 31 Jul 2013, at 5:57 pm, Yunfei Zu notifications@github.com wrote:\nWhen I start tmuxinator in zsh, It freeze and can't be closed.\nI run \"mux debug sample\" the frist line is:\n!/bin/zsh\ntmux -v -2 -L foo start-server\\; has-session -t sample 2>/dev/null\nIt seems the zsh freeze because of \\ after start-server\nHow can I make it work?\n\u2014\nReply to this email directly or view it on GitHub.\n. I won't have time to investigate this until the weekend, but can you first try upgrading to the latest version of zsh? I believe the latest version is 5.0.2.\n. Can you edit your project file and remove the tmux_options line?\n. I keep on doing this. Thanks.\n. Could you please add a spec for this?\n. Sorry to be a pain, but could you squash the 2 commits into one and use double quotes instead of single quotes and could you also amend the commit message to be something like with this with present tense?\n\n\"Fixes broken backwards compatibility of multiple pre commands.\"\nI'll fix the contributing guide to indicate that I'd like contributions to be like this (Github Styleguide, good commit messages etc).\n. Sorry the indentation was on purpose, so when running mux debug the output would be indented properly.\n. Thanks :beer:\n. As per your other pull request, could you squash these 2 commits to one and use double quotes? The commit message of the first commit is great.\nThanks.\n. @pboehm, thanks. Raised #138.\nIt's not ideal but the only workaround now would be to upgrade to the latest tmux.\n. Could you upgrade to the latest version?\n. Could you run mux debug [project] and gist both the output and the project file? Also what OS and tmux version?\n. I've just tried on 0.6.3 with the following project file:\n```\n~/.tmuxinator/test.yml\nyou can make as many tabs as you wish...\nproject_name: test\nproject_root: ~/Code\ntabs:\n  - main: guard\n  - terminal:\n```\nThis works for me, though I'm on OSX, tmux 1.8, and guard 0.18.2.\n. Can't reproduce issues with this so closing for now. Please reopen or comment with the details I asked for if you're still getting these issues.\n. You're missing gmkdir, or something is causing Rubygems to look in /opt. Did you switch from Macports to Homebrew?\nTry reinstalling Ruby in RVM. \n\nOn 7 Aug 2013, at 6:05 am, Vat notifications@github.com wrote:\nmake: /opt/local/bin/gmkdir: No such file or directory\n. The -v option in tmux_options needs to be removed from the sample config as that tells tmux to log everything. That's what is causing the log files to be produced.\n\nApologies, I'll make the sample project file simpler.\nYou should edit the project file in ~/.tmuxinator to suit your needs.\n. @Lordnibbler, my gut tells me it's probably to do with base-index or pane-base-index settings in your ~/.tmux.conf but it could be that the sample config's commands obviously may not work on your system. The sample config is, after all just an example. It should however be much simpler, with advanced options commented out.\nCan you run mux debug projectname and gist the output?\n. What version of tmux are you running?\n. Could you also run the two of these on the command line and tell me the output you get?\ntmux start-server\\; show-option -g | grep pane-base-index       \ntmux start-server\\; show-option -g | grep base-index\n. @ryansch, @Lordnibbler, I too have my base-index set to 1, but with this set-option -g base-index 1 and can run the sample project with no issues.\n. @Lordnibbler, base-index issues should've been fixed with #126.\n. I should point out that 0.6.x was basically almost a complete rewrite. #107 for details.\n. @Lordnibbler, could you gist your ~/.tmux.conf?\nCould you also try starting the following project:\n```\n~/.tmuxinator/test.yml\nyou can make as many tabs as you wish...\nproject_name: test\nproject_root: ~/\ntabs:\n  - test1: echo \"window 1\"\n  - test2: echo \"window 2\"\n  - test3: echo \"window 3\"\n  - test4: echo \"window 4\"\n```\nIf that doesn't work, can you mux debug test and gimme the output?\n. @Lordnibbler, Ok, so it looks like the sample project is broken. That's probably because it's doing something that isn't available on your system. I'm gonna simplify it dramatically and cleanup the README to be clearer.\nCan you create a project manually, laid out how you would like and report back?\nThe deprecation warning is expected. tabs: has been deprecated in favour of windows:. I just wanted to make sure deprecations were working for you too.\n. @Lordnibbler, windows: instead of tabs:. Everything else is the same.\nFor example, my project for working on tmuxinator itself is the following (I don't really make use of panes):\nname: tmuxinator\nroot: ~/Code/tmuxinator\nwindows:\n  - editor: vim\n  - terminal: \n  - specs:\nI guess, the moral of this issue seems to be that the sample config shouldn't be used as it is. It should be customised for the users needs.\n. name: test\nroot: ~/\nwindows:\n  - main:\n      layout: main-vertical\n      panes:\n        - vim\n        -\n        - top\n  - server: echo \"window 2\"\nWorks for me.\nThis following might come across as patronising, so please don't take it the wrong way if you're aware of the following, but I just want to make sure everything is clear:\n\nLet me clarify the windows:/tabs: option. Note that - in yaml represents an array entry.\nUnder windows: each - indicates a single window in tmux. However, each window can have multiple panes. Sometimes you want a window with multiple panes, sometimes you just want a window with one pane.\nSo when you specify:\nwindows:\n  - editor: vim\n  - logs: tail -f log/development.log\nYou get 2 windows, each window having 1 pane.\nHowever, lets say you want  2 panes in one window? To specify this in yaml:\nwindows:\n  - editor: vim\n  - logs:\n    layout: main-vertical\n    panes:\n      - tail -f log/development.og\n      - tail -f log/sidekiq.log\nNow the second window \"logs\", has 2 panes.\n\nNow, can you try specifying both the base-index and pane-base-index in your tmux.conf?\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\n. Yea, the readme needs quite a bit of work as it is a bit cryptic right now. Feel free to send a PR with anything you think would be appropriate.\n. Gonna drop support for 1.6 I think unless someone wants to send a PR.\n. Thanks.\n. This is actually default behaviour, so it's strange that you're getting the process names instead of the window names.\nYou're using the latest version? Have you got automatic-rename or allow-rename on in your ~/.tmux.conf?\n. @jlipps, So I can add it to the FAQ, what version of tmux are you running?\n. Right now the implementation just checks to see if there is an existing tmux session with the same project name, and if it finds one, reattaches you to that session.\nI'd have to implement a clone option that would start another session with the same name.\nI take it mux copy project newproject doesn't suffice for your needs?\n. Ok I'll target this for 0.7.0, but if I get busy, it'll be pushed back to 0.8.0.\n. 0.5.0 is quite an old version now. I've released 0.6.x recently that was basically a rewrite.\nSo it looks like you want the root directory for the tmux session to be /?\nHow about this:\nname: project_name\nroot: /\nwindows:\n  - editor: cd ~/dir/blah && vim\n. Ah ok, so you want the tmuxinator project directory to be the current directory if no root is provided in the yaml file.\nI understand. That's reasonable behaviour and I'd happily accept PRs for it. You should probably base any work off of the 0.7.0 branch (#123) as I've begun working on some new stuff in there, namely per project tmuxinator projects ala .tmuxinator project files to be checked in to the repo of projects. The feature you're suggesting would go hand in hand with that as having a project .tmuxinator file implies the current directory is the root of the project, making the root key wrong.\nPlease make sure you have a quick skim of the contributing guide as I'm trying to be rigorous in the style and commit messages.\n. Cool, can you send or convert this issue to a PR? I'll merge it in :+1:\n. Merged in 74c93c6\n. The README's sample config shows the: tmux_options: option. Try specifying tmux_options: -2 in your project file.\n. Thanks for the PR.\nI've added some comments regarding style. One last thing, can you change all single quotes to double quotes as per the Github styleguide.\n. Last thing, can you squash the 2 commits together?\n. Please provide:\nOperating system and version\nVersion of Ruby\nVersion of tmux\nVersion of tmuxinator\nOutput of mux debug your_project_name\n. I can't reproduce this on Ubuntu 12.04.\nIf you run something else other than man tmux for the first pane does it work?\n. I'll try 13.04 tonight, but it seems like a configuration issue. With the\nabove commands, by failed what do you mean? Is there an error?\nOn 27 August 2013 00:19, Coder notifications@github.com wrote:\n\nMy ubuntu is 13.04, with other commands I've tried like\nvim => nothing happened,\nrails s => failed\nguard => failed\nNo one works, seems some $PATH are missed (I guess, but the system shell\nechos me a right one).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/150#issuecomment-23265431\n.\n. Can you gist your .tmux.conf too?\n. I'm going to close issues once I reply. Please reopen if the issue persists.\n. If you're using rvm you shouldn't be doing a sudo gem install. You should just be doing a gem install tmuxinator.\n. I'm going to close issues once I reply. Please reopen if the issue persists.\n. To me that looks like incorrect output from tmux for the layout. There's a trailing closing ] which doesn't look right to me. Can you double check?\n\nPlease also update to 0.6.5 (though that won't fix this issue).\n. Thanks for the PR :heart:\n. This looks good. Could you just clean up the commit message? \"Add option to call tmux wrappers or derivatives.\" and maybe a longer description after the new line?\n. All good amended the commit for you.\n. I've published 0.6.6.pre up if you want to test. I've changed the option to tmux_command rather than tmux_cmd.\n. This basically undos #131, and the previous issue #48. I can't reproduce your error either. ~~Have you set both pane-base-index and base-index in your tmux.conf as per the README instructions?~~ (Sorry that no longer applies).\nI tried your config and it seems to work fine for me.\n. Actually this is caused by dots in the project name. Change the project name to something without dots. Dots can't be used in project names as tmux uses them internally to delimit between windows and panes. Having a session with a dot in the name confuses tmux send-keys -t commands.\n. I'll have to update the readme to make sure people don't use dots in project names.\n. #93 was the previous issue regarding this.\n. Thanks for the PR. Just some minor changes to RSpec syntax I'll merge it in.\n. This doesn't occur for me. I can list all sessions created with tmuxinator.\nWhat version of tmux and tmuxinator are you using?\n. If you need to you can specify a specific socket as per the readme.\n. This seems like a similar problem to #155. Can you make sure to restart the tmux server?\n. Yea:\nPsych::SyntaxError: (<unknown>): did not find expected node content while parsing a block node at line 2 column 4\nThat looks like <Leader>n in vim right?\n. Try wrapping the command in quotes.\n. tmux_options and maybe the update-environment option in tmux might be helpful: http://stackoverflow.com/questions/8645053/how-do-i-start-tmux-with-my-current-environment\n. @radarek, I personally don't see anything wrong with the diff you posted if it solves this issue. I'd be happy for a PR with that.\n. #273 should the last comment and the original issue should've been solved by #208 hopefully.\n. I run multiple tmuxinator sessions in different terminals. They're just tmux sessions underneath so you can start as many as you want (so long as they're different projects).\n. Just merged #273 which addresses this.\n. Please gist the output of mux debug project and your tmux.conf.\n. Could you please try 0.6.6.pre.2 and report back?\n. Apologies, I left a pry in pre.2. Please try pre.3.\n. Can you make sure you've removed the previous versions of the gem?\n. Please reopen if you're still having issues.\n. Do you want the setopt ignoreoef command to affect the panes too?\n. You'll have to use the 0.6.6.pre.3 version:\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - pane1:\n          - setopt ignoreoef\n          - vim\n        - pane2:\n          - setopt ignoreoef\n  - server: #ipython3\nUnfortunately there's no pre_pane option so this is a workaround.\n. @teatang, please create a new issue as the original issue should be fixed in 0.6.6.\n@introom, please reopen this issue if you're still having issues with the latest version.\n. If you pipe the debug output to a shell script and run it what happens?\n. After you start the session and only get one window, can you detach and let me know if there are any error messages outputted by tmux?\nI tried your config and it seems to work fine for me. This is the output after I detach:\nrm: .zeus.sock: No such file or directory\narranging in: main-vertical\narranging in: main-vertical\narranging in: 4020,238x61,0,0{140x61,0,0,97x61,141,0}\narranging in: 4020,238x61,0,0{140x61,0,0,97x61,141,0}\n[detached]\nWhat version of tmux are you running? Have you followed the readme regarding base-index?\nLastly, can you give 0.6.6.pre.3 a go? (Make sure to remove the previous version first).\n. Ah, you're on 1.6. I think your problems are due to #138. Can you try upgrading to 1.7 or 1.8 if possible?\n. Thanks for the PR! I've added some style code comments :heart:\n. Thanks heaps for this! Just made some style comments.\n. Feel free to send a PR for this.\n. This should be working now.\n. Thanks!\n. @hcontreras sorry there's currently an issue #289 with tmux 1.8 and 0.6.10. If you're on OSX try upgrading to 1.9a.\n. Thanks! Could you update the README with instructions?\n. Thanks for this but the goal was to provide a way to have a .tmuxinator file actually checked into source control for projects in 0.7.0. Refer to #123.\n. That's the plan!\n. Couple of things.\n1. What version of tmux?\n2. Can you gist your ~/.tmux.conf.\n3. Gist the output of tmux show-option -g\n. Also, please make sure you're using 0.6.6 and not any pre versions. 0.6.6 was released awhile ago.\n. Shot in the dark but can you try setting  pane-base-index to 1 in your tmux.conf?\n. Yup that setting is in the README.\nGlad it's working now.\n. It looks like you don't have permissions to create the file testing.yml in ~/.tmuxinator. Try creating the directory first and making sure you have read and write permissions to that directory.\n. I don't think a tool should be setting environment variables. That could cause weird breakages with shell configurations.\nA error message would definitely be better. I think we can just delegate to mux doctor in that case.\n. Please make sure you've read through the entire readme, especially the base-index part.\n. If anyone else is still having issues please open a new issue. I'll probably add a warning to tmuxinator in the future regarding these settings.\n. The >>> is just eye candy :blush:\nI use my fork of prezto with a customised version of the peepcode prompt theme. prezto is a set of shell scripts for zsh.\n. Can this be split into 2 PRs please, 1 for the delete confirmation and another for the kill feature.\nAlso I'd I think this conflicts with #92 where close implies a clean shutdown. I'd prefer if this command was called kill.\n. This fails CI. If you want these features can you split up this into multiple pull requests:\n1. Custom path\n2. Custom indicies\n3. New alias.\nPlease add tests for all new code.\n. Maybe a shell script that starts the session that detaches it?\nbash\nmux start projectname\ntmux detach-client -s projectname\n. Addressed by #293\n. As far as the \"Command does not exist\" I believe that's because of thor. I'll have to look and see if thor provides a way to return a different status.\n. Fixed by #350.\n. This stems from the zsh completions. Are you using the ones bundled with the gem or are you using zsh-completions?\n. Closed due to lack of response.\n. Great thanks!\n. Have you both set pane-base-index as per the readme?\n. Please reopen if you're still having issues.\n. Please paste your config and the output for mux debug your_project and mux doctor.\n. Can you try the latest pre in #207 ?\n. And try not setting the pre option with that version.\n. Nope the last comment:\ngem uninstall tmuxinator\ngem install tmuxinator -v 0.6.7.pre\n. What version of tmux are you running?\n. Thanks. If we're removing activesupport, I'd definitely prefer if we factor out the calls.\n. Please gist the output for mux debug projectname\n. I think this will be fixed in the latest pre release. Please have a look at #207.\n. Have you tried with the latest pre release?\n. Can you gist the output of tmux show-options -g\n. Can you try setting your base-index and pane-base-index to 1?\nOn Thursday, 27 February 2014 at 7:34 pm, Phlegx Systems OG wrote:\n\nSure thing:\ntmux show-options -g base-index 0 bell-action any bell-on-alert off default-command \"\" default-path \"\" default-shell \"/bin/bash\" default-terminal \"screen\" destroy-unattached off detach-on-destroy on display-panes-active-colour red display-panes-colour blue display-panes-time 1000 display-time 750 history-limit 2000 lock-after-time 0 lock-command \"lock -np\" lock-server on message-attr none message-bg yellow message-command-attr none message-command-bg black message-command-fg yellow message-fg black message-limit 20 mouse-resize-pane off mouse-select-pane off mouse-select-window off mouse-utf8 on pane-active-border-bg default pane-active-border-fg green pane-border-bg default pane-border-fg default prefix C-a prefix2 none repeat-time 500 set-remain-on-exit off set-titles off set-titles-string \"#S:#I:#W - \"#T\"\" status on status-attr none status-bg green status-fg black status-interval 15 status-justify left status-keys vi status-left \"[#S]\" status-left-attr none status-left-bg default status-left-fg default status-left-length 10 status-right \"\"#22T\" %H:%M %d-%b-%y\" status-right-attr none status-right-bg default status-right-fg default status-right-length 40 status-utf8 on terminal-overrides \"88col:colors=88,256col:colors=256,xterm_:XT:Ms=\\E]52;%p1%s;%p2%s\\007:Cc=\\E]12;%p1%s\\007:Cr=\\E]112\\007:Cs=\\E[%p1%d q:Csr=\\E[2 q,screen_:XT\" update-environment \"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY\" visual-activity off visual-bell off visual-content off visual-silence off word-separators \" -_@\"  \n\u2014\nReply to this email directly or view it on GitHub (https://github.com/tmuxinator/tmuxinator/issues/200#issuecomment-36220719).\n. Sorry, but please provide more information. A stacktrace without any context is useless.\n. Seems like the indenting isn't correct. Pane configurations need to be indented inside a window definition. The following works.\n\n```\n~/.tmuxinator/dev.yml\nname: dev\nroot: /srv/foobar.com/www/app/\nwindows:\n  - plugin:\n    - cd plugins/foobar\n  - logs:\n      layout: main-vertical\n      panes:\n      - log:\n          - cd plugins/foobar\n          - tail -f error_log\n      - js:\n          - cd assets/js/frontend\n          - grunt watch\n  - theme:\n    - cd themes/foobar\n    - vim\n  - project:\n    - cd ../\n```\n. What version of tmux?\nAnd are you setting both pane-base-index and base-index?\n. Can you give me the output for tmux show-options -g. What version of tmux are you using?\n. I don't see pane-base-index set in the options. Can you set it to 1 in your tmux.conf?\n. Does pstorm background or is it a foreground process?\n. Duplicate of #143. Please follow that issue.\n. I'll try and cut a pre release ASAP.\n. I've just pushed up 0.6.7.pre.\ngem uninstall tmuxinator\ngem install tmuxinator -v 0.6.7.pre\n. Ping #170.\n. This works for rbenv, but I wonder if this is still a problem for users of RVM? Would like to fix this issue for both. There's also chruby but I don't think it uses environment variables.\n. #207 changed a bunch of stuff with how the -c option is handled. What version are you running of tmuxinator and tmux?\n. Hm with 1.8 the -c option shouldn't even be passed. Have you uninstalled older versions?\n. @machty can you raise a new issue with more information.\n. Please refer to the readme: https://github.com/tmuxinator/tmuxinator#passing-directly-to-send-keys\n. I can't reproduce this.\n. I've just upgraded and am not having any issues with tmux 1.9a.\nCould someone let me know what issues are occurring?\n. @artmees could you provide a tmux.conf, project file to reproduce this?\n. I'm unable to reproduce this with the sample config on my setup so I'm thinking it might be do with a setting in tmux.conf or something else.\n. Can someone who is having problems provide the output of mux debug project where project is the project having problems.\nAlso .tmux.conf may help too.\n. Those protocol mismatch errors make it seem like to me that you haven't restarted your tmux server. So you're using a new client and trying to connect to an old version of the server. \n\nOn 30 May 2014, at 2:28 am, Ahmed Abdel Razzak notifications@github.com wrote:\nhere is my .tmux.conf\nset -g default-terminal \"xterm-256color\"\nstart indexing from 1 not 0\nset -g base-index 1\nset -g pane-base-index 1\nand here is a project file that doesn't create the 2nd and 3rd windows on 1.9a only creates the first window with it's panes correctly\n~/.tmuxinator/ask.yml\nname: ask\nroot: ~/Vagrant/ruby/www/Backend\nOptional tmux socket\nsocket_name: foo\nRuns before everything. Use it to start daemons etc.\npre: sudo /etc/rc.d/mysqld start\nRuns in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: rbenv shell 2.0.0-p247\nPass command line options to tmux. Useful for specifying a different tmux.conf.\ntmux_options: -f ~/.tmux.conf\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: byobu\nwindows:\n- server:\n    layout: 5f72,181x55,0,0{50x55,0,0,0,130x55,51,0,3}\n    panes:\n      - zeus start\n      #- tail -f log/development.log\n      -\n- foreman: foreman start -f Procfile.dev # ** NOT CREATED \n- grunt: cd ../webapp && grunt server    # ** NOT CREATED \n  and here is the mux debug ask\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\n!/usr/local/bin/bash\ntmux -f ~/.tmux.conf start-server\\; has-session -t ask 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/Vagrant/ruby/www/AskNative/Backend\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux -f ~/.tmux.conf new-session -d -s ask -n server\n# Set the default path.\n  tmux -f ~/.tmux.conf set-option -t ask default-path ~/Vagrant/ruby/www/AskNative/Backend 1>/dev/null\n# Create other windows.\n  tmux -f ~/.tmux.conf new-window -c ~/Vagrant/ruby/www/AskNative/Backend -t ask:1 -n foreman\n  tmux -f ~/.tmux.conf new-window -c ~/Vagrant/ruby/www/AskNative/Backend -t ask:2 -n grunt\n# Window \"server\"\ntmux -f ~/.tmux.conf send-keys -t ask:0.0 zeus\\ start C-m\ntmux -f ~/.tmux.conf splitw -t ask:0\n  tmux -f ~/.tmux.conf select-layout -t ask:0 5f72,181x55,0,0{50x55,0,0,0,130x55,51,0,3}\ntmux -f ~/.tmux.conf select-layout -t ask:0 5f72,181x55,0,0{50x55,0,0,0,130x55,51,0,3}\ntmux -f ~/.tmux.conf select-pane -t ask:0.0\n# Window \"foreman\"\ntmux -f ~/.tmux.conf send-keys -t ask:1 foreman\\ start\\ -f\\ Procfile.dev C-m\n# Window \"grunt\"\ntmux -f ~/.tmux.conf send-keys -t ask:2 cd\\ ../webapp\\ &&\\ grunt\\ server C-m\ntmux -f ~/.tmux.conf select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -f ~/.tmux.conf -u attach-session -t ask\nelse\n  tmux -f ~/.tmux.conf -u switch-client -t ask\nfi\n\u2014\nReply to this email directly or view it on GitHub.\n. Make sure all tmux sessions are killed. Have you installed tmux in any other way other than homebrew? This seems more like a system configuration problem to me.\n. @LandonSchropp Ruby >= 1.9.3 should work. Travis is running tests on all major versions but I should probably build out some integration tests that actually check with the tmux session to see if the right windows and panes have been created.\n. Like I said please try:\nMake sure all tmux sessions are killed. Have you installed tmux in any other way other than homebrew? This seems more like a system configuration problem to me.\n. Are you still getting the protocol mismatch error when running the debug command?\n. Thanks for all the hardwork!\n. This should be handled by #282 \n. This is not related to tmuxinator but your system configuration. I'd suggest looking at rbenv.\n. The listing code is the following:\n\nruby\nDir[\"#{Tmuxinator::Config.root}/*.yml\"].sort.map do |path|\n  path.gsub(\"#{Tmuxinator::Config.root}/\", \"\").gsub(\".yml\", \"\")\nend\nPerhaps shelling out would be faster? Any tips would be welcome.\n. Should probably use File.basename for starters.\n. Switching to:\nruby\nDir[\"#{Tmuxinator::Config.root}/*.yml\"].sort.map do |path|\n  File.basename(path, \".yml\")\nend\nDoesn't really improve the speed for me. On Ruby 2.1.1 I'm getting around 0.2s for listing even before these changes.\nWhat version of Ruby are you running?\n. @LandonSchropp nope that seems fast enough. Only thing that could make this faster might be porting to Golang (which I've toyed around with but haven't got anything substantial yet).\n. Can you confirm that pane-base-index and base-index is set to 1?\n. Handled now by #293 \n. Can you please provide the output of mux debug projectname.\n. @markquezada 1.9a isn't supported yet. \nSeems like the base-index stuff is still a problem despite the note in the readme. \nI'll add a warning in tmuxinator itself that warns if the base indices don't match. \n. There is a way to do it on startup.\nIf you do this:\npre: tmux set-option string-titles \"#S\"\nYou'll get the project title. This won't persist when you reattach though. Not sure how you'd get that to work.\n. What version of Ruby are you using?\n. Yea unfortunately you'll need a new version of Ruby as tmuxinator doesn't work with Ruby 1.8.7.\n. d3c98e6 fixes this.\n. I'm not sure what the problem is. You have two projects? You can have multiple projects running at the same time.\n```\nin window 1\nmux start projecta\nin window 2\nmux start projectb\n``\n. Closing due to no response. If you want to have the same project opened in 2 sessions then please follow the existing issue #162 \n. This is failing CI. Could you have a look?\n. Sorry to be pedantic but could you also use\"instead of'too.\n. Thanks. I need to see if this affects the command line output for help and what not.\n. Wonder iftypewould be better? \n. Wonder if this is related to #236?\n. I dropped 1.8.7 support awhile ago as it is no longer supported from June last year. Clearly,doctor` should be updated to clearly state that Ruby >= 1.9.3 is required so that's my bad.\nI strongly recommend updating to 2.x.x.\n. Can you squash all commits into one rebased ontop of master?\n. I should point out that specs will fail if thor is locked to 0.15.0 in the gemspec. Ideally we would specify that builds on Travis run with both 0.15 as well as the current versions.\n. They're my dotfiles. I use prezto.\n. Could I get the tmux.conf, the output of tmux show-options -g and `mux debug project from Ubuntu? I might setup a VM later to test this.\n. This is really out of scope for tmuxinator (IMO). Please have a look at https://github.com/jlipps/tmux-safekill\n. Please make sure you've followed the instructions under https://github.com/tmuxinator/tmuxinator#base-index\n. Yea unfortunately 1.6 is a bit old. tmuxinator is in need of a major overhaul that I've been working on but it's not ready yet.\nI plan on stealing some ideas from tmuxp but have been short on time unfortunately. You could give tmuxp a go if you're having issues with tmuxinator.\n. Try setting tmux_options to -s set history-limit 1.\n. Actually that won't work.\n. I think you should be able to put this in the newly supported post. #293.\n. Thanks!\n. @nadeemkhedr  Commands are issued to panes and windows via send-keys, so you should be able to just specify the commands you want entered. So in the case of zooming in:\nwindows:\n  - some_window:\n    - editor:\n      panes:\n         - editor:\n           - vim\n           - C-b z\nThe valid keys that can be used are specified in the tmux man pages under \"Key Bindings\".\n@jby I don't think tmux can be run without a shell. You can definitely issue ssh commands to connect to a remote server via send-keys though.\n. From the debug, base-index is still being read as 0. Have you made sure to kill all tmux sessions before trying with the new settings in tmux.conf?\n. Closing as no reply in awhile. Hopefully problem is fixed.\n. Ideally I'd want to send the completions upstream to the completions project, whilst also including it here. The completions in the zsh-completions project are out of date and should rely on the completions subcommand.\nAny help updating the version included here and then sending a PR upstream would be appreciated.\n. I mean the actual completions and descriptions haven't been changed for a couple of years so the command descriptions don't match and some commands are missing.\nThe current completions aren't working though, so I've just pushed up an updated completions file to issue/zsh-completions branch. This required some changes to the completions subcommand in tmuxinator itself, but doing it this way means the completions should be kept up to date with changes to tmuxinator without having to update the script.\n. Here's a pre version you can try with the new completions file: https://rubygems.org/gems/tmuxinator/versions/0.6.10.pre\n. Might need to reinstall reattach-to-user-namespace if you've upgraded and kept your homebrew installation.\n. Also, iTerm is at 2.0 now so that's something else that can be upgraded too. Related #237.\n. Not sure what you mean by this? Can you give me an example of the workflow.\n. Hm, why not just use Meta-c (default is C-b) to open a new window in tmux? That use case doesn't require tmuxinator at all. \n\nOn 18 Nov 2014, at 12:00 am, Peter Nguyen notifications@github.com wrote:\n@Soliah An example is that I'm working in tmux in the default session \"0\" with a window named \"project1\". Now I would like to work with \"project2\" so I run:\nmux project2\nThe current behaviour create a new session called \"project2\" and attach to it. I rather would like it just to create a new window called \"project2\" in the same default session \"0\" instead.\n\u2014\nReply to this email directly or view it on GitHub.\n. Ah ok, we'd probably want a new sub command for that, maybe mux append project1\n. From the blog post sounds like tmuxinator isn't being started up with the appropriate socket, in this case your main tmux server socket.\n\nCan you try specifying the socket in your config as per the readme?\n. I have no issues with attaching to sessions started with tmuxinator.\n. From memory socket_name just passes -L custom_socket_name to tmux. You can verify this by going tmuxinator debug your_project. So if you've specified a custom socket_name you'll need to go tmux attach -t session_name -L custom_socket_name.\n. When you issue commands with tmux without the -L option it'll use the default socket in /tmp. Specifying a socket in the tmuxinator config means a non-default socket is used to start that particular session. So if you want to connect to the tmuxinator created session with the custom socket using vanilla tmux, you'll need to specify what socket using -L.\nThis is the same as doing this:\ntmux -L some_socket new-session -d -s my-session\ntmux attach -t my-session # won't work because it's trying to use the default socket\ntmux -L some_socket attach -t my-session # will work because tmux knows to look at the some_socket.\n. To answer your question directly, the session becomes invisible to the vanilla tmux command because by default, tmux looks for a socket named default.\n. I think you're version of Ruby is too old. I should probably add a minimum version of Ruby requirement to the readme. You'll need Ruby 1.9.3 or above.\n. @verganis Passes CI on Ruby 1.9.3 so it might something localised. Feel free to open another issue if you've got problems. Closing this one for now.\n. @magicalbanana I have cut and released 0.6.11.\nmux start project someothername should work.\n. Looking at the code, project_file is only nil if you don't have any projects in ~/.tmuxinator?\n. Ah ok, that's because the Dir.glob returns the full path, so the ^ in the regex is incorrect.\n. If you can remove the ^ in the regexp then I can merge this.\n. Command line flag would be great. Thor makes it relatively easy to add the option if you want to have a go @mvaraga?\n. Yes sounds good that the command line option takes precedence. \n\nOn 20 Feb 2015, at 8:36 pm, maxmeyer notifications@github.com wrote:\nPersonally I would expect that the --detach-option will override the configuration in the project config-file.\n\u2014\nReply to this email directly or view it on GitHub.\n. Thinks #293 deals with this now. Can you please try and comment in that issue for followup.\n. You'll need to provide more info. Please use markdown: https://guides.github.com/features/mastering-markdown/ when posting configs and debug statements.\n\nPlease post mux debug yourproject output.\n. Can you gist the output of mux debug auv-core.\n. Could you do mux doctor and in an irb session exec \"echo $SHELL\".\n. Because these are built in shell commands I'm not sure if we can support them as tmuxinator essentially wraps all commands in a shell script.\nEssentially your project file becomes this:\n```\n!/usr/local/bin/zsh\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server\\; has-session -t auv-core 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /Users/Soliah\n# Run pre command.\n  setopt clobber; source ~/projects/auv/devel/setup.zsh; stt\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s auv-core -n editor -c /Users/Soliah\n# Create other windows.\n# Window \"editor\"\ntmux send-keys -t auv-core:1.1 '' C-m\n  tmux send-keys -t auv-core:1.1 vim C-m\ntmux splitw -c /Users/Soliah -t auv-core:1\n  tmux select-layout -t auv-core:1 main-vertical\ntmux send-keys -t auv-core:1.2 '' C-m\n  tmux send-keys -t auv-core:1.2 cd C-m\ntmux select-layout -t auv-core:1 main-vertical\ntmux select-pane -t auv-core:1.1\ntmux select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t auv-core\nelse\n  tmux -u switch-client -t auv-core\nfi\n```\nwhich gets executed. Things like setopt, source and alias are all built in shell commands and don't make sense in a shell script.\nYour only option would be to put them in pre_window so send-keys is used in each window / pane.\n. Ah sorry I haven't released the latest changes on master which is what the completions require. Will be cutting a release today.\n. Just pushed v0.6.10 to Rubygems which should fix this.\n. This is required as the completions command outputs slightly different formatted commands for the latest completions file.\nIf you're using zsh-completions, those are out of date and I need to push the completions file upstream.\n. Related zsh-users/zsh-completions#299\n. Closing as this depends on above zsh-completion issue.\n. I'll see if I can have a look tonight.\n@jwgoh psych is the default YAML parser in Ruby so I'd imagine something changed. Could you raise another issue and paste your project YAML?\n. I've just pushed 0.6.11.pre which increases the version to not use -c to include 1.8. Appreciate testing to see if it works.\ngem install tmuxinator -v 0.6.11.pre\n. Think I've dealt with this finally.\n. Can you gist or paste your config?\n. Hrm can you try wrapping your root in \"?\n. This might be differences in the psych gem and maybe libyaml differences? Can you try parsing the tmuxinator project file in irb:\nrequire 'yaml'\nthing = YAML.load_file('some.yml')\nputs thing.inspect\n. Is this still an issue with the latest version of psych? Can you try version 2.0.15? If it works I'm going to lock the psych dep to that version and above.\n. Doesn't seem to be related to tmuxinator. Closing.\n. Could you add something to the readme explaining this?\n. @tlight is correct. Layout shouldn't have a dash as that indicates an element in an array.\n. Addressed by #273.\n. That looks like there might be something wrong with the .yml file as it's adding an extra send-keys statement. Either that or something has changed in the YAML parser. Here is what I get when I run debug:\n```\n!/usr/local/bin/zsh\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server\\; has-session -t test 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /Users/Soliah\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s test -n editor\n# Create other windows.\n# Window \"editor\"\ntmux send-keys -t test:1 vim C-m\ntmux select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t test\nelse\n  tmux -u switch-client -t test\nfi\n```\nNotice the single send-keys statement. Can you double check your yaml config doesn't have any stray characters.\n. Could you try setting the following in your .tmux.conf.\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\n. Awesome.\n. Does setting set-option -g default-terminal \"xterm-256color\" in tmux help?\n. @podung would you be willing to help out?\n. No obligations at all. I'll add you both as collaborators and you can help where you feel comfortable.\n. If this could be rebased ontop of #293 for the command line options that'd be great.\n. Thanks!\n. This sounds like an environment issue. I'd say it's because cron doesn't run things in full environment and tmuxinator relies on things in the environment.\nMaybe have a look here and try your luck: http://unix.stackexchange.com/questions/27289/how-can-i-run-a-cron-command-with-existing-environmental-variables\n. These features are currently on master and haven't been cut into a gem release yet. I'll try and cut a release soon.\n. Now released.\n. Thanks all this looks great.\n. I just merged in #273 which allows this behaviour. Right now you're correct in that tmuxinator will just attach to the same session.\n. Mm work around for now is to use name: \"242432\".\n. Starting without attaching should be supported now.\n. Have a look at https://github.com/jlipps/tmux-safekill\n. Should probably give an example in the README.\n. Actually we could just add these to the shell script template I believe. We'd need the equivalents for each shell type (zsh, fish and bash) at least.\n. Thanks for this :+1: :beers:\n. Closing due to no response. Please reopen if you're still having issues.\n. It would be great if this could handle not having to pass in the name of the project when the file is present. So just running mux should start the project. This would require modification to bin/tmuxinator though.\nLastly when doing a mux new we should probably add an option (--local) to create the file in the current directory instead of ~/.tmuxinator.\n. > Didn't see any tests to handle modifications to bin/tmuxinator; thougts on that?\nWe really need to get some integration tests setup as suggested in #336 to catch things like that.\nAs for Hound I'm finding it far too noisy really. What do you think about just having Rubocop run in travis instead? And having a rake task to just run rspec + integration tests if any + rubocop across Rubies would be great.\nBe good to have separate PRs for whatever you want to tackle. I'll merge this PR now.\n. Does this break #273?\n. Really should disable that check in hound.\n. Could you also add stuff to the readme describing this feature in the ERB section. Example usage would also be good.\n. I just merged #335 which was a rather large change. Can you please rebase on master?\n. What do you think about running Rubocop in Travis instead of using hound?\n. Great. You might as well add rubocop to .travis.yml and I'll go ahead and remove hound.\n. This looks like an issue with completions. Are people using zsh-completions?\n. Sorry I believe that's master so unless you've installed from source it won't be available.\nI'll cut a pre-release if I get time today.\n. I just pushed up 0.7.0 to rubygems. Might need to uninstall the previous version first.\n. Haven't had a chance to review but if both of you are :+1: you should go ahead and merge :shipit:\n. There's one more case where tmuxinator also supports looking at the current directory for a .tmuxinator.yml file.\n. The required completions file depends on the shell that you're using. They're located here https://github.com/tmuxinator/tmuxinator/tree/master/completion and will need to be sourced in your relevant rc file eg .bashrc.\nIf you use zsh, https://github.com/zsh-users/zsh-completions includes the same completions as above but with a bunch of others too.\n. Hey guys who should I make an owner on the project? Clearly I'm not really doing much with it anymore so should really give ownership to the repo to someone else too.\n. I think you can also remove the old hound tasks.\n. I'd be hesitant to use grep as historically using platform dependent things causes bugs for people. We're probably better off potentially doing this check in Ruby. #171 is an example of where this was an issue and was fixed by doing checks in Ruby.\n. Hrm there are actually alot of packaged versions: https://pkgs.org/download/tmuxinator.\n. I've never run a survey, or had usage collected from tmuxinator. I've seen node CLI projects like ember-cli have an opt in option to send usage stats. Could use a Firebase or something to not have to host a backend.\n. @ethagnawl yea go for it. Would be interesting to actually find out how many people are using tmuxinator \ud83d\ude04 \n. @podung EmberCLI and other projects have a prompt on initial run via https://github.com/yeoman/insight which I think is quite nice. It's also quite nice how they're just piggy backing off of Google Analytics.\n\nIn terms of storing a user's decision on disk, perhaps that would be better if #360 is done so we don't add another file to the home directory.\n. ActiveSupport was removed in #199 as it seemed unnecessary. That PR also added the monkey patch I believe. If factory_girl was pulling it in as a dep it should've been limited to a development dependency.\n. @ethagnawl Just thought I'd add that ActiveSupport isn't a runtime dep, so though factory_girl is included via bundler, it's not required during install of the gem.\nThis means removing the monkey patch will require changing the code.\n. @adamstrickland Looks like it was me merging #311. Originally I did have the development deps in the gemspec but looks like I must of missed the change in that PR.\n. Documented here: https://github.com/tmuxinator/tmuxinator#starting-a-session\nIf you would like to make it more obvious feel free to submit a PR for the readme.\n. Make sure you restart your tmux server (or just stop all sessions).. I'll review this on the weekend.. Ok PR looks, good. Definitely think the pre and post hooks should be deprecated. Additionally maybe lets cut a pre release version for testing in the wild.. Hrm, I wouldn't completely trust CI in this case on versions prior to 1.8 as we're not really running any integration tests against tmux itself. We're really just asserting against the generated shell script but I think we'd want some proper integration tests against tmux to confidently support versions prior to 1.8.\nA good integration test would be to actually run tmuxinator and assert against the state of the session.. I have some ideas on how we could test against tmux. \n\nUse standard list-sessions, list-windows and list-panes to test for session structure\nUse capture-pane to write the buffer to a file and assert against command outputs\n\nWill have to try a PoC for this. There is also an allow_failures for 1.7 in the travis confit which will need to be removed. . Hopefully the direction is clear - the implementation isn\u2019t particularly good and I haven\u2019t had time to flesh it out more. . Also from memory the most difficult part was determining the state of the tmux session to assert against - especially across versions. capture_pane and stuff are only available in certain versions. . The theme is based off of https://github.com/sorin-ionescu/prezto/blob/master/modules/prompt/functions/prompt_sorin_setup\nI don't actually use that theme anymore, I use https://github.com/sindresorhus/pure now (also part of prezto) as it was a bit of a pain keeping the theme in sync with upstream.\nFor those interested my dotfiles are here: https://github.com/Soliah/dotfiles. Please use let instead of instance variables here.\n. Newline between contexts please.\n. Newline after includes please.\n. Whitespace in blocks - after { and before }.\n. Can you use Erubis instead of ERB please. Refer to https://github.com/aziz/tmuxinator/blob/78ce3e106c426355b179cc0e7dc5d993e51ceaf1/lib/tmuxinator/project.rb#L14\n. As before, please use Erubis.\n. Could you change this to the new expect().to receive() syntax please.\n. Here too.\n. And here :smile:\n. Please add a new line.\n. Please add a new line.\n. Could please use 2 spaces for indentation.\n. Please add a new line.\n. Double quotes please.\n. Please move this to  spec_helper.rb Could you also adjust the style to use double quotes and whitespace before and after { } blocks.\nI also prefer white space before and after operators like = so options = {}\n. Could this be it \"extracts the base index from options\" do\n. Double quotes! :heart:\n. Could this be it \"extracts the pane base index from options\" do\n. Rather than Dir[..] + Dir[..] you can do Dir[\"path\", \"path\" ...].\n. Please add a guard against a nil name here. Running mux should just show the help.\n. Actually the check for an ARGV.length == 1 should probably be there instead.\n. Doesn't need _name right? Can't it just be removed.\n. This should be Tmuxinator::Config.exists? otherwise this code block isn't entered during the tests. Not sure why travis is passing as I'm getting a failure locally here.\nWill also mean the other stubs on File.exists? will need to be changed to Tmuxinator::Config.exists?.\n. Looks good. Please use double quotes here.\n. I think these tests should be run separately maybe so yes.. ",
    "connrs": "I also wouldn't mind a pretabs: directive.\nWith most of my projects, I have a main window with 3 panes with one running Vim at all times. I've set up a startup script which works out the unique ID of the pane, and generates a Vim server name for that project alone. I then use the other 2 panes to open files with the alias v (see below)\nI do use NerdTree as well but find I'm incredibly efficient at opening files with a combination of zsh, find and grep.\nfunction setProject() {\n    if [[ $TMUX != \"\" ]]; then\n        tmux_uid=${TMUX//[^0-9]/}\n        key=\"VIM$tmux_uid\"\n    else;\n        key=\"VIM\"\n    fi\n    export vimServerKey=\"$key\"\n    export appBase=$PWD\n    export app=$PWD/app\n    alias -r vim-project-server=\"vim --servername $vimServerKey\"\n    alias -r v=\"tmux select-pane -t 0; vim --servername $vimServerKey --remote-silent\"\n    if [[ $1 = \"launchVim\" ]]; then\n        vim --servername $vimServerKey\n    fi\n}\nI run setProject as the standard with all 3 panes and add the launchVim as a parameter to run the vim server in the main pane.\nI've had to do this because I have had problems setting up those zsh aliases and then running the alias. eg this fails:\n- Editor:\n    panes:\n        - setProject && vim-project-server\nbut this suits me fine:\n- Editor:\n    panes:\n        - setProject launchVim\nHaving the ability to run a environment prep function like setProject before the actual pane command is executed would be great. Especially as I want the environment ready to use with all my panes in a project.\n. +1 I'd like to see this one added as it is ideal for pair programming. Especially with some nice sshd_config to hold the hand of the terminal novice\n. ",
    "hedgehog": "@figgis see issue #41\n@figgis, just to clarify, this is not an end point but a step along a path.\nThe end point:\n- You can set shell environment variables per tmuxinator tab\n- You can set tmux session and tmux window/panel options per tmuxinator tab\n- You expose yourself to those settings by switching (alt+N to switch to the tab N) to that tabs tmux session\n- This is important:In all sessions, i.e. whenever you switch (alt+N to switch to the tab N), you still have a synchronized view of all the tabs (and their panels), all that is different is the shell env and tmux option settings you wanted to be specific to that tab.\nWhat changes from current behavior is that now to exit you do ctl+a:kill-session, if my changes get accepted you would ctl+a:kill:server\nThoughts?\n. @richoH, Agreed if Bundler was in a default group, but given the development group I thought it'd be useful to know if there are any bundler issues looming.\n. pull request merged\n. will reissue a pull request\n. pull request merged\n. Just to motivate this patch.... Given you have CI setup, you can access the shell on the various CI slaves, from within a project's tmuxinator:\n- ci:\n    layout: tiled\n    pre: cd /vms/ci\n    panes:\n      - if test \"$(vagrant status|grep ci_master|awk '{print $NF}')\" = \"running\" ; then vagrant ssh ci_master; else echo \"VM ci_master not running\"; fi\n      - if test \"$(vagrant status|grep ci_runner_1|awk '{print $NF}')\" = \"running\" ; then vagrant ssh ci_runner_1; else echo \"VM ci_runner_1 not running\"; fi\n      - if test \"$(vagrant status|grep ci_runner_2|awk '{print $NF}')\" = \"running\" ; then vagrant ssh ci_runner_2; else echo \"VM ci_runner_2 not running\"; fi\n      - if test \"$(vagrant status|grep ci_runner_3|awk '{print $NF}')\" = \"running\" ; then vagrant ssh ci_runner_3; else echo \"VM ci_runner_3 not running\"; fi\n      - if test \"$(vagrant status|grep ci_runner_4|awk '{print $NF}')\" = \"running\" ; then vagrant ssh ci_runner_4; else echo \"VM ci_runner_4 not running\"; fi\n      - if test \"$(vagrant status|grep ci_runner_5|awk '{print $NF}')\" = \"running\" ; then vagrant ssh ci_runner_5; else echo \"VM ci_runner_5 not running\"; fi\n. @prognostikos, could you share your rc/profile settings?\nI'm not able to get rbenv which rake to show the vendor path to that was installed by bundle install --path vendor --binstubs --shebang ruby-local-exec.  What I get is the path to the global install I do use the bundler plugin but that does not help either.\nEither way this is a very nice addition to have. @aziz?\nI also think the issue I'm having is related to the shell used, Ubuntu seems to use dash, and this makes ambiguous what environment it is that you have.  Opening another isse with some fixes to allow default shell to be customized.\n. @prognostikos thanks!  2Q's: \n- When you start a tmux session what is TERM set to within tmux?\n- Is this Ubuntu?\n. OK, I've just seen what tmuxinator generates and you can't ctl+a : source-file <something>.conf.\nEssentially tmuxinator creates a shell script not a tmux conf file.\nNonetheless the shell script is very useful, since this is the simplest thing to pass to Ubuntu's Startup Applications if you want a tmux session launched on login.  The alternative way is horrendous and will have wrestling with gnome-terminal magic for far too long.\nI've edited the issue to reflect the new focus.\n. @richoH: Agree it is not tmux task.  But tmux does allow for this to be done, so would be doing no more than allowing users a choice tmux provides for.\n. ",
    "figgis": "cool, I'll try this during the weekend!\n. ok, thanx. created that, then I tried gem install (failed) and sudo gem install still get unknown command. Should I really need to add ./var/lib/gems... to my $PATH?\nBTW .tmuxinator is completely empty\n. ",
    "franciscoj": "Hi,\nThis looks like pretty old to me, tmux is 1.7 right now so I wonder if your issue is still happening. I'll close for now, But feel free to reopen if it you still need help solving this.\n. Hi,\nI couldn't reproduce this, I guess the error was fixed with the release of 0.5.0. Please, reopen if the error persist.\n. update_scripts was removed some time ago https://github.com/aziz/tmuxinator/commit/769357a3b21383327493562b72b27d58e5f2dff9#L0L128 so I guess this is not happening anymore. Please reopen if you need to.\n. Hi!\nrbenv support has been added recently with merging of #96, thanks for your support! :+1: \n. This is idd fixed as of 0.5.0\n. Hi,\nI guess we can consider this as fixed since now the way of opening project abc is mux abc instead of start_abc. Please, reopen if you think it is needed.\n. @danielbayerlein I know :( And I'm sorry. Just when @aziz told me I could give him a hand with it I got quite a lot more load from work and home and I need to organize before I can go with this.\nIn the meantime, there's an error on master which prevented me from being able to merge anything. If anybody can send a pull requests to fix it. Everything would be much more smooth and I could start merging all the amazing pull requests that the comunity has already sent.\nKr,\nFran.\n. @danielbayerlein it doesn't matter the layout or panes I load, I get only one pane and 1 window.\nHowever, the rebase from @Soliah seems to fix this for some reason.\nI'm merging the @Soliah rebase (which includes some more things).\nThanks a lot @matthutchinson for your work :+1: \n. @sven-q I'm trying to fix a bug I found on master before merging any other pull request. I only need to find a bit more time for it ^^\n. Hi,\nI don't really get what you propose. Could you give an example?\n. Hello @indirect,\nThis was rebased and pull-requested again in #96 together with the rbenv support.\nThanks a lot for your collaboration :+1: \n. Tmuxinator will create the ~/.tmuxinator folder once you do a first mux open to create your first project's config. It won't exist until you do that.\n. I'll have a look and try to merge #48 for next release.\n. Hi,\nCan you give some more input on this? Which issue are you getting?\n. As I already said in other pull request there're quite some interesting things waiting to be merged. However I'm trying to fix a bug I've found in master before I merge anything else.\n@johnlane could you add some tests?\n. Hi,\nCould you get this fixed with @jaredmcateer proposal? I'll close for now, please feel free to reopen if you still have the issue and if possible include mux doctor output.\n. Can you paste your project config? Or at least a sample which is as similar as possible?\n. I've detected the same issue and it was related to my zsh config. Are you using zsh?\n. ",
    "tommcc": "I'm having this issue as well. This seems like a great project, but I can't tell which fork to choose if this one isn't even being updated to fix an install bug?\n. ",
    "yesmeck": "It seems you must run the command in a tmux session.\n. ",
    "aokolish": "is this still relevant?\n. Looks like this can be closed (as of 0.5.0):\n```\n$ mux aoeu\nThere's no command or project 'aoeu' in tmuxinator\netc....\n```\n. :+1: can this be merged?\n. I'd be happy to help out. I use this every day.\n. ",
    "stabenfeldt": "It fails at my place too.\n``` bash\n\u279c  ~  gem install tmuxinator\nFetching: tmuxinator-0.6.3.gem (100%)\n[cut..]\n\u279c  ~  which tmuxinator.bash\ntmuxinator.bash not found\n\u279c  ~  source which tmuxinator.zsh\nsource: no such file or directory: tmuxinator.zsh\n\u279c  ~  gem list tmuxinator\n LOCAL GEMS \ntmuxinator (0.6.3)\n\u279c  ~  tmuxinator doctor\nChecking if tmux is installed ==> Yes\nChecking if $EDITOR is set ==> Yes\nChecking if $SHELL is set ==> Yes\n```\n. @Soliah, Thanks! I got everything rolling now! :+1: \n. ",
    "gerrywastaken": "If running rbenv you will need to run rbenv rehash\n. ",
    "luizs81": "no update about this issue so far? I'm using OSX El Capitan \n```\n\u279c  ~  gem install tmuxinator\n__________________________________________________________\n..........................................................\n\nThank you for installing tmuxinator.\n\nMake sure that you've set these variables in your ENV:\n\n  $EDITOR, $SHELL\n\nYou can run `tmuxinator doctor` to make sure everything is set.\nHappy tmuxing with tmuxinator!\n\n..........................................................\n__________________________________________________________\n\nSuccessfully installed tmuxinator-0.7.1\nParsing documentation for tmuxinator-0.7.1\nDone installing documentation for tmuxinator after 0 seconds\n1 gem installed\n\u279c  ~  tmuxinator\nzsh: command not found: tmuxinator\n\u279c  ~  rbenv rehash\n\u279c  ~  tmuxinator\nzsh: command not found: tmuxinator\n```\n. ",
    "ethagnawl": "Hey, @luiz-s81. A few things: \n- have you tried using Bash or Fish to see if this is a Zsh issue? \n- what's the output of cd ~ && gem list | grep tmuxinator?\n- you should probably open a new issue for your specific problem (Tmuxinator version, OS X version, shell, etc.)\n. @primalmotion I'm pretty sure the culprit is split-window's default behavior. \nFrom the manpage:\n\nsplit-window:\nCreate a new pane by splitting target-pane: -h does a horizontal split and -v a vertical split; if neither is specified, -v is assumed.\n\nAs things stand, tmuxinator splits the pane vertically and then sets the layout. So, in your case it's running out of vertical space and the command is failing before it even tries to use the available space.\nI just did a quick experiment which used tmux splitw -h ... to explicitly split the previous pane horizontally and your use case works -- as you're expecting it to. This can't just be wantonly implemented, though, because it will likely break other peoples' currently \"working\" layouts. I'll have to think on this and revisit.. +1\n. @dianapinkberry It looks like there are still some whitespace issues happening here. Specifically, the first three lines (of content) should be left-aligned; the lack of space between the key/value in name and root.\nI was able to get it working by changing it to the following:\n```\n~/.tmuxinator/voltron.yml\nname: voltron\nroot: ~/\nwindows:\n  - madhax:\n    layout: 15a8,169x41,0,0{147x41,0,0[147x13,0,0{81x13,0,0,60,65x13,82,0,61},147x19,0,14,62,147x7,0,34{89x7,0,34,63,57x7,90,34,64}],21x41,148,0,65}\n    panes:\n      - voltron view disarm\n      - voltron view bp\n      - lldb\n      - voltron view stack\n      - voltron view bt\n      - voltron view reg\n  - server: bundle exec rails s\n  - logs: tail -f log/development.log\n```\nHTH! :]\n. @dianapinkberry It looks like there are still some whitespace issues - layout and panes should be indented to the same depth. Try downloading the file I linked to and see if that solves your problem.\nSeeing that your problem isn't related to this issue (AFAICT), please follow-up on the Gitter channel if you need any additional help.\n. @seanh I'm unable to reproduce this issue on Debian 8 using Fish 2.2.0. \nCould you confirm that you're still seeing it using Tmuxinator 0.8.0 and, if there's still a problem, provide some additional information about your OS, Fish version, etc.?\n. @rightaway and @Soliah, please see PR #350.\n. Does anyone else think this is worth pursuing? Aside from history-limit, are there any other scenarios where this option would be useful?\nIt'd be trivial to add a pre_tmux option. Though, the naming might be a bit confusing as there's already a pre option.\n. @azat I'd prefer introducing the explicit pre_tmux option. Does anyone else have thoughts either way? (cc @Soliah, @J3RN, @adamstrickland)\n. Closing this due to inactivity. If anyone is still seeing this issue, please feel free to re-open.. @Soliah Thankfully, I'm no longer seeing this particular issue, wherein the commands would stop working entirely. (I reformatted a few weeks back, partially because of this issue.) \nHowever, if I spin up a new Tmuxinator project and then debug it, I do still see the duplicate send-keys entries:\n```\n!/bin/bash\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server\\; has-session -t wat 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /home/peter\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s wat -n editor -c /home/peter\n# Create other windows.\n  tmux new-window  -t wat:1 -n server\n  tmux new-window  -t wat:2 -n logs\n# Window \"editor\"\ntmux send-keys -t wat:0.0 '' C-m\n  tmux send-keys -t wat:0.0 vim C-m\ntmux splitw -c /home/peter -t wat:0\n  tmux select-layout -t wat:0 main-vertical\ntmux send-keys -t wat:0.1 '' C-m\n  tmux send-keys -t wat:0.1 guard C-m\ntmux select-layout -t wat:0 main-vertical\ntmux select-pane -t wat:0.0\n# Window \"server\"\ntmux send-keys -t wat:1 bundle\\ exec\\ rails\\ s C-m\n# Window \"logs\"\ntmux send-keys -t wat:2 tail\\ -f\\ log/development.log C-m\ntmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t wat\nelse\n  tmux -u switch-client -t wat\nfi\n```\nNote: I ran the debugger with my existing .tmux.conf and again with every line removed and still saw this same result.\nPlease let me know if there's any additional environment or config information I can provide.\n. Same results. \nHere's my .tmux.conf, in case that might be of any help.\n. I can confirm that after upgrading to 0.6.11, I'm no longer seeing those unnecessary send-key calls.\n. I'll have a look through the issues, do some triage and pick-up anything I might be able to fix. (As my schedule allows, of course.)\nThanks for all you've done thus far! :+1: \n. Might the fix be as simple as wrapping this chain of ||s with (...).to_s?\n. @podung Sure, I'll have a go this weekend.\n. Ok - I'll take a pass at pruning the fixture.\nOn July 26, 2015 9:46:36 AM podung notifications@github.com wrote:\n\nThanks for this.  See my comment on the fixture file, but otherwise I'm \nready to merge it.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tmuxinator/tmuxinator/pull/324#issuecomment-124988848\n. @podung I pruned the new fixture and made some stylistic changes per @houndci.\n. Closed via #630. (Feel free to reopen if it makes sense.). Since project files are first processed as ERB, you could do something like the following:\n\n```\n~/.tmuxinator/dyn.yml\nname: dyn\nroot: ~/\nwindows:\n  # just using echo as a POC; this is where you'd make your function call\n  <%- echo \"111,222,333\".split(',').each do |ip| %>\n  - tunnel-to-<%= ip.chomp %>: echo tunnel_to <%= ip %>\n  <%- end %>\n```\n\nThe docs do touch on this briefly, but it might also be useful to include an example which shows how to manipulate the project file's YAML structure.\n. @kylezeeuwen has marked this as resolved via StackOverflow.\n. This problem is caused by Tmuxinator's use of the -t flag in the command, tmux start-server\\; has-session -t first 2>/dev/null, which will match on a prefix.\nPer the docs: \nWhen looking for the session name, tmux initially searches for an exact match;\nif none is found, the session names are checked for any for which\ntarget-session is a prefix or for which it matches as an fnmatch(3) pattern.\nChanging -t to = in the following line of lib/tmuxinator/assets/template.erb <%= tmux %> start-server\\; has-session -t <%= name %> 2>/dev/null will solve the problem. \nI've opened a PR that contains this fix, but I still haven't come up with a good way to write a failing test case for this bug. I'd appreciate feedback from anyone who has suggestions.\n. Should be resolved by fix for #354.\n. This isn't necessarily a problem with your PR, as the issue was pre-existing, but it looks like config = \"#{Tmuxinator::Config.root}/#{project}.yml\" ignores local config files.\n. @J3RN As it's not directly related to your changes, I've created an issue for the problem noted above and will address it in a separate PR.\nOne nitpick I noticed while re-reviewing these changes just now: should say be used instead of puts in Cli::delete? IIRC, it's just an alias for puts and they're both used throughout (I wouldn't be opposed to opening an issue for this), but this one stuck out because say is used in the other branch of the containing conditional.\nOtherwise, this looks good to me. :+1: \n. > I think I fixed what you were talking about. Good call on the say thing -- I had never actually noticed that say was a real method.\nLooks good! So, say is actually provided by Thor and it does have some additional capabilities and behaves slightly differently than puts. I think it's probably worth creating an issue about standardizing its use.\n. @adamstrickland Shall we merge this one?\n. @podung @adamstrickland Thanks for your feedback. I'll try to put something together this week.\n. It looks like there's a Rubocop configuration issue which is causing the build to fail.\nError: The `Style/TrailingComma` cop no longer exists. Please use `Style/TrailingCommaInLiteral` and/or `Style/TrailingCommaInArguments` instead.\nDo we want to try to address that in this PR? Style/TrailingComma is currently disabled, so we should be able to drop in either/both of those suggestions.\n. @adamstrickland I'm fine with pinning Rubocop to 0.35.1 to get this PR merged. I'd be happy to open a new issue about upgrading, if you (or anyone else) thinks it'd make sense.\n. Closed via #511 and #549.. This a dupe of #355. The same bug was responsible for this behavior when using mux new, mux edit and mux open.\nThe fix is in master and there should be an updated Gem (0.7.1) released in the coming days.\n. Which version of Tmuxinator are you using? If it's 0.7.0, then this is a \ndupe of #354. The same bug was responsible for this behavior when using mux \nnew, mux edit and mux open.\nThe fix is in master and there should be an updated Gem (0.7.1) released in \nthe coming days.\nOn December 14, 2015 5:26:22 AM Kevin Sj\u00f6berg notifications@github.com wrote:\n\nI'm encountering the same problem.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/tmuxinator/tmuxinator/issues/363#issuecomment-164402228\n. @KevinSjoberg The build is still failing, so I wanted to bump @adamstrickland's request to merge upstream/master into your PR. I'd be happy to open a new PR if you're unable to follow-up on this one.\n. @KevinSjoberg Great. Thanks!\n. Thanks for following-up, @KevinSjoberg! \n. @gon1332 AFAIK, the only time Tmuxinator would explicitly attempt to do anything with your Tmux config file is if you'd specified tmux_options in devproject.yaml, which it doesn't look like you're doing.\n\nSanity check: is your config picked up as expected when manually starting Tmux using this same shell?\n. @rubendibattista Which version of Tmuxinator are you using? Your problem sounds like #354, which was fixed in version 0.7.1.\n. > I would be fine with taking reports, but I'd probably set up a separate email account for just that.\nOK - that seems like the simplest way forward. In the unlikely scenario that you find yourself swamped by reports, we could investigate setting up an invite-only Google Group or something.\n. Would you like me to drop-in the email address in your profile?\n. Shall I merge this?\n. @dannluciano You're right, it's not as straightforward as I would have hoped. I'll take a pass at it in a separate PR.\n. @dannluciano I'm not sure what the issue was, but I just restarted the job.\n. @adamstrickland Shall we merge this?\n. @ncoop That fix looks reasonable. Do you want to submit a PR?\n. Addressed in #388.\n. RuboCop is unhappy about the spacing in match_array. Otherwise, this looks good to me.\n. @adamstrickland @J3RN Any objections to me merging this PR?\n. Closed via #394.\n. Closed via #393.\n. I'm going to be away from my computer for the next week, so if someone wants to fix the RuboCop error, I'd be greatful. Otherwise, this will need to sit on the backburner for a bit.\nRelatedly, we might want to consider rolling RuboCop, Rspec, et al into a common \"test\" Rake task. I regularly forget to run RuboCop and based on build errors in other PRs I've seen, I suspect others do too. \n. @J3RN OK - I've (finally!) resolved the RuboCop issue.\n. @J3RN Rebased and updated CHANGELOG.md.\n. :+1: \n. @J3RN @ncoop Shall we close this issue?\n. @Richard-Walton My apologies - I didn't realize that syntax wasn't backwards-compatible. \nYour proposed solution looks reasonable to me. Unfortunately, I'll be away from my computer for the rest of the week, so I'll be unable to help with testing/integration.\n. Closed via #404.\n. Nice work, @J3RN. My apologies for suggesting the port to say without fully understanding the consequences. :[\nUnless you've already started working on it, I'd be happy to write that test.\n. While I do like that your change is explicit about what's being passed to File.expand_path, it may be worth considering that Project#root contains an identical ternary:\ndef root\n  root = yaml[\"project_root\"] || yaml[\"root\"]\n  root.blank? ? nil : File.expand_path(root).shellescape\nend\nAs such, we could abide by the TellDontAsk principle and always pass its return value through to File.expand_path:\nFile.expand_path(value[\"root\"], project.root).shellescape\nI don't feel too strongly about this either way, I just thought I'd propose the change while this PR is still in-flight.\nEDIT: embedding code snippet from Project for posterity; the linked range shifted at some point\n. @rmccue Is there any chance you'll be able to revisit this PR? If not, I'd be happy to take over.\n. @adamstrickland Sure, I can revisit this.. Fixed merge conflict in CHANGELOG.md.\n. @J3RN If people are content with using \"#{ENV['HOME']}/.tmuxinator\" instead of \"~/.tmuxinator\" (the former is used elsewhere in config.rb), I think we should merge this one.\n. Could you share the output of tmuxinator debug api?\n. That could very well be... \nOut of curiosity, have you tried starting the project using Bash?\n. @jc00ke Okay - that's good to know.\nUnfortunately, I'm unable to reproduce this issue on Debian 8, using Fish 2.2.0.\nMaybe someone else who has access to an Ubuntu 16.04 environment can chime in?\n. Upon further inspection, I'm also seeing a failed to connect to server: Connection refused message only when running tmuxinator start $PROJECT or tmuxinator debug $PROJECT outside of a Tmux session. Though, in my case, if I do start the project, all commands are executed without issue. (Environment is Debian 8, Tmux 1.9, Tmuxinator 0.8.1 and Bash/Fish.)\nUPDATE:\nThis appears to be caused by the use of tmux ls in project.rb +151, which shows this message and returns a non-zero status when there are no existing sessions.\nHopefully, the problems @jc00ke @autumnlansing and @fbertux are seeing will be addressed by #445. \nYou've no obligation, of course, but it'd be really helpful if any/all of the people mentioned above would pull the branch and verify that things are working as expected.\n. Thanks for putting this together, @cwhits.\nPresumably, those heredocs were used to keep the lines from extending past 80 columns. If people feel strongly about keeping lines below 80 columns (I don't see mention of this anywhere in README, CONTRIBUTING, rubocop.yml, etc.), we could consider doing something like this to strip any leading spaces.\n. Another alternative would be using an array instead of a heredoc. It's not particularly pretty, but it solves this problem and avoids the other weird edge-cases presented by heredocs.\n...\n  start: %w{\n  Start a tmux session using a project's tmuxinator config,\n  with an optional [ALIAS] for project reuse\n  }.join(' ')\n  ...\n```\n\u03bb ./bin/tmuxinator help start\nUsage:\n  tmuxinator start [PROJECT] [ARGS]\nOptions:\n  -a, [--attach], [--no-attach]  # Attach to tmux session after creation.\n  -n, [--name=NAME]              # Give the session a different name\nStart a tmux session using a project's tmuxinator config, with an optional [ALIAS] for project reuse\n```\n. @cwhits I'm not opposed to that. Does anyone else (@J3RN, @adamstrickland) want to chime in?\n. Great. \nIt may be worth opening a separate issue to address those instances. I haven't had a chance to test those messages in a terminal, but it looks like they're probably plagued by this issue, too.\n. Hey @cwhits, any update on this PR? I'm happy to take over if you've moved on. :)\n. @cwhits You should be able to run ./bin/tmuxinator help from the repository's root directory.\n. > The only thing I noticed is that the \"aliases of new\" (edit and open) don't appear in the help menu. They do appear when running tmuxinator commands and function correctly when running tmuxinator completions _____.\n@cwhits That's very perceptive. Though, it seems like this was a deliberate choice by the Thor folks. aliases/map appear meant for use in specifying abbreviations, as opposed to aliases (despite the metadata option name). Quoting whatisthor.com, \"Typically, you would use aliases to provide short versions of the option.\" e.g. map \"n\" => :new\nI think we should create a new issue in order to determine 1) whether this is worth addressing and 2) what potential solutions could look like. (See #420.)\n. @cwhits Looks like the only outstanding issues are the Rubocop violations: using two spaces to indent the array members and replacing the single-quotes with double-quotes in the call to .join. \nApologies for using non-conforming formatting in my initial suggestion.\n. @podung @J3RN @adamstrickland Any opposition to merging this PR?\n\n. @cwhits Would you mind updating CHANGELOG.md, so we can get this merged?\n. @cwhits Thanks! Unfortunately, there's now a merge conflict in CHANGELOG.md. :crying_cat_face: \n. @podung @J3RN @adamstrickland This build is failing because Travis is unable to install ActiveSupport 5.0 (I believe this is being caused by FactoryGirl). Should we merge this PR (the tests pass and the build was passing) and sort out that issue elsewhere or attempt to handle that in this PR? \nIf it's the latter, I don't know what the appropriate fix is (declare a dependency on ActiveSupport 4.2.6 in the Tmuxinator Gemfile?), so please feel free to propose suggestions.\nUPDATE: Locking the activesupport version in Tmuxinator's Gemfile appears to solve the problem (I'll create a separate issue to address this).\n. Thanks, @cwhits!\nNow that that is all settled. Is anyone opposed to me merging this?\n. Bumping this issue because it came up again in #498. (I'll take a pass at splitting out/streamlining the commands when I can find some time.). It would be nice to have some idea what percentage of users are using which versions of Tmux before making any decisions about dropping support for older versions.\nDoes anyone (who's been contributing to this project longer than I have) know if there's ever been any sort of a State of Tmuxinator survey? Also, is anyone familiar with how is this handled in other, similar OSS projects? Adding an opt-in statistics module seems like the most foolproof way to do it. However, that'd necessitate introducing a back-end component or integrating with a third-party service to persist/compile the collected statistics.\n. @Soliah Should I open an issue regarding an analytics feature? It'd be a good chunk of work, but would probably be worthwhile.\n. @adamstrickland This could be part of that eventual refactoring, but couldn't Cli::config_path be replaced with calls to Config::project? Either way, \ud83d\udc4d.. > I've never had fun with Net:HTTP. I'd lean towards httparty or faraday, but that's only my opinion.\nGenerally speaking, I agree. However, I'd prefer to avoid introducing a new dependency and Net::HTTP should be tolerable if we're only making a single or very few, similar requests.\n\nCould we do this with a post-install trigger?\n\nRight - that's what I was thinking. However, after a (brief) look through the Gemspec docs, I don't see any mention of post-install hooks/triggers - just the infamous post_install_message.\nThe quick-and-dirty approach would be to have the gem prompt the user the first time it's run and then write their decision out to a file, which it'd reference in the future.\n\nI'm thinking that a request should be fired off whenever a user runs a certain command (mux start?) and should probably be run async so as to not cause a noticeable performance hit.\n\nThis is the one aspect of this feature I'm unsure about. It'd be nice to know which commands people are using, but I'm not entirely sure what's to be gained from that data.\nI was thinking it might be good to start with a single request that's triggered post-install (which attempts to collect Tmux version, Tmuxinator version, OS, etc.) to see if people are even interested in sharing this data.\n. Thanks for the feedback, all!\nBased on the above, I'm thinking the first pass should look something like the following:\n- Use Net::HTTP to send environment info (OS, OS version, Tmux version, Tmuxinator version, anything else?) to Google Analytics\n- Ask users to opt-into sharing anonymous data using a pre-populated \"Yes\" response - assuming Thor supports some form of this\n- Store the user's preference on disk (if possible, wait until XDG support has been added in order to prevent further pollution of their home directories)\nRemaining open questions:\n- Should we create a Tmuxinator Google account?\n- Are people okay with collecting only the user's environment information in the first iteration? Before littering the codebase with logging code to track usage, we'll probably want to be sure that 1) users are willing to opt-in and 2) data generated by tracking activity is useful.\n. @adamstrickland Why the long face? \n\nFor the time being, do not save preferences\n\nAre you thinking the environment info should be reported every time the gem is used? I was originally thinking the data would be reported once (post-install) but now you've got me rethinking otherwise... For instance, the one-time approach wouldn't tell us when people upgrade Tmux.\n. Another, simpler approach could be asking users to fill out an online survey as part of the Ruby Gems post_install_message, a la Cucumber. \n\n. Here's a first pass at the online survey.\nDoes anyone have any feedback about this approach or the questions themselves?\n. @HaleTom Thanks for the feedback! I'll incorporate the above in my next pass at this.\n. Closing this for now. Please re-open if anyone thinks it's worth discussing.. I'm still seeing this on 0.8.1.\n\n\n. > So, do we want to :ship: this and then have #416 pull latest before merging in the PR?\nThat sounds good by me.\n\nAs an aside, why are we putting this in the Dockerfile and not in the Gemfile itself?\n\nThat was just my POC fix. The change in the PR was made to the Gemfile.\n. This appears to be a duplicate of #401.\n. IMO, the completion hack is a good stopgap. \nHowever, I'd vote that bin/mux stays or at least gets tabled and has a new issue is opened about re-introducing it, so that if/when Rubygems gets this issue sorted out, mux will 1) work out-of-the-box again and 2) work for people who don't want to/can't use shell completions.\n. @ncoop If it doesn't cause any problems, I don't see why not. I don't feel too strongly about it, though - I'd just like to see that option working as it was again at some point. Does anyone else have thoughts on this?\n. @ncoop Sorry - I'd forgotten that it was causing an error on install. I recant my earlier suggestion and vote to remove it, until Rubygems fixes the bug.\n. @adamstrickland Sure, I wouldn't be opposed to that. \nMaybe we also add an optional --local flag to tmuxinator start, too.\n. I just took a more thorough look into this \"issue\" and discovered that it's already possible to create a local tmuxinator project using the command @adamstrickland mentioned above. (My apologies, I didn't realize you were saying you preferred the behavior as it exists.)\nThere is, arguably, a communication problem here, though. The docs don't mention this feature and because tmuxinator help doesn't mention command options, users need to drill down into tmuxinator help new in order to find out that this option exists. Unfortunately, I don't think we can do anything about the latter.\nFor simplicity's sake, I'm going to close this issue and open a new one about updating the documentation.\n. If this is merged, we'll likely want to make a note of it in #401.\n. Does anyone have additional thoughts on this PR or shall we merge it?\n. Does anyone have additional thoughts on this PR or shall we merge it?\n. This looks to be caused by the RubyGems issue linked to in #401.\n. @J3RN Great! Even if this fix doesn't solve all the issues people are seeing in #414, it's still forward progress. :grinning: \n. Does anyone have additional thoughts on this PR or shall we merge it?\n. @DuncSmith Looking good! \nMy one remaining question is: should the user see a deprecation warning if they use synchronize: true or synchronize: 'before'?\n. @DuncSmith Ditto! \nI just pulled your branch, did some manual QA and it looks great. \nMy (superficial) feedback would be:\n- change \"ran\" to \"run\" in SYNC_DEP_MSG \n- change \"0.8.2\" to \"a future release\" in SYNC_DEP_MSG \nUPDATE: @adamstrickland beat me to it. I'll create an issue for the above, if anyone thinks it's worthwhile.\n. LGTM.\n. @adamstrickland What would you think about re-introducing the last sentence of @DuncSmith's deprecation warning (or something similar), which explicitly tells users how to opt into the after behavior? (e.g. \"To use this behaviour now use the 'synchronize: after' option.\")\n. > Tmuxinator::Config actually contains several not config-related methods, such as installed?, editor?, and shell?. Should we open an issue to move these to a validator of sorts?\nAgreed. I'll open an issue about that.\nDid you have any thoughts about the placement of the call to Tmuxinator::TmuxValidator::validate!, @J3RN? That's the only aspect of this feature I have mixed feelings about.\n. > An idea I was toying with was running \"doctor\" silently before start ...\nYeah, that's a great idea. There's definitely something to be fleshed out with\nrespect to the Doctor and Validator concepts. Maybe we create one module, \nwhich does all of the above and accepts an argument which determines \nwhether it prints warning messages or raises exceptions? I'm open to \nscrapping this feature if it makes sense to nail down that implementation, \nrather than ship something that's half-baked. If not, we should definitely \ncontinue that conversation in #457.\n\nWhat were you thinking about for an alternate implementation?\n\nI was thinking the validation could take place somewhere inside Tmuxinator.rb.\nIn my opinion, execution should halt if Tmux isn't available - that prevents us\nfrom having to shoehorn validation into every possible entrypoint (... and now\nthat I just said that, I realize this current implementation doesn't cover\nevery scenario; e.g. Cli#stop). However, if that's too heavy handed, then\nCli#start is an obvious candidate for a scenario where validation should\nhappen. (Per my revelation, we'll need to map out each entrypoint which calls\nout to tmux if we want to go with the individual entrypoint approach.)\n. There's a pending pull request which purports to implement this feature. \nIf you're feeling up to it, you should pull the branch down and test it out. I'm sure the folks involved in that PR would appreciate some additional QA.\n. @J3RN, I think you are right. I was actually reading this blog post just now, which makes that case.\n. \n. @emayssat-ms This is not currently possible. \nHowever, this feature could potentially be added in conjunction with #360.\n. @emayssat-ms This should now be possible on master via #511. This feature has not yet made it into a release of the gem, though.. @J3RN That sounds reasonable to me. ruby-lang.org EOL'd Ruby 1.9.3 in February 2015.\n. Hi, @yatishb.\nIn order to help you debug this, it'd be helpful to know a few things:\n- Could you share the output of tmuxinator debug docker? \n- Which version of Tmuxinator are you using?\n- Which OS/version are you using?\nIt's possible that you're seeing this issue, which has been fixed but has not yet made it into a Tmuxinator release.\n. @yatishb A new version of the gem has been released. You should try upgrading to see if the fix for #414 solves your problem.\n. @emayssat-ms A workaround would be prefix the command with a comment, recall the last command (up key in Bash), delete the comment and press enter.\n. Closed via #601.. @emayssat-ms Similar behavior can be achieved using ERB conditionals and optargs.. @aashudwivedi This appears to be a duplicate of #478. Please re-open if not.\n. @adamstrickland I've reviewed these changes a few times and, barring a few small nitpicks (adding comments now), everything looks good to me. Though, I haven't had a chance to pull it down and experiment yet.\n. @HaleTom I had some time to experiment with this today. With the exception of one very small item (covered below), everything appears to work as intended.\nI noticed that the config path at the top of the project yml file always uses the old default directory (~/.tmuxinator/$PROJECT). It's possible that this is caused by some legacy config on my system and it doesn't break anything (that I'm aware of, at least) but it's probably worth addressing. Also, as a bonus, the fix will likely address #440.. @Soliah @adamstrickland Any thoughts on the above? Shall we merge this as-is? It might be a bit self-serving, but I'd like to begin using XDG on my dev machines.. Merging this broke the build. I'm looking into it now and will submit a patch.\n@HaleTom If you're available, would you mind taking a look to see if anything jumps out at you?\nUPDATE: \n\n\nI wasn't/still am not seeing this failure locally.\n\n\nI've reverted the merge, but still have yet to figure out what the underlying problem is.\n\n\nDoes anyone know if it's possible to re-open the PR? If not, perhaps we could ask @HaleTom to add a new commit and submit a new PR.. @HaleTom Wow. I hope you're feeling better! :|\n\n\nThanks for looking into this issue. Unfortunately, PR #506 doesn't look like it's going to address the problem and reintroduce the changes from your original PR. Perhaps that's because #506 wants to merge its changes into the branch: tmuxinator:revert-479-Issues-360-462? Could you try creating a new PR and selecting tmuxinator/tmuxinator base:master as the target branch?\nUPDATE: \n\n\nI don't think that approach is going to work. I'll investigate further and follow-up if/when I find a workable solution.\n\n\nPlease see #507.. Hey @brandonsturgeon,\n\n\nYour config works for me. The only difference in my setup is that I'm using base-index 0.\n\nIs there anything else I can provide?\n\nWhich version of the gem are you using? Which version of Tmux? (We should really add this to the issue template...)\n. @endorama After our earlier exchange, I found a few minutes to pull this down and experiment.\nA few thoughts:\n- If others agree that the \"hooks\" approach is a better solution than sticking event methods in Project (I do), I'd propose aliasing the existing methods to their corresponding Hook methods, adding a deprecation warning and removing them in a future release.\n- sample.yml is missing an on_start entry \n- Should the README's Custom attachment and post commands section be updated to cover the new options and deprecations (if that's the approach we decide to take)?\n- I think hook_on_stop may need to be moved before tmux_kill_session_command. On my system (Debian 8.6, Bash 4.3.30, Tmux 1.9, Ruby 2.3.1p112) on_stop commands are ignored unless I reverse these two method calls. Is this working for you?\n- Document (and potentially fix) behavior of on_reattach_hook. From what I can tell, it appears to only be executed when reattaching via tmuxinator start ... and not tmux attach -t ..... > Should I rename them in a more project-related way? \n:+1: \n. @endorama Sorry for the delay. I'll have to find some time to revisit this and do a proper review. Did you give any additional consideration to adding a deprecation warning to the existing pre/post \"hooks\"?\nIn the meantime, does anyone else have any thoughts or feedback? Is this something people think is worth pursuing? If so, are these hooks deserving of a README entry?\n/cc @J3RN @adamstrickland @Soliah . @randaalex I believe this may be an issue with the whitespace in your YAML.\nTry using the following (note the four space indentation before the window config entries):\n```\n~/.tmuxinator/wat.yml\nname: project\nroot: /vagrant\nwindows:\n  - api/pr1:\n      root: /vagrant/api/pr1\n      panes:\n        - rails s\n\napi/pr2:\n      root: /vagrant/api/pr1\n      pre: nvm use v6.9.0\n      panes:\n        - node main\n```\n\nThis has come up in the past and I'm not sure what the root cause is - your config is valid YAML - but it's worth investigating further. I will create a separate issue for this. /cc @adamstrickland\nAnyways, please close this issue if the above solves your problem. Apologies for the inconvenience.. @randaalex You're right - it's not a whitespace issue. It appears to be an issue which only affects tmux > 2.0. (I was able to reproduce it using tmux 2.3.)\nJust to clarify: you're seeing the first window cd into the correct local root, but not the second? I'm seeing the opposite behavior: the first window uses the global root and the second window - and any subsequent windows - uses its local root.. Closed via #629 and #630. . Hey @strang3r,\nI think two different issues are at play here:\n1) The pre command isn't run if there's an existing session with the same name as the project. See template.erb.\n2) This may be a bug (I'll open a separate issue), but post doesn't seem to run on (at least on my machine) until the session is killed or detached from. When I run your sample, I see: can't move window: index in use: 0 output upon exit or detach. (I also added some debug statements which verified that the command is actually being run on exit/detach and this message isn't an artifact.)\nFortunately, I think the new project hooks which will be introduced in #486 will allow you to achieve what you're after.. Hi, @strang3r. Are you still seeing this behavior with the most recent version of tmuxinator (0.12.0) and the new hook API?. I'm going to close this for now. Please feel free to reopen if anyone is still seeing this issue.. @sachin21 It's probably overkill, but would you mind adding a note to CHANGELOG.md?. @J3RN Sure, that works for me.. > It would be great to be able to edit existing projects without having to navigate to the project directory first.\nThis is how tmuxinator edit [project] should behave for standard tmuxinator projects. If this is the scenario you're referring to and you're not seeing this behavior: ensure $EDITOR has been defined and if the problem persists, please provide some additional data about your environment (tmuxinator version, OS/version, etc.)\nOtherwise, are you referring to editing local project files? (e.g. ~/projects/something/.tmuxinator.yml) If so, this could work, but would add a lot of overhead to edit, delete, etc. as they'd have to either maintain an index of local project file locations and names or traverse the entire filesystem to find the given local project config file.. > So this issue would be more with the incomplete help\nUnfortunately, this is because edit is actually an alias of new and, as such, doesn't get its own help entry. This is a known issue and will - hopefully - be addressed soon.\nI'm going to close this issue, but feel free to re-open if you think there's more to discuss.. Hi, @frdrcv. \nWhich version of tmuxinator/tmux/Ruby are you using? How are you installing tmuxinator? \nAlso, have you seen this Bundler issue? It sounds like your problem could be related.. @Adriel-M Are you able to install/use other gems or does this only affect tmuxinator?. @Adriel-M Try, gem install pry && pry.. @Adriel-M Yes, due to a bug in Rubygems. However, if you enable shell completion, mux should work again.. @frdrcv Are you still seeing this issue? If so - and this is admittedly a shot-in-the-dark - perhaps you could try upgrading RubyGems via gem update --system and reinstalling tmuxinator.. Are you still seeing this issue, @frdrcv?. Hi, @janemba.\nA few thoughts/questions:\n\n\nIt looks like you're running this on an ARM device. I've never tried using tmuxinator on an ARM device and don't think I've heard of anyone else doing it either. It's quite possible that there are assumptions about architecture/platform baked into the library or one of its dependencies. When I have some time, I will try to install tmux/tmuxinator on one of my Pis and report back.\n\n\nI'd recommend debugging either via bundle open tmuxinator or by cloning this repository.. @janemba I just tried reproducing your issue on my Pi 3/B without any luck.\n\n\nHave you tried debugging the gem?. @janemba That's some nice sleuthing! I really need to revisit strace ...\nAnyways, in order to debug, I'd recommend cloning the repository and then trying to run the tests (follow README) and/or putting this script into the repo's bin directory, running chmod +x ./bin/console, running it (./bin/console) and poking around (e.g. Tmuxinator::Cli::start name: \"foo\"). (I will be adding the console script to the project.) Hopefully some errors will present themselves and we can progress from there.\nAlso, FWIW, I installed tmuxinator on a 32-bit/i386 machine this morning and didn't have any issues.. @janemba Sorry! I thought the test instructions were in README, but they're in CONTRIBUTING. Anyways, it should just be: bundle install && bundle exec rake test. @janemba Hmm... that's not much help.\nMaybe we should take a step back first and ensure that tmuxinator's expected output is even useful on your machine. Try downloading this script, changing YOUR_PROJECT_DIRECTORY to some directory on your machine, making it executable (chmod +x debug-tmuxinator.sh) and running it (./debug-tmuxinator.sh).. @janemba Okay. Well, at least we now know the tmux side of things will work. \nUnfortunately, I was able to get my hands on a 32-bit ARM device (ARMV7 via Scaleway) and was able to install/run tmuxinator and run the test suite without any issues.\n\nSo, I'm pretty much out of ideas on how else to debug your issue at the moment. I'll chew on it and follow up if I think of anything.. @janemba I'm going to close this for now. If you wind up uncovering a problem with tmuxinator, please open a new issue and we can proceed from there.. Looks like a good enough start to me!. Should we close this for now?. Hi @pedrocaseiro,\nHave you seen this Bundler issue? It sounds like you're running into this problem, which should be solved by upgrading to >= 1.13.4.. Please see #507.. @adamstrickland Would you like to do the honors? I'm feeling a bit skittish after my last attempt.. @HaleTom Good point/questions. I imagine the issue will persist...\nYou could either pull my branch, make the change and submit a new PR (kicking off a new Code Climate run) or download the Code Climate CLI and try running that against the project locally*. I don't see a Code Climate config file anywhere, so I'm guessing it's using the default configuration. If you prefer the latter, let me know and I can update my PR if your fix checks out. \nFYI, I tried simply removing the return and that resulted in a test failure.\nexpected: (\"TMUXINATOR_CONFIG\")\ngot: (\"XDG_CONFIG_HOME\")\nPlease stub a default value first if message might be received with other args as well.\n* I've never tried this, so maybe someone else can chime in regards to its feasibility. /cc @Soliah @adamstrickland @J3RN. Hi, @mikehaertl.\nUnfortunately, this is due to how Thor treats aliases (e.g. e and s). This is a known issue and the fix for #420 should also resolve the issue you're seeing.. @HaleTom @adamstrickland No objections from me. \ud83e\udd1e. This is a great idea, @crobicha! \nI just added an exception variable and puts to the relevant begin/rescue block and the error message generated by my test scenario (replacing - with x) was intelligible and pointed directly to the line/column containing the error. (If you'd like to share your broken config, I'd be interesting in seeing the error message the parser generates for it - I tried to mix up spaces/tabs in my project but the Yaml was still parsed without issue \ud83d\ude15.)\nIf you're up for it, you're welcome to take a pass at implementing this. The rescue in question lives here. Just review CONTRIBUTING.md and have a look through some of the other classes/tests to see how this sort of logging is handled and tested (or not).. > What would be a simple way to test this? Maybe an invalid yml file and check for error message when trying to start a new session?\nThat sounds reasonable to me.\n/cc @Soliah @J3RN @adamstrickland . @crobicha I will take a look.. @crobicha Out of curiosity, which version of Ruby were you using when you were unable to run the test suite?. @crobicha Please see #521.. @adamstrickland Would you like to do the honors?. Keeping pace with the officially supported versions of Ruby sounds reasonable. However, I'm not aware of any issues which have surfaced as a result of people using legacy Rubies. It seems like the major downsides of continuing support for legacy versions are: the library can't make use of some of the newer features (e.g. squiggly heredocs in Cli::COMMANDS) and the additional time added to the CI job.\nI feel more strongly about dropping support for legacy versions of tmux because there are (at least two) conditionals which test for version ranges. \nI don't have much to offer in terms of suggesting which versions of tmux we drop support for - this calls to mind #427. Though, one data point which might be worth mentioning is that the latest stable version of Debian (Stretch) offers 2.3 and the most recent \"obsolete stable release\" (Jessie) offers 1.9-6. Depending on what other distributions/OSs are offering, drawing the line at 1.9* would seem reasonable to me.. Per #538 and @adamstrickland's comment in #536, perhaps we should also consider adopting an upper bound on the supported version of tmux?. @adamstrickland Supporting only modern Rubies sounds reasonable to me. \nOut of curiosity, how do we determine which patch version to support/test against? Should it always be the most recent stable release? FWIW, the three versions specified in .travis.yml and tmuxinator.gemspec are all one patch behind the most recent stable versions.. Hey, @danshumaker.\nThis is a great suggestion and certainly deserves consideration.\nIn the meantime, if you're feeling adventurous and really want to start using this workflow, you can achieve a close approximation. #511 added support for specifying the location of your Tmuxinator config files by setting $TMUXINATOR_CONFIG (among other related features - these changes aren't yet covered in the README, but the PR notes might be of interest to you). So, if you install Tmuxinator using the Master branch[1] and set $TMUXINATOR_CONFIG to your project's directory, you should be able to use Tmuxinator in the way you've outlined above.\n\n1 - There are a number of ways to do this, but using specific_install is probably the simplest.. @danshumaker You should now be able to achieve what you'd requested using tmuxinator start's recently introduced -p flag.\n\nBased on what it looks like you're doing above, you could use (from within /Users/dan/work/bla):\n\ntmuxinator start -p project2/muxinator\ntmuxinator start -p project3/muxinator\n\nI'm going to close this issue for now, but feel free to reopen and follow up if necessary.. Closed via #549.. @techgaun Thanks for submitting this PR. Though, I'd ask you to please see the conversation in #524 regarding officially supported versions of tmux. Feel free to chime in, as you can likely provide valuable feedback.. > Depending on how frequently the user pulls from upstream, master may be ahead of or behind any given release.\nI think this is an important point. \nAlso, as I mentioned in #524, trying to support bleeding-edge master is problematic. Since Tmuxinator's test suite won't have been run against the latest feature set, there's no way to guarantee compatibility.\nWhat would you all think about adding a supported version range check (again, per #524) and allowing people to use unsupported versions, but printing a warning message which tells them here be dragons if they're outside of the range?. A few thoughts:\n\nSince Pane#name is being overloaded, perhaps we should change title to name or vice versa? \nA few tests which document the different paths Pane#name could take would be nice.\nI think a helper method or some named variables would help make Pane#commands more readable, maintainable and extensible.\nThe introduction of a Vagrant file should be broken out into its own PR.. Any thoughts, @HaleTom, @adamstrickland, @Soliah, @J3RN?. > I haven't been following closely but does setting one of these env vars override the local .tmuxinator.yml behaviour?\n\n@Soliah No, I don't believe so. I'll actually remove the reference to local project files.. Thanks for opening this issue, @staycreativedesign. It's a fair criticism and those unsets should be opt-in, if they're even necessary.\nOut of curiosity, though, are the unsets resulting in errors when running tmuxinator or are they just confusing?. > Just wondering why it's asking for RBENV :)\nUnfortunately, I don't know the answer to that question.\n\nIs there even a way to fix it?\n\nThe \"fix\" would be to either remove those unset function calls (I'll need to investigate further, but users requiring this functionality could potentially add it themselves via a hook) or make them opt-in via a config flag.. > unset RBENV_VERSION; unset RBENV_DIR does not trigger any errors and seems totally innocuous. I don't see a need to remove these lines.\nI see where you're coming from, @rglassett, but I'm really in favor of removing them - even if only to prevent issues like this one - because their existence clutters the - already noisy - file and results in head-scratching. Also, inevitably, someone will open an issue or submit a PR which seeks to add unsets for $PL version manager.\nThoughts, @adamstrickland @Soliah?. @rglassett I'm inclined to prefer a solution along the lines of option 1. However, per J3rn's comment in #223, are there enough tmuxinator specific config options to warrant introducing this feature?. Hi, @chris-fa. \nWhich versions of Tmux and Tmuxinator are you using?. I'm unable to reproduce using tmux 2.5/6 and tmuxinator 0.9.0/0.10.0 on Debian 9.1.. Hey, @iovis9.\nIt looks like this hook is only run when you use the tmuxinator stop some_site command. (This feature needs better documentation and I'll open a separate issue for that.)\nHowever, I was just reviewing the pull request this feature came in on and I mentioned that I'd had trouble with that command on my system (Debian 8/9) back then. Are you running Linux, too?. Ping @endorama. \nDo you have any idea what's going on here? Is this the expected behavior?. @endorama @beaugunderson @codezomb tmuxinator 0.11.2 has been published and contains the fix for the on_project_exit hook bug.. Hey, @mrturtledev.\nI'll need to circle back when I have some time, but when I try using your layout I'm met with undefined method 'keys' for #<Array:0x00000002a9f6a8>.\nIn the meantime, perhaps you could try upgrading to the latest tmuxinator (0.10.0) to see if that helps?\n(Possibly related to the issue reported in #552.). Closed via #576. . @tmuxinator/tmuxinator Shall we merge this?. Closing this for now. Please re-open if anyone is still seeing this behavior.. Closing this for now. If anyone is still having this issue, please re-open.. We could also consider porting the project to Crystal or Rust, which would solve most/all of the problems alluded to above. (Just kidding ... mostly. \ud83d\ude1c). I'm not sure the best way to go about this, as I do not have a Mac and have never created a Homebrew package.\nAfter a cursory search, it looks like this would require forking homebrew-core. Assuming that's correct (other gems are doing this, so I'm pretty sure it is), one possible path forward would be for the tmuxinator organization to fork the homebrew-core repo and have whoever wants to take a pass at this submit a PR to that repository. I'm happy to do that, if you're interested in pursuing this, but we would need sign-off from one of the other maintainers, as I do not want to be on the hook for this if I'm not able to debug/test/release the changes myself.\nIn the meantime, a much simpler solution would be to use brew-gem.. Nice one, @nexeck. From the looks of this thread, your PR should make a few people happy.\nI still think the tmuxinator organization should create and maintain a fork of homebrew-core. Do any of the Mac owning @tmuxinator/tmuxinator maintainers want to weigh in on this idea? (Quick recap: I'd do it, but I don't have a Mac and want to be on the hook for testing/debugging if anything goes sideways now or during a future update.). > Someone else would need to manage the linux package systems.\nI will look into creating a Snap. \nI'll also see about creating a Docker container (bundling Ruby, tmux and tmuxinator) and maybe also some shell aliases to make using it more ergonomic. Though, I'm not entirely sure how the host interop would work in that case and there would probably be some security concerns that'd need to be thought through.\n\ndoes simply packaging the gem into homebrew and the like solve the Ruby version problem?\n\nPotentially? The tmuxinator formula could specify a Ruby formula as a dependency, but I don't know enough about the ecosystem to know if that could conflict with RVM, chruby, etc. or if there is any guarantee that the dependency will be available/linked when tmuxinator is run (I'd guess not).. The regex engine appears to choke on the interpolated, shellescape'd project name.\n2.3.1 :025 > sessions =~ /^\\\\*\ud83c\udf69/\n => 1\n2.3.1 :018 > name = \"\ud83c\udf69\"\n => \"\ud83c\udf69\"\n2.3.1 :019 > sessions =~ /^#{name}/\n => 1 \n2.3.1 :020 > name = \"\ud83c\udf69\".shellescape\n => \"\\\\\ud83c\udf69\" \n2.3.1 :021 > sessions =~ /^#{name}/\nArgumentError: invalid multibyte character\nRemoving the escape sequence before using it to look for the existence of the name should do the trick. I have a working POC and will submit a PR shortly.. @AdrieanKhisbe The fix has been merged. If you don't mind the extra leg work, you can use master until a new version of the gem is released.. I'll wait a few more days on feedback from the remaining (requested) reviewers.. Hey @jumph4x,\nThanks for this!\nTwo pieces of feedback:\n- Should \"on_start\" read \"on_project_start\"?\n- Should \"on_detach\" read \"on_project_exit\" and/or \"on_project_stop\"?. @jumph4x Any chance you'd be willing to revisit this?\nI see two trivial issues which need to be addressed:\n- Fix the merge conflict. (All of the messages now use sentence formatting and backticks where appropriate.)\n- Use the latest hooks (as mentioned above). Supplanted by #670.. The test suite passes on my machine using the newly introduced versions of tmux. Any opposition to merging this?\n/cc @adamstrickland @Soliah @rglassett . Thanks, @weijiekoh!\nCloses #558.. I'll need to dig into this some more, but at first glance, it'd seem that if post works in this scenario then project_exit should also work.\nThis project config file results in the debug output posted below:\nproject_name: x\non_project_exit: echo \"project exit\"\npost: echo \"post\"\nwindows:\n  - shell:\n    panes:\n      - echo hello\n```\n\u03bb tmuxinator debug x\n!/bin/bash\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server;\ncd .\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s x -n shell\n  tmux select-window -t x:0\n  tmux select-pane -t x:0.0\nif [ -z \"$TMUX\" ]; then\n    tmux -u attach-session -t x\n  else\n    tmux -u switch-client -t x\n  fi\necho \"post\"\nRun on_project_exit command.\necho \"project exit\"\n```\nThe \"post\" and \"project exit\" commands are executed one after the other.\nThe naming of on_project_exit might be confusing in this use case, but I'm not entirely clear on why it's working (as you all claim it is) in the first place -- those commands should only be executed after you've detached from/killed the session.. I'm not convinced this information belongs in the README.\nMaybe @Soliah feels otherwise? If not, maybe they could share that information here.. Hi, @mehar. Apologies for the delay on this.\nI've pulled your changes and done some poking around. Does this actually set the pane title? When trying to do so, I see: \ntmux: unknown option -- T\nusage: select-pane [-DdegLlMmRU] [-P style] [-t target-pane]. That codeclimate failure is annoying. Does anyone have any ideas for a simple solution? (Ideally, something other than just reverting my changes.). Thanks for this, @agios. I will try to review it today.. @agios I just experimented with this locally and it works well. This will make for a nice addition to tmuxinator!\nWould you mind adding an entry to CHANGELOG.md using the instructions in CONTRIBUTING.md?. @endorama Any thoughts on this? Do you think it would make sense to add a hook_after_project_start hook? If so, that begs the question of whether the other hooks should receive similar treatment and, perhaps, be given more descriptive names (e.g. hook_before_project_start).. @mstruebing Were you able to solve your issue using endorama's suggestion? If so, please close this issue. If not, it'd be great to see your in depth explanation.\nEDIT: Going to close this issue for now. Feel free to reopen if you're still seeing this issue.. Closing this for now. If anyone feels strongly about introducing the badge, please re-open and state your case.. Mirroring my answer to @SuperElectric's Stack Overflow question:\nTmuxinator does not currently support a config file flag. However, there is support for project level config files. If you move my_config.yml to /project/root/.tmuxinator, you can then start it (from the project root) via tmuxinator start . or tmuxinator local.. @SuperElectric @Hamitamaru This feature is contained in v0.11.0.. Thanks for this, @dgdavid.\nI just looked over the config class, reviewed the XDG spec and ran some tests on my machine. I think the comment you've referenced (Is ~/.config/tmuxinator unless $XDG_CONFIG_DIR is set) is incorrect. I see no mention of XDG_CONFIG_DIR (singular) in the spec and setting XDG_CONFIG_DIR seems to have no affect on Tmuxinator. \nI think the README should be left as is and the comment should be changed to say something like, Is ~/.config/tmuxinator unless $XDG_CONFIG_HOME is using a non-standard path.\nAny thoughts on the above, @HaleTom?. @dgdavid IMO, the README should stay as it is -- on Master. I think using the variable makes sense because someone may be using a non-standard value for $XDG_CONFIG_HOME (e.g. ~/my-config), in which case tmuxinator will not attempt to use ~/.config.\nAlso, if you're going to be using $XDG_CONFIG_HOME, be sure to have a look at issue #599, which was uncovered as a result of your bug report/PR. ;). Cannot reproduce.. @Hamitamaru That is definitely possible. I'd prefer to explore that option separately, though. Feel free to open a new (feature request) issue.. @adamstrickland Agreed on the version bump. I'll merge #604, pull/rebase and update CHANGELOG.md later this evening.\nShall we sit on this for another few days to see if anyone else has feedback? Also, thanks for the thorough review!. @Hamitamaru Just a reminder to create that feature request for multiple configs, if that's something you're still interested in.\n@adamstrickland I've created issues for the bits we discussed above and a few others (#606, #607, #608).\nDo you want to wait a while longer for feedback from others or would you like to do the honors?. Closed by #605.. Thanks for this, @tribut! \nPer the Contributing Guidelines, would you mind updating CHANGELOG.md with a summary of the fix?\nOtherwise, this looks good to me. :+1: . @ge-fa Per the contributing guidelines, would you mind adding a summary of these changes to CHANGELOG.md? Otherwise, LGTM. \nThanks!. Thanks, @nicolasleger!\nThis addresses #602.. @nicolasleger Actually, one small request before this is merged: Would you mind adding an entry to the CHANGELOG under Unreleased/Misc?. Closed via #628.. Hi, @maksimr.\nBased on the information you've provided, the warning appears to be working as intended. AFAIK, tmux 2.7 hasn't been released yet, so I'm guessing you've built the RC from the master branch. Once 2.7 is minted and you either build from the release tarball or install via a package manager,  tmux -V will print \"tmux 2.7\". (Apologies if I'm stating the obvious, but I understand how the behavior you're seeing could be confusing.)\nOnce 2.7 has been released and tested against (and any issues have been addressed), it will be added to tmuxinator's range of supported versions. tmuxinator only explicitly supports the versions of tmux included in the range shown above and anything outside of that range (lower or higher) is, technically, \"unsupported\". (If you're interested in the rationale, see this conversation and the conversations it links to.)\nI'm going to close this issue, but feel free to re-open and continue the conversation if I've misunderstood.\nP.S. You may want to keep an eye on this issue and consider submitting a PR if you want to continue using bleeding edge tmux and don't want to see this deprecation message.. I haven't used homebrew in many years, so I can't speak to how it should/n't work, but that behavior is surprising. The tmux homebrew formula appears to have v2.6 hardcoded:\nclass Tmux < Formula\n  desc \"Terminal multiplexer\"\n  homepage \"https://tmux.github.io/\"\n  url \"https://github.com/tmux/tmux/releases/download/2.6/tmux-2.6.tar.gz\"\nEither way, I'm of the opinion that (given my comment above) tmuxinator is behaving as is expected.. @maksimr tmuxinator v0.11.1 has been released. After upgrading, you should no longer see a deprecation warning when using tmux v2.7.. @tmuxinator/tmuxinator Is anyone knowledgeable enough about zsh to address this PR?. Since this seems like a pretty benign change and since @ZeroKnight seems to know what they're doing with regard to zsh (I had a quick look at their dotfiles), I'm okay with merging it as-is. \nThoughts?. Thanks for revisiting this, @ZeroKnight! \nIf you wouldn't mind updating CHANGELOG.md (see the instructions in CONTRIBUTING.md), we can get this merged today.. Thanks for reporting this, @joshukraine. \nYou're seeing this message because tmuxinator doesn't support tmux 2.7 yet. Now that v2.7 has been released, I will add it to the support matrix (and look into addressing any issues that it may present) and cut a release in the next few days.. tmuxinator v0.11.1 has been released. \nAfter upgrading, users should no longer see a deprecation warning when using tmux v2.7.. Hi, @marcelpaulo. \nApologies for the delayed response, but you could achieve the above using: \nname: _foo\nwindows:\n  - one:\n      panes:\n        - tmux resize-pane -Z && echo left1 # this window/pane will receive focus and then be \"zoomed\" into\n        - echo right1\nFor anyone seeing this in the future who is looking to do something slightly more complicated, like selecting the second window's second pane, you could do something like:\nname: _foo\nstartup_window: 1\nstartup_pane: 1\nwindows:\n  - one:\n      panes:\n        - echo left1\n        - echo right1\n  - two:\n      panes:\n        - echo left2\n        - tmux resize-pane -Z && echo right2 # this window/pane will receive focus and then be \"zoomed\" into\nI'm not sure this use case is common enough to add a config option for it, but I'd be interested in hearing from anyone who does think it'd be worthwhile.. @endorama It's been a while since I looked at the linked issue. Might people have come to rely on the existing/\"broken\" behavior or is this only a bug fix?. I just reviewed the linked thread and tested this locally. I can confirm that everything appears to be working as expected: on_project_exit is run (once) on tmux detach, C-d and tmux kill-session ....\nThis fix gets a :+1: from me.\nAny thoughts, @adamstrickland?. Closed via #622.. Hi, @tristansokol. Thanks for reporting these issues. \nI can confirm that the first one (use of ~/.config/tmuxinator) is a bug. It seems like the XDG variable check in Tmuxinator::Config::xdg always returns \"/home/me/.config/tmuxinator\".\nI'll need to dig into the second (use of default template) when I find a few free minutes. (Depending on whether or not they're related, I may create a new ticket for the second issue.). Also, in the meantime, you should be able to place the project files wherever you'd like and pass the path to tmuxinator start using the -p flag. (e.g. tmuxinator start -p ~/.tmuxinator/foo.yml). So, I think the config directory issue has two possible solutions:\n\nchange the documentation to reflect the current implementation (e.g. new projects will be created in the XDG default (~/.config/tmuxinator) directory whether or not XDG has been installed or related env vars have been set) and leave the implementation as is\nchange the implementation to match the documentation and continue to use ~/.tmuxinator for new projects unless one of $XDG_CONFIG_HOME or $TMUXINATOR_CONFIG variables have explicitly been set\n\nI'd lean towards the first option, but am also interested in hearing what others think.. Hi, @metacoma. \nI may be overlooking something obvious, but do Jinja templates provide any functionality that ERB (which tmuxinator already offers) doesn't?. Closing this for now. Feel free to reopen if you think there's something worth discussing.. Cannot reproduce.. Hi, @Lavoaster. I think this is a great idea and would be happy to put it up for consideration.. I made a quick first pass at this a few weeks ago (sniffing out a name if none is provided via tmux display-message -p '\\#{session_name}' 2> /dev/null) and hit upon the following issues:\n\nWill wantonly kill most recently created tmuxinator session if run outside session. Seems reasonable?\nWill fail with \"Project foo-1 doesn't exist.\" if run inside named tmux session named foo-1. This is probably fine.\nWhere should the session name sniffer live?\nCan it always be called safely?\n\nDoes anyone have thoughts on any of the above? /cc @tmuxinator/tmuxinator. Hi, @JonRowe.\nIs this a new config file or is it one that was previously working and broke after upgrading to 0.11.2?\nIf it's a new config file, I think it's a whitespace issue. There are known problems with tmuxinator and whitespace, particularly with two space indentations (see #489).\nChanging your sample to the following (which uses four space indentations) works as expected on my machine:\n```\n~/.tmuxinator/bug-y.yml\nproject_name: bug-y\nproject_root: ~/projects/tmuxinator\nwindows:\n    - editor: vim\n    - shell:\n        layout: main-vertical\n        panes:\n            - git status\n            - yarn run\n```\nI would love to get the whitespace issue sorted and, thanks to this report, it's back on my radar.\nIf this was a working config file which stopped working after the upgrade, that will require some additional investigation.. That would be greatly appreciated.. So, @JonRowe. I've determined this issue is actually YAML's fault. It's a quirk in how it handles the indentation of list/dictionary elements. Specifically, where the indentation actually begins. I've yet to find a definitive source (e.g. in the YAML spec) but I have found references to this issue in a few places.\n\nNotice that while the indentation is two spaces per level, for the values under the context and defaults options there is a four-space indent. If only two spaces are used to indent, then those keys will be considered part of the same dictionary that contains the context key, and so the data will not be loaded correctly.\n\nhttps://docs.saltstack.com/en/2017.7/topics/troubleshooting/yaml_idiosyncrasies.html\n\nBlock list items can (but don't need to) have the same indentation as the surrounding block level because \"-\" is considered part of the indentation\n\nhttps://stackoverflow.com/a/42248984/382982\nMy own SO question about your use case.\nI'm looking forward to seeing how you address this is your PR. Thanks, again, for the offer!. Closed via #630.. @JonRowe Reworded this a bit and added a link to a very insightful SO answer. Thoughts?. @ilovezfs Thanks for reporting this. Fixed.. Thanks for putting this together, @mateusmedeiros! As the comment of mine referenced above implies, this is (IMO) the expected behavior. My apologies for letting it slip through the cracks when the originating PR was merged.\nI'd like to merge this as-is, but my one concern is that this change could result in -- potentially destructive -- unexpected behavior (e.g. someone has a hook in place which suddenly starts running). I may be overthinking this, though.\nI'll also think a bit on potential testing strategies. Though, this will likely bump up against some of the outstanding conversations around testing (running from within an existing session, integration vs. unit, etc.).\nThoughts on any/all of the above, @tmuxinator/tmuxinator / @endorama?. I was overthinking the scenario I mentioned above re: unexpected behavior. 1) There probably aren't many people using this feature and 2) they've opted in, so the behavior really can't be considered unexpected. \nI also think the proposed solution is preferable to adding yet another hook and leaving the semi-broken one in place.\nDoes anyone else have thoughts about any of the above? Ping @tmuxinator/tmuxinator.. > We may want to do a minor version bump for this, although you could make an argument either way.\nSure, that sounds reasonable.\n@mateusmedeiros Per CONTRIBUTING.md, would you mind adding an entry to CHANGELOG.md? Once that's in, I will merge this and cut a release.. Hi, @Fibrasek. \nSo, I compiled alacritty and did some poking around on my machine -- running Debian 9.4 and Bash 4.4.12(1)-release -- and saw the same behavior.\nHowever, after a few minutes of searching for that error message, I found this alacritty issue. \nYou should read through the exchange yourself, but it's all summarized pretty well when @jwilm says:\n\nThe argument immediately after -e is the program to run, and all subsequent arguments are passed to that program. This is working as intended.\n\nThat being said, either of the following should work:\n\n./target/release/alacritty -e tmuxinator start -p ~/.config/tmuxinator/foo.yml\n./target/release/alacritty -e \"tmuxinator\" start -p ~/.config/tmuxinator/foo.yml\n\nI'm going to close this for now, but feel free to re-open if you think there's anything else to discuss. \nP.S. alacritty is pretty neat! I will be keeping an eye on the project. ;). Hey, @onhernandes. \nWhat you're after can already be achieved using ERB conditionals, like:\n```\nname: foo\nroot: ~/\nwindows:\n  - one:\n      layout: main-vertical\n      panes:\n        - echo one\n  <%- if args[0] == \"app-v2\" %>\n  - two:\n      layout: main-vertical\n      panes:\n        - echo two\n  <%- end %>\n```. Closed via #642.. Closes #640.. @tmuxinator/tmuxinator I'd appreciate feedback on the contents, quality and styling/placement of the GIF. You can see it in action here.. tmuxinator v0.13.0 has been published to rubygems.org.. Hi, @sabrehagen.\nYes, you should be able to achieve what you're after using the on_project_start hook.\nSomething like this: \nname: dims\non_project_start: stty cols 63 rows 271\nwindows:\n  - one:\n      layout: main-vertical\n      panes:\n        - echo hello\nIf you regularly detach/attach from sessions, you may also need to use the on_project_restart hook.. Hi, @huerbt. Could you share your project configuration file? Also, which versions of tmux/tmuxinator are you using?. Thanks for clarifying, @huerbt. Unfortunately, tmuxinator doesn't currently reload your project config file when you reattach to an existing session -- you'll have to run tmuxinator stop ... or kill the session via tmux. I'm going to close this for now, but if you feel this is worth exploring, feel free to update/reopen this issue or create a new one.. Closed via #655.. Thanks for this, @flovilmart! I'll try to give it a proper review before the end of the week.. @flovilmart This is looking pretty good!\nI do have a few questions/thoughts/requests/etc. for you:\n1.) Would you mind adding an entry to the \"Other Commands\" section of README.md in your PR which documents how this feature and its various CLI options are intended to be used?\nThe documentation will be useful for users going forward and for people reviewing this PR. I wasn't following #265 closely and it took me a few minutes to figure out how this feature was intended to work.\n2.) A missing/malformed current_session: ... seems to result in tmuxinator wantonly appending windows to whatever the most recently created tmux session is, which seems undesirable. Is this by design? Is there a way you can sniff out whether or not the current_session exists and either fail or start a new session if it doesn't? (I'll revisit the code myself, but I'm on my way out for the day.)\n3.) Could you replace puts with say in Cli.rb?\n4.) Perhaps the \"Creating new session ...\" message should contain the session name?\n5.) We will need some tests around this new behavior. Did you ever get a chance to take a pass at writing any? I know you said you're not used to Ruby, so I can appreciate how that might be a bit daunting and it's awesome that you were able to put this together. (I don't think you're giving yourself enough credit!) If not, that's totally fine and I can take a pass at writing some and submit another PR to your branch.. tmuxinator v0.13.0 has been published to rubygems.org.. Closes #649.\nThoughts, @tmuxinator/tmuxinator?. Hi, @sabrehagen.\nThis is worthy of consideration.\nIn the meantime, you should be able to achieve what you're after using ERB in your project`s configuration file.\nHere's an example from #638:\nname: foo\nroot: ~/\nwindows:\n  - one:\n      layout: main-vertical\n      panes:\n        - echo one\n  <%- if args[0] == \"production\" %>\n  - two:\n      layout: main-vertical\n      panes:\n        - echo two\n  <%- end %>\nYou'd then start your project using tmuxinator start foo or tmuxinator start foo production. \nIf you wanted the workflow to be more dynamic (e.g. no CLI optargs), you could also shell out from ERB and use the return value to determine whether or not to render that window.. Following up on my previous comment, here's one way you could shell out and then conditionally render the windows from within the project config file. (Tested and works using Debian 9.5, tmuxinator 0.13.0, tmux 2.3, Ruby 2.5.1 and a shell script called foobar.sh.)\n```\n~/.tmuxinator/conditional.yml\n<%\n  ps aux | grep [f]oobar\n  render_production_windows = ($? == 0) \n%>\nname: conditional\nroot: ~/\nwindows:\n  - always:\n      panes:\n        - echo always\n  <%- if render_production_windows %>\n  - sometimes:\n      layout: main-vertical\n      panes:\n        - echo sometimes\n  <%- end %>\n```\nIMO, a solution like this one is preferable to adding a new feature to the library and is a great example of why the library offers the ERB option. If you did want to take a pass at adding a new feature to the library, you'd probably want to look at window.rb and template.erb.. Thanks, @p-becker! I'll try to review this and get back to you with any feedback within the next few days.. Nice catch! I've created a separate ticket for that issue. If you're up for it, you're more than welcome to make the fix and submit a PR.. Looks good to me. I was just waiting on the flag change.\nI'm going to merge this and, unless someone else wants to do the honors, will cut a minor release later today/tomorrow.. Thanks for this. \nNow that you've called attention to it, this whole new/edit section could be reworked. I'll open a separate ticket about that. \nIn the meantime, could you add an entry to CHANGELOG.md per the contributing guidelines?. Hey, @rodrigopandini. Thanks for reporting this. \nThe FAQ on yaml.org says, \"Please use \".yaml\" when possible\", so this seems like a reasonable request to me.. Closed via #664.. This looks good to me. Anyone else have any thoughts? (/cc @tmuxinator/tmuxinator). Hi, @jsatk. I don't think this is going to be possible using just tmux/inator and standard shell. \nYou haven't said which platform you're on, but you may want to look into using something like xdotool.. I'm going to close this for now. Feel free to reopen if you think there's anything to discuss.. This PR also addresses an issue with the Travis config file. The build was broken because the config didn't specify/pessify? a bundler version number and, after bundler 2.0 was released on 1/3/2019, was installing bundler >= 2.0, which is incompatible with the version of bundler specified in tmuxinator.gemspec.. Thoughts, @tmuxinator/tmuxinator?. > Offtopic, I am interested in becoming a maintainer. What are the requirements for this ?\nThere isn't really a formal process, but maybe you could join the Gitter channel and send a note to the group stating 1) that you are interested in becoming a maintainer and 2) why you're interested in becoming a maintainer. Also, please read and agree to abide by the code of conduct.. Hi, @Shamaoke. \nI'm going to close this in accordance with what @raiyuza said above: it's (arguably) a tmux \"issue\". They also made a few nice suggestions and I'd suggest looking into #1. You could also want to consider using the tmux-logging plugin which would allow you to store your tmux logs in a structured way without having to resort to hacky tmuxinator based solutions.. Could you include the output of tmuxinator debug simple?. My concern here is that this feature adds complexity in order to cover a use case which is -- in all likelihood -- very uncommon.\nPerhaps a better, catch-all solution (along the lines of what was discussed in #679) would be to remove the tmuxinator projects: header and change the default behavior to return the list of projects separated by newlines?. Does anyone else have thoughts on the above? (CC @tmuxinator/tmuxinator). Have you tried disabling RuboCop within the HEREDOC?\nSomething like:\n```\nrbenv_script = <<~SCRIPT\nrubocop:disable all\necho \"do a thing\"\nrubocop:enable all\nSCRIPT\n```\nAdditionally, perhaps the Ruby version should be pulled from an ENV var and fall back to the minimally supported version if it's not present? This would prevent people from having to remember to checkout the affected files after switching Ruby versions.. Perhaps this should also become an if/else?\n. Good point. I'll back that out and it can be formatted/removed elsewhere, if people feel strongly about it.\n. This config get/test behavior is used in multiple places, so it might warrant its own helper method.\n. Is there a good reason not to use map here?\n. Perhaps a helper method could be introduced to reduce the duplication in this module? It might be a bit too clever, but you could have an array of supported hooks which gets mapped over and defines the appropriate hook_on_ methods for each entry. This would simplify the inclusion of additional hooks.\nI realize that's probably YAGNI, but I was just reading the tmux documentation and there are many more hooks users might want to make use of (see below), so I thought it might be worth suggesting.\n\nEach tmux command has a before hook and an after hook and there are a number of hooks not associated with commands.. @endorama Thanks for clearing that up. Let's revisit the proposed refactoring if/when additional Tmuxinator hooks are added.. Should this line be commented out? . This piece of code is more confusing that it should be because of how the attach option is overloaded. The attach/detach variables are mutually exclusive iff project_options[:attach] is not nil. Also, AFAIK, Thor coerces \"f\" and \"false\" to false and any other string or the empty flag to true, so I don't think there's any reason to cast. I'll add a comment which documents this.\n\nFWIW, I had actually used your approach in my initial refactoring (which was prompted by Code Climate failing the build -- and the only reason I touched any of this) but realized that it didn't cover all of possible scenarios. There were also no tests covering these assignments, which is why I added them.\nI'm thinking that we should introduce a top-level detach option. That would remove all of the conditional logic and simplify this method. I'll open a separate issue which addresses the possibility of adding the new option.. Yeah, I agree that those raises in the helper methods are less than Ideal. I had introduced the new conditional/raise alongside the others in the containing method and was going to open an issue in order to explore creating classes/structs to encapsulate the different project types and their validation behavior. However, in the meantime, Code Climate failed the build as a result of the new conditional and the simplest way forward was to move that validation logic into a method for each scenario.\nI'll noodle around some more with your suggestion in mind and see if I can come up with a more clear, simpler solution.. I believe all of those exceptions are spec'd. See lines: 333, 364 and 378 in config_spec.rb. I'd vote to continue using ::bootstrap as is.. Using a regular parameter does seem cleaner and, unless I'm missing something, I can't think of a scenario where the splat would be useful. Seems like after removing the two *s, everything should continue to work? If not, now it'll be easy enough to test. ;). Is this second say necessary?. Bundler 2.0 dropped support for Ruby 2.2, so I figured since we were doing the same we may as well follow suit. After some additional thought, though, I think you're right and we should opt for the less restrictive constraint.\nAlso, having read some more about Bundler 2.0, I think if we were to go with '~> 2.0', required_rubygems_version should be bumped since Bundler 2+ requires ~~3.0~~ 2.5.. ",
    "Chinggis6": "I'm using Arch Linux.\nIt happened until I re-installed tmuxinator with sudo -E gem install tmuxinator.\nThe -E part keeps your users environment intact.\nElse it would install it for the user root.\nAlso PATH should be set in config.fish (in my case, as I use fish for shell) to include Ruby binaries.\nset -x PATH $PATH $HOME/.gem/ruby/2.4.0/bin\n\nI hope it will help you (too).. ",
    "charley": "seems like this has changed given a recent pull request, my *.tmux scripts are being updated. started from scratch with a new .tmuxinator directory after copying my old one over, no new tmux files are generated. can still start with mux start  and I can add aliases for those, but not ideal.\n. ",
    "murphyslaw": "For me the solution was to:\n- delete *.tmux files in ~/.tmuxinator\n- open ~/.tmuxinator/scripts/tmuxinator and change all aliases to: alias start_<project_name>='mux start <project_name>'\n. ",
    "yuriyzubarev": "+1\nWould be nice to have ability to split windows in any way\n. ",
    "richo": "+1 to this, although the Gemfile changes really don't need to be in there, I would rebase them out personally..\n. It would recreate every window/pane in this case.. HOWEVER You can inspect the output of tmux info to work out what is missing.\nYou can see a very (and I mean just superduper) kludgy python application to inspect that output (in this case to search sessions and attach to them) at https://github.com/richo/dotfiles/blob/master/bin/tinfo\n. Not really, you can just test whether or not it's a good idea in your shell startup, which is what I do for openbox.\nI have an openbox binding that invokes\nenv WIN_E=yes urxvtc\nAnd then in my .zshrc I test for [ -n \"$WIN_E\" ] and start tmux in that case. You could do something similar I would assume, especially because I think gnome terminal probably makes it easier to modify the execution environment.\n. it is not the job of a tmux wrapper to select a user's shell, it's up to the user to set it with chsh or the equivalent tool for their platform.\n. Well, tmuxinator already has support for this, instead of adding $SHELL to a line, just put the desired shell.\nTo do this in tmux itself, simply rebind your \"new window\" key from new-window to new-window tcsh or whatever.\n. ",
    "prognostikos": "Hi @hedgehog,\nMy .bashrc contains the following lines\nif [[ -d $HOME/.rbenv ]]; then\n     export PATH=\"$HOME/.rbenv/bin:$PATH\"\n     eval \"$(rbenv init -)\"\nfi\nand my .bash_profile just sources the .bashrc. The .bashrc itself does some checking to only execute some commands if it's an interative shell, but the above is run for every shell.\nYou can see all my dotfiles here on github -- my bashrc is here\nHTH,\nMatt\n. I use the same configuration on OSX, Solaris & Ubuntu. OSX as workstation,\nSolaris & Ubuntu servers.\nTERM=screen-256color\nI set this explicitly in my .tmux.conf which you can also see in my config\nfiles repository.\nOn Fri, Dec 2, 2011 at 12:29, Hedgehog <\nreply@reply.github.com\n\nwrote:\n@prognostikos thanks!  2Q's:\n- When you start a tmux session what is TERM set to within tmux?\n- Is this Ubuntu?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/aziz/tmuxinator/pull/36#issuecomment-2989001\n. \n",
    "sheerun": "what's the status of this ticket?\n. ",
    "davejacobs": "+1 I would love this support in Tmuxinator.\n. ",
    "nchase": "This would be awesome to have. +1\n. I still seem to have this issue.  Where is this fixed?\n. @thorerik: what version of iTerm2 are you on? I had this problem until I upgraded to iTerm2 2.0.\n. ",
    "GAV1N": "+1 for the -C startup flag!\n. ",
    "lucapette": "I'd like to see this one in. It would be useful for pair programming.\n. Same here. I suspect the README is not updated. @aziz can you confirm that? The project is great and I'd like to use it as intended.\n. ",
    "wm": ":+1: \n. ",
    "jaywilliams": "+1 This would make things much simpler for sharing the same session between devices.\nAny idea when/if this will be pulled into the the main project?\n. ",
    "emilford": "Would also like to see this.  Thanks.\n. ",
    "ruprict": "So, is this for attach only? If I specify '/var/tmux/projectname', nothing is created in that dir, but if I lsof -U | grep '^tmux' I see a socket that looks like:\n/private/var/folders/37/twvz6csd1flgy51f43fc4dp80000gn/T/tmux-501/projectname\nMy guess is that I don't understand what socket_path is supposed to do, but I expected it to create a socket at the location in socket_path.\nUsing 0.5.0\n. ",
    "pavellishin": "Ditto here; but mux [project_name] isn't working for me either, says \"Invalid YAML file format.\"\n. Yeah, it did - I wasn't escaping a colon (:) in a string.\nIt's annoying that tmuxinator wasn't spitting out the details of the error; there's a rescue block there, why not print out the details of the exception?\n. Crap, apparently that's not enough to change that - I guess the window/pane counters make this a necessity. Will continue fiddling until it's fixed.\n. ",
    "Figuera": "Well, pavellishin your ymal file probably has same syntax error or something, if you paste it here I might help. (You can get it with mux open project_name, if I am not wrong)\n. ",
    "kalbasit": "+1 Please pull\n. ",
    "patrickdet": "yes. please merge this pull request.\n. ",
    "ainformatico": "+1\n. +1\n. ",
    "ldenman": "This would be awesome to have. If you need any help maintaining this project, do let me know.\n. ",
    "brianp": "+1\n. I'm thinking it may be abandonware. @aziz could be very busy on something else.\n. ",
    "rixth": "Why is this still not merged?\n. ",
    "dennisreimann": "yeah, would be nice to have this. is tmuxinator abandoned?\n. Is someone willing to fork it, integrate all the pulls and add it as a new gem to RubyGems.org?\n. That's great news! :+1:\n. The layout setting gets handed down to tmux directly, so you can choose from one of the five standard layouts or specify your own.\n. yep, I added a pull request for that: #67\n. Great :+1: I just saw that the project is picking up some speed again - in case you need halp with something or get more contributors involved let me know, I could help out too. \n. @gerrard00 awesome, thanks for the hint! I can confirm that this was exactly my problem too :)\n. ",
    "danielbayerlein": ":+1: \n. @aziz Would you no longer maintain this project?\n. @aziz @franciscoj Last commit: 7 months ago :pensive: \n. @franciscoj \n\nIn the meantime, there's an error on master which prevented me from being able to merge anything. If anybody can send a pull requests to fix it.\n\nCan you tell me more about the error in a new issue?\n. +1\n. Is there any news?\n. :+1:\n. @Soliah: Sure. Sorry for the mistake. https://github.com/danielbayerlein/tmuxinator/commit/4bcdfb93ea997aa85cc3c62c058007d32d94e0c1\n. https://github.com/danielbayerlein/tmuxinator/commit/4bcdfb93ea997aa85cc3c62c058007d32d94e0c1\n. ",
    "tobynet": "+1\n. ",
    "froschi": "This fixes a problem for me, too. I opened sixes panes in tmux, arranged them into the layout I wanted, noted down  the output of \"tmux list-windows\" and put that into the layout section of a tab in my project.yml. When running \"tmuxinator project\", tmuxinator refused to create the last panel in the bottom right, giving the error message \"pane too small\". After your fix, all is fine.\n. ",
    "jscheel": "Any chance of getting this pull request merged in?\n. ",
    "ghost": ":+1: \n. +1 I'd love to use tmuxinator + wemux as well. What's the latest status? Thanks\n. :+1: \n. I'm curious, did your [project] name contain \"dots\" ( . )? I just tried to figure this out with a new mix config file on an OS X Yosemite machine.\nmux new blog.domain.com \ncaused issues but\nmux new blog-domain-com\nwas fine\n. I have the same issue on Arch Linux. ",
    "axiom": ":+1: Pane too small :cry:\n. ",
    "iNecas": "Just for those of you who are not happy with the way Tmuxinator is maintained, I've created a simple tool (just set of few bash scripts), that works for me just fine, maybe will work for you as well https://github.com/iNecas/tmunix\n. ",
    "primalmotion": "sorry to exhume this issue but this is still happening to me with tmuxinator 0.11.1 and tmux 2.7.\nhere is what I have\n```yaml\nname: apomux\ntmux_options: -f .apomux.tmux.conf\nwindows:\n    - core:\n        layout: tiled\n        panes:\n          - squall:\n            - clear\n          - midgard:\n            - clear\n          - tidus:\n            - clear\n          - zack:\n            - clear\n          - wutai-internal:\n            - clear\n          - vince:\n            - clear\n          - barret:\n            - clear\n          - wutai:\n            - clear\n          - jenova:\n            - clear\n          - highwind:\n            - clear\n          - nanaki:\n            - clear\n          - yuffie:\n            - clear\n          - sephiroth:\n            - clear\n          - tagle:\n            - clear\n          - marlene:\n            - clear\n          - tifa:\n            - clear\n          - meister:\n            - clear\n          - apotests:\n            - clear\n          - apoctl:\n            - clear\n          - empty:\n            - clear\n```\nThis says this \ncreate pane failed: pane too small\ncan't find pane 18\ncan't find pane 18\ncan't find pane 18\ncreate pane failed: pane too small\ncan't find pane 19\ncan't find pane 19\ncan't find pane 19\ncreate pane failed: pane too small\ncan't find pane 20\ncan't find pane 20\ncan't find pane 20\nand the window looks like this\n\nThis is on iTerm2 with tmux mode, but on Apple's Terminal it's the same problem (minus the weird gray bottom bar)\nEDIT: I also try to put the layout manually, exact same problem. ",
    "jkatzer": "yes please. i am not sure about ruby but in most programming languages we start counting at 0\n. ",
    "williscool": "+1 on this. \nits easy enough to dig into the config of the gem and change it ie:\n~/.rvm/gems/ruby-1.9.3-p0/gems/tmuxinator-0.5.0/lib/tmuxinator/assets/tmux_config.tmux\non my box \nbut its weird to have it ignore what you've got in your own conf\n. ",
    "holmboe": ":+1: \nThis should not be hardwired in tmuxinator. Let the base-index setting in ~/.tmux.conf be the point of configuration for this.\n. ",
    "jottr": "https://github.com/tmuxinator/tmuxinator/pull/96 seems to not fix this for me. \n$ tmuxinator version\ntmuxinator 0.6.7\nThis is what I have in my .tmux.conf: \n``` bash\nStart numbering windows at 1 instead 0\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\n```\nStarting tmux without tmuxinator properly numbers the windows from 1...N. \nStarting tmux with tmuxinator does not obey the settings in my .tmux.conf and starts numbering the windows from 0...N.\n. bash\n$ tmux show-options -g | grep index \nbase-index 1\n. The tmuxinator yaml I use: main.yml\n. @Soliah Should this be reopened or is there an error with my configuation?\n. Thx for the info.\n2014/1/16 Christopher Chow notifications@github.com\n\nClosed #188 https://github.com/aziz/tmuxinator/issues/188.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/188\n.\n\n\nPlease consider using Email encryption!\nMy GPG-Key is available here: http://ovvvo.co/public-key.asc\n. ",
    "MichaelXavier": "Bump. Is this project still being maintained?\n. ",
    "juanibiapina": "Bump again. Any news?\n. Last time I tried Teamocil I didn't like it, so I'm still using tmuxinator. Anyone else still maintaining this somewhere?\n. ",
    "der-flo": "Seems :skull: \n. @aziz: :+1: \n. Ok, I'm closing this and looking forward 0.7.0.\n. ",
    "amiel": "@aziz :+1: Thanks for your work on tmuxinator!\n. This looks like it is wanted, pretty much done, but based off old work. @aziz, @Soliah, @der-flo, I'd be happy to rebase this if that's needed...\n. Sweet, it looks like @danielbayerlein beat me too it.\nI look forward to 0.7.0!\n. Uh since #153 has been merged, does that mean this issue can be closed?\n. If #51 gets merged, you could do something like:\nproject_root: <%= Dir.pwd %>\nAs a work-around of course; this feature also seems great :)\n. erubis++\n. ",
    "svenwin": "@aziz: :thumbsup: \nWhat about merging this?\n. ",
    "greggroth": ":+1:\n. ",
    "connermcd": "+1\n. You can set project_root: . if you want the current working directory.\n. ",
    "bitboxer": ":+1:\n. ",
    "sotte": "+1\n. I'd like to see this \"fixed\" as well!\n. ",
    "Goles": "If I find the time, I will try to submit a patch with this feature...\nOn Mar 26, 2012, at 15:19, Stefan Ottereply@reply.github.com wrote:\n\n+1\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/aziz/tmuxinator/issues/54#issuecomment-4700537\n. Ok, this can more or less be done (I would like a simpler approach... but it works). You can actually check my question in Stack Overflow to see how to overcome this issue.\n\nCheers!\n. ",
    "aaronhall": "I'd like to know too. When I sudo gem install tmuxinator, nothing gets added to ~/.tmuxinator/scripts. Gave up trying to get rvm to work so it would install locally, but I bet this has something to do with the missing theme.\n. ",
    "axtl": "If you look at @aziz's dotfiles, you can see the theme in the respective tmux.conf file.\n@aaronhall: not sure if that should be related however.\n. @poorlilrichboy good catch, I'm so used to having both that I forget they're separate. I'll resubmit when I get a chance to clean that up.\n. ",
    "lukaszkorecki": "Ah, I guess I was using old version of tmuxinator because I can swear that start never worked for me.\nI'll amend the pull request to alias start to join then :-)\n. Actually - scratch that, I just started new session with mux start project_name, opened different terminal and did mux start project_name and it started mirroring the tmux output in both terminals.\nI'm not sure how start is supposed to work out weather to start or just join a new session (it's not really clear in the source).\njoin command removes that inconvenience. \n. tmuxinator hasn't been updated for a while, I think https://github.com/remiprev/teamocil is alternative\n. It can be added to this line \nThere's quite few not merged pull requests here, but if you make that change still open one, maybe @aziz will resume working on tmuxinator\n. ",
    "indirect": "tmuxinator start is clearly supposed to attach (and so join the existing session). I would also really like to have the ability to join a tmux session... can somebody merge this in, please?\nPersonally, I think tmuxinator join should be the default if the session is already running, but I'll take what I can get. :)\n. ",
    "travisjeffery": "I did some investigation and there was actually already logic to handle a nil project root and set it to the current working directory, but there was an exit condition that conflicted with the logic above. \n. ",
    "gyllstromk": "project_root only solves half the problem. I would like to be able to set the name at start time. tmuxinator is quite useful, but I already have two related problems: (1) most of my configs are clones of each other, and (2) my ~/tmuxinator is polluted with a large number of files. Ideally we could either allow per repo tmux configs or the ability to create on the fly from a template.\n. @Soliah I submitted the #110 and, though I used the code for rvm, I thought it seemed due for a refactor. But yes, as you mention, \"pre\" won't suffice. I like your \"pre_window\" and \"pre_tab\" approach.\n. ",
    "felipesere": "In my case the layout of my windows/panes is independent of the project and thus root folder.\nI'd like to be able to mux 3split ~/Development/myproject which would\nstart tmux with my 3split layout and set the project_root to ~/Development/myproject.\n. ",
    "stephenmckinney": "Should this be renamed virtualenvwrapper support? With the variable renamed. Could be confusing to users that use virtualenv but not virtualenvwrapper.\n. ",
    "mjtamlyn": "Is this dead for good? Other than prepending every tab command with workon <name> && is there a recommended way of using virtualenvwrapper with tmuxinator? (rvm support looks lovely but is kinda irrelevant for a python dev)\n. ",
    "krak3n": "Tmuxinator looks as if it's back in active development, this pull request would be super useful.\n. ",
    "latortuga": "My fork has this feature in with an additional config flag: cli_args. I supply -2 with it on every project so I added it to the default skeleton. Basically just clone that project and bundle exec rake install.\n. The other option is to just create a bash alias:\nbash\nalias tmux='tmux -2'\n. For now this works - I use -2 when I call tmux so I needed this extension to automatically add it. I installed a version of the gem built on this and it works great. Thanks for the great gem!\n. I actually stopped using it myself. Just use a bash alias:\nbash\nalias tmux='tmux -2'\n. Do you have set -g default-terminal \"screen-256color\" in your tmux conf? It works great for me. I have the alias in my .bashrc.\n. ",
    "bsodmike": "Similar to #183?\n. @Soliah :+1: was scratching my head there!\n. ",
    "andersjanmyr": "If you install the gem with:\ngem install --no-wrappers tmuxinator\nThe sourcing works fine.\n[[ -s `rvm gemdir`/bin/tmuxinator_completion ]] && source `rvm gemdir`/bin/tmuxinator_completion\n. Strange, when I check my install I get the correct behavior. Perhaps it has something to do with\ninstalling to the @global gemset\n```\n$ gem install --no-wrappers tmuxinator\n$ which tmuxinator_completion\n/Users/andersjanmyr/.rvm/gems/ruby-1.9.3-p125/bin/tmuxinator_completion\n$ cat which tmuxinator_completion\n!/usr/bin/env bash\nTmuxinator command line completion.\nhave=$(command -v tmuxinator)\ntest -n \"$have\" &&\n_tmuxinator_commands_complete()\n{\n  COMPREPLY=()\n  if [ $COMP_CWORD = 1 ]; then\n    local commands=\"open copy delete update_scripts implode list doctor help version\"\n    COMPREPLY=(compgen -W \"$commands\" -- $2)\n  fi\n  return 0\n}\n_tmuxinator_open_complete()\n{\n  COMPREPLY=()\n  if [ $COMP_CWORD = 1 ]; then\n    local configs=find ~/.tmuxinator/ -name *.yml | cut -d/ -f5 | sed s:.yml::g\n    COMPREPLY=(compgen -W \"$configs\" -- $2)\n  fi\n  return 0\n}\ncomplete -F _tmuxinator_commands_complete -o default tmuxinator mux\ncomplete -F _tmuxinator_open_complete -o default muxo[635:evented-programming-with-nodejs (master)]\n$ \n```\n. @suvash Sorry, I don't know of a substitute.\n. ",
    "sickill": "I have it installed in @global gemset and it still doesn't work for me. I did what you suggested (install with --no-wrappers and source like above) but here's what I get:\n``\n~ % echorvm gemdir`/bin/tmuxinator_completion\n/home/kill/.rvm/gems/ruby-1.9.2-p318/bin/tmuxinator_completion\n~ % cat /home/kill/.rvm/gems/ruby-1.9.2-p318/bin/tmuxinator_completion\ncat: /home/kill/.rvm/gems/ruby-1.9.2-p318/bin/tmuxinator_completion: No such file or directory\n~ % cat /home/kill/.rvm/gems/ruby-1.9.2-p318@global/bin/tmuxinator_completion \n!/home/kill/.rvm/rubies/ruby-1.9.2-p318/bin/ruby\n\nThis file was generated by RubyGems.\n\nThe application 'tmuxinator' is installed as part of a gem, and\nthis file is here to facilitate running it.\n\nrequire 'rubygems'\nversion = \">= 0\"\nif ARGV.first =~ /^(.*)$/ and Gem::Version.correct? $1 then\n  version = $1\n  ARGV.shift\nend\ngem 'tmuxinator', version\nload Gem.bin_path('tmuxinator', 'tmuxinator_completion', version)\n```\n. ",
    "suvash": "I've done exactly as you mentioned ( with --no-wrappers ). However it complains about not finding complete when sourcing.\n./tmuxinator_completion:28: command not found: complete\n./tmuxinator_completion:29: command not found: complete\ncomplete being present on the last two lines.\n. okay, apparently I'm using zsh, and complete is a bash command. Any subsitution for this command ?\n. ",
    "dougnukem": "I'm using rvm on OSX and I tried uninstalling and installing using:\n$ which gem\n/Users/ddaniels/.rvm/rubies/ruby-1.9.3-p286/bin/gem\n$ gem uninstall tmuxinator\n$ gem install --no-wrappers tmuxinator\n``\n$ catrvm gemdir`/bin/tmuxinator_completion\n!/usr/bin/env ruby_noexec_wrapper\n\nThis file was generated by RubyGems.\n...\n```\nSo to work around that I could put the following in my ~/.bashrc:\n```\ntmuxinator\n[[ -s rvm gemdir/gems/tmuxinator-0.5.0/bin/tmuxinator_completion ]] && source rvm gemdir/gems/tmuxinator-0.5.0/bin/tmuxinator_completion\n```\nOr if I wanted to avoid hardcoding the version I could do something like:\n```\ntmuxinator\nTMUX_COMPLETION_PATH=$(ruby -e \"print Gem.bin_path('tmuxinator', 'tmuxinator_completion', '>= 0')\" 2> \"/dev/null\") \n[[ -s \"$TMUX_COMPLETION_PATH\" ]] && source \"$TMUX_COMPLETION_PATH\"\n```\n. +1 sounds like a good idea, especially if you want to source control config files and use them across a team, and keep them associated with your project.\n. @js-coder I think allowing you to checkout a particular project with a .tmuxinator folder would make things feel a lot more self contained than having to symlink that folder to the ~/.tmuxinator folder or symlink each tmuxinator *.yml file.\ne.g. I think the ideal work flow is something like:\n```\ngit clone \ncd project\nProject contains a .tmuxinator/project.yml file\ntmuxinator project\n```\nOtherwise you'd have to do something screwy like symlink one (or many config files after you checkout the repo), or switch ~/.tmuxinator symlinks as you switch projects.\n. Even with that find fix, I'm not able to trigger the completion such as \n```\n$ mux open \n$ mux start\n```\nLooking at the tmuxinator_completion script at the bottom I noticed it mapping the functions to certain commands it looked like, and the *.yml completion was for some \"muxo\" command that doesn't exist. When I tried \"muxo\" in the shell though it started to auto-complete.\n$ muxo project-dev-ops\nbash: muxo: command not found\n. ",
    "mikl": "@dbloete sweet, thanks. Perhaps we ought to link these somewhere? (README, or similar)\n. ",
    "pellegrino": "Hey, i spent sometime trying to find layout configurations throughout the codebase. Could this be added to the README? This could possible save people's time.\n. ",
    "mahemoff": "For the benefit of search visitors, the default options are:\neven-horizontal, even-vertical, main-horizontal, main-vertical, tiled\n. Looking further, it's because send_keys uses the argument #{s cmd} (https://github.com/aziz/tmuxinator/blob/master/lib/tmuxinator/config_writer.rb#L104). s is an alias for shell_escape, which effectively wraps single-quotes around the whole command.\nMaybe the escaping could be suppressed if the command begins and ends with single-quotes. Then one could specify something like:\ntabs:\n    server: 'ssh user@server.com' C-m 'cd app; tail -f log'\n. Same as @runar - my main use case is running commands after ssh login.\n. Working for me. This is really a huge leap in productivity to be able to\njump straight into Rails console, tail logs, etc. on the server. Thanks for\nadding it.\n. @Soliah That worked. I simply made it:\n- \",n\"\nIt's an effective workaround at the least.\n. +1. Would like to see a \"root\" field inside a window element, the same way it works for the global project.\n. #203 supports this use case better (without using a variable)\n. Working on tests ...\n. @dekz Could also be good if user can specify just a folder name too and it would try to resolve to folder/{,.}tmuxinator.yml. [The . prefix usually doesn't make sense inside a project hierarchy, so ideally it should try both.] In Rails for example, my working folder is usually the top-level, but tmuxinator.yml is inside config/.\n. For people searching, this goes in tmuxinator.yml - specify the name of the starting window:\nstartup_window: logs. Thanks\n(https://github.com/tmuxinator/tmuxinator/pull/307 for the record)\n. I've found this still doesn't work (v0.7.1). Not sure if it's a tmux issue, but it seems the sessions get \"merged\" together so the terminal is basically a mess and tmux shortcuts don't work.\n. Doesn't #203 do the same thing?\n. ",
    "danpannell": "This layout creates 3 unequally sized panes with vim in one of them.  Be careful with spaces and if you try this make sure to include the colon and a newline on the last line as shown: \n**start example**\nwindows:\n\u00a0\u00a0- editor:\n          \u00a0\u00a0\u00a0\u00a0layout: main-vertical\n          \u00a0\u00a0\u00a0\u00a0panes:\n            \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- tmux split-window -d ; M=0; while [ \"$M\" -lt 9 ]; do (( M+=1 )); tmux resize-pane -D; done; vim\n            \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0- ;\n. ",
    "calas": "Any chance of this being merged and released? I think it's very useful, it's a clean implementation and I'm already needing it. \n. yes, this is what I've been using for a long time, but it doesn't work with tmuxinator. \n. Yes I do, and the alias too. But I don't know why it doesn't work with\ntmuxinator, the only solution I've found to get vim+tmuxinator+256 color\nterminal is your patch. Thanks anyway.\nOn Tue, Jun 19, 2012 at 3:56 PM, Drew Ulmer <\nreply@reply.github.com\n\nwrote:\nDo you have set -g default-terminal \"screen-256color\" in your tmux conf?\nIt works great for me. I have the alias in my .bashrc.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/aziz/tmuxinator/pull/68#issuecomment-6425369\n. \n",
    "yrammos": "(By the way, please ignore the earlier of the two commits. They are basically identical with differences only in the comments.)\n. Great, thanks a lot.\n. ",
    "michaeltwofish": "Yes, please. This would fix #50.\n. ",
    "iwfmp": "It seems to happen only to the hidden windows when starting a session.\nThis is not a solution, obviously, but ATM I created a script that sleeps for 2 seconds and clears \n- this allows me to switch and focus for a second on all windows before they start up the programs.\n. Eureka!\nDisable this:\n\"setw -g aggressive-resize on\",\nand it should work just fine. Worked for me, anyway.\nCheers.\n. ",
    "feimosi": "@tuxcanfly the PR doesn't solve this issue. How can I select another pane than the first one to have focus?\n. Sorry, I somehow missed that.\nSo basically after every tmuxinator update I need to download the completion file manually, right?. Sure, makes sense, thanks :+1: . ",
    "svetlyak40wt": ":+1: I have this problem too.\n. As I see, tmuxinator will have this ability in 0.7 version. Am I right?\n. ",
    "dzello": "Added a second commit that restores the pre-pane functionality.\n. ",
    "majkelcc": "+1\n. ",
    "netcarver": "This would be useful to me. +1\n. ",
    "foice": "Would be very useful to me as well, indeed!\n. ",
    "bedge": "sigh...just what I needed.\nBetter than manually setting HISTFILE before each shell.\nI'll put the rebase on my todo list. (not holding breath)\n. Settled on addressing this in ~/.zshenv rather than wiring into tmuxinator.\nIn case it helps anyone else:\nif [ \"${TMUX}\" ] ; then\n    HISTFILE=~/.zsh/history/$(tmux display-message -p -t${TMUX_PANE} \"#{window_name}\")\nfi\n. FWIW, fixed this by running tmuxinator from within tmux.\nHappens only when running tmuxinator from a bare shell.. Very cool, would also like this. \nAllows one to fix all the panes named with unhelpful (from an ID standpoint) wrapper commands like ssh.. ",
    "wallace": ":+1:\n. ",
    "alem0lars": "+1 I would like it too much.\n. ",
    "jc00ke": "I was able to solve it by setting the env var when calling mux\n$> TERM=screen-256color-bce mux my-project\n. ```\n\u279c ~ tmuxinator debug api\nno server running on /tmp/tmux-1000/default\n!/usr/bin/fish\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server;\ncd /home/jesse/projects/api\n# Run pre command.\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s api -n editor\n# Create other windows.\n  tmux new-window  -t api:2 -n console\n  tmux new-window  -t api:3 -n mix\n# Window \"editor\"\n  tmux send-keys -t api:1 nvim\\ README.md C-m\n# Window \"console\"\n# Window \"mix\"\n  tmux send-keys -t api:3 mix\\ deps.get\\;\\ and\\ exit C-m\ntmux select-window -t 1\nif [ -z \"$TMUX\" ]; then\n    tmux -u attach-session -t api\n  else\n    tmux -u switch-client -t api\n  fi\n``\n. Hmm, that` escaping looks like it might be causing the issue.\n```\n\nirb -rshellwords\n\"nvim README.md\".shellescape\n=> \"nvim\\ README.md\"\n```\n. I had not, just did, and it worked.\n. @ethagnawl works on my machine, thank you!\n. \n",
    "tao12345666333": "You can use tmux_command option, setting  tmux_command: tmux -2\n. ",
    "cpfaff": "Using this export in my .zshrc: \nexport TERM=screen-256color-bce\nseem to fix it somehow. \n. ",
    "sjovang": "nvm. this solved the issue perfectly: https://github.com/aziz/tmuxinator/pull/48\n. ",
    "fradeve": "+1\n. ",
    "philipsahli": "+1\n. It would be great if tmuxinator is closing files opened with vi. IMO that could be a default behaviour.\n. ",
    "ranska": "Here some intersting link\nhttps://coderwall.com/p/-3i1fg\n. ",
    "athal7": "@ranska that was my temporary solution :)\n. that looks great thanks @ktaragorn, that is still in pre-release thought right?\n. this is definitely a step in the right direction. wemux still seems to not like one of the commands being sent to it. going to try to dig in further\n. from what i can tell it does not enter the if block with the conditional if [ \"$?\" -eq 1 ];\nthen when trying to execute the following, it says that there are no sessions:\nif [ -z \"$TMUX\" ]; then\n  wemux -u attach-session -t wemux\nelse\n  wemux -u switch-client -t wemux\nfi```\n. actually it appears to be having trouble on the first line, which is causing it to not enter the first if block.\n$ wemux start-server\\; has-session -t wemux 2>/dev/null\nTo see a list of wemux commands enter 'wemux help'\n. i may have gone a little overboard there, going to pair back the branching a bit. will also remove the reference until it's ready to not spam this issue, feel free to follow on my branch until then https://github.com/athal7/tmuxinator/tree/wemux\n. @Soliah curious to hear your thoughts on the latest version here (assuming I or someone else is able to resolve https://github.com/zolrath/wemux/issues/34)\n. @emilsoman unfortunately the delay here is on the linked wemux issue otherwise the commands sent into each pane will be stripped of their whitespace :(\n. quick update here... if you follow the manual installation path in wemux, wemux behaves as we would like to allow this to work, however, the homebrew-installed version of wemux still strips whitespace. i've updated the upstream issue on wemux with that comment.\n. update: the latest version of wemux that is installable by the latest version of homebrew has fixed the send-keys issue. for some reason only one window is created even if more than one are specified. i'll try to revisit the new template and see if there are any missteps.\n. thanks @Soliah!\n. @razic you are right re multiple sessions. unfortunately i dont think i'll be able to get to it in the immediate term, but if you want to submit a PR that would be awesome.\nWhat behavior is the issue you mentioned in your debug comment causing issues for your project? Can you submit an example configuration?\n. @fsonntag https://github.com/tmuxinator/tmuxinator/pull/453. @J3RN sounds like there's some desire for this fix, do you have a chance to take a look?. ",
    "ktaragorn": "@athal7 If wemux uses the same command line interface as tmux, take a look at the latest version and the tmux_command setting. You can set it to wemux and it will be called in all places that tmux would have been.\n. First added in https://github.com/aziz/tmuxinator/pull/154\n. Hey thanks! Glad I could contribute! Will take a look at the latest version.\n. ",
    "emilsoman": "It would be great if we could get this PR merged and cut a release\n. ",
    "nfedyashev": "will give gold to whoever fix this\n. @dacechavez thanks for the explanation!\n. ",
    "razic": "@athal7 this half works.\nall of my tmuxinator projects that use the wemux command have the same session name: wemux\nhttps://github.com/tmuxinator/tmuxinator/blob/master/lib/tmuxinator/wemux_support.rb#L15\nthat means if i try to use mux to start a new session on a different project, it just attaches to whatever is on wemux session, which is not the desired behavior.\nshouldn't we remove overriding name?\n. also here is an example of my mux debug PROJECT\n```\n!/bin/bash\nwemux ls 2>/dev/null\nif [ \"$?\" -eq 127 ]; then\n  cd /Users/razic/typekit/typekit\n# Run pre command.\n# Create the session and the first window.\n  TMUX= wemux new-session -d -s wemux -n vim\n# Set the default path.\n  wemux set-option -t wemux -c /Users/razic/typekit/typekit 1>/dev/null\n# Create other windows.\n  wemux new-window -c /Users/razic/typekit/typekit -t wemux:1 -n bash\n# Window \"vim\"\nwemux send-keys -t wemux:0 vim\\ . C-m\n# Window \"bash\"\nwemux select-window -t 0\nfi\nwemux attach\n```\nyou will notice that\n```\n  # Set the default path.\n  wemux set-option -t wemux -c /Users/razic/typekit/typekit 1>/dev/null\n```\nis incorrect. there is no -c option for set-option\n. ",
    "fsonntag": "When I try running \ntmuxinator start [project], I get the following error:                                                                                                                                                                                                      \nundefined method `class_eval' for #\nSame error also with debugging.\nIf I try my [project] with tmux it works completely fine. Anybody got some hints on that?. ",
    "florian": "You could just symlink the two files, though.\n. You would just symlink each file, not some folder. But yeah, I definitely agree that this is something useful that should get merged. :+1: I was just suggesting something simple for you guys to use until it actually gets merged.\nHowever symlinking would have the advantage that you don't have to be in the project directory when starting mux.\n. I'm not sure if you are still looking, but I'd love to help out, too. It's time to clean up all these issues, and pull requests, and maybe add some cool new stuff.\n. ",
    "johnlane": "As @dougnukem said, checking out a project with a .tmuxinator inside makes things very self-contained and needing that was my reason for the patch. I always follow the commands as in his post and, once tmux is startedm live in there. I'm still holding out to see this merged....\n. ",
    "klaut": "+1\n. ",
    "sebastibe": "In the same related feature, having a post parameter similar to pre to trigger some events before closing the session would be really great.\n. ",
    "xntrik": "Perhaps you could have a new hash config item under the tabs hash that specifies exit key-presses for how to quit that particular window? Then a separate tmux command to issue the various tmux send-keys. (I don't know if this is any more graceful than what you suggested, but, at least it's customisable).\nExample:\ntabs:\n    - shell:\n        panes:\n            - #\n        exit:\n            - exit Enter\n    - server:\n        panes:\n            - rails s\n        exit:\n            - C-c\n            - exit Enter\n    - database:\n        panes:\n            - rails db\n        exit:\n            - .quit Enter\n            - exit Enter\nSo if the session was called APP, then you'd just have to wrap together a bunch of commands similar to:\ntmux send-keys -t APP:shell exit Enter\ntmux send-keys -t APP:server C-c\ntmux send-keys -t APP:server exit Enter\ntmux send-keys -t APP:database .quit Enter\ntmux send-keys -t APP:database exit Enter\n. Wow.. sorry, the 'space indentation' I had in that comment did not apparently come through at all :(\n. I think that looks pretty good.\nI can't imagine many people would actually use this functionality. I guess it's whether or not you'd see this method is better than having no method.\n. ",
    "chibicode": "@Soliah  @xntrik :+1: \nI edit the config yml files often, and every time I do, I'd like to start fresh by killing the edited project and restarting it. So this would be very useful for me.\n. ",
    "amaltson": ":+1: for post_tab, neat feature. Don't mind using tmuxinator close window/pane/session vs tmux kill-pane/window/session.\nI'd love to also see a general post config like the pre configuration as well. I just set up a tmuxinator session that sets up a bunch of sshfs mount points in pre and I'd love to execute a command when the tmuxinator session is done (i.e. pkill sshfs).\n. ",
    "ramonjavaier": "Isn't this similar to Issue #87?\n. ",
    "ganeshran": "This feature would be really helpful. I run a rails server in one of the panes and if it doesnt get shut down properly, the next time I have to manually kill the rails process and delete the pid file\n. ",
    "hiromitz": "+1\n. ",
    "moltar": "+1 # This feature would be extra sweet. Subbing for winning.\n. ",
    "schickling": ":+1: \n. ",
    "araslanov-e": "+1\n. ",
    "mMontu": "+1\n. I have the exact same need: I have a default session with several windows and, from time to time, I have to replace a given window. As there are many commands to be executed on the panes of that window, not to mention the layout, I find it easier to close the whole session, edit the yml file then open it again.\nFor example, in the following project:\nwindows:\n  - window1to4: unrelated tasks\n  - server1: complex set of commands/panes\n  - logs: tail -f log/development.log\nSuppose that the server window is complex, with several commands (and possible several panes, not shown in the example). Currently I edit the project file,\nwindows:\n  - window1to4: unrelated tasks\n  - server2: yet another complex set of commands/panes\n  - logs: tail -f log/development.log\n, then close the tmux session and start it again.\nA command to execute the commands of a yml on a new window instead of a new section would be great. I believe it would be necessary two .yml files, one for server1 and another for server2 in order to use this new command. It would be nice if this command would also work the session file:\nwindows:\n  - window1to4: unrelated tasks\n  - mux append server1\n  - logs: tail -f log/development.log\n. I'm an adept of DOTADIW as well, and I thought that this feature would fall in the \"one thing\":\n\nCreate and manage tmux sessions easily.\n\nThe idea was to use tmuxinator to create sessions e access existing sessions instead of creating duplicates, and them sending commands/receiving output non-interactive (this might be the part that doesn't follow the DOTADIW...).\nThe actual use case is to perform development on legacy systems. One example is issuing ClearCase commands on a remote server through ssh; currently I used something like this:\nssh <remote_host> \"cleartool setview -login -exec '%s' <cc_view>\"\nThe %s contains the actual command. This approach works fine, but as I increased the complexity I started noticing a delay when issuing several commands. After some analysis it became clear that setting the view is the bottleneck. As I already use tmuxinator on a daily basis (and I'm very happy with it :)) I thought it would be nice to use it through scripts, to have something beyond reuse of ssh connections, i.e., reuse the entire enviroment.\n. After putting more thought on this I believe you are right, that this is not a task for this plugin. The tmux session it uses is different from the project concept used by the plugin.\nThanks for your patience.\n. ",
    "carlotrimarchi": "+1\n. ",
    "jlipps": ":+1: \n. After thinking about this, I decided that tmuxinator was the wrong place for this feature to live. So I implemented it as a tmux plugin. Please check it out and let me know what you think. https://github.com/jlipps/tmux-safekill\n. I did not have automatic-rename or allow-rename specifically set to on. However, I noticed that I only had automatic-rename specifically set to off. I added set-window-option -g allow-rename off and now the behavior is as expected!\nI guess my version of tmux might default to allow-rename on?\nAnyway, I'm all set. Thanks for letting me know about allow-rename.\n. I'm on 1.7.\n. It's just a little ugly because what I'd end up doing is:\nmux copy dev dev1\nmux start dev1\nOh, I need a new dev HUD.\nmux copy dev dev2\nmux start dev2\nThen shut them all down when done. And then every time I change dev I have to delete the others and copy all over again.\nThe use case is when you have one configuration you use for an indefinite number projects.\nclone would be great! Although start-clone is a little clearer. clone sounds a lot like copy to me. start-clone is long though... I dunno. I'll use whatever you make :-)\n. :+1: I would love this as well\n. Usage is like:\nmux start [project] [alias]\nSo I can do:\nmux start dev\nin one terminal, and then\nmux start dev coolproj\nIn another. They'll both use different session names (and sockets---though maybe want to relax that?).\n. ok fine @coveralls i'll add some tests!\n. :+1:  thanks for the merge! Been using this the last 6 months and it's an integral part of my dev cycle. Now the only feature that I'm missing is passing params from the command line into argument slots inside the yaml config.\n. \\o/\n. ",
    "LukaK": "+1\n. ",
    "ccmcbeck": "If you get here because tmux is not reliably killing rails server, you should know that it does reliably kill heroku local.  Sometimes, I use rails server to run byebug, but now I always try to use heroku local in a tmux YML file.\n. ",
    "unlessbamboo": "+1\uff0c tmux-safekill. ",
    "fgrehm": "hey there, I've just got bitten by this today, looking at #107 it seems that it has been fixed already (it's crossed on the PR) but this PR hasn't been merged. Should this be working from master?\n\n. @Soliah I've got tmuxinator installed from rbenv, is that what you mean or configuring rbenv from tmuxinator? I'm up for trying out the branch if it I'm able to use it like this :-)\n. @Soliah I've built it from master at some point last week and things seems to be working fine :)\n. ",
    "gvlasov": "@Soliah Why not have a translation layer between the filename and session name? E.g. replacing .s from the filename with _s or maybe with a longer string like _$_ to lower the chances of a collision with another session whose filename actually uses _ in place of .?. ",
    "markscholtz": "@aziz, I'd be keen to help you out.\n. ",
    "taq": "Hey, I'm here. :-)\n. ",
    "willrax": ":+1: Nice work. Thanks @Soliah \n. ",
    "azat": "Right now (i.e. without this patch), it can be done with something like this:\nname: toolchain\nroot: /tmp\nwindows:\n  - versions:\n      layout: tiled\n      panes:\n        - gcc --version\n        - g++ --version\n        - clang --version\n        - cmake --version\n        - git --version\n        - last-with-sync:\n          - version\n          # bash + ignorespace will ignore this command, to avoid dirtying of history\n          - ' tmux set-window-option -t toolchain:versions synchronize-panes on'\n. Closing this one, because tmuxinator already have tmux_options\n. But I can't find how to do this using existing functionality, so I reopen it.\nI've tried:\n- tmux_options: -f <(echo set history-limit 1): didn't work because sometimes it use /bin/sh instead of /bin/bash (sure I can use pre directive and generate config there, but it is not usable.\n- tmux_options: set history-limit 1\\;: didn't work because tmuxinator append this options just after tmux command, however sometimes it use -u switch just after this, and it can't parsed by tmux.\n. On Sat, Jun 06, 2015 at 05:23:23AM -0700, Christopher Chow wrote:\n\nI think you should be able to put this in the newly supported post. #293.\n\nIf I understand correctly, then it will also won't work.\nSince you can't change history-limit when window/pane already created,\nand patch from #293 just allow you to execute some command after\nwindows/panes already created.\nAm I missing something?\n. Actually I can't even use pre since tmuxinator creates server before:\n```\ntmux -f /tmp/tmux.mail.conf start-server\\; has-session -t mail 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  ...\n  # Run pre command.\n  echo set history-limit 1000 >> /tmp/tmux.mail.conf\n```\n. @ethagnawl can this hunk at least be applied?\nOtherwise I can't use bash specific stuff in pre\n. > @azat I'd prefer introducing the explicit pre_tmux option.\nBut I still need to change default interpreter.\nThanks, Azat.\n. Hi @J3RN, sure, push forced to this branch\nThanks!. ",
    "Loki-Afro": "+1!\n. ",
    "J3RN": "I'd like to see this feature merged. Though, since it's been a number of years it may take some time to coerce this into our codebase, since it's changed significantly over the intervening time. I'd be happy to help with that :smile: \n. @pczarn Unfortunately, it doesn't look like I can reopen this one, since it says that there are no commits between your serialize-session branch and our 0.7.0-wip branch. It seems the large difference in commit history was simply because this pull request was opened against that 0.7.0-wip branch, which is very out-of-date.\nCould you push up your changes to your serialize-session branch again open a new pull-request against our master branch?\n. Sorry for just now getting around to reviewing this issue. As for this, I'd lean towards putting your Tmux configuration in your .tmux.conf file. For the 256-color example, that would look like:\nset -g default-terminal \"screen-256color\"\nIf someone has an example of a Tmux configuration option that cannot be specified in Tmux's configuration file, please post it below and I'll look into implementing something to fix this.\n. I also vote for this issue. I've got a lot of files that are essentially:\nyaml\nname: <%= ARGV[0] %>\nroot: ~/workspace/<%= ARGV[0] %>\n...\n. I'll look into this today and determine how long this will take to complete. However, if someone wants to implement this and send a pull request... \ud83c\udf08 :+1:\n. @SuperMarioBean I don't believe that is an issue related to that one, but that one certainly does cause me a lot of grief.\nAre people still having this issue? Does it happen with the latest version (1.8)?\n. ~~@cwhits @jusw85 It sounds like the issue you guys are having is related to not being able to have a window with no panes. Since that seems different from the problem for which this issue was first created, I'm going to create a new issue to discuss this.~~\nMy apologies, I misunderstood. We can continue to discuss this here.\n. @podung Yes, I was able to replicate the error on the latest version of Tmuxinator (v0.8.1) and Tmux v2.2.\nProject file:\n``` yaml\n~/.tmuxinator/foobar.yml\nname: foobar\nroot: ~/\nwindows:\n  - editor:\n      layout: main-horizontal\n```\nmux foobar:\n(erubis:41:in `block in render': undefined method `each' for nil:NilClass (NoMethodError)\n    from (erubis:34:in `each'\n    from (erubis:34:in `render'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/erubis-2.7.0/lib/erubis/evaluator.rb:65:in `eval'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/erubis-2.7.0/lib/erubis/evaluator.rb:65:in `result'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/tmuxinator-0.8.1/lib/tmuxinator/project.rb:81:in `render'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/tmuxinator-0.8.1/lib/tmuxinator/cli.rb:127:in `render_project'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/tmuxinator-0.8.1/lib/tmuxinator/cli.rb:151:in `start'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/tmuxinator-0.8.1/bin/tmuxinator:13:in `<top (required)>'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/bin/tmuxinator:23:in `load'\n    from /Users/jonathanarnett/.rbenv/versions/2.3.1/bin/tmuxinator:23:in `<main>'\n. I'm working on a test. I also agree that the ARGV[i] syntax isn't ideal. I've written an alternate implementation where the configuration passed on the command line is available in an array, args, so you could write instead args[0] to get the first actual additional argument.\nHaving a hash with descriptive keys (e.g. args[\"vim_root\"]  #=> \"~/git/foo/mama\") would be quite nice, but writing out mux start project vim_root=~/git/foo/mama on the command line seems awfully verbose.\n. Alright, I'm starting work on the \"both\" feature. Will push up when it's finished.\n. @args contains simple arguments. If you were to type \"mux start foo bar\", @args would be a 1-item array, containing only \"bar\". @settings contains items passed in the format key=value, which can be accessed with @settings[\"key\"] #=> \"value\".\nThe side effect of this commit is that the session name option had to be moved elsewhere to avoid conflicting with the args. It is now in a flag called \"name\", which I think is a good home for it.\nExample config:\n``` YAML\nname: vim\nroot: ~/\nwindows:\n  - editor: vim <%= @args[0] %>\n  - other: cd <%= @settings[\"vimdir\"] %>\n```\nThis could then be called with:\n$ mux vim .vimrc vimdir=~/.vim\nUpdated with new instance variable change\n. @Soliah Yes and no. Technically, this does break reverse compatibility with that feature. However, that feature lives on in the form of a flag. If you want to specify a name, you can do so like this:\n$ mux start <project> --name=<name>\n. @Soliah Just updated the README. Let me know if it needs more work.\n. @maxmeyer That's a pretty cool idea. I'm feeling like it's a little out-of-scope here, though. I'd say you should open an issue for that, and we can do that in another PR. That is, unless the maintainers think that we should include it here.\n. On it.\n. It looks like force pushing to my branch closed the PR? Can one of you fine gentlemen re-open it? @magicalbanana @Soliah\n. Nevermind. It looks like GitHub is all sorts of confused. I opened a new PR at #343.\n. I think \"easier\" is a matter of opinion here. In your shell, you could do:\nbash\ncd ~/.tmuxinator\nrm -i project1.yml project2.yml project3.yml\nOr, with this feature, you could do:\nbash\nmux delete project1 project2 ...\nand get more or less the same result. \nDespite being less typing (unless you use you file browser to open ~/.tmuxinator, which is a massive pain in OS X, so I have no idea why you would), Tmuxinator already has the delete command, so this change would just enhance an existing feature, not adding anything radical.\nActually, it looks like the fact that config YAML files are stored in ~/.tmuxinator is never explicitly documented, though it is implicitly documented in the README in an example: \n\nConceptual stuff that you do not need pay attention to\nThe main difference here is maintaining a level of abstraction, and a consistent interface. Let's say, for instance, that Tmuxinator were to move it's YAML files to somewhere else (e.g. /etc/tmuxinator/ - not that you would, but you theoretically could). When that change was made, it would make sense to update the mux delete code to delete from /etc/tmuxinator (since this feature already exists in Tmuxinator anyhow). Someone who was used to just opening the folder and deleting the files would now not know where all their configs went, but someone who uses the mux delete command who not notice any change, and could continue to use the tool exactly as they were before.\n. @azat Hey there! Thanks for your pull-request! :sparkles: I'm sorry that it's taken over a year for it to be reviewed.\nI absolutely agree that Tmuxinator should use the user's configured shell. To take this PR forward, it looks like the first thing is that you'll need to rebase in recent changes on master. Would you mind doing that?. Has this issue been resolved? Is anyone still having trouble with this?\n. Alright, I'm going to close this. Anyone can feel free to reopen it if they still have issues.\n. @ethagnawl Thanks for doing the separate issue for that one! I had been meaning to get around to it, but never did.\nI think I fixed what you were talking about. Good call on the say thing -- I had never actually noticed that say was a real method.\n. The big issue here is that Tmuxinator::Config#exists? expects a project's name to be passed, but what is being passed here is a full file path to the project file. Tmuxinator::Config#exists? treats this full file path as the project's name, and cannot find such a project. Thus it \"creates it\", which incidentally overwrites the already-existing one. This is easily mitigated by replacing Tmuxinator::Config#exists? in this instance with File#exists?, which does expect a full file path.\n. WRT the erroring tests, it is only failing for TMUX master, which unfortunately the master branch is as well.\n. It looks like you took this fix a bit further than I did, but after having read your changes and having tried it on my machine, I'm ready to take your changes over mine. :+1:\n. @ncoop That sounds reasonable. In all honesty, I hate $HOME being crowded with dotfiles, so moving to using the .config directory seems ideal. I'll try to make time to start on this today.\n. I'm happy to wait for v1.0.\n. @adamstrickland Any idea if they're still making progress towards v1.0? It's been about a year and rubocop seems to have made significant changes, deprecating most of our configuration.. Sorry for the delay on this! I will test it out and give you feedback.\n. @JohnRodney I apologize for the delay. I have pulled this down, verified that it works, and reviewed the code. My only feedback is nitpicks, and I will leave comments on the appropriate lines.\n. :+1: with rebase and comments.\n. @JohnRodney Any updates on this?\n. @JohnRodney Are you still interested in getting this merged in?. @DanielArndt Hey there! Sorry, I wasn't watching the repository, so I missed this PR. I've not finished looking through it yet, but I just wanted to let you know that I'm going to start that now! :sparkles: \n. After replicating the issue and trying your solution, it looks like it's good-to-go!\nThis should be released as version 0.7.2.\n. I'm glad to see you opened this! Like I said in the Gitter channel, I am fully in support of adding this. Since the build failed for some issue with sudo apt-get..., I restarted it. It should be fine, I imagine.\nI would be fine with taking reports, but I'd probably set up a separate email account for just that. A private mailing list also sounds like a great idea, but I'm unsure how to get one set up.\n. Yeah, you're right - It's unlikely that my email will get swamped with reports, so there's probably no need to go through the hassle of setting up another email account. Would you like me to open a PR against this one containing my email?\n. @ethagnawl That works for me!\n. :+1:\n. @Soliah Naturally, I'd be honored to be an (the?) owner of the repo. That said, I'm a relatively newer contributor, so I can understand you objecting to giving me ownership.\n. Whoops, I just realized we don't check in Gemfile.lock. My mistake.\n. @aycabta Thanks for your PR! :sparkles:\nI guess my biggest concern about this would be that since /dev/null does not exist on Windows, an ugly error message will likely be printed to the console (granted, I haven't used Windows in several years).\nWhile it's a little more complex, I would think that it would make sense to run a different command if the user is running Windows vs a *nix-like system. A brief Google turns up the Get-Command command, which might be best for this purpose. Would you like to try implementing that?\n. I saw this and am in favor :+1:\nOn Mar 24, 2016 16:20, \"Adam Strickland\" notifications@github.com wrote:\n\n[image: :+1:]\nany other opinions?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/pull/386#issuecomment-201003284\n. This is probably what I deserve for not testing it myself. The output from type should be redirected to /dev/null, and thus not displayed, but I guess that's not happening?\n. @cinaeco I opened a separate issue for this, see #395 \n. LGTM! :+1:\n. This has been instated. Closing.\n. The tests haven't passed yet (I'm sure they will), but this LGTM! :+1:\n. @ethagnawl Are we good to merge this?\n. I agree. Honestly, having color support makes this superior to puts for me, since I enjoy having output clearly colored to indicate severity/importance/etc.\n. @ethagnawl I'd be happy to do the single quote fix, but unfortunately since it's on your fork, I probably don't have push access. That's alright though, I don't think we're in any enormous hurry. Enjoy your time off! :palm_tree:\n\nYou're right about doing rake test. I created #398 to address that.\n. @ethagnawl Alright, looks good! Does this branch have the updated CHANGELOG? If so, would you mind throwing a note about this change in there?\n. @ethagnawl Alright, this looks good to merge!\n. @cinaeco Interesting point. I hadn't considered that. What I did notice is that after sourcing the completions, typing mux <TAB> on a machine that did not have tmuxinator installed resulting in an error being thrown. It's an edge case, you could say, relying on user error.\nI guess my main concern with loading the bash completions regardless is that it breaks parity with the zsh implementation. If you source rvm after sourcing tmuxinator.zsh in zsh, you're still out of luck.\n. @cinaeco Are we good to close this issue?\n. I am closing this in favor of #400\n. Sweet, I'll merge it as soon as the tests pass!\n. @Soliah Done!\n. I'm thinking that since this change is internal-facing, there's no need to update the CHANGELOG for it. Let me know if you think otherwise.\n. @adamstrickland I feel good to!\n. Hey @cinaeco! Thanks for this pull request! I'm no zsh hacker, so this decision might be better left to someone better informed. However, I like the clean, simplistic approach taken here.\n. I tested it out, and this seems to work well.\n@cinaeco Would you mind throwing a note in the CHANGELOG.md under \"Unreleased\"? I think this falls under \"Bugfixes\". Then we'll merge!\n. @cinaeco Looks good to me! Merging.\n. Something I have been contemplating is removing the mux file altogether, and just suggesting that people alias mux to tmuxinator.\n. Since this is a RubyGems issue and the issue has been appropriately opened on that repo, I will close this issue.\n. @ncoop Hard to say, but we're the only ones who have referenced the RubyGems issue.\n. @Richard-Walton Hey there! I'm sorry about this issue you've been having. The change was part of a feature/fix where tmuxinator would formerly attach by prefix -- so if you has a session named \"foobar\" and ran mux foo, you'd be attached to the \"foobar\" session.\nI'm not sure why upgrading to 2.0 didn't help, but I'm currently running 2.1, so it may have been added in that release. In any event, I can imagine that Ubuntu users are probably a large portion of our user base, so getting this fixed is a priority.\nIn the tmux man page, I found:\n\nIf the session name is prefixed with an '=', only an exact match is accepted (so '=mysess' will only match exactly 'mysess', not 'mysession').\n\nCould you try running something like:\nbash\ntmux has-session -t =foo\nand post the output?\n. Hey again @Richard-Walton! Thanks for moving this to a PR. It looks like the failing test simply checks the contents of the template file and expects to find \"has-session =\", which it naturally does not. I'm not sure how we could write a better, less implementation-dependent test for this, but would you mind updating that test to pass?\n. Geez, that's bizarre! Thanks for reporting it. What shell are you using? I'm assuming that you're sourcing the completions file for your shell?\n. It looks like there's a similar issue in ZSH, but it looks like this:\n\nI'll start digging on this.\n. It looks like the issue is the line lib/tmuxinator/cli.rb:58:\nruby\nsay configs\nIt should be something like:\nruby\nsay configs.join(\"\\n\")\nI'll look through the history to see why it was changed, and probably make a PR.\nUPDATE: The commit is 0c28d53365219463542fa3eec12c738ad9f07858. It looks like this issue was an unintentional side effect of switching from puts to say.\n. @kelvinst The pull request is in the works, I'd just like to write a test before releasing so it doesn't happen again! With any luck, later today. \n. Sorry to ping you guys on a closed issue, but now is the time to run gem update tmuxinator. Happy tmuxing!\n. I should actually add a test to this.\n. @ethagnawl Thanks for the offer! Unfortunately, I didn't see your comment until just now, and I have just completed writing a test. It was pretty trivial. Feel free to add more!\n. That's an interesting error you've run into! Thanks for reporting it!\nAre you saying you installed tmuxinator through apt-get? The canonical (pun not intended) way to install tmuxinator is with gem install tmuxinator using Ruby's gem package manager. I wasn't sure that a tmuxinator package existed, and was unable to locate it through Ubuntu's package search. Did you get it through a PPA maybe?\nI've done a quick scan of our code and it doesn't look like we have anything here for packaging tmuxinator for apt-get. The term vendor doesn't show up in any actual code.\nWhile I can't fix this for you, hopefully we can track down the source of this issue!\n. Hey @mjsr! To help me replicate this error, could you please post as much of the YAML file as you can, and check your Tmuxinator version? You should be able to check that with mux -v.\n. Also a note in the CHANGELOG.md file under a new title of \"## Unreleased\"? Sorry, that should be in there but this is the first new change since our last release.\n. I, for one, \ud83d\udc4d this. Also another \ud83d\udc4d for updating CHANGELOG.md!\n. @ethagnawl Are we ready to merge this one?\n. I'd say that sounds like a pretty safe bet.\n. I'm all in favor of arrays. It looks like the heredoc style is used in lib/tmuxinator/project.rb and spec/lib/tmuxinator/project_spec.rb, however, but I'm willing to allow this inconsistency.\n. I haven't tested it, but I'm sure it's good. I'm in favor of a merge! :+1:\n. This PR looks good! \u2728 I have a few nitpicks, though, so I'm going to go through and comment on the appropriate lines.\n. Alright, it seems to be working. LGTM :+1:\n. Another, but perhaps relevant, facet of this is that I feel like the 'edit' command should be split off from the 'new' command. I feel that if you try to edit a non-existent project file, Tmuxinator shouldn't just generate a new project file for you. Chief reason: typos. Typing mux edit prjoect when trying to edit the 'project' file would create a new project with this hideous name, which then must be removed.\nShould I split this off into another issue?\n. @razor-x Thanks for reporting this! It looks like this issue is a duplicate of #410. Let's move this discussion over there.\n. Hey @fabianschwarzfritz! This is a really nice pull request you've put together! I'm going to pull down the code and look through it a little more. In the meantime, would you mind adding a note for this in the CHANGELOG.md file under \"Unreleased\"?\n. Alright, everything seems good! \ud83d\udc4d Would you mind putting a comment in lib/tmuxinator/assets/sample.yml for this option? I think under the line about startup_window would be a good place for it.\n. Alright, I'd say this one is good to go! :+1: Any objections, @ethagnawl @adamstrickland?\n. Cool! Merging! :shipit: \n. LGTM! :shipit: \nEdit: Whoops, I just noticed that a conflict has been introduced. @fabianschwarzfritz Would you mind rebasing this branch off of master? I'd be happy to be of assistance if needed! \ud83d\ude04\n. I absolutely agree. Since it's ERB, could we use partials for common features?\n. @icole Sorry for my delayed response! I've been quite busy with my last semester here at the university and have not had time to work on this. If you would like to pick up where I left off, that would be amazing! \u2728 :+1:\n. @wardva @icole Unfortunately, I hit some roadblocks and stopped working on this PR. There's some boilerplate stuff in this PR that I'd encourage anyone interested in attempting this feature to make use of. Good luck! \ud83d\udc4d I'll be happy to review any PR's on this subject \u2705 . Here's my two cents:\n1. I've never had fun with Net:HTTP. I'd lean towards httparty  or faraday, but that's only my opinion.\n2. Could we do this with a post-install trigger?\n3. Tmux version and OS are a must. Naturally, the Tmuxinator version should be reported. I'm thinking that a request should be fired off whenever a user runs a certain command (mux start?) and should probably be run async so as to not cause a noticeable performance hit.\n. @adamstrickland After looking a little closer, it looks like the commands variable is populated exclusively by the build_commands method. This method properly handles all cases, so I popped it out of the else case it was living in, and tested for the case it was protected against.\nOn a philosophical note, the build_commands method is only used inside the Window class, so it should probably be a private method, and it's functionality should be tested by way of the commands method (an attr_reader of the instance var). In any case, that's why I didn't add tests for the commands method --- it would just be duplicating the tests of the build_commands method.\n. @ethagnawl @podung Thoughts?\nI'll squash before we merge, just wanted to make sure no new changes are needed.\n. I still want to squash. I'll do that and merge it in the morning.\nOn Jun 12, 2016 22:40, \"podung\" notifications@github.com wrote:\n\nOk cool. I can recreate now.\nLooking through the code the duplication in dealing with commands in\nTmuxinator::Window and Tmuxinator::Pane jumped out at me:\nTmuxinator::Windowdef tmux_pre_window_command\nreturn unless project.pre_window\n\"#{project.tmux} send-keys -t #{tmux_window_target} #{project.pre_window.shellescape} C-m\"end\nTmuxinator::Panedef tmux_pre_window_command\nreturn unless project.pre_window\n\"#{project.tmux} send-keys -t #{tmux_window_and_pane_target} #{project.pre_window.shellescape} C-m\"end\nAlso, both have to know about command(s) to be run in the pane/window. The\nduplication is really obvious when you look at lib/assets/template.erb:\nWindow \"<%= window.name %>\"unless window.panes?\nif window.project.pre_window\n    window.tmux_pre_window_command\n  end\n  window.commands.each do |command|\n    command\n  endelse\n  window.panes.each do |pane|\n    if pane.project.pre_window\n      pane.tmux_pre_window_command\n    end\n    pane.commands.each do |command|\n      pane.tmux_main_command(command)\n    end\n  endend\nWe shouldn't have the concept of a window without any panes. In that case,\nwe should just create a backing pane object and pass any window commands\ndown to it.\nYour fix works for the issue at hand though and it looks good to me. Did\nyou want to squash still or should I go ahead and merge?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/pull/428#issuecomment-225478640,\nor mute the thread\nhttps://github.com/notifications/unsubscribe/AB9pdo4ob_iRD8IZpTBmDz7wsvQ9yn4cks5qLMMVgaJpZM4IxADp\n.\n. I think this should actually be pretty trivial. I'll revisit the logic in /bin/tmuxinator and see what goes on in there. Thanks for reporting!\n. Oh gosh, I just realized that this is a v0.7.* issue. This was probably resolved in the v0.8.0 release. @hholst80 Is there any reason you haven't updated to a later version?\n. I strongly encourage this change :+1:\n\n@ncoop Would you mind updating the CHANGELOG?\n. @ncoop Side note -- the file modes changed for completions. Was that change intentional?\n@ethagnawl I'm concerned that RubyGems will probably never solve this issue since they don't seem to have given it much thought thus far. Currently, the 'mux' file does produce an ugly warning when installing tmuxinator and tells users to run a command that does not help, which is a little concerning. It feels to me that the 'mux' file has always been a placeholder for an alias -- that or that the executable should actually be named 'mux'. Then again, I'm not going to enforce these ideas \ud83d\ude04\n. Oh \u2014 nice call on those permissions. I should have looked at that more closely :smiley:\nI am in favor of removing the symlink.\n. What is the current status of this?\n. @ncoop It looks like you'll need to rebase. Sorry about that.\n@ethagnawl @adamstrickland Are either of you opposed to merging this?\n. :+1: I fully support this. ~~Making a note on #401 of a new idea I had in relation to this.~~\n. I am all in favor of this being merged.\n. Would you mind moving your comment in the CHANGELOG to under the \"Misc\" section? Other than that, LGTM! :+1:\n. All in favor of merging!\n. This looks good, @ethagnawl! I'd never given that message much thought. I've tried this out on my machine and it works as expected. :+1:\n. I'm all for merging!\n. @ethagnawl I think validate!'s current position is fine, given our current codebase.\nAn idea I was toying with was running \"doctor\" silently before start (or even others), which would produce warnings if any of the elements aren't met. The key difference between that implementation and the one here is that a warning wouldn't stop execution, but this implementation of using raise does (which I honestly prefer). Using raise in \"doctor\" would be counterproductive, since the current implementation of \"doctor\" gives the user a checklist of things to fix.\nWhat were you thinking about for an alternate implementation?\n. Alright, this looks good to me! Thanks for your help, @jackturnbull!\n. Since these methods are all related (exclusively?) to the \"doctor\" command, maybe the module/class should be called Tmuxinator::Doctor.\n. Whoa, I just realized that there's gems in our Gemfile. We should probably remove those.\n. To be fair, I think we should still remove the monkey patch. A quick ag says that blank? is only used twice. I'd have to do a bit of digging, but I suspect it probably wouldn't be too hard to change those two instances.\n. I actually made one for a work presentation recently. I'll make a new one that doesn't have trade secrets and put it in a PR tomorrow \ud83d\ude04 \n. The more tests the better! :+1:\n. Great work @seanmalloy! \ud83d\udc4d \n. @seanmalloy Thanks for digging into this! To remedy this, I think perhaps the best solution would be for us to withdraw our support for Ruby 1.9.3 (which I did in #467), since 1.9.3 is no longer supported.\nA quick check seems to show that Debian is shipping Ruby 2.1.5 these days, and macOS appears to be shipping Ruby 2.0.0. Without us having the data to know for sure, I imagine most users would not be impacted by the removal.\n@ethagnawl @adamstrickland Thoughts?\n. This LGTM \ud83d\udc4d . @rpassis Thanks for making those changes! This LGTM \ud83d\udc4d I just wish I knew why Code Climate is so upset, but it won't tell me \ud83e\udd14 . @rpunkfu Are you still interested in getting this merged in?. @ethagnawl Since this is a really minor change and there's some delay with getting the CHANGELOG updated, would you be alright with merging this without the change?. @frdrcv Could you tell us the output of gem --version and ruby --version?\nAlso, did you have to use sudo to install? That may be causing issues if so.\nIrrelevantly, this issue #500! \ud83c\udf89 . Hey @rglassett! Thanks for your PR! :sparkles:\nWhoa! Thanks for catching all of those! I think this PR looks great as-is. \ud83d\udc4d \nThoughts @Soliah @adamstrickland?. ## Documentation\nTo contribute to our documentation, navigate to https://github.com/tmuxinator/tmuxinator/edit/master/README.md.\nAnother way to get to that page is to click README.md from the file list on https://github.com/tmuxinator/tmuxinator, then click the pencil icon on the top-right of that page.\nCompletions\nI actually got the Tmuxinator completions added to fish some years ago. The only reason to download and use the completions from this repository are to alias mux to tmuxinator, which is a matter of personal preference.\nYour fish configuration should be living in ~/.config/fish/config.fish, which I believe is created when fish is first started. Fish will look for completion files in ~/.config/fish/completions/ first, so the documentations suggests that you create that directory (unless it already exists) and download the completions from our repository into there.\nI hope that helps!. Hey @aflavio! I'm guessing that this is a Tmux issue. What versions of Tmux are you using across your two distros (tmux -V)?. @alexkrolick You make a good point here, which I hadn't considered. The \"technical reason\" would be that Ruby 2.0.0p648 (macOS system ruby) was released on 16 December, 2015, is no longer maintained, and has unpatched security vulnerabilities such as this Ruby 2.0.0p648 arbitrary code execution bug. I pulled this from the Ruby website's Ruby 2.0.0p648 release page:\n\nRuby 2.0.0 is now under the state of the security maintenance phase, until Feb. 24th, 2016. After that date, maintenance of Ruby 2.0.0 will be ended.\n\nAs you can read above, security maintenance ended a year and a half ago.\nAll this said, ideally I would like to distribute tmuxinator with a packaged Ruby via Homebrew, Snap, and Flatpak and stop worrying about all these Rubygems and Ruby version issues. I've opened a relevant issue: #563. @adamstrickland FWIW: Yes, I think we should merge this :+1: and should do so regularly. No, I don't think we should support rubies that the ruby maintainers have decided to no longer support. I hope, for security reasons, mostly, that no one is using an unsupported ruby. Besides, one can install a supported ruby and tmuxinator with it while using an unsupported ruby for work, etc.. That's what you think. This variable can actually be accessed from within the YAML configs!\nI'm arguing with a robot CI dog\n. I added name && to make sure nil wouldn't get through. Good catch!\n. You are 100% right.\n. I'm a bit confused as to why there's a ! here.\nThe way I read it, if the session exists, session.match(\"^#{name}:\") should return a match. noting a match would return false, which is returned from the method. Shouldn't the method return true if the session exists?\nIf you were trying to make a boolean from the match object, you can do !!. For example:\nruby\n!! \"foo\" #=> true\n. I think you meant \"Unreleased\" \ud83d\ude04 \n. Is there a situation in which there would be multiple elements in this Hash? As in, might the hash contain something like this?\nruby\n{ \"one\" => [\"cd tmp\", \"vim\"], \"two\" => [\"cd log\", \"tail -f development.log\"] }\nIf so, I think the easy fix is just changing this line to pane_yml.values\n. Alright, now that I've read that issue and understand the premise a little bit more, I think your approach here with using first is right. I'm going to pull this down and play with it a little just to make sure, then I'll come back and give it a :+1:\n. Makes sense to me! :+1:\n. Good thought --- I'll add that.\n. For consistency with the rest of the project, there should be no space after exists?.\n. Again, for consistency, there should be an empty line above this one (in between end and it).\n. The one-liner syntax that RuboCop adores would have this method look like the following, since it generally sides against having methods be only an if/else statement:\nruby\n      def default(filename) \n        return \"#{ENV['HOME']}/.tmuxinator/#{filename}.yml\" if exists?(filename)\n        sample\n      end\nAt least by default, that is. We may have customized RuboCop.\n. This change looks good! My only commentary is to just say \"custom name provided\" instead of \"custom name name provided\".\n. While this isn't really relevant to this PR, per se, it turns out that this line is actually unnecessary.\n. Hey there! I'm loving this pull request. My only comment is whether this particular line, adding activesupport as a dependency (granted, only a development dependency) is actually needed.\nI'll do a bit of digging to see whether it's needed, and will get back to you.\nReference: #432, #458\nFixes #459 \n. From my testing, it looks like it's not needed. Would you mind removing it?\nAlso, please throw a comment about your changes in the CHANGELOG.md file. Thanks!\n. I somehow missed this in my first pass -- is there a reason RuboCop wasn't moved to the gemspec?\n. Seeing as factory-girl relies on activesupport anyhow, I suppose we'll leave that as-is. Thanks for looking into it and updating the CHANGELOG!\n. Would you mind making this another sentence? I'd be fine with changing the comma to a period, or, in the style of the other comments, \"Aliased to s.\". Since this will be the third time this logic is used in this file, we should probably break it out into a private method and throw it at the bottom of the class somewhere.. I just noticed that there are several conditional branches in this method. While multiple commands don't make sense for rbenv or rvm, would you mind also adding a call to parsed_parameters here with yaml[\"pre_tab\"]?. ",
    "podung": "I'd love to see this feature get in as well.\n. Thanks @jessegonzalez for your contributions.  @fabianschwarzfritz got this up to date and we got it committed.  See #423 \n. If anyone is interested in an unnamed window option, check out https://github.com/tmuxinator/tmuxinator/issues/292.\n. The issue is whether multiple commands for a pane should be specified as an array or as a hash.  Here is the parsed yaml for the first example (note the first element is an array):\nruby\n[[\"cd tmp\", \"vim testfile\"], \"guard\"]\nAnd here is the parsed yaml from the second example (note the first element is a hash):\nruby\n[{ dumb: [\"cd tmp\", \"vim testfile\"] }, \"guard\"]\nCurrently, the code expects multiple pane commands to be given in a hash form.  The relevant snippet is from lib/tmuxinator/window.rb:\nruby\n  def build_panes(panes_yml)\n    Array(panes_yml).map.with_index do |pane_yml, index|\n      if pane_yml.is_a?(Hash)\n        pane_yml.map do |name, commands|\n          Tmuxinator::Pane.new(index, project, self, *commands)\n        end\n      else\n        Tmuxinator::Pane.new(index, project, self, pane_yml)\n      end\n    end.flatten\n  end\nI think we should accept an array or a hash so that we can support the first form as well.  As long as @Soliah  doesn't disagree I can put together a pr.\n. @jwgoh Were you able to try out the suggestion?  Any luck?\n. +1.  Completely agree.\n. As a workaround, try this:\nname: default\nroot: ~/\nwindows:\n  - main:\n    - tmux set-window-option -t1 automatic-rename on\n    - clear\nSee the discussion around:  https://github.com/tmuxinator/tmuxinator/issues/174\n. It looks like commit 16d6c6020cd169a7e4467683d0c9f3c3ad1afc12 on PR #311 fixes all the extra unnecessary calls to send-keys that look like this:\nbash\ntmux send-keys -t wat:0.1 '' C-m   # unnecessary call\ntmux send-keys -t wat:0.1 guard C-m\nI think this issue can be closed.\n. @Soliah I'll def consider it.  To be honest, I'm not sure what all that entails.\nFor now, I'll help crank through some of the existing issues.  Also, I'd like to discuss getting the tmux template and wemux templates merged into one so we don't have to maintain two nearly identical templates.  I'll start a separate issue for that.\n. Exactly.  Or doing it just down on the next line with name.to_s.shellescape.  @ethagnawl are you wanting to put together a pr?\n. This should be fixed by #375.  Please re-open if it still persists after upgrading to 0.7.2.\n. Can you give a little more info?  I'll try to replicate on my end but I'm not sure exactly what you're trying to accomplish.\n. Glad it's working for you now.\n. Wow, Hound is really noisy.\nSome of the line length violations seem unreasonable to me, but I'm happy to address the remaining ones if you would prefer them to be fixed.\n. Thanks for this.  See my comment on the fixture file, but otherwise I'm ready to merge it.\n. Looks great.  I'll merge once ci finishes up.  Thanks again.\n. Looks good to me.  Thanks\n. I'll take a look at this pr this weekend.\n. Thanks for this.\n. Thanks @Fedalto.  This seems consistent with the instructions for running tmate daemonized on their website (http://tmate.io):\n\nYou can run tmate detached, and retrieve the SSH connection strings as follow:\ntmate -S /tmp/tmate.sock new-session -d               # Launch tmate in a detached state\ntmate -S /tmp/tmate.sock wait tmate-ready             # Blocks until the SSH connection is established\ntmate -S /tmp/tmate.sock display -p '#{tmate_ssh}'    # Prints the SSH connection string\ntmate -S /tmp/tmate.sock display -p '#{tmate_ssh_ro}' # Prints the read-only SSH connection string\nNote that it is important to specify a socket (e.g. /tmp/dev.sock) as tmate uses a random socket name by default\n. Most of the issues listed above sound like yaml formatting/parsing issues.  If anyone is still having the issue, it would help to see the mux yaml file you're trying to run.  We'll close this soon if we don't get any quick  responses and anyone should feel free to submit a new issue if you think you're experiencing something similar. We'll gladly help out if so\n. I'm trying to recreate the issue using @jusw85 example yamls above.  \n\n@J3RN were you able to get tmuxinator to blow up in the same way?  My comment on #428 goes more into my confusion from a code perspective.\n. @cwhits @madAndroid @jusw85 \nCan you all report what version of tmuxinator you were using when you got this error?\n. Can you post your entire yaml config file, properly formatted in a code block?\n. Hmm.  This doesn't appear to be the whole file.  Is it?  You also need a name node and a windows node.  When I do the following it seems to work.\nname: irssi\nwindows:\n  - irssi:\n      layout: dcf4,146x32,0,0{123x32,0,0,22x32,124,0}\n      panes:\n        - irssi\n        - cat .irssi/nicklistfifo\n  - jackline: jackline\n  - TaskWarrior: tasksh\n  - Jrnl: #empty\n  - TERM: #\n  - TERM2: #\nAll the commands actually just throw exceptions on the command line because I don't have these files/applications, but it appears it should work fine.\nAre you including a name/windows node?  If so, can you describe more specifically how the problem is manifesting itself?\n. I believe this should be fixed by #375.  @rightaway if upgrading to 0.7.2 doesn't fix your issue please re-open. \n. We don't really have a great strategy for writing tests around the template.  I think two valid approaches are:\n1) shove the contents of that line into a method on Project, where it can be spec'd there.  Then just invoke it in the template for now without spec'ing it there.\n2) Do a spec at the project level calling #render and assert that it contains the one line you expect.\nAny other ideas?  I think one of these would suffice for now.\n. If this is still an issue for you, can you provide a sample yaml?  I can't recreate your issue.  Perhaps I'm misunderstanding it.\n. +1\n. For anyone interested, the source of this bug is the pane_yml hash gets mapped and a new Pane is created for each entry.  The problem is the same index is passed to each of these objects:\n``` ruby\nwindow.rb\ndef build_panes(panes_yml)\n  Array(panes_yml).map.with_index do |pane_yml, index|\n    if pane_yml.is_a?(Hash)\n      pane_yml.map do |_name, commands|\n        Tmuxinator::Pane.new(index, project, self, *commands)\n      end\n    else\n      Tmuxinator::Pane.new(index, project, self, pane_yml)\n    end\n  end.flatten\nend\n```\nIn the sample case above this creates 2 Pane objects each with an index of 0.  When the template.erb outputs the pane commands all of the commands target get run against pane 0.  \nAdditionally this breaks the logic for determining pane.last?, resulting in 1 pane that runs all the commands and two additional empty panes.\n. I guess each hash element could also be interpreted as a command to run in the pane.  But its kind of weird to name your commands with hash keys.  I'd still lean towards one of the options above.\n. Closed by #418 \n. \ud83d\udc4d \n. Cool. I can fix the misspelling tonight\n. Looks good.\n. This looks great.  Thanks @fabianschwarzfritz \nOther than the minor typo in the spec it block, my only ask is if you could add the same logic to the wemux_template.erb.  Its on my wish list to get these templates as identical as possible and then abstract out everything that is common.\n. Thanks so much @fabianschwarzfritz.  This is great!\n. Exactly what I was thinking.  It almost feels like the example from chapter 1 of Fowlers Refactoring.  Form template method could work like Fowler used, but erb partials seems like a perfect solution.\nSent from my iPhone\n\nOn Jun 3, 2016, at 8:25 AM, Jonathan Arnett notifications@github.com wrote:\nI absolutely agree. Since it's ERB, could we use partials for common features?\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. How about an opt-out instead?\n\nI'm concerned about how many users would go out of their way to opt-in and question the value if we only get data from a small fraction of our user base.\nAn obvious, informative post-install message and frictionless opt-out seems like a reasonable approach (something like mux optout).  \nI bounced the idea around with some coworkers (all tmuxinator users) and they all thought opt-out is totally reasonable if the messaging is clear.\nThoughts?  Would this be perceived as too obtrusive or invasive?\n. @Soliah Yeah I agree that looks nice.  Sounds good to me.  Just wanted to make sure we at least discussed the options.\n. I'll finish looking this over in the morning. Just want to play with some yaml files before giving it a thumbs up\n. I'm finally looking at this now.  Will merge after I'm done.\n. @J3RN I can't recreate the issue people have been complaining about.\nIn looking at the code, I think that the template iterates over the panes collection if they exist and only if they do not iterates over the commands collection.\n<% unless window.panes? %>\n      ... \n      <% window.commands.each do |command| %>\n  <%= command %>\n      <% end %>\n    <% else %>\n      <% window.panes.each do |pane| %>\n      ...\n      <% end %>\n   <% end %>\nSo even if @commands is not initialized, I don't see how that would cause it to blow up.  Have you been able to recreate the issue?  I just want to fully grok the issue so we can be sure to fix it for all involved.\n. Ok cool.  I can recreate now.\nLooking through the code the duplication in dealing with commands in Tmuxinator::Window and Tmuxinator::Pane jumped out at me:\n``` ruby\nTmuxinator::Window\ndef tmux_pre_window_command\n  return unless project.pre_window\n\"#{project.tmux} send-keys -t #{tmux_window_target} #{project.pre_window.shellescape} C-m\"\nend\nTmuxinator::Pane\ndef tmux_pre_window_command\n  return unless project.pre_window\n\"#{project.tmux} send-keys -t #{tmux_window_and_pane_target} #{project.pre_window.shellescape} C-m\"\nend\n```\nAlso, both have to know about command(s) to be run in the pane/window.  The duplication is really obvious when you look at lib/assets/template.erb:\n``` ruby\nWindow \"<%= window.name %>\"\nunless window.panes?\n  if window.project.pre_window\n    window.tmux_pre_window_command\n  end\n  window.commands.each do |command|\n    command\n  end\nelse\n  window.panes.each do |pane|\n    if pane.project.pre_window\n      pane.tmux_pre_window_command\n    end\n    pane.commands.each do |command|\n      pane.tmux_main_command(command)\n    end\n  end\nend\n```\nWe shouldn't have the concept of a window without any panes.  In that case, we should just create a backing pane object and pass any window commands down to it.\nYour fix works for the issue at hand though and it looks good to me.  Did you want to squash still or should I go ahead and merge?\n. Confirmed on 0.7.1 also\n. @adamstrickland thoughts?\n. Would you be willing to pair this fixture down to a more bare bones tmux project file?  I think it will better isolate what your test is operating on as well as make it less likely for future changes to the parsing of the other yaml options break your test.\n. Yep.  Thanks.  I'll fix this.\n. Yeah I wrestled with the right behavior here.  If you could check out #406 and give me your thoughts.\nIf you think about the yaml structure, its not clear what exactly multiple hash elements would represent.  I gave a few options in that issue above.\n. minor: \nI believe this should read it \"should have synchronization disabled\" do\n. ",
    "jaredmcateer": "Have you had any luck with this issue? I'm also getting this error.\n. I figured out my problem... I thought my .bashrc was exporting my editor but it wasn't. Aziz' instructions right at the top of README was the solution.\n. ",
    "take": "looks like the problem is occured by rbenv, not tmuxinator. so i'll be closing this.\ntemporary solution is to add the belows option to .tmux.conf\nset-environment -gu RBENV_VERSION\nref http://stackoverflow.com/a/15021934/1446551\n. i c, but normall tmux clears them?\n. @stuarts \noooo yea i c. how did u solve the problem ? :O \nbtw im still using the temporary solution written above\n. ooo i c, thx! :+1: \n. ",
    "stuarts": "No, I'm now running into this issue as well. When tmux is started normally it does not set $RBENV_VERSION. It only happens when you start up the tmux server with a tmuxinator session.\n. OK, the problem is that rbenv is setting these environment variables in the ruby shell and tmuxinator isn't clearing those variables before it starts the tmux process.\n. They aren't set when you directly run tmux. They are only ever set because\ntmuxinator is a ruby program and it spawns tmux as a child process.\nOn Wed, Apr 3, 2013 at 7:16 PM, Takehiro Adachi notifications@github.comwrote:\n\ni c, but normall tmux clears them?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/99#issuecomment-15876561\n.\n. I just placed this in my tmuxinator config for the project.\n\npre:\n  - export RBENV_DIR=\n  - export RBENV_VERSION=\nOn Fri, Apr 5, 2013 at 7:12 AM, Takehiro Adachi notifications@github.comwrote:\n\n@stuarts https://github.com/stuarts\noooo yea i c. how did u solve the problem ? :O\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/99#issuecomment-15957835\n.\n. \n",
    "phantomwhale": "Same issue - same solution - thanks :+1: \n. ",
    "fffx": "For rvm , faced similar problem, I use this\npre_window: if [[ -f \".ruby-version\" ]] &&  [[ -f \".ruby-gemset\" ]]; then rvm use $(cat .ruby-version)@$(cat .ruby-gemset); fi.\n",
    "fweep": "I'd also like a way to send key sequences after starting commands.  What I'm specifically after is a way to have a pane launch a command and then send a <C-l> to clear the screen.  For example, when launching a rails console, I'd prefer a clean pane showing only the console prompt, not the echo of the rails console command and the startup text (similar for various other commands).\n. +1\n. It was happening because I had a socket_name in my YAML config. I'm guessing I could have specified a socket name for list-sessions and it would have worked, but I just removed socket_name. I'll close this out. Thanks!\n. ",
    "runar": "I would also like this option.\n. I need (want) to excecute commands after connecting to a remote machine. Using an array like \"ssh server && do stuff\" doesn't work for me.\nI apologize for the bump if send-keys can't do this either.\n. Nothing advanced, but something like this:\n```\nFirst pane.\nssh server1\ntmux attach\nSecond pane.\nssh server2\ncd /var/www/some/really/long/path/thats/annoying/to/type\n```\n. That would be great, thank you! :+1: \n. It works like a charm, thank you!\nThough, do you think you can make it possible to do the same in a pane and not just in a window? I guess that\u2019s a bit trickier since panes are defined by just one command, no name or anything.\nSomething like this would be absolutely perfect:\nwindow:\n  - server1:\n    - ssh server@example.com\n  - server2:\n    layout: even-horizontal\n    panes:\n      - vim\n      - pane2:\n        - ssh server@other.com\n        - cd /var/www/\n. ",
    "chuanma": "I also prefer to have it work for pane as well, as suggested by @runar. Without that, I am currently using the following hack to achieve that. Ugly but works.  Hope it helps someone while waiting for that feature. \nNotice that each hardcoded pane id can be easily derived from the yaml file structure. So it could be easy to implement this feature. (I'm no ruby dev, just started using tmux)\n``` yaml\nname: try\nroot: ~/\nwindows:\n  - editor:\n      layout: even-horizontal\n      panes:\n          # Hack: hard code session/window/panes here. need better way for tmuxinator to send keys to the remote server\n        - tmux send-keys -t try:editor.0 \"ssh root@dev\" C-M; tmux send-keys -t try:editor.0 \"cd /data/source && clear\" C-M\n        - tmux send-keys -t try:editor.1 \"ssh root@dev\" C-M; tmux send-keys -t try:editor.1 \"cd /data/logs && clear\" C-M\n```\n. @Soliah Very cool. It's working for me. Thanks! \nLove my yml file now. :)\n. I have a slightly different issue, and adding a sleep 3 in tmuxinator config file won't help. Also use tmuxinator 0.6.11 and tmux 2.0 and on OSX.\nFollowing is the output of mux debug. This is just to create a single window and run lein repl in it. It worked before, but fails to run lein repl now (I reinstalled tmux, tmuxinator). I could see the string lein repl displayed on the tmux window, but it didn't execute.\nThe temporary fix I found is to add a sleep 1 before tmux send-keys in the following script. It seems that a new tmux window cannot accept the keys quickly enough.\n``` zsh\n!/bin/zsh\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server\\; has-session -t clj 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /Users/chuanma\n# Run pre command.\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s clj -n repl\n# Create other windows.\n# add 'sleep 1' here fix the isssue\n# Window \"repl\"\n  tmux send-keys -t clj:1 lein\\ repl C-m\ntmux select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t clj\nelse\n  tmux -u switch-client -t clj\nfi\n```\n. I downgraded tmux, tmuxinator later, but couldn't fix the issue\n. ",
    "Baltazore": "Same problem repeated today...\n. I fix my tmuxinator when remove this lines from .tmux.conf\nsetw -g mode-keys vi\n set -g default-command 'reattach-to-user-namespace -l zsh'\n. ",
    "damien-roche": "Sample config with changed cd root.\n. ",
    "zachlatta": "Having the same issue. @Baltazore's solution didn't fix anything for me.\n. ",
    "bryanl": "@franciscoj do you remember what the zsh related issue was?\n. ",
    "Stocki": "The same here. I just switched to zsh and the first tab or pane won't do anything...\n. ",
    "vcrini": "creating following configurations file\nname: rufus\nroot: ~/subversion/rufus/trunk/Buongiorno-Rufus/\nwindows:\n  - editor:\n      panes:\n        - PERL5LIB=src/main/resources/perl RUFUS_ROOT=target/docroot/ vi  -c 'se\nt path=src/main/resources/perl/**' src/main/\n  - console: export PATH=$PATH:$PWD/src/main/bin\n  - logs: echo \"1\"\nand \nname: rufus\nroot: ~/subversion/rufus/trunk/Buongiorno-Rufus/\nwindows:\n  - editor:\n      panes:\n        - PERL5LIB=src/main/resources/perl RUFUS_ROOT=target/docroot/ vi  -c 'se\nt path=src/main/resources/perl/**' src/main/\n  - console: export PATH=$PATH:$PWD/src/main/bin\n  - logs: echo \"2\"\ncalled \nrufus.yml and rufus2.yml\ntmuxinator rufus works while tmuxinator rufus2 do not and outputs\n/var/lib/gems/1.9.1/gems/tmuxinator-0.6.7/lib/tmuxinator/project.rb:159: warning: Insecure world writable dir /home in PATH, mode 040777\n. Sorry forgot to specify that my version are:\ntmux 1.8\ntmuxinator 0.6.7\n. ",
    "clrunlc": "have the same issue with tmux 1.9a, tmuxinator 0.6.9\n. ",
    "davidrivers": "+1 This would be an excellent feature as it would allow me to reuse windows in layouts for different monitor sizes (e.g., my work setup with 2 large external displays vs. laptop only).\n. ",
    "clauswitt": "+1\n. ",
    "unimatrixZxero": "+1\n. Yeah!\n. +1\n. ",
    "vonpupp": "+1, this was my first idea of \"must have\" features for tmuxinator =)\n. ",
    "mjs2600": "Is this still open? I'm happy to work on this, but I'm note sure what the status is.\n. ",
    "coveralls": "\nChanges Unknown when pulling 2903c70e97c27757f6429d32757bd2a668e2f96a on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 3e29f92d165894c9471f3da83a2248cc0a6f85fb on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 92d572386e22ea4667d5b8e40f18c385d45b13bb on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 79ead205f6bb8df496c41d0fbe90900ac1b81bd1 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 196aeae2cb9a0c6837b90de2d8e422a69a1971d7 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 148fbdf5d2efcf5bd938d25e7698a9302c4e3cb3 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 120fcae6ebd83655db70c58e349c697b080b05d5 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling e969b01a8cfadb8aabb2429d1933d5c8c6e185fe on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling c464f6795d5ee687bc13b1098e6540e00415152f on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 8f7cd3c162b5a2a24ea67603e7705e15bb9115c7 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling a036b231239fa065da8cb7a20b7133dcd30bfd34 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 42abb3f53d5b21cd76756c768e0c655eba6c896e on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 2a426d47832d103b9ca47544d5de37872e3f39dc on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 3d04c003b3ac410e80c6d3815a34349d60596782 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling d78c813b282128becd6a6e20525c575bab1ec87e on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 22434ea3ad05ebe7a513408c2dbf25b4aa1ee045 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling d4d9b432c2e02f9864ba3df5b1d85b64cc962f8c on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling e80f9fae80005af82a04db2d39117365f8abded4 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling e1b7ce777313f19dd79a4f46e8a17b8c6b333873 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 0b5246dc9812c2ae5a3841294190a7fcaa0b2a15 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling bde419eba8f0d0e1092dd61c1e8b862a8cbdb7ad on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 5246c573a437b04d3a91d8b64b1588e8602dee2b on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 0caabeb4f5c5bc37278748ef4c4fca167db69e39 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 0caabeb4f5c5bc37278748ef4c4fca167db69e39 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 2567fbc83878ac37fdd21acb8ed106833140faf8 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 2567fbc83878ac37fdd21acb8ed106833140faf8 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 8c104437f6030a9cd9bda03f2167726692b97b81 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 82d010144b13dde4da3ccabae6ca7633af32a888 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling c567a949fadec5903e4da8b632f0fa96d8bbc876 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling d40cc109ecdee79a6d81cbb122f587da93925434 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 34269604b74872792c4980920fb2ba89f1f059c6 on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling e1fd373525f9509d535872a98877383bfdd27e3b on 0.6.0-wip into * on master*.\n. \nChanges Unknown when pulling 785585206fcc403f93f6d89cad478d87935acb85 on 0.6.0-wip into * on master*.\n. \nCoverage remained the same when pulling 0498ff58d4ac2abf9af6670d3a2e45325d20ab29 on rahmat-budiharso:0.6.0-wip into d40cc109ecdee79a6d81cbb122f587da93925434 on aziz:0.6.0-wip.\n. \nCoverage decreased (-0%) when pulling 9b74a520c5a65c7241af53afc7e9a3b393aa10c6 on marcosinger:fix-0.6.0 into 1000f56bce58f553733744ea6bb3bce644540a00 on aziz:master.\n. \nCoverage remained the same when pulling eb543528c77b0eb5d5079b6f910c72830555a7a8 on marcosinger:config-new-project into 1000f56bce58f553733744ea6bb3bce644540a00 on aziz:master.\n. \nCoverage remained the same when pulling 210627d9058c892259fe889e648fc9d52f27d6b6 on michaelglass:patch-1 into 1000f56bce58f553733744ea6bb3bce644540a00 on aziz:master.\n. \nCoverage increased (+0%) when pulling e45e259b17b5571c5949822208b3b508396933f1 on 0.7.0-wip into 4cb16c58c36c3928950babf761f317b925bf331f on master.\n. \nCoverage remained the same when pulling b291bfc2eb25bcf8fd0db4b6093819931db483be on 0.7.0-wip into 0165b03b5b0f665c4a08f13167d846bae52b6cd8 on master.\n. \nCoverage decreased (-0%) when pulling 7d1fee0761f321bda1811ec6792d03e22bd171b4 on doitian:remove-pry-in-file into 936e0016d89efa30cd3185d64ab0198ccba9faf1 on aziz:master.\n. \nCoverage decreased (-0%) when pulling c5d53ba3c369134693181e330b0030c8c7422a3f on doitian:pre-accepts-array into 936e0016d89efa30cd3185d64ab0198ccba9faf1 on aziz:master.\n. \nCoverage remained the same when pulling ae9a88b8a5730643f378f22f733bea2b49ad0b3a on doitian:pre-accepts-array into 936e0016d89efa30cd3185d64ab0198ccba9faf1 on aziz:master.\n. \nCoverage increased (+0%) when pulling 6f044d3bd0d6de68f04e617a0b77d5e4fcc222e0 on doitian:pre-accepts-array into ceda023e351cb6d9a3469532ffdce6baa5174b66 on aziz:master.\n. \nCoverage remained the same when pulling 0c5218ec7b74af79daef61ac96a85197e85fd726 on doitian:allow-start-tumuxinator-in-tmux-session into 936e0016d89efa30cd3185d64ab0198ccba9faf1 on aziz:master.\n. \nCoverage remained the same when pulling 86eabdf9df970b1ae6554888ceb27cd9318fa62d on antoinelyset:patch-1 into 936e0016d89efa30cd3185d64ab0198ccba9faf1 on aziz:master.\n. \nCoverage decreased (-0%) when pulling d21d0391a4a4a7bff3feddc7bc4f5c9395a766f9 on antoinelyset:patch-1 into 936e0016d89efa30cd3185d64ab0198ccba9faf1 on aziz:master.\n. \nCoverage remained the same when pulling 284b262e37b3d6961281c4b5a0131745d803e722 on doitian:new-window-in-default-directory into ceda023e351cb6d9a3469532ffdce6baa5174b66 on aziz:master.\n. \nCoverage increased (+0%) when pulling 5528057385f4b3cb7f884ef1b0b418764ce777fd on doitian:new-window-in-default-directory into ceda023e351cb6d9a3469532ffdce6baa5174b66 on aziz:master.\n. \nCoverage remained the same when pulling 252b88ba0224620537e84deb6ec823068cd85681 on doitian:new-window-in-default-directory into ceda023e351cb6d9a3469532ffdce6baa5174b66 on aziz:master.\n. \nCoverage remained the same when pulling 7d766f214fbfbbf1cc4ec5418577997a0f6a5a00 on wil:patch-1 into 8d4ddf81ced03e11bee1f3bca681ca14f3f0befa on aziz:master.\n. \nCoverage remained the same when pulling acf46feb6d371b1dd74b20d7fa827ac9f15db985 on Lordnibbler:master into 03a4dff660f978971cc12af397eaae16439b8c99 on aziz:master.\n. \nCoverage remained the same when pulling 98e9d3f7a6a485df1df351a1e73577e88ac114ed on noahhendrix:patch-1 into 290707db112fa26da1a14c11ecb3dce0e0cccf03 on aziz:master.\n. \nCoverage remained the same when pulling 4b0e5d61c1d2210a0979b19340dae80a8f9a9ffe on willrax:fix-deleting-project into ed181d469419edddad06117f9e479473e5c07e9b on aziz:master.\n. \nCoverage remained the same when pulling 59022ab294066476fe827815669b96bb7545b4b9 on johnbeynon:master into 5f5426fac8e372a95f0b2bfedcdbba088d4f08c5 on aziz:master.\n. \nCoverage remained the same when pulling 01c76ed019a8e9cc0c9258c60d21d742b4ee43b1 on potetm:bash-completion-fix into 74c93c6aba9a313215be942e2e69b6628534750f on aziz:master.\n. \nCoverage increased (+0.15%) when pulling 7c57fe54b5dbf8df7b7892bc8b40700e63ce6cb2 on DexterTheDragon:allow_command_to_be_array into e0caf4e1f003ddf5402504f327a28554f498eadb on aziz:master.\n. \nCoverage increased (+0.14%) when pulling 44743ec931ea2ec9ee2f2bf30b7713b5b59fc4f4 on DexterTheDragon:allow_command_to_be_array into e0caf4e1f003ddf5402504f327a28554f498eadb on aziz:master.\n. \nCoverage increased (+0.14%) when pulling 03fb95473fec0cfa8b0cc680796ba8e636432699 on DexterTheDragon:allow_command_to_be_array into e0caf4e1f003ddf5402504f327a28554f498eadb on aziz:master.\n. \nCoverage increased (+0.21%) when pulling 64afeb64e86055598d9d0fd9d9f36520aa893b34 on danielbayerlein:erb-support into e45e259b17b5571c5949822208b3b508396933f1 on aziz:0.7.0-wip.\n. \nCoverage remained the same when pulling 4bcdfb93ea997aa85cc3c62c058007d32d94e0c1 on danielbayerlein:erb-support into e45e259b17b5571c5949822208b3b508396933f1 on aziz:0.7.0-wip.\n. \nCoverage decreased (-0.15%) when pulling 4edaee337fc0a3e7436843689624e1f7d1761fe7 on ktaragorn:support_byobu into 0165b03b5b0f665c4a08f13167d846bae52b6cd8 on aziz:master.\n. \nCoverage remained the same when pulling 4edaee337fc0a3e7436843689624e1f7d1761fe7 on ktaragorn:support_byobu into b014bc0e52d21881949e396e288f8ec1c795c158 on aziz:master.\n. \nCoverage remained the same when pulling 5d71202fcb221d2f16a24a90b9a5656a96adb8aa on pepe:master into 0165b03b5b0f665c4a08f13167d846bae52b6cd8 on aziz:master.\n. \nCoverage increased (+0.07%) when pulling 21064f76991cc4bb79597b1374957c13a069e8df on lmars:refactor-window-build-panes-method into 77edd5087714619deacfbbdaf091e4c5c4ea7bfd on aziz:master.\n. \nCoverage remained the same when pulling 09d796a27de036d37ef65bb3eb95674d83457398 on lmars:refactor-window-build-panes-method into 77edd5087714619deacfbbdaf091e4c5c4ea7bfd on aziz:master.\n. \nCoverage remained the same when pulling 6a21c6f036e027ceb7a3071a9e44785f7d255eb0 on athal7:branching into 849bcb8a801797857d24b9fdd951f11b45497870 on aziz:master.\n. \nCoverage remained the same when pulling e9b0a7bdf2c5b0eb76ea0915edbf876e711ab8e4 on tony:travis-multitmux into 469c1239fcccb2898105a6e9d7fff06e9a979e8c on aziz:master.\n. \nCoverage remained the same when pulling ef549f3cfb8e62f0405dd360fbb0f04b741f253b on johnmcdonnell:patch-1 into 344872d8240df5801b19323626da3a07efb1fd33 on aziz:master.\n. \nCoverage increased (+0.05%) when pulling 5f944eca310d83be110f573d875edea160a42033 on fleadope:fix_defaults into d2a3be353b0fcbc9243be0c6f66a96a6d1053cb0 on aziz:master.\n. \nCoverage increased (+0.05%) when pulling 5f944eca310d83be110f573d875edea160a42033 on fleadope:fix_defaults into d2a3be353b0fcbc9243be0c6f66a96a6d1053cb0 on aziz:master.\n. \nCoverage increased (+0.12%) when pulling 3c8d90a8a40e0d4db8bd78f9950790f3740d1618 on drapergeek:jd-fix-index-issue into d2a3be353b0fcbc9243be0c6f66a96a6d1053cb0 on aziz:master.\n. \nCoverage increased (+0.09%) when pulling 6fba46de02ec5a57ed94e5294eb8589877719dd5 on drapergeek:jd-fix-index-issue into d2a3be353b0fcbc9243be0c6f66a96a6d1053cb0 on aziz:master.\n. \nCoverage remained the same when pulling 8489293e14b26b65c765de315c5049a02267ae4b on andyw8:fix_sample_config into 3c961ca647e2ab05d2e4cadd8ce0ee5676c9ce47 on aziz:master.\n. \nCoverage remained the same when pulling 09f32b21115cf11cdb817a4d606fc7fdc558720e on nathankot:fish-completion into fb1e6738e86fe318256538e9b0b6f27be916c574 on aziz:master.\n. \nCoverage remained the same when pulling 754f06de77572fb66fd03695ae1e2938a46967b9 on nathankot:fish-completion into fb1e6738e86fe318256538e9b0b6f27be916c574 on aziz:master.\n. \nCoverage decreased (-0.14%) when pulling 9b68515f7450873dc7dee82ebb7be925a31c30ab on svetlyak40wt:load-local-configs into fb1e6738e86fe318256538e9b0b6f27be916c574 on aziz:master.\n. \nCoverage remained the same when pulling 92015c6170fe9bdf04fe63ddbeadfde947477a3f on pczarn:serialize-session into b291bfc2eb25bcf8fd0db4b6093819931db483be on aziz:0.7.0-wip.\n. \nCoverage remained the same when pulling 789f373500985a232bab9584e19de3a1410da2bb on rabellamy:grammar into ea165fece140f0db5867c347ca568d0501b16047 on aziz:master.\n. \nCoverage increased (+0.3%) when pulling 340733e8b4a330c2d8a517a375e6ed8464d51b17 on pczarn:master into b1d70ff7c5051f14e08e96cac3678066436a8af6 on aziz:master.\n. \nCoverage remained the same when pulling 04c0b4f8a7e4e722d767f708759dbd493e89ee57 on hgrimelid:master into 10bab874137ab9260920ef788768ec08f6f436d9 on tmuxinator:master.\n. \nCoverage decreased (-0.0%) when pulling 30c8aca6e542b821c5d3d79ce836cb7e0e82c6c4 on alal:patch-1 into f1a87bf11e058e517849b9bf06d721b8a9e5f96a on tmuxinator:master.\n. \nCoverage decreased (-0.0%) when pulling c0f4c2dd7edc00746e6d0844c7b62f45672e15ec on alal:patch-1 into f1a87bf11e058e517849b9bf06d721b8a9e5f96a on tmuxinator:master.\n. \nCoverage remained the same when pulling aa6a215b6824509a9cc8f0223843f9a38a5da004 on J3RN:patch-1 into 9f6e75490637b7fe7f5ad58311a68254cc2a021e on tmuxinator:master.\n. \nCoverage decreased (-0.0%) when pulling 6104328836e4b57d9128d5525b703ddc2079f5a6 on TSFoster:master into f6211a0becbb63ad0ac790d96b0494fd24032439 on tmuxinator:master.\n. \nCoverage remained the same when pulling edc23c4b4ce68ab5b678792a1fb038b209ed5b09 on ohcibi:master into 7abb4ee7d47c121ea2241efdfe77522696781926 on tmuxinator:master.\n. \nCoverage remained the same when pulling 1979128da0e1da17157725de640f2d61ff9ffbef on dfournier:master into 7abb4ee7d47c121ea2241efdfe77522696781926 on tmuxinator:master.\n. \nCoverage decreased (-0.14%) when pulling 04d7fe31fa4beba5de3e7ddce41a802c3205c42e on jlipps:custom-session into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage decreased (-0.14%) when pulling 04d7fe31fa4beba5de3e7ddce41a802c3205c42e on jlipps:custom-session into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage increased (+0.04%) when pulling de291d0adb1ec63ad429c213e3929305b0d1c1d9 on jlipps:custom-session into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage increased (+0.04%) when pulling de291d0adb1ec63ad429c213e3929305b0d1c1d9 on jlipps:custom-session into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage increased (+0.04%) when pulling de291d0adb1ec63ad429c213e3929305b0d1c1d9 on jlipps:custom-session into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage decreased (-0.01%) when pulling 0109e31a2c52f72d335e43af5a98c68e199d6c6e on evverx:patch-1 into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage increased (+0.01%) when pulling 3222397d01457dbfe790b611a059b75895c5095a on edvb54:master into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage decreased (-0.43%) when pulling fba8f7b8e357ee5276dc9e2076cc8597ded33de4 on ohcibi:issue/zsh-completions into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage decreased (-0.7%) to 96.948% when pulling fba8f7b8e357ee5276dc9e2076cc8597ded33de4 on ohcibi:issue/zsh-completions into 5c2170abaee002082114c0965d7a70278398e3df on tmuxinator:master.\n. \nCoverage remained the same when pulling 960b246acb196a3905fdf4edbc681ef161ad82ed on igas:mux-fish into f9e7089e65e8ad31e61f0f8c64b0ea778e0cb634 on tmuxinator:master.\n. \nCoverage remained the same when pulling ab76375d2b4edad4d2aad9471ee552de1b9b3359 on rominf:fish-completion into f9e7089e65e8ad31e61f0f8c64b0ea778e0cb634 on tmuxinator:master.\n. \nCoverage remained the same when pulling e9f2adce611f34d49f0103a1817a16c7bb00b2e9 on rominf:fish-completion into f9e7089e65e8ad31e61f0f8c64b0ea778e0cb634 on tmuxinator:master.\n. \nCoverage remained the same when pulling 17a7164fc33e92e96faf2672889e261ab7e82ea0 on n0ts:update-readme into f9e7089e65e8ad31e61f0f8c64b0ea778e0cb634 on tmuxinator:master.\n. \nCoverage increased (+0.04%) to 97.31% when pulling 427049079d3dad83f49c9ba65fabfd045f20eec9 on kerams:startup_window into f9e7089e65e8ad31e61f0f8c64b0ea778e0cb634 on tmuxinator:master.\n. \nCoverage increased (+0.06%) to 97.36% when pulling 0793cbf1db3f0306899d58d54240b81cb1cbcffc on icereval:feature/window-root into d081b6d09a67a39c85a60171c63a21df1fe09991 on tmuxinator:master.\n. \nCoverage increased (+0.06%) to 97.36% when pulling 0793cbf1db3f0306899d58d54240b81cb1cbcffc on icereval:feature/window-root into d081b6d09a67a39c85a60171c63a21df1fe09991 on tmuxinator:master.\n. \nCoverage increased (+0.05%) to 97.36% when pulling 5bb43ca41deb3271da01a1b18ea29de833c81239 on mvaraga:master into d081b6d09a67a39c85a60171c63a21df1fe09991 on tmuxinator:master.\n. \nCoverage increased (+0.05%) to 97.36% when pulling 5bb43ca41deb3271da01a1b18ea29de833c81239 on mvaraga:master into d081b6d09a67a39c85a60171c63a21df1fe09991 on tmuxinator:master.\n. \nCoverage increased (+0.05%) to 97.36% when pulling 5bb43ca41deb3271da01a1b18ea29de833c81239 on mvaraga:master into d081b6d09a67a39c85a60171c63a21df1fe09991 on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling 1433d1a2013b004b5b6f6aae33d51a8f2f6fcf87 on froderik:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling 1433d1a2013b004b5b6f6aae33d51a8f2f6fcf87 on froderik:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling 1433d1a2013b004b5b6f6aae33d51a8f2f6fcf87 on froderik:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling 1433d1a2013b004b5b6f6aae33d51a8f2f6fcf87 on froderik:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage decreased (-0.23%) to 97.14% when pulling 01017c2487771a6d0dc81e034fa3ee7567dbdc2d on aMoniker:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage decreased (-0.23%) to 97.14% when pulling 01017c2487771a6d0dc81e034fa3ee7567dbdc2d on aMoniker:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage decreased (-0.23%) to 97.14% when pulling bca95f31ddf310e7d4b47e679bb106ac8824f0a1 on aMoniker:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage decreased (-0.23%) to 97.14% when pulling bca95f31ddf310e7d4b47e679bb106ac8824f0a1 on aMoniker:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage decreased (-0.23%) to 97.14% when pulling bca95f31ddf310e7d4b47e679bb106ac8824f0a1 on aMoniker:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage decreased (-0.23%) to 97.14% when pulling bca95f31ddf310e7d4b47e679bb106ac8824f0a1 on aMoniker:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling 61c64426cb62006be6a86a88cf698a27de343e79 on X-dark:master into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling aeec0d9f8600ec66473d6b608951790d99c1f047 on yvaucher:fix-sub-dir-config-completion into 6ad61625de4ce0f0b2257447361cece61a4334fe on tmuxinator:master.\n. \nCoverage remained the same at 97.36% when pulling 3e9f85e40f426a8585273a61cabec564be108d34 on knakayama:delete-duplicate-attribute into fd0b18222c40598eb688a3ed36bd48acacc13005 on tmuxinator:master.\n. \nChanges Unknown when pulling c0c2a608dbf53c9816b7a5a421aac9b678c1945b on underscorenygren:no-error-when-no-name into * on tmuxinator:master*.\n. \nChanges Unknown when pulling c0c2a608dbf53c9816b7a5a421aac9b678c1945b on underscorenygren:no-error-when-no-name into * on tmuxinator:master*.\n. \nChanges Unknown when pulling c0c2a608dbf53c9816b7a5a421aac9b678c1945b on underscorenygren:no-error-when-no-name into * on tmuxinator:master*.\n. \nChanges Unknown when pulling c8d3650df10f3f9cf2003bd73b48b3805fd4f259 on deivid-rodriguez:bash_completion_fixes into * on tmuxinator:master*.\n. \nChanges Unknown when pulling f5552c0e35392d35e3248a5a44179bc77a59e3c6 on cih:readme_project_with_dot into * on tmuxinator:master*.\n. \nChanges Unknown when pulling 1fd25cd2d8b8b0e5204a36995d9825a96c35ae44 on geggo98:feature/detached-session into * on tmuxinator:master*.\n. \nChanges Unknown when pulling 1fd25cd2d8b8b0e5204a36995d9825a96c35ae44 on geggo98:feature/detached-session into * on tmuxinator:master*.\n. \nChanges Unknown when pulling 1fd25cd2d8b8b0e5204a36995d9825a96c35ae44 on geggo98:feature/detached-session into * on tmuxinator:master*.\n. \nCoverage increased (+0.13%) to 97.27% when pulling 9af79bcf2cc8b63838d3fdc76ae9879e117a915e on deivid-rodriguez:misc_improvements into 3ebbf06a851d8d58ecc3215d6841e1e587552a80 on tmuxinator:master.\n. \nCoverage increased (+0.01%) to 97.14% when pulling 16d6c6020cd169a7e4467683d0c9f3c3ad1afc12 on deivid-rodriguez:misc_improvements into 3ebbf06a851d8d58ecc3215d6841e1e587552a80 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling 2681f963b11e47a8ade54a8c0df1119087636eeb on azat-archive:use-SHELL-from-env into 0d93d12ef0c57ef584ce622aac79d8f89328e1c5 on tmuxinator:master.\n. \nChanges Unknown when pulling 4d580dbbc9d41595ddf7d2bdc7c858372f5501c8 on J3RN:delete-multiple into * on tmuxinator:master*.\n. \nCoverage increased (+0.09%) to 99.532% when pulling 9dfe9c110208f8f020ddb7d533012d34ee7480ce on KevinSjoberg:bugfix/README-correction into 57ef604245d5c9add490b872fc17d8d0cb1918c9 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 2b31b2cfc45ea6e5993b3a9fb76b5bbd86fc4223 on KevinSjoberg:bugfix/README-correction into c26dd0c407a80119cb97e98466a5368b8ae07e94 on tmuxinator:master.\n. \nCoverage decreased (-0.09%) to 99.452% when pulling ec2d000e4d7241f8cdca4961e02fcd6517b4d475 on wildefyr:master into 29adcabb18ac8c928dfff43e808e6545a2278e11 on tmuxinator:master.\n. \nCoverage increased (+0.005%) to 99.457% when pulling 67a109a236a11e4856d886dcbf48b2f748b42907 on ncoop:iss387 into cb31c8edb73db0613f29c02892ac78a61b2c115d on tmuxinator:master.\n. \nCoverage increased (+0.005%) to 99.457% when pulling 26a0ac78e2b9af5070c5141311d1a0e98a5042bf on ncoop:iss387 into cb31c8edb73db0613f29c02892ac78a61b2c115d on tmuxinator:master.\n. \nCoverage increased (+0.005%) to 99.457% when pulling 2eaa78f4c63cd3c0409c97219c89a2e4197a2d64 on ncoop:iss387 into cb31c8edb73db0613f29c02892ac78a61b2c115d on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 1c3e88f500816026166e70367ada47203280cd6d on ethagnawl:contributing-copy-changes into 132d0449a5546b72a94e0d94a2042c8f6aaf3574 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 0c28d53365219463542fa3eec12c738ad9f07858 on ethagnawl:392-change-puts-to-say into 132d0449a5546b72a94e0d94a2042c8f6aaf3574 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling dd4cedda5ed9205fb6c2956bd1030473fc933c5c on ethagnawl:fix-local-project-deletion-redux into c26dd0c407a80119cb97e98466a5368b8ae07e94 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling dd4cedda5ed9205fb6c2956bd1030473fc933c5c on ethagnawl:fix-local-project-deletion-redux into c26dd0c407a80119cb97e98466a5368b8ae07e94 on tmuxinator:master.\n. \nCoverage increased (+0.005%) to 99.462% when pulling 7e45acd480823bd02a0c63bbd0f4b90fd911f0e5 on ethagnawl:fix-local-project-deletion-redux into c26dd0c407a80119cb97e98466a5368b8ae07e94 on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 4914f7714fab6140821fdea9541bd7b4f04e8d82 on ethagnawl:fix-local-project-deletion-redux into b2fc5388c1178df9127f496f5c90d8169c6c65fb on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 19927a21478795c705e35e9b0d7e2874c2a158c7 on J3RN:bash-error into e43861fc993c24dea1bfc3cfe982d3ae1d224c83 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 976df2d5f2cfd095d0859076be30e135b5212cad on J3RN:changelog-update into b782a5e87865f7e71a8f5cda1544e53c45775dc3 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling f1ec79cfdf0f60eb04bab3252545b0b13c267ca7 on J3RN:rake-test into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 40568b403f3e56d40e3ad6e02ef5bc70e21cceb1 on J3RN:rake-test into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 83f26ad07b989ab2bc4815ccef34dde300b8cb32 on cinaeco:master into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling 96b9d62e383dc4c05254d663ac67503d4313f80a on cinaeco:master into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 862239cb17346aa6bb1adf22a4c47c453628ddab on cinaeco:master into ef63c3938d715ddf646600ec136abdb078f3aa17 on tmuxinator:master.\n. \nCoverage remained the same at 99.457% when pulling dee1bd9e97417735f8a86f934ab487bde8948ed4 on Richard-Walton:has-session-check into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage decreased (-0.0005%) to 99.457% when pulling 22eb11aff469f92131294a791d18bc4900f40f78 on Richard-Walton:master into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage decreased (-0.0005%) to 99.457% when pulling d8e31ff3714285951f82e684b3c8c33491cae63f on Richard-Walton:master into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage decreased (-0.0005%) to 99.457% when pulling b003749ffa183d507fcd32153d4f5a6a58bbb03f on Richard-Walton:master into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage increased (+0.005%) to 99.462% when pulling 709cd82a1a410565561ea75582e32ad81ecae1b6 on Richard-Walton:master into 73e3fbed0cd9ae9910cc8ae9382c84346b02784b on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 3698883711eb210704040d658431d8a7fada81ff on J3RN:completions-fix into 832d7db04d60cc0af3e500916ef21f92ce0785a8 on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 0d1ffe691b4dbbb8164d4d7affd63030c830cec1 on J3RN:completions-fix into 832d7db04d60cc0af3e500916ef21f92ce0785a8 on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling e0cba52a77abad346ddd506fdc82187b7a7a1905 on J3RN:completions-fix into 832d7db04d60cc0af3e500916ef21f92ce0785a8 on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 4f0c60e33cbf208533e76624e95c0583561c570f on J3RN:completions-fix into 832d7db04d60cc0af3e500916ef21f92ce0785a8 on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 9e988862a43cb465cf34083ef16efa5d0424b30f on rmccue:patch-1 into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 412e8d6d3491c70552420fe190f10d287b1159ff on ethagnawl:config-root-refactoring into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage remained the same at 99.038% when pulling ad523cc1459369568276417bb347948e5ebf4a70 on ethagnawl:config-root-refactoring into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage remained the same at 99.462% when pulling 41347a4956f95dd697a45faa113842502589e0a1 on cwhits:help_update into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage decreased (-0.4%) to 99.038% when pulling 8750ad99ae47c23818357f910b357e23e0ae184e on cwhits:help_update into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage decreased (-0.4%) to 99.038% when pulling 2391b1884460ea3de5680627b0bd107f78932095 on cwhits:help_update into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage decreased (-0.4%) to 99.049% when pulling 92d87c60f299f09eba7b3fb691562921b52a88fb on cwhits:help_update into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage remained the same at 99.16% when pulling 7b72263c015279bf4f5aee60b82893e59235231f on cwhits:help_update into e1afbea88d8dbb8b4e871f501a553c5f486da643 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling ab57f3734b7abd273a46ef6c00c2c7c96fda1852 on cwhits:help_update into a75b33af7bf893806d7129fcd8499af73ad31390 on tmuxinator:master.\n. \nCoverage decreased (-0.4%) to 99.038% when pulling 2c5a4b36ca3c3f70e9bea5853940388d1c14dd6a on podung:266_initialize_pane_commands_with_yaml_array into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage decreased (-0.4%) to 99.038% when pulling 254298b2456248d3db8d53b129299b0c28de848a on podung:266_initialize_pane_commands_with_yaml_array into b932faac3f2a6531e5814a0a0e22412961326a92 on tmuxinator:master.\n. \nCoverage remained the same at 99.038% when pulling 16bbb4cad7416af8738dae52d0d54141477e6acd on timeemit:symlink into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.01%) to 99.049% when pulling c02c7eb337da8b21acb6dc9f1c134e0530ad75da on fabianschwarzfritz:define-startup-pane into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.01%) to 99.049% when pulling 511050653b09b7ae4fb0dfce4f94ded1a636df11 on fabianschwarzfritz:define-startup-pane into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.01%) to 99.049% when pulling 981256b638d60b908e258d1270ff3b5c8bb82eaa on fabianschwarzfritz:define-startup-pane into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.03%) to 99.069% when pulling 3ab8b98dda9611803839cb6663b3e0fd28ad31a4 on fabianschwarzfritz:synchronize-panes into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.03%) to 99.068% when pulling ab4898d448e3e4b59889863d548235415d6ffb62 on fabianschwarzfritz:synchronize-panes into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.03%) to 99.067% when pulling 5afeeb6e3ec9bd9efa3ac9709b5af0cec62a91b7 on fabianschwarzfritz:synchronize-panes into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.03%) to 99.064% when pulling 5837d3e3f4e69a7b3c7be7e38fc35929aba1cd1d on fabianschwarzfritz:synchronize-panes into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.03%) to 99.064% when pulling 474648f0ac8508e952ac3a46a26728decd3d28e0 on fabianschwarzfritz:synchronize-panes into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.03%) to 99.064% when pulling 14b1390802dbfa6f6f6f43afeda599ec935766a8 on fabianschwarzfritz:synchronize-panes into a5282d2c4511c19e2c84ca1e653eb9c6e7ed66ad on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.078% when pulling 1a94be0d968feed220d82437c6f96b3faaec9871 on fabianschwarzfritz:synchronize-panes into 81befc7d8e4c1bb50dd615d59ffe874243ca2ee4 on tmuxinator:master.\n. \nCoverage decreased (-0.2%) to 98.8% when pulling 3b9e0c2167b0d0a907898fecafa63574d187da9c on J3RN:append-to-session into e1c6aca548e8135b57fbfcefed4776e213e5908b on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.069% when pulling 8b0faf9c1dcba64da7471342fecb4ef4bcf24ecc on pczarn:serialize-session into e1c6aca548e8135b57fbfcefed4776e213e5908b on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.127% when pulling 664d58df6d3dfd45421a371572d397852f0c8e0b on pczarn:serialize-session into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage decreased (-1.3%) to 97.781% when pulling 7bc9ce357b5dde20c0d6cb25a646b6124faa6f9f on pczarn:serialize-session into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.129% when pulling 12de4a1dc8e5b595c6d0bd1037298ac150ae9c23 on pczarn:serialize-session into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage increased (+0.0008%) to 99.05% when pulling ab1377092c4ec544acf643f58a10b25bc24b62c8 on J3RN:windows-without-panes into c0b9a2c9745fc9587b20fadd65822e65e17726fd on tmuxinator:master.\n. \nCoverage increased (+0.0008%) to 99.05% when pulling ab1377092c4ec544acf643f58a10b25bc24b62c8 on J3RN:windows-without-panes into c0b9a2c9745fc9587b20fadd65822e65e17726fd on tmuxinator:master.\n. \nCoverage increased (+0.004%) to 99.053% when pulling 32847e50d442b10bbff6adf7d908828399c5fdfd on J3RN:windows-without-panes into c0b9a2c9745fc9587b20fadd65822e65e17726fd on tmuxinator:master.\n. \nCoverage increased (+0.004%) to 99.053% when pulling daf40559325f051145738803d5c83f3dad6f72a1 on J3RN:windows-without-panes into c0b9a2c9745fc9587b20fadd65822e65e17726fd on tmuxinator:master.\n. \nCoverage increased (+0.004%) to 99.053% when pulling 5a0fe0a998e6804e455765439bf2ba4346c921c5 on J3RN:windows-without-panes into c0b9a2c9745fc9587b20fadd65822e65e17726fd on tmuxinator:master.\n. \nCoverage decreased (-0.08%) to 99.078% when pulling 11f7863965dc360631e46ebba045bfdf22b7146d on ethagnawl:432-fixing-broken-build-caused-by-active-support-5 into e1afbea88d8dbb8b4e871f501a553c5f486da643 on tmuxinator:master.\n. \nCoverage decreased (-0.08%) to 99.078% when pulling 11f7863965dc360631e46ebba045bfdf22b7146d on ethagnawl:432-fixing-broken-build-caused-by-active-support-5 into e1afbea88d8dbb8b4e871f501a553c5f486da643 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 0c350f073437647869f7d5e48ff56e14a1f5eb71 on ncoop:iss401 into a75b33af7bf893806d7129fcd8499af73ad31390 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling b1b55890a7dc308afa8795c204375d3aecf47ca8 on ncoop:iss401 into a75b33af7bf893806d7129fcd8499af73ad31390 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 3d670504be9e2c7cb699a3f952f8c9494ebeff94 on ncoop:iss401 into a75b33af7bf893806d7129fcd8499af73ad31390 on tmuxinator:master.\n. \nCoverage remained the same at 99.085% when pulling 979763a0fa4a8c3988d5a23248cc03814de89143 on ncoop:iss401 into 70f7a5d0f7847d2e460ec42eb4f7773bbb3f5be9 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 5fc4947045d37b7001a44b628002bea905fe20eb on ethagnawl:hide_readme_shorthand_entry into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 5fc4947045d37b7001a44b628002bea905fe20eb on ethagnawl:hide_readme_shorthand_entry into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 7a2bcad5df5d6cf604406843f49807848caa1e7d on ethagnawl:replace_instances_of_file_exists_with_file_exist into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 7a2bcad5df5d6cf604406843f49807848caa1e7d on ethagnawl:replace_instances_of_file_exists_with_file_exist into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling c18dfe85746eadfc3146b83c20c6e1e3f86f11b1 on ethagnawl:replace_instances_of_file_exists_with_file_exist into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage increased (+0.007%) to 99.085% when pulling 6ee58d3d9a3d8786c8a4bca33e5eebf71d85da48 on ethagnawl:fix-no-server-running-message into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage increased (+0.007%) to 99.085% when pulling 29efb5de12ca2b6c9e63bced4c7c79066617c25d on ethagnawl:fix-no-server-running-message into 025f4e4a782c48f98be61d4ecda2e712542c8835 on tmuxinator:master.\n. \nCoverage remained the same at 99.078% when pulling 58bae4e2db0bc881ae48c2f65167da97febecc44 on DuncSmith:fix-sync into 9a5e35da5795dce00719d83b0abb94ce13206eeb on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.096% when pulling 943305b49ff29395f8e51bed702385a5d914b7ef on DuncSmith:fix-sync into 9a5e35da5795dce00719d83b0abb94ce13206eeb on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.109% when pulling be4e4c5451014384c75b4cb8764f3dac9a722ede on DuncSmith:fix-sync into 327a6f0e1e706fcb1789a5c111cc2fa9b4929560 on tmuxinator:master.\n. \nCoverage increased (+0.02%) to 99.109% when pulling be4e4c5451014384c75b4cb8764f3dac9a722ede on DuncSmith:fix-sync into 327a6f0e1e706fcb1789a5c111cc2fa9b4929560 on tmuxinator:master.\n. \nCoverage remained the same at 99.085% when pulling bc55c8a16f8006e40aaa9599f89eaf9b44bb338c on J3RN:mux_doc_update into 283d3ea6b5c3e741613e938461b2d475dee9c75c on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling ced48f845521e99131b20c710ed09e0931fc159d on adamstrickland:cleanup-sync-dep-msg into f65554067ee23920bd3eb0ce37212ce505b6a321 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling 717fe727e3586a71177903aff849b6f585035954 on adamstrickland:cleanup-sync-dep-msg into f65554067ee23920bd3eb0ce37212ce505b6a321 on tmuxinator:master.\n. \nCoverage increased (+0.01%) to 99.12% when pulling c0350a117562eb49539814bfc679c223fb711c41 on ethagnawl:385-introduce-tmux-validator into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage increased (+0.01%) to 99.12% when pulling 56fc2dfa4819cc417bb75aab3ac2e1ac2f0b25e9 on ethagnawl:385-introduce-tmux-validator into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage decreased (-0.2%) to 98.928% when pulling 272af1337e56d1153ca85133b49e63d54c11bb51 on athal7:fix-wemux-support into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \n\nCoverage decreased (-0.2%) to 99.012% when pulling 6cba0138d352ffc7b9b193e9601cfde6387af3ad on athal7:fix-wemux-support into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling e8c07fa4a5f3b6a195eea10f6e649351de599352 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling a38771cee4b63696db7b22765de46623bb6294a4 on jackturnbull:patch-1 into 8cdbe6e2499cd1e61ca029c1cc17cd56e0523b30 on tmuxinator:master.\n. \nCoverage increased (+0.004%) to 99.113% when pulling 449508d1b7a9d0e5aacc07274daa6589320c8ae8 on ethagnawl:introduce-noroot-fixture into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling ef2d044a0b76eb114502e7d8476d2dc8129ddc46 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling ef2d044a0b76eb114502e7d8476d2dc8129ddc46 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling ef2d044a0b76eb114502e7d8476d2dc8129ddc46 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling ef2d044a0b76eb114502e7d8476d2dc8129ddc46 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling ef2d044a0b76eb114502e7d8476d2dc8129ddc46 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling 9a7e148945832637311ddb86ad1bfab55a3eddd7 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling 9a7e148945832637311ddb86ad1bfab55a3eddd7 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage increased (+0.08%) to 99.188% when pulling 9a7e148945832637311ddb86ad1bfab55a3eddd7 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling 9a7e148945832637311ddb86ad1bfab55a3eddd7 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage remained the same at 99.109% when pulling 9a7e148945832637311ddb86ad1bfab55a3eddd7 on seanmalloy:test-more-tmux-versions into 95e2fbcef6363f8fbdaff1f9e526d47f60dc977b on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 9cb7a0f8f6c336db21aae0346168fe2a49d19795 on seanmalloy:test-more-tmux-versions into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 9cb7a0f8f6c336db21aae0346168fe2a49d19795 on seanmalloy:test-more-tmux-versions into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage decreased (-0.08%) to 99.113% when pulling 9cb7a0f8f6c336db21aae0346168fe2a49d19795 on seanmalloy:test-more-tmux-versions into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage decreased (-0.08%) to 99.113% when pulling 9cb7a0f8f6c336db21aae0346168fe2a49d19795 on seanmalloy:test-more-tmux-versions into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage decreased (-0.08%) to 99.113% when pulling 9cb7a0f8f6c336db21aae0346168fe2a49d19795 on seanmalloy:test-more-tmux-versions into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 46c4ea82b765725694dfa33aaed7812717f4ee57 on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 46c4ea82b765725694dfa33aaed7812717f4ee57 on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 63be8e66680d777a3f03783d9b01453e7396b10f on seanmalloy:test-more-tmux-versions into c26f90c2b7a1fd0b42d11a4df0bc38bc6e8ce197 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 1ea62fc481f5c7c9e978ccf373650a4317638ac5 on J3RN:remove-193 into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 1ea62fc481f5c7c9e978ccf373650a4317638ac5 on J3RN:remove-193 into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 1ea62fc481f5c7c9e978ccf373650a4317638ac5 on J3RN:remove-193 into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling f17847d68f224796d76dcbfb17651374195d73d5 on J3RN:remove-193 into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling f17847d68f224796d76dcbfb17651374195d73d5 on J3RN:remove-193 into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling f17847d68f224796d76dcbfb17651374195d73d5 on J3RN:remove-193 into db36812d6926efefa7e125ac1675389999f3169e on tmuxinator:master.\n. \nCoverage decreased (-1.3%) to 97.934% when pulling 93f58424cd59ba250c3ae263dd72a510fe930060 on HaleTom:Issues-360-462 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \nCoverage increased (+0.05%) to 99.241% when pulling eba142fbe006754389e2946033dac6d445a4f2ea on HaleTom:Issues-360-462 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \nCoverage increased (+0.05%) to 99.241% when pulling 9b5e2caa4ce04ebac06790f2834a94dd5fcad9b9 on HaleTom:Issues-360-462 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling 0c0f20ca123b0c6c272f02db46d740beae093733 on HaleTom:Issues-360-462 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \nCoverage remained the same at 99.192% when pulling 0cda72f97fe23d50134a2b26ec5a787cd8b0c3f7 on Xenopathic:fix-zsh-completion into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \nCoverage increased (+0.006%) to 99.197% when pulling 30bcc3340120c1bfaea6cdba4b81d6208a0eb03b on rpassis:bugfix/preWindowArray into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.04%) to 99.227% when pulling 4428337f5444d76af7a8810f9e0ba45e9b3c6198 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.04%) to 99.227% when pulling 63dbaad9b3615ac6204e8cf3f59701eb869513ac on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.04%) to 99.229% when pulling cbfc51095ee8631fa1035878ff0c193784db4321 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling fe7889c29d77090fbdef0252c0cd76f8f0dabbf0 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling fe7889c29d77090fbdef0252c0cd76f8f0dabbf0 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling fe7889c29d77090fbdef0252c0cd76f8f0dabbf0 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling fe7889c29d77090fbdef0252c0cd76f8f0dabbf0 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling fe7889c29d77090fbdef0252c0cd76f8f0dabbf0 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage increased (+0.05%) to 99.24% when pulling fe7889c29d77090fbdef0252c0cd76f8f0dabbf0 on endorama:add-hooks into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling 36e9883f2a00399fa7a322dd2fec8816c32db034 on rpunkfu:patch-1 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling a6cb108c05719c7e1f0db51d0e92e1a1f4d5ec9a on sachin21:bump_license_years_for_2017 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling a6cb108c05719c7e1f0db51d0e92e1a1f4d5ec9a on sachin21:bump_license_years_for_2017 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling a6cb108c05719c7e1f0db51d0e92e1a1f4d5ec9a on sachin21:bump_license_years_for_2017 into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling a326303572bd9eda7e29a651bd578108e57c3d41 on J3RN:readme-tmux-version-update into 6df10d1852ab4f427a703af4a8546a1fd4c25836 on tmuxinator:master.\n. \n\nCoverage remained the same at 99.192% when pulling e87f79fcd2a65b26ffa44c305fc85a6368e1588a on rglassett:fix-typos into 0d93d12ef0c57ef584ce622aac79d8f89328e1c5 on tmuxinator:master.\n. ",
    "iamdustan": "This is a big PR! It\u2019s great to see the continued progress on tmuxinator. Thanks @aziz and @Soliah.\nI just installed this and tried to use it with a tmuxinator project made with 0.5.0 and all windows are now having an extra initial pane open. I\u2019m getting a message can\u2019t find pane 0 since my tmux config has a starting index of 1. I\u2019m assuming this is related?\nAdditionally, I\u2019m not seeming to have any success with the rbenv option. Without looking into the source at all, how should I expect this to work? (Disclaimer: I\u2019m not an avid rubyist; I\u2019m a javascript guy in a rails world)\nhttps://gist.github.com/iamdustan/5950382 (debug gist)\n. Hmm...just saw the last task on this issue and checked the diff.\nRunning the command found here (https://github.com/aziz/tmuxinator/pull/107/files#L27R80) returns pane-base-index 1\n. Also, not sure if this was intentional or not, but the \u201cshortcut\u201d mux {project_name} startup command no longer works.\nCould not find command \"{project_name}\".\n. Hey @Soliah, sorry for the delay. I\u2019ve fallen ill these past few days. I\u2019ve updated the gist (https://gist.github.com/iamdustan/5950382#file-cheetah-yml-L1-L16) with my project file as well now.\nAlso :thumbsup: on the generic pre_tab. Doing one for every version manager would get pretty bloated.\n. Thanks @Soliah. Installed. I\u2019ll let you know if I have any issues!\n. Not sure what you\u2019re needing to investigate here, but as a note I am using iterm2 and the latest tmux 0.6.0 with no issues; though I also feel I\u2019m a pretty simple user of both tmux and tmuxinator.\n. Whoops. That comment got buried deep in my inbox.\nI done recall doing anything special for using tmux in iTerm2; so I guess I\u2019m not using native integration? I see that article is from January 2012 so it\u2019s possible that the patched version landed in iTerm2 by the time I made the switch.\n. ",
    "jucor": "I have the same problem of \"failed to start server\" when specifying a socket_path: it seems that tmuxinator uses a default socket. I would be very happy to see this pull request #107 merged, please :)\n. @emilford : temporary workaround until 0.6.0 is released, set your socket_name as follows:\nsocket_name: 'whatever -S /tmp/mysocket'\nIt actually calls tmux -L whatever -S /tmp/mysocket, and the -S overrides the -L. Dirty, but works.\n. ",
    "ElijahLynn": "I think I am getting closer to the issue. Something I have in my .bashrc or .bash_profile is causing this. I will close once I confirm it is a non-tmux related issue.\n. Interesting, it turns out that if you have a bash alias of alias .=\"cd ..\" that it will start you at root and forget your PWD with just a normal terminal. This was a bigger system issue and tmux & tmuxinator work fine now!\nI am sure there is some fundamental rule I broke with having an alias like that!\n. Cross linking solution to my edge case alias issue - http://stackoverflow.com/questions/17725107/alias-cd-causing-bash-to-start-at-root/17728783#17728783\n. alias .. still works just not alias . so I used .. for the first level up and then an extra . for each additional level. So .. goes up 1, ... goes up 2, .... goes up 3 etc.\n. Interesting, if I set set-option -g default-shell \"/bin/bash\" in .tmux.conf the first pane doesn't have the duplicate prompt but the second pane does.\n\n. Thanks, fixed in 0.6.0.pre.3!\nFor those who want to upgrade just run:\ngem install tmuxinator -v 0.6.0.pre.3 --pre\nBtw, love that there is a debug mode now, awesome stuff!\n. I just installed 0.6.8 on a new box and this issue is back. Any ideas?\n. Just noticed it is happening in Guake without Tmux. Must be something in my config settings.\n. Ahh, sorry, yeah, I did fix it but forgot how and yes I totally should have documented it here. If I think of it I will let you know. \n. I seem to remember it having nothing to do with tmuxinator, I want to say it had to do with me using . as a bash alias to navigate directories. Are you using the ., .., ... alias trick for navigating up directories?\n. Oh, that was a different issue. http://stackoverflow.com/questions/17725107/alias-cd-causing-bash-to-start-at-root/17728783#17728783\n. Ok, yeah, mine was not fixed after 0.6.8+, I just stopped using it because I couldn't figure it out and have been using vanilla tmux. Lazy, I know. At any rate, I just upgraded to 0.6.9 and ran mux debug <project and can see that it is throwing the tmux send-keys -t P7:1.1 '' C-m for me too that causes the duplicate. I am guessing that something in our system already initializes that and tmuxinator isn't aware of that possible state. Maybe it should either do a check first or we are doing something wrong. \nWhat that check is for is beyond me though.\nWorth saying that this happens on a new skeleton project too and is nothing to do with our customization of the *.yml project file.\n. My next step is to download this and step through it with a debugger, like Pry or Rubymine.\n. I updated to v0.6.6 and same issue.\n. I suspect it is an issue with PhpStorm but just not sure what it is.\nI tried doing a setsid pstorm with no success.\n. pstorm is remaining open. I could do what you suggested for an actual window which is what I was doing but for the pre: doesn't work either. \nI did try some other commands in the pre: section and they work, it seems to just be pstorm that is an issue. PhpStorm is a Java app if it makes any difference.\n. Fixed on Fish's end. Had to use set -x EDITOR vim.\n. Somehow I messed up that file by uncommenting the filename at the beginning of the file\nWorks now.\n. Thank you!\n. ",
    "sethwoodworth": "Gah! alias .. is a core part of my workflow.  I guess I need to change.\n. ",
    "gkapfham": "I recognized that this issue was closed by the individual who originally opened it.\nHowever, I have configured tmuxinator 0.6.9 on Ubuntu 14.04 and I have exactly \nthe same issue.\nAlthough I am using zsh and oh-my-zsh, I have exactly the same duplicate prompt.\nI do not notice the issue when running Guake without Tmux.\nDid you resolve this issue?\n. Thanks, I would really appreciate any feedback that you can provide. For the record, here is an example of a configuration file that I wrote:\n```\n~/.tmuxinator/jekyll.yml\nname: jekyll\nroot: ~/working/www/gkapfham/\nwindows:\n  - programs:\n      layout: 6336,144x40,0,0{72x40,0,0[72x20,0,0,29,72x19,0,21,31],71x40,73,0,30} \n      panes:\n        - rsync:\n            - cd _site\n            - ls\n        - jekyll:\n            - jekyll serve watch\n        - provide:\n            - ls\n```\nI can even see why the extra command prompt is appearing if I run the mux command in the terminal window. Here is a snippet:\n```\nWindow \"programs\"\ntmux send-keys -t jekyll:0.0 '' C-m\n  tmux send-keys -t jekyll:0.0 cd\\ _site C-m\n  tmux send-keys -t jekyll:0.0 ls C-m\n```\nIf I remove the first send-keys command then I get the behavior that I expected.  Again, any assistance would be warmly appreciated!\n. ",
    "thorerik": "I believe since tmux 1.7 it doesn't require a patched version of tmux to work.\nI'm not entirely sure what version of tmux introduced it though, but it is listed in the man page (-CC)\nhttp://www.openbsd.org/cgi-bin/man.cgi?query=tmux&sektion=1\n. It is, I've not found out how to resolve the remainder making it work.\nRegarding Travis failing, seems that Linux' which doesn't support -s(tested by a colleague on Arch), but FreeBSD does.\nUncertaint how to go about resolving this issue considering Linux and OS X differences. Might have to go about with a uname check first?\nI made this gist first while investigating diffrences between the aproaches:\nhttps://gist.github.com/thorerik/4474b2b408cb7af61c24\n. Soliah: It seems to work fine on OS X 10.10 with type:\nirb(main):005:0> Kernel.system(\"type tmux > /dev/null\")\n=> true\n. type works with linux and seems to work fine on OS X 10.10 as well, I'm not sure how to resolve the issue in #237 though when you try to launch it via tmuxinator \n. What this is trying to resolve is the return status, this is easiest to show via irb:\nthor at dhcp-108 in ~\n$ irb\nirb(main):001:0> system(\"type tmux > /dev/null\")\n=> true\nIf you run type tmux, it will return the path for tmux.\n. This should perhaps be reopened since the patch (#236) didn't fix the erubis error, only attempted to resolve the mux doctor aspect, since I'm not too familiar with erubis and how the template rendering works (yet)\n. ",
    "justin808": "I got this work a bit -- but with windows rather than tabs: http://stackoverflow.com/questions/13765639/multiple-tabs-with-tmux-tmuxinator-and-iterm2\nhttp://stackoverflow.com/questions/19747866/iterm2-to-attach-to-tmux-session-using-tabs-instead-of-windows\nAny ideas?\nThe main problem with using the standard tmux is scrolling content to see an error and having the server stopped until the content is scrolled to the bottom or return is pressed.\n. I'd agree. It's a bit of a minor pain to do that detach, etc. But at least it works!\n. (note, beg is alias for `bundle exec guard``)\nconfig file:\n```\nEasily start windows for bpos development\nFirst gem install tmuxinator and item2\n\nCopy this file here: ~/.tmuxinator/bpos.yml\nModify the paths (replace ~/j/blink with your directory)\nInvoke with\ncd \nmux bpos\nThen hit 'Ctrl-a d' to detach\nThen run 'tmux -CC attach'\nMake sure that option for iterm2 is General --> tmux --> When attaching, open unrecognized windows in Tabs\nAlso, check option \"Automatically hide the tmux client session after connecting\"\nname: bpos\npre_window: cd ~/j/blink/bpos\nroot: ~/j/blink/bpos\nwindows:\n  - zeus: zeus start\n  - spec: beg -g spec\n  - server: beg -g server\n  - worker:\n      layout: main-horizontal\n      panes:\n        - beg -g worker\n        - scheduler\n        - zip_worker:\n           - cd ~/j/blink/bpos-workers\n           - zip_worker\n```\nmux debug:\n```\n!/bin/zsh\ntmux start-server\\; has-session -t bpos 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/j/blink/bpos\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s bpos -n zeus\n# Set the default path.\n  tmux set-option -t bpos default-path \\~/j/blink/bpos 1>/dev/null\n# Create other windows.\n  tmux new-window -c \\~/j/blink/bpos -t bpos:1 -n spec\n  tmux new-window -c \\~/j/blink/bpos -t bpos:2 -n server\n  tmux new-window -c \\~/j/blink/bpos -t bpos:3 -n worker\n# Window \"zeus\"\n  tmux send-keys -t bpos:0 cd\\ \\~/j/blink/bpos C-m\n  tmux send-keys -t bpos:0 zeus\\ start C-m\n# Window \"spec\"\n  tmux send-keys -t bpos:1 cd\\ \\~/j/blink/bpos C-m\n  tmux send-keys -t bpos:1 beg\\ -g\\ spec C-m\n# Window \"server\"\n  tmux send-keys -t bpos:2 cd\\ \\~/j/blink/bpos C-m\n  tmux send-keys -t bpos:2 beg\\ -g\\ server C-m\n# Window \"worker\"\n  tmux send-keys -t bpos:3.0 cd\\ \\~/j/blink/bpos C-m\ntmux send-keys -t bpos:3.0 beg\\ -g\\ worker C-m\ntmux splitw -t bpos:3\n  tmux select-layout -t bpos:3 main-horizontal\n  tmux send-keys -t bpos:3.1 cd\\ \\~/j/blink/bpos C-m\ntmux send-keys -t bpos:3.1 scheduler C-m\ntmux splitw -t bpos:3\n  tmux select-layout -t bpos:3 main-horizontal\n  tmux send-keys -t bpos:3.2 cd\\ \\~/j/blink/bpos C-m\ntmux send-keys -t bpos:3.2 cd\\ \\~/j/blink/bpos-workers C-m\n  tmux send-keys -t bpos:3.2 zip_worker C-m\ntmux select-layout -t bpos:3 main-horizontal\ntmux select-pane -t bpos:3.0\ntmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t bpos\nelse\n  tmux -u switch-client -t bpos\nfi\n```\nmux doctor\nChecking if tmux is installed ==> Yes\nChecking if $EDITOR is set ==> Yes\nChecking if $SHELL is set ==> Yes\n. gem uninstall tmuxinator\ngem install tmuxinator -v 0.6.7.pre\n. I had to keep the \npre_window: cd ~/j/blink/bpos\nAnd it seems to work.\nWithout that, the path is my home directory.\nThanks.\n. 1.8\n. ",
    "ohcibi": "You need to detach and then do tmux -CC attach in iTerm2 (make sure you enabled the integration in iTerm2 settings).\nIt still feels weird as this minimizes the current iTerm2 window and opens a new one with a tab for each tmux window and split panes accordingly. It would be nice to just do mux project and it starts rightaway into iTerm2-tmux-integration.\n. The script @wikimatze linked works nice but it won't complete existing project.\n. @wikimatze tmuxifier? wrong project?\n. NVM. I was wrong. I had this file already loaded because zprezto contains it in its completion module. It works even for the project names, I just shouldn't source it twice.\n. One should remove the comment from the readme.md that tells to source the completion file from this repo but tell to use the one from zsh-users/zsh-completions\n. The zsh completion repo hosts completion for many common tools not just tmuxinator. I'm not the one who wrote the completion for tmuxinator, so I'd just copy it from there but I doubt that this is necessary as the completions repo is pretty common amongst zsh users. I'd rather remove that stuff from this repository here.\n. What do you mean with the completions in the zsh-completions project are out of date? They do work on recent zsh-versions. The one here in the repo is actually out of date, i.e. it does not work with recent zsh versions, so we could copy the one from the completions project.\n. I get\n\n/Users/ohcibi/.rvm/gems/ruby-2.1.5/gems/tmuxinator-0.6.10.pre/bin/tmuxinator:10:in '': undefined method 'command_hash' for #Tmuxinator::Cli:0x007faf4aa1f198 (NoMethodError)\nfrom /Users/ohcibi/.rvm/gems/ruby-2.1.5/bin/tmuxinator:23:in 'load'\nfrom /Users/ohcibi/.rvm/gems/ruby-2.1.5/bin/tmuxinator:23:in ''\nfrom /Users/ohcibi/.rvm/gems/ruby-2.1.5/bin/ruby_executable_hooks:15:in 'eval'\nfrom /Users/ohcibi/.rvm/gems/ruby-2.1.5/bin/ruby_executable_hooks:15:in ''\n\nwhen I run tmuxinator in this version. Using ruby-2.1.5\n. NVM. Had to uninstall 0.6.9 first.\n. Ok. It works. I've added a feature in the zsh-completions repo which would print all projects for simply running tmuxinator in a projects section, which I will create a separate pull request for.\nThe new completions script should be pushed to zsh-completions anyways as some other repos and libraries (e.g. prezto) rely on it.\n. I have ruby 2.2.3 and the same issue.\n. ",
    "wikimatze": "By the way, I'm using the zsh completion from this source https://gist.github.com/2242920 and it is working very fine for me.\n. Hi @ohcibi I'm using tmuxifier and it works like tmuxinator. tmuxifier load-session <Tab> and it will list all my tmuxifier projects. I have the following line in my zshrc file:\nzsh\nif which tmuxifier> /dev/null; then\n  eval \"$(tmuxifier init -)\"\n  export TMUXIFIER_LAYOUT_PATH=\"$HOME/ownCloud/dotfiles/tmuxifier_layouts\"\nfi\nI'm using tmuxifier in version 0.11.6. Maybe this can help you with your problem.\n. @ohcibi yeah it's another project, but glad you could figure out the solution of your problem on your own.\n. ",
    "kithokit": "It doesn't work on tmuxinator \nkithokit@08:10:31 testproject $ tmuxinator  -f ~/.tmux-osx.conf\nThere's no command or project '-f' in tmuxinator\n. can you give an example on that?\n2013/7/23 Christopher Chow notifications@github.com\n\nOh wait sorry, you misunderstood what you meant.\nI meant to add cli_args: as an entry into the project file not on the\ncommand line as an option.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/116#issuecomment-21385859\n.\n. Here is my config\n\nproject_name: Sails Chat rm\nproject_root: ~/testproject\ncli_args: -f ~/.tmux-osx.conf\ntabs:\n- main:\n- main2:\n- vim: vim\n- server: sails lift\n- mysql: mysql5 -uroot -ppassword sails\nit doesn't work on 0.5.0\n. test, it works on latest version now\nThanks\n. if [ \"$?\" -eq 1 ]; then\n  cd ~/\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux -f ~/.tmux.conf new-session -d -s cmd -n main\n# Set the default path.\n  tmux -f ~/.tmux.conf set-option -t cmd default-path ~/ 1>/dev/null\n# Create other windows.\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:2 -n main2\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:3 -n main3\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:4 -n main4\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:5 -n main5\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:6 -n service\n# Window \"main\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:1 rvm\\ gemset\\ use\\ global C-m\n# Window \"main2\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:2 rvm\\ gemset\\ use\\ global C-m\n# Window \"main3\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:3 rvm\\ gemset\\ use\\ global C-m\n# Window \"main4\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:4 rvm\\ gemset\\ use\\ global C-m\n# Window \"main5\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:5 rvm\\ gemset\\ use\\ global C-m\n# Window \"service\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:6.1 rvm\\ gemset\\ use\\ global C-m\ntmux -f ~/.tmux.conf splitw -t cmd:6\n  tmux -f ~/.tmux.conf send-keys -t cmd:6.1 echo\\ \\\"hello\\\" C-m\n  tmux -f ~/.tmux.conf send-keys -t cmd:6.2 rvm\\ gemset\\ use\\ global C-m\ntmux -f ~/.tmux.conf send-keys -t cmd:6.2 echo\\ \\\"hello2\\\" C-m\ntmux -f ~/.tmux.conf select-pane -t cmd:6.1\ntmux -f ~/.tmux.conf select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -f ~/.tmux.conf -u attach-session -t cmd\nelse\n  tmux -f ~/.tmux.conf -u switch-client -t cmd\nfi\nkithokit@09:46:54 trunk (master) $ \n\nmy conf\nname: cmd\nroot: ~/\npre_window: rvm gemset use global\ntmux_options: -f ~/.tmux.conf\nwindows:\n- main:\n- main2:\n- main3:\n- main4:\n- main5:\n- service:\n    layout: even-vertical\n    panes:\n      - echo \"hello\"\n      - echo \"hello2\"\n\nthe pre_window command would not trigger on service windows, pand1 and pane2\n. try the head\nif [ \"$?\" -eq 1 ]; then\n  cd ~/\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux -f ~/.tmux.conf new-session -d -s cmd -n main\n# Set the default path.\n  tmux -f ~/.tmux.conf set-option -t cmd default-path ~/ 1>/dev/null\n# Create other windows.\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:2 -n main2\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:3 -n main3\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:4 -n main4\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:5 -n main5\n  tmux -f ~/.tmux.conf new-window -c ~/ -t cmd:6 -n service\n# Window \"main\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:1 rvm\\ gemset\\ use\\ global C-m\n# Window \"main2\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:2 rvm\\ gemset\\ use\\ global C-m\n# Window \"main3\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:3 rvm\\ gemset\\ use\\ global C-m\n# Window \"main4\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:4 rvm\\ gemset\\ use\\ global C-m\n# Window \"main5\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:5 rvm\\ gemset\\ use\\ global C-m\n# Window \"service\"\n  tmux -f ~/.tmux.conf send-keys -t cmd:6.1 rvm\\ gemset\\ use\\ global C-m\ntmux -f ~/.tmux.conf splitw -t cmd:6\n  tmux -f ~/.tmux.conf send-keys -t cmd:6.1 echo\\ \\\"hello\\\" C-m\n  tmux -f ~/.tmux.conf send-keys -t cmd:6.2 rvm\\ gemset\\ use\\ global C-m\ntmux -f ~/.tmux.conf send-keys -t cmd:6.2 echo\\ \\\"hello2\\\" C-m\ntmux -f ~/.tmux.conf select-pane -t cmd:6.1\ntmux -f ~/.tmux.conf select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -f ~/.tmux.conf -u attach-session -t cmd\nelse\n  tmux -f ~/.tmux.conf -u switch-client -t cmd\nfi\nuse the head and try again, doesn't work\ni use ruby-1.9.3-p327\nCan you reproduce?\n. ",
    "michaelglass": "whoops, dup of #119\n. ",
    "hak8or": "That was quick!\nruby 2.0.0p247 (2013-06-27 revision 41674) [x86_64-linux]\ntmuxinator (0.5.0)\nI feel like a total fool for using the outdated version of tmuxinator. For\nsome reason I keep using outdated versions of software, aye!\nUpdating tmuxinator\nFetching: tmuxinator-0.6.2.gem (100%)\nsnip\nSuccessfully installed tmuxinator-0.6.2\nParsing documentation for tmuxinator-0.6.2\nInstalling ri documentation for tmuxinator-0.6.2\nInstalling darkfish documentation for tmuxinator-0.6.2\nDone installing documentation for tmuxinator after 0 seconds\nJust updated tmuxinator to 0.6.2 and sadly I still have the same issue but with\ndifferent wording.\ntmuxinator my_project\nFailed to parse config file. Please check your formatting.\nRunning tmuxinator debug my_project gives me the same issue as above. Is\nthere any other way I can debug?\nOn Sat, Jul 27, 2013 at 9:52 PM, Christopher Chow\nnotifications@github.comwrote:\n\nWhat version of Ruby, tmuxinator?\nIf you're using 0.6.x can you gist the output of mux debug?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/122#issuecomment-21675766\n.\n. Here are my results,\n\n\nhak8or@ubuntu:~/.tmuxinator$ irb\n/home/hak8or/.rvm/rubies/ruby-2.0.0-p247/bin/irb:4: warning: Insecure world writable dir /home/hak8or in PATH, mode 040757\n2.0.0-p247 :001 > require \"yaml\"\n => true\n2.0.0-p247 :002 > yaml = YAML.load(File.read(\"/Users/hak8or/.tmuxinator/test/test.yml\"))\nErrno::ENOENT: No such file or directory - /Users/hak8or/.tmuxinator/test/test.yml\n        from (irb):2:in `read'\n        from (irb):2\n        from /home/hak8or/.rvm/rubies/ruby-2.0.0-p247/bin/irb:16:in `'\n2.0.0-p247 :003 >\n\nLooks like there is no test/test.yml within .tmuxinator.\nI am running:\n\nLinux version 3.2.0-49-generic (buildd@komainu) (gcc version 4.6.3 (Ubuntu/Linaro 4.6.3-1ubuntu5) ) #75-Ubuntu SMP Tue Jun 18 17:39:32 UTC 2013\nDistributor ID: Ubuntu\nDescription:    Ubuntu 12.04.2 LTS\nRelease:        12.04\nCodename:       precise\n\nRunning the script you provided gives me a single pane and the following.\n\nhak8or@ubuntu:~$ ./temp.sh\nwindow not found: Tmuxinator:1\nwindow not found: Tmuxinator:1\nwindow not found: Tmuxinator:1\nwindow not found: Tmuxinator:1\nwindow not found: Tmuxinator:1\nwindow not found: Tmuxinator:1\nsession not found: 1\n[exited]\n\nI have already done multiple restarts, gem update, and apt-get update/upgrades to make sure I am up to date with everything.\n. Sorry for taking so long to respond!\nI installed tmux on ubuntu server using just apt-get install tmux, giving me this version.\nTmux version is 1.6-1ubuntu1\nWhich led me to believe tmuxwas indeed outdated. So after fumbling around a good bit trying to find out how to update tmux (tried to find out how to install from the saucy ppa, gave up after a half hour, cloned the git repo and installed from there but had issues getting it to \"see\" libevent, gave up after a while, downloaded the latest tarbal release, installed from there with no issues), I now have the latest tmux release! Which should be 1.8. And suprise surprise, it now works no issues what so ever!\nThank you so much for all your help and eagerness to help! And I am terribly sorry for wasting your time regarding the  PEBKAC.\nThough, it seems that either tmux or tmuxinator lacks the ability of using more than five panes? Here is an example.\n\n# ~/.tmuxinator/my_project.yml\n# you can make as many tabs as you wish...\nproject_name: Tmuxinator\nproject_root: /home/hak8or/cryptos\ntabs:\n  - main:\n      layout: 9fa4,223x75,0,0{118x75,0,0[118x52,0,0{59x52,0,0,8,58x52,60,0,13},118x22,0,53,12],104x75,119,0[104x16,119,0,1,104x15,119,17,9,104x22,119,33,2,104x19,119,56,3]}\n      panes:\n        - echo \"one pane\"\n        - echo \"two pane\"\n        - echo \"three pane\"\n        - echo \"four pane\"\n        - echo \"fifth pane\"\n        - echo \"sixth pane\"\n        - echo \"seventh pane\"\n\nShould give me http://i.imgur.com/eDoAnDr.png but instead I get http://i.imgur.com/uioW6hZ.png\n. Fantastic! It works now after updating tmuxinator to the latest release via bundle update.\nThis is probably the wrong place to ask, but just in case it isn't, how did you get the pattern on the vertical separators, the color'd sideways arrows, and highlighted text? Is that a function of your terminal, or something else?\n. ",
    "bulkan": "The last checklist item #20 is closed :smile: \n. ",
    "DrewRWx": "97 would be very useful for my lab.\n. ",
    "edgarjs": "ah never mind, my bad. I had the option base-index but was missing pane-base-index.\nThank you!\n. ",
    "krzkrzkrz": "The issue was in .tmux.conf, if set-option -g base-index 1 is set. I comment this, and it works now. Except the first tab starts with 0. Strange, this wasn't an issue before (few days ago).\nI recently reinstalled ubuntu, tmux and tmuxinator. The new version of tmux or tmuxinator may have been different. Anything of relevance changed lately?\n. With set-option -g base-index 1, set in .tmux.conf\nHere it is:\n```\n$ mux debug foobar\n!/bin/bash\ntmux -L foo start-server\\; has-session -t sample 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/Sites\n# Run pre command.\n# Create the session and the first window.\n  tmux -L foo new-session -d -s sample -n top\n# Set the default path.\n  tmux -L foo set-option -t sample default-path ~/Sites 1>/dev/null\n# Create other windows.\n  tmux -L foo new-window -t sample:1 -n editor\n# Window \"top\"\ntmux -L foo send-keys -t sample:0 top C-m\n# Window \"editor\"\ntmux -L foo send-keys -t sample:1 vim C-m\ntmux -L foo select-window -t 0\nfi\ntmux -L foo -u attach-session -t sample\n```\n. Thanks works now!\n. Same, whats the workaround?\n. @dacechavez, great that did it!\n. ",
    "rmbl": "Doesn't seem to be Ubuntu specific. I am running tmux 1.8 and tmuxinator 0.6.2 on Arch linux and I got the same problem with base-index 1.\nWould be great if this could be supported by tmuxinator. A quick check with tmux show-option -g base-index should be enough to make different base-indexes work.\nEdit: Works with pane-base-index 1. But base-index seems to be more commonly used than pane-base-index.\n. ",
    "yunfeizu": "zsh 4.3.17 (x86_64-redhat-linux-gnu)\n. I tried the latest zsh and still get problem and get same problem with bash. I'm using a old distribution  Fedora 16. \nI also tried ruby 2.0.0, ruby 1.9.3 and tmuxinator 0.6.1. How I can I debug it?\n. I found the problem. It seems that the tmux on Fedora 16 is too old. I build the latest one and it works. Thanks very much!\n. ",
    "antoinelyset": "Ok :). Is it good now ?\n. ",
    "pboehm": "This PR breaks tmuxinator with older tmux versions (1.6.-2 packaged in Debian 7) because tmux does not have a -c option in this version. This results in a situation where only one window instead of 3 is created.\n```\n[vagrant@support ~]% tmuxinator start support2 \ntmux: unknown option -- c\nusage: new-window [-adk] [-n window-name] [-t target-window] [command]\ntmux: unknown option -- c\nusage: new-window [-adk] [-n window-name] [-t target-window] [command]\nwindow not found: support2:2\nwindow not found: support2:3\n[vagrant@support ~]% dpkg -l | grep tmux\ntmux                               1.6-2                         amd64        terminal multiplexer\n```\n. ",
    "rkrdo": "I just upgraded to the latest version ( 0.6.3 ) and the problem persists.\n. ",
    "machinshin": "i did migrate from macports to homebrew, but that was like 3-4 months ago. i thought i'd cleared everything out. i'll try reinstalling ruby in rvm then\n. yup. reinstalling worked. awesome. \n. ",
    "Lordnibbler": "@Soliah thanks for the fast reply.\nDo you have any idea why, out of the box, a brand new tmuxinator project is returning the \"cant find pane\" errors?\n. https://gist.github.com/Lordnibbler/ee0739b1aec81b502df5\n. @Soliah tmux 1.8 installed with Brew\nthe first one outputs nothing\nthe second outputs base-index 1\n. @Soliah I'm thinking its related to this line in my .tmux.conf: set -g base-index 1\n. Although I do see this PR from a while back that claims to fix this? https://github.com/aziz/tmuxinator/pull/79\n@ryansch Do you also have the set -g base-index 1 setting set?\n. @Soliah I still have the same error using a brand new sample project, and set-option -g base-index 1 in my .tmux.conf.\n. @Soliah  tmux.conf: https://gist.github.com/Lordnibbler/244a454e293209d36a51\nThe test.yml echos all work as expected, but I do get this warning: DEPRECATION: The tabs option has been replaced by the windows option and will not be supported in 0.8.0.\nmux debug test output: https://gist.github.com/Lordnibbler/d7159c08cbdd02b09a19\n. @Soliah sure, so should I use tabs: in place of windows:? And is the rest of the yml syntax the same, such as being able to name the panes, select layout, etc?\n. I can't even get a simple config up and running with panes.  Can you try this on your box? I'm also confused as to your use of the - character, why is it only in some of the YAML entries?\nThis config is ripped straight from your github homepage for the project, and fails to run on my box:\nyaml\nwindows:\n  - main:\n      layout: main-vertical\n      panes:\n        - vim\n        - # empty, will just run plain bash\n        - top\n. I should also mention that this above example ^ works dandy if I remove set-option -g base-index 1 from .tmux.conf, so I don't think its a tabs vs windows issue\n. This all makes sense, thanks for the clarification.  Maybe I'll update your readme a bit to make this more clear to first-time users ^\nAdding set-window-option -g pane-base-index 1 has actually resolved the issue for me, good find!  Might want to make a note about this as well in the readme.\n. @Soliah Will do, forking now.\n. This seems related to  https://github.com/tmuxinator/tmuxinator/issues/237\n``` sh\n~ which tmux > /dev/null\nno output\n~ which -s tmux\n/usr/local/bin/tmux -> /usr/local/Cellar/tmux/1.9a/bin/tmux\n~\n```\n. on OS X 10.10 this latest change returns nothing\n``` sh\n~ type tmux > /dev/null\nno output\n```\n. ",
    "ryansch": "I'm also having this problem with the same setup: tmux 1.8 installed with Brew.\n. @Lordnibbler I sure do.\n. I'm seeing the same behavior as @sethdeckard.. ",
    "gaving": ":+1: @Lordnibbler \nset-window-option -g pane-base-index 1 sorted this issue for me.\n. ",
    "yanshiyason": "If anybody runs into this in 2017, i had to set both these options:\nset -g base-index 1\nset-window-option -g pane-base-index 1. ",
    "rglassett": "This error is caused by a bug where tmuxinator incorrectly detects base-index (instead, it uses the value of pane-base-index).\nI have two pull requests open that would resolve the issue:\n- https://github.com/tmuxinator/tmuxinator/pull/542\n- https://github.com/tmuxinator/tmuxinator/pull/543. @randre03 I believe this issue is duplicated by https://github.com/tmuxinator/tmuxinator/issues/485 and will be resolved by https://github.com/tmuxinator/tmuxinator/pull/542 and https://github.com/tmuxinator/tmuxinator/pull/543 if and when they are merged. I can update my fork if you'd like to test.. What version of tmux are you using? Tests run fine for me under tmux 2.3 on macOS Sierra.. This appears to happen when running tmuxinator from inside an existing tmux session. select-window and select-pane are sent to the existing session instead of the new one.. Maybe the way to go here is to use long identifiers for target windows/panes: $session_id:window_index.pane_index. Yup! Totally agree that actually nesting sessions is a bad idea. However, at least as of tmux 2.3 (and possibly earlier versions), starting a new session from inside tmux will not actually nest the session.\nI typically maintain one tmux session per project and it is convenient to \"break off\" a new session for the project without having to first detach from tmux.. A red-to-green test would require changing how tmux_config is mocked. Right now the private method show_tmux_options is stubbed out and left untested; the tests don't even cover the method I've changed. I'd like to mock the tmux CLI itself and stub its responses to the show-option and show-window-option commands, but I'm not sure of the best way to do that.. Nice technique, thanks!. Any other action needed from my end to move this forward?. On current master there's no issue, since pane-base-index isn't properly detected/set in tmuxinator. But if/when #542 is merged, the user's pane-base-index option, if set, will always clobber their base-index option. I'll look at the specs a little more closely and see if there's a better test case I can add.. I've added a test case that fails in master and passes here.. Anything else needed before merging?. @adamstrickland how do you feel about merging this now that it's confirmed to resolve #537?. I don't actually expect tmux to publish a version higher than 99, but Float::INFINITY might be a slightly better arbitrary value.\nIs it correct to treat master as a numeric version at all, though? Depending on how frequently the user pulls from upstream, master may be ahead of or behind any given release.. A version range check with warnings sounds reasonable to me, and it seems fine to treat master as an arbitrarily high version number in that context.. unset RBENV_VERSION; unset RBENV_DIR does not trigger any errors and seems totally innocuous. I don't see a need to remove these lines.\nUnder macOS 10.12.6 and iTerm 3.0.15, Running tmuxinator start #{project_name} gives me a terminal window with a title of tmux (the title does not get set to the output of template.erb)\n\nUnder macOS 10.12.6 and Terminal 2.7.3, I do get the behavior that @staycreativedesign describes:\n\nI don't know that I can make a meaningful patch without digging into the fine details of how each terminal emulator sets its window titles, but it doesn't seem like any changes need to be made to template.erb.. I'm not totally convinced that it is tmuxinator's job to beautify the terminal window name, but this StackOverflow post suggests you can change it like so:\necho -en \"\\033]0;New terminal title\\a\"\nNote that this applies only to window names, and that tab names might be hairier to deal with.. Two thoughts for you, @ethagnawl:\n\nWe could remove these lines from the template, add support for a global configuration, and document the fix in the README (per https://github.com/tmuxinator/tmuxinator/issues/223).\nIt seems like the RBENV issue happens because the new tmux session is a child process of the tmuxinator Ruby process (per https://github.com/tmuxinator/tmuxinator/issues/99#issuecomment-15923343). Would that problem be solved if we refactored so that bin/tmuxinator is a shell script that wraps around the existing Ruby script? Render the template to a tempfile or something and then just eval it?. @chris-fa can you post the contents of your default.yml and sample.yml if they exist?. Attempts have been made to solve this problem in #538 and #545. I think I like the approach in #545 best. I might try to pick up @adamstrickland's existing work and round it out with some of the ideas discussed in that thread.. Seems possible this is a duplicate of #552.\n\n@pachonk, can you provide a minimal .tmux.conf and project.yml to reproduce the issue?. @rightaway can you try on tmuxinator 0.10.0? I believe this is fixed in that build.. Seems reasonable. I'm not authorized to do it, so maybe @adamstrickland or @ethagnawl can do the honors?. Great! I'm thinking we can close this out, then.. @Krakob after some testing, it looks like your pre_window setting needs to be at the top level of your project.yml. The same pre_window command will run for all of your windows/panes (i.e., it's not specific to a single window).\nFrom your example, if you want to run pipenv shell for only your Workspace Editor window, you could do that like so:\nyml\nwindows:\n  - Editor:\n      layout: main-vertical\n      panes:\n        - Vim:\n          - pipenv shell && nvim .\n        - Log:\n          - pipenv shell && tail -f devlog.txt\n        - Shell:\n          - pipenv shell #zsh\nDepending on how common this use case is, I think it would be reasonable to make a feature request for pre hooks to be scoped such that they run for each pane in a window, or each window in a project.. There is another hook, called simply pre, that runs before the entire project starts. Is that maybe what you're looking for?. I agree that we should release this soon. What is your typical process? Commit to update CHANGELOG.md and then release the new tag (in this case, v0.10.1)?. It occurs to me that I should link related issues in the commit message and changelog. I'll add that when I can.. It also occurs to me that the warning should be printed for any unsupported version, not just master. I'll go back and clean that up as well.. Comments addressed. Ideally I'd like .travis.yml and the Tmuxinator code to share a single source of truth for supported tmux versions, but it's probably not critical for now.. :+1:, I think a --quiet flag makes sense.. Neat feature. Ideally I'd like to see a test assertion against the actual output format, but most of the other CLI tests don't really do this either, so the new test meets the current bar IMO.\n:+1: from me.. Is the gemspec file \"special\" enough that we should just exclude it under AllCops, instead of a handful of individual cops?. Weird that Rubocop now prefers for this to be phrased as a double negative, I'd thought !! was a well-established Ruby idiom. I'd probably rather drop the !s entirely and use the return value of =~ (first matching index or nil). Not a huge deal, though.. ",
    "safaci2000": "Thanks for this.  I had the same issue.  tmux 1.9a.\n. ",
    "TauPan": "I had a problem using the recommended option, since I specifically want zsh windows to be able to set the window name (via escape sequence), but not if I start most other commands.\nMy solution for now is to make an explicit exception for shell windows, i.e. I have\nset-window-option -g allow-rename off\nset-window-option -g automatic-rename off\nin my tmux.conf and later:\n```\nSince (automatic)-rename is off, we make an exception for shell windows:\nbind-key c new-window \\; set-window-option -q allow-rename on \\; set-window-option  -q automatic-rename on\n```\nWhich allows shell windows to set the window name.\nEDIT: What does not work, specifically, is to disallow renaming in a separate tmux config via tmux_options: -f ~/.tmux-no-rename.conf or something.. ",
    "liborw": "I second this, maybe adding optional parameter to start command.\nmux start conf_name session_name\n. ",
    "sls": "Hi,\nYes, I mentioned the version I had for clarity, not to suggest that I had the latest :)\nI don't think I want the project-root (or root) to be /. \nWhat I am saying is that in a vanilla tmux session, or a tmuxinator session where no project-root is defined at all, what you get when you split off a new pane in an existing window or when you create a new window is a shell prompt in the same directory you happened to be in. That's the behavior I want and which I lose when I have to specify a project root.\nFor example, say in window 2 I have 1 pane, in ~/projects/abc, and in window 3 I have 1 pane in ~/projects/def. Normally I can split a new pane in window 2 and the new pane will already be in ~/projects/abc, and then switch to window 3 and split off a pane and the new pane will be in ~/projects/def. When there is a project-root specified, though, all the new panes and new windows start at that directory. \nI'm accustomed to opening a new pane or window to quickly do something else my current location, and having to relocate to the directory I was working in makes that impossible. Since everything seems to work fine without a project root, I'm proposing that it be optional. I'll happily submit a patch if you are willing in principle to accept such a change.\nThanks,\nS- \nOn Aug 12, 2013, at 6:43 AM, Christopher Chow notifications@github.com wrote:\n\n0.5.0 is quite an old version now. I've released 0.6.x recently that was basically a rewrite.\nSo it looks like you want the root directory for the tmux session to be /?\nHow about this:\nname: project_name\nroot: /\nwindows:\n- editor: cd ~/dir/blah && vim\n  \u2014\n  Reply to this email directly or view it on GitHub.\n. \n",
    "jcristovao": "Hi,\nI just wanted to add I would also like to see this feature, as without it tmuxinator is of little use to me.\n@Soliah , from your comments, I did not think you quite understand the request, so I will try to clarify:\nThe intended feature is neither to have a / or a current directory as a tmuxinator project directory defined root. It is for default-path to not be defined at all.\nSo, if project_root is not defined, the behaviour should be:\n1) Use the current directory as a base point for launching, but\n2) Do not define a default-path in tmux\nI would try to implement it, but I'm afraid my Ruby skills are not up to the task.\n. ",
    "pczarn": "\nWhile working in a directory, I wish to open another pane right here so I can look at / do two things in the same context.\n\n@sls meant \"at/do\", not the root directory (probably)\nI might implement it, while I'm at it.\n. @ianks Yes, but I can make these fixes.\nedit: once I make some time for this.\n. I updated the code and added a test. I see a small problem which is adding low-level logic in Cli. Ideally parts of this code would be moved to some other files, but I'm not sure how to proceed.\n. Could you reopen? This PR was broken by the large difference in commit history.\n. Done, the new PR is #426\n. This feature only works with tmux 1.6 or higher. Version 1.5 doesn't have format patterns for list-windows, panes etc. Will it be fine if I make a new PR to drop support of 1.5?\n. I'll make it so the command is only supported and tested for tmux v >= 1.6.\n. I have a problem with Config.installed?, which runs Kernel.system(\"type tmux > /dev/null\"). It doesn't work inside specs. Config.installed? returns nil. Any idea why it fails?\n. Ok, I used a workaround. Everything is ready now. I have only two reservations. The new_project_with_session method is long, but I'm not sure how to refactor it. There are too few specs for this method, as @adamstrickland said.\n. What do you have in mind? Perhaps I should use fixtures? I don't think unit-testing every field of the generated project is a good idea.\n. ",
    "thomasboyt": ":+1: Would also like to see this.\n. ",
    "johnbeynon": "ah ok, my bad.\nSeems like folders with spaces in that were previously escaped don't need escaping anymore.\n. In fact this is still a problem.\nIn my .tmuxinator config I have\nroot: /Users/john/Google Drive/workspace/mindr/\nIf I look at the output of mux debug then it writes this:\n```\nSet the default path.\ntmux set-option -t Mindr default-path /Users/john/Google Drive/workspace/mindr/ 1>/dev/null\nCreate other windows.\ntmux new-window -c /Users/john/Google\\ Drive/workspace/mindr/ -t Mindr:2 -n tests\ntmux new-window -c /Users/john/Google\\ Drive/workspace/mindr/ -t Mindr:3 -n mailcatcher\ntmux new-window -c /Users/john/Google\\ Drive/workspace/mindr/ -t Mindr:4 -n redis\n```\nnotice that in the default-path line it doesn't escape the space in Google Drive whereas in Create other windows it does. In this case the first tab's path isn't changed whereas the other tabs are pathed correctly.\nIf I escape the space in the root definition (as I've had for previous tmuxinator installs) to be:\nroot: /Users/john/Google\\ Drive/workspace/mindr/\nthen mux debug outputs\n```\nSet the default path.\ntmux set-option -t Mindr default-path /Users/john/Google\\ Drive/workspace/mindr/ 1>/dev/null\nCreate other windows.\ntmux new-window -c /Users/john/Google\\\\ Drive/workspace/mindr/ -t Mindr:2 -n tests\ntmux new-window -c /Users/john/Google\\\\ Drive/workspace/mindr/ -t Mindr:3 -n mailcatcher\n```\nand in this scenario the first tab paths correctly whereas the others don't.\n. ",
    "flyingfoxlee": "Thank you, I should have read it carefully.\n. ",
    "DexterTheDragon": "Done.\n. ",
    "speed-of-light": "Operating system and version : ubuntu\nVersion of Ruby: 2.0.0-p247\nVersion of tmux: tmux 1.7\nVersion of tmuxinator: 0.6.5\nOutput of mux debug your_project_name:\n```\n!/usr/bin/zsh\ntmux start-server\\; has-session -t default 2>/dev/null\nif [ \"$?\" -eq 1 ]; then \n  cd ~/\nRun pre command.\nCreate the session and the first window.\nTMUX= tmux new-session -d -s default -n editor\nSet the default path.\ntmux set-option -t default default-path ~/ 1>/dev/null\nCreate other windows.\nWindow \"editor\"\ntmux send-keys -t default:0.0 man\\ tmux C-m\ntmux splitw -t default:0\n  tmux select-layout -t default:0 main-vertical\ntmux send-keys -t default:0.1 ls C-m\ntmux select-layout -t default:0 main-vertical\ntmux select-pane -t default:0.0\ntmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t default\nelse\n  tmux -u switch-client -t default \nfi\n``\n. BTW, I save the debug script, and run from my terminal, it's works fine, too.\n. My ubuntu is13.04, with  other commands I've tried likevim=> nothing happened,rails s=> failedguard` => failed\nThe failed messages hints some files could not be loaded properly.\nNo one works, seems some $PATH are missed (I guess, but the system shell echos me a right one).\n. Yes, I guessed so.\nThe configurations, might be something weird though. I'll take time to try some other configurations for my tmux.\n. ",
    "pepe": "Hello, setting pane-base-index actually helped. But I forgot to stop whole tmux server for the first time, and that is when new config is loaded.\nSorry for your time spent on this issue, it was my bad.\n. ",
    "nathankot": "I was running into a similar problem, setting both base indexes explicitly worked for me:\nconf\nset -g base-index 1\nset -g pane-base-index 1\n. +1 a lot of my projects include maintaining separate packages etc and this would be great instead of having to cd into them as a pane command!\n. :point_up: there ya go :)\n. ",
    "lurraca": "i added this to my tmux.conf and got the following:\n$ tmuxinator start shop.pr-web.rails\narranging in: main-vertical\ncan't find pane: rails:1\narranging in: main-vertical\narranging in: main-vertical\n[exited]\n. Thanks a lot. That was the issue.\n. ",
    "lmars": "@Soliah syntax updated, I'm still getting used to it :wink:\n. ",
    "chikamichi": "Hum, I searched for some keywords prior to creating the issue, but not \"can't\". Relates to #137, but the proposed fix does not work in my case. I didn't have any option for base-index in my .tmux.conf, but setting\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\ndoes not change anything.\n. ```\n[~]$ mux debug map\n!/bin/bash\ntmux -v -2 start-server\\; has-session -t MAP 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/work/af83/map\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux -v -2 new-session -d -s MAP -n mongod\n# Set the default path.\n  tmux -v -2 set-option -t MAP default-path ~/work/af83/map 1>/dev/null\n# Create other windows.\n  tmux -v -2 new-window -c \\~/work/af83/map -t MAP:2 -n redis\n  tmux -v -2 new-window -c \\~/work/af83/map -t MAP:3 -n servers\n  tmux -v -2 new-window -c \\~/work/af83/map -t MAP:4 -n MAP\n  tmux -v -2 new-window -c \\~/work/af83/map -t MAP:5 -n MAP-editor\n  tmux -v -2 new-window -c \\~/work/af83/map -t MAP:6 -n guards\n  tmux -v -2 new-window -c \\~/work/af83/map -t MAP:7 -n bash\n# Window \"mongod\"\ntmux -v -2 send-keys -t MAP:1 cd\\ \\~/opt/mongodb-linux-x86_64-2.4.1/bin\\ \\&\\&\\ ./mongod C-m\n# Window \"redis\"\ntmux -v -2 send-keys -t MAP:2 cd\\ \\~/opt/redis-2.6.12/src\\ \\&\\&\\ ./redis-server C-m\n# Window \"servers\"\ntmux -v -2 send-keys -t MAP:3.1 cd\\ MAP\\ \\&\\&\\ sleep\\ 5\\ \\&\\&\\ bundle\\ exec\\ rails\\ s C-m\ntmux -v -2 splitw -t MAP:3\n  tmux -v -2 select-layout -t MAP:3 even-vertical\ntmux -v -2 send-keys -t MAP:3.2 cd\\ MAP-editor\\ \\&\\&\\ sleep\\ 5\\ \\&\\&\\ bundle\\ exec\\ rails\\ s\\ -p\\ 3001 C-m\ntmux -v -2 select-layout -t MAP:3 even-vertical\ntmux -v -2 select-pane -t MAP:3.1\n# Window \"MAP\"\ntmux -v -2 send-keys -t MAP:4 cd\\ MAP\\ \\&\\&\\ vi C-m\n# Window \"MAP-editor\"\ntmux -v -2 send-keys -t MAP:5 cd\\ MAP-editor\\ \\&\\&\\ vi C-m\n# Window \"guards\"\ntmux -v -2 send-keys -t MAP:6.1 sleep\\ 15\\ \\&\\&\\ cd\\ MAP\\ \\&\\&\\ bundle\\ exec\\ guard C-m\ntmux -v -2 splitw -t MAP:6\n  tmux -v -2 select-layout -t MAP:6 even-vertical\ntmux -v -2 send-keys -t MAP:6.2 sleep\\ 15\\ \\&\\&\\ cd\\ MAP-editor\\ \\&\\&\\ bundle\\ exec\\ guard C-m\ntmux -v -2 select-layout -t MAP:6 even-vertical\ntmux -v -2 select-pane -t MAP:6.1\n# Window \"bash\"\ntmux -v -2 select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -v -2 -u attach-session -t MAP\nelse\n  tmux -v -2 -u switch-client -t MAP\nfi\n```\nIt seems weird that a reference to a pane (say, 3.1) is made (in send-keys) before the splitw command has run.\n. I did restart the server, double checked :) No hanging sessions.\nIt is the same issue than #155, but on top of that, I just noticed that, no matter what, the pane-base-index option is not taken into account, whether it is set on .tmux.conf (sourced) or through the CLI.\n. @Soliah I removed the base-index related options (I had none prior to debugging this) and, ensuring all sessions were properly killed, it now works as expected. If I find something useful related to pane-base-index not being taken into account, I'll let you know so that it can benefit to other users. Thank you!\n. ",
    "dianapinkberry": "I have some error, but quotes not working. Can you please help me\nMy voltron.yml \n```\n   # ~/.tmuxinator/voltron.yml\nname: voltron\n   root: ~/\nwindows:\n    - editor:\n        layout: 15a8,169x41,0,0{147x41,0,0[147x13,0,0{81x13,0,0,60,65x13,82,0,61},147x19,0,14,62,147x7,0,34{89x7,0,34,63,57x7,90,34,64}],21x41,148,0,65}\n         panes:\n           - voltron view disasm\n           - voltron view bp\n           - lldb\n           - voltron view stack\n           - voltron view bt\n           - voltron view reg\n    - server: bundle exec rails s\n    - logs: tail -f log/development.log\n```\nI run  tmuxinator start voltron,but output I get is Failed to parse config file. Please check your formatting.\n. Thank you)I changed voltron.yml. Maybe I wrong understand?(\nNow I run tmuxinator start voltron and get error Your project file should include some windows.\n```\n voltron.yml                                                                                              \n   # ~/.tmuxinator/voltron.yml\nname:voltron\n   root:~/\nwindows:\n    - madhax:\n        layout: 15a8,169x41,0,0{147x41,0,0[147x13,0,0{81x13,0,0,60,65x13,82,0,61},147x19,0,14,62,147x7,0,34{89x7,0,34,63,57x7,90,34,64}],21x41,148,0,65}\n               panes:\n                  -voltron view disarm\n                  -voltron view bp\n                  -lldb\n                  -voltron view stack\n                  -voltron view bt\n                  -voltron view reg\n    - server: bundle exec rails s\n    - logs: tail -f log/development.log\n``\n. @ethagnawl Thanks,but that's what i have. \nI changetmuxinator new voltronhttp://upload.akusherstvo.ru/image1001782.png\nAgain((Failed to parse config file. Please check your formatting.`\nhttp://upload.akusherstvo.ru/image1001784.png\nSorry for my bad English\n. @ethagnawl Yes,exactly,thank you very much. I forgot to remove the space before the panes. Now tmuxinator start voltron works,but somehow wrong. Maybe you know what is the problem?\n``\nMacBook-Pro:~ a1$ lldb\nCannot read termcap database;\nusing dumb terminal settings.\n/Library/Python/2.7/site-packages/blessed-1.14.1-py2.7.egg/blessed/terminal.py:211: UserWarning: Failed to setupterm(kind='\\xc2\\xabscreen-256color\\xc2\\xbb'): setup term: could not find terminfo database\nVoltron loaded.\nRunvoltron init` after you load a target.\nCannot read termcap database;\nusing dumb terminal settings.\nterminals database is inaccessible\nMacBook-Pro:~ a1$                                                                                                                                                \n[voltron] 1:madhax* 2:server# 3:logs#-\n```\n. ",
    "adamstrickland": "Check the syntax of your YAML file.  Just eyeballing what you posted (assuming that's verbatim), it looks like you have some leading spaces before name and root, and panes and it's children should be shifted left one space (panes should be indented 2 spaces underneath editor, left-aligning with layout.\nYAML can be very picky about spacing.  You may want to try something like http://yaml-online-parser.appspot.com/ to make sure yours is correct.\n. @ChillarAnand look at the synchronize option\n. I agree, this looks useful.  However, I'd suggest moving this to Tmuxinator::Cli#new_from_session.  Also, some tests need to be added (not sure if spec/lib/tmuxinator/cli_spec.rb was around when this code was originally written, but it is now.\n. @ianks I agree, the chance is low, whether those are \"nits\" or not.  Speaking for myself, I don't like the idea of adding technical debt (one of those \"nits\" of which you speak), when in the intervening 2 years only but one or two contributors have been so inspired as to even express interest in furthering this functionality.\nRegardless, since @DeepAnchor recently expressed such interest, perhaps they would be so inspired.  Or yourself, even, rather than leaving it to the original contributor.  But thank you for your opinion.\n. Thanks @pczarn.  Sorry this wasn't incorporated way back when :-/\n. @ianks Fair enough.  I agree, having been on the other end of a similar situation, it is both frustrating and unfair, especially well after the fact.  Which is why I responded now (my first chance) that @DeepAnchor raised the question.  That being said, the contributing guide pretty clearly states that tests are required in PRs...\nRegardless, like you said, I'm happy this looks to be working out this time.  I just got back to my computer after some time off, so I personally am backed up for a few days, but I'll take a look myself at adding a test or two when I get a chance.  Hopefully we can get this :ship:ed ASAP.\n. @aweibell can you post your non-working project file, please?. As far as I know, there is not.  Part of the difficulty with a problem like this is that both structures are valid YAML, so we couldn't rely on a simple YAML validation check (which tmuxinator does do).  We'd need something along the lines of a schema validation; perhaps JSON Schema would be good here?\n. PR Submitted: https://github.com/tmuxinator/tmuxinator/pull/335\n. @Soliah added requested mux new --local and no-arg mux to create a local project and start a local project, respectively.  Didn't see any tests to handle modifications to bin/tmuxinator; thougts on that?\nAlso, in order to decrease some commit churn I had, I have a couple of additional commits that I could queue up:\n- Hound churn:\n  - adds rubocop to Gemfile\n  - adds a .rubocop.yml that, according to Hound (aside: I don't think that assertion is completely accurate...), is used for style-copping\n- Travis churn (multi-ruby):\n  - adds tasks to Rakefile to facilitate testing locally across all rubies defined in .travis.yml\nI'd be happy to create PRs for either/both or just append the commits to this, at your discretion.\n. WRT Hound, I agree, it's pretty noisy.  I like plain ol' rubocop as you suggested.  The rubocop configuration that Hound uses by default is a contributor to that noisiness; in particular, I think the 80-character line limit in test suites is very annoying.  I'll PR what I have as a strawman to start the discussion.\n. Strawman PR for rubocop\n. Cleaned up all rubocop warnings so, yes, rubocop could now be added to travis.\n. Done\n. Unfortunately, this has sat neglected for a long time, and I think is no longer relevant...  the templates dictate using the user's shell (e.g. https://github.com/tmuxinator/tmuxinator/blob/master/lib/tmuxinator/assets/template.erb#L1), so we're ok there...  the use of the user's shell in Tmuxinator::Project#extract_tmux_config fails w/ the suggested edit.  I'm going to close this PR for now, but we can re-open if there's still an issue.. I agree w/ @kfrz, it looks permissions-related.  If you're on OSX and are using the system ruby (i.e. that which comes with the operating system), IIRC the gem directory is owned by root, so you need to install gems using sudo:  sudo gem install tmuxinator.  What is the info (owner, group, permissions) on /usr/bin?\nPerhaps there's an issue with Oh-My-Zsh (or just plain zsh)?  I don't use either.  Are there any collaborators that have first-hand zsh knowledge?\n. :+1: agreed\n. So you're saying the observed behavior is that there exists a project YAML definition, and if you run the edit command, the existing one is clobbered and replaced with one from the template, is that correct?  In this scenario, where is the project YAML definition, in ~/.tmuxinator/#{project_name).yml or in /path/to/project/.tmuxinator.yml?\n. Closing as duplicate of https://github.com/tmuxinator/tmuxinator/issues/354\n. Of the two suggestions, I think #2 is probably the better test scenario, as it most closely captures the intent: \"insure that the resulting template uses a particular syntax\".\n. I think we have 2 options here:\n- pin rubocop to 0.35.1 (the commit that broke this is in 0.36.0), or\n- upgrade the cop to the new ones and pin to 0.36.0 (to prevent similar future issues).\nAs far as I'm concerned, either is acceptable.  If I had my druthers, I'd probably prefer the former.\n. Yeah, let's do that\n. Does this fix the bug described?  FWIW, I had a few minutes the other night and was not able to conclusively reproduce the reported failure behavior within a test; I don't see in this changeset anything along those lines?\n. As for replacing Tmuxinator::Config.exists? with File.exists?...  In general I prefer to use system libraries such as File rather than custom abstractions.  However, the use of Tmuxinator::Config.exists? predates my association with the project, so there may well be reasoning for it of which I am not aware.  @aziz and/or @Soliah may have additional context.\n. @J3RN I wanted some tests for this specific failing case so that it doesn't slip in again (one of the shortcomings of using mocks, eh?), so I created some, merged your branch on top and now we've got green again.  To wrap it all together, I created a separate PR (side note: anyone know the proper git-iquette for this scenario?).  What do you think?\n. @aziz @Soliah some input on this as a solution to the bug? \n. @suy i can only speak for myself, but I'm open to the change, but in all honesty I don't know much about XDG and all that.  Some questions that would need to be addressed may be:\n- Besides conforming to standard, does this buy us anything?\n- What cost (e.g. complexity, etc.) do we pay for this?\n- How would this affect non-XDG operating systems?\nIn all honesty, while I am generally in favor of conforming to standards, I have bigger fish to fry, so I personally wasn't going to take this on (simple though it may be) in part because I don't know much about the context.  But I'm not against it either, should someone want to make a FOSS contribution.\n. I'll release the gem later today\n. @endline @KevinSjoberg 0.7.1 has been released to rubygems\n. Any ideas on why the build is failing on 1.9.3?\n. I agree, I did the same and likewise had no problem (not to mention the fact that this change is immaterial to the gem's install...).\n```\n\n```\nFrom: Kevin Sj\u00f6berg notifications@github.com\nSent: Wednesday, December 16, 2015 09:40\nSubject: Re: [tmuxinator] Minor correction in README (#364)\nTo: tmuxinator/tmuxinator tmuxinator@noreply.github.com\nCc: Adam Strickland adam.strickland@gmail.com\n@adamstrickland hmm, interesting. It should not be something related to this pull request at least. I just ran bundle install --jobs=3 --retry=3 on my machine for the master branch of tmuxinator using Ruby version ruby 1.9.3p551 and it ran just fine.   \n\u2014\nReply to this email directly or view it on GitHub.                            \n. So, when I set up my dev environment to mirror the ruby/gem/bundler setup that's indicated in the travis build log, I was able to reproduce the error.  It looks like this is due to a bug in bundler 1.7.6, which is the default bundler version used by travis (see https://github.com/travis-ci/travis-ci/issues/5239).  On my local, when I updated to the most recent version of bundler (1.11.2), everything seems good.\nI'm going to recommend we change the travis setup to use a more recent version than 1.7.6 (see https://github.com/travis-ci/travis-ci/issues/3531) as many other FOSS projects are doing.\nI have pushed a PR to address this.  We'll merge it in and then let's see if that solves the error in this branch.\n. @KevinSjoberg would you pull upstream master into your branch so we can see if that takes care of the travis failures?\n. I've been having a side-discussion with the maintainers of rubocop; they're gearing up for a sprint to v 1.0, so have warned that in the near future there are likely to be more breaking changes introduced along these lines.  As it is, I've been happy with the functionality provided by 0.34.x and now 0.35.x, and consequently don't see a need in the immediate term to stay on the bleeding edge.  Hence I'd prefer to keep rubocop pinned to 0.35.1 until it reaches version 1.x.  Thoughts?\n. I'm far from a definitive source, but IMO this functionality would be getting away from the Unix philosophy of DOTADIW.  \nIt's a little fuzzy to me without a concrete example of what you're trying to do, but on the surface it sounds like some custom scripts (perhaps co-located next to your project file, so they can easily find it) might be a better solution.\n. LGTM :+1: \n. I think @J3RN's suggestion to use Get-Command is probably the right way to go, but like him I haven't used Windows in years.  Will need someone to take this on.\nClosing due to inactivity.. Tests need to pass, of course :)\n@ethagnawl :+1: \n. Merged\n. :+1: \nany other opinions?\n. :+1: in particular re: updating CONTRIBUTING guidelines\n. +1\n. LGTM\n. :+1: \n. So shall we :shipit:?\n. So are we good to :ship: this?  LGTM\n. @Richard-Walton thanks for asking...  I would like to see some tests.  I think two tests for Project#tmux_has_session? are called for, one for the positive case, one for the negative.  Something along the lines of:\n``` ruby\n  describe \"#tmux_has_session?\" do\n    let(:reply) { \"foo: 1 window (created blah blah blah) [500x500] (detached)\\nbar: 1 window (created blah blah blah) [500x500] (detached)\" }\nbefore do\n  expect(Kernel).to receive(:system).with(\"tmux ls\"){ reply }\nend\n\nit \"should be true when 'tmux ls` has the named session\" do\n  expect(subject.tmux_has_session?(\"foo\")).to be_true\nend\n\nit \"should be false when 'tmux ls` does not have the named session\" do\n  expect(subject.tmux_has_session?(\"quux\")).not_to be_true\nend\n\nend\n```\n. Can you add a test for this in keeping with the contribution guidelines, please?\nOtherwise, I'm totally \ud83d\udc4d \n. +1 to @ethagnawl's suggestion\n. @ethagnawl it looks like @rmccue is not able to revisit this.  Do you want to take it on?\nClosing due to inactivity.\n. Duplicate of #401, which refers to a bug in Rubygems \n. :shipit: \n. +1\n. \ud83d\udc4d \n. @cwhits when you have a chance, would you pull the latest origin/master into your branch?  @ethagnawl  repaired the cause of the failed build and I just merged it in.  Should just be able to pull and push.  Once we are green, we'll merge ASAP.\n. yes, thanks @cwhits!\n\ud83d\udc4d LGTM\n. I agree I don't really like the aliased commands.  Makes the code overly complicated as well.\nIMO we should table this (#420) issue and create a new one that will streamline the set of commands, as @J3RN suggested.\n. \ud83d\udc4d  LGTM\n. yes\n. \ud83d\udc4d \n@J3RN @podung your thoughts?\nI say :shipit: \n. What do you have in mind?  Only supporting this command for >=1.6?  Dropping 1.5 support altogether?\n. OK, so I pulled this down to check things out.  It introduces a lot of complexity into Tmuxinator::Cli, which I don't particularly like (the flog score for that file goes from 200.4 to 283.8), but I'm ok with incurring the tech debt if others are (@Soliah, @ethagnawl?).  This PR notwithstanding, IMO some thought needs to go into how we can simplify Tmuxinator::Cli; moving as much non-Thor-related code out of here would be a good start.\nPersonally, I do most of my work from within a tmux session, so I did filter out one of the tests that @pczarn added when running within tmux.  I have pushed a branch with the merge commit and said tweak to https://github.com/tmuxinator/tmuxinator/compare/pczarn-serialize-session for everyone's viewing pleasure.\nI say we get this shipped and get on with our lives.  Thoughts?. @ethagnawl it's not quite a perfect match, so I'd rather punt on it and include it in the overall CLI refactoring.  Created an issue to track this and related items.. :-/\nI'd say: \n- Use Net::HTTP -> Google Analytics\n- Ask users to opt out as part of install process\n- For the time being, do not save preferences\n- Yes, we create a G Analytics account for storage of same\n- Env info (only) is fine for the first pass\nFor that last bullet point, we don't (yet) have a defined use case for capturing runtime analytics, therefore YAGNI...\n. Fwiw I personally prefer faraday to Net::HTTP, but that's a minor quibble IMO\n. Cool.  LGTM\n. \ud83d\udc1b \n. Crap...  I self-assigned this some time ago and totally flaked.  Sorry about that.  I'll take care of this ASAP.. So, do we want to \ud83d\udea2  this and then have https://github.com/tmuxinator/tmuxinator/pull/416 pull latest before merging in the PR?\n. As an aside, why are we putting this in the Dockerfile and not in the Gemfile itself?\n. Ah cool \ud83d\udc4d \n. LGTM  \ud83d\udc4d \n. I kinda prefer the tmuxinator new ${name} --local approach.\n. Agreed; we should at least be consistent.\n. \ud83d\udc4d \n. \ud83d\udc4d \n. Wow, I had no idea that this is what happened (obviously I don't personally use that option much).\nI assume that the desired output here is to have echo 'pane 1' run in - and only in - pane 1, echo 'pane 2' only run in pane 2, etc., correct?  If so, that seems to me to be the intuitive behavior of the feature in general.\nHowever, I'm a little concerned that this would break things for users that may already depend on the existing behavior.  Although we've talked about adding some analytics so we can track usage on features like that, we haven't implemented it yet, so we don't really know...  I'd like to see if we can get a sense of how others use this functionality before merging.  Thoughts?\n. @DuncSmith I started a conversation on this over in our Gitter channel, in case you'd like to chime in: https://gitter.im/tmuxinator/tmuxinator\n. IMO, yes, we should have a deprecation notice.  Also needs to be added to the changelog, etc.\n. @DuncSmith np.  thanks for the help.  \ud83d\udc4d \n. Damn, I merged too fast...  I'll PR your suggested changes @ethagnawl since I did the merge.  Now I remember why no one trusts me :-)\n. Nope.  :shipit: \n. /cc @ethagnawl \n. @ethagnawl done\n. An (unfortunately) long-neglected PR...  @J3RN, you had self-assigned this; is it ready to bring into master?  . I think the original intent (just speculating here, based on the gems enumerated) was to keep development/testing/tooling dependencies in the the Gemfile, and keep the runtime dependencies in the gemspec.  That being said, there's no reason why we couldn't move the Gemfile deps to the gemspec as #add_development_dependency line items.\n. Yeah, I agree.  1.9.3 isn't supported any longer, I don't see why we'd continue supporting it.\n. As far as I know, this isn't possible.  Tmuxinator uses ruby to send commands to the operating system; the process of sending the commands by nature executes them.  After doing a little bit of googling I found some cases where people want to do something similar within the shell itself.  According to this, it would appear that the shell doesn't support this, either.\n. I'm going to close this issue for now.  If you find additional information that requires a change to tmuxinator itself, please re-open.\n. @emayssat-ms can you take a look at https://github.com/tmuxinator/tmuxinator/issues/61? I think it covers what you're suggesting here.\n. @MansoorMajeed can you confirm that changing all tabs to spaces solves the issue?\n. The spaces/tabs thing is part of the YAML spec; although I don't feel that tmuxinator should accommodate tabs if YAML does not, perhaps we could/should implement some check for tabs and notify appropriately...\nruby\nraise ConfigFileError, \"tabs detected; uses spaces instead\" if content ~= /\\t/\n. This looks good \ud83d\udc4d \n. @ethagnawl @J3RN do you have any feedback on this for @HaleTom?  I say LGTM.\n. Hm...  we switched to using the string arrays in the descriptions pretty recently.  It sounds like those changes made behavior strange inzsh...  I'd rather not play whack-a-mole with this; @Xenopathic as a zsh user, would you be able to create a test or something that would allow us to verify results in that shell alongside bash and the others?\n. @endorama ^ it looks like there's some extra whitespace in the spec.  Annoying, I know, but valuable for the maintainers. In the future you can run the rubocop checks locally with bundle exec rake rubocop. Agree. Holding off on this until we have a better integration test scheme. Updated branch.  I agree that this falls short of what we want but maybe we merge it in to at least get the ball rolling?. Looks like this still needs some work.  Prolly should hold off for now.. @pachonk as you noted, this appears to be an issue with the local shell setup and rvm, not tmuxinator directly.  The thread referenced in the RVM error is long and not very focused, but hits on several possible causes; among them: using oh-my-zsh or other $PATH-clobbering shell setup, using a non-login shell, not sourceing $HOME/.rvm/scripts/rvm, insuring an up-to-date version of rvm...  Can you confirm that RVM works w/out a problem in a \"normal\" shell session?. So I'm going to vote that we ignore the CodeClimate issue so we can LGTM.  Thoughts?. Agree w/ @HaleTom that clicking through to CC shows completed/passed; IDK why it isn't updated here.  \nI say LGTM.  @ethagnawl @Soliah any objections?. So, I pulled these changes into my repo to find out what was going on with CC, and found that CC is (now?) using rubocop 0.46.0, which was borking my ability to run it (IDK if it's related to the weird badge situation in this branch).  I have fixed the issues in https://github.com/tmuxinator/tmuxinator/pull/522.  Will merge that in and then this PR.. @chaos234 I'm not sure what you're going for here, but it doesn't sound to me like this is an issue (i.e. a problem with tmuxinator), but one of understanding how to get it to (maybe) do what you'd like.  For something like that, I'd suggest the tmuxinator gitter room in order to ask questions and get feedback; what's here is not very understandable.\nI'm going to close this as an issue until (if/when) we figure out there is an actual problem.. I'm not sure we can control this; based on some other things I've been digging into w/ the relationship to tmux, we may be stuck with the ; syntax.  I'd certainly welcome a pull request, if you're interested.. What version of tmux are you running?  In another issue, we found that there was a change introduced in tmux 2.5 that changed some behavior; perhaps something related?. @tmuxinator/tmuxinator any thoughts on this?  While we're on the topic, do we feel there's a reason to (or not to) deprecate support for some of the older versions of tmux, as well? We currently support back to tmux 1.5, which was released 6+ years ago.. Does anyone mind if I merge this in to master?  This (i.e. updating our supported rubies) should be done regularly.  The question is, do we want to (continue to) support versions of ruby for tmuxinator that are no longer themselves supported?. @ethagnawl I chose the 3 most-recent stable versions at the time I submitted the PR.  As you noted, that has since changed; I have bumped the versions accordingly.\nIn general, I think we should simply try to stay current, bumping to the most recent stable on a regular basis, but IMO we don't need to watch it like a hawk, either.. - [ ]  refactor Tmuxinator::Cli#config_path to use Tmuxinator::Config.project\n- [ ]  remove no_commands block from Tmuxinator::Cli (perhaps to Tmuxinator::CliSupport?)\n- [ ]  externalize strings from Tmuxinator::Cli\n- [ ]  move CLI commands to action sub-classes\n- [ ]  refactor CLI to use Tmuxinator::Api class/module to contain any necessary logic; e.g. change\nruby\n  def implode\n    if yes?(\"Are you sure you want to delete all tmuxinator configs?\", :red)\n      Tmuxinator::Config.directories.each do |directory|\n        FileUtils.remove_dir(directory)\n      end\n      say \"Deleted all tmuxinator projects.\"\n    end\n  end\nto\nruby\n  def implode\n    if yes?(\"Are you sure you want to delete all tmuxinator configs?\", :red)\n      say \"Deleted all tmuxinator projects.\" if Tmuxinator::Api.implode_all\n    end\n  end. Hm.  I was not able to reproduce the visual effect you're seeing using your tmuxinator config or my tmux/vim setup.  Some questions:\n\nWhat versions of tmux/tmuxinator/vim (and anything else that might be relevant) are you using?\nDoes using tmux & vim (i.e. without tmuxinator) have the same effect?\nIs that iTerm2 or another terminal?\nAre there other notable settings in your terminal that are non-standard?. For those of you following along at home, we're tracking the updates to the documentation that @ethagnawl refers to in https://github.com/tmuxinator/tmuxinator/issues/534.. This has been tracked down to a change in behavior with respect to tmux has-session, which tmuxinator uses to detect if it should set up a new project or attach to an existing one.  I have filed an issue; will update when we have a plan.  Until then, tmuxinator does not support tmux version 2.5 or greater.. UPDATE: the bug in tmux that was causing this issue has been fixed in master and will become part of that tool's 2.6 release. Unfortunately, the fix won't be back-ported to 2.5. If you really must have tmux 2.5 and use it with tmuxinator, you can pull the 2.5 branch from Github, apply the patch in the linked issue (also here) and be on your merry way. However, I would recommend simply sticking with 2.4 and jumping to 2.6 when it is released. . @henvo can you double-check your syntax?  pretty sure the ; needs to be preceeded by a \\, e.g. (from my ~/.tmux.conf)\n\nsh\nbind-key e copy-mode \\; send-keys \"?Error\" C-m\nAlso, what versions of tmux and tmuxinator are being run?. @danshumaker were you able to get things working?  I'm a bit surprised by tmux 2.6 having issues...  I personally have noticed that if I have multiple versions of tmux on my system I have to be careful about my $PATH, as tmuxinator will only find the first.... @wanyaoqi I'm not sure this is the same problem...  The line of code that introduce the problem this issue refers to was introduced after tmux 2.4 was released.  As others have noted in the comments above, there are some tmux configuration settings that can cause something similar.\nThat said, if you think this is still tmuxinator-related, we'd be happy to help.  Feel free to start a new issue and include your tmuxinator debug output and we can take it from there.. @dkrieger Interesting...  Thanks for the snippet; I'd be interested to know if others use something similar (if you do, maybe just +1 the comment?) over time.  If so, maybe we incorporate the same into tmuxinator in a future release.. @gnapse if you are still having a problem do you mind starting a new issue for it? If it turns out to be related we\u2019ll link the two so people can find them. @episage I\u2019m not seeing where tmuxinator fits in here. Assuming you are using tmuxinator, we should start a new issue for this as yours involves tmux-cssh, which may or may not affect what\u2019s going on. If you do decide to create an issue, please include the tmuxinator debug output.  Just FYI, tho, this is the first time I personally have heard of tmux-cssh, so there\u2019s no guarantee we\u2019ll be able to get it working, but we\u2019ll see what we can figure out. . Can you also provide the output of mux debug blog and your ~/.tmux.conf, please?. I think @rglassett's suggestion to use the long identifiers is a good one.  However, nesting tmux sessions (w/ or w/out tmuxinator) is discouraged; I would be hesitant to even try to support an operation such as that, if that's the case...  @NicolasWebDev can you confirm the scenario (i.e. tmuxinator within a tmux session)?. \ud83d\udc4d \nI saw https://github.com/tmuxinator/tmuxinator/pull/544#pullrequestreview-50096981 come through...  Can we confirm that this solves @NicolasWebDev's problem?. To the best of my knowledge, tmuxinator doesn't support array values for hooks (e.g. pre_window).  I recommend using a string value instead, e.g.\nyaml\npre_window: export DIR=~/workspace. https://github.com/tmuxinator/tmuxinator/pull/482 is in master but has not yet been released.\nI can confirm that pre_window values as Arrays fail in tmuxinator 0.9.0 as reported, but this is functionality not supported by that version.\nThe master branch tmuxinator binary does support this functionality.. :+1:. Is there a spec that could be added to insure that this fixes the issue?\nFWIW, I had been looking into this as well and came to a similar conclusion; I like the simplicity of the solution.  Just want to make sure that it actually covers the problem at hand.. In other places I have mocked the calls to tmux using this:\nruby\nallow_any_instance_of(Kernel).to receive(:`).with(command).and_return(output)\nSee https://github.com/adamstrickland/tmuxinator/blob/24b0330aa325d0c7efc3bccdd4fde1e5d097cb03/spec/lib/tmuxinator/config_spec.rb#L149-L153. Is this a fix for a particular issue (I assume so...)? If so, I would expect a spec that models that specific problem; maybe the project_spec does so sufficiently, but it's not quite clear to me.... @rglassett thx for the reminder. Merged. Good point re: Float::INFINITY.  Will hold off on implementing until we decide the larger issue: is this a good plan, or should we do something else (as @rglassett states, perhaps it's not a great idea)?. Closed in favor of https://github.com/tmuxinator/tmuxinator/pull/574. :+1:. OK, a couple thoughts:\n\nJust looking at this, it's not really clear what some of the implications are...  E.g. the newly-defined Pane#commands accessor method adds printf '\\033]2;My Title\\033\\\\' to the command array without checking the extant commands already there.  Further, Pane#name is also overridden, its definition substantively changing.  There is but one test for the former and none for the latter; DAE think that we need some more edge cases covered here?\nOnce we've decided what should happen, it's going to need to be documented in the README and the change added to the CHANGELOG (please see the contributing guide).  This alone may alleviate my concerns WRT edge cases, so maybe start there?\nWhile I don't have anything in particular against including a Vagrantfile in the project, that shouldn't be mixed in with a functional PR.  I'd suggest creating a separate issue for lack of vagrant support and submit a PR with only those changes.  Then re-submit this one independently, so the team can decide each on their own merits.. @LoveIsGrief not sure I understand the purpose of a flag in this case...  What would that be for? If it's to simply enable/disable the functionality, I don't think that's necessary.\n\nI feel as though my comments were taken to be critical of the intent of the PR; far from it, I think this is a good change.  But it's a change nonetheless, which means we have to make sure it's documented in the README and noted in the CHANGELOG (per the contribution guidelines).  I do think that there's probably some edge cases that should be covered by tests, but this is a gut-feel more than anything else (@Soliah, @ethagnawl, @J3RN any opinions?).  IMO it's just better to work through any issues before we merge it in than after.\nAs for the Vagrant stuff, again, I'm not against it, but it'd just be better to not mix it in with this functionality. I don't see us rejecting that (it's not very invasive), but personally I haven't used Vagrant in years, so someone with fresher knowledge in that area would be better-suited to take a look at that.  Looks like you could simply create a branch with just a6e5862, fc1feb3, and e42416a and submit that as a PR, and then either push this without Vagrant support (probably best) or rebase it off the vagrant branch.  While you're at it, you could probably also squash 92008a1 and 4016bcf, as well.. > I still think the tmuxinator organization should create and maintain a fork of homebrew-core.\nThis is a good idea if we want to support the idea of an official homebrew package.  I have a Mac; I could probably take on the management of this.  Someone else would need to manage the linux package systems.\nMy question to @J3RN is this: does simply packaging the gem into homebrew and the like solve the Ruby version problem?  Looking at @nexeck's formula (thank you for that, btw), I don't think it would, although I don't claim sufficient knowledge of homebrew to make that definitive. . Closed in favor of https://github.com/tmuxinator/tmuxinator/pull/574. @rightaway v0.10.0 has been marked as latest release: https://github.com/tmuxinator/tmuxinator/releases/tag/v0.10.0. @Silentz0r @rglassett is this still an open issue?. I don't have a problem with this, but I'm a bit surprised that we don't have an accommodation WRT to tmux v 2.5 & https://github.com/tmuxinator/tmuxinator/issues/536. Closing in favor of https://github.com/tmuxinator/tmuxinator/pull/579 (requires supported update). @tmuxinator/tmuxinator does anyone disagree with cutting a patch release from master to repair this bug?  I'll wait a couple of days for comment; if there are no objections, I'm happy to do a release on Tuesday. @ethagnawl This seems to me to be something we should ship a minor-version release for, agree?. :shipit:. I am not. @ethagnawl \n\n\nFirst off, I really like this refactoring! As far as I'm concerned, it allows us to close #608.\n\n\nThanks!\n\n\nShould the degenerate Thor commands be given a name, instead of being introduced in an array literal? I could see the current implementation being confusing after some time away from this issue.\n\n\nDone.  See here\n\n\nShould we attempt to enumerate the other potentially degenerate commands or just play whack-a-mole if/when they're reported?\n\n\nIn the spirit of YAGNI, I'm advocating for the whack-a-mole approach.\n. >the proposed solution is preferable to adding yet another hook and leaving the semi-broken one in place\nI agree.\nWe may want to do a minor version bump for this, although you could make an argument either way.. \ud83d\udc4d LGTM. I think I agree with @ethagnawl 's suggestion re: the option naming.  My preference would be to use --suppress-tmux-version-warnings.  It is very specific and self-documenting, and implies that the warning still exist, but the user wants simply to hide the output.  FWIW, I would also prefer not to give this option a shortened alias.\nHere's a possible, smaller-footprint solution: reading the discussion that prompted this, the request was made simply so that\n\nthose using tmux master wouldn't have to hit 'enter' every time they fire up tmuxinator\n\nSo what if we fixed the problem, rather than worked around it?  The enter requirement is to simply stop execution and display a message before tmux takes over and wipes the current shell's output.  Perhaps it's enough to simply add the version warning into the doctor command and remove the interaction from the start mechanism.  Thoughts?. We've supported every version of tmux since 1.5, which was released in 2011, so it's not very likely, IMO...  That said, leaving this as a runtime check (rather than a possibly-one-time-that-ran-when-tmuxinator-was-first-installed-three-years-ago check) is probably more in-line with the principle of least surprise.\nOK, never mind re: the mux doctor thing.  Let's just change the option and :shipit: . > Is this feature useful enough to justify the lines of code added?\nI believe so, yes.  Personally, I don't feel the use case (running tmux's master branch and not wanting to press  a couple times) has that large a footprint. However, the carrying cost of this isn't great, and I think it sets a good precedent for functional additions in similar situations, i.e. that small-surface-area use cases can be addressed by selectively enabling/disabling functionality using targeted command-line switches.\n\nIs this technically sound and ready to be merged?\n\nIMO, yes. It has a straightforward implementation with a reasonable refactoring and it's adequately tested.  What more could a girl ask for? :)\n@ethagnawl you have requested changes in your review.  Are you good w/ this?. Done\n. I was unable to get this to fail when running locally.  Just to be sure, I put in a couple more tests that specifically check for the different project file paths (local or traditional).  Those are passing (locally, natch), as well.\nI don't think this would mean that other #exists? checks would need to be changed.  My reading is that Tmuxinator::Config.exists? and Tmuxinator::Config.local? are intended to be used for checking for those specific conditions; perhaps exists? should be renamed traditional? or something like that to delineate it from local?.  Regardless, the File.exists? check here is literally a filesystem check that the selected project file path does or does not already exist, so I don't think it'd need to be changed.\n. According to the Hound website, this is the rubocop configuration being used.  However, I don't think that's entirely true...  as several cops defined here did not report by Hound.  I have commented out a few cops (commenting them, rather than simply removing them, so that we can see what they are) that we just not working.\n. Had to change this around due to the Lint/NestedMethodDefinition cop which didn't like the defs inside a method definition.  Added a test to make sure that the functionality stays consistent, but if could also just revert this and deactivate the cop itself.\n. should this be bundle exec rake test?\n. Add the file path to this array: https://github.com/tmuxinator/tmuxinator/blob/3ab8b98dda9611803839cb6663b3e0fd28ad31a4/.rubocop.yml#L509-L510\n. Not sure what the question is here...\n. Ah....  I think what you want here is an RSpec shared context to make that setup more DRY.\n``` ruby\ndescribe Tmuxinator::Window do\n  shared_context \"new window setup\" do\n    let(:project) { double(:project) }\n    let(:window) { Tmuxinator::Window.new(yaml, 0, project) }\n    # etc\n  end\ndescribe \"#tmux_synchronize_panes\" do\n    include_context \"new window setup\"\nit \"blah blah\" do\nend\n\nend\ndescribe \"#tmux_new_window_command\" do\n    include_context \"new window setup\"\nit \"foo bar bazz\" do\nend\n\nend\nend\n```\nProbably a good idea, yes.\n. There's a fair amount that's going on here...  Would be helpful to have a couple of unit-test specs to constrain the functionality that this represents.\n. Should we add a test for this, that verifies a valid commands instance, given an empty panes in the yaml?\n. I had in mind breaking this into a few different, single-purpose methods, and testing each of them individually.  As you noted in another comment, this method is too large; I see a version check, a set of shell interactions, a shell interaction check, a data structure creation, a data transformation and finally an I/O operation.  I'm not saying we need to break this into 6 separate methods, but some breakdown along those lines, which enables some input/output unit tests, is probably a good idea.\nIf you're asking me...  I think the version check could be useful in other places (e.g. assert_version(message, minver: 1.6)).  The shell interactions can be difficult to unit test, so I'd pull those out into their own method(s), probably wrapped up in a facade method that includes the success check (e.g. capture_shell_from_session(session), capture_list_windows_from_session(session), etc).  I'd likely combine the data structure creation/transformation into it's own method, which should be easily unit-tested (e.g. build_yaml_from(panes, windows: [])), and put the I/O operation into it's own helper method, such as write_to_file(yaml) (if there isn't one already... I would guess that there is one, but I could be wrong).  For what it's worth, I'd recommend putting the bulk of this functionality into a separate module, which should be easily testable standalone (the CLI is kinda a pain to test directly).\n. Just to be clear, I think this PR is well thought-out and makes for an excellent addition to tmuxinator's functionality.  I just think that breaking this down into more manageable chunks goes a long way to keeping complexity to a minimum, which increases robustness and longevity of the tool.  \ud83d\udc4d \n. Would this be better as\nruby\nattach = project_options[:attach]  # will be a boolean-ish string value\ndetach = !attach # will be an actual TrueClass/FalseClass. Totally not relevant to this PR: we should prolly think about moving these validations to a separate file/module.  Getting a bit crowded in here...  Again, not germane to this...  \n. If I'm reading this right, valid_project_config? may raise an error, which is uncaught here and therefore needs to be handled by the caller of validate.  I don't really like that pattern, TBH, although we are essentially already using it...  However, I would prefer if the error-raising was consolidated into one place, rather than distributed among multiple methods.  Maybe\n```ruby\ndef valid_standard_project?(name)\n  name ? true : false\nend\ndef validate(options = {})\n  valid = valid_project_config?(project_config) || valid_local_project?(name) || valid_standard_project?(name)\nif valid\n    # now check/handle exception conditions\n    raise \"Project #{name} doesn't exist.\" unless exists?(name: name)\n# do other stuff?\n\nend\nend\n```\nThoughts?. If we're going to keep the existing implementation (raiseing errors in the validations) we should test for that behavior.. Gotcha.  Gotta love how CC sometimes pushes us to less-than-ideal solutions over something like that :)\nIf we think we're ok via test coverage for now, I'd say :shipit: and let's take a look at figuring out a better long-term solution.. One thought: I decided to name this function ::bootstrap to explicitly separate it from the normal Thor functionality, but perhaps simply overriding Thor::Base.start and calling super on line 357 makes more sense.  Thoughts?. One thought: I decided to name this function ::bootstrap to explicitly separate it from the normal Thor functionality, but perhaps simply overriding Thor::Base.start and calling super on line 375 makes more sense.  Thoughts?. Done. out of curiosity, do we get anything in particular from upping this dependency version?. rather: i understand removing the ~> 1.3, which keeps us locked into the 1.x versions of bundler, especially given that 2.0 has been released.  perhaps a better version constraint would simply be >= 1.3?. ",
    "radarek": "Ok, I did some investigation and it's related to how tmux works. It looks like when first sessions in launched by tmux it runs it's server with environment variables inherited from it's 'launcher'. When next session is launched (it can be completely new shell with clean environment) it inherits tmux server environments variables. Here is quick demonstration of this problem:\n``` bash\n$ tmux ls\nfailed to connect to server # no sessions\n$ export FOO=1\n$ tmux new -s foo -d # first session started in background\nin new shell with clean environment\n$ echo $FOO\nFOO is not set, good\n$ tmux new -s bar # second sessions\nin tmux shell check if FOO is set\n$ echo $FOO\n1\nups, here is problem\n```\nQuick fix to this problem could be changing file bin/tmuxinator:\n``` diff\ndiff --git a/bin/tmuxinator b/bin/tmuxinator\nindex 7ad5a79..930e420 100755\n--- a/bin/tmuxinator\n+++ b/bin/tmuxinator\n@@ -6,7 +6,11 @@ require \"tmuxinator\"\nif ARGV.length == 0\n   project = Tmuxinator::Config.validate(\".tmuxinator\", true)\n-  Kernel.exec(project.render)\n+  if defined?(Bundler) && ENV['BUNDLER_GEMFILE']\n+    Bundler.clean_exec(project.render)\n+  else\n+    Kernel.exec(project.render)\n+  end\n elsif ARGV.length == 1\n   name = ARGV[0]\n```\nBut I'm not sure if this is proper way to deal with this case. Any suggestions?\n. My current workaround (without changing tmuxinator source) is add this to .tmuxinator:\npre: unset BUNDLE_GEMFILE BUNDLE_BIN_PATH\n. If I understand correctly it solves completely different problem.\nI think the original problem could be simplified to:\nrunning bundle exec tmuxinator or ./bin/tmuxinator (from bundler binstubs) should not launch tmux session with BUNDLE_* variables\nOr even simpler:\ntmux sessions should not inherit environment variables set by tmuxinator (directly or indirectly).\n. ",
    "daryltucker": "What's the status of this and would someone mind providing an example of how to get this working?\nI am experiencing the same/similar issue where tmuxinator start second_session actually just attaches me to my initial session, failing to create a new one or allow me to have multiple projects attached to different terminals simultaneously.\nEdit\nI see that I need to add the following line to my configuration files within ~/.tmuxinator :\npre: unset BUNDLE_GEMFILE BUNDLE_BIN_PATH\n. ",
    "ahmedelgabri": "It doesn't work for me, I dunno why and they are different projects.\n. ",
    "jonmorehouse": "Doesn't work for me either. If I've already got a tmux session running, tmux start projectname doesn't work\n. ",
    "baopham": "I could reproduce this until I found out that the name fields in both yaml files are the same. I updated the name and it works.\n. ",
    "introom": "Yes. I want it affects all the panes residing in that window.\n. ",
    "christiankopac": "Hi @Soliah \nI tried using 0.6.6 or the ---pre version but I'm still not able to run commands when a window contains panes (and making sure the gems where uninstalled).\nThe windows are running the commands successfully, but not on the panes.\nAnd with this workaround I'm getting \ncan't find pane: 1\ncan't find pane: 1\narranging in: main-vertical\ncan't find pane: 2\narranging in: main-vertical\n[exited]\nAnd the output of the debug, for the window with the panes:\n```\nWindow \"editor\"\ntmux send-keys -t rails_depot:1.1 setopt\\ ignoreoef C-m\n  tmux send-keys -t rails_depot:1.1 vim C-m\n  tmux splitw -t rails_depot:1\n  tmux select-layout -t rails_depot:1 main-vertical\n  tmux send-keys -t rails_depot:1.2 setopt\\ ignoreoef C-m\n  tmux select-layout -t rails_depot:1 main-vertical\n  tmux select-pane -t rails_depot:1.1\n```\n. ",
    "ddd": "@Soliah I am getting this issue as well. If I enable renumbering of windows to start at 1, instead of 0, none of the commands in Window 0 (now Window 1) will run. I have to disable \"set -g base-index 1\" in ~/.tmux.config for commands to run for each pane. I am running tmuxinator 0.6.6 installed via \"gem install tmuxinator\"\nMy debugging info for that session is as follows. Notice it calls -t 0 with OR without resetting base-index. Basically its not accounting for base-index renumbering:\n``` sh\n\u2235 mux debug trans_plus\n!/bin/bash\ntmux -S /tmp/trans_plus start-server\\; has-session -t trans_plus 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/projects/github/transporter_plus\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux -S /tmp/trans_plus new-session -d -s trans_plus -n editor\n# Set the default path.\n  tmux -S /tmp/trans_plus set-option -t trans_plus default-path \\~/projects/github/transporter_plus 1>/dev/null\n# Create other windows.\n  tmux -S /tmp/trans_plus new-window -c \\~/projects/github/transporter_plus -t trans_plus:1 -n tests\n  tmux -S /tmp/trans_plus new-window -c \\~/projects/github/transporter_plus -t trans_plus:2 -n logs\n  tmux -S /tmp/trans_plus new-window -c \\~/projects/github/transporter_plus -t trans_plus:3 -n server\n# Window \"editor\"\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:0.0 rvm\\ use\\ 2.0.0-p353@tp C-m\ntmux -S /tmp/trans_plus send-keys -t trans_plus:0.0 vim C-m\ntmux -S /tmp/trans_plus splitw -t trans_plus:0\n  tmux -S /tmp/trans_plus select-layout -t trans_plus:0 even-horizontal\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:0.1 rvm\\ use\\ 2.0.0-p353@tp C-m\ntmux -S /tmp/trans_plus send-keys -t trans_plus:0.1 bundle\\ exec\\ rails\\ c C-m\ntmux -S /tmp/trans_plus select-layout -t trans_plus:0 even-horizontal\ntmux -S /tmp/trans_plus select-pane -t trans_plus:0.0\n# Window \"tests\"\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:1 rvm\\ use\\ 2.0.0-p353@tp C-m\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:1 rspec\\ spec C-m\n# Window \"logs\"\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:2 rvm\\ use\\ 2.0.0-p353@tp C-m\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:2 tail\\ -n\\ 500\\ -f\\ log/development.log C-m\n# Window \"server\"\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:3 rvm\\ use\\ 2.0.0-p353@tp C-m\n  tmux -S /tmp/trans_plus send-keys -t trans_plus:3 bundle\\ exec\\ rails\\ s C-m\ntmux -S /tmp/trans_plus select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -S /tmp/trans_plus -u attach-session -t trans_plus\nelse\n  tmux -S /tmp/trans_plus -u switch-client -t trans_plus\nfi\n```\nThe actual YML for the session is here:\n``` yml\n~/.tmuxinator/trans_plus.yml\nname: trans_plus\nroot: ~/projects/github/transporter_plus\nOptional tmux socket\nsocket_path: /tmp/trans_plus\nRuns before everything. Use it to start daemons etc.\npre: sudo /etc/rc.d/mysqld start\nRuns in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: rvm use 2.0.0-p353@tp\nPass command line options to tmux. Useful for specifying a different tmux.conf.\ntmux_options: -f ~/.tmux.mac.conf\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: byobu\nwindows:\n  - editor:\n      layout: even-horizontal\n      panes:\n        - vim\n        - bundle exec rails c\n  - tests: rspec spec\n  - logs: tail -n 500 -f log/development.log\n  - server: bundle exec rails s\n```\n. @Soliah Just an update, I tried this with branch 0.7.0-wip as well and it still does it. It can not find window 0, though the logs show its reading the config, sees the base-index setting changing the index to 1 but its still refusing to launch anything on window 1 if it contains panes. Below is the log\nTMUX-SERVER LOG\n``` sh\nserver started, pid 19046\nsocket path /tmp/tmux-1000/default\nnew client 7\nloading /home/ddd/.tmux.conf\n/home/ddd/.tmux.conf: set -g default-terminal \"xterm-256color\"\n/home/ddd/.tmux.conf: #set -g mode-mouse on\n/home/ddd/.tmux.conf: \n/home/ddd/.tmux.conf: # set window index starting at 1 not 0\n/home/ddd/.tmux.conf: set -g base-index 1\n/home/ddd/.tmux.conf: \n/home/ddd/.tmux.conf: # act like vim\n/home/ddd/.tmux.conf: setw -g mode-keys vi\n/home/ddd/.tmux.conf: bind h select-pane -L\n/home/ddd/.tmux.conf: bind j select-pane -D\n/home/ddd/.tmux.conf: bind k select-pane -U\n/home/ddd/.tmux.conf: bind l select-pane -R\n/home/ddd/.tmux.conf: bind-key -r C-h select-window -t :-\n/home/ddd/.tmux.conf: bind-key -r C-l select-window -t :+\n/home/ddd/.tmux.conf: \n/home/ddd/.tmux.conf: bind-key @ command-prompt -p \"join pane from: \"  \" join-pane -s '%%'\"\n/home/ddd/.tmux.conf: \n/home/ddd/.tmux.conf: set -sg escape-time 50\n/home/ddd/.tmux.conf: bind-key r source-file ~/.tmux.conf\n/home/ddd/.tmux.conf: \n/home/ddd/.tmux.conf: # act like GNU screen\n/home/ddd/.tmux.conf: unbind C-b\n/home/ddd/.tmux.conf: set -g prefix C-a\n/home/ddd/.tmux.conf: bind C-a send-prefix\ncmdq 0x7f7c9dbc3080: set-option -g default-terminal xterm-256color (client -1)\ncmdq 0x7f7c9dbc3080: set-option -g base-index 1 (client -1)\ncmdq 0x7f7c9dbc3080: set-window-option -g mode-keys vi (client -1)\ncmdq 0x7f7c9dbc3080: bind-key h select-pane -L (client -1)\ncmdq 0x7f7c9dbc3080: bind-key j select-pane -D (client -1)\ncmdq 0x7f7c9dbc3080: bind-key k select-pane -U (client -1)\ncmdq 0x7f7c9dbc3080: bind-key l select-pane -R (client -1)\ncmdq 0x7f7c9dbc3080: bind-key -r C-h select-window -t :- (client -1)\ncmdq 0x7f7c9dbc3080: bind-key -r C-l select-window -t :+ (client -1)\ncmdq 0x7f7c9dbc3080: bind-key @ command-prompt -p \"join pane from: \" \" join-pane -s '%%'\" (client -1)\ncmdq 0x7f7c9dbc3080: set-option -gs escape-time 50 (client -1)\ncmdq 0x7f7c9dbc3080: bind-key r source-file /home/ddd/.tmux.conf (client -1)\ncmdq 0x7f7c9dbc3080: unbind-key C-b (client -1)\ncmdq 0x7f7c9dbc3080: set-option -g prefix C-a (client -1)\ncmdq 0x7f7c9dbc3080: bind-key C-a send-prefix (client -1)\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\ngot 14 from client 7\n: 0x1019 (End))ent 7\nnew key a: 0x501d (C-Up)\nnew key b: 0x501e (C-Down)\nnew key c: 0x5020 (C-Right)\nnew key d: 0x501f (C-Left)\nnew key \u001b[a: 0x901d (S-Up)ession (client 7)\nnew key : 0x901e (S-Down)-bce\nnew key : 0x9020 (S-Right)de: colors 256\nnew key : 0x901f (S-Left)ide: XT \nnew key \u001b[11^: 0x5002 (C-F1)\nnew key \u001b[12^: 0x5003 (C-F2)\nnew key \u001b[13^: 0x5004 (C-F3)\nnew key \u001b[14^: 0x5005 (C-F4)\nnew key \u001b[15^: 0x5006 (C-F5)\nnew key \u001b[17^: 0x5007 (C-F6)\nnew key \u001b[18^: 0x5008 (C-F7)\nnew key \u001b[19^: 0x5009 (C-F8)\nnew key \u001b[20^: 0x500a (C-F9)\nnew key \u001b[21^: 0x500b (C-F10)\nnew key \u001b[23^: 0x500c (C-F11)\nnew key \u001b[24^: 0x500d (C-F12)\nnew key \u001b[25^: 0x500e (C-F13)\nnew key \u001b[26^: 0x500f (C-F14)\nnew key \u001b[28^: 0x5010 (C-F15)\nnew key \u001b[29^: 0x5011 (C-F16)\nnew key \u001b[31^: 0x5012 (C-F17)\nnew key \u001b[32^: 0x5013 (C-F18)\nnew key \u001b[33^: 0x5014 (C-F19)\nnew key \u001b[34^: 0x5015 (C-F20)\nnew key \u001b[2^: 0x5016 (C-IC)\nnew key \u001b[3^: 0x5017 (C-DC)\nnew key \u001b[7^: 0x5018 (C-Home)\nnew key \u001b[8^: 0x5019 (C-End)\nnew key \u001b[6^: 0x501a (C-NPage)\nnew key \u001b[5^: 0x501b (C-PPage)\nnew key \u001b[11$: 0x9002 (S-F1)\nnew key \u001b[12$: 0x9003 (S-F2)\nnew key \u001b[13$: 0x9004 (S-F3)\nnew key \u001b[14$: 0x9005 (S-F4)\nnew key \u001b[15$: 0x9006 (S-F5)\nnew key \u001b[17$: 0x9007 (S-F6)\nnew key \u001b[18$: 0x9008 (S-F7)\nnew key \u001b[19$: 0x9009 (S-F8)\nnew key \u001b[20$: 0x900a (S-F9)\nnew key \u001b[21$: 0x900b (S-F10)\nnew key \u001b[23$: 0x900c (S-F11)\nnew key \u001b[24$: 0x900d (S-F12)\nnew key \u001b[25$: 0x900e (S-F13)\nnew key \u001b[26$: 0x900f (S-F14)\nnew key \u001b[28$: 0x9010 (S-F15)\nnew key \u001b[29$: 0x9011 (S-F16)\nnew key \u001b[31$: 0x9012 (S-F17)\nnew key \u001b[32$: 0x9013 (S-F18)\nnew key \u001b[33$: 0x9014 (S-F19)\nnew key \u001b[34$: 0x9015 (S-F20)\nnew key \u001b[2$: 0x9016 (S-IC)\nnew key \u001b[3$: 0x9017 (S-DC)\nnew key \u001b[7$: 0x9018 (S-Home)\nnew key \u001b[8$: 0x9019 (S-End)\nnew key \u001b[6$: 0x901a (S-NPage)\nnew key \u001b[5$: 0x901b (S-PPage)\nnew key : 0xd002 (C-S-F1)\nnew key : 0xd003 (C-S-F2)\nnew key : 0xd004 (C-S-F3)\nnew key : 0xd005 (C-S-F4)\nnew key : 0xd006 (C-S-F5)\nnew key : 0xd007 (C-S-F6)\nnew key : 0xd008 (C-S-F7) \nnew key : 0xd009 (C-S-F8)\nnew key : 0xd00a (C-S-F9) \nnew key : 0xd00b (C-S-F10) \nnew key : 0xd00c (C-S-F11)   \nnew key : 0xd00d (C-S-F12)    \nnew key : 0xd00e (C-S-F13)     \nnew key : 0xd00f (C-S-F14)      \nnew key : 0xd010 (C-S-F15)        \nnew key : 0xd011 (C-S-F16)         \nnew key : 0xd012 (C-S-F17)           \nnew key : 0xd013 (C-S-F18)            \nnew key : 0xd014 (C-S-F19)             \nnew key : 0xd015 (C-S-F20)              \nnew key : 0xd016 (C-S-IC)\nnew key : 0xd017 (C-S-DC)\nnew key : 0xd018 (C-S-Home)\nnew key : 0xd019 (C-S-End)\nnew key : 0xd01a (C-S-NPage)\nnew key : 0xd01b (C-S-PPage)\nnew key     : 0x1031 ((null))\nnew key \u001b[O: 0x1032 ((null))\nnew key P: 0x1002 (F1)\nnew key Q: 0x1003 (F2)\nnew key R: 0x1004 (F3)\nnew key S: 0x1005 (F4)\nnew key \u001b[15~: 0x1006 (F5)\nnew key \u001b[17~: 0x1007 (F6)\nnew key \u001b[18~: 0x1008 (F7)\nnew key \u001b[19~: 0x1009 (F8)\nnew key \u001b[20~: 0x100a (F9)\nnew key \u001b[21~: 0x100b (F10)\nnew key \u001b[23~: 0x100c (F11)\nnew key \u001b[24~: 0x100d (F12)\nnew key \u001b[2~: 0x1016 (IC)\nnew key \u001b[3~: 0x1017 (DC)\nnew key \u001b[1~: 0x1018 (Home)\nnew key \u001b[4~: 0x1019 (End)\nnew key \u001b[6~: 0x101a (NPage)\nnew key \u001b[5~: 0x101b (PPage)\n: 0x101c (BTab)\nreplacing key A: 0x101d (Up)\nreplacing key B: 0x101e (Down)\nreplacing key D: 0x101f (Left)\nreplacing key C: 0x1020 (Right)\nspawn: /bin/bash -- \nsession 0 created\nwriting 8 to client 7\ngot 9 from client 7\nkeys are 9 ()\nreceived service class 62\ncomplete key  0xfff\ninput_parse: '\u001b' ground\ninput_parse: ']' esc_enter\ninput_enter_osc\ninput_parse: '0' osc_string\ninput_parse: ';' osc_string\ninput_parse: 'd' osc_string\ninput_parse: 'd' osc_string\ninput_parse: 'd' osc_string\ninput_parse: '@' osc_string\ninput_parse: 'd' osc_string\ninput_parse: 'd' osc_string\ninput_parse: 'd' osc_string\ninput_parse: '-' osc_string\ninput_parse: 'T' osc_string\ninput_parse: 'h' osc_string\ninput_parse: 'i' osc_string\ninput_parse: 'n' osc_string\ninput_parse: 'k' osc_string\ninput_parse: 'P' osc_string\ninput_parse: 'a' osc_string\ninput_parse: 'd' osc_string\ninput_parse: '-' osc_string\ninput_parse: 'X' osc_string\ninput_parse: '1' osc_string\ninput_parse: '3' osc_string\ninput_parse: '1' osc_string\ninput_parse: 'e' osc_string\ninput_parse: ':' osc_string\ninput_parse: ' ' osc_string\ninput_parse: 'g' osc_string\ninput_parse: 'i' osc_string\ninput_parse: 't' osc_string\ninput_parse: 'h' osc_string\ninput_parse: 'u' osc_string\ninput_parse: 'b' osc_string\ninput_parse: '' osc_string\ninput_exit_osc: \"0;ddd@ddd-ThinkPad-X131e: github\"\ninput_parse: '1' ground\ninput_parse: '8' ground\ninput_parse: ':' ground\ninput_parse: '2' ground\ninput_parse: '5' ground\ninput_parse: ':' ground\ninput_parse: '5' ground\ninput_parse: '4' ground\ninput_parse: ' ' ground\ninput_parse: '\u001b' ground\ninput_parse: '[' esc_enter\ninput_parse: '3' csi_enter\ninput_parse: '2' csi_parameter\ninput_parse: 'm' csi_parameter\ninput_csi_dispatch: 'm' \"\" \"32\"\ninput_parse: 'd' ground\ninput_parse: 'd' ground\ninput_parse: 'd' ground\ninput_parse: '\u001b' ground\ninput_parse: '[' esc_enter\ninput_parse: '0' csi_enter\ninput_parse: 'm' csi_parameter\ninput_csi_dispatch: 'm' \"\" \"0\"\ninput_parse: '@' ground\ninput_parse: '\u001b' ground\ninput_parse: '[' esc_enter\ninput_parse: '3' csi_enter\ninput_parse: '6' csi_parameter\ninput_parse: 'm' csi_parameter\ninput_csi_dispatch: 'm' \"\" \"36\"\ninput_parse: 'd' ground\ninput_parse: 'd' ground\ninput_parse: 'd' ground\ninput_parse: '-' ground\ninput_parse: 'T' ground\ninput_parse: 'h' ground\ninput_parse: 'i' ground\ninput_parse: 'n' ground\ninput_parse: 'k' ground\ninput_parse: 'P' ground\ninput_parse: 'a' ground\ninput_parse: 'd' ground\ninput_parse: '-' ground\ninput_parse: 'X' ground\ninput_parse: '1' ground\ninput_parse: '3' ground\ninput_parse: '1' ground\ninput_parse: 'e' ground\ninput_parse: '\u001b' ground\ninput_parse: '[' esc_enter\ninput_parse: '3' csi_enter\ninput_parse: '5' csi_parameter\ninput_parse: 'm' csi_parameter\ninput_csi_dispatch: 'm' \"\" \"35\"\ninput_parse: ':' ground\ninput_parse: '~' ground\ninput_parse: '/' ground\ninput_parse: 'p' ground\ninput_parse: 'r' ground\ninput_parse: 'o' ground\ninput_parse: 'j' ground\ninput_parse: 'e' ground\ninput_parse: 'c' ground\ninput_parse: 't' ground\ninput_parse: 's' ground\ninput_parse: '/' ground\ninput_parse: 'g' ground\ninput_parse: 'i' ground\ninput_parse: 't' ground\ninput_parse: 'h' ground\ninput_parse: 'u' ground\ninput_parse: 'b' ground\ninput_parse: '\u001b' ground\ninput_parse: '[' esc_enter\ninput_parse: '0' csi_enter\ninput_parse: 'm' csi_parameter\ninput_csi_dispatch: 'm' \"\" \"0\"\ninput_parse: ' ' ground\ninput_parse: ' ' ground\ninput_parse: 'r' ground\ninput_parse: 'u' ground\ninput_parse: 'b' ground\ninput_parse: 'y' ground\ninput_parse: '-' ground\ninput_parse: '2' ground\ninput_parse: '.' ground\ninput_parse: '0' ground\ninput_parse: '.' ground\ninput_parse: '0' ground\ninput_parse: '-' ground\ninput_parse: 'p' ground\ninput_parse: '3' ground\ninput_parse: '5' ground\ninput_parse: '3' ground\ninput_parse: '@' ground\ninput_parse: 'd' ground\ninput_parse: 'd' ground\ninput_parse: 'd' ground\ninput_parse: ' ' ground\n' groundrse: '\ninput_c0_dispatch: '\n' groundrse: '\ninput_c0_dispatch: '\ninput_parse: '\n' ground\ninput_c0_dispatch: '\ninput_parse: '\ufffd' ground\ninput_utf8_open\ninput_parse: '\ufffd' utf8_two\ninput_utf8_add\ninput_parse: '\ufffd' utf8_one\ninput_utf8_close\ninput_parse: ' ' ground\nkeys are 1 (e)\ncomplete key e 0x65\ninput_parse: 'e' ground\nkeys are 1 (x)\ncomplete key x 0x78\ninput_parse: 'x' ground\nkeys are 1 (i)\ncomplete key i 0x69\ninput_parse: 'i' ground\nkeys are 1 (t)\ncomplete key t 0x74\ninput_parse: 't' ground\n)eys are 1 (\n 0xdlete key \n' groundrse: '\ninput_c0_dispatch: '\ninput_parse: '\n' ground\ninput_c0_dispatch: '\ninput_parse: 'l' ground\ninput_parse: 'o' ground\ninput_parse: 'g' ground\ninput_parse: 'o' ground\ninput_parse: 'u' ground\ninput_parse: 't' ground\n' groundrse: '\ninput_c0_dispatch: '\ninput_parse: '\n' ground\ninput_c0_dispatch: '\nsession 0 destroyed\nwriting 3 to client 7\ngot 5 from client 7\nwriting 4 to client 7\nlost client 7\n```\nTMUX-CLIENT LOG\nsh\ngot 8 from server\ngot 3 from server\ngot 4 from server\nNot sure if the client log was of importance, however, I included it for completeness.\n. Yeah I'm specifically using the following:\nsh\n\u2235 tmux -V\ntmux 1.8\n``` sh\n\u2235 gem list tmuxinator --local\n LOCAL GEMS \ntmuxinator (0.6.6)\n```\nMy $HOME/.tmux.conf is:\n``` sh\nset -g default-terminal \"xterm-256color\"\nset -g mode-mouse on\nset window index starting at 1 not 0\nset -g base-index 1\nact like vim\nsetw -g mode-keys vi\nbind h select-pane -L\nbind j select-pane -D\nbind k select-pane -U\nbind l select-pane -R\nbind-key -r C-h select-window -t :-\nbind-key -r C-l select-window -t :+\nbind-key @ command-prompt -p \"join pane from: \"  \" join-pane -s '%%'\"\nset -sg escape-time 50\nbind-key r source-file ~/.tmux.conf\nact like GNU screen\nunbind C-b\nset -g prefix C-a\nbind C-a send-prefix\n```\nMy output for tmux show-option -g is:\nsh\n\u2235 tmux show-option -g\nassume-paste-time 1\nbase-index 1\nbell-action any\nbell-on-alert off\ndefault-command \"\"\ndefault-path \"\"\ndefault-shell \"/bin/bash\"\ndefault-terminal \"xterm-256color\"\ndestroy-unattached off\ndetach-on-destroy on\ndisplay-panes-active-colour red\ndisplay-panes-colour blue\ndisplay-panes-time 1000\ndisplay-time 750\nhistory-limit 2000\nlock-after-time 0\nlock-command \"lock -np\"\nlock-server on\nmessage-attr none\nmessage-bg yellow\nmessage-command-attr none\nmessage-command-bg black\nmessage-command-fg yellow\nmessage-fg black\nmessage-limit 20\nmouse-resize-pane off\nmouse-select-pane off\nmouse-select-window off\nmouse-utf8 on\npane-active-border-bg default\npane-active-border-fg green\npane-border-bg default\npane-border-fg default\nprefix C-a\nprefix2 none\nrenumber-windows off\nrepeat-time 500\nset-remain-on-exit off\nset-titles off\nset-titles-string \"#S:#I:#W - \"#T\"\"\nstatus on\nstatus-attr none\nstatus-bg green\nstatus-fg black\nstatus-interval 15\nstatus-justify left\nstatus-keys vi\nstatus-left \"[#S]\"\nstatus-left-attr none\nstatus-left-bg default\nstatus-left-fg default\nstatus-left-length 10\nstatus-position bottom\nstatus-right \"\"#22T\" %H:%M %d-%b-%y\"\nstatus-right-attr none\nstatus-right-bg default\nstatus-right-fg default\nstatus-right-length 40\nstatus-utf8 on\nterminal-overrides \"*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\\E]52;%p1%s;%p2%s\\007:Cc=\\E]12;%p1%s\\007:Cr=\\E]112\\007:Cs=\\\nE[%p1%d q:Csr=\\E[2 q,screen*:XT\"\nupdate-environment \"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY\"\nvisual-activity off\nvisual-bell off\nvisual-content off\nvisual-silence off\nword-separators \" -_@\"\n. That fixed it! It launches each paned app now. Never had to do that, didn't even think to add that. It works As Expected(Tm) now\n. ",
    "karellm": "I'm not sure it is what you want but I did:\nmux debug project > ./script.sh\nchmod +x script.sh\n./script.sh\nStill, only the first window is opening. (I made sure the previous session was killed).\n. I never got any output whatsoever after detaching. From a tmux session, I run the ctrl+B D. Is that right?\nI'm running tmux 1.6. My .tmux.conf looks like (I just added the pane-base-index but it didn't solve my problem:\n```\nset -g prefix ^a\nset-option -g mouse-select-pane on\nset-option -g mouse-select-window on\nset-window-option -g mode-mouse on\nset-window-option -g pane-base-index 1\nset -g terminal-overrides 'xterm*:smcup@:rmcup@'\nunbind %\nbind | split-window -h\nbind - split-window -v\nbind N break-pane\nSet status bar\nset -g status-bg black\nset -g status-fg white\nHighlight active window\nset-window-option -g window-status-current-bg blue\nSet window notifications\nsetw -g monitor-activity on\nset -g visual-activity on\nAutomatically set window title\nsetw -g automatic-rename\n```\nGiving 0.6.6.pre a shot. Get back to you when done.\n. 0.6.6.pre.3 doesn't seem to solve my problem either :(\n. Thanks! Upgrading to 1.8 fixed the problem. For anyone else, here is the commands:\nTo have add-apt-repository, make sure this package is installed:\n```\nUbuntu <= 12\nsudo apt-get install python-software-properties\nUbuntu > 12\nsudo apt-get install software-properties-common\n```\nAnd then install tmux from pi-rho ppa:\nsudo add-apt-repository ppa:pi-rho/dev\nsudo apt-get update\nsudo apt-get install tmux\ntmux -V\n. ",
    "saamalik": "When will work on 0.8.0 begin? Thanks.\n. ",
    "reicheltd": "+1 tmux 1.9 was released today. I got the \"default-path\" notification when starting tmuxinator.\n. I figured out it was related to https://github.com/ndbroadbent/scm_breeze\n. ",
    "dacechavez": "I think tmux is adding a \"\\\" to the \"~\" which results in:\n$ tmux new-window -c \\~/Dropbox/proj -n app.js\nWhich outputs: bad working directory: No such file or directory\nMy workaround is to remove any \"~\" inside my .yml files when defining the project:\nproject_root: /home/username/Dropbox/proj\nThat did it for me.\n. ",
    "mickours": "This is still a problem. The workaround do not work when you use $PWD as value. \n. ",
    "dpino": "Variable PWD didn't work for me either. I was trying to use it from .tmux.conf. It seems inside the configuration file is possible to refer to the current path via the variable pane_current_path. For instance:\n``` bash\nSplit pane and open up a shell at the bottom keeping the current path.\nbind s splitw -v -p 25 -c '#{pane_current_path}' '/bin/bash'\n```\n. ",
    "natetech333": "default-path was working for me. then it stopped working. I didn't change the tmux version. Something more serious is happening.. ",
    "drapergeek": "I think I caught all the requests. Let me know if I missed anything!\n. Sure! Sorry, our standard style is to use single quotes when you're not interpolating variables. Habits die hard but I'll happily update it!\n. Definitely!\n. You got it, I'll make all these updates tonight.\n. ",
    "GaryCarneiro": "Let me work on this.\nIf I complete the code will open a PR.\n. ",
    "markdboyd": "+1\n. ",
    "ph-One": "Just add an empty list item. You don't have to specify a command.\nyml\n- sh:\n  -\n. ",
    "emayssat-ms": "- sh:\n  - #empty\n. I want that! +1\n. Same for tmux debug --local\n. windows:\n - window_name\n    panes:\n      - multiple_commands_for_same_pane\n        - VBoxManage ....\n        - sleep 30\n        - <continue here>!\n. Not sure I understand, but why not pass the credentials on the command line?\nhttps://github.com/tmuxinator/tmuxinator#erb\n. did you have a look at ansible?\nAnsible can be used as a command line tool and pass your credentials ...\nHave a look at ansible -m ... or create a script with #!/bin/ansible\n. ...\n```\nfirst:\n  panes:\n    first:\n     - tmux select-window -t 2\n     - tmux select-pane -t 1\n     - clear\n```\nBut that doesn't seem to work reliably...\n. I have found another way.... through the history.\nhistory -s echo 'hi'\nThen just use up arrow to execute!\n. Also while we are at it\ntmuxinator new --local -f filename.yml \n. I don't see where it says: 'tmuxinator' by iteslf will start a project. Based on the section you  are pointing to, it seems that tmuxinator start project ... will start the local project (which I believe is still not since I believe one should type 'tmuxinator local') Oh, well...\n. No. This is different from #61. +1 for  #61 though! This case is not about generating a tmuxinator configuration file from a tmux session. This case is about executing the directives from an existing file into the current tmux session. For example, panes that were close needs to be reopen. Command in pane are reexecuted. This is why it is a 'replay'.\nIn other words, I want a configuration to be a reference state to which I can quickly go back to if desired.\n. DEfinitely seems like a race condition. If I had more commands to the same 1st pane, the later ones are passed, but not the earlier ones.\n. As I continued working on this configuration, now in my 1st pane on 1st window, I read:\n/home/username/.tmux.conf:32: can't establish current session \n. http://stackoverflow.com/questions/23166031/tmux-why-do-these-two-lines-cause-a-tmux-conf2-cant-establish-current-sess\n. To do that you have to use a different tmux server socket each time.\nIn other words, you have to start tmuxinator with tmux_options: -S <%= ENV[\"TMUX_SOCKET\"] %> in config file and \nTMUX_SOCKET=/tmp/my_unique_socket tmuxinator\nor\nTMUX_SOCKET=$(mktemp /tmp/tmuxinator.XXXX) tmuxinator. You could also set the \"socket_name\" to a specific value in the tmuxinator configuration file. It turns out the environment is set when the tmux server is started.\nIf your tmux/tmuxinator session doess not start a server (that would be the case if you are using the default socket and if another session was started previously), then your (shell) environment will be different from the one seen in your session.\nTo change this environment, you can use tmux update-environment or you can use a different tmux server socket to run several servers on your desktop.\nhttps://raimue.blog/2013/01/30/tmux-update-environment/\nhttps://babushk.in/posts/renew-environment-tmux.html\nhttps://github.com/agriffis/weechat-tmux-env\nhttp://superuser.com/questions/652089/how-to-set-the-default-path-directory-to-the-directory-where-the-session-was-sta. ",
    "davejamesmiller": "\nBy way of workaround, is there a way to not name a window when creating it?\n\nI would like to know the same thing - I prefer the automatic renaming.\n. > The tmux set-window-option automatic-rename on on the second window actually ends up setting that option on the first window when I run mux start dev. The second window is unaffected and is still named 'dev'.\nThis is because tmux sets the option on whichever window has focus. The solution is:\nyaml\n      panes:\n        - tig:\n          - tmux set-window-option -t1 automatic-rename on # Window 1\n          - tmux set-window-option -t2 automatic-rename on # Window 2\n          - clear\n        - #bash\nThanks for pointing me in the right direction - I hadn't thought to override it with this command. (I would still prefer that tmuxinator allow unnamed windows though...)\n. @xGabba Not on my machine \ud83d\ude09\nset -g base-index 1\nset -g pane-base-index 1\nBut yes, good point. \ud83d\ude03. The layout: line is indented by one space too many, making the YAML invalid.\n. +1\n. ",
    "eisenreich": "@davejamesmiller keep in mind, that the windows start with 0 not with 1.. ",
    "dbingham": "To be clear, I mean to distinguish this from having a single default for all windows in the session.  Rather, I'd like to be able to specify a different directory for each window.\n. No. Aziz labeled it as a feature request so, I assume that means it isn't currently possible.\n. ",
    "rolisz": "I'm interested in this as well. Did you find a way?\n. ",
    "DDAZZA": "+1 \n. ",
    "waiting-for-dev": "+1\n. ",
    "Tuurlijk": "+1\n. My solution is currently to change into the needed directory (if it differs from the root) manually and then clear the screen of the pane using send keys.\n```\nname: work\nroot: ~/Projects/CompanyName\nwindows:\n  - local:\n      layout: tiled\n      panes:\n        - cd ~; tmux send-keys C-l\n  - someOtherWindow:\n```\nAnd then in the .tmux.conf I set the split commands to use the current path of the active pane to create a new pane.\n```\nuse PREFIX / to split window horizontally and PREFIX - to split vertically\nbind / split-window -h -c \"#{pane_current_path}\"\nbind - split-window -v -c \"#{pane_current_path}\"\n```\nThis currently 'works for me'.\n ;-)\n. ",
    "devth": ":+1: \n. ",
    "AdrieanKhisbe": "I would be interested in that feature too! :)\nFor now what I do is putting \" cd mydir && clear\"\u0300 as the command. \n- clear achieve the same effect than tmux send-keys C-l in @Tuurlijk solution\n- the leading space prevent this command to be registered in the shell history. (zsh)\n. @ethagnawl Awesome!\nThanks a lot for your reactivity \ud83d\ude03 . ",
    "AoDev": "+1 and thanks @AdrieanKhisbe for tmp solution :)\n. ",
    "ae35unit": "+1 - how does this feature still not exist?\n. ",
    "imakewebthings": "The changelog indicates this was added in 0.6.10 but I don't see it working in that version either. Can anyone confirm that it works for them and that I am just, somehow, being a bad user?\n. ",
    "ChillarAnand": "Is there a way to run specific command on all panes in a window?\n. ",
    "seanh": "I don't remember whether I did something to fix it, but the problem isn't happening for me anymore with my current setup\n. ",
    "Priezt": "No, there are no dots\n2014-08-19 13:26 GMT+08:00 Tricorius notifications@github.com:\n\nI'm curious, did your [project] name contain \"dots\" ( . )? I just tried to\nfigure this out with a new mix config file on an OS X Yosemite machine.\nmux new blog.domain.com\ncaused issues but\nmux new blog-domain-com\nwas fine\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/178#issuecomment-52591946\n.\n. \n",
    "hcontreras": "Same problem... :(\nOS X Maverics\ntmux: 1.8\nmux: 0.6.10\nFirst, checking if everything's ok.\n~$ mux doctor\nChecking if tmux is installed ==> Yes\nChecking if $EDITOR is set ==> Yes\nChecking if $SHELL is set ==> Yes\nThis is what I did...\n~$ mux new project1\nHere's my project.yml file\n```\n~/.tmuxinator/project1.yml\nname: project1\nroot: ~/\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim \n```\nI run it like this\n~$ mux project1\nThis is the result\nnew-session: illegal option -- c\nusage: new-session [-AdDP] [-F format] [-n window-name] [-s session-name] [-t target-session] [-x width] [-y height] [command]\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nno sessions\nHere's the debug.\n```\n!/bin/bash\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server\\; has-session -t project1 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /Users/humbertocontreraspina\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s project1 -n editor -c /Users/humbertocontreraspina\n# Create other windows.\n# Window \"editor\"\ntmux send-keys -t project1:0.0 '' C-m\n  tmux send-keys -t project1:0.0 vim C-m\ntmux select-layout -t project1:0 main-vertical\ntmux select-pane -t project1:0.0\ntmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t project1\nelse\n  tmux -u switch-client -t project1\nfi\n```\nWhat am I missing?\nHelp, please!\n. Thank you so much, @Soliah \nIt worked upgrading to 1.9a\n:) :+1: :100: \n. ",
    "Undistraction": "Did this make it in? Can we load project-local configurations?\n. ",
    "tarky": "I also want this feature. \n. ",
    "ianks": "Is this feature not going to be ACKed?\n. @adamstrickland it is about 2 years late for code nits like that IMO. Low chance the contributor will make it back to fix those. Might as well merge it then refactor however is necessary.\n. Sorry if that came off wrong @adamstrickland, I just don't like seeing when a contributor puts a lot of time and effort into adding functionality to a project, just to have it ignored. I think its rather unfair. I'm happy it is working out this time though :smile: \n. ",
    "DeepAnchor": "this is a very useful feature, any reason to not merge this?\n. ",
    "lowks": "The directory is there and in actual fact the file is created but then that error still pops up.\n\nOn 10 Jan, 2014, at 6:14 am, Christopher Chow notifications@github.com wrote:\nThis message is eligible for Automatic Cleanup! (notifications@github.com) Add cleanup rule | More info \nIt looks like you don't have permissions to create the file testing.yml in ~/.tmuxinator. Try creating the directory first and making sure you have read and write permissions to that directory.\n\u2014\nReply to this email directly or view it on GitHub.\n. Alright I have tested it and after setting the EDITOR in my bash it works. Could we maybe set the EDITOR to a default value such as \"vi\" if not set or alternatively give a better error message?\n. great!\n\nOn Tue, Jan 14, 2014 at 12:17 PM, Christopher Chow <notifications@github.com\n\nwrote:\nI don't think a tool should be setting environment variables. That could\ncause weird breakages with shell configurations.\nA error message would definitely be better. I think we can just delegate\nto mux doctor in that case.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/aziz/tmuxinator/issues/186#issuecomment-32237649\n.\n. \n",
    "hirakiuc": "Hi, lowks.\nDid you set EDITOR as environment variable ? If you didn't, check \"Editor and Shell\".\n\nIn my case, I didn't set EDITOR as environment variable and execute \"tmuxinator new myproj\" in my shell.\nTmuxinator will create ~/.tmuxinator/myproj.yml and execute \"$EDITOR ~/.tmuxinator/myproj.yml\" as a shell command (may be at  this code).\nThen, I didn't set $EDITOR ,  so tmuxinator executed \"  ~/. tmuxinator/myproj. yml\" as a command. \nThe ~/.tmuxinator/myproj.yml file can't execute (which don't have x permission).\nSo shell said, \"permission denied\".\n. ",
    "acook": "I'm having the same issue here, panes seem to be ignored completely.\n. ",
    "simendsjo": "@Soliah Thanks - you identified the problem. Setting pane-base-index fixed the issue.\n. ",
    "JustinAiken": "I'm seeing the same thing, I've tried setting pane-base-index in my tmux.conf to both 0 and 1.\n``` yaml\n~/.tmuxinator/foo.yml\nname: foo\nroot: ~/\nwindows:\n  - Foo:\n    layout: even-vertical\n    panes:\n      - hi:\n        - echo \"hi\"\n      - vim\n```\n``` bash\n!/bin/zsh\ntmux start-server\\; has-session -t foo 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s foo -n Foo\n# Set the default path.\n  tmux set-option -t foo default-path \\~/project 1>/dev/null\n# Create other windows.\n# Window \"Foo\"\ntmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t foo\nelse\n  tmux -u switch-client -t foo\nfi\n```\n. ",
    "locks": "@Soliah Your solution is not working for me, as the session is not detached.\ntmux 1.8\ntmuxinator 0.6.7\n. ",
    "bcavileer": "I created a shell script called start_projectname \nmux start projectname &\nDon't forget to make the script exec (i.e. chmod u+x start_projectname)\n./start_projectname\nI do get a message \"open terminal failed: not a terminal\", but then the shell returns and I have an unattached tmux session by the name of \"projectname\"\ntmux list-sessions\ntmux a -t projectname\n. ",
    "wedens": "i think it's better to have some option to mux start for starting session detached. it'll be very useful\n. ",
    "ZeusTheTrueGod": "Guys, there is an easy trick, just add this in windows: in your .yml config file\n-detach: tmux detach && tmux kill-window\n. ",
    "mscoutermarsh": "I'm having the same problem. Commands in windows will run. Commands in panes do not.\n. I did, but had a typo in my conf so it wasn't reloading. All good now! :star2: \n. ",
    "JonRowe": "Done.\n. Ah yes, the whitespace was the issue, would you accept a PR noting this on the read me?. Looks good to me. ",
    "nicolagit": "Hi. I'm having the same issue with tmuxinator 0.6.6.\nI can get only the first windows opens, even if i try something very simple. e.g. with the following configuration i get only the \"editor\" window.\nwindows:\n- editor: ls\n- server: ls\n- logs: ls\nIn my tmux.conf file I tried with and without the following options, but the result is the same:\n- set -g base-index 1\n- setw -g pane-base-index 1\n. sorry but i've been offline for a while...\ni'm using ver1.6 as well --> i'll try upgrading to 1.8 too\nthanks\n. ",
    "phlegx": "\nmux debug projectname\n#!/bin/bash\ntmux start-server\\; has-session -t projectname 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/workspace/projectname\n  # Run pre command.\n\n  # Create the session and the first window.\n  TMUX= tmux new-session -d -s projectname -n editor\n  # Set the default path.\n  tmux set-option -t projectname default-path \\~/workspace/projectname 1>/dev/null\n  # Create other windows.\n  tmux new-window -c \\~/workspace/projectname -t projectname:1 -n server\n  tmux new-window -c \\~/workspace/projectname -t projectname:2 -n logs\n  tmux new-window -c \\~/workspace/projectname -t projectname:3 -n console\n  tmux new-window -c \\~/workspace/projectname -t projectname:4 -n sidekiq\n  tmux new-window -c \\~/workspace/projectname -t projectname:5 -n ctags_index\n  # Window \"editor\"\n  tmux send-keys -t projectname:0.0 cd\\ /home/user/workspace/projectname C-m\n\n  tmux send-keys -t projectname:0.0 vim\\ -c\\ \\'NERDTree\\ projectname\\' C-m\n  tmux splitw -t projectname:0\n  tmux select-layout -t projectname:0 cb33,156x29,0,0\\[156x24,0,0,156x4,0,25\\]\n  tmux send-keys -t projectname:0.1 cd\\ /home/user/workspace/projectname C-m\n\n\n  tmux select-layout -t projectname:0 cb33,156x29,0,0\\[156x24,0,0,156x4,0,25\\]\n  tmux select-pane -t projectname:0.0\n  # Window \"server\"\n  tmux send-keys -t projectname:1 cd\\ /home/user/workspace/projectname C-m\n  tmux send-keys -t projectname:1 bundle\\ exec\\ rails\\ s C-m\n  # Window \"logs\"\n  tmux send-keys -t projectname:2 cd\\ /home/user/workspace/projectname C-m\n  tmux send-keys -t projectname:2 tail\\ -f\\ logs/development.log C-m\n  # Window \"console\"\n  tmux send-keys -t projectname:3 cd\\ /home/user/workspace/projectname C-m\n  tmux send-keys -t projectname:3 bundle\\ exec\\ rails\\ c C-m\n  # Window \"sidekiq\"\n  tmux send-keys -t projectname:4 cd\\ /home/user/workspace/projectname C-m\n  tmux send-keys -t projectname:4 bundle\\ exec\\ sidekiq C-m\n  # Window \"ctags_index\"\n  tmux send-keys -t projectname:5 cd\\ /home/user/workspace/projectname C-m\n  tmux send-keys -t projectname:5 ctags\\ -R\\ . C-m\n  tmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t projectname\nelse\n  tmux -u switch-client -t projectname\nfi\n\n. Not yet @Soliah , will to that in the evening and report the status here. Thanks for the support!\n. I just installed the pre version, but no luck. Still only one window is available\nI did this: \n\ngem uninstall tmuxinator\ngem install tmuxinator -v 0.6.7.pre\n\n. Sure thing:\n\ntmux show-options -g\nbase-index 0\nbell-action any\nbell-on-alert off\ndefault-command \"\"\ndefault-path \"\"\ndefault-shell \"/bin/bash\"\ndefault-terminal \"screen\"\ndestroy-unattached off\ndetach-on-destroy on\ndisplay-panes-active-colour red\ndisplay-panes-colour blue\ndisplay-panes-time 1000\ndisplay-time 750\nhistory-limit 2000\nlock-after-time 0\nlock-command \"lock -np\"\nlock-server on\nmessage-attr none\nmessage-bg yellow\nmessage-command-attr none\nmessage-command-bg black\nmessage-command-fg yellow\nmessage-fg black\nmessage-limit 20\nmouse-resize-pane off\nmouse-select-pane off\nmouse-select-window off\nmouse-utf8 on\npane-active-border-bg default\npane-active-border-fg green\npane-border-bg default\npane-border-fg default\nprefix C-a\nprefix2 none\nrepeat-time 500\nset-remain-on-exit off\nset-titles off\nset-titles-string \"#S:#I:#W - \"#T\"\"\nstatus on\nstatus-attr none\nstatus-bg green\nstatus-fg black\nstatus-interval 15\nstatus-justify left\nstatus-keys vi\nstatus-left \"[#S]\"\nstatus-left-attr none\nstatus-left-bg default\nstatus-left-fg default\nstatus-left-length 10\nstatus-right \"\"#22T\" %H:%M %d-%b-%y\"\nstatus-right-attr none\nstatus-right-bg default\nstatus-right-fg default\nstatus-right-length 40\nstatus-utf8 on\nterminal-overrides \"*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\\E]52;%p1%s;%p2%s\\007:Cc=\\E]12;%p1%s\\007:Cr=\\E]112\\007:Cs=\\E[%p1%d q:Csr=\\E[2 q,screen*:XT\"\nupdate-environment \"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY\"\nvisual-activity off\nvisual-bell off\nvisual-content off\nvisual-silence off\nword-separators \" -_@\"\n\n. I just did.\nHere my tmux.conf file\n\nunbind C-b\nset -g prefix C-a\nbind C-a send-prefix\nset -g base-index 1\nsetw -g pane-base-index 1\n\nBut it doesn't seem that pane-base-index is loaded  tmux show-options -g\n\nbase-index 1\nbell-action any\nbell-on-alert off\ndefault-command \"\"\ndefault-path \"\"\ndefault-shell \"/bin/bash\"\ndefault-terminal \"screen\"\ndestroy-unattached off\ndetach-on-destroy on\ndisplay-panes-active-colour red\ndisplay-panes-colour blue\ndisplay-panes-time 1000\ndisplay-time 750\nhistory-limit 2000\nlock-after-time 0\nlock-command \"lock -np\"\nlock-server on\nmessage-attr none\nmessage-bg yellow\nmessage-command-attr none\nmessage-command-bg black\nmessage-command-fg yellow\nmessage-fg black\nmessage-limit 20\nmouse-resize-pane off\nmouse-select-pane off\nmouse-select-window off\nmouse-utf8 on\npane-active-border-bg default\npane-active-border-fg green\npane-border-bg default\npane-border-fg default\nprefix C-a\nprefix2 none\nrepeat-time 500\nset-remain-on-exit off\nset-titles off\nset-titles-string \"#S:#I:#W - \"#T\"\"\nstatus on\nstatus-attr none\nstatus-bg green\nstatus-fg black\nstatus-interval 15\nstatus-justify left\nstatus-keys vi\nstatus-left \"[#S]\"\nstatus-left-attr none\nstatus-left-bg default\nstatus-left-fg default\nstatus-left-length 10\nstatus-right \"\"#22T\" %H:%M %d-%b-%y\"\nstatus-right-attr none\nstatus-right-bg default\nstatus-right-fg default\nstatus-right-length 40\nstatus-utf8 on\nterminal-overrides \"*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\\E]52;%p1%s;%p2%s\\007:Cc=\\E]12;%p1%s\\007:Cr=\\E]112\\007:Cs=\\E[%p1%d q:Csr=\\E[2 q,screen*:XT\"\nupdate-environment \"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY\"\nvisual-activity off\nvisual-bell off\nvisual-content off\nvisual-silence off\nword-separators \" -_@\"\n\n. This solved the problem: https://github.com/tmuxinator/tmuxinator/issues/168#issuecomment-27843918\nI initially had  tmux version 1.6\n. ",
    "mbrennan-afa": ":+1: \n. ",
    "dekz": "(Y)\nalthough I'd maybe include a default like ./.tmuxinator.yml with a special command tmuxinator project or tmuxinator start to search for this file.\n. ",
    "typekpb": "+1\nany updates here?\n. I don't get it. What is the point of additional repo here? If it's broken, why not fixing it here?\n@ohcibi would you mind sending pull request providing fix for completition on this repo?\n. ",
    "nicolaiskogheim": "This would have been really, really nice.\n. ",
    "nathanielks": "also using oh-my-zsh if that's helpful...\n. thanks for the help!!\n. @Soliah I tested that and it works, but for some reason the commands aren't being run? Some output before it tmux opens up says pane 1 & 2 can't be found?\n. version 0.6.7 and I copied and pasted the config provided =\\ ( I updated the file paths to the real ones )\nHere's the output to be more specific:\ncan't find pane: 1\ncan't find pane: 1\ncan't find pane: 1\narranging in: main-vertical\ncan't find pane: 2\ncan't find pane: 2\ncan't find pane: 2\narranging in: main-vertical\n. So sorry:\nassume-paste-time 1\nbase-index 1\nbell-action any\nbell-on-alert off\ndefault-command \"/bin/zsh\"\ndefault-path \"\"\ndefault-shell \"/bin/zsh\"\ndefault-terminal \"screen-256color\"\ndestroy-unattached off\ndetach-on-destroy on\ndisplay-panes-active-colour blue\ndisplay-panes-colour brightred\ndisplay-panes-time 1000\ndisplay-time 750\nhistory-limit 1000\nlock-after-time 0\nlock-command \"lock -np\"\nlock-server on\nmessage-attr none\nmessage-bg black\nmessage-command-attr none\nmessage-command-bg black\nmessage-command-fg yellow\nmessage-fg brightred\nmessage-limit 20\nmouse-resize-pane off\nmouse-select-pane on\nmouse-select-window off\nmouse-utf8 on\npane-active-border-bg default\npane-active-border-fg green\npane-border-bg default\npane-border-fg black\nprefix C-a\nprefix2 none\nrenumber-windows off\nrepeat-time 500\nset-remain-on-exit off\nset-titles off\nset-titles-string \"#S:#I:#W - \"#T\"\"\nstatus on\nstatus-attr none\nstatus-bg brightblack\nstatus-fg brightgreen\nstatus-interval 2\nstatus-justify left\nstatus-keys vi\nstatus-left \"#[fg=brightblack]#H\"\nstatus-left-attr none\nstatus-left-bg default\nstatus-left-fg default\nstatus-left-length 120\nstatus-position bottom\nstatus-right \"#[fg=yellow]#S#[fg=default] /// #(battery -o tmux -m default -g default)#[fg=default]%a %d %b %H:%M \"\nstatus-right-attr none\nstatus-right-bg default\nstatus-right-fg default\nstatus-right-length 100\nstatus-utf8 on\nterminal-overrides \"xterm*:smcup@:rmcup@\"\nupdate-environment \"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY\"\nvisual-activity on\nvisual-bell off\nvisual-content off\nvisual-silence off\nword-separators \" -_@\"\n. tmux version 1.8\n. sure can and sure did. That was it!\n. ",
    "christianbundy": "Is pstorm exiting, or remaining open? You might just want to set your command to pstorm && whatever-else-you-want-to-do\n. ",
    "Fl4t": "Same here. You can downgrade to 1.8 until it is fixed.\n. ",
    "MelTraX": "I have/had the same problem. After changing root: ~/ to root: /home/username it opened all windows for me.\nThe shell escaping seems to break ~.\nThe unknown option: default-path still needs to be fixed but that doesn't bother me atm.\n. ",
    "shapeshed": "Reoport from userland that 0.6.7.pre fixes this for me.\n. ",
    "mikker": ":+1: 0.6.7 is the saviour.\n. ",
    "maxprokopiev": "rvm should set GEM_HOME env var, so I think there can be a problem, but I don't use rvm anymore, so can't test if there are any other variables which should be cleared\n. @axelson I'm pretty happy with my fix, because it works for me perfectly and I don't want to always keep in mind that I need to start tmux before working with tmuxinator. But it'll be great if you provide pull request for this workaround :wink:\n. ",
    "axelson": "A work-around for this is to start a tmux session without tmuxinator first before starting any tmuxinator sessions. Perhaps this can be incorporated into the solution instead of unsetting these specific environment variables.\n. ",
    "zackp30": "tmuxinator 0.6.7\ntmux 1.8\n. Snap, sorry for not replying, yes, I did manage to fix the issue, I think it was a combination of reinstalling tmuxinator, and upgrading tmux (currently using 1.9a).\n. ",
    "machty": "I'm alos experiencing this issue; @zackp30 did you ever fix this issue?\ntmux 1.8\ntmuxinator 0.6.8\n. ",
    "tek": "well, tmux is version 2 now, but it should be obvious without test case that 1.10.to_f results in 1.1, which is < 1.8.\nhttps://github.com/tmuxinator/tmuxinator/blob/master/lib/tmuxinator/config.rb#L30\n. ",
    "asermax": "Can confirm this on Debian Jessie using tmux 1.9-3. \nPanes are created correctly for me, but for every project that haves more than one window, tmuxinator only opens the first window defined on the yml file.\n. ",
    "base10": "I am also seeing this after using tmux 1.9a on Mac OS X 10.9.2 with tmuxinator 0.6.7 running ruby 2.0.0p451. \n. ",
    "joxxoxo": "Same for me, switching to tmux 1.8 helped (thanks @artmees)\n. ",
    "neurotech": "~~I can't switch to 1.8 on OSX 10.9.2~~\n$ brew switch tmux 1.8\nError: tmux does not have a version \"1.8\" in the Cellar.\nVersions available: 1.9a\nFixed by following: https://github.com/Homebrew/homebrew/wiki/FAQ#can-i-install-my-own-stuff-to-usrlocal\n. ",
    "freephys": "Ubuntu 12.04 LTS has tmux 1.6 as the default max version one, I have to manually install to tmux 1.8.5 to work with this great tool!\n. ",
    "LandonSchropp": "I ran into this on OS X. Reverting to 1.8.5 worked for me as well.\n. @Soliah I was able to reproduce this using the sample configuration file in the readme.\n. @artmees When you switched to tmux 1.9a, did you use brew switch tmux 1.9a? If so, you'll probably have to kill the old tmux server process. The easiest way to do that is to restart your machine.\n. @Soliah Hmm, that's strange, it just started working for me with 1.9a. The only thing I can think of is I updated my Ruby version. Is there any way that could have something to do with it? @artmees What version of Ruby are you running? I see up above @base10 was using 2.0.0.\n. Thanks for the reply! I really should have dug through the code myself and found the implementation. \nCurrently, I'm running 2.0.0 (I was surprised to find out I wasn't running 2.1.x).\nI have three guesses for the performance:\n- The disk IO is slowing it down. This doesn't really seem likely, since my Mac has an SSD, but it's possible.\n- The disk IO is fine, but it takes a bit to fire up the Ruby interpreter.\n- The older version of Ruby is to blame. I'm trying to update now, but I'm on Starbucks wifi, so it's taking a bit.\nWould you mind benchmarking inside of Ruby to see if the interpreter or the disk IO is to blame?\n. Wow, what a speedup! I'm now running Ruby 2.1.2 and time tmuxinator list took 0.13 seconds. That's good enough for me, unless you think it could be made any faster. Thanks again for the help!\n. I would really love to see this. It would be way more convenient to add tmuxinator to my Brewfile.. @nexeck That's awesome! Thanks for doing that. \ud83d\ude03 . ",
    "a14m": "as I mentioned\n\ntmuxinator stopped creating the panels and windows correctly\n\nor as @asermax mentioned in more details\n\nPanes are created correctly for me, but for every project that haves more than one window, tmuxinator only opens the first window defined on the yml file.\n. here is my .tmux.conf\n\n```\nset -g default-terminal \"xterm-256color\"\nstart indexing from 1 not 0\nset -g base-index 1\nset -g pane-base-index 1\n```\nand here is a project file that doesn't create the 2nd and 3rd windows on 1.9a only creates the first window with it's panes correctly\n```\n~/.tmuxinator/ask.yml\nname: ask\nroot: ~/Vagrant/ruby/www/Backend\nOptional tmux socket\nsocket_name: foo\nRuns before everything. Use it to start daemons etc.\npre: sudo /etc/rc.d/mysqld start\nRuns in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: rbenv shell 2.0.0-p247\nPass command line options to tmux. Useful for specifying a different tmux.conf.\ntmux_options: -f ~/.tmux.conf\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: byobu\nwindows:\n  - server:\n      layout: 5f72,181x55,0,0{50x55,0,0,0,130x55,51,0,3}\n      panes:\n        - zeus start\n        #- tail -f log/development.log\n        -\n  - foreman: foreman start -f Procfile.dev #  NOT CREATED \n  - grunt: cd ../webapp && grunt server    #  NOT CREATED \n```\nand here is the mux debug ask\n```\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\nprotocol version mismatch (client 8, server 7)\n!/usr/local/bin/bash\ntmux -f ~/.tmux.conf start-server\\; has-session -t ask 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd ~/Vagrant/ruby/www/Backend\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux -f ~/.tmux.conf new-session -d -s ask -n server\n# Set the default path.\n  tmux -f ~/.tmux.conf set-option -t ask default-path \\~/Vagrant/ruby/www/Backend 1>/dev/null\n# Create other windows.\n  tmux -f ~/.tmux.conf new-window -c \\~/Vagrant/ruby/www/Backend -t ask:1 -n foreman\n  tmux -f ~/.tmux.conf new-window -c \\~/Vagrant/ruby/www/Backend -t ask:2 -n grunt\n# Window \"server\"\ntmux -f ~/.tmux.conf send-keys -t ask:0.0 zeus\\ start C-m\ntmux -f ~/.tmux.conf splitw -t ask:0\n  tmux -f ~/.tmux.conf select-layout -t ask:0 5f72,181x55,0,0{50x55,0,0,0,130x55,51,0,3}\ntmux -f ~/.tmux.conf select-layout -t ask:0 5f72,181x55,0,0{50x55,0,0,0,130x55,51,0,3}\ntmux -f ~/.tmux.conf select-pane -t ask:0.0\n# Window \"foreman\"\ntmux -f ~/.tmux.conf send-keys -t ask:1 foreman\\ start\\ -f\\ Procfile.dev C-m\n# Window \"grunt\"\ntmux -f ~/.tmux.conf send-keys -t ask:2 cd\\ ../webapp\\ \\&\\&\\ grunt\\ server C-m\ntmux -f ~/.tmux.conf select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -f ~/.tmux.conf -u attach-session -t ask\nelse\n  tmux -f ~/.tmux.conf -u switch-client -t ask\nfi\n```\n. so how do i solve this ?\n. ruby 2.1.0p0\n. tmux is installed via homebrew... all tmux sessions are killed before starting tmux...\nand the problem still exists... for me i have 2 different ruby installed one in the project i'm working on and one for the system global... and i've made sure that tmux sees the system version not the project version....\nand the problem is still there... like i said only the first window declared is shown and the others are not.\n. yes\n. ",
    "jpstokes": "I'm experiencing this same problem....from another thread I did determine that the command to create a new window is failing with 'bad working directory: No such file or directory'\nfailing command:\ntmux new-window -c /path_to_project -t session_name:2 -n server\nMy yml file:\n```\nname: project_name\nproject_root: /path_to_project/project_name/\nwindows:\n  - editor:\n      layout: f2bf,272x69,0,0[272x44,0,0,0,272x24,0,45{135x24,0,45,1,136x24,136,45,2}]\n      panes:\n        - vim\n        - guard\n        - rails c\n  - server: foreman start\n```\n. Finally figure out this problem and it was do to my own ignorance...I had an incorrect project path.\n. ",
    "oborba": "It worked only when I restart the machine.\nUsing tmux 1.9a on Ubuntu 4.12\n. ",
    "RobertDober": "root: '~'\ndoes the job too, was not aware of ~ special meaning in yaml, at least this documents the issue.\n. ",
    "squidbits": "I'm getting the same result with the same setup, but Ruby 2.1.0.\nthestig:~ johnf$ mux squidbits\ncan't find pane: 1\narranging in: main-vertical\ncan't find pane: 2\ncan't find pane: 2\narranging in: main-vertical\n. ",
    "andrelevi": "Soliah, you are correct in thinking that I forgot to set those options.  Setting\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\nfixed the issue for me.  Thanks a lot :)\n. ",
    "kennethkalmer": "I would like to set a global pre: unset RBENV_VERSION so that rbenv can pickup the local .ruby-version file in the project, so this would be useful.\n. This might be a smoother path for #208 too\n. ",
    "ZackMattor": "+1\n. ",
    "styts": "I'm surprised it's not such a common use case to want to start a project in background/deamon mode.\nWould it be possible to at least mux start project & and then send it the detatch key combination somehow?\n. ",
    "canselcik": "mux open a displays:\n```\n~/.tmuxinator/a.yml\nname: a\nroot: /Users/user/Desktop/CS\\ Classes/SP2014/CS425/DistributedFS/out/artifacts/DistributedFS_jar\nwindows:\n  - mp3:\n      layout: tiled\n      panes:\n        - 'java -jar DistributedFS.jar ../../../settings.conf 127.0.0.1 1025'\n        - 'java -jar DistributedFS.jar ../../../settings.conf 127.0.0.1 1026'\n        - 'java -jar DistributedFS.jar ../../../settings.conf 127.0.0.1 1027'\n        - 'java -jar DistributedFS.jar ../../../settings.conf 127.0.0.1 1028'\n```\nmux debug a prints:\n```\n!/bin/bash\ntmux start-server\\; has-session -t a 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /Users/user/Desktop/CS\\ Classes/SP2014/CS425/DistributedFS/out/artifacts/DistributedFS_jar\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s a -n mp3\n# Create other windows.\n# Window \"mp3\"\ntmux send-keys -t a:1.1 '' C-m\n  tmux send-keys -t a:1.1 java\\ -jar\\ DistributedFS.jar\\ ../../../settings.conf\\ 127.0.0.1\\ 1025 C-m\ntmux splitw -t a:1\n  tmux select-layout -t a:1 tiled\ntmux send-keys -t a:1.2 '' C-m\n  tmux send-keys -t a:1.2 java\\ -jar\\ DistributedFS.jar\\ ../../../settings.conf\\ 127.0.0.1\\ 1026 C-m\ntmux splitw -t a:1\n  tmux select-layout -t a:1 tiled\ntmux send-keys -t a:1.3 '' C-m\n  tmux send-keys -t a:1.3 java\\ -jar\\ DistributedFS.jar\\ ../../../settings.conf\\ 127.0.0.1\\ 1027 C-m\ntmux splitw -t a:1\n  tmux select-layout -t a:1 tiled\ntmux send-keys -t a:1.4 '' C-m\n  tmux send-keys -t a:1.4 java\\ -jar\\ DistributedFS.jar\\ ../../../settings.conf\\ 127.0.0.1\\ 1028 C-m\ntmux select-layout -t a:1 tiled\ntmux select-pane -t a:1.1\ntmux select-window -t 1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t a\nelse\n  tmux -u switch-client -t a\nfi\n``\n. @markquezada\nThat's already exactly what I am doing. That doesn't seem to be the cause of the problem with my configuration.\n. @nburkley\nThis setting fixed it for me as well. Maybe it might be a good idea to havetmuxinatoradd these entires to the.tmux.conf` upon first start.\n. ",
    "markquezada": "Also having this same issue with tmux 1.9a on OS X.\n. I generated a sample tmuxinator config and compared the results to my own. It looks like after a window declaration, you must indent the layout and panes key twice instead of once.\nI.e., This works:\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        - guard\nBut this does not:\nwindows:\n  - editor:\n    layout: main-vertical\n    panes:\n      - vim\n      - guard\n. ",
    "nburkley": "I was having a similar problem. Commands were getting run on windows but not panes. I then noticed I was getting can't find pane: errors when running tmuxinator. \nSetting the base pane index in my .tmux.conf fixed the issue for me.\nbash\nset -g base-index 1\nset -g pane-base-index 1\n. ",
    "FooBarQuaxx": "@nburkley your setting solved this issue for me.\n. ",
    "randre03": "Using tmux 2.5 have tried setting and also commenting out base-index and pane-base-index. Nothing works. . I last used tmuxinator (and tux) about 2.5-3 years ago and did not have any issues. I wonder if rolling back to earlier version would fix temporarily while waiting for #542 and #543 to be merged?\n\nRoger\n\nOn Sep 13, 2017, 11:13 PM -0400, Ryan Glassett notifications@github.com, wrote:\n@randre03https://github.com/randre03 I believe this issue is duplicated by #485https://github.com/tmuxinator/tmuxinator/issues/485 and will be resolved by #542https://github.com/tmuxinator/tmuxinator/pull/542 and #543https://github.com/tmuxinator/tmuxinator/pull/543 if and when they are merged. I can update my fork if you'd like to test.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/tmuxinator/tmuxinator/issues/225#issuecomment-329357456, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAl76em3xzFvele2XOUfSJTvrTk3QjJdks5siJm-gaJpZM4B14hI.\n. I\u2019d love to give it a shot. I tried rolling back to prior version of tmuxinator and different versions of tux just in case\u2026no help. Can\u2019t figure out why I never had any issues with it 3-4 years ago, but now this.\n\nRoger\n\nOn Sep 14, 2017, 8:56 AM -0400, Roger Randall roger@rogerrandall.com, wrote:\nI last used tmuxinator (and tux) about 2.5-3 years ago and did not have any issues. I wonder if rolling back to earlier version would fix temporarily while waiting for #542 and #543 to be merged?\n\nRoger\n\nOn Sep 13, 2017, 11:13 PM -0400, Ryan Glassett notifications@github.com, wrote:\n@randre03https://github.com/randre03 I believe this issue is duplicated by #485https://github.com/tmuxinator/tmuxinator/issues/485 and will be resolved by #542https://github.com/tmuxinator/tmuxinator/pull/542 and #543https://github.com/tmuxinator/tmuxinator/pull/543 if and when they are merged. I can update my fork if you'd like to test.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/tmuxinator/tmuxinator/issues/225#issuecomment-329357456, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAl76em3xzFvele2XOUfSJTvrTk3QjJdks5siJm-gaJpZM4B14hI.\n. ",
    "stasiek": "Please, help? : D\n. I guess it's pretty old: ruby 1.8.7 (2012-02-08 patchlevel 358) [universal-darwin12.0]\n. Sb should add it to ABOUT.md or something... ; )\nIt's\nruby 2.1.1p76 (2014-02-24 revision 45161) [x86_64-darwin12.0]\nand still\nbash\n$ mux start temp\n/Library/Ruby/Gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/project.rb:20:in `windows': undefined method `with_index' for #<Array:0x10b765aa0> (NoMethodError)\n    from /Library/Ruby/Gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/project.rb:99:in `windows?'\n    from /Library/Ruby/Gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/config.rb:78:in `validate'\n    from /Library/Ruby/Gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/cli.rb:50:in `start'\n    from /Library/Ruby/Gems/1.8/gems/thor-0.19.1/lib/thor/command.rb:27:in `__send__'\n    from /Library/Ruby/Gems/1.8/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'\n    from /Library/Ruby/Gems/1.8/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'\n    from /Library/Ruby/Gems/1.8/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'\n    from /Library/Ruby/Gems/1.8/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'\n    from /Library/Ruby/Gems/1.8/gems/tmuxinator-0.6.7/bin/mux:18\n    from /usr/bin/mux:23:in `load'\n    from /usr/bin/mux:23\nOh and I reinstalled tmuxinator after upgrading  ruby ofc.\n. ",
    "siadat": ":+1: \nI would also appreciate an on-start hook. I want to use it to refresh my tmux status line, e.g.:\ninit:\n  - tmux refresh -S\n. ",
    "jclif": ":+1:\n. Huzzah!\n. ",
    "drawks": "Whoops, I'm not really a ruby guy, I accidentally used parens instead of square braces for the arglist to Dir.\n. I think the commit merged to fix this is broken. The version comparison string evaluates in the wrong direction.\n. Actually, if you did any testing at all with your commit you'd see that the line in question can be deleted completely with no effective change since you must have been running against thor at 0.18 or higher for your version of the change to not throw an error AND it would have been a noop since your comparison is backwards. \nNot sure why you didn't just merge my original pull request which fixed this issue, but rather commit an untested change which didn't fix anything.\n. ",
    "memelet": "I am running OSX 10.9, the lastest iTerm and the latest tmuxinator, and get this error. This is with a new/first-time install of tmuxinator. (Have not tried on my linux yet.)\n. ",
    "svenXY": "The default yaml file, unchanged, others behave idetically\n``` yaml\n~/.tmuxinator/blalaber.yml\nname: blalaber\nroot: ~/\nOptional tmux socket\nsocket_name: foo\nRuns before everything. Use it to start daemons etc.\npre: sudo /etc/rc.d/mysqld start\nRuns in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: rbenv shell 2.0.0-p247\nPass command line options to tmux. Useful for specifying a different tmux.conf.\ntmux_options: -f ~/.tmux.mac.conf\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: byobu\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        - guard\n  - server: bundle exec rails s\n  - logs: tail -f log/development.log\n```\nsh\n% mux debug blalaber\n/home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/project.rb:20:in `windows': undefined method `with_index' for #<Array:0x7f8049e1be98> (NoMethodError)\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/project.rb:99:in `windows?'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/config.rb:78:in `validate'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/tmuxinator-0.6.7/lib/tmuxinator/cli.rb:65:in `debug'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/thor-0.19.1/lib/thor/command.rb:27:in `__send__'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'\n    from /home/svh/.rbenv/versions/1.8.7-p375/lib/ruby/gems/1.8/gems/tmuxinator-0.6.7/bin/mux:18\n    from /home/svh/.rbenv/versions/1.8.7-p375/bin/mux:23:in `load'\n    from /home/svh/.rbenv/versions/1.8.7-p375/bin/mux:23\nsh\n % mux doctor\nChecking if tmux is installed ==> Yes\nChecking if $EDITOR is set ==> Yes\nChecking if $SHELL is set ==> Yes\n. ",
    "SeriousM": "thank you @Soliah!\n. ",
    "goofrider": "never mind. looks like it was because i was install tmuxinator in a tmux window. it worked fine outside of the tmux session and it works inside tmux once i termintated all old windows and started a fresh new session.\n. ",
    "edouardberthe": ":+1:  it would be great for me, I have a project with 4 main directories, and sometimes I would like to open some of them, sometimes not. I could do :\nmux start project dir1 dir3 dir4\n. ",
    "MuschPusch": "\n1 most of my yaml files look the 99% the same\n. \n",
    "hersha": "Hmmmm could pass the yaml through ERB before parsing it. This would let you do lots of customization.\nedit:\nLooks like this already happens. You can put ERB in you YAML file and do whatever ruby stuff you want with it.\nIt might be nice to provide a variable containing the trailing args so you don't need to know where in ARGV they are. Or shift everything but the trailing args off of ARGV.\n. You can use ERB in the YAML files like this.\n``` yaml\nname: sample\nroot: ~/\nwindows:\n  - stats:\n    - ssh <%= ARGV[n] %>\n    - tail -f /var/log/stats.log\n```\n. ",
    "enricribas": "I can duplicate this on Ubuntu 12.10 yet the same script on MacOSX works fine. \n. ",
    "DVG": "tmux.conf\n```\n\nKey Bindings\n\nset -g prefix C-a\nunbind C-b\nQuickly Reload .tmux.conf\nbind r source-file ~/.tmux.conf \\;\n  display \"Reloaded!\"\nSend C-a to undelyinng application by pressing it twice\nbind C-a send-prefix\nSplit vertically with |\nbind | split-window -h\nSplit horizontally with -\nbind - split-window -v\nincrease scroll-back history\nset -g history-limit 5000\nquickly switch panes\nunbind ^J\nbind ^J select-pane -t :.+\nset-window-option -g automatic-rename off\nset -s escape-time 1\n\nStatus Bar\n\nenable UTF-8 support in status bar\nset -g status-utf8 on\nset refresh interval for status bar\nset -g status-interval 30\ncenter the status bar\nset -g status-justify left\nshow session, window, pane in left status bar\nset -g status-left-length 40\nset -g status-left '#[fg=green]#S#[fg=blue] #I:#P#[default]'\nshow build status hostname, date, and time in status bar\nset -g status-right-length 60\nset-option -g status-right 'Build: #(ruby ~/tmux_scripts/scripts/ci.rb) #[fg=green]#H#[default] %m/%d/%y %I:%M'\ncolor status bar\nset -g status-bg colour235\n set -g status-fg white\n\n# highlight current window\nset-window-option -g window-status-current-fg black\n set-window-option -g window-status-current-bg green\n\n# set color of active pane\nset -g pane-border-fg colour235\n set -g pane-border-bg black\n set -g pane-active-border-fg green\n set -g pane-active-border-bg black\n```\ntmux show-options -g\nbase-index 0\nbell-action any\nbell-on-alert off\ndefault-command \"\"\ndefault-path \"\"\ndefault-shell \"/usr/bin/zsh\"\ndefault-terminal \"screen\"\ndestroy-unattached off\ndetach-on-destroy on\ndisplay-panes-active-colour red\ndisplay-panes-colour blue\ndisplay-panes-time 1000\ndisplay-time 750\nhistory-limit 5000000\nlock-after-time 0\nlock-command \"lock -np\"\nlock-server on\nmessage-attr none\nmessage-bg yellow\nmessage-command-attr none\nmessage-command-bg black\nmessage-command-fg yellow\nmessage-fg black\nmessage-limit 20\nmouse-resize-pane off\nmouse-select-pane off\nmouse-select-window off\nmouse-utf8 on\npane-active-border-bg black\npane-active-border-fg green\npane-border-bg black\npane-border-fg colour235\nprefix C-a\nprefix2 none\nrepeat-time 500\nset-remain-on-exit off\nset-titles off\nset-titles-string \"#S:#I:#W - \"#T\"\"\nstatus on\nstatus-attr none\nstatus-bg colour235\nstatus-fg white\nstatus-interval 10\nstatus-justify left\nstatus-keys emacs\nstatus-left \"#[fg=green]#S#[fg=blue] #I:#P#[default]\"\nstatus-left-attr none\nstatus-left-bg default\nstatus-left-fg default\nstatus-left-length 40\nstatus-right \"Disney Countdown: #[fg=blue]#(ruby ~/tmux_scripts/scripts/countdown.rb 04 10 2014) #[default]Build: #(ruby ~/tmux_scripts/scripts/ci.rb)#[bg=colour235] #[default]%m/%d/%y %I:%M\"\nstatus-right-attr none\nstatus-right-bg default\nstatus-right-fg default\nstatus-right-length 90\nstatus-utf8 on\nterminal-overrides \"*88col*:colors=88,*256col*:colors=256,xterm*:XT:Ms=\\E]52;%p1%s;%p2%s\\007:Cc=\\E]12;%p1%s\\007:Cr=\\E]112\\007:Cs=\\E[%p1%d q:Csr=\\E[2 q,screen*:XT\"\nupdate-environment \"DISPLAY SSH_ASKPASS SSH_AUTH_SOCK SSH_AGENT_PID SSH_CONNECTION WINDOWID XAUTHORITY\"\nvisual-activity off\nvisual-bell off\nvisual-content off\nvisual-silence off\nword-separators \" -_@\"\nmux-debug\n```\n!/usr/bin/zsh\ntmux start-server\\; has-session -t project 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /home/dvg/code/projects/project\n# Run pre command.\n# Create the session and the first window.\n  TMUX= tmux new-session -d -s project -n zeus-and-servers\n# Set the default path for versions prior to 1.7\n  tmux set-option -t project default-path /home/dvg/code/projects/project 1>/dev/null\n# Create other windows.\n  tmux new-window default-path /home/dvg/code/projects/project -t project:1 -n my-library\n# Window \"zeus-and-servers\"\ntmux send-keys -t project:0.0 '' C-m\n  tmux send-keys -t project:0.0 zeus\\ start C-m\ntmux splitw -t project:0\n  tmux select-layout -t project:0 main-horizontal\ntmux send-keys -t project:0.1 '' C-m\n  tmux send-keys -t project:0.1 sleep\\ 5 C-m\n  tmux send-keys -t project:0.1 zeus\\ s C-m\ntmux splitw -t project:0\n  tmux select-layout -t project:0 main-horizontal\ntmux send-keys -t project:0.2 '' C-m\n  tmux send-keys -t project:0.2 service C-m\n  tmux send-keys -t project:0.2 bundle\\ exec\\ rails\\ s C-m\ntmux select-layout -t project:0 main-horizontal\ntmux select-pane -t project:0.0\n# Window \"my_library\"\ntmux send-keys -t project:1 library C-m\ntmux select-window -t 0\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -u attach-session -t project\nelse\n  tmux -u switch-client -t project\nfi\n```\n. For the record, it appears the problem was the very old version of tmux available by default to 12.04 Ubuntu. I added a PPA and upgraded from 1.6 to 1.9a and now everything works as expected. Cheers!\n. ",
    "nanoxd": "You should be able to wrap the command if you are following fish HEAD like outlined:\ncomplete -c mux -w tmuxinator\n. ",
    "ericguirbal": "It seems that the options base-index and pane-base-index don't have the same value. If you changed one of them in your .tmux.conf, please, change the other.\n. ",
    "caleb": "That was it. Thanks!\n. ",
    "mircsicz": "THX\n. So it can't be run o. Wheezy any longer, at least without pinning... I'll check that later\nVon meinem 4\" iOS Ger\u00e4t gesendet\n\nAm 14.12.2014 um 03:09 schrieb Christopher Chow notifications@github.com:\nI think you're version of Ruby is too old. I should probably add a minimum version of Ruby requirement to the readme. You'll need Ruby 1.9.3 or above.\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "Typpex": "i got the exact same issue regardless if i set a base index or not :(\n. ",
    "btrepp": "Looking back I think it's failing because of the older version of tmux. Unfortunately I don't have control over the tmux version. :(\n. Thanks. I'll have a look :).\n. ",
    "jby": "I'm also interested in how to add tmux-commands to the config.\nIdeally I'd like to be able to open a pane with an ssh-login to a remote system without first starting my $SHELL in that pane and then issuing the command.\n. I solved it by running tmuxinator debug on my session and then editing the output and creating a script from that:\n``` zsh\n!/usr/local/bin/zsh\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux -L jby start-server\\; has-session -t jby 2>/dev/null\nif [ \"$?\" -eq 1 ]; then\n  cd /Users/jby\n# Run pre command.\n  kinit jby\n# Create the session and the first window.\n  TMUX= tmux -L jby new-session -d -s jby -n localhost\n# Create other windows.\n  tmux -L jby new-window -c /Users/jby -t jby:2 -n host1 \"ssh host1\"\n  tmux -L jby new-window -c /Users/jby -t jby:3 -n host2 \"ssh host2\"\n  tmux -L jby new-window -c /Users/jby -t jby:4 -n host3 \"ssh host3\"\n  tmux -L jby new-window -c /Users/jby -t jby:5 -n host4 \"ssh host4\"\n  tmux -L jby new-window -c /Users/jby -t jby:6 -n host5 \"ssh host5\"\n  tmux -L jby new-window -c /Users/jby -t jby:7 -n host6 \"ssh host6\"\n  tmux -L jby new-window -c /Users/jby -t jby:8 -n host7 \"ssh host7\"\n  tmux -L jby splitw -h -t jby:8 \"ssh host7\"\n  tmux -L jby new-window -c /Users/jby -t jby:9 -n host8 \"ssh host8\"\n  tmux -L jby splitw -h -t jby:9 \"ssh host8\"\n  tmux -L jby new-window -c /Users/jby -t jby:10 -n host9 \"ssh host9\"\n  tmux -L jby splitw -h -t jby:10 \"ssh host9\"\n  tmux -L jby new-window -c /Users/jby -t jby:11 -n host10 \"ssh host10\"\n  tmux -L jby splitw -h -t jby:11 \"ssh host10\"\n  tmux -L jby new-window -c /Users/jby -t jby:12 -n host11 \"ssh host11\"\n  tmux -L jby select-window -t jby:1\nfi\nif [ -z \"$TMUX\" ]; then\n  tmux -L jby -u attach-session -t jby\nelse\n  tmux -L jby -u switch-client -t jby\nfi\n```\n. ",
    "ngocphamm": "I'm having trouble with something probably similar to this. What I need is a pane that will have the clock on it. I tried C-b t but it didn't work. ZSH reported that's not a command. @Soliah \n. ",
    "sbonami": "Thanks @Soliah, reinstalling worked\n. ",
    "vlucas": "For those who forgot what reattach-to-user-namespace was (like I did until I googled it), here is the (re)install command:\nbrew reinstall reattach-to-user-namespace\n. ",
    "edi9999": "Oh sorry this was not a tmux issue, I had mongod running before.\nSorry :-) and thanks for the nice tool !\n. Using 0.6.9 version fixes it for me\n. ",
    "pengux": "@Soliah An example is that I'm working in tmux in the default session \"0\" with a window named \"project1\". Now I would like to work with \"project2\" so I run:\nsh\nmux project2\nThe current behaviour create a new session called \"project2\" and attach to it. I rather would like it just to create a new window called \"project2\" in the same default session \"0\" instead.\n. Because I want it to set up the same layout with splitted panes with different commands in it. So exactly what you use tmuxinator for, but just in the same session instead of a new one.\n. Yes :+1: \n. ",
    "olalonde": "Same problem here. If I'm working on multiple projects, I like to have one window per project and move from one window to the other. So I'd like tmuxinator to be able to start multiple projects in the same session. By the way, is there any command to cycle through sessions? (answer to my own question: yeah, the default binding is prefix + ( and prefix + ))\n. I ended up writing my tiny alternative to tmuxinator in <100 lines of bash: https://github.com/olalonde/muxide\nIt's not configurable at the moment but the script is pretty tiny. It launches in the current window if there are no other panes in the window or in a new window if there are panes in current window or in a new tmux session + window if launched from outside tmux.\nI plan to eventually make it configurable through a .muxide file in project roots.\n. ",
    "tobixx": "Just want to raise my hand for this issue too!\n. ",
    "phcerdan": "I want to raise my hand too.\nTo simplify and avoid going into projects inside projects, and probably nested tmux sessions.\nShould be possible to load one, and only one, window layout in the current window? Similar to tmux select-layout, but adding the feature of loading defined scripts in each pane.\nIt would provide modularity, and run time access to 1 window projects. And it would be great!\n. ",
    "assembler": ":+1: \n. Yes, that is correct. YML definition is in ~/.tmuxinator/#{project_name).yml\n. This applies only to latest version. I've downgraded and it works ok.\n. ",
    "scottwio": "Same request here\nmux append project1\nwould be prefect\n. ",
    "cskeppstedt": ":+1: \n. ",
    "skycaptain": "What's the current status of this issue?\n. ",
    "fortysevenlabs": "+1\n. ",
    "stedwick": "\ud83d\udc4d . Cool!. ",
    "flovilmart": "I actually liked a lot this feature and attempted to implement it.\nYou can try it from my branch with:\ngit clone https://github.com/flovilmart/tmuxinator\ncd tmuxinator\ngem build tmuxinator.gemspec\ngem install tmuxinator-0.12.0.gem\n. Awesome! . Take your time @ethagnawl! No rush for that, i'm using it at the moment and probably will weed out some odd edge cases. Also, if you need I can try to add some tests. I'm not very used to ruby though, so it could take time.. @DestyNova that would be a possible change, if the name is not set with the tmux template I could probably remove the separator. This was intended to make it easy to see which windows were appended. . I\u2019m not sure I want to spend additional time adding more configuration flags to this PR. If the naming of the windows is problematic i\u2019ll Remove it altogether and restore the original behavior instead of prefixing with the screen name.. All of those make sense, i\u2019ll Have a look at the requests and will do the tests as well. \nI\u2019m only an amateur rubyist, punching letters in to get the expected result as such as often fail to recognize idiomatic patterns. Therefore the code I produce is most likely to be linearly dumb :) \nYet those are no excuses for not trying :) . I Didn\u2019t forget about this one, but my todo list keeps pushing it down. I hope to have more time soon. Well, yea, I need to but my head back into it :)\nSent with GitHawk. ",
    "DestyNova": "@flovilmart thanks for the PR! Just tested it and it seems perfect. Now I can have separate files for each project and \"append\" them in when necessary, without opening multiple sessions. Great work!. Very nice. The only confusing bit is that it names the new window <session-name>:<window-name> -- i.e. if I append a window called muffin from a file containing the line name: mountain, then the new window will be called mountain:muffin. If I don't specify the name parameter in the Yaml file, then the window will be called :muffin.\nI see there is some logic to control this behaviour, but I don't fully understand it. Is there an extra flag or configuration value needed to just have the window be called muffin?. Yes I see the motivation for it and it makes sense -- in my case though, I expect to end up with a bunch of files that each describe one window with a couple of panes. Since I use windows and panes where other people might use sessions and windows, I don't need that namespacing. Maybe the behaviour could be specified with an optional flag (e.g. if a simple name is default, then add -p for prefix-with-session-name, or if the namespaced window name is default, then -s for simple-window-name or something)?. I like the PR either way and am really happy someone has finally done this. Rather than sidetrack the PR, I'll try to do a separate one adding such a flag afterwards. Thanks for doing this :). ",
    "dfournier": "@antoinelyset tribute patch\n. ",
    "aMoniker": "Using the socket_name option caused the issue... the session is not visible to the normal tmux command running as my user in that situation.\n. I'm using it without a socket for now. If a custom socket is specified, why does the session also become invisible to tmux?\n. Ah, now it makes sense. Thanks for explaining this!\n. Sure. I added some comments to the readme, and updated the sample.yml config file.\n. Just tried another layout with five panels, but it's dropping one so I only get four:\nlayout: 5bff,268x67,0,0{134x67,0,0[134x33,0,0,0,134x33,0,34,4],133x67,135,0[133x17,135,0,1,133x24,135,18,2,133x24,135,43,3]}\nAre you able to get the original layout posted to work?\n. Actually... a new layout with six panels based on the original posted is now working. I'm not sure what changed since yesterday.\n. ",
    "DanielFGray": "maybe I'm just dumb..\n. ",
    "verganis": "Same issue here. Just updated to ruby 1.9.3, still won't work on Ubuntu 13.10\n. ",
    "magicalbanana": "Has the new gem version been updated? And will there be a new field on the config yaml file? \nWhat I want to know is, is there's an option currently like when you would do:\ntmux new-session -t session_name\nSo that even though it's the same session, you don't have the same windows open.\n. I think it's because your second directory path is not being parses\nproperly. Try passing it with escapes.\nOn Fri, Aug 21, 2015 at 05:36 Jun Wan notifications@github.com wrote:\n\nYou mean something like this \"root: ~/some/directory\"? @podung\nhttps://github.com/podung\nNope, still the same error.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/290#issuecomment-133369894\n.\n. Hmm. Can you try renaming your path to exclude spaces? I'll try to look at\nit later tonight.\nOn Sun, Aug 23, 2015 at 08:49 Jun Wan notifications@github.com wrote:\n@magicalbanana https://github.com/magicalbanana Neither does root:\n~/Programming/VLT\\ Labs/aleph nor root: \"~/Programming/VLT\\ Labs/aleph\"\nwork.\n@Soliah https://github.com/Soliah\n=> {\"name\"=>\"aleph\", \"root\"=>\"~/Programming/VLT Labs/aleph/\", \"pre_window\"=>\"rvm gemset use aleph\", \"windows\"=>[{\"vim\"=>{\"layout\"=>\"42fc,205x57,0,0[205x36,0,0,0,205x20,0,37,2]\", \"panes\"=>[\"vim\", nil]}}, {\"rails\"=>{\"layout\"=>\"87e1,205x57,0,0{101x57,0,0,1,103x57,102,0,3}\", \"panes\"=>[\"rc\", \"rs\"]}}]}\nNo difference if I wrap root in \" or include escapes. [image: :sob:]\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/290#issuecomment-133841781\n.\n. I can help out if you want. \n. @lingceng Perhaps, can you provide a screen shot of your terminal when this happens?\n\nSeems like an issue with splitting and readjusting panes as they are created.\n. Is your tmux running prior to this? \n. It's because you install it with a sudo, so to run the mux you need to:\nsudo mux\nBut this is not ideal. You should have installed the gem without the sudo. How did you install your rubies? If you did it under su then I recommend rebuilding it again.\n. You shouldh have installed it without sudo the least.\nHere, not sure what you're trying todo with ruby but installation should be\na breeze with this guide.\nhttps://gorails.com/setup/ubuntu/15.04\nOn Thu, Aug 6, 2015 at 1:44 PM, Thomas De Schampheleire \nnotifications@github.com wrote:\n\nWhen I tried installing without sudo, I get:\n$ gem install tmuxinator\nFetching: tmuxinator-0.6.11.gem (100%)\nERROR:  While executing gem ... (Gem::FilePermissionError)\nYou don't have write permissions into the /var/lib/gems/1.9.1 directory.\nObviously I don't have write access to /var/libs as a regular user.\nRuby was installed using (sudo) apt-get.\nHow should I have installed it?\nTo clarify: I'm absolutely unfamiliar with Ruby/gems.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/328#issuecomment-128471100\n.\n\n\n[image: kareemgan] http://kareemgan.com\nKareem Gan / Software Engineer\nkareemgan@gmail.com\n[image: Skype] https://github.com/magicalbanana [image: Facebook]\nhttp://facebook.com/dopankey [image: Twitter] http://@kareemgan [image:\nGoogle Plus] https://plus.google.com/108299918329354290658 [image:\nLinkedin] https://linkedin.com/in/kareemgan [image: Skype]\nhttp://kareemgan\nThis e-mail message may contain confidential or legally privileged\ninformation and is intended only for the use of the intended recipient(s).\nAny unauthorized disclosure, dissemination, distribution, copying or the\ntaking of any action in reliance on the information herein is prohibited.\nE-mails are not secure and cannot be guaranteed to be error free as they\ncan be intercepted, amended, or contain viruses. Anyone who communicates\nwith us by e-mail is deemed to have accepted these risks. Company Name is\nnot responsible for errors or omissions in this message and denies any\nresponsibility for any damage arising from the use of e-mail. Any opinion\nand other statement contained in this message and any attachment are solely\nthose of the author and do not necessarily represent those of the company.\n. You may not be developing rails but I recommend going through it since the\nguide for installing ruby is proven.\nOn Thu, Aug 6, 2015 at 14:00 Thomas De Schampheleire \nnotifications@github.com wrote:\n\nThat guide seems to be to set up a development environment for Ruby.\nIn my case, I simply want to use tmuxinator, I'm not planning any Ruby\ndevelopment.\nI found out about the --user-install option to gem, so after uninstalling\ntmuxinator, thor, erubis from the system, I reinstalled them using 'gem\ninstall --user-install foo', but the error is still the same:\n$ mux start kallithea\n(erubis:41:in block in render': undefined methodeach' for nil:NilClass (NoMethodError)\n    from (erubis:34:in each'\n    from (erubis:34:inrender'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/erubis-2.7.0/lib/erubis/evaluator.rb:65:in eval'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/erubis-2.7.0/lib/erubis/evaluator.rb:65:inresult'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/tmuxinator-0.6.11/lib/tmuxinator/project.rb:17:in render'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/tmuxinator-0.6.11/lib/tmuxinator/cli.rb:77:instart'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor/command.rb:27:in run'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor/invocation.rb:126:ininvoke_command'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor.rb:359:in dispatch'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor/base.rb:440:instart'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/tmuxinator-0.6.11/bin/mux:18:in <top (required)>'\n    from /home/tdescham/.gem/ruby/1.9.1/bin/mux:23:inload'\n    from /home/tdescham/.gem/ruby/1.9.1/bin/mux:23:in `'\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/328#issuecomment-128474633\n.\n. Can you get a full trace? \n. Please write test. Thank you. \n. It would be better also if we can pass a flag instead of just ARGS[i] so we can better specify and write our config files better.\n\nExample:\nmux start project vim_root=~/git/foo/mama\n. Great.\nI get your point. But it would be nice to have that for a generic config file to be used on different projects that could be language specific or what not.\nSo let's say you have a standard config for working with ruby you would just need to pass in the root. Arguably it is over verbosed to pass in root, window etc but if we could have both that would be good as well.\nLet me know if you need help writing the test.\n. Yeah, you need to rebase.\n. Wouldn't it be easier to just go into the folder and do this manually? Would be safer too.\n. Can you elaborate further? Perhaps you're issue with #126 may not be the same.\n. Through El Kapitan? Can you tell me what ruby versioning system you guys are using? Because there's an issue with El Kapitan and rbenv.\n. I think it's how the aliasing works. I can see if I can take a look at this and have this fixed.\n. ",
    "evverx": "project_file nil because regexp in\nruby\nproject_file = projects.detect { |project| project =~ /^#{name}.yml$/ }\nnever matches.\nYou can reproduce:\n``` bash\nvagrant-ubuntu-precise-32% mkdir -p ~/.tmuxinator\nvagrant-ubuntu-precise-32% touch ~/.tmuxinator/{a,b,c,d,e}.yml\nvagrant-ubuntu-precise-32% tree ~/.tmuxinator\n/home/vagrant/.tmuxinator\n\u251c\u2500\u2500 a.yml\n\u251c\u2500\u2500 b.yml\n\u251c\u2500\u2500 c.yml\n\u251c\u2500\u2500 d.yml\n\u2514\u2500\u2500 e.yml\n0 directories, 5 files\n```\n``` ruby\nvagrant-ubuntu-precise-32% pry\n[1] pry(main)> require 'tmuxinator'\n=> true\n[2] pry(main)> name = 'a'\n=> \"a\"\n[3] pry(main)> projects = Dir.glob(\"#{Tmuxinator::Config.root}/*/.yml\")\n=> [\"/home/vagrant/.tmuxinator/e.yml\",\n \"/home/vagrant/.tmuxinator/c.yml\",\n \"/home/vagrant/.tmuxinator/a.yml\",\n \"/home/vagrant/.tmuxinator/b.yml\",\n \"/home/vagrant/.tmuxinator/d.yml\"]\n[4] pry(main)> project_file = projects.detect {|project| project =~ /^#{name}.yml$/}\n=> nil\n``\n. If I have~/.tmuxinator/app1-dev.ymlandname = 'dev', regex without^` matches. It's incorrect.\nPossible solution:\nruby\nprojects = Dir.glob(\"#{root}/*.yml\")\nproject_file = projects.detect { |project| File.basename(project, '.yml') == name }\n. ",
    "syndbg": "I just restarted zsh, tmux, tmuxinator a lot and after many unsuccessful attempts, it worked the next day.\nNo idea if this is a issue in tmuxinator or it's just me, so I'm closing the issue. Will re-open if it comes up again.\n. ",
    "kerams": "This has just happened to me on a fresh VPS installation. I've got tmux 1.9a, Ruby 2.2.0 and tmuxinator 0.69. Just like in your case, $EDITOR is clearly set to vim, but mux doctor reports it as missing.\n. Turns out it's not a problem of tmuxinator.\n```\nruby -e \"p ENV['EDITOR'].nil?\"\ntrue\necho $EDITOR\nvim\nruby -e \"p ENV['SHELL'].nil?\"\nfalse\necho $SHELL\n/usr/bin/zsh\n```\nhttps://www.ruby-forum.com/topic/214260 seems to be related, I am logged in as root...\n. ",
    "mudmanc4": "update-alternatives --list editor\nWhich will print\n/bin/ed\n/bin/nano\n/usr/bin/vim.gnome\n/usr/bin/vim.tiny\nThen \nexport VISUAL=vim.gnome\nYou may be required to take further steps to make this permanent \n. ",
    "rominf": "Hi, @igas.\nIt's ironic but I just solved this by myself (see #280). I think my solution is more verbose, but more generic and more DRY.\n. ",
    "igas": ":+1: \n. ",
    "sloria": "+1\n. ",
    "nathanpalmer": "This would be great. Currently using the multiple command + space hack\n- node:\n      - \" cd Messaging; and sleep 5; and clear\"\n      - node server.js\n. ",
    "jeffpamer": ":+1: \n. ",
    "chrisseto": "lgtm, :+1: \n. ",
    "maxmeyer": "@Soliah \nDoes it make sense to add a \"detached\"-option to start as well?\nbash\ntmuxinator start <project> --detached\nThis way one could add it to a shell initscript.\ntmuxinator start project_1 --detached\ntmuxinator start project_2 --detached\ntmuxinator start project_3 --detached\ntmuxinator start project_4 --detached\nWould love to see this merged.\n. Personally I would expect that the --detach-option will override the configuration in the project config-file.\n. @mvaraga Any progress on that? ;-) Any help needed?\n. Suggestion: Why not adding some cucumber tests + aruba and use that combination to document the behaviour of tmuxinator? The rspec and the cucumber guys use that kind of pattern to document the public api for their users. I also started to move to that kind documentation for the aruba project itself. Maybe that's also worth for you to try. You could even use http://relishapp.com to publish this - and don't worry that one is free for public projects.\n. what about name.empty? Can a name be \"\" as well?\n. ",
    "mvaraga": "I do it. Should I preserve option in project file and override it with start option. Or just start option?\n. ",
    "paularmstrong": "This is great! Definitely a helpful addition.\n. ",
    "nevinvalsaraj": "Please find the gist of mux debug auv-core here.\n. Output of mux doctor :\n``` bash\n\nmux doctor\nChecking if tmux is installed ==> Yes\nChecking if $EDITOR is set ==> Yes\nChecking if $SHELL is set ==> Yes\n```\n\nOutput of exec \"echo $SHELL\" in an irb session :\nbash\nirb(main):001:0> exec \"echo $SHELL\"\n/bin/zsh\n. ",
    "jwgoh": "Works like a charm now, thanks a lot :+1: \n. +1\n[Ubuntu]\nI downgraded and am using 0.6.9 for now. No zsh completion though :(\nOn a sidenote, I updated the psych gem v2.0.13 and tmuxinator gives me \"Failed to parse config file. Please check your formatting.\" error. I removed the update and currently using v2.0.8, and it works perfectly fine. Any ideas?\n[Mac] Everything works fine on my mac i.e. using psych gem v.2.0.13, tmux v1.9a and tmuxinator v.0.6.10\n. My custom config yaml file:\nhttps://gist.github.com/jwgoh/8fff58f9beef45b4fa6c\nThe default config yaml file:\nhttps://gist.github.com/jwgoh/f03d8358484f5d3e0832\n. You mean something like this root: \"~/some/directory\"? @podung \nNope, still the same error.\n. @magicalbanana Neither does root: ~/Programming/VLT\\ Labs/aleph nor root: \"~/Programming/VLT\\ Labs/aleph\" work.\n@Soliah \n=> {\"name\"=>\"aleph\", \"root\"=>\"~/Programming/VLT Labs/aleph/\", \"pre_window\"=>\"rvm gemset use aleph\", \"windows\"=>[{\"vim\"=>{\"layout\"=>\"42fc,205x57,0,0[205x36,0,0,0,205x20,0,37,2]\", \"panes\"=>[\"vim\", nil]}}, {\"rails\"=>{\"layout\"=>\"87e1,205x57,0,0{101x57,0,0,1,103x57,102,0,3}\", \"panes\"=>[\"rc\", \"rs\"]}}]}\nNo difference if I wrap root in \" or include escapes. :sob: \n. @magicalbanana Same error, I tried for my other tmux projects that has got paths with no spaces.\n@Soliah Same error, I updated my tmux to 0.6.11 and psych 2.0.15.\nBut interestingly, I updated rvm to use ruby 2.2.3 as my default and everything works (tmux 0.6.11 and psych 2.0.15). I was using ruby 2.2.0 previously. Thoughts?\n. ",
    "janv": ":+1: \nSeems to be cause by this merge: https://github.com/tmuxinator/tmuxinator/commit/8b4255f0fc5aa9673228085f95a891579a6eb5b1\n. ",
    "fbertux": "With this version tmux-stable is working.\n. Looking on changelog the option -c is incompatible with version 1.8.\nOn Ubuntu you can use this ppa tmux-stable \n. Same here. \nI'm using Arch Linux with tmux 2.2 and tmuxinator 0.8.1. With tmux 2.1 this error doesn't appears.\nWhen I start a tmuxinator session, I get the error \"no server running on /tmp/tmux-1000/default\" on the first pane, all others panes open with the expected command. This only happens when there's no tmux sessions running on system. For example if I run tmuxinator start session_a and then tmuxinator start session_b, I get the error only on session_a and session_b works as expected.\nUsing Debian Jessie with tmuxinator 0.8.1 and tmux 2.1 the same error appears. \n. ",
    "alshain": "I get the exact same error, running tmux 1.8 and tmuxinator 0.6.10 on Ubuntu\n. ",
    "Finwood": "The same here, tmux 1.8-5 and tmuxinator 0.6.10 on Linux Mint 17.1\n. I tried version 0.6.11.pre:\nThe session is being created, but mux fails to create secondary windows.\nObviously, in this case a split isn't posible either, for the window doesn't not exist.\nusage: new-window [-adkP] [-c start-directory] [-F format] [-n window-name] [-t target-window] [command]\nwindow not found: webgui:2\nusage: split-window [-dhvP] [-c start-directory] [-F format] [-p percentage|-l size] [-t target-pane] [command]\nwindow not found: webgui:2\nwindow not found: webgui:2\nwindow not found: webgui:2\nusage: split-window [-dhvP] [-c start-directory] [-F format] [-p percentage|-l size] [-t target-pane] [command]\nwindow not found: webgui:2\nwindow not found: webgui:2\nwindow not found: webgui:2\nwindow not found: webgui:2\nwindow not found: webgui:2\n. ",
    "ReggiePuksta": "I am still getting some errors with the default setup:\nusage: new-session [-AdDP] [-F format] [-n window-name] [-s session-name] [-t target-session] [-x width] [-y height] [command]\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nusage: split-window [-dhvP] [-c start-directory] [-F format] [-p percentage|-l size] [-t target-pane] [command]\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nno sessions\nI didn't mention that I am using Ubuntu 14.04\n. ",
    "amosbird": "same problem in Centos 7 with fish-shell\n. ",
    "ndyakov": "I'm also affected by this.\n\u279c tmux -V\ntmux 1.8\n\u279c tmuxinator -v\ntmuxinator 0.6.10\n. ",
    "dfedde": "I have the same problem\nOS:             Ubuntu\nTmux:         1.8\ntmuxinator:  0.6.10\nTried using version 0.6.11.pre but still failed to create a session\nusage: new-session [-AdDP] [-F format] [-n window-name] [-s session-name] [-t target-session] [-x width] [-y height] [command]\nusage: new-window [-adkP] [-c start-directory] [-F format] [-n window-name] [-t target-window] [command]\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nusage: split-window [-dhvP] [-c start-directory] [-F format] [-p percentage|-l size] [-t target-pane] [command]\nfailed to connect to server\nfailed to connect to server\nfailed to connect to server\nWent back to using version 0.6.9\n. ",
    "bimawa": "same trouble in mac os x pls fix it\n. now solve this trouble with next steps:\n1. uninstall all tmuxinator versions: gem uninstall tmuxinator\n2. install gem with version: gem install tmuxinator -v 0.6.8\n. ",
    "szymon-jez": "I have the same issue. Versions:\n$ tmuxinator -v\ntmuxinator 0.6.10\n$ tmux -V\ntmux 1.8\n. ",
    "SakuradaJun": "The same issue:\ntmux: unknown option -- c\nusage: new-session [-AdDP] [-F format] [-n window-name] [-s session-name] [-t target-session] [-x width] [-y height] [command]\nsession not found: scrapy_project:1\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:0\nsession not found: scrapy_project:1\nsession not found: scrapy_project\n```\n\u279c  ~  tmux -V\ntmux 1.8\n\u279c  ~  tmuxinator -v\ntmuxinator 0.6.10\nRuby: 2.1.5\nOS: Ubuntu 14.04\n```\n. ",
    "blacksky86": "@bimawa , yup that did it for me. It happened when I updated my Gems, so if you're thinking about updating your Gems, you will have to go back to one version of mux\n. ",
    "thikonom": "Works for me now too.\nUbuntu 14.04\nTmux 1.8\nTmuxinator 0.6.8\nThanks @bimawa \n. ",
    "positron": "Is that related to this issue? http://superuser.com/questions/629227/tmux-prints-12c-whenever-i-start-it-or-re-attach-to-a-session-in-cygwin\n. ",
    "erik-h": "+1\n. ",
    "verilucis": "+1\nAnd, thanks for the awesome-nator! . ",
    "yvaucher": "Thanks\n. ",
    "tlight": "@l0rda try removing the leading '-' from 'layout' and 'panes'\nI had a similar error message and this resolve it for me, I was doing the same thing.\nexample from the README.md: \nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        - guard\n  - server: bundle exec rails s\n  - logs: tail -f log/development.log\nchange to something like this:\n```\n~/.tmuxinator/stat.yml\nname: stat\nroot: ~/\npre_window: cd ~\nwindows:\n  - stats:\n    layout: 6c96,202x61,0,0{64x61,0,0[64x30,0,0{30x30,0,0,9,33x30,31,0,16},64x30,0,31,15],137x61,65,0,14}\n    panes:\n      - vim\n      - vim\n      - vim\n      - top\n```\n. ",
    "DustinArmstrong": "+1\n. ",
    "epogue": "+1\n. ",
    "lorrin": "I've confirmed my issue is fixed as of 0.6.11. Thanks so much!\n. Hmm. Not sure this is totally fixed after all. Given running session foo_bar and defined projects foo and foo_bar, I observe with 0.6.11:\n- mux start foo does the wrong thing, opening the existing foo_bar session\n- mux start foo foo does the wrong thing, opening the existing foo_bar session\n- mux start foo quux does the right thing, opening a new foo session with alternate name quux\n. ",
    "hori-ryota": "I don't really why, but I resolved my same type of your issue by removing eval \"$(docker-machine env myContainer)\" from .zshrc.\nIncluding docker-machine env myContainer command in .zshrc for trial, a similar problem occured.\n. ",
    "jmromer": "This was caused by having the following alias set in my zsh configuration:\nsh\nalias tmux='env TERM=screen-256color tmux'\nA somewhat hackish solution1 to the problem of getting italics to work in tmux, discussed here on the Unix & Linux Stack Exchange.\n1. though arguably the lesser of the evils considering the alternative solutions\nTmuxinator starts tmux using a non-login shell, so it wasn't using this alias, which was defined in a script sourced from .zshrc.\nMoving the alias into .zshenv  from .zshrc resolves the issue globally.\nThis can also be resolved on a per-project basis via the project's tmuxinator yaml file:\n``` yaml\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: env TERM=screen-256color tmux\n```\nBut defining the alias in .zshenv avoids having to make this change for every tmuxinator project.\n. Spoke too soon -- somehow setting the alias in .zshenv resolves the issue for the tmux open command but not for tmuxinator start.\n. ",
    "jsatk": "```\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: env TERM=screen-256color tmux\n```\nThis fixed the issue for me. . I've been dying to use an emoji as my session name. Thanks for doing this @ethagnawl. \ud83d\ude06 And thanks for logging @AdrieanKhisbe. . I suspected there wasn\u2019t a way to do this. Thanks for the reply though!\n\nOn Dec 21, 2018, at 11:33 AM, Pete Doherty notifications@github.com wrote:\nClosed #667.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. \n",
    "SeeThruHead": "Nevermind Figured it out\nset -xU EDITOR vim\n. ",
    "geggo98": "I will clean up the failed test cases later this week. I already resolved all merge conflicts.\n. On the duplicate lines: One should be for :force_attach and one for :force_detach. \n. My fault. This should only be part of the main branch, but never be merged to the feature branch. I wanted to have a disclaimer on the main branch of my fork to make clear it is only a fork and I did not invent tmuxinator.\n. ",
    "dg-ratiodata": "@Soliah Would you mind to release a new gem version including this PR?\n. @geggo98 Was this added by mistake? I think this should not be part of a PR. :smile: \n. Duplicate line or did you mean #empty??\noptions[:force_attach] = false if options[:force_attach].nil? || options[:force_attach].false?\nor did you mean options[:force_detach]?\n. I would use a guard clause here...\n``` ruby\ndef attach\n  return yaml[\"attach\"] unless yaml[\"attach\"].nil?\ntrue\nend\n``\n. @deivid-rodriguez Canyaml[\"attach\"]befalse`? Then this will not work as expected.\n. ",
    "deivid-rodriguez": "You are welcome @Soliah, thanks to you for tmuxinator, it's great.\n. or better\nruby\ndef attach\n  yaml[\"attach\"] || true\nend\n. @dg-ratiodata You're totally right! I'd assume it can actually be false so my advice is just plain wrong. :flushed: \n. ",
    "s3rvac": "ERB stands for Embedded Ruby. It is a templating system that allows one to embed Ruby code into a text document.\n. ",
    "lingceng": "I think I found the reason. I run mux debug store and get the shell script.\n``` shell\nWindow \"editor\"\ntmux -2 send-keys -t store:1.1 '' C-m\ntmux -2 send-keys -t store:1.1 vim\\ Gemfile C-m\ntmux -2 splitw -c /home/zhongkx/workspace/store -t store:1\ntmux -2 select-layout -t store:1 main-horizontal\ntmux -2 send-keys -t store:1.2 '' C-m\ntmux -2 send-keys -t store:1.2 rc C-m\ntmux -2 splitw -c /home/zhongkx/workspace/store -t store:1\ntmux -2 select-layout -t store:1 main-horizontal\ntmux -2 send-keys -t store:1.3 '' C-m\ntmux -2 send-keys -t store:1.3 ls C-m\n```\nWhen I changed the second splitw to \nshell\ntmux -2 splitw -h -c /home/zhongkx/workspace/store -t store:1\nAnd run the script after edited. It works. I get three panes in first window. \nI also tested some other case. When I change the store.yml with layout to main-vertical. It works.\nWhen I change the debug script to only set layout for store:1 at last. It works too.\nIt's obvious that we should use splitw -h for the third or more panes. \n. This problem may caused by pull request:\nSet tmux layout after each pane creation #131\n. ",
    "iTeam91": "I was editing my oh-my-zsh config and i don't know how, but i removed tmuxinator.\n. ",
    "MacgyverMartins": "For everyone that came here, the problem probably is your Ruby path\nIf you are using RVm and install tmuxinator before it, try this;\nrvm use system, and then, try run tmuxinator again. \nYou can set up this Ruby as a default doing this rvm --default use system. \nYou can also re-install tmuxinator using your current rvm ruby version . ",
    "Fedalto": "I made it work with tmate specifying the socket file.\nOn your tmuxinator yml file:\n``` yaml\nPass command line options to tmux. Useful for specifying a different tmux.conf.\ntmux_options: -S /tmp/my-project-tmate-session\nChange the command to call tmux.  This can be used by derivatives/wrappers like byobu.\ntmux_command: tmate\n```\n. @danielfsbarreto, this compatibility seems broken now. I have the same version of tmuxinator and tmate and could not make it work now.\nUsing tmuxinator debug <project>, I could see that tmuxinator tries to execute the following line to create a session:\nTMUX= tmate -S /tmp/test.sock new-session -d -s test -n editor\nBut tmate refuses because it thinks we're already inside a tmux session due to the TMUX envvar.\nA quick fix to make tmuxinator and tmate work again is to generate the shell script using the tmuxinator debug and remove the TMUX= part in this line.\n. I'm not the maintainer of the project, but I don't think this is a tmuxinator bug.\nThis happens because tmux and tmate behave different with an empty TMUX env var. So, it's more of a tmate bug.\n. ",
    "andyw8": "Thanks @Fedalto, that worked for me.\n. ",
    "danielfsbarreto": "Hey @Fedalto or @andyw8,\nCould you please show what was the end state of your tmuxinator yml file? Setting up only the socket file didn't work for me. Did you have to do anything else besides running the tmuxinator <project> command?\nJust to clarify a little more my current needs, I am trying to run tmate as a daemon in my local machine but setting it up through tmuxinator. I am almost sure that my issue is happening because there is no tmate -S <socket_dir> wait tmate-ready call anywhere if I only do what was told on the comments above. What do you guys think?\nMy versions:\n- tmuxinator 0.8.1\n- tmate stable 2.2.1\n. Thanks, @Fedalto. It worked.\nShall we reopen this issue?\n. ",
    "patrickdepinguin": "When I tried installing without sudo, I get:\n$ gem install tmuxinator\nFetching: tmuxinator-0.6.11.gem (100%)\nERROR:  While executing gem ... (Gem::FilePermissionError)\nYou don't have write permissions into the /var/lib/gems/1.9.1 directory.\nObviously I don't have write access to /var/libs as a regular user. \nRuby was installed using (sudo) apt-get.\nHow should I have installed it?\nTo clarify: I'm absolutely unfamiliar with Ruby/gems.\n. That guide seems to be to set up a development environment for Ruby. \nIn my case, I simply want to use tmuxinator, I'm not planning any Ruby development. \nI found out about the --user-install option to gem, so after uninstalling tmuxinator, thor, erubis from the system, I reinstalled them using 'gem install --user-install foo', but the error is still the same:\n$ mux start kallithea\n(erubis:41:in `block in render': undefined method `each' for nil:NilClass (NoMethodError)\n    from (erubis:34:in `each'\n    from (erubis:34:in `render'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/erubis-2.7.0/lib/erubis/evaluator.rb:65:in `eval'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/erubis-2.7.0/lib/erubis/evaluator.rb:65:in `result'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/tmuxinator-0.6.11/lib/tmuxinator/project.rb:17:in `render'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/tmuxinator-0.6.11/lib/tmuxinator/cli.rb:77:in `start'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor/command.rb:27:in `run'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor/invocation.rb:126:in `invoke_command'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor.rb:359:in `dispatch'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/thor-0.19.1/lib/thor/base.rb:440:in `start'\n    from /home/tdescham/.gem/ruby/1.9.1/gems/tmuxinator-0.6.11/bin/mux:18:in `<top (required)>'\n    from /home/tdescham/.gem/ruby/1.9.1/bin/mux:23:in `load'\n    from /home/tdescham/.gem/ruby/1.9.1/bin/mux:23:in `<main>'\n. ",
    "bbuchalter": "I got this error when I didn't have tmux installed on my Ubuntu machine....maybe same for others? Maybe we need to improve the error handling/message?\n. ",
    "fikovnik": "I had the same problem which I fixed by adding\n@commands = []\nright after @panes = [] in initialise method in window.rb.\nIf you think it is a bug I can make a pull request.\n. ",
    "zetetic": "@fikovnik I experienced the same problem, and it went away after adding your fix in window.rb. Definitely seems like a bug.\n. ",
    "njbraun": "@fikovnik I ran into the same issue. This fixes it! Thanks!\n. ",
    "SuperMarioBean": "hi, all. I think some one has committed a issue to ruby gems about this https://github.com/rubygems/rubygems/issues/1577\n. ",
    "cwhits": "I was getting this error if I'd specify a layout but not the panes (even if I wanted them to just be \"empty\" panes)\nWorks:\nyaml\nwindows:\n  - Stuff:\n      layout: main-horizontal\n      panes:\n          -\n          -\nDoesn't work:\nyaml\nwindows:\n  - Stuff:\n      layout: main-horizontal\n. Same as @J3RN.\n. Getting rid of the tab at the beginning of the line would probably also fix it, but it'd look weird with those sections not being aligned.\nruby\n        stop: <<-DESC,\nStop a tmux session using a project's tmuxinator config.        \n        DESC\nPresumably, that's where the errant tabs were coming from.\n. Aw, I forgot to update the changelog :( \nSorry.\n. It also appears to mess up the autocomplete with zsh, cutting the heredoc lines and putting them at the bottom of the command list for some reason.\n```\n~/g/tmuxinator (help_update) $ tmuxinator help\ntmuxinator commands:\n  tmuxinator commands                          # Lists commands available in tmuxinator\n  tmuxinator completions [arg1 arg2]           # Used for shell completion\n  tmuxinator copy [EXISTING] [NEW]             #  Copy an existing project to a new project and open it in your editor \n  tmuxinator debug [PROJECT] [ARGS]            # Output the shell commands that are generated by tmuxinator\n  tmuxinator delete [PROJECT1] [PROJECT2] ...  # Deletes given project\n  tmuxinator doctor                            # Look for problems in your configuration\n  tmuxinator help [COMMAND]                    # Describe available commands or one specific command\n  tmuxinator implode                           # Deletes all tmuxinator projects\n  tmuxinator list                              # Lists all tmuxinator projects\n  tmuxinator local                             # Start a tmux session using ./.tmuxinator.yml\n  tmuxinator new [PROJECT]                     # Create a new project file and open it in your editor\n  tmuxinator start [PROJECT] [ARGS]            #  Start a tmux session using a project's tmuxinator config, with an optional [ALIAS] for project reuse \n  tmuxinator stop [PROJECT]                    #  Stop a tmux session using a project's tmuxinator config. \n  tmuxinator version                           # Display installed tmuxinator version\n~/g/tmuxinator (help_update) $ tmuxinator (TAB)\n -- tmuxinator subcommands --\ncommands                                            -- Lists commands available in tmuxinator\ncompletions                                         -- Used for shell completion\ncopy                                                --         Copy an existing project to a new project and open it in\ndebug                                               -- Output the shell commands that are generated by tmuxinator\ndelete                                              -- Deletes given project\ndoctor                                              -- Look for problems in your configuration\nimplode                                             -- Deletes all tmuxinator projects\nlist                                                -- Lists all tmuxinator projects\nlocal                                               -- Start a tmux session using ./.tmuxinator.yml\nnew                                                 -- Create a new project file and open it in your editor\nopen                                                -- Alias of new\nstart                                               --         Start a tmux session using a project's tmuxinator config,\nstop                                                --         Stop a tmux session using a project's tmuxinator config.\nversion                                             -- Display installed tmuxinator version\n        with an optional [ALIAS] for project reuse          your editor                             \n -- tmuxinator projects --\nWork                              Play                              Test                          \n``\n. @ethagnawl: Want me to update the PR to use arrays?\n. @ethagnawl: I updated it but only changed the lines that were over 80 cols. This is the first time I've ever touched ruby so I don't actually know how to build the binary to test it.\n. Using arrays fixed the spacing issues. The only thing I noticed is that the \"aliases of new\" (editandopen) don't appear in the help menu. They do appear when runningtmuxinator commandsand function correctly when runningtmuxinator completions _____`.\nI'm not entirely sure how to make them appear when running tmuxinator help without explicitly defining them. E.g.,\nruby\n    desc \"edit [PROJECT]\", COMMANDS[:edit]\n    def edit(name)\n        invoke :new, name\n    end\n. No problem, I'll get those fixed up.\n. shoot, I forgot to pull in any changes before updating it.\n. @adamstrickland sure thing.\n. The only mapped commands are edit and open. If edit is broken off into a separate command to prevent it from creating new projects because of a typo, open should be a mapped alias of edit instead of new for the same reasons.\n. ",
    "madAndroid": "I've been experiencing the exact same issue, adding @fikovnik 's fix in https://github.com/tmuxinator/tmuxinator/issues/328#issuecomment-144604126 sorts it out\n. ",
    "jusw85": "Doesn't work:\n``` yaml\nwindows:\n    - activemq:\n        root: ~/opt/apache-activemq-5.13.2\n```\nWorks:\nyaml\nwindows:\n    - activemq:\n        root: ~/opt/apache-activemq-5.13.2\n        panes: pwd # any dummy command\nI'm using tmux 2.2\n. ",
    "aweibell": "I got this error when I configured 9 panes. By reducing to 8 (removed one of the previous, not the last added), everything worked fine again.. @adamstrickland Sorry, I mixed windows and panes. The error message appears with 9 windows and not with 8 windows. Here is a project file (renamed from .yml) that leads to the error message on load.\n9windows.txt\n. ",
    "neowulf": "+1\n. Ok, mine was a rookie mistake.\nI had to look in $HOME/.tmux.conf and disable the following line in order to make this work:\n```\nset -g base-index 1\n```\n. ",
    "dav-m85": "+1\n. ",
    "fabianschwarzfritz": "Hi, \nthere seems to be a wrong tmuxinator configuration. A correct configuration works for me without any issues: \nname: pane bug\nroot: ~/\nattach: false\npost: tmux -CC attach\nwindows:\n  - logs:\n      layout: main-vertical\n      panes:\n        - nginx:\n          - \"ssh root@example.com\"\n          - \"cd /var/log/nginx/\"\n          - \"tail -f error.log\"\n  - htop:\n    - ssh root@example.com\n    - htop\n*Notice the indentation under -logs . The debug output gives me the following result, which looks good to me: \n```\n!/bin/bash\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server;\ncd /Users/d056995\n# Run pre command.\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s pane\\ bug -n logs\n  tmux send-keys -t pane\\ bug:0 cd\\ /Users/d056995 C-m\n# Create other windows.\n  tmux new-window  -t pane\\ bug:1 -n htop\n# Window \"logs\"\n  tmux send-keys -t pane\\ bug:0.0 ssh\\ root@example.com C-m\n  tmux send-keys -t pane\\ bug:0.0 cd\\ /var/log/nginx/ C-m\n  tmux send-keys -t pane\\ bug:0.0 tail\\ -f\\ error.log C-m\ntmux select-layout -t pane\\ bug:0 tiled\ntmux select-layout -t pane\\ bug:0 main-vertical\n  tmux select-pane -t pane\\ bug:0.0\n# Window \"htop\"\n  tmux send-keys -t pane\\ bug:1 ssh\\ root@example.com C-m\n  tmux send-keys -t pane\\ bug:1 htop C-m\ntmux select-window -t 0\n  tmux select-pane -t 0\ntmux -CC attach\n```\nAll commands in the logs pane are executed successfully. @aspeteRakete does this still occur using a correct indentation in the tmuxinator configuration?\n@adamstrickland  and other tmuxinator experts: Is there currently any validation of the tmuxinator configuration before it is executed?\nCheers and bests,\nFabian\n\ud83c\udf7a \ud83d\ude04 \ud83c\udfc4 \u2600\ufe0f \n. Oh, those small fixups on the same branch look quite ugly here in the PR overview. Sorry! \ud83d\ude1e \nI did a few fixups when I had the PR opened, but not sent yet. I didn't expect fixups to be listed here. Sorry again for adding a lot of stuff here. Feedback on the implementation very appreciated \ud83d\ude04 \ud83d\udcad \n. \ud83d\ude0e\n. Like that?\n. The travis build failed - https://travis-ci.org/tmuxinator/tmuxinator/jobs/134830222 . Don't think that's an issue of the coding, but gem install bundler fails. \nAnyway I am in vacation for 2 weeks \ud83d\udc1a \u2600\ufe0f \ud83c\udf0a , and I'll look into this after I'm back, okay? \n. I modified this option, so that the startup_pane options below can actually select one out of two panes of the window. \ud83d\udc4d \u2753 \n. Honestly, I am not sure about this stuff.\n. And this is because the code linter doesn't like more than 80 characters. I'm not a ruby expert. Any suggestions for a better way to implement that line?\n. Sorry, I admit that was quite unspecific. \nNearly the same doubles/stubs are now defined in the description of tmux_new_window_command and tmux_synchronize_panes . That's an ugly duplication I probably should get rid of, or is that not an issue? Should I invest some more time here?\n. Thanks for the suggestion and your quick feedback, @adamstrickland . I added such a shared context with 5837d3e . \n. ",
    "schoeke": "windows:\n  - irssi:\n      layout: dcf4,146x32,0,0{123x32,0,0,22x32,124,0}\n      panes:\n        - irssi\n        - cat .irssi/nicklistfifo\n  - jackline: jackline\n  - TaskWarrior: tasksh\n  - Jrnl: #empty\n  - TERM: #\n  - TERM2: #\n. ",
    "geowa4": "I can also confirm this is happening. I just switched one of my projects from boot2docker to docker-machine. If I switch back to boot2docker, it works even though the command fails. echo $? returns 0 when using this eval statement so I don't believe that's the issue.\n. Changing to the following also fails the same way. It runs the eval statement, but no more.\nwindows:\n    - work:\n        root: /path/to/project\n        panes:\n            - main:\n                - eval \"$(docker-machine env dev)\"\n                - workon myenv\n. For me, this would make my dotfiles repo much simpler. I'd essentially just have to clone into ~/.config.\n. I want 3, but I'll take 2 as a temporary step to 3. If 1 is implemented, I will forget I have both and wonder why some change isn't taking effect.\n. ",
    "adambiggs": "I just found this issue over in the Docker Machine repo.  @pstengel's workaround fixed the issue for me:\neval \"$(docker-machine env default </dev/null)\"\n. ",
    "leyyinad": "Looked the same. After some playing around I found this seems to be caused by my .zlogin \u2013 I'm using zprezto. Once I rename the file it all works.\nEdit:\nLooks like it hadn't to do with my .zlogin at all but with calling eval $(docker-machine env dev) somewhere in my zsh config. After replacing the call by [[ -z $TMUX ]] && eval $(docker-machine env dev) everything works perfectly.\n. ",
    "chadrien": "@leyyinad interesting, I happen to have the same eval. I'll give your trick a try\n. Seems to work. Thanks for the tip @leyyinad :)\n. ",
    "clekstro": "+1. The alternative workaround requires us to add our .yml files to the user's home directory via configuration management, instead of within the project's code where it belongs.\n. ",
    "jerrygb": "Seems we can get over this issue if we have sleep on the shell for first window. For instance\nyaml\nwindows:                                                                                                                                                                          \n  - manager:                                                                                                                                                                      \n    - sleep 3                                                                                                                                                                     \n    - manager-vm                                                                                                                                                                  \n    - C-l\nNot the best alternative, but a quickfix for now. Perhaps I am missing something or version mismatch.\nThanks.\n. ",
    "remear": "I'm experiencing this as well.\nGiven:\nruby\npre:\n  - export RBENV_DIR=\n  - export RBENV_VERSION=\nproject_name: example\nroot: <%= \"#{ENV['PROJECT_BASE_DIR']}/example\" %>\nwindows:\n  - editor:\n      layout: 72b8,260x82,0,0[260x59,0,0,0,260x22,0,60,3]\n      panes:\n        - vim .\n        - # tests\n  - server:\n    - bundle exec rails s\n  - console:\n    - bundle exec rails c\nOn 0.6.10 this works great. On >= 0.6.11 vim never runs. I do have set -g base-index 1 and set-window-option -g pane-base-index 1 in my tmux.conf. I still experience the issue when I comment them out.\n. I've been back-burner debugging this for several months now as my experience with this has always been intermittent. Working from @gerrard00's comment, I've been problem free since removing the following directives from my tmux.conf:\n- set -g utf8\n- set -g status-utf8 on\n- set-window-option -g utf8 on\n- set -g mode-mouse on\nI'll report back here if the same problem resurfaces. \n. ",
    "abarax": "Interestingly adding sleep 3 actually worked for me. \n. ",
    "gerrard00": "I had an issue similar to this and it turned out that I had a deprecated status-utf8  setting in my tmux.conf (via tmuxline). The only symptom was that the command never ran in the very first window. Other than that, everything worked fine. It's probably worth checking to make sure that your tmux.conf and any files sourced from it are up to date.\n. ",
    "blainekasten": "I'm getting this also. It happened to me after updating to OS X El Capitan\n. Reinstalling worked for me. Did you try that @WhiskeyTuesday ? gem install tmuxinator\n. ",
    "iasj": "Not working for me too. Even after reinstall.\n. ",
    "eliasbagley": "This is happening to me too. Tmuxinator is installed, and reinstalling isn't working for me.\n. Unless zsh-completions is being included in some other way, I don't think I'm using it. I don't have it listed in my .oh-my-zsh plugins folder.\n. ",
    "hetre85": "Happening for me too:\nYosemite\nRVM\nzsh\niTerm2\nTried gem uninstall and a subsequent reinstall of the gem.\nI am still able to use tmuxinator [project], I am just receiving the message _tmuxinator:2: command not found: tmuxinator when I start iterm2.\n. I'm using oh-my-zsh but I am not using zsh-completions.\n. @J3RN ,\nPlacing source $HOME/.rvm/scripts/rvm in my .zshrc, as mentioned by @ralfschimmel and @zkilgore, has resolved the issue for me.\n. ",
    "WhiskeyTuesday": "I'm using Prezto, which I believe includes zsh-completions\n. ",
    "kfrz": "I'm also getting  _tmuxinator:2: command not found tmuxinator and _tmuxinator:3: command not found: tmuxinator. Running: \nEl Capitan\nRVM (ruby 2.0.0)\noh-my-zsh \niterm2\n. Seems like a permissions error to me\n- Keifer Furzland\nOn Sat, Dec 26, 2015 at 5:11 PM, Chris Rittelmeyer <notifications@github.com\n\nwrote:\nI'm getting something perhaps related, trying to install tmuxinator for\nthe first time on this machine:\n~  sudo gem install tmuxinator\nERROR:  While executing gem ... (Errno::EPERM)\n    Operation not permitted - /usr/bin/mux\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/345#issuecomment-167370851\n.\n. Better yet use RVM to manage rubies\nOn Dec 28, 2015 9:32 AM, \"Adam Strickland\" notifications@github.com wrote:\nI agree w/ @kfrz https://github.com/kfrz, it looks permissions-related.\nIf you're on OSX and are using the system ruby (i.e. that which comes with\nthe operating system), IIRC the gem directory is owned by root, so you\nneed to install gems using sudo: sudo gem install tmuxinator.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/345#issuecomment-167589577\n.\n. \n",
    "zkilgore": "Getting the same thing with nearly the same setup as @kfrz \nEl Capitan\nRVM (ruby-2.1.1)\nzsh + prezto\niterm2\n. @adamstrickland @kfrz I just fixed this by ensuring that any sourcing of rvm scripts/variables occurs before I source tmuxinator completions. Thanks for your help!\n. ",
    "crittelmeyer": "I'm getting something perhaps related, trying to install tmuxinator for the first time on this machine:\n~  sudo gem install tmuxinator\nERROR:  While executing gem ... (Errno::EPERM)\n    Operation not permitted - /usr/bin/mux\nEl Capitan\ngem v2.4.5\nzsh + oh-my-zsh\niterm2\n. ",
    "ralfschimmel": "Indeed @zkilgore adding this to your .bashrc or .zshrc seems to fix it;\nsource $HOME/.rvm/scripts/rvm\n. ",
    "cinaeco": "I think the error can also be avoided if we placed tmuxinator.zsh in zsh's fpath instead of sourcing it directly, since that seems to be the proper way to add completions to zsh. If you put fpath=(somedotfilepath $fpath) in your zsh config before completion initialisation (e.g. before sourcing OMZ), and then mv tmuxinator.zsh somedotfilepath/_tmuxinator, it shouldn't matter at what point you run the rvm initialisation script.\n. When using bash, haven't we just traded an error message in one place for an error message in another? I get -bash: type: tmuxinator: not found. It used to be that complete -F _tmuxinator would succeed/fail silently, but type now produces output.\n. also, if we're talking about zsh, perhaps we should get people to add the tmuxinator completions via zsh's fpath (see my comment in #345), rather than sourcing it? That would mean none of these \"does tmuxinator exist\" checks would be necessary.\n. That is probably so, but I think even more than that, it is unnecessary to test for tmuxinator's existence before running bash's complete -F anyway. Bash's completion will run _tmuxinator only when tmuxinator attempts tab completion... but if tmuxinator isn't installed, it will just never call that, so there's no error one way or the other.\nAt least for bash, I think tmuxinator.bash should be reverted.\n. Similar for zsh: if you use the fpath completion loading method, you don't need the existence check - zsh will load tmuxinator.zsh/_tmuxinator when completion is invoked.\n. It does the same on two bashes: Apple's built-in 3.2+ and Centos's built-in 4.2+... I don't think this is an issue of posix compliance. type is fine. I personally like command -v better, which is also posix compliant. The 2 issues with this pull request I see are:\n1. It seems stderr is wrongly redirected - it was intended to be sent to /dev/null, but isn't. That's easy to fix, but...\n2. A tmuxinator existence check is just plain unnecessary. The bash portion of this PR should never have been implemented, because complete works fine without it. At least, I don't see any cons. Not having the existence check makes tmuxinator.bash More Flexible because it means tmuxinator actually doesn't have to be detectable at time of sourcing in order for completion to work.\nIn case it isn't clear - I care a lot more about point 2 than point 1.\nEDIT: oh, new issue!\n. Luckily tmuxinator.zsh can still have the existence check, because it will work whether it is placed in fpath or sourced directly (though sourcing directly is still less flexible, looking at people's problems in #345). I think I'll just create a pull request to at least revert tmuxinator.bash.\nEDIT: oh. this already exists: #396\n. Oh, thanks for opening this issue. I didn't see it when I wrote https://github.com/tmuxinator/tmuxinator/pull/386#issuecomment-204603066. It did feel a bit weird continuing a discussion on a closed PR.\n. But yeah, can someone engage my point 2? I believe bash's completion doesn't require us to check for tmuxinator's existence, and is more flexible that way.\nFor example, say I source the rvm init script after I source tmuxinator.bash - with the previous version, completion would still work. Now, it won't, even after you silence type.\n. Yeah, true, that won't work. And that's kind of the problem with trying to setup zsh completion by direct sourcing. This is where using zsh's fpath to load the completion file shows its strength, because it will only run the contents of tmuxinator.zsh at completion time, well after rvm or any ruby thing is initialised.\nOf course, fpath needs a bit more cognitive load to set up - e.g. the file must be called _tmuxinator and fpath must be defined before compinit is called (i.e. before prezto or OMZ) - so I understand people might not like that. Still, it's the more correct way, and overcomes the rvm-or-tmuxinator.zsh-first issue.\n. Hm. Actually, with direct sourcing, we can keep parity between bash and zsh if run compdef instead of _tmuxinator directly in tmuxinator.zsh.\ncompdef _tmuxinator tmuxinator mux\n. You know what, I might just make a pull request.\n. @J3RN yes we are. Thanks!\n. Following the discussion in #386, could we actually just remove the bash check and keep the zsh check? Unless someone can demonstrate that the bash check is actually necessary/fixes some situation, I don't think it should be there.\n. @J3RN this is my take on #396 and solution to #395.\n. Of course, this doesn't solve a user typing mux<Tab> on systems without  tmuxinator, but I think in that case having the shells throw errors is appropriate.\n. Haha... this exists, and made by the same person who refactored tmuxinator.zsh with #compdef (Soliah): https://github.com/zsh-users/zsh-completions/blob/master/src/_tmuxinator\nSeems it really was intended to be loaded via $fpath.\nWould it be better to keep my proposed explicit call to compdef, or should we revert all zsh changes to what it was with the original #compdef and just update the readme to use an $fpath based setup like in zsh-users/zsh-completions?\n. Updated the changelog line describing the previous insertion of the existence checks.\n. ",
    "anderslime": "I'm having this issue too.\n. ",
    "manuelschipper": "I found an issue with my .tmux.conf:\nsetw -g mode-mouse on\nset -g mouse-select-pane on\nset -g mouse-resize-pane on\nset -g mouse-select-window on\nThis prevented the command run.\n. ",
    "michcio1234": "What exactly prevented the command to be ran? What did you change?. ",
    "DanielArndt": "I'm also having a similar issue with a custom layout. The third pane never opens, and I get a create pane failed: pane too small error.\n. ",
    "Takif": "Same problem here.\nversion 0.7.0\n. ",
    "joshuakarjala": "Also have this problem\n. ",
    "dasilvacontin": "Same problem here, 0.7.0.\n. ",
    "hafizio": "I'm also facing the same problem\n. ",
    "suy": "To be pedantic: It should be $XDG_CONFIG_HOME/tmuxinator, with $XDG_CONFIG_HOME defaulting to ~/.config if unset. I think I can do this myself, if you are open to the change.\n. ",
    "ncoop": "Suggestion on how to implement:\n1. Look at $XDG_CONFIG_HOME if it's set and not empty, or else ~/.config/. If tmuxinator dir (no dot) is there, use it.\n2. Else use ~/.tmuxinator if it exists.\n3. Else there's no config dir, so create it in the first location.\n4. If the first location doesn't exist, create it in home.\nThis is similar to how git config searches, and it's nice because users who don't want to organize with XDG don't even have to know about it. (Git config also has a custom env var that has higher priority, and a command line option with maximum priority.)\nWith this done, I think mux doctor should also report where the config dir is.\n. Today I learned there's a gem to facilitate this:\nhttps://rubyworks.github.io/xdg/\n. OK, decided to squash the fix into that last commit.\n. Out of curiosity, how have other gem maintainers dealt with this?\n. I think everyone here is getting too wrapped up in the implementation to question the motivation.\nThe problem is you want to know when to drop support for old versions of tmux. The answer is \"whenever you want\". Having all the data isn't going to make maintaining old tmux support, or cutting off old tmux users any easier.\nJust maintain a tmux-tmuxinator version compatibility table in the README, and users will know what to do. Usage analytics is a feature that shouldn't exist.. @J3RN OK, done.\n@ethagnawl Should the symlink be left alone then?\n. @J3RN Yes. The completions get read by source, so there is no need for them to be executable.\nWell, if the symlink is there, we need to do something to confirm it's not valid before aliasing, yeah?\n. Rebased.\n. ",
    "HaleTom": "What to do if both $HOME/.tmuxinator and $XDG_CONFIG_HOME/.tmuxinator exist? \nOptions:\n1. Take the git approach: process $XDG_CONFIG_HOME/.tmuxinator first, then override with any settings found in $HOME/.tmuxinator \n2. Warn that  $HOME/.tmuxinator exists and only $XDG_CONFIG_HOME/.tmuxinator will be used\n3. Error and let the user sort it out\n4. Use only the file specified in the $TMUXINATOR_CONFIG environment variable, else the default\nOption (1) is probably the hardest to implement but most inter-operable with (e.g.) existing scripts.\nWould the project accept a pull-request for Options (2), (3) or (4)?\n. @geowa4 you're right about (1 - git style) - I sometimes get strange behaviour when I copy $XDG_CONFIG_HOME/git/config to ~/.gitconfig +\nLet's say we (2) warn for now, how could we implement this in a way that allows transition to (3) erroring?\nIf a easy transition (for the users) is not possible, and erroring is the end goal, perhaps it's best to take a bit longer and exhibit that behaviour from the get-go?\n+ Why you ask? Because I manage this ~300 line file in my dotfiles git repository [which tries to follow XDG base dirs].\n. I'm working on implementing this currently, and am going for option (1) so as to not break current behaviour.\nWhen looking for a project called project, the current behaviour is to return the first filename found in:\n1. A search of ~/.tmuxinator/ and all its subdirectories for the first file named project.yml\n2. ./tmuxinator.yml\nThere is no warning currently if a duplicate situation exists. I'm not saying that this is the desired behaviour, but I don't want to do more than resolve this issue and #462 at the moment.\nI am writing a test to document this previously undocumented \"first found\" behaviour however.\n. I trust that you've now had time to check out #479.\nWhat is the process for getting this merged in?\n. @ethagnawl Perhaps define regularly? Otherwise, LTGM.\nI answered \"no\" to would I opt-in, because of a lack of trust, due to a lack of information about the trustworthiness of the reporting tool / implementation. It's an emotional FUD response.\nI suspect that providing a FUD-reducing tinyURL where users can find out more would more than double your opt-in rate. \nActually, perhaps whether or not to include a link to \"why should I trust you?\" in the implementation could be in the survey :)\n. OK, ready for comments / merge.\n. @ethagnawl I trust that this is good to go now. Thanks for the thorough review - I learned from it.. I'm working towards diagnosing this. I got out of hospital yesterday (dengue), and am battling a json error when running bundle install under Manjaro, but I am trucking on.... The doco for Dir::glob says:\n\nNote that case sensitivity depends on your system (so File::FNM_CASEFOLD is ignored), as does the order in which the results are returned.\n\nI'll append .sort so that the results are (hopefully) system-independent.. PR #506 created. I hope this is what you were after - let me know if not.. I'm glad it wasn't just me having problems with the previously merged changed being hidden. Nice solution. \nfollowing. Won't this error just keep reappearing on every new build, or can it be disabled permanently?\nHow do I get the complexity rating on my own machine? I can try to \"decomplexify\" it, and remove the unidiomatic return.. Seriously, how long does it take for Code Climate to run? It's been 2 days now.\nI see: \nSome checks haven\u2019t completed yet\ncodeclimate \u2014 Code Climate is analyzing this code.\n@ethagnawl do you see the same?\n. @ethagnawl @seanmalloy Any comments? Can this be merged now? (It's been 2.5 months.)\nIt seems that codeclimate has indeed passed its checks when I click through (but the status isn't updated on this page).\n. I came here because I was getting the error:\nDEPRECATION: the post option has been replaced by project hooks and will\n    not be supported anymore.\nHere is the sample.yml referred to above.\nI replaced my post: with:\non_project_start: date. I guess a brain-fart doesn't count :)\n. Thanks for the thorough review, I'll get on to these in a couple of days to allow for more reviewers to have their say in the meantime.\n. ",
    "Yamakaky": "Yeah, I think you should warning for a bit then error.\n. ",
    "KevinSjoberg": "I'm encountering the same problem. Running tmuxinator open [existing project] just overrides whatever I've had there before with the default preset.\n. @ethagnawl I'm using tmuxinator 0.7.0. Good to know a fix is already in place. :+1: \n. Cheers @adamstrickland!\n. @adamstrickland hmm, interesting. It should not be something related to this pull request at least. I just ran bundle install --jobs=3 --retry=3 on my machine for the master branch of tmuxinator using Ruby version ruby 1.9.3p551 and it ran just fine.\nHowever, by searching for the given error message I found this issue on Bundler. https://github.com/bundler/bundler/issues/3558. So, maybe related to bundler then.\n. @ethagnawl I'll rebase with upstream/master as soon as I get home. Sorry for the delay. Totally blanked out on this one.\n. @adamstrickland @ethagnawl I've rebased with upstream/master and Travis seems happy as well! :smile: \n. ",
    "endline": "awesome. cheers @adamstrickland \n. ",
    "gon1332": "When I start with Tmux everything is OK. It works OK also for scripted sessions. For example I use this script:\n```\nsource-file ~/.tmux.conf\nCreate a new session\nnew-session -s development -n editor -d\nSend commands in the session\nsend-keys -t development 'cd ~/devproject' C-m\nsend-keys -t development 'vim' C-m\nSplit the window\nsplit-window -v -t development\nselect-layout -t development main-horizontal\nsend-keys -t development:1.2 'cd ~/devproject' C-m\nCreate a new window\nnew-window -n console -t development\nsend-keys -t development:2 'cd ~/devproject' C-m\nselect-window -t development:1\n```\ntmux_options comments says this:\n# Pass command line options to tmux. Useful for specifying a different tmux.conf.\n which means that tmux.conf will be picked by default. Either ways, if I explicitly specify it in tmux_options, it will not work.\n. ",
    "FlorianWendelborn": "Does this work when using a system wide /etc/tmux.conf?\n. ",
    "flyinggrizzly": "I'm seeing the same thing, but haven't tried setting /etc/tmux.conf\nWorkaround I'm using, in case it's useful for anyone else, is using the pre_window hook:\nruby\npre_window: tmux source ~/.tmux.conf\nIt feels a little bit hacky, but it's working in the meantime.. ",
    "vapniks": "No longer using tmuxinator (using tmux-resurrect instead), so no longer an issue.\n. ",
    "christophermanning": "Ideally, tmux would wait for the prompt to be ready before sending keys.\nThere may be a better way to wait for the prompt to be ready, but adding sleep before the tmux command in your yml config is a brute force way to fix it: tmux_command: sleep 1 && tmux\n. ",
    "nfirvine": "Okay, good enough.\n. ",
    "JohnRodney": "I have it working on my local with this syntax\ntmuxinator open [projectName] --default [defaultName]\nIt then checks if the file exists if it does not then it falls back to default. If default doesn't exist then it uses the sample provided.\nOpen to suggestions.\n. This is in reference to open issue feature request #372 \n. @J3RN no worries as I had mentioned I hacked my local version to have this behavior so its not a big deal either way.  Just wanted to share the solution in case anyone else had my situation where you end up bootstrapping multiple project types like Meteor Projects, Ruby Projects, Node Projects, ect.  \nIts been quite a while since I wrote this code so may take a refresher if you request me to alter it in any way.\n. @J3RN looks like there are some merge conflicts now.  Did yo get a chance to look at this / have any feedback or requested updates to the code for me?\n. thanks @J3RN I will look into making these adjustments in the next day or so.\n. ",
    "Chun-Yang": "+1\n. ",
    "rubendibattista": "I think the issue was related to https://github.com/robbyrussell/oh-my-zsh/issues/518.\nExecuting exec zsh should solve the problem. \n. True!\nI also updated tmuxinator \ngem update tmuxinator\nSo it was the version.\nThanks @ethagnawl !\n. ",
    "AlexZeitler": "I was using it totally wrong\nyml\nwindows:\n  - editor:\n      layout: 1fd2,205x62,0,0{102x62,0,0[102x21,0,0,16,102x40,0,22,18],102x62,103,0,17}\n      panes:\n        - dockercompose\n            - cd ~/src/integration\n            - nodemon -w .. -e js,json,html -x \"docker-compose kill && docker-compose up -d\"\n        - input:\n            - bash\n        - gruntjobs:\n            - cd ~/src/ui\n            - grunt watch\nFirst, create the desired layout using tmux.\nThen detach the session.\nThen tmux list-windows:\n0: editor* (3 panes) [205x62] [layout 87ff,205x62,0,0{102x62,0,0[102x21,0,0,0,102x40,0,22,1],102x62,103,0,2}] @0 (active)\nThen grab the content inside the brackets starting with \"layout\" and paste it as layout: to the tmuxinator file.\n. ",
    "goofansu": "@AlexZeitler Thank you, saved me lots of time.\n. ",
    "cescoferraro": "+1\n. ",
    "dannluciano": "@ethagnawl How we do the stop command without project name?\nThe commands are closely linked to the project module.\n. @ethagnawl what the problem with Travis? Can you restart the job https://travis-ci.org/tmuxinator/tmuxinator/jobs/114553630 ?\n. Nice, now all tests are fine. ^^.\n. ",
    "lwilletts": "Odd, I choose to use type because it should be implemented according to POSIX. Clearly whatever bash version you are running doesn't do this. I agree was probably a better solution to this using the inbuilt functionality, but as I was not familiar with it, I choose a POSIX solution instead.\n. Yes I completely agree with number 2. I wasn't aware that the bash completion completely worked fine when I implemented this: I admitted only checked zsh completion with did throw an error when trying to source the completion. I've been meaning to look into zsh completion for sometime now; I think switching to using fpath might be the best solution.\n. +1 to keep the zsh check for now; at least until we can make it use fpath or something similar.\n. ",
    "e2": "The workaround is to just copy the file until the symlinking is fixed.\nIt's better to have a gem with duplicate files (no matter how \"wrong\" that feels) rather than a non-working gem.\n. ",
    "Richard-Walton": "Ok - Further investigation reveals that the has-session = ... syntax is not available in tmux1.8 (The version I have installed from ubuntu/trusty repos)\nI tried upgrading to tmux v2.0 - the problem still persists.  I'm not sure what version the new syntax was added?\n. Downgrading to 0.7.1 fixes the issue\n. @J3RN - No problem.  Thanks for maintaining such a great tool.\nWith tmux 1.8 I have a session named \"dev-env\" running:\n```\ntmux ls\ndev-env: 18 windows (created Mon Apr  4 12:51:57 2016) [166x51]\ntmux has-session -t dev-env && echo $?\n0\n```\nUnfortunately adding = as you suggested does not work:\ntmux has-session -t =dev-env\nsession not found: =dev-env\n. I wonder if perhaps, to maintain compatibility with older versions of tmux, we could do something like:\ntmux ls | grep \"^<% name %>:\"\n?\n. I've opened a pull request (https://github.com/tmuxinator/tmuxinator/pull/404)\nI have a shameful admission to make:  I haven't been able to test this change outside of on my machine on the command line (using tmux 1.8).  \nAs long as I've written the ruby template interpolation correctly (I'm not known for my ruby skills) and the tmux ls output hasn't changed since tmux 1.8 we're good to go.... :)\n. @Soliah - Agreed.  Hold on.\n. New pull request @ https://github.com/tmuxinator/tmuxinator/pull/404\n. Anything else need changing?\n. @adamstrickland Ok, added tests.  Again, I'm not a ruby dev so this code may be crazy. \nRelated note: The rubocop line length constraint is difficult to work with.  This some of the multiline strings in the tests.\n. Err..., yeah that's just poor logic.  My bad - I was rushing to get this pushed so I could get back to work.\nFixed in next commit :)\n. ",
    "caioariede": "Which version should I use to avoid this?\n. Nvm, I got it. I installed the working version (0.7.1) but forgot to uninstall 0.7.2.\n. ",
    "synthmeat": "bash, and yes, sourced as usual (haven't changed it, just did update on tmuxinator).\nThought it might be related to bash-completion, but it seems to work ok otherwise (i.e., ssh hosts from ~/.ssh/config get completed properly.\n. I actually did have unupdated tmuxinator source in my dotfiles, which is where I source completion but, alas, the issue remained.\n. ",
    "kelvinst": "Oh gosh, I would comment if you have any news. Now I saw that this issue was reported yesterday. lol\n. I've just checked. On 0.7.0 version of the gem it works perfectly (even with the new version of the completion script). Something changed on the tmuxinator completions start command that is used on the completion script:\n``` bash\n$ /Users/kelvinst/.rvm/gems/ruby-2.3.0/gems/tmuxinator-0.7.0/bin/tmuxinator completions start\ndefault\ndotfiles\njmseg-risk-control3\nminestore-walmart\nminestore\nrisk-control\nsherclock\n$ /Users/kelvinst/.rvm/gems/ruby-2.3.0/gems/tmuxinator-0.8.0/bin/tmuxinator completions start\n[\"default\", \"dotfiles\", \"jmseg-risk-control3\", \"minestore-walmart\", \"minestore\", \"risk-control\", \"sherclock\"]\n``\n. I'll make agit bisect` to check this tonight, so we can identify which commit broke it. :)\nMaybe I could even fix, add a test and PR you if I get some time tonight.\n. @J3RN Any idea of when you release this fix on a gem version? I hate to be out of date. :grin:\n. \ud83c\udf89 \ud83c\udf86 THANKS! Updated and running.. :)\n. ",
    "gibbling": "Same for fish shell\n\n. ",
    "sramsay64": "I literally discovered tmuxinator because I saw it in the synaptic package manager under tmux. The deb file is at http://au.archive.ubuntu.com/ubuntu/pool/universe/t/tmuxinator/tmuxinator_0.7.0-2_all.deb.\n. Here's a screenshot of the details from synaptic: \n. ",
    "mjsr": "@J3RN, I cannot repro this issue anymore. Probably a mistake on my end.\nThings are working as expected now. Sorry for the trouble and thanks for getting back to me.\n- mjsr\n. ",
    "mdarby": "If anyone stumbles upon this -- relative window roots were not working for me (tmux 2.2/tmuxinator 0.8.1). Updating them to full static paths does work.\n. ",
    "rmccue": "Not a Rubyist, just a fan of tmuxinator, so might take me a little while to get that sorted, but I'll give it a shot :)\n. ",
    "autumnlansing": "I'm getting this same issue after a recent upgrade from Fedora 23 to 24. As with @fbertux, I receive the \"no server running\" message, and it only happens if there are no other tmux sessions running.\nTmux was updated to 2.2 from 2.1 during the upgrade. The issue happens with both tmuxinator 0.7.1 and 0.8.1. The problem didn't occur on Fedora 23. I use zsh for my shell.\n. ",
    "timeemit": "Ah, just read through the actual problem.\nHappy to write a copy of tmuxinator to bin/mux like @e2 suggests in #401 if that's the consensus.\n. ",
    "nicolas33": "This is not a duplicate, IMHO. root variable is ignored for both relative and absolute paths with tmux 2.2.\n. Notice I have to add -c \"$PWD\" to my manual \"tmux new-session\" invokations to get tmux not starting in my home ~.\n. ",
    "icole": "@J3RN Hey just wanted to see if there was any update on this? I recently started using tmuxinator and could really use this feature as well. I would be willing to pick up where you left off and take a crack at it if you want.\n. @wardva I was actually just revisiting it this week and will probably try to get something in this weekend if I can, but feel free to give it a shot too if you need it ASAP and can beat me to the punch.. ",
    "wardva": "@J3RN @icole Is someone still working on this? Otherwise I would give it a shot. I really need this feature.. ",
    "quozd": "After some research I've found that it was my fault which caused such behaviour. No issue any more\n. ",
    "jefify": "Hi, I have the same issue that I wanna get from arguments some complex commands, however it's almost impossible to escape especially the equal sign, is there any solution for it?\nIs it possible to have something like \"--no-settings\" to avoid splitting with the equal sign?\nThx!. ",
    "jpaugh": "Still seeing this in 0.10.0. However, some commands do work.\nThese do not work:\n$ mux -v\n$ mux help\n\nThese commands do work:\n\nversion\nlist\ncommands\n\nI haven't tried any other commands, because I haven't learned what they do, yet.. Life happens. That's okay. \nOn December 7, 2017 3:52:53 PM CST, Adam Strickland notifications@github.com wrote:\n\nCrap...  I self-assigned this some time ago and totally flaked.  Sorry\nabout that.\n-- \nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub:\nhttps://github.com/tmuxinator/tmuxinator/issues/431#issuecomment-350105703\n\n-- \nSent from my Android device with K-9 Mail. Please excuse my brevity.. ",
    "ixodie": "My question was how can I pass login credentials to a pane as if I am typing it (i.e. not sshpass).\n. Because it is a telnet session, connecting to a redirected console port, so the system has to wait for the device to boot properly.  It is not ssh.\n. ",
    "DuncSmith": "Yes, that's how I perceived the feature should work. I think the existing behaviour has potential to cause strange issues, I wouldn't expect all the commands to be sent to the first pane for example. I think the correct way to implement that would be something more like:\nwindows:\n  - editor:\n      layout: main-vertical\n      synchronize: true\n      panes:\n        - pane_1:\n          - echo 'pane 1'\n          - echo 'pane 2'\n          - echo 'pane 3'\n          - echo 'pane 4'\n        - pane_2:\n          - echo 'pane 1'\n          - echo 'pane 2'\n          - echo 'pane 3'\n          - echo 'pane 4'\n. @adamstrickland @ethagnawl Apologies for delay, updated and rebased.\n. ",
    "bbugyi200": "To specify the startup window, you can use the startup_window option (check the README). I couldn't find a analagous option for selecting a startup pane on each window; however, I think you might want to adjust your workaround to use just tmux select-pane -t [W].[P], where W is the window number and P is the pane number of whichever pane you want to focus on window W. This seems to be working reliably for me to set startup panes on each window.. ",
    "epylinkn": ":+1: I'm getting the same:\n\n```\n[anthony ~/$/dia/diaco]$ tmuxinator debug dia\n!/bin/bash\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server;\ncd /Users/anthony/\\$/dia/diaco\n# Run pre command.\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s dia-test -n dev\n# Create other windows.\n  tmux new-window  -t dia-test:1 -n console\n  tmux new-window  -t dia-test:2 -n server\n# Window \"dev\"\n  tmux send-keys -t dia-test:0 ls C-m\n# Window \"console\"\n  tmux send-keys -t dia-test:1 bundle\\ exec\\ rails\\ console C-m\n# Window \"server\"\n  tmux send-keys -t dia-test:2 bundle\\ exec\\ rails\\ server C-m\ntmux select-window -t 0\n  tmux select-pane -t 0\nif [ -z \"$TMUX\" ]; then\n    tmux -u attach-session -t dia-test\n  else\n    tmux -u switch-client -t dia-test\n  fi\n``. looks to be theTMUX=` empty assignment?. @ptpt worked for me! <3. ",
    "ptpt": "I had the same issue which was caused by C-m (or C-j) remapped to something else in my ~/.inputrc. Removing this mapping the issue solved. Hope it helps you.. ",
    "agilmor": "@ptpt I don't have any remap of C-m, but it's true that changing or disabling my ~/.inputrc makes it work or not... but in a random way?\nTo me it looks like some times the two consecutive send-keys are sent too fast and the actual app doesn't receive the keys? \nUsing the debug script I've been able to add a long sleep 5between the two consecutive send-keys and it worked with no more randomness... it seems.\nIs there any way to add some sleep between the send-keys?\npre_window is not useful, as it actually creates an extra send-keys... and only before the first one for each pane.\nThanks! \n. ",
    "jerri": "Timing to the send-keys-values would be awesome. Some script just are not fast enough.... ",
    "wkentaro": "I also hope this feature, but currently I'm using read && prefix like read && cat log.txt.\n. ",
    "MansoorMajeed": "It happened to me and the reason was my text editor mixing tabs and spaces. \n. @adamstrickland Yes, I can confirm that mixing tabs and spaces causes this issue and converting all tabs into spaces fixes it. \n. ",
    "aashudwivedi": "It would be better to show any yaml parsing errors not just tab/space mixing. \n. ",
    "crobicha": "+1 for better error messages - spent a lot of time debugging my YAML files only to discover that tabs/spaces was indeed the problem. Would be great if tmuxinator could print a more detailed error or at least the line number that failed parsing. Thanks, I've got a simple fix working locally, just changing that line to\n\nraise \"Failed to parse config file: \" + e.message\n\nWhat would be a simple way to test this? Maybe an invalid yml file and check for error message when trying to start a new session?. I can't seem to find the proper way to get the rake test working on my setup, so I published the branch with the functional change (https://github.com/crobicha/tmuxinator/tree/issue/520-config-parse-error-message). Maybe someone could add a quick test but for me I can verify it is working locally. Thanks for taking care of this! The existing project tests were passing, I just was having issues writing the new test case, probably due to operator error :-). ",
    "Xenopathic": "Ah, the issue is already fixed by ab57f3734b7abd273a46ef6c00c2c7c96fda1852, so these gsubs are unnecessary. I probably should have actually checked what version of tmuxinator was installed on my system before immediately making a patch based on git master...\n. ",
    "brandonsturgeon": "Hi @ethagnawl ,\nThanks for the response.\nHere are my versions\nbrandon@brandon-VirtualBox:~$ tmuxinator -v\ntmuxinator 0.9.0\nbrandon@brandon-VirtualBox:~$ tmux -V\ntmux 2.1\nI get the same output when I try base-index 0\ncan't find pane 1\ncan't find pane 2\ncan't find pane 3\ncan't find pane 4\n[exited]\n. I restarted my machine and it appears to work now?\nI have base-index 0 so, maybe that was the trick.\n. ",
    "haarts": "This is driving me crazy. I have the same issue.  Haven't tried restarting the machine but did toy with base-index 0 and 1. \nTmux 2.3 BTW\n. I no longer believe the dashes are the problem. It's lxc which does something to stdin: https://github.com/lxc/lxd/issues/2200.\n. ",
    "seriley": "I get the same error. When I do mux debug sample I note that one of the last commands in the output is tmux select-pane -t 0. tmuxinator doesn't appear to recognize the pane-base-index setting in .tmux.conf. ",
    "dcalhoun": "I experience this as well using the following in my tmux.conf.\nset -g base-index 1\nset-window-option -g pane-base-index 1. Adding startup_pane: 1 to my Yaml file resolved this for me as well. We likely should close this issue.. ",
    "zx1986": "In my Mac, this NOT work:\n```\nset -g base-index 1\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\nset -g status-right '#{prefix_highlight} | %a %Y-%m-%d %H:%M'\nset-option -g default-command \"reattach-to-user-namespace -l zsh\"\n```\nrefs: https://github.com/tmuxinator/tmuxinator/issues/137. @wassimk yes, I said 'not work' too.. ",
    "akuma": "+1\nmacOS; tmux 2.3; tmuxinator 0.9.0. ",
    "wassimk": "I have the same issue as @akuma except I also tried HEAD and same problem. I have @zx1986 config and it doesn't help.. I had the issue with our without startup_pane set. But yesterday I uninstalled tmux master and installed 2.5. Works perfect. Reminded me how important tmuxinator is to my workflow!. ",
    "Heuristack": "Hi, same here, macOS; tmux 2.3; tmuxinator 0.9.0\n. ",
    "ctnieves": "Same issue here. \ntmuxinator 0.9.0\nmacOS 10.12\n. Having a similar issue here.  \nKali Linux\ntmux 2.7\ntmuxinator 0.11.2. ",
    "muellerj": "+1. The first pane of the first window gets the cd ~/root/path/of/the/project, all other panes and windows start in the wrong dir (from where tmuxinator was called).\nCygwin x86 2.8.0\ntmuxinator 0.9.0\ntmux 2.0.\n",
    "kevinquillen": "Same issue as the other mac users, and I too have base-index set.. ",
    "cyrossignol": "Just ran into this issue as well. In my particular case, I needed to format my project's yml file properly. It seems as if the yaml parser is pretty strict about spacing, but I didn't see any formatting errors. I also needed to set the startup_pane directive to 1. I've been getting around the issue described by @muellerj by manually cding in each pane/window:\n```yml\nname: example\nstartup_pane: 1\nwindows:\n  - one\n      layout: main-vertical\n      panes:\n        - cd \"<%= @args[0] %>\" && actual-command \n        - cd \"<%= @args[0] %>\" && actual-command\n```\nmux start example \"$(pwd)\"\nor even..\nalias dev='mux start example \"$(pwd)\"'. ",
    "craighurley": "Adding startup_pane: 1 removed the error for me.  Thanks for the tip @cyrossignol.\n~/.tmux.conf looks has the following:\nset-option -g base-index 1\nset-window-option -g pane-base-index 1\n~/.tmuxinator/test.yml looks like:\n```\nname: test\nroot: ~/tmp/\nstartup_pane: 1\nwindows:\n  - testing:\n      root: ~/Projects/testing/\n      layout: main-horizontal\n      panes:\n        -\n        -\n  - ansible:\n      root: ~/Projects/ansible/\n      layout: main-horizontal\n      panes:\n        -\n        -\n```\nI'm running macOS 10.12.5 with the following versions:\n```\n$ tmux -V\ntmux 2.5\n$ gem list | grep tmuxinator\ntmuxinator (0.9.0)\n```\n. ",
    "Shamaoke": "@dcalhoun I think we shouldn't, until a fix which adds tmux select pane -t 1 instead of tmux select pane -t 0 to the startup script if pane-base-index 1 is present in tmux.conf.. I observe this behavior since I update tmuxinator from 0.13.0 to 0.15.0. Before that, in the same environment, tmux didn't create any logs in the current directory. Moreover, it doesn't create them now if I run the program not through tmuxinator.\nSo, the issue is definitely related to tmuxinator itself, not tmux, and I think, the thread shouldn't be closed.. When I started tmuxinator just now to test my layout, I found out, that the problem has disappeared by itself. So, yes, the thread can be closed. However, I still don't understand what could be the reason of it.\nThanks for your attention to the issue.. @raiyuza The problem came up right after I update tmuxinator. At first, I thought that these changes were intended, but as it turned out they weren't. After I restarted my computer, the problem disappeared. Perhaps I also updated some other soft and the operation of the program was affected by that fact.\nThanks for your analysis of possible solutions to the problem.. ",
    "danielo515": "In my case removing all root properties worked. It's a bit inconvenient because I have to specifically cd on each pane, but at least works. I'm using OSX El capitan.. ",
    "lethaldev": "@danielo515 Removing root worked for me as well on Debian stretch running tmux master.. ",
    "kleinjm": "startup_pane: 1 worked and fixed my layout's being messed up. Thanks. Hey thanks for the fast reply. No idea what changed but it seems to be working now. Sorry to bother. ",
    "endorama": "I'm sorry, I did that but that one has slipped trough my checks. Everything should be fine now.. > sample.yml is missing an on_start entry\nI'll fix this\n\nI think hook_on_stop may need to be moved before tmux_kill_session_command. On my system (Debian 8.6, Bash 4.3.30, Tmux 1.9, Ruby 2.3.1p112) on_stop commands are ignored unless I reverse these two method calls. Is this working for you?\n\nIt is. I'm currently using my fork to start and stop a vagrant machine when issuing tmuxinator start project and tmuxinator stop project\n\nDocument (and potentially fix) behavior of on_reattach_hook. From what I can tell, it appears to only be executed when reattaching via tmuxinator start ... and not tmux attach -t ....\n\nI would say this is by design. AFAIU for executing on tmux attach the proper tmux hook should be used. What is instead happening is that the hook_on_reattach command is written in the template file if tmux has a session named as the project name.\nI'm starting to think that the naming hook is really misleading, in particular for on_attach and on_reattach ( which are more tmux concepts than tmuxinator ones ). Should I rename them in a more project-related way? For example:\n- on_reattach could be on_project_restart\n- on_attach could be on_project_first_start\n- on_start could be on_before_project_start\n- on_stop could be on_project_stop\nThis renaming would also be future proof when proper tmux hooks are implemented. Sorry for all this confusion.. Sorry for the delay.\n\nhooks remaned to hook_on_project_*\nextracted the common code for hooks\nmoved project hooks to Tmuxinator::Hooks::Project to make the scope clearer\nupdated relevant specs. @Soliah thanks!\n\n@ethagnawl IMHO, pre and post could be deprecated, as I think these \"hooks\" are more explicit and perform the same action, but I'd leave this decision to you as you see fit.. Hello and sorry for the delay! I deprecated the pre and post options. \n. Hello @Soliah, any news about this? Just to confirm I'm being using this patch since February.. :tada: :tada: \nThanks a lot!!! :smile: . Hello! I'm on holiday right now and I can't debug it properly, sorry. I'll have a better look next week when I'm back!\nFor what I remember, this is not expected to work just killing tmux, because of tmuxinator behaviour: the on_stop hook is run when the command tmuxinator stop is run, not when the tmux session/server is killed.\nAlso, running tmuxinator stop from inside tmux will probably not work as the tmux session ( and the shell within ) is killed before running the on_stop command ( look at lib/tmuxinator/assets/template-stop.erb ).\nAs tmuxinator just create and run a shell script for performing it's actions, to debug it's behaviour you can print on screen the command before it's execution ( temporary hacking a bit the source code of the gem ).\nThe expected behaviour is: run the command after killing the tmux session.\nI remember reading about tmux hook that could be used for this, but I was not proficient enough to do it. If someone could help, I'll gladly have a look again.\n@ethagnawl if you want to assign the documentation PR to me highlighting what need clarification I'll submit a PR.\n@iovis9 if you still need help let me get back from holidays and I'll help\nyou. I currently use with success the tmuxinator stop <project> command, so should be a viable workaround.\n. @iovis9 I'm back! Do you still need help?. @beaugunderson I'd say that this is not the expected behaviour.\nPlease have a look at lines 96 to 99 in the template file:\n```erb\n<%= post %>\n<%- unless attach? -%>\n  # Run on_project_exit command.\n<%= hook_on_project_exit %>\n<%- end -%>\n````\non_project_exit should behave as post, I have added by purpose of maintaining backward compatibility. Is possible that the unless attach? check is breaking this behaviour.\nCould you please open a new issue with a more complete example and use case for me to look at? Thanks\n. Hi @codezomb, could you help me in understanding the use case?\nWith the previous implementation, the post was effectively running on detach from the tmux session. This has been replaced by the on_project_exit ( which could be an example of poor naming, but should retain the same behaviour ). If not is a bug, and I suspect the unless attach? check is to blame.\nThe on_project_stop is called only when tmuxinator stop project is run, so I don't think is helpful for this particular use case.\nIf you help me in understanding the use case I'm willing to work on this to help you retaining your workflow :slightly_smiling_face: The different hook were meant to be an enhancement, not a loss of functionality.\nAdding a reference to the PR that introduced the change, to add a bit of context https://github.com/tmuxinator/tmuxinator/pull/486\nThanks!. I did some testing today, using the version available here ( version 0.11.1 customized for debugging ).\nThe project file:\n```yaml\n~/.tmuxinator/test.yml\nname: test\nroot: /tmp\nProject hooks\nRuns on project start, always\non_project_start: command\nRun on project start, the first time\non_project_first_start: echo on_project_first_start\nRun on project start, after the first time\non_project_restart: command\nRun on project exit ( detaching from tmux session )\non_project_exit: echo on_project_exit\nRun on project stop\non_project_stop: echo on_project_stop\nwindows:\n  - editor:\n```\nThen started the project:\nmy-shell $ tmuxinator start test\non_project_first_start\ntmux-session $\nThen I tried to stop the session using kill-session from inside the tmux session, and this is the output:\ntmux-session $\n[exited]\non_project_exit\nmy-shell $\nI restarted the project and stopped using tmux kill-session -t test from another terminal, and the output is the same.\nI restarted the project and detached from the session ( Escape d ) and the output is:\ntmux-session $\n[detached (from session test)]\non_project_exit\nmy-shell $\nIs this the problem? That on_project_exit is triggered both on kill-session and on \"detach\"? \nI would say that from the code POV is the \"expected\" behaviour, as you are detaching from the session in all 3 cases, from a human POV maybe is a bit confusing because only the last case is an effective \"detach\". Is this the use case that is broken?\nThe on_project_stop is not a choice in this case, because the stop is referring to the explicit call of the tmuxinator stop project command, which I assumed is/was the intended workflow, even if the readme does not mention it anywhere :slightly_smiling_face: \n. :slightly_frowning_face: weird, I tried starting the project and running tmux kill-session -t test from inside the session and the output is this:\nmy-shell $ tmuxinator start test\ntmux-session $ tmux kill-session -t test\n[exited]\non_project_exit\nno server running on /tmp/tmux-1000/default\non_project_stop\nmy-shell $\nWhat is the tmuxinator version? \n. @codezomb thank you for the asciinema!\nThis behaviour was effectively broken, thanks to you I discovered the tmuxinator local command ( which I never used ).\nAnd I debugged the issue, please have a look at this and let me know if this is the expected bahaviour:\n\nIf it's ok, I'm going to submit the PR to address this.. > That being said, is there anyway we could get detach -> on_project_exit and kill-session -> on_project-stop? I would think this makes much more sense, and is in line with what most people in this thread would expect.\nAFAIK no, because is not possible to know if is a detach or a kill-session ( the hook is executed after you exit the tmux session, and the reason why this happened are not known to that snippet ).\nThat is the reason why there is the stop command, which requires a explicit action.\nBut luckily it seems that tmux support hooks since version 2.2 ( have a look at the changelog ).\nI also found this blog post with some usage examples, but I had no luck in implementing this feature.. @ethagnawl Thank you!\nAnd thanks everyone that helped me solving the issue! :+1: . Hello all, this has been reported also in another issue, and the problem lies in the documentation which suggest using on_project_start instead of the correct on_project_exit with attach: false.\nI just made a PR to fix this https://github.com/tmuxinator/tmuxinator/pull/650\nFrom the configuration posted by @anquegi I would suggest setting attach: false in order to override the attaching command run by tmuxinator, and specifying this command in the on_project_exit hook.\non_project_exit is confusing in this use case, but is supposed to run after detaching from the tmux session ( which is similar to the confusion produced by the post configuration when attach is false ). @ethagnawl I would open a new issue to add some sort of custom_attach_command in order to help using this feature, what do you think?\nMeanwhile could you try using the suggested workaround and report here? Thank you.\n. Hi all!\nI suspect the correct hook to use in case presented by @mstruebing would be on_project_exit, not on_project_start. If I got it right, you want to execute an action when exiting the attached session from tmuxinator. If this is the case, the same behaviour of the post action is retained by the on_project_exit hook.\nThis is implemented lines https://github.com/tmuxinator/tmuxinator/blob/63009373840109a4045f780362109ce7273ac119/lib/tmuxinator/assets/template.erb#L95-L99 \nThe case presented by @jakubrohleder is a bit different, but would probably work with the on_project_exit hook too, as the post and on_project_exit are executed in the same moment. \nAs this case seems to be related to a custom attach command, and the attach: false with post: tmux attach is the documented way to specify a custom attach command; would probably be best to add a custom_attach_command option?\n@mstruebing @jakubrohleder could you please try to use on_project_exit for your use cases? If that works and I correctly understood what you are trying to achieve, I would open a new issue for the case presented by @jakubrohleder, while discussing how to clarify the relation between the on_project_exit and post options.\nNaming unfortunately is a bit difficult to get right due to how the session creation and attaching works in the start tmuxinator script: \n- when attach: true post and on_project_exit are being executed on session detach\n- when attach: false post and on_project_exit are being executed before session attach ( because attaching does not happen )\n@ethagnawl I'm open to adding new hooks if needed or renaming the current ones, I'd like to clarify the use cases though.. @jakubrohleder as your issue seems related to https://github.com/tmuxinator/tmuxinator/issues/581 and I would continue the discussion there. Please have a look at https://github.com/tmuxinator/tmuxinator/issues/581#issuecomment-418168094. @mstruebing I'm sorry I think I'm missing something in your configuration.\n\nI want to have this main session alone and no other session at all.\nSo I need to kill the first session autostarted by my terminal manually.\n\nAre you using the attach: false option? \nI get your use case, and the on_project_start hook would be appropriate in your case. But I don't get how that would work using post: post is run after the \"tmuxinator session\" has been configured, independently from the attach option. In any case if post works, on_project_exit ( even if the name suggest otherwise ) should work too.\nCould you post your project configuration and the result of tmxuninator debug <project>?. @mstruebing from your video I cannot understand what is not working when using the on_project_start. \nI would also try using on_project_first_start, which triggers only when there is no session related to the project already active ( and should avoid destroying the session if multiple start are issued ). @ethagnawl AFAICT that functionality never worked as intended, and I don't think can be used like this.\nBut if you can provide some more informations on the attach? method this should be clearer.\nMy intent with the unless attach? check was to avoid that multiple shell connected to the same tmux instance would each trigger the on_project_exit hook on session detach. With that check instead the on_project_exit is never triggered, and I would consider this a bug.. @mateusmedeiros thanks for the PR!\n\nAs the comment of mine referenced above implies, this is (IMO) the expected behavior\n\nI'm also in favor of this change, as that behaviour is probably more expected than the current one ( and the current one should probably be considered a bug ). @ethagnawl didn't push this and I missed the bugged behaviour.\nI'm sorry.\n\nI'd like to merge this as-is, but my one concern is that this change could result in -- potentially destructive -- unexpected behavior (e.g. someone has a hook in place which suddenly starts running). I may be overthinking this, though.\n\n@ethagnawl this is potentially true, as someone could rely on it being run only if stop is run from outside the session.\nCould we think adding a new hook along the line of on_tmux_session_end that runs in the position @mateusmedeiros proposed instead?. I didn't propose such solution because I preferred to give something simpler to review as is my first contribution, but if that is the preferred path for this feature I'll be more than welcome in contributing on that!\nAlso be aware that this is a \"hook on tmuxinator project events\" and not a \"hook on tmux event\".\nAFAIU tmux hooks are global/session level configuration, while this PR simply expand the pre and post configurations already available.\nI probably choose the wrong name \"hooks\" as is misleading in this context, and talking about tmux session events helped the misunderstanding. I'm sorry. I reworded the title to be more correct.. ",
    "gmcclins": "As far as your first issue it sounds like you are loading a new tmux session within a tmux session. You would need to detach from your default session first and then tmuxinator start servers.. ",
    "randaalex": "@ethagnawl I sure YAML config totally valid. \nI get correct commands from project.render call (I used binding.pry for getting this value):\n...\n # Create other windows.\n  tmux new-window -c /vagrant/api/pr2 -t pr:1 -n api/pr2\nI guess I have problem in my tmux. And my idea: refactor new-window dir changing from -c new/path to tmux send-keys -t pr:0 cd\\ /new/path C-m. This let to remove a code for change workflow for old tmux versions (https://github.com/tmuxinator/tmuxinator/blob/master/lib/tmuxinator/assets/template.erb#L15-L25). ",
    "dominikduda": "Any further info on this?. ",
    "safecancel": "Also getting this  :'(\n```\n$ uname -a \nMINGW64_NT-6.1 W7E-74068 2.10.0(0.325/5/3) 2018-02-09 15:25 x86_64 Msys\n$ ruby -v\nruby 2.4.0p0 (2016-12-24 revision 57164) [x86_64-msys]\n$ gem -v\n2.6.8\n```\n. ",
    "strang3r": "The on_project_start hook works perfectly for detaching existing sessions as I had originally intended, thank you.\nI was not able to determine how to use the project hooks to switch windows after they have been created (as per my original attempt using post).  I was able to work around this by creating a temporary window to issue a tmux command and then immediately closing the window.  It's a but kludgy but it works:\non_project_start: tmux detach-client -s test\nwindows:\n  - test01: ssh test01\n  - test02: ssh test02\n  - test03: ssh test03\n  - test04: ssh test04\n  - test-master: ssh test-master\n  - post: tmux move-window -s test:5 -t test:0; exit\nThis can remain closed, I just wanted to provide an update.. ",
    "sachin21": "I'm sorry for the late. I also think this is a really minor change. Many repositories does not write CHANGELOG.md.. ",
    "LoveIsGrief": "Ah, indeed the option exists, but I only discovered it because of completions.\n```bash\n$ tmuxinator version\ntmuxinator 0.9.0\n$ tmuxinator --help\ntmuxinator commands:\n  tmuxinator commands                          # Lists commands available in tmuxinator\n  tmuxinator completions [arg1 arg2]           # Used for shell completion\n  tmuxinator copy [EXISTING] [NEW]             # Copy an existing project to a new project and open it in your editor\n  tmuxinator debug [PROJECT] [ARGS]            # Output the shell commands that are generated by tmuxinator\n  tmuxinator delete [PROJECT1] [PROJECT2] ...  # Deletes given project\n  tmuxinator doctor                            # Look for problems in your configuration\n  tmuxinator help [COMMAND]                    # Describe available commands or one specific command\n  tmuxinator implode                           # Deletes all tmuxinator projects\n  tmuxinator list                              # Lists all tmuxinator projects\n  tmuxinator local                             # Start a tmux session using ./.tmuxinator.yml\n  tmuxinator new [PROJECT]                     # Create a new project file and open it in your editor\n  tmuxinator start [PROJECT] [ARGS]            # Start a tmux session using a project's tmuxinator config, with an optional [ALIAS] for project reuse\n  tmuxinator stop [PROJECT]                    # Stop a tmux session using a project's tmuxinator config\n  tmuxinator version                           # Display installed tmuxinator version\nCompletions\n$ tmuxinator \nbaldr         completions   debug         doctor        implode       local         open          stop          version     \ncommands      copy          delete        edit          list          new           start         test-cluster\n```\nSo this issue would be more with the incomplete help ;) Can't it be generated automatically from the argparser?. Nevermind, solution is \nyaml\nwindows:\n   - group1:\n      panes:\n         - tmux set-window-option monitor-activity on\n         - tmux set-window-option force-width 81\n         - tmux set-window-option @myCustomVar karma\nIt'll be in the correct session and window, so it's all good.\nCheers. Hi @adamstrickland \nThis was indeed a quick and dirty (possibly too dirty) PR while on holiday.\nThanks for having a look. I'll see when there's time again to address all your concerns to possibly get this in.\nWould a \"flag\" at the project or window level make this PR more acceptable (of course with all the other concerns addressed)? e.g \nyaml\npane_titles: True  # Project level flag\nwindows:\n  - editor:\n     pane_titles: True # Window level flag\nCheers. ",
    "frdrcv": "I'm using :\nruby 2.3.1p112 (2016-04-26) [x86_64-linux-gnu]\ntmux 2.2\nI can't tell which version of tmuxinator I'm using, as I get the error I named before - is there another way to get it?\nI installed it with the command on the about.md on github, which is gem install tmuxinator\nI don't really know about bundler; I'm not a programmer, so I don't really know how I could test it; do you have any recommandation?. Actually, when I try to just exec bundler, I get an identical error as tmuxinator:\n/home/nrfrd/bin/bundler:22:in '<main>': undefined method 'activate_bin_path' for Gem:Module (NoMethodError). ",
    "Adriel-M": "Having the same issue.\ngem --version: 2.6.10\nruby --version: ruby 2.2.6p396 (2016-11-15 revision 56800) [amd64-freebsd11]\nI installed from ports and via gem install. tmuxinator was working fine before a ruby update.. I don't use any other gems. Got anything specific for me to test out?. @ethagnawl pry worked for me.\nAh alright I think I see the problem. I was using mux rather than tmuxinator. I'm guessing mux got deprecated?\nEverything works for me and I'm guessing it's not the same issue as above.. ",
    "gauthamchandra": "I had the same issue recently and had the latest completion file aliasing mux to tmuxinator but I had an older version of tmuxinator. Installing the latest version via gem install tmuxinator fixed it. \ud83d\udc4d . ",
    "janemba": "Hello,\nI have the exact same issue. So I'll use this thread instead of opening a new one. Is it ok ?\nSo whatever command I type : $ tmuxinator --help $ tmuxinator --version $ tmuxinator doctor I don't get any output.\nplease find below some context :\n```\n$ ruby --version\nruby 2.4.3p205 (2017-12-14 revision 61247) [armv7l-linux-eabi]\n$ gem --version\n2.7.6\n$ tmux -V\n2.1\n```\nDo you how to debug this ?\nPlease let me know if you need further details.. Hi @ethagnawl,\nYes I'm using an ARM device. I will try the bundle command and let you know the result.\nThx. Hi @ethagnawl ,\nSorry for the late answer. I try the bundle command on tmuxinator git repository but I didn't how to debug things.\nSo, I tried again to execute tmuxinator from command-line with strace. I noticed that all the call to ioctl function failed. That call is made just after open function against ruby files is called (same file descriptor).\nThe  error from ioctl call is -1 ENOTTY (Inappropriate ioctl for device) (ioctl uses TCGETS as request).\n. @ethagnawl \nI didn't find any tests section in the README.md file. So I just did the test with ./bin/console.\nWhen I execute the script I don't have any output, I guess irb is not executed :\n```\n$ ./bin/console\n```\nThe cursor stay here but the process is not frozen (running at 100%).\nSo I run strace command against ./bin/console.  I don't know if it can help.\nlog.txt\n. Hi @ethagnawl,\nSo I tried the bundle command and I got this:\n$ bundle exec rake test --trace\n** Invoke test (first_time)\n** Invoke spec (first_time)\n** Execute spec\n/usr/bin/ruby -I/home/janemba/.vendor/bundle/ruby/2.4.0/gems/rspec-core-3.7.1/lib:/home/janemba/.vendor/bundle/ruby/2.4.0/gems/rspec-support-3.7.1/lib /home/janemba/.vendor/bundle/ruby/2.4.0/gems/rspec-core-3.7.1/exe/rspec --pattern spec/\\*\\*\\{,/\\*/\\*\\*\\}/\\*_spec.rb\n(I did the bundle install before).\nSo then, nothing happens and the ruby process is at 100%.. Hi @ethagnawl,\nI tried the script and I did 3 screenshots. So when executing the script I got some output (there is a fortune from my shell) and then I did exit and I got some panes and I did again\n\n\n\n. @ethagnawl \nSo maybe the issue is not related to tmuxinator. So I will check for ruby and others stuff instead.\nThank you.. ",
    "pedrocaseiro": "@ethagnawl My bundler version is already >= 1.13.4, it's 1.14.3 :/. @andrewdang17 Sometimes I can run it, it depends on the folder I'm currently at.. ",
    "andrewdang17": "I have this same issue, did you ever find a way to fix it @pedrocaseiro ?. ",
    "uhrohraggy": "+1 am running bundler 1.14.3 and getting this on Ubuntu. ",
    "grepsedawk": "I have this issue currently. It's weird and it is seeming to be related to RVM directly. I get this error when using tmuxinator:\nWarning: PATH set to RVM ruby but GEM_HOME and/or GEM_PATH not set, see:\n    https://github.com/rvm/rvm/issues/3212\n/ref https://github.com/rvm/rvm/issues/3212. @adamstrickland I always said the day I had issues related to RVM, I'd switch. I switched to asdf which is way more amazing and supports node too, and everything works.\nIt's directly related to RVM or ohmyzsh. I had both of those when having tmuxinator.\nSide note, asdf is great. https://github.com/pachonk/.dotfiles/blob/21e1fd4388db09c9c84ba3afc98eaa82a54d583e/.tmux.conf\nproject.yml is the default https://github.com/tmuxinator/tmuxinator/blob/e87f79fcd2a65b26ffa44c305fc85a6368e1588a/lib/tmuxinator/assets/sample.yml\n\n@ethagnawl I just realized, it specifically doesn't work when iTerm is on full screen or the width of it's window is expanded more than the default value\n\nThis might apply to me, but I'm not exactly sure how I can check what tmux thinks my width is to see if this is the issue. Do you have any ideas?. ",
    "hews": "Sorry, meant to be local to the fork.. ",
    "chaos234": "Push. Push. Push. @NicolasWebDev Maybe this should be a better titel?. @adamstrickland - \u00c4hm ... if this will be an issue why I should then state it with Question/Help needed? This would make no sence and sorry but my text is fully understandable since I have written it detailed.\nClosing this since it isn't resolved, is not the right way. Especialy then when you have no understanding what I want (then leave it to other ones).\nOh, your link ends up in a 404 error. Please check if the URL is correct, thanks.. ",
    "NicolasWebDev": "@chaos234, it is not really necessary to push issues on github, it won't get answered faster.\nMoreover, would you mind putting a more explicit title for the issue?. Here you go:\n```bash\n+ ~$ mux debug blog                                                                \n!/bin/bash\nClear rbenv variables before starting tmux\nunset RBENV_VERSION                                                              \nunset RBENV_DIR                                                                    \ntmux start-server;                                                                 \ncd /home/sathors/work/projects/nicolaswebdev_blog                                \n# Run pre command.                                                               \n# Create the session and the first window. Manually switch to root             \n  # directory if required to support tmux < 1.9                                  \n  TMUX= tmux new-session -d -s blog -n editor                                      \n# Create other windows.                                                        \n  tmux new-window  -t blog:2 -n extra1                                           \n  tmux new-window  -t blog:3 -n extra2                                           \n  tmux new-window  -t blog:4 -n server                                             \n# Window \"editor\"                                                              \n  tmux send-keys -t blog:1 vim C-m                                                 \n# Window \"extra1\"                                                                \n# Window \"extra2\"                                                                \n# Window \"server\"                                                              \n  tmux send-keys -t blog:4 bundle\\ exec\\ jekyll\\ liveserve\\ --drafts C-m           \ntmux select-window -t 1                                                        \n  tmux select-pane -t 0                                                            \nif [ -z \"$TMUX\" ]; then                                                        \n    tmux -u attach-session -t blog                                               \n  else                                                                           \n    tmux -u switch-client -t blog                                                \n  fi                                                                             \n```\n```bash\n+ ~$ cat .tmux.conf                                                                                        [65/116]\n-------------------------------------------------------------------------------------------------\nI have found this neat configuration there: http://zanshin.net/2013/09/05/my-tmux-configuration/\n-------------------------------------------------------------------------------------------------\nset-option -g mouse on                                                           \nset-option -g status-keys vi                                                     \nset-option -gw mode-keys vi                                                        \nSET WINDOWS SWITCH IN DIRECT ACCESS\nbind-key -n F1 select-window -t 1                                                \nbind-key F1 send-keys F1                                                         \nbind-key -n F2 select-window -t 2                                                \nbind-key F2 send-keys F2                                                         \nbind-key -n F3 select-window -t 3                                                \nbind-key F3 send-keys F3                                                         \nbind-key -n F4 select-window -t 4                                                \nbind-key F4 send-keys F4                                                         \nbind-key -n F5 select-window -t 5                                                \nbind-key F5 send-keys F5                                                         \nbind-key -n F6 select-window -t 6                                                \nbind-key F6 send-keys F6                                                         \nbind-key -n F7 select-window -t 7                                                \nbind-key F7 send-keys F7                                                         \nbind-key -n F8 select-window -t 8                                                \nbind-key F8 send-keys F8                                                         \nbind-key -n F9 select-window -t 9      \nbind-key F9 send-keys F9                 \nBEPO KEYS IN COPY MODE\nunbind-key -T copy-mode-vi j           \nbind-key -T copy-mode-vi j send -X 'jump-to-forward'                             \nunbind-key -T copy-mode-vi h           \nunbind-key -T copy-mode-vi l           \nunbind-key -T copy-mode-vi k           \nunbind-key -T copy-mode-vi C-d         \nunbind-key -T copy-mode-vi C-u           \nunbind-key -T copy-mode-vi c           \nbind-key -T copy-mode-vi c send -X 'cursor-left'                                 \nunbind-key -T copy-mode-vi t           \nbind-key -T copy-mode-vi t send -X 'cursor-down'                                 \nunbind-key -T copy-mode-vi s           \nbind-key -T copy-mode-vi s send -X 'cursor-up'                                   \nunbind-key -T copy-mode-vi r           \nbind-key -T copy-mode-vi r send -X 'cursor-right'                                \nunbind-key -T copy-mode-vi T\nbind-key -T copy-mode-vi T send -X 'halfpage-down'\nunbind-key -T copy-mode-vi S\nbind-key -T copy-mode-vi S send -X 'halfpage-up'\nchange the prefix from ctrl-b to ctrl-t\nunbind C-b\nset -g prefix C-Space\nbind C-Space send-prefix\nmake tmux display things in 256 colors\nset -g default-terminal \"tmux-256color\"\nset scrollback history to 10000 (10k)\nset -g history-limit 10000\nset window and pane index to 1 (0 by default)\nset-option -g base-index 1\nsetw -g pane-base-index 1\nreload ~/.tmux.conf using PREFIX r\nbind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\nuse PREFIX | to split window horizontally and PREFIX - to split vertically\nbind | split-window -h\nbind - split-window -v\n----------------------\nStatus Bar\n-----------------------\nset-option -g status on                # turn the status bar on\nset -g status-interval 5               # set update frequencey (default 15 seconds)\nset -g status-justify centre           # center window list for clarity\nset-option -g status-position top    # position the status bar at top of screen\nvisual notification of activity in other windows\nsetw -g monitor-activity on\nset -g visual-activity on\nset color for status bar\nset-option -g status-bg colour235 #base02\nset-option -g status-fg yellow #yellow\nset-option -g status-attr dim\nset window list colors - red for active and cyan for inactive\nset-window-option -g window-status-fg brightblue #base0\nset-window-option -g window-status-bg colour236\nset-window-option -g window-status-attr dim\nset-window-option -g window-status-current-fg brightred #orange\nset-window-option -g window-status-current-bg colour236\nset-window-option -g window-status-current-attr bright\nshow session name, window & pane number, date and time on right side of\nstatus bar\nset -g status-right-length 60          \nset -g status-right \"#[fg=blue]#S #I:#P #[fg=green]|| %T\"                          \n----------------------\nset some pretty colors\n----------------------\nset pane colors - hilight the active pane\nset-option -g pane-border-fg colour235 #base02                                   \nset-option -g pane-active-border-fg colour240 #base01                              \ncolorize messages in the command line\nset-option -g message-bg black #base02 \nset-option -g message-fg brightred #orange                                       \n```. I have tested #544, it does indeed solve the problem I had. Thanks!\nAs for nesting sessions, I am using tmux 2.5, so as @rglassett says, it should not be nested, or is it?. ",
    "vchernomor": "@mzaharie  you should first download it, as Readme tells \n\nDownload the appropriate completion file from the repo and source the file\n\n. ",
    "joelbyler": "Any update on this issue?  Would be great to not need that work around.  Otherwise this project is great!. @visar I decided to take a stab at creating a similar project just for tmate, I called it tomago and you can check it out here.  Full disclosure, it probably just barely works, feel free to contribute PRs or provide feedback there if you decide to give it a try. . ",
    "visar": "Still broken.. ",
    "stephendolan": "It's a shame that this hasn't gotten any love! I can't for the life of me figure out how to get tmuxinator working with tmate.. ",
    "moraisaugusto": "both versions are 2.3. \nI figured out that the problem on vim happens when I set relativenumber. But I still don't know how to fix it. . ",
    "hardyoyo": "I'm having this same issue on OSX, have tried different versions of tmux (2.7, 2.6, 2.5) same issue each time. However, I can \"fix\" the issue by disabling my .tmux.conf file. I suppose I'll diff my .tmux.conf file and the default and see if there's an obvious culprit here.\nUPDATE: In investigating the differences between my .tmux.conf file (created and mostly used on a Linux notebook), I discovered a number of configuration options that are invalid on OSX. I commented them out, and, now tmux and tmuxinator both start up without any issue.\nthe settings were:\nset-option -g mouse-select-pane on\nsetw -g mode-mouse on\nset-option -g status-utf8 on\nsetw -g window-status-content-attr default\nsetw -g window-status-content-fg yellow\n. ",
    "techgaun": "I feel at least, the master branch deserves a basic support in terms of supporting existing commands. My problem specifically was that due to the version check, the tmux master was generating command that're supposed to be the commands for older version of tmux. Its of course not always possible to support new additions or changes but it would at least be great to default to the newer command sets.. @ethagnawl thanks for the response.. I did see that issue and didn't see anything about the tmux master branch. It seems that the tmux master branch always has tmux master as the response of tmux -V (https://github.com/tmux/tmux/blob/411640c0327525f2e5e6d61bd81623ce64d0d811/configure.ac#L3). It would be really good to have tmux master branch handled at least from the perspective of generating the basic commands.. this way, I think it opens ease for adding new changes earlier on tmuxinator side as well. I will read the conversation on that issue again more carefully. thanks!. sounds good. closing. ",
    "alexkrolick": "Mac OS ships Ruby 2.0 as the system Ruby, so this is kind of annoying. Is there a technical reason to require a higher version?. ",
    "danshumaker": "Thanks @ethagnawl , that works!\nI'd still love a -f cli option so I can switch projects quickly but for now bash alias duck-tape will have to suffice.\nbash\nalias myprod2logs='export TMUXINATOR_CONFIG=/Users/dan/work/bla/project2/muxinator && mux plogger'\nalias myprod3logs='export TMUXINATOR_CONFIG=/Users/dan/work/bla/project3/muxinator && mux plogger'. That's awesome Pete! Many thanks! Immediately using that feature!. Upgraded to sierra last night and started getting this error. But, just tried compiling 2.6-rc on tmux and checked the contents of cmd-find.c to be sure the patch was included, and it is.  Linked my compiled version to the /usr/local/bin dir and re-ran tmuxinator without a previously running tmux and I still get the error.... bummer. I must be doing something wrong. rc3  For now  I'll just start dummy tmux session to use tmuxinator so it has something to start with.  Anyone else try tmux 2.6?  (tried with tmuxinator 0.9.0). @adamstrickland Sorry for the late response,  I do not have this issue anymore.  Woot woot!. ",
    "firedev": "Same here, something changed recently. Thanks @Kayne for a workaround so I can at least launch it.. ",
    "vanife": "This must be the change in the tmux 2.5. Reverting back to tmux 2.4 works fine (brew switch tmux 2.4).. ",
    "Kayne": "@firedev happy to help :)\n@vanife Yes, reverting back to 2.4 fixes the problem. So it is definetely related to tmux version 2.5. I have to remember to not run brew cleanup everytime after updating formulas, because installing obsoleted packages is tricky :). Install formula from specific revision (I belive it's how it's called in git):\nbrew install https://raw.githubusercontent.com/Homebrew/brew/2d2034afc6e4dfab0a1c48f5edd2c5478576293b/Formula/tmux.rb. ",
    "Skulli": "Just had the same problem on my mac, workaround is working. ",
    "JBlackCat": "\ud83d\udc4d I should have checked here sooner. \ud83d\ude04 . @danshumaker I was having the same issue.\nTake a look at your tmux config. I am using the same config as my co-worker who is a bit more savvy than I with tmux and 2.4 broke a number of things in his config. \nOnce I updated my config the problem went away. I don't know which specific issues were causing the problem; my co-worker had made numerous changes since I first copied it over.. ",
    "staycreativedesign": "pretty easy question how would I install tmuxi2.4 on a mac?. Yay!!\nOn Thu, Jun 15, 2017 at 12:36 PM, Marcin Bratek notifications@github.com\nwrote:\n\nInstall formula from specific revision (I belive it's how it's called in\ngit):\nbrew install https://raw.githubusercontent.com/Homebrew/brew/\n2d2034afc6e4dfab0a1c48f5edd2c5478576293b/Formula/tmux.rb\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/536#issuecomment-308815020,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB3L0mJByuUYlwr_n9Mu1B_fdTj1MnGrks5sEWu2gaJpZM4NxFeH\n.\n. Thank ye sir!\n\nOn Thu, Jun 15, 2017 at 6:15 PM, Adam Strickland notifications@github.com\nwrote:\n\nUPDATE: the bug in tmux that was causing this issue has been fixed in\nmaster and will become part of that tool's 2.6 release. Unfortunately, the\nfix won't be back-ported to 2.5. If you really must have tmux 2.5 and use\nit with tmuxinator, you can pull the 2.5 branch from Github, apply the\npatch in the linked issue (also here) and be in your merry way. However,\nI would recommend simply sticking with 2.4 and jumping to 2.6 when it is\nreleased.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/536#issuecomment-308890483,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB3L0gabg39YZlcAgxgOSjg5GA6G4Q00ks5sEbsMgaJpZM4NxFeH\n.\n. They don't have errors but they sure are an eye sore and it takes over the top part which I have usual information of sessions windows and other things... I have a workaround where I start a tmux session and then start tmuxinator... just an extra step I have to do so I dont get the errors ie.\n\ntmux\nmux bold\nDoes not produce the image above and everything is clean with no noise.\nJust wondering why it's asking for RBENV :). and other than the hacky fix... Is there even a way to fix it?\n. But isn't whats causing the \"error\" is tmuxinator?! When I run a\ntmux and then run mux project\neveryhting works fine..\nOn Wed, Aug 30, 2017 at 9:10 PM, Ryan Glassett notifications@github.com\nwrote:\n\nI'm not totally convinced that it is tmuxinator's job to beautify the\nterminal window name, but this StackOverflow post\nhttps://askubuntu.com/questions/636944/how-to-change-the-title-of-the-current-terminal-tab-using-only-the-command-line\nsuggests you can change it like so:\necho -en \"\\033]0;New terminal title\\a\"\nNote that this applies only to window names, and that tab names might be\nhairier to deal with.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/550#issuecomment-326169116,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AB3L0gworafC6vxiB6pAs8KEKUjZ_2D4ks5sdhYWgaJpZM4O_GQY\n.\n. \n",
    "jenrzzz": "For me the line set-option -g status-utf8 on was causing the issue (the status-utf8 option is obsolete). I really would have expected a more visible error message and it was very strange that starting tmux directly worked, but everything was peachy after I removed that line.. ",
    "henvo": "It seems that tmux changed some of its behavior that has to do with the .tmux.conf. For me it was the line:\nbind r source-file ~/.tmux.conf ; display-message \"Config reloaded..\"\nthat caused the trouble. It always worked until I upgraded to the latest version of tmux. After removing this line from my .tmux.conf I was able to run mux start [project] again without any problems.. ",
    "wanyaoqi": "`~ \u00bb tmux -V                                                                                                                                                                                                  \ntmux 2.4\n\n~ \u00bb tmux list-sessions                                                                                                                                                                                       \nno server running on /private/tmp/tmux-501/default`\nsame problem in tmux 2.4. ",
    "dkrieger": "I still run into this issue in 2.6 . Adding the following to my ~/.zshrc did the trick. Of course, this could be bundled up in a script or alias, but I wanted it to be run any time my shell starts and no tmux sessions are found.\nDUMMY='dummy'\nPROJECT='monit'\ntmux list-sessions || ( tmux new -d -s $DUMMY && tmuxinator start $PROJECT ). ",
    "nickhoffman": "I have tmux 2.7 and tmuxinator 0.11.1 installed and this problem affected me. The problem disappeared when I removed all of my tmux config files, which enabled me to identify the cause: the option status-utf8 was removed from tmux, but I still had this line in my config:\nset -g status-utf8 on\nRemoving this line, as described in this comment above, fixed the problem. For more info, see https://github.com/tmux/tmux/issues/230.. ",
    "eric-wieser": "I'm running into trouble here with https://github.com/tmux/tmux/issues/182 - running tmuxinator debug my-project shows that it's running tmux start-server, but that command no longer does anything. ",
    "gnapse": "I didn't use to have this problem, but I get it now that I switched to fish as my shell. In zsh it works fine, but in fish it does not. In both cases I have the same tmux configuration.\nThis is the output that I get when I run tmuxinator my-project:\nlost server\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nno server running on /private/tmp/tmux-501/default\nAgain, the above only happens under the fish shell, not under zsh.\ntmuxinator debug my-project\nIn case it is helpful to figure out the problem, this is the output of tuxminator debug my-project\n```\n!/usr/local/bin/fish\nClear rbenv variables before starting tmux\nunset RBENV_VERSION\nunset RBENV_DIR\ntmux start-server;\ncd /Users/ernesto/code/gob/getonbrd\nRun on_project_start command.\n# Run pre command.\n# Run on_project_first_start command.\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s getonbrd -n shell\n  tmux send-keys -t getonbrd:0 cd\\ /Users/ernesto/code/gob/getonbrd C-m\n# Create other windows.\n  tmux new-window -c /Users/ernesto/code/gob/getonbrd -t getonbrd:1 -n server\n# Window \"shell\"\n  tmux send-keys -t getonbrd:0.0 git\\ status C-m\ntmux splitw -c /Users/ernesto/code/gob/getonbrd -t getonbrd:0\n  tmux select-layout -t getonbrd:0 tiled\n  tmux send-keys -t getonbrd:0.1 yarn\\ test C-m\ntmux select-layout -t getonbrd:0 tiled\ntmux select-layout -t getonbrd:0 even-horizontal\n  tmux select-pane -t getonbrd:0.0\n# Window \"server\"\n  tmux send-keys -t getonbrd:1.0 make\\ dev C-m\ntmux splitw -c /Users/ernesto/code/gob/getonbrd -t getonbrd:1\n  tmux select-layout -t getonbrd:1 tiled\n  tmux send-keys -t getonbrd:1.1 yarn\\ start C-m\ntmux select-layout -t getonbrd:1 tiled\ntmux select-layout -t getonbrd:1 even-horizontal\n  tmux select-pane -t getonbrd:1.0\ntmux select-window -t getonbrd:0\n  tmux select-pane -t getonbrd:0.0\nRun on_project_exit command.\n```\nfish shell version 2.7.1\ntmux version 2.7\ntmuxinator version 0.12.0. Same here. Any news on this one? The deprecated option works, but the warning is annoying. The supposed replacement for it is not working with the tmux -CC attach command.. ",
    "episage": "Same happens to me on Mac,\ntmux -V\ntmux 2.8\nReplication:\n - Use this: https://github.com/dennishafemann/tmux-cssh\n - to connect to some non-responding ssh servers\n - kill sessions with Ctrl-C\n - reconnect\nResult:\n$ tmux-cssh -cs sip\n* Searching for config setting name 'sip' ...\n* Matched config-settings 'sip', analysing parameters, installer@192.168.1.164 installer@192.168.1.240 installer@192.168.1.241 installer@192.168.1.242 installer@192.168.1.243 ...\n* Connecting 'ssh installer@192.168.1.164'\n* Connecting 'ssh installer@192.168.1.240'\nno server running on /private/tmp/tmux-501/default\n* Connecting 'ssh installer@192.168.1.241'\nno server running on /private/tmp/tmux-501/default\n* Connecting 'ssh installer@192.168.1.242'\nno server running on /private/tmp/tmux-501/default\n* Connecting 'ssh installer@192.168.1.243'\nno server running on /private/tmp/tmux-501/default\nAll connections have failed.. ",
    "drewfish": "I had the same problem with tmux/bionic-updates,now 2.6-3ubuntu0.1 amd64 installed on Ubuntu. When I switched to 2.8 installed via linuxbrew it seems to work again.. ",
    "raiyuza": "Disagreed, released versions should have version based dependencies not on ~HEAD or branch_name. \nThis issue should be closed.. Wouldn't this mess with multiple installations on the same machine ex, you have 0.15 / 0.14 at the same time?. I could take on the Linux distro\u2019s, do you want me to create a separate issue ?\nThe Homebrew prq got closed, i am willing to reopen en chase it. I created my own tap for tmuxinator last weekend. Could create that aswell.\nWhen i get home ill separate this issue between Homebrew en nix distros. Do we want this feature, cause you are able to do it with some ENV variable magic and scripts checking in background and adjust the pane names accordingly! . Firstly , +1 I would like this as well. \nSo often i use kill-session instead of stop since the combination of META+B :kill-server is sometimes just faster in my workflow.\n@ethagnawl :\n\n\nWill wantonly kill most recently created tmuxinator session if run outside session. Seems reasonable?\n\n\nNo, or ask for confirmation.  It should always use the current sessions as context.\n@ethagnawl :\n\n\nWill fail with \"Project foo-1 doesn't exist.\" if run inside named tmux session named foo-1. This is probably fine.\n\n\nWhy does this behavior happen? Is it because you can't parse the \"-\" ? If so it's a solvable imperament.\n@ethagnawl :\n\n\nWhere should the session name sniffer live?\n\n\nIMO, It should build a buffer of active sessions when you call the cli command on, [stop, start]. (In the bootstrap component or maybe within the function of stop it just \"queries\"  then.\n@ethagnawl :\n\n\nCan it always be called safely?\n\n\nIMO Requirements are as followed\n\nCurrent session name is a match in said buffer (list of sessions)\nNo active processes are running (background jobs etc) in said session\nIf the env variable \"ask_for_conformation\" (orso) is set, which defines if a prompt is displayed for confirmation \n\nI could implement this feature if @ethagnawl agrees!\nPs. I just thought a direct flag onto  function that calls this exposed through the cli would also be nice. In conjunction with tmux you could make a keybinding like Ex. (Proof of concept, don't check syntax). \n(Of Course i can just export the variable, but you might not want to that be controlled solely by a ENV var)\nbind-key D 'run-shell \"mux stop -y\"\nThoughts?. Hey Man,\nYou can try to use tmux in conjunction with expect see this topic on stackoverflow.\nExpect is a program that \"talks\" to other interactive programs according to a script. Following the script, Expect knows what can be expected from a program and what the correct response should be. An interpreted language provides branching and high-level control structures to direct the dialogue. In addition, the user can take control and interact directly when desired, afterward returning control to the script.\nSome more good resources for this \"trick\" can be found here:\n-  https://linux.die.net/man/1/expect\nI think you would want to do do something like:\nyml\nwindows:\n  - IDE: expect execute_and_fill_in_password.exp\n. I propose closing this issue in 7 days from now.\nMight Add a segment in the readme under tips and trick, however this is more Linux know how then its a tmuxinator know how.. We should close this issue.. Couldn't you solve this with some bash scripting and manually  spawning the panes, then sending text to the pane (trough switching pane and putting text through send-keys). \nI assume as long as you don't send \\ (ENTER) the text stays in the pane. \nIf you want i can make a snippet as an example!\nImplementing this behaviour would be a rather \"big\" change IMO.. Sounds good, that would be great !\nVerstuurd vanaf mijn iPhone\n\nOp 1 feb. 2019 om 10:47 heeft Gilles Lourdelet notifications@github.com het volgende geschreven:\nIt doesn't seem that big of a change. I assume for pane it's just wrapping this line into an if based on some config value for this command:\nhttps://github.com/tmuxinator/tmuxinator/blob/21e0e980dac576b3939e868f2b4ccb8bde33a853/lib/tmuxinator/pane.rb#L62\nCould be something like:\ndef _send_keys(t, e)\n    if \n        \"#{project.tmux} send-keys -t #{t} #{e} C-m\"\n    else\n        \"#{project.tmux} send-keys -t #{t} #{e}\"\n    end\nend\nNo the unknown is how to specify this option in the yml config.\nWhen I find time to work on this I can try to open a PR some day.\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. Seems rather handy instead of typing cd every time, i might create this later this weekend. @flovilmart Any ETA, we in 2019 already :). Uploaded wrong code while trying to squash rookie mistake, hold on!\n\ne: fixed!. 1. I will in a few minutes! \n\n\nMaybe the newline option should become the default? Though, I guess this could potentially break other people's workflows in the opposite direction and could warrant a deprecation warning for a release cycle or two..\n\n\nHmmm,\nWe can keep the default behavior by giving it a seperator flag ala awk -F though. Users can set an env variable to control the default value of this flag. This way you don't have to break backwards compatibility and it makes the feature more useful overall.\nIn the same fashion it would be amazing to have have some kind of --format option, it would be able te\nformat how the list command would show your list, and extract properties from said projects. Ex.\n$> mux l -F \"\\n\" --format \"@name\\t@root\\t@windows.editor.layout\"\n$> \nfoo<tab>~/foo<tab>vertical\nbar<tab>~/bar<tab>horizontal\nedit: Might more use the syntax like jq to make it even more recognizable by avid shell users/admins. Don't know how i would deal with the second field selector though.\nThis opens up an powerful way to create a formatted data structure. This mainly used for parsers in Ex.\n\nvim, you could write a unite/denite script to read the outputs buffer to make menu's \nfuzzy search\n\nIll create an issue with this idea, better to discuss it there.\nThanks for the feedback!\n. > Neat feature. Ideally I'd like to see a test assertion against the actual output format, but most of the other CLI tests don't really do this either, so the new test meets the current bar IMO.\n\n\ud83d\udc4d from me.\n\nThis was the reason for me not to defer from the pattern i was seeing, if i would make a -F/--Format feature we need to do this regardless. \n@ethagnawl , We can merge this for the next minor (We can internally later on alias -n to a combination of -F and --form) . The feature mentioned above we can just implement on a later time (If agreed upon, ofcourse) . We should split it. ( I forgot to do so)\nOfftopic, I am interested in becoming a maintainer. What are the requirements for this ?\n. I created a new issue with the new idea here .\nLet's keep the scope of this issue/PRQ to the -n flag only. Makes it easier to segment what we are talking about!. Hey Man, \nThis is default behavior of tmux not tmuxinator. You could have found out by googling for a bit. Things i found.\n\nThe manpage only references logging at one place.\n\n-v            Request verbose logging.  Log messages will be saved into\n                   tmux-client-PID.log and tmux-server-PID.log files in the\n                   current directory, where PID is the PID of the server or\n                   client process.  If -v is specified twice, an additional\n                   tmux-out-PID.log file is generated with a copy of every\u2010\n                   thing tmux writes to the terminal\nI assume that when something goes wrong (or you call tmux with -v in some wrapper script and or function) it calls the underlying verbose function(-v flag)\n\nThe second result in google with the search term \"tmux default log location\"  will get you get this thread. \n\nThis assumption gets more evidence in one of the replies eg.\n\nThose are logs created directly by tmux. Are you starting it with the verbose-flag (-v) by chance?\nNinja edit:\nThe log-files are stored in the folder you're starting the tmux-server. So if you want them in another folder, start tmux in ~/.tmuxlogs for example.\nman tmux has all the information about this. \n\nTbh , i couldn't find it clearly written in the manpage of my version of tmux (2.3) so it might be in newer versions. \nNevertheless, there are 3 ways to fix your problem \n\nBe creative with tmuxinator, less effort and not really contributing anything to actually solve this problem more patching a symptom.\n\n```\nroot: /var/log/tmuxinator\nRuns in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.\npre_window: cd \nwindows:\n  - IDE: $EDITOR .\n```\nDon't forget to make a keybinding in like this in your tmux.conf, otherwise all your new windows will be started in \"/var/log/tmuxinator\"\nbind c new-window -c \"#{pane_current_path}\"\n\nMake a pull request at tmux/tmux and explain them what your trying to achieve.\n\n\nFeature: Make log file save location configurable.\n\norso.\n\nWe could fix this behavior in tmuxinator temporary by making  a config property logs_location. It would the same behavior as the as described above before executing root. \n```\nStart session in log location, from config key \"logs_location\"\nThen set the root property\nGo on as usual\n```\nThough morally i think tmux should be patching this rather then we making a workaround\n\n\u00af_(\u30c4)_/\u00af \nI could make this patch (Nr.3) for you if options 1 and 2  aren't feasible.. Aaah, stupid just make a cron and do this. I just did it for myself as well. While playing around it seemed that i had the same problem as you in a few places.\nbash\nfor logifle in $(find ~/ -type f -name \"*.log\" | grep -E \"tmux-(server|client)-[0-9].+\\.log\");do\n  logname=$(echo \"$logfile\" | grep -Eo \"tmux-(server|client)-[0-9].+\\.log\")\n  cp -frv ${logfile} \"/var/log/tmux/${logname}\" >/var/log/tmux/last_cleanup.log 2>&1 > /var/log/tmux/last_cleanup_error.log\n  rm -rf ${logfile}\ndone\nPut it at a minute or 5 orso, don't want to kill that disk :p. Shame though , means there is a hidden edge case somewhere in 0.13. Too bad. . Aaah probably some interaction with rbenv or $PATH i guess, forgot to run exec zsh || zsh rehash orso i think!. Any feedback would be nice so i can start implementing this somewhere this week !. I might need some help here getting the syntax correct, i am only getting so far with rubocop. Why does it parse my bash in HEREDOC? . ",
    "edman": "It seems array parsing on pre_window was introduced on #482.\nI'm aware strings work, that was a config to reproduce the error.. ",
    "chris-fran": "Hello, @ethagnawl \nTmux: 2.5\nTmuxinator: 0.9. @ethagnawl I just realized, it specifically doesn't work when iTerm is on full screen or the width of it's window is expanded more than the default value. Homebrew please. I only have Gem installed for this tool. bump. ",
    "iovis9": "I'm running the latest macOS. I just tried tmuxinator stop some_site with the following:\n1. Detaching first and then running the command: working\n2. Running the command from the actual session: kills the session correctly but doesn't fire up the hook. Sorry for the silence! Knowing how it works inside I just started to detach and then running tmuxinator stop to kill the session, so I think we're good unless we want to actually support the feature of running the command from the session.. ",
    "beaugunderson": "noting that post: (now deprecated) does work with :kill-session from inside the session but that on_project_stop and on_project_exit do not; this breaks my workflow.. agreed, my use case is the same as Mike\u2019s :)\n\nSent from my phone.\n\nOn May 1, 2018, at 10:34, Mike Kelley notifications@github.com wrote:\n@endorama yeah, for sure. I originally misunderstood post, and did not realize it also closed on detach. However, on_project_exit does not seem to execute on kill-session or detach as post did before (at least for me). I've tried both on_project_start and on_project_exit with no luck.\nThe use case I guess I'm asking for is a new one that runs on tmuxinator stop AND kill-session. Take the following configuration from into account:\nname: my_awesome_workflow\nroot: .\non_project_first_start: docker-compose up -d\non_project_stop:\n  - rm -rf /tmp/{folder1, folder2}\n  - \n  - docker-compose stop\nThis is super useful in that when you kill the session everything you started stopped, and folders that were created can be cleaned up. This puts you back into a perfect position to restart the project again. However, it is not useful for when you detach, because everything is still running.\nI manage dev spaces for a team, and giving them a single command to run to get started is amazing, until you realize that they have to manually clean up after themselves, or remember to run a separate clean up command (tmuxinator stop).\nHopefully this is helpful.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. kill-session does not seem to trigger on_project_exit or on_project_stop for me when i use it from inside the session. (with tmuxinator 0.11.1). if it makes a difference, i am executing kill session via ctrl-a :kill-session (would be ctrl-b :kill-session with default keybindings). it also does not work if i issue tmux kill-session from within a shell inside the session though... i wonder why it works for you and not for me?\n\ni'm using tmux 2.7 and tmuxinator 0.11.1 from brew on macOS 10.13.4. here's my whole file in case it's useful:\n```yaml\nname: home-app\nset the iTerm 2 tab color to Canvas orange\non_project_start:\n  - printf \"\\033]6;1;bg;red;brightness;240\\a\"\n  - printf \"\\033]6;1;bg;green;brightness;116\\a\"\n  - printf \"\\033]6;1;bg;blue;brightness;82\\a\"\n  - docker network create messaging &> /dev/null\n  - docker network create mock-lab-engine &> /dev/null\n  - docker network create ontologies &> /dev/null\n  - docker network create pharmacy &> /dev/null\n  - docker network create science &> /dev/null\n  - docker network create web-to-pdf &> /dev/null\nset the iTerm 2 tab color back to the default (currently broken)\non_project_exit:\n  - echo on_project_exit\n  - printf \"\\033]6;1;bg;;default\\a\"\non_project_stop:\n  - echo on_project_stop\n  - printf \"\\033]6;1;bg;;default\\a\"\nwindows:\n  - primary:\n      layout: main-vertical\n      panes:\n        - docker-compose up --build web\n        - yarn && yarn build_dev\n        - yarn test --watch\n  - secondary:\n      layout: tiled\n      panes:\n        - cd ../messaging && docker-compose up --build web\n        - cd ../pharmacy && docker-compose up --build web\n        - cd ../science && docker-compose up --build web\n        - cd ../web-to-pdf && docker-compose up --build web\n```. thank you for the PR, @endorama!. ",
    "codezomb": "I would definitely like to put my thoughts in here. previous post functionality is missing, and definitely breaks our workflow. In my opinion it would make sense that on_project_stop did this. on_project_exit states that it's for detaching. It wouldn't make sense to, for example, tear down your project on detach, only when stopped.. @endorama yeah, for sure. I originally misunderstood post, and did not realize it also closed on detach. However, on_project_exit does not seem to execute on kill-session or detach as post did before (at least for me). I've tried both on_project_start and on_project_exit with no luck.\nThe use case I guess I'm asking for is a new one that runs on tmuxinator stop AND kill-session. Take the following configuration into account:\n```yaml\nname: my_awesome_workflow\nroot: .\non_project_first_start: docker-compose up -d\non_project_stop:\n  - rm -rf /tmp/{folder1, folder2}\n  - \n  - docker-compose stop\n```\nThis is super useful in that when you kill the session everything you started stopped, and folders that were created can be cleaned up. This puts you back into a perfect position to restart the project again. However, it is not useful for when you detach, because everything is still running.\nI manage dev spaces for a team, and giving them a single command to run to get started is amazing, until you realize that they have to manually clean up after themselves, or remember to run a separate clean up command (tmuxinator stop).\nHopefully this is helpful.. I'm experiencing the same behavior as @beaugunderson on 0.11.0. The only way I can get on_project_stop to work is by running tmuxinator stop outside of the tmux session. I cannot get on_project_exit to work at all.\n. @endorama that looks right in regards to your above description of the behavior, as well as being in accordance to the previous functionality of post.\nThat being said, is there anyway we could get detach -> on_project_exit and kill-session -> on_project-stop? I would think this makes much more sense, and is in line with what most people in this thread would expect.\nThat being said, I'd understand discussing that as a feature request in another ticket, and just fixing the missing behavior for now.. > But luckily it seems that tmux support hooks since version 2.2\nYep, I tried session-end hook with no luck myself \ud83d\ude1e \nThanks for submitting the PR. It will be nice to at least get some cleanup functionality working again. I can just throw up warning for now on detach letting the operator know that this will fire the cleanup.. @ethagnawl the linked issue is requesting a bug fix. The issue describes that the current documented functionality does not work at all. At least, that's what it evolved into.. ",
    "mrturtledev": "Sorry, the config file went a bit wrong when I copied it.\n```\n ~/.tmuxinator/recon.yml\nname: recon\nroot: ~/\ntmux_options: -vvv\nwindows:\n  - recon:\n      layout: 2fb3,317x85,0,0{203x85,0,0[203x21,0,0{97x21,0,0,0,105x21,98,0,4},203x63,0,22,3],113x85,204,0,1}\n      root: /usr/src/git/\n      panes:\n        - screenfetch\n        - date\n        - cd ./WhatWeb/ && reset\n        - date\n```\nTested on tmuxinator 0.10 with the same issue.. ",
    "sethdeckard": "I'm running into basically the same issue while setting up a new machine using tmuxinator 0.10 and tmux 2.6.\nI run list-windows on my current session and I get the following layout value: \n00c3,238x118,0,0[239x94,0,0{120x94,0,0,0,118x94,121,0,1},239x24,0,95,2]\nWhen I set that as my layout in my config yml and restart the session it changes the heigh of the lower pane to 50 (was 24). Running a list-windows again shows the following layout value:\ne4c5,238x118,0,0[239x68,0,0{120x68,0,0,0,118x68,121,0,1},239x50,0,69,2]\nI am not getting any error messages from tmux that the layout is invalid.. ",
    "eriktux": "Also having the same issue here.\nArch Linux / rolling\ntmux 2.6\ntmuxinator 0.10.0\nI did a full system upgrade yesterday, and since then, the layout I was using on a daily basis, is now broken.. ",
    "weijiekoh": "576 Hope this pull request can address this issue..",
    "nwshane": "@brandoncordell Did you figure out a fix for this? I'm getting the same error.. @brandoncordell That worked - thanks!. ",
    "brandoncordell": "@nwshane I just deleted the project file itself (~/.tmuxinator/<project_name> IIRC). I don't remember if the delete command did anything else besides that, but that will work.. ",
    "jrobichaud": "I had the same problem. \nI only ran gem install tmuxinator and it started working.. I am using gem version 2.6.13 if it can help troubleshooting.. I use brew's ruby\nbash\nruby --version\nruby 2.4.2p198 (2017-09-14 revision 59899) [x86_64-darwin17]\n. ",
    "dep": "Sadly reinstalling the gem didn't work for me. . I am also using 2.6.13 - thank you for replying.\n. ",
    "niemalsnever": "This might warrant another issue, but in the meantime, may I ask which version of Ruby you run? Using tmuxinator under High Sierra freezes terminal completely oftentimes for me. I'm running Ruby 2.4.x (whichever version comes bundled with macOS 10.13). I will update this comment once my laptop is working again to provide more version information.. ",
    "Toddses": "I'm with jrobichaud. I use homebrew's ruby, and simply ran gem install tmuxinator and everything started working again.. ",
    "hieast": "\nhead `which tmuxinator`\n#!/System/Library/Frameworks/Ruby.framework/Versions/2.0/usr/bin/ruby\n#\n# This file was generated by RubyGems.\n#\n# The application 'tmuxinator' is installed as part of a gem, and\n# this file is here to facilitate running it.\n#\n\nrequire 'rubygems'\n\nchanging the interpreter path to  /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/bin/ruby should work for you\n. ",
    "nexeck": "Homebrew would be great :). brew-gem does not work with Brewfile ;-)\nIt is also possible to create and maintain a tap for tmuxinator: https://github.com/Homebrew/brew/blob/master/docs/How-to-Create-and-Maintain-a-Tap.md . I have created a formular for tmuxinator: https://github.com/nexeck/homebrew-tmuxinator. I will try to figure out, how to submit a new formula to the official repo, until that you could use my tap.\nAny feedback is welcome :-). I have created this PR: https://github.com/Homebrew/homebrew-core/pull/34043. ",
    "shivawu": "Homebrew please. Using gem means I cannot have brew upgrade to get the updates.. ",
    "R4YM3": "bump. ",
    "fifman": "Bump. This is a great feature. ",
    "JamesYuan": "I just uninstall and install the tmux again, it works well now.. ",
    "coddingtonbear": "I think what your re-installation might've done is instead downgraded you to a version of tmux before this change: https://github.com/tmux/tmux/blob/37f83adca8b965133ebdaeebea790ae897bd7175/CHANGES#L517\nEdit: After digging a little into the source, it looks like the way Tmuxinator determines whether to use the -c option or -default-path is by checking the version number returned by Tmux -- if you install Tmux by compiling it directly from their git repository, your version number is \"master\" rather than being a helpful value.\nhttps://github.com/tmuxinator/tmuxinator/blob/master/lib/tmuxinator/config.rb#L51-L53. You can totally feel free to close this PR, @rglassett; I submitted this just to quickly solve the problem in a way others might be able to use without knowing that there were existing solutions -- if you'd rather go with a different solution, go for it!. ",
    "madflow": "Same here - on the first start the main-vertical layout is more like 1/4 to 3/4 in size. I am on Arch Linux, Gnome 3, Gnome Terminal,Tmuxinator 0.10.1, Tmux 2.6.\n```\nset -g prefix C-a\nunbind C-b\nbind C-a send-prefix\nbind r source-file ~/.tmux.conf \\; display \"Reloaded!\"\nbind | split-window -h\nbind - split-window -v\nset -g mouse on\nbind -n WheelUpPane if-shell -F -t = \"#{mouse_any_flag}\" \"send-keys -M\" \"if -Ft= '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e; send-keys -M'\"\nset -g default-terminal \"xterm-256color\"\nList of plugins\nset -g @plugin 'tmux-plugins/tmux-battery'\nset -g @plugin 'tmux-plugins/tmux-copycat'\nset -g @plugin 'tmux-plugins/tmux-cpu'\nset -g @plugin 'tmux-plugins/tmux-logging'\nset -g @plugin 'tmux-plugins/tmux-open'\nset -g @plugin 'tmux-plugins/tmux-pain-control'\nset -g @plugin 'tmux-plugins/tmux-prefix-highlight'\nset -g @plugin 'tmux-plugins/tmux-resurrect'\nset -g @plugin 'tmux-plugins/tmux-sensible'\nset -g @plugin 'tmux-plugins/tmux-sessionist'\nset -g @plugin 'tmux-plugins/tmux-yank'\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sidebar'\nInitialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun '~/.tmux/plugins/tpm/tpm'\n```\nEdit: even-horizontal fixed this for me as the main layout setting\n. ",
    "jumph4x": "I don't know, I tried to read the source to figure it out.\nChanging it to 'on_start' didn't work, so you're probably right. Will fix.\nOn Nov 12, 2017 12:43 PM, \"Pete Doherty\" notifications@github.com wrote:\n\nHey @jumph4x https://github.com/jumph4x,\nThanks for this!\nTwo pieces of feedback:\n\nShould \"on_start\" read \"on_project_start\"?\nShould \"on_detach\" read \"on_project_exit\" and/or \"on_project_stop\"?\n\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/pull/569#issuecomment-343753860,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAGq6tSeJJ4qGIFaCSR1ldZ3gY95PywJks5s1y4xgaJpZM4QZetN\n.\n. \n",
    "rightaway": "Can you please mark 0.10.0 as \"latest release\" so that https://aur.archlinux.org/packages/tmuxinator/ will upgrade to it?. ",
    "mikewaters": "I'm having the same issue with latest tmux 2.6/master and latest tmuxinator release (0.10.0; I've even tried master).\nmike@bob\u2590~\u258cmux version\ntmuxinator 0.10.0\nEDIT:  I had a path issue, was pointing to old gem!!  PEBKAC. ",
    "Silentz0r": "Can anyone give me a hand? I get the same behaviour as described. Only 1 window appears.\nLinux Mint XFCE \n```\nLinux PC 4.10.0-40-generic #44~16.04.1-Ubuntu SMP Thu Nov 9 15:37:44 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\ntmuxinator version   \ntmuxinator 0.10.0\ntmux -V         \ntmux master\n```\nEDIT: i don't know if this is useful information but i did this:\ntmuxinator debug [project]\ngot this:\n```\nRun on_project_start command.\n# Run pre command.\n# Run on_project_first_start command.\n# Create the session and the first window. Manually switch to root\n  # directory if required to support tmux < 1.9\n  TMUX= tmux new-session -d -s monitor -n status_things\n  tmux send-keys -t monitor:1 cd\\ /home/silentz0r C-m\n# Set the default path for versions prior to 1.7\n  tmux set-option -t monitor default-path /home/silentz0r 1>/dev/null\n# Create other windows.\n  tmux new-window default-path /home/silentz0r -t monitor:2 -n io_things\n  tmux new-window default-path /home/silentz0r -t monitor:3 -n more_things\n# Window \"status_things\"\n  tmux send-keys -t monitor:1.1 top C-m\ntmux splitw default-path /home/silentz0r -t monitor:1\n  tmux select-layout -t monitor:1 tiled\n  tmux send-keys -t monitor:1.2 uptime C-m\ntmux splitw default-path /home/silentz0r -t monitor:1\n  tmux select-layout -t monitor:1 tiled\n  tmux send-keys -t monitor:1.3 whoami C-m\ntmux select-layout -t monitor:1 tiled\ntmux select-layout -t monitor:1 main-horizontal\n  tmux select-pane -t monitor:1.1\n# Window \"io_things\"\n  tmux send-keys -t monitor:2.1 lsof C-m\ntmux splitw default-path /home/silentz0r -t monitor:2\n  tmux select-layout -t monitor:2 tiled\n  tmux send-keys -t monitor:2.2 iostat\\ -w\\ 10 C-m\ntmux splitw default-path /home/silentz0r -t monitor:2\n  tmux select-layout -t monitor:2 tiled\n  tmux send-keys -t monitor:2.3 netstat C-m\ntmux splitw default-path /home/silentz0r -t monitor:2\n  tmux select-layout -t monitor:2 tiled\n  tmux send-keys -t monitor:2.4 vim C-m\ntmux select-layout -t monitor:2 tiled\ntmux select-layout -t monitor:2 tiled\n  tmux select-pane -t monitor:2.1\n# Window \"more_things\"\n  tmux send-keys -t monitor:3.1 ping\\ localhost C-m\ntmux splitw default-path /home/silentz0r -t monitor:3\n  tmux select-layout -t monitor:3 tiled\n  tmux send-keys -t monitor:3.2 cd\\ / C-m\n  tmux send-keys -t monitor:3.2 cd\\ var C-m\n  tmux send-keys -t monitor:3.2 cd\\ log C-m\n  tmux send-keys -t monitor:3.2 ls C-m\ntmux select-layout -t monitor:3 tiled\ntmux select-layout -t monitor:3 main-vertical\n  tmux select-pane -t monitor:3.1\ntmux select-window -t monitor:1\n  tmux select-pane -t monitor:1.1\nif [ -z \"$TMUX\" ]; then\n    tmux -u attach-session -t monitor\n  else\n    tmux -u switch-client -t monitor\n  fi\nthis doesn't work:\nCreate other windows.\ntmux new-window default-path /home/silentz0r -t monitor:2 -n io_things\n  tmux new-window default-path /home/silentz0r -t monitor:3 -n more_things\n```\nbut changing it as the tmux readme:\ntmux new-window -c /home/silentz0r -t monitor:2 -n io_things works\nany suggestions?\nEDIT2: nvm. i saw the PR's. i made the gem with the fix. thank you.. @adamstrickland not anymore for me. Since the #574 is coming i think this can be closed. . ",
    "Krakob": "There's a few issues with this - pipenv shell launches a shell, meaning that anything used with && like that won't execute inside the shell. Additionally, I don't want all panes to be in the subshell, since it screws a bit with my Neovim setup, and there's simply no need to for e.g. the DB clients.\nIn reality, launching the virtual environment is pretty much only necessary for the shells, which is trivial since I don't need to do anything other than launch them. What has me scratching my head is launching Flask. Anyhow, I swear I got this working before (starting MySQL before opening database windows, but not hindering any others), but I don't have that config file at hand right now. I should be able to post that before the end of the week.. Not quite, since pipenv launches a subshell, I want some panes/windows outside of it and some panes launching it and then launching processes within it.. Turns out I didn't have this working, the reason being that I didn't need it 'cause MySQL runs on startup and I basically never need to start it myself \ud83d\ude06 \nAnyhow, you can run things in the spawned pipenv shell by simply doing pipenv shell my_command and that pretty much solves it. Thank you for your input :). ",
    "aepyornis": "@rglassett @adamstrickland @ethagnawl thanks for this! It solved the very problem I was having.\nI was wondering how you'd feel about having an option - environment variable? cli flag? -- to disable the warning? That way those using tmux master wouldn't have to hit 'enter' every time they fire up tmuxinator. . ",
    "ShirajG": "Same issue, I used to be able to jump into the native iterm2 integrated tmux mode using tmux -CC attach -t sessionName but now it will not work.\nEdit: Reinstalling tmuxinator gem seems to have resolved the issue.. ",
    "kurktchiev": "yeah i am having the exact same problem... if i switch to using post: tmux -CC attach it works as expected but tmuxinator throws an error because post: has been deprecated.... That seems to have done the trick!. ",
    "chrisspen": "This does seem to be supported in tmux, as shown in this example, but it's unclear how to access this feature through tmuxinator.. ",
    "Abdull": "Having such feature in tmuxinator without some ENV magic is exactly the reason why I am using tmuxinator in the first place. . ",
    "p-becker": "Can be closed.\nI apparently didn't use one of the magic keywords in the pull request \ud83d\ude48 . I just realized that there is a problem with the method self.bootstrap which lets you omit the start command, so you can type:\na) tmuxinator [project_name] instead of \nb) tmuxinator start [project_name]\nIn case a), #start gets called with all flags passed as args, instead of using the thor options hash. This means that none of the method_options will be used, including the --quiet flag.\nIs this a separate issue or does this need to be handled here?\n\nSome debug info:\na) \n```\nrake install && tmuxinator dotfiles --name test --quiet --project-config ~/dotfiles/tmuxinator/dotfiles.yml --attach\n\"Hello from self.bootstrap elsif branch\"\nARGS: [\"--name\", \"test\", \"--quiet\", \"--project-config\", \"/Users/pbecker/dotfiles/tmuxinator/infra.yml\", \"--attach\"]\nOPTIONS: {}\n    WARNING: You are running tmuxinator with an unsupported version of tmux.\n    Please consider using a supported version:\n    (1.5, 1.6, 1.7, 1.8, 1.9, 2.0, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8)\nPress ENTER to continue.\n```\nb)\nrake install && tmuxinator start dotfiles --name test --quiet --project-config ~/dotfiles/tmuxinator/dotfiles.yml --attach\nARGS: []\nOPTIONS: {\"name\"=>\"test\", \"quiet\"=>\"quiet\", \"project-config\"=>\"/Users/pbecker/dotfiles/tmuxinator/dotfiles.yml\", \"attach\"=>true}\n. I agree that --quiet is too generic, unless it is really meant to silence everything.\nI understand both the version and deprecations messages as warnings that things may break because you left the happy path. If that's the case, I think both kinds of messages should be treated equally.\nThat being said, how likely is the version to cause issues? If it's not very likely, let's hide it away in the doctor command.\n. I took the liberty to name it ...warning instead of ...warnings because there is only one version warning and we're trying to be precise :grimacing:. Two questions that may help to get this resolved:\n\nIs this feature useful enough to justify the lines of code added?\nPlaying devil's advocate here. I could totally understand if keeping the project's technical debt to a minimum outweighs adding features in some cases. Just because we can, doesn't mean we should.\nIs this technically sound and ready to be merged?\n\ncc @ethagnawl @adamstrickland\n. This is just copy pasted from the deprecation warnings to keep the blank line between the message and the confirmation:\nhttps://github.com/tmuxinator/tmuxinator/blob/8dab40337d85ee27ec27bf34cbdfb3290a0d5c72/lib/tmuxinator/cli.rb#L205-L207\nI guess it's easier to read this way?\nBut let me pull out the three duplicate lines, so that this would only need to change in one place. See: https://github.com/tmuxinator/tmuxinator/pull/659/commits/1b0776bf75ee21b7b38f5837d632d420fa5a491c. ",
    "tripl3dogdare": "Apparently I'm just dumb. Moral of the story, don't call tmuxinator start at the bottom of your ~/.bashrc.\n. ",
    "mehar": "Thanks @bedge . @ethagnawl let me check. ",
    "sabrehagen": "@ethagnawl This would be a really useful feature. Can this be merged please?. Hi @ethagnawl, thanks for the advice!\nThank you for the solution you provided. As you highlighted, that solution unfortunately suffers the same usability issues as my attempted alternative above.\nI'd like to try and create a solution. Would you mind linking the relevant part of the codebase where one would shell out from ERB and use the return value to determine whether or not to render that window?. Not having done Ruby before I didn't appreciate the flexibility ERB provides. Thanks for your follow up example. That does seem to be the better approach.\nI'll get to work with what you've given me - thanks.. ",
    "agios": "Also added a test.\nHas anyone had a chance to look at this? YAML aliases allow one to have global configuration default template snippets. . Added changelog note. This used to work already before, it was inadvertently broken by https://github.com/tmuxinator/tmuxinator/commit/2cd3c675feaf02967633b986f16e6be8b928b003.\nPerhaps what might be more interesting is a use case for this. Eg, you can use a defaults file, with the structure for various types of projects (rails, rails+docker, etc) and in an actual project file just write:\n```yaml\nname: test\nroot: ~/test\n<%= Erubis::Eruby.new(File.read(\"#{ENV['HOME']}/.tmuxinator/defaults\")).evaluate(self) %>\n\n<<: *rails-docker-defaults\n```. ",
    "jakubrohleder": "I have similar problem, I use tmuxinator with iTerm terminal, which has a native tmux support (with tmux -CC option). My configuration was:\nattach: false\npost: tmux -CC attach -t my_session\nAfter changing post to on_project_start tmux reports an error if session does not exist yet (it is no reattached).. @endorama in my case it works perfectly fine! Should the documentation be updated? . ",
    "mstruebing": "No it's on project exit. I try to explain it again.\nI start my terminal\nMy terminal autostarts tmux\nSo I have already one session\nI start my main session with tmuxinator (autostart multiple panes with updates, emails, irc, etc.)\nI want to have this main session alone and no other session at all.\nSo I need to kill the first session autostarted by my terminal manually.\nBefore this was possible to do automatically with the post option.\nHope this makes it a bit clearer for what I've used the post option.\n. @endorama When I use the post: option it closes my terminal (my terminal autocloses if no tmux session is present) before the new session gets created by tmuxinator.\non_project_exit kills the 'autocreated session by my terminal' when I exit the tmuxinator session, which would be expected behvaiour for me, but since I'm switching between many different sessions during my day there is always that not needed 'first session' which adds cognitive complexity (even if not much).\nattach: false doesn't do what I want either, it just leaves me in the 'autocreated by my terminal' session.\nvid.tar.gz\nI've added a video which should made clear what I mean. Thanks @endorama - I will try your suggestions at first and if it will not work I try to make a more in depth explanation of what I want to achieve and how does it currently work.. ",
    "skewerr": "If you want set -g mouse on to be part of your every tmux session, include that in your tmux configuration(usually ~/.tmux.conf, I don't know about WSL).\nIn case you want set commands for specific tmuxinator projects, however, I don't know how to help you because I'm having trouble with that myself. :sweat_smile: \nI'm used to tmuxp letting me include something like status: on in the YAML config. I tried sourcing a modified .tmux.conf with -f, but I guess the tmux server only reads the config when it starts up and it isn't actually session-based.. In case you meant the latter, by the way, here's what I'm doing right now to set status on on two of my tmuxinator projects (note: I have set -g status off for any other session):\nyaml\nname: comms\nroot: ~/\nwindows:\n  - irc:\n      - tmux set status on\n      - weechat\n  - mail: neomutt. ",
    "Andy-ABTec": "Thanks for that.... ",
    "Flink": "Submitting this PR as a suggestion on how to resolve the current issue with wemux. I\u2019m aware about https://github.com/tmuxinator/tmuxinator/pull/453 but it seems this PR\u00a0is outdated and is a very big rewrite compared to mine.. ",
    "codetriage-readme-bot": "Moved to a section in CONTRIBUTING.md\n. ",
    "Hamitamaru": "I'd also like this feature.\nI'm in a weird place that tmuxp has this ability but does not have the same ERB functionality in their config files that are supported by tmuxinator.\nIf tmuxinator added this feature I can move over.. Would it be possible to do:\ntmuxinator start -p config-for-tmux-session-1.yml -p config-for-tmux-session-2.yml ...\nThen when tmux opens I can just switch between the sessions.. ",
    "SuperElectric": "Awesome; thank you!\nOn Fri, Mar 30, 2018 at 9:35 PM Pete Doherty notifications@github.com\nwrote:\n\n@SuperElectric https://github.com/SuperElectric @Hamitamaru\nhttps://github.com/Hamitamaru This feature is contained in v0.11.0.\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/issues/595#issuecomment-377616885,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AFqosvnz49jzedWEQNsFBpJpxeo4rplMks5tjpcCgaJpZM4SaICI\n.\n. \n",
    "ecly": "@feimosi from the readme:\n\nDownload the appropriate completion file from the repo and source the file. The following are example where the completion file has been downloaded into ~/.bin.. @feimosi \nThe file hasn't been updated for 2 years and is unlikely to be changed. You basically download it and store it entirely independently from your tmuxinator installation and just source it from whatever location you've decided to store it at, in your .zshrc.\nSo after doing that just once you shouldn't have any maintenance, even when you update tmuxinator.. \n",
    "dgdavid": "I was wrong :sweat_smile: There is not an issue.\nSee https://github.com/tmuxinator/tmuxinator/pull/598#issuecomment-373958078 to know more.. > XDG_CONFIG_DIR (singular) in the spec and setting XDG_CONFIG_DIR seems to have no affect on Tmuxinator.\nI see, you are right.\n\nand the comment should be changed to say something like, Is ~/.config/tmuxinator unless $XDG_CONFIG_HOME is using a non-standard path\n\nSo, the change in README should be something like\ndiff \n -`$XDG_CONFIG_HOME/tmuxinator`\n+- `~/.config/tmuxinator`\n - `~/.tmuxinator`\nIsn't it?. >  someone may be using a non-standard value for $XDG_CONFIG_HOME\nHmmmm. Thanks for your reply, because now I understand this better :sweat_smile: \nPlease, let me explain what happened.\nBefore I made the PR yesterday, I checked the value of my $XDG_CONFIG_HOME first, which was none\n```bash\n\u276f echo $XDG_CONFIG_HOME\n```\nThen, after looking for the recent created tmux session configuration file in my file system, I found it under ~/.config/tmuxinator directory. Finally, I was taking a look to the source code and, although I did not find the explicit reference to this location I saw the quoted comment and, sorry for that, I did not investigate much more.\nNow, thanks to your comments, I just review the XDG documentation in the Arch wiki where  is quite clear: ~/.config/ is the default value for $XDG_CONFIG_HOME\nSo, my apologizes for make you lose your time due to my lack of devops knowledge and not enough investigation :sweat_smile::sweat_smile::sweat_smile::sweat_smile:\nI am closing the PR and related issue.\nAgain thank you so much.\n. ",
    "tribut": "Sure, sorry for that.. ",
    "ge-fa": "Sure, sorry, I've overlooked this. Fixed.\nEdit: Rebased and solved conflict.. ",
    "nicolasleger": "Yes, done. ",
    "maksimr": "Thanks for reply,\n\n'm guessing you've built the RC from the master branc\n\nUnfortunately no, I got this version after run 'brew upgrade tmux' do it looks like master is a stable version...(in brew). @ethagnawl Thanks! \ud83d\udc4d . ",
    "ZeroKnight": "I'm busy with finals currently, but later on today or tomorrow I could see\nif the knowledgeable folk in the Zsh mailing list and/or #zsh on Freenode\nwould review it, if it would provide some peace of mind \ud83d\ude42\nOn Thu, Jun 14, 2018, 17:09 Pete Doherty notifications@github.com wrote:\n\nSince this seems like a pretty benign change and since @ZeroKnight\nhttps://github.com/ZeroKnight seems to know what they're doing with\nregard to zsh (I had a quick look at their dotfiles), I'm okay with merging\nit as-is.\nThoughts?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/pull/610#issuecomment-397474725,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAr7dcVatcCG6IxZXm0OrK4e6gVLfzBGks5t8vsmgaJpZM4TIJzN\n.\n. So someone from #zsh was kind enough to review my change, and offered a much nicer version:\n\n17:49:25 <okdana> that will probably work\n17:49:37 <okdana> you could also use `_describe -x` or _message\n17:49:59 <okdana> the description is supposed to be singular tho\n17:57:37 <okdana> does _describe give an error if the array is empty? mine doesn't seem to\n17:57:53 <okdana> i know _values does but it takes them as separate operands\n18:11:25 <ZeroKnight> No error, but there's the completion output gets really strange like in the screenshot\n18:11:43 <ZeroKnight> The key to making it happen, and I don't know why, is the matcher zstyle in the minimal reproduction\n18:12:04 <ZeroKnight> zsh 5.4.2 on Arch Linux, if that helps\n18:18:30 <okdana> oh i see what you mean\n18:25:39 <okdana> https://ptpb.pw/60b9.M17byPE6\n18:25:43 <okdana> it doesn't seem to break if you do it like that\n18:26:42 <okdana> and you won't get return status 1 if your projects are missing\nI've implemented that change as a new commit to this PR. It works just as my original commit does, but this, I feel, is much cleaner. I can squash it to one commit using either implementation, just let me know what you'd like to do.. Okay, added a line to the Changelog and squashed to one commit. I realize that this PR wasn't done on a topic branch; I would switch it to one, but I'm not sure how to do it without opening a new PR.. ",
    "zeitchef": "Same here.. ",
    "marcelpaulo": "Hey, thanks for that, @ethagnawl, I'll try it out. It's much simpler than I originally envisaged.. ",
    "ilovezfs": "@ethagnawl you're welcome! Voil\u00e0 https://github.com/Homebrew/homebrew-core/pull/28931. ",
    "mateusmedeiros": "@ethagnawl Done!\nI had read the Contributing guide but it seems I missed the changelog part somehow \ud83d\ude05 . ",
    "guygadebois": "It doesn't seem that big of a change. I assume for panes it's just wrapping this line into an if based on some config value for this command:\nhttps://github.com/tmuxinator/tmuxinator/blob/21e0e980dac576b3939e868f2b4ccb8bde33a853/lib/tmuxinator/pane.rb#L62\nCould be something like:\ndef _send_keys(t, e)\n    if <config-send-enter-on>\n        \"#{project.tmux} send-keys -t #{t} #{e} C-m\"\n    else\n        \"#{project.tmux} send-keys -t #{t} #{e}\"\n    end\nend\nNow the unknown is how to specify this option in the yml config.\nWhen I find time to work on this I can try to open a PR some day.. ",
    "onhernandes": "Oh thank you! I don't know ERB, so I didn't know about this. Thank you so much!. ",
    "PotHix": "Any chance we can get this merged in?. ",
    "huerbt": "Hi,@ethagnawl My steps are as follows.\n1. I created test project\nname: test\nroot: ~/\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        - guard\n  - server: bundle exec rails s\n  - logs: tail -f log/development.log\n  - new4:\n  - new5:\n  - new6:\n  - new7:\n  - new8:\n  - new9:\n  - new10:  \n2.I saved it and then I typed  mux text, entered test porject, everything was ok.\n3.I used CTRL+b d \n4.I typed mux o text,and modified the configuration file\uff08add new window --\u2018new11\u2019\uff09\nname: test\nroot: ~/\nwindows:\n  - editor:\n      layout: main-vertical\n      panes:\n        - vim\n        - guard\n  - server: bundle exec rails s\n  - logs: tail -f log/development.log\n  - new4:\n  - new5:\n  - new6:\n  - new7:\n  - new8:\n  - new9:\n  - new10: \n  - new11:\n5. I  I typed  mux text again, then I couldn't find 'new11' window\uff08Just have 'editor,server,log,new4...new10 windows)\ntmux version is 2.7\ntmuxinator version is 0.12.0\nMac os High Sierra 10.13.6\niTerm2 version is 3.2.0 \nzsh version is 5.3. ",
    "andho": "OS: Ubuntu 18.04.1 LTS\nKernel: 4.15.0-33-generic\nRuby: 2.5.1p57\nOutput of gem list:\n```\n LOCAL GEMS \nbigdecimal (default: 1.3.4)\ncmath (default: 1.0.0)\ncsv (default: 1.0.0)\ndate (default: 1.0.0)\ndbm (default: 1.0.0)\ndid_you_mean (1.2.0)\nerubis (2.7.0)\netc (default: 1.0.0)\nfcntl (default: 1.0.0)\nfiddle (default: 1.0.0)\nfileutils (default: 1.0.2)\ngdbm (default: 2.0.0)\nio-console (default: 0.4.6)\nipaddr (default: 1.2.0)\njson (default: 2.1.0)\nminitest (5.10.3)\nnet-telnet (0.1.1)\nopenssl (default: 2.1.0)\npower_assert (0.2.7)\npsych (default: 3.0.2)\nrake (12.3.1)\nrdoc (default: 6.0.1)\nscanf (default: 1.0.0)\nsdbm (default: 1.0.0)\nstringio (default: 0.0.1)\nstrscan (default: 1.0.0)\ntest-unit (3.2.5)\nthor (0.19.4)\ntmuxinator (0.8.1)\nwebrick (default: 1.4.2)\nzlib (default: 1.0.0)\n```. ",
    "JamesB41": "I'm experiencing the exact same issue, fwiw.. ",
    "nastynaz": "Also having this issue.. ",
    "qbantek": "Same issue. Ubuntu 18.04\nTemporary hack:\n```yml\nname: project                                                                    \nroot: ~/projects/project                                                 \nwindows:                                                                       \n  - editor:                                                                    \n    layout: e414,317x86,0,0[317x63,0,0,0,317x22,0,64,2]             \n    panes:                                                                   \n      - $EDITOR                                                              \n      - tmux select-layout -t project:0 e414,317x86,0,0[317x63,0,0,0,317x22,0,64,2] && \n        clear\n```. ",
    "emersonmx": "I guess #646 solve it. ",
    "fluxsauce": "In the interim, to downgrade tmux if you installed and upgraded using brew on a Mac:\nbrew switch tmux 2.7. ",
    "keithpitty": "@ethagnawl @adamstrickland This diff looks straight forward to me. Looking forward to seeing the new version available via rubygems.org. :wink:. ",
    "tdehaeze": "Sure.\nI have added the entry to changelog.md.. ",
    "underscorenygren": "Went with blank because that's what the #root fn did, but I don't think it\nmakes a difference.\nOn Wed, May 13, 2015 at 3:43 AM maxmeyer notifications@github.com wrote:\n\nIn lib/tmuxinator/project.rb\nhttps://github.com/tmuxinator/tmuxinator/pull/303#discussion_r30208295:\n\n@@ -31,7 +31,7 @@ def root\ndef name\n   name = yaml[\"project_name\"] || yaml[\"name\"]\n-      name.shellescape\n-      name.blank? ? nil : name.shellescape\n\nwhat about name.empty?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/tmuxinator/tmuxinator/pull/303/files#r30208295.\n. \n",
    "houndci-bot": "Line is too long. [94/80]\n. Line is too long. [105/80]\n. Line is too long. [96/80]\n. Line is too long. [113/80]Use the new Ruby 1.9 hash syntax.\n. Line is too long. [113/80]Use the new Ruby 1.9 hash syntax.\n. Avoid using {...} for multi-line blocks.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Surrounding space missing for operator '='.\n. Surrounding space missing for operator '='.\n. Assignment Branch Condition size for validate is too high. [18.68/15]Surrounding space missing in default value assignment.\n. Line is too long. [101/80]\n. Surrounding space missing for operator '='.\n. Trailing whitespace detected.\n. Line is too long. [86/80]Prefer single-quoted strings inside interpolations.\n. Line is too long. [86/80]Prefer single-quoted strings inside interpolations.\n. Redundant curly braces around a hash parameter.Use the new Ruby 1.9 hash syntax.Space inside { missing.Space inside } missing.\n. Redundant curly braces around a hash parameter.Use the new Ruby 1.9 hash syntax.Space inside { missing.Space inside } missing.\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Useless assignment to variable - out. Use _ or _out as a variable name to indicate that it won't be used.\n. Useless assignment to variable - out. Use _ or _out as a variable name to indicate that it won't be used.\n. Line is too long. [85/80]\n. Line is too long. [81/80]Redundant curly braces around a hash parameter.Use the new Ruby 1.9 hash syntax.Space inside { missing.Space inside } missing.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [119/80]\n. Line is too long. [131/80]\n. Line is too long. [129/80]\n. Line is too long. [96/80]\n. Line is too long. [110/80]\n. Line is too long. [95/80]\n. Line is too long. [144/80]\n. Use the new Ruby 1.9 hash syntax.\n. Line is too long. [95/80]Prefer single-quoted strings inside interpolations.\n. Line is too long. [94/80]\n. Line is too long. [88/80]\n. Line is too long. [87/80]\n. Line is too long. [97/80]\n. Line is too long. [110/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Line is too long. [87/80]\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Avoid using {...} for multi-line blocks.\n. Inconsistent indentation detected.\n. Use the new Ruby 1.9 hash syntax.\n. Line is too long. [89/80]Space missing to the left of {.\n. Line is too long. [97/80]\n. Line is too long. [101/80]\n. Line is too long. [89/80]Space missing to the left of {.\n. Line is too long. [87/80]\n. Line is too long. [90/80]\n. Line is too long. [90/80]\n. Unused method argument - name. If it's necessary, use _ or _name as an argument name to indicate that it won't be used. You can also write as project_in_local(*) if you want the method to accept any arguments but don't care about them.\n. Final newline missing.\n. Line is too long. [112/80]Space missing after comma.Space inside { missing.Space inside } missing.\n. Unused method argument - args. If it's necessary, use _ or _args as an argument name to indicate that it won't be used.Unused method argument - block. If it's necessary, use _ or _block as an argument name to indicate that it won't be used.\n. Prefer double-quoted strings unless you need single quotes to avoid extra backslashes for escaping.\n. Assignment Branch Condition size for validate is too high. [19.82/15]Surrounding space missing in default value assignment.\n. Useless assignment to variable - settings.\n. Line is too long. [87/80]Use the new Ruby 1.9 hash syntax.\n. Line is too long. [87/80]Use the new Ruby 1.9 hash syntax.\n. Assignment Branch Condition size for validate is too high. [16.97/15]\n. Align the elements of a hash literal if they span more than one line.Use the new Ruby 1.9 hash syntax.\n. Align the elements of a hash literal if they span more than one line.Use the new Ruby 1.9 hash syntax.\n. Assignment Branch Condition size for validate is too high. [16.31/15]\n. Space missing to the left of {.\n. Unnecessary spacing detected.\n. Line is too long. [105/80]Space missing to the left of {.\n. Line is too long. [104/80]Space missing to the left of {.\n. Line is too long. [82/80]Redundant self detected.\n. Line is too long. [117/80]Redundant self detected.Space missing to the left of {.\n. Space missing to the left of {.\n. Space missing to the left of {.\n. Use the new Ruby 1.9 hash syntax.\n. Line is too long. [105/80]\n. Line is too long. [101/80]Space missing to the left of {.\n. Line is too long. [87/80]\n. Line is too long. [117/80]Space missing to the left of {.\n. Line is too long. [88/80]\n. Use the new Ruby 1.9 hash syntax.\n. Use the new Ruby 1.9 hash syntax.\n. Line is too long. [81/80]\n. Line is too long. [81/80]\n. Redundant self detected.\n. Line is too long. [83/80]\n. Do not write to stdout. Use Rails' logger if you want to log.\n. ",
    "jackturnbull": "Embarrassing, sorry! Fixed.\n. ",
    "seanmalloy": "I included the activesupport gem because it was in the original Gemfile. I can remove it from the gemspec if it is not required.\n. Removing the activesupport gem breaks the Travis CI tests for Ruby 1.9.3. I updated the CHANGELOG.\n. I think I have everything updated now.\n- Rebased my branch against master\n- Updated CHANGELOG\n- All gem deps moved to tmuxinator.gemspec (including rubocop)\n- bumped required Ruby version to 2.0.0 in tmuxinator.gemspec\n- tmux 2.2 and 2.3 added to TravisCI test matrix\n. "
}