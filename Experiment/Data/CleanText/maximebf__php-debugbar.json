{
    "maximebf": "Thanks\n. thanks\n. The more collectors there is, the better!\nHowever, it's pretty easy to collect Laravel log messages into the debug bar as it uses Monolog and DebugBar has a MonologCollector:\nphp\n$debugbar->addCollector(new DebugBar\\Bridge\\MonologCollector(Log::getMonolog()));\nSomething which I would love to do in the near future is integrations with popular frameworks which do no ship with an equivalent tool. The goal would be to provide collectors but also automatic integration of the debug bar, no need to play with the JavascriptRenderer. (I already did that in my own framework: http://atomikframework.com)\n. actually I will leave it open for the moment to remind me of doing the integrations stuff\n. This is great! I think it's best to leave full integrations with other frameworks out of the main repo nad have packages somthing-debugbar. I'll happily make a note in the README about your project though (I'll do it right now actually)\n. so many typos! thanks for that\n. thanks\n. thanks\n. thanks\n. thanks\n. thanks\n. I had that in mind for a while. I will implement it using HTTP headers which I think is the much cleaner solution.\n. The solution would be to create a Twig plugin to be able to use a twig tag in your template. This would clearly be a good addition to the Twig bridge but less important than other tasks to do at the moment\n. thanks. I fixed it but using the project's coding style\n. fixed\n. thanks\n. thanks\n. yes I had this in mine as I agree the hash is not very practical.\nI have an idea about that and will implement it very soon\n. yeah good point, I will change that\n. good idea, will do\n. While doing it I was thinking I should do something else because it could cause integration problems but I wished that the standard PHP session mechanism would still work.\nI like your driver idea and will implement that quickly\n. Done and ready to commit. What do you think of the term HttpDriver and the interface below?\ninterface HttpDriverInterface\n{\n    function setHeader($name, $value);\n    function isSessionStarted();\n    function setSessionValue($name, $value);\n    function hasSessionValue($name);\n    function getSessionValue($name);\n    function deleteSessionValue($name);\n}\n. In addition to setHeader() or instead?\n. let's go with setHeaders()\n. This is a good idea.\nI started implemented it but would like to discuss one point.\nI have\n```\nif (typeof(PhpDebugBar) == 'undefined') {\n    // namespace\n    var PhpDebugBar = {};\n    PhpDebugBar.$ = jQuery;\n}\n(function($) {\n//...\n})(PhpDebugBar.$);\n```\n(this allows you to manipulate PhpDebugBar.$ before the inclusion of debugbar.js)\nI'm planning to add an option in the JavascriptRenderer to say whether or not to do jQuery.noConflict(). \nI'm however not sure if it is good to enable noConflict() by default. I didn't think that people would include jquery two times, this was the reason you could deactivate the inclusion of vendor files.\n. Note that my long term goal is to remove completely the dependency on jquery and have 100% standalone js code.\n. I'm going to update the docs but here are the implementation details:\njQuery.noConflict(true) will be called by default.\nIf the js files from the vendors are not included (using JavascriptRenderer::setIncludeVendors()), jQuery.noConflict() won't be called.\nYou can manage it using JavascriptRenderer::setEnableJqueryNoConflict()\n. You are right, it is not very clear in the docs. However it is possible to bind the ajaxHandler to any jquery version:\njs\nphpdebugbar.ajaxHandler.bindToJquery($);\n. I just pushed some changes which should fix this problem.\n. Why would you need to modify the vendors?\nIf you want to manage other assets, you should use a proper asset management tool like Assetic. If you are using jquery in your projet and want to include only one copy just use setIncludeVendors('css').\n. This is not an optimization and has no effect. \"for\" loop initialization is perform only once. I really don't see the point of your modification\n. xx.xxx seems a bit too much for ms. I like the idea to always show 3 digits but xxx.xx would do fine.\nBefore merging the pull request, it would be nice if you would add spaces after \"if\", before \"{\" and before \"elseif\" to have homogeneous coding standard.\n. yep perfect!\n. should I merge now? are you ok with the digits? (they are ok for me)\n. Thanks for being such a great contributor!\n. Good point. Will do that asap\n. yes this is the way to go.\n. I don't remember why I stopped using it. I should add an option to enabled it again.\n. The way things are, the code that add params in the request does not have access to PDO::quote(). This means that even number would be enclosed with '. I preferred to use a way of indicating a parameter's value using <> to avoid the confusion it could create if ' was used (eg: why my number is quoted when I used PDO::PARAM_INT in bindValue?)\nThis was a design decision and can be changed. I could add a param $quotationChar...\n. You can now use $debugbar['pdo']->setRenderSqlWithParams(true, \"'\");\n. please respect the coding conventions\n. thanks :)\n. shouldn't it be better to throw an exception? i'm not a big fan of suppressing errors like that as you could have a hard time understanding what's happening\n. I get your point on no exceptions but then we need to show the message in the debugbar. So instead of returning an empty array, we should check if the messages collector is added, add it if not, and then add a message which says that headers cannot be sent.\nWe could also add a special key 'error' in the header data and modify the javascript to show an error message (I actually think this would be the easiest)\n. Yes of course I was implying removing all previous data. Which is tedious that's why the second idea seems better\n. great work, thanks\n. done: 1.8\n. if you can do some small changes: \n- rename function register_render() to renderOnShutdown() and return an empty string if $here == false\n- rename function register_shutdown() to replaceTagInBuffer()\n- use a constant named REPLACEABLE_TAG for the tag {--DEBUGBAR_OB_START_REPLACE_ME--}\nif you want to avoid exceptions, use ob_get_status() to check if an ob handler is used\n. Great work, Thank you! A few things before merging:\n- please update the unit tests with the new js (tests are currently failing on travis.ci)\n- in js: variable names starting with $ are used to denote a jquery object, please rename $respCss_size to respCssSize\n- in js: rename function responsiveCss() to registerResizeHandler()\n. I think it would be better to use the php logo when minimized.\n. very good idea. I will merge as soon as the icon change is done (you can\nuse src/DebugBar/Resources/php-icon.png)\nMaxime\nOn Sat, Jan 4, 2014 at 7:46 PM, Barry vd. Heuvel\nnotifications@github.comwrote:\n\nWould also be fine, I just used this because it was also already available.\nI can change it if you want. What do you think of the idea / rest of the\nimplementation?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/pull/57#issuecomment-31589496\n.\n. thanks! it was a very good idea to optimize the experience for mobiles\n. there is no immediate plan to support propel 2. I added support for propel 1 after a client's request but I'm not using it myself. I will have a look if it's easy to support the new version but I encourage you to contribute a Propel2Collector if you have time.\n. it provides the php version as a piece of data to use in the debugbar. more thing will be added to it in the future\n. I think the null=hide 0=show is a good idea and a good middleground. As an added bonus, it does not break the current state.\n. tagged\n. Code convention: new lines after first { in function, one space after if/foreach/...\n. thank you\n. Is it really necessary? You don't really need the sourcemap for vendor scripts and why would you care about 404 in dev logs?\n. Usually I use the MessagesCollector or the MonologCollector and log operations as messages. You can use a named MessagesCollector.\n\nphp\n$debugbar->addCollector(new MessagesCollector('cache'));\n$debugbar['cache']->addMessage('ADD(key1)');\nThis will create a new tab in the debugbar named \"Cache\" with all messages log through the cache collector\n. tests are failing because of mismatch with fixture files\n. I don't think doing that is needed because of the way memory_get_usage() works. Memory usage does not follow a linear progression like time, it can go up and done. So you could allocate memory and deallocate it between the two memory_get_usage() calls and the delta would be 0 but you would have used memory.\nI find it is more interesting to get the total amount of memory allocated at that point it time to be able to make a proper decision on what to do\n. I'm closing this pull request as the situation as evolved.\nI've added a left and right container to the header which allows for good responsivity. I don't think we need multuple levels of responsiveness for now.\nIf you need this feature, you are welcome to update your code with the latest changes and submit a new PR or re-open this one.\n. done\n. This is not possible without using special extensions like you mention.\nAnyway I don't see the point of that. If people catch exceptions it's for a good reason. Why would you want to see all of them? What you suggest about modifying the Exception constructor will surely never be added to DebugBar\n. Yes this is a good idea which should be applied to every storage handlers\n. I see two ways to implement it:\n- adding a gc() method to the interface and handling the call to this method inside DebugBar::collect() when save() is called\n- creating a StorageManager class which comes between DebugBar and the storage handlers. This class would have a save() and get() methods and the call to gc() would be handled inside save()\nperformance consideration: instead of doing gc() in save() we do it in get() so it does not impact writing performance\n. Yes good idea. Let's do that then:\n- add a gc() method to the StorageInterface\n- call gc() from OpenHandler::get()\n- add the needed getters/setters on OpenHandler (setGcLifetime(), getGcLifetime(), setGcProbability(), getGcProbability())\n. indeed, PHP 5.3 is still the target.\nalso, coding conventions :)\n. I prefered the second method. Fixed\n. added DataFormater which are using kint, fixed\n. fuck! changing that quickly\n. done\n. Wouldn't it be nice if this was enabled using a parameter?\n. I would prefer without but this is up for debate\n. coding conventions and I accept\n. The bindToJquery() method at line 1057 of https://github.com/maximebf/php-debugbar/blob/master/src/DebugBar/Resources/debugbar.js is pretty straighforward. It uses jQuery's ajaxComplete event to listen to ajax request (http://api.jquery.com/ajaxcomplete/). The documentation specifies that using .ajax() with global:false disables ajaxComplete events, could this be the issue?\nIf not, could you use a breakpoint 1060 of debugbar.js and check if the event is triggered.\n. Good idea. Highlight.js is well known so I think this would be a good choice.\n. please respect code conventions (outlined in CONTRIBUTING.md) in the future. thank you\n. yes\n. I pushed some bug fix and refactoring. Everything should work now.\nI renamed ServerHandler\\Server to ServerHandler\\FrontControler\n. haha no worries. will do a 2.0 with that. I'm also working on other things which will be pushed with the new version. what do you think of a \"console\" widget? ;)\n. btw I re-created the dev branch. it will become the 2.0\n. it was a weird situation. the folder was already versionned (if not you would have had to run \"bower install\" everywhere) but was ignored after. this means new versions of the scripts in vendor where ignored. The new size is due to an update to jquery and font-awesome which added all the source files.\nI'm not in favor of ignoring this folder and having to run bower install. not enough people know/have installed bower. I'm open to other solutions however (we could only add the files we need)\n. I'll do something to fix that\n. great to hear that! Looking at your code I wonder how the request data are being passed as the first argument of handle() is null?\n. haha oups forgot that! great then\n. you think rebasing would be too difficult? I think it may be worth a try.\nI have nothing against a 2.0 branch anyway\n. I rebased dev and pushed it under the branch dev_rebased\nHaven't got time to test it though\n. Have you redeploy the assets? debugbar has a new js vendor.\nAnyway I'm pushing a fix in case hljs is disabled right now.\n. Additional queries are not appended to the current data. There is a concept of datasets. Each request is its own dataset. When multiple queries are perfomed (for example with ajax), the dataset switcher appears on the top right of the debugbar. bindAttr('data') is executed when the dataset is changed thus refreshing the view of the widget.\nSo in the end, sql queries performed in different requests will never be treated together, always independently. Which is the desired behavior.\nThis means it makes no difference if sql queries are treated client or server side.\n. I have nothing against adding it. I was letting the discussion happening first. I'm kind of away from the computer until monday so cannot test it. I'll do that on monday and will merge if everything is ok.\n. sorry, I'm in the middle of Peru right now and do not have very good access to internet. I cannot merge automatically so I'll need to find time to do it from the computer\n. We could simply do a check of the lenght of the data and not highlight if\nit's too long. (or eventually have a parameter which specifies the max\nallowed length)\nMaxime\nOn Wed, Mar 26, 2014 at 9:09 AM, Barry vd. Heuvel\nnotifications@github.comwrote:\n\nPerhaps also an indicator that it can be prettified/opened (for messages).\nConfig doesn't always have to be prettified, so perhaps an option similiar\nto the messages (is_string) would be also helpful.\n(So an icon that indicates that it can be opened, which changes in a\nloading icon)\n\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/issues/112#issuecomment-38680811\n.\n. and for longer code blocks where highlight is disabled, add a small\n\"highlight\" button that when click activates the highlighting\n\nMaxime\nOn Wed, Mar 26, 2014 at 9:11 AM, Maxime Bouroumeau-Fuseau \nmaxime.bouroumeau@gmail.com wrote:\n\nWe could simply do a check of the lenght of the data and not highlight if\nit's too long. (or eventually have a parameter which specifies the max\nallowed length)\nMaxime\nOn Wed, Mar 26, 2014 at 9:09 AM, Barry vd. Heuvel \nnotifications@github.com wrote:\n\nPerhaps also an indicator that it can be prettified/opened (for\nmessages). Config doesn't always have to be prettified, so perhaps an\noption similiar to the messages (is_string) would be also helpful.\n(So an icon that indicates that it can be opened, which changes in a\nloading icon)\n\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/issues/112#issuecomment-38680811\n.\n. yes this is a good idea. but we have to take into account that big objects may be provided to templates.\n. good idea, will work on that\n. should be very easy and a good default. will change that\n. I would select the first one on load but subsequent ajax calls are\nautomatically selected. Is that ok?\n\n\nMaxime\nOn Thu, Apr 24, 2014 at 9:57 AM, Barry vd. Heuvel\nnotifications@github.comwrote:\n\nOr a checkbox/toggle, to indicate you want to load the latest requests, or\nstay on the first on. When loading a page, I usually want to see the real\npage and not the ajax calls. But when I click on something after a few\nseconds, I'd rather see the new requests. Not really sure what would be the\nbest default :P\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/issues/120#issuecomment-41290102\n.\n. I was looking into that and it seems harder than it looked at first.\nI don't know if an ajax call is triggered on page load or due to a click event so I cannot know when to auto-show a request or not.\nTo know the origin of an ajax request, it would be needed to indicate everywhere whether to show it or not which would be cumbersome.\nAt the moment I'm leaving the default as is but adding the possibility to show or not a request when it is added to the debugbar in the api. \nThe checkbox idea will propably be the best option I think.\n. Are you accessing your database using the $pdo variable you initialized? You need to access your database through the TraceablePDO instance for the tracing to be available.\n. But are you doing DB::getInstance()->prepare() or $pdo->prepare()?\nIf the former then the tracing won't work.\nYou need to replace the instance managed by your singleton with the one wrapped with TraceablePDO.\nSomething line DB::setInstance(new TraceablePDO(DB::getInstance()))\n. changing the prefix and the font name would be tedious. I don't see the problem with just disabling the css vendors and using your own version. font-awesome is not modular so all icons are always included. and even if not included, the debugbar experience is just slightly degraded because of missing icons.\n. Good point. I don't have anytime to fix this at the moment but will accept a pull request. Will resume work on debugbar in june. Only accepting PR in the meantime. Sorry for the delay\n. I think it should be optional with a parameter named $alwaysConvertDataToUTF8 or something. The default value can be true\n. ok then\n. you can disable including of the assets and use your own version.\n\n$javascriptRenderer->setIncludeVendors(false);\nanyway, I will update the assets asap\n. I will not merge this request. As @barryvdh said, this is a sign of bad design. Just register your own function with register_shutdown_function as you mentioned in #123.\n. thanks!\n. good call\n. I don't understand why the demo folder would be in your path?\nAnyway, will dot it but seems weird\n. Can be added in version 2 as some tweaks are needed in the javascript renderer for a good integration\n. I would like to open the debate on this PR. Is it not better to include README + docs?\n. True. But I often work offline and like to have the docs handy. It's not like saving a few Ks changes anything on a server. I must be in the minority however!\n. Cool, didn't know that\nMaxime\nOn Sat, Jul 26, 2014 at 3:09 PM, Graham Campbell notifications@github.com\nwrote:\n\nIf you want the docs, you can run composer with the --perfer-source\noption. Doing this will make composer clone the repo rather than\ndownloading the dist version. This will include all files.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maximebf/php-debugbar/pull/142#issuecomment-50233593.\n. I'm checking\n\nMaxime\nOn Sat, Jul 26, 2014 at 3:13 PM, Graham Campbell notifications@github.com\nwrote:\n\nAlso, are we ready for a 1.9.15 release now, or is there anything else\nthat needs doing?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maximebf/php-debugbar/pull/142#issuecomment-50233689.\n. the dev branch is the future 2.0, I will not remove it at all!\nI have to check serverhandle but I think it was merged in dev\n. I have no problem with the data uri. However I had included the icons for a good reason: if you do not include font-awesome, you get to at least see the most important icons. I don't want to remove them.\n. I had started to think of a better asset system. I want to include one with the 2.0 version. I would prefer to do that in the new version rather than the 1.* branch.\nI really need to move forward with this new version. I'm opening an issue right now to request some help to test the dev branch and will try to release in the coming weeks.\n. The integration with Assetic (as described here: http://phpdebugbar.com/docs/rendering.html#assets) was intended to provide this feature. If you use assetic to manage assets (which seems to be pretty common), then you just need to use JavascriptRenderer::getAsseticCollection()\n. A note on the changes:\n- new way to define widgets and widgets can include their assets (see https://github.com/maximebf/php-debugbar/blob/dev/docs/data_collectors.md)\n- new server handlers system (see https://github.com/maximebf/php-debugbar/blob/dev/docs/server_handlers.md)\n- js api to execute commands on the server (see https://github.com/maximebf/php-debugbar/blob/dev/docs/javascript_bar.md#executing-commands-on-the-server)\n. wouldn't it be possible to use a property on the xhr object? like that:\n\njs\nxhr = nex XMLHttpRequest();\nxhr.ignoreDebugBarAjaxHandler = true;\nand then in your XMLHttpRequest override, you can check for this property? seems cleaner that way.\nYou could then remove the jquery binding because the work is done at the xhr level. To set the ignoreDebugBarAjaxHandler on the underlying xhr object in jquery you can use the xhrFields option:\njs\njQuery.ajax({xhrFields: {ignoreDebugBarAjaxHandler: true});\n. ok then, if that doesn't work, your way was good\n. all good\n. yes that seems logical after adding it to addMeasure().\nwhat's the goal of the \"controller\" argument?\n. all is good then\n. updated but it may takes a few hours before the dns updates\n. I didn't add that before because this is not accurate at all unfortunately. This reports only the delta between memory at start and end but not the actual usage during the interval. For example, setting and then unsetting a variable during this interval would not be reported by this.\n. Why 2 buttons? One which state changes is not enough?\nI see a limited usage of this as clicking on the tab was enough to me but why not.\nI would say, these icons need to be base64 encoded too as it become a part of the main UI. With better aligment like you said Barry\n. ah ok I was wondering. then I'm ok with it\n. I'm ok with it\n. You would need to add a flag to fnmatch here: https://github.com/maximebf/php-debugbar/blob/master/src/DebugBar/Storage/FileStorage.php#L101\n(see: http://devdocs.io/php/function.fnmatch)\n. Indeed the doc is a bit lacking. There are two parts to collectors: the Collector class and the frontend widgets. PHP DebugBar provides a set of widgets which you can use to present your data but you can also create your own.\nYou can find some info about widgets here: http://phpdebugbar.com/docs/javascript-bar.html#widgets\nThe code for the builtin ones is located here: https://github.com/maximebf/php-debugbar/blob/master/src/DebugBar/Resources/widgets.js\nAs the doc says, your collector class can implement the Renderable interface and define the getWidgets() method \"which returns an array of key/value pairs where key are control names and values control options as defined in JavascriptRenderer::addControl($name, $options)\" (http://phpdebugbar.com/docs/rendering.html#defining-controls).\nThe way you collect your data is really up to you. The only important thing to remember is that the data you want to transmit to the frontend (ie. to the widget => so formatted as required by the widget) must be returned by collect() method of your collector which will be called once at the end of the request.\nYou can look into existing collectors to get some examples: https://github.com/maximebf/php-debugbar/tree/master/src/DebugBar/DataCollector.\n@losttheplot how do you include the debug bar assets on the frontend? Are you using the builtin renderHead() or are you doing it manually? If the latter, then you're missing some of them (namely, the files in src/DebugBar/Resources/widgets/sqlqueries)\n. I don't see anything wrong with the code you provided. Are you properly using the TraceablePDO instance ($pdo in your example) to make the queries?\n. ",
    "mikealmond": ":clap: Works like  charm. Thanks!\n. ",
    "barryvdh": "I did some experimenting with Laravel and the Debugbar: https://github.com/barryvdh/laravel-debugbar\nI created some Collecters (not perfect yet), what whould the best place to be, in a seperate package (like mine) or should I make a PR to get them inside this package?\n. Thanks, this is great!\n. I just inject the output of both render() and renderHead() after the response is created (just before ) so Twig doesn't have to do anything with the debugbar.\n. Thanks!\n. This is much better, but is the date needed? For ajax/redirects, it seems a bit much..\n. Maybe set an array of headers, or would that be overkill?\nOp 19 sep. 2013 21:04 schreef \"Maxime Bouroumeau-Fuseau\" \nnotifications@github.com het volgende:\n\nDone and ready to commit. What do you think of the term HttpDriver and the\ninterface below?\ninterface HttpDriverInterface\n{\n    function setHeader($name, $value);\n    function isSessionStarted();\n    function setSessionValue($name, $value);\n    function hasSessionValue($name);\n    function getSessionValue($name);\n    function deleteSessionValue($name);\n}\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/issues/28#issuecomment-24764920\n.\n. For Symfony it would be easier to set an array, but doesnt matter that much\nI guess..\nOp 19 sep. 2013 21:15 schreef \"Maxime Bouroumeau-Fuseau\" \nnotifications@github.com het volgende:\nIn addition to setHeader() or instead?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/issues/28#issuecomment-24765774\n.\n. Yes seems to be working :)\n. Okay, just checked and it seems to be working (when I include or exclude it, after my onw jQuery). Will try out some more and see if it works for other people too :)\n. When I include my own jQuery and the set include_vendors = true, the ajax listener doesn't work. This isn't really much of a problem because it works when setting the include_vendors to 'css' only, but maybe this should be mentioned in the docs, or be fixed.\nIt is probably because the event listener is binded to jQuery (but the wrong one of the 2). I don't know if it is possible to bind it to the other jQuery when available also?\n. But should that be done by default then?\n. Yes, can confirm this works for both settings.\n. Updated to show ms with bigger precision.\n. Actually, not really sure about the precision. It is good for small queries (Like 3.14ms, but a bit much for the total time for the page, like 123.45ms). \nMaybe check that it always shows 3 digits in total? So 123ms of 12.3ms or 1.23 ms? What do you think?\n. Better?\n. Yeah fine with me too.\n. Just add some custom css to your stylesheet.\n\n.phpdebugbar, a.phpdebugbar-tab,span.phpdebugbar-indicator,a.phpdebugbar-indicator,a.phpdebugbar-open-btn,a.phpdebugbar-minimize-btn {\n    font-size: 12px !important;\n}\n. I see that the function is already there: https://github.com/maximebf/php-debugbar/blob/master/src/DebugBar/DataCollector/PDO/TracedStatement.php#L78\nSo it would be as easy as changing this line: https://github.com/maximebf/php-debugbar/blob/master/src/DebugBar/DataCollector/PDO/PDOCollector.php#L95\nto:'sql' => $stmt->getSqlWithParams(),\n(That creates sql like where id = <1> instead of where id = '1', don't know what is better)\nAny specific reason why this isn't used?\n. I would agree that ' would be more easy than <>, if only to make it easier to copy/paste to phpmyadmin etc. But maximebf does have a point that it can be more confusing when it just slightly differs from the actual query..\n. Okay sorry, will try again next time ;)\n. Okay this is probably similar to #44, but this time for outputting Binary data (instead of saving it). You have saved some BLOB data and just pass the model to the view?\nIn some tests I did, the blob data just returns an empty string, but it could be this behaviour changed in php 5.4. Are you on 5.3, or 5.4/5.4? I tested on 5.4 and it worked. We could check the encoding before trying to apply htmlentities. I'll create a PR.\nBinary data will also cause problems when doing json_encode (for example when adding a debug message with it (for example, outputting your entire model), so perhaps that needs some checking to. (But these aren't really common cases I guess)\n. This has been merged a few days ago. Can you check and close if fixed?\n. Thanks!\n. @maximebf Would you mind tagging a new point release? So I can reference a stable version with this (and other) changes.\n. That would be an option. But I think a debugbar shouldn't be in the way of your work, so stopping the website from working isn't very good (although it is only on production).\nWouldn't it be possible to throw an error inside the debugbar? For example, just explain why no data is shown, without interfering with the ajax request?\n. Yeah, but you cannot just add the message, because the data is already to large. So you would have to remove all collectors and only add the Exception/Message collector back.\nI think the special error header will be easier..\n. So what would be the best way? Add a phpdebugbar-error header and check if that header exists?\nAnd then output the error to the browsers console or create an own error handler?\n. Updated the PR to add an error instead of the data to the headers, and update the debugbar.js to see if the header data has en error instead of data.\n. Nice, looks good :)\n. That folder is populated with bower install. The result is committed to the git repo, so no need to do anything during composer install.\n. Yes\n. Yes please :)\n. Would also be fine, I just used this because it was also already available.\nI can change it if you want. What do you think of the idea / rest of the implementation?\n. Okay will try to remember it tommorow :)\nOp 4 jan. 2014 22:53 schreef \"Maxime Bouroumeau-Fuseau\" \nnotifications@github.com:\n\nvery good idea. I will merge as soon as the icon change is done (you can\nuse src/DebugBar/Resources/php-icon.png)\nMaxime\nOn Sat, Jan 4, 2014 at 7:46 PM, Barry vd. Heuvel\nnotifications@github.comwrote:\n\nWould also be fine, I just used this because it was also already\navailable.\nI can change it if you want. What do you think of the idea / rest of the\nimplementation?\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/maximebf/php-debugbar/pull/57#issuecomment-31589496>\n.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/maximebf/php-debugbar/pull/57#issuecomment-31589656\n.\n. Better?\n. Tnx, time for a new tag? ;)\n. Are you sure? Doesn't happen for me. Can you provide an example of the session var you put in?\n. Okay, I guess that is probably a bit of an edge case because it has been turned of by default in 2002 and I cannot test it, since it's removed in php 5.4..\n. It's just a suggestion, but I think a '0' badge doesn't have any use. The badge would be more useful for messages (for example) to alert the user 'hey look, this time I do have messages!'\nBut I guess it's just personal preference.\n. Maybe that would be better indeed.\nBut I still think that for Messages, Exceptions, SQL, Mail etc, it would be more clear to have no badge when 0.\n. Yes seems good.\n. Okay, the FileStorage seems to work fine, but when I read the docs, it would seem there should be an open/browse button for older datasets, correct? Do I have to do anything to use that? I already set the open handler url and that works..\n. Sorry, I screwed up the icon (see #69). Makes a lot more sense now ;)\n. Yeah a new tag would be nice. Also added some stuff to the OpenHandler, which would be niced in the new tag :)\n. Added this in the bigger OpenHandler PR\n. Haven't tested this btw, but it should be like this I guess\n. Sorry, will fix the cs tomorrow.\n. Better?\n. I don't really need them. It's not the dev logs, but the open handler logs, because I also collect the error/404 pages..\n@GrahamCampbell in 2.1 you mean? Or 1.11?\n. Ah indeed, http://blog.jquery.com/2013/11/15/jquery-1-11-02-1-0-beta-2-released/\nFair enough, guess it will release soon enough.\n. I don't think this is possible.\n. yes/no?\n. Okay, any thoughts on what would be the best way? Just handle it like I did in the commit I referenced, or do you want to include it in the StorageInterface and call it from somewhere else? And What do you think about the 1/20 garbage collection, or would you just run every time? (I don't really know what the impact would be, but I guess loading all files and checking date is more expensive then just running a PDO cleanup query)\n. The StorageManager is kind of what OpenHandler is now right? So we could add gc to the interface and call it in OpenHandler->get()\nDoing it in get() is probably better because that doesn't impact the actual request, only the ajax request.\n. Okay I'll create a PR to start with.\n. Okay I remember why I put it in save(): the get() function is only called when accessing items from ajax/redirects, not regular requests (which are the most requests), so the GC is less likely to be run.\n. I tried something different by creating a BaseCollector (abstract) which contains the GC functions. Other storages can just extend this. Let's continue the conversation in #89 \n. I omitted the getGcLifetime/Probability because I'm not sure why you would need them.\n. Yeah I Will check them before merging, also need to do tests. But what do you think doing it like this? And where shall we run the gcCheck?\n. Good idea, submitted a PR for suggestion 1.\n. Even better :)\n. @Anahkiasen it will probably still be the plaintext layout, not the Kint HTML version (because that would probably complicate it a lot)\n. Example implementation in #95, closing this in favor of that.\n. Cool, but isn't it Formatter instead of Formater?\n. Also, for larger exceptions (ie. a long SQL query with information), get's behind the Exceptionname, making it hard to read the entire exception. Maybe tweak the exception formatting to show the exception name in front of the exception, instead of floating label?\n. Could be, I could update the PR If you want.\nDefault with or without chaining?\n. Okay, Well it doesn't really matter for me that much, as I would just set the default in my laravel serviceprovider myself anyways.\nI haven't really researched how much chaining is used, but in the times that I chain an exception, I would usually also want to see the original exception.\nI think most exceptions aren't chained so, for most it wouldnt have any effect.\n. I set the default to false and added an option to enable chaining.\n\nAnother thing about exceptions: It doesn't escape the html properly. See the formatting issue of the name over the message, and the html in the exception. (I added a new commit to fix this below)\n\n. Fixed the spaces in controle structures, or did I miss something else?\n. Is this good to merge, or do I need to change anything?\n. Cool, thanks :)\n. Sounds cool :) Will try and test this tonight.\n. Okay will try in a bit. I hope you aren't going to release this also as 1.9.x, are you? Because it will probably break my integration ;)\n. Would be nice :) Do you want to provide a simple console to start a new request, or hook into the current request (which would be more difficult)\nLaravel has a command line tool to start Boris repl, with the framework fully loaded, would be cool if we could do that From the debugbar.\nI did actually have this feature requested: https://github.com/barryvdh/laravel-debugbar/issues/66\nThis might be interesting to follow some of the problems/examples: https://github.com/filp/whoops/issues/42 (and the linked issue from symfony etc)\n. Ok.\nWas there any reason why you removed the resources vendors from gitignore? Now the resources are around 10MB..\n. How it was before, was that the folder was ignored, but the files that were need, were force pushed, right? So people didn't need Bower and only the files that were used, were in the Resources folder.\nDon't know if that makes updating harder, but it was a lot smaller.\n(And size doesn't really matter that much, but it seems a bit much)\n. Your serverHandler was pretty easy to change btw :) https://github.com/barryvdh/laravel-debugbar/commit/35d17694f3a214a1f10d851a3f9d7bac7e113314\nSeems to work still fine :)\nWant anything specific tested, or more a general question what would be possible?\n. First lines of handle():\nif ($request === null) {\n    $request = $_REQUEST;\n}\nI was going to make it more Laravel/Symfony like with the request object etc, but figured this works just fine :)\n. Okay starting to pick this up again. I like the way this was going (with clearing the cache etc as examples), but it's not really easy to merge the dev-branch now I think.\nShould I just recreate a 2.0 branch and redo the changes manually? Or what do you think?\n. Not sure, it's a lot behind now. But will give it a try if I get the chance soon.\n. Thanks, if you could tag a new release when you are done for the weekend, that would be great :)\n. Thanks!\n. Did you disable the js vendors? They include now Highlight.js also.\n. Similar issue: https://github.com/barryvdh/laravel-debugbar/issues/113\nMaybe we could define what vendors are included, instead of setting that all js/css is I included. Especially when we are adding some vendors over time.\n. Pushed a different fix (see linked issue/commit), can you confirm if that works (by editing the widgets.js, this is not in dev-master yet)\n. That depends on @maximebf \nBut you could change your config to set include_vendors to true, so hightlight.js is included (and you will have syntax highlighting)\n. In understand, but it should not conflict if you load jquery twice\n. It is merged but won't be downloaded until a new version is tagged.\n. And it is already tagged now so will be updated in a couple of minutes :)\n. Looks like a good idea :) Wouldn;t it be easier to check in php (by creating a hash of the query+params) and adding the duplicate count + property for each statement?\n. Okay, perhaps you are right and is this better. Lets see what maxime says :)\nI'm fine with either way, like this I don't have to do anything :p\n. Do you have any packages that might make large config settings? I haven't experienced this yet.\nA temporary solution would be to disable the config collector in your configuration.\nYou are using laravel-debugbar I guess?\n. Can you try to update widget.js to the commit above? Does that work for you?\nIt should prettify on clicking, not on loading the data.\n. So what would you suggest? An option to disable prettifying? Or only on certain collectors?\nDisabling prettigying altogether is easy, because you can just exclude loading the javascript package.\nIn my case, smaller amount of code don't really impact the opening/closing, and for larger blocks, the prettifying is even more helpful..\n. Perhaps also an indicator that it can be prettified/opened (for messages). Config doesn't always have to be prettified, so perhaps an option similiar to the messages (is_string) would be also helpful.\n(So an icon that indicates that it can be opened, which changes in a loading icon)\n. Could you tag a new release with this?\n. Or do you want something else before tagging a new release? It seems many people are having problems with this.\n. Yes I know, so perhaps make it optional or show a more minimal version of the objects. In my laravel version I only show arrays or the objects name, and only when the option is set explicitly.\n. Created a PR for this in #169 \n. In addition to showing parameters, maybe also provide a label option, similar to the message collector. For example, when you log views, queries, guzzle requests etc to the timeline, you can just show one.\n. Submitted a PR in #170 It adds parameters + the collector name.\nCould you guys provide feedback there? Closing this in favor of the PR.\n. See #112 \nShould be better in dev-master, or when @maximebf tags a new release.\n. Or a checkbox/toggle, to indicate you want to load the latest requests, or stay on the first on. When loading a page, I usually want to see the real page and not the ajax calls. But when I click on something after a few seconds, I'd rather see the new requests. Not really sure what would be the best default :P\n. See #93 But I would agree that perhaps we can split out the kintLite functionality and skip Kint autoloading, because it has side effects. (Similar to my own PR, #95)\n. I submitted a PR to just use the kintLite logic, instead of the full package.\nAnother downside of using Kint with Composer, is conflicting requirements, as a lot of people are using dev-master or 1.0.0-wip, instead of 0.9, which causes Composer to load older versions.\nI don't think the advantages of using the composer package outweigh the disadvantages.\nI suggest we remove the composer dependency and revisit this decision when (if) the issues in Kint are resolved and 1.0 stable is released.\n. @dafrenk did you solve this issue, or just don't care anymore? ;)\n. I think this is probably just for HHVM, so perhaps a bug there.. But shouldn't hurt anyways..\n. That option is for laravel-debugbar. In the phpdebugbar you can set it using JavascriptRenderer::setIncludeVendors()\nYou can only set the include no vendors, just css, just js or all vendors.\nhttp://phpdebugbar.com/docs/rendering.html#assets\n\nNote that you can only use the debug bar assets and manage the dependencies by yourself using $renderer->setIncludeVendors(false). Instead of false, css or js may be used to only include css or js assets of vendors.\n. What about changing the font awesome prefix in debugbar to be inside the debugbar css prefix, so it won't conflict with existing installs? \n. And probably need to change the font name also, right? \n. In the laravel-debugbar, I also just do the renderHead() and render() just before the , and haven't had any problem.\n. Why? Only utf data is allowed in json encode.\n. So why do you die()? Can't you follow your normal flow correctly?\n. Yes please :)\n. Because your IDE also indexes the vendor folder. \n. Is this fixed by using the XMLHttpRequest object directly? (see above PR)\n. Are those requests running through the php application? Or are you just including raw html? Because those don't have the headers attached.\n. Do you still need the ng-phpdebugbar package? Should work without it (hopefully) \n. Fixed in #186\n. Could you create a simple test-case with your sticky footer, so I can see it in action?\n. Hmm, hoping to do this without a toggle option in PHP /cc @xapon\nAny ideas?\n. That is what I hope, yes. If someone could create an simple view that I can just render to see the problem, it would help.\n\nAn actual CSS (or js) solution that 'just works' would be great\n. But sticky footers could like different, right? So need to be sure what to handle.\nEg, example from Bootstrap: https://gist.github.com/barryvdh/4ae10330922ace3497b3\n. So something like #242 ?\n. Does that fix work for you?\n. I've merged it, so please check with the latest dev.\n. Can you create a test case + or?\n. *PR\n. Just download the normal one and replace the changed file manually.\n. I've also inlined those 2 buttons, instead of using font-awesome. Better?\n. Could you tag a new release when done for the day? \n. Okay, haven't looked yet, but regarding the assets, I was wondering what would be the easiest way to include the js/css from within the framework, preferably without copying the assets to the public dir. I guess this would work fine for css /js an just dump them on a route, but then you would also have to take in to account the images and fonts. But images can be inlined as data and font awesome perhaps used with a CDN or something. \nAnd would be nice if we could also swap out css/js instead of just adding probably. Will try to take a look tomorrow. \n. I think I tested this a while back, is it possible to merge the master changes to dev? \nAbout ascetic, that doesn't handle images /fonts right? \nMaybe a feature suggestion, adding an iframe or similar to display extra information for a tab (eg. more logs, all routes, etc, similar to the old dataset pop-up) or is that already easy to do with the new api? \n. Or we can inline the icons as well. See https://icomoon.io/app\nWith that, you can select multiple icon fonts, make a selection, add a prefix, set the font name and embed the font. This should prevent issues with icon namespaces (use debugbar-icon- instead of fa-), older/newer versions, offline loading and embedding css.\nThe icomoon project can be exported to a .json file, with the selection + preferences, so should be easy to update it. And will probably make it easier to switch to different fonts or add some more fonts if needed in the future.\n. Okay, not so super easy, that doesn't support all tools.\nThe easier way to embed them as data I can find now is using http://www.fontsquirrel.com/tools/webfont-generator\nJust upload the ttf file from font-awesome and copy the @fontface definitions and paste them in the css file. Seems to work fine, see https://github.com/barryvdh/laravel-debugbar/tree/master/src/Resources/vendor/font-awesome\n. Or do you suggest we proxy the fonts also? I now map the css/js like mydomain.com/_debugbar/assets.css (and .js) but could also do something like /_debugbar/vendor/font-awesome/css/font-awesome.min.css and let that output the actual file from the vendor dir, and also do the same for all paths etc. What would you suggest?\nDo you want to add something like this to the core or do you suggest you let every framework handle it?\n. An alternative could be to use SVG icons directly in the HTML, but not sure how that impacts everything. Similar to https://github.com/blog/2112-delivering-octicons-with-svg\nFor example, using https://github.com/encharm/Font-Awesome-SVG-PNG\n. So the code from https://github.com/symfony/symfony/pull/12000 is now merged, so might be slightly different. Do you want me to make a PR for this? \n. Closed in favor of #167\n. Are you on IE11 mode, or compatibility mode?\n. Read about autoloading with Composer here: https://getcomposer.org/doc/00-intro.md#autoloading\nYou probably didn't install it properly with composer, or required the autoloader.\n. You could probably use any PSR-0 classloader. \n. I think you can write your own error_handler() to catch certain warnings/errors and add them to the message tab.\nThis probably doesn't really work well by default, because most frameworks use their own error_handler() and that might conflict. Not sure if there is any 'unobtrusive' way to just catch the warnings without messing with other error handlers.\n. But the document height doesn't depend on the viewport, but on the size of the document? So if the document is larger then the window, the h_max will be too large. See http://jsfiddle.net/sL6xaew1/\nIn Chrome, both values display the same when the document fits, but when you make it to small (so scrollbars appear), the document size is incorrect.\n. What do you mean, you experience the error, so dus fixing your doctype work?\n. Closing this, as I'm assuming this is fixed by setting the correct domtype. If not, please let me know.\n. I agree wit the $useBlocks params, but not sure about the clearCache, which is present in the original Template. Doesn't this cause problems for people testing their templates?\n. You could add a new commit to the same branch to put it back and it will be added to the PR, or create a seperate PR for both issues. \nBut I'm not sure what @maximebf intended with the clearCache(), so perhaps he could shed some light on it.\n. Okay thanks :)\n. I've changed it to this in the above commit:\npublic static function clearCache()\n{\n    Twig_Template::clearCache();\n}\nI think that should make it work and still have the expected result. Does that work for you?\n. Did you solve this or just not relevent any more?\n. Is composer self-update not needed anymore?\n. Okay thanks.\n. I've added a check to see if the url begins with the openhandler url, if present and skip that (instead of the ignoreSettings).\n@maximebf What do you think?\n. Hmm, that doesn't seem to work for me.\nBut it is really needed? As long as you don't send the debugbar headers, you don't log the request anyways.\n. Okay, will merge it like this and keep the default to jQuery for now. Will try it out and perhaps switch in 2.x to just the XHR.\n. What change are you looking for specifically? I preferably want to take a look at #167 and #163 before tagging a new release. There isn't much changed that isn't in laravel-debugbar already, is it? (Or are you using it stand-alone?) \n. I've bumped the branch-alias to 1.10.x, will probably tag a new release this weekend or so, if you are okay with that ;)\n. It is tagged.\n. Yeah I saw your issue just after tagging. But send it anyway, will go with the next tag ;)\n(Assuming there isn't any big need difference between 4.1 and 4.2)\n. @maximebf I'm thinkin about adding the collector name to the startMeasure() method, and params to the stopMeasure, does that make sense? The measure method could use a returnvalue from $callable perhaps?\n(cc @dmitry-ivanov for initial proposal)\n. collector is used to differentiate the source/origin. For example, when logging time/data from SQL, Guzzle, mail etc.\n. Merged through https://github.com/maximebf/php-debugbar/commit/0447abd246978d50ec97182e97aa585334b32890\n. Thanks!\n. Okay np, this doesn't actually do much by itself, just make the PR with the correct bower.json and updated vendor files, if you'd like.\n. Ehh, just one thing: //# sourceMappingURL=jquery.min.map does that trigger the sourcemaps? Because that gives a lot of 404 errors. Could you remove that?\n. Ok thanks\n. Thanks\n. And another idea: running select/explain queries through the debugbar to show the results. But that would require passing the SQL query (or id) to the handler + returning the result.\nThat is probably the direction you were going with the ServerHandler stuff etc.\n. I'm not sure about the way the Twig collector works (I just use a custom view collector) but it extends the original Environment/Template, but passes each call to a child Environment/Template.\nAll extra calls should probably be also caught and forwarded to the real instances.\nMaybe try something like this in the Template (first) / Environment (2nd):\n```\npublic function __call($name, $arguments)\n{\n    return call_user_func_array(array($this->twig, $name), $arguments);\n}\npublic function __call($name, $arguments)\n{\n    return call_user_func_array(array($this->template, $name), $arguments);\n}\n```\n. Yeah I'm only not sure how that handles method_exists calls and interface restrictions. But we could look into that. \nI was actually looking a few days ago but didn't bother because it wasn't broken for me yet ;) \n. Yes go ahead :)\nOp di 11 nov. 2014 20:43 schreef Andy Miller notifications@github.com:\n\nYour right, there are a few issues\n1) TraceableTwigEnvironment extends Twig_Environment which already has\nthese methods defined, so __call will not be used if these extra methods\nare removed from the Traceable version, the Twig_Environment methods will\nbe found first.\n2) TraceableTwigTemplate implements Twig_TemplateInterface so removing\nthose methods will cause a missing methods because of abstract class\nimplementation error.\n3) Your correct about the method_exists() problem, but I think issue 1 and\n2 precludes this scenario :)\nShould I submit a pull request for the __call() methods on the classes\nas-is though? As that is a legitimate solution for at least the 'macro'\nscenario, maybe others i've not found yet.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/maximebf/php-debugbar/issues/176#issuecomment-62606951\n.\n. Thanks. \n. Which collector are you running? DebugBar\\DataCollector\\PDO\\PDOCollector?\n\nNot every collector does the same thing, for example, my Laravel debugbar doesn't show all this information because it uses the Laravel query logger instead of the PDO connection directly.\n. Yes that is what I said above ;) \n. 2.6.0 has been tagged, PR is updated. Any comments?\n. Preferred way is installing with Composer. Otherwise, require your own (PSR-0) autoloader.\n. Yes, just keep it in the vendor folder and require vendor/autoload.php\n. Now you are running Composer inside the Debugbar directory. You should require the debugbar in your own projects composer.json and run composer update there. Then the debugbar (and dependancies) will be downloaded to your own vendor dir. See https://getcomposer.org/doc/01-basic-usage.md for more information.\n. Did you add the collectors?\n. See http://phpdebugbar.com/docs/data-collectors.html#using-collectors for collectors and PDO collector for the database: http://phpdebugbar.com/docs/base-collectors.html#pdo\n. See https://github.com/blog/1917-github-pages-legacy-ip-deprecation also\n. Looks good to me. Any idea why the icons were missing? Are you using a new version of the icons? (dev-master should be up-to-date)\n. Okay, I'll publish a new release then.\n. 1.10.1 is tagged. Also updated + tagged this in laravel-debugbar (if you are using that)\n. Wasn't this fixed by https://github.com/maximebf/php-debugbar/commit/b589604b562d8e1bcb26934bec10bbc5c3ecfe48 (from @rhukster)?\n. Similar to #120 \nThere we talked about adding a checkbox to toggle automatic replacing, is that what your looking for? \nI'll see if I can fix something like this soon.\n. Thanks!\n. Thanks!\n. Is clicking on thy tabs not intuitive enough:\n. Okay I've checked your changes. In the future, it would be easier to add 1 feature per PR, so it is easier to accept/reject/change just one :)\nAbout the minimize button: I think it's probably a good idea. Not really sure about the icon though, they don't really seem to match with the close/browse button. Perhaps fc-expand and fa-compress? And then black + bold?\nSQL queries look good to me :)\n. Maybe thats better indeed.\n. Ok looks better indeed. Just nitpicking here:\n- Icon's don't seem to be visually aligned (eg. changing padding to 3px 8px instead of 5px 8px seems to be more aligned in Chrome)\n  - A lot of spacing between icons, perhaps the padding could be altered? (Either all a bit smaller, to the new icons to 3px 3px\n  - The other 2 icons have a :hover background change.\n  - The open/close icons are base64 encoded, because they need to work without the vendor files. But I guess this isn't super essential for minimize (as it wasn't there in the first place)\n@maximebf thoughts?\n. The 2 buttosn were just for the example. In the PR either the minimize or maximize button is shown, according to the active state :)\n. Ok good. @kardagan can you update the PR + squash your commits?\n. Okay but you didn't look at the remaining issues yet, right?\n. Base64 is needed indeed :)\n. Thanks, merged!\n. Did you follow http://php.net/manual/en/mbstring.installation.php ? Or you could use https://github.com/tchwork/utf8\nBut we should probably either require this with composer (which means people get stuck on an older version which doesn't work either) or should use a non-mbstring check.\nPerhaps something like:\n```\nfunction isUTF8($str)\n{\n    return preg_match('//u', $str);\n}\nfunction toUTF8($str)\n{\n    return iconv('UTF-8', 'UTF-8//IGNORE', $str);\n}\n```\n. Yes I understood that ;)\nI'll create a 'Util' class to provide some common checks etc.\n. You still have to add the collector to the Debugbar\nSomething like $debugbar->addCollector($pdoCollector);\n. I've created those helper functions, hope this helps: #190\nAlso, if you are using Eloquent you might find https://github.com/barryvdh/laravel-debugbar/blob/master/src/DataCollector/QueryCollector.php useful, but I should probably reduce some dependencies (instead of requiring the framework).. \n. Perhaps it would be be better to create and 'Third party' section and just link to the github project.\n. I would say probably also in the readme (a link below framework integrations) and the docs section. Don't know if there are any more collectors yet.\n. Okay it's merged, but not yet tagged.\nPerhaps it would be a good idea to create a seperate repository for 3rd party collectors with dependancies? Otherwise we can't require certain versions etc.\n. Low on my priority list, but open for PRs\n. Submitted a fix.\n. You create 2 new debug stacks now? You should inject the existing debug stack into the collector, I think.\n. So probably something like this:\nAdd a method to add the doctrine collector to Debug class:\npublic function addDoctrineCollector($debugStack) {\n    $this->debugBar->addCollector(new \\DebugBar\\Bridge\\DoctrineCollector($debugStack));\n}\nGet the connection from the DB2 class that you use (assuming that you use the same connection everywhere)\n$db = new DB2;\n$debug = new Debug;\n$logger = $db->get()->getConfiguration()->getSQLLogger();\n$debug->addDoctrineCollector($logger);\n. Thanks\n. You don't need to set up the autoloading in Composer, just require the package.\nAnd you need copy the assets to a file in your public webroot, and set that location with setBaseUrl in the JavascriptRenderer.\nSee http://phpdebugbar.com/docs/rendering.html#assets\n. What's the rendered output? And do you have any 404's on the assets?\n. Thanks!\n. I've taken a quick look, but I'm not sure what the best way is.\nI guess it would be possible to extend the Engine, override the render() method and add some timing there , similar to the TraceableTwigEnvironment. Something like this perhaps?\n```\n<?php\nuse League\\Plates\\Engine;\nuse DebugBar\\DataCollector\\TimeDataCollector;\nclass TraceableEngine extends Engine \n{ \n    protected $twig;\n    protected $timeDataCollector;\npublic function __construct(Engine $engine, TimeDataCollector $timeDataCollector = null)\n{\n    $this->engine = $engine;\n    $this->timeDataCollector = $timeDataCollector;\n}\n\npublic function render($name, array $data = array())\n{\n    $start = microtime(true);\n    $result = parent::render($name, $data);\n    $end = microtime(true);\n\n    if ($this->timeDataCollector) {\n        $name = sprintf(\"plates.render(%s)\", $name);\n        $this->timeDataCollector->addMeasure($name, $start, $end, $data, 'Plates');\n    }\n    return $result;\n}\n\n}\n```\nping @reinink for better ideas ;)\n. And to clarify, you would wrap the original engine in the new TraceableEngine\n```\n// Create the Collector\n$timeDataCollector = new DebugBar\\DataCollector\\TimeDataCollector();\n$debugbar->addCollector($timeDataCollector);\n// Or get an existing one\n$timeDataCollector = $debugbar['time'];\n// Create new Plates instance\n$templates = new League\\Plates\\Engine('/path/to/templates');\n// Wrap the Engine in the TraceableEngine\n$templates = new TraceableEngineEngine($templates, $timeDataCollector);\n// Render a template\necho $templates->render('profile', ['name' => 'Jonathan']);\n```\nBut I haven't tested any of this, but let me know the results!\n. A collector in the case of php debugbar is a class that collects some information. For example for templates, to get information about which templates are rendered, whit what variables, how long it took etc.\n. Thanks.\nPerhaps a readme in english would be nice though.\n. Can't you just pass the base URL as parameter?\n. What styling does this effect? You created your own widgets?\nThis is mostly meant to reset inherited styling from the original document.\n. I'm not sure, could have been necesarry to increate the specificity. Can't you prefix your styles with div.phpdebugbar?\n. So how do you propose to do that?\n. what is the link to the repo of your collector?\n. And what css line is exactly the problem? Like box sizing, perhaps I can set the style just for the parent div and set the rest to inherit, would that help?\n. Okay cool, I had actually started playing with a magento version a few weeks back also, so will take a look.\nYou could af2f your own css to overwrite some css, but you can also remove the original css file I think.\n. I'll try to take a look soon if there is a better way to prevent style bleeding from the website to the debugbar.\n. Why did you close this?\n. Should be fixed in v1.10.5\n. Can you replace the view environment? eg. $app->view->setEnvironment($env);?\nBut we'll probably rework the Twig collector soon.\n. Thanks!\n. Thanks!\n. Should be fixed in v1.10.5\n. Wordpress uses mysqli, not PDO right?\nAccording to the codex, you can enable query logging.\nphp\ndefine( 'SAVEQUERIES', true );\n$queries = $wpdb->queries;\nTake the DoctrineCollector for example, but use the $wpdb variable instead.\nRoughly something like this:\nphp\n$collector = new WordpressDatabaseCollector($wpdb);\n$debugbar->addCollector($collector);\n``` php\n<?php\nuse DebugBar\\DataCollector\\AssetProvider;\nuse DebugBar\\DataCollector\\DataCollector;\nuse DebugBar\\DataCollector\\Renderable;\nuse DebugBar\\DebugBarException;\nclass WordpressDatabaseCollector extends DataCollector implements Renderable, AssetProvider\n{\n    protected $wpdb;\npublic function __construct($wpdb)\n{\n    $this->wpdb = $wpdb;\n}\n\npublic function collect()\n{\n    $queries = array();\n    $totalExecTime = 0;\n    foreach ($this->wpdb->queries as $q) {\n        list($query, $duration, $caller) = $q;\n        $queries[] = array(\n            'sql' => $query,\n            'duration' => $duration,\n            'duration_str' => $this->formatDuration($duration)\n        );\n        $totalExecTime += $duration;\n    }\n\n    return array(\n        'nb_statements' => count($queries),\n        'accumulated_duration' => $totalExecTime,\n        'accumulated_duration_str' => $this->formatDuration($totalExecTime),\n        'statements' => $queries\n    );\n}\n\npublic function getName()\n{\n    return 'wpdb';\n}\n\npublic function getWidgets()\n{\n    return array(\n        \"database\" => array(\n            \"icon\" => \"arrow-right\",\n            \"widget\" => \"PhpDebugBar.Widgets.SQLQueriesWidget\",\n            \"map\" => \"wpdb\",\n            \"default\" => \"[]\"\n        ),\n        \"database:badge\" => array(\n            \"map\" => \"wpdb.nb_statements\",\n            \"default\" => 0\n        )\n    );\n}\n\npublic function getAssets()\n{\n    return array(\n        'css' => 'widgets/sqlqueries/widget.css',\n        'js' => 'widgets/sqlqueries/widget.js'\n    );\n}\n\n}\n``\n. Thanks!\n. Makes sense. Is this PR finished?\n. Thanks!\n. So it's only caseless when you type your word in lowercase? Not sure if that makes total sense. I guess it would make more sense to just always search caseless\n. Ok thanks!\n. Thanks\n. Pushedv1.10.5` :)\n. You can create your own widgets, you should be able to render html.\n. I don't think so. @maximebf Okay with merging?\n. Merged :)\n. Did you also upgrade to the latest font-awesome?\nAnd should we also namespace the font itself? Otherwise we still get conflicts, right?\n. @maximebf this good? Haven't test this, but seems like good idea.\n. Gonna try how this works out..\n. Fixed some widgets; https://github.com/maximebf/php-debugbar/commit/c6c6ae20e1f67dc8e7a9d0f81f4cc0ebab0724b8\nAnd used a PHP script instead of sh; https://github.com/maximebf/php-debugbar/commit/54bd5aeeb8b912c138a387113d08cf742d5f958e\nAlso updated to FA 4.5\nDoes this work for you?\n. Can you use 'use DebugBar\\DataFormatter\\DataFormatterInterface;` instead?\n. Thanks!\n. Should probably replaced by the profiler extension (https://github.com/maximebf/php-debugbar/issues/192)\n. Sure!\n. Can you format it, so it's like the rest?\n. Thanks!\n. This probably belongs in the https://github.com/barryvdh/laravel-debugbar but okay;\nCan you try disabling the collectors in your config? Disable them all and re-enable one by one until it breaks (or other way around). I would assume it's either the auth or session collector)\nAlso, check your logs to see if you have any errors.\n. Is this fixed by https://github.com/maximebf/php-debugbar/pull/252 ?\n. Thanks\n. Thanks\n. Above PR was merged!\n. Thanks!\n. The Twig loader is currently a bit out-dated. It should be updated but don't have the time yet.\nNot really sure what's wrong here.\n. I guess this probably could be done using the Storage + Open handler, eg. link to debugbar.php?request_id=12345.\n. Thanks\n. Thanks!\n. Thanks!\n. Probably need an option here though. Oh sorry, this is php-debugbar, not laravel-debugbar. Closing this as fixed :) . Good job. Can you squash to 1 commit as @GrahamCampbell suggested?\n. Thanks!\n. Okay let's give this a try.\n. It seems to work for me, expect for the state that the only the bar is shown. So not closed, but minimized.\nSee \n\nWhen closed or fully opened, the copyright is shown, but when minimized, it isn't.\n. Yeah see the mentioned commit, https://github.com/maximebf/php-debugbar/commit/c2455dae3223ec2382f5eaa32e47b9a988e129f0\n. Can you create a PR?\n. So queries are retrieved using: $this->debugStack->queries. This isn't in the SQLLogger interface, so we don't know if other instances also provides this functionality, right? For example, the EchoSQLLogger doesn't have this..\n. Should we escape on the client or server side? Might be safer on the server side?\n. tagged 1.11.1\n. You can if you use dependancy injection or a service container or something.\n. Yes, I think you could probably remove the type hint and just add phpdocs, right?\nI will accept PR's :)\n. I think it should return the messages instead\n```\npublic function dump()\n{\n    $dump = '';\n    foreach ($this->messages as $message) {\n        if ($messages['is_string']) {\n            $dump .= $message['message'] . PHP_EOL;\n        }\n    }\nreturn $dump;\n\n}\n``\n. Can you submit a PR?\n. Do you need this so often? Can't we just add it todiv.phpdebugbar`\n. Can't you set the baseUrl in the JavascriptRenderer?\nhttps://github.com/maximebf/php-debugbar/blob/e634fbd32cd6bc3fa0e8c972b52d4bf49bab3988/src/DebugBar/JavascriptRenderer.php#L86\n. Whatever you like, setup a symlink, copy the assets or serve them on the fly.\nI usually do the latter, serving them on demand through a frontend controller.\n. The idea was that even without Font Awesome, the important buttons were still usable. You can (for example) disable some vendor files, which conflict.\nPerhaps we could use inline SVG, to provide retina icons (like https://github.com/blog/2112-delivering-octicons-with-svg )\n. Are you using a storage handler to store the requests?\n. Thanks! So what are the cons of this approach?\n. OK cool\n. Using the svg path in the collectors would allow is to decouple from font awesome, which causes interoperability problems ( version mismatch etc)\n. Feel free to submit a PR :)\n. Thanks!\n. Hmm, this is good but the problem now is that we will break BC, so this would warrant a new release for just this.. See https://3v4l.org/bUWPp\nAn alternative would be the create a new collector, but that aint pretty either.\n(So deprecate the ExceptionsCollector, create a new ThrowableCollector)\n. what does Laravel do? Convert to plain exception, with throwable as previous?\n. Okay yeah, so that would need to happen in application implementing debugbar, not much I can do about that. (Except for laravel-debugbar of course)\n. You can just add extra commits to your branch, even after the PR is submitted. I will merge those commits together when I accept it.\n. Thanks!\n. What then?\n. Hmm, fair enough. Submit a PR and I'll accept.\n. An alternative would be to add addThrowable method, because there internally isn't a reason we couldn't just use the Throwables directly. We just can't change the addException typehint.\n. Probably good to standardise this in the QueryCollector. I'm doing something similar here: https://github.com/barryvdh/laravel-debugbar/blob/7668d62768cbd6b9f9ab8eebb11d6647869d5195/src/DataCollector/QueryCollector.php#L200-L232\nBut there I'm misusing the existing stmt_id key.\n. This is what it looks like for me: \n\n. I think we should probaby create a AbstractQueryCollector with some useful methods, and extend from that.\n. What about using the hash of the changed files, instead of the version? Because the assets change when adding some collectors with different widgets or configuration.\nSomething like this: https://github.com/magento-hackathon/magento2-toolbar/blob/6ad03dd3367ed5e39102a7ae7d796222b0955973/JavascriptRenderer.php#L21-L50\n. So something like this:\n``` php\n     /\n     * Renders the html to include needed assets\n     \n     * Only useful if Assetic is not used\n     \n     * @param string $v current version of static resource\n     * @return string\n     */\n    public function renderHead()\n    {\n        list($cssFiles, $jsFiles) = $this->getAssets(null, self::RELATIVE_URL);\n        $html = '';\n        foreach ($cssFiles as $file) {\n            $file = $file . '?v=' . $this->getAssetsHash('css');\n            $html .= sprintf('' . \"\\n\", $file);\n        }\n        foreach ($jsFiles as $file) {\n            $file = $file . '?v=' . $this->getAssetsHash('js');\n            $html .= sprintf('' . \"\\n\", $file);\n        }\n        if ($this->enableJqueryNoConflict && !$this->useRequireJs) {\n            $html .= 'jQuery.noConflict(true);' . \"\\n\";\n        }\n        return $html;\n    }\n/**\n * Get the hash of the included assets, based on filename and modified time.\n *\n * @param string $type 'js' or 'css'\n * @return string\n */\nprotected function getAssetsHash($type)\n{\n    $assets = [];\n    foreach ($this->getAssets($type) as $file) {\n        $assets[$file] = filemtime($file);\n    }\n    return md5(json_encode($assets));\n}\n\n``\n. How are you using a CDN?\n. If you are using a CDN, you specifiy the version in the URL right? Cause otherwise you will get out-of-sync versions.\n. I don't think so. You can add storage, so that you can inspect previous request (using the browse button), but not automatically. Can't you redirect with PHP?\n. Yeah we should update it to Throwable here: https://github.com/barryvdh/laravel-debugbar/blob/4e0e81e1b40616825556eeed6367cebe7e532622/src/LaravelDebugbar.php#L448\nAs implemented here: https://github.com/maximebf/php-debugbar/commit/7c62c30a1ec09f1eac3813b1f050dbc5cc475a51\n. Cool :)\n. Is it integrated in Grav itself? Otherwise better link to the integration.\n. Are you using the default MessageCollector? It should sort the array on time when sending to the debugbar.\nOtherwise we could perhaps sort the messages on time in the widget?\n. Not directly, but you can easily create your own collectors :)\n. You should create your own collector: http://phpdebugbar.com/docs/data-collectors.html#creating-collectors\nYou can extend the existing query collectors if you want.. So should we add this to more places? Eg. exceptions and possibly backtraces from queries etc?. Why do you need to swap it for a cdn? It's only for dev. They're are namespaced so they don't conflict with font awesome from the app itself, otherwise it could lead to a version mismatch. . In larave-debugbar I use the base64 encoded font olinline in the stylesheet, to render it on a route (which dumps the assets), could that work for you also, if we do that here? . Thanks! . Isn't it wrong to return null, shouldnt we return empty array in the first place?. Thanks. Let's try this. Are you using stacked data? Or which framework?. An alternative could be to only send it back when the debugbar is not injected. For example, when I create APIs with a JS front-end + PHP back-end, I can't see the debugbar, but I can see the network requests there. I agree that usually, the headers would be less informational then the actual debugbar.. I do use that when calling Ajax from our php app, but not when it's a standalone js app. Does this need anymore changes?. what do you mean with 'yes'? What changes does it need.. Thanks!. So are you saying thatfalseis a better default? . @fideloper Thoughts? I think you looked into this, right? . So do we need the option, or just use false always?. You can dump them directly, see http://phpdebugbar.com/docs/rendering.html#rendering. Can you submit a PR?. This is good, but difficult to maintain with future updates.. Shouldn't the id be the same when requested on the same request each time? Not really sure, otherwise we could just use uniqid? . I think we could replace this with a random function indeed, with fallback to uniqid instead of microtime. Or an actual uuid, but that adds extra requirements.. I guess this is okay, only the 3rd step seems very overkill. Do we need all that, can't we just do serialize + uniqid? . Merged if for now, will see if I simplify it a bit when I have time. . Looks nice, thanks!. Alright, not sure if you use Laravel, but I've updated laravel-debugbar in the dev (3.x@dev`) version to use this: https://github.com/barryvdh/laravel-debugbar/commit/e5257dc121cbd504928b4b5f0262b0b3e691bf42\nSeems to be working :) Had to add the inline rendering, but otherwise did work.\nI did have to add outline: 0; to the css for the pre.sf-dump, otherwise it had a blue bar. Rest looked fine :). This is personal preference. Fixed with #351. Thanks!. Why close? . You can so disable some vendor assets. See http://phpdebugbar.com/docs/rendering.html#managing-jquery-conflicts. Where does Composer not make sense?\nInstallation without Composer is not supported, due to dependencies that need to be available.. Done. Isn't that double? \\Assetic\\Asset\\AssetCollection[] an array of collections? typehint could be just array|\\Assetic\\Asset\\AssetCollection probably?. Fixed with https://github.com/maximebf/php-debugbar/commit/30e7d60937ee5f1320975ca9bc7bcdd44d500f07. Nope, but I've just upgraded to v3.. Is this for both 1.x and 2.x?. Is this perhaps better fixed with #362. Tagged v1.15.0. Is there a pull request?. Sure. Doesn't this fail the interface implementation?. Perhaps check https://github.com/lekoala/silverstripe-debugbar for more information about how to integrate with SilverStripe.. Did you raise an issue there?. This will probably make it a lot slower to render. And I don't know if any styling etc would be able to leak through to the webpage.\nIt should be optional at least.. Going to pass on this for now.. Thanks!. Do the queries still get logged this way?. StandardDebugbar is preconfigured with some collectors, but you can easily do that yourself.. So I would need a separate branch for 1.15 and then merge this?. yes\n. Ah yes I just copied them from the interface (which has a few tiny mistakes also)\n. Should this just check isClosed() and not isMinimized()?\n. https://github.com/maximebf/php-debugbar/commit/c2455dae3223ec2382f5eaa32e47b9a988e129f0\n. Yes please be as permissive as possible. If 2.6 is possible, use that as minimum. Also future symfony versions for 3.x should be compatible.\n. Cs: space between if and parenthese.\n. Why? Should have same effect right?\n. I disagree, I think this is more readable and more explicitly states the purpose of the code.\n. And while https://github.com/symfony/symfony/blob/master/src/Symfony/Component/Debug/Exception/FatalThrowableError.php accepts Throwable, it seems to be explicitly aimed at the Error class.\n. Oh oops, that was the entire point indeed :p\n. Is this safe to call, hostname isn't always accessible right? . ",
    "mnapoli": "Amazing, IMO that was the only drawback versus solutions like FirePHP or ChromePHP. I'll try it soon!\n. ",
    "petercoles": "+1 This will be really helpful. Thanks to Barry for suggesting it and Maxime for accepting it.\n. ",
    "kztime": "Thanks! ;)\n. ",
    "sineld": "I think xx.xxx ms should do best.\n. Thanks for the quick patch. Looks better now.\n. ",
    "simpan": "Thank you very much :)\n. ",
    "JonoB": "Is there a reason that the params are enclosed with < and > instead of ' or \" ?\n. That would be awesome, and much preferred than using <>\n. ",
    "thallisphp": "+1\n. ",
    "JohnMaguire": "Seems like laravel-debugbar sends Laravel view data to DebugBar, and DebugBar is throwing this exception. Might be worth silently failing or something?\n. The server I'm running on seems to be running the PHP 5.3 package from the Ubuntu repositories.\njohn@stage [09:06:37] [~]                                                                              \n-> % php -v\nPHP 5.3.10-1ubuntu3.8 with Suhosin-Patch (cli) (built: Sep  4 2013 20:00:51) \nCopyright (c) 1997-2012 The PHP Group\nZend Engine v2.3.0, Copyright (c) 1998-2012 Zend Technologies\n    with Suhosin v0.9.33, Copyright (c) 2007-2012, by SektionEins GmbH\nI'm not printing a debug message, nor am I saving to the database, I am simply passing along the retrieved info to the view...\n``` php\nclass DashboardController extends BaseController {\n        /*\n         * Show dashboard home.\n         /\n        public function showHome()\n        {\n                // Get user's voicemails\n                $voicemailMessages = $this->user->voicemails()->orderBy('origtime', 'desc')->get();\n            // Get user's text messages\n            $smsMessages = $this->user->texts()->orderBy('created_at', 'desc')->get();\n\n            // Get calls by user id\n            $allCalls = $this->user->calls()->orderBy('calldate', 'desc')->get();\n\n            // Show the view with our DID results\n            return View::make('dashboard.home', array(\n                    'voicemailMessages' => $voicemailMessages,\n                    'smsMessages'       => $smsMessages,\n                    'allCalls'          => $allCalls,\n            ));\n    }\n\n}\n...\n```\n. Oof, didn't mean to close the issue. I will try out your patch tomorrow to see if it works, and hopefully @maximebf  can merge the pull request.\nThanks a ton for your help @barryvdh.\n. As expected, it worked. Thanks @barryvdh. Hope this gets merged in soon.\n. Apologies, thought this had been closed by the merge. It indeed does fix this issue, thank you. \n. ",
    "glensc": "how does this exactly work?\nwhat invokes population of src/DebugBar/Resources/vendor during composer install?\n. so .bowerrc and bower.json can be added to export-ignore in .gitattributes?\n. ",
    "GrahamCampbell": "Thanks!\n. Cam we have a 1.9.1 tag after this is merged please?\n. Thanks!\n. I think the next version of jquery is removing the source map from the dist stuff anyway?\n. I think in both 2.1 and 1.11. I read it in a jquery blog post.\n. Hmm. It seems the test are failing. I'll submit a new pull against the current state.\n. Oops. Give me a min...\n. That test it passing now.\n. Is this good now?\n. Can we have a 1.9.2 tag for this?\n. Thanks.\n. Also, we should ensure it can't garbage collect more than once in one request, or at least per instance of the class.\n. Like it.\n. Can you tag another release for this?\n. This is where traits would have been useful, but I assume we are targeting php 5.3 still?\n. Any news on this going in?\n. Why would someone want a readme and docs to be installed onto their production server?\n. If you want the docs, you can run composer with the --perfer-source option. Doing this will make composer clone the repo rather than downloading the dist version. This will include all files.\n. We're using that flag here to make sure we don't bust github's api rate limits too: https://github.com/maximebf/php-debugbar/blob/master/.travis.yml#L12.\n. Also, are we ready for a 1.9.15 release now, or is there anything else that needs doing?\n. Sorry, I thought it was an old stale branch that was merged into the master already. Maybe dev is a bad name for it. Maybe it should be named 2.0?\n. :+1:\n. Nice. :+1:\n. Yey. Green! :)\n. No, it's a bit of a waste of time now. Composer is pretty stable, and travis updates it every month or 2, so there's no real need to update it on every build.\n. There's no rush, I'm just interested. Thanks.\n. Sounds great.\n. Oh noes - I was about to send a pull to update font awesome. :(\n. It's pretty low priority, and doesn't affect me anyway. I manage all the css/js myself in my projects.\n. Also, related: https://github.com/FortAwesome/Font-Awesome/issues/4880.\n. One min - I've screwed this up. See my comment on that issue I linked.\n. Yeh - already working on it, and sent now - #173.\n. I don't think it does if it's commented out. Let me google this...\n. Meh - I've removed it anyway.\n. If we do use this, I think we need to wait until symfony 2.6.0 has been tagged.\n. Looks cool. :+1:\n. We shouldn't be assuming you have the mbstring extension anyway. This is a bug.\n. @barryvdh That's my point. If we need the function, we absolutely must require the extension. That's the \"bug\" here.\n. Or rather, check the function exists, which would allow the solution you suggested.\n. :beers: great\n. Yeh, it would definitely be the best idea to just import it.\n. https://github.com/maximebf/php-debugbar/pull/240\n. This absolutely needs squashing to one commit!\n. Did you forget to force push?\n. Now there are even more commits.\n. This shoulodn't be needed?\n. Just transform it like laravel does.\n. Uses the symfony stuff.\n. That's why it's exception handler has kept the Exception typehint.\n. https://github.com/laravel/framework/blob/5.2/src/Illuminate/View/Engines/PhpEngine.php#L41-L47\n. > so that would need to happen in application implementing debugbar\nyes\n. > I've had a look into this and it seems that due to the nested exceptions in getPrevious() this is a bit harder to implement.\nThis was already fixed in symfony. I fixed it myself actually. What version are you using?\n. You know you don't need to close the PR?\n. @barryvdh I don't agree. Throwables don't have to extend Error, and at no point does symfony ever typehint Error, for that exact reason.\n. Something can be throwable, but not be an error or an exception.\n. I was thinking about forwards compatibility. Currently, PHP has hacked this to bits so that we'd end up with:\nFatal error: Class Foo cannot implement interface Throwable, extend Exception or Error instead\n. Surely, the phpdoc is now incorrect?. string|null?\n. missing space before the comment body\n. and here\n. there should only be 1 blank line here, not two\n. ?\n. should be int\n. shouldn't be this extra line here.\n. Better to say not instance of exception\n. ?\n. ?\n. should be sorted alphabetically \n. !$previous instanceof Exception would be more correct\n. probs best to keep the typehint\n. no need for the duel phpdoc\n. ",
    "ghost": "My second commits, it sended also. I wanted to send second pull request. For this commit eae876a.\n. I forgot $here parameter...\nMaybe add ob_start(); in register_render function to prevent exception.\n. Do.\n(Sorry I commit an old version, but it is corrected).\n. Thank you too for your job with debugbar. It's a good tool.\nDo.\n(J'ai un peu de mal \u00e0 utiliser git, mais normalement ce commit est le bon si j'ai correctement supprim\u00e9 les commits pr\u00e9c\u00e9dents).\n. But it's right too, for the contrary : \"Warning, I don't have message!\"\nMaybe set null in php code for hide this badge in some collector. In some collectors is useful to have 0.\n. For exceptions the badge don't show when 0.\nI defend just Twig collector is usefull to have 0.\n. Why do you want to hide the badge ?\n0 is value like 1, 2, 3.\n. Total use is useless because when I call a new class, I increase the size throughout my script.\nI have 5Mo whereas my query uses 20 Ko. example : I have 0 if my query uses less than 200 Ko. If I select 1'000 rows I've 512 KB.\nActually, the values don't match to real usage of query.\n. What is the rules that I didn't respect ? PSR1 convention ?\n. jQuery's $(window).height() is sensitive to doctype. Try <!doctype html> ?\nThe jQuery 1.8.1 release notes say\nDon\u2019t use Quirks mode! jQuery has never supported Quirks mode and we do not perform any testing in Quirks. This can affect values like $(\"window\").height(), and the jQuery 1.8 Quirks mode results did change in order to support some modern browser features. The majority of problem cases we\u2019ve seen are from developers that wanted to be in Standards mode but had an invalid doctype or extraneous markup before their tag. When in doubt, use the simple and short <!doctype html>.\nFor example, with jQuery 1.8.2 and Firefox 16, I get a valid $(window).height() with doctype html, but height 0 with doctype html5. In Chromium 20, both work. (The W3C HTML5 spec does say to use doctype html, not html5.)\nhttp://stackoverflow.com/a/13259134\n. ",
    "coryjamesfisher": "I have put together a script illustrating the way that I am using the debug bar that the failure happens in. (I wrap it with a logger singleton which a log manager writes to several different types of loggers one being the debugbar)\nThank you for the quick response.\n- Cory Fisher\n```\n<?php\nrequire_once DIR . '/../app/vendor/autoload.php';\nsession_start();\nclass LogHolder {\n  protected $debugBar;\npublic function __construct()\n  {\n    $this->debugBar = new \\DebugBar\\StandardDebugBar();\n  }\npublic function getDebugBar()\n  {\n    return $this->debugBar;\n  }\npublic static function getInstance() {\n     static $logger = null;\n if ($logger === null) {\n   $logger = new \\LogHolder();\n }\n\n return $logger;\n\n}\n}\necho 'prior to session';\nprint_r($_SESSION['stdObject']);\n$stdObject = new \\StdClass();\n$stdObject->firstName = 'test';\n$stdObject->lastName = 'tester';\n$_SESSION['stdObject'] = $stdObject;\n$debugBar = \\LogHolder::getInstance()->getDebugBar();\n?>\n\n<?=$debugBar->getJavascriptRenderer()->renderHead();?>\n\n\n<?print_r($_SESSION['stdObject']);?>\n\nStuff\n<?=$debugBar->getJavascriptRenderer()->render();?>\n\n<?print_r($_SESSION['stdObject']);?>\n\n\n\n```\n. Well I have a clue ... If I turn off register globals through .htaccess the problem goes away... The only issue is that we are running a lot of legacy code which requires register globals. \nHere is the .htaccess directive you can use to turn it on without mucking with ur php ini:\nphp_flag register_globals on\n. Since we do not require the debugbar on the legacy portions of the site we have worked around this with the .htaccess setting. I agree you shouldn't modify the code to account for such an old version of PHP. It's just unfortunate that many companies are tied to using these settings due to massive use of register globals. Closing this ticket.\n. ",
    "hexxykicchi": "@dhardtke, If you need to support Propel 2 in your project, you sorta could, if you grab propel's underlying PDO connection and use debugbar's PDO data collector:\n$serviceContainer = \\Propel\\Runtime\\Propel::getServiceContainer();\n$connection = $serviceContainer->getWriteConnection(\"loyasys\");\n$pdo = new DebugBar\\DataCollector\\PDO\\TraceablePDO($connection->getWrappedConnection());\n$debugbar->addCollector(new DebugBar\\DataCollector\\PDO\\PDOCollector($pdo));\nI haven't seen the propel datacollector in action so I don't know if it's any different, but this does the job for me.\n. ",
    "Anahkiasen": "I also think it should just be hidden for collectors where 0 means \"Nothing to see here\" like Mails, SQL, etc.\n. :+1: for Kint, uses it myself on all my projects and it has a really nice output for variables and objects.\n. Event the plain text version is far better than a var_dump, I use Kint to debug things in the CLI and it does wonders.\n. Yes please, kind of a pain to read long queries at the moment.\n. :+1: \n. What curl method?\n. Correct, this is a duplicate, sorry\n. That looks pretty nice, would love to see that in\n. Having the same issue here\n. ",
    "eimajenthat": "Is there some kind of event handler for caught exceptions?  I know there's set_exception_handler, but that only seems to work on uncaught exceptions (which makes a certain kind of sense, I'll admit).\n. You might be right about the impossibility.\nRegarding my reasons for wanting to see them, I am using a routing framework called Klein.php, which throws, and then catches, exceptions for certain events, like when we stop processing a route to redirect to another one, or when there is a 404 error.  I suppose a stack trace should reveal that data as well, now that I think about it.\nI was not proposing this as a possible feature in DebugBar, so much as something that might be implemented by a developer like myself in my project, to relay said data to DebugBar.\nOn the other hand, being able to send all Exceptions to DebugBar by adding collection code in one single place, much like you wrap the PDO class in a wrapper so you don't have replace every database call, would still be handy.  So you could log exceptions without adding the collector code to every single one (in your own code base).  But as you both mentioned, that's not really possible with exceptions.  You can't wrap the Exception classes because there are an unspecified number of exception subclasses, and because you don't really have control of the way they are instantiated, other than the RunKit approach, which is too complex to be worthwhile.\nSo, yeah, not possible without a seriously dirty hack.  Not really surprised, perhaps a little disappointed, but not surprised.\n. ",
    "ilumos": "What's the latest on this?\nI've just switched to the PDO storage driver, as using headers is getting too large for Nginx, and the file driver is creating so many JSON files that Vagrant is beginning to struggle.\nIn any case, loving the debugbar.. ",
    "joshuajabbour": "Yes, there's two ways to fix this.\n1. Adding $(window).trigger('resize'); to Debugbar.restore works, but will have the side effect of triggering other javascript on the page bound to the window resize event. This probably won't be an issue, since the window size hasn't actually changed, but who knows.\n2. Moving the resize handler in Debugbar.registerResizeHandler out of the register method, thereby making it callable directly from Debugbar.restore and not requiring a fake resize to be triggered.\n. Doing it in PHP was the path I originally went down, but it was three times as many LOC and still requires handling the new data fields in the front-end formatter.\nPlus, it required changes to the laravel-debugbar too.\n\nOn Mar 25, 2014, at 1:04, \"Barry vd. Heuvel\" notifications@github.com wrote:\nLooks like a good idea :) Wouldn;t it be easier to check in php (by creating a hash of the query+params) and adding the duplicate count + property for each statement?\n\u2014\nReply to this email directly or view it on GitHub.\n. Also, maybe I'm not understanding how the front-end works, but it seems to me additional data (queries) could be appended later. Is that the reason for the whole this.bindAttr('data') logic? Seeing that is what made me decide to handle this in Javascript (also, it was just easier). Because if the queries come in separate calls, the PHP method won't necessarily have access to them all at once.\n. Anyway, I'd happily rewrite the core logic in PHP if necessary. Though it'll take a few days as I threw away my previous work. Just let me know...\n. Okay, sounds good.\n\nWould you be interested in adding this feature (highlighting duplicate queries)? And if so, do you have a preference if it's done client-side or server-side? It's a bit easier client-side, otherwise any inherited database collectors would need to specifically add a handler to collect(). Unless there's a way to register a post-processor that I'm missing.\n. No problem, discussion is good. :)\n. ",
    "federico77": "I'm sorry that I can't be so helpful with this subject. Sadly I have been modifying the Jquery stuff I wrote so much these days that I can barely remember the code I wrote at that time. The most I can say is that when I rewrote the code so that the ajax calls were always executed through binded events in the document ready function the debugbar started logging them properly again.\nNever disabled 'global' but I was listening to ajaxComplete events (and I still do) for application specific needs if these infos might help.\nThanks for the great tool!!\n. ",
    "hjspeerstra": "Possible cause of not showing all the ajax request could be that your ajax request hasn't got the content-type: application/json but text/html or something else. This can be caused because a character is placed before the json output. Hereby the response is not application/json anymore.\ne.g. when doing Response::json(array()) there can be a character before this response. In my case there was a tab before the php open tag <?php in a model. But it could be anything of course.\n. ",
    "stayallive": "I had my vendors disabled in laravel-debugbar, that caused the problem.\nThanks for the quick response and actions @maximebf & @barryvdh!\n. ",
    "dmitry-ivanov": "@barryvdh, yes it helps.\nps: I'm using laravel-debugbar, so I've made changes in public\\packages\\barryvdh\\laravel-debugbar\\widgets.js - and it works fine.\ncan you plz tell when it would be in master?\n. I understand, but we have situation similar to #107, include_vendors is false for us, to prevent double jquery loading.\n. Not conflict, but it can cause some hidden problems for project in future, especially if these jquerys would have different versions...\n. @maximebf - can you plz merge @barryvdh 's fix in dev-master plz?\n. oups, already merged, sorry and thanks :)\n. Got it, thanks!\n. :cool: :) And thanks again! :)\n. ",
    "geekwright": "This may be related to an issue I have been investigating.\nAs of version 1.9.9, I experienced a frustrating lag of several seconds per page load. I have traced this to the processing of one large array added with a ConfigCollector. The types in the array are mixed, some simple scalar values, some arrays, and some objects, so there is a lot of complexity possible.\nHighlighting that data is the source of the lag. The symptoms would be very sensitive to the browser machine resources. Using an old, slow or heavily loaded PC could easily result in a non-responsive page for several seconds.\nI've been able to resolve this by either removing the data, or turning off all the highlighting by removing the highlight.js entry from the assets. Neither is ideal.\nIt would be nice if there was a way to turn off the highlight for a tab, but I have not found an obvious way to do that yet.\n. The patch does push the lag to the point of display, so it no longer slows down the page load.\nIt does introduce an additional issue, as a slow down occurs each time you reveal the item. \n. Just for the record, I am using the XOOPS 2.6.0 integration. The problematic collection is actually the data assigned through the Smarty templates. There are a few objects that routinely get assigned, and those seem to be the biggest time suck. But, even without those in the data, there is still a noticeable lag with highlight.js available, just not as bad.\n. An interesting thing I have noticed is that the highlighting seems to break down in the large sections that cause troubles. So it could be that a new version of highlight.js could change this problem completely. I'm still trying to zero in on what the base trigger is.\nWith that in mind, while I think being able to turn it off by collector would be a good idea, just making an easy turn off the highlighting option probably makes more sense. Just removing the highlight script works, but an official option would feel more comfortable long term.\nWith your patch applied, the only real issue I have is that period of uncertainty after a click. Nothing happens. Something as simple as a pointer change would let me know something was happening. It is more of a UI issue than the actual delay being unacceptable. A wait indication that would kick in if the operation took longer than a few milliseconds would solve that.\n. There are several ways provided to deal with the very common circumstance of the vendor directory being outside of the web:\nhttp://phpdebugbar.com/docs/rendering.html#assets\nWhat isn't covered with the available options?\n. I'll just chime in here.  I really appreciate the current specificity.\nI remember earlier days when there was lots of bleed over from the application styles, making for unpredictable behaviors. Adding the full reset starts everything from a nice consistent point and has eliminated the interference. Loosening that selector would increase the chance that something outside could outweigh it.\nI'd would much rather have to add a little bit to custom selectors than to have to deal with less predictability.\n. I didn't analyze the impact of individual rules, but 1.10.4 is the most visually consistent yet.\n. ",
    "asiral": "In case it's useful for anyone else, I am using the laravel-debugbar which has the php-debugbar as a dependency. Reverting to 1.5.0 for the larave-debugbar fixed the problem for me.\n. ",
    "shuogawa": "For now, I will avoid it just rename js.\n. ",
    "niteshn": "What does \"subsequent ajax calls\" mean exactly ? After page load and onload ajax calls, if I click somewhere and an ajax call happens, then it should probably be selected automatically. \nAnything is fine actually. Important thing being that real page should be visible by default on page load. thanks.\n. ",
    "tomzx": ":+1: for the checkbox. If it is checked, it stays on the currently selected item in the select, otherwise it shows up the latest received dataset.\n. If I'm not mistaken, the duplicate queries will be highlighted in a different color in the list, so that you can easily spot them.\nIt is however true that a count could be useful, especially if it becomes possible to sort the statements by this duplicate count.. ",
    "vdh": "Has this been fixed yet? This is a really frustrating problem on pages that have constant automatic AJAX requests.\n. ",
    "bugyak": "Has this been fixed yet?. ",
    "jdorn": "This bug was bothering me, so I made a quick and dirty solution that overrides the js method addDataSet:\n```html\n\n// Copied from the source with a single line commented out\nPhpDebugBar.DebugBar.prototype.addDataSet = function(data, id, suffix) {\n    var label = this.datesetTitleFormater.format(id, data, suffix);\n    id = id || (getObjectSize(this.datasets) + 1);\n    this.datasets[id] = data;</p>\n<pre><code>this.$datasets.append($('&lt;option value=\"' + id + '\"&gt;' + label + '&lt;/option&gt;'));\nif (this.$datasets.children().length &gt; 1) {\n    this.$datasets.show();\n}\n\n// The below line was commented out to prevent automatic switching to ajax requests\n// this.showDataSet(id);\nreturn id;\n</code></pre>\n<p>};\n\n``\nIf you place the above script below your$renderer->render()` output, it will only take effect after the initial page load.  So, if you have stacked requests from a redirect it will show the latest one, but then it won't switch automatically anymore for future ajax requests.. ",
    "FrankPeters": "Yes I am. I'm using a singleton class for all queries (the DB::getInstance() in the TraceablePDO code in my config.php). All queries go through that singleton.\n. Queries are indeed instantiated as DB::getInstance()->prepare().\nBut the strange thing is; the tracing works beautifully for all queries run on the master page. Only the AJAX requests aren't traced.\n. I've tried your solution, but couldn't get it to work. I don't want to bother you with it any further :-)\n. ",
    "mix5003": "i found this problem too. i guess it because you use die(\"\") then debugbar not call collect() and some data not saved. \nyou must call $debugbar->collect(); before  use die()\nor use try this one i dont' sure it can use in every case\nphp\nregister_shutdown_function (function($debugbar){\n        if($debugbar){\n            $debugbar->collect();\n        }\n    },$debugbar);\nor go to DebugBar.php and add this code\nphp\npublic function __destruct()\n    {\n        $this->collect();\n    }\nsorry for my bad english\n. ",
    "rdonelson": "Thanks!\n. ",
    "adaniello": "I had same problem and i solved with include_vendors option: if not set to 'css', no cssVendors ('vendor/font-awesome/css/font-awesome.min.css' and 'vendor/highlightjs/styles/github.css') are included.\nI hope this can help you.\n. ",
    "paulofreitas": "Oh I see, that solves the problem. Thank you @barryvdh and @adaniello for pointing this out, was very helpful! :)\nMy apologies for not having found it before reporting here. I'll be more careful next time.\n. ",
    "mnpenner": "In the meantime, I've moved both renderHead() and render() just above </body>. This hasn't seemed to cause any problems yet.\n. 2nded. This looks bad with my sticky footer. I'm not using a padding on my <body> though, I'm using a negative bottom margin plus a \"push\" element. Something like this.\nJust having an option to disable the bottom padding, at least when in \"little square mode\", would be nice.\n. Still doesn't look good in little-square-mode. Could you remove the padding-bottom altogether when the bar is collapsed to just the square? That way it will float over top of our footers, but since it's so small, it's not a big deal -- better than creating a big white gap below the footer.\n. @codewizz If I can figure out how to install your fork instead of maximebf's, I'd be happy to try it out. I know it's a bit off-topic, but this won't install:\njson\n\"repositories\": [\n    {\n        \"type\": \"vcs\",\n        \"url\": \"https://github.com/codewizz/php-debugbar\"\n    }\n],\n\"require\": {\n    \"codewizz/php-debugbar\": \"dev-master#a238151cabccffe091e9902978d37688d05d9b05\",\n. Ahah! I forgot I had copied the resources out of vendor/ into my public dir so I could serve them up. Had to manually update them anyway :-) Both versions work fine actually. The DebugBar covers up my footer now, but that's fine for dev; I think it's better than adding a scrollbar to pages that didn't otherwise have them.\n. @codewizz Sorry, it took me some time to get back to this. I just tried with the latest Resources from your repo.\nNow that I've played around with it a bit more, both these versions are bad actually. They don't cause a scrollbar to appear when the bar is minified, which is good, but when the bar is expanded, still no scrollbar appears which means the bar covers half my page and there's no way for me to uncover it without closing the bar because I can't scroll.\nWhich is actually kind of odd, because looking at your examples, I prefer how your \"margin\" one behaves. The scrollbar appears when the bar is opened. I don't see a \"margin\" (or padding) being applied to my <body> element. Is it conditional on something?\n. @codewizz Uhh....it's proprietary and massive. I've tried to put together an example with our CSS, but I couldn't get the bar to show up and I don't want to spend too much time debugging it. If you can get the bar to display you might be able to see the problem.\n. @codewizz Hrm.. that does seem to be behaving correctly. I probably messed something up on my end. Maybe I have some conflicting JavaScript. Anyway, not to worry; it doesn't look like a problem with DebugBar. I'm happy with this if you guys want to push that PR through.\n. ",
    "jaketoolson": "@maximebf -- I didn't realize I could disable the vendors -- I'm using @barryvdh Laravel implementation so I'll see how to do it  But Thank you both.\n. ",
    "jdewaen": "It would be much appreciated by me as well :)\n. Thanks!\n. ",
    "delta1186": "Trying to get angular to work with @connyay ng-phpdebugbar\nhttps://github.com/connyay/ng-phpdebugbar/issues/4\n. That might have been the issue.  I update the angular route to point to /api/employees which then go though laravel.  I did get an updated debugbar bar.  So it is working now.  Thanks again.\n. No it is working without ng-phpdebugbar from what I can tell. Guess I'll know more when we get the api built out more. Thanks again. I closed the issue on the referenced repo. \n. ",
    "Gawdl3y": "Nevermind, it appears someone has already done this (was going to add commits to update the vendor files); the version change is still nice to see, though, as unnecessary as it is.\n. ",
    "richbradshaw": "Sorry - only just saw your email back from October :(\nCan this not be read using JS - isn't it purely a rendering issue rather than a config/set up issue?\n. I'll look - our issue is that we don't have the debug bar on live, only on dev, so there isn't an easy way for me to just give you a URL, we'd need to build and push a new version somewhere. (I'll try and get that done at some point!)\nIn terms of what actually happens,  gets an inline style with padding-bottom: 26px; added to it, which has higher specificity than the stylesheet - if whatever adds that was able to detect if  already had padding and did nothing it it did, that would fix for me at least!\nTo make this happen, just have a CSS rule like\nbody {\n    padding-bottom:1000px;\n}\nand includ the debug bar - it will overwrite it.\n. Yeah, I agree.\nIn that case it's using margin - maybe I should just switch to that.\nI'd assume that what I'm saying is true though - if there is existing padding, either don't add the inline style, or, do, but add it on (e.g. if existing padding-bottom = 100, then make it 126)\nTo be honest, we've lived with this for over a year now, and as it's only a problem on dev, we don't mind much - it looks OK on live.\n. Yeah - that looks sensible to me - that would fix our problem as far as I can tell.\n. ",
    "linaspasv": "Hello, is there any ETA for this fix to be applied to the debugbar codebase?\n. Thanks! It looks like to work better now but not perfectly. The only problem I see is when webpage has a footer set with an absolute position.\ncss\nfooter {\n    width: 100%;\n    height: 40px;\n    position: absolute;\n    bottom: 0;\n    left: 0;\n}\nIn this case when debugbar is being expanded then footer shrinks and finally hides under the debugbar panel. It looks like this happens because of an inline padding-bottom style on a body element. I did some more testing and it looks like the way to solve this is to replace padding-bottom with a margin-bottom style. I am not aware of other side effects doing this but it looks like to work perfectly for the case described above.\nLooking forward!\n. Here is a padding-bottom to margin-bottom replacement: #252\n. @mnpenner I have adjusted my PR to remove margin-bottom inline style from the body element (this also removes a scrollbar from the pages that didn't had them) once debug bar is minimized or closed. Could you test and let me know if this works for you? :-)\n. @barryvdh here are some working examples I just made as requested to see problem / solution in action. Both examples are identical except padding and margin.\nhttp://debugbar.padding.codewizz.com/ - this one is using the old padding-bottom inline style (just try to expand the debugbar, you will see the footer starts to shrink and finally hides under the debugbar panel)\nhttp://debugbar.margin.codewizz.com/ - this one is using the new margin-bottom inline style (at first it looks like the footer is being overlapped but you can scroll down and see all the web content like it should be displayed, also I have added margin-bottom style removal from body once debugbar is closed or minimized).\nI hope this helps!\n. @barryvdh did you have time to check PR #252 and test cases? Would it be possible to merge these changes to a debugbar codebase? Thanks.\n. @mnpenner do you have a working example that could show your problem, so I could take a quick look at? It's very strange as this should not happen: \"I don't see a \"margin\" (or padding) being applied to my  element\".\n. @mnpenner I copy pasted your example to my development server. It looks like to work as it should for me. Could you please clarify or am I missing something?\nDo you have any active JS scripts that could remove padding or margin from the <body> tag once page finished loading?\n. @mnpenner thanks! I am still waiting for @barryvdh response if #252 PR could be merged to the DebugBar codebase.\n. @theTrip73 would it be possible to see a demo that reproduces the problem you are experiencing? I am using php-debugbar a lot in my projects and haven't experienced the problem you have described yet.\n. @theTrip73 you are welcome. Happy debugging! :-)\n. Hello. Is there any chance these changes are going to a code base any time soon?\n. @xewl looks like phpdebugbar is not maintained / updated for some time now. Until this PR is merged or if it's ever merged you can use the following lines in composer to have this PR applied to the codebase.\n\"require-dev\": {\n        \"barryvdh/laravel-debugbar\": \"*\",\n        \"maximebf/debugbar\": \"dev-codewizz-dynamic-margin as 1.11.0\"\n    },\n    \"repositories\": [{\n        \"type\": \"git\",\n        \"url\": \"https://github.com/codewizz/php-debugbar\"\n    }],\nyou might need to set these too:\n\"minimum-stability\": \"dev\",\n   \"prefer-stable\": true\n. ",
    "trip-somers": "One of my less active projects just got this PR during a composer update. On pages where a scroll bar already appears, I now get a second scroll bar.\nI used Dev Tools to tweak the body element's style back and forth between padding-bottom and margin-bottom. When switching from the old padding-bottom to margin-bottom, the original scroll bar basically pops inside to make room for a second scrollbar that essentially buffers the main area by the height of the padding.\nIs anyone else seeing this behavior, or do I have to go find some weird style definition buried in my designer's SCSS?\n. I verified that my other projects were already using updated debug bars and not experiencing this effect. Then I was able to track it down to an 'overflow-x: hidden;' property on \"html, body\", so it's on me to figure out why the original designer added that overflow-x. (Fun. /eyeroll)\nThanks for offering to look into it a bit.\n. ",
    "discordier": "Failure is due to tests with deprecated calls of assertTag (merge #148 so I can rebase).\n. ",
    "junxy": "use cnd :+1: \n. ",
    "veloper": "\nCDN :+1:\nAlternative: Remove asset dependency on fontawesome.\n. \n",
    "gmsantos": "@barryvdh I was in compatibility mode. \nTurn compatibility mode off solved this issue, my bad.\n. ",
    "webmaster33": "Finally got help from author, and came up with this solution:\ntest.php:\n```\n<?php\n    include '/usr/local/bin/vendor/autoload.php';\nuse DebugBar\\StandardDebugBar;\nuse DebugBar\\JavascriptRenderer;\n$debugbar = new StandardDebugBar();\n$debugbarRenderer = $debugbar->getJavascriptRenderer();\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n?>\n\n\n        <?php echo $debugbarRenderer->renderHead() ?>\n    \n\n        ...\n        <?php echo $debugbarRenderer->render() ?>\n    \n\n```\nI also had to copy /usr/local/bin/vendor/ folder to my web root.\nNow it works.\nNOTE: Take out spaces from the html tags...\n. ",
    "simogeo": "Hi, I'd like to use php-debugbar for an old app which do not use composer ....\nI've tried to include class the way it is explained on the following page (http://www.codersgrid.com/2013/08/16/php-debug-bar-debugging-php-like-using-chromedev-tool/), but still I get a fatal error : \nPHP Fatal error:  Class 'DebugBar\\\\StandardDebugBar'\nIs there an easy way to include files ? thanks in advance\n. Indeed, thanks\n. Thanks for pointing this out. I'll have a look.\nBut actually having notice displaying in the webpage itself is not that bad.\nThanks again\n. ",
    "rhukster": "The call is invalid currently as it's using $this from a static method. I didn't actually intend for that to be part of the pull request, I just removed it from my fork as it was causing validation/testing errors.\nFrankly i'm not sure how to remove that commit form the pull request now. Any dieas?\n. I reverted the second commit, but it should be looked at as it won't work as-is. I've never used it so I'll leave it up to the pros :)\n. Looks like it should work fine and no more errors reported in PHPStorm. Thanks!\n. Perfect! It works fine with the:\npublic function __call($name, $arguments)\n{\n    return call_user_func_array(array($this->template, $name), $arguments);\n}\nin the TraceableTwigTemplate.php\nI guess the other __call should be added to TraceableTwigEnvironment to catch any missing functions there.  \nThis does bring up a consideration however,  should the pass-through methods that could be caught with the __call be removed from the Traceable classes?  For example:\n```\n    public function getTemplateName()\n    {\n        return $this->template->getTemplateName();\n    }\npublic function getEnvironment()\n{\n    return $this->template->getEnvironment();\n}\n\n```\nThese would be handled by the __call automatically and are really going to be a maintenance issue if something changes in the core Twig classes.  Slight performance implications, but very minor I would imagine (without benchmarking it).\n. Your right, there are a few issues\n1) TraceableTwigEnvironment extends Twig_Environment which already has these methods defined, so __call will not be used if these extra methods are removed from the Traceable version, the Twig_Environment methods will be found first.\n2) TraceableTwigTemplate implements Twig_TemplateInterface so removing those methods will cause a missing methods because of abstract class implementation error.\n3) Your correct about the method_exists() problem, but I think issue 1 and 2 precludes this scenario :)\nShould I submit a pull request for the __call() methods on the classes as-is though? As that is a legitimate solution for at least the 'macro' scenario, maybe others i've not found yet.\n. Sweet, thanks for your help and promptness!\n. Yes it's built into Grav itself. https://learn.getgrav.org/advanced/debugging#debug-bar\n. Cheers!\n. ",
    "harikt": "not relevant any more.\n. ",
    "NothingCtrl": "Yes, here is my code:\n\nI tested, if I used mysql prepared statements (not direct query), phpdebugbar could show me a number of rows, but it did not show the memory.\n\n. ",
    "dhiru027": "Hi, Thanks for reply.\nWe have first installed this debugger using composer and after that, we have moved the DebugBar folder from src folder(which is created after installing) to our project directory. Is this creating issue or something else?? \n. We have again installed the debugger using composer in same project directory. After installation, debugger directory is created as:\nDebugBar/vendor/composer/\nDebugBar/vendor/maximebf/\nDebugBar/vendor/psr/\nDebugBar/vendor/autoload.php\nNow, we have include autoload.php file in our test.php as given below:\nphp\n\n<prequire 'DebugBar/vendor/autoload.php';\nuse DebugBar\\StandardDebugBar;\n$debugbar = new StandardDebugBar();\n$debugbarRenderer = $debugbar->getJavascriptRenderer();\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n?>\n\n\n        <?php echo $debugbarRenderer->renderHead() ?>\n    \n\n        ...\n        <?php echo $debugbarRenderer->render() ?>\n    \n\nThis time no error is thrown but there is no debugbar shown on bottom of browser.\nCan you please, provide us step by step process to run debugbar? \n. Thanks for your solution, DebugBar is running properly and we can see the bar at the bottom of page.\nNow, we have put some db query on this page and execute them but DebugBar is nothing showing us about query status like no. of records fetch, time etc.\n. There are some class files are imported in StandardDebugBar.php but no file for DB. And there are many class files under DataCollector folder.\nWhat file we will include to display db query status?\n. ",
    "andrewshell": "It seems the A record is wrong. You're pointing to 204.232.175.78 while in Tips for configuring an A record with your DNS provider you should be pointing to 192.30.252.153 and 192.30.252.154\n. ",
    "anlutro": "FontAwesome is at 4.2, your latest stable version uses 4.1, I wouldn't consider using dev-master.\n. ",
    "YagoQuinoy": "It works if you import external macros file in your twig file but if macro file is called from an extended one the solution proposed in https://github.com/maximebf/php-debugbar/commit/b589604b562d8e1bcb26934bec10bbc5c3ecfe48 fails by the reasons exposed above.\nThank for your answer Barry.\n. ",
    "spotman": "@maximebf @barryvdh This is a feature I need very much. Maybe memory_get_peak_usage(true) can be used instead or in pair with memory_get_usage(true)? This can visualize memory usage spikes during operation. . Any news about this? The best way to fix it quickly is to calculate inline styles/scripts hashes on-the-fly and implement getScriptHashes() / getStylesHashes methods which will return arrays of strings with hashes for CSP. The other way is to accept two nonces (for scripts and for styles) and add them to script/style tags during render.\nAnyway, this issue is on my priority list and I may create a PR.. :+1: for merging that! Very useful feature.. ",
    "kardagan": "Not for me an other coworker. Nothing explain this and it's after some days of using that we discover this.\n. i'm don't really like fa-expand and fa-compress (i've diplay both for the screenshoot)\n\nmaybe the chevron :\n\n. i've change the icons\n. i've squash the commit (first time i do it, so tell me if there is a prob)\n. i did have change the postion of the button like you've ask.\nbut i didn't find hover on the other button.\nfor the base64 encoded image tel me if you want t obligatory or not.\n. i've made the change\n. ",
    "OzanKurt": "I tried everything I could find in internet and also the thing you said. :cry: I am so sorry because it doesn't work. \n- An additional question: How can I make it log queries?\n  I am using Eloquent. and here is my code:\n```\nrequire('includes/config.php');\nrequire('includes/dbtables.php');\nrequire 'vendor/autoload.php';\nuse DebugBar\\StandardDebugBar;\nuse Illuminate\\Database\\Capsule\\Manager as Capsule;\n$capsule = new Capsule;\n$capsule->addConnection([\n    'driver'    => 'mysql',\n    'host'      => $database['host'],\n    'database'  => $database['databasename'],\n    'username'  => $database['user'],\n    'password'  => $database['userpw'],\n    'charset'   => 'utf8',\n    'collation' => 'utf8_unicode_ci',\n    'prefix'    => $database['tableprefix'],\n]);\nuse Illuminate\\Events\\Dispatcher;\nuse Illuminate\\Container\\Container;\n$capsule->setEventDispatcher(new Dispatcher(new Container));\n$capsule->setAsGlobal();\n$capsule->bootEloquent();\n$debugbar = new StandardDebugBar();\n$debugbarRenderer = $debugbar->getJavascriptRenderer();\n$pdoRead  = new DebugBar\\DataCollector\\PDO\\TraceablePDO(Capsule::connection()->getPdo());\n$pdoWrite = new DebugBar\\DataCollector\\PDO\\TraceablePDO(Capsule::connection()->getPdo());\n$pdoCollector = new DebugBar\\DataCollector\\PDO\\PDOCollector();\n$pdoCollector->addConnection($pdoRead, 'read-db');\n$pdoCollector->addConnection($pdoWrite, 'write-db');\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n```\nThis doesn't work for query logging. :sob: \n. ",
    "hannesvdvreken": "On central readme or also in documentation? I'll have a look later this evening.\n. Going to close this for now.\n. ",
    "ChrisWesterfield": "what is the current status on this?\n. ",
    "B0bbyD0llar": "I have tested this profiler and it is a very good extension. Can anyone implement this? Unfortunately, my skills are not enough for it.\n. ",
    "tonglil": "@maximebf sorry for the late response, just got the chance to work on this now.\nI think we may be confused? I mean the search after the page has loaded.\nI believe the code you pointed me to is for when the debugbar is searching through the filesystem to look for files.\n. Actually I got it :)\n. What can I do to get this feature into the tool?\n. So with this change, it defaults to caseless unless a case specified.\nFilename: TestClass.php\nDoing searches...\nBefore:\n- TestClass => found\n// Too lazy to write (all of the) caps or don't know what is cap'd because file is badly named\n- Testclass => not found\n- testclass => not found\nAfter:\n- TestClass => found\n// Too lazy to write (all of the) caps or don't know what is cap'd because file is badly named\n- Testclass => found\n- testclass => found\nThere are some other situations where you want to see if a specific file was called but you don't remember the filepath or etc (I don't have a specific example at the moment).\n. ",
    "jbh": "Well, that just creates another instance of debug bar, so it won't work either. I did find a way of doing it by creating a container class for the bar so that I can use it anywhere after initialization.\nHowever, now it throws javascript errors due to syntax highlighting apparently. It seems to be a bit buggy. It's saying that the code is undefined, even though I see it being passed. Has to do with this function:\n``` javascript\n// vendor/maximebf/debugbar/src/DebugBar/Resources/widgets.js\n/\n * Highlights a block of code\n \n * @param  {String} code\n * @param  {String} lang\n * @return {String}\n /\nvar highlight = PhpDebugBar.Widgets.highlight = function(code, lang) {\n    if (typeof(code) === 'string') {\n        if (typeof(hljs) === 'undefined') {\n            return htmlize(code);\n        }\n        if (lang) {\n            return hljs.highlight(lang, code).value;\n        }\n        return hljs.highlightAuto(code).value;\n    }\nif (typeof(hljs) === 'object') {\n    code.each(function(i, e) { hljs.highlightBlock(e); });\n}\nreturn code;\n\n};\n```\n. ",
    "jamesxv7": "Thanks a lot @barryvdh for providing light to solve my problem. The demo app was pretty clear:\nhttps://github.com/maximebf/php-debugbar/blob/master/demo/bootstrap.php#L11-L13\n. ",
    "darkweb2015": "Hi Barry,\nThere are no 404s on the assets at all.  In chrome, I am able to click on each asset and view its contents.\n. When I manually add the following code just above the line that renders the bar itself, the debugbar shows up and the javascript error is gone:\n```\n\n    var phpdebugbar = new PhpDebugBar.DebugBar();\n    phpdebugbar.createTab(\"messages\", new PhpDebugBar.Widgets.MessagesWidget());\n    phpdebugbar.createTab(\"request\", new PhpDebugBar.Widgets.VariableListWidget());\n    phpdebugbar.createIndicator(\"time\", \"time\", \"Request Duration\");\n    phpdebugbar.createTab(\"timeline\", new PhpDebugBar.Widgets.TimelineWidget());\n    phpdebugbar.createIndicator(\"memory\", \"cogs\", \"Memory Usage\");\n    phpdebugbar.createTab(\"exceptions\", new PhpDebugBar.Widgets.ExceptionsWidget());\n    //phpdebugbar.createTab(\"database\", new PhpDebugBar.Widgets.SQLQueriesWidget());</p>\n<pre><code>phpdebugbar.setDataMap({\n    \"messages\": [\"messages.messages\", []],\n    \"messages:badge\": [\"messages.count\", null],\n    \"request\": [\"request\", {}],\n    \"time\": [\"time.duration_str\", '0ms'],\n    \"timeline\": [\"time\", {}],\n    \"memory\": [\"memory.peak_usage_str\", '0B'],\n    \"exceptions\": [\"exceptions.exceptions\", []],\n    \"exceptions:badge\": [\"exceptions.count\", null]\n    //\"database\": [\"pdo\", []],\n    //\"database:badge\": [\"pdo.nb_statements\", 0]\n});\n\nphpdebugbar.restoreState();\n</code></pre>\n<p>\n```\n. ",
    "antoligy": "LGTM\n. ",
    "jenolan": "So both messages combined .. give that a go?\n. ",
    "reinink": "Forgive my ignorance gents, but what do you mean by collector?\n. Ahh, sorry, I got confused and thought this was an actual Plates issue. Makes sense in the context of php-debugbar. :)\n. ",
    "jdcrecur": "yes you can! Ha, looked over that twice! cheers\n. ",
    "vik-singh": "I used bower to pull it into my public/bower_components folder but it pulls in the entire PHP source which is unnecessary for the client end and it also seems its not configued to work correctly with bower.  I used the --save arg to save it to bower.json but on subsequent attempts to run bower it fails with this error:\nbower ENOTFOUND     Package maximebf/php-debugbar=maximebf/php-debugbar not found\n. ",
    "patternseek": "@vik-singh You can work around this by putting something along these lines in your bower.json until it's fixed here: \"maximebf-php-debugbar\": \"https://github.com/maximebf/php-debugbar.git#~1.10.4\"\n. ",
    "bobd91": "I have my own widget that that has a tab on the bar and content in the phpdebugbar-panel.\nIf I have a component with class 'bobs-widget' and style it with\n.bobs-widget { margin: 1px; padding: 2px; border: 3px; width: 4px; ... }\nmy styles are ignored because the 'div.phpdebugbar *' selector is more specific.\nI just did a quick test and changing 'div.phpdebugbar ' to '.phpdebugbar ' would fix things for me, would that still achieve what you require?\n. Yes, I guess so.  Other downstream widget builds might be similarly affected when they get your Feb changes.\n. Hi Barry,\nre. resetting inherited styles; shouldn't that be as unspecific as possible?\nShouldn't it say \n'if you haven't set this style then please inherit this setting rather than one from the page'\nrather than \n'Use this setting even if you have chosen a different one'.\nRegards,\nBob\n. Wouldn't  '.phpdebugbar *' do the job?\nAny nested elements would have those styles applied if they didn't set them.  Any styling on nested elements would only need a single class selector to override as long as they are later in the load order.\n. You mention 'earlier days' but the breaking changes only went in in February.  Are you aware of improvements since then?\n(The selector may have been there for a while but until February it was only used to enforce box-sizing)\n. I changed my styles to work with this, I have even added borders back to my drop down lists ;)\nBut the show stopper has been the use of a third party component (Ace editor) which didn't realise it has to be so specific with its styles.  There is no way I am going to fork that project to make its styles compatible with phpdebugbar.\nFor the moment I am going to have to work off a phpdebugbar fork.  I hope that enough people find this choice of css inappropriate and it gets changed so I can come back to the main project.\n. https://github.com/bobd91/magedebugbar\nit needs a Magento eCommerce installation to work, you can see it running at\nhttp://demo.magedebugbar.org\nthe css that showed obvious problems and made me give up was the forced 'width: auto;' as some widths in the Ace editor were clearly being ignored.\nI had issues with border: 0; as it was removing borders from elements that normally have them (selects for example) but I could get round that by reapplying them though I didn't know what the default border colour was.\nThere maybe other related issues but now I have removed the div from div.phpdebugar * everything seems ok.\n. Re: Magento - my stuff only handles layout at the moment, though I do hope to add more.\nRe: af2f etc. - sorry but I don't understand.\n. Ah, yes.  A bit of a mistake.  I was tidying up and deleted my branch which of course closed the pull request.\nI can restore the branch but don't think that it is suitable to merge at present as it replaces the padding mechanism.  I don't really like the extra div as it is in the flow of the main page but can't find a better way for Magento as the padding does not work.  \nPerhaps it should be an additional option rather than a replacement?\nI am happy to restore the branch and modify it to create an additional option if you think it worthwhile.\n. ",
    "jeff1985": "Same problem here!\nI see it the auto switches to vendor/font-awesome/fonts/fontawesome-webfont.woff?v=4.3.0\nstill not nice to pollute the console\n. You should escape, where you generate html from user contributed input. In this particular case html is beeing generated on the client side, so it would be appropriate to escape it on the client side. \nI also checked, if the same is happening with the messages widget: nope, here its all fine. \n. ",
    "borgogelli": "you're right, but I don't know how to replace/set the TraceableTwigEnvironment in Slim view\nSo I close that issue and open a new one in the right project\nhttps://github.com/slimphp/Slim-Views/issues/45\nThank you.\n. ",
    "Svobi": "Works perfect.\nThx a lot!\n. ",
    "Basje": "Alright, so I did some debugging, and found something strange. Any help would be greatly appreciated.\nWhen generating the HTML view, I have got access to the DebugBar object. At that point, instead of doing $debugBar->render(), I do this: var_dump( $debugBar, $debugBar->getData() ); die;. To my surprise, the database queries are present in the DebugBar object, but not in its getData()-function. What am I doing wrong?\nUpdate: if I call collect() on the DebugBar object, I get the expected result. Should one always call that function to get the correct results? I don't think that is in the documentation. Or am I just doing something unexpected/stupid?\nThe DebugBar object is this:\nobject(DebugBar\\StandardDebugBar)[16]\n  protected 'collectors' => \n    array (size=7)\n      'php' => \n        object(DebugBar\\DataCollector\\PhpInfoCollector)[17]\n          protected 'dataFormater' => null\n      'messages' => \n        object(DebugBar\\DataCollector\\MessagesCollector)[18]\n          protected 'name' => string 'messages' (length=8)\n          protected 'messages' => \n            array (size=0)\n              empty\n          protected 'aggregates' => \n            array (size=0)\n              empty\n          protected 'dataFormater' => null\n      'request' => \n        object(DebugBar\\DataCollector\\RequestDataCollector)[19]\n          protected 'dataFormater' => \n            object(DebugBar\\DataFormatter\\DataFormatter)[70]\n              public 'cloner' => \n                object(Symfony\\Component\\VarDumper\\Cloner\\VarCloner)[71]\n                  protected 'maxItems' => int 2500\n                  protected 'maxString' => int -1\n                  protected 'useExt' => boolean false\n                  private 'casters' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=50)\n                      'symfony\\component\\vardumper\\caster\\cutstub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'symfony\\component\\vardumper\\caster\\conststub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'closure' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castClosure' (length=64)\n                      'reflector' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castReflector' (length=66)\n                      'doctrine\\common\\persistence\\objectmanager' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'doctrine\\common\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castCommonProxy' (length=66)\n                      'doctrine\\orm\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castOrmProxy' (length=63)\n                      'doctrine\\orm\\persistentcollection' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castPersistentCollection' (length=75)\n                      'domexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castException' (length=59)\n                      'domstringlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domimplementation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castImplementation' (length=64)\n                      'domimplementationlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNode' (length=54)\n                      'domnamespacenode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNameSpaceNode' (length=63)\n                      'domdocument' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocument' (length=58)\n                      'domnodelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamednodemap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domcharacterdata' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castCharacterData' (length=63)\n                      'domattr' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castAttr' (length=54)\n                      'domelement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castElement' (length=57)\n                      'domtext' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castText' (length=54)\n                      'domtypeinfo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castTypeinfo' (length=58)\n                      'domdomerror' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDomError' (length=58)\n                      'domlocator' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLocator' (length=57)\n                      'domdocumenttype' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocumentType' (length=62)\n                      'domnotation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNotation' (length=58)\n                      'domentity' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castEntity' (length=56)\n                      'domprocessinginstruction' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castProcessingInstruction' (length=71)\n                      'domxpath' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castXPath' (length=55)\n                      'errorexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castErrorException' (length=70)\n                      'exception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castException' (length=65)\n                      'symfony\\component\\dependencyinjection\\containerinterface' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'symfony\\component\\vardumper\\exception\\throwingcasterexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castThrowingCasterException' (length=79)\n                      'pdo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdo' (length=53)\n                      'pdostatement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdoStatement' (length=62)\n                      'arrayobject' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castArrayObject' (length=61)\n                      'spldoublylinkedlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castDoublyLinkedList' (length=66)\n                      'splfixedarray' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castFixedArray' (length=60)\n                      'splheap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      'splobjectstorage' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castObjectStorage' (length=63)\n                      'splpriorityqueue' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      ':curl' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castCurl' (length=59)\n                      ':dba' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':dba persistent' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':gd' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castGd' (length=57)\n                      ':mysql link' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castMysqlLink' (length=64)\n                      ':process' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castProcess' (length=62)\n                      ':stream' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStream' (length=61)\n                      ':stream-context' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStreamContext' (length=68)\n                  private 'prevErrorHandler' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => null\n                  private 'classInfo' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=0)\n                      empty\n              public 'dumper' => \n                object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                  protected 'colors' => boolean false\n                  protected 'maxStringWidth' => int 0\n                  protected 'styles' => \n                    array (size=13)\n                      'default' => string '38;5;208' (length=8)\n                      'num' => string '1;38;5;38' (length=9)\n                      'const' => string '1;38;5;208' (length=10)\n                      'str' => string '1;38;5;113' (length=10)\n                      'cchr' => string '7' (length=1)\n                      'note' => string '38;5;38' (length=7)\n                      'ref' => string '38;5;247' (length=8)\n                      'public' => string '' (length=0)\n                      'protected' => string '' (length=0)\n                      'private' => string '' (length=0)\n                      'meta' => string '38;5;170' (length=8)\n                      'key' => string '38;5;113' (length=8)\n                      'index' => string '38;5;38' (length=7)\n                  protected 'line' => string '' (length=0)\n                  protected 'lineDumper' => \n                    array (size=2)\n                      0 => \n                        &object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                      1 => string 'echoLine' (length=8)\n                  protected 'outputStream' => resource(119, stream)\n                  protected 'decimalPoint' => string '.' (length=1)\n                  protected 'indentPad' => string '  ' (length=2)\n                  private 'charset' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'CP1252' (length=6)\n                  private 'charsetConverter' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'mbstring' (length=8)\n      'time' => \n        object(DebugBar\\DataCollector\\TimeDataCollector)[20]\n          protected 'requestStartTime' => float 1430750705.158\n          protected 'requestEndTime' => float 1430750705.374\n          protected 'startedMeasures' => \n            array (size=0)\n              empty\n          protected 'measures' => \n            array (size=0)\n              empty\n          protected 'dataFormater' => \n            object(DebugBar\\DataFormatter\\DataFormatter)[70]\n              public 'cloner' => \n                object(Symfony\\Component\\VarDumper\\Cloner\\VarCloner)[71]\n                  protected 'maxItems' => int 2500\n                  protected 'maxString' => int -1\n                  protected 'useExt' => boolean false\n                  private 'casters' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=50)\n                      'symfony\\component\\vardumper\\caster\\cutstub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'symfony\\component\\vardumper\\caster\\conststub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'closure' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castClosure' (length=64)\n                      'reflector' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castReflector' (length=66)\n                      'doctrine\\common\\persistence\\objectmanager' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'doctrine\\common\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castCommonProxy' (length=66)\n                      'doctrine\\orm\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castOrmProxy' (length=63)\n                      'doctrine\\orm\\persistentcollection' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castPersistentCollection' (length=75)\n                      'domexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castException' (length=59)\n                      'domstringlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domimplementation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castImplementation' (length=64)\n                      'domimplementationlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNode' (length=54)\n                      'domnamespacenode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNameSpaceNode' (length=63)\n                      'domdocument' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocument' (length=58)\n                      'domnodelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamednodemap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domcharacterdata' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castCharacterData' (length=63)\n                      'domattr' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castAttr' (length=54)\n                      'domelement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castElement' (length=57)\n                      'domtext' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castText' (length=54)\n                      'domtypeinfo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castTypeinfo' (length=58)\n                      'domdomerror' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDomError' (length=58)\n                      'domlocator' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLocator' (length=57)\n                      'domdocumenttype' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocumentType' (length=62)\n                      'domnotation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNotation' (length=58)\n                      'domentity' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castEntity' (length=56)\n                      'domprocessinginstruction' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castProcessingInstruction' (length=71)\n                      'domxpath' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castXPath' (length=55)\n                      'errorexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castErrorException' (length=70)\n                      'exception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castException' (length=65)\n                      'symfony\\component\\dependencyinjection\\containerinterface' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'symfony\\component\\vardumper\\exception\\throwingcasterexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castThrowingCasterException' (length=79)\n                      'pdo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdo' (length=53)\n                      'pdostatement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdoStatement' (length=62)\n                      'arrayobject' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castArrayObject' (length=61)\n                      'spldoublylinkedlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castDoublyLinkedList' (length=66)\n                      'splfixedarray' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castFixedArray' (length=60)\n                      'splheap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      'splobjectstorage' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castObjectStorage' (length=63)\n                      'splpriorityqueue' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      ':curl' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castCurl' (length=59)\n                      ':dba' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':dba persistent' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':gd' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castGd' (length=57)\n                      ':mysql link' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castMysqlLink' (length=64)\n                      ':process' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castProcess' (length=62)\n                      ':stream' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStream' (length=61)\n                      ':stream-context' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStreamContext' (length=68)\n                  private 'prevErrorHandler' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => null\n                  private 'classInfo' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=0)\n                      empty\n              public 'dumper' => \n                object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                  protected 'colors' => boolean false\n                  protected 'maxStringWidth' => int 0\n                  protected 'styles' => \n                    array (size=13)\n                      'default' => string '38;5;208' (length=8)\n                      'num' => string '1;38;5;38' (length=9)\n                      'const' => string '1;38;5;208' (length=10)\n                      'str' => string '1;38;5;113' (length=10)\n                      'cchr' => string '7' (length=1)\n                      'note' => string '38;5;38' (length=7)\n                      'ref' => string '38;5;247' (length=8)\n                      'public' => string '' (length=0)\n                      'protected' => string '' (length=0)\n                      'private' => string '' (length=0)\n                      'meta' => string '38;5;170' (length=8)\n                      'key' => string '38;5;113' (length=8)\n                      'index' => string '38;5;38' (length=7)\n                  protected 'line' => string '' (length=0)\n                  protected 'lineDumper' => \n                    array (size=2)\n                      0 => \n                        &object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                      1 => string 'echoLine' (length=8)\n                  protected 'outputStream' => resource(119, stream)\n                  protected 'decimalPoint' => string '.' (length=1)\n                  protected 'indentPad' => string '  ' (length=2)\n                  private 'charset' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'CP1252' (length=6)\n                  private 'charsetConverter' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'mbstring' (length=8)\n      'memory' => \n        object(DebugBar\\DataCollector\\MemoryCollector)[21]\n          protected 'peakUsage' => int 4718592\n          protected 'dataFormater' => \n            object(DebugBar\\DataFormatter\\DataFormatter)[70]\n              public 'cloner' => \n                object(Symfony\\Component\\VarDumper\\Cloner\\VarCloner)[71]\n                  protected 'maxItems' => int 2500\n                  protected 'maxString' => int -1\n                  protected 'useExt' => boolean false\n                  private 'casters' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=50)\n                      'symfony\\component\\vardumper\\caster\\cutstub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'symfony\\component\\vardumper\\caster\\conststub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'closure' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castClosure' (length=64)\n                      'reflector' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castReflector' (length=66)\n                      'doctrine\\common\\persistence\\objectmanager' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'doctrine\\common\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castCommonProxy' (length=66)\n                      'doctrine\\orm\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castOrmProxy' (length=63)\n                      'doctrine\\orm\\persistentcollection' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castPersistentCollection' (length=75)\n                      'domexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castException' (length=59)\n                      'domstringlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domimplementation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castImplementation' (length=64)\n                      'domimplementationlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNode' (length=54)\n                      'domnamespacenode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNameSpaceNode' (length=63)\n                      'domdocument' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocument' (length=58)\n                      'domnodelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamednodemap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domcharacterdata' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castCharacterData' (length=63)\n                      'domattr' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castAttr' (length=54)\n                      'domelement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castElement' (length=57)\n                      'domtext' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castText' (length=54)\n                      'domtypeinfo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castTypeinfo' (length=58)\n                      'domdomerror' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDomError' (length=58)\n                      'domlocator' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLocator' (length=57)\n                      'domdocumenttype' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocumentType' (length=62)\n                      'domnotation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNotation' (length=58)\n                      'domentity' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castEntity' (length=56)\n                      'domprocessinginstruction' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castProcessingInstruction' (length=71)\n                      'domxpath' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castXPath' (length=55)\n                      'errorexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castErrorException' (length=70)\n                      'exception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castException' (length=65)\n                      'symfony\\component\\dependencyinjection\\containerinterface' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'symfony\\component\\vardumper\\exception\\throwingcasterexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castThrowingCasterException' (length=79)\n                      'pdo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdo' (length=53)\n                      'pdostatement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdoStatement' (length=62)\n                      'arrayobject' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castArrayObject' (length=61)\n                      'spldoublylinkedlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castDoublyLinkedList' (length=66)\n                      'splfixedarray' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castFixedArray' (length=60)\n                      'splheap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      'splobjectstorage' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castObjectStorage' (length=63)\n                      'splpriorityqueue' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      ':curl' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castCurl' (length=59)\n                      ':dba' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':dba persistent' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':gd' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castGd' (length=57)\n                      ':mysql link' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castMysqlLink' (length=64)\n                      ':process' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castProcess' (length=62)\n                      ':stream' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStream' (length=61)\n                      ':stream-context' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStreamContext' (length=68)\n                  private 'prevErrorHandler' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => null\n                  private 'classInfo' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=0)\n                      empty\n              public 'dumper' => \n                object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                  protected 'colors' => boolean false\n                  protected 'maxStringWidth' => int 0\n                  protected 'styles' => \n                    array (size=13)\n                      'default' => string '38;5;208' (length=8)\n                      'num' => string '1;38;5;38' (length=9)\n                      'const' => string '1;38;5;208' (length=10)\n                      'str' => string '1;38;5;113' (length=10)\n                      'cchr' => string '7' (length=1)\n                      'note' => string '38;5;38' (length=7)\n                      'ref' => string '38;5;247' (length=8)\n                      'public' => string '' (length=0)\n                      'protected' => string '' (length=0)\n                      'private' => string '' (length=0)\n                      'meta' => string '38;5;170' (length=8)\n                      'key' => string '38;5;113' (length=8)\n                      'index' => string '38;5;38' (length=7)\n                  protected 'line' => string '' (length=0)\n                  protected 'lineDumper' => \n                    array (size=2)\n                      0 => \n                        &object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                      1 => string 'echoLine' (length=8)\n                  protected 'outputStream' => resource(119, stream)\n                  protected 'decimalPoint' => string '.' (length=1)\n                  protected 'indentPad' => string '  ' (length=2)\n                  private 'charset' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'CP1252' (length=6)\n                  private 'charsetConverter' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'mbstring' (length=8)\n      'exceptions' => \n        object(DebugBar\\DataCollector\\ExceptionsCollector)[22]\n          protected 'exceptions' => \n            array (size=0)\n              empty\n          protected 'chainExceptions' => boolean false\n          protected 'dataFormater' => null\n      'pdo' => \n        object(DebugBar\\DataCollector\\PDO\\PDOCollector)[26]\n          protected 'connections' => \n            array (size=1)\n              'default' => \n                object(DebugBar\\DataCollector\\PDO\\TraceablePDO)[25]\n                  protected 'pdo' => \n                    object(PDO)[24]\n                  protected 'executedStatements' => \n                    array (size=8)\n                      0 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[81]\n                          protected 'sql' => string 'select `user`.`emailAddress`, `user`.`passwordHash`, `user`.`id`, `entity`.`uuid`, `user`.`isAdmin`, `groupEntity`.`uuid` as `groupUUID` from `Users` as `user` inner join `Entities` as `entity` on `user`.`entityID` = `entity`.`id` left join `Groups` as `group` on `user`.`groupID` = `group`.`id` left join `Entities` as `groupEntity` on `group`.`entityID` = `groupEntity`.`id` where `user`.`emailAddress` = ?' (length=408)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => string 'basje@example.com' (length=18)\n                          protected 'startTime' => float 1430750705.409\n                          protected 'endTime' => float 1430750705.41\n                          protected 'duration' => float 0.0010001659393311\n                          protected 'startMemory' => int 5242880\n                          protected 'endMemory' => int 5242880\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03900000000c63069e3' (length=32)\n                      1 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[84]\n                          protected 'sql' => string 'select `login`.`expiresAt`, `login`.`deviceID` from `Users` as `user` inner join `Entities` as `entity` on `user`.`entityID` = `entity`.`id` left join `Groups` as `group` on `user`.`groupID` = `group`.`id` left join `Entities` as `groupEntity` on `group`.`entityID` = `groupEntity`.`id` inner join `LoginSessions` as `login` on `user`.`id` = `login`.`userID` where `user`.`emailAddress` = ?' (length=390)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => string 'basje@example.com' (length=18)\n                          protected 'startTime' => float 1430750705.438\n                          protected 'endTime' => float 1430750705.439\n                          protected 'duration' => float 0.0010001659393311\n                          protected 'startMemory' => int 5242880\n                          protected 'endMemory' => int 5242880\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03a00000000c63069e3' (length=32)\n                      2 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[87]\n                          protected 'sql' => string 'select `chapter`.`id`, `chapter`.`description`, `entity`.`uuid` from `Chapters` as `chapter` inner join `Entities` as `entity` on `chapter`.`entityID` = `entity`.`id` where `entity`.`uuid` = ?' (length=192)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => string 'c3830872-ead0-431c-a05c-297bf5e83fc0' (length=36)\n                          protected 'startTime' => float 1430750705.453\n                          protected 'endTime' => float 1430750705.453\n                          protected 'duration' => float 0\n                          protected 'startMemory' => int 5242880\n                          protected 'endMemory' => int 5242880\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03f00000000c63069e3' (length=32)\n                      3 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[91]\n                          protected 'sql' => string 'select `entity`.`uuid` from `Chapters` as `chapter` left join `Sprints` as `sprint` on `chapter`.`id` = `sprint`.`chapterID` left join `Entities` as `entity` on `entity`.`id` = `sprint`.`entityID` where `sprint`.`chapterID` = ?' (length=227)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => int 1\n                          protected 'startTime' => float 1430750705.47\n                          protected 'endTime' => float 1430750705.471\n                          protected 'duration' => float 0.0010001659393311\n                          protected 'startMemory' => int 5242880\n                          protected 'endMemory' => int 5242880\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03300000000c63069e3' (length=32)\n                      4 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[90]\n                          protected 'sql' => string 'select `sprint`.`id`, `entity`.`uuid` from `Sprints` as `sprint` inner join `Entities` as `entity` on `sprint`.`entityID` = `entity`.`id` where `entity`.`uuid` = ?' (length=163)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => string '432d6a5b-4400-4343-a2b4-37c646c16b07' (length=36)\n                          protected 'startTime' => float 1430750705.482\n                          protected 'endTime' => float 1430750705.483\n                          protected 'duration' => float 0.0010001659393311\n                          protected 'startMemory' => int 5242880\n                          protected 'endMemory' => int 5242880\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03000000000c63069e3' (length=32)\n                      5 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[95]\n                          protected 'sql' => string 'select `entity`.`uuid` from `Widgets` as `widget` left join `Sprints` as `sprint` on `sprint`.`id` = `widget`.`sprintID` left join `Entities` as `entity` on `entity`.`id` = `widget`.`entityID` where `widget`.`sprintID` = ?' (length=222)\n                          protected 'rowCount' => int 2\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => int 1\n                          protected 'startTime' => float 1430750705.499\n                          protected 'endTime' => float 1430750705.5\n                          protected 'duration' => float 0.00099992752075195\n                          protected 'startMemory' => int 5505024\n                          protected 'endMemory' => int 5505024\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03700000000c63069e3' (length=32)\n                      6 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[96]\n                          protected 'sql' => string 'select `widget`.`id`, `widget`.`description`, `entity`.`uuid`, `widget`.`widgetType`, `widget`.`title`, `widget`.`sourceURL` from `Widgets` as `widget` inner join `Entities` as `entity` on `widget`.`entityID` = `entity`.`id` where `entity`.`uuid` = ?' (length=250)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => string '2ce8d6b7-f8cb-454f-9aa9-0c03601c6720' (length=36)\n                          protected 'startTime' => float 1430750705.516\n                          protected 'endTime' => float 1430750705.517\n                          protected 'duration' => float 0.00099992752075195\n                          protected 'startMemory' => int 5505024\n                          protected 'endMemory' => int 5505024\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc03700000000c63069e3' (length=32)\n                      7 => \n                        object(DebugBar\\DataCollector\\PDO\\TracedStatement)[100]\n                          protected 'sql' => string 'select `widget`.`id`, `widget`.`description`, `entity`.`uuid`, `widget`.`widgetType`, `widget`.`title`, `widget`.`sourceURL` from `Widgets` as `widget` inner join `Entities` as `entity` on `widget`.`entityID` = `entity`.`id` where `entity`.`uuid` = ?' (length=250)\n                          protected 'rowCount' => int 1\n                          protected 'parameters' => \n                            array (size=1)\n                              0 => string '6bcd5670-02a1-4b7b-a3d1-f3fd22f2acb2' (length=36)\n                          protected 'startTime' => float 1430750705.536\n                          protected 'endTime' => float 1430750705.536\n                          protected 'duration' => float 0\n                          protected 'startMemory' => int 5505024\n                          protected 'endMemory' => int 5505024\n                          protected 'memoryDelta' => int 0\n                          protected 'exception' => null\n                          public 'preparedId' => string '0000000021dcc00a00000000c63069e3' (length=32)\n          protected 'timeCollector' => null\n          protected 'renderSqlWithParams' => boolean false\n          protected 'sqlQuotationChar' => string '<>' (length=2)\n          protected 'dataFormater' => \n            object(DebugBar\\DataFormatter\\DataFormatter)[70]\n              public 'cloner' => \n                object(Symfony\\Component\\VarDumper\\Cloner\\VarCloner)[71]\n                  protected 'maxItems' => int 2500\n                  protected 'maxString' => int -1\n                  protected 'useExt' => boolean false\n                  private 'casters' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=50)\n                      'symfony\\component\\vardumper\\caster\\cutstub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'symfony\\component\\vardumper\\caster\\conststub' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::castStub' (length=55)\n                      'closure' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castClosure' (length=64)\n                      'reflector' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ReflectionCaster::castReflector' (length=66)\n                      'doctrine\\common\\persistence\\objectmanager' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'doctrine\\common\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castCommonProxy' (length=66)\n                      'doctrine\\orm\\proxy\\proxy' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castOrmProxy' (length=63)\n                      'doctrine\\orm\\persistentcollection' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DoctrineCaster::castPersistentCollection' (length=75)\n                      'domexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castException' (length=59)\n                      'domstringlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domimplementation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castImplementation' (length=64)\n                      'domimplementationlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNode' (length=54)\n                      'domnamespacenode' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNameSpaceNode' (length=63)\n                      'domdocument' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocument' (length=58)\n                      'domnodelist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domnamednodemap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLength' (length=56)\n                      'domcharacterdata' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castCharacterData' (length=63)\n                      'domattr' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castAttr' (length=54)\n                      'domelement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castElement' (length=57)\n                      'domtext' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castText' (length=54)\n                      'domtypeinfo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castTypeinfo' (length=58)\n                      'domdomerror' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDomError' (length=58)\n                      'domlocator' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castLocator' (length=57)\n                      'domdocumenttype' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castDocumentType' (length=62)\n                      'domnotation' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castNotation' (length=58)\n                      'domentity' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castEntity' (length=56)\n                      'domprocessinginstruction' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castProcessingInstruction' (length=71)\n                      'domxpath' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\DOMCaster::castXPath' (length=55)\n                      'errorexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castErrorException' (length=70)\n                      'exception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castException' (length=65)\n                      'symfony\\component\\dependencyinjection\\containerinterface' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\StubCaster::cutInternals' (length=59)\n                      'symfony\\component\\vardumper\\exception\\throwingcasterexception' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ExceptionCaster::castThrowingCasterException' (length=79)\n                      'pdo' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdo' (length=53)\n                      'pdostatement' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\PdoCaster::castPdoStatement' (length=62)\n                      'arrayobject' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castArrayObject' (length=61)\n                      'spldoublylinkedlist' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castDoublyLinkedList' (length=66)\n                      'splfixedarray' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castFixedArray' (length=60)\n                      'splheap' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      'splobjectstorage' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castObjectStorage' (length=63)\n                      'splpriorityqueue' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\SplCaster::castHeap' (length=54)\n                      ':curl' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castCurl' (length=59)\n                      ':dba' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':dba persistent' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castDba' (length=58)\n                      ':gd' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castGd' (length=57)\n                      ':mysql link' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castMysqlLink' (length=64)\n                      ':process' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castProcess' (length=62)\n                      ':stream' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStream' (length=61)\n                      ':stream-context' => \n                        array (size=1)\n                          0 => string 'Symfony\\Component\\VarDumper\\Caster\\ResourceCaster::castStreamContext' (length=68)\n                  private 'prevErrorHandler' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => null\n                  private 'classInfo' (Symfony\\Component\\VarDumper\\Cloner\\AbstractCloner) => \n                    array (size=0)\n                      empty\n              public 'dumper' => \n                object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                  protected 'colors' => boolean false\n                  protected 'maxStringWidth' => int 0\n                  protected 'styles' => \n                    array (size=13)\n                      'default' => string '38;5;208' (length=8)\n                      'num' => string '1;38;5;38' (length=9)\n                      'const' => string '1;38;5;208' (length=10)\n                      'str' => string '1;38;5;113' (length=10)\n                      'cchr' => string '7' (length=1)\n                      'note' => string '38;5;38' (length=7)\n                      'ref' => string '38;5;247' (length=8)\n                      'public' => string '' (length=0)\n                      'protected' => string '' (length=0)\n                      'private' => string '' (length=0)\n                      'meta' => string '38;5;170' (length=8)\n                      'key' => string '38;5;113' (length=8)\n                      'index' => string '38;5;38' (length=7)\n                  protected 'line' => string '' (length=0)\n                  protected 'lineDumper' => \n                    array (size=2)\n                      0 => \n                        &object(Symfony\\Component\\VarDumper\\Dumper\\CliDumper)[72]\n                      1 => string 'echoLine' (length=8)\n                  protected 'outputStream' => resource(119, stream)\n                  protected 'decimalPoint' => string '.' (length=1)\n                  protected 'indentPad' => string '  ' (length=2)\n                  private 'charset' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'CP1252' (length=6)\n                  private 'charsetConverter' (Symfony\\Component\\VarDumper\\Dumper\\AbstractDumper) => string 'mbstring' (length=8)\n  protected 'data' => \n    array (size=8)\n      '__meta' => \n        array (size=6)\n          'id' => string 'a132e8c11923177359f251dc05e517c5' (length=32)\n          'datetime' => string '2015-05-04 16:45:05' (length=19)\n          'utime' => float 1430750705.306\n          'method' => string 'GET' (length=3)\n          'uri' => string '/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/' (length=47)\n          'ip' => string '127.0.0.1' (length=9)\n      'php' => \n        array (size=1)\n          'version' => string '5.5.12' (length=6)\n      'messages' => \n        array (size=2)\n          'count' => int 0\n          'messages' => \n            array (size=0)\n              empty\n      'request' => \n        array (size=4)\n          '$_GET' => string 'array:1 [\n  \"requestPath\" => \"chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n]' (length=79)\n          '$_POST' => string '[]' (length=2)\n          '$_COOKIE' => string 'array:6 [\n  \"__utma\" => \"1.1561220455.1428647229.1429778665.1430721979.7\"\n  \"__utmz\" => \"1.1430721979.7.7.utmcsr=example.dev|utmccn=(referral)|utmcmd=referral|utmcct=/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/sprints/432d6a5b-4400-4343-a2b4-37c646c16b07/widgets/2ce8d6b7-f8cb-454f-9aa9-0c03601c6720/\"\n  \"device\" => \"777075b4-ef27-11e4-be38-6c626d547d79\"\n  \"user\" => \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJUaGVXaGl0ZUJveCIsInN1YiI6ImIuaGFtYXJAaW50aGVyZS5ubCIsImlhdCI6IjE0MzA3NTA2NTUiLCJleHAiOiIxNDMwNzc5NDU1In0.kxLVaheyJ8ovdgyRK0z4TMtliLsXwcpx4qcxFOexJSo\"\n  \"__utmc\" => \"1\"\n  \"XDEBUG_SESSION\" => \"14437\"\n]' (length=622)\n          '$_SERVER' => string 'array:39 [\n  \"REDIRECT_STATUS\" => \"200\"\n  \"HTTP_HOST\" => \"example.dev\"\n  \"HTTP_USER_AGENT\" => \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0\"\n  \"HTTP_ACCEPT\" => \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n  \"HTTP_ACCEPT_LANGUAGE\" => \"en-US,en;q=0.5\"\n  \"HTTP_ACCEPT_ENCODING\" => \"gzip, deflate\"\n  \"HTTP_REFERER\" => \"http://example.dev/\"\n  \"HTTP_COOKIE\" => \"__utma=1.1561220455.1428647229.1429778665.1430721979.7; __utmz=1.1430721979.7.7.utmcsr=example.dev|utmccn=(referral)|utmcmd=referral|utmcct=/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/sprints/432d6a5b-4400-4343-a2b4-37c646c16b07/widgets/2ce8d6b7-f8cb-454f-9aa9-0c03601c6720/; device=777075b4-ef27-11e4-be38-6c626d547d79; user=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJUaGVXaGl0ZUJveCIsInN1YiI6ImIuaGFtYXJAaW50aGVyZS5ubCIsImlhdCI6IjE0MzA3NTA2NTUiLCJleHAiOiIxNDMwNzc5NDU1In0.kxLVaheyJ8ovdgyRK0z4TMtliLsXwcpx4qcxFOexJSo; __utmc=1; XDEBUG_SESSION=14437\"\n  \"HTTP_CONNECTION\" => \"keep-alive\"\n  \"HTTP_CACHE_CONTROL\" => \"max-age=0\"\n  \"PATH\" => \"C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\AMD\\ATI.ACE\\Core-Static;\"\n  \"SystemRoot\" => \"C:\\Windows\"\n  \"COMSPEC\" => \"C:\\Windows\\system32\\cmd.exe\"\n  \"PATHEXT\" => \".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\"\n  \"WINDIR\" => \"C:\\Windows\"\n  \"SERVER_SIGNATURE\" => \"\"\"\n    <address>Apache/2.4.9 (Win64) PHP/5.5.12 Server at example.dev Port 80</address>\n    \"\"\"\n  \"SERVER_SOFTWARE\" => \"Apache/2.4.9 (Win64) PHP/5.5.12\"\n  \"SERVER_NAME\" => \"example.dev\"\n  \"SERVER_ADDR\" => \"127.0.53.53\"\n  \"SERVER_PORT\" => \"80\"\n  \"REMOTE_ADDR\" => \"127.0.0.1\"\n  \"DOCUMENT_ROOT\" => \"C:/Wamp/www/InThere/source/public\"\n  \"REQUEST_SCHEME\" => \"http\"\n  \"CONTEXT_PREFIX\" => \"\"\n  \"CONTEXT_DOCUMENT_ROOT\" => \"C:/Wamp/www/InThere/source/public\"\n  \"SERVER_ADMIN\" => \"admin@example.com\"\n  \"SCRIPT_FILENAME\" => \"C:/Wamp/www/InThere/source/public/index.php\"\n  \"REMOTE_PORT\" => \"52195\"\n  \"REDIRECT_QUERY_STRING\" => \"requestPath=chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"REDIRECT_URL\" => \"/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"GATEWAY_INTERFACE\" => \"CGI/1.1\"\n  \"SERVER_PROTOCOL\" => \"HTTP/1.1\"\n  \"REQUEST_METHOD\" => \"GET\"\n  \"QUERY_STRING\" => \"requestPath=chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"REQUEST_URI\" => \"/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"SCRIPT_NAME\" => \"/index.php\"\n  \"PHP_SELF\" => \"/index.php\"\n  \"REQUEST_TIME_FLOAT\" => 1430750705.158\n  \"REQUEST_TIME\" => 1430750705\n]' (length=2640)\n      'time' => \n        array (size=5)\n          'start' => float 1430750705.158\n          'end' => float 1430750705.374\n          'duration' => float 0.21596693992615\n          'duration_str' => string '215.97ms' (length=8)\n          'measures' => \n            array (size=0)\n              empty\n      'memory' => \n        array (size=2)\n          'peak_usage' => int 4718592\n          'peak_usage_str' => string '4.5MB' (length=5)\n      'exceptions' => \n        array (size=2)\n          'count' => int 0\n          'exceptions' => \n            array (size=0)\n              empty\n      'pdo' => \n        array (size=9)\n          'nb_statements' => int 0\n          'nb_failed_statements' => int 0\n          'accumulated_duration' => int 0\n          'memory_usage' => int 0\n          'peak_memory_usage' => int 0\n          'statements' => \n            array (size=0)\n              empty\n          'accumulated_duration_str' => string '0\u00ce\u00bcs' (length=4)\n          'memory_usage_str' => string '0B' (length=2)\n          'peak_memory_usage_str' => string '0B' (length=2)\n  protected 'jsRenderer' => \n    object(DebugBar\\JavascriptRenderer)[67]\n      protected 'debugBar' => \n        &object(DebugBar\\StandardDebugBar)[16]\n      protected 'baseUrl' => string '//static.example.dev/debugbar/' (length=34)\n      protected 'basePath' => string 'C:\\Wamp\\www\\InThere\\source\\vendor\\maximebf\\debugbar\\src\\DebugBar\\Resources' (length=74)\n      protected 'cssVendors' => \n        array (size=2)\n          'fontawesome' => string 'vendor/font-awesome/css/font-awesome.min.css' (length=44)\n          'highlightjs' => string 'vendor/highlightjs/styles/github.css' (length=36)\n      protected 'jsVendors' => \n        array (size=2)\n          'jquery' => string 'vendor/jquery/dist/jquery.min.js' (length=32)\n          'highlightjs' => string 'vendor/highlightjs/highlight.pack.js' (length=36)\n      protected 'includeVendors' => boolean true\n      protected 'cssFiles' => \n        array (size=3)\n          0 => string 'debugbar.css' (length=12)\n          1 => string 'widgets.css' (length=11)\n          2 => string 'openhandler.css' (length=15)\n      protected 'jsFiles' => \n        array (size=3)\n          0 => string 'debugbar.js' (length=11)\n          1 => string 'widgets.js' (length=10)\n          2 => string 'openhandler.js' (length=14)\n      protected 'additionalAssets' => \n        array (size=0)\n          empty\n      protected 'javascriptClass' => string 'PhpDebugBar.DebugBar' (length=20)\n      protected 'variableName' => string 'phpdebugbar' (length=11)\n      protected 'enableJqueryNoConflict' => boolean true\n      protected 'initialization' => int 6\n      protected 'controls' => \n        array (size=0)\n          empty\n      protected 'ignoredCollectors' => \n        array (size=0)\n          empty\n      protected 'ajaxHandlerClass' => string 'PhpDebugBar.AjaxHandler' (length=23)\n      protected 'ajaxHandlerBindToJquery' => boolean true\n      protected 'ajaxHandlerBindToXHR' => boolean false\n      protected 'openHandlerClass' => string 'PhpDebugBar.OpenHandler' (length=23)\n      protected 'openHandlerUrl' => null\n  protected 'requestIdGenerator' => \n    object(DebugBar\\RequestIdGenerator)[69]\n  protected 'requestId' => string 'a132e8c11923177359f251dc05e517c5' (length=32)\n  protected 'storage' => null\n  protected 'httpDriver' => \n    object(DebugBar\\PhpHttpDriver)[68]\n  protected 'stackSessionNamespace' => string 'PHPDEBUGBAR_STACK_DATA' (length=22)\n  protected 'stackAlwaysUseSessionStorage' => boolean false\nThe getData()-function, however, returns this:\narray (size=8)\n  '__meta' => \n    array (size=6)\n      'id' => string 'a132e8c11923177359f251dc05e517c5' (length=32)\n      'datetime' => string '2015-05-04 16:45:05' (length=19)\n      'utime' => float 1430750705.306\n      'method' => string 'GET' (length=3)\n      'uri' => string '/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/' (length=47)\n      'ip' => string '127.0.0.1' (length=9)\n  'php' => \n    array (size=1)\n      'version' => string '5.5.12' (length=6)\n  'messages' => \n    array (size=2)\n      'count' => int 0\n      'messages' => \n        array (size=0)\n          empty\n  'request' => \n    array (size=4)\n      '$_GET' => string 'array:1 [\n  \"requestPath\" => \"chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n]' (length=79)\n      '$_POST' => string '[]' (length=2)\n      '$_COOKIE' => string 'array:6 [\n  \"__utma\" => \"1.1561220455.1428647229.1429778665.1430721979.7\"\n  \"__utmz\" => \"1.1430721979.7.7.utmcsr=example.dev|utmccn=(referral)|utmcmd=referral|utmcct=/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/sprints/432d6a5b-4400-4343-a2b4-37c646c16b07/widgets/2ce8d6b7-f8cb-454f-9aa9-0c03601c6720/\"\n  \"device\" => \"777075b4-ef27-11e4-be38-6c626d547d79\"\n  \"user\" => \"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJUaGVXaGl0ZUJveCIsInN1YiI6ImIuaGFtYXJAaW50aGVyZS5ubCIsImlhdCI6IjE0MzA3NTA2NTUiLCJleHAiOiIxNDMwNzc5NDU1In0.kxLVaheyJ8ovdgyRK0z4TMtliLsXwcpx4qcxFOexJSo\"\n  \"__utmc\" => \"1\"\n  \"XDEBUG_SESSION\" => \"14437\"\n]' (length=622)\n      '$_SERVER' => string 'array:39 [\n  \"REDIRECT_STATUS\" => \"200\"\n  \"HTTP_HOST\" => \"example.dev\"\n  \"HTTP_USER_AGENT\" => \"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:39.0) Gecko/20100101 Firefox/39.0\"\n  \"HTTP_ACCEPT\" => \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\n  \"HTTP_ACCEPT_LANGUAGE\" => \"en-US,en;q=0.5\"\n  \"HTTP_ACCEPT_ENCODING\" => \"gzip, deflate\"\n  \"HTTP_REFERER\" => \"http://example.dev/\"\n  \"HTTP_COOKIE\" => \"__utma=1.1561220455.1428647229.1429778665.1430721979.7; __utmz=1.1430721979.7.7.utmcsr=example.dev|utmccn=(referral)|utmcmd=referral|utmcct=/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/sprints/432d6a5b-4400-4343-a2b4-37c646c16b07/widgets/2ce8d6b7-f8cb-454f-9aa9-0c03601c6720/; device=777075b4-ef27-11e4-be38-6c626d547d79; user=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJUaGVXaGl0ZUJveCIsInN1YiI6ImIuaGFtYXJAaW50aGVyZS5ubCIsImlhdCI6IjE0MzA3NTA2NTUiLCJleHAiOiIxNDMwNzc5NDU1In0.kxLVaheyJ8ovdgyRK0z4TMtliLsXwcpx4qcxFOexJSo; __utmc=1; XDEBUG_SESSION=14437\"\n  \"HTTP_CONNECTION\" => \"keep-alive\"\n  \"HTTP_CACHE_CONTROL\" => \"max-age=0\"\n  \"PATH\" => \"C:\\ProgramData\\Oracle\\Java\\javapath;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Program Files\\TortoiseGit\\bin;C:\\Program Files\\nodejs\\;C:\\Program Files (x86)\\AMD\\ATI.ACE\\Core-Static;\"\n  \"SystemRoot\" => \"C:\\Windows\"\n  \"COMSPEC\" => \"C:\\Windows\\system32\\cmd.exe\"\n  \"PATHEXT\" => \".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC\"\n  \"WINDIR\" => \"C:\\Windows\"\n  \"SERVER_SIGNATURE\" => \"\"\"\n    <address>Apache/2.4.9 (Win64) PHP/5.5.12 Server at example.dev Port 80</address>\n    \"\"\"\n  \"SERVER_SOFTWARE\" => \"Apache/2.4.9 (Win64) PHP/5.5.12\"\n  \"SERVER_NAME\" => \"example.dev\"\n  \"SERVER_ADDR\" => \"127.0.53.53\"\n  \"SERVER_PORT\" => \"80\"\n  \"REMOTE_ADDR\" => \"127.0.0.1\"\n  \"DOCUMENT_ROOT\" => \"C:/Wamp/www/InThere/source/public\"\n  \"REQUEST_SCHEME\" => \"http\"\n  \"CONTEXT_PREFIX\" => \"\"\n  \"CONTEXT_DOCUMENT_ROOT\" => \"C:/Wamp/www/InThere/source/public\"\n  \"SERVER_ADMIN\" => \"admin@example.com\"\n  \"SCRIPT_FILENAME\" => \"C:/Wamp/www/InThere/source/public/index.php\"\n  \"REMOTE_PORT\" => \"52195\"\n  \"REDIRECT_QUERY_STRING\" => \"requestPath=chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"REDIRECT_URL\" => \"/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"GATEWAY_INTERFACE\" => \"CGI/1.1\"\n  \"SERVER_PROTOCOL\" => \"HTTP/1.1\"\n  \"REQUEST_METHOD\" => \"GET\"\n  \"QUERY_STRING\" => \"requestPath=chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"REQUEST_URI\" => \"/chapters/c3830872-ead0-431c-a05c-297bf5e83fc0/\"\n  \"SCRIPT_NAME\" => \"/index.php\"\n  \"PHP_SELF\" => \"/index.php\"\n  \"REQUEST_TIME_FLOAT\" => 1430750705.158\n  \"REQUEST_TIME\" => 1430750705\n]' (length=2640)\n  'time' => \n    array (size=5)\n      'start' => float 1430750705.158\n      'end' => float 1430750705.374\n      'duration' => float 0.21596693992615\n      'duration_str' => string '215.97ms' (length=8)\n      'measures' => \n        array (size=0)\n          empty\n  'memory' => \n    array (size=2)\n      'peak_usage' => int 4718592\n      'peak_usage_str' => string '4.5MB' (length=5)\n  'exceptions' => \n    array (size=2)\n      'count' => int 0\n      'exceptions' => \n        array (size=0)\n          empty\n  'pdo' => \n    array (size=9)\n      'nb_statements' => int 0\n      'nb_failed_statements' => int 0\n      'accumulated_duration' => int 0\n      'memory_usage' => int 0\n      'peak_memory_usage' => int 0\n      'statements' => \n        array (size=0)\n          empty\n      'accumulated_duration_str' => string '0\u00ce\u00bcs' (length=4)\n      'memory_usage_str' => string '0B' (length=2)\n      'peak_memory_usage_str' => string '0B' (length=2)\n. ",
    "okneloper": "Guys, you need to not just add the TraceablePDO to the PDOCollector, but rather you need to replace the PDO Eloquent uses with the TraceablePDO instance. \nHere's how you do it:\nphp\n    $connection = $capsule->getConnection();\n    $connection->setPdo(new \\DebugBar\\DataCollector\\PDO\\TraceablePDO($connection->getPdo()));\n. ",
    "kokokurak": "Yes it is :)\n. You're welcome! Awesome tool.\n. ",
    "pascal-hofmann": "Any plans for a new minor release including this change? The error message in the browser console is annoying. :wink: \n. Awesome, thank you! :+1: \nThis closes #207 and #212.\n. ",
    "jaymiethomas": "I'm also getting this issue, but only when running debugbar under PHP on Windows.  On OS X the messages appear in the correct order.  Did you find out what causes this, or did you use another workaround?\n. Upon further investigation, it looks like under Windows the messages are processed in a parallel fashion rather than in the serial sequence we see under OS X.  Debugbar is simply reading the order of the messages in the JSON file of the produced output, so I wonder whether this is more a lower-level issue or difference between PHP on Windows and OS X than an issue in the front-end display.\n. ",
    "Big-Shark": "@barryvdh Hi, my PR has any problems?\n. ",
    "nickcolley": "Good shout Barry :dancer: \nI've updated the namespace script to update the font-face name too now.\nAlso updated to font awesome 4.4.0\nCan you test this out for me? I don't have this project running on my machine, happy to make amends if anything's not working.\nCheers mate.\n. @barryvdh is this good to go?\n. Much better, that's great. Thanks!\n. ",
    "sername8": "done, for enabled show queries in yii:\nphp\n                        'components' => array(\n                            'debugbar' => array(\n                                'class' => 'application.components.DBar',\n                                //'forceCopyAssets' => $this->forceCopyAssets\n                            ),\n                        )\n``` php\n<?php\nuse DebugBar\\DataCollector\\ExceptionsCollector;\nuse DebugBar\\DataCollector\\MemoryCollector;\nuse DebugBar\\DataCollector\\MessagesCollector;\nuse DebugBar\\DataCollector\\PhpInfoCollector;\nuse DebugBar\\DataCollector\\RequestDataCollector;\nuse DebugBar\\DataCollector\\TimeDataCollector;\nuse \\DebugBar\\DataCollector\\PDO\\PDOCollector;\nuse \\DebugBar\\DataCollector\\PDO\\TraceablePDO;\n\nclass DBar extends CApplicationComponent{\n\n    public $forceCopyAssets = false;\n    protected $assetsUrlDebugBar;\n\n    /**\n     *\n     * @var DebugBar $debugbar\n     */\n    public $debugbar;\n\n    /**\n     *\n     * @var JavascriptRenderer $debugbarRenderer\n     */\n    public $debugbarRenderer;\n\n    /**\n     *\n     * @var PDO $pdo\n     */\n    public $pdo;\n    private static $_instance;\n\n    public function init(){\n        // Prevents the extension from registering scripts and publishing assets when ran from the command line.\n        if( $this->isInConsoleMode() && !$this->isInTests() )\n            return;\n\n        $this->debugbar = new DebugBar\\DebugBar();\n        $this->debugbar->addCollector( new PhpInfoCollector() );\n        $this->debugbar->addCollector( new MessagesCollector() );\n        $this->debugbar->addCollector( new RequestDataCollector() );\n        $this->debugbar->addCollector( new TimeDataCollector() );\n        $this->debugbar->addCollector( new MemoryCollector() );\n        $this->debugbar->addCollector( new ExceptionsCollector() );\n        $this->debugbar->addCollector( new PDOCollector( new TraceablePDO( new PDO( 'mysql:host=HOST;dbname=NAME', 'USER', 'PASS' ) ) ) );\n\n        //$this->debugbar->setStorage( new DebugBar\\Storage\\FileStorage( Yii::app()->basePath . '/logs/DebugStorage' ) );\n        $this->debugbarRenderer = $this->debugbar->getJavascriptRenderer();\n        $this->debugbar->sendDataInHeaders( true );\n\n        $this->registerDebugBarAssets();\n\n        parent::init();\n    }\n\n    /** @return bool */\n    protected function isInConsoleMode(){\n\n        return Yii::app() instanceof CConsoleApplication || PHP_SAPI == 'cli';\n    }\n\n    /** @return bool */\n    protected function isInTests(){\n\n        return defined( 'IS_IN_TESTS' ) && IS_IN_TESTS;\n    }\n\n    protected function registerDebugBarAssets(){\n        if( !isset( $this->assetsUrlDebugBar ) ){\n            list($cssFiles, $jsFiles) = $this->debugbarRenderer->getAssets( null, 'url' );\n\n            foreach( $cssFiles as $file ){\n                $file = strtr( $file, array(\n                    '/vendor/maximebf/debugbar/src/DebugBar/Resources' => '' ) );\n                Yii::app()->clientScript->registerCssFile( $this->getAssetsUrlDebugBar() . $file );\n            }\n\n            foreach( $jsFiles as $file ){\n                $file = strtr( $file, array(\n                    '/vendor/maximebf/debugbar/src/DebugBar/Resources' => '' ) );\n                Yii::app()->clientScript->registerScriptFile( $this->getAssetsUrlDebugBar() . $file, CClientScript::POS_HEAD );\n            }\n        }\n    }\n\n    protected function getAssetsUrlDebugBar(){\n        if( !isset( $this->assetsUrlDebugBar ) ){\n            $assetsPath = Yii::getPathOfAlias( 'application.vendor.maximebf.debugbar.src.DebugBar.Resources' );\n            $this->assetsUrlDebugBar = Yii::app()->assetManager->publish( $assetsPath, false, -1, $this->forceCopyAssets );\n        }\n\n        return $this->assetsUrlDebugBar;\n    }\n\n    /**\n     *\n     * @return Dbar\n     */\n    public static function getInstace(){\n        if( null === self::$_instance ){\n            // Lets find inside current module\n            $module = Yii::app()->getController()->getModule();\n            if( $module ){\n                if( $module->hasComponent( 'debugbar' ) ){\n                    self::$_instance = $module->getComponent( 'debugbar' );\n                }\n            }\n            // Still nothing?\n            if( null === self::$_instance ){\n                if( Yii::app()->hasComponent( 'debugbar' ) ){\n                    self::$_instance = Yii::app()->getComponent( 'debugbar' );\n                } else {\n                    var_dump( '\u041d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 debugbar' );\n                }\n            }\n        }\n        return self::$_instance;\n    }\n\n    public static function saveInstace( $value ){\n        if( $value instanceof DBar ){\n            $value->debugbar = new DebugBar\\DebugBar();\n            $value->debugbar->addCollector( new PhpInfoCollector() );\n            $value->debugbar->addCollector( new MessagesCollector() );\n            $value->debugbar->addCollector( new RequestDataCollector() );\n            $value->debugbar->addCollector( new TimeDataCollector() );\n            $value->debugbar->addCollector( new MemoryCollector() );\n            $value->debugbar->addCollector( new ExceptionsCollector() );\n            if( $value->pdo ){\n                $value->debugbar->addCollector( new PDOCollector( $value->pdo ) );\n                $value->pdo->setAttribute( \\PDO::ATTR_ERRMODE, \\PDO::ERRMODE_EXCEPTION );\n            }\n            $value->debugbarRenderer = $value->debugbar->getJavascriptRenderer();\n            $value->registerDebugBarAssets();\n\n            return self::$_instance = $value;\n        }\n    }\n\n    /**\n     *\n     * @return DebugBar\\DebugBar\n     */\n    public static function getDebugBar(){\n        return self::$_instance->debugbar;\n    }\n\n    /**\n     *\n     * @param bool $initialize\n     */\n    public static function renderDebugBar( $initialize ){\n        echo self::$_instance->debugbarRenderer->render( $initialize );\n    }\n\n}\n\n```\nadd in database.php\nphp\n'class' => 'application.components.DBarDbConnection',\n``` php\n<?php\nclass DBarDbConnection extends CDbConnection{\n\n    private $_attributes = array();\n\n    public function createPdoInstance(){\n        $pdoClass = $this->pdoClass;\n        if( ($driver = $this->getDriverName()) !== null ){\n            if( $driver === 'mssql' || $driver === 'dblib' )\n                $pdoClass = 'CMssqlPdoAdapter';\n            elseif( $driver === 'sqlsrv' )\n                $pdoClass = 'CMssqlSqlsrvPdoAdapter';\n        }\n\n        if( !class_exists( $pdoClass ) )\n            throw new CDbException( Yii::t( 'yii', 'CDbConnection is unable to find PDO class \"{className}\". Make sure PDO is installed correctly.', array(\n                '{className}' => $pdoClass ) ) );\n\n        @$instance = new $pdoClass( $this->connectionString, $this->username, $this->password, $this->_attributes );\n\n        if( !$instance )\n            throw new CDbException( Yii::t( 'yii', 'CDbConnection failed to open the DB connection.' ) );\n\n        $debugbar = DBar::getInstace();\n        $debugbar->pdo = new DebugBar\\DataCollector\\PDO\\TraceablePDO( $instance );\n        $debugbar->saveInstace( $debugbar );\n\n        return $instance;\n    }\n\n}\n\n```\nand after in layout main.php add \nphp\nDBar::renderDebugBar( true );\nhttps://nimbus.everhelper.me/client/notes/share/281959/DR6zUC0C2tdercokeSX3w8TCdprSkzZl/\n. ",
    "benjamin-carl": "Yeh, changed to your recommendation. bit late yesterday :D Seems cleaner.\n. ",
    "SC7639": "I'd definitely be interested\n. ",
    "stefandoorn": "Alright. Made a start with porting my code so it becomes suitable for a PR: https://github.com/maximebf/php-debugbar/compare/master...stefandoorn:redis-collector?expand=1\nThings to do:\n- Add storage driver for Redis php extension (now it only supports predis)\n- Add TraceableRedis equivalent for Predis, now it support the phpredis PHP extension only\nPart of the code is the same as in the PDOCollector part, as that was my starting point. I need your opinion whether it's ok to keep them separated or whether it would be better to share part of the codebase between both collectors as it's sometimes duplicate.\n. ",
    "snapshotpl": "@barryvdh done\n. ",
    "sebdesign": "You're welcome @barryvdh \n. ",
    "janschoenherr": ":+1: \n. ",
    "Merrick28": "Ok, it's not a big deal for me, Twig isn't the topic I would like to monitor :)\nThanks for your great work.\n. ",
    "gregmartyn": "A typical CSP workaround is to put the data in the page as e.g. a data attribute on some known element. E.g. <div class=\"hidden debugbar-data\" data-debugbar=\"{whatever: 'data'}\">. Something like that. The data doesn't go in a <script> because you can't execute scripts inline in the html when using CSP. The data is just plain JSON somewhere in the HTML. Then you have a <script src=\"\"> for the executable script, that looks for the known element and grabs the data from the data attribute. That keeps your executable code separate from your html + data, in a static, potentially even cacheable file.\n. ",
    "barryvanveen": "So, this is an oldie but since I'm hitting the same problem, maybe we can find a way out?\nMy main problem with combining CSP and the debugbar is the script that \"starts\" the debugbar. It's the inline_head asset that starts like this:\nhtml\n<script> Sfdump = window.Sfdump || (function (doc) { var refStyle = doc.createElement('style'), rxEsc =\nFor starters, the <script> tag itself should have a nonce to be able to whitelist it. With that out of the way it starts by creating a <style>, which should have a nonce as well...\n@barryvdh, I don't fully understand your comment but do you think it would solve these issues?. ",
    "giovanisirbu": "Solved.\n. ",
    "grepsedawk": "you could make a vendor folder on your computer and ftp that to use the composer autoloader.\n. Sorry, I'm not nearly as active in PHP community so I haven't tried/tested this.\nIt looks like that would do the trick, though!. Sorry, it was my first squash. I pulled to merge instead of force pushing.\nEdit: Was 2 commits just brought it down to 1.\n. ",
    "dubpub": "Any progress?\n. ",
    "james-johnston-thumbtack": "I added an option to disable that behavior: https://github.com/maximebf/php-debugbar/pull/315\nSo I would consider this issue closed?. This is also something that has annoyed us; could this be merged? @barryvdh . Font Awesome actually provides Sass files that let you customize aspects of Font Awesome:\n Main file: https://github.com/FortAwesome/Font-Awesome/blob/master/scss/font-awesome.scss\n Variables file; notice you can set a custom $fa-css-prefix: e.g. you can set it to phpdebugbar-fa\nThis almost worked really well and was easy to integrate for our site, where we already have a front-end build process that includes Sass compilation.  (To contrast, the debug bar does something really hacky here that we couldn't use: https://github.com/maximebf/php-debugbar/blob/master/build/namespaceFontAwesome.php - we need to also change other Font Awesome Sass variables, like the CDN address for the font files and we weren't really willing to further mess with this search/replace approach - it's too fragile.)\nThe problem is that you can't use the Sass files to change the font family name to PhpDebugbarFontAwesome.  Everything is hard-coded to FontAwesome.  I tried to submit a PR request upstream to get that to be a customizable variable too, but they adamantly refused.  (Why they would let you namespace the CSS prefix but not the font family name is beyond me!)\n My rejected pull request: https://github.com/FortAwesome/Font-Awesome/pull/10406\n Older rejected issue with similar feature request: https://github.com/FortAwesome/Font-Awesome/issues/6113\nTheir suggested \"solution\" is to copy/paste blocks of FontAwesome code into our own source code, e.g. copy/paste contents of _core.scss and change the font family name there.  That's pretty much a non-starter solution IMHO.\nSo yeah, in summary, debug bar using PhpDebugbarFontAwesome font family creates way too much friction for adoption for what should be a simple thing to accomplish and this won't change unless either Fort Awesome relents and accepts my PR, or Debug Bar stops this namespacing.. @barryvdh Good point, I looked closer and realized the problem we actually had was that not all HTTP requests create a TwigCollector - for example an AJAX call after the initial page was served.\nSo instead of the original fix, I've modified TwigCollector.php to default return an empty template array - as proposed.\nIf a twig collector is in place for the request, then the collect() function does already return an empty array.  The problem was when there wasn't a collector to begin with.. Sure, we can do it that way - see latest commit.\nIt does have to be JSON-encoded here because getJsControlsDefinitionCode doesn't do any such encoding of its own when returning defaults in the dataMap object.. I'm not sure I fully understand what you're proposing...\nI think DebugBar.addDataSet and DebugBar.loadDataSet should keep the new parameter, because not all callers will want the non-default behavior: a config-level option for the entire debug bar would affect more than just AJAX calls.  For example, if there are stacked page requests, PHP JavascriptRenderer::render calls JS DebugBar.addDataSet on each, with the current page request being the last one added.  In that scenario, we still want the most recent addDataSet call (for the current page request) to be shown immediately (the existing behavior).  It's only the AJAX calls where the existing behavior is giving us trouble.\nWe could eliminate the AjaxHandler constructor autoShow parameter in favor of having the AjaxHandler user manually set a config option via a config function.  For example, adding a new AjaxHandler.setAutoShow function.  Is this what you had in mind?  (But it's on AjaxHandler, not DebugBar proper.). Hi @barryvdh - just wondering if you had any thoughts on my above message from Jan 19?. Thank you for merging!. > Would it make sense to make an interface to add headers, if other collectors would want to do that?\nI think this seems like it would be the right/generic way to do it, although admittedly I cannot think of any other use cases at this moment - but we still have lots of collectors we'd like to write, so I can't say it would never come up...\n\nSee https://ma.ttias.be/server-timings-chrome-devtools/\n\nAn interesting first attempt at server timing protocol.... but limiting (as you already noted on Twitter).  :(  The inability to specify a start time means that we can't send back a rich timeline like how the debug bar itself renders this collector.  And you're subject to the limiting HTTP header size limits, so if you're collecting more than a few items or items with long descriptions you could be in trouble: e.g. large numbers of database calls collected with PDO collector.  (Not to mention the end-result on DevTools would be an unintelligible mess, since there's no start time / duration.)\nI think with some UI improvements, the time collector front-end widget in our debug bar could be more useful for sorting through large numbers of measurements. (e.g. filtering by application-specific measurement type, showing only long-duration measurements, things like that).  Having it send back these HTTP headers that are limited in size/usefulness would be even more of a constraint, because they just couldn't handle the amount of data.\nTo conclude, I think we'd be better to accumulate / aggregate timing information separately for the ServerTiming headers, if we really want to do that.  So e.g. the time collector widget can show detailed timeline for database calls, but we only send a sum/total of database call time for ServerTiming header - leading to an end result that is similar to the screenshots.  (Although I don't think I would use this feature much, when I have full power of the debug bar as an alternative!). >  For example, when I create APIs with a JS front-end + PHP back-end\nThis is not a scenario you can use the AJAX debug bar feature for?  We've been successfully using it on some of our single-page application pages.... > I do use that when calling Ajax from our php app, but not when it's a standalone js app\nAh, that makes sense.  Sounds like we need some way of embedding the debug bar in that scenario for the purpose of listening to AJAX calls... it would be initially empty.... @barryvdh That's exactly right.  This commit leaves the default at true so as to avoid any change in behavior to existing users, but honestly I think \"true\" value stinks and is basically useless, and I'd be quite happy to change the default to \"false\" since I think most users would prefer that.\nHere's the difference; this is the current behavior when $real_usage is true (the current hard-coded behavior).  (FYI, it's a list of duplicate queries)\n\nAs you can see, everything shows up as zero bytes; this is obviously impossible and so it's totally useless.  If we change the parameter to false then we get this more useful view:\n\nAs you can see, we actually have some precise-looking numbers that seem much more believable/realistic.  (Note that most of these queries are duplicates, and so the numbers are mostly the same.). @fideloper @barryvdh Interesting, I had not heard of the xdebug_peak_memory_usage function.  I looked at source code and it turns out that this function has the exact same behavior as memory_get_peak_usage(false).  So XDebug doesn't really add any new value.\nHere's the proof - here's the implementation of xdebug_peak_memory_usage:\nhttps://github.com/xdebug/xdebug/blob/d82879d022cea73287b86e8b909ec75910f87fa5/xdebug.c#L2331\nPHP_FUNCTION(xdebug_peak_memory_usage)\n{\n        RETURN_LONG(zend_memory_peak_usage(0 TSRMLS_CC));\n}\n\nAnd here's the implementation of memory_get_peak_usage:\nhttps://github.com/php/php-src/blob/9c2a1f52a5f087c70a9e91dc1f43e5718d1bd8b6/ext/standard/var.c#L1144\n/* {{{ proto int memory_get_peak_usage([bool real_usage])\nReturns the peak allocated by PHP memory */\nPHP_FUNCTION(memory_get_peak_usage) {\n    zend_bool real_usage = 0;\n\n    ZEND_PARSE_PARAMETERS_START(0, 1)\n        Z_PARAM_OPTIONAL\n        Z_PARAM_BOOL(real_usage)\n    ZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE);\n\n    RETURN_LONG(zend_memory_peak_usage(real_usage));\n}\n\nIndeed, I get the exact same answers at runtime when I run them back-to-back.  In case you are curious, here's the implementation of zend_memory_peak_usage: https://github.com/php/php-src/blob/bc5811f361ead53a803046b128a64d15aba2f2e5/Zend/zend_alloc.c#L2568. I'm totally fine with just using false always - it would simplify the commit, but thought maybe some people might still want the old way for some reason.\nIt might be some use to keep it as an option for the MemoryCollector, but honestly I don't see the point for the PDOCollector and that is the one overly-complicated by the desire to keep it an option.\nI'll amend the commit.. OK, please take a look at this amended commit.  I removed the option for the PDOCollector, which simplifies things considerably.  I kept the option for MemoryCollector, because this is a very top-level metric with no granularity, and some people might prefer it. (i.e. would rather see how much memory PHP allocated from the operating system, vs how much memory the PHP script actually allocated.)\nBoth collectors now default to the false value.. > Shouldn't the id be the same when requested on the same request each time?\nNo, not by this interface.  The current implementation is clearly intended to be used as a random number generator.  The md5 hashing used with microtime() makes sure the output is random-like.  But there's a risk of collision if microtime() returns same value (ID generation in tight loop, NTP synchronization).\nI'm guessing you're thinking of DebugBar::getCurrentRequestId.  This function ensures we only ever call generate() once, thus satisfying the requirement that subsequent attempts to get the request ID return the same value.  However, I was planning to extend the consumption of this interface for generating more unique IDs (e.g. one unique ID per backtrace).\n\nNot really sure, otherwise we could just use uniqid?\n\nThat's a really good question.  In fact we could ask: why bother creating this whole interface in the first place, rather than just use a good random number generator directly (perhaps in a static wrapper function)?  The only real reason I can think of is testability: for tests we might want to inject a generator that is predictable (e.g. using simple random number generator with a hard-coded seed).  But even today, there aren't accompanying unit tests to justify the interface (e.g. no unit test calls setRequestIdGenerator to inject a mock generator).  I do think it's a good idea for the future though, so I'd propose to keep the interface for testability.\nFYI the original commit that introduced this interface is here.  There's no documentation in the commit message or code for why to create the interface vs just calling built-in PHP functions directly.  (On the implementation, my guess is the hashing of _SERVER was to avoid collisions between concurrent HTTP requests, and hashing microtime was to ensure that unique IDs continue to be generated.)\nTherefore, rather than merge this PR directly as I've written, an alternate proposal to strengthen the randomness while keeping the interface for testability:\n\nIf random_bytes is available, then we just use that.\nIf openssl_random_pseudo_bytes is available, then just use that.\nOtherwise, we keep this existing random ID generator as I've written in this PR, but mix in some additional data as well: spl_object_hash($this) (in case multiple ID generators are constructed), maybe a call to uniqid with more_entropy set to true.\n\nWhat do you think?. Check out the amended commit I just pushed.  It implements the random ID generation algorithm I described earlier.. > Do we need all that, can't we just do serialize + uniqid?\nMaybe, maybe not... I figure it's relatively cheap performance-wise to keep it and only makes it safer...\nAnyway, thanks for merging :). On further note, ignore this PR.  Something weird going on with my memcached cluster but I think it's unrelated to debug bar at the moment...\nSorry about the noise.. Thanks - good catch!  You're right, it looks like it could fail, though I imagine it's quite rare/unlikely.  See the new fix-up commit.. ",
    "xewl": "+1 to merge this. The white-space is killing my productivity by manually overwriting it every project (not significantly, but, hey...)\n\nI'd even prefer no styling, no margin, no padding.\n. And suddenly, there's liveness! Nice (:\nActually.. As it's a debugbar... it's not a problem that I don't see the footer \"partially\".\nI'd be fine with it just hovering fixed while \"collapsed\", but if you seemed to fix this one nonetheless, I'd be happy too.\nkudos\n. ",
    "ACGicomer": "Thanks @zoltan-sule . It seems we had no issue with this up until recently for some unknown reason, but this fix worked. ",
    "ivarb": "+1 on the cache break here. It appears TraceableTwigEnvironment calls Twig_Environment::writeCacheFile(), which doesn't has the $cache property set. Calling $this->twig->writeCacheFile() should fix this (for now).\nAlso, maybe TraceableTwigEnvironment should not extend Twig_Environment?\n``` php\n    public function loadTemplate($name, $index = null)\n    {\n        $cls = $this->twig->getTemplateClass($name, $index);\n    if (isset($this->twig->loadedTemplates[$cls])) {\n        return $this->twig->loadedTemplates[$cls];\n    }\n\n    if (!class_exists($cls, false)) {\n        if (false === $cache = $this->getCacheFilename($name)) {\n            eval('?>'.$this->compileSource($this->getLoader()->getSource($name), $name));\n        } else {\n            if (!is_file($cache) || ($this->isAutoReload() && !$this->isTemplateFresh($name, filemtime($cache)))) {\n                $this->writeCacheFile($cache, $this->compileSource($this->getLoader()->getSource($name), $name));\n            }\n\n            require_once $cache;\n        }\n    }\n\n    if (!$this->twig->runtimeInitialized) {\n        $this->initRuntime();\n    }\n\n    return $this->twig->loadedTemplates[$cls] = new TraceableTwigTemplate($this, new $cls($this));\n}\n\n```\n. ",
    "itstudiocz": "+1 on the Twig cache problem.\n. ",
    "acasar": "Same problem here. Is there any workaround or is Twig collector unusable at this point?\n. ",
    "eng1neer": "Here it is:\nhttps://github.com/maximebf/php-debugbar/pull/256\n. Closing along with #256 \n. You're right, SQLLogger interface does not provide a way to get the queries back.\nWhat I'm trying to achieve is to be able to pass an object of a different type than DebugStack. I already have a data collector and need to implement some SQLLogger-like interface without inheriting from DebugStack.\nMaybe there's some other way to do this.\n. Yeah, I guess, that the best thing is not to combine two data collectors into one, as I was trying to, but use them separately and subclass Doctrine's DebugStack.\nThanks, closing this.\n. ",
    "sanex3339": "thankyou\n. ",
    "ooghry": "Hi\nuntil to support Slim 3 for who see this issue can change composer.json to force install Slim 2.\n{\n    \"require\": {\n        \"slim/slim\": \"2.*\"\n    }\n} \n. ",
    "losttheplot": "I have a similar problem and could also do with some help if that's possible please (not strictly an 'issue' I know). I'm using mysql PDO in a new custom project but do not have enough OOP experience to understand the php-debugbar docs regarding collectors. I have included the following:\n$debugbar = new StandardDebugBar();\n$pdo = new TraceablePDO(new PDO('\n    mysql:host='.Config::get('DB_HOST').';\n    dbname='.Config::get('DB_NAME').';\n    charset='.Config::get('DB_CHARSET'), \n    Config::get('DB_USER'), \n    Config::get('DB_PASS')\n));\n$debugbar->addCollector(new PDOCollector($pdo));\nbut am getting the following JS error: \"PhpDebugBar.Widgets.SQLQueriesWidget is not a constructor\". This is a great project that seems to cater well for those using established frameworks and plugins, but the docs do not seem to offer much help for those of us still honing our OOP kung-fu (which is why I'm building my project in the first place). Any help would be much appreciated e.g. is there an example anywhere on the interweb of how to add or configure a non-framework mysql PDO collector please, and then how to output it to a debugbar widget?\n. Thanks, but even though I've been procedurally coding for decades, I am not able to understand these docs well enough to create a controller. I think I need what you need: a guide or example that is a bit clearer as to what file goes where. And that's the main problem, that the docs assume you know enough about OOP/MVC to know which bits of code go in which files in which directories. Oh well; I realise that this is not a help forum, so I guess I won't be able to use this great tool for debugging and optimising mysql calls :(\n. Thanks @maximebf. My vendor dir is separate to my public dir, therefore I copied the assets into my public assets dir, copied the output of renderHead(), then hard-coded the asset calls with the appropriate replacement paths. You are quite correct that I missed /widgets/sqlqueries/ as it was not being called directly. Thanks for that.\nWhat is confusing me most is that there are already a set of collector components inside a PDO dir; I'm just not sure how to use them for my non-framework mysql project. Am I calling them correctly (see my post above), or do I need to create a completely new collector class? Are these components redundant to me? As I said, I appreciate that this is not a help forum, but would be grateful nonetheless :)\n. @maximebf  I have now hard-coded the calls for the missing assets, so I am seeing the 'database' tab and am not getting any errors, thanks. The problem is that even if I make a PDO query immediately before \"$debugbar = new StandardDebugBar();\", the query is not showing in the debugbar (0 statements were executed). Any ideas please?\n. Thank you for pointing me in the right direction @maximebf. Being new to PDO, as well as OOP and MVC (but I'm no php novice), I had not realised that 'new TraceablePDO( )' needed to wrap the project's primary PDO instance - I thought it was additional to it (crazy I know, but such is life when one is swamped with new concepts and terminology to learn). So in order to put your simple, static-page Quick Start example into the context of my new OOP/MVC project skeleton, I did the following (for brevity, only the relevant code is shown):\nIn the main config file (i.e. at the point the app is bootstrapped)...\n```\nuse DebugBar\\StandardDebugBar;\nif (DEBUG) {\n  $GLOBALS['debugbar'] = new StandardDebugBar();\n  $GLOBALS['debugbarRenderer'] = $GLOBALS['debugbar']->getJavascriptRenderer();\n}\n```\nIn the main database connection class (i.e. where the PDO instance is created)...\n```\nuse DebugBar\\DataCollector\\PDO\\TraceablePDO;\nuse DebugBar\\DataCollector\\PDO\\PDOCollector;\nclass DatabaseFactory\n{\n    private $database;\n    public function getConnection() {\n        global $debugbar;\n        if (!$this->database) {\n            try {\n                $options = array(PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_OBJ, PDO::ATTR_ERRMODE => PDO::ERRMODE_WARNING);\n                if (DEBUG) {\n                    $this->database = new TraceablePDO(\n                       new PDO(Config::get('DB_TYPE') . ':host=' . Config::get('DB_HOST') . ';dbname=' .\n                       Config::get('DB_NAME') . ';port=' . Config::get('DB_PORT') . ';charset=' . Config::get('DB_CHARSET'), \n                       Config::get('DB_USER'), Config::get('DB_PASS'), $options)\n                    );\n                    $debugbar->addCollector(new PDOCollector($this->database));\n                } else {\n                    ...\n            } else {\n                ...\n```\nIn the main view class (i.e. where the output to screen is prepared)...\n```\n    public function renderJade($filename, $data = null)\n    {\n        global $debugbarRenderer;\n        if (DEBUG) {\n            $debugbody = $debugbarRenderer->render();\n            // note that I am manually referencing the assets\n            $debughead = ' ...\n```\nThis works - Yay!\nI've explained how I've done it for two reasons: (1) so that others new to PDO/OOP/MVC might learn from the hours that it took me to work it all out, and (2) so that if - as is probably the case - I have made a complete mess of the way I have scoped everything together, you might point out the error of my ways (please).\nBringing the thread back on track (sorry for hijacking it @raypm), I would say that I really appreciate you putting this project up for others to benefit from - you're very kind - but that if you are able to write the docs a bit more novice-friendly e.g. by better explaining how the various components might fit into a typical MVC project, not just a single page example, you might be able to help even more people with your wonderful debugbar :)     ...please don't think I am ungrateful.\n. ",
    "reypm": "@losttheplot there are some docs here but I think there is not enough, any advice on this concern @maximebf ?\n. ",
    "rossbearman": "I've just run into this issue myself. As all exceptions and errors in PHP 7 inherit from the Throwable class, I changed the signatures of addException(Exception $e) and formatExceptionData(Exception $e) to addException(Throwable $e) and formatExceptionData(Throwable $e), which works correctly in the scenarios I've tested, however it obviously isn't particularly clean as the existing code refers to Exceptions everywhere and more importantly won't work on PHP 5.x.\nYour change also fixes the issue for me.\n. ",
    "jamiehd": "Any update on this? Is there any plans to support php7 or should this project be considered abandoned? If I work on a PR will it be accepted?\nThanks\n. Well that works for me - I'm only using it in Laravel anyway. People who are using it directly can come up with their own solutions for now I suoppose. Will probably be worth releasing this as a new version in the future for people who are using their own implementations though.\n. I've had a look into this and it seems that due to the nested exceptions in getPrevious() this is a bit harder to implement. It's not enough to just convert the main exception - it needs to somehow go through all of the previous exceptions and check for anything that doesn't implement Exception, but I can't work out a way of doing this in the Laravel package without recreating the whole chain of exceptions.\nI found I could get it to work by changing both LaravelDebugbar@modifyResponse and ExceptionsCollector@addException, but that would require both packages to be updated and also makes the symfony bits a dependency.\nLaravelDebugbar@modifyResponse\n```\n    if (isset($response->exception)) {\n    if($response->exception instanceof Exception) {\n\n        $this->addException($response->exception);\n\n    } else {\n\n        $this->addException(new FatalThrowableError($response->exception));\n\n    }\n\n}\n\n```\nExceptionsCollector@addException\n```\n    if ($this->chainExceptions && $previous = $e->getPrevious()) {\n    if($previous instanceof Exception) {\n\n        $this->addException($previous);\n\n    } else {\n\n        $this->addException(new FatalThrowableError($previous));\n\n    }\n\n}\n\n```\nIf someone can suggest a different way for me to approach this I'm happy to spend a bit of time playing around.\n. Well I was only creating a new FatalThrowableError if $response->exception wasn't inherited from Exception, which meant that if the top level exception was ok, but one of the previous wasn't then it would throw an error.\nI've just tried removing the check and having it create a FatalThrowableError every time and this does fix it, but it doesn't feel right to be using it in cases where a standard exception is thrown. Do you think it's acceptable as a fix to just create it every time or should I check if any of the previous are not an exception?\n. No I did not. I have never submitted a PR before.\n. Ah I didn't realise you could squash them on the merge. That would've saved a lot of effort. Thanks for the tip.\n. Welp, didn't even see that. I'll get it sorted now. I blame my crazy-efficient IDE.\n. Good spot. Thanks\n. I tested it using a laravel install, so I imported that version of symfony/debug because it was the one defined in laravel's composer.json and I knew it worked. This is why I forgot to add to composer.json initially - it was already a requirement of laravel so I didn't need to add it again.\n. ",
    "marceux": "@jamiehd I think pull requests are monitored and the code is updated occasionally; please make the change because I'd need it, hahaha\n. ",
    "JCMais": "Any plans for a release with support for PHP 7?\n. ",
    "devnix": "Following the conversation in #279:\nI feel like adding an error with the addException method, as the message will appear in the \"Exceptions\" tab on the debug bar, besides the addThrowable should be the best idea.\nMaybe removing the PHP typehint and checking the instance in runtime to maintain compatibility with PHP 5 and support the Throwable interface if defined would be a good idea?. Facing the same problem. Couldn't be very logic to send the headers at any moment of the script, and update the .json incrementally?. Are you sure you are calling $debugbar->sendDataInHeaders(true); at the end of the script, just before echoing any output? I've fall in that little pit a few moments ago, I feel the name or the behavour of that function confusing (and not documented).. ",
    "tomsarduy": "I'm getting the same error, when I try to send an email\n. ",
    "flo-sch": "+1, having the same issue here.\nIt happends when SwiftMailer triggers an exception (such as Swift_TransportException), for instance when the mailer is misconfigured (local environment).\n. ",
    "msonowal": "still exists\n. ",
    "ana-lisboa": "Still exists..\nmy die and dump of $this, inside the dump() function\n\noh, the portuguese part says \"the system could not locate the specified path\". ",
    "tarampampam": "\nSymlink. In public directory execute:\n\nbash\nln -s ./../vendor/maximebf/debugbar/src/DebugBar/Resources ./debugbar\n1. Apache rewrite. .htaccess example:\nhtaccess\n...\n<IfModule rewrite_module>\n  RewriteEngine On\n  RewriteRule ^debugbar/(.*) /vendor/maximebf/debugbar/src/DebugBar/Resources/$1 [NC,L]\n</IfModule>\n...\n1. nginx alias:\n...\nlocation ~* ^/debugbar/(.*)$ {\n  alias \"$root_dir/vendor/maximebf/debugbar/src/DebugBar/Resources/$1\";\n}\n...\nBut as i think this is not good ideas. What do you think?\n. What is the best practices for making accessible \"outside\" debugbar assets from vendor directory? This is the first step before setting baseUrl.\n. One more idea - maybe you can make a bower package for your web accessible resources? Than everyone can install a package and use them without any server reconfiguration\np.s. Sorry for my english\n. No problem :+1: \n. ",
    "EizEddin": "This is what I have done eventually. I have defined the assets' paths in a separate include file, then included that file in the head.\n. ",
    "gisostallenberg": "@EizEddin I think it is a bad idea to serve files straight from vendor/ anyway. IMO all files that reside there should not be directly served by your server software.\n. @barryvdh QueryCollector is not in this repo. Should I add for instance ORMCollector and extend DoctrineCollector, Propel2Collector and PropelCollector from it? I have no easy means of checking DoctrineCollector and Propel2Collector though.\nSkipping the various items in the backtrace is very specific to Propel.\n. @barryvdh can you answer the questions above? I think this addition is very valuable, so I hope we can craft it in a way that suits both you and me.\n. Ok, I will add an abstract layer like that, but I'm not able to generate proper implementations for DoctrineCollector or Propel2Collector which I will default to 'first call not in the debugbar trace'\n. @barryvdh can you confirm that when I will add a change for Propel you will be able to add DoctrineCollector or Propel2Collector?\n. ",
    "fabswt": "I've wasted a lot of time trying to customize the URL and path to the JS and CSS assets required by PHP DebugBar.\nI wish I'd found an example like this in the docs:\n<pre><?php\n\nini_set( \"display_errors\", 1 );\n\nrequire('vendor/autoload.php');\n\nuse DebugBar\\StandardDebugBar;\nuse DebugBar\\JavascriptRenderer;\n\n\n\n$debugbar = new StandardDebugBar();\n\n\n/** Set the path to the assets.\n * Make sure to do so BEFORE any reference to `getJavascriptRenderer`, else the default values will be used.\n * Note that this is required for Heroku, because the `vendor` directory is restricted on Heroku, meanwhile DebugBar uses it as its default path.\n * See: https://github.com/maximebf/php-debugbar/issues/269\n */\n\n// Approach #1 \u00b7 Works fine.\n$debugbarRenderer = $debugbar->getJavascriptRenderer( \"http://example1.com/\", \"/path1\" );\n\n// Approach #2 \u00b7 Works only partially, as the path doesn't get set. \n// $debugbarRenderer = new JavascriptRenderer( $debugbar, \"http://example2.com/\", \"/path2\" );\n\n// Aproach #3 \u00b7 Works fine\n// $debugbarRenderer = $debugbar->getJavascriptRenderer();\n// $debugbarRenderer->setOptions( array( 'base_url' => 'http://example3.com/', 'base_path' => 'path3' ) );\n\n// Default approach:\n// $debugbarRenderer = $debugbar->getJavascriptRenderer();\n\nprint_r( $debugbar->getJavascriptRenderer()->getAssets() );\n\n\n\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n?>\n<html>\n<head>\n    <?php echo $debugbarRenderer->renderHead() ?>\n</head>\n<body>\n    ...\n    <?php echo $debugbarRenderer->render() ?>\n</body>\n</html>\n<pre>\n\n(Note that approch #2 did not work for me, as marked in the code's comments.)\nWhat compounded the issue is that I'm using Heroku where serving files from vendor is not possible and results in 403 Forbidden errors.\nI'm still looking for a satisfying way to link to the asset files, something better than just duplicating them.. In addition to restricting access to its /app/vendor folder, Heroku also filters out (i.e.: won't deploy) any vendor folder regardless of its position in the hierarchy.\n(This is easily verifiable: create /app/assets then create /app/assets/foo.txt and /app/assets/vendor/bar.txt. Deploy then browse the directories: foo.txt will be there, not bar.txt)\nThis means that using PHP DebugBar on Heroku would require to also rename Resources/vendor. The path to that folder is inside of protected methods inside of JavascriptRenderer making them not easily customizable. \nI hope this helps a bit.. ",
    "Qrzysio": "@fabswt I faced the same problem. \nI had to put the whole path, like this:\n$debugbarRenderer = new JavascriptRenderer( $debugbar, \"http://example.cm/subfolder/vendor/maximebf/debugbar/src/DebugBar/Resources/\");\nNothing else was working.. ",
    "tburry": "If it's okay I'll go ahead and close this since #272 was merged. Re-open if you wish.\n. Here's what I'd list:\n1. Browser support for SVG. This one is probably no big deal.\n2. You can't style the background color of the icons as they are. This could be changed by adding the SVGs in the javascript file, but I figured that solution required a bit more that just hard-coded SVGs. As it stands, the current SVGs in the PR are no different than the previous PNGs in terms of functionality.\n3. Using font awesome gives you more icons and makes it easier to use them next to text without having to write a lot of extra CSS.\n4. From an implementation standpoint, it felt very easy to add the font awesome stuff, even though I had to alter the javascript. It seemed like if your UI had a lot of icons it would be no big deal to add more. On the other hand, adding the SVGs was a bit of a process: export, optimize, manually cut out extra stuff, url encode, paste into CSS. It wasn't that difficult, but I wouldn't want to manually go through too many SVGs.\nI've been working with SVGs a lot recently to try and come up with a system that's as easy enough to use in place of an icon font. There are a lot of great advantages to SVG, but they aren't a clear cut winner against icon fonts. Sometimes SVGs feel a little bit bleeding edge when you start to try and style them or align them with text. There's also a few different SVG embedding techniques, but not one \"best\" one. Icon fonts work one way.\nThat might be where my \"pros and cons\" statement came from. I think SVGs are really going to be a great thing in the future. I was just hoping they would be a 100% rainbows and unicorns scenario and they aren't.\nI will say though that being able to add a new icon without having to recompile an entire font or knowing that your app isn't including the overhead of two versions of the Pied Piper logo is a huge point in favor of SVGs. I'm also hoping to see design trends take advantage of multi-color icons again once this SVG thing catches on.\n. ",
    "Jonathanm10": "I'm also using the $debugbar->sendDataInHeaders() to get Ajax calls. I get the request POST or GET parameters but not PDO ones. Is there a workaround to get those information?\n. @barryvdh I tried both ways. Once with only the $debugbar->sendDataInHeaders() and once with a storage handler. I couldn't get the data into the debugbar but seeing the json file generated the pdo['statements'] is empty. Though the $_POST parameters are correct\n. Done in https://github.com/maximebf/php-debugbar/pull/397. ",
    "shawe": "@barryvdh is there any sample for do it this way?. For me was happening the same using twig 1.34.4. @james-johnston-thumbtack thanks for this correction, I was thinking that was my fault on some where.. ",
    "webmailcontatos": "I am face the same problem. I found solution, call $debug->sendDataInHeaders(true); exactly before send content response.. #350 . In my company I create a query sort resource,\nVery useful for query analysis. It is possible to order by execution time and by query,\nhttps://user-images.githubusercontent.com/11367804/29324164-8f1c315e-81b9-11e7-8be4-846c9aba0a9f.png. ",
    "h2lsoft": "Sorry it is ok, there were an array in trace pdo\n. ",
    "myphper": "well,good idea.but sometimes we must control the static resource version,at least when i use CDN\n. yes\n. thx ,your solution is ok if static resource file and php file run on the same server , but now i didn't\n. ",
    "aland": "Possibly, I'm working on an existing codebase and can't get PHP redirects working immediately (server error but nothing is logged). I'll have a look at storage.\n. ",
    "jeremyhodges": "Found everything I need on the demo homepage: http://phpdebugbar.com/debugbar.js\n. ",
    "lookwi": "how Fix it ? \n\n`\n$debugbar = new StandardDebugBar();\n$debugbarRenderer = $debugbar ->getJavascriptRenderer();\n$debugbar->addCollector(new MessagesCollector('Files'));\n$files = get_included_files();\nforeach ($files as $key => $filename)\n{\n        $sort += 1;\n        $debugbar[\"Files\"]->addMessage($sort. ' \uff1a' . $filename , 'File');\n\n}\n\n`\n. echo $debugbarRenderer->renderHead()\necho $debugbarRenderer->render() . ",
    "ovidiugabriel": "Why the final array needs resorting since messages are appended already in order using addMessage() ?. Do we have any fix for this issue? . ",
    "pavarnos": "mostly resolved by #313 . partial fix for #299 . ",
    "amenk": "Yes, that was my intention :) Can you do this or shall I? not so familiar with the Debugbar Code - maybe you are faster. ",
    "zschuessler": "For an easier user experience, you can enact the call over AJAX. That way the user isn't redirected to a localhost api page. (At least with my setup for PhpStorm, clicking a link redirects me to a localhost page)\nI have a hacky workaround that demonstrates a solution:\n```javascript\n if (typeof tpl.xdebug_link !== 'undefined') {\n   $('VIEW FILE').addClass(csscls('editor-link')).appendTo(li);\n// Load xdebug link over AJAX GET request\n   $(document).on('click', '.xdebug-link', function(e) {\n     e.preventDefault();\n     var xdebugLink = e.target.href;\n     $.get(xdebugLink.replace('http', 'https'));\n   })\n }\n```\nNote that I'm serving my local content over ssl, so I also added a line to force a protocol. The only relevant piece is the fact the link is loaded by an AJAX GET request.\nVoila, no more user redirection when clicking the links.. ",
    "stephan-v": "The problem is that we are not using assetic or other solutions to load our assets this is because we are using a strict Content Security Policy header. \nWe can not load assets from the vendor folder because obviously you don't want your vendor file publicly available. This already leaves out the generated script and link tags. Because of our Content Security Policy we also can not render any inline CSS or JS. This means we have to grab the list of files and go through it ourselves with file_get_contents().\nI think we ended up using something like this function and adding the widget assets to it as well:\nJavascriptRenderer::getAssets()\nThe problem is that neither the dump assets nor this getAssets() list will retrieve the fonts. So the fonts don't get loaded. \nThis would not be a problem if we could easily swap in a fontawesome font of our own but because everything is prefixed and you actually called the font-family PhpDebugbarFontAwesome we can't even put in our own.\nWe fixed this by loading the fonts with file_get_contents() and wrapping them in the font-family PhpDebugbarFontAwesome that you have set. This way we can load the fonts from the vendor directory and not have to change anything. This is a big hassle though.\nI get that you would want to prevent a version mismatch but then you should at least provide the flexiblity to use your own fontawesome font if you are already using one. That would make a lot more sense than doubling up on fonts.. @barryvdh  I forgot about this issue so it has been a while ago, but that would probably work a lot better than the current setup.. Incorperated this in my own framework for which we are currently not using stacked data.. ",
    "Kylob": "Thanks for adding this!  I was just going to fix it myself, and was pleasantly surprised to see it has been done.  Have you given up on the CHANGELOG.md?  It hasn't been updated for 2 years since the 1.10.2 version.  Regardless, thank you for the DebugBar.  It is awesome.. ",
    "lagun4ik": "@barryvdh Yes. These are all the necessary changes. The used methods are present in phpredis and predis.. ",
    "fideloper": "Looks legit on the surface! @james-johnston-thumbtack what do you know/think about thexdebug_peak_memory_usage() function? I've used that on projects with xDebug installed and have had seemingly good results, usually something like\nphp\nif( function_exists('xdebug_peak_memory_usage') ) {\n    echo \"Memory Usage: \" . round(xdebug_peak_memory_usage()/1048576, 2) . \" MB\";\n}. Great, thanks for diving into that! The change sounds good here, I\ndefinitely had weird behavior with memory usage metrics while using these\ntoolbar, looks like this would help there.\nOn Fri, Jul 14, 2017 at 17:20 James Johnston notifications@github.com\nwrote:\n\n@fideloper https://github.com/fideloper @barryvdh\nhttps://github.com/barryvdh Interesting, I had not heard of the\nxdebug_peak_memory_usage function. I looked at source code and it turns\nout that this function has the exact same behavior as\nmemory_get_peak_usage(false). So XDebug doesn't really add any new value.\nHere's the proof - here's the implementation of xdebug_peak_memory_usage:\nhttps://github.com/xdebug/xdebug/blob/d82879d022cea73287b86e8b909ec75910f87fa5/xdebug.c#L2331\nPHP_FUNCTION(xdebug_peak_memory_usage)\n{\n        RETURN_LONG(zend_memory_peak_usage(0 TSRMLS_CC));\n}\nAnd here's the implementation of memory_get_peak_usage:\nhttps://github.com/php/php-src/blob/9c2a1f52a5f087c70a9e91dc1f43e5718d1bd8b6/ext/standard/var.c#L1144\n/ {{{ proto int memory_get_peak_usage([bool real_usage])\nReturns the peak allocated by PHP memory /\nPHP_FUNCTION(memory_get_peak_usage) {\n    zend_bool real_usage = 0;\nZEND_PARSE_PARAMETERS_START(0, 1)\n    Z_PARAM_OPTIONAL\n    Z_PARAM_BOOL(real_usage)\nZEND_PARSE_PARAMETERS_END_EX(RETURN_FALSE);\n\nRETURN_LONG(zend_memory_peak_usage(real_usage));\n\n}\nIndeed, I get the exact same answers at runtime when I run them\nback-to-back. In case you are curious, here's the implementation of\nzend_memory_peak_usage:\nhttps://github.com/php/php-src/blob/bc5811f361ead53a803046b128a64d15aba2f2e5/Zend/zend_alloc.c#L2568\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/maximebf/php-debugbar/pull/321#issuecomment-315481654,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAch09nVMJGNHiO5Jng16gzMjAiXOo-Tks5sN-m5gaJpZM4MTqeg\n.\n. \n",
    "balping": "+1. ",
    "caugner": "@barryvdh This issue could be closed.. Nevermind, it already deletes it automatically.. ",
    "voku": "fix for #328. ",
    "gsouf": "This is because of twig checking for wrapping TwigTemplate being an instanceOf self, and of course it fails https://github.com/twigphp/Twig/blob/v2.3.2/lib/Twig/Template.php#L92. ping @maximebf . Thank you @barryvdh . ",
    "ilnicki": "Want to test with phpredis. Currently tested only with phredis. Also have an idea to use hscan method. It can be a better solution. Storage provider is working well with this patch, but hardly needs a full rework. Currently it's barely useful afler couple hours of site testing. Storage reaches 200-300 mb and every list opening makes a 10-15 seconds delay. I'll try to find a simple and beautiful solution for the problem.. 14000+ records and still loaded in about 2sec.. Try to use the same place and driver for debug data storage.. ",
    "aik099": "There seem to be a protection against that where jQuery is loaded in non-conflict mode that doesn't overwrite global $ variable: https://github.com/maximebf/php-debugbar/blob/e6f0b5a48d98e00e4ecda7cdd6bd59b1f04ea70a/src/DebugBar/JavascriptRenderer.php#L61\nNot sure why it doesn't work.. ",
    "forceedge01": "Hi thanks for replying, but can you please leave some concrete instructions about how to \"disable some vendor assets\" and that would resolve the problem?\nOne definitive issue we have is with this https://jqueryui.com/autocomplete/, we've got this implemented in our website. If the debug bar is enabled this plugin breaks.. Thanks very much for your help, this gives me all I need.. ",
    "nonsapiens": "Hi @ilnicki \nSo I set both instances' driver to file, both pointing to the same location.  I can see that both generate the .json files as required, but neither are aware of each other despite this.  Possibly because Instance A keeps a list of files it generates, and thus wouldn't be aware of B's?. ",
    "fspringveldt": "Looks good \ud83d\udc4d . ",
    "robbieaverill": "Thanks for merging @barryvdh! Would you mind tagging 1.14.1 when you have some time?. Bump @barryvdh - sorry, could you please tag a new patch release?. The man! Thank you!. Yeah that\u2019d be great if you wouldn\u2019t mind. I\u2019ll rebase the PR afterwards . It seems strange to remove support for PHP 5.4 in a patch release (to me). Perhaps either someone using PHP 5.3 needs to whip over and fix the incompatible syntax, or revert any commits that broke PHP 5.3 compatibility. In my case I'm also (very slightly) concerned with PHP 5.3 as well as PHP 5.4.. @leomoty maybe you could create a pull request from your commits in order to restore compatibility for it =) I'd be happy to review it. Thanks @leomoty, I've cherry picked your commits into this pull request. ",
    "yanikore": "When using a namespace and extending blocks, the profiler is called multiple times and the measures are lost. TimeableTwigExtensionProfile->leave() crashes because it will try to stop a measure that \"has not been started yet\".\n@timri . ",
    "tuaris": "I would also like to request this as a feature.  Allow installation without composer for environments where composer does not make sense.. ",
    "andrey900": "and\nClass DebugBar\\Bridge\\Twig\\TraceableTwigTemplate contains 1 abstract method and must therefore be declared abstract or implement the remaining methods (Twig_Template::getDebugInfo). This good, maybe good job, but you pull request not merged, and the current extension does not work :(. ",
    "timri": "To use DebugBar with Twig, see my pullrequest #362 , which provides an alternative implementation using the build-in profiler-extension of Twig\n. ",
    "xiaobeicn": "@barryvdh it is resolved, but need to update http://phpdebugbar.com/docs/bridge-collectors.html#twig from https://github.com/maximebf/php-debugbar/blob/master/docs/bridge_collectors.md#twig-profiler. ",
    "kornrunner": "Any chance of merging this in and tagging a release? Thanks!. Duplicate of #370. ",
    "Cyrille37": "Hi. Could U please add \"Symfony\" to the README.md at \"Integrations with other frameworks\" section please ?. heu... no. I just ask because I saw this PR and did not see Symfony in the README.md.\nBut I can do one if U want ;-). Forget my request, I've just read this PR's code and it's not a Symfony PhpDebugBar support but a PhpDebugBar Symfony requirement. Sorry for the noise.. ",
    "romainrg": "There is a fatal error in PHP 5.4, you have to store the return of ini_get function inside a var then you will be able to test the content of it.. ",
    "dimaxz": "error:\nDeclaration of DebugBar\\Bridge\\Twig\\TraceableTwigEnvironment::setLexer(Twig_LexerInterface $lexer) should be compatible with Twig_Environment::setLexer(Twig_Lexer $lexer). ",
    "rotexdegba": "Thanks for the feedback, I now notice the highlighting of the duplicate queries, but it would be really nice if a count could be included.. ",
    "roland-d": "Would it be possible to have like a filter? So if I click on the duplicated query count it only shows me the duplicated queries?. ",
    "Mandy91": "Fortunately not, see the interface for 1.x\nVersion 2.x does not have that interface and has an abstract class instead\n. Can someone rerun the checks, because the checks failed on PHP 5.3 and PHP 5.4 which have been removed from Travis recently.. ",
    "trevorpan": "Hi barryvdh, \nI have many times... it requires this debug bar to work. I've followed the instructions here of adding the requirements in the composer.json file and using the terminal command, but when I'm viewing the project as localhost:8888/tpan the debugbar does not appear. \nUsing a mac mini, with Firefox Developer Edition.\n. yes, https://github.com/lekoala/silverstripe-debugbar/issues/96 \ndebugbar is a requirement does not appear in the browser window. Do have any ideas why?\ncomposer.json has it included, terminal command has been executed.. Hi barrybdh,\nHow do you typically use this file?\n<?php\nuse DebugBar\\StandardDebugBar;\n\n$debugbar = new StandardDebugBar();\n$debugbarRenderer = $debugbar->getJavascriptRenderer();\n\n$debugbar[\"messages\"]->addMessage(\"hello world!\");\n?>\n<html>\n    <head>\n        <?php echo $debugbarRenderer->renderHead() ?>\n    </head>\n    <body>\n        ...\n        <?php echo $debugbarRenderer->render() ?>\n   </body>\n</html>\n\nDoes the bar show up on any localhost:8888/siteyouareworkingon ?. ",
    "bot4343": "I've find out the problem: debugbar instance was taken from DI container, so sendDataInHeaders didn't retrieve data and didn't save data to storage.. ",
    "igorsantos07": "Any plan for a new stable release? I was looking exactly into this for my project :). Yep! We've been using it this fork on our company since I created it, and re-using the TraceablePDO for extra operations.\nIt maintains the same functionality while reducing the user friction - they don't need to know there's a PDO wrapper :). ",
    "jeanmonod": "This is a really nice feature! Can we have it merged? please \ud83d\ude4f . ",
    "leomoty": "From my experience this is not entirely true for php 5.3.3 (or lower), which is the case I still have to handle in a legacy system.\nthe array [ ] syntax is only supported in php 5.4 and it is used in the same file you changed:\nhttps://github.com/leomoty/php-debugbar/commit/bb7d7e521d81f0747ba88e05021fdbef1eb7f7dc\n$fileinfo->getExtension() is only available after php 5.3.6:\nhttps://github.com/leomoty/php-debugbar/commit/51df756c566a7a7de5e58bb986fce498d1aa566d\nAnyways, my point is, either bump composer.json support for >5.4.0 or you are likely to need my extra fixes.. If you check the commits I linked, I fixed the array square brackets, getExtension and the ini_get. I didn't expect this to be accepted upstream, so that is why I went that route.\nAnd I agree that it seems pretty weird, I just meant that the repository in that specific tag wasn't really PHP 5.3.0 compliant.. @robbieaverill or you can just add my commits to your PR? either way, we need to wait for the 1.15 branch, right?. ",
    "reyostallenberg": "Where is the requirement for this?\n. So if symfony/debug 3.1 is released you don't want it to upgrade?\nI think it should be \"symfony/debug\": \"^2.8|^3.0\"\nTake a look at Composers documentation on version numbers\nIf you had created unit tests you didn't import the Symfony\\Component\\Debug\\Exception\\FatalThrowableError in DebugBar\\DataCollector\\ExceptionsCollector in the first place without the requirement of symfony/debug\n. "
}