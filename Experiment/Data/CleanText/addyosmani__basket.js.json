{
    "nimbupani": "Nothing should be 'magic'. Given the 2.5MB limit, a programmer should know that things are being added on top of existing resources for the same domain. So, if you have a jquery-1.5.min.js and then a jquery-1.8.min.js, it should be known that it is added and not replaced, or the resource-management is automagically managed. \n. I see, perhaps there should be another function, that merely adds? and then the load execs the add if it doesn't exist? A function should ideally be isolated to a singular task. \n. In my view, this use of localstorage is not conducive, and efforts should be made to make the appCache better as it is dedicated for caching. I assert localStorage is best used with data (e.g. to-do lists, map points, svg paths(?)) not for resource caching. \n. Nothing should be 'magic'. Given the 2.5MB limit, a programmer should know that things are being added on top of existing resources for the same domain. So, if you have a jquery-1.5.min.js and then a jquery-1.8.min.js, it should be known that it is added and not replaced, or the resource-management is automagically managed. \n. I see, perhaps there should be another function, that merely adds? and then the load execs the add if it doesn't exist? A function should ideally be isolated to a singular task. \n. In my view, this use of localstorage is not conducive, and efforts should be made to make the appCache better as it is dedicated for caching. I assert localStorage is best used with data (e.g. to-do lists, map points, svg paths(?)) not for resource caching. \n. ",
    "mahemoff": "But if it's doing its job, it's not being add()ed with every call; whereas\nrequire() or load() reflect what is actually happening each time you call\nit and why you're actually calling it.\n. Maybe a separate add(), especially as Mike Taylor and I proposed a remove() elsewhere. Perhaps implemented as an \"eval\"\noption (defaulting true) on this add/load() method rather than a separate dedicated method though, since it's not clear how common a use case it is. And there's also an argument not to add it at all unless there's a real-world use case for it.\n. AppCache unfortunately has a number of pain points at present. I think\neveryone agrees saving scripts in localStorage is a non-pure hack, but if\nyou're a developer wanting to make your pages load fast today, your options\nare limited. And in practice, it's likely to be just a few % of\nlocalStorage capacity.\nOn Fri, Mar 2, 2012 at 7:55 PM, Divya Manian <\nreply@reply.github.com\n\nwrote:\nIn my view, this use of localstorage is not conducive, and efforts should\nbe made to make the appCache better as it is dedicated for caching. I\nassert localStorage is best used with data (e.g. to-do lists, map points,\nsvg paths(?)) not for resource caching.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/1#issuecomment-4291760\n\n\n\nSent from my web browser\n. Actually, what I'm keen to see (or at least discussed) is a checksum\noption. If the cached version's checksum doesn't match the checksum option,\nre-download it.\n\n(I think there's merit in ...that would\nlet the browser get smart about caching scripts across domains.)\nOn Fri, Mar 2, 2012 at 7:26 PM, Mike Taylor <\nreply@reply.github.com\n\nwrote:\n+1! I've seen other implementations that allow you to pass in a TTL arg\nand purge it if expired, etc.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/2#issuecomment-4291226\n\n\n\nSent from my web browser\n. On reflection, the checksum/hash concept is primarily for the broader goal of cross-domain script sharing. A hash assertion gets over the lack-of-trust issue between different domains and is unnecessarily complex for a single-domain cache. I'd love to see basket address this in the future, as it's wasteful everyone downloading the same jquery from a hundred different domains. But same-domain is probably enough of a challenge for basket for now :).\n\nI'm thinking the best solution might simply be a key, ie.\nbasket\n .add('jquery-1.7.2.js, {key: 'jquery'})\n .add('app-0.0.1.js', {key: 'app'});\nAnd if you want to sprinkle some magic:\nbasket\n .add('jquery-1.7.2.js, {key: true}); // key inferred from URL to be 'jquery'\nThis of course puts the onus on the developer to rename the script URL as well as basket references to that URL whenever the script changes. (As is the common practice with cache manifests, where people include a hash or version in a comment inside cache.manifest.)\nThinking aloud here, feedback welcome!\n. It does, great job @peol. I do suggest this gets added to require() as well (which in practice will get used much more than add() imo).\n. It was proposed in #2 like this:\n.require('jquery-1.7.2.js, {key: 'jquery'})\nThe thinking being that you change the URL whenever you want to change the resource.\nIf you really want to take this approach, you could leverage the existing ETag standard, i.e. check the response header for an ETag, store it, and pass it back to the server upon next request. But I think it's overkill for the current scope of basket, in which the client and server are likely controlled and trusted by the same party. Since that's the case, just rev the version in the URL.\n. Fair enough, it's really a question for Addy to decide then, depending on\nhis views and how opinionated the library is.\nI wouldn't particularly mind this option as long as I could happily ignore\nit if I committed to keep URLs unique for different script versions.\n. But if it's doing its job, it's not being add()ed with every call; whereas\nrequire() or load() reflect what is actually happening each time you call\nit and why you're actually calling it.\n. Maybe a separate add(), especially as Mike Taylor and I proposed a remove() elsewhere. Perhaps implemented as an \"eval\"\noption (defaulting true) on this add/load() method rather than a separate dedicated method though, since it's not clear how common a use case it is. And there's also an argument not to add it at all unless there's a real-world use case for it.\n. AppCache unfortunately has a number of pain points at present. I think\neveryone agrees saving scripts in localStorage is a non-pure hack, but if\nyou're a developer wanting to make your pages load fast today, your options\nare limited. And in practice, it's likely to be just a few % of\nlocalStorage capacity.\nOn Fri, Mar 2, 2012 at 7:55 PM, Divya Manian <\nreply@reply.github.com\n\nwrote:\nIn my view, this use of localstorage is not conducive, and efforts should\nbe made to make the appCache better as it is dedicated for caching. I\nassert localStorage is best used with data (e.g. to-do lists, map points,\nsvg paths(?)) not for resource caching.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/1#issuecomment-4291760\n\n\n\nSent from my web browser\n. Actually, what I'm keen to see (or at least discussed) is a checksum\noption. If the cached version's checksum doesn't match the checksum option,\nre-download it.\n\n(I think there's merit in ...that would\nlet the browser get smart about caching scripts across domains.)\nOn Fri, Mar 2, 2012 at 7:26 PM, Mike Taylor <\nreply@reply.github.com\n\nwrote:\n+1! I've seen other implementations that allow you to pass in a TTL arg\nand purge it if expired, etc.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/2#issuecomment-4291226\n\n\n\nSent from my web browser\n. On reflection, the checksum/hash concept is primarily for the broader goal of cross-domain script sharing. A hash assertion gets over the lack-of-trust issue between different domains and is unnecessarily complex for a single-domain cache. I'd love to see basket address this in the future, as it's wasteful everyone downloading the same jquery from a hundred different domains. But same-domain is probably enough of a challenge for basket for now :).\n\nI'm thinking the best solution might simply be a key, ie.\nbasket\n .add('jquery-1.7.2.js, {key: 'jquery'})\n .add('app-0.0.1.js', {key: 'app'});\nAnd if you want to sprinkle some magic:\nbasket\n .add('jquery-1.7.2.js, {key: true}); // key inferred from URL to be 'jquery'\nThis of course puts the onus on the developer to rename the script URL as well as basket references to that URL whenever the script changes. (As is the common practice with cache manifests, where people include a hash or version in a comment inside cache.manifest.)\nThinking aloud here, feedback welcome!\n. It does, great job @peol. I do suggest this gets added to require() as well (which in practice will get used much more than add() imo).\n. It was proposed in #2 like this:\n.require('jquery-1.7.2.js, {key: 'jquery'})\nThe thinking being that you change the URL whenever you want to change the resource.\nIf you really want to take this approach, you could leverage the existing ETag standard, i.e. check the response header for an ETag, store it, and pass it back to the server upon next request. But I think it's overkill for the current scope of basket, in which the client and server are likely controlled and trusted by the same party. Since that's the case, just rev the version in the URL.\n. Fair enough, it's really a question for Addy to decide then, depending on\nhis views and how opinionated the library is.\nI wouldn't particularly mind this option as long as I could happily ignore\nit if I committed to keep URLs unique for different script versions.\n. ",
    "yuchi": "In this context I'd like to add my 2 cents: if this pattern becomes popular a plug in for require.js and others could do the job about API names.\n. In this context I'd like to add my 2 cents: if this pattern becomes popular a plug in for require.js and others could do the job about API names.\n. ",
    "addyosmani": "I agree that a more succinct API would be preferable here. Perhaps:\n- require() \n- add() (for merely adding to localStorage if not present, with perhaps an optional switch to overwrite if it is)\n- remove()\n- wait()\nwould cover all our needs. \nIn terms of @nimbupani's comments regarding localStorage usage here, I have to say that I'm personally still on the fence about this approach. I've read Google, Bing and Facebook engineers say that there are definitely performance benefits to storing scripts in this manner (despite localStorage not (at least in my view) having been created for this purpose). What I would like this project to do is:\n- Give developers a reference point if they do want to add localStorage script caching to their app\n- Provide public benchmarks that demonstrate whether there is any validity to using localStorage for this at all. To date, I still haven't personally seen any beyond what's been told to me and I think its needed if this idea is to have legs.\n+1 to @mahemoff. This is really just a hack until the alternatives improve.\n. I've revised the API to meet the above in the latest version. I'll be tweaking this further to cover a few more capabilities soon, but closing this issue for now.\n. @mahemoff I've added a remove() in the latest version but I think what might be needed to meet your checksum idea above are changes to add() and require() (i.e perhaps an optional switch that if passed double checks the checksum of the version being added vs whats in cache to find out if they're different). I like @miketaylr's TTL idea but maybe that's something for a future version :)\nCould we update this ticket to better reflect the checksum idea? Would like to get .remove() off the issues list if possible.\n. I really like this. I think we should support the current behaviour as well as the above two cases. TTL (if we add in the future) can be just one more option,\nOn 3 Mar 2012, at 12:16, Michael Mahemoffreply@reply.github.com wrote:\n\nOn reflection, the checksum/hash concept is primarily for the broader goal of cross-domain script sharing. A hash assertion gets over the lack-of-trust issue between different domains and is unnecessarily complex for a single-domain cache. I'd love to see basket address this in the future, as it's wasteful everyone downloading the same jquery from a hundred different domains. But same-domain is probably enough of a challenge for basket for now :).\nI'm thinking the best solution might simply be a key, ie.\nbasket\n.add('jquery-1.7.2.js, {key: 'jquery'});\n.add('app-0.0.1.js', {key: 'app'});\nAnd if you want to sprinkle some magic:\nbasket\n.add('jquery-1.7.2.js, {key: true}); // key inferred from URL to be 'jquery'\nThis of course puts the onus on the developer to rename the script URL as well as basket references to that URL whenever the script changes. (As is the common practice with cache manifests, where people include a hash or version in a comment inside cache.manifest.)\nThinking aloud here, feedback welcome!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/2#issuecomment-4300332\n. Thanks!\n. I'm using a combination of jsBeautifier and Sublime's own tab conversion. Looks like they don't like each other!. I'll hopefully get this sorted out real soon. It is bananas. Sorry about that!\n. Thanks Rick! \n. Thanks a ton for this @peol!. \n\n@mahemoff does this address the main points for what you were suggesting in #2? (we decided to not go for the magic option just yet) :)\n. Whoa. This was a nice surprise. Thank you so much for your time on this, Sindre.\nWould you like to add yourself to the contribs list just for funsies? This is a pretty nice addition. Happy to merge after.\n. Sahweet. Thanks Rick! Glad we were able to get most of the points brought up earlier addressed today ; )\n. Good work spotting that, @peol! Depending on what our definition for .wait()'s behaviour is, it should either wait until all of the dependencies in the chain above it have resolved:\nbasket.require('jquery.js').require('underscore.js').wait( callback );\n//where jquery and underscore should both be resolved before the callback is executed\nor until the .require() its been attached to has completed loading:\nbasket.require('jquery.js').require('underscore.js').wait( callback );\n//callback executed when underscore.js has completed, but we dont care about the state of jquery\nLabJS appears to opt for the former http://labjs.com/documentation.php#wait. Do we want to go with the same?\n. I would say lets go for what we both expected it to do - waiting for the chain/priors to resolve/complete before executing the callback :)\n. Just so I'm reading that correctly, would that:\n- Execute the first wait() immediately\n- Execute the first wait() when the rest of the chain has resolved?\nAll for supporting .wait() being used first in a chain, just useful to know if it was supposed to be immediate :)\n. No worries! Your latest example actually makes a lot of sense and I'm more than happy with us supporting this. Thanks for the clarification!\nI'll be sure to get support for this documented once we land it.\n. By the looks of it this should hopefully put the nail in the coffin on the tab/space inconsistencies. Thanks, Sindre! Appreciate the extra grunt tasks you've added too.\n//cc @peol \n. @sindresorhus I've just added you as a collab to the repo. If there are any grunt related updates you feel are necessary to the project, please feel free to go ahead and merge to master. You know what you're doing :) \nIf you'd prefer to have a review, more than don't mind reviewing before we merge. Thanks!\n. @sindresorhus I believe I have it listed under a recommended reading section on my site :) Love Rick's idiomatic guide. In terms of code style he generally advocates the jQuery style guide but I don't mind us adopting any additional syntax/style recommendations be has that could be useful (as long as they don't slow us down too much) ; )\n. Let's go for it. Is it worth adding a reference to the guide in our readme?\n. Haha. Thanks. I think we were adding it at the same time. I've just pushed some updates to extend the language a bit in style guide and testing sections. Also added a team section just so people know we're all working on it.\n. Looks like there was a missing http://. Thanks!\n. Thanks for putting this together!. \nI agree that this project really needs some performance testing to validate whether there are benefits to using localStorage for caching. I think there are a few different facets to benchmarking we need to consider though: there's localStorage vs alterative 'modern' storage formats and localStorage vs browser caching (which is the major thing we need to cover).\nMore random thoughts..\nFrom what research I've done IDB is slower than localStorage at the moment (as partially confirmed by the above), but I wonder if some of the problem is that there's much confusion about which storage options should be used for particular use cases.\nFor offline, there are three problems, and three solutions :\n- Application => cache manifest\n- Configuration => localStorage\n- Data => IndexedDB, file system (File API)\nFor our particular needs, maybe we should be using IDB, but the problem there is it's direly slow. Does that mean we should be looking at the File API compared to localStorage instead? Libraries like https://github.com/ebidel/filer.js could help with that, but the issue is that even if we did use the most optimal solution we'd have to implement it in a tiered way.\nie. \nIf ( fileAPI ) => use\nelse ( IndexedDB )\nelse ( localStorage )\netc.\nThat could get complicated fairly quickly. Part of me really wants to stick with localStorage for now and I think Jen's comments (lower down) here sum up why fairly well: http://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/comment-page-1/\nThat said..lets continue with the perf testing front. More data to confirm a best path forward either way cant be a bad thing :)\n. I agree with that ^. We could either bring this up with dev-rel on Moz/Opera/Chrome fronts, speak to implementers (via mailing lists) or speak to the jQuery standards team http://blog.jquery.com/2011/10/24/announcing-the-jquery-standards-team/\nIn terms of what we do with this project, I see us sticking with LS until something better comes around.\n. You did get one or two responses :) That said, its looking like there might be better luck on the official mailing lists.\n. I think 2.5mb is absolutely fine for most applications. I have yet to see a (properly built) web app that requires more than that for their JS payload and I think it should be okay to use.\nWith respect to the File/FileSystem API I mentioned this further up in the thread. The problem is that support for this is currently limited to Chrome http://caniuse.com/filesystem. We could say.. use it if supported otherwise fallback to localStorage but is that too much effort? What do you guys think?\n. I totally agree ^ :)\n. haha. groundbreaking my foot :) At least we know that others are looking at this space seriously too!\n. It might be worth bringing @beverloo from Chrome into this discussion as he might be able to shed some light on this. I also have to say: I wonder just how many (or how large) the scripts people are trying to load in must be for the performance to be visibly impacted. In my own experiments I've never seen read/writes taking so long that a user would actually notice it, but I'm generally dealing with payloads of under 500KB. Do we think others are assuming the maximum that can be stored for their benchmarks?\n. Great article. I found the comments (and links from there) to be useful too. Its fascinating that developers working at vendors (Heillman and Kinlan) are arguing that we shouldn't be using LS because of perf issues, size etc. but developers who have been using it in the wild feel that this is completely unnoticable. \n. Some more related reading I came across this morning:\n- http://sunpig.com/martin/archives/2011/05/21/considerations-for-caching-resources-in-localstorage.html (2011, but relevant points about edge cases)\n- http://my.opera.com/shwetankdixit/blog/2012/03/09/localstorage-do-you-want-fries-with-that\n- http://www.quora.com/Does-it-make-sense-to-use-localStorage-for-caching-JS-instead-of-the-browser-cache-for-desktop-websites\nCuriously, whilst Chrome's localStorage perf being slow is well known, there doesn't currently appear to be a lot of effort going into improving this at the moment:\nhttp://code.google.com/p/chromium/issues/list?can=2&q=localstorage&colspec=ID+Pri+Mstone+ReleaseBlock+Area+Feature+Status+Owner+Summary&cells=tiles\nI wonder if we can do something about this (I believe Sindre already explored the standards lists, but perhaps sorting out Chrome could be a starting point).\n. > That means a large amount of data in localStorage could actually increase page load time because JavaScript needs to wait before executing.\nI too agree that a realworld storage benchmark across all browsers is needed. Until it's clear (and been validated by others) that loading JS from LS can be done without it blocking pageload (somehow), I guess this project will be remaining in an experimental state. Thats okay, though. One day doing this will be both safe and relatively efficient :)\n. Lets run the above on a few mobile devices to see how well that fairs - I'll try some this afternoon :). We've never been able to accurately benchmark basket against the browser cache (and may not be doing so with the above either), but I'm interested in any efforts that get us closer to that point. \n. I think it's worth us performance profiling the newer implementation with RSVP and see how much worse/different the performance is since the last version. If we discover the performance has taken a large hit, we should consider switching to offering builds with a promise-less API as well as those with RSVP support.\n. Some more data https://insouciant.org/tech/time-to-load-localstorage-into-memory/\n. Interested read http://www.mobify.com/blog/smartphone-localstorage-outperforms-browser-cache/ also see the comments.\n. I love it! One very very minor concern: would supporting so many signature variations confuse people? Like..could/would someone use an inline callback in any of the objects passed to require in the below?\nOn 8 Mar 2012, at 19:37, Andr\u00e9e Hanssonreply@reply.github.com wrote:\n\nSo, me and Sindre discussed the possibility of pulling in several files within one .require(). It would look something like this:\nbasket.require({\n   \"foo-1.2.3.js\": {\n     key: \"foo\"\n   },\n   \"bar-3.2.1.js\": {\n     key: \"bar\",\n     overwrite: true\n   }\n })\n .wait(function() {\n   // use pulled-in files\n });\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25\n. I actually like that suggestion. Perhaps include add() as merely a convenience method that pipes back to the below if it stays?\n\nOn 8 Mar 2012, at 22:36, Sindre Sorhusreply@reply.github.com wrote:\n\nI've also noticed there are some duplication between them. It is however useful to be able to only load a script into localStorage for later use. Preloading. But we could drop the .add() method and instead just have a property in our .require() method:\njavascript\nbasket.require({\n   url: 'http://website.com/foo.js',\n   id: 'foo.js',\n   execute: false\n});\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25#issuecomment-4404453\n. Whilst a very very trivial note, the only reason .add() was named so was because people typically add things into a basket and that idea (I felt) was easy to grasp. I don't particularly mind us renaming it at all, but Sindre does raise an interesting point.\n\nA single-use .add()/.store() probably wouldn't add that much value if we've expanded require() to handle most use cases. Granted than many of the most common script loaders are sticking with .require() in some form, I'm okay with us dropping the sugar. \nOnce we've finalized the API for the next version, I'd love to get a few people actually trying out the changes so we can see whether a minimal set of methods vs. some added sugar would be needed.\n. Not quite everyone :)\nThere are definitely a few people I have in mind for trying this out (including those from the Google and Facebook camps, given they've experimented in this area before). \nI'd also like to reach out to the Sencha guys and see what their thoughts are on our (relatively lightweight) approach vs. what they've done for Touch 2. The FT and one or two other large sites have been investing time in this area, so who knows? We might able to get some decent feedback when the next version is ready :)\nWhilst this thread is probably not the best place for a discussion about this, I think we'll need to discuss our long-term goals for this project. It very much began as an experiment and as it evolves we'll need to decide what is left to make it truly production-ready (with a few case studies of people using it in practice etc).\n. I think that pretty much nails it!. \nWith respect to the perf tests, one thing I'm going to do at the end of this weekend (or someone else can if they're free) is collect all of the relevant jsPerf performance tests related to this area (localStorage writes, vs objects etc.) and include them in a Perf section on our wiki. We currently have most of them mentioned across issues.\nThat can give us a starting point to defend the position that localStorage can be used for files and there are browsers where this is relatively not expensive. \n. Indeed you have :) I was thinking more long-term that moving them to the wiki would be useful (Im assuming we'll eventually be closing 24)\n. (please forgive the brevity as I'm mobile)\nMichael Mahemoff suggested that we opt for a checksum/hash approach a while back for versioning, but I think your expanded notes and justification make a lot of sense Sindre. My view is that there's no reason we shouldn't be doing the below. You're bang on right about not caring about the overwrite but wouldn't we need to redownload a script that is already cached just to compare hash/checksums? \n. Appreciate the input, @mahemoff!\nTo be honest, I've seen both approaches taken with similar levels of success. I'm completely open to us reconsidering the direction taken with hash/uniques, but what we'll probably do is wait until we've heard what the feedback is from users on the approached using hash/unique. At the end of the day, I want us to balance least effort (on a user's part) with flexibility.\n.  it's worth considering further :) Would we simply be re-fetching once TTL is over? If so does that mean that the version fetched next persists with the same TTL limit (I assume so)\nOn 8 Mar 2012, at 19:56, Andr\u00e9e Hanssonreply@reply.github.com wrote:\n\nWe talked about adding this, should we? It would be a nice addition perhaps. Syntax:\nbasket.add('foo-1.2.3.js', { key: 'foo', ttl: '1months' });\nmonths in the string could be minutes, hours, days, weeks, years as well. Too advanced?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/27\n. Cool. Sounds like a plan :)\n. Question: would there be a case where someone would want the TTL value to be a mix of weeks and days (e.g 1 week 5 days or 1 year 30 days etc?). Would that be overkill to support? (i.e ttl: {  months: 1, days: 10  })\n. +1 Let's roll with that :)\n. Just leaving this here for future reference: https://github.com/pamelafox/lscache\n\nPamela also approached a TTL-like solution for her project but did something interesting with trying to remove old entries automatically if you were close to exceeding the available LS space. We might want to try something like this at some point :)\n. > What is better? remove the oldest script or who has less time to expire\nI would say the oldest script. Removing all keys trying to add the big file is definitely something we want to avoid.\n. Thanks for the PR, @amrnt.  Some background info: when I created the first version of basket, I purposefully left out support for CSS loading of assets as this was something deemed inappropriate for localStorage caching by a few members of the community. This was in part because we want to avoid any FOUT but also, once you move beyond scripts you begin to get into AppCache territory (which arguably is better suited to CSS).\nI won't close this immediately, but it would be useful to hear what @peol and @sindresorhus think.\n. As we appear to be at an agreement about shelfing this, I'm going to close for now. We can revisit the PR if we decide to change our mind about this in the future (or at most, document in the wiki for anyone wondering about the same).\n. I think we should handle this internally, but I'm wondering if it would make sense to also make this behaviour configurable (i.e have a sane default but one that can be overridden). \n. Might not be able to take a look at it today but can definitely do it this week! As long as no one beats me to it :p\n. Nice work, Sindre. I'm happy with us proceeding with this in its current form. We're going to review the naming of all API methods prior to the next release so Im okay with us referring on naming changes till then.\n. We should be handling that a little more elegantly. Thanks for flagging! :)\nI think some discussion probably needs to be had regarding what we do if a single file in a chain 404's like this: should an exception be thrown? should we continue loading the other items in the chain that may be dependencies? should the chain die altogether? \nIt would also be worth considering whether we should be handling anything for other HTTP errors that might occur.\n//cc @sindresorhus @peol might have more thoughts on this :)\n. @sindresorhus I think we should do that too. For some additional reference, what libraries like yepnope have looked at before are error timeouts (e.g if the script can't be loaded within a time window N, timeout and throw an exception). Their thread for reference https://github.com/SlexAxton/yepnope.js/issues/61\n. If we implement let's go ahead and fail the chain if a 404 is encountered. \n. I think the behaviour @wibblymat described as ideal is pretty much what we're after. Let's try to tackle this for 0.4 if we can agree on the implementation.\nI appreciate the reminder about promises better handling this use case as I hadn't thought about them being if great assistance with this problem until now.\n. What would be the benefit of this over the server explicitly providing the N cached scripts in a concat and minified form that you just cache once? Are you effectively looking for a way to do http://...../scripts.js?get=file1.js,file2.js etc?\n. Sounds good to me. Let's revisit in Jan/Feb and see if there's interest in a new version with more features. Cheers guys!\n. +1 to the above. There is however an AMD loader that loads from localstorage  (also Web SQL, IndexedDB and FileSystem API via a configured storage  implementation) in case that helps https://github.com/zazl/lsjs \n. Thanks for the fix @peol :)\n. Thanks! Going to play around with this this evening. \n. Thanks @felipemorais! Nice work :)\n. I agree with the suggested changes so far but will take another look and see if we're missing anything. Thanks for the inline comments @peol and @sindresorhus and for kick-starting this off @felipemorais :)\n. On 45, I think we should wait until 0.4 to address moving towards something more inline with Promise spec. Otherwise this looks good to me :) @sindresorhus anything more to add? \n. Merged. Lets create new issues to continue discussions :)\n. I think we should tag the release, come up with an updated changelog, put it on Bower and announce on Monday. How does that sound?\n. Tempted to say optional dependency but it looks small enough to include by default.\n. Thanks again!\n. Works fine with latest for me.\n. Is it possible to get this to pass the build? Nice work, otherwise :)\n. Excellent work all :) \n. I think we should announce on twitter. Wednesday sound good?\n. Looks like Wednesday slipped. Monday sound good to everyone? We can tweet out about the release and link to a changelog.\n. Saw this a few days ago, but that's really awesome. I'm glad to see this getting some mainstream attention :)\n. @sindresorhus I feel like the happiest man alive. the happiest!\n. Wow. Nice work! :)\n. I think getting it on Bower makes sense. @wibblymat would you like to try registering it as a Bower package?\n. I just wanted to say how stoked I am for us to have this in place. An update to the docs would be fantastic to have. \n. An async option would be nice :)\n. @felipemorais did you have any interest in exploring adding an implementation of this to basket?\n. Correct me if I'm wrong, is this similar to the LAB.js wait() method? http://labjs.com/documentation.php. If so, using that signature might look like:\njs\nbasket.require({url: 'jquery.js'}).wait()\n  .require({url: 'backbone.js'})\n  .require({url: 'main.js'})\n  .then(entryPoint, errorHandler);\nWould that be cleaner? Again, sorry if I've misunderstood what you're doing.\n. Ah! That makes sense now. Thanks for clarifying @wibblymat. With that in mind, thenRequire lgtm too!\n. Wow..this is amazing. Thank you so much @wibblymat :) I've had a read through and the updates you've made look fine. There are some very very minor tid bits like the version of jQuery we reference in our examples being out of date, but we can live with that. I'll merge now.\nBtw, if you would be interested in continuing to contribute to basket, we would be happy to have you on the team (in which case, please feel free to send over a PR to update the readme!) \n. Maybe it would also be useful for us to somehow summarize the major changes since 0.2. e.g promises and so on near the top? \n. Thanks @wibblymat :)\n. @wibblymat is this one good to be closed?\n. I ran into this yesterday but didn't get a chance to investigate further. Thanks for creating an issue @wibblymat. I definitely think we should mention this change in the changelog/readme.\nI would be up for us opting for the simple solution now, but creating a separate issue to track how we can address this better in the future. Would you like to bring in a69f5c6?\n. No worries! I appreciate the push. With this now in place, should we re-tag and release? Anything else left to go?\n. Cool. I'll retag sooooon :)\n. Awesome! Thank you :)\n. I've seen a few new efforts to provide support for this in other projects.\nLet's see what the implementation size is like and we can make a call on\nwhether to include in core or have it as a supported plugin. I'm up for\nexploring :)\nOn Dec 21, 2012 8:36 PM, \"Andr\u00e9e Hansson\" notifications@github.com wrote:\n\nI wouldn't mind the support for it, but there's issues around knowing when\nCSS has been loaded/applied to the document cross-browser, that's why\nprojects like require.js only have support for them with semi-official\nplugins that are not guaranteed to work without FOUC.\nHowever, we could support it but not guarantee the CSS to be loaded before\ncontinuing queued stuff. See more here:\nhttp://requirejs.org/docs/faq-advanced.html#css\nAny thoughts, @addyosmani https://github.com/addyosmani @sindresorhushttps://github.com/sindresorhus?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/60#issuecomment-11626234.\n. Would someone like to try taking this on? We could implement a POC with CSS support as a branch and test how reliably it might work. \n\n@amrnt you initially tried implementing this in https://github.com/addyosmani/basket.js/pull/28 a year ago. Would you be interested in taking another stab at this?\n. I fully support CSS support being better explored as an official addition\nto basket. Any pull requests that help improve our handlers for this would\nbe welcome.\nOn 26 Dec 2013 02:33, \"Andrew Wakeling\" notifications@github.com wrote:\n\nPerusing over #76 https://github.com/addyosmani/basket.js/pull/76, #77https://github.com/addyosmani/basket.js/issues/77,\n84 https://github.com/addyosmani/basket.js/pull/84 and this issue, I\nappears that there isn't any intention for basket.js to handle anything\nbeyond JS. i.e. I can load anything with the execute: false flag, but\nit is up to me to explicitly handle the response.\nI support this decision for \"core\" basket.js, however it might be great to\nsee something like the addHandler approach suggested in #76https://github.com/addyosmani/basket.js/pull/76\n.\nPlease keep in mind that dynamically adding CSS isn't as trivial as the\napproach suggested in #76https://github.com/addyosmani/basket.js/pull/76.\nHere are some reasons https://github.com/andrewwakeling/ie-css-bugs why.\nI put together basket-css-examplehttps://github.com/andrewwakeling/basket-css-exampleusing\ncreate-stylesheet https://github.com/andrewwakeling/create-stylesheetto show an example of basket.js loading CSS. I have identified some issues\nbut I certain there are more.\nIf people still would like to see CSS work better with basket.js, I am\nhappy to help out.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/60#issuecomment-31209320\n.\n. I think we should try to come up with a clean solution to this and I'm not opposed to doing a 0.3.x soon if it can tackle it well. \n\nShould we consider bundling RSVP as a part of the build if it's a hard dependency or offering a way to build it in if we're not taking care of that?. Ideally, when you download basket you shouldn't have to worry about getting anything else to work with it imo.\n. Thanks Andree!\nOn Fri, Dec 28, 2012 at 11:13 AM, Andr\u00e9e Hansson\nnotifications@github.comwrote:\n\nI agree. I can modify the build script to spit out an\nadditional concatenated version later today.\nOn Friday, December 28, 2012, Addy Osmani wrote:\n\nI think we should try to come up with a clean solution to this and I'm\nnot\nopposed to doing a 0.3.x soon if it can tackle it well.\nShould we consider bundling RSVP as a part of the build if it's a hard\ndependency or offering a way to build it in if we're not taking care of\nthat?. Ideally, when you download basket you shouldn't have to worry\nabout\ngetting anything else to work with it imo.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/addyosmani/basket.js/issues/62#issuecomment-11724137>.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/62#issuecomment-11729815.\n\n\nAddy Osmani\nDeveloper Programs Engineer at Google\nBlogger at: http://addyosmani.com\nPhone: +44 7771 334170\n. You rock @peol! :D\n. @peol what do you think about this?\n. Thanks @peol and @jschilli!\n. +1\n. I'll answer on the last point:\nWe're currently considering expanding basket to handle CSS and other resource types. Technically, there's nothing really stopping us from doing this. The project was originally aiming to just demonstrate script caching benefits over browser cache/other options, however it's possible such features become supported in the near future.\n. To clarify, browser vendors acknowledge that localStorage should ideally be async and there may be work put into changing this behavior in the future. I agree that LS should be for smaller pieces of data, however, from a usability perspective it's easier to use and navigate around the rough-edges than appcache is. We welcome any and all efforts to improve the offline landscape for developers.\n. Very curious. I hadn't seen asyncStorage before. Something tells me if we were to re-implement this on top of basket.js (i.e using IndexedDB) some people might have a cow :p. It would also have to be done in a way where maximum cross-platform compat was ensured. @sindresorhus wdyt?\n. @sindresorhus I should have elaborated :) I was asking what your thoughts were on the idea of baking asyncStorage support into basket. I've never thought particularly high of IDB and agree with your summary of it being inadequate for a caching lib of this sort.\n. I think this falls under a general \"should we support resources other than scripts\" question. We've been getting these a lot lately. @sindresorhus @peol @wibblymat Implementation wise this isn't hard. Should we do it or punt?\n. If we do go down this path it would be useful to discuss some of the challenges involved:\n- CSS? https://github.com/addyosmani/basket.js/pull/28, https://github.com/addyosmani/basket.js/issues/60\n- images http://robnyman.github.com/html5demos/localstorage/\n- Other/any files.\nIt would be interesting to see basket become a generic asset cacher.\n. The implementation review lgtm so far, but it would be great to get a few more tests in :)\n. Thanks for improving the test coverage of the implementation. I think that since we're not tight for time on the next release it would be useful to wait on a reply to the group thread. Alternatively, maybe there's a way a Sinon helper could be written that does provide the async. behavior you're after?\n. Let's chase this up again before we want to do another release. I think there's room for us to address both plugins and this for it.\n. That's a valid concern. I wouldn't mind appending the keyname with the content-type received if it would help make this more feasible.\n. Thanks for pushing the changes. We're going to spend some time stress testing the implementation and if all goes well we might request for tests to be added in order for us to merge this.\n@sindresorhus @peol @wibblymat do you think this type of behavior should be in the project by default or added as a type of extension?\n. I actually like that approach. We could document them and perhaps also have a \"plugins\" directory for those wishing to just manually add support for these things. \n. @wibblymat do you think we should implement a way to trivially add plugins to basket? If so, would you like to describe further API capabilities/what it's limitations would be? might be interesting to explore.\n. @wibblymat I just wanted to let you know that I reviewed your proposal a few times and I really liked it. Thanks for writing it up! Let's discuss it further in early March once a few other projects get wrapped up :)\n. Edge confirmed that whilst there are alternative mechanisms for caching data offline, developers should continue using what works best for them as long as they benchmark it.\nWe have a thread going on internally about how effective solutions like basket are in practice but agreement that browser cache, appcache and local storage would benefit from improvements.\nI also liked your proposal :)\n. I feel like basket.js is used as a reference implementation rather than directly as an include by many people. If that's the case, I actually would love for us to include plugins for it that solve caching different resource types so that the community have examples for solving that problem. Perhaps after things have calmed down with Bower we could re-explore this.\n. sgtm. So, we're currently listed as basket.js. Would it make more sense to be bower install basket?. Either way, we can certainly add this to the homepage soon.\n. The above SGTM. \n. i think we should tag and release a new version and mention on bower at the same time. @wibblymat wold you like to put together a PR for mentioning Bower on the homepage?\n@sindresorhus, worth us documenting/including a plugins directory with the CSS loading changes in #76 for those interested? If not we can definitely hold off until we've reworked our architecture to be a more generic asset cache (per #81)\n. :+1: Once again, thank you so much for taking the time out to work a little more on this project. It means a great deal to us :)\n. Whoa! We were not expecting to see this so soon. Great work, @wibblymat :cake:\n. Re-reading through the proposal, (forgive me ignorance) but I couldn't fully understand the use case for caching the result, but always fetching live. Is the idea that some other process may consume the cached data but the loader in that scenario just cares about always fetching latest regardless?\n. Aha. Now that makes sense. Thanks for the explanation :)\n. :+1: \n. Spoke to @wibblymat about this yesterday. It looks like we should just need some docs changes and should be in a good position to land once those are written up. Great work once again!\n. Time to merge this baby! Let's handle docs as part of #85 :dancer: \n. Let's try to get this done some time in October. It would be fantastic to get a new release out with some docs.\n. No progress on the docs for this just yet. @wibblymat has been pretty busy with Bower and the rest of the team with Yeoman. Mat, do you think you might have some time over the next few weeks to add some initial docs for your updates? We can definitely push out an update before Christmas if so.\nAlternatively: if anyone in the community would like to help us out here contributions are always welcome :)\n. Certainly worth considering. \n. Thanks for the suggestion. We've considered alternative storage methods a few times before but I believe the consensus was that this would be outside the scope of this project. Instead, we generally delegate to either using Lawnchair or a solution like https://github.com/agektmr/PortableCache.js, which does solve the same tiered storage question you present above. Could you try it out and let us know if it solves your use case?\n. Thanks for sharing the info about bag.js, Vitaly! I would be really interested to hear what @wibblymat and @sindresorhus think of the changes in your project as we were just talking about this the other day. I personally wouldn't mind us exploring other storage formats if we can land them in a way that is modular or can be added in an optional way that wouldn't heavily increase the basic script size for all users.\nCould you talk us through how you've approached this? Does your core include larger storage support directly? Love to hear more!\n. re-pinging @wibblymat and @sindresorhus for their opinions here.\n. and re-pinging again.. \n. ### Feasibility review\n- Basket.js is currently 4.4KB and 1.1KB minified and gzipped. Switching to bag.js takes us up to 3.2KB gzipped + minified. Quite a large change. I would expect us to try offering a build of bag/basket something smaller than 3.2KB which just localStorage support for legacy users and offer up the complete build for developers interested in the whole thing. That said, 3.2KB is still relatively small considering the additions we get. How modular do you think we could get @puzrin? We could always land the changes then work towards modularity if we decide to move forward with the changes.\n- Changing over means that we would not be 100% backwards compatible. I would be interesting in nailing down exactly what breaking changes this brings (what in the bag.js API doesn't cover what is in basket?) over so that at least, we can document them if we go ahead. At present, basket.js does one thing and does it well. Some might argue that what basket.js offers at present is enough and that the newer additions may not be used as often. I'd love to hear more from users here.\n- We recently landed a bunch of changes around different types of resource handling. Are you using the same codebase for that, does bag.js achieve the same thing or similar in terms of what is possible?\n- The changes to tests I'm interested in, but they won't be affecting a decision on my part. Your test coverage includes tests for most main use-cases so we should be solid on that front. Version bump is also okay :)\nOne idea is to label the current version of basket.js a final 1.0 and make the bag.js version our 2.0, which could indeed come with breaking changes.\n. also cc @andrewwakeling for thoughts\n. Thanks for getting back to the questions so quickly :)\n- I'll read up on the adapters, but anything that gives us pluggable options would be amazing. That would definitely make this work landable.\n- Re: incompatibility. We had once discussed using https://github.com/slightlyoff/async-local-storage to offer an async API that felt like localStorage on top of IndexedDB. If we're basically getting a basket-like API on top of the other storage forms, I would be okay with the break in API.\n- Re: callbacks vs promises. Is there a reason bag.js prefers callbacks to promises? With ES6 promises landing in browsers and a shim being available on top of RSVP, it seems like a step backwards to not support them. Is this something we might be able to change? I'm just trying to understand the value of the callback approach.\n- Thanks for your explanation of the implementation and differences. I agree that we can improve the expiration logic to be a little closer to what the current basket offers. I also think that we could help adapt the coding style to adhere to what we've been using so far.\nI'm going to spend time reviewing the rest of the bag.js implementation today. Once again, I REALLY appreciate the effort you're taking to explain it to us and work to maybe contribute it back to the project. I'd love to see that happen.\n. That's completely understandable. We all have our personal choices :) In my opinion, we could probably switch bag.js to use a similar RSVP based promises solution but I'll review how much work would be involved and how much I could help with it. \nBtw, this evening I pushed a new pre-release for basket.js with some of the recent changes we've been working on. I wouldn't mind if 0.3.x was the last version to support our current API. I'll do some research on just how many users are currently relying on 0.3.\n. I actually haven't had a chance to compare final binary sizes here at all. What are folks thoughts on us switching over to using the global Cache API that used to just be part of Service Worker but is now part of the global window and in Chrome (soon coming to Firefox)? We mentioned it in #131. If it's less desirable than us looking into other storage mechanisms we can think about that. Ultimately, I think continuing to strive for a lean, but modern base here would be a good target.\n. From their current readme, creating a promise is done via var promise = new RSVP.Promise(function(resolve, reject) so we would need to update https://github.com/addyosmani/basket.js/blob/gh-pages/lib/basket.js#L48 in order for this to work again.\n. @JonDum btw, I don't suppose you would be interested in putting together a PR to fix this, would you? :)\n. I've fixed this locally. Pushing the patch to master soon. The update has broken two tests that need to be resolved.\n. I'd like to start opening up basket.js to contributions of this sort, even if we're just documenting their existence - do you have more time to flesh this out a little?\n. It looks like this might best exist as a dedicated RequireJS plugin. If you see yourself improving it/working on it in the future I'd recommend creating a separate open source project that we link to from the README, otherwise we could include it here but couldn't guarantee direct support for it from the team.\nI like the first of these ideas most atm. Wdyt?\n. Totally understandable @wibblymat. We'll figure out another way to get a new release out :) No worries!\nHappy new year!\n. Thanks for raising the issue. I agree we should add a custom handler for this until its fixed upstream. I'll be keeping an eye on the linked thread to see where this goes.\n. Build's are all green and these changes LGTM. Thanks for looking into this, @wibblymat! Totally forgot about the timeout edits I made after the RSVP upgrades. Glad someone solved the test issues :) \n. Thanks for the PR. I understand how the implementation works, but could use a little convincing of the use-case :) If you're working on an app where you have control of the locally served files, wouldn't there be a low chance of a script not being available? Any extra details would be useful :)\n. \n. I vote for 1. \n. Changes LGTM. Thanks!\n. If you'd like to go ahead and set that up I would be fine with it :) Thanks!\n. Thanks!\n. I've reviewed. These changes LGTM for a merge. \n. This appears to be a more general issue with iOS cookie disabling. Without the ability to use localStorage, basket isn't going to be able to handle caching behind the scenes. If you could let me know if you were running into issues with loading completely breaking with LS off, that would be useful. Today the best answer I can offer is: we need localStorage and cookies enabled to work.\n. Basket can technically be used as a standard non-cached script loader, but I would recommend using other existing options to avoid loading in the cache handler logic for users where it wouldn't actually be used for that purpose.\n. I have personally never run into the permission denied issue with localStorage here, but it wouldn't surprise me if this happened in a small number of circumstances. I'm not opposed to us factoring it in to our API, but would like to learn more about the data driving the ask. Did your logs mention if these were users from a particular browser?\n. My only concern with try/catch is V8 has limited ability to optimise functions using this construct. If someone wants to throw together a PR we can profile and check if this will actually be an issue.\n. Is basket.js breaking when executed in IE9 without this fix in place? Some more description here would be useful :)\n. Friendly ping.\n. Closing due to no response. If you get a chance to reply, we'll happily reopen :)\n. Thanks for your contribution. We'll review it shortly. In the mean time, would you be able to add tests for this so that if the change lands it is possible to make sure this behaviour doesn't break again in future?\n. :+1: \n. We've had this request quite a lot in the past. In general, the approach we have taken is trying to allow basket.js to be extensible so that such layers for handling CSS and other resource types could be added without too much pain. Take a look here for some examples of extensions being used for similar purposes: https://github.com/addyosmani/basket.js#examples\n. This fails the build. Could you take a look at the cause?\n. Closing due to the age of this PR. We appreciate you originally working on this regardless, @lagden :) \n. LGTM.\n. Breaking post https://github.com/addyosmani/basket.js/pull/117, which showed green at the time here and on Travis. I'll review what's breaking and get it addressed.\n. Fixed in https://travis-ci.org/addyosmani/basket.js/builds/49891358\n. :+1:\n. https://github.com/acconrad/basket.js/blob/1f24b573b05d797123da91991903654e2753e554/lib/basket.js#L188 does indeed do this. Merging for consistency.\n. Thanks!\n. Let's coordinate with Mat when Shed is ready for broader use then :)\n. Update: We're planning on exposing the Cache API as a global (probably in Chrome 43) per https://chromium.googlesource.com/chromium/blink/+/53d80dc622ba866d563d4934c98777a42d4c3e96. This would open up the door to basket switching over to using that API.\nWe have some choices there. Do we become a tiered solution? i.e if Cache API is present, use that, otherwise use localStorage - or - do we attempt to switch to a Cache API polyfill (which would mean relying on IndexedDB)\n. The exception you're seeing indicates there's a cross-domain issue caching/loading the resource. You need to ensure you're caching files on the same origin, which the browser considers a different domain (so it blocks the overall flow). Try caching the library from your own domain (for testing purposes, this would also be localhost).\n. Please include a description with your PR. Your comment mentions JSX in the diff but you don't explain why this would be useful to other users :)\n. \u251c\u2500\u2500 basket.full.map\n\u251c\u2500\u2500 basket.full.min.js.map\n\u251c\u2500\u2500 basket.js\n\u251c\u2500\u2500 basket.min.js.map\n\u2514\u2500\u2500 basket.min.map\nThe above is the current output when bower installing today. We ship the sourcemaps for minified builds, but aren't actually shipping the minified builds themselves. Merging. Thanks!\n. LGTM\n. @sindresorhus I'm personally fine with the community extending the inspection capabilities of basket. We'll need to review how large an impact this has on source as per any PR, but otherwise curious what this would look like, @foxx :+1:\n. If memory serves your comments are correct. We may not have added this to the docs as it wasn't considered for long-term use, but given its been there a while let's add to the docs.\n. cc @foxx \n. > This PR is the simplest way of achieving the desired effect, but it may make sense to refactor it so that fetch isn't responsible for this handling\nIf possible, this would be desirable. Thanks for the patch btw.\n\nCould also check if the passed object is a promise by checking instanceof RSVP.Promise.\n\n:+1: \n\nIf the maintainers are on board, I'll gladly add corresponding tests.\n\n:+1: \n. I'm fine with this addition. We haven't really added non-developer verbiage to our projects before, but interested in seeing how this takes. Thanks!\n. I agree that a more succinct API would be preferable here. Perhaps:\n- require() \n- add() (for merely adding to localStorage if not present, with perhaps an optional switch to overwrite if it is)\n- remove()\n- wait()\nwould cover all our needs. \nIn terms of @nimbupani's comments regarding localStorage usage here, I have to say that I'm personally still on the fence about this approach. I've read Google, Bing and Facebook engineers say that there are definitely performance benefits to storing scripts in this manner (despite localStorage not (at least in my view) having been created for this purpose). What I would like this project to do is:\n- Give developers a reference point if they do want to add localStorage script caching to their app\n- Provide public benchmarks that demonstrate whether there is any validity to using localStorage for this at all. To date, I still haven't personally seen any beyond what's been told to me and I think its needed if this idea is to have legs.\n+1 to @mahemoff. This is really just a hack until the alternatives improve.\n. I've revised the API to meet the above in the latest version. I'll be tweaking this further to cover a few more capabilities soon, but closing this issue for now.\n. @mahemoff I've added a remove() in the latest version but I think what might be needed to meet your checksum idea above are changes to add() and require() (i.e perhaps an optional switch that if passed double checks the checksum of the version being added vs whats in cache to find out if they're different). I like @miketaylr's TTL idea but maybe that's something for a future version :)\nCould we update this ticket to better reflect the checksum idea? Would like to get .remove() off the issues list if possible.\n. I really like this. I think we should support the current behaviour as well as the above two cases. TTL (if we add in the future) can be just one more option,\nOn 3 Mar 2012, at 12:16, Michael Mahemoffreply@reply.github.com wrote:\n\nOn reflection, the checksum/hash concept is primarily for the broader goal of cross-domain script sharing. A hash assertion gets over the lack-of-trust issue between different domains and is unnecessarily complex for a single-domain cache. I'd love to see basket address this in the future, as it's wasteful everyone downloading the same jquery from a hundred different domains. But same-domain is probably enough of a challenge for basket for now :).\nI'm thinking the best solution might simply be a key, ie.\nbasket\n.add('jquery-1.7.2.js, {key: 'jquery'});\n.add('app-0.0.1.js', {key: 'app'});\nAnd if you want to sprinkle some magic:\nbasket\n.add('jquery-1.7.2.js, {key: true}); // key inferred from URL to be 'jquery'\nThis of course puts the onus on the developer to rename the script URL as well as basket references to that URL whenever the script changes. (As is the common practice with cache manifests, where people include a hash or version in a comment inside cache.manifest.)\nThinking aloud here, feedback welcome!\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/2#issuecomment-4300332\n. Thanks!\n. I'm using a combination of jsBeautifier and Sublime's own tab conversion. Looks like they don't like each other!. I'll hopefully get this sorted out real soon. It is bananas. Sorry about that!\n. Thanks Rick! \n. Thanks a ton for this @peol!. \n\n@mahemoff does this address the main points for what you were suggesting in #2? (we decided to not go for the magic option just yet) :)\n. Whoa. This was a nice surprise. Thank you so much for your time on this, Sindre.\nWould you like to add yourself to the contribs list just for funsies? This is a pretty nice addition. Happy to merge after.\n. Sahweet. Thanks Rick! Glad we were able to get most of the points brought up earlier addressed today ; )\n. Good work spotting that, @peol! Depending on what our definition for .wait()'s behaviour is, it should either wait until all of the dependencies in the chain above it have resolved:\nbasket.require('jquery.js').require('underscore.js').wait( callback );\n//where jquery and underscore should both be resolved before the callback is executed\nor until the .require() its been attached to has completed loading:\nbasket.require('jquery.js').require('underscore.js').wait( callback );\n//callback executed when underscore.js has completed, but we dont care about the state of jquery\nLabJS appears to opt for the former http://labjs.com/documentation.php#wait. Do we want to go with the same?\n. I would say lets go for what we both expected it to do - waiting for the chain/priors to resolve/complete before executing the callback :)\n. Just so I'm reading that correctly, would that:\n- Execute the first wait() immediately\n- Execute the first wait() when the rest of the chain has resolved?\nAll for supporting .wait() being used first in a chain, just useful to know if it was supposed to be immediate :)\n. No worries! Your latest example actually makes a lot of sense and I'm more than happy with us supporting this. Thanks for the clarification!\nI'll be sure to get support for this documented once we land it.\n. By the looks of it this should hopefully put the nail in the coffin on the tab/space inconsistencies. Thanks, Sindre! Appreciate the extra grunt tasks you've added too.\n//cc @peol \n. @sindresorhus I've just added you as a collab to the repo. If there are any grunt related updates you feel are necessary to the project, please feel free to go ahead and merge to master. You know what you're doing :) \nIf you'd prefer to have a review, more than don't mind reviewing before we merge. Thanks!\n. @sindresorhus I believe I have it listed under a recommended reading section on my site :) Love Rick's idiomatic guide. In terms of code style he generally advocates the jQuery style guide but I don't mind us adopting any additional syntax/style recommendations be has that could be useful (as long as they don't slow us down too much) ; )\n. Let's go for it. Is it worth adding a reference to the guide in our readme?\n. Haha. Thanks. I think we were adding it at the same time. I've just pushed some updates to extend the language a bit in style guide and testing sections. Also added a team section just so people know we're all working on it.\n. Looks like there was a missing http://. Thanks!\n. Thanks for putting this together!. \nI agree that this project really needs some performance testing to validate whether there are benefits to using localStorage for caching. I think there are a few different facets to benchmarking we need to consider though: there's localStorage vs alterative 'modern' storage formats and localStorage vs browser caching (which is the major thing we need to cover).\nMore random thoughts..\nFrom what research I've done IDB is slower than localStorage at the moment (as partially confirmed by the above), but I wonder if some of the problem is that there's much confusion about which storage options should be used for particular use cases.\nFor offline, there are three problems, and three solutions :\n- Application => cache manifest\n- Configuration => localStorage\n- Data => IndexedDB, file system (File API)\nFor our particular needs, maybe we should be using IDB, but the problem there is it's direly slow. Does that mean we should be looking at the File API compared to localStorage instead? Libraries like https://github.com/ebidel/filer.js could help with that, but the issue is that even if we did use the most optimal solution we'd have to implement it in a tiered way.\nie. \nIf ( fileAPI ) => use\nelse ( IndexedDB )\nelse ( localStorage )\netc.\nThat could get complicated fairly quickly. Part of me really wants to stick with localStorage for now and I think Jen's comments (lower down) here sum up why fairly well: http://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/comment-page-1/\nThat said..lets continue with the perf testing front. More data to confirm a best path forward either way cant be a bad thing :)\n. I agree with that ^. We could either bring this up with dev-rel on Moz/Opera/Chrome fronts, speak to implementers (via mailing lists) or speak to the jQuery standards team http://blog.jquery.com/2011/10/24/announcing-the-jquery-standards-team/\nIn terms of what we do with this project, I see us sticking with LS until something better comes around.\n. You did get one or two responses :) That said, its looking like there might be better luck on the official mailing lists.\n. I think 2.5mb is absolutely fine for most applications. I have yet to see a (properly built) web app that requires more than that for their JS payload and I think it should be okay to use.\nWith respect to the File/FileSystem API I mentioned this further up in the thread. The problem is that support for this is currently limited to Chrome http://caniuse.com/filesystem. We could say.. use it if supported otherwise fallback to localStorage but is that too much effort? What do you guys think?\n. I totally agree ^ :)\n. haha. groundbreaking my foot :) At least we know that others are looking at this space seriously too!\n. It might be worth bringing @beverloo from Chrome into this discussion as he might be able to shed some light on this. I also have to say: I wonder just how many (or how large) the scripts people are trying to load in must be for the performance to be visibly impacted. In my own experiments I've never seen read/writes taking so long that a user would actually notice it, but I'm generally dealing with payloads of under 500KB. Do we think others are assuming the maximum that can be stored for their benchmarks?\n. Great article. I found the comments (and links from there) to be useful too. Its fascinating that developers working at vendors (Heillman and Kinlan) are arguing that we shouldn't be using LS because of perf issues, size etc. but developers who have been using it in the wild feel that this is completely unnoticable. \n. Some more related reading I came across this morning:\n- http://sunpig.com/martin/archives/2011/05/21/considerations-for-caching-resources-in-localstorage.html (2011, but relevant points about edge cases)\n- http://my.opera.com/shwetankdixit/blog/2012/03/09/localstorage-do-you-want-fries-with-that\n- http://www.quora.com/Does-it-make-sense-to-use-localStorage-for-caching-JS-instead-of-the-browser-cache-for-desktop-websites\nCuriously, whilst Chrome's localStorage perf being slow is well known, there doesn't currently appear to be a lot of effort going into improving this at the moment:\nhttp://code.google.com/p/chromium/issues/list?can=2&q=localstorage&colspec=ID+Pri+Mstone+ReleaseBlock+Area+Feature+Status+Owner+Summary&cells=tiles\nI wonder if we can do something about this (I believe Sindre already explored the standards lists, but perhaps sorting out Chrome could be a starting point).\n. > That means a large amount of data in localStorage could actually increase page load time because JavaScript needs to wait before executing.\nI too agree that a realworld storage benchmark across all browsers is needed. Until it's clear (and been validated by others) that loading JS from LS can be done without it blocking pageload (somehow), I guess this project will be remaining in an experimental state. Thats okay, though. One day doing this will be both safe and relatively efficient :)\n. Lets run the above on a few mobile devices to see how well that fairs - I'll try some this afternoon :). We've never been able to accurately benchmark basket against the browser cache (and may not be doing so with the above either), but I'm interested in any efforts that get us closer to that point. \n. I think it's worth us performance profiling the newer implementation with RSVP and see how much worse/different the performance is since the last version. If we discover the performance has taken a large hit, we should consider switching to offering builds with a promise-less API as well as those with RSVP support.\n. Some more data https://insouciant.org/tech/time-to-load-localstorage-into-memory/\n. Interested read http://www.mobify.com/blog/smartphone-localstorage-outperforms-browser-cache/ also see the comments.\n. I love it! One very very minor concern: would supporting so many signature variations confuse people? Like..could/would someone use an inline callback in any of the objects passed to require in the below?\nOn 8 Mar 2012, at 19:37, Andr\u00e9e Hanssonreply@reply.github.com wrote:\n\nSo, me and Sindre discussed the possibility of pulling in several files within one .require(). It would look something like this:\nbasket.require({\n   \"foo-1.2.3.js\": {\n     key: \"foo\"\n   },\n   \"bar-3.2.1.js\": {\n     key: \"bar\",\n     overwrite: true\n   }\n })\n .wait(function() {\n   // use pulled-in files\n });\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25\n. I actually like that suggestion. Perhaps include add() as merely a convenience method that pipes back to the below if it stays?\n\nOn 8 Mar 2012, at 22:36, Sindre Sorhusreply@reply.github.com wrote:\n\nI've also noticed there are some duplication between them. It is however useful to be able to only load a script into localStorage for later use. Preloading. But we could drop the .add() method and instead just have a property in our .require() method:\njavascript\nbasket.require({\n   url: 'http://website.com/foo.js',\n   id: 'foo.js',\n   execute: false\n});\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25#issuecomment-4404453\n. Whilst a very very trivial note, the only reason .add() was named so was because people typically add things into a basket and that idea (I felt) was easy to grasp. I don't particularly mind us renaming it at all, but Sindre does raise an interesting point.\n\nA single-use .add()/.store() probably wouldn't add that much value if we've expanded require() to handle most use cases. Granted than many of the most common script loaders are sticking with .require() in some form, I'm okay with us dropping the sugar. \nOnce we've finalized the API for the next version, I'd love to get a few people actually trying out the changes so we can see whether a minimal set of methods vs. some added sugar would be needed.\n. Not quite everyone :)\nThere are definitely a few people I have in mind for trying this out (including those from the Google and Facebook camps, given they've experimented in this area before). \nI'd also like to reach out to the Sencha guys and see what their thoughts are on our (relatively lightweight) approach vs. what they've done for Touch 2. The FT and one or two other large sites have been investing time in this area, so who knows? We might able to get some decent feedback when the next version is ready :)\nWhilst this thread is probably not the best place for a discussion about this, I think we'll need to discuss our long-term goals for this project. It very much began as an experiment and as it evolves we'll need to decide what is left to make it truly production-ready (with a few case studies of people using it in practice etc).\n. I think that pretty much nails it!. \nWith respect to the perf tests, one thing I'm going to do at the end of this weekend (or someone else can if they're free) is collect all of the relevant jsPerf performance tests related to this area (localStorage writes, vs objects etc.) and include them in a Perf section on our wiki. We currently have most of them mentioned across issues.\nThat can give us a starting point to defend the position that localStorage can be used for files and there are browsers where this is relatively not expensive. \n. Indeed you have :) I was thinking more long-term that moving them to the wiki would be useful (Im assuming we'll eventually be closing 24)\n. (please forgive the brevity as I'm mobile)\nMichael Mahemoff suggested that we opt for a checksum/hash approach a while back for versioning, but I think your expanded notes and justification make a lot of sense Sindre. My view is that there's no reason we shouldn't be doing the below. You're bang on right about not caring about the overwrite but wouldn't we need to redownload a script that is already cached just to compare hash/checksums? \n. Appreciate the input, @mahemoff!\nTo be honest, I've seen both approaches taken with similar levels of success. I'm completely open to us reconsidering the direction taken with hash/uniques, but what we'll probably do is wait until we've heard what the feedback is from users on the approached using hash/unique. At the end of the day, I want us to balance least effort (on a user's part) with flexibility.\n.  it's worth considering further :) Would we simply be re-fetching once TTL is over? If so does that mean that the version fetched next persists with the same TTL limit (I assume so)\nOn 8 Mar 2012, at 19:56, Andr\u00e9e Hanssonreply@reply.github.com wrote:\n\nWe talked about adding this, should we? It would be a nice addition perhaps. Syntax:\nbasket.add('foo-1.2.3.js', { key: 'foo', ttl: '1months' });\nmonths in the string could be minutes, hours, days, weeks, years as well. Too advanced?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/27\n. Cool. Sounds like a plan :)\n. Question: would there be a case where someone would want the TTL value to be a mix of weeks and days (e.g 1 week 5 days or 1 year 30 days etc?). Would that be overkill to support? (i.e ttl: {  months: 1, days: 10  })\n. +1 Let's roll with that :)\n. Just leaving this here for future reference: https://github.com/pamelafox/lscache\n\nPamela also approached a TTL-like solution for her project but did something interesting with trying to remove old entries automatically if you were close to exceeding the available LS space. We might want to try something like this at some point :)\n. > What is better? remove the oldest script or who has less time to expire\nI would say the oldest script. Removing all keys trying to add the big file is definitely something we want to avoid.\n. Thanks for the PR, @amrnt.  Some background info: when I created the first version of basket, I purposefully left out support for CSS loading of assets as this was something deemed inappropriate for localStorage caching by a few members of the community. This was in part because we want to avoid any FOUT but also, once you move beyond scripts you begin to get into AppCache territory (which arguably is better suited to CSS).\nI won't close this immediately, but it would be useful to hear what @peol and @sindresorhus think.\n. As we appear to be at an agreement about shelfing this, I'm going to close for now. We can revisit the PR if we decide to change our mind about this in the future (or at most, document in the wiki for anyone wondering about the same).\n. I think we should handle this internally, but I'm wondering if it would make sense to also make this behaviour configurable (i.e have a sane default but one that can be overridden). \n. Might not be able to take a look at it today but can definitely do it this week! As long as no one beats me to it :p\n. Nice work, Sindre. I'm happy with us proceeding with this in its current form. We're going to review the naming of all API methods prior to the next release so Im okay with us referring on naming changes till then.\n. We should be handling that a little more elegantly. Thanks for flagging! :)\nI think some discussion probably needs to be had regarding what we do if a single file in a chain 404's like this: should an exception be thrown? should we continue loading the other items in the chain that may be dependencies? should the chain die altogether? \nIt would also be worth considering whether we should be handling anything for other HTTP errors that might occur.\n//cc @sindresorhus @peol might have more thoughts on this :)\n. @sindresorhus I think we should do that too. For some additional reference, what libraries like yepnope have looked at before are error timeouts (e.g if the script can't be loaded within a time window N, timeout and throw an exception). Their thread for reference https://github.com/SlexAxton/yepnope.js/issues/61\n. If we implement let's go ahead and fail the chain if a 404 is encountered. \n. I think the behaviour @wibblymat described as ideal is pretty much what we're after. Let's try to tackle this for 0.4 if we can agree on the implementation.\nI appreciate the reminder about promises better handling this use case as I hadn't thought about them being if great assistance with this problem until now.\n. What would be the benefit of this over the server explicitly providing the N cached scripts in a concat and minified form that you just cache once? Are you effectively looking for a way to do http://...../scripts.js?get=file1.js,file2.js etc?\n. Sounds good to me. Let's revisit in Jan/Feb and see if there's interest in a new version with more features. Cheers guys!\n. +1 to the above. There is however an AMD loader that loads from localstorage  (also Web SQL, IndexedDB and FileSystem API via a configured storage  implementation) in case that helps https://github.com/zazl/lsjs \n. Thanks for the fix @peol :)\n. Thanks! Going to play around with this this evening. \n. Thanks @felipemorais! Nice work :)\n. I agree with the suggested changes so far but will take another look and see if we're missing anything. Thanks for the inline comments @peol and @sindresorhus and for kick-starting this off @felipemorais :)\n. On 45, I think we should wait until 0.4 to address moving towards something more inline with Promise spec. Otherwise this looks good to me :) @sindresorhus anything more to add? \n. Merged. Lets create new issues to continue discussions :)\n. I think we should tag the release, come up with an updated changelog, put it on Bower and announce on Monday. How does that sound?\n. Tempted to say optional dependency but it looks small enough to include by default.\n. Thanks again!\n. Works fine with latest for me.\n. Is it possible to get this to pass the build? Nice work, otherwise :)\n. Excellent work all :) \n. I think we should announce on twitter. Wednesday sound good?\n. Looks like Wednesday slipped. Monday sound good to everyone? We can tweet out about the release and link to a changelog.\n. Saw this a few days ago, but that's really awesome. I'm glad to see this getting some mainstream attention :)\n. @sindresorhus I feel like the happiest man alive. the happiest!\n. Wow. Nice work! :)\n. I think getting it on Bower makes sense. @wibblymat would you like to try registering it as a Bower package?\n. I just wanted to say how stoked I am for us to have this in place. An update to the docs would be fantastic to have. \n. An async option would be nice :)\n. @felipemorais did you have any interest in exploring adding an implementation of this to basket?\n. Correct me if I'm wrong, is this similar to the LAB.js wait() method? http://labjs.com/documentation.php. If so, using that signature might look like:\njs\nbasket.require({url: 'jquery.js'}).wait()\n  .require({url: 'backbone.js'})\n  .require({url: 'main.js'})\n  .then(entryPoint, errorHandler);\nWould that be cleaner? Again, sorry if I've misunderstood what you're doing.\n. Ah! That makes sense now. Thanks for clarifying @wibblymat. With that in mind, thenRequire lgtm too!\n. Wow..this is amazing. Thank you so much @wibblymat :) I've had a read through and the updates you've made look fine. There are some very very minor tid bits like the version of jQuery we reference in our examples being out of date, but we can live with that. I'll merge now.\nBtw, if you would be interested in continuing to contribute to basket, we would be happy to have you on the team (in which case, please feel free to send over a PR to update the readme!) \n. Maybe it would also be useful for us to somehow summarize the major changes since 0.2. e.g promises and so on near the top? \n. Thanks @wibblymat :)\n. @wibblymat is this one good to be closed?\n. I ran into this yesterday but didn't get a chance to investigate further. Thanks for creating an issue @wibblymat. I definitely think we should mention this change in the changelog/readme.\nI would be up for us opting for the simple solution now, but creating a separate issue to track how we can address this better in the future. Would you like to bring in a69f5c6?\n. No worries! I appreciate the push. With this now in place, should we re-tag and release? Anything else left to go?\n. Cool. I'll retag sooooon :)\n. Awesome! Thank you :)\n. I've seen a few new efforts to provide support for this in other projects.\nLet's see what the implementation size is like and we can make a call on\nwhether to include in core or have it as a supported plugin. I'm up for\nexploring :)\nOn Dec 21, 2012 8:36 PM, \"Andr\u00e9e Hansson\" notifications@github.com wrote:\n\nI wouldn't mind the support for it, but there's issues around knowing when\nCSS has been loaded/applied to the document cross-browser, that's why\nprojects like require.js only have support for them with semi-official\nplugins that are not guaranteed to work without FOUC.\nHowever, we could support it but not guarantee the CSS to be loaded before\ncontinuing queued stuff. See more here:\nhttp://requirejs.org/docs/faq-advanced.html#css\nAny thoughts, @addyosmani https://github.com/addyosmani @sindresorhushttps://github.com/sindresorhus?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/60#issuecomment-11626234.\n. Would someone like to try taking this on? We could implement a POC with CSS support as a branch and test how reliably it might work. \n\n@amrnt you initially tried implementing this in https://github.com/addyosmani/basket.js/pull/28 a year ago. Would you be interested in taking another stab at this?\n. I fully support CSS support being better explored as an official addition\nto basket. Any pull requests that help improve our handlers for this would\nbe welcome.\nOn 26 Dec 2013 02:33, \"Andrew Wakeling\" notifications@github.com wrote:\n\nPerusing over #76 https://github.com/addyosmani/basket.js/pull/76, #77https://github.com/addyosmani/basket.js/issues/77,\n84 https://github.com/addyosmani/basket.js/pull/84 and this issue, I\nappears that there isn't any intention for basket.js to handle anything\nbeyond JS. i.e. I can load anything with the execute: false flag, but\nit is up to me to explicitly handle the response.\nI support this decision for \"core\" basket.js, however it might be great to\nsee something like the addHandler approach suggested in #76https://github.com/addyosmani/basket.js/pull/76\n.\nPlease keep in mind that dynamically adding CSS isn't as trivial as the\napproach suggested in #76https://github.com/addyosmani/basket.js/pull/76.\nHere are some reasons https://github.com/andrewwakeling/ie-css-bugs why.\nI put together basket-css-examplehttps://github.com/andrewwakeling/basket-css-exampleusing\ncreate-stylesheet https://github.com/andrewwakeling/create-stylesheetto show an example of basket.js loading CSS. I have identified some issues\nbut I certain there are more.\nIf people still would like to see CSS work better with basket.js, I am\nhappy to help out.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/60#issuecomment-31209320\n.\n. I think we should try to come up with a clean solution to this and I'm not opposed to doing a 0.3.x soon if it can tackle it well. \n\nShould we consider bundling RSVP as a part of the build if it's a hard dependency or offering a way to build it in if we're not taking care of that?. Ideally, when you download basket you shouldn't have to worry about getting anything else to work with it imo.\n. Thanks Andree!\nOn Fri, Dec 28, 2012 at 11:13 AM, Andr\u00e9e Hansson\nnotifications@github.comwrote:\n\nI agree. I can modify the build script to spit out an\nadditional concatenated version later today.\nOn Friday, December 28, 2012, Addy Osmani wrote:\n\nI think we should try to come up with a clean solution to this and I'm\nnot\nopposed to doing a 0.3.x soon if it can tackle it well.\nShould we consider bundling RSVP as a part of the build if it's a hard\ndependency or offering a way to build it in if we're not taking care of\nthat?. Ideally, when you download basket you shouldn't have to worry\nabout\ngetting anything else to work with it imo.\n\u2014\nReply to this email directly or view it on GitHub<\nhttps://github.com/addyosmani/basket.js/issues/62#issuecomment-11724137>.\n\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/62#issuecomment-11729815.\n\n\nAddy Osmani\nDeveloper Programs Engineer at Google\nBlogger at: http://addyosmani.com\nPhone: +44 7771 334170\n. You rock @peol! :D\n. @peol what do you think about this?\n. Thanks @peol and @jschilli!\n. +1\n. I'll answer on the last point:\nWe're currently considering expanding basket to handle CSS and other resource types. Technically, there's nothing really stopping us from doing this. The project was originally aiming to just demonstrate script caching benefits over browser cache/other options, however it's possible such features become supported in the near future.\n. To clarify, browser vendors acknowledge that localStorage should ideally be async and there may be work put into changing this behavior in the future. I agree that LS should be for smaller pieces of data, however, from a usability perspective it's easier to use and navigate around the rough-edges than appcache is. We welcome any and all efforts to improve the offline landscape for developers.\n. Very curious. I hadn't seen asyncStorage before. Something tells me if we were to re-implement this on top of basket.js (i.e using IndexedDB) some people might have a cow :p. It would also have to be done in a way where maximum cross-platform compat was ensured. @sindresorhus wdyt?\n. @sindresorhus I should have elaborated :) I was asking what your thoughts were on the idea of baking asyncStorage support into basket. I've never thought particularly high of IDB and agree with your summary of it being inadequate for a caching lib of this sort.\n. I think this falls under a general \"should we support resources other than scripts\" question. We've been getting these a lot lately. @sindresorhus @peol @wibblymat Implementation wise this isn't hard. Should we do it or punt?\n. If we do go down this path it would be useful to discuss some of the challenges involved:\n- CSS? https://github.com/addyosmani/basket.js/pull/28, https://github.com/addyosmani/basket.js/issues/60\n- images http://robnyman.github.com/html5demos/localstorage/\n- Other/any files.\nIt would be interesting to see basket become a generic asset cacher.\n. The implementation review lgtm so far, but it would be great to get a few more tests in :)\n. Thanks for improving the test coverage of the implementation. I think that since we're not tight for time on the next release it would be useful to wait on a reply to the group thread. Alternatively, maybe there's a way a Sinon helper could be written that does provide the async. behavior you're after?\n. Let's chase this up again before we want to do another release. I think there's room for us to address both plugins and this for it.\n. That's a valid concern. I wouldn't mind appending the keyname with the content-type received if it would help make this more feasible.\n. Thanks for pushing the changes. We're going to spend some time stress testing the implementation and if all goes well we might request for tests to be added in order for us to merge this.\n@sindresorhus @peol @wibblymat do you think this type of behavior should be in the project by default or added as a type of extension?\n. I actually like that approach. We could document them and perhaps also have a \"plugins\" directory for those wishing to just manually add support for these things. \n. @wibblymat do you think we should implement a way to trivially add plugins to basket? If so, would you like to describe further API capabilities/what it's limitations would be? might be interesting to explore.\n. @wibblymat I just wanted to let you know that I reviewed your proposal a few times and I really liked it. Thanks for writing it up! Let's discuss it further in early March once a few other projects get wrapped up :)\n. Edge confirmed that whilst there are alternative mechanisms for caching data offline, developers should continue using what works best for them as long as they benchmark it.\nWe have a thread going on internally about how effective solutions like basket are in practice but agreement that browser cache, appcache and local storage would benefit from improvements.\nI also liked your proposal :)\n. I feel like basket.js is used as a reference implementation rather than directly as an include by many people. If that's the case, I actually would love for us to include plugins for it that solve caching different resource types so that the community have examples for solving that problem. Perhaps after things have calmed down with Bower we could re-explore this.\n. sgtm. So, we're currently listed as basket.js. Would it make more sense to be bower install basket?. Either way, we can certainly add this to the homepage soon.\n. The above SGTM. \n. i think we should tag and release a new version and mention on bower at the same time. @wibblymat wold you like to put together a PR for mentioning Bower on the homepage?\n@sindresorhus, worth us documenting/including a plugins directory with the CSS loading changes in #76 for those interested? If not we can definitely hold off until we've reworked our architecture to be a more generic asset cache (per #81)\n. :+1: Once again, thank you so much for taking the time out to work a little more on this project. It means a great deal to us :)\n. Whoa! We were not expecting to see this so soon. Great work, @wibblymat :cake:\n. Re-reading through the proposal, (forgive me ignorance) but I couldn't fully understand the use case for caching the result, but always fetching live. Is the idea that some other process may consume the cached data but the loader in that scenario just cares about always fetching latest regardless?\n. Aha. Now that makes sense. Thanks for the explanation :)\n. :+1: \n. Spoke to @wibblymat about this yesterday. It looks like we should just need some docs changes and should be in a good position to land once those are written up. Great work once again!\n. Time to merge this baby! Let's handle docs as part of #85 :dancer: \n. Let's try to get this done some time in October. It would be fantastic to get a new release out with some docs.\n. No progress on the docs for this just yet. @wibblymat has been pretty busy with Bower and the rest of the team with Yeoman. Mat, do you think you might have some time over the next few weeks to add some initial docs for your updates? We can definitely push out an update before Christmas if so.\nAlternatively: if anyone in the community would like to help us out here contributions are always welcome :)\n. Certainly worth considering. \n. Thanks for the suggestion. We've considered alternative storage methods a few times before but I believe the consensus was that this would be outside the scope of this project. Instead, we generally delegate to either using Lawnchair or a solution like https://github.com/agektmr/PortableCache.js, which does solve the same tiered storage question you present above. Could you try it out and let us know if it solves your use case?\n. Thanks for sharing the info about bag.js, Vitaly! I would be really interested to hear what @wibblymat and @sindresorhus think of the changes in your project as we were just talking about this the other day. I personally wouldn't mind us exploring other storage formats if we can land them in a way that is modular or can be added in an optional way that wouldn't heavily increase the basic script size for all users.\nCould you talk us through how you've approached this? Does your core include larger storage support directly? Love to hear more!\n. re-pinging @wibblymat and @sindresorhus for their opinions here.\n. and re-pinging again.. \n. ### Feasibility review\n- Basket.js is currently 4.4KB and 1.1KB minified and gzipped. Switching to bag.js takes us up to 3.2KB gzipped + minified. Quite a large change. I would expect us to try offering a build of bag/basket something smaller than 3.2KB which just localStorage support for legacy users and offer up the complete build for developers interested in the whole thing. That said, 3.2KB is still relatively small considering the additions we get. How modular do you think we could get @puzrin? We could always land the changes then work towards modularity if we decide to move forward with the changes.\n- Changing over means that we would not be 100% backwards compatible. I would be interesting in nailing down exactly what breaking changes this brings (what in the bag.js API doesn't cover what is in basket?) over so that at least, we can document them if we go ahead. At present, basket.js does one thing and does it well. Some might argue that what basket.js offers at present is enough and that the newer additions may not be used as often. I'd love to hear more from users here.\n- We recently landed a bunch of changes around different types of resource handling. Are you using the same codebase for that, does bag.js achieve the same thing or similar in terms of what is possible?\n- The changes to tests I'm interested in, but they won't be affecting a decision on my part. Your test coverage includes tests for most main use-cases so we should be solid on that front. Version bump is also okay :)\nOne idea is to label the current version of basket.js a final 1.0 and make the bag.js version our 2.0, which could indeed come with breaking changes.\n. also cc @andrewwakeling for thoughts\n. Thanks for getting back to the questions so quickly :)\n- I'll read up on the adapters, but anything that gives us pluggable options would be amazing. That would definitely make this work landable.\n- Re: incompatibility. We had once discussed using https://github.com/slightlyoff/async-local-storage to offer an async API that felt like localStorage on top of IndexedDB. If we're basically getting a basket-like API on top of the other storage forms, I would be okay with the break in API.\n- Re: callbacks vs promises. Is there a reason bag.js prefers callbacks to promises? With ES6 promises landing in browsers and a shim being available on top of RSVP, it seems like a step backwards to not support them. Is this something we might be able to change? I'm just trying to understand the value of the callback approach.\n- Thanks for your explanation of the implementation and differences. I agree that we can improve the expiration logic to be a little closer to what the current basket offers. I also think that we could help adapt the coding style to adhere to what we've been using so far.\nI'm going to spend time reviewing the rest of the bag.js implementation today. Once again, I REALLY appreciate the effort you're taking to explain it to us and work to maybe contribute it back to the project. I'd love to see that happen.\n. That's completely understandable. We all have our personal choices :) In my opinion, we could probably switch bag.js to use a similar RSVP based promises solution but I'll review how much work would be involved and how much I could help with it. \nBtw, this evening I pushed a new pre-release for basket.js with some of the recent changes we've been working on. I wouldn't mind if 0.3.x was the last version to support our current API. I'll do some research on just how many users are currently relying on 0.3.\n. I actually haven't had a chance to compare final binary sizes here at all. What are folks thoughts on us switching over to using the global Cache API that used to just be part of Service Worker but is now part of the global window and in Chrome (soon coming to Firefox)? We mentioned it in #131. If it's less desirable than us looking into other storage mechanisms we can think about that. Ultimately, I think continuing to strive for a lean, but modern base here would be a good target.\n. From their current readme, creating a promise is done via var promise = new RSVP.Promise(function(resolve, reject) so we would need to update https://github.com/addyosmani/basket.js/blob/gh-pages/lib/basket.js#L48 in order for this to work again.\n. @JonDum btw, I don't suppose you would be interested in putting together a PR to fix this, would you? :)\n. I've fixed this locally. Pushing the patch to master soon. The update has broken two tests that need to be resolved.\n. I'd like to start opening up basket.js to contributions of this sort, even if we're just documenting their existence - do you have more time to flesh this out a little?\n. It looks like this might best exist as a dedicated RequireJS plugin. If you see yourself improving it/working on it in the future I'd recommend creating a separate open source project that we link to from the README, otherwise we could include it here but couldn't guarantee direct support for it from the team.\nI like the first of these ideas most atm. Wdyt?\n. Totally understandable @wibblymat. We'll figure out another way to get a new release out :) No worries!\nHappy new year!\n. Thanks for raising the issue. I agree we should add a custom handler for this until its fixed upstream. I'll be keeping an eye on the linked thread to see where this goes.\n. Build's are all green and these changes LGTM. Thanks for looking into this, @wibblymat! Totally forgot about the timeout edits I made after the RSVP upgrades. Glad someone solved the test issues :) \n. Thanks for the PR. I understand how the implementation works, but could use a little convincing of the use-case :) If you're working on an app where you have control of the locally served files, wouldn't there be a low chance of a script not being available? Any extra details would be useful :)\n. \n. I vote for 1. \n. Changes LGTM. Thanks!\n. If you'd like to go ahead and set that up I would be fine with it :) Thanks!\n. Thanks!\n. I've reviewed. These changes LGTM for a merge. \n. This appears to be a more general issue with iOS cookie disabling. Without the ability to use localStorage, basket isn't going to be able to handle caching behind the scenes. If you could let me know if you were running into issues with loading completely breaking with LS off, that would be useful. Today the best answer I can offer is: we need localStorage and cookies enabled to work.\n. Basket can technically be used as a standard non-cached script loader, but I would recommend using other existing options to avoid loading in the cache handler logic for users where it wouldn't actually be used for that purpose.\n. I have personally never run into the permission denied issue with localStorage here, but it wouldn't surprise me if this happened in a small number of circumstances. I'm not opposed to us factoring it in to our API, but would like to learn more about the data driving the ask. Did your logs mention if these were users from a particular browser?\n. My only concern with try/catch is V8 has limited ability to optimise functions using this construct. If someone wants to throw together a PR we can profile and check if this will actually be an issue.\n. Is basket.js breaking when executed in IE9 without this fix in place? Some more description here would be useful :)\n. Friendly ping.\n. Closing due to no response. If you get a chance to reply, we'll happily reopen :)\n. Thanks for your contribution. We'll review it shortly. In the mean time, would you be able to add tests for this so that if the change lands it is possible to make sure this behaviour doesn't break again in future?\n. :+1: \n. We've had this request quite a lot in the past. In general, the approach we have taken is trying to allow basket.js to be extensible so that such layers for handling CSS and other resource types could be added without too much pain. Take a look here for some examples of extensions being used for similar purposes: https://github.com/addyosmani/basket.js#examples\n. This fails the build. Could you take a look at the cause?\n. Closing due to the age of this PR. We appreciate you originally working on this regardless, @lagden :) \n. LGTM.\n. Breaking post https://github.com/addyosmani/basket.js/pull/117, which showed green at the time here and on Travis. I'll review what's breaking and get it addressed.\n. Fixed in https://travis-ci.org/addyosmani/basket.js/builds/49891358\n. :+1:\n. https://github.com/acconrad/basket.js/blob/1f24b573b05d797123da91991903654e2753e554/lib/basket.js#L188 does indeed do this. Merging for consistency.\n. Thanks!\n. Let's coordinate with Mat when Shed is ready for broader use then :)\n. Update: We're planning on exposing the Cache API as a global (probably in Chrome 43) per https://chromium.googlesource.com/chromium/blink/+/53d80dc622ba866d563d4934c98777a42d4c3e96. This would open up the door to basket switching over to using that API.\nWe have some choices there. Do we become a tiered solution? i.e if Cache API is present, use that, otherwise use localStorage - or - do we attempt to switch to a Cache API polyfill (which would mean relying on IndexedDB)\n. The exception you're seeing indicates there's a cross-domain issue caching/loading the resource. You need to ensure you're caching files on the same origin, which the browser considers a different domain (so it blocks the overall flow). Try caching the library from your own domain (for testing purposes, this would also be localhost).\n. Please include a description with your PR. Your comment mentions JSX in the diff but you don't explain why this would be useful to other users :)\n. \u251c\u2500\u2500 basket.full.map\n\u251c\u2500\u2500 basket.full.min.js.map\n\u251c\u2500\u2500 basket.js\n\u251c\u2500\u2500 basket.min.js.map\n\u2514\u2500\u2500 basket.min.map\nThe above is the current output when bower installing today. We ship the sourcemaps for minified builds, but aren't actually shipping the minified builds themselves. Merging. Thanks!\n. LGTM\n. @sindresorhus I'm personally fine with the community extending the inspection capabilities of basket. We'll need to review how large an impact this has on source as per any PR, but otherwise curious what this would look like, @foxx :+1:\n. If memory serves your comments are correct. We may not have added this to the docs as it wasn't considered for long-term use, but given its been there a while let's add to the docs.\n. cc @foxx \n. > This PR is the simplest way of achieving the desired effect, but it may make sense to refactor it so that fetch isn't responsible for this handling\nIf possible, this would be desirable. Thanks for the patch btw.\n\nCould also check if the passed object is a promise by checking instanceof RSVP.Promise.\n\n:+1: \n\nIf the maintainers are on board, I'll gladly add corresponding tests.\n\n:+1: \n. I'm fine with this addition. We haven't really added non-developer verbiage to our projects before, but interested in seeing how this takes. Thanks!\n. ",
    "miketaylr": "+1! I've seen other implementations that allow you to pass in a TTL arg and purge it if expired, etc.\n. +1! I've seen other implementations that allow you to pass in a TTL arg and purge it if expired, etc.\n. ",
    "evocateur": "Glad my jslint-brain could help. :)\n. Glad my jslint-brain could help. :)\n. ",
    "rwaldron": "Also, your handlers didn't seem to care about IE support anyway :)\n. I just found a 5 space indent.\n. I just decided to pull from the upstream for the first time since this morning and was delighted to see this :D\n. Same here :)\n. Nice! Glad I could contribute :)\n. Also, your handlers didn't seem to care about IE support anyway :)\n. I just found a 5 space indent.\n. I just decided to pull from the upstream for the first time since this morning and was delighted to see this :D\n. Same here :)\n. Nice! Glad I could contribute :)\n. ",
    "sindresorhus": "I second that, from experience ;)\n. @addyosmani Sure, added ;)\n. @rwldrn I've fallen in love with grunt, so this was a nobrainer ;)\n. :)\n. @addyosmani @peol What are your thoughts about following the idionmatic.js style guide?\n. @addyosmani It's almost identical to the jQuery style, only more thoroughly explained. It won't slow you down if you use it consistently everywhere, it will actually make you faster, since you now longer need to think about how to format your code, it just muscle memory.\n. Done ;)\n. Np, your was better ;)\n. The problem with IndexedDB is that it requires user approval, which for me, is a no go. Who would want to annoy their users with a prompt to only save a few milliseconds?\nA JS mutable cache manifest is what we really need. Where we have some APIs to add/remove files from the manifest. Maybe we should suggest something like that to the right people? Since there is clearly a need for better control of caching.\nUsing other storage methods to cache script is a temp hack, which does not scale in the long run. At the moment localStorage is our best bet, even though I have my doubts.\n. I commented on the jQuery Standards issue tracker, but there seems to be little to no activity there the last few months.\n. Yes, I thought so, though Louis-R\u00e9mi has already tried, and there's an open issue on the W3 issue tracker.\nBtw, discovered today that Chrome only gives you 2.5 MB localStorage, since it's saves everything in UTF-16...\nHave you explored the possibility of using the FileSystem API? If you use the temporary storage, you don't have to ask the user for permission.\n. I don't disagree, just an observation. Might be an edge case, but Twitter is over 2 MB :P\nI think we should at least include the Filsystem API in our perf tests first. It's worth the effort if there's any gain from using that API. Remember that having only Chrome support that API, still means over 30% of users would benefit from it.\n. From the Sencha Touch 2 announcement today:\n\nSecond, our groundbreaking new app loader caches your entire application within localStorage. \n. Another article on localStorage.\n\nHis perf test also show that localStorage in Safari is way faster than any other browser, and that Chrome is way slower. Wonder why that is... If every browsers was as fast as Safari, no one would actually complain about localStorage. It looks like a lot of the implementations could be drastically improved without changing the spec.\n. Interesting thoughts about localStorage.\n. Yes, I also found the comments interesting, they usually are. localStorage being way faster in Safari than any other browser clearly shows that it's mostly an implementation issue, which can be fixed without N years in committee meetings to change the spec. \nThough it wouldn't hurt to have async localStorage and ability to ask for more storage.\n. It's probably calling the function, which does create a slight overhead, instead of just directly accessing the array index, but again, a perf test does not show real world usage, otherwise Chrome localStorage would clearly be useless.\n. I've already read them, searched for localStorage caching the other day too ;)\nbasket.js is btw 4th when searching for this!\nI've also looked through the Chromium issue list. I however found a issue and pretty good explanation from a Chromium dev. If you read this, go to the issue and star it! Thanks :smiley:\nAlso retweet this if you want.\n. Performance of localStorage revisited\ntl;dr can block pageload, benchmarks needed, new async API wanted, use with care.\nNothing new. Though seems strange that no one has created a realworld localStorage benchmark.\n. From my understanding it only blocks when it encounters localStorage access in the code. So if that code is at the bottom of the page or async/defer, it should not block page loading. So the important question is still; is loading scripts from disk into memory faster than loading it from network? It should be, but as I said earlier, we need tests to prove it.\n. Yes, would be nice to be able to show some numbers on the site ;)\n. @addyosmani sendt me this interesting article http://calendar.perfplanet.com/2012/is-localstorage-performance-a-problem/\nI think this and some previous articles clearly show that localStorage is usually not a problem. We could still use some some perf tests with storing/fetching larger amount of data, which we do. But I'm pretty confident IndexDB and the Filesystem API is not the solution for Basket.js. We should update the Why localStorage to summary reflect the article.\n. As mentioned in another issue, would be interesting too see localStorage vs appcache, even though they have entirely different purposes, they can be exploited for the same.\n. async localStorage clone based on IndexDB: https://github.com/slightlyoff/async-local-storage\n. We definitely should go the Python way and only have one true way of doing it.\nI'm in favor of only supporting the .require({}) syntax.\n. Correct, good eye. Though since we only accept one argument to require, we could drop the array, and just use infinite arguments?\nbasket.require({},{},{});\nand then just [].slice.call( arguments )\n. I've also noticed there are some duplication between them, that would be nice to get fixed.\nIt is however useful to be able to only load a script into localStorage for later use. Preloading. But we could drop the .add() method and instead just have a property in our .require() method?\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123',\n    execute: false\n});\n. We could, but I'm not sure we should, although I don't really have that strong opinion about it. We should be careful about having sugar that doesn't really save that much typing and it gives the user multiple ways to do one thing.\nThe point of having a powerful .require method is that they can do all the loading in one method. If we introduce the .add sugar. User will start to do this:\njavascript\nbasket.add({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123'\n}).require({\n    url: 'http://website.com/foo2.js',\n    key: 'foo2.js',\n    hash: '123'\n});\nWhen this, in my opinion, looks better:\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123',\n    execute: false\n},{\n    url: 'http://website.com/foo2.js',\n    key: 'foo2.js',\n    hash: '123'\n});\nI'm a -0 on this.\n. > Once we've finalized the API for the next version, I'd love to get a few people actually trying out the changes so we can see whether a minimal set of methods vs. some added sugar would be needed.\nDefinitely. I've been thinking about this too.\n. Addy knows everyone, so I'm sure he can find someone that would need this ;)\nAs far as I know; Google, Bing and Sencha Touch 2 uses their own localStorage loaders. The target would be devs that needs to aggressively cache their assets, like realtime sites, heavy JS apps, etc...\n. Sounds good :)\nThere are some stuff that needs to be done before we can consider it production ready. The first one is to get some users to try it out, give feedback, and help us create something that is intuitive and useful.\nHead grab:\n- Used in the wild (obviously) - and proven to be stable and pretty bug free.\n- Perf tests!\n- Complete test suite\n- Finalized API\n- Case studies\n- Docs\n- Superlicious website\n. I've already collected the ones I think are useful to us in #24 btw.\n. Yes, I agree. Feel free to move them over, or I'll do it sometime ;)\n. Yup\n. Since I suggested it, I should probably write why:\nThe thought is that the version is like a checksum, we don't care about the format or anything about it, only if it's changed or not. When a the version is changed, it will remove the old one, and add in this (like overwrite). This is similar to overwrite, but with one big difference, I don't have to think about the last version used. With overwrite, you need to remember if you have to overwrite, this can cause subtle bugs when forgotten. A better name for it would probably be something like id or hash. I think this can actually replace overwrite, since you can just change the version to get the same effect.\n@addyosmani Thoughts?\n. We would only need to download the script that .requires the dependencies, but this is wanted, since it gets updated.\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123'\n});\nIt would then be replaced if we changed the hash:\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '321'\n});\n. Yes, exactly ;) Hash is descriptive enough for me, but other might not get that. unique could work too.\n. @mahemoff Yes, I've seen the proposal, and I really like the checksum idea, but as you said yourself, a little too much.\n\nThe thinking being that you change the URL whenever you want to change the resource.\n\nThat's a valid thinking, but I (and probably a lot of other devs) mostly use a static filename for my JS files main.js, jquery.min.js, etc. You could of course append an url parameter, but then the hash/unique property is a lot cleaner.\n. I would have no problem in supporting both btw, but what Addy said ^\n. When would this be needed? I can't really see the usecase.\n. Wouldn't it be easier if we just let the user specify the TTL in hours?\njavascript\nttl: 24 * 7 // 1 week\nThis would save us some bloat.\n. I think this would be a nice way to automagically scale the localStorage space. We should definitely consider having an opt-in for it, or even by default.\n@peol I don't see the issue. Does it really matter if the cached asset is dropped to early? It will just be refetched from the server. You can't rely on it being in localStorage anyway. What if the user wipes it themselves?\nThe nice thing about the automatic trasher is that it will allow for new entries to take priority instead of old (and maybe even obsolete) entries. An even better use case is if the user doesn't use TTL. Then the asset would live in localStorage forever, and block new entries, but with the automatic space saving, it would be trashed when the space was needed (we would add a timeStamp on when every entry was added to localStorage).\n. I like ttl, but expire might be clearer.\nOldest script.\n. Nothing\n. I agree, we should wait.\n. Yes, I also think we should handle this, but it's probably smart to have a way to override/disable.\n. \"definitely do it this week\" - you said it :p\nWhen would anyone want to load a script twice? Just trying to come up with a reason it should be configurable. And why would anyone try to load the same script twice in the first place?\n. I think we should prevent it by default. If someone wants (for whatever insane reason) to load a script twice they could just basket.remove() it first right?\n. > However, I think we should use new RegExp and use the storagePrefix value so we don't have to maintain it on several places if we choose another prefix.\nI don't see why. It's not like we're going to change it often. We're probably not going to change it at all.\nUsing a regex literal is twice as fast as using the constructor, so I feel pretty strongly about not using the constructor.\n. Yes, I realize it's not any noticeable performance improvement, but it is best practice to use the literal whenever possible. Either way, the prefix is static, and not something that is going to change anytime soon. We shouldn't love it to the top anyway, since that would create a unnecessary \"global\".\n\nAlso, there might be a use case to allow the prefix to be configurable\nlater on.\n\nDo we really want to do premature feature facilitation? Can't we just handle it when or if the time comes?\n. We should IMO throw an exception, and fail the chain. It would most probably fail anyway. This way it's not a subtle fail.\n. @felipemorais would you be interested in doing this one?\n. Hmm, @wibblymat any thoughts?\n. I honestly don't think it's worth it. It might be useful in some cases, but we're shooting for the common case.\n. This is out of the scope of this project. The server shouldn't have to care about the frontend using basket.js.\nIf you need this yourself you can easily override the basket.get() method and parse the concatenated JS file yourself ;)\n. Clear all method is already implemented in the api-rewrite branch: https://github.com/addyosmani/basket.js/commit/4c24808d68d4f1ebfffc13ebf886974e4b0aa95b\nWould that be enough?\n. I'm not sure I understand your question?\n. I've been wanting to do that for some time, but I never seem to get the time to do it :/\nI don't think we should sunset it yet, let's give it a few more months.\n. Yes, that's correct, use dist/basket.js. lib/basket.js is work in progress.\n. Thanks :)\n. Why exists? Couldn't you just do !!basket.get(key)?\n. Thanks :)\nKeep em coming!\n. Does the testsuite pass locally?\nCan we have some docs?\n. Not at all\n. Landed. Thanks :)\n. @addyosmani \n. nop\n. @addyosmani Should we tag the 0.3 release and announce it, and put it in Bower?\n. Sgtm2\n. Good point.\nWe might explore adding a dependency on rsvp.js, it's lightweight and Promises/A compliant.\nWhat do you guys think?\n. I like it :)\nSo there is no way to use the rsvp.js lib?\nWhen.js is quite a bit larger. And if we were to go with a fully featured one, I think I would prefer the more popular Q.\nWe're not going to include it in the repo, but rather add is as a dependency in the Bower component.json file.\n. @wibblymat I like it :)\n@addyosmani @peol u think?\n\nIts a simple error which breaks it completely, so I've got a fixed version in to test against.\n\nCan you open a ticket or PR on rsvp.js to get it fixed?\n. Can you paste in the output in the Android console or something?\nIs it your own project it doesn't work with or the demo on the website?\n. > I have a pending fix, should I run grunt and commit the dist/ files as well?\nNo, only on releases.\n. @peol I think the easiest is to just do compile it in the same commit that bumps the package.json and component.json. I dunno, we might do more changes before wednesday.\nThanks for the fix btw :) Always a pleasure having to fix Android <4.0 bugs :p\n. Landed. Thanks :)\nCan you update the docs about the clear(true) and the new behavior?\n. Also, please squash your commits when done :)\nhttps://github.com/addyosmani/aura/wiki/Git-Guide\n. Copy pasted from a comment in another issue:\n- Used in the wild (obviously) - and proven to be stable and pretty bug free.\n- Perf tests!\n- Complete test suite\n- Finalized API\n- Case studies\n- Docs\n- Superlicious website\nIn addition I would say we would need to resolve the current open issues.\nWe do however intend to release versions between that.\n. 0.3 is tagged and published on Bower.\n. @addyosmani Should we announce it somewhere, or should we wait until a more mature release?\n. Sure\n. :+1: \n. Hah, we're are hopeless... :p\n. Why monday? I would like for us to try to finish up the docs and get it out today or tomorrow if possible.\n. k, let's see when we get the docs ready and are happy with it ;)\n. Just wanted to let you all know Basket.js was featured on BadassJS!\nhttp://badassjs.com/post/40850339601/basket-js-a-javascript-loader-with-localstorage-based\n// @wibblymat \n. @addyosmani felt good being ahead for once? :P  (internal joke)\n. Also add some analytics to the site.\n@addyosmani Can you create an Analytics thing and add us?\n. Plugins are not supported at all, but that's fine, I'm pretty sure we don't need any. And if we do, we could always use JS to do it.\n. Pinging you in incase any of you would be interested in doing this.\n@ericduran @zenorocha \n. @zenorocha what's the benefit? The reason I usually favor Jekyll for simple sites is because you don't have to commit the built site.\n. I would use Docpad if I were to create static site anywhere else than GitHub.\n. We'll get it into Bower using a fork for now, placed here probably: https://github.com/components\n. > Should I try to get a component.json file into the upstream repo first?\nYou could try, but I'm pretty sure they won't. They also still have an open PR for a component.json file for another package manager: component(1)\n\nThe github.com/components org that sindresorhus mentioned contains just the components.json and the library for each project. Should I create a repo like that or would I register a full fork of the project?\n\nJust create a repo like that. Created the repo and added you: https://github.com/components/rsvp.js\n\nIf a full fork, should it include the .all() method we want? I'd guess no so as not to confuse others.\n\nNo\n. @wibblymat Landed. Thank you so much for this! :hamburger:  Really great to have promises. Would you be interested in doing a PR to update the docs accordingly? \n. @wibblymat welcome! :D :dancer: \n. I'm wary of this:\n\nSince knowing when the file has loaded is not reliable, it does not make sense to explicitly support CSS files in RequireJS loading, since it will lead to bug reports due to browser behavior.\n\nHowever, I'm all in if we can do it in a reliable matter on modern browsers without too much code, but I would not want us to support it if we can't know when the CSS has loaded. Probably needs some research first.\n. Looks succinct enough to me\n. :+1: when the above is fixed\n. :+1: \n. Yay, remember to also update and tag the shim repo then they do.\n. Because AppCache is a douchebag\nbasket.js gives you more control, but is only for JS. Research both and pick your poison.\nWe're going to write a better comparison of the alternatives in the future.\n. > is it a case of trading off performance with simplicty that basket.js provides? If thats the case then a tool that automatically generates and manages a manifest file for you can do the same without the performance hit..\nSimplicity yes, and being able to define and load dependencies programmatically, instead of having to define a manifest upfront.\nWe've tried automagic generation of appcache manifest in yeoman, and I didn't really like it, since it will never know all your resources. (more discussion about that here https://github.com/yeoman/yeoman/issues/762).\n\nor is localstorage actually faster than appcache, thus compensating for additional load/parse/execution overhead?\n\nDunno, I would guess no, but we should make some perf tests prove it either way.\n\nalso, images/css - basket js could do these too? Unless theres limitations on the localstorage (eg where a lot of image data could exceed the limit) - in which case you would use appcache, and since you're using it for images you may as well use it for scripts and css - unless there's any significant benefit to loading scripts into localstorage as a seperate affair?\n\nCSS maybe, see https://github.com/addyosmani/basket.js/issues/60. Images, no, it would be slow and unnecessary and most likely slow don't page load since localStorage is loaded into the memory from hdd on pageload, would also exceed quota a lot. Images also doesn't block rendering, so I don't see the benefit.\n\nThat said, appcache was created to make resources available offline, localStorage as key/value store, and basket.js exploits it for an attempt at improving script loading. One change in the manifest requires all files to be redownloaded. There are benefits and downsides to all of them. Depends on your usage and requirements. We should make an attempt to document these clearly and in what situations you would benefit from using basket.js\n. > AppCache is a douchbag when you try and do it by hand. Don't do it by hand. Find a utility for your stack and you should never have a problem, only drastically lower server costs, and a web app that's as fast as a local app.\nI'm pretty sure that magical tool doesn't exist though. I encourage you to create it.\n\nIMO localStorage is best for small pieces of data\n\nscripts and css are small pieces of data.\n. > Those tools do exist, Rack::offline for RoR and of course grunt-contrib-manifest I don't know if they're perfect yet but I'll be hopefully getting to them after another project.\nI dunno, they only help you slightly. The grunt task the least, which really only let's you specify stuff in an object instead of directly into the manifest.\n. @addyosmani I'm not sure exactly what you're asking. Can you elaborate?\nFor Filesystem and IndexedDB. We've discussed it at length before, in the initial conception of Basket.js, but we chose not to go down that path because of various reasons. From what I can remember it was mainly the extremely inconsistent behavior of IndexedDB and the fact the both (pretty sure) asks the user for permission, which is a no go for a generic caching lib.\n. Always happy to review a working prototype, but I have my doubts.\n. That was fast!\nI don't think we need to split up the docs in so many files.\n. @zenorocha Landed. Thanks for doing this :D\n. Good idea, but of the scope for this project. Do let us know if you pursue it though ;)\n. @wibblymat @felipemorais @peol \n. I would think there is a reason Yepnope and RequireJS has it as an extension.\n. Closing in favor of #84\n. I agree with this proposal. Binary data is not suitable for localStorage, so only text sounds good to me.\n. :+1:\n. Why? It's called basket.js on the repo. That would only be confusing.\nbower install --save basket.js\n. Yes, let's do a version.\nI'd prefer we wait until it's rearchitectured and we have a CSS plugin that is fully tested.\n. Try StackOverflow. Add a link to the question here. Expand with much more information.\n. Big yes to all points.\n. Thanks Matt and great to hear your touching the code again. Me and Addy just talked today about wanting to get this thing rolling again :)\n. This is invalid, the bower package works fine.\n. :+1: while i don't see the use myself, i know a lot of people that uses CDN with local fallback.\n@markrendle can you add some docs?\n. @markrendle ping :)\n. ping :)\n. ping :)\n. Closing for lack of response.\n. That's intentional. Bower packages shouldn't contain minified assets.\n. lgtm. let's merge when @addyosmani has reviewed.\n. PR welcome ;)\n. > Detect if browser support localStorage\n:+1: but separate PR with tests\n\nI have fixed the problem in basket.clear(). If crashes when try to clear loaded url contained \"basket-\" (i.e. \"basket-require.js\")\n\n:+1: but separate PR with tests\n\nNo, thanks to the rest :)\n. Yes, that would be better. Care to do a PR?\n. Looks good. Thanks for doing it :D\n. Agreed, looks useful. Mind updating the docs too?\n. Thanks :)\n. I think both options sounds reasonable, but I think I prefer 1.\nSidenote, we need to ensure that key in basket-<key>-<JSON.strigify(props)> does not contain the separator character -. Let's just use \\t for separating the parts.\n@addyosmani thoughts?\n. > Why?\nbasket-foo-bar-baz-{}\nParsing out the key foo-bar-baz is totally possible, but unnecessary complex.\n\nIf we are ok to not support use case where user manually adds basket entry to the localStorage\n\nWe are.\n\nGenerate map during remove as it either way iterates through all localStorage\n\nCan you clarify? I'm not sure I see the original issue prompting this.\n. You're assuming iteration is slow, but I don't really that's the case.\n\nHow do we find it in the localStorage?\n\nWe do a regex for matching the key: new RegExp('basket-' + key). Then iterate and check.\n. Yup, sounds good to me.\n. No thanks. This is a job for your concatenator.\n. The future is definitely with the SW Cache API and not localStorage.\n\nWe either consume Shed\n\nIf so, what would it add it add upon Shed?\n\nimplement a lightweight layer that uses the Cache API polyfill to support other browsers\n\nIsn't that what Shed is attempting to do?\n. Then yes. I think Basket.js should be rewritten to depend on Shed.\n. IndexDB doesn't have perfect browser support: http://caniuse.com/#search=IndexedDB So not sure. Depends on what browsers we want to target.\n. Thanks, but we use JSHint, not JSLint.\n. This is why I wish jsperf didn't exist. It doesn't matter if Basket.js can add 1 million or 4 million entries a second. The normal use-case is to just add a few. This will have no impact whatsoever no matter how big your site is. Thanks though :)\n. It has no effect, so it would be doing a change just for the sake of change. Also MDN recommends .getItem, over direct access.\n. I second that, from experience ;)\n. @addyosmani Sure, added ;)\n. @rwldrn I've fallen in love with grunt, so this was a nobrainer ;)\n. :)\n. @addyosmani @peol What are your thoughts about following the idionmatic.js style guide?\n. @addyosmani It's almost identical to the jQuery style, only more thoroughly explained. It won't slow you down if you use it consistently everywhere, it will actually make you faster, since you now longer need to think about how to format your code, it just muscle memory.\n. Done ;)\n. Np, your was better ;)\n. The problem with IndexedDB is that it requires user approval, which for me, is a no go. Who would want to annoy their users with a prompt to only save a few milliseconds?\nA JS mutable cache manifest is what we really need. Where we have some APIs to add/remove files from the manifest. Maybe we should suggest something like that to the right people? Since there is clearly a need for better control of caching.\nUsing other storage methods to cache script is a temp hack, which does not scale in the long run. At the moment localStorage is our best bet, even though I have my doubts.\n. I commented on the jQuery Standards issue tracker, but there seems to be little to no activity there the last few months.\n. Yes, I thought so, though Louis-R\u00e9mi has already tried, and there's an open issue on the W3 issue tracker.\nBtw, discovered today that Chrome only gives you 2.5 MB localStorage, since it's saves everything in UTF-16...\nHave you explored the possibility of using the FileSystem API? If you use the temporary storage, you don't have to ask the user for permission.\n. I don't disagree, just an observation. Might be an edge case, but Twitter is over 2 MB :P\nI think we should at least include the Filsystem API in our perf tests first. It's worth the effort if there's any gain from using that API. Remember that having only Chrome support that API, still means over 30% of users would benefit from it.\n. From the Sencha Touch 2 announcement today:\n\nSecond, our groundbreaking new app loader caches your entire application within localStorage. \n. Another article on localStorage.\n\nHis perf test also show that localStorage in Safari is way faster than any other browser, and that Chrome is way slower. Wonder why that is... If every browsers was as fast as Safari, no one would actually complain about localStorage. It looks like a lot of the implementations could be drastically improved without changing the spec.\n. Interesting thoughts about localStorage.\n. Yes, I also found the comments interesting, they usually are. localStorage being way faster in Safari than any other browser clearly shows that it's mostly an implementation issue, which can be fixed without N years in committee meetings to change the spec. \nThough it wouldn't hurt to have async localStorage and ability to ask for more storage.\n. It's probably calling the function, which does create a slight overhead, instead of just directly accessing the array index, but again, a perf test does not show real world usage, otherwise Chrome localStorage would clearly be useless.\n. I've already read them, searched for localStorage caching the other day too ;)\nbasket.js is btw 4th when searching for this!\nI've also looked through the Chromium issue list. I however found a issue and pretty good explanation from a Chromium dev. If you read this, go to the issue and star it! Thanks :smiley:\nAlso retweet this if you want.\n. Performance of localStorage revisited\ntl;dr can block pageload, benchmarks needed, new async API wanted, use with care.\nNothing new. Though seems strange that no one has created a realworld localStorage benchmark.\n. From my understanding it only blocks when it encounters localStorage access in the code. So if that code is at the bottom of the page or async/defer, it should not block page loading. So the important question is still; is loading scripts from disk into memory faster than loading it from network? It should be, but as I said earlier, we need tests to prove it.\n. Yes, would be nice to be able to show some numbers on the site ;)\n. @addyosmani sendt me this interesting article http://calendar.perfplanet.com/2012/is-localstorage-performance-a-problem/\nI think this and some previous articles clearly show that localStorage is usually not a problem. We could still use some some perf tests with storing/fetching larger amount of data, which we do. But I'm pretty confident IndexDB and the Filesystem API is not the solution for Basket.js. We should update the Why localStorage to summary reflect the article.\n. As mentioned in another issue, would be interesting too see localStorage vs appcache, even though they have entirely different purposes, they can be exploited for the same.\n. async localStorage clone based on IndexDB: https://github.com/slightlyoff/async-local-storage\n. We definitely should go the Python way and only have one true way of doing it.\nI'm in favor of only supporting the .require({}) syntax.\n. Correct, good eye. Though since we only accept one argument to require, we could drop the array, and just use infinite arguments?\nbasket.require({},{},{});\nand then just [].slice.call( arguments )\n. I've also noticed there are some duplication between them, that would be nice to get fixed.\nIt is however useful to be able to only load a script into localStorage for later use. Preloading. But we could drop the .add() method and instead just have a property in our .require() method?\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123',\n    execute: false\n});\n. We could, but I'm not sure we should, although I don't really have that strong opinion about it. We should be careful about having sugar that doesn't really save that much typing and it gives the user multiple ways to do one thing.\nThe point of having a powerful .require method is that they can do all the loading in one method. If we introduce the .add sugar. User will start to do this:\njavascript\nbasket.add({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123'\n}).require({\n    url: 'http://website.com/foo2.js',\n    key: 'foo2.js',\n    hash: '123'\n});\nWhen this, in my opinion, looks better:\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123',\n    execute: false\n},{\n    url: 'http://website.com/foo2.js',\n    key: 'foo2.js',\n    hash: '123'\n});\nI'm a -0 on this.\n. > Once we've finalized the API for the next version, I'd love to get a few people actually trying out the changes so we can see whether a minimal set of methods vs. some added sugar would be needed.\nDefinitely. I've been thinking about this too.\n. Addy knows everyone, so I'm sure he can find someone that would need this ;)\nAs far as I know; Google, Bing and Sencha Touch 2 uses their own localStorage loaders. The target would be devs that needs to aggressively cache their assets, like realtime sites, heavy JS apps, etc...\n. Sounds good :)\nThere are some stuff that needs to be done before we can consider it production ready. The first one is to get some users to try it out, give feedback, and help us create something that is intuitive and useful.\nHead grab:\n- Used in the wild (obviously) - and proven to be stable and pretty bug free.\n- Perf tests!\n- Complete test suite\n- Finalized API\n- Case studies\n- Docs\n- Superlicious website\n. I've already collected the ones I think are useful to us in #24 btw.\n. Yes, I agree. Feel free to move them over, or I'll do it sometime ;)\n. Yup\n. Since I suggested it, I should probably write why:\nThe thought is that the version is like a checksum, we don't care about the format or anything about it, only if it's changed or not. When a the version is changed, it will remove the old one, and add in this (like overwrite). This is similar to overwrite, but with one big difference, I don't have to think about the last version used. With overwrite, you need to remember if you have to overwrite, this can cause subtle bugs when forgotten. A better name for it would probably be something like id or hash. I think this can actually replace overwrite, since you can just change the version to get the same effect.\n@addyosmani Thoughts?\n. We would only need to download the script that .requires the dependencies, but this is wanted, since it gets updated.\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '123'\n});\nIt would then be replaced if we changed the hash:\njavascript\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    hash: '321'\n});\n. Yes, exactly ;) Hash is descriptive enough for me, but other might not get that. unique could work too.\n. @mahemoff Yes, I've seen the proposal, and I really like the checksum idea, but as you said yourself, a little too much.\n\nThe thinking being that you change the URL whenever you want to change the resource.\n\nThat's a valid thinking, but I (and probably a lot of other devs) mostly use a static filename for my JS files main.js, jquery.min.js, etc. You could of course append an url parameter, but then the hash/unique property is a lot cleaner.\n. I would have no problem in supporting both btw, but what Addy said ^\n. When would this be needed? I can't really see the usecase.\n. Wouldn't it be easier if we just let the user specify the TTL in hours?\njavascript\nttl: 24 * 7 // 1 week\nThis would save us some bloat.\n. I think this would be a nice way to automagically scale the localStorage space. We should definitely consider having an opt-in for it, or even by default.\n@peol I don't see the issue. Does it really matter if the cached asset is dropped to early? It will just be refetched from the server. You can't rely on it being in localStorage anyway. What if the user wipes it themselves?\nThe nice thing about the automatic trasher is that it will allow for new entries to take priority instead of old (and maybe even obsolete) entries. An even better use case is if the user doesn't use TTL. Then the asset would live in localStorage forever, and block new entries, but with the automatic space saving, it would be trashed when the space was needed (we would add a timeStamp on when every entry was added to localStorage).\n. I like ttl, but expire might be clearer.\nOldest script.\n. Nothing\n. I agree, we should wait.\n. Yes, I also think we should handle this, but it's probably smart to have a way to override/disable.\n. \"definitely do it this week\" - you said it :p\nWhen would anyone want to load a script twice? Just trying to come up with a reason it should be configurable. And why would anyone try to load the same script twice in the first place?\n. I think we should prevent it by default. If someone wants (for whatever insane reason) to load a script twice they could just basket.remove() it first right?\n. > However, I think we should use new RegExp and use the storagePrefix value so we don't have to maintain it on several places if we choose another prefix.\nI don't see why. It's not like we're going to change it often. We're probably not going to change it at all.\nUsing a regex literal is twice as fast as using the constructor, so I feel pretty strongly about not using the constructor.\n. Yes, I realize it's not any noticeable performance improvement, but it is best practice to use the literal whenever possible. Either way, the prefix is static, and not something that is going to change anytime soon. We shouldn't love it to the top anyway, since that would create a unnecessary \"global\".\n\nAlso, there might be a use case to allow the prefix to be configurable\nlater on.\n\nDo we really want to do premature feature facilitation? Can't we just handle it when or if the time comes?\n. We should IMO throw an exception, and fail the chain. It would most probably fail anyway. This way it's not a subtle fail.\n. @felipemorais would you be interested in doing this one?\n. Hmm, @wibblymat any thoughts?\n. I honestly don't think it's worth it. It might be useful in some cases, but we're shooting for the common case.\n. This is out of the scope of this project. The server shouldn't have to care about the frontend using basket.js.\nIf you need this yourself you can easily override the basket.get() method and parse the concatenated JS file yourself ;)\n. Clear all method is already implemented in the api-rewrite branch: https://github.com/addyosmani/basket.js/commit/4c24808d68d4f1ebfffc13ebf886974e4b0aa95b\nWould that be enough?\n. I'm not sure I understand your question?\n. I've been wanting to do that for some time, but I never seem to get the time to do it :/\nI don't think we should sunset it yet, let's give it a few more months.\n. Yes, that's correct, use dist/basket.js. lib/basket.js is work in progress.\n. Thanks :)\n. Why exists? Couldn't you just do !!basket.get(key)?\n. Thanks :)\nKeep em coming!\n. Does the testsuite pass locally?\nCan we have some docs?\n. Not at all\n. Landed. Thanks :)\n. @addyosmani \n. nop\n. @addyosmani Should we tag the 0.3 release and announce it, and put it in Bower?\n. Sgtm2\n. Good point.\nWe might explore adding a dependency on rsvp.js, it's lightweight and Promises/A compliant.\nWhat do you guys think?\n. I like it :)\nSo there is no way to use the rsvp.js lib?\nWhen.js is quite a bit larger. And if we were to go with a fully featured one, I think I would prefer the more popular Q.\nWe're not going to include it in the repo, but rather add is as a dependency in the Bower component.json file.\n. @wibblymat I like it :)\n@addyosmani @peol u think?\n\nIts a simple error which breaks it completely, so I've got a fixed version in to test against.\n\nCan you open a ticket or PR on rsvp.js to get it fixed?\n. Can you paste in the output in the Android console or something?\nIs it your own project it doesn't work with or the demo on the website?\n. > I have a pending fix, should I run grunt and commit the dist/ files as well?\nNo, only on releases.\n. @peol I think the easiest is to just do compile it in the same commit that bumps the package.json and component.json. I dunno, we might do more changes before wednesday.\nThanks for the fix btw :) Always a pleasure having to fix Android <4.0 bugs :p\n. Landed. Thanks :)\nCan you update the docs about the clear(true) and the new behavior?\n. Also, please squash your commits when done :)\nhttps://github.com/addyosmani/aura/wiki/Git-Guide\n. Copy pasted from a comment in another issue:\n- Used in the wild (obviously) - and proven to be stable and pretty bug free.\n- Perf tests!\n- Complete test suite\n- Finalized API\n- Case studies\n- Docs\n- Superlicious website\nIn addition I would say we would need to resolve the current open issues.\nWe do however intend to release versions between that.\n. 0.3 is tagged and published on Bower.\n. @addyosmani Should we announce it somewhere, or should we wait until a more mature release?\n. Sure\n. :+1: \n. Hah, we're are hopeless... :p\n. Why monday? I would like for us to try to finish up the docs and get it out today or tomorrow if possible.\n. k, let's see when we get the docs ready and are happy with it ;)\n. Just wanted to let you all know Basket.js was featured on BadassJS!\nhttp://badassjs.com/post/40850339601/basket-js-a-javascript-loader-with-localstorage-based\n// @wibblymat \n. @addyosmani felt good being ahead for once? :P  (internal joke)\n. Also add some analytics to the site.\n@addyosmani Can you create an Analytics thing and add us?\n. Plugins are not supported at all, but that's fine, I'm pretty sure we don't need any. And if we do, we could always use JS to do it.\n. Pinging you in incase any of you would be interested in doing this.\n@ericduran @zenorocha \n. @zenorocha what's the benefit? The reason I usually favor Jekyll for simple sites is because you don't have to commit the built site.\n. I would use Docpad if I were to create static site anywhere else than GitHub.\n. We'll get it into Bower using a fork for now, placed here probably: https://github.com/components\n. > Should I try to get a component.json file into the upstream repo first?\nYou could try, but I'm pretty sure they won't. They also still have an open PR for a component.json file for another package manager: component(1)\n\nThe github.com/components org that sindresorhus mentioned contains just the components.json and the library for each project. Should I create a repo like that or would I register a full fork of the project?\n\nJust create a repo like that. Created the repo and added you: https://github.com/components/rsvp.js\n\nIf a full fork, should it include the .all() method we want? I'd guess no so as not to confuse others.\n\nNo\n. @wibblymat Landed. Thank you so much for this! :hamburger:  Really great to have promises. Would you be interested in doing a PR to update the docs accordingly? \n. @wibblymat welcome! :D :dancer: \n. I'm wary of this:\n\nSince knowing when the file has loaded is not reliable, it does not make sense to explicitly support CSS files in RequireJS loading, since it will lead to bug reports due to browser behavior.\n\nHowever, I'm all in if we can do it in a reliable matter on modern browsers without too much code, but I would not want us to support it if we can't know when the CSS has loaded. Probably needs some research first.\n. Looks succinct enough to me\n. :+1: when the above is fixed\n. :+1: \n. Yay, remember to also update and tag the shim repo then they do.\n. Because AppCache is a douchebag\nbasket.js gives you more control, but is only for JS. Research both and pick your poison.\nWe're going to write a better comparison of the alternatives in the future.\n. > is it a case of trading off performance with simplicty that basket.js provides? If thats the case then a tool that automatically generates and manages a manifest file for you can do the same without the performance hit..\nSimplicity yes, and being able to define and load dependencies programmatically, instead of having to define a manifest upfront.\nWe've tried automagic generation of appcache manifest in yeoman, and I didn't really like it, since it will never know all your resources. (more discussion about that here https://github.com/yeoman/yeoman/issues/762).\n\nor is localstorage actually faster than appcache, thus compensating for additional load/parse/execution overhead?\n\nDunno, I would guess no, but we should make some perf tests prove it either way.\n\nalso, images/css - basket js could do these too? Unless theres limitations on the localstorage (eg where a lot of image data could exceed the limit) - in which case you would use appcache, and since you're using it for images you may as well use it for scripts and css - unless there's any significant benefit to loading scripts into localstorage as a seperate affair?\n\nCSS maybe, see https://github.com/addyosmani/basket.js/issues/60. Images, no, it would be slow and unnecessary and most likely slow don't page load since localStorage is loaded into the memory from hdd on pageload, would also exceed quota a lot. Images also doesn't block rendering, so I don't see the benefit.\n\nThat said, appcache was created to make resources available offline, localStorage as key/value store, and basket.js exploits it for an attempt at improving script loading. One change in the manifest requires all files to be redownloaded. There are benefits and downsides to all of them. Depends on your usage and requirements. We should make an attempt to document these clearly and in what situations you would benefit from using basket.js\n. > AppCache is a douchbag when you try and do it by hand. Don't do it by hand. Find a utility for your stack and you should never have a problem, only drastically lower server costs, and a web app that's as fast as a local app.\nI'm pretty sure that magical tool doesn't exist though. I encourage you to create it.\n\nIMO localStorage is best for small pieces of data\n\nscripts and css are small pieces of data.\n. > Those tools do exist, Rack::offline for RoR and of course grunt-contrib-manifest I don't know if they're perfect yet but I'll be hopefully getting to them after another project.\nI dunno, they only help you slightly. The grunt task the least, which really only let's you specify stuff in an object instead of directly into the manifest.\n. @addyosmani I'm not sure exactly what you're asking. Can you elaborate?\nFor Filesystem and IndexedDB. We've discussed it at length before, in the initial conception of Basket.js, but we chose not to go down that path because of various reasons. From what I can remember it was mainly the extremely inconsistent behavior of IndexedDB and the fact the both (pretty sure) asks the user for permission, which is a no go for a generic caching lib.\n. Always happy to review a working prototype, but I have my doubts.\n. That was fast!\nI don't think we need to split up the docs in so many files.\n. @zenorocha Landed. Thanks for doing this :D\n. Good idea, but of the scope for this project. Do let us know if you pursue it though ;)\n. @wibblymat @felipemorais @peol \n. I would think there is a reason Yepnope and RequireJS has it as an extension.\n. Closing in favor of #84\n. I agree with this proposal. Binary data is not suitable for localStorage, so only text sounds good to me.\n. :+1:\n. Why? It's called basket.js on the repo. That would only be confusing.\nbower install --save basket.js\n. Yes, let's do a version.\nI'd prefer we wait until it's rearchitectured and we have a CSS plugin that is fully tested.\n. Try StackOverflow. Add a link to the question here. Expand with much more information.\n. Big yes to all points.\n. Thanks Matt and great to hear your touching the code again. Me and Addy just talked today about wanting to get this thing rolling again :)\n. This is invalid, the bower package works fine.\n. :+1: while i don't see the use myself, i know a lot of people that uses CDN with local fallback.\n@markrendle can you add some docs?\n. @markrendle ping :)\n. ping :)\n. ping :)\n. Closing for lack of response.\n. That's intentional. Bower packages shouldn't contain minified assets.\n. lgtm. let's merge when @addyosmani has reviewed.\n. PR welcome ;)\n. > Detect if browser support localStorage\n:+1: but separate PR with tests\n\nI have fixed the problem in basket.clear(). If crashes when try to clear loaded url contained \"basket-\" (i.e. \"basket-require.js\")\n\n:+1: but separate PR with tests\n\nNo, thanks to the rest :)\n. Yes, that would be better. Care to do a PR?\n. Looks good. Thanks for doing it :D\n. Agreed, looks useful. Mind updating the docs too?\n. Thanks :)\n. I think both options sounds reasonable, but I think I prefer 1.\nSidenote, we need to ensure that key in basket-<key>-<JSON.strigify(props)> does not contain the separator character -. Let's just use \\t for separating the parts.\n@addyosmani thoughts?\n. > Why?\nbasket-foo-bar-baz-{}\nParsing out the key foo-bar-baz is totally possible, but unnecessary complex.\n\nIf we are ok to not support use case where user manually adds basket entry to the localStorage\n\nWe are.\n\nGenerate map during remove as it either way iterates through all localStorage\n\nCan you clarify? I'm not sure I see the original issue prompting this.\n. You're assuming iteration is slow, but I don't really that's the case.\n\nHow do we find it in the localStorage?\n\nWe do a regex for matching the key: new RegExp('basket-' + key). Then iterate and check.\n. Yup, sounds good to me.\n. No thanks. This is a job for your concatenator.\n. The future is definitely with the SW Cache API and not localStorage.\n\nWe either consume Shed\n\nIf so, what would it add it add upon Shed?\n\nimplement a lightweight layer that uses the Cache API polyfill to support other browsers\n\nIsn't that what Shed is attempting to do?\n. Then yes. I think Basket.js should be rewritten to depend on Shed.\n. IndexDB doesn't have perfect browser support: http://caniuse.com/#search=IndexedDB So not sure. Depends on what browsers we want to target.\n. Thanks, but we use JSHint, not JSLint.\n. This is why I wish jsperf didn't exist. It doesn't matter if Basket.js can add 1 million or 4 million entries a second. The normal use-case is to just add a few. This will have no impact whatsoever no matter how big your site is. Thanks though :)\n. It has no effect, so it would be doing a change just for the sake of change. Also MDN recommends .getItem, over direct access.\n. ",
    "peol": "If so, I think issue #2 can be closed with this.\n. @mahemoff Ah, true. I didn't think about that. I'll look into that after lunch (GMT).\n. Here's a test that currently fails in my repo:\nasyncTest(\"require() a script, execute callback post-load via wait()\", function(){\n                   expect(2);\n                   basket\n                       .require(\"jquery-1.7.1.min.js\")\n                       .wait(function(){\n                            ok(true, \"callback invoked\");\n                            ok(\n                                localStorage.getItem(\"basket-jquery-1.7.1.min.js\"),\n                                \"waited correctly\"\n                            );\n                            start();\n                       });\n            });\nWrapping the asserts in a setTimeout passes the test, indicating that .wait() doesn't actually wait, it's just been quick so we haven't noticed. :)\n. Yes, that's at least what I had in mind when seeing a wait() function. If you want wait for individuals, we could perhaps go for something like this:\nbasket\n  .require('jquery.js')\n  .require('underscore.js')\n  .wait({\n    'jquery.js': function() {},\n    'underscore.js': function() {}\n  },\n  // second param to .wait(), if first is an object, will invoke when all has been loaded\n  function() {});\nWithout specific-callback object:\nbasket\n  .require('jquery.js')\n  .require('underscore.js')\n  .wait(function() {\n    // invoked when all has been loaded\n  });\nor simply do:\nbasket\n  .require(\"foo.bar.js\", function() {})\n  .require(\"bar.foo.js\", function() {})\n  .wait(function(){});\nI think the former is easier though.\n. Agreed. Also, this should probably work...:\n```\nbasket\n  .wait(function() {})\n  .require('jquery.js')\n  .require('underscore.js');\nsetTimeout(function() {\n  basket.wait(function() {\n    // this should still be invoked..?\n  });\n}, 5000);\n```\n. I think I'm confusing both of us. This is how I would think it works:\nbasket\n  .require(\"foo.js\")\n  .require(\"bar.js\")\n  .wait(function() {})\n  .require(\"baz.js\")\n  .wait(function() {});\nFirst .wait() waits for first two.\nLast .wait() waits for all of them.\nIf the user ever uses .wait(), it gets invoked directly if there's nothing in queue (so, basically it's working like $(document).ready().\nSorry for the confusion.\n. Great. Before release, I'll do a complete reformatting on the file (and QUnit tests) so we can maintain it easier. Thanks @sindresorhus!\n. Yes, that looks exactly what I want and pushing for at work. Feel free to fix it whenever, or I'll tackle it soonish. I think we need to sync this with any work that is done elsewhere to ease merging. I got one pull request pending, but after that I can wait 'til this is done. :)\n. That would be great!\n2012/3/4 Addy Osmani <\nreply@reply.github.com\n\nLet's go for it. Is it worth adding a reference to the guide in our readme?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/pull/21#issuecomment-4309955\n. The .wait() bug is already reported as well: https://github.com/addyosmani/basket.js/issues/20\n. Nice work!\n\nThis is tricky business and we'll probably bump into implementations where we should use one or the other, and that can't really be feature tested, which means we'll have to rely on browser sniffing in those cases. :(\n. I think that if we just abstract the storage implementation we have, we can easily add others by just plugging them in. 2,5mb should be sufficient for almost all JavaScript application, or you might have to reconsider your codebase. :)\n. I stumbled upon this, https://twitter.com/#!/johnallsopp/status/177964915632513024.\n\nInteresting, double your localStorage read performance in Chrome using indexes (ls.getItem[i]) not keys (ls.getItem('key'))\n\nPerf test: http://jsperf.com/localstorage-science\n. Makes sense. You benefit a lot with basket when you're using a mobile device, especially with a poor reception. \n. In that test, my iPad on WiFi seems to be almost perfectly equal, the same for iPhone 5 with good 3G connection. I'll try when I have a crappy connection as well to see if that makes a big difference. :)\n. I guess it could, we might need to streamline the API a bit if we choose to support this. If we support inline callbacks, I don't really see a reason to use .wait() for individual callbacks at all. I.e.:\nbasket\n  .require('foo')\n  .wait(fn)\n  .require('bar')\n  .require('baz')\n  .wait(fn);\nwould become moot.\nMaybe we should only support the .require({}) syntax? With additional: .require({}, <callback when all has been pulled in>) and just ignore .wait() all together.\n. Actually, using an object straight up might be bad, that's not guaranteed to be parsed in that order, right? So...\nbasket.require([\n  {\n    url: 'foo-1.2.3.js',\n    key: 'foo',\n    overwrite: true\n  }\n]).wait(fn);\n?\n. Yeah, that would make sense. I'll say go for that syntax. And while someone are at it, make .add and .require use the same logic behind the scenes. Or do we actually need both?\n. I think .store() instead of .add() would be a bit clearer on what the difference is, but I do agree that they'd be rather confusing at first glance.\n. I agree, but if we would have this, I thought store makes more sense. :)\nOn Mar 17, 2012 3:34 PM, \"Addy Osmani\" \nreply@reply.github.com\nwrote:\n\nWhilst a very very trivial note, the only reason .add() was named so\nwas because people typically add things into a basket and that idea (I\nfelt) was easy to grasp. I don't particularly mind us renaming it at all,\nbut Sindre does raise an interesting point.\nA single-use .add()/.store() probably wouldn't add that much\nvalue if we've expanded require() to handle most use cases. Granted\nthan many of the most common script loaders are sticking with\n.require() in some form, I'm okay with us dropping the sugar.\nOnce we've finalized the API for the next version, I'd love to get a few\npeople actually trying out the changes so we can see whether a minimal set\nof methods vs. some added sugar would be needed.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25#issuecomment-4554359\n. Who would be the target tho, is a solution like this implemented somewhere?\nOn Mar 17, 2012 9:34 PM, \"Sindre Sorhus\" \nreply@reply.github.com\nwrote:\n\nOnce we've finalized the API for the next version, I'd love to get a few\npeople actually trying out the changes so we can see whether a minimal set\nof methods vs. some added sugar would be needed.\n\nDefinitely. I've been thinking about this too.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25#issuecomment-4556873\n. So, basically, hash just acts as the classic ?_=<random number> cache bust. I guess that makes sense, but perhaps it should be named something more in line with what it actually does?\n\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    unique: '321'\n});\n?\n. It might be useful for some persistent caching, maybe a definition of some sort... That would need to be refreshed once a day. Iunno, I just remember someone talking about it. :)\n. Yes, exactly. One the TTL hits (on the next request) it'll just refetch and update the TTL timestamp. We can have this open for now and see when we have ironed out the \"new\" API if it still makes sense.\n. +1 on hours only and leave the math to the user.\n2012/3/12 Sindre Sorhus <\nreply@reply.github.com\n\nWouldn't it be easier if we just let the user specify the TTL in hours?\njavascript\nttl: 24 * 7 // 1 week\nThis would save us some bloat.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/27#issuecomment-4462903\n. Interesting. But I think this would introduce inconsistencies in our case.\nWe'll focus on longer TTL:s an dropping the oldest might drop something\nthat still got hours, maybe even days, left. Especially if the developer\nstores the TTL elsewhere for e.g. warning the user that data needs to be\nrefreshed soon.\n\nBut I guess it's possible to have this optional.\nOn Mar 17, 2012 4:54 PM, \"Addy Osmani\" \nreply@reply.github.com\nwrote:\n\nJust leaving this here for future reference:\nhttps://github.com/pamelafox/lscache\nPamela also approached a TTL-like solution for her project but did\nsomething interesting with trying to remove old entries automatically if\nyou were close to exceeding the available LS space. We might want to try\nsomething like this at some point :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/27#issuecomment-4554872\n. I agree that this is something we might consider in the future, but there's a lot of quirks that needs to be worked out. Loading CSS, even if FOUT wasn't an issue, is still problematic and I think basket.js should focus on stabilizing the script-loading part for now.\n\nThanks for the contribution though, @amrnt :)\n. Great. Would be great if anyone would have time to fix this, I'm working on the TTL stuff as we speak and the tests doesn't pass because of this. :D\n. I think the problem is the other way around. Currently, if the dev by mistake basket.require() the same script more than once, we'll write over the old one (in this example, let's say he pulled in jQuery and then added some plugins, and then basket.require() jQuery again), he'll lose all the plugins. I'm not sure that's something we want to handle, but it might be nice from both this perspective, and possibly even for debugging (getting access to a list of what files that has been loaded, which we use to see if a script has been loaded already).\n. Absolutely, I thought about this earlier today when I submitted the other issue. I thought .reset() though, but that's just semantics. :)\n+1\n. However, I think we should use new RegExp and use the storagePrefix value so we don't have to maintain it on several places if we choose another prefix.\n. If we love it to the top it'll only run once, doubt we'd see a noticeably\nperformance hit. It's just a maintainability question, to be on the safe\nside.\nOn Mar 18, 2012 4:44 PM, \"Sindre Sorhus\" \nreply@reply.github.com\nwrote:\n\n\nHowever, I think we should use new RegExp and use the storagePrefix\nvalue so we don't have to maintain it on several places if we choose\nanother prefix.\n\nI don't see why. It's not like we're going to change it often. We're\nprobably not going to change it at all.\nUsing a regex literal is twice as fast as using the\nconstructor, so I feel pretty strongly about not using the constructor.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/pull/30#issuecomment-4561991\n. Move*\n\nAlso, there might be a use case to allow the prefix to be configurable\nlater on.\nOn Mar 18, 2012 4:47 PM, \"Andre Hansson\" peolanha@gmail.com wrote:\n\nIf we love it to the top it'll only run once, doubt we'd see a noticeably\nperformance hit. It's just a maintainability question, to be on the safe\nside.\nOn Mar 18, 2012 4:44 PM, \"Sindre Sorhus\" \nreply@reply.github.com\nwrote:\n\n\nHowever, I think we should use new RegExp and use the storagePrefix\nvalue so we don't have to maintain it on several places if we choose\nanother prefix.\n\nI don't see why. It's not like we're going to change it often. We're\nprobably not going to change it at all.\nUsing a regex literal is twice as fast as using the\nconstructor, so I feel pretty strongly about not using the constructor.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/pull/30#issuecomment-4561991\n. Yeah, we have started some work in the api-rewrite branch on this, but we're only checking if it was OK (200), not sure how we're supposed to handle non-200 (404, 403, or whatever), maybe just try to continue executing the stack and if it breaks, it breaks?\n. I think it's fine that we're executing them as we pull them in. If the user is chaining stuff and something fails, he has an issue with his project and what basket.js in that case is rather minor. The fail handler does get called anyway so I'm fairly sure his project is in a dodgy state anyway since not all the required files could get pulled in.\n\n\nIf we're queueing up execution we could have a huge bottleneck instead, and I'm not sure we're gaining much from it.\n. Agree, we're somewhat playing around with this at work the coming weeks/months or so, I still feel that there's a place for a lib like this, and nothing else that I've seen looks as versatile as this project.\n. That's an interesting idea but I think that's a classical example of what an extension/wrapper could do. basket.js could probably very easily become a mediator between require.js and actual XHR calls, so I think it's definitely doable but more something that are outside the scope of this project.\n. I would rather not alter the response, it would make much more sense to a user if it returned null/undefined/empty string than an object that has a exist key in it. I'd rather check with typeof in that case.\n. Looks good to me. I'll merge if no one has any objections later today :)\n. Sounds good to me.\nOn Sun, Nov 25, 2012 at 12:13 PM, Addy Osmani notifications@github.comwrote:\n\nI think we should tag the release, come up with an updated changelog, put\nit on Bower and announce on Monday. How does that sound?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/pull/44#issuecomment-10692369.\n. Looks good to me. I'd love for us to lift out the allResolved function and money-patch it to rsvp namespace and perhaps also send a PR upstream. That'll remove some of the RSVP-specific logic from basket.js and makes it a bit more clear what we're doing.\n. I'm cool with this when build goes through. Thanks for taking the time @wibblymat. :)\n. I have an old HTC Desire, charging it now and I'll have a swing at this.\n. I have a pending fix, should I run grunt and commit the dist/ files as well?\n\n@newjing checking for window.basket should be enough, it's an object on my Android phone (2.3.6) so there shouldn't be any problem detecting it. Though, basket.get() is broken in Android < 3.0 (that's what the pending fix is for) so try again when that's been committed later today.\n. > No, only on releases.\nAlright, thought we were announcing on wednesday so this would be included in the 0.3.0 tag (or 0.3.1). I'll push it now then, all unit tests passed on Android 2.3.6.\n. @sindresorhus Agreed, makes sense :)\n. Awesome. Good work team!\nOn Wed, Nov 28, 2012 at 11:02 PM, Sindre Sorhus notifications@github.comwrote:\n\n0.3 is tagged and published on Bower.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-10824927.\n. Sounds good. Just ping this issue before so we can help :)\n\nMvh,\nAndr\u00e9e\nOn 1 dec 2012, at 16:47, Addy Osmani notifications@github.com wrote:\nI think we should announce on twitter. Wednesday sound good?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-10918427.\n. Yeah, thought about it on tuesday but toally forgot on wednesday. :p\nMonday sounds good to me.\nOn Sat, Dec 8, 2012 at 7:05 PM, Addy Osmani notifications@github.comwrote:\n\nLooks like Wednesday slipped. Monday sound good to everyone? We can tweet\nout about the release and link to a changelog.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-11161507.\n. So... It slipped again, should we aim for a release next Monday so we have time to update the docs regarding using promises now?\n. Fine by me, just thought it was open source and all, I won't have time to\nhelp out until this weekend for example :/\n\nOn Wed, Dec 12, 2012 at 1:23 PM, Sindre Sorhus notifications@github.comwrote:\n\nWhy monday? I would like to try to finish up the docs and get it out today\nor tomorrow if possible.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-11286931.\n. +1 on jekyll and md. Do you guys know what's supported on github pages when using jekyll (plugins and whatnot), or is just \"plain\" jekyll?\n. Maybe an async option?\n\nbasket.require({ url: 'jquery.js', async: false }, { url: 'jq-plugin.js'\n}).then(fn).\nOn Wed, Dec 12, 2012 at 11:21 PM, felipemorais notifications@github.comwrote:\n\nI'd like to add a require queue method. ( i.e. A file could be fetched\nonly after previous file ).\nbasket.requireQueue({url:'jquery.js'}, {url:'jquery.plugin.js'}).then...\nIt make sense for most of my use cases.\nInstead:\nbasket\n  .require({url:'jquery.js'})\n  .then(function(){\n    basket\n      .require({url:'jquery.plugin.js'}, {url:'jquery.effects.js'})\n      .then(function(){\n        basket.require({url:'mycode.js'});\n    });\n  });\nMake sense?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/52.\n. I wouldn't mind the support for it, but there's issues around knowing when CSS has been loaded/applied to the document cross-browser, that's why projects like require.js only have support for them with semi-official plugins that are not guaranteed to work without FOUC.\n\nHowever, we could support it but not guarantee the CSS to be loaded before continuing queued stuff. See more here: http://requirejs.org/docs/faq-advanced.html#css\nAny thoughts, @addyosmani @sindresorhus ?\n. I agree. I can modify the build script to spit out an\nadditional concatenated version later today.\nOn Friday, December 28, 2012, Addy Osmani wrote:\n\nI think we should try to come up with a clean solution to this and I'm not\nopposed to doing a 0.3.x soon if it can tackle it well.\nShould we consider bundling RSVP as a part of the build if it's a hard\ndependency or offering a way to build it in if we're not taking care of\nthat?. Ideally, when you download basket you shouldn't have to worry about\ngetting anything else to work with it imo.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/62#issuecomment-11724137.\n. Just merged a fix to main, there's an explanation that basket.min.js is a version they'll use if they want to manually handle the rsvp dependency. Closing this, please re-open if you feel that we need to explain it further/more clear.\n. Yeah, I agree. I was tinkering a bit with it but didn't really look if we explained that RSVP was needed (then, a full version wouldn't need that much explaining).\n\nI'll add an asterisk on basket.min.js that explains that they can use this version if they want to manually handle the rsvp dependency. We shouldn't really need to explain a \"full version\", that's kind of implicit of \"fully working\". Or am I overthinking it?\n. I'm fine having this, but it needs to be documented and explained that it is optional and not something a common user should worry about.\n@jschilli could you update the documentation on this as well?\n. I don't mind at all.\nWhat would happen when trying to store a template that is 0.5kB and the oldest one is a script on like 150kB. We really need some smart logic around what is scrapped and what's not. I'll happily take the overhead fetching the template than dumping the heavy script for example :)\n. True, it just hit me when I started commenting.\nI'll allow it! :)\n. I kinda agree with @sindresorhus on this one.\nWe need another refactoring of the code base to be more generic. This adds more specific (css/js) logic into loads of places so my suggestion would be to generalize the whole flow to only store/fetch data/urls, and add in injection logic etc. as a plugin-type of deal. It'll increase maintainability a lot and we can then decide which plugins we'd support and which ones we'll leave up to the community. My $0.02. \nNo offense to you, @amrnt. Appreciate the work you've done here!\n. Hi.\nThe build fails on all unit tests (fails to retrieve RSVP). I think it's easier to just use http://rawgithub.com/ to get rid of our issue. We'd love to see a PQ on that change if you can.\nEdit: My bad, it's not stable.\nThanks!\n. Yeah, sorry. For some reason I saw curl somewhere at home (early here).\nI don't think it fails because of your fix, but because Travis hasn't been run on the project for quite a while. Maybe @sindresorhus knows if bower changed somehow (the component.json points out rsvp but it seems to be non-existing when running the tests).\nI can look into it on Sunday at the earliest otherwise.\n. Looks good to me, great work so far!\n. If so, I think issue #2 can be closed with this.\n. @mahemoff Ah, true. I didn't think about that. I'll look into that after lunch (GMT).\n. Here's a test that currently fails in my repo:\nasyncTest(\"require() a script, execute callback post-load via wait()\", function(){\n                   expect(2);\n                   basket\n                       .require(\"jquery-1.7.1.min.js\")\n                       .wait(function(){\n                            ok(true, \"callback invoked\");\n                            ok(\n                                localStorage.getItem(\"basket-jquery-1.7.1.min.js\"),\n                                \"waited correctly\"\n                            );\n                            start();\n                       });\n            });\nWrapping the asserts in a setTimeout passes the test, indicating that .wait() doesn't actually wait, it's just been quick so we haven't noticed. :)\n. Yes, that's at least what I had in mind when seeing a wait() function. If you want wait for individuals, we could perhaps go for something like this:\nbasket\n  .require('jquery.js')\n  .require('underscore.js')\n  .wait({\n    'jquery.js': function() {},\n    'underscore.js': function() {}\n  },\n  // second param to .wait(), if first is an object, will invoke when all has been loaded\n  function() {});\nWithout specific-callback object:\nbasket\n  .require('jquery.js')\n  .require('underscore.js')\n  .wait(function() {\n    // invoked when all has been loaded\n  });\nor simply do:\nbasket\n  .require(\"foo.bar.js\", function() {})\n  .require(\"bar.foo.js\", function() {})\n  .wait(function(){});\nI think the former is easier though.\n. Agreed. Also, this should probably work...:\n```\nbasket\n  .wait(function() {})\n  .require('jquery.js')\n  .require('underscore.js');\nsetTimeout(function() {\n  basket.wait(function() {\n    // this should still be invoked..?\n  });\n}, 5000);\n```\n. I think I'm confusing both of us. This is how I would think it works:\nbasket\n  .require(\"foo.js\")\n  .require(\"bar.js\")\n  .wait(function() {})\n  .require(\"baz.js\")\n  .wait(function() {});\nFirst .wait() waits for first two.\nLast .wait() waits for all of them.\nIf the user ever uses .wait(), it gets invoked directly if there's nothing in queue (so, basically it's working like $(document).ready().\nSorry for the confusion.\n. Great. Before release, I'll do a complete reformatting on the file (and QUnit tests) so we can maintain it easier. Thanks @sindresorhus!\n. Yes, that looks exactly what I want and pushing for at work. Feel free to fix it whenever, or I'll tackle it soonish. I think we need to sync this with any work that is done elsewhere to ease merging. I got one pull request pending, but after that I can wait 'til this is done. :)\n. That would be great!\n2012/3/4 Addy Osmani <\nreply@reply.github.com\n\nLet's go for it. Is it worth adding a reference to the guide in our readme?\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/pull/21#issuecomment-4309955\n. The .wait() bug is already reported as well: https://github.com/addyosmani/basket.js/issues/20\n. Nice work!\n\nThis is tricky business and we'll probably bump into implementations where we should use one or the other, and that can't really be feature tested, which means we'll have to rely on browser sniffing in those cases. :(\n. I think that if we just abstract the storage implementation we have, we can easily add others by just plugging them in. 2,5mb should be sufficient for almost all JavaScript application, or you might have to reconsider your codebase. :)\n. I stumbled upon this, https://twitter.com/#!/johnallsopp/status/177964915632513024.\n\nInteresting, double your localStorage read performance in Chrome using indexes (ls.getItem[i]) not keys (ls.getItem('key'))\n\nPerf test: http://jsperf.com/localstorage-science\n. Makes sense. You benefit a lot with basket when you're using a mobile device, especially with a poor reception. \n. In that test, my iPad on WiFi seems to be almost perfectly equal, the same for iPhone 5 with good 3G connection. I'll try when I have a crappy connection as well to see if that makes a big difference. :)\n. I guess it could, we might need to streamline the API a bit if we choose to support this. If we support inline callbacks, I don't really see a reason to use .wait() for individual callbacks at all. I.e.:\nbasket\n  .require('foo')\n  .wait(fn)\n  .require('bar')\n  .require('baz')\n  .wait(fn);\nwould become moot.\nMaybe we should only support the .require({}) syntax? With additional: .require({}, <callback when all has been pulled in>) and just ignore .wait() all together.\n. Actually, using an object straight up might be bad, that's not guaranteed to be parsed in that order, right? So...\nbasket.require([\n  {\n    url: 'foo-1.2.3.js',\n    key: 'foo',\n    overwrite: true\n  }\n]).wait(fn);\n?\n. Yeah, that would make sense. I'll say go for that syntax. And while someone are at it, make .add and .require use the same logic behind the scenes. Or do we actually need both?\n. I think .store() instead of .add() would be a bit clearer on what the difference is, but I do agree that they'd be rather confusing at first glance.\n. I agree, but if we would have this, I thought store makes more sense. :)\nOn Mar 17, 2012 3:34 PM, \"Addy Osmani\" \nreply@reply.github.com\nwrote:\n\nWhilst a very very trivial note, the only reason .add() was named so\nwas because people typically add things into a basket and that idea (I\nfelt) was easy to grasp. I don't particularly mind us renaming it at all,\nbut Sindre does raise an interesting point.\nA single-use .add()/.store() probably wouldn't add that much\nvalue if we've expanded require() to handle most use cases. Granted\nthan many of the most common script loaders are sticking with\n.require() in some form, I'm okay with us dropping the sugar.\nOnce we've finalized the API for the next version, I'd love to get a few\npeople actually trying out the changes so we can see whether a minimal set\nof methods vs. some added sugar would be needed.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25#issuecomment-4554359\n. Who would be the target tho, is a solution like this implemented somewhere?\nOn Mar 17, 2012 9:34 PM, \"Sindre Sorhus\" \nreply@reply.github.com\nwrote:\n\nOnce we've finalized the API for the next version, I'd love to get a few\npeople actually trying out the changes so we can see whether a minimal set\nof methods vs. some added sugar would be needed.\n\nDefinitely. I've been thinking about this too.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/25#issuecomment-4556873\n. So, basically, hash just acts as the classic ?_=<random number> cache bust. I guess that makes sense, but perhaps it should be named something more in line with what it actually does?\n\nbasket.require({\n    url: 'http://website.com/foo.js',\n    key: 'foo.js',\n    unique: '321'\n});\n?\n. It might be useful for some persistent caching, maybe a definition of some sort... That would need to be refreshed once a day. Iunno, I just remember someone talking about it. :)\n. Yes, exactly. One the TTL hits (on the next request) it'll just refetch and update the TTL timestamp. We can have this open for now and see when we have ironed out the \"new\" API if it still makes sense.\n. +1 on hours only and leave the math to the user.\n2012/3/12 Sindre Sorhus <\nreply@reply.github.com\n\nWouldn't it be easier if we just let the user specify the TTL in hours?\njavascript\nttl: 24 * 7 // 1 week\nThis would save us some bloat.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/27#issuecomment-4462903\n. Interesting. But I think this would introduce inconsistencies in our case.\nWe'll focus on longer TTL:s an dropping the oldest might drop something\nthat still got hours, maybe even days, left. Especially if the developer\nstores the TTL elsewhere for e.g. warning the user that data needs to be\nrefreshed soon.\n\nBut I guess it's possible to have this optional.\nOn Mar 17, 2012 4:54 PM, \"Addy Osmani\" \nreply@reply.github.com\nwrote:\n\nJust leaving this here for future reference:\nhttps://github.com/pamelafox/lscache\nPamela also approached a TTL-like solution for her project but did\nsomething interesting with trying to remove old entries automatically if\nyou were close to exceeding the available LS space. We might want to try\nsomething like this at some point :)\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/issues/27#issuecomment-4554872\n. I agree that this is something we might consider in the future, but there's a lot of quirks that needs to be worked out. Loading CSS, even if FOUT wasn't an issue, is still problematic and I think basket.js should focus on stabilizing the script-loading part for now.\n\nThanks for the contribution though, @amrnt :)\n. Great. Would be great if anyone would have time to fix this, I'm working on the TTL stuff as we speak and the tests doesn't pass because of this. :D\n. I think the problem is the other way around. Currently, if the dev by mistake basket.require() the same script more than once, we'll write over the old one (in this example, let's say he pulled in jQuery and then added some plugins, and then basket.require() jQuery again), he'll lose all the plugins. I'm not sure that's something we want to handle, but it might be nice from both this perspective, and possibly even for debugging (getting access to a list of what files that has been loaded, which we use to see if a script has been loaded already).\n. Absolutely, I thought about this earlier today when I submitted the other issue. I thought .reset() though, but that's just semantics. :)\n+1\n. However, I think we should use new RegExp and use the storagePrefix value so we don't have to maintain it on several places if we choose another prefix.\n. If we love it to the top it'll only run once, doubt we'd see a noticeably\nperformance hit. It's just a maintainability question, to be on the safe\nside.\nOn Mar 18, 2012 4:44 PM, \"Sindre Sorhus\" \nreply@reply.github.com\nwrote:\n\n\nHowever, I think we should use new RegExp and use the storagePrefix\nvalue so we don't have to maintain it on several places if we choose\nanother prefix.\n\nI don't see why. It's not like we're going to change it often. We're\nprobably not going to change it at all.\nUsing a regex literal is twice as fast as using the\nconstructor, so I feel pretty strongly about not using the constructor.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/pull/30#issuecomment-4561991\n. Move*\n\nAlso, there might be a use case to allow the prefix to be configurable\nlater on.\nOn Mar 18, 2012 4:47 PM, \"Andre Hansson\" peolanha@gmail.com wrote:\n\nIf we love it to the top it'll only run once, doubt we'd see a noticeably\nperformance hit. It's just a maintainability question, to be on the safe\nside.\nOn Mar 18, 2012 4:44 PM, \"Sindre Sorhus\" \nreply@reply.github.com\nwrote:\n\n\nHowever, I think we should use new RegExp and use the storagePrefix\nvalue so we don't have to maintain it on several places if we choose\nanother prefix.\n\nI don't see why. It's not like we're going to change it often. We're\nprobably not going to change it at all.\nUsing a regex literal is twice as fast as using the\nconstructor, so I feel pretty strongly about not using the constructor.\n\nReply to this email directly or view it on GitHub:\nhttps://github.com/addyosmani/basket.js/pull/30#issuecomment-4561991\n. Yeah, we have started some work in the api-rewrite branch on this, but we're only checking if it was OK (200), not sure how we're supposed to handle non-200 (404, 403, or whatever), maybe just try to continue executing the stack and if it breaks, it breaks?\n. I think it's fine that we're executing them as we pull them in. If the user is chaining stuff and something fails, he has an issue with his project and what basket.js in that case is rather minor. The fail handler does get called anyway so I'm fairly sure his project is in a dodgy state anyway since not all the required files could get pulled in.\n\n\nIf we're queueing up execution we could have a huge bottleneck instead, and I'm not sure we're gaining much from it.\n. Agree, we're somewhat playing around with this at work the coming weeks/months or so, I still feel that there's a place for a lib like this, and nothing else that I've seen looks as versatile as this project.\n. That's an interesting idea but I think that's a classical example of what an extension/wrapper could do. basket.js could probably very easily become a mediator between require.js and actual XHR calls, so I think it's definitely doable but more something that are outside the scope of this project.\n. I would rather not alter the response, it would make much more sense to a user if it returned null/undefined/empty string than an object that has a exist key in it. I'd rather check with typeof in that case.\n. Looks good to me. I'll merge if no one has any objections later today :)\n. Sounds good to me.\nOn Sun, Nov 25, 2012 at 12:13 PM, Addy Osmani notifications@github.comwrote:\n\nI think we should tag the release, come up with an updated changelog, put\nit on Bower and announce on Monday. How does that sound?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/pull/44#issuecomment-10692369.\n. Looks good to me. I'd love for us to lift out the allResolved function and money-patch it to rsvp namespace and perhaps also send a PR upstream. That'll remove some of the RSVP-specific logic from basket.js and makes it a bit more clear what we're doing.\n. I'm cool with this when build goes through. Thanks for taking the time @wibblymat. :)\n. I have an old HTC Desire, charging it now and I'll have a swing at this.\n. I have a pending fix, should I run grunt and commit the dist/ files as well?\n\n@newjing checking for window.basket should be enough, it's an object on my Android phone (2.3.6) so there shouldn't be any problem detecting it. Though, basket.get() is broken in Android < 3.0 (that's what the pending fix is for) so try again when that's been committed later today.\n. > No, only on releases.\nAlright, thought we were announcing on wednesday so this would be included in the 0.3.0 tag (or 0.3.1). I'll push it now then, all unit tests passed on Android 2.3.6.\n. @sindresorhus Agreed, makes sense :)\n. Awesome. Good work team!\nOn Wed, Nov 28, 2012 at 11:02 PM, Sindre Sorhus notifications@github.comwrote:\n\n0.3 is tagged and published on Bower.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-10824927.\n. Sounds good. Just ping this issue before so we can help :)\n\nMvh,\nAndr\u00e9e\nOn 1 dec 2012, at 16:47, Addy Osmani notifications@github.com wrote:\nI think we should announce on twitter. Wednesday sound good?\n\u2014\nReply to this email directly or view it on\nGitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-10918427.\n. Yeah, thought about it on tuesday but toally forgot on wednesday. :p\nMonday sounds good to me.\nOn Sat, Dec 8, 2012 at 7:05 PM, Addy Osmani notifications@github.comwrote:\n\nLooks like Wednesday slipped. Monday sound good to everyone? We can tweet\nout about the release and link to a changelog.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-11161507.\n. So... It slipped again, should we aim for a release next Monday so we have time to update the docs regarding using promises now?\n. Fine by me, just thought it was open source and all, I won't have time to\nhelp out until this weekend for example :/\n\nOn Wed, Dec 12, 2012 at 1:23 PM, Sindre Sorhus notifications@github.comwrote:\n\nWhy monday? I would like to try to finish up the docs and get it out today\nor tomorrow if possible.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/49#issuecomment-11286931.\n. +1 on jekyll and md. Do you guys know what's supported on github pages when using jekyll (plugins and whatnot), or is just \"plain\" jekyll?\n. Maybe an async option?\n\nbasket.require({ url: 'jquery.js', async: false }, { url: 'jq-plugin.js'\n}).then(fn).\nOn Wed, Dec 12, 2012 at 11:21 PM, felipemorais notifications@github.comwrote:\n\nI'd like to add a require queue method. ( i.e. A file could be fetched\nonly after previous file ).\nbasket.requireQueue({url:'jquery.js'}, {url:'jquery.plugin.js'}).then...\nIt make sense for most of my use cases.\nInstead:\nbasket\n  .require({url:'jquery.js'})\n  .then(function(){\n    basket\n      .require({url:'jquery.plugin.js'}, {url:'jquery.effects.js'})\n      .then(function(){\n        basket.require({url:'mycode.js'});\n    });\n  });\nMake sense?\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/52.\n. I wouldn't mind the support for it, but there's issues around knowing when CSS has been loaded/applied to the document cross-browser, that's why projects like require.js only have support for them with semi-official plugins that are not guaranteed to work without FOUC.\n\nHowever, we could support it but not guarantee the CSS to be loaded before continuing queued stuff. See more here: http://requirejs.org/docs/faq-advanced.html#css\nAny thoughts, @addyosmani @sindresorhus ?\n. I agree. I can modify the build script to spit out an\nadditional concatenated version later today.\nOn Friday, December 28, 2012, Addy Osmani wrote:\n\nI think we should try to come up with a clean solution to this and I'm not\nopposed to doing a 0.3.x soon if it can tackle it well.\nShould we consider bundling RSVP as a part of the build if it's a hard\ndependency or offering a way to build it in if we're not taking care of\nthat?. Ideally, when you download basket you shouldn't have to worry about\ngetting anything else to work with it imo.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/62#issuecomment-11724137.\n. Just merged a fix to main, there's an explanation that basket.min.js is a version they'll use if they want to manually handle the rsvp dependency. Closing this, please re-open if you feel that we need to explain it further/more clear.\n. Yeah, I agree. I was tinkering a bit with it but didn't really look if we explained that RSVP was needed (then, a full version wouldn't need that much explaining).\n\nI'll add an asterisk on basket.min.js that explains that they can use this version if they want to manually handle the rsvp dependency. We shouldn't really need to explain a \"full version\", that's kind of implicit of \"fully working\". Or am I overthinking it?\n. I'm fine having this, but it needs to be documented and explained that it is optional and not something a common user should worry about.\n@jschilli could you update the documentation on this as well?\n. I don't mind at all.\nWhat would happen when trying to store a template that is 0.5kB and the oldest one is a script on like 150kB. We really need some smart logic around what is scrapped and what's not. I'll happily take the overhead fetching the template than dumping the heavy script for example :)\n. True, it just hit me when I started commenting.\nI'll allow it! :)\n. I kinda agree with @sindresorhus on this one.\nWe need another refactoring of the code base to be more generic. This adds more specific (css/js) logic into loads of places so my suggestion would be to generalize the whole flow to only store/fetch data/urls, and add in injection logic etc. as a plugin-type of deal. It'll increase maintainability a lot and we can then decide which plugins we'd support and which ones we'll leave up to the community. My $0.02. \nNo offense to you, @amrnt. Appreciate the work you've done here!\n. Hi.\nThe build fails on all unit tests (fails to retrieve RSVP). I think it's easier to just use http://rawgithub.com/ to get rid of our issue. We'd love to see a PQ on that change if you can.\nEdit: My bad, it's not stable.\nThanks!\n. Yeah, sorry. For some reason I saw curl somewhere at home (early here).\nI don't think it fails because of your fix, but because Travis hasn't been run on the project for quite a while. Maybe @sindresorhus knows if bower changed somehow (the component.json points out rsvp but it seems to be non-existing when running the tests).\nI can look into it on Sunday at the earliest otherwise.\n. Looks good to me, great work so far!\n. ",
    "felipemorais": "Putting the Wiki - https://github.com/addyosmani/basket.js/wiki/Perf-tests\n. Could It be closed?\n. expire should be renamed to ttl ?\nWhat is better? remove the oldest script or who has less time to expire\nI'm thinking when the script is larger than available quota...\nIn local tests, basket.js will remove all keys trying add the big file.\n. If the script is larger ( or almost larger ) than available quota. We only know after all basket.js keys were removed.\nTest of localstorage limit/quota using setItem recursively, could increase performance issues.\nSome idea? \n. what is missing to close?\n. @sindresorhus I'd like but I'm not sure what could be done. \nPromise will be rejected if xhr.status !== 200.\nUsing:\nbasket.require({ url: 'jquery.js' },{ url: 'doesntexist123.js' },{ url: 'plugin.js' });\nthe second file is 404 but the first and third will be loaded because require is unordered.\n. @wibblymat \nIf require catch 404 once, no other will be executed?\nI think that could be executed and pass what are success / failed on error handling.\n. When we use get. we can do this:\nbasket.get(\"jquery\").stamp but if jquery doesnt exist (null).stamp throws error to the document.\nSo I did get always return an object because ({}).stamp not throws error.\nSince get always returns an object, the \"!\" will fail to test if exists.\nThinking better, false could be a good return. (false).stamps not throws error and is simple to check.\n. I removed travis. I created a branch to do this. \nget now returns false if doesn't exist. It's really better! Thanks!\nSpaces are correct now.\nSquashed my commits.\n. Yes, pass!\nDocs is very outdated.\nI'm updating in another branch.\nProblem?\n. @sindresorhus @peol  @addyosmani #45 Thoughts? \n. wait() can be assigned to an obj in require(). We really need this? it isn't documented.\nbasket.require( {\n        url: 'fixtures/jquery.min.js' ,\n        wait: function() {...}\n} );\n. Using android 4.0.4 \n0.2 and 0.3 works fine.\n. Sorry. I didn't lint before push.\n. Yes, I was waiting for any changes! \n. Very Nice! :)\n. Awesome! \n. thenRequire sgtm.\n. @wibblemat same problem for me.\n. Sorry @wibblymat, I haven't seen your commit on github app. \nI like this test.\n. Could add some test?\n. Mentions about JSX aren't relevant.\n+1 to custom type attribute.\n. Putting the Wiki - https://github.com/addyosmani/basket.js/wiki/Perf-tests\n. Could It be closed?\n. expire should be renamed to ttl ?\nWhat is better? remove the oldest script or who has less time to expire\nI'm thinking when the script is larger than available quota...\nIn local tests, basket.js will remove all keys trying add the big file.\n. If the script is larger ( or almost larger ) than available quota. We only know after all basket.js keys were removed.\nTest of localstorage limit/quota using setItem recursively, could increase performance issues.\nSome idea? \n. what is missing to close?\n. @sindresorhus I'd like but I'm not sure what could be done. \nPromise will be rejected if xhr.status !== 200.\nUsing:\nbasket.require({ url: 'jquery.js' },{ url: 'doesntexist123.js' },{ url: 'plugin.js' });\nthe second file is 404 but the first and third will be loaded because require is unordered.\n. @wibblymat \nIf require catch 404 once, no other will be executed?\nI think that could be executed and pass what are success / failed on error handling.\n. When we use get. we can do this:\nbasket.get(\"jquery\").stamp but if jquery doesnt exist (null).stamp throws error to the document.\nSo I did get always return an object because ({}).stamp not throws error.\nSince get always returns an object, the \"!\" will fail to test if exists.\nThinking better, false could be a good return. (false).stamps not throws error and is simple to check.\n. I removed travis. I created a branch to do this. \nget now returns false if doesn't exist. It's really better! Thanks!\nSpaces are correct now.\nSquashed my commits.\n. Yes, pass!\nDocs is very outdated.\nI'm updating in another branch.\nProblem?\n. @sindresorhus @peol  @addyosmani #45 Thoughts? \n. wait() can be assigned to an obj in require(). We really need this? it isn't documented.\nbasket.require( {\n        url: 'fixtures/jquery.min.js' ,\n        wait: function() {...}\n} );\n. Using android 4.0.4 \n0.2 and 0.3 works fine.\n. Sorry. I didn't lint before push.\n. Yes, I was waiting for any changes! \n. Very Nice! :)\n. Awesome! \n. thenRequire sgtm.\n. @wibblemat same problem for me.\n. Sorry @wibblymat, I haven't seen your commit on github app. \nI like this test.\n. Could add some test?\n. Mentions about JSX aren't relevant.\n+1 to custom type attribute.\n. ",
    "wibblymat": "I created a naive jsperf testing localStorage against browser cache at http://jsperf.com/localstorage-versus-browser-cache\nThe resource is being loaded from a server that I own so that I can confirm that the resource is actually being read from the cache, and also because finding a file that both allowed CORS requests from * and didn't send no-cache headers didn't go very well.\nChrome 23 and Canary 25 both show that localStorage is much faster (60 - 80%) but please feel free to let me know of any flaws in my test. I'll create a new test soon that actually uses basket.js\n. Well, bad news. According to http://jsperf.com/basket-js-versus-browser-cache, the browser cache is much, much faster than basket.js on FF 17, Chrome 23 and Canary 25.\nGiven that raw localStorage appeared to be faster I checked by adding a breakpoint in Chrome developer tools that the getUrl function is never called. It seems likely that the bottleneck is creating the script tag and adding it to the DOM, though I haven't proven that.\nThis was basket.js 0.2 from the website rather than the latest version in git, but I can see no reason why the newer version would be faster.\n. Ah, this is an apples to oranges comparison. Pardon me, I'm tired. The browser cache test never parses the downloaded code while the basket.js version does. I'll fix it up after some sleep!\n. Ok, a fairer comparison - http://jsperf.com/basket-js-versus-browser-cache/2 - seems to show that basket.js is very slightly slower than the browser cache.\n. The problem of 404s being saved into the cache, and of not being able to detect a failure, are both solved by the promises implementation.\nIt also gives the user more control over what happens when things go wrong. You could do:\njavascript\n// We absolutely definitely need jquery in order to display properly\nbasket.require({ url: 'jquery.js' })\n    .then(function() {\n        // But lets say that without the bootstrap js we can degrade gracefully if we know it\n        basket.require({ url: 'bootstrap.js' })\n            .then(siteWithBootstrap, siteWithoutBootstrap);\n    });\nHowever, looking at the current logic I'm not quite happy that I got it right.\nCurrently, if you do\njavascript\nbasket.require({\n    { url: 'jquery.js' },\n    { url: 'doesntexist123.js' },\n    { url: 'plugin.js' },\n    { url: 'alsomissing.js' }\n}).then(successHandler, errorHandler);\nthen jquery.js and plugin.js will be executed, but only the errorHandler will be called, and only once (for whichever failed first).\nAt the moment you can also do\njavascript\nbasket.require({ url: 'doesntexist123.js' });\nbasket.require({ url: 'jquery.js' })\n   .then(doStuff);\nDue to the way it is written the promise returned from the second require encompasses both files, so doStuff wouldn't be called even if jquery loads - this is probably a bug. Seperate require calls shouldn't rely on each other.\nI guess what we really want is:\n- The errorhandler should be called with details of all failures\n- The detail passed back should be specced out. At the moment it is an Error object with the message just being xhr.statusText\n- Scripts shouldn't be executed unless everything in a particular require() call succeeds. If you require 4 files at the moment, and get an error, you can't really tell what has run and what hasn't.\n. I made a commit that uses https://github.com/cujojs/when rather than RSVP because RSVP doesn't have a .all() method and dumps a lot of stuff in global scope. It's a little scrappy right now but should provide a basis for discussion.\nThe code within basket.js gets smaller, which is nice, but adding the external library negates that.\nI wasn't sure how you guys would like to deal with a dependency so I have just made a copy and put it in the repo for now for simplicity's sake.\nUsage changes are:\n-  use .then() instead of .wait()\n-  there is no more wait attribute on the require() options object.\nI updated the tests to match the new API so you can see there how it works.\n. rsvp is a little more work to handle things like calling a callback only when an array of promises are all resolved, or having functions that sometimes return values and sometimes return promises. These things aren't too difficult but are already done by when.js and Q.\nFor what its worth I prefer Q to when.js too but it's even bigger.\nI'll change it to use rsvp see what we prefer.\n. That wasn't too bad - assuming there are no bugs in my allResolved function. RSVP Included in the repo because there is a bug in the current browser versions of RSVP on github. Its a simple error which breaks it completely, so I've got a fixed version in to test against.\n. @sindresorhus https://github.com/tildeio/rsvp.js/pull/26 - sorted\n. I submitted a PR to rsvp.js (https://github.com/tildeio/rsvp.js/pull/27). I also cleaned up the code in my branch a bit 6b3abd515c89623f5aadf4d9cffdbabde97c6f3a.\n. Ah, build fails because no rsvp.js in the repo. Sadly, only the node module version is in the rsvp node package (which makes sense) so making it a dependency doesn't give us a useable version. I'm satisfied the tests pass when there is a copy of rsvp.js linked in the test/index.html\nTo be honest I have no experience with JS projects that have external dependencies so I don't know what the convention/pattern is for this.\n. Sure, though I'm going to have to ask a lot of noob questions here first :)\n- Should I try to get a component.json file into the upstream repo first?\n- The github.com/components org that @sindresorhus mentioned contains just the components.json and the library for each project. Should I create a repo like that or would I register a full fork of the project?\n- If a full fork, should it include the .all() method we want? I'd guess no so as not to confuse others.\nAnyhow, I tagged a clean fork of upstream with a components.json added at https://github.com/wibblymat/rsvp.js/tree/1.0.0\n. Ok, I think we're all good now.\n. I've been thinking that for convenience we could mixin a method into the promise returned by require with something like:\n``` javascript\nfunction require(options...) {\n  // blah, blah, current require body\n  promise.thenRequire = this.thenRequire;\n  return promise;\n}\nfunction thenRequire(options...) {\n  var promise = this.then(function() {\n    basket.require(options...);\n  });\n  promise.thenRequire = this.thenRequire;\n  return promise;\n}\n```\nbut I'm not sure if that feels icky somehow.\njavascript\nbasket.require({url: 'jquery.js'})\n  .thenRequire({url: 'backbone.js'})\n  .thenRequire({url: 'main.js'})\n  .then(entryPoint, errorHandler);\n. Something like 280a0da643cfbcf586e3a977a56ec6b81f94f0e8\n. The wait() method there is also like the old basket.js wait() or the new then() in that it accepts a callback.\nBecause in the LABjs style interface you can do require().require(), require().wait() and require().then(), the require method would still have to return a promise with the extra methods added. And the require() method on the promise would need to be basically the same as the thenRequire method we already have, I think.\nHmm, actually the LABjs thing is slightly different. With thenRequire, as it stands, the later scripts don't even download until the first require is completed. With LABjs it begins fetching all scripts immediately, but executes them in the given order. That could make your page loads a fair bit faster.\nSo, IMO, the thenRequire interface is tidier and easier to implement for the same end, but starting the fetch early is a very good feature we should borrow. Renaming thenRequire to just be require might make the interface feel simpler, too.\nSomething like\njavascript\nbasket.require({url \"jquery.js\" }, {url: \"backbone.js\" })\n    .require({ url: \"jquery-ui.js\" });\nwould download all three scripts in parallel, but jquery-ui would not be executed until jquery and backbone had been.\n. Yes, just overlooked I think!\n. Well, it all looks good to me anyway. If it is bad we can roll back!\n. Sorry, I got distracted after pushing the commit yesterday and forgot to do anything with it!\n. I'm not aware of anything that needs doing.\n. Hi there!\nbasket.js now depends on the RSVP library. The repository for RSVP is https://github.com/tildeio/rsvp.js.\nIf you are using bower then you could also install RSVP by typing bower install rsvp.\nThen you just need to add a script tag to load RSVP before basket.js in your HTML file.\nI hope that helps get you started.\n. :+1: \n. Probably need a small note in index.html to explain the difference between the min and full.min versions. Looks a bit scrappy having it right at the top though. Maybe asterisk it and put the note further down?\n. I can't quite come up with a situation where I might want to use this rather than an option already available. That doesn't necessarily mean it isn't useful, but it does mean I can't decide whether or not it is a good solution to the problem.\nDo you have a specific use in mind for your own projects?\nFor the checksum example, note that this does not make it easier to validate the checksum of the version that comes from the server. You still  don't know that you got the version you wanted without running your check over the result of basket.get(), which you could do for the cached version just as easily. Calculating the checksum of the stored scripts will probably negate any speed advantage of avoiding the browser cache, too.\n. I'm not especially happy that the test I've written is sufficient but I'm not sure how best to do it. It does seem to work, though :)\n. Well spotted, thank you!\n. I don't see much reason not to.\n:+1: \n. That seems like a good question even if we are only talking about scripts :)\nOn 22 January 2013 15:17, Andr\u00e9e Hansson notifications@github.com wrote:\n\nI don't mind at all.\nWhat would happen when trying to store a template that is 0.5kB and the\noldest one is a script on like 150kB. We really need some smart logic\naround what is scrapped and what's not. I'll happily take the overhead\nfetching the template than dumping the heavy script for example :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/72#issuecomment-12548818.\n. There was already a MD version of the docs part in documentation.md if you want to copy/paste rather than rewriting that part by hand.\n. Tried to use Sinon to mock up the XHRs happening in the \"wrong\" order but I'm not sure if you can do that (I've asked about it at https://groups.google.com/forum/?fromgroups=#!topic/sinonjs/mcIGkiNZdcY).\n\nTest case coverage still better now though.\n. I had a response to the Google Groups post I made but I had forgotten to turn on email updates so hadn't seen it.\nI've updated the ordering test based on that. I don't have anything else I was intending to update on this so I'll squash the commits and merge when I get a moment.\n. Ultimately the only part of the code that cares what kind of data we have is the injectScript/addToDOM function. If we make it easy to override the behaviour of that function then it is trivial for people to make their own plugins and I have no problem with not baking in behaviour in the distribution for different types.\nI imagine that you could add CSS support with something like:\njavascript\nbasket.addHandler( 'text/css', function( obj ) {\n    var el = document.createElement( 'style' );\n    el.setAttribute( 'type', 'text/css' );\n    if ( el.styleSheet ) { // >= IE6\n        el.styleSheet.cssText = obj.data;\n    } else { // Rest\n        el.appendChild( document.createTextNode( obj.data ) );\n    }\n});\nwhich is simple enough that you can just write it into the documentation if people want it.\n. @addyosmani from the timing of the comment that triggered this I'm guessing that you posted it shortly after the Offline session at Edge conf. Was there something interesting/relevant that came up in the discussion afterwards that prompted it?\nThe video of the session was interesting for anyone who hasn't seen it, btw.\n. It's for use by web apps that may be offline. In the example of a Twitter client, let's say that in the morning I go fetch your tweets while online. Later on I'm on the tube and go back to get your tweets. I can't get a live version, but I can get it from the cache and show a message letting the user know that the data is not fresh.\nThis requires that the data is cached, so it goes through basket and we want to cache for a longish time (a week maybe). But when we have connection we want to get the latest, and update the cache with that.\nDoes that make sense?\nThe logic should probably be:\n- live is false\n  - behave as now, returning from the cache if possible, over the network otherwise.\n- live is true and can't fetch (timeout or navigator.onLine === false, not just a 404)\n  - return from cache if available, perhaps flag that the result is not live even though it was requested\n- live is true and network is available\n  - fetch over the network and update the cache\n. It's a good question! I've done a little bit of reading and it looks like it should have zero effect in any browser because we supply the text of the script, not a src to retrieve it from. Will try and confirm that we don't need it.\n. I'm pretty sure that if you use thenRequire to chain the requests it will already cause the downloads to happen in parallel. Look at the tests to see an example.\n. No, I mean use thenRequire in you own code.\njavascript\nbasket.require({url: 'urlA'})\n  .thenRequire({url: 'urlB'})\n  .then(whatever);\nBoth XHR requests will be made immediately but the results will be executed\nin order.\nOn 11 Nov 2013 03:23, \"Vitaly Puzrin\" notifications@github.com wrote:\n\nthen is called after xhr request finished, So, nested require will cause\nsequential loading, instead of parallel.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/87#issuecomment-28171172\n.\n. I entirely agree, I just wish I ever had time any more :/\n. Well that's embarrassing ;)\n\nOn Tuesday, 7 January 2014 10:38:56, timgluz notifications@github.com\nwrote:\n\nHey, maintainer(s) of addyosmani/basket.js!\nWe at VersionEye https://www.versioneye.com/signup?promo_code=BOWER are\nworking hard to keep up the quality of the bower's registry.\nWe just finished our initial analysis of the quality of the Bower.io\nregistry:\n7530 - registered packages, 224 of them doesnt exists anymore;\nWe analysed 7306 existing packages and 1070 of them don't have\nbower.json on the master branch ( that's where a Bower client pulls a\ndata ).\nSadly, your library addyosmani/basket.js is one of them.\nCan you spare 15 minutes to help us to make Bower better?\nJust add a new file bower.json and change attributes.\n{\n  \"name\": \"addyosmani/basket.js\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"description\": \"please add it\",\n  \"license\": \"Eclipse\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"*/.txt\"\n  ],\n  \"dependencies\": {\n    \"\": \"\",\n    \"\": \"\",\n    \"\": \"\"\n  },\n  \"devDependencies\": {\n    \"\": \"\"\n  }\n}\nRead more about bower.json on the official speficationhttp://bower.io/#defining-a-packageand nodejs\nsemver https://github.com/isaacs/node-semver#ranges library has great\nexamples of proper versioning.\nNB! Please validate your bower.json with jsonlint before commiting\nyour updates.\nThank you!\nTimo,\ntwitter: @versioneye https://github.com/versioneye\nemail: timo@versioneye.com\nVersionEye https://www.versioneye.com/signup?promo_code=BOWER - no more\nlegacy software!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/95\n.\n. Sorry, I didn't mean embarrassing for you, but embarrassing for me - I work on Bower and Basket so I have no excuse not to keep up to date. I'll update the project.\n. LGTM. Now all of the code is in a consistent style with my other projects, awesome!\n\n@addyosmani @sindresorhus \n. I haven't looked into performance for a little while, but I remember from the last time I looked that localStorage is good:\n- On mobile\n- For small files\nIt certainly can be slower than the cache in some situations, so it isn't a panacea.\n. Thanks!\n. @sindresorhus Shed is intended to be a general set of tools for SW\ndevelopers, while Basket has a specific use-case. Basket should be\nsomething you just include in your page and it just works, Shed will need\nplumbing in.\nOn Mon, 29 Dec 2014 10:33 Sindre Sorhus notifications@github.com wrote:\n\nThe future is with the SW Cache API and not localStorage.\nWe either consume Shed\nIf so, what would it add it add upon Shed?\nimplement a lightweight layer that uses the Cache API polyfill to support\nother browsers\nIsn't that what Shed is attempting to do?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/addyosmani/basket.js/issues/131#issuecomment-68246897\n.\n. Yes, should just be basket.timeout = 1000000000 or whatever you need. It's global, not per-resource, though.\n. I created a naive jsperf testing localStorage against browser cache at http://jsperf.com/localstorage-versus-browser-cache\n\nThe resource is being loaded from a server that I own so that I can confirm that the resource is actually being read from the cache, and also because finding a file that both allowed CORS requests from * and didn't send no-cache headers didn't go very well.\nChrome 23 and Canary 25 both show that localStorage is much faster (60 - 80%) but please feel free to let me know of any flaws in my test. I'll create a new test soon that actually uses basket.js\n. Well, bad news. According to http://jsperf.com/basket-js-versus-browser-cache, the browser cache is much, much faster than basket.js on FF 17, Chrome 23 and Canary 25.\nGiven that raw localStorage appeared to be faster I checked by adding a breakpoint in Chrome developer tools that the getUrl function is never called. It seems likely that the bottleneck is creating the script tag and adding it to the DOM, though I haven't proven that.\nThis was basket.js 0.2 from the website rather than the latest version in git, but I can see no reason why the newer version would be faster.\n. Ah, this is an apples to oranges comparison. Pardon me, I'm tired. The browser cache test never parses the downloaded code while the basket.js version does. I'll fix it up after some sleep!\n. Ok, a fairer comparison - http://jsperf.com/basket-js-versus-browser-cache/2 - seems to show that basket.js is very slightly slower than the browser cache.\n. The problem of 404s being saved into the cache, and of not being able to detect a failure, are both solved by the promises implementation.\nIt also gives the user more control over what happens when things go wrong. You could do:\njavascript\n// We absolutely definitely need jquery in order to display properly\nbasket.require({ url: 'jquery.js' })\n    .then(function() {\n        // But lets say that without the bootstrap js we can degrade gracefully if we know it\n        basket.require({ url: 'bootstrap.js' })\n            .then(siteWithBootstrap, siteWithoutBootstrap);\n    });\nHowever, looking at the current logic I'm not quite happy that I got it right.\nCurrently, if you do\njavascript\nbasket.require({\n    { url: 'jquery.js' },\n    { url: 'doesntexist123.js' },\n    { url: 'plugin.js' },\n    { url: 'alsomissing.js' }\n}).then(successHandler, errorHandler);\nthen jquery.js and plugin.js will be executed, but only the errorHandler will be called, and only once (for whichever failed first).\nAt the moment you can also do\njavascript\nbasket.require({ url: 'doesntexist123.js' });\nbasket.require({ url: 'jquery.js' })\n   .then(doStuff);\nDue to the way it is written the promise returned from the second require encompasses both files, so doStuff wouldn't be called even if jquery loads - this is probably a bug. Seperate require calls shouldn't rely on each other.\nI guess what we really want is:\n- The errorhandler should be called with details of all failures\n- The detail passed back should be specced out. At the moment it is an Error object with the message just being xhr.statusText\n- Scripts shouldn't be executed unless everything in a particular require() call succeeds. If you require 4 files at the moment, and get an error, you can't really tell what has run and what hasn't.\n. I made a commit that uses https://github.com/cujojs/when rather than RSVP because RSVP doesn't have a .all() method and dumps a lot of stuff in global scope. It's a little scrappy right now but should provide a basis for discussion.\nThe code within basket.js gets smaller, which is nice, but adding the external library negates that.\nI wasn't sure how you guys would like to deal with a dependency so I have just made a copy and put it in the repo for now for simplicity's sake.\nUsage changes are:\n-  use .then() instead of .wait()\n-  there is no more wait attribute on the require() options object.\nI updated the tests to match the new API so you can see there how it works.\n. rsvp is a little more work to handle things like calling a callback only when an array of promises are all resolved, or having functions that sometimes return values and sometimes return promises. These things aren't too difficult but are already done by when.js and Q.\nFor what its worth I prefer Q to when.js too but it's even bigger.\nI'll change it to use rsvp see what we prefer.\n. That wasn't too bad - assuming there are no bugs in my allResolved function. RSVP Included in the repo because there is a bug in the current browser versions of RSVP on github. Its a simple error which breaks it completely, so I've got a fixed version in to test against.\n. @sindresorhus https://github.com/tildeio/rsvp.js/pull/26 - sorted\n. I submitted a PR to rsvp.js (https://github.com/tildeio/rsvp.js/pull/27). I also cleaned up the code in my branch a bit 6b3abd515c89623f5aadf4d9cffdbabde97c6f3a.\n. Ah, build fails because no rsvp.js in the repo. Sadly, only the node module version is in the rsvp node package (which makes sense) so making it a dependency doesn't give us a useable version. I'm satisfied the tests pass when there is a copy of rsvp.js linked in the test/index.html\nTo be honest I have no experience with JS projects that have external dependencies so I don't know what the convention/pattern is for this.\n. Sure, though I'm going to have to ask a lot of noob questions here first :)\n- Should I try to get a component.json file into the upstream repo first?\n- The github.com/components org that @sindresorhus mentioned contains just the components.json and the library for each project. Should I create a repo like that or would I register a full fork of the project?\n- If a full fork, should it include the .all() method we want? I'd guess no so as not to confuse others.\nAnyhow, I tagged a clean fork of upstream with a components.json added at https://github.com/wibblymat/rsvp.js/tree/1.0.0\n. Ok, I think we're all good now.\n. I've been thinking that for convenience we could mixin a method into the promise returned by require with something like:\n``` javascript\nfunction require(options...) {\n  // blah, blah, current require body\n  promise.thenRequire = this.thenRequire;\n  return promise;\n}\nfunction thenRequire(options...) {\n  var promise = this.then(function() {\n    basket.require(options...);\n  });\n  promise.thenRequire = this.thenRequire;\n  return promise;\n}\n```\nbut I'm not sure if that feels icky somehow.\njavascript\nbasket.require({url: 'jquery.js'})\n  .thenRequire({url: 'backbone.js'})\n  .thenRequire({url: 'main.js'})\n  .then(entryPoint, errorHandler);\n. Something like 280a0da643cfbcf586e3a977a56ec6b81f94f0e8\n. The wait() method there is also like the old basket.js wait() or the new then() in that it accepts a callback.\nBecause in the LABjs style interface you can do require().require(), require().wait() and require().then(), the require method would still have to return a promise with the extra methods added. And the require() method on the promise would need to be basically the same as the thenRequire method we already have, I think.\nHmm, actually the LABjs thing is slightly different. With thenRequire, as it stands, the later scripts don't even download until the first require is completed. With LABjs it begins fetching all scripts immediately, but executes them in the given order. That could make your page loads a fair bit faster.\nSo, IMO, the thenRequire interface is tidier and easier to implement for the same end, but starting the fetch early is a very good feature we should borrow. Renaming thenRequire to just be require might make the interface feel simpler, too.\nSomething like\njavascript\nbasket.require({url \"jquery.js\" }, {url: \"backbone.js\" })\n    .require({ url: \"jquery-ui.js\" });\nwould download all three scripts in parallel, but jquery-ui would not be executed until jquery and backbone had been.\n. Yes, just overlooked I think!\n. Well, it all looks good to me anyway. If it is bad we can roll back!\n. Sorry, I got distracted after pushing the commit yesterday and forgot to do anything with it!\n. I'm not aware of anything that needs doing.\n. Hi there!\nbasket.js now depends on the RSVP library. The repository for RSVP is https://github.com/tildeio/rsvp.js.\nIf you are using bower then you could also install RSVP by typing bower install rsvp.\nThen you just need to add a script tag to load RSVP before basket.js in your HTML file.\nI hope that helps get you started.\n. :+1: \n. Probably need a small note in index.html to explain the difference between the min and full.min versions. Looks a bit scrappy having it right at the top though. Maybe asterisk it and put the note further down?\n. I can't quite come up with a situation where I might want to use this rather than an option already available. That doesn't necessarily mean it isn't useful, but it does mean I can't decide whether or not it is a good solution to the problem.\nDo you have a specific use in mind for your own projects?\nFor the checksum example, note that this does not make it easier to validate the checksum of the version that comes from the server. You still  don't know that you got the version you wanted without running your check over the result of basket.get(), which you could do for the cached version just as easily. Calculating the checksum of the stored scripts will probably negate any speed advantage of avoiding the browser cache, too.\n. I'm not especially happy that the test I've written is sufficient but I'm not sure how best to do it. It does seem to work, though :)\n. Well spotted, thank you!\n. I don't see much reason not to.\n:+1: \n. That seems like a good question even if we are only talking about scripts :)\nOn 22 January 2013 15:17, Andr\u00e9e Hansson notifications@github.com wrote:\n\nI don't mind at all.\nWhat would happen when trying to store a template that is 0.5kB and the\noldest one is a script on like 150kB. We really need some smart logic\naround what is scrapped and what's not. I'll happily take the overhead\nfetching the template than dumping the heavy script for example :)\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/72#issuecomment-12548818.\n. There was already a MD version of the docs part in documentation.md if you want to copy/paste rather than rewriting that part by hand.\n. Tried to use Sinon to mock up the XHRs happening in the \"wrong\" order but I'm not sure if you can do that (I've asked about it at https://groups.google.com/forum/?fromgroups=#!topic/sinonjs/mcIGkiNZdcY).\n\nTest case coverage still better now though.\n. I had a response to the Google Groups post I made but I had forgotten to turn on email updates so hadn't seen it.\nI've updated the ordering test based on that. I don't have anything else I was intending to update on this so I'll squash the commits and merge when I get a moment.\n. Ultimately the only part of the code that cares what kind of data we have is the injectScript/addToDOM function. If we make it easy to override the behaviour of that function then it is trivial for people to make their own plugins and I have no problem with not baking in behaviour in the distribution for different types.\nI imagine that you could add CSS support with something like:\njavascript\nbasket.addHandler( 'text/css', function( obj ) {\n    var el = document.createElement( 'style' );\n    el.setAttribute( 'type', 'text/css' );\n    if ( el.styleSheet ) { // >= IE6\n        el.styleSheet.cssText = obj.data;\n    } else { // Rest\n        el.appendChild( document.createTextNode( obj.data ) );\n    }\n});\nwhich is simple enough that you can just write it into the documentation if people want it.\n. @addyosmani from the timing of the comment that triggered this I'm guessing that you posted it shortly after the Offline session at Edge conf. Was there something interesting/relevant that came up in the discussion afterwards that prompted it?\nThe video of the session was interesting for anyone who hasn't seen it, btw.\n. It's for use by web apps that may be offline. In the example of a Twitter client, let's say that in the morning I go fetch your tweets while online. Later on I'm on the tube and go back to get your tweets. I can't get a live version, but I can get it from the cache and show a message letting the user know that the data is not fresh.\nThis requires that the data is cached, so it goes through basket and we want to cache for a longish time (a week maybe). But when we have connection we want to get the latest, and update the cache with that.\nDoes that make sense?\nThe logic should probably be:\n- live is false\n  - behave as now, returning from the cache if possible, over the network otherwise.\n- live is true and can't fetch (timeout or navigator.onLine === false, not just a 404)\n  - return from cache if available, perhaps flag that the result is not live even though it was requested\n- live is true and network is available\n  - fetch over the network and update the cache\n. It's a good question! I've done a little bit of reading and it looks like it should have zero effect in any browser because we supply the text of the script, not a src to retrieve it from. Will try and confirm that we don't need it.\n. I'm pretty sure that if you use thenRequire to chain the requests it will already cause the downloads to happen in parallel. Look at the tests to see an example.\n. No, I mean use thenRequire in you own code.\njavascript\nbasket.require({url: 'urlA'})\n  .thenRequire({url: 'urlB'})\n  .then(whatever);\nBoth XHR requests will be made immediately but the results will be executed\nin order.\nOn 11 Nov 2013 03:23, \"Vitaly Puzrin\" notifications@github.com wrote:\n\nthen is called after xhr request finished, So, nested require will cause\nsequential loading, instead of parallel.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/87#issuecomment-28171172\n.\n. I entirely agree, I just wish I ever had time any more :/\n. Well that's embarrassing ;)\n\nOn Tuesday, 7 January 2014 10:38:56, timgluz notifications@github.com\nwrote:\n\nHey, maintainer(s) of addyosmani/basket.js!\nWe at VersionEye https://www.versioneye.com/signup?promo_code=BOWER are\nworking hard to keep up the quality of the bower's registry.\nWe just finished our initial analysis of the quality of the Bower.io\nregistry:\n7530 - registered packages, 224 of them doesnt exists anymore;\nWe analysed 7306 existing packages and 1070 of them don't have\nbower.json on the master branch ( that's where a Bower client pulls a\ndata ).\nSadly, your library addyosmani/basket.js is one of them.\nCan you spare 15 minutes to help us to make Bower better?\nJust add a new file bower.json and change attributes.\n{\n  \"name\": \"addyosmani/basket.js\",\n  \"version\": \"1.0.0\",\n  \"main\": \"path/to/main.css\",\n  \"description\": \"please add it\",\n  \"license\": \"Eclipse\",\n  \"ignore\": [\n    \".jshintrc\",\n    \"*/.txt\"\n  ],\n  \"dependencies\": {\n    \"\": \"\",\n    \"\": \"\",\n    \"\": \"\"\n  },\n  \"devDependencies\": {\n    \"\": \"\"\n  }\n}\nRead more about bower.json on the official speficationhttp://bower.io/#defining-a-packageand nodejs\nsemver https://github.com/isaacs/node-semver#ranges library has great\nexamples of proper versioning.\nNB! Please validate your bower.json with jsonlint before commiting\nyour updates.\nThank you!\nTimo,\ntwitter: @versioneye https://github.com/versioneye\nemail: timo@versioneye.com\nVersionEye https://www.versioneye.com/signup?promo_code=BOWER - no more\nlegacy software!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/95\n.\n. Sorry, I didn't mean embarrassing for you, but embarrassing for me - I work on Bower and Basket so I have no excuse not to keep up to date. I'll update the project.\n. LGTM. Now all of the code is in a consistent style with my other projects, awesome!\n\n@addyosmani @sindresorhus \n. I haven't looked into performance for a little while, but I remember from the last time I looked that localStorage is good:\n- On mobile\n- For small files\nIt certainly can be slower than the cache in some situations, so it isn't a panacea.\n. Thanks!\n. @sindresorhus Shed is intended to be a general set of tools for SW\ndevelopers, while Basket has a specific use-case. Basket should be\nsomething you just include in your page and it just works, Shed will need\nplumbing in.\nOn Mon, 29 Dec 2014 10:33 Sindre Sorhus notifications@github.com wrote:\n\nThe future is with the SW Cache API and not localStorage.\nWe either consume Shed\nIf so, what would it add it add upon Shed?\nimplement a lightweight layer that uses the Cache API polyfill to support\nother browsers\nIsn't that what Shed is attempting to do?\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/addyosmani/basket.js/issues/131#issuecomment-68246897\n.\n. Yes, should just be basket.timeout = 1000000000 or whatever you need. It's global, not per-resource, though.\n. \n",
    "jkroso": "your loosing a lot of performance in your promise implementation. Also simply optimising for the case where there is only one script would mean one less promise being created which would probably make up the difference by itself in that particular test. Probably not worth optimising for that case though.\n. I don't think RSVP was ever intended to be fast :)\n. you can fork it!\n. your loosing a lot of performance in your promise implementation. Also simply optimising for the case where there is only one script would mean one less promise being created which would probably make up the difference by itself in that particular test. Probably not worth optimising for that case though.\n. I don't think RSVP was ever intended to be fast :)\n. you can fork it!\n. ",
    "amrnt": "@addyosmani I was going to say the same.\n. @addyosmani Great seeing you want to implement it as POC.\nTake look at the previous implementation, tell me, is it good enough? https://github.com/amrnt/basket.js/commit/0f4219ad3e5be474576fd197c51d3517a6b6d573\nIf so, I will do the same and add some tests.\n. If you are going to use it from https://github.com/amrnt/basket.js, be sure to run grunt to build the new files in dist.\n. @addyosmani @sindresorhus This is going to be bigger that this solution in the pull-request.\nPreviously, we considered that all the files we store are Javascripts, but now we have Stylesheets. It's hard to figure out if the file is javascript or stylesheet by the extension.\nI suggest to append the key name of the asset that stored in the local storage with the content-type of the received data. So whatever the key is, it should end with -js or -css.\nWhat do you think? I would like to continue working on implementing this.\n. @addyosmani I've just push some changes. All current tests are still passing.\nI didn't implement any tests. I tested it manually, and initially, it works as expected.\n. @addyosmani I was going to say the same.\n. @addyosmani Great seeing you want to implement it as POC.\nTake look at the previous implementation, tell me, is it good enough? https://github.com/amrnt/basket.js/commit/0f4219ad3e5be474576fd197c51d3517a6b6d573\nIf so, I will do the same and add some tests.\n. If you are going to use it from https://github.com/amrnt/basket.js, be sure to run grunt to build the new files in dist.\n. @addyosmani @sindresorhus This is going to be bigger that this solution in the pull-request.\nPreviously, we considered that all the files we store are Javascripts, but now we have Stylesheets. It's hard to figure out if the file is javascript or stylesheet by the extension.\nI suggest to append the key name of the asset that stored in the local storage with the content-type of the received data. So whatever the key is, it should end with -js or -css.\nWhat do you think? I would like to continue working on implementing this.\n. @addyosmani I've just push some changes. All current tests are still passing.\nI didn't implement any tests. I tested it manually, and initially, it works as expected.\n. ",
    "Startouf": "So no news on that ? My website is using Rails and Turbolinks (loading pages with AJAX) and I would have expected require() to be ignored if the current page was reloaded using turbolinks with scripts already loaded once. So no news on that ? My website is using Rails and Turbolinks (loading pages with AJAX) and I would have expected require() to be ignored if the current page was reloaded using turbolinks with scripts already loaded once. ",
    "thewillk": "Imagine a giant library that relies on loading only the parts you need, like YUI3.  Caching individual files would let you pick your dependancies on a per execution basis without having to spend the time executing all downloaded dependancies.\nExample:\nPage 1 requires libraries A, B and C\nPage 2 requires libraries A, B and D\nThis would let page 2 get the benefit of precached libraries A and B from page 1, but it won't have the execution overhead of executing C to do it.\nTwo answer your second question, you would make a request for N files (probably with a URL similar to the one you mentioned), and the server would respond in a way that basket.js could split up the pieces into individually executing chunks.\n. Certainly is.  My bad.\nNote to self, stay off GitHub when you first wake up, or you'll end up missing something obvious.  :)\n. Imagine a giant library that relies on loading only the parts you need, like YUI3.  Caching individual files would let you pick your dependancies on a per execution basis without having to spend the time executing all downloaded dependancies.\nExample:\nPage 1 requires libraries A, B and C\nPage 2 requires libraries A, B and D\nThis would let page 2 get the benefit of precached libraries A and B from page 1, but it won't have the execution overhead of executing C to do it.\nTwo answer your second question, you would make a request for N files (probably with a URL similar to the one you mentioned), and the server would respond in a way that basket.js could split up the pieces into individually executing chunks.\n. Certainly is.  My bad.\nNote to self, stay off GitHub when you first wake up, or you'll end up missing something obvious.  :)\n. ",
    "pigcan": "sorry I`m not good at english ~ \nnow I understand by myself \nthanks for your response\n. sorry I`m not good at english ~ \nnow I understand by myself \nthanks for your response\n. ",
    "TomiS": "Hi guys!\nMight I give you some suggestions for the future...\nLet me first explain my situation for background info. I'm trying to develop a mobile hybrid application with Apache Cordova at the moment and I'm keeping some of my library javascripts (Backbone, jQuery, etc) in local folder and some application specific files (models, views) I'm loading from the web because I wan't to be able to develop them without going through the hard app store deployment processes for every supported platform all the time.\nCurrently I'm also using require.js to load those files and it means I need to make close to 20 http request every time I start the application just to get those models and views. What I'd like to do, is to store those models ans views locally (in localStorage) to be able to avoid unnecessary http requests when I know views and models have not been changed. Also, I'd like my app to start even without web connection and that is a problem for pure require.js too.\nSo I'm asking, since asynchronous module loading (and require.js) seem to be quite a hot topic nowadays, have you considered some kind of integration of basket.js with require.js. Could basket.js become a plugin for require.js or something?\nBr, Tomi\n. @peol Ok, I see\n@addyosmani Thanks for the tip. I'm definitely gonna check that out too.\n. Hi guys!\nMight I give you some suggestions for the future...\nLet me first explain my situation for background info. I'm trying to develop a mobile hybrid application with Apache Cordova at the moment and I'm keeping some of my library javascripts (Backbone, jQuery, etc) in local folder and some application specific files (models, views) I'm loading from the web because I wan't to be able to develop them without going through the hard app store deployment processes for every supported platform all the time.\nCurrently I'm also using require.js to load those files and it means I need to make close to 20 http request every time I start the application just to get those models and views. What I'd like to do, is to store those models ans views locally (in localStorage) to be able to avoid unnecessary http requests when I know views and models have not been changed. Also, I'd like my app to start even without web connection and that is a problem for pure require.js too.\nSo I'm asking, since asynchronous module loading (and require.js) seem to be quite a hot topic nowadays, have you considered some kind of integration of basket.js with require.js. Could basket.js become a plugin for require.js or something?\nBr, Tomi\n. @peol Ok, I see\n@addyosmani Thanks for the tip. I'm definitely gonna check that out too.\n. ",
    "newjing": "To avoid basket.js not supported in some case, I did a test after basket.js is added\nif (typeof(basket) == \"undefined\" || basket == null) {\n               // quote js by coding\n    }else {\n               //other logics\n    }\nwith 0.2 , this works fine; \nwith 0.3 , it works on PC chrome, but not on native browser of Android 2.3.4\nI don't know how I can debug in mobile browser on a real phone.  Sth wrong in my testing code?\n. To avoid basket.js not supported in some case, I did a test after basket.js is added\nif (typeof(basket) == \"undefined\" || basket == null) {\n               // quote js by coding\n    }else {\n               //other logics\n    }\nwith 0.2 , this works fine; \nwith 0.3 , it works on PC chrome, but not on native browser of Android 2.3.4\nI don't know how I can debug in mobile browser on a real phone.  Sth wrong in my testing code?\n. ",
    "zenorocha": "I could do that, but I really recommend Docpad instead of Jekyll.\n. I prefer because it's made with NodeJS and they are faster on bugfixes.\nBut Jekyll is great too, specially because you don't have to commit the built site.\n. Done :)\n. Oh man, I wish I knew that earlier, I rewrote each part by hand =/\n. Done @sindresorhus :)\n. Is it ok for you now @sindresorhus?\n. Great xD\n. I could do that, but I really recommend Docpad instead of Jekyll.\n. I prefer because it's made with NodeJS and they are faster on bugfixes.\nBut Jekyll is great too, specially because you don't have to commit the built site.\n. Done :)\n. Oh man, I wish I knew that earlier, I rewrote each part by hand =/\n. Done @sindresorhus :)\n. Is it ok for you now @sindresorhus?\n. Great xD\n. ",
    "ericduran": "Ha That was fast. :+1: \n. Ha That was fast. :+1: \n. ",
    "jonathan-fielding": "I think this would be a great thing to implement, I would even look at getting involved in seeing how this could be done however I would expect that the script would need to always be in the  for this to work well.\n. I think this would be a great thing to implement, I would even look at getting involved in seeing how this could be done however I would expect that the script would need to always be in the  for this to work well.\n. ",
    "andrewwakeling": "Perusing over  #76, #77, #84 and this issue, I appears that there isn't any intention for basket.js to handle anything beyond JS. i.e. I can load anything with the execute: false flag, but it is up to me to explicitly handle the response.\nI support this decision for \"core\" basket.js, however it might be great to see something like the addHandler approach suggested in #76.\nPlease keep in mind that dynamically adding CSS isn't as trivial as the approach suggested in #76. Here are some reasons why.\nI put together basket-css-example using create-stylesheet to show an example of basket.js loading CSS. I have identified some issues but I am certain there are more.\nIf people still would like to see CSS work better with basket.js, I am happy to help out.\n. bag.js looks great!\nRegarding the CSS feature in bag.js, I would consider appending the style element before setting the CSS. There's some known issues with orphaned style elements in IE.\nThe CSS feature in bag.js (unlike the JS solution) has some caveats and in some cases, people may need to modify their CSS to get it working. I have discussed these issues in #60. Documenting those caveats would be preferable as reliably solving those issues would be difficult.\nI have limited experience with Promises, but I usually find that callbacks are sufficient for my needs. I am not a huge fan of shims as they tend to bloat libraries. Even though they are \"optional\", I find myself always loading them because I need to support older browsers. Having said that, I do not feel strongly about the RSVP dependency being in basket.js. The difference in size is still fairly negligible.\nCan we support callbacks if the RSVP dependency is absent?\nI am a big fan of modularity but I lack experience over both projects to say that it's needed right now.\nAlso, I really like the new pre-release changes to basket.js. Thanks!\n. This is just a throw-together. I'm happy to improve the code, put in some tests and turn it into a plug-in.\n. Perusing over  #76, #77, #84 and this issue, I appears that there isn't any intention for basket.js to handle anything beyond JS. i.e. I can load anything with the execute: false flag, but it is up to me to explicitly handle the response.\nI support this decision for \"core\" basket.js, however it might be great to see something like the addHandler approach suggested in #76.\nPlease keep in mind that dynamically adding CSS isn't as trivial as the approach suggested in #76. Here are some reasons why.\nI put together basket-css-example using create-stylesheet to show an example of basket.js loading CSS. I have identified some issues but I am certain there are more.\nIf people still would like to see CSS work better with basket.js, I am happy to help out.\n. bag.js looks great!\nRegarding the CSS feature in bag.js, I would consider appending the style element before setting the CSS. There's some known issues with orphaned style elements in IE.\nThe CSS feature in bag.js (unlike the JS solution) has some caveats and in some cases, people may need to modify their CSS to get it working. I have discussed these issues in #60. Documenting those caveats would be preferable as reliably solving those issues would be difficult.\nI have limited experience with Promises, but I usually find that callbacks are sufficient for my needs. I am not a huge fan of shims as they tend to bloat libraries. Even though they are \"optional\", I find myself always loading them because I need to support older browsers. Having said that, I do not feel strongly about the RSVP dependency being in basket.js. The difference in size is still fairly negligible.\nCan we support callbacks if the RSVP dependency is absent?\nI am a big fan of modularity but I lack experience over both projects to say that it's needed right now.\nAlso, I really like the new pre-release changes to basket.js. Thanks!\n. This is just a throw-together. I'm happy to improve the code, put in some tests and turn it into a plug-in.\n. ",
    "mahakala": "ping. ping. ",
    "BeMoreDifferent": "ah, ok. thanks. I thought basket.js is a standalone script. I will try it with rsvp as soon as possible :+1:\n. ah, ok. thanks. I thought basket.js is a standalone script. I will try it with rsvp as soon as possible :+1:\n. ",
    "jschilli": "My primary use case is checksumming for a mobile application - high latency/low(er) bandwidth and generally poorer caching.  \nI haven't benchmarked my checksumming code yet so you may well be correct.\nThe issue I have with get is that I'm hitting local storage twice - once to get and validate - again to require as get alone won't do the injection\nThe change I made intercedes the act of requiring - if the validation fails, then fetch again from the server.\nI am sending checksums from the server with the initial page and using that in the isValidItem check - if I relax the checksumming requirement, unique is sufficient\n. happy to.\n. My primary use case is checksumming for a mobile application - high latency/low(er) bandwidth and generally poorer caching.  \nI haven't benchmarked my checksumming code yet so you may well be correct.\nThe issue I have with get is that I'm hitting local storage twice - once to get and validate - again to require as get alone won't do the injection\nThe change I made intercedes the act of requiring - if the validation fails, then fetch again from the server.\nI am sending checksums from the server with the initial page and using that in the isValidItem check - if I relax the checksumming requirement, unique is sufficient\n. happy to.\n. ",
    "davidmarkclements": "hey sindresorhus, yeah I read the alistapart article some time ago, however once you know the gotchas, for simple usage (eg equivalent to basket.js capabilities) appcache seems to be fine - plus theres no need to load a library up front, and no delay for initial execution time. \nis it a case of trading off performance with simplicty that basket.js provides? If thats the case then a tool that automatically generates and manages a manifest file for you can do the same without the performance hit..\nor is localstorage actually faster than appcache, thus compensating for additional load/parse/execution overhead?\nalso, images/css - basket js could do these too? Unless theres limitations on the localstorage (eg where a lot of image data could exceed the limit) - in which case you would use appcache, and since you're using it for images you may as well use it for scripts and css - unless there's any significant benefit to loading scripts into localstorage as a seperate affair?\n. Thanks for answering guys, I wasn't sure if I was missing something obvious or (as is the case) it was more of a complex evaluation and sizing up of each.\nEven though automagic generation will never know all your resources, nether will localstorage so that's a moot point for comparison - a more programmatic API for appcache would be nice (in fact I think that's already available in browser, but may benefit from some sugar)\nNevertheless I love that basket.js is experimenting and pushing the boundaries of intent, which has always been the true driving force of the web. \nI'd love to see a comparative checklist against both\n. @devinrhode2  I think there is a need for such a tool, but I've also created them by hand which for my purposes was fine (small projects, and I didn't do it until clients had stopped asking for changes --- they did in fact ask for changes a few weeks later and that's when I encountered the (anticipated) horrors so a tool would be awesome for larger projects or frequently updating projects. \n@addyosmani from a usability perspective for developers, but from a usability perspective for users I would venture that appcache wins (this is why good girls love bad guys) and a nice tidy usable API to mask the woefulness of appcache is certainly on my tooling todo list. Nevertheless, I'm not for discouraging the progress of basket.js either, I believe there's some unique value adding use cases for it (see #75)\n. hey sindresorhus, yeah I read the alistapart article some time ago, however once you know the gotchas, for simple usage (eg equivalent to basket.js capabilities) appcache seems to be fine - plus theres no need to load a library up front, and no delay for initial execution time. \nis it a case of trading off performance with simplicty that basket.js provides? If thats the case then a tool that automatically generates and manages a manifest file for you can do the same without the performance hit..\nor is localstorage actually faster than appcache, thus compensating for additional load/parse/execution overhead?\nalso, images/css - basket js could do these too? Unless theres limitations on the localstorage (eg where a lot of image data could exceed the limit) - in which case you would use appcache, and since you're using it for images you may as well use it for scripts and css - unless there's any significant benefit to loading scripts into localstorage as a seperate affair?\n. Thanks for answering guys, I wasn't sure if I was missing something obvious or (as is the case) it was more of a complex evaluation and sizing up of each.\nEven though automagic generation will never know all your resources, nether will localstorage so that's a moot point for comparison - a more programmatic API for appcache would be nice (in fact I think that's already available in browser, but may benefit from some sugar)\nNevertheless I love that basket.js is experimenting and pushing the boundaries of intent, which has always been the true driving force of the web. \nI'd love to see a comparative checklist against both\n. @devinrhode2  I think there is a need for such a tool, but I've also created them by hand which for my purposes was fine (small projects, and I didn't do it until clients had stopped asking for changes --- they did in fact ask for changes a few weeks later and that's when I encountered the (anticipated) horrors so a tool would be awesome for larger projects or frequently updating projects. \n@addyosmani from a usability perspective for developers, but from a usability perspective for users I would venture that appcache wins (this is why good girls love bad guys) and a nice tidy usable API to mask the woefulness of appcache is certainly on my tooling todo list. Nevertheless, I'm not for discouraging the progress of basket.js either, I believe there's some unique value adding use cases for it (see #75)\n. ",
    "devinrhode2": "@davidmarkclements AppCache is a douchbag when you try and do it by hand. Don't do it by hand. Find a utility for your stack and you should never have a problem, only drastically lower server costs, and a web app that's as fast as a local app.\nlocalStorage is synchronous but should be asynchronous because disk reads can be really slow, especially if you're not a developer with a SSD. IMO localStorage is best for small pieces of data\n. Images are the worst, you can base64 encode them but you're going to still have to hook into the build process to do that.\nThose tools do exist, Rack::offline for RoR and of course grunt-contrib-manifest I don't know if they're perfect yet but I'll be hopefully getting to them after another project.\n. well I guess I'll be making that magically tool sometime ^_^\n-Devin http://zerply.com/DevinRhode2\n http://zerply.com/devinrhode2\nOn Thu, Jan 31, 2013 at 2:05 PM, Sindre Sorhus notifications@github.comwrote:\n\nThose tools do exist, Rack::offline for RoR and of course\ngrunt-contrib-manifest I don't know if they're perfect yet but I'll be\nhopefully getting to them after another project.\nI dunno, they only help you slightly. The grunt task the least, which\nreally only let's you specify stuff in an object instead of directly into\nthe manifest.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/71#issuecomment-12968590.\n. @davidmarkclements AppCache is a douchbag when you try and do it by hand. Don't do it by hand. Find a utility for your stack and you should never have a problem, only drastically lower server costs, and a web app that's as fast as a local app.\n\nlocalStorage is synchronous but should be asynchronous because disk reads can be really slow, especially if you're not a developer with a SSD. IMO localStorage is best for small pieces of data\n. Images are the worst, you can base64 encode them but you're going to still have to hook into the build process to do that.\nThose tools do exist, Rack::offline for RoR and of course grunt-contrib-manifest I don't know if they're perfect yet but I'll be hopefully getting to them after another project.\n. well I guess I'll be making that magically tool sometime ^_^\n-Devin http://zerply.com/DevinRhode2\n http://zerply.com/devinrhode2\nOn Thu, Jan 31, 2013 at 2:05 PM, Sindre Sorhus notifications@github.comwrote:\n\nThose tools do exist, Rack::offline for RoR and of course\ngrunt-contrib-manifest I don't know if they're perfect yet but I'll be\nhopefully getting to them after another project.\nI dunno, they only help you slightly. The grunt task the least, which\nreally only let's you specify stuff in an object instead of directly into\nthe manifest.\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/addyosmani/basket.js/issues/71#issuecomment-12968590.\n. \n",
    "nhoizey": "asyncStorage exists, at least in a library: http://webreflection.blogspot.de/2012/06/asynchronous-storage-for-all-browsers.html\n. asyncStorage exists, at least in a library: http://webreflection.blogspot.de/2012/06/asynchronous-storage-for-all-browsers.html\n. ",
    "somerandomdude": "Ack! I'm sorry, I posted this to the wrong project. Sorry!\n. Ack! I'm sorry, I posted this to the wrong project. Sorry!\n. ",
    "emilianox": "+1\n. +1\n. ",
    "radkodinev": "Yes, please :)\n. Yes, please :)\n. ",
    "bkardell": "that is what I sent, is it not?  was raw.github - should be rawgithub ..no?  I am not understanding how fixing that causes the build to fail...can you explain that? \n. that is what I sent, is it not?  was raw.github - should be rawgithub ..no?  I am not understanding how fixing that causes the build to fail...can you explain that? \n. ",
    "puzrin": "Any progress on docs?\n. then is called after xhr request finished, So, nested .then(basket.require(...)) will cause sequential loading, instead of parallel.\n. Ah! Found in sourses, thanks for your patience!\nWell, another question - in real life, it's convenient to pass dependent resources as ordered array. Is it possible to add such signature?\n. Could you explain, why wrong? Having script name really helps when error happens.\n. Thanks for the links. Those projects are not useful directly, but contains valuable info for devaloppers.\nI did https://github.com/nodeca/bag.js that contains all features i talked about + simple KV storage. But if you ever decide to reconsider basket API, it's never late to merge features back to your mainstream. I'm not gready about glory and don't insist on keepeng bag.js separate :) . Just need bigger storages + kv for Nodeca & Fontello projects.\nPS. Not sure, if i should to place your copyrights/info in bag.js header, since almost everything was rewritten. But if you know what to add - let me know. Now info is placed in readme.\n. I didn't modularized bag.js, because had no such goal - imho size is ok. Everything is in 1 file and does not require RSVP. https://github.com/nodeca/bag.js/blob/master/bag.js . Splitting to modules is not a big problem, if it's critical. Also, code can be polished to take less size.\nMore serious problem is, that basket api should be reconsidered (async), to support indexeddb/websql. All key differences & api are described in readme https://github.com/nodeca/bag.js#readme . Don't know, if such radical change is acceptable for your project. It's just my personal vision.\n. Hm... actually, that means taking bag.js sources and overwriting your ones.\n1. That will break API\n2. That will increase size to 3.2kb (gipped)\n3. That will change tests (i've rewritten those to mocha, splitted to parts and removed some)\n4. Version bump\nAre you sure???\nOf cause, i will be glad to move bag.js back your repo. But please, confirm that you are ready to accept such changes. You can review rurrent code/tests here https://github.com/nodeca/bag.js . If it's ok for you, i will make one PR with code/tests and one PR with docs update (in your style, without my copyrights)\n. - https://github.com/nodeca/bag.js/blob/master/bag.js#L403 technically it should not be difficult to make adapters pluggable. I had no reasons to do that for my projects.\n- there is one main reason for incompatibility. basket uses sync api for localstorage access (basket.get()). indexeddb & websql are async. You can do nothing with that without api change. Second reason is using node.js-like callbacks instead of promisses.\n- logic is very similar. i've tryed to implement all features of basket from master, because don't like to reinvent the wheel. Main differences are:\n  - get method is now for kv access (in pair with set). In basket it looks like dirty hack (can't imagine that someone need it in real life except testing).\n  - bag uses arrays of params for parallel loading instead of chaining. And execute scripts when then all loaded. Executing can be improved, but i had no practical reasons to spend time for that.\n  - expiration logic for localstore is simplified: when no space - everything is cleared. That can be improved, but in general, if you have big data - just use indexeddb/websql.\n  - coding style is from my progects, instead of your one.\nIMHO, someone should compare APIs & internals to understand all details. If you skip parts of indexeddb/websql implementations, the rest of code is quite small.\n. Using callbacks instead of promisses is my personal choice. ES6 is very cool, but we live in real world :) . Using callbacks simplified build system and shortened development time. Note that i'm server-side developper first. And just try to write in similar way on the client.\nPersonally, i don't like using promisses for simple things :) . I had no chance to land my requests in basket fast, and had to rewrite almost everything because of archtecture/api change. So, i just did all as was convenient for me.\n. By the way, after removing indexeddb/websql adapters, bag.js size is 2.3K gzipped. Not sure, that 0.8K size benefit is big enougth to care about modularity.\nAlso, when compared sizes, you missed RSVP dependency. Full basket version takes 4.9K gzipped. That's bigger than bag.js with all storages included :)\n. Thanks for notes about CSS. I'm not expert about browser issues. Prefer waiting final solution in basket, to do the same in bag.\nSupporting both callbacks & promisses will be overengeneering.\n@addyosmani consider upgrade to RSVP v2+. It's more compact.\n. > What are folks thoughts on us switching over to using the global Cache API that used to just be part of Service Worker but is now part of the global window and in Chrome (soon coming to Firefox)?\nAs user i need script that \"just works\" and don't care much about internals.\n. May be close? Seems nothing changed to many years. I'm surfing https://github.com/issues and try to short list of issues opened by me.\n. While IdexedDB support level is acceptable, it's init is not free. A week ago we had to investigate why JS starts with noticeable delay at our site (we used bag.js with indexeddb prefered storage). Result is:\n- IndexedDB init (~ first access) takes about 200ms.\n- Script insert into page takes about 500ms (~150\u041a gzipped/minified).\nNo ideas now to reduce this :(\n. Any progress on docs?\n. then is called after xhr request finished, So, nested .then(basket.require(...)) will cause sequential loading, instead of parallel.\n. Ah! Found in sourses, thanks for your patience!\nWell, another question - in real life, it's convenient to pass dependent resources as ordered array. Is it possible to add such signature?\n. Could you explain, why wrong? Having script name really helps when error happens.\n. Thanks for the links. Those projects are not useful directly, but contains valuable info for devaloppers.\nI did https://github.com/nodeca/bag.js that contains all features i talked about + simple KV storage. But if you ever decide to reconsider basket API, it's never late to merge features back to your mainstream. I'm not gready about glory and don't insist on keepeng bag.js separate :) . Just need bigger storages + kv for Nodeca & Fontello projects.\nPS. Not sure, if i should to place your copyrights/info in bag.js header, since almost everything was rewritten. But if you know what to add - let me know. Now info is placed in readme.\n. I didn't modularized bag.js, because had no such goal - imho size is ok. Everything is in 1 file and does not require RSVP. https://github.com/nodeca/bag.js/blob/master/bag.js . Splitting to modules is not a big problem, if it's critical. Also, code can be polished to take less size.\nMore serious problem is, that basket api should be reconsidered (async), to support indexeddb/websql. All key differences & api are described in readme https://github.com/nodeca/bag.js#readme . Don't know, if such radical change is acceptable for your project. It's just my personal vision.\n. Hm... actually, that means taking bag.js sources and overwriting your ones.\n1. That will break API\n2. That will increase size to 3.2kb (gipped)\n3. That will change tests (i've rewritten those to mocha, splitted to parts and removed some)\n4. Version bump\nAre you sure???\nOf cause, i will be glad to move bag.js back your repo. But please, confirm that you are ready to accept such changes. You can review rurrent code/tests here https://github.com/nodeca/bag.js . If it's ok for you, i will make one PR with code/tests and one PR with docs update (in your style, without my copyrights)\n. - https://github.com/nodeca/bag.js/blob/master/bag.js#L403 technically it should not be difficult to make adapters pluggable. I had no reasons to do that for my projects.\n- there is one main reason for incompatibility. basket uses sync api for localstorage access (basket.get()). indexeddb & websql are async. You can do nothing with that without api change. Second reason is using node.js-like callbacks instead of promisses.\n- logic is very similar. i've tryed to implement all features of basket from master, because don't like to reinvent the wheel. Main differences are:\n  - get method is now for kv access (in pair with set). In basket it looks like dirty hack (can't imagine that someone need it in real life except testing).\n  - bag uses arrays of params for parallel loading instead of chaining. And execute scripts when then all loaded. Executing can be improved, but i had no practical reasons to spend time for that.\n  - expiration logic for localstore is simplified: when no space - everything is cleared. That can be improved, but in general, if you have big data - just use indexeddb/websql.\n  - coding style is from my progects, instead of your one.\nIMHO, someone should compare APIs & internals to understand all details. If you skip parts of indexeddb/websql implementations, the rest of code is quite small.\n. Using callbacks instead of promisses is my personal choice. ES6 is very cool, but we live in real world :) . Using callbacks simplified build system and shortened development time. Note that i'm server-side developper first. And just try to write in similar way on the client.\nPersonally, i don't like using promisses for simple things :) . I had no chance to land my requests in basket fast, and had to rewrite almost everything because of archtecture/api change. So, i just did all as was convenient for me.\n. By the way, after removing indexeddb/websql adapters, bag.js size is 2.3K gzipped. Not sure, that 0.8K size benefit is big enougth to care about modularity.\nAlso, when compared sizes, you missed RSVP dependency. Full basket version takes 4.9K gzipped. That's bigger than bag.js with all storages included :)\n. Thanks for notes about CSS. I'm not expert about browser issues. Prefer waiting final solution in basket, to do the same in bag.\nSupporting both callbacks & promisses will be overengeneering.\n@addyosmani consider upgrade to RSVP v2+. It's more compact.\n. > What are folks thoughts on us switching over to using the global Cache API that used to just be part of Service Worker but is now part of the global window and in Chrome (soon coming to Firefox)?\nAs user i need script that \"just works\" and don't care much about internals.\n. May be close? Seems nothing changed to many years. I'm surfing https://github.com/issues and try to short list of issues opened by me.\n. While IdexedDB support level is acceptable, it's init is not free. A week ago we had to investigate why JS starts with noticeable delay at our site (we used bag.js with indexeddb prefered storage). Result is:\n- IndexedDB init (~ first access) takes about 200ms.\n- Script insert into page takes about 500ms (~150\u041a gzipped/minified).\nNo ideas now to reduce this :(\n. ",
    "lagden": "I did an ugly stuff, but it worked...\n``` javascript\n// Script\nbasket.require({\n    url     : '/js/nimble.js',\n    unique  : 'nimble-v0.1.0',\n    execute : false,\n    key     : 'nimble'\n}).then(function(){\n    var req = basket.get('nimble');\n    var sourceMap = '/js/nimble.js.map';\n    var data = req.data.replace(/(sourceMappingURL\\=)(.*)/,'$1'+sourceMap);\nvar h = document.head || document.getElementsByTagName('head')[0];\nvar script = document.createElement('script');\nscript.defer = true;\nscript.text = data;\nh.appendChild(script);\n\n});\n```\nCould have an option like sourceMapPath in require\n. Oh my!!!\nThe test works when executed locally.\nIn my test (compressed script), I had to change the big file to small file because the Travis was giving timeout.\nNow I can have lunch in peace... rs...\n. Ok!! Tks!\n. I did an ugly stuff, but it worked...\n``` javascript\n// Script\nbasket.require({\n    url     : '/js/nimble.js',\n    unique  : 'nimble-v0.1.0',\n    execute : false,\n    key     : 'nimble'\n}).then(function(){\n    var req = basket.get('nimble');\n    var sourceMap = '/js/nimble.js.map';\n    var data = req.data.replace(/(sourceMappingURL\\=)(.*)/,'$1'+sourceMap);\nvar h = document.head || document.getElementsByTagName('head')[0];\nvar script = document.createElement('script');\nscript.defer = true;\nscript.text = data;\nh.appendChild(script);\n\n});\n```\nCould have an option like sourceMapPath in require\n. Oh my!!!\nThe test works when executed locally.\nIn my test (compressed script), I had to change the big file to small file because the Travis was giving timeout.\nNow I can have lunch in peace... rs...\n. Ok!! Tks!\n. ",
    "mitermayer": "would be keen to know whats the current state of this :) loved both projects\n. would be keen to know whats the current state of this :) loved both projects\n. ",
    "JonDum": "I totally would if I was using Basket, but I ended up going with something else because I didn't like Basket's syntax and I don't have the time right now to contribute to projects I'm not using sorry. :(\n. I totally would if I was using Basket, but I ended up going with something else because I didn't like Basket's syntax and I don't have the time right now to contribute to projects I'm not using sorry. :(\n. ",
    "amenadiel": "I know I shouldn't bring back this issue from the dead, but I wanted to comment on my experience with this. I tried @andrewwakeling code and sort of works for simple requirejs projects. \nHowever, when we deal with several modules, each of them calling an anonymous define and meant to be optimized separately, it doesn't work. During the first load everything goes fine and every script is stored in localStorage. During the second load, everyone of these modules threw:\njs\n    mismatch Error: Mismatched anonymous define() module:\nWhich makes sense because they have an anonymous define inside of them, mind you.\nSo I tried turning this to a plugin. \njs\ndefine(function () {\n    var frombasket = {\n        load: function (name, parentRequire, parentLoad, config) {\n            var fileUrl = parentRequire.toUrl(name + '.js');\n            if (config.isBuild) {\n                parentLoad();\n                return;\n            } else {\n                basket.require({\n                        url: fileUrl\n                    }).then(function () {\n                        parentRequire([name], function (value) {\n                            parentLoad(value);\n                            return;\n                        });\n                    }, function (error) {\n                        return parentLoad.error(error);\n                    });\n            }\n        }\n    };\n    return frombasket;\n});\nWhich means that, instead of overriding requirejs.load method, I picked which modules to load with basketjs:\njs\ndefine([\n   'frombasket!vendor/jquery.min',\n   'frombasket!vendor/d3.min',\n   'frombasket!vendor/handlebars.amd.min',\n   'app/mymodule'\n],function(jQuery, d3, Handlebars, myModule) {\n   ...\n});\nBut it was basically the same. Common libraries loaded ok, but unbuilt modules didn't. So I modified the plugin to have basketjs pass the raw code to requirejs:\n``` js\ndefine(function () {\n    var frombasket = {\n        load: function (name, parentRequire, parentLoad, config) {\n            var fileUrl = parentRequire.toUrl(name + '.js');\n            if (config.isBuild) {\n                parentLoad();\n                return;\n            } else {\n                basket.require({\n                        url: fileUrl,\n                        execute:false\n                    }).then(function (result) {\n                        parentLoad.fromText(result.data);\n                    parentRequire([name], function (value) {\n                        parentLoad(value);\n                        return;\n                    });\n                }, function (error) {\n                    return onLoadNative.error(error);\n                });\n        }\n    }\n};\nreturn frombasket;\n\n});\n```\nBut it's even worse, because any dependencies in the form of named modules can't be resolved when you load a module with parentLoad.fromText. The main requirejs config, which contains the paths, isn't properly injected to the loaded and eval'd code.\nSo, for the time being, the first plugin code, as well as @andrewwakeling code, are safe to use only to store and request scripts that either are wrapped as UMD, or at least define themselves with an explicit name.\n. I know I shouldn't bring back this issue from the dead, but I wanted to comment on my experience with this. I tried @andrewwakeling code and sort of works for simple requirejs projects. \nHowever, when we deal with several modules, each of them calling an anonymous define and meant to be optimized separately, it doesn't work. During the first load everything goes fine and every script is stored in localStorage. During the second load, everyone of these modules threw:\njs\n    mismatch Error: Mismatched anonymous define() module:\nWhich makes sense because they have an anonymous define inside of them, mind you.\nSo I tried turning this to a plugin. \njs\ndefine(function () {\n    var frombasket = {\n        load: function (name, parentRequire, parentLoad, config) {\n            var fileUrl = parentRequire.toUrl(name + '.js');\n            if (config.isBuild) {\n                parentLoad();\n                return;\n            } else {\n                basket.require({\n                        url: fileUrl\n                    }).then(function () {\n                        parentRequire([name], function (value) {\n                            parentLoad(value);\n                            return;\n                        });\n                    }, function (error) {\n                        return parentLoad.error(error);\n                    });\n            }\n        }\n    };\n    return frombasket;\n});\nWhich means that, instead of overriding requirejs.load method, I picked which modules to load with basketjs:\njs\ndefine([\n   'frombasket!vendor/jquery.min',\n   'frombasket!vendor/d3.min',\n   'frombasket!vendor/handlebars.amd.min',\n   'app/mymodule'\n],function(jQuery, d3, Handlebars, myModule) {\n   ...\n});\nBut it was basically the same. Common libraries loaded ok, but unbuilt modules didn't. So I modified the plugin to have basketjs pass the raw code to requirejs:\n``` js\ndefine(function () {\n    var frombasket = {\n        load: function (name, parentRequire, parentLoad, config) {\n            var fileUrl = parentRequire.toUrl(name + '.js');\n            if (config.isBuild) {\n                parentLoad();\n                return;\n            } else {\n                basket.require({\n                        url: fileUrl,\n                        execute:false\n                    }).then(function (result) {\n                        parentLoad.fromText(result.data);\n                    parentRequire([name], function (value) {\n                        parentLoad(value);\n                        return;\n                    });\n                }, function (error) {\n                    return onLoadNative.error(error);\n                });\n        }\n    }\n};\nreturn frombasket;\n\n});\n```\nBut it's even worse, because any dependencies in the form of named modules can't be resolved when you load a module with parentLoad.fromText. The main requirejs config, which contains the paths, isn't properly injected to the loaded and eval'd code.\nSo, for the time being, the first plugin code, as well as @andrewwakeling code, are safe to use only to store and request scripts that either are wrapped as UMD, or at least define themselves with an explicit name.\n. ",
    "timgluz": "sorry for spamming;\n. sorry for spamming;\n. ",
    "markrendle": "I like to take advantage of public CDNs where possible, to improve loading times and reduce load on my servers; for example, I use googleapis for AngularJS and cdnjs for jQuery. I also serve the application JS files through MaxCDN. But I also have copies of those libraries on my site with fallback code if the CDN is unavailable.\nI want to use Basket.js as an additional optimization, but I'd still like to use the CDNs for the initial download of those files, and have the fallback functionality. And the cross-site thing isn't an issue in my case because my application requires a CORS-compatible browser anyway.\n. Sorry, missed this. Will add some docs.\n. I like to take advantage of public CDNs where possible, to improve loading times and reduce load on my servers; for example, I use googleapis for AngularJS and cdnjs for jQuery. I also serve the application JS files through MaxCDN. But I also have copies of those libraries on my site with fallback code if the CDN is unavailable.\nI want to use Basket.js as an additional optimization, but I'd still like to use the CDNs for the initial download of those files, and have the fallback functionality. And the cross-site thing isn't an issue in my case because my application requires a CORS-compatible browser anyway.\n. Sorry, missed this. Will add some docs.\n. ",
    "OskHa": "OK, problem resolved...\nFor those who are looking for a solution, just add the \"add_header Access-Control-Allow-Origin www.example.com;\"\n. OK, problem resolved...\nFor those who are looking for a solution, just add the \"add_header Access-Control-Allow-Origin www.example.com;\"\n. ",
    "passy": "Didn't notice I also got #100 with this. Hell yeah!\n. Didn't notice I also got #100 with this. Hell yeah!\n. ",
    "bnjmnt4n": "Can\u2019t do one now, but will be able to do it next Monday :)\n. ping @sindresorhus\n. :)\n. Can\u2019t do one now, but will be able to do it next Monday :)\n. ping @sindresorhus\n. :)\n. ",
    "itsuryev": "Done, please tell if something needs to be changed.\n. Updated, thank you.\n. > Sidenote, we need to ensure that key in basket-- does not contain the separator character -. \nWhy?\nPlease note that we can not change the first basket- part as then remove won't be able to identify old scripts and clear them if they are expired.\nMaybe right away you have some ideas on how to deal with key - fullKey map?\nIf we are ok to not support use case where user manually adds basket entry to the localStorage when I can suggest following approach:\n1. Generate map during remove as it either way iterates through all localStorage\n2. Updating single entry in the map once new scripts are fetched.\nI believe this is fine as some version(s) ago you have removed add functionality.\nMy next step would be to send pull request so we would have something to look at. Though I doubt I would be able to do it during this week.\n. basket-foo-bar-baz-{}\nWe can write it like this: basket-foo-bar-baz\\t{}\nThis way we have: <basketKey><userKey><separator><JSON.stringify(props)>\n<basketKey> = basket-\n<userKey> = foo-bar-baz\n<separator> = \\t\n\nCan you clarify? I'm not sure I see the original issue prompting this.\n\nSure. When we store everything except data itself in the key the difficult part would be fetching the item we need.\nUser write basket.get('my-item');. How do we find it in the localStorage?\nIt will be stored as:\nbasket-my-item\\t{url:'...'}\nSo we have to iterate over localStore items, try to split based on basketKey, then split based by separator and then check what left between them. If it matches original request - all is good, else - continue iterating. And that part with splitting, splitting again and then matching strings would not be fast itself. So we want to limit it.\nWhat I am suggesting is to form map between user keys and full prefixed keys with props during remove command. During remove we either way iterate though all the collection and try to find all the basket items to check their expiration date. Just as well we can form following map:\njs\nvar map = {\n    'my-item': 'basket-my-item\\t{url: \"...\"}'\n};\n. Iteration itself is ok, splitting, splitting and checking is not so.\n\nWe do a regex for matching the key: new RegExp('basket-' + key). Then iterate and check.\n\nIndeed, we can even make it new RegExp('basket-' + key + propsSeparator) so we would not receive extra results (e.g. key was 'foo-bar', we might have got 'basket-foo-bar' and 'basket-foo-bar-baz').\nSounds like a plan.\nThis seems faster than my splitting option. \nStill we will have to check how fast/slow it is in real life. Imagine you have 5 items not related to basket and 5 basket scripts in localStorage.\nYou load your application and as usual require 5 scripts. For each of them we would iterate over localStorage, check regex. That would be 50 checks total. In case of map there might have been just 10 (though have to try first).\n. Done, please tell if something needs to be changed.\n. Updated, thank you.\n. > Sidenote, we need to ensure that key in basket-- does not contain the separator character -. \nWhy?\nPlease note that we can not change the first basket- part as then remove won't be able to identify old scripts and clear them if they are expired.\nMaybe right away you have some ideas on how to deal with key - fullKey map?\nIf we are ok to not support use case where user manually adds basket entry to the localStorage when I can suggest following approach:\n1. Generate map during remove as it either way iterates through all localStorage\n2. Updating single entry in the map once new scripts are fetched.\nI believe this is fine as some version(s) ago you have removed add functionality.\nMy next step would be to send pull request so we would have something to look at. Though I doubt I would be able to do it during this week.\n. basket-foo-bar-baz-{}\nWe can write it like this: basket-foo-bar-baz\\t{}\nThis way we have: <basketKey><userKey><separator><JSON.stringify(props)>\n<basketKey> = basket-\n<userKey> = foo-bar-baz\n<separator> = \\t\n\nCan you clarify? I'm not sure I see the original issue prompting this.\n\nSure. When we store everything except data itself in the key the difficult part would be fetching the item we need.\nUser write basket.get('my-item');. How do we find it in the localStorage?\nIt will be stored as:\nbasket-my-item\\t{url:'...'}\nSo we have to iterate over localStore items, try to split based on basketKey, then split based by separator and then check what left between them. If it matches original request - all is good, else - continue iterating. And that part with splitting, splitting again and then matching strings would not be fast itself. So we want to limit it.\nWhat I am suggesting is to form map between user keys and full prefixed keys with props during remove command. During remove we either way iterate though all the collection and try to find all the basket items to check their expiration date. Just as well we can form following map:\njs\nvar map = {\n    'my-item': 'basket-my-item\\t{url: \"...\"}'\n};\n. Iteration itself is ok, splitting, splitting and checking is not so.\n\nWe do a regex for matching the key: new RegExp('basket-' + key). Then iterate and check.\n\nIndeed, we can even make it new RegExp('basket-' + key + propsSeparator) so we would not receive extra results (e.g. key was 'foo-bar', we might have got 'basket-foo-bar' and 'basket-foo-bar-baz').\nSounds like a plan.\nThis seems faster than my splitting option. \nStill we will have to check how fast/slow it is in real life. Imagine you have 5 items not related to basket and 5 basket scripts in localStorage.\nYou load your application and as usual require 5 scripts. For each of them we would iterate over localStorage, check regex. That would be 50 checks total. In case of map there might have been just 10 (though have to try first).\n. ",
    "pavante": "@omarmeky Well, we also use basket.js in situations, where sometimes there is no internet connection (iPad).  The only way we found, was to patch the library in two spots.\n- at the isCacheValid function made sure to check if navigator.onLine. If it is, then we claim that the cache is valid. (but beware if you patch here: the line shouldFetch = isCacheValid(source, obj); is not easy to interpret. seems twisted to me)\n- at the bottom, check if the basket.clear(true) works for you. We removed it, because we felt it removed the cache too early. even if there was no internet connection and the app had no chance to get a fresher version.\nNow it works fine for us. Even in offline situations. \n. @omarmeky Well, we also use basket.js in situations, where sometimes there is no internet connection (iPad).  The only way we found, was to patch the library in two spots.\n- at the isCacheValid function made sure to check if navigator.onLine. If it is, then we claim that the cache is valid. (but beware if you patch here: the line shouldFetch = isCacheValid(source, obj); is not easy to interpret. seems twisted to me)\n- at the bottom, check if the basket.clear(true) works for you. We removed it, because we felt it removed the cache too early. even if there was no internet connection and the app had no chance to get a fresher version.\nNow it works fine for us. Even in offline situations. \n. ",
    "mhmxs": "Thanks, I fixed those.\n. Is there any chance to merge this changeset into your project?\n. Thanks, I fixed those.\n. Is there any chance to merge this changeset into your project?\n. ",
    "hereandnow": "created PR #3611 on cdnjs's repo (including npm autoupdate)\n. created PR #3611 on cdnjs's repo (including npm autoupdate)\n. ",
    "mathvav": "It could automatically do a standard require instead of throwing an exception... I'd be nice to not have to worry about having the exception thrown and rendering the page useless.\n. It could automatically do a standard require instead of throwing an exception... I'd be nice to not have to worry about having the exception thrown and rendering the page useless.\n. ",
    "dylang": "Some errors:\n- Firefox 29, localStorage is null, in basket.get.\n- IE 11: Access is denied. in basket.clear.\nThanks for looking into this. If you need more errors/browsers let me know and I'll take a deeper look into our Sentry logs.\n. Some errors:\n- Firefox 29, localStorage is null, in basket.get.\n- IE 11: Access is denied. in basket.clear.\nThanks for looking into this. If you need more errors/browsers let me know and I'll take a deeper look into our Sentry logs.\n. ",
    "justmarkup": "I also get an error related to this when I check the \"Block any sites from setting data\" option in Chrome. \nThe error is \nUncaught SecurityError: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\nThis prevents that any code called via basket will fail to load and thus will break the site.\nAdding try/catch eg. https://gist.github.com/justmarkup/c1c9da55d4c84fcca084 would solve this problem. Question is, does anything speak against using try/catch? I am happy to make a PR, but want to make sure you are fine with this change?\n. Hi @addyosmani \nI just created a new branch on my fork to compare the performance, see: https://github.com/justmarkup/basket.js/commit/256161ad13a6ed7b0c89769efb7b246b284fef70\nI am not adding a try/catch block inside any of the functions as I think this helps with the V8 performance issue.\nTest with current code: https://justmarkup.com/tests/local.html\nTest with my try/catch: https://justmarkup.com/tests/local-trycatch.html\nI don't really know how to profile this so would be great if you could point me in the right direction or help me out here. Thanks.\n. I also get an error related to this when I check the \"Block any sites from setting data\" option in Chrome. \nThe error is \nUncaught SecurityError: Failed to read the 'localStorage' property from 'Window': Access is denied for this document.\nThis prevents that any code called via basket will fail to load and thus will break the site.\nAdding try/catch eg. https://gist.github.com/justmarkup/c1c9da55d4c84fcca084 would solve this problem. Question is, does anything speak against using try/catch? I am happy to make a PR, but want to make sure you are fine with this change?\n. Hi @addyosmani \nI just created a new branch on my fork to compare the performance, see: https://github.com/justmarkup/basket.js/commit/256161ad13a6ed7b0c89769efb7b246b284fef70\nI am not adding a try/catch block inside any of the functions as I think this helps with the V8 performance issue.\nTest with current code: https://justmarkup.com/tests/local.html\nTest with my try/catch: https://justmarkup.com/tests/local-trycatch.html\nI don't really know how to profile this so would be great if you could point me in the right direction or help me out here. Thanks.\n. ",
    "frenzis": "I think this is a serious issue. Testing basketjs on my IE11 I had this error: The code on this page disabled back and forward caching. For more information, see http://go.microsoft.com/fwlink/?LinkID=291337. Then some Access is denied caused by basket.js. The whole site obviously was messed up.\nA search on the Web drove me to this Stackoverflow answer: http://stackoverflow.com/a/20848924. This was exactly my case: after correcting the integrity level of the %userprofile%\\Appdata\\LocalLow the localstorage begun to works good.\nNow, before execute basketjs, I test localstorage[1]:\n``` javascript\nfunction lsTest(){\n    var test = 'test';\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch(e) {\n        return false;\n    }\n}\nif(lsTest() === true){\n    console.log('presente');\n}else{\n    console.log('assente');\n}\n```\n[1] http://stackoverflow.com/a/16427747\n. I think this is a serious issue. Testing basketjs on my IE11 I had this error: The code on this page disabled back and forward caching. For more information, see http://go.microsoft.com/fwlink/?LinkID=291337. Then some Access is denied caused by basket.js. The whole site obviously was messed up.\nA search on the Web drove me to this Stackoverflow answer: http://stackoverflow.com/a/20848924. This was exactly my case: after correcting the integrity level of the %userprofile%\\Appdata\\LocalLow the localstorage begun to works good.\nNow, before execute basketjs, I test localstorage[1]:\n``` javascript\nfunction lsTest(){\n    var test = 'test';\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    } catch(e) {\n        return false;\n    }\n}\nif(lsTest() === true){\n    console.log('presente');\n}else{\n    console.log('assente');\n}\n```\n[1] http://stackoverflow.com/a/16427747\n. ",
    "prawnsalad": "Sure thing - test now added.\n. Sure thing - test now added.\n. ",
    "lnr0626": "It's pretty straightforward:\nbasket.require({url:\"<url-to-script>\", unique:\"cache-buster-string\"}, ...).then(function() {\n            $(document).ready(function() {\n                angular.bootstrap(document, ['app-name']);\n            });\n        });\n^ goes in the page head, and you have to remove the ng-app directive from w/e you currently have it. \nOther than having to manually bootstrap angular, the two libraries don't affect each other.\nEDIT: You could also just give it a unique file name (which is what it sounds like you are doing), but then it would keep multiple versions of the script in localStorage until each one expires instead of replacing the old version with the new version.\n. It's pretty straightforward:\nbasket.require({url:\"<url-to-script>\", unique:\"cache-buster-string\"}, ...).then(function() {\n            $(document).ready(function() {\n                angular.bootstrap(document, ['app-name']);\n            });\n        });\n^ goes in the page head, and you have to remove the ng-app directive from w/e you currently have it. \nOther than having to manually bootstrap angular, the two libraries don't affect each other.\nEDIT: You could also just give it a unique file name (which is what it sounds like you are doing), but then it would keep multiple versions of the script in localStorage until each one expires instead of replacing the old version with the new version.\n. ",
    "alexleone": "Thanks for the response let me try this out.\n. Thanks for the response let me try this out.\n. ",
    "bravocado": "mentioned on #138 you can check it out to resolve your issue. :)\n. got it. thanks @wibblymat for pointing out. :)\n. using recursive function.\n. mentioned on #138 you can check it out to resolve your issue. :)\n. got it. thanks @wibblymat for pointing out. :)\n. using recursive function.\n. ",
    "MarkusPint": "+1 I need to use basket.full.js, which includes only the essential parts of RSVP.\n. What would be the most suitable way of turning on \"trackFailures\" ?\nAn options object passed after the array of needed resources, so it only applies to those resources:\nbasket.require([\n    { url: '//example.com' },\n    { url: '//example.com' }\n], { trackFailures: true });\nOr a global config option basket.trackFailures = true ?\n. +1 I need to use basket.full.js, which includes only the essential parts of RSVP.\n. What would be the most suitable way of turning on \"trackFailures\" ?\nAn options object passed after the array of needed resources, so it only applies to those resources:\nbasket.require([\n    { url: '//example.com' },\n    { url: '//example.com' }\n], { trackFailures: true });\nOr a global config option basket.trackFailures = true ?\n. ",
    "PatrickWalker": "https://github.com/bower/bower/issues/368 indicates this is by design and that the proposed options are\n1) Preferred - You handle the minification in the consuming project with your own resources and I guess the goal here is you have flexibility to do that how you want\n2) A new minified version of the package is made available a basket-full.js or basket-min.js as applicable.\n3) The pattern used by RSVP is followed here and the minified files are added in. This appears to be 'against' the intent of bower but is clearly possible as RSVP have managed it\nI think that for 1 and 2 (and I might be massively wrong here) the map files don't offer much value without the minified JS so I think it would make sense to exclude them from the bower package. Sorry ignore me. There has been a change put in for this\nhttps://github.com/addyosmani/basket.js/commits/gh-pages/bower.json\nthis isn't part of the latest release as there hasn't been one since Feb 2015. https://github.com/bower/bower/issues/368 indicates this is by design and that the proposed options are\n1) Preferred - You handle the minification in the consuming project with your own resources and I guess the goal here is you have flexibility to do that how you want\n2) A new minified version of the package is made available a basket-full.js or basket-min.js as applicable.\n3) The pattern used by RSVP is followed here and the minified files are added in. This appears to be 'against' the intent of bower but is clearly possible as RSVP have managed it\nI think that for 1 and 2 (and I might be massively wrong here) the map files don't offer much value without the minified JS so I think it would make sense to exclude them from the bower package. Sorry ignore me. There has been a change put in for this\nhttps://github.com/addyosmani/basket.js/commits/gh-pages/bower.json\nthis isn't part of the latest release as there hasn't been one since Feb 2015. ",
    "Oxicode": "+1\n. +1\n. ",
    "skilledDeveloper": "@sindresorhus Thanks for your comment. \nWhile I agree that the difference is not much for a few number of read/writes from/to localStorage, it doesn't hurt to choose the FASTER method over the slower method. (specially when it's a tiny code change)\n. @sindresorhus Thanks for your comment. \nWhile I agree that the difference is not much for a few number of read/writes from/to localStorage, it doesn't hurt to choose the FASTER method over the slower method. (specially when it's a tiny code change)\n. ",
    "ninbryan": "I was looking into how to word this better.\nSorry for the delay.\n. I was looking into how to word this better.\nSorry for the delay.\n. ",
    "abhijeetNmishra": "its working for cross domain with http:// will full api\n. its working for cross domain with http:// will full api\n. ",
    "seanlindo": "I tried executing the script without it and it appears this dependency is still needed. I created a gulp task to run once and forget and let NGINX serve it.\ngulp.task('build_loader', function() {\n  gulp.src(['./client/vendor/js/rsvp.min.js', './client/vendor/js/basket.min.js'])\n    .pipe(concat('loader.min.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest('./public/js/helpers'));\n});\n. I tried executing the script without it and it appears this dependency is still needed. I created a gulp task to run once and forget and let NGINX serve it.\ngulp.task('build_loader', function() {\n  gulp.src(['./client/vendor/js/rsvp.min.js', './client/vendor/js/basket.min.js'])\n    .pipe(concat('loader.min.js'))\n    .pipe(uglify())\n    .pipe(gulp.dest('./public/js/helpers'));\n});\n. ",
    "ray007": "Not sure about building, but looking at basket.js any Promise implementation should work with little change (RSVP.Promise -> Promise).\nAny reason not to do this?\n. Update: it seems I found a workaround for the problem.\nOriginally I had a line $(document).ready(app.init); in my application, which I changed to initializing at the end of the loader:\nbasket.require(jsfiles)\n.then(function() {\n    app.init();\n});\nAfter changing the call app.init(); to asynchronous, things seem to be working again...\n. Not really, in the then-clause of a Promise I shouldn't need to make my call asynchronous to make it work.\nMaybe just a problem of an old RSVP version?\n. CSS is not too hard, see #160, not sure how images would work with this mechanism.\n. @crobinson42 It's not up to me.. Try basket.require.apply(basket, arrayVar);\n. Not sure about building, but looking at basket.js any Promise implementation should work with little change (RSVP.Promise -> Promise).\nAny reason not to do this?\n. Update: it seems I found a workaround for the problem.\nOriginally I had a line $(document).ready(app.init); in my application, which I changed to initializing at the end of the loader:\nbasket.require(jsfiles)\n.then(function() {\n    app.init();\n});\nAfter changing the call app.init(); to asynchronous, things seem to be working again...\n. Not really, in the then-clause of a Promise I shouldn't need to make my call asynchronous to make it work.\nMaybe just a problem of an old RSVP version?\n. CSS is not too hard, see #160, not sure how images would work with this mechanism.\n. @crobinson42 It's not up to me.. Try basket.require.apply(basket, arrayVar);\n. ",
    "joshongit": "which means this question is already asked? if so give some insight by giving the link!!!\n. which means this question is already asked? if so give some insight by giving the link!!!\n. ",
    "reicolina": "I have been playing with basket.js lately, as I find the idea behind it fascinating... I do think it would be useful to have an array of the resources that failed to be retrieved.\nLooking at the code, I believe that the behavior described in this ticket is caused by the fact that internally basket.js uses RSVP.all(promises) which gets rejected immediately if any promise in the array is rejected. This doesn't allow us to keep track of the scripts that failed to load.\nA potential enhancement would be to modify the require method to accept an optional trackFailures argument, and if it's truthy then basket will use RSVP.allSettled(promises) (instead of RSVP.all(promises)) which fulfills (or rejects) with an array of the promises' result states, allowing us to keep track of the failures in a more elegant way.\nI wouldn't mind working on a PR that implements this solution If the project's core members believe that this would be useful.\nIn the meantime, you can have a workaround by doing something like this:\n``` javascript\n// define one valid URL and two invalid ones\nvar urls = [\n        'https://badurl1/x.js',\n        'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-alpha1/jquery.min.js',\n        'https://badurl2/y.js'\n    ],\n    failedUrls = [],\n    i;\n// closure that lets us deal with each url individually\nvar getResource = function (url) {\n    basket.require({url: url}).then(function () {}, function (err) {\n        // deal with the failures here\n        // for this example we just push the failed url to an array to be checked later\n        failedUrls.push(url);\n    });\n};\n// get the resources\nfor (i = 0; i < urls.length; i++) {\n    getResource(urls[i]);\n}\n// wait a little bit for all the 'requires' to be fullfilled or rejected\n// and check the 'failedUrls' array to see which ones failed\nsetTimeout(function () {\n    console.log(failedUrls) // expect: [\"https://badurl1/x.js\", \"https://badurl2/y.js\"]\n}, 500);\n```\nCheers!\n. I have been playing with basket.js lately, as I find the idea behind it fascinating... I do think it would be useful to have an array of the resources that failed to be retrieved.\nLooking at the code, I believe that the behavior described in this ticket is caused by the fact that internally basket.js uses RSVP.all(promises) which gets rejected immediately if any promise in the array is rejected. This doesn't allow us to keep track of the scripts that failed to load.\nA potential enhancement would be to modify the require method to accept an optional trackFailures argument, and if it's truthy then basket will use RSVP.allSettled(promises) (instead of RSVP.all(promises)) which fulfills (or rejects) with an array of the promises' result states, allowing us to keep track of the failures in a more elegant way.\nI wouldn't mind working on a PR that implements this solution If the project's core members believe that this would be useful.\nIn the meantime, you can have a workaround by doing something like this:\n``` javascript\n// define one valid URL and two invalid ones\nvar urls = [\n        'https://badurl1/x.js',\n        'https://cdnjs.cloudflare.com/ajax/libs/jquery/3.0.0-alpha1/jquery.min.js',\n        'https://badurl2/y.js'\n    ],\n    failedUrls = [],\n    i;\n// closure that lets us deal with each url individually\nvar getResource = function (url) {\n    basket.require({url: url}).then(function () {}, function (err) {\n        // deal with the failures here\n        // for this example we just push the failed url to an array to be checked later\n        failedUrls.push(url);\n    });\n};\n// get the resources\nfor (i = 0; i < urls.length; i++) {\n    getResource(urls[i]);\n}\n// wait a little bit for all the 'requires' to be fullfilled or rejected\n// and check the 'failedUrls' array to see which ones failed\nsetTimeout(function () {\n    console.log(failedUrls) // expect: [\"https://badurl1/x.js\", \"https://badurl2/y.js\"]\n}, 500);\n```\nCheers!\n. ",
    "foxx": "I'm also happy to help out with PR, can contribute 2 hours if needed. Thoughts @sindresorhus / @addyosmani ?\n. As an extension to the answer given by @reinaldo13, it might also be nice to have failure reason. For example;\njs\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){}, function(err) {\n        console.log(err.failed) // [ ['jquery', 'timeout', Error()],  ]\n    );\nOr alternatively, you could even add nice chaining;\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){\n    })\n    .fail(function(name, reason, err){\n    });\n. @sindresorhus / @addyosmani - Can you spare 5 minutes to review this before commit time for a PR?\n. Thanks for the update and apologies for the delay, I'll get a PR submitted this week\n. I'm not keen on the idea of changing the promise chaining based on an argument, as it doesn't feel clean imho. Instead of trackFailures, perhaps we could use a third argument as seen in other thenables, which would be used to track progress, see here.\nFor example;\njs\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){\n        console.log(\"All loaded okay\");\n    }, function(err) {\n        console.log(\"Failed to load all scripts\");\n    }, function(event, args) {\n        // event=loaderror\n        // args={key:'jquery':, url: 'http://...', reason: ..., err: ...]\n     })\nAnother option is introducing on and fail, like such;\njs\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){\n        console.log(\"All loaded okay\");\n    })\n    .fail(function(err) {\n        console.log(\"Failed to load all scripts\");\n    })\n    .on('loaderror', function(key, url, reason, err) {\n        // {key:'jquery':, url: 'http://...', reason: ..., err: ...]\n     })\nThese all get the same job done, just exposed in different ways. @addyosmani do you have any preference?\n. I'm also happy to help out with PR, can contribute 2 hours if needed. Thoughts @sindresorhus / @addyosmani ?\n. As an extension to the answer given by @reinaldo13, it might also be nice to have failure reason. For example;\njs\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){}, function(err) {\n        console.log(err.failed) // [ ['jquery', 'timeout', Error()],  ]\n    );\nOr alternatively, you could even add nice chaining;\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){\n    })\n    .fail(function(name, reason, err){\n    });\n. @sindresorhus / @addyosmani - Can you spare 5 minutes to review this before commit time for a PR?\n. Thanks for the update and apologies for the delay, I'll get a PR submitted this week\n. I'm not keen on the idea of changing the promise chaining based on an argument, as it doesn't feel clean imho. Instead of trackFailures, perhaps we could use a third argument as seen in other thenables, which would be used to track progress, see here.\nFor example;\njs\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){\n        console.log(\"All loaded okay\");\n    }, function(err) {\n        console.log(\"Failed to load all scripts\");\n    }, function(event, args) {\n        // event=loaderror\n        // args={key:'jquery':, url: 'http://...', reason: ..., err: ...]\n     })\nAnother option is introducing on and fail, like such;\njs\nbasket.require(\n    { url: '//example.com', key: 'jquery' },\n    { url: '//example.com', key: 'other' })\n    .then(function(){\n        console.log(\"All loaded okay\");\n    })\n    .fail(function(err) {\n        console.log(\"Failed to load all scripts\");\n    })\n    .on('loaderror', function(key, url, reason, err) {\n        // {key:'jquery':, url: 'http://...', reason: ..., err: ...]\n     })\nThese all get the same job done, just exposed in different ways. @addyosmani do you have any preference?\n. ",
    "hadifarnoud": "this feature would make basket.js amazing! we often end up using teamviewer for this, which is a pain.\n. this feature would make basket.js amazing! we often end up using teamviewer for this, which is a pain.\n. ",
    "Metis77": "read http://addyosmani.github.io/basket.js/\n. read http://addyosmani.github.io/basket.js/\n. ",
    "OMantere": "Yeah, document.ready will fire already when all \"traditionally\" loaded scripts are loaded. So this one should probably be closed?\n. Yeah, document.ready will fire already when all \"traditionally\" loaded scripts are loaded. So this one should probably be closed?\n. ",
    "frankinedinburgh": "try set basket.timeout = 300000; or a number higher than 5000. try set basket.timeout = 300000; or a number higher than 5000. ",
    "untone": "What about SVG files?\n. What about SVG files?\n. ",
    "SaulDoesCode": "why not fetch image files and return raw blobs to be used with image elements or canvas\n. why not fetch image files and return raw blobs to be used with image elements or canvas\n. ",
    "amilajack": "@SaulDoesCode That should work!\n. @sindresorhus what's the state of this PR? Should I close it?\n. @SaulDoesCode That should work!\n. @sindresorhus what's the state of this PR? Should I close it?\n. ",
    "crobinson42": "@ray007 #160 has been sitting for a long while.. whats the plan for the merge?\n. @ray007 #160 has been sitting for a long while.. whats the plan for the merge?\n. ",
    "normanzb": "for some reason travis just doesn't happy with my gruntfile, will try fix it later\n. travis issue fixed\n. for some reason travis just doesn't happy with my gruntfile, will try fix it later\n. travis issue fixed\n. ",
    "imrannaqvi": "Not array of objects, but all objects one by one, only possible way is to use function.apply.\n@ray007 You are absolutely right, this worked for me flawlessly.\nbasket.require.apply(basket, scripts).then(function () {\n    //sucess\n}, function (error) {\n    //error\n});\n. Not array of objects, but all objects one by one, only possible way is to use function.apply.\n@ray007 You are absolutely right, this worked for me flawlessly.\nbasket.require.apply(basket, scripts).then(function () {\n    //sucess\n}, function (error) {\n    //error\n});\n. ",
    "hermansje": "The referenced code sorts all localStarage items managed by basket.js and removes the oldest entry (recursively, until no error is thrown).\nPrivate mode in Safari hower, throws the QuotaExceededError when accessing localStorage, so it can't store anything. MDN gives an example how to handle this.\n. The referenced code sorts all localStarage items managed by basket.js and removes the oldest entry (recursively, until no error is thrown).\nPrivate mode in Safari hower, throws the QuotaExceededError when accessing localStorage, so it can't store anything. MDN gives an example how to handle this.\n. ",
    "Loksly": "You may not use jQuery until you are sure it has been loaded.\nTry something like.\n``` javascript\nfunction everythingWasSuccessfullyLoaded(){\n    var opts =  { exclusive: false };\n    jQuery(\"#accordion\").accordion();\n    jQuery(\"#accordion__section--1, #accordion__section--2, #accordion__section--3, #accordion__section--4, #accordion__section--5\").accordion(opts);\n}\nfunction somethingWentWrong(err){\n    console.error(err);\n    //try to recover\n}\nbasket\n    .require( { url: 'jquery.js' } )\n    .then(function(){\n        basket\n            .require(\n                { url: 'js/charts-loader.js' },\n                { url: 'js/accordion.js', unique: 1 },\n                { url: 'js/jquery.widowFix.min.js', unique: 1 },\n                { url: 'js/pandalocker.2.0.7.min.js', unique: 1 })\n            .then(\n                function(){\n                    basket.require(\n                        { url: \"js/google-charts.js\" },\n                        { url: \"js/function-accordian.js\", unique: 1 },\n                        { url: \"js/function-widowfix.js\", unique: 1 },\n                        { url: \"js/functions-social-locker.js\", unique: 1 })\n                    .then( everythingWasSuccessfullyLoaded, somethingWentWrong );\n                },somethingWentWrong);\n    }, somethingWentWrong);     \n```\n. You may not use jQuery until you are sure it has been loaded.\nTry something like.\n``` javascript\nfunction everythingWasSuccessfullyLoaded(){\n    var opts =  { exclusive: false };\n    jQuery(\"#accordion\").accordion();\n    jQuery(\"#accordion__section--1, #accordion__section--2, #accordion__section--3, #accordion__section--4, #accordion__section--5\").accordion(opts);\n}\nfunction somethingWentWrong(err){\n    console.error(err);\n    //try to recover\n}\nbasket\n    .require( { url: 'jquery.js' } )\n    .then(function(){\n        basket\n            .require(\n                { url: 'js/charts-loader.js' },\n                { url: 'js/accordion.js', unique: 1 },\n                { url: 'js/jquery.widowFix.min.js', unique: 1 },\n                { url: 'js/pandalocker.2.0.7.min.js', unique: 1 })\n            .then(\n                function(){\n                    basket.require(\n                        { url: \"js/google-charts.js\" },\n                        { url: \"js/function-accordian.js\", unique: 1 },\n                        { url: \"js/function-widowfix.js\", unique: 1 },\n                        { url: \"js/functions-social-locker.js\", unique: 1 })\n                    .then( everythingWasSuccessfullyLoaded, somethingWentWrong );\n                },somethingWentWrong);\n    }, somethingWentWrong);     \n```\n. "
}