{
    "swalkinshaw": "I like this in theory but there's a lot going in the standard wp_install_defaults function: https://github.com/WordPress/WordPress/blob/8b8c8e96e7f3cb67f0c8ae18541a7a1b6fe3a96b/wp-admin/includes/upgrade.php#L93-L245\nEspecially the MU stuff. Sometimes having the default content is nice because you can see all the markup/styling of a post/page.\n. I'd rather not duplicate all that code in Bedrock since we'd have to keep track of whenever it changes too. Going to pass on this change but when we strt getting better docs ready (or maybe a Wiki), I'll add this in since it's useful but we don't want it there by default.\n. This is good but can you make just a straight constant like WP_DEBUG? It's a sensible default so no need to make it an env var. And it's not secret credential or anything.\n. Also what about these additional ones: https://github.com/WordPress/WordPress/blob/5b5a31e78eb167a9b0412c1c33596acea9cae5f0/wp-includes/script-loader.php#L11-L14\n. Thanks! I'll look into the other settings separately.\n. We just left wp_ as the default but anyone can easily change it. Or even vary it by moving it into env specific configs. This is a standard setting and doesn't need to be an env var.\nWe actually wanted the default to be nothing but WP stupidly doesn't allow an empty string. There's no reason to have the prefix by default since most people only have one install per DB.\n. Good eye!\n. I was thinking about this after I saw this PR https://github.com/markjaquith/WordPress-Skeleton/pull/41/files\nYou're right that since we're using WP_HOME we should use it and DRY things up a bit too. Could you change this to use getenv('WP_HOME') though? Trying to standardize on that since there's also $_SERVER and $_ENV.\nedit: http was also hardcoded which it shouldn't be so this also solves that.\n. @CoffeeAndCode thanks but I realized it should actually just use the constant since it's already been defined at that point.\nphp\ndefine('WP_CONTENT_URL', WP_HOME . CONTENT_DIR);\nWant to update that once more?\n. Yay! And thanks for squashing commits/overwriting.\n. @nmec I have a new branch up with an install script like you had in mind but tied to Composer. You can check it out here: https://github.com/roots/bedrock/tree/post-install-scripts\nBasically you'd just run composer create-project roots/bedrock path/ and it would \"install\" Bedrock + dependencies and run the post create script to copy .env.example to .env and generate/append the salts to it.\n. Closing since #16 was merged.\n. @ajmalafif details are in PR #16 and REAMDE.\nRunning composer create-project roots/bedrock <path> prompts you if you want to generate them.\n. Wasn't a conscious decision, just overlooked. It's on our radar after being suggested by this guy:\nhttps://twitter.com/kchrist/status/413401599050924032\nhttps://twitter.com/kchrist/status/413402133568831489\n. Just a note that I've got a branch with this idea implemented: https://github.com/roots/bedrock/tree/web-folder\n. /cc @kennwilson as well :)\n. When public is used in frameworks like Rails, Symfony, and (I think) Laravel, it's for purely static files. Usually assets like JS, CSS, images. I went with web here because it's quite different than that. It still contains WP Core, plugins, themes, etc.\n. Closing as #32 has been merged in.\n. edit: I shouldn't be replying this early on a Saturday.\n. But these environment configs don't have hardcoded DB credentials. They just read the env vars which are specified in the .env file which is already Git ignored. Bedrock is designed so that if you wanted to open source your application, you shouldn't have to make any changes (by default).\n. I believe the url option also needs to be set like this:\n./vendor/bin/wp-cli core install --path=wp --url=http://example.com/wp\n. Can you provide the command you're trying and your wp-cli config?\nOn Sunday, December 29, 2013, Josh Medeski wrote:\n\nI'm on a Mac. When I set the path and url in wp-cli.local.yml in the root\nfolder, running commands leaves me with no error code or output at all.\nI'm new to wp-cli but really want to use it with Bedrock, thanks for your\nhelp!\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/roots/bedrock/issues/14#issuecomment-31328780\n.\n. I think you need http://localhost/bedrock/wp for the URL?\n\nIf the above doesn't work, can you try the direct command with options:\n./vendor/bin/wp-cli plugin list --path=wp --url=http://localhost/bedrock/wp\nRun that from the project root after you've run composer install so that ./vendor/bin/wp-cli exists.\n. @joshmedeski I'm going to do some testing myself with WP-CLI soon so I'll report back whenever that's done. But I do have one suggestion to try.\nIt seems like you have it installed \"globally\" since you're just running wp which is using wp-cli.local.yml. I'd suggest removing that wp by running which wp and then deleting that file. Something like rm /usr/bin/wp. I'd probably also delete/rename that config file to make sure it isn't picked up either.\nThen make sure composer install was run in your Bedrock/WP site root folder and try the command I posted above:\n./vendor/bin/wp-cli plugin list --path=wp --url=http://localhost/bedrock/wp\nSomeone else had an issue with their existing \"global\" install of WP conflicting with that one. Once they removed it, it all worked.\n. You could create a bash alias (or whatever shell you use) something like:\nbash\nalias wp=\"./vendor/bin/wp-cli\"\nThat would always need to be run in the root on the project though. Might be able to hardcode the absolute path so it works from anywhere but then it's specific for that project and not generic.\n. Awesome! Going to close this for now. I'm sure wp is correct if that's what Composer installed. Not sure why I thought it was wp-cli.\n. I'm going to do some testing with WP-CLI soon so just going to leave this open until then.\n. Closing this for now as I'm not sure this is needed, but some more changes regarding WP-CLI are coming soon especially with their and improved 0.4 release.\n. Thanks! Didn't realize Bitbucket behaves differently.\n. It's a good question (and a complicated one) that could definitely use some better documentation. The goal of Bedrock is to keep any environment configuration out of code which we've done by setting it up to use getenv instead of hardcoding everything. Your thought process is correct and you aren't really missing anything.\nThe tough answer is that the solution varies since it's a bit outside the scope of Bedrock so it's hard for us to bake in a default solution (so far at least). Here's the problem:\nHow do you get your .env file onto each server/environment?\n1. Easiest solution is to just create the file manually on your environments. Is this ideal? No. But it works and it's not a big deal if you have 1 staging and 1 production server.\n2. Integrate it into your server configuration management system. I'm talking about something like Chef, Puppet, Ansible etc. When you provision a server, you'll also put your .env where it belongs.\n3. Integrate it into your deployment process (maybe Capistrano). This may even tie into point 2 as well. It makes a little more sense to have it done at the server configuration level rather than deployment though.\nThe other point of confusion is still if you aren't storing configuration values in your normal app repo, then where do you store it? One good option:\n- \"Hardcoded\" in your server configs. This might sound like just shifting the problem somewhere else but at least it's in a separate private repo and there's a proper separation of concerns. This repo could be hosted on S3 for example. There's another benefit that someone could have access to the app code without knowing all your secure credentials.\n. I don't think what we're doing is that different from Laravel. I guess they just take the extra step mapping configs to machine hostnames. If we did this in Bedrock, it would only avoid setting WP_ENV. You'd still need to provide the rest of the vars in .env. Bedrock and Laravel both still have the same concept of environment configs for application configuration. Their docs don't really say much about secure credentials.\nAside: just realized basing configs of hostnames can become an issue when you have multiple app servers behind a load balancer.\n. I should note that anyone is free to fork Bedrock and just rip out the Dotenv stuff completely out and hardcode any secure credentials they want in their configs. I personally just can't promote a bad practice like that by default.\n. Closing this as it's not really a bug, and will hopefully be addressed anyway once we have Ansible/Vagrant integrated.\n. Could you remove the wp-cli stuff? You're right that uploads should have .gitkeep.\n. Thanks, makes sense (especially parent themes).\n. We could (and maybe should) leave it out of this repo because we aren't using any wildcard dependency versions so they don't need to be \"locked\" down. The minor issue is we don't want to add it to .gitignore so every contributor would have to be careful to never commit it.\n. Going to close this for now due to the reason above. May re-visit it later.\n. @benjibee your composer.lock file should always be in version control for actual project repos. See https://getcomposer.org/doc/01-basic-usage.md#composer-lock-the-lock-file\n. @QWp6t dislike removing the file or dislike that we're keeping it in Bedrock?\n. You aren't doing anything wrong. Dotenv was added right before we released Bedrock so it missed in the web server config section. I'll add it asap. This issue will also be less of a problem once the https://github.com/roots/bedrock/tree/web-folder branch is merged in.\n. Added to docs in 63d338b6b587076f110016b50b7c9b60be52ff75\n. There's really no information to go on here... it could be anything. If you'd like some help on our part I suggest letting us know what debugging you've done and the results. Such as checking server logs to see what errors are happening.\nedit: It's probably better to post on our forum as this isn't a bug.\n. That's a good point but developers on the same project should have a consistent development environment (using something like Vagrant for example). So by default I wouldn't want to have a workaround for that. Obviously Bedrock could always be forked and changed if that was someone's requirement.\n. @mAAdhaTTah I can see it both ways. Obviously it varies between environments but if that were the only criteria the env specific configs in config/environments wouldn't exist at all. Everything would just be env vars.\nBut I'm wondering about your use case... you shouldn't have to switch any config values around in this case. If you have both WP_HOME and WP_SITEURL set in dev and production configs, all you'd need to do is change your WP_ENV env var and those values would be picked up. Am I missing something?\n. Vagrant will do all the setup for you, so this could possibly wait until then.\nThere's only 1 thing I don't like to impose when it comes to development and that's their editor of choice. I don't think a development setup (for a specific site) falls into that. The goal is dev/prod parity. Ideally your development environment should be as close as possible to production. This will reduce bugs and dev time in the long run. The only way to get that parity is imposing a common dev setup.\nIf you have 5 devs working on a project all with different setups, you will quickly run into issues with things not working as expected on production (or at least longer dev time to sort it out).\n. @eastmanenator Vagrant would solve that problem if everyone on the team used it :) Same with any solution. Needs to be used consistently to be effective.\nVagrant's slogan is: Development environments made easy.\nThe idea being that if it's easy, everyone would use it since there's no excuse not to.\n. @mAAdhaTTah The provisioners would just be used to create a vhost with your dev host/domain of choice. Then it's just a matter of also setting up that host to resolve on your local machine. Vagrant has some plugins like https://github.com/cogitatio/vagrant-hostsupdater to help with this.\n. Yep, Bedrock will use that plugin (or another similar one).\n. @QWp6t that's a good point you bring up about subprocesses, and one I hadn't thought about. However, you seem to think these decisions are arbitrary only in terms of security (which may be true). There's other factors involved though. The .env solution has more going for it because it's not tied to PHP. You could source that file in Bash for instance and still have access to those env vars. Obviously this requires a library such as Dotenv, but it's a bit more flexible than simply requiring a file with PHP code in it.\n. This looks good since Dotenv strips quotes for use in PHP.\nWould you mind fixing this change to use spaces instead of tabs to match up with the source file? And no extra padding spaces in function call.\n. Thanks!\n. Thanks @kucrut. I was thinking of expanding the interactive script to include all the values as  well. I'll review this soon but it looks good overall just some minor stuff.\n. @kucrut I don't really want to get into input validation with this script. Meaning limiting DB_NAME and DB_USER to alphanumeric characters. Especially since they can contain other characters if you use backticks (in MySQL at least). May not be a best practice, but still possible.\nRemoving that check would simplify this code a lot and remove the need for the array_walk. Simple array_mapwithout passing variable by reference is another benefit.\n. @kucrut going to close this since it's been 2 months. I may make the changes myself soon and merge it in if you aren't interested.\n. Little confused about the problem. That error would definitely occur if you hadn't installed the capistrano-composer Gem yet.\nIt seems like you then installed the Gem and the problem went away? Which would make sense since the only way to  require 'capistrano/composer' would be if the Gem is installed.\nIs everything working now or is there still an error?\nedit: The 503 errors may have been some temporary problem with RubyGems.org or your connection to it. Not much we can do about that since it's not hosted by us. And the 503 errors wouldn't be related to the error while running a cap command. At that point it's just reading locally installed Gems (nothing remote).\n. You're right that it should be explained a little better in the docs. Basically the easiest way to manage RubyGems is to use Bundler. There's a Gemfile in the repo so you just have to run bundle install at that point and all the necessary Gems will be installed. It's the Ruby equivalent to Composer and composer.json.\nBundler itself is a Gem you need to install first. Ruby is a litte magical (read: confusing) so without some workarounds, you usually need to prefix any Gem command with bundle exec if you're using that method:\nbundle exec cap staging deploy for example.\nBasically that guarantees you'll be using the Gem versions specified by Bundler instead of Gems that might be installed globally on your OS.\nI'll leave this issue open until I fix up the docs to better clarify this.\n. Package/dependency managers are great but it is a little annoying that EVERY language has their own and they all work differently.\n. Added some much needed documentation about deploying!\n. The lock also needs to be updated (at least until we make a decision about its existence in this repo).\n. Thanks!\n. I'll have to do some testing because looking at the WP code, it actually should work in both app/languages AND wp/wp-content/languages: https://github.com/WordPress/WordPress/blob/1de240d5a2a14fc5274f2321a88097a5cbf10cf8/wp-includes/load.php#L753-L779\nThe languages location is actually array that can contain 4 different paths.\n. @lautreamont3 thanks for testing that. Maybe we'll just have WP_LANG_DIR set in config and let people customize it as they wish. Not sure what the default should be though.\nI actually linked the wrong code before. Here's the code which explains the behaviour we're seeing: https://github.com/WordPress/WordPress/blob/1de240d5a2a14fc5274f2321a88097a5cbf10cf8/wp-includes/load.php#L281-L312\nAnother thought I had: it would be nice to have a Composer repository for the language packs (just like WPackagist exists for plugins). Then you could add language packs as needed as dependencies separate from WP core.\n. I'll probably add that snippet from above to the config with some comments on usage. Not much we can about the plugins in the language packs though. They'll still have to be dealt with manually.\n. Looks like the problem with both those PRs were that their implementation didn't have a unique package name. With plugins for example its: wp-content/plugins/{$name} (by default) and both those implementations just had  wp-content/languages. Note the lack of /{$name}.\nA composer package needs that identifier and to be installed into it's own subdirectory. I don't see why they wouldn't add it if it correctly had name implemented.\nThose implementations seem wrong anyway. Doesn't WP load languages by their subdirectory name? Such as /app/languages/sr_RS/?\nedit: on 2nd glance, looks like I'm wrong. WP just loads <WP_LANG_DIR>/sr_RS.php directly. Correct me if I'm wrong. If WP doesn't work with subdirs then my idea wouldn't work.\n. Here's the most relevant comment: https://github.com/composer/installers/pull/112#issuecomment-31130534\nIt's actually a decent solution but would require WP_LANG_DIR to be something like app/languages/sr_RS. The major limitation is you could only ever have 1 language at a time.\nI don't really agree that a package name like lautreamont3/sr_RS is that bad. Especially with a common vendor like wpackagist-language/sr_RS.\n. @ddebernardy awesome, WP Trac is usually where good things go to die but hopefully this makes it in.\n. @onnimonni thanks for sharing this. I'll probably look into a solution like this at some point.\n. @ragulka this isn't possible right now for a few reasons. If you read this issue from the start, you'll see some discussion about using Composer for language packs. It's the ideal situation but not possible due to how WP loads languages. See this trac issue too: https://core.trac.wordpress.org/ticket/27050\n. @kraftner languages work fine in Bedrock and there's a few different suggestions above on how to get it all working.\n. @royduin we're still just letting people deal with this as they want to since there's a couple solutions. You can just add those gitignore rules yourself though.\n. The plan is to have a Vagrantfile that will enable you to run vagrant up from a new project and have everything done for you including WP install. I'd also like for it to work out of the box with a provider like Digital Ocean. So anyone can easily go from dev -> staging -> production server with the same configs.\nOur existing Chef version is here now: https://github.com/roots/wp-cookbook + https://gist.github.com/swalkinshaw/cd2a240b5cb95b41ff26.\nIt's not perfect and I think that switching to Ansible would be better for everyone. The main thing that hasn't been decided yet is how to deal with multiple sites/projects on a single Vagrant managed VM. Vagrant is easiest when it's 1 VM per project, but I understand that for lots of WP devs that would lead to a ton of redundant VMs.\n. I doubt that. I'm going to be pretty busy next 1-2 months :(\nIt will be Nginx. I'm not too interested in supporting Apache at all but I understand some people are stuck with it (or prefer it).\nI personally would like to pick one server configuration management solution only. Anyone would be welcome to maintain other versions and we may even host them under the Roots org as \"official\" ports, but that's about as far as we'd go.\nSince most SCM's like Chef, Puppet, Ansible etc are fairly *nix distro agnostic, I'd probably just roll with an official default like Ubuntu but anyone could fork Bedrock and change the base box.\nI've never used Puppet so I doubt that would end up being the official version. And if we were to move away from Chef it would probably be completely away from a Ruby based one to something simpler like Ansible.\nHere's an example of what Ansible looks like: https://github.com/ansible/ansible-examples/tree/master/wordpress-nginx\n. @lautreamont3 thanks, fixed!\n. @lautreamont3 wow only saw your comment about uploads... actually fixed now.\n. Sorry guys, I've just been doing this PR manually without testing it (not a good idea btw). Just opened the PR a bit early, but you're both right.\n@rslnk there's nothing wrong with your solution. Requiring absolute vs relative paths isn't really less elegant. Probably better in the long run and using __DIR__ is completely fine since to use Composer you need > 5.3 anyway so anything Bedrock does can (and should) take advantage of 5.3 features like namespaces too.\n. @rslnk squashed all your commits into 1 but all the work is still there :)\n. @studio4s I probably wouldn't worry about updating anything else. Not really important in the long run.\n. Running composer create-project studio4s/bedrock studio-test picks up the latest tag which Packagist syncs from GitHub if you setup that hook. Since you haven't tagged a new releases, it's taking the last one which is just normal Roots. You can get around it by running:\ncomposer create-project studio4s/bedrock studio-test dev-master\nSpecifying dev-master will get the latest version from the master branch.\n. Thanks. Actually noticed this the other day and fixed it on this branch: https://github.com/roots/bedrock/tree/installer-53-compat\nForgot about merging it so I'll do that now!\n. Fixed in #35\n. You could use git rebase to get rid of all the others. Or just re-do the PR entirely starting from a fresh fork off the latest web-folder branch.\n. @rslnk thanks, this is better. Indentation is off on the last change though if you can fix that.\n. W3 Total Cache is a mess :(\nI'm not sure the solution to this yet. I believe it also dumps an nginx.conf in your web root and modifies wp-config.php.\nI really need to get the Wiki going and a page could be added specifically for W3TC for example. However, that line in the README is technically correct as the plugin itself is contained. There's not much we can do about plugins that go outside their scope and modify files.\n. @williejackson would be nice to know if there was a supported way to stop W3TC from dumping or modifying files.\n. Closing this as it's not really an issue with Bedrock and it's been sidetracked anyway.\n. configs definitely should not be shared. They are code as well and need to\nremain atomic in case of rollbacks.\nOn Monday, March 2, 2015, E.T.Cook notifications@github.com wrote:\n\n@marshmallowcreme https://github.com/marshmallowcreme There's more to\nit than just symlinking the generated config file (which, correct me if I'm\nwrong, would still probably be considered at odds with \"12 Factor\")\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/38#issuecomment-76866296.\n. Looks good.\n. Is that your full deploy log? Change this to :debug as well and then check the output: https://github.com/roots/bedrock/blob/master/config/deploy.rb#L17\n. Does running composer work if you just SSH into your server? If it doesn't, thats something you need to solve first. If it does, could be similar to these solutions:\n\nhttp://discourse.roots.io/t/capistrano-composer-step-failure/1046\nhttp://discourse.roots.io/t/deploying-wordpress-with-capistrano-screencast/863/26?u=swalkinshaw\n. Well then you may need to update your command map to point to the absolute path of composer, or use default_env to update your path like (wherever composer is): \nruby\nset :default_env, { path: \"/usr/local/bin:$PATH\" }\nEither way, this isn't a Bedrock issue as we don't include any server configuration yet. I suggest checking into Capistrano docs/help and/or SSHKit. Or you can post in the Roots discourse forum.\n. Can you post exactly what you changed for reference? Helps if someone else comes across this issue.\n. Shouldn't have anything to do with memory. I would remove the default_env line and just go with the command map.\nPlease try with log_level set to debug and see what the output says. It should give you the exact shell command being run and you can further debug by trying to manually run it on your remote server.\n. @byrus It's executing that command on the remote server. So you need Composer installed there and the command map should reference the path on the remote server.\n. Details? Deploying with Capistrano? Web server (Nginx or Apache)? .htaccess may need to be added to linked_files if using Apache and Cap.\n. Re: themes\nConsistency is great and important but only when applied to similar things. In this case, themes are quite different than plugins so consistency isn't really needed. By default, plugins are 3rd party dependencies managed by Composer, and themes aren't. Someone may add one from Composer for a parent theme, or a multisite setup, but that shouldn't be the default convention. As always, documentation could probably be improved for these things.\n. The .gitkeep file is there to preserve a better directory structure. Git\ndoesn't keep empty directories otherwise. It's not because one folder\ncontents is git ignored and the other isn't.\nOtherwise we'd have all these refences to paths like app/themes which\nwouldn't actually exist after a git clone.\nOn Mon, Feb 24, 2014 at 1:07 PM, E.T.Cook notifications@github.com wrote:\n\nProcess wise they might be different, but architecturally within the\nsystem, they operate precisely the same way. It's a directory within app,\nthat has a gitkeep, and can have both first and third party libraries\nplaced within it. Why have the gitkeep file in there at all, then?\nRegardless, I'm just sharing my frustrations with the system because on a\nmultitude of occasions, bedrock didn't work as anticipated for me.\nThanks for everything you do.\n\nReply to this email directly or view it on GitHubhttps://github.com/roots/bedrock/pull/43#issuecomment-35915928\n.\n. Thanks!\n. Yes, it's in the .gitignore by default.\n. Closing this since I can't possibly see how Bedrock could cause this. Noticed your capistrano issue was closed too so hoping you fixed it regardless.\n. You can just comment out this line to see if it's the Composer extension: https://github.com/roots/bedrock/blob/master/Capfile#L8\n. Assuming this is meant for your fork so closing :)\n. Closing since I'm guessing this was meant for your fork.\n. @francescolaffi agreed! Just added it.\n. Going to think about this but wouldn't it better for Dotenv::required to still be outside of that file check? It just ensures they exist via $_SERVER or getenv which is helpful and not actually tied to the existence of a .env file.\n. Thought about this and it makes sense to merge it. It does have the downside of not providing the most friendly error message of .env file missing anymore, but Dotenv::required still returns a useful error message.\n\nOne minor nitpick, can you add an empty line after the conditional and before Dotenv::required? Also would be ideal if you could squash the commits into 1 :+1: \n. Requiring >= 5.3.2 was mostly just because that's what Composer requires.\nBut you're right, going with 5.4 is a no brainer and probably even 5.5. Frankly, I don't really care about shared hosts at all. Or even jokers like WPEngine (aside: they don't even say what version of PHP they run on their site but was still 5.3.2 as of ~October).\nNot sure how I feel about intentionally using newer features yet. Although like anything else, it can be forked and changed.\nOur new Ansible setup that's almost ready installs 5.5 of course :)\n. Closed via https://github.com/roots/bedrock/commit/c1521d19e9d8e2237301eba757f04e6998fe682c\n. @etcook I actually used your rewrite rules for a MS test install and they worked. But that was when I installed WP normally, then activated multisite from within wp-admin.\nI also tried a fresh install through wp core multisite-install (via WP-CLI) and couldn't get it working. Seems like there's a difference between the two install methods which might have to do with the bugs mentioned above.\n. Probably was since with a standard Bedrock install it would be:\n- home: http://example.com\n- site: http://example.com/wp\nI'll have to do more testing\n. @ddebernardy that's a lot of code! Ideally Bedrock would support MS as easily/simply as possible. And it really isn't far off from that now. In fact I think the only main issue is how WP-CLI does multisite installs from scratch. Although the \"simplest\" method requires rewrites.\nLooking forward to seeing your Composer packages though and thanks for checking :)\n. @francescolaffi wow didn't even realize it wasn't. Enabled now.\n. @zairl23 https://github.com/roots/bedrock-ansible/blob/master/roles/nginx/templates/wordpress_multisite_subdirectories.conf.j2\n. Ideally this would be built into Composer itself, but it only handles the reverse situation you want.\nComposer has require-dev and you can skip installing those packages with composer install --no-dev.\nBundler, in the Ruby world, supports groups.\n. Thanks. Probably makes sense to use the official WordPress.org zips anyway.\n. Interesting... I naively assumed they were the same. I'm guessing the 2MB is from Twentyeleven.\nI'm thinking this doesn't really change the decision. Bedrock won't see the included Akismet and no one really cares about Twenteyeleven.\n. Already merged #61 and tagged a release.\n. Thanks! Completely missed the fact that the 3.9 PR was missing the composer.lock update.\n. Your thought process would be correct, but the web/ folder should be your virtual host's document root in Apache. Then the URLs would start after web/ so you'd never see it.\n. A little more work, but I'd probably set up individual virtual hosts for each one with separate host names. Like name.wp.dev or whatever. You could add these hosts to your local /etc/hosts file so they resolve.\n. If we were to switch to another deployment solution, there's really only 2 choices (right now):\nRocketeer or Ansible. Envoy is just a remote task runner, it doesn't actually do deployments like Capistrano does. Rocketeer is basically a clone of Capistrano but in PHP. Obviously the benefit is its written in PHP.\nFor Ansible, we're already using it with bedrock-ansible and Ansible is great for deployments too. Here's an example of Cap style deploys with Ansible: https://github.com/nicolai86/ansible-rails-deployment (he's abstracted most Rails stuff out).\nI picked Capistrano to begin with because it's good, it works, and I know it.\n. @QWp6t yeah it doesn't work on Windows :frowning: \nCheck out Rocketeer if you don't want to deal with Ruby.\n. Glad to hear you're liking Bedrock :)\n1. I doubt we'd ever have this feature included by default. I understand the use case but at first thought it seems like it would be best in an extension.\n2. This is something that would probably also be an extension (separate Gem) but maybe included by default.\nI think this would actually be a fairly simple wrapper using WP-CLI. No point in duplicating a tool that already does it well. It has import and export (http://wp-cli.org/commands/db/) and search-replace too (http://wp-cli.org/commands/search-replace/).\n. Just closing this as it's discussion. Can be carried on here http://discourse.roots.io/.\n. I can test this later but I don't think this is correct. My guess is that you have trailing slashes on URLs in your .env file?\n. @Jan1337z can't merge them unfortunately. Thanks for the PR!\n. Thanks!\n. I've noticed this pre-Bedrock that enqueue_scripts and enqueue_styles includes the site url again. I assume you've experienced this with other plugins too?\n. Salts are a weird topic... you don't even really need them in development/staging. WordPress will generate them if they're missing anyway. Although without testing I'm not really sure what happens when you don't set them as the getenv calls would just return FALSE. I'm guessing WP would still function fine.\nI'm starting to think the Composer script for generating salts isn't the proper solution anyway. Using a solution through server config management is much better like we do in bedrock-ansible.\n. WP's fallback involves storing them in the DB and checking them on every request which obviously you want to avoid in production. So that's really the only environment where you'd want/need them in the config.\n(this is all going off memory from looking into this a while ago)\n. @AlexanderRitola just to confirm, are you saying that there's differences between:\n1. Just manually putting twentyfourteen in app/themes\n2. Adding wpackagist-theme/twentyfourteen and running composer install\nDo you end up with a app/themes/twentyfourteen directory in both cases?\n. What does your composer.json file look like? Does it have this line: https://github.com/roots/bedrock/blob/master/composer.json#L68\nI just tested by adding \"wpackagist-theme/twentyfourteen\" : \"*\" under require and it correctly put the theme under app/themes/twentyfourteen.\nI'm talking about the actual location in your file path for now, not just the URLs output by WP.\n. Check out https://github.com/CHH/heroku-buildpack-php/pull/134\n. Going to close this though since it's not something I use. And I'm not this sure this would be part of the Bedrock repo anyway? I'd welcome a PR or documentation on it.\n. The README says:\n\nSet your Nginx or Apache vhost to /path/to/site/web/ (/path/to/site/current/web/ if using Capistrano)\n\npublic_html/ won't work if you're using Capistrano.\n. @Pier-Philip you could re-write that a little nicer:\nruby\ntask :link_release_to_public do\n    on roles(:app) do\n        within \"/full/path/to/dir\" do\n            execute \"rm -rf public_html && ln -sf #{current_path}/web public_html\"\n        end\n    end \nend\nUsing ~ isn't the best practice with Capistrano. Better to be explicit.\n. Makes sense. Thanks!\n. I added a feedback issue on your repo: https://github.com/lavmeiker/capistrano-wpcli/issues/2\n. Gonna try and test your gem out before integrating it by default. But for now you could open another PR with just a section added to the README if you want about db syncing using your gem.\n. Do you get the directory listing going straight through to Apache (on port 8081 bypassing Nginx)? If so, then you've narrowed it down to Nginx. If not, it's Nginx.\nEither way, this isn't really a Bedrock issue.\n. Not a Bedrock issue.\nhttps://groups.google.com/forum/#!topic/capistrano/554ehbCE45o for example\n. We won't be adding this since it's probably not likely many users would need it. However, it would be useful to have this documented somewhere. Feel free to create a Wiki page with it if you want.\n. Yes, composer install is run automatically since the extension is included in the Capfile: https://github.com/roots/bedrock/blob/master/Capfile#L8\nI suggest changing log_level to debug: https://github.com/roots/bedrock/blob/master/config/deploy.rb#L17\nFeel free to paste your deploy log here.\n. This could depend on when a person last updated Gems but it did remind me to bump some Gem versions and re-generate the Gemfile.lock file so it shouldn't happen right now anymore.\n. B should be correct but looks like the Composer documentation isn't great for this feature. See:\nhttp://stackoverflow.com/questions/16299713/composer-create-project-fails-on-local-package-repository\nhttps://github.com/composer/composer/pull/1899\nBasically you'll need to create a local packages.json somewhere that defines your fork and then use that packages.json as the --repository-url\n. Was it an existing site that was upgraded? If so, could be the database wasn't upgraded too?\n. Could be. You could try changing to the regular http://wordpress.org/latest.zip.\n. This could be related to https://github.com/roots/bedrock/issues/92?\n. @Jan1337z or @sebastiaandegeus any problem with this still? Especially if you're using WP 4.0.\n. I'd be interested in knowing if this happens on a \"normal\" non-Bedrock WP install as well.\n. I think that used to come from the default Capistrano templates but I don't even know anymore.\nThanks!\n. Pretty sure it only exists for themes.\n. I don't like the idea of developers implementing Bedrock specific code and I'm not sure it's needed either unless you can give me some examples.\nThe custom paths are all supported due to the built-in WP constants that allow them to be changed. If theme/plugin developers are properly using the constructs WP provides, then there shouldn't be any issues when using Bedrock or any other setup.\n. I mean I'm open to anything that has use cases. I still just can't see any situations where this is needed. Do you have any specifics?\nWhat filepaths are you trying to construct and why?\nedit: web/ shouldn't exist in URLs also since it should be included in your webserver's vhost web root.\n. I just created a new release which will automatically fix this (within about 15 minutes): https://github.com/roots/bedrock/releases/tag/1.2.5\ncreate-project uses latest release version from Packagist which syncs with this repo.\n. I really have no idea based on this information. I doubt this is an issue with Bedrock itself but if you find otherwise feel free to re-open this.\n. .env is only loaded by using the Dotenv library and actually loading the file so it would never be picked by Composer. I don't really know the best case to handle this. If everyone is using the same license key and it's a private repo, I'd probably just commit it straight in composer.json.\n. I appreciate the good discussion here, but our forum is probably a better place to talk about this if you want a real conversation.\n. Decided I wanted some different formatting for this so it's been added in 2088163.\n. Oh a long time. They aren't anything new but they're very useful!\n. Yeah I meant it's been in WP-CLI for a long time.\n. @peec sorry for the delay on this. This looks like a good language solution but there's a few others I'm trying to decide between still.\n. Still not 100% sure on what solution we'll go with but http://languages.koodimonni.fi/ is looking like the better choice as it's an external package.\n. Here too: https://github.com/etcook/bedrock/blob/master/composer.json#L59\n. Probably fine. Guessing newer versions of Composer set that by default.\n. No, thank you!\n. This is a bit confusing to me. Can you share an example of what your theme is before/after? Do you mean the path in wp_options table somewhere?\n. Are you using Apache or Nginx?\n. Interesting that this hasn't come up before. WP does some complicated stuff to do with theme and template directories. It seems like this is only triggered if you have multiple theme directories (which Bedrock does by default). I always remove https://github.com/roots/bedrock/blob/master/web/app/mu-plugins/register-theme-directory.php which means this wouldn't happen.\nSee here for example: https://github.com/WordPress/WordPress/blob/666fec5144eb3f7df7ee08e345a2e11db4d292ee/wp-includes/theme.php#L604-L627\nThis will probably take more debugging. One interim solution would be to include a WP-CLI command during the cap deploy process.\nSomething like:\n``` ruby\nnamespace :deploy do\n  task :update_options do\n    on roles(:app) do\n      within fetch(:current_path) do\n        execute :wp, :option, :set, fetch(:release_path).join('subdir/to/themes')\n      end\n    end\n  end\nend\nafter 'deploy:publishing', 'update_options'\n``\n. That's because I was missing thewithinblock so it wasn't running in that directory to pick up thewp.yml` file. Try again with the edited code above.\n. @grahamharper see my other solution here: https://github.com/roots/bedrock/pull/101#issuecomment-56288274\n. I'm not sure anything is needed in Bedrock.\nThere's settings like:\nphp\ndefine('FORCE_SSL_ADMIN', true);\ndefine('FORCE_SSL_LOGIN', true);\nadd_filter('force_ssl' , '__return_true');\nBut can't you just let your webserver take care of this? I'd rather keep the configuration/redirects in Nginx or Apache than in WordPress. Especially since if you want to force SSL and be secure you should be setting HSTS headers properly.\n. Not exactly sure how WP decides how to output assets, but you need to set headers like X-Forwarded-Proto so backends know what the request protocol was. Nginx example below:\nnginx\nproxy_set_header X-Forwarded-Proto $scheme\n. But of course WordPress doesn't check this header. See: https://github.com/WordPress/WordPress/blob/666fec5144eb3f7df7ee08e345a2e11db4d292ee/wp-includes/functions.php#L3492-L3502\nhttp://amal.net/?p=3991\n. More options: http://trick77.com/2012/12/01/prevent-ssl-redirect-loop-using-wordpress-and-haproxy/\n. And the Trac ticket: https://core.trac.wordpress.org/timeline?from=2012-04-30T00%3A11%3A56Z&precision=second\nhttps://core.trac.wordpress.org/timeline?from=2010-12-08T15%3A43%3A43Z&precision=second\n. @rstormsf we recently moved roots.io to SSL and the only two configuration changes in WP we needed were:\nphp\ndefine('FORCE_SSL_ADMIN', true);\ndefine('FORCE_SSL_LOGIN', true);\nWe don't have the filter and haven't see any issues. Wouldn't hurt to add it as well though just in case.\n. That filter doesn't even exist in WP (master) anyway.\n. Think you could wrap the execute with a test like:\nruby\nif test :wp, :core, 'is-installed'\n  execute :wp, :option, :set, :template_root, fetch(:release_path).join('web/wp/wp-content/themes')\nend\n. @liviucmg could you also set stylesheet_root?\nruby\nif test :wp, :core, 'is-installed'\n  [:stylesheet_root, :template_root].each do |option|\n    execute :wp, :option, :set, option, fetch(:release_path).join('web/wp/wp-content/themes')\n  end\nend\nThe task name should also be more descriptive like update_option_paths.\n. @BrandonShutter has composer install been run? It won't exist otherwise. And this code should be running after the Composer extension.\n. @BrandonShutter depends on your Capfile. See https://github.com/roots/bedrock/blob/master/Capfile#L8\nIncluding that will automatically run composer install via https://github.com/capistrano/composer/blob/master/lib/capistrano/tasks/composer.rake#L60\n. @liviucmg sorry for the delay on this. Was kind of hoping this wouldn't be needed but don't see another solution right now.\nI made 2 small comments. Once those are done can you squash the commits? Then it's ready to merge.\n. @liviucmg are you able to squash the commits into 1 as well?\n. @liviucmg thanks a lot :+1: \n. https://github.com/roots/bedrock/issues/67\n. Fixed by https://github.com/roots/bedrock/pull/104\n. This came up somewhere else before, maybe our forums, so this is a good change :+1: \n. You can always just delete your composer.lock file and run composer install again.\n. So this is to have ENV vars accessible in Capistrano stage configs like config/deploy/staging.rb?\nIf that's the case, there's a couple reasons I don't really like this:\n1. .env file should really be for the WP application, not for deployment. Since in production, there is no deployment for example.\n2. Ideally you use ssh keys or ssh forwarding agent to avoid having to hardcode passwords.\n. If your deploy isn't properly pulling down your entire Git repo then something weird is going on. Not even sure how Capistrano itself could be blamed for that. #1 rule with Cap debugging is to set your log level to debug and it will output all the commands it runs. Then you can manually run those commands on the server and see what happens. If you try to run the clone/archive commands from Git and you see the same problems, then you'll know it's not Capistrano itself.\n. @BrandonShutter I know you've commented in https://github.com/roots/bedrock/pull/101 but could this issue be related? Either way, this doesn't really seem like a Bedrock/Capistrano issue. Might be something with bedrock-ansible though. I'm also a bit confused the few different issues you seem to be having. If you want to compile what's going on with each and post on our Discourse then it might be easier to help.\n. @christiansherry can you rebase this please? I think it makes sense to merge it.\nI agree that mu-plugins should be loaded before other plugins to maintain the expected order.\n. @christiansherry no that made it worse :)\nI think you can do this:\ngit rebase -i HEAD~19\nAnd then delete every line except for your \"Update bedrock-autoloader.php\" commit to get rid of them. Then git push -f\n. @christiansherry of course, I think I can do it where the commit is still under your name as well.\n. Merged manually in a0488cb1d23b9c1f2e1b96377b54c093579f4d4b\n. @christiansherry good catch, just updated it.\n. There's ton of other changes needed to be PSR compliant but that's a bigger discussion. I'm in favour of this change on its own at least.\n. Could you rebase this so it be merged cleanly again?\n. Thanks!\n. See https://github.com/squizlabs/PHP_CodeSniffer/pull/42. With these changes you'd actually get the error:\n\n13 | ERROR | Expected 1 blank line at end of file; 2 found\n\nWhen running PHP_CodeSniffer.\nedit: the PSR-2 docs are still really confusing about this.\n. Capistrano automatically sets up sym links for files under linked_files. See here https://github.com/roots/bedrock/blob/master/config/deploy.rb#L19\nDoes that line exist in your config?\n. I updated the Gist. Really need to do a real screencast on Bedrock itself though.\n. We've talked about it many times but kind of just forgotten until lately.\nSee https://github.com/roots/bedrock/pull/119\n. Closed via d4fc566ec3461648429a3399860d4f66340c273c\n. We're leaving this at 5.4 by default. 5.3 reached it's end of life and we're trying to promote people using newer version of PHP. Even 5.4 is old at this point.\nAnyone can manually change it if they need to.\n. @DamonGant PHP 5.3 is end of life. I can't think of a better reason than that. In fact 5.4 is only getting security updates for another 3 months. So on September 14th we'll probably be bumping this to 5.5 as well.\n. Good catch, thanks.\n. Looks good, thanks!\n. These are some good points. There's a couple options:\n1. Leave it the way it is. It's only a default after all (we can make a comment about it).\n2. Enable in production.php only.\nI guess this doesn't bother me much because I'm used to manually checking for versions (or using semantic versioning) with every other package manager/language.\n. @fabschurt I mostly agree with you. I'm used to using Rails + Bundler and nothing notifies me about Gem updates.\nUnfortunately Composer is missing an outdated command that other package managers like npm have.\nAnd while the purpose of Bedrock is to make it more like an application framework, I do think we need to consider what WP offers by default when dropping features. For example, with Symfony it's fine to not have this feature because it obviously never/couldn't exist. There's no single \"admin\". But for WordPress, it did exist and we're removing it.\nI think the compromise is to disable this in production.php and keep the other settings in application.php.\n. @fabschurt you want to handle the new PR? I'm thinking application.php should stay is (pre-PR/after revert) and just add define('DISALLOW_FILE_MODS', true); to production.php. And what about staging.php?\nedit: my vote is to treat them the same\n. @fabschurt I'll update the README at some point too, but I think we should add a comment after these says explaining what they disable since the constant name isn't too descriptive. It's not obvious that you won't see update notifications for example.\nMaybe just: // this disables all file modifications including updates and update notifications\n. :+1: \n. Thanks @rstormsf. I think this is a little more relevant on bedrock-ansible but maybe you can share it on http://discourse.roots.io/.\n. That sentence is referring to the WP Admin plugin page. The README already contains an example of overriding a specific plugin in your composer.json to make it an mu-plugin.\n. You would do:\njs\n\"web/app/mu-plugins/{$name}/\": [\"type:wordpress-muplugin\", \"roots/soil\", \"mysite/plugin\"]\nAnd this is only necessary if mysite/plugin has its package type set to wordpress-plugin. If it's wordpress-muplugin then you don't have to do anything.\n. Correct! Some packages on WPackagist might have it too although I doubt it (it would be rare anyway).\n. @fagiani if you have any suggestions/improvements, you can propose them on our docs repo: https://github.com/roots/docs. @thewunder I'm fine with ~ for the non WP packages if you want to update this.\n. @thewunder sorry kind of forgot about this. Would you be able to rebase it so it can be merged?\n. Thanks!\n. See https://github.com/roots/bedrock-ansible/issues/125. This isn't a Bedrock issue anyway.\n. @rstormsf see https://github.com/zendtech/ZendOptimizerPlus/issues/126#issuecomment-24020445\n. @teohhanhui would be nice if you could try and isolate which one is needed. Maybe create an issue at the bedrock-ansible project?\n. :+1: \n. Thanks :+1: \n. Good catch, thanks\n. We set a default to wp_ if DB_PREFIX env var isn't set: https://github.com/roots/bedrock/blob/43b734afbecb54b882fafe923dba7960529e2275/config/application.php#L38\nMake sure that line is in your config.\n. We're going to be switching to Ansible deploys at some point in the future. See https://github.com/roots/bedrock-ansible/pull/95\n. Can't imagine what in Bedrock would cause this and we can't reproduce it anyway so closing the issue.\n. I'll probably think more about this, but for now my one thought is that is reduces \"grepability\" a bit since you'd no longer have any explicit code with it being set.\n. Going to pass on this idea @mrobit but thanks for bringing it up. I'd rather have it explicit and clear.\n. @aaemnnosttv I get what you're saying and like usual we didn't really think of multisite. Maybe @Foxaii can chime in since this was his suggestion.\nOne of my problems with your proposal is the zz prefix naming. You get into this problem where someone could have a plugin that starts with zzz for example. Obviously rare, but it could happen.\nReally annoying that WP doesn't have 2 distinct actions for muplugins and network ones.\n. It's definitely better than an alphabetical prefix. I'd like to confirm it works on Windows with no issue as well (assuming you didn't test on it).\nI think regardless of the solution we need to have some more clear docs in the README showing the usual plugin load order and where the autoloader fits into that.\n. @francescolaffi I seem to keep going back and forth on this, but I'm leaning towards what you said and keeping it as is. Obviously the autoloader is no different than the current plugin loading process right now.\n. Keeping this as is.\n. @kix there's another occurrence in config/application.php if you want to update that as well.\n. @kix ping\n. Thanks!\n. I'm confused what you mean by \"SQL install script\". If you could elaborate that would be appreciated.\nI'm closing this since it isn't an \"issue\" but you can still reply.\n. WordPress takes care of this during it's install process. You need to create the database first but it will create all the tables. Once the site is setup you just go to http://example.com/wp and WP will take over from there.\n. Just a note that we might be adding (or suggesting) via Composer a library/package which takes care of this. It's a better place to add this functionality vs in a config file.\n. Thanks for this. But we've since changed the URLs a bit.\nCould you update them to https://roots.io/bedrock/ and https://roots.io?\n. Thanks!\n. I don't think you need to be worried about anything.\nbedrock-ansible will always be a separate project and there's no way for it to ever really be a \"dependency\". Even now with Capistrano there's nothing in the actual Bedrock \"code\" related to Capistrano. It just has its own set of files (Gemfile, Capfile, configs).\nIf/when Capistrano is removed, those files will just be moved into its own repo so they won't go away completely. There will just be a section in the README about provisioning servers and deploys which will link to it.\nThe same goes for any other server management software (Chef, Puppet, etc). Since there won't be anything in this repo to do with Ansible (other than the README), there really is no dependency anyway.\n. This repo/bedrock-ansible kind of recommends Batcache but that's mostly because it's straight forward and most important of all, NOT W3TC or Super Cache.\n@alexciarlillo funny because I also found the instructions for Batcache confusing and lacking. Even more confusing is that you should use the memcached PECL extension (note the d) and not memcache extension.\nOn Ubuntu this means installing php5-memcached instead of php5-memcache.\nThis also means you need to use https://github.com/tollmanz/wordpress-pecl-memcached-object-cache instead of the normal https://wordpress.org/plugins/memcached/ one.\nAside: that well known memcached one also has bugs that have been fixed over a year ago yet not released to the plugin directory. See the latest two commits by nacin here: https://plugins.trac.wordpress.org/log/memcached/ (WP is a cesspool)\nWe use Batcache on https://roots.io and ended up just committing both object-cache.php and advanced-cache.php to our repo which almost kills me :(\nOne possible alternative is to use https://github.com/Koodimonni/Composer-Dropin-Installer but I don't trust it enough completely yet. Also not entirely sure how I feel about the solution overall. It's kind of just abusing the power of Composer.\nDownsides of Batcache: yes it auto purges during \"normal\" operations like creating a post, updating a page, etc. But there are a ton of cases it doesn't cover which means you'll 100% have to end up clearing memcache on every deploy. This kills me a little inside as well.\nAfter all the downsives I've talked about above, it's probably better to just use Nginx or Varnish cache. There's a plugin that purges Varnish caches which I've never tried: https://wordpress.org/plugins/varnish-http-purge/\n. @etcook that's pretty much what https://github.com/Koodimonni/Composer-Dropin-Installer does I believe. I just don't love the idea of moving around individual files but I guess it can't be worse than committing the files.\n. @etcook you'd commit them I assume? not a bad compromise.\n. @alexciarlillo just to be clear, I didn't say it was a requirement. It's just the better method.\nYou can still use Batcache + php5-memcache + https://wordpress.org/plugins/memcached/ (assuming you use the trunk version)\n. @cmosguy yes as mentioned above. Use Batcache, Nginx caching, Varnish, or anything not like the normal WP plugins (W3TC, Supercache, etc).\n. @austenc right now I'd be willing to add a link to it in the README (or start a Wiki page on deploys and link that too).\nAt some point we might be open to moving it under our org but I don't want to commit to supporting just yet since none of us use it.\n. Closed by https://github.com/roots/bedrock/pull/163\n. Closing this as it's on the wrong repo. But a few things:\n1. http://serverfault.com/questions/58052/what-is-sensible-mda-and-do-i-need-it\n2. Don't think that \"tables open\" is really a problem\n3. Start a thread on Discourse about re-provisioning when we make updates\n. I'm guessing your .env file has some incorrect settings. It should look like:\nini\nWP_HOME=http://wordpress.dev\nWP_SITEURL=http://wordpress.dev/wp\nClosing this as it's more support and not a bug. If you need further help: https://discourse.roots.io/\n. The built-in server is awesome for quick stuff but we try and recommend dev/prod parity by using the same web server across environments (see https://github.com/roots/bedrock-ansible).\nI'd like to get the Wiki going with some topics so that would be a good place to document this.\nAnd thanks for posting the solution :+1: \n. @QWp6t environment files are loaded before anything else.\n. Right now we just kind of punt on it and mention it in the README:\n\nNote: You can't re-define constants in PHP. So if you have a base setting in application.php and want to override it in production.php for example, you have a few options:\nRemove the base option and be sure to define it in every environment it's needed\nOnly define the constant in application.php if it isn't already defined.\n\nJust not sure about namespacing the config and providing on our define.\nGoing to merge this as is for now and we can thin about your solution separately.\n. I'd rather not change DB_NAME since it matches up with the WP constant for consistency.\nIs this actually a default built into Docker or just some 3rd party Docker image/Dockerfile?\n. Thanks!\n. This isn't really an issue with Bedrock itself. That plugin seems to make assumptions about the type of WordPress install you have.\nIt seems like it wouldn't work with any WP subdirectory install and not just Bedrock specifically.\n. This is the responsibility of WordPress to release new versions. If a bundled theme contains a vulnerability then they need to fix that.\nPeople can always manually apply fixes until then.\n. @reiz thanks but I had to remove this for now. The badge takes forever to load and the GitHub proxy just times out resulting in a broken image.\n. Also there's nothing to do with wp_cache in the autoloader plugin. The autoloader will work perfectly fine on a \"normal\" WP server/host. WPEngine does some non-standard things to make their \"magic\" happen and they don't really explain too much about what's going on in that process. Something is obviously conflicting with this but that's on their end.\n. Thanks!\n. @etcook yeah unfortunately https://api.wordpress.org/secret-key/1.1/salt/ generates the PHP code. We should probably just create a simple Composer package or WP CLI plugin or something to generate these. I think it's useful just don't think it belongs in Bedrock.\n. Found this: https://github.com/sebastiaandegeus/wp-cli-salts-command/pull/3\n. @aaemnnosttv awesome :+1: \n. Browsing to /wp/wp-admin isn't a \"workaround\". It's just the proper URL.\nWe might be open to a PR which adds the rewrites but this would be done on https://github.com/roots/bedrock-ansible repo anyway.\n. https://github.com/roots/bedrock/blob/master/.env.example\n. Are you talking about bedrock-ansible?\nIf so this issue belongs over here -> https://github.com/roots/bedrock-ansible\n. What's the exact error? .env file itself seems fine so it might a Windows/WAMP thing but I have no experience with those.\nRegardless, not an actual bug so I'm closing this.\n. Rules for files like this belong in your own personal global gitignore. See https://help.github.com/articles/ignoring-files/#create-a-global-gitignore\n. @louim I agree with your point but I'm not sure that Dotenv should be responsible for enforcing general ENV vars. After all the library is specifically for loading .env files. If a .env file doesn't exist, should Dotenv even be used for anything else?\n:+1: to @QWp6t's suggestion as well.\n. Merging this for now until we get a better fix.\n. Thanks!\n. @jumbojett I realize this solves a problem you're having but it seems a little specific to your development environment in Cloud9 and I don't want to add this by default for everyone when I'm not sure what other side-effects it could have.\n. Not a Bedrock issue. Your local PHP install is using the mysql extension instead of mysqli or PDO as the error says.\n. If you're getting a blank screen then you're getting a PHP error. You'll need to figure out how to properly display those errors or find your error logs and fix the problem.\nSince you don't know the error there's nothing we can do to help unfortunately. Closing since this is a setup issue and not a Bedrock bug.\n. I'm 99% sure that error is because of an older PHP version. You see that error when a PHP error doesn't support the short array syntax.\nYour php -v shows 5.6.12 which should work but that's for CLI if you notice. Maybe your web server is running an older version? Try outputting phpinfo();.\n. party right now\n. I think this does make more sense. The entire point of these git ignore rules is to ignore directories that are managed by package managers (Composer). And you're right that the root of mu-plugins/ doesn't fit that criteria.\n. @retlehs no need for that doc anymore\n. We're well aware of that but frankly we don't think it really matters. The original (I believe?) dotenv library was for Ruby https://github.com/bkeepers/dotenv. It also started as development only but you can read more about it on that repo about how it's expanded a bit.\nIt's more difficult to get proper env vars exposed through a web server to PHP so Dotenv is even more useful in PHP than other languages.\nThe overhead of loading and parsing a single simple file is negligible when you consider how many files WP loads on every single request.\n. Good catch. Thanks :)\n. My only concern with this was if it would still work fine in Bash. The nice benefit of .env files is that you can just evaluate them in your shell and the variables get set as normal env vars.\nBut WP_SITEURL=${WP_HOME}/wp is valid Bash as well and it just worked for me so I don't mind this.\n. That file is a WP core file which Bedrock just loads directly. Not exactly sure the cause of this but I can confidently say it's not Bedrock :)\n. Thanks!\n. @leanderlindahl documentation can always be improved, but in this I don't see anything you've missed.\nIf you can get to my.site.dev/wp/wp-admin/install.php but then the install doesn't work due to a bad DB connection then something must be wrong with your DB/the credentials you used.\n. We could potentially add a filter for it. But why not just delete the file? You could also add another action to override ours with higher priority.\n. Closing this since it's non-standard and the solution that @ocasta posted is fine.\n. @dvorakluk just had one more minor comment. Would you be able to squash the commits into 1 if possible?\n. Thanks!\n. Think we're just going to use https://github.com/oscarotero/env and let it take care of this.\n. @ideadapt thanks, updated.\n. I don't really disagree with this. I guess it is \"nicer\" to have uploads outside of app/ but at the time I don't know if it's worth it. This will sound funny since Bedrock does a ton of things to customize WP, but in general it's still better to keep the defaults when you can.\nRoots/Sage used to have a custom uploads path to /media and it caused issues.\n. Thanks for pointing this out. Fixed in 9b5ffe83efcad892fabdc9dc8f763fa11cf7725c\n. Should note that you can fix this locally by just running composer update.\n. @jamesgol thanks for bringing this up. It led to us talking about our current usage of Dotenv and we realized that we should move away from it.\nThe .env file has one main purpose: it keeps your \"secrets\" in a separate file out of version control. But this comes with downsides: 1) exposes things to phpinfo, and more importantly, 2) exposes the env vars to any child processes.\nIn our case, there's no actual reason to use real environment variables. We just need a simpler way of setting variables for use in config files.\nWe're pretty sure we're going to switch to an ini file in the future since PHP has parse_init built-in. Because of this, I'm going to close this PR.\n. @donaldallen kind of. See here: https://github.com/bkeepers/dotenv#multiple-rails-environments\n. Closing this since there isn't a pressing need for it anyway. Bedrock is stable as is.. Thanks for bringing this up. It's been fixed upstream though in https://github.com/outlandishideas/wpackagist/issues/138. And fixed in Bedrock by https://github.com/roots/bedrock/commit/48999fe6f452b57a7012444811aa1a9fc13e6669\n. See https://roots.io/improving-wordpress-passwords-security/ for more background on this.\n. :+1: thanks.\n. Right now the documentation around webserver configuration for Bedrock is pretty sparse. We briefly mention it here https://roots.io/bedrock/docs/installing-bedrock/.\nWe could add a separate page with snippets for Nginx, Apache, and IIS as well.\nWould you be interested in doing a PR for this on our docs repo? We could help fill out the  Nginx or Apache sections if you aren't as familiar with them.\n. I agree it's nicer but that salt generator should probably not be used (for production purposes). It uses a JavaScript function and Math.random which is not cryptographically secure. See http://stackoverflow.com/questions/5651789/is-math-random-cryptographically-secure for example.\n. We've updated this to an improved version on roots.io in https://github.com/roots/bedrock/commit/43ff1ed14706a5af0c486d5ab6356f40df8b1589.\n@vinkla I have no idea what the WP page uses. I'm sure it's done in PHP.\n. From https://github.com/roots/bedrock/pull/251:\n\nI think this should be a separate plugin/package. Although the problem happens with Bedrock, it's a WP but not a Bedrock one.\nIf this was a standalone package, Bedrock could require or at least recommend it.. Thanks for sharing this @felixarntz. Just wanted to reply that I'm not sure if we want to provide extra code in Bedrock to fix this yet.\n\nI'll leave this open for the time being but it would also need testing and hopefully other people who have more Multisite experience than me can chime in as well.\n. I don't have enough multisite experience to merge this without knowing the implications yet.\nBut this PR also won't be merged regardless until it passes our coding standards (see CI failures for details).\n. I think this should be a separate plugin/package. Although the problem happens with Bedrock, it's a WP but not a Bedrock one.\nIf this was a standalone package, Bedrock could require or at least recommend it.. You edit this line or just remove it.\nedit: you should basically always be running a \"fork\" of Bedrock. It's a boilerplate project that you should customize.\n. @aaemnnosttv no, it looks good. Haven't had a chance to actually test it out.\n/cc @Foxaii \n. Not sure exactly what was going on in your case and what the problem was, but even if you wanted some functionality like this in an mu-plugin it's not something that should be included in Bedrock by default.\nBedrock shouldn't have specific code to integrate with other Roots projects. And this is Soil specific. Not default WP behaviour.\n. Do you want to add:\n- .editorconfig\n- phpcs.xml\n- .travis.yml\n- .env.example\nThose should all be excluded. CHANGELOG, README, and LICENSE should stay.\n. @shaneog good point, let's keep it\n. Thanks!\n. @DanielDent I think this is something that belongs on the Wiki instead. We don't want to include files for people who might fork it and run tests on another CI service.\nFeel free to create a Wiki page (\"CI configuration\" or something) if you want.\n. I don't really understand this change. bin without the trailing slash properly ignores the entire bin directory in the root of the repo.\nIf I'm missing something please let me know.\n. Thanks, we can always update this in the docs as well.\n. I like the spirit behind this PR since I'm a fan of organization, but I don't think the config is the best place for it.\nThere's definitely \"sections\" to the config so I can see why you'd want to separate them out. But Bedrock already has 1 level of indirection with wp-config.php and I don't really want to add another one.\nI'm all in favour of users just including/requiring additional config files as they see fit though.\nA lot of the concepts behind Bedrock come from Rails. In Rails for example, there's config/application.rb and then the same environments files that Bedrock has. Rails then has \"initializers\" in config/initializers which act like the modules you introduced here. mu-plugins are kind of analogous to them.\nI've actually seen another WP project like Bedrock that has config/initializers. While I probably wouldn't add them to Bedrock itself, I think this pattern of \"module\" files fits better in that concept than for the config file.\n. Well I wouldn't compare this to what Sage 9 is doing. Different projects, contexts, etc. Also I don't really like what's needed to make that template folder work either :)\nI agree this does help with customization and extensibility but it doesn't solve it either. I also don't really like the number prefix to enforce include order (but I realize there's no other solution for that).\nAnyway, if this is merged it won't be right away. Need to sit on it for a bit either way.\n. I doubt it can be solved completely. I just meant that these configs would definitely make upgrades easier, but conflicts could still easily happen.\n. @aaemnnosttv I took another look at this recently and we're going to pass on it. Thanks for proposing it. I just don't think there's enough benefit at this point to warrant the change.. What's the use case for this? The idea behind config settings with env vars are:\n1. They are \"secret\" and shouldn't be committed\n2. They vary between environment\nThese definitely aren't secrets and they really shouldn't differ per environment. It could easily lead to issues if they did.\n. Documentation around utf8mb4 specifically? utf8mb4 should the default nowadays and even WP upgrades when its available.\n. Yeah I'm going to close this in its current state for the reasons mentioned above.\n. @Foxaii \n. Closing this as @Foxaii's last comment makes it clear that this doesn't solve the actual problem.. I think the idea behind this was that a lot of people were trying out Bedrock/Trellis on development first, and potentially only using them for that purpose so this default reduced a potential extra config setting people had to remember to set.\nProbably a good thing to change it though \ud83d\udc4d \n. Sounds like that plugin is at fault. If you check your error messages maybe you can report the bug to them. Bedrock uses standard WP methods for customization, so if a plugin is not compatible, then they are doing something wrong.. Closing since there hasn't been any more occurrences or details. Feel free to re-open this if you've done more investigation.. We committed an empty vendor/ dir just to make the repo a bit simpler to understand for newcomers to Composer/dependency management. Since we make references to vendor, it could be confusing when it doesn't exist at first.\nIt has also never been a problem for 2+ years until now. I don't feel too strongly about keeping it at this point, but also find it weird that Envoyer has a problem with it.. Makes sense. Thanks \ud83d\udc4d . Yes. See their installation docs: http://wp-cli.org/#installing. WP-CLI recommends using the global phar installation method which is why we removed it. Bedrock isn't dependent on it at all, we just include a config file to make integration easier.. Yes it's fixable by the plugin, not by us. They are doing things the wrong way.. \ud83d\udc4d . We usually prefer exact versions but if composer itself is going to recommend against it then maybe we should change it.\nRegardless of that, this PR would need updates composer.lock as well since the composer/installers version was changed.. Took care of composer/installers in https://github.com/roots/bedrock/pull/306.\nStill not sure about WP constraints.. Thanks \ud83d\udc4f . There's like 4 changes in here...\n\nI'm not sure we want to test on HHVM.\nNightly should still be allowed to fail\nAllow fast failures seemed like a good thing that was removed?\nXdebug fix: good \ud83d\udc4d . Perfect, thanks \ud83d\udc4d . This can't really be a Bedrock issue itself. Either an environment thing or an upstream issue with Dotenv (although I doubt that).. It's not that easy unfortunately.\n\nThere are references to web/ in composer.json which can't be done dynamically. wp-cli.yml has a reference as well but that's less important.. I'm going to close this since it would require manual modifications anyway which people are free to do currently. .gitignore is another place for example.\nMaybe a doc page on switching the webroot would be useful. PRs can be done at https://github.com/roots/docs. Not really to relax these version constraints as @QWp6t mentioned. Agreed but unfortunately I don't think it's possible :(\nThe autoloader is needed so that mu-plugins via Composer work, so it can't be a package itself. And it could be a normal plugin, but we only use Composer to manage plugins in Bedrock.. There's already a PR open about this: https://github.com/roots/bedrock/pull/290. As discussed in that thread, the only things in the .gitignore by default are folders which are managed by Composer.\nSince languages don't fit into that, they aren't ignored.. Yeah and if that was our official recommendation. I just don't have enough experience with it and other members of Roots don't use languages much.. Not sure we can do this by default. Plugins could easily rely on it? bcrypt is seamless so that's different.. Ditto. This isn't directly an issue with Bedrock. But anyone who wants more information and solutions can read this: https://discourse.roots.io/t/johnpbloch-wordpress-moved-to-a-new-configuration-and-wp-goes-missing/9124/1\nGenerally the solution is:\n```bash\ncomposer remove johnpbloch/wordpress\ncomposer clear-cache\ncomposer require johnpbloch/wordpress:4.7.3\n``. This was purposely left out (of gitattributes) along with theREADME. We think those two files are valuable and should always exist.. Works, thanks!. Note: this is **not** an actual WordPress version. It's a version from thejohnpbloch/wordpress` composer package which fixed how its releases get done.\nMore details here: https://github.com/johnpbloch/wordpress/issues/32. Bedrock requires it as web/wp for other contexts as far as I'm aware. Unless WP-CLI got smarter about it?. Thanks \ud83d\udc4d . Thanks \ud83d\udc4d . This is almost certainly a Lando issue and I'm guessing there's nothing we can do in Bedrock itself.\nBedrock is really just a subdirectory install.. Thanks!. See https://roots.io/bedrock/docs/bedrock-compatibility/ if you haven't. It's likely an issue on Polylang but no guarantees without looking into it.. Thanks for the detailed report. I see that the plugin you were having issues with updated their code to use ABSPATH which is nice.\nConsidering we've never had this bug report before, it seems like using WPINC over ABSPATH might be rare. I don't really know of the consequences of changing the order of requires so I'm going to leave this as is.. Thanks!. Yeah, correct. The current Travis set up is basically the minimum we could do (beyond literally nothing) and may only catch a tiny percentage of issues. I personally looked into doing exactly what you described a few times but honestly forget why it was never completed (beyond laziness).\nFeel free to contribute that test suite if you want \ud83d\udc4d . :shipit: . Reasonable request.. but as you alluded to, I don't think this belongs in Bedrock. You'd have to ignore that folder in any WP project even if it wasn't Bedrock.\nIt's either going to become the single exception in gitignore, or a precedent for others. Neither of which I really want to deal with.. I'd definitely be interested in this depending on the implementation. Tests are good \ud83d\udc4d \nIf a PR isn't too much trouble, then it would be nice to see and try it out.. I mostly agree with @austinpray. I kind of forgot that the WP test unit library is mostly designed for testing WP core itself (for core developers). It's pretty heavy-handed for normal application/project testing.\nSo having the boilerplate required to make that easier with Bedrock is still useful \ud83d\udc4d . I'm confused about the issue here...\nbash\n$ git clone git@github.com:roots/bedrock.git bedrock-test\nCloning into 'bedrock-test'...\nremote: Counting objects: 1287, done.\nremote: Total 1287 (delta 0), reused 0 (delta 0), pack-reused 1287\nReceiving objects: 100% (1287/1287), 339.16 KiB | 3.50 MiB/s, done.\nResolving deltas: 100% (638/638), done.\n$ cd bedrock-test\n$ rm -rf .git\n$ git status\nfatal: not a git repository (or any of the parent directories): .git\n$ git init .\nInitialized empty Git repository in /Users/scott/dev/bedrock-test/.git/\n$ git add .\n$ git commit -a\n[master (root-commit) d599686] asfd\n 28 files changed, 1499 insertions(+)\n create mode 100644 .editorconfig\n create mode 100644 .env.example\n create mode 100644 .gitattributes\n create mode 100644 .github/CONTRIBUTING.md\n create mode 100644 .github/ISSUE_TEMPLATE.md\n create mode 100644 .gitignore\n create mode 100644 .travis.yml\n create mode 100644 CHANGELOG.md\n create mode 100644 CODE_OF_CONDUCT.md\n create mode 100644 LICENSE.md\n create mode 100644 README.md\n create mode 100644 composer.json\n create mode 100644 composer.lock\n create mode 100644 config/application.php\n create mode 100644 config/environments/development.php\n create mode 100644 config/environments/production.php\n create mode 100644 config/environments/staging.php\n create mode 100644 phpcs.xml\n create mode 100644 vendor/.gitkeep\n create mode 100644 web/app/mu-plugins/bedrock-autoloader.php\n create mode 100644 web/app/mu-plugins/disallow-indexing.php\n create mode 100644 web/app/mu-plugins/register-theme-directory.php\n create mode 100644 web/app/plugins/.gitkeep\n create mode 100644 web/app/themes/.gitkeep\n create mode 100644 web/app/uploads/.gitkeep\n create mode 100644 web/index.php\n create mode 100644 web/wp-config.php\n create mode 100644 wp-cli.yml\nYou can see that the built-in mu-plugins are added and included.. Still confused \ud83d\ude1b \nYour steps were the exact same as mine?\n$ git clone git@github.com:roots/bedrock.git bedrock-test\n$ cd bedrock-test\n$ rm -rf .git\n$ git init .\n$ git add .\n$ git commit -a. @austinpray not a bad idea. Let's consider/do that separately.. Looks good to go once 1.0.0 is done and updated \ud83d\ude80 . This seems to make sense. We'll have to try it out first.. > Many people are not happy with the way WordPress is handling development anymore. \nMost of us at Roots have never been happy with it.\n\nThis isn't about if you think ClassicPress is a great alternative to WordPress, this is just about giving people options.\n\nOptions have a cost unfortunately and adding this extra option isn't something we're interested at this time.\nAnyone wanting to use ClassicPress has two options:\n\nchange the package as @knowler said\nuse a fork with this CLI option. > If there are any other costs, can you elaborate?\n\nBy adding this option we'd be putting a burden on every single person who runs composer create-project roots/bedrock. Right now there is no option or choice; you just run the command and that's it.\nNow it would prompt them and they'd be force to make a choice which likely the vast majority of people wouldn't care about or want to make.\nThis is mostly about the prompt feature though. Bottom line is that ClassicPress is a hard fork that will diverge with WordPress and could cause compatibility issues with Bedrock going forward.. @drzraf fair points. However, Bedrock is still a boilerplate basically. It's intended to be customized as you need. It's also not a framework you upgrade in the traditional sense. So for anyone who used an older version of Bedrock as a starting point, this wouldn't affect them.\nAnd if you're starting a new project on an OS which doesn't provide 7.1 (like Debian), you can either use a slightly older version or just manually edit composer.json.\nWe still believe this is a sensible default to have considering how Bedrock is used.. Also see https://roots.io/bedrock/docs/bedrock-compatibility/. Seems like a good thing to support by default \ud83d\udc4d \nMaybe this should go above loading the env specific config? It would allow them have logic based on this. . Thank you!. I'm not necessarily against this, but wanted to point out two things:\n\nthat 12 factor page doesn't strictly recommend DSNs. Their image happens to use them but that doesn't mean much.\nTo the app, both are attached resources, accessed via a URL or other locator/credentials stored in the config. A deploy of the twelve-factor app should be able to swap out a local MySQL database with one managed by a third party (such as Amazon RDS) without any changes to the app\u2019s code.\n\n\n\n\"other locator/credentials stored in the config\" is the key part which is exactly what Bedrock is doing.\n\nthe reason why we haven't supported the DSN option is because WordPress itself doesn't. This means we need to do URL parsing like this PR does.\n\nI'm on the fence about this but open to opinions.\nIs this something you'd consider trying to contribute to WP core? It should definitely be supported by default but contributing to WP isn't something I'd wish on anyone \ud83d\ude02 . My question about the required env vars is still valid I think. If you just use DATABASE_URL right now, wouldn't this fail validation?. While DB_URL is more consistent with the other constants, DATABASE_URL is actually kind of standard. Lots of hosting platforms use that name specifically and some other web frameworks have it integrated as well.\nAll the other changes look good though \ud83d\udc4d . Heroku and Doccu use DATABASE_URL. There's probably other hosts/infra related things which do as well.. Thank you everyone\nWe also need the docs updated at https://github.com/roots/docs/blob/docs/bedrock/installing-bedrock.md if someone wants to help. I'd like to avoid hardcoding http. DOMAIN_CURRENT_SITE could become URL_CURRENT_SITE maybe?\n. My only minor quibble is to do\nphp\nrequire_once(dirname(__DIR__) . '/vendor/autoload.php');\nrequire_once(dirname(__DIR__) . '/config/application.php');\n. My comment was confusing after reading it again. I just meant if we leave http hardcoded and only set the domain, there's no option for https sites.\n. dirname(__DIR__) === dirname(dirname(__FILE__))\nSo going with dirname(__DIR__) is just a bit simpler in my mind. You're right that there's some inconsistencies now though. We could probably update config/application.php to use __DIR__ where approriate like $root_dir\n. Good suggestion. Just did those changes since they makes sense.\n. Agreed. Updated.\n. :beers: \n. Yes. Guard clauses are great :+1: \n. Can this be changed to && instead of and? Generally you want to avoid and in Ruby.\n. Should be updated to reflect the task name now of update_option_paths.\n. > Since PHP 5.3, it is possible to leave out the middle part of the ternary operator. Expression expr1 ?: expr3 returns expr1 if expr1 evaluates to TRUE, and expr3 otherwise.\nhttp://php.net/manual/en/language.operators.comparison.php#language.operators.comparison.ternary\n. Could simplify this to:\nphp\ndefine('DISABLE_WP_CRON', getenv('DISABLE_WP_CRON') == 'true');\n. @dvorakluk sorry to nitpick, but can you change these to single quotes? We use them for consistency.\n. How about just composer create-project roots/bedrock? I believe dist is the default anyway in this case.\n. Sorry I meant this should just be composer create-project roots/bedrock. No need for wordpress \"1.6.*\". Otherwise we'd always have to update the README with new versions.\n. Can you move this up under the rest of the DB vars?\nAlso maybe we should treat DB_HOST as an optional comment too. Its default is localhost.\n. I think the default port would be the most popular. Changing DB_HOST more than likely means you're just using a remote host (still with the default port).\nAnyway, port has nothing to do with this. We should move DB_HOST to be an optional comment because it is literally optional. It has a default fallback value.\n. the backticks on these 2 commands aren't needed, it's already in a code block\n. Is the check for an existing file even necessary? Since this only happens on create-project, it's always a new project anyway.\nThis formatting is off as well, you need to match the indentation with the existing file.. Why are these \"safe\" and why do only these have a comment about overriding? Every setting can be overridden technically.. We didn't have it before either, but I think a comment block explaining the config a little bit would be useful. I know we have docs, but I think it's important in here as well.\nMostly around explaining how the application config defaults to production settings and the env specific files should only be used when necessary to change those.. Maybe: \"'$key' has not been defined. Use $class::define('$key', ...)\". Hmm I think we can be a little more clear about what's going on here. Something like:\n\nConfig aborted trying to define '$key' . The constant has already been defined.. Might be useful to provide a comment referencing https://codex.wordpress.org/Function_Reference/is_ssl#Notes as well. \ud83e\udd14 we require DB_NAME', 'DB_USER', 'DB_PASSWORD' when .env is loaded. We'd need to make that optional somehow wouldn't we?. Sorry one more style nitpick, but we underscore names elsewhere in Bedrock (and this file). @QWp6t didn't you say ?? null wasn't needed? Or would this result in \"\" which would actually be used as the password instead of \"skipped\"?. Good catch, thank you! So ?? null does this fix. Should be noted that the array would behave the same anyway? Either way we need ??. \n",
    "nmec": "Maybe we could just pull in the stuff towards the end that displays the welcome panel and mutlisite setup?\n. Rebased and pushed. I just went with SCRIPT_DEBUG as it seems to be the main one used by WordPress and I thought it unlikely that people would output differently built styles/scripts.\n. I started work on an install script that I was hoping to add this to with a CURL request to api.wordpress.org/secret-key/1.1/salt but sed has been giving me trouble. Perhaps this would be preferable to env vars?\n. ",
    "CoffeeAndCode": "No prob at all!  I'll clean up the PR.\n- Jon Knapp\n\nOn Dec 20, 2013, at 12:07 AM, Scott Walkinshaw notifications@github.com wrote:\nI was thinking about this after I saw this PR https://github.com/markjaquith/WordPress-Skeleton/pull/41/files\nYou're right that since we're using WP_HOME we should use it and DRY things up a bit too. Could you change this to use getenv('WP_HOME') though? Trying to standardize on that since there's also $_SERVER and $_ENV.\n\u2014\nReply to this email directly or view it on GitHub.\n. @swalkinshaw updated\n. @swalkinshaw updated again  :)\n. glad I could help (in a very small way).  thanks for the awesome project!\n. \n",
    "ajmalafif": "@swalkinshaw hmm link directed to 404. So what's the command to get unique key/salt script?\n. ",
    "metalmatze": "Nice, that'd be awesome!\n. Is there a reason to call the folder web/?\nI think public/ is a more often used name, right?\n. ",
    "ghost": "If you were to do this I think it'd be a good idea to talk about file permissions in the readme as it could end up causing problems for some users if they accidentally changed them. \n. swalkinshaw is right, public usually refers to the static files that obviously the public can access, which you do not want for the WP core & plugins. \n. ",
    "eastmanenator": "I agree with that opinion\nweb directory should be isolated from config files\n. @MetalMatze: you're right. it seems to me that the public is now more popular name... can be found in many projects on ruby, php - symfony, laravel\n. done\n. I agree with that, but as for a few people working at the same repo and they have different urls? \nwill overwrite the settings yourself?\n. I usually use local host - like domain.loc, but people in my team differently. Sometimes it is domain.local, domain.dev. Vagrant has nothing to do with that. I'm thinking about databases - like @mAAdhaTTah. Vagrant will not solve the problem. I do not know how to do?\n. ",
    "Foxaii": "You can set up a different .env file for each environment, which is why it doesn't go into version control. So if you are using a subfolder for developing on localhost, you would update WP_HOME and the WP_SITEURL to reflect these changes. \n. There should only be one .env file to load per environment, not multiple.\n. We should be blocking every hidden file.\n. Can you please test using symlink between the language folders? It would be very easy to implement with capistrano;\nln -s /srv/www/example.dev/web/wp/wp-content/languages /srv/www/example.dev/web/app/languages\n. Regarding .htaccess, it's probably better if you set up the rules you need in the virtualhost configuration. Using the shared folder is also a valid approach, but neither way would require the .htaccess file in version control, it's only when all the environments are identical does that become viable.\nThe changes to app/themes is fine if you have the theme or themes in version control elsewhere, but I think that most people will have one repo per app. In which case it's vital that the themes are not ignored.\n. Editing the virtualhost config is the better practice. The expected convention for Bedrock would be to use Nginx. The .htaccess file is only the same when there is no change to the RewriteBase, which would rule out anyone still using localhost/clientname/ or similar, to develop.\nI can see where you're coming from regarding consistency, but the fact is themes and plugins are very different and should be treated as such. \nEach app will have lots of plugins, the majority of which will be managed by composer and they will be distinct from the app itself. With themes you'll only have one and it can't be detached from the app, because it is the app being developed. \n. A white screen of death without errors but with the admin working is usually an issue with broken theme paths/settings. The fault could be with the mu-plugin we use to register the default WordPress themes but I would definitely start debugging by selecting a new theme (also try uploading one to web/app/themes).\n. I'm going to close this. Bedrock hasn't been designed with shared hosting in mind, so you'll always be fighting an uphill battle. \nThere is possibly a workaround to implement the web folder on your shared hosting but it's definitely something we can't provide support on; there are too many variables and too much beyond reasonable control.\nIf I wanted to implement Bedrock on a shared host I would start by reverting to the pre-web-folder setup and secure the directory access by configuring the server.\nIf you do manage to get it running, it would be great to hear how. \n[edit] Should also mention that this kind of discussion is welcome on the Roots Discourse forum.\n. I hope you're not a cat!\nConfidential configuration files should be kept above the web root for security. You can block access to the files with server configuration but it's more work, needs constant revision should new confidential files be added and it's not quite as effective, especially when using .htaccess instead of virtual hosts.\nWith the web root folder all you need to do is change the path in Nginx or Apache and you're pretty much done.\nIt does mean the user will need control over their host, which, good or bad, will make it less viable an option for those user shared hosting.\nFor questions like this, it would be great if you could use the Roots Discourse forum in future. Thanks.\n. You said you were curious, which turns out badly for cats...\nI would encourage using separate server blocks where possible, or wait for the Ansible playbook we're working on, which will do this for you.\n. I don't think we should arbitrarily start breaking support for older versions of PHP. Sensible breaking points could be when;\n- the PHP version has its support dropped by the PHP Group.\n- a feature in a newer PHP release contributes significantly to Bedrock.\nShort syntaxes wouldn't fall into the latter category as it's purely aesthetic; whereas implementing a generator, significantly reducing the memory footprint, would.\n. Please see #66 for a plugin that will resolve this issue. Any help testing would be appreciated! \n. I personally think that anything under package management should be updated by the package manager only. \nI can see both sides of the argument in a WordPress client environment but if you're allowing clients to update plugins, then you only need remove the custom package types and activate the plugins once before the handover.\nThis post touched on the matter previously.\n. Both the docs and the plugin itself mention that the autoloaded plugins will be actioned after all mu-plugins and plugins have been loaded. This was primarily done to prevent double loading, which tends to cause fatal errors.\nI agree that in the usual flow of things there would be a couple of actions of filters/actions that autoloaded plugins would miss but I think they are in the minority. Also those that do require those filters are mostly tied closely enough to the project enough to be committed into version control.\nDo you have any examples of the plugins that are causing problems for you? I'm willing to reconsider if consensus demands it.\nWe will also need to change the docs and the plugin text if the switch makes it.\n. Can you expand on the issue you are encountering please? I'm not 100% sure what you mean.\nYou could also try the changes in #110 that make the autoloaded plugins load first instead of last (but be mindful of the caveats I mention in that PR).\n. It would be helpful if you could try two fixes and report back which worked (it should be both):\n1. Change the plugins_loaded action to muplugins_loaded here \n2. Try modifying the autoloader as per #110 \n. @hyyan It will take some further digging. I'll have a look into it tomorrow or over the weekend.\n. This isn't anything autoloader related.\nIf you look at the parameters of load_plugin_textdomain the full path option has been deprecated, so the only path you can use must be relative to the plugin directory, not the mu-plugin directory.\n. Your translation files are in the mu-plugins directory, but the load_plugin_textdomain function takes the relative path to those files and prepends the path to the plugins directory, so it's not looking where the translation files are.\nIf you apply the changes in #110 and then use the load_muplugin_textdomain hook it should work, as it will be looking in the correct folder.\nI'm not sure if additional hooks are the answer but will look into it.\n. I'm not sure if you ever got this working as you intended, but the way I use translations is by creating an languages/plugin folder in app that contains my-plugin-name-en_GB.mo and my-plugin-name-en_GB.mo.\n. The bump to require 5.4 was in the CHANGELOG but you are right, it should be in the README too.\nI'm don't think there was anything specific that broke support for 5.3 (so you can try lowering the version at your own risk) but 5.3 reached end of life 3 months ago so you shouldn't be using it on a new build and we shouldn't be supporting it.\n. Are you logged in properly?\nI'm not able to replicate this on any of my Bedrock installs.\n. In my opinion, because WordPress has an event-driven architecture, we should tie the auto loader to a standard event, instead of using an obscure filename and creating our own action as an ugly workaround to an uncommon issue.\nIf you must have an mu-plugin accompanied by a network plugin (or vice versa), why not have two network plugins? Surely both would be controlled the same way?\nCan anyone give an example of a popular plugin that can only be modified by mu-plugins? Surely the vast majority of customisations are possible at theme level (i.e. via functions.php), which would make the mu/network plugin load order immaterial.\nIdeally WordPress would fire muplugins_loaded, then have a networkplugins_loaded action, but it doesn't, unless someone wants to try their luck on trac.\nWhatever is decided I'm happy to better document it.\n. Do you mind changing this to 'nightly' and rebasing to keep consistency with roots/sage#1355\nThanks!\n. It's been a while since I've had to do this. But you can rework Bedrock's folder structure quite easily.\nUsually you only need to edit the following references:\nhttps://github.com/roots/bedrock/blob/master/config/application.php#L3\nhttps://github.com/roots/bedrock/blob/master/web/wp-config.php#L7-L8\n. Thanks for pointing to the composer.json changes.\nAll the shared hosts that I've been forced to use allow access above the web root. So you would have a structure like follows:\n\u251c\u2500\u2500 bedrock      # Config folder with .env above the web root and is only accessible on the server.\n\u2514\u2500\u2500 public_html  # public_html becomes your web folder and is moved outside the bedrock config.\nYou can also run other bedrock installs (subdomains, addon domains etc) :\n\u251c\u2500\u2500 bedrock           # Config folder with .env above the web root and is only accessible on the server.\n\u251c\u2500\u2500 subdomain_bedrock # Subdomain config folder\n\u2514\u2500\u2500 public_html       # public_html becomes your web folder and is moved outside the bedrock config.\n       \u2514\u2500 subdomain   # subdomain becomes your web folder for the subdomain_bedrock config.\n. Easier isn't always better. Generally speaking, .htaccess files are bad for performance and your solution puts the .env file in the web root, which poses a security issue if anything compromises the .htaccess file (such as overrides being disallowed).\n. Yeah, it's definitely double loading. The object cache plugin needs to live outside the mu-plugins folder, in the wp-content folder (or the app folder if you're using Bedrock) so it really shouldn't be loaded as a mu-plugin anyway.\nIt's easy to resolve if WP Engine wrap their code in a conditional to see if the functions already exist but there's not a fix we can easily offer.\n. Sorry to have taken so long to respond to this issue.\nI made the conscious decision to use a site option when writing the original plugin. I did so because the list of mu-plugins isn't invalidated over time: it's invalidated when plugins are added or removed. Standard plugins are also saved as options, not transients, although I appreciate there is a meaningful difference between the two because standard plugins are an option in the WordPress backend.\nThere's little or no difference between options and transients in practice, although I think that if we switch (which I'm not inclined to do) we need to add a comment to make it clear it's an autoloaded transient, without an expiry date.\nDo you have anything to add to support the switch?\n. The list of mu-plugins is updated whenever a path is missing (i.e. when a plugin is removed or renamed) or when a new folder is found (i.e. when a plugin is added), so you really shouldn't need to be flushing anything manually, whether it's an option or transient.\nDo you mind elaborating on the 'trouble' you are seeing as it could be a bug.\n. Sorry for the delay in getting to this.\nI understand that manually flushing the transient is solving the problem for you @rasmusbe, but the underlying issue is that the plugin is not correctly invalidating its cache.\nWe can either fix the plugin's cache invalidation, which fixes the issue for everyone (whether it uses an option or transien), or switch to a transient, which fixes it only for people who flush caches after a deploy.\nThat's why I asked for more data from you, as the mu-plugin cache should be invalidating itself if a plugin isn't found, or the number of folders have changed. If we can figure which of these events isn't being detected correctly on your project, we can fix the underlying issue.\nI hope that makes sense.. ",
    "Kageetai": "And how does bedrock know which .env-File to use where?\nI set the WP_HOME and WP_SITEURL like http://localhost/andthegang but the assets are still just loaded from http://localhost/\n. So far I only have one .env-File but was asking to understand the usage of them.\nBut my problem is, that even with only that one file, the site path is not working as described above..\n. Ah, I see you already fixed the wrong WP_CONTENT_URL in some recent commit, just as I was trying to make a pull request :)\n. Thanks, didn't notice that on searching.\n. Okay, I am sorry for the few information, but I really didn't do anything else. I will check the logs and use the forum\n. ",
    "chriscarr": "Not Bedrock related, but rather PHP 5.5 related. See this patch in WooCommerce 2.1 Beta.\n. ",
    "joshmedeski": "I'm on a Mac. When I set the path and url in wp-cli.local.yml in the root folder, running commands leaves me with no error code or output at all.\nI'm new to wp-cli but really want to use it with Bedrock, thanks for your help!\nIf it helps, I'm running iTerm and oh-my-zsh in Mavericks.\n. I'm only using a wp-cli.local.yml there is no config file in my system.\npath: wp\nurl: http://localhost/bedrock\nwp theme list, wp plugin list, and wp help don't do anything.\nwp core version seemed to work just fine.\nI tested it with WordPress-Skeleton and I was having problems with that as well. I think it has something to do with the folder structure (themes and plugins are usually within the wp-content file but they aren't in this system.\n. Thanks for trying to help Scott and Peter. I've tried everything you guys mentioned and still no success. If you find a solid solution please let me know. I guess I just won't use wp-cli for the time being.\n. It worked @swalkinshaw! Now what's the best way to simplify the command so I just have to type \"wp plugin list\" or whatever else the command might be?\n. Sweet. I created \"wp-cli.local.yml\" and put in the following variables\npath: wp\nurl: http://localhost/bedrock/wp\nThen I created a oh-my-zsh alias\nalias wp=\"./vendor/bin/wp\"\nFor some reason my bin file can out \"wp\" and not \"wp-cli\" but I got it working!\nThanks for your help. I'll let you know if any problems come from multiple projects.\n. Hey @swalkinshaw, In case you were curious what happened with this problem, I had to update the PHP version for MAMP in my terminal profile.\nexport MAMP_PHP=/Applications/MAMP/bin/php/php5.5.10/bin\nexport PATH=\"$MAMP_PHP:$PATH\"\n. ",
    "petervanderdoes": "With Mark Jaquiths WP-Skeleton I had to change the wp-config.php for WP-CLI to work. See #15 for the pull request.\n. ",
    "jmslbam": "Maybe these previous issues can help you \nhttps://github.com/wp-cli/wp-cli/issues/730\nhttps://github.com/wp-cli/wp-cli/issues/676\nYou indeed need to pass the --url argument.\nAlso you are check the on the Runner class, but there is a build-in Constant to check if WP-CLI is running:\nhttps://github.com/wp-cli/wp-cli/wiki/Commands-Cookbook#loading\nif ( defined('WP_CLI') && WP_CLI )\nCiao!\n. ",
    "fredriksundstrom": "Apparently github takes that folder anyway, judging from this repo. But bitbucket doesn't, so this pull request just makes it more compatible.\nMy first formal pull request to an open source project should be a small one, right! ;)\n. ",
    "MatthewRuddy": "Thanks for your comprehensive response Scott, definitely clears things up. Your right, this is probably outside of the scope of Bedrock, but definitely something interesting to think about. Having had some experience with Laravel, I do like the way they handle environments using the machine hostname. That said, with Laravel people generally concede that your app configuration is going to be included within the same repo which is debatable.\nFood for thought, that's for sure!\n. Yeah, I get you. Seems like one of those the \"right way\" vs \"easiest way\" situations. Most people tend to do the latter, including myself, unless a particular situations warrants it.\nThanks again Scott, awesome to be enlightened.\n. ",
    "benjibee": "I'd like to second this. The first step of my Bedrock setup was adding the lock file to the .gitignore as is done with all of my projects.\n. @swalkinshaw yes, I understand this when the given dependency version is * or dev-master for example. I tend to use exact versions in my composer.json for stability as does this project, so I leave the lock file out of the repo.\nAnyway, it's a minor thing, I just wanted to give my 2\u00a2, sorry to \"bump\" a closed issue!\n. I think my issue has been hijacked : /\n. @etcook I actually chose a different route, sorry. Bedrock didn't fit what we needed in the end.\n@williejackson I opened this issue to suggest an edit to the README.md file, to clarify this behavior. Perhaps I should have submitted a PR instead. I use W3TC in many, many projects, no complaints here!\n. ",
    "QWp6t": ":-1: \n. I don't agree with removing the lock file. I agree with you that the lock serves an important function.\nThe idea behind the lock file is that you can include the lock file instead of including dependencies.\nIf you're not including the dependencies in the repo, then the lock should be included; this is especially important if the development repo doubles as your distribution channel (as is the case with bedrock).\nEven if your dependencies aren't wildcards, the lock is still a good idea because it is more specific.\n. If security is your concern, then none of the credentials should be in environment variables. If WordPress or one of its plugins spawns a new process outside of php land, then those environment variables can become available to the child process, whereas they would be unavailable if they were simple PHP variables or constants. Your README says that the benefit of using .env is that you get to keep all of the configuration in a single file, but you could accomplish exactly the same thing with a require_once and then gitignore that file the same you do with .env.\nI'm not necessarily looking to have that debate here, though. I'm just pointing out that using environment variables is in no way more secretive or secure than using an include, and if anything it's less secure, and therefore it's arbitrary to move WP_HOME and WP_SITEURL out of .env and into a config file. It's not invalid or incorrect, but it's arbitrary, much in the same way .env itself is an arbitrary decision and does not in any way inherently increase security.\n. My suggestion is more about inconveniencing folks who are failing to keep up. Almost like a syntactic salt (with the obvious distinction being that this semantic not syntactic). It forces them to be cognizant of their outdated platform.\nThe reason that WP only requires 5.2 is because it is being held back by the community at large. As leaders in the WP community, I think Bedrock, Roots, Soil, etc. should actively nudge developers not just toward modern PHP development patterns and practices but toward modern PHP versions as well.\n. :+1: \n. Github\n- includes Twenteyeleven theme\nWordPress.org\n- includes Akismet plugin\nThose are the only differences I can see between the two other than file size (wordpress.org zip file is ~2MB smaller)\n. mu-plugins directory doesn't work like that.\n\nWordPress only looks for PHP files right inside the mu-plugins directory, and (unlike for normal plugins) not for files in subdirectories. You may want to create a proxy PHP loader file inside the mu-plugins directory:\nphp\n<?php // mu-plugins/load.php\nrequire WPMU_PLUGIN_DIR.'/my-plugin/my-plugin.php';\n\nhttps://codex.wordpress.org/Must_Use_Plugins\n. Doesn't Ansible have compatibility issues with Windows?\nI still haven't taken the time to learn Capistrano. The problem is that I don't speak any Ruby, so even the config files confuse me. lol :smile: \n. Yeah, I was checking out Rocketeer a couple weeks ago when you first posted it. Looks pretty awesome. If this were up for a vote, Rocketeer would likely get mine (unless there are some pitfalls I don't know about).\n. WP still sets them. I found this out when I was deleting ..env.sample and just dumping a new .env in the directory before running composer. I realized that the Bedrock installer script wasn't setting the salts. I checked WP options, and WP had generated its own.\nSo yeah, like you said, it's not really even needed.\n. Maybe if (WP_ENV == 'production') then have it do Dotenv::required or whatever it is for the salt variables.\nJust a thought.\nOn another note: If you guys ever decide to start using OOP, you can use dependency injection and encapsulate Dotenv, then disabling Dotenv is as simple as changing the driver that's used to set the configuration variables. That's what I built for myself.\n. Sent ya one last night. :mailbox_with_mail: \n. I'm closing this since it seems to have been resolved. It's caused by using wordpress-3.9.1-no-content.zip and setting the language to anything other than en-US.\n. Nah, you can't add the filter to application.php. The add_filter() function doesn't yet exist at that point. lol\n. Yeah, I was noticing that last night. But since it's still up in the air whether we're switching everything over to PSR-2, I think at least PSR-1 compliance is fine for now.\nI'm personally in favor of switching all functionality over to PSR-2. Templates (in roots/roots, for example) should still follow HTML code style.\n. I use silver searcher. This is probably why I've always had problems with it when I tell it to read gitignore files. Thanks for the tip.\n. I don't think it's a very good idea to set every single environment variable as a global constant like that. Instead, only set the variables that interest you.\n``` php\n$envars = array('DB_NAME', 'DB_USER', 'DB_PASSWORD', 'WP_HOME', 'WP_SITEURL');\nDotenv::required($envars);\nforeach ($envars as $key => $value) {\n  // ...\n}\n``\n. Windows can have~` in the file name. It's actually been used by Windows itself since at least the Windows 3.x days as well as Microsoft Office for just as long.\n. I agree that the whole alphabetical order thing sounds gimmicky and weird. The event hooks and prioritization exist for a reason.\n. :+1:\nJust for reference in case anyone is wondering: dirname() doesn't actually care about the filesystem. It's just parsing a string. The performance difference between __DIR__ and dirname(__FILE__) is negligible. They are the exact same thing. But since everyone using Bedrock has access to __DIR__, I agree it should be used.\n. > This affects performance, but just a slightest bit\nRight, which is why I said...\n\nThe performance difference between __DIR__ and dirname(__FILE__) is negligible\n. @dominiceales you have to change it in the bottom of application.php as well. Also, if you use wp-cli, then make sure you change it in wp-cli.yml.\n. For anyone who's interested, I also use a _log() function that's similar but dumps to the error log.\n\n``` php\ndefine('WP_DEBUG_LOG', true); // logs errors to web/app/debug.log\nfunction _log() {\n    $xdebug = ini_get('xdebug.overload_var_dump');\n    $args = func_get_args();\n$xdebug && ini_set('xdebug.overload_var_dump', false);\nforeach ($args as $arg) {\n    ob_start();\n    var_dump($arg);\n    error_log(trim(ob_get_clean()));\n}\n$xdebug && ini_set('xdebug.overload_var_dump', true);\n\n}\n```\n. I'd load environment php files first. Then conditionally define each of these, like so...\nphp\n /**\n * URLs\n */\ndefined('WP_HOME') || define('WP_HOME', getenv('WP_HOME'));\ndefined('WP_SITEURL') || define('WP_SITEURL', getenv('WP_SITEURL'));\n. Ahh, cool. My suggestion to conditionally define each constant still stands, though. I think it would be a good idea to let developers define stuff in their environment php files if they want to. They might need to apply some sort of logic to determine how the constants are defined in certain environments, but not in other environments.\nIn fact, I'd make that suggestion for every defined constant in application.php.\nUp at the top of application.php, I suggest the following...\n``` php\n<?php namespace Bedrock;\nfunction define($name, $value) {\n  defined($name) || \\define($name, $value);\n}\n// ...\n``\n. Minus whale put$dotenv = new Dotenv\\Dotenv($root_dir);in there too since it's not used anywhere else in the script. Just keep it all contained in its own conditional statement.\n. Which paths does Bedrock fail to reference? Looking through Bedrock's code (which is basically justapplication.php), all references that I see use absolute paths. Am I missing something?\n. Couldn't this same reasoning be used to change the gitignore rule for the plugins directory as well?\n. Related discussion on Roots Discourse: https://discourse.roots.io/t/is-config-in-the-environment-really-a-good-thing/4590\n. @mAAdhaTTah\nNo because it'srtrim(). It will only remove trailing slash, not leading slash.dirname()` doesn't have a trailing slash anyway, so this is fine in that regard.\n@damianwajer \nI think you should go with this instead...\ndiff\n $root_dir = dirname(__DIR__);\n-$webroot_dir = $root_dir . '/web';\n+$webroot_dir = rtrim($root_dir, '/') . '/web';\nThat way $root_dir is actually the root directory, i.e., /.\nBut I don't think this should be added to Bedrock by default. That's just too weird of a structure putting everything in the root of your filesystem like that. I think you should move your document root instead.\nOr are there situations in which the directory structure might appear like this to PHP for security reasons or something? Like a form of masking the server's folder structure? Because ostensibly it looks like your document root is /web, which is ... odd.\n. Looks like we're gonna pass on this one for now. We might revisit it if at some point if there's a compelling reason to do so.\n. :+1: :watermelon:\n. Nah, we won't be adding this to bedrock, but you can do this in your .env file no prob.\nAdd this to your .env file...\nWP_HOME=\"http://${HTTP_HOST}\"\nWP_SITEURL=\"${WP_HOME}/wp\"\n. In production, it can result in duplicate content \"penalties\" since WP_HOME constant is used to determine canonical URLs, e.g., both www and non-www URLs to a post will be \"canonical,\" and if you have any aliases for your domain, then they're canonical as well.\nPlus I suspect it would take a giant shit all over multisite setups with subdomains. lol\n. They're not transformed into wp-config.php. They're parsed by DotEnv and then retrieved as environment variables in application.php.\nhttps://github.com/roots/bedrock/blob/master/config/application.php\nThe Bedrock issue tracker is for ongoing Bedrock development, not for support. Please use https://discourse.roots.io/ for support requests.\n. well, the idea is that you keep that file in there throughout development, and then during staging. then remove when you push to production. could even make removal part of your deployment routine.\n. .env.example is already in the repo right here: https://github.com/roots/bedrock/blob/master/.env.example\nAccording to the docs, you need to rename/copy that file to .env and then edit it.\nhttps://github.com/roots/bedrock#installation\nhttps://roots.io/bedrock/docs/installing-bedrock/\n. Closing this as it's simply an aesthetic change, i.e., a matter of taste with no functional benefit.\n. Bedrock does not affect loading admin submenus.\nFeel free to ask on https://discourse.roots.io/ or on Stackoverflow or something. \nIf you truly believe the issue is with johnpbloch/wordpress (I can assure it's not), then you can also take your issue upstream..\nRegardless, this is not an issue to be resolved in the Bedrock codebase so I'm closing this.\n. In my opinion, this shouldn't be optional. It should just be done. Also, we can have dotenv do it.\n. Ahh, I see. That makes sense. What an odd design, to have a buried \"utility method\" that can't even be accessed.\n. So far, we like\nphp\narray_map('putenv', array_keys(get_defined_constants(true)['user']));\nBut we might wind up doing something different instead. We're gonna keep chatting about it and figure out how to proceed.\n. That's fine. We're not concerned about the existence of the keys in the superglobals. We're actually concerned about the environment variables being leaked to child processes and whatnot. Their presence in phpinfo() is inconsequential.\n. > Characters ?{}|&~!()^\" must not be used anywhere in the key and have a special meaning in the value. \nhttp://php.net/manual/en/function.parse-ini-file.php\nDoes anyone know what the \"special meaning\" is that they're talking about? It seems like this might not play well with generated salts.\nUpdate\nhttps://secure.php.net/manual/en/function.parse-ini-file.php#118969\n``` ini\n; | is used for bitwise OR\nthree = 2|3\n; & is used for bitwise AND\nfour = 6&5\n; ^ is used for bitwise XOR\nfive = 3^6\n; ~ is used for bitwise negate\nnegative_two = ~1\n; () is used for grouping\nseven = (8|7)&(6|5)\n; ${...} is used for grabbing values from the environment, or previously defined values.\npath = ${PATH}\nalso = ${five}\n; ? I have no guess for\n; ! I have no guess for\n```\n. Having trouble there, buddy?\n. You have your own repo, man. Why you wanna hijack ours too? Stop tryna hoard all the repos!! :rage:\n(To clarify: You don't have to submit a pull request when you make changes to your own repo. Only submit PRs when you're actually trying to push an upstream change to Bedrock. Your modifications in this PR are obviously specific to the job you've been contracted to do. They don't belong in our repo, only yours. Hope it helps!)\n. That constant is deprecated. It is not used anywhere internally. If a theme or plugin author is using it, they're doing it wrong.\nBut yeah, feel free to define it if you need it.\n. load() should be a method on the class.\nAlternatively, you could use a closure, like this (untested, but it should work)...\n``` diff\n         $this->checkCache();\n         $this->validatePlugins();\n         $this->countPlugins();\n\nforeach (self::$cache['plugins'] as $plugin_file => $plugin_info) {\ninclude_once(WPMU_PLUGIN_DIR . '/' . $plugin_file);\n}\narray_map(function ($plugin_file) {\ninclude_once(WPMU_PLUGIN_DIR . '/' . $plugin_file);\n\n}, array_keys(self::$cache['plugins']));\n $this->pluginHooks();\n\n}\n/**\n```\n. Can you make the following change?\n\n\n``` diff\n DB_PASSWORD=database_password\n-DB_HOST=database_host \n# Optional variables\n+# DB_HOST=localhost\n # DB_PREFIX=wp_\nWP_ENV=development\n```\n. @thedamon You wanna make the change noted above? Or should we handle this one on our own?\n. @eimanavicius https://github.com/roots/bedrock/pull/261\n. I'm with swalk on this, but if there's demand for it, then it should follow the pattern in #261 for optional variables, i.e., it exists in the .env.example file, but it's commented out, and there is a default value for it defined in application.php. But again, that's only if there's a demand. These are variables that really shouldn't be changed between environments.\n. With persistent cache plugins, transients can be handled by, for example, Redis. Theoretically this means that the data can be retrieved faster, but I remain skeptical of the actual impact of what ostensibly seems to be a micro-optimization given the small size of the data that's stored by the autoloader. It also makes the presence of the cache less predictable, which means it might need to be regenerated more frequently, i.e., transient data can be purged at any time. Having it as an option makes its presence marginally more predictable. But ultimately, I don't think either of these are strong enough arguments for either side, and I would just as soon defer my position on this issue to @foxaii for his reasoning.\ntl;dr-\n\u00af\\_(\u30c4)_/\u00af\n. php might not have permission to read your .env file, or it doesn't exist, or it's empty. That's my guess. But this should probably be taken upstream to the DotEnv repo.. WordPress doesn't follow semver. The first two version sequences designate the major release. The third sequence is minor. (They don't have patch releases.) If we are going to relax the version constraint, then I think we should leave off the third sequence entirely and just go with...\n\"johnpbloch/wordpress\": \"4.7\",. This works. I've done it many times. And it certainly isn't a bug in Bedrock.. i don't really see the use case where these values would change between environments tbh. I can confirm that --docroot=web resolves this issue.. My suggestion would be to use sunrise.php since it will have the $site_id that you could use to reference each site. You could also use the site's slug or something if you wanted, but I figure for something like this, there's no need to get too fancy.\nSo maybe something like this...\n/bedrock/config/sites/\\<id>/.env\n```\nyour config\n```\n/bedrock/config/application.php\nphp\ndefine('SUNRISE', true);\n/bedrock/web/app/sunrise.php\nphp\n$dotenv = Dotenv\\Dotenv::create(\"{$root_dir}/config/sites/{$site_id}\");\ndefine('WPMS_SMTP_PASS', env('WPMS_SMTP_PASS'));\n// etc.\n. \"Why?\" could link to admin_url('plugins.php?s=disallow-indexing') or something similar imo.. It also discourages environment parity.\nBedrock is delete key friendly and easily configured. Our defaults are what we recommend and are deliberately opinionated.\nThis is also a duplicate of #320 . lgtm @swalkinshaw. $webroot_dir is a global.\nOr you could just create a constant if you prefer that.. \u2502\u2500\u2500 should be \u251c\u2500\u2500 (same with L118)\nThis is a very big deal.\nsee #40 \n. Looks like you have a tyop\n\nThe wp command with automatically pick up...\n\nshould be\n\nThe wp command will automatically pick up...\n. php\nif ($screen->{'base'} != 'plugins' || $type != 'mustuse' || !current_user_can('activate_plugins')) {\n  return $bool;\n}\n[...]\n\nThoughts?\nDoes the same thing except reduces indentation, and also makes it clearer that the method returns $bool if it doesn't do anything.\n. I think it should still be 1., 2., 3., etc. Otherwise it looks stupid when it's not rendered. The note regarding the use of 1. is strictly for those who are using the \"lazy list numbering.\"\n\nThe point is, if you want to, you can use ordinal numbers in your ordered Markdown lists, so that the numbers in your source match the numbers in your published HTML. But if you want to be lazy, you don\u2019t have to.\n\nSweet, we can choose between being lazy or not being lazy. Doesn't sound like either one is \"recommended\" or \"instructed.\"\n\nIf you do use lazy list numbering, however, you should still start the list with the number 1. At some point in the future, Markdown may support starting ordered lists at an arbitrary number.\n\nThis isn't an issue we need to worry about if we're not lazy.\nSo let's not be lazy.\n. I'm pretty sure there needs to be !is_admin() check around this to prevent WordPress admin panel from always showing the option as enabled.. php\n$message = sprintf(__('%1$s Search engine indexing has been discouraged because the current environment is %2$s.', 'roots'), '<strong>Bedrock:</strong>', '<code>'.WP_ENV.'</code>');\necho \"<div class='notice notice-warning'><p>{$message}</p></div>\";. If we're trying to replicate Ruby's behavior, then you can trigger a warning withphp\ntrigger_error($message, E_USER_WARNING);\nIt might be helpful since it would give developers a full list of constants that they're attempting to redefine instead of failing one at a time.. In general, I'm not a fan of `private` properties or methods. I'd suggest using `protected` instead.. This could be reduced to:\n$hasDsn = env('DATABASE_URL') !== null;\n``\nBut the line isn't necessary, so I'd suggest removing it. There's no need to use the$hasDsnvariable.. You can useif (env('DATABASE_URL')) {instead.. These$hasDsnternary operations aren't needed.Config::define()` can be declared more than once or you can set the env var.\nIn other words, you can use\n```php\nif (env('DB_URL')) {\n    //...\n    putenv('DB_...');// or $ENV['DB...'] = ...\n    //...\n}\nConfig::define('DB_...');\n```\nOr you could do the following...\n```php\nConfig::define('DB_...');\n// ...\nif (env('DB_URL')) {\n  Config::define('DB_...');\n  //...\n}\n```\nI personally prefer the latter.\n. I vote for \"{$dsn->host}:{$dsn->port}\" \ud83e\udd37\u200d\u2642\ufe0f . ?? null seems unnecessary.. env() isn't part of DotEnv; it won't throw an error. I'm pretty sure you should be able to remove ?? null here and it will work just fine. I believe env() will return an empty string if the values are in the .env file, otherwise it will return null. As for DotEnv, it won't throw an error because it only requires them if DATABASE_URL isn't in your .env (application.php#L31-33).\nFeel free to double-check if you want. Or I can check tomorrow.. ",
    "bitwombat": "Necrobump, sorry.\nThe lock provides a useful function, but committing it to the project defeats its purpose.\nThe .lock file's purpose is to lock my clone of the repo, after I run composer, to particular versions of dependencies.  This lets me fetch the latest-and-greats versions, within the limits specified in the project's composer.json file.\nIf the exact version matters, it can be specified that way in composer.json.  The .lock file is supposed to be created by my run of composer.\nI hope this makes sense and doesn't seem contentious.\nNot a huge deal, just not \"proper\", I don't believe, and something that jumped out at me on first look.\n. I retract this and stand corrected.  Composer's own docs say to commit the lock file (as @swalkinshaw said above).  Though not for libraries - perhaps why I've rarely seen this.\nOne reasonably rated answer on Stack Exchange makes the case I did above, \"but still\", I now think it's correct as is.\nBasically, committing the lock file is saying to your users \"Use these, they're what we tested with\", whereas wildcards in composer.json are saying, to devs, \"We're willing to test with any of these\".\n. Reference:  https://codex.wordpress.org/Editing_wp-config.php#Moving_uploads_folder\nand https://codex.wordpress.org/Function_Reference/wp_upload_dir\n. @QWp6t the first feature listed for Bedrock is \"Better folder structure\", which is what this is about.  If I understand best practices correctly, separating content from code is not merely aesthetic.\n. @etcook and @QWp6t do any of those points change your mind?\n. ",
    "kalenjohnson": "bitwombat, I'm not following your reasoning. You're talking like once a lock file is included in the repo, the dependencies can never be changed, which is obviously not true.\nIf you want a set dependency, or a new one, modify the composer.json file, run composer update, and the lock file will be updated, and it will be all yours. So where is the issue you're experiencing?\n. I agree with @Foxaii, feel free to use features from whatever PHP version you have available. But there is something to be said about backwards compatibility. I personally use the short array syntax, but I wouldn't put that in Roots or Bedrock directly, especially since it's purely for aesthetics than an actual feature.\nWP actually only requires 5.2, which is a little surprising, but not really when you look at what PHP version is the most popular: http://wordpress.org/about/stats/\nThank you shared hosting.\nIn any case, Roots is still a starter theme, so unless there is a PHP feature that is really really necessary, no use breaking things. Especially when a search-replace or IDE can replace those array brackets for you in a couple seconds.\n. \"One or more environment variables failed assertions: DB_NAME is missing\"\nSeems pretty obvious.\n. What about HTTPS? Also, while it might be ok for development, it's probably not a great idea for production. You wouldn't want to assume that PHP's global vars are always 100% correct, I wouldn't want to rely on it for something so integral when it's an easy fix to set it as an env var.\nAnd unfortunately, your case is a little edge case, it's the first time I've heard of someone using PHP's built in server for any extended period of time. Most people use Vagrant or some other local server set up\n. The other issue with Roots was it used redirects, which is where the source of the issues really lay.\nHowever, it's not difficult to change this, the uploads folder can be changed with one constant defined: define( 'UPLOADS', 'web/uploads/' );\n. I approve of this\n. I don't think this is a bad idea. Are there any main plugins that actually include phpinfo() in their code though? I don't recall seeing this. Scary if that's the case\n. :+1: :100: \n. And to be clear, Laravel triggered this idea for me: https://github.com/laravel/laravel/blob/master/config/app.php#L28\n. First off, yes, if you have code that is being autoloaded and executing code right on load, that's not good. Autoloading is for having your language understand where to find code so you don't have to do it manually, but nothing should actually be happening when the autoloader is loaded. WP plugins don't necessarily follow PSR-4, but there are some good guidelines there, specifically:\n\nAutoloader implementations MUST NOT throw exceptions, MUST NOT raise errors of any level, and SHOULD NOT return a value.\n\nLooking at the issue you link on carbon-fields, it seems like they're going to have a fix for it. My suggestion would be that if a plugin is trying to execute code before it should (such as, adding a file to be autoloaded and executing code in that file), then use their wpackagist implementation so things are loaded when they are expected to be.\nYou'll note that WP plugins don't require any type of coding standard, but if you take a look at PSR-1, one of the suggestions is this:\n\nA file SHOULD declare new symbols (classes, functions, constants, etc.) and cause no other side effects, or it SHOULD execute logic with side effects, but SHOULD NOT do both.\n\nIt's unfortunate that you've found so many plugins that are doing this. But if a plugin author wants to be able to utilize Composer, it should be able to be autoloaded early in the process. Take a look at other PHP frameworks and the Composer autoloader is one of the first things that happens.\nI suppose it also comes down to dependencies. If it's a WP plugin, then it should get loaded as a WP plugin. If it's a Composer package, then it shouldn't necessarily rely on WP to function. And I say that because WP does not have any understanding of Composer or autoloading.. Like swalkinshaw pointed out, path needs to be set to the WP folder. Perhaps try adding --docroot=web to the wp server command. I can understand the issues surrounding having a site set to not be indexed, that is a big issue. However I don't personally think we need to implement this. I agree with MWDelaney, we have environments for a reason. \nDouble checking production is spelled correctly is not reason enough to make change for everyone.. this feature is becoming a beast. ",
    "austinpray": "FWIW bedrock's lockfile is updated by an automated script every time WP updates \n. @etcook @benjibee W3TC is definitely at odds with the spirit of this project. There is a good caching discussion that was happening over here: https://github.com/roots/bedrock-ansible/issues/34. \n. How long have the wpcli tasks been a thing? I didn't realize they were there.\n. Dammit. I have been writing my own lol. How are they included in the code? Is it a function of capistrano-composer ?\n. Ah. Reading.\n\nBedrock doesn't come with anything by default to do DB syncing yet. \n\nThat explains why I could not find it in the code lol.\n. :beers:\n. Ruby is super easy. \n``` shell\ninstall ruby\n\\curl -sSL https://get.rvm.io | bash -s stable\ninstall capistrano\ngem install capistrano\n```\n. After running the deploy if you restart nginx and php5-fpm does it still give you a white screen?\n. I would verify one more time that nginx and php5-fpm are getting restarted. I have had the exact same symptoms in the past and it was because the restarts were silently failing.\u00a0\nWhen ansible is run the processes are for sure restarted. Try manually restarting via SSH.\u00a0\n\u2014\nSent from my iPhone\nOn Sun, Oct 26, 2014 at 11:17 AM, Brandon Shutter\nnotifications@github.com wrote:\n\nI just thought of something else that doesn't make sense.  I can do a cap deploy - and see that the repo therefore current has been updated, but it doesn't actually update the live site.  However, when I run ansible - current is then updated.  Is there a cache that I'm missing that I need to clear?\nReply to this email directly or view it on GitHub:\nhttps://github.com/roots/bedrock/issues/109#issuecomment-60522453\n. http://ottopress.com/2010/passing-parameters-from-php-to-javascripts-in-plugins/\n. @Rarst\n. Sweet\n. @QWp6t yup! Exact same situation here haha. Glad I could help\n. https://github.com/roots/bedrock/pull/128\n. Definitely no ~ on wordpress. Wordpress does not follow semver anyway.\n. Hey @francescolaffi \n\nIt looks like we are already passing the SCRIPT_FILENAME over here: https://github.com/roots/bedrock-ansible/blob/master/roles/nginx/templates/wordpress.conf.j2\nSo perhaps adding DOCUMENT_ROOT will bypass the need for restarting php5-fpm?\n. Cool, I'll try this out! \n. @etcook :sunglasses: \n. @hyyan https://github.com/hyyan/gwp/blob/00954a330a25488e7d86d56601b3bd2c90729d93/build/build.properties#L22\n. Gj\n. yup and yup. :+1: \n. @louim looks like it's all your fault.\n. Debugging and support discussion belongs over at https://discourse.roots.io\n. Midnight merge party on the 14th at my place\n. For posterity: https://github.com/easydigitaldownloads/Easy-Digital-Downloads/blob/d02aefe0d5d9b82c70e2a44880d1bafd191897c9/includes/admin/admin-pages.php#L40-L41\n. https://jsfiddle.net/austinpray/f1uu2st7/11/ -> roots.io/salt.html\nedit: https://roots.io/salts.html\n. Surely you should be using the same version of MySQL and the same DB charset between environments, right? \n. Environment variables are for settings that change between environments. If your production MySQL server is a version such that it doesn't support utfmb8 then you should change this config so it takes place in all environments. \n. >The Advanced WP Columns plugin seems to have the default WordPress path hardcoded instead as it opens the iframe popup pointing to it using this default path instead the new one used in Bedrock installations.\nThere's nothing we can do about this on our side. This is an issue with that plugin itself.. Wow I apologize for leaving this PR to rot. Sorry to say that this is definitely a non-starter for me.\n\nNearly everything should be statically defined in your config/application.php. The only things that should change between environments are credentials and things like error reporting levels. Making these togglable via env vars goes against this.\nIf you want a special staging environment create an environment specific config file called config/staging_special.php, set wp_env to staging_special and then override things as you please.. Oh yep sorry, good point. My mind was not in in Bedrock/WordPress land. I agree that the current configuration behavior of:\n\n\nIs ridiculous compared to say laravel, django, or rails\n```php\nconfig(['app.timezone' => 'America/Chicago']);\n$value = config('app.timezone');\n```\n```python\nfrom django.conf import settings\nsettings.DEBUG = True\n```\n```ruby\nconfig/environments/production.rb\nconfig.time_zone = 'Central Time (US & Canada)'\n```\nI'm gonna be working on this this weekend. :^). Thank you for the PR! I have two stages of feedback:\n\nWe should avoid or seek to limit prod-only environment changes. Changes like this should be dropped in config/application.php. I don't want to give anyone any surprises in prod. I don't really expect the average bedrock user to follow the development closely enough to be able to pick on up subtle changes like \"bedrock now only saves 10 post revisions in prod only\".\nI have doubts about the claim of negative performance impact of letting the postmeta table grow unchecked.\n\nMore on 2:\nI understand that tables growing like crazy sounds like a bad thing inherently. However, in some pedestrian worst-case scenario queries I just ran against a wp_postmeta with 380k rows I don't really see a huge problem. Can you please post some queries where you are running into perf trouble?\n```sql\nselect count(meta_id) from wp_postmeta;\n+----------------+\n| count(meta_id) |\n+----------------+\n|         380913 |\n+----------------+\n```\nHere's a really dumb query that nobody would ever run: join the post title on every single meta field.\n```sql\nselect meta_key, meta_value, post_title from wp_postmeta inner join wp_posts on wp_posts.id = wp_postmeta.post_id;\n380281 rows in set (0.74 sec)\n```\nNearly a second of runtime is bad but not that bad for what we just asked for. That query is useless and unrealistic.\nSomething slightly more useful perhaps for analytics or maintenance purposes: grab all the attached images and attach post modified dates to them and also attach the post title to them\n```sql\nselect meta_key, meta_value, post_title, post_modified from wp_postmeta inner join wp_posts on wp_posts.id = wp_postmeta.post_id where meta_key = '_wp_attached_file';\n...\n| _wp_attached_file | laptop-mockup.png                                                                                                                          | laptop-mockup                                                                                                                          | 2018-06-22 13:39:34 |\n| _wp_attached_file | Featured-33.jpg                                                                                                                            | Featured Chris Cooper CarrotCast                                                                                                       | 2018-06-24 11:01:46 |\n| _wp_attached_file | Facebook-32.jpg                                                                                                                            | Facebook Chris Cooper CarrotCast                                                                                                       | 2018-06-24 11:02:43 |\n| _wp_attached_file | Screen-Shot-2018-06-24-at-11.24.45.png                                                                                                     | google built adwords campaign                                                                                                          | 2018-06-24 11:56:04 |\n| _wp_attached_file | Screen-Shot-2018-06-24-at-12.26.37.png                                                                                                     | Facebook Leads                                                                                                                         | 2018-06-24 12:28:09 |\n| _wp_attached_file | Screen-Shot-2018-06-24-at-13.18.33.png                                                                                                     | AdWords keyword spend                                                                                                                  | 2018-06-24 13:19:40 |\n+-------------------+--------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------+---------------------+\n3946 rows in set (0.04 sec)\n```\nMuch more useful and much quicker.\nhttps://codex.wordpress.org/Database_Description#Table:_wp_postmeta wp_postmeta has indexes on meta_key and post_id so this is expected to be fast. Let's try selecting .png images since meta_value is not indexed?\n```sql\nselect meta_key, meta_value, post_title, post_modified from wp_postmeta inner join wp_posts on wp_posts.id = wp_postmeta.post_id where meta_value like '%.png';\n| _wp_attached_file            | 30-day-money-back.png                                                                                                                      | 30-day-money-back                                                                                                                                  | 2018-06-22 12:35:24 |\n| _wp_attached_file            | dashboard-imac-mockup.png                                                                                                                  | dashboard-imac-mockup                                                                                                                              | 2018-06-22 13:28:45 |\n| _wp_attached_file            | laptop-mockup.png                                                                                                                          | laptop-mockup                                                                                                                                      | 2018-06-22 13:39:34 |\n| _wp_attached_file            | Screen-Shot-2018-06-24-at-11.24.45.png                                                                                                     | google built adwords campaign                                                                                                                      | 2018-06-24 11:56:04 |\n| _wp_attached_file            | Screen-Shot-2018-06-24-at-12.26.37.png                                                                                                     | Facebook Leads                                                                                                                                     | 2018-06-24 12:28:09 |\n| _wp_attached_file            | Screen-Shot-2018-06-24-at-13.18.33.png                                                                                                     | AdWords keyword spend                                                                                                                              | 2018-06-24 13:19:40 |\n+------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------+---------------------+\n2848 rows in set (0.69 sec)\n```\nOof 0.69 seconds is kinda slow. But still this is sort of an unrealistic user-facing query since a user hitting your homepage is not scan the entire wp_post table unless you are exposing some kind of weird dashboard. Let's simulate an archive page by limiting our query to 50 posts or so.\n```sql\nselect meta_key, meta_value, post_title, post_modified from wp_postmeta inner join wp_posts on wp_posts.id = wp_postmeta.post_id where meta_value like '%.png' and wp_posts.id >= 26588 and wp_posts.id <= 26638;\n+-------------------+----------------------------------------+-------------------------------+---------------------+\n| meta_key          | meta_value                             | post_title                    | post_modified       |\n+-------------------+----------------------------------------+-------------------------------+---------------------+\n| _wp_attached_file | 30-day-money-back.png                  | 30-day-money-back             | 2018-06-22 12:35:24 |\n| _wp_attached_file | dashboard-imac-mockup.png              | dashboard-imac-mockup         | 2018-06-22 13:28:45 |\n| _wp_attached_file | laptop-mockup.png                      | laptop-mockup                 | 2018-06-22 13:39:34 |\n| _wp_attached_file | Screen-Shot-2018-06-24-at-11.24.45.png | google built adwords campaign | 2018-06-24 11:56:04 |\n| _wp_attached_file | Screen-Shot-2018-06-24-at-12.26.37.png | Facebook Leads                | 2018-06-24 12:28:09 |\n| _wp_attached_file | Screen-Shot-2018-06-24-at-13.18.33.png | AdWords keyword spend         | 2018-06-24 13:19:40 |\n+-------------------+----------------------------------------+-------------------------------+---------------------+\n6 rows in set (0.00 sec)\n```\nAlright that's more like it. This is where we see those indexes come into play. So no perf problem in a realistic scenario where you are fetching and joining info on 50 or so posts.\nI guess let's try the other way around? Grab every single post with the featured image id joined to it?\n```sql\nselect wp_posts.id, post_title, meta_value as featured_image from wp_posts left join (select post_id, meta_value from wp_postmeta where meta_key = '_thumbnail_id') as wp_postmeta on wp_posts.id = wp_postmeta.post_id;\n14987 rows in set (0.48 sec)\n```\nSlow, but then again this is a shitty query because no end-user will query every single post. Let's try it emulating an archive page with like 50 posts on it.\n```sql\nselect wp_posts.id, post_title, meta_value as featured_image from wp_posts left join (select post_id, meta_value from wp_postmeta where meta_key = '_thumbnail_id') as wp_postmeta on wp_posts.id = wp_postmeta.post_id where wp_posts.id >= 26588 and wp_posts.id <= 26638;\n50 rows in set (0.01 sec)\n```\nYep works for me.\nSo TLDR: I don't see the perf problem of letting postmeta grow like crazy. Please post the scenario you were encountering.. I appreciate this PR! In its current form I'm not sure it will work though. We slimmed down our setup script to make cloning and composer create methods of creating a bedrock project first class citizens. The default language selection would have to be interactive. Even core-en_gb as a default is contentious.\n\nYou should definitely turn this PR into a guide\nMaybe we should make a package that metaprograms these changes after interactively prompting a user for a language?. https://github.com/roots/bedrock/pull/366\n\nI\u2019m gonna try to help get this going next week. Also wow sorry meant to include this in initial review but: thank you so much for putting this together! This is a great start :+1:.. Brother git add * is not the same as git add .\ngit add . adds all files in the directory recursively \nYou want to be doing git add . like Scott says. I agree that the config for this should be explicit. application.php and environments/*.php should clearly represent everything that is going on with bedrock configuration-wise.\nI know for a fact personally when I use bedrock I try to avoid \"WP_ENV ==='production'\" as much as possible. \"WP_ENV === 'development'\" for enhanced debugging, dev affordances is tolerable to me but never === production.\nAs I said in https://github.com/roots/bedrock/pull/371#issuecomment-411059588 this might be possible with #380 . Maybe I wasn't clear/you didn't understand that I am trying to determine a fail-safe case.\nI'm suggesting:\n\nto application.php add the following line Config::define('DISALLOW_INDEXING', WP_ENV !== 'production');. This means all environments will disallow indexing by default except for production.\nmake the disallow indexing plugin listen to the DISALLOW_INDEXING env var instead of WP_ENV directly\n\nNow everyone can explicitly control the fail-safe in application.php, the new one important place to look for bedrock configuration. If you want you could do like Config::define('DISALLOW_INDEXING', in_array(WP_ENV, ['staging', 'development'])); if you are like OP and you are scared . @vpillinger this can potentially be fixed by https://github.com/roots/bedrock/pull/380\nYou could (with the changes in that PR)\n\nadd a \"INDEXING_DISCOURAGED\" environment variable\nhave the mu-plugin respect it \nConfig::define('INDEXING_DISCOURAGED', true) in application.php\nConfig::define('INDEXING_DISCOURAGED', false) in environments/production.php\n\nNow with this model if you feel like it should be \"safer\" you could just invert it\n\nConfig::define('INDEXING_DISCOURAGED', false) in application.php\nConfig::define('INDEXING_DISCOURAGED', true) in environments/*.php except production.php\n\nThis is not really possible with the current config scheme\nEdit: or wait, maybe the other way around...we'll cross this bridge once #380 is figured out. Oh yeah you can't override constants in php. I'll do a more serious look at this sometime else.. dude DAMMIT I missed this one https://github.com/roots/bedrock/blob/master/web/app/mu-plugins/bedrock-autoloader.php#L138\n. Worth noting: https://github.com/wp-cli/wp-cli/blob/ecb9ed7e63475aeb00b317013a2b9c48c1a4c8ab/composer.json#L20. I need to automate this again so I can steal @knowler's commits. Moving this over to https://github.com/roots/wp-config. Did https://github.com/roots/wp-config/pull/2\nand 1e6ff6c44976fbafaf7e29010e08c834b2d08ac6\nAnyone have any comments about my comments? lol.\nRemoving config/environments/production.php makes a lot of sense to me. It makes so sense to do all this and then still provide a place by default to put production specific config. Nothing is stopping people from creating that file but by default it shouldn't be there.\nI was debating removing staging.php as well but I will defer to you guys.. Oh not yet \nhttps://github.com/roots/docs/blob/docs/bedrock/folder-structure.md\nhttps://github.com/roots/docs/blob/docs/bedrock/configuration-files.md. I can walk y'all boyos through the changes if you wanna contribute docs. Would be more fun that way. @MikeiLL (and anyone else reading this) wanna hop on a google hangout later today and I can walk ya through it in like 10 mins? Can record and then share here for posterity . https://doodle.com/poll/mxa2ma2cmdef9aib If y\u2019all want to vote on a time that works . @MikeiLL 7PM CDT work for you? https://www.timeanddate.com/worldclock/fixedtime.html?msg=Bedrock+Chat&iso=20180924T19&p1=70&am=15. https://hangouts.google.com/call/4noypIUSvl1ljNNgs47mAAEE\nEdit: RIP I totally messed up the recording. \u270c\ufe0e('\u03c9'\u270c\ufe0e ). lel. I definitely appreciate the work that goes into ClassicPress: creating the composer package and whatnot. WordPress.org has ignored composer for 6+ years at this point. I commend y'all for pushing WP forward in your own way.\nThat said: Bedrock itself is definitely the most stable and least divisive project under the roots umbrella. No matter how opinionated you are about theming, dev ops, plugin development: Bedrock makes sense. If you try to roll your own WordPress 12-factor project scaffold with git, package management, and sane-configuration: you end up with a clone of Bedrock every time.\nPresently ClassicPress doesn't fit into the Bedrock status quo. It's nothing personal: It's just certainly too early in the project's life for me to officially recommend ClassicPress alongside WordPress in Bedrock.\nOn the technical side: I don't see any issue with a fork of bedrock that tracks the ClassicPress composer package. It should accomplish everything you want.\nKeep fighting the good fight!. @tristanbes as a user: specifically what features in v3 are you missing from v2?\nhttps://github.com/vlucas/phpdotenv/pull/311 Looks like a pretty solid feature . Works for me, @tristanbes did you try this out too?. I'll give this a go tomorrow and merge.. Sweet, works here!. > Great news thanks :-), if possible tag a new release right away so we can all benefit from my 2 last P\n@swalkinshaw @retlehs Let's get #412 in and then tag a new release? 1.12.0?. +1 for DATABASE_URL. swalk's version is easier to understand for me\n. this should be php 7 or omitted. Omit this if possible.. Thinking maybe travis db testing integration should be a blog post or something separate. There are many ways to skin this cat (docker, external dbs, etc) so best to leave up to the user's discretion. We shouldn't even need a db for unit tests, that is for e2e tests.. this is a good change. what is going on here?. Honestly don't really want to be married to wp-phpunit. We should leave this open ended and just give people raw phpunit and let people choose whatever approach they want. eg https://github.com/10up/wp_mock type approach or full on unit + e2e tests and such.\n@johnpbloch what do you think?. :+1: . why use either? why not just inline the var?. Hey! Thank you for taking a look at this. \nI understand where you are coming from when suggesting \\LogicException. However, I am still going to advocate for \\RuntimeException.\nIn general when trying to determine what exception class to extend I always look at what other exceptions subclass it. Let's look at the exception hierarchy with some cherry-picked examples:\n\nLogicException (extends Exception): Exception that represents error in the program logic. This kind of exception should lead directly to a fix in your code.\nBadFunctionCallException: \nBadMethodCallException\nDomainException\nInvalidArgumentException\nLengthException\nOutOfRangeException: Exception thrown when an illegal index was requested. This represents errors that should be detected at compile time.\n\n\nRuntimeException (extends Exception): Exception thrown if an error which can only be found on runtime occurs.\nOutOfBoundsException: Exception thrown if a value is not a valid key. This represents errors that cannot be detected at compile time.\nOverflowException\nRangeException\nUnderflowException\nUnexpectedValueException\n\n\n\nThe fact that the runtime has been polluted with unexpected constants is something that cannot be detected at compile time. Especially since we dynamically build this configuration based on environment variables.\nTake a look at the get method of \\DS\\Map: https://secure.php.net/manual/en/ds-map.get.php. This throws an OutOfBoundsException (extends RuntimeException) if the key could not be found and a default value was not provided.\nLastly consider the following completely valid use case:\nJankyHomebrewDBClient.php\n```\nif (!defined('DB_PORT')) {\n  define('DB_PORT', 3306)\n}\nclass JankyHomebrewDBClient {\n  // ...\n}\n```\nconfig/application.php\n// ...\nConfig::define('DB_PORT', env('DB_PORT'));\n// ...\nConfig::apply();\none-off-db-migration-script.php\n```php\n// I just want to connect to the DB I don't need WordPress\nrequire_once DIR . '/vendor/autoload.php';\nrequire_once DIR . '/config/application.php';\n$client = new JankyHomebrewDBClient(/ ... /);\n```\nThis will throw a ConstantAlreadyDefinedException at runtime. I don't necessarily consider this a logical error, since JankyHomebrewDBClient can never tell if it is going to define DB_PORT at compile time.\nWhat do you think?. Yep this needs to be in here. The user should be able to recover from the exception without incurring a warning though. Lemme think about this. :+1: changed over at https://github.com/roots/wp-config. Yep! I am going tag 1.0.0 before this is merged. whoops! I'm sloppy haha. What if we just did Config::define('DISALLOW_INDEXING', WP_ENV !== 'production'); in config/application.php\nand then \nphp\nif (!defined('DISALLOW_INDEXING') || DISALLOW_INDEXING !== true) {\n}\nIt makes the code read a bunch better:\nCurrently:\n\nIf we are on prod don't disallow indexing\n\nProposed:\n\nIf we aren't on prod disallow indexing\n\nAdditionally this makes the functionality \n- super easy to trace via config/application.php\n- does not rely on magic string 'production'\n- ability to be overridden per environment with new config system. suggestion\nif (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {. Rofl can't believe I am even doing this\nhttps://3v4l.org/Kkrc9/perf#output vs https://3v4l.org/FlTqR\n$dsn = (object) parse_url('postgres://AAAAAA:BBBBBBBBBBBBBBBBBBBB@CCCCCCCCCCCCCCCCCCCCCCCCCC.compute-1.amazonaws.com:5432/ddddddddd'); vs $dsn = parse_url('postgres://AAAAAA:BBBBBBBBBBBBBBBBBBBB@CCCCCCCCCCCCCCCCCCCCCCCCCC.compute-1.amazonaws.com:5432/ddddddddd');\n| Trial | PHP Version | User Time (s) | \n| --- | --- | --- |\n| (object) | 7.3 | 0.009 |\n| (object) | 7.3 | 0.009 |\n| (object) | 7.3 | 0.009 |\n| no cast | 7.3 | 0.007 |\n| no cast | 7.3 | 0.007 |\n| no cast | 7.3 | 0.007 |\n| (object) | 7.2 | 0.008 |\n| (object) | 7.2 | 0.008 |\n| (object) | 7.2 | 0.008 |\n| no cast | 7.2 | 0.006 |\n| no cast | 7.2 | 0.006 |\n| no cast | 7.2 | 0.006 |\n| (object) | 7.1 | 0.017 |\n| (object) | 7.1 | 0.017 \n| (object) | 7.1 | 0.017 |\n| no cast | 7.1 | 0.003 |\n| no cast | 7.1 | 0.003 |\n| no cast | 7.1 | 0.003 |\n7.1 takes a hit, but that is about to be EOLed this year. Nobody should be starting a new bedrock project on 7.1, why would they?\nI say just roll with (object), it looks nicer.. @swalkinshaw tie breaker please haha. For posterity: \nIf you were skeptical about my above table's results: you were correct to think so. The \"User Time (s)\" is off by a couple orders of magnitude.\nHere's a better benchmark: https://gist.github.com/austinpray/ed8e2aab4b757f1e41d5298584eb1590 / https://docs.google.com/spreadsheets/d/1_MAFd_pxs333myM8WPsOnzBb0hh4ZtvJ5r2zj2HAfJw/edit?usp=sharing\n\nSo yeah there's a difference in php 7.1 but 7.2+ there is literally no difference whatsoever.. ",
    "jhches21": "Okay, sound good.\n. ",
    "mAAdhaTTah": "It doesn't make more sense to leave them in envvars? It's not secret info, but it is going to be different between environments (an \"environment variable\", as the name suggests). My dev sites is .dev, live is .com, and setting them in envvars means I don't have to switch it around in the repo while I'm working. I kinda prefer in it envvars.\n. For me, the question is mostly of DB syncing. If multiple people are pulling down the database, they have to find/replace as they pull for the new local url. Some people use localhost, some people (like me) use the xyz.dev setup (which takes some tinkering with your dev machine's apache setup), and others perhaps do something completely different (127.0.0.1 perhaps?), and I seek to avoid imposing my particular dev machine's method on others.\nHowever, all of that is moot if you're using Vagrant (which, I believe, will define and set up the .dev stuff for you), so maybe this should be merged at the same time as that feature is added? I haven't used Vagrant yet, but I'd like to, so I don't know if that changes things.\nDoes that make sense? I actually think I'm convincing myself that you're right :).\n. If Vagrant can set the development domain name used, then this should be set in config/environment, but if not, leave it in envvars. I was looking at some of the docs, but I'm not familiar enough with Chef/Puppet/Ansible to know if any of those provisioners can set the domain name as well.\nEdit: is Vagrant functionality being developed in public? I'd like to help test/learn it if so.\n. Cool - will Bedrock's Vagrant implementation use that? Basically, I don't think you should hard-code the dev url in the repo's config unless you can hard code the developer's URL choice (by including it in Vagrant).\n. @ivomarino FWIW, that's what I did when I was using the plugin. Just make sure you don't host (or accidentally post) your composer.json anywhere!\n. @ivomarino No, it's great, but the new pricing was too expensive for a hobbyist like me.\n. Git can be a cruel mistress.\n. What happened here?\n. Worth noting 4.0.1 broke some plugins due to bad plugin dev practices. Not sure we want composer to auto upgrade that.\n. Related: https://github.com/roots/bedrock-ansible/issues/61\n. :+1:\n. It kinda looks like the bedrock autoloader is double loading the cache plugin. I don't know WPEngine and their setup, but that's where I'd look. \n. > Fix for environments where dirname(__DIR__) returns just a slash / which makes $webroot_dir = //web.\nThis happens? I guess if you're serving from /www/ or something.\nAlso, wouldn't this change always remove a leading /?\n. I don't know, if the menu is to install plugins, and we're deliberately disabling the ability to install plugins, that doesn't seem like a bug to me. \n. Seems to me if you're using install_plugins for something other than installing plugins, you're _doing_it_wrong().\n. You need comments in your environment variables?\n. wp-admin itself is going to increasingly rely on API, and the API itself is going to become an increasingly important part of the ecosystem, although it obviously isn't yet. I would be opposed to bedrock disabling such a major feature by default, as its strength is going to be in the sheer number of sites that support it.. > Never called it a bug.\nIf it's not a bug, then it doesn't belong on the issue tracker. You should open a thread on discourse.. You might be better off using WP-CLI aliases than this.. This syntax works...? Didn't know that!\n. ",
    "jshimko": "Another angle...\nMy server side wp-config.php starts out as a wp-config.php.erb and I use capistrano/ruby to insert my credentials and generate a wp-config.php for whatever stage I'm using at deploy time.  I define all stuff in a database.yml file (gitignored) and do one of these deals in my dynamically generated wp-config:\ndefine('DB_NAME', '<%= database['database'] %>');\ndefine('DB_USER', '<%= database['username'] %>');\ndefine('DB_PASSWORD', '<%= database['password'] %>');\ndefine('DB_HOST', '<%= database['host'] %>');\nI haven't updated my public version of my repo in a few months (because I'm in the process I've converting it all to Capistrano 3), but you can at least get the idea of my configurations here... https://github.com/jshimko/wordpress-deploy/tree/master/config\n. ",
    "sebastiaandegeus": "We use the .env like this:\nWP_HOME=dev.mydomain.com\nAnd in the wp-config.php (or application.php) we use:\ndefine( 'WP_HOME', PROTOCOL . '://' . getenv( 'WP_HOME' )  );\ndefine( 'DOMAIN_CURRENT_SITE', WP_HOME );\ndefine( 'WP_SITEURL', WP_HOME . '/wp' );\nThis way you only need 1 setting per environment and you can also support a website where only some pages are HTTPS (it happens in the field)\n. I can't seem to get this working. I cannot login on the main website in a multidomain multisite installation. I used this .htaccessfile:\nRewriteEngine On\nRewriteBase /\nRewriteRule ^index\\.php$ - [L]\nRewriteRule ^wp-admin$ wp-admin/ [R=301,L]\nRewriteCond %{REQUEST_FILENAME} -f [OR]\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^ - [L]\nRewriteRule ^(wp-(content|admin|includes).*) /wp/$1 [L]\nRewriteRule ^(.*\\.php)$ /wp/$1 [L]\nRewriteRule . index.php [L]\nThe login on the main page just comes back to the same page without any errors.\n. Our situation is that we have a multidomain multisite with domain mapping plugin. \nI don't think we can get it working for now... Multidomain multisite is still way too buggy to start moving around the structure of wordpress itself. \n. @francescolaffi That sounds interesting. Do you have an example configuration / setup somewhere? \nOn  the main website we keep getting errors about cookies being blocked on the browser. But it's possible to login in a subsite in the network. So that's weird.\n. It happens anywhere if plugin or theme developers use any of the enqueue methods. \nthe plugins_url function returns an absolute url which is correct but the enqueue functions later mess this up by turning into a relative url but using the WP_SITEURL constant. And in the Bedrock case this WP_SITEURL has the added /wp \nAll is fine if this is called when the root is WP itself and wp is not inside a sub directory.\nMaybe this can be fixed with a filter on the right place. But so far I haven't found it yet.\n. Maybe you can try this WP-CLI command and: https://github.com/sebastiaandegeus/wp-cli-salts-command\nYou need to change something in your application.php or wp-config.php though. So you can include the correct salts file.\n// ====================================================================\n// Load the salts for this environment\n// https://api.wordpress.org/secret-key/1.1/salt/\n// ====================================================================\nif ( file_exists( ROOTPATH . 'config/salts.php' ) ) {\n  require ROOTPATH . 'config/salts.php';\n}\nThe command uses the official salts API to generate the salts in defining constants format.\n. No it's a fresh install of 3.9.1 But we use this in our composer:\n\"type\": \"package\",\n      \"package\": {\n        \"name\": \"wordpress/wordpress\",\n        \"version\": \"3.9.1\",\n        \"type\": \"webroot\",\n        \"dist\": {\n          \"type\": \"zip\",\n          \"url\": \"http://wordpress.org/wordpress-3.9.1-no-content.zip\"\n        },\n        \"require\" : {\n          \"fancyguy/webroot-installer\": \"1.1.0\"\n        }\n      }\n    },\nmaybe it's confused with the no-content variant?\n. I've figured out why this pops up. \nIf you have a WPLANG defined and you download another language version this notification keeps showing up. \nWe used the wordpress-3.9.1-no-content.zip because we did not want to have the extra themes and standard plugins that are included in the nl_NL version (they don't ship a no-content version...)\nWe ended up using the nl_NL version. It's a WP core issue which I don't see a way around for now.\n. Well, there are constants but there is no constant or wp function to figure out root path of the bedrock project. This makes it hard to construct filepaths when you only know the URL. \nABSPATH returns only the path of wp itself and other constants and functions can return the content path but then you also have start messing with the web/app/ from the URLS because they exist both in the URL of the file at the beginning and at the end of the content path.\nI figured 1 constant to make sure it's Bedrock was fine, but I'll have to implement my own functions to figure out the paths then.\n. ",
    "kucrut": "@swalkinshaw Fixes applied in https://github.com/kucrut/bedrock/commit/532c89639eec3c29c18fa4b39b777fc8d8d04960\n. Since we're defining WP_HOME thus making it unchangeable in the Settings > General page, shouldn't it contain http(s)? Or maybe I'm missing something here :wink: \nI use DOMAIN_CURRENT_SITE just because that's the constant WordPress uses.\n. ",
    "ptibbetts": "Not so much a problem, more of a.. concern?\nWhen should I have installed the capistrano/composer gem? Just checking because I manually installed bedrock and there's no mention of installing the gem in the docs so I assumed it would be managed for me (somehow, some of this Ruby stuff is black magic to me).\nThe mention of the 503 errors was just in case something would have installed it for me and it was not working (because it was receiving a 503).\nDoes this just need a line in the docs to install the gem? Could it be added to composer.json?\nOr am I getting this wrong?\n. Thanks for clearing that up Scott. I'll give it a try tomorrow.\n(I'm a little concerned I've spent so long today thinking Composer would be managing my gems...)\n. ",
    "aaemnnosttv": "Done!\nOn Sat, Jan 18, 2014 at 12:36 PM, Scott Walkinshaw <notifications@github.com\n\nwrote:\nThe lock also needs to be updated (at least until we make a decision about\nits existence in this repo).\n\u2014\nReply to this email directly or view it on GitHubhttps://github.com/roots/bedrock/pull/29#issuecomment-32687476\n.\n. I have to agree with @christiansherry.   It seems rather counter-intuitive for mu-plugins to be loaded after normal plugins.  In my opinion, a mu-plugin should load before any normal plugin.\n\nChristian's pull request addresses this matter by loading them immediately.  Even loading on muplugins_loaded can be too late, on multisite for example, where network-enabled plugins are loaded before that hook.\nRegarding the double loading issue, under what conditions would that happen?  That seems rather unlikely that a plugin could be installed as both (assuming it's installed via composer) where it can only have one type or the other.\n. > edit: my vote is to treat them the same\nAgreed! @swalkinshaw \n. I don't entirely agree with this change, primarily because muplugins_loaded may be too late in some cases.  Particularly, in a multisite environment, any network-enabled plugin would be loaded first, before the bedrock autoloaded mu-plugins (source).  This would mean that any normal network-enabled plugin would be loaded before an autoloaded mu-plugin.  I see this potentially causing much more problems than the current implementation.\nMU plugins should always load before any normal plugin (IMO), as that's one of the key defining features as mentioned in the codex\nIf a hooked loading is desired for consistency - rather than the current immediate loading (which is more true to a real mu-plugin), I would recommend an alternative:\nAdd a new mu-plugin named something like zz-bedrock-autoloader-hook.php.  This plugin would contain the hook that the bedrock-autoloader would hook to for loading the plugins (eg: bedrock_muplugins_loaded)\nBecause mu-plugins are loaded in alphabetical order, the hook plugin would be loaded last, thus making all other mu-plugins available at autoloader-loaded load time, yet still loading before network-enabled or muplugins_loaded.\nAlternatively, instead of adding a new plugin file for the hook, bedrock-autoloader.php could be renamed to zz-bedrock-autoloader.php and the hook could be called within the same file.\nI would be happy to propose my own PR for this if others are open to considering it?\n. I agree with the weakness of the prefix and the annoyance of the multisite weirdness.  I looked into it a bit more and rather than prefixing with zz it could use a tilde ~, which should be a cross-platform valid filename character, and will always be sorted/loaded after files that start with z.\nAs a test, I created a few simple mu-plugins (not bedrock autoloaded) to check the load order:\napp/mu-plugins/\n- a.php\n- b.php\n- c.php\n- z.php\n- ~last.php\nEach plugin contained the same code to simply output the name of the file to indicate the order they were loaded in \nphp\n<pre><?php var_dump( basename(__FILE__) ); ?></pre>\nHere is what I got:\nstring(5) \"a.php\"\nstring(5) \"b.php\"\nstring(5) \"c.php\"\nstring(5) \"z.php\"\nstring(9) \"~last.php\"\nwp_get_mu_plugins() uses php's sort() function (source) to set the load order of the plugins once the directory has been scanned,  therefore the order should be consistent cross-platform as it is done by php.\nThoughts?\n. The tilde is and has been supported by Windows as a filename character for a long time as @QWp6t said.  MS Word is one example that still uses it today as the first character in some of it's temporary files.  I can test on Windows, but we should probably have a few others test as well to be certain.\n. Enter the dotenv command\n. I'm not implying that any sub-directory there would be from a package manager, but in this case, wordpress-muplugin is a package type, with web/app/mu-plugins/{$name}/ as the installer path.  \nIt doesn't make sense that all other package installer paths be ignored while this one is not.\n. @swalkinshaw - Shouldn't boolean environment variables should be set as an integer for this reason?\nThe if ( defined('CONSTANT') && CONSTANT ) conditional check is used in many places in WordPress.\nIt's true that defining CONSTANT=false in .env would return a false positive, but defining CONSTANT=0 would be evaluated correctly.\nThe way it is now, if I would define DISABLE_WP_CRON=1  in my .env, it would evaluate to false because \"1\" does not equal \"true\", and for that matter neither does \"0\".\nI suggest reverting this change because I think it is more in line with the conventions followed in other configuration files to use 1 or 0 for boolean values.  1 and 0 are also going to be interpreted correctly by both WP and bash.  Also, as @andrewfrankel pointed out, 1 and 0 will not be misinterpreted simply because of a case-sensitive difference.\nI think it would be better to document the best practice for setting boolean values in the .env file rather than making this check simply for the semantic value.\nIn summary:\nphp\nfalse === (bool) \"0\"\ntrue  === (bool) \"1\"\ntrue  === (bool) \"false\"\ntrue  === (bool) \"true\"\n. Originally I opted for the function because anonymous functions still have access to $this, however static anonymous functions do the trick just fine :)\nYour proposed solution would still introduce the $plugin_file variable into the scope, which is unnecessary.\nAlso fixed the sniffer error.\n. Anything else to fix here?\n. Thanks for considering my PR Scott.  It sounds like I don't have your vote just yet but you didn't close it in my face (appreciated).. allow me to try to make my case.\n\nBedrock already has 1 level of indirection with wp-config.php and I don't really want to add another one.\n\nWhy is that? If there was no benefit then I would totally understand, but it's not organization just for the sake of organization;  it's an effort to make Bedrock extensible.  Couldn't you make the same argument for not moving templates into their own folder in Sage 9?  I love that change, even at the cost of the indirection (which is much more substantial IMO seeing as it has to change an option value to work).  To your point, the remaining parts to application.php could also be moved to modules, or to wp-config.php, removing the need for application.php altogether, and thus keeping the level of indirection the same; I think the way it is in the PR is better though.\nI'm all for taking inspiration from mature, widely-used frameworks like Rails, but I think it would be a mistake to try to mirror them because there is a big difference in context.  Laravel (also heavily Rails-inspired) separates the configuration into pieces, although differently.\nThere may be a better name for the modules folder, it's not the first name I thought of either.  If there is another convention that is ubiquitous or more intuitive, I would be all for it; initializers in this context does not sound that intuitive to me though because they don't initialize anything.\nRegarding the concept of initializers, there's a big difference between one of these module files and an mu-plugin (ie: all of WordPress core loading).  Timing is key, and capability is much different.\nApart from that, (and this could be a separate PR of course) but the constants I introduced would also be valuable, I don't see any reason not to use those.  Once you no longer have a need for the temporary variables, there is also no need to keep everything in one file like that either.\nI think it's also worth considering the upgrade path for the user, as Bedrock is a project that has been evolving over time as well (which is part of what makes it great!).  It's much easier IMO to replace a few files than to diff a bigger one and upgrade via surgery.  By encouraging users to add customizations to different files, this would essentially eliminate the need to do any manual editing of \"core\" Bedrock files/config.\nI hope that all makes sense.  Thanks again for reading through all that, and your time in corresponding. \n. Thanks Scott.  I'm curious what you mean about \"solving\" extensibility?  I don't mean to sound facetious, but how would it look differently if it were solved?  Is it possible to solve?  I think being able to drop in a file and \"it just works\" is a pretty good experience all around :D\nIf you and the team decide it's not the right fit for Bedrock, I respect that; just trying to understand all perspectives.\n. is_plugin_active only checks for the presence of the plugin in the active_plugins option. Trying to use this function to check if an mu-plugin is active will fail because they are not included in this option since they are always on.\nYou should raise this as a question on discourse as this isn't a bug with Bedrock.. How about just setting the dotenv vars you want to change with environment variables before running wp-cli as phpdotenv will not override vars that are already set by default.\nSomething like this should work:\nsh\nsource .env.cli && wp ...\nIf that works then you could wrap that into a bash alias or something else to remove the repetition there.\nAlternatively, you could add a require key to your project's wp-cli.yml file and load your cli-specific .env.cli file there\nE.g.\nyml\npath: web/wp/\nrequire:\n  - config/cli-bootstrap.php # create this file\nconfig/cli-bootstrap.php\n```php\n$root_dir = dirname(DIR);\nif (file_exists($root_dir . '/.env.cli')) {\n    require_once($root_dir . '/vendor/autoload.php');\n    $dotenv = new Dotenv\\Dotenv($root_dir, '/.env.cli');\n    $dotenv->load();\n    $dotenv->required(['DB_NAME', 'DB_USER', 'DB_PASSWORD', 'WP_HOME', 'WP_SITEURL']);\n}\n```\nUntested, but should work\n. Great! I'll start putting together a PR for this very soon then.. Thank you everyone for your feedback! It seems like everyone is on board with the idea that adding some boilerplate for testing is a step in the right direction but maybe it shouldn't be opinionated in choosing a framework to include boilerplate for.\n\nPHPUnit + wp-phpunit is the best way to test your wordpress installation.\n\nI don't particularly agree with the idea that including a library is making such a statement, nor would I make that claim myself.\nThe library is really just the WordPress core library that supports running PHPUnit in a WordPress environment. It's just been made easily installable via Composer. I would say that this library is the one that most people are going to be familiar with in a WordPress context (WP CLI scaffolds it, and most articles/resources on testing in WordPress are based on it).\nOf course others are available, but I think if Bedrock were to include a more complete testing boilerplate (as proposed) that it offers more value than if it was more barebones. By no means does it lock anyone in to using it or impose anything that isn't easily changeable which I think is the important aspect of the principal of remaining framework agnostic.\nWith that said, I fully respect the teams decision to keep Bedrock framework agnostic if that's the consensus. In my opinion, including the \"official\" core library for testing is still relatively framework agnostic because it's part of WordPress core.\nEither way, I'm still interested in helping with this initiative in whatever way I can.\n. The database is required by WordPress' test library. I agree that it isn't setup for pure unit testing, but I also think that this kind of higher level testing is more valuable at the application level than pure isolated unit tests.. This is not completely removed, but the define is moved into the environment configuration files. This is because this constant cannot be defined in the testing environment, as it will define it itself without checking if it has already been defined or not. \nThe alternative to moving it to the configuration files (and not to testing.php) is to wrap this with a conditional to only define it if WP_ENV !== 'testing' which is a little less clean IMO.. That's a fair statement, and I'm probably biased as the package creator, but wp-phpunit is more practical for the average user as it will be what most people are familiar with IMO. I don't think it would be a problem for anyone who is familiar with other testing frameworks to replace and use whatever they want.\nI think reducing the setup to bare PHPUnit would be less valuable for more people, and wouldn't really make a difference to those who are want to use something else. It's just a boilerplate. No one is married to anything.\nOf course bare PHPUnit is better than nothing, I think we agree on that.. Agreed. This has to do with PHPUnit more than anything. The reason this is here is so that all dependencies installed will be compatible with PHP 5.6 when it runs on Travis. This is because, even though PHPUnit 5.x is required, because my local version of PHP is 7.2, some of PHPUnit's dependencies will be installed with versions which are not compatible with 5.6. \nThe alternatives to doing this are:\n- Requiring in the offending dependencies and locking them to a version which is compatible with PHP 5.6. Not a good option as those dependencies could always change and this would be a pain to manage.\n- Running composer update on Travis instead of composer install. I don't like this as much either as its less predictable\n- Always run composer update with PHP 5.6. \nThis is a very useful configuration would be something that could be added to the docs, as most users probably aren't using Bedrock in a multi-version environment. Users can (and probably should be) set this to their own value based on their target environment.\nWith PHP 5.6 and 7.0 reaching end of life at the end of the year perhaps this won't be necessary anymore.. Use printf() instead of echo sprintf(). The else is not really necessary as there's no harm in hooking onto an admin hook for a non-admin request. I would personally omit it and save the extra braces + indentation; is this a WP/Roots style convention?. This shouldn't be necessary anymore now that Config has been moved to a package.. +1 for extracting this as a package!\nHow about ^1.0 instead of dev-master?. ",
    "lautreamont3": "Tested and only works if configured with:\ndefine( 'WP_LANG_DIR', $root_dir . '/wp/wp-content/languages' );\n(in config/aplication.php)\n. Found same function, that gave me idea to test with WP_LANG_DIR. Analyzing their function, so long languages is not in WPINC it will always result in WP_CONTENT_DIR.'/languages' dismissing that may not exists there (?).\nFor our purpose it mean that we must do something like this:\nif ( defined( 'WPLANG' ) && '' !== WPLANG && !defined( 'WP_LANG_DIR' ) ) {\n  if ( !file_exists( WP_CONTENT_DIR . '/languages' ) ) {\n    $old_content_dir = $root_dir . implode( '', explode( WP_HOME, WP_SITEURL ) ) . '/wp-content/languages';\n    if ( file_exists( $old_content_dir ) && @is_dir( $old_content_dir ) )\n      define( 'WP_LANG_DIR', $old_content_dir );\n  }\n}\nI don't know how to think about this problems because I don't know what people in WP wonted with this kind of language support.\nExample:\nIn my language (serbian) in original WP installation for sr_RS there is languages directory with translations and plugin (srlatin.php) for switching between scripts (cyrilic and latin, cyrilic is default because it translate to latin one on one but not viceversa) and when I install WP with composer (with different WP_CONTENT_DIR) WP treat installation like WPLANG is empty. No languages and no plugin. Now if I set WP_LANG_DIR there is languages but no plugin and plugin is not on WP list of plugins so I can install it with composer.\nAnother problem is that many countries write with two scripts and must have solutions for that but I think that solutions are different.\nI hoped that webroot-installer in composer will put the end to it end simply move whole wp-content to WP_CONTENT_DIR location.\n. Part of my script to install WP with bedrock:\n```\ncd /vagrant\ngit clone https://github.com/lautreamont3/bedrock.git site\ncd /vagrant/site\nrm composer.lock #I don't have to do that because there is no composer.lock in my repo\ncomposer install\nmv .env.example .env\nmv wp/wp-content/languages app\nmv wp/wp-content/plugins/ app/plugins\nmv wp/wp-content/themes/ app/themes\nrm -rf wp/wp-contnet\n```\n. > Another thought I had: it would be nice to have a Composer repository for the language packs (just like WPackagist exists for plugins). Then you could add language packs as needed as dependencies separate from WP core.\nFollowing your idea about Composer repository for the language packs. I tested an it can work. But it will not happened. Long story short. After I found solution, I wanted to post pull request in Composer/Installers to register language type and directory (like muplugins, plugins and themes, just one line of code), but find out that someone else, month ago, have same idea and was refused because, i really don't know why. You can look up on https://github.com/composer/installers/pull/116.\n. WP loads only one language in /wp-content/laguages no subfolders other then themes.\n. That true (things die there), I ask question 8 months ago and nothing. Only bunch of stupid people and their opinions, \"how can I dare to say that something is wrong in WP\".\n. \"installer-paths\": {\n      \"web/app/plugins/{$name}/\": [\"type:wordpress-plugin\"],\n      \"web/app/mu-plugins/{$name}/\": [\"type:wordpress-muplugin\"],\n      \"web/app/themes/{$name}/\": [\"type:wordpress-theme\"]\n    },\nWhat about app/uploads not in web.\n. You did not change installer-paths in composer.json to web/app/....\n. I am not shure, because I constantly change my vagrant/apache configuration, but I don't think this is configuration error. So I think you need to add this #ADDITION to config/application.php:\n$root_dir .= '/web'; #ADDITION \ndefine('CONTENT_DIR', '/app');\ndefine('WP_CONTENT_DIR', $root_dir . CONTENT_DIR);\ndefine('WP_CONTENT_URL', WP_HOME . CONTENT_DIR);\nThis will satisfy WP_CONTENT_DIR and ABSPATH but not WP_CONTENT_URL (change of CONTENT_DIR to /web/app will influence both _DIR and _URL, I am kinda arguing with muself).\nBECAUSE YOU ONLY READ END OF MESSAGES I SPLIT THIS TO POINT SEPARATE TEXTS\nI have one question my configuration don't work if I leave\nrequire_once('../vendor/autoload.php');\nin web/wp-config.php, I must use absolute path or I get error\nPHP Fatal error:  require_once(): Failed opening required '../vendor/autoload.php'\nam I doing something wrong?\n. No problemo, with this changes everything works like standard Bedrock.\n@rslnk Dont forget ABSPATH.\n. Correct .gitignore\n```\nWordPress\nwp\n.htaccess\n```\nto\n```\nWordPress\nweb/wp\nweb/.htaccess\n``\n. It's not custom built. I try on official mysql and mariadb and get DB_NAME in link-ed container.\n. I understand what you are saying but many people just pull mysql from \"official\" (I do not know who made it official) repository and work with it. If you do that you have problem.\n. I am really soory, its my mistake and ignorance. I know that it was not in mysql-docker-built-scripts because I was study them and know that its docker mechanism, but I, obviusly, did not understand mechanism enough. That name of envionment variable is build by container linking process and use simbolic name witch user specify on start of linking container. Its alias for connection. Option is something like--link container:alias. I useddbfor alias and inside linking container getDB_NAMEwhen I, eventually, usedmysqlI gotMYSQL_NAME`.\n. ",
    "ddebernardy": "I've created a WP ticket: https://core.trac.wordpress.org/ticket/27050\n. @swalkinshaw so true :+1: \n. @swalkinshaw: I got it to work fine, yeah, albeit not necessarily the way you'd want it to work.\nIn essence, I filter siteurl so it returns the home url, and I mess around with the WP rewrite rules and cookies so that nothing breaks when doing so. In doing so, WP in /wp will always return admin urls like /wp-admin, multisite or not, and that fixes all of the problems indirectly.\nThe code involved is here:\nhttps://gist.github.com/ddebernardy/10529951\nThe actual bug fixes plugin it's part of should get released shortly as a composer package \u2014 I basically need to write a whole bunch of unit tests for it, for my mu-plugin loader and for the wordpress bridge and wordpress bundle packages that they both depend on. ;-) \nAn alternative approach, which I also tried, is to filter the network admin urls so that they point to e.g. /wp/wp-admin/network instead of the incorrect /wp-admin/network values returned by WP. The main merit of doing so is simplicity; personally, I prefer getting /wp-admin urls.\n. In that case, a simple filter on the network admin urls (and user admin urls) so as to fix the folders' directory is the way to go. I'm pretty sure I documented a (partial) fix to that in one of the tickets you referenced.\nRe the packages, it's in unreleased alpha state, but you can try the package here:\ngit clone git@mesoconcepts.com:wordpress/app.git\nThen run composer install in there, or ./bin/update. Configure by renaming and then editing the dist files in app/config as appropriate. (And yes, it's very much like bedrock or the Mark's WP Skeleton). :-)\n. ",
    "onnimonni": "I wanted to use wordpress package with Finnish languages so I created this for automation:\nhttps://github.com/onnimonni/Dokku-bedrock/blob/master/scripts/Bedrock/Installer.php\nLook at installLanguages()\nCode isn't my finest but works just fine :).\nIt moves language files from wp/wp-content/languages to app/languages/. Then it searches for first file matching ??_??.mo, ???.mo or ??.mo. Then appends WP_LANGUAGE envvar by that same name. Use that envvar when defining WPLANG in application.php\nhopefully it's useful. (It also installs salts a bit differently)\n. There must be billion options but I'll do it like this:\nchange wp-package from composer.json for package that has your language.\nAdd installLanguages script that I provided in this thread.\nAdd that script in post-install-cmd && post-update-cmd in composer.json.\nUse it to define('WP_LANG') somewhere in your config with getenv('WP_LANGUAGE'). This comes from script.\n=====>That way you can ignore language files from vcs. Because composer installs them from wp-package.\nAlternatively:\nDownload lang packs and put them manually to web/app/languages.\nIf you find better ways to have them eg straight from wppackagist. please tell me :)\n. It doesn't add any language packs. It just moves them from wp-package that you have defined in composer. Bedrock searches languages from app/languages and not from wp-content. This script moves the lang for you and looks for the language abbreviation from language files.\nSo give composer the package that has wordpress in your language and it'll work fine. Eg I'm using this finnish package:\nhttp://fi.wordpress.org/wordpress-3.9-fi.zip\nOtherwise use something else, and please let me know if there's a mirror containing only langpacks. I want to use it too :)\n. I made an custom satis repository which downloads latest language packs and makes them compatible with composer. It includes a solution of how to install multiple languages into same folder. It is a bit hacky solution but works really well for me. The repo is located here: http://languages.koodimonni.fi and discussion about it in roots discourse.\nSatis is hosted in github pages and repos are just links into wordpress.org so it should be available during all times :)\n. ",
    "ragulka": "@onnimonni - I don't understand how does your solution exactly work? There doesn't seem to be any way of installing new language packs. It seems that you assume that the languages are already present in the wp package, but that's not true - my wp-content folder does not have a languages directory at all.\nIs there perhaps a mirror/repository for installing WP language packs with composer? It would actually be great if installing wordpress/wordpress would also install any language packs that I have defined. That would help with keeping wordpress and translations in sync.\n. Yeah, I'm looking for something that would work for a multilingual site. I cannot simply define one language, I need to support 4-5 languages and it would be best if they were handled by composer or Bedrock somehow. Language packs for WordPress can be found here: http://i18n.svn.wordpress.org/ - I opened an issue with wp-packagist to see if they'd like to add support for language packs as well.\nBut to be honest, I am not sure this is wp-packagist territory, or more of a bedrock territory.\n. ",
    "kraftner": "Is there anything new on this issue? As language support is a pretty basic feature this currently seems to be a deal breaker for using bedrock as far as I can see.\n. Well but as far as I can see there are two options:\n- change WP_LANG_DIR\n- move the files\nChanging WP_LANG_DIR will probably cause some issues with plugins like e.g. WPML\nMoving the files manually isn't really an option, instead I think that this should be automated which probably is a good fit to be done by bedrock.\nIs there anything I didn't get right?\n. ",
    "louim": "@Foxaii just tested it locally using symlink, and it work. Would it be possible to add this to the composer post-install so the symlink is made locally? Capistrano will be used for the server symlink task.\n. I believe a page in the wiki explaining solutions would be helpful for those who haven't seen the forum. Anyone volunteer to create it?\n. @austinpray not totally my fault :P. In v1.x dotenv would validate even when not loading file. See :https://github.com/vlucas/phpdotenv/issues/101\nBedrock doesn't care (and I think it is a good idea) from where the ENV vars  come from ( could be passed as server vars, or directly loaded from $ENV=...). \nBut it will check if the variables that are needed are set , hence the required that is called outside the condition. I see that it is a problem in the current dotenv version, and we should find a temporary solution until it is fixed. @pcfreak30 have you checked if dotenv throws an error if you remove the condition and don't provide a .env file in the bedrock folder?\n. @swalkinshaw  I tried (and failed) to keep the original behaviour of Bedrock. I think that since we require variable to be loaded from the environment (be it through Dotenv or another mean), and that Dotenv provide a handy method to check that the variables are set (it does more that just check if the var is defined) we could keep using that. But it would require the upstream to be fixed to work like it was in v1.\nEither way, I fine with both options.\n. Fixes for this issue have been merged upstream https://github.com/vlucas/phpdotenv/pull/102. Ill keep an eye on this when it land on a stable release.\n. @pcfreak30 your fix is merged, so you can use the official repo :smile: I'll open another pull request when  the fix I made upstream is ready to be implemented in Bedrock.\n. @petterannerwall you seems to be using windows. It could be worth it to try running the test units from php dotenv and check if they pass. \nI never had the problem you encountered. It could be a Windows related problem, or it could be related specifically to your setup.\n. :+1: \n. ",
    "peec": "I created a pull request for this, and have it all working with WPLANG set. I can now set WPLANG to nb_NO and go into the wordpress dashboard and see nb_NO. I click \"Update\" and I got the new language installed. \nBasically symlinks are created on composer install/update, these symlinks are ignored in the .gitignore file so that deploying with capistrano works as well.\nAlso tested with WPML plugin that it works.\n96\n. ",
    "royduin": "Any updates on this? Currently languages are installed in the web/app/languages directory, Bedrock doesn't ignore this so by default languages needs to be commited in the projects repository. Maybe integrate this: https://discourse.roots.io/t/install-update-wordpress-languages-with-composer/2021 ?\n. @hyyan, that's a nice and clean solution. Just rewrite everything and don't allow file access in the root directory! @swalkinshaw: maybe you can make this part of the Bedrock project?\n. @hyyan, why not make it part of the Bedrock project? It makes it just better compatible, for people who are currently using the /web directory nothing changes because the .htaccess file will not be executed (it's outside the document root in that case).\nMaybe we can make the .htaccess more generic? The domainname inside is not ideal.\n. @hyyan, if your document root is currently set to the /web directory and you place your .htaccess in the root it will not be executed so it doesn't take any unnecessary resources.\nI'm going to experiment with the .htaccess to make it more generic, I'll come back on that.\n. @Foxaii, you're right (but your missing this one: https://github.com/roots/bedrock/blob/master/composer.json#L50-L54), but that's not that safe... that way the .env files are accessible.\n. @Foxaii, that's a possibility but it's much easier to have a .htaccess file in the root that handles the sub-directory structure. That way I can clone Bedrock, just change the composer.json file to my needs (plugins from wpackagist.org and a theme from a private repo), push it to my own project repo and do a git clone in my public_html directory on a shared hosting account.\nSo, why not include a .htaccess file that handles this in Bedrock?\n. Thanks for all the replies! Regrettably it will not be shipped with Bedrock. Maybe I'll fork it and change it to my needs.\nGreat work!\n. @hyyan, I'll look into it!\n. I can't name one who does. . ",
    "rossedman": "Definitely understand all of those points. I assumed it would be something like this. \nIs there any plans for a puppet version? Will it be NGINX and Apache?\nAs a long term goal it would be nice to be able to set a base box that is treated as a variable throughout the vagrant up process and it provisions the VM based on the box (like centos, ubuntu, whatever...). I know personally I am really interested in that because sometimes I have to deploy to different types of servers. \nI don't want to step on anyones toes just wondering your goals because I have been messing with bedrock and different variations of puppet + vagrant. You guys will probably beat me to finishing it anyways. :)\n. Awesome that answers my question! Thank you so much. I will continue on my path then. Love what you guys have done so far. It really is quite nice!\n. If you are trying to test a plugin you could add wp-cli/wp-cli to your composer.json file as well as add a wp-cli.yml file with path: web/app in it and then run vendor/bin/wp scaffold plugin-tests or vendor/bin/wp scaffold package-tests which will install behat tests.\n. @swalkinshaw I definitely agree SSH keys is ideal but sometimes that luxury isn't available, and I think the distinction between deployment and application makes a lot of sense when you put it like that. Thanks for checking it out. \n. :+1: Separation of concerns\n. @swalkinshaw I think that's a good solution. If someone wanted to trigger this after a composer build they could just use composer post-install\n. ",
    "rslnk": "I came across the same issues with WP_CONTENT_URL and require_once('../vendor/autoload.php'); while trying to incorporate this PR in my Bedrock configuration.\nTo solve the first issue with WP_CONTENT_URL, I've added a new CONTENT_ROOT variable:\ndefine('CONTENT_ROOT', '/web');\ndefine('CONTENT_DIR', '/app');\ndefine('WP_CONTENT_DIR', $root_dir . CONTENT_ROOT . CONTENT_DIR);\ndefine('WP_CONTENT_URL', WP_HOME . CONTENT_DIR);\nAs for the require_once('../vendor/autoload.php'); giving an error, my guess is that this has something to do with require_once function working relative to the path of the wp-config.php file from where it is called.\nAdding the full file path to the wp-config.php seems to work:\nrequire_once (__DIR__ . '/../vendor/autoload.php');\nrequire_once(__DIR__ . '/../config/application.php');\nNote: __DIR__ constant will work with php 5.3+\nBoth workarounds worked for me, however, I'm not sure if that would be the most elegant solution. Even though I've developed my first WordPress website by being inspired by the Roots theme a few years ago, I'm still only a beginner to the whole new concept of Modern Wordpress Development Workflow.\n. Sorry for submitting this PR again, I don't know if it's possible to make a pull request only for the latest commit.\n. Ok. I'm closing this request then and will open another one with the clean branch. Thanks for the tip.\n. @swalkinshaw sorry, I didn't notice, my bad. Fixed.\n. @swalkinshaw Done. But on second thought: dirname(__DIR__) somehow looks confusing to me. Perhaps it's better to use dirname(__FILE__) to keep things consistent, since we also use it in application.php to get an absolute path? Or maybe I just missing something...\n. ",
    "4selected": "What's the best to way to have \"htdocs\" instead of \"web\" dir? Do I have to fork your repo and modify it on my own?\n. Wow, that's fast. do you think it's good to update the README with the new web path for my fork? And leave you and Scott as authors in the composer file? Sorry for this questions, but I'm new to this :/\n. @swalkinshaw that you so much Scott!!!\n. ",
    "retlehs": "yep.\n. :moneybag::moneybag::moneybag:\n. next time post on roots discourse as per the contributing doc.\n. thanks, github must have started using larger image src's for their avatars very recently and there wasn't a size defined on our end. fixed\n. should probably use something like https://gist.github.com/markjaquith/39c4f465ecb94888b998\n. feel free to continue this discussion on our discourse\n. @sebastiaandegeus was this on a multisite install?\n. need to determine the steps / setup necessary to re-create this issue, since this issue doesn't exist on a vanilla bedrock + wordpress install\n. ran into this on a install i migrated from a non-bedrock setup. it only happens in the admin, and the problem doesn't exist if i drop the DB and re-install wordpress (using the same code, plugins, theme, etc.)\ndefinitely DB related. trying to track it down.\n. jokes on me! this bug comes from the old roots starter theme that included relative urls functionality.\nremove add_theme_support('root-relative-urls'); from lib/config.php and then go ahead and use https://github.com/roots/soil if you want relative URLs that dont break things.\n. @QWp6t can you pls shoot me an email? ben@benword.com\nSent from my iPhone\nOn Jun 7, 2014, at 12:05 AM, QWp6t notifications@github.com wrote:\nMaybe if (WP_ENV == 'production') then have it do Dotenv::required or\nwhatever it is for the salt variables.\nJust a thought.\nOn another note: If you guys ever decide to start using OOP, you can use\ndependency injection and encapsulate Dotenv, then disabling Dotenv is as\nsimple as changing the driver that's used to set the configuration\nvariables. That's what I built for myself.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/73#issuecomment-45401367.\n. thanks, but also need an updated composer.lock\n. http://ottopress.com/2010/dont-include-wp-load-please/\n. https://php.net/eol.php\n. :+1:\nSent from my iPhone\n\nOn Dec 8, 2014, at 6:52 PM, Fabien Schurter notifications@github.com wrote:\nBased on this article about completely disabling automatic and/or UI-driven updates in WP (which is what we want in Bedrock AFAIK) and on my own experiments:\nDISALLOW_FILE_MODS implicitly includes AUTOMATIC_UPDATER_DISABLED and DISALLOW_FILE_EDIT, plus:\nIt hides the update notifications in the admin bar.\nIt hides the \"Updates\" sub-menu in the \"Dashboard\" admin menu.\nIt hides the \"Update Available\" messages in \"Appearance -> Themes\" and \"Plugins -> Installed Plugins\".\nI verified in the WP source that DISALLOW_FILE_MODS actually includes AUTOMATIC_UPDATER_DISABLED and DISALLOW_FILE_EDIT, and it is confirmed respectively here and here.\nYou can merge this Pull Request by running\ngit pull https://github.com/fabschurt/bedrock edit-config\nOr view, comment on, or merge it at:\nhttps://github.com/roots/bedrock/pull/125\nCommit Summary\nTruly disable all updates via WP admin UI\nFile Changes\nM config/application.php (3)\nPatch Links:\nhttps://github.com/roots/bedrock/pull/125.patch\nhttps://github.com/roots/bedrock/pull/125.diff\n\u2014\nReply to this email directly or view it on GitHub.\n. reverted this PR for now\n. @fabschurt if you don't get around to a PR today (no worries), i'll open up an issue so we don't lose track of this. unfortunately can't re-open this PR since it was already merged\n. see discussion on #125\n. @thewunder not actually rebased FYI (shouldn't be showing 13 commits on this PR, just 1)\n. this is going to be in docs\n. @cmosguy please use https://discourse.roots.io/ for questions and support. i'm locking this as it's an old, closed issue.\n. please open a thread on https://discourse.roots.io/\n. https://github.com/roots/guidelines/blob/master/CONTRIBUTING.md#using-the-issue-tracker\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse).\n. thanks! \n. > The current Bedrock setup is not ideal for shared hosting environments or hosting environments with a control panel like Direct Admin\n\nsounds like a non-ideal hosting setup\n\nChanging the vhost to point to the /web directory is not always possible, allowed or the best option.\n\nbedrock might not be the best fit for production if you're on a non-ideal hosting setup\n\nMaybe it's an idea to ship a .htaccess file with Bedrock\n\nbedrock will never ship with a .htaccess file. this can be covered in docs, but that'll be about it.\n. how are you even using bedrock with wp engine?\n. closing since this isn't an issue with bedrock. you could try posting on our discourse, but we aren't going to provide support for running the bedrock autoloader on a non-bedrock setup.\n. please use https://discourse.roots.io/ for personal support requests, not this issue tracker (as stated in the contributing guidelines)\n. it's wrong to assume that everything in a subfolder in the mu-plugins folder would be there from a package manager. \nwhy not just remove the mu-plugins directory gitignore rules altogether? \n. we don't have a gitignore for themes. we should just remove the gitignore for mu-plugins.\n. ignore me :tired_face: \n. thanks!\n. docs will need updating: https://roots.io/bedrock/docs/wp-cron/\n. thanks for bringing this up, the salts used to be automatically defined during a composer install script that was removed (see #184) \nwe should definitely add a note about salts to both the bedrock readme and docs.\nrelated - salts in trellis\n. also: https://github.com/aaemnnosttv/wp-cli-dotenv-command\n. :rocket: \n. please don't use github issues for support, use https://discourse.roots.io/\n. please don't use github issues for support, use https://discourse.roots.io/\n. sounds like an issue with your multisite setup. this isn't necessary\n. what is there to reference in #58 regarding this? bedrock isn't going to add the code in this PR... \n. can't reproduce. \n. @etcook one that isn't install_plugins? lol\nthere's lots of possibilities, it's not my place to pick which one fits best in his plugin\n. the menus/pages i'm talking about in EDD have nothing to do with installing plugins\n\nand the extensions page doesn't try to install the plugins via wp or anything:\n\n. there are also EDD extensions that are using install_plugins to add submenu pages for things that aren't related to installing plugins. eg. the product updates plugin (which is just a listing of custom posts)\n. >  There are two menu items missing, though - the extensions one makes sense, but what about info/tools?\n- two items from EDD core, more in EDD extensions\n- no, it doesn't make sense for the extensions one. the purpose of that page is not to install plugins via the wordpress admin.\n- yes, info/tools is also missing.\n\nThis is only affected on production, right?\n\nyes, that's the point of this issue\n. this plugin switched from install_plugins to manage_options for the same reason as this issue (DISALLOW_FILE_MODS enabled)\n. nothing in bedrock specifically is causing this. googled your error and some people reported having issues with firewalls blocking traffic\n. > I don't see how having an uploads folder into an app folder is semantically correct.\nit's not really semantically correct in wp-content either. just use the UPLOADS constant\n\nIs there any other reason that would explain the choice not to move to the uploads folder to its parent folder?\n\nyou can already do that pretty easily if you want. as @kalenjohnson mentioned:\ndefine('UPLOADS', 'web/uploads/');\ni completely agree that it should be web/uploads/ (the old roots theme used to use /assets/ in the webroot), but, we likely won't do this in bedrock as it's considered non-standard and usually frowned upon. by renaming wp-content to app we're not doing any harm, but the uploads directory naturally lives in the content directory on a wordpress installation. i guarantee there's plugins 'doing it wrong' and referencing the uploads directory relative to the content directory.\n. as stated in our contributing guidelines (that are linked at the top when you go to create a new issue), please don't use github issues for personal support requests.\nhttps://discourse.roots.io/\n. you're funny\n. couple things:\n1. this is not the place for personal support. use https://discourse.roots.io/\n2. saying 'resolved' without explaining what you did to fix your issue isn't helpful for others that might come across this\n. closed by 8da05e5d096ad7fc8928909cacc5f72fd05203dd and https://github.com/roots/docs/commit/596778a68baa62381187106af4afa2fde2b6209b\n. torn on adding things to the readme & i've spent time on most of our projects making them as simple as possible while moving things into docs.\nthis PR could be moved to https://github.com/roots/docs/blob/master/bedrock/installing-bedrock.md\n. turns out we don't even need AUTOMATIC_UPDATER_DISABLED because we already set DISALLOW_FILE_MODS in production\nwordpress also checks to see if your installation contains a .git directory and will disable updates if it finds one\nwe're always open to better docs. we've got a repo that you can contribute to at https://github.com/roots/docs\n. not sure how this is even possible since bedrock uses define('AUTOMATIC_UPDATER_DISABLED', true);\nhttps://github.com/roots/bedrock/blob/2162a7defd19f7a2229e5ede5223d729b95d6efb/config/application.php#L74. unable to reproduce. https://github.com/roots/bedrock/blob/master/web/app/mu-plugins/register-theme-directory.php ensures that core wp themes are available \nfresh bedrock install:\n\nplease post on https://discourse.roots.io/ if you need further support. are you sure you're on wordpress 4.7.1?\nsee https://core.trac.wordpress.org/ticket/37071\nand looking at the 4.7.1 codebase it looks like it landed: https://github.com/WordPress/WordPress/blob/4.7.1/wp-login.php#L787. actually it was fixed in 4.7.\nhttps://github.com/WordPress/WordPress/blob/4.7/wp-login.php#L787\nare you lying about your wordpress versions to us? \ud83d\ude1c. did you not commit your themes to the repo? did you not point your trellis site to use the correct repo for your site? \nthis definitely works as expected. please post on https://discourse.roots.io/ with more details.. thanks for the PR! rather than encouraging wordpress plugins to continue to use the incorrect function, why not reach out to the plugin authors and have them fix it?\nthere's tons of plugins that do this, hardcode wp-content, and other things that break if you use bedrock (or use wordpress in a subdirectory, or rename the wp-content directory). at the end of the day these are issues with the plugins. if a plugin doesn't work in bedrock, it's a good indication that there's something wrong with the plugin.. i don't think this is specific to bedrock, see also:\nhttps://core.trac.wordpress.org/ticket/23221\nhttps://core.trac.wordpress.org/ticket/23483. @chetzof do you have DOMAIN_CURRENT_SITE defined? what does your full config look like?\nplease open a topic on https://discourse.roots.io/ so we can do back & forth over there instead of on github. Bedrock works with multisite. Both subdomain and subdirectory installs. \nSent from my iPhone\n\nOn Oct 3, 2017, at 3:00 AM, DAS REPTIL notifications@github.com wrote:\nYeah tried that but it didnt work, i think you should make it very clear that it is NOT suitable for multisite. I found out the hard way.\n\u2014\nYou are receiving this because you modified the open/close state.\nReply to this email directly, view it on GitHub, or mute the thread.\n. hard to help without any details. most likely not a bug, just a configuration issue. check your environment variables, etc. / post over on https://discourse.roots.io/ with more details for support. installing woocommerce via composer doesn\u2019t cause a different plugin\u2019s files to no longer exist\n\nplease use https://discourse.roots.io/ for personal support requests . the nice thing about bedrock is that if a plugin isn't functioning properly then there's likely something wrong on the plugin's end. please reach out to the plugin author about them properly supporting wordpress installed in a subdirectory with a custom content directory.. @HarroH \n\nyou cleared out the issue template when you made this issue which told you not to post personal support requests on github\nyou ignored two people that asked you to move the discussion to the proper place\nyou then say we don't care about our \"framework\" because you're being told that you're in the wrong place for support?\n\n\ud83d\ude44 \ud83d\ude44 \ud83d\ude44 \n. don\u2019t clear out the issue template... don\u2019t use github for support.. thank you!. please use roots discourse to ask questions and get support. thank you!. > Follow the default standard of 4 spaces\nthere's not a standard for spacing on composer files\nthe standard for roots projects is using 2 spaces for json. i'm not seeing a 3.3.6 tag? https://github.com/vlucas/phpdotenv/releases . not sure why i can't re-produce, but the dependency has been bumped: #417. should fix #416. replace 1. + 1. + 1. etc with correct numbers\n. ",
    "etcook": "You could also use a symlink for htdocs to the web directory if that option is avail to you.\n. @benjibee How did you handle it after it was deployed? Did you end up symlinking cache and w3tc-config so it'd persist across deploys?\n. @benjibee - Is it really necessary to put a notice out regarding a core feature and function of the stack? The reason you use Bedrock/Composer in the first place is so you don't have to track your dependencies. I'd venture to say this is core to the very spirit of Bedrock and what is generally considered best practice.\nThe \"issue\" with W3TC is not specifically the location, but rather the fact that it dynamically generates the configuration/loader files necessary for its functionality. That puts it fundamentally at odds with revision based or environment based deployment systems. Unless W3TC has the ability to programmatically trigger the dynamic generation of the files, the best you're going to be able to do is 1) exempt those files from gitignore and 2) pray that you have the same environment (including settings) in all of your stages, to ensure compatibility with the files it generates.\n@williejackson Perhaps you can provide a way to programmatically trigger the creation of those files? Then it can be scripted into the Capistrano deployment routine. Something WP-CLI based would be preferable, I imagine. I'd love to have missed a way to control the deployment routines a bit better with W3TC.\nI'm interested in carrying on this discussion, even outside of this issue, as I'd like to incorporate W3TC again in our workflow. @williejackson I'll contact you separately.\n. @marshmallowcreme There's more to it than just symlinking the generated config file (which, correct me if I'm wrong, would still probably be considered at odds with \"12 Factor\")\n. @marshmallowcreme Varnish. I believe some are using batcache and memcached.\n. Have you tried going into the written deploy directory on the remote server and running composer install manually to see what the error is?\n. Is editing the virtualhost config rather than using htaccess files really the expected convention of Bedrock? Why not require an .htaccess file that's linked no different than the .env, then? For most environments, the htaccess is, in fact, identical, especially with re: to basic Wordpress rules.\nRe: themes, I think you need to have consistency in your recommended and actual application. You have an existing .gitkeep in the themes folder, why not use it and follow the same convention as plugins? It was confusing (at least for me) to have plugins operate one way and themes the other. If you wanted to keep a theme in version control, it would be easy to addthem to gitkeep no different than plugins.\n. I still think there has to be a better way to handle it, at least out of the box. I don't think most people who have expected to place the requisite configuration in a virtualhost directive, and that expectation wasn't documented, at least that I came across.\nI'm doing multisite development and in my case, I have lots of themes. IMHO, convention should consider consistency to be of high importance. You guys have already placed a gitkeep in the themes file, why not follow through? I see where you're coming from re: trying to create convention based on what might be the typical practice, but as an outsider coming into bedrock for the first time, it was an exercise in frustration because there were a number of times it just didn't work as expected. (I concede my experience might be isolated)\n. Process wise they might be different, but architecturally within the system, they operate precisely the same way. It's a directory within app, that has a gitkeep, and can have both first and third party libraries placed within it. Why have the gitkeep file in there at all, then?\nRegardless, I'm just sharing my frustrations with the system because on a multitude of occasions, bedrock didn't work as anticipated for me.\nThanks for everything you do.\n. Understood. Thanks for the info, and thanks again for everything.\n. I've removed all the custom scripting from the deployment and yet I'm still having the issue. I think it has to do with the composer extension of capistrano, since that's the only proprietary code that is currently in my project.\nI just didn't post it as an issue, since I guess the assumption is that its a config issue on my part. I really don't even know where to begin though - it works as is with 3.0.1 and breaks with 3.1, and I don't know where to start debugging it.\n. Scott - I've actually solved this issue two ways.\nUsing a filter to rewrite the urls, or actually using the rewrite rules for nginx that I was asking about in another issue and posted a solution for. Once those rewrite rules are in place, multisite works as intended, and you don't need the /wp portion in the url any longer.\n. http://discourse.roots.io/t/recommended-subdomain-multisite-nginx-vhost-configuration-with-new-web-layout/1429/9\n. In both cases, was there a disparity with your home and site url settings? /wp should be removed from both.\n. That's correct - but with the rewrite rule, the /wp subdirectory is no longer necessary. Makes for a cleaner multisite install overall, but admittedly takes a bit of human intervention depending on how you're setting it up.\nI'd make the rewrite plugin optional, however. Adding such a filter would create unexpected behavior, at least until the bug is resolved. The issue doesn't seem to really be taken seriously at this time.\nI don't mind showing you my current setup if you have any interest.\n. Why would you put the multisite constants in three different environment files rather than application.php?\n. @alexleonard I'm not sure what you're referring to in your first post.\nRe the second: I have zero issues with multi-site, multi-domain, and I rewrite away the wp directory.\nI'm using the same htaccess as @francescolaffi posted above on Apache, and have a similar config for nginx working. Nothing fancy needs to be done.\n. You can just symlink public_html to /path/to/site/current/web/.\n. Why is your symlink being deleted? Why aren't you just deploying to another directory so your symlink stays in place?\n. You sure you were on the latest version?\nhttps://github.com/roots/bedrock/commit/9ffdd06454d0f718e1ead9a1ed709000bb6eacf3\n. I use a private packagist server, personally - however, in cases like this (especially since sometimes I wanted to use the full version rather than packaged version) I separated those internal libs into their own repos, since the reality is, they are separate plugins in and of themselves, and you'd like to be able to control them just like any other lib.\n. @ivomarino Sorry, I don't quite understand. Once you submit the repo to packagist, it handles everything for you, then you can just reference libs like you do wpackagist libraries. Just make sure you have your SSH key installed so you can connect to your private git repos.\n. @ivomarino Yes, sir.\n. Duh - give me one sec.\n. @swalkinshaw @retlehs Sorry about that guys. Was just trying to save you guys some time.\n. BTW: noticed that it added \"prefer-stable\": false to the lock file. Is this proper?\n. @swalkinshaw That was my assumption as well. As always, thanks for all the work you guys do for code plebs like me.\n. @BrandonShutter If you're going to run the commands one by one, note that the environment that you are running the commands in might not be the same one that capistrano uses.\nI've run into an issue where the non-interactive shell that Capistrano was running didn't have the same PATH and environment as when I was logged in personally. So even though the commands worked fine when I ran them myself, they were breaking in the non-interactive shell.\nAlso, I've found it beneficial at times to remove the quiet flag on the composer command, so I can see its output as well.\n. I tend to disfavor this change as well. Very little gain (a little bit of security, and a slightly decluttered interface) but not being able to readily review updates is a huge downside. Disabling auto-updates is one thing, but this change presupposes that we just regularly run composer sheerly for the fact that we're looking for updates.\nIsn't the point of semantic versioning largely to reduce the risk of updates requiring breakfix? Even with that said, the disabling of auto-updates avoids this risk altogether. So why this?\nMaybe if we made this change on production, but on dev this seems like overkill and is likely to break common workflows. Beyond that, not keeping your installation up to date is a security risk. So, the argument could be made that this change actually makes the installation less secure, since the user is never notified of updates unless they explicitly apply it.\nAs asked before, what's the reasonable method to be notified of updates with this in place?\n. Notwithstanding the workflow issues, from a purely security perspective, I don't think this should be left as is. Hiding the existence of updates, especially security updates, should not be the default behavior.\nThis change seems to be predicated on preventing user error, not actually protecting the fidelity of the code. As such, I think \"stupid proofing\" the installation should be up to the dev, even on production.\nWith that said, I'd say moving these declarations to staging/production rather than application is a good compromise. I can do a PR if that's what you guys decide.\n. @fabschurt I agree with you in theory, but imho WordPress needs to be approached with a bit of pragmatism. This change doesn't make Bedrock/WP act any more or less like a framework, it just disables some critical notifications. I understand the desire to separate, but not in the absence of a credible alternative to ensure libs are updated. As it stands, we'd have to just do composer dryruns on a regular basis just to ensure we're up to date.\nI also think security is a more sensitive issue with WordPress projects. The ability for zero-day bugs to infect broad swaths of installations within hours means we have to be extra vigilant, and security patches need to be applied with haste. This includes core updates as well as third party plugins/themes.\nA good portion of dev work happens in the admin area, etc. In this vein, it's very much different than Laravel, etc which rely primarily on configuration/convention. Composer is still the accepted solution for package maintenance, agreed.\nI deleted the Toran post because it was tangential, but it was probably a bit confusing, so I'll explain further.\nWe use third party libs a lot (commercial plugins/themes). With proprietary dependencies, I have to update those packages manually. Currently this is done using one of two methods. If possible, we \"prime\" the dep directory by moving the package files (like .git, composer.json, etc) out of the folder, let WP update the plugin, and the restore those files and push the changes to VCS. There are a number of plugins/themes that show updates, but can't be updated automatically through the wp interface. The notifications trigger an actionable task for us to update the package. So, especially within the private dependency context, update notifications are extremely useful and important to WP.\nWhat @aaemnnosttv (Evan's a magician) and I have been working on are a combined CLI + centralized WP \"updater\" system that has all of our third party dependencies installed, and automates the process of updates within WP itself. Whenever a lib is updated, WP itself will push the new version and tag to git, which notifies packagist/toran of an updated version. It'll let us avoid the manual process of updating for about 80% of our WP dependency library. Currently we've chosen to use Toran over Packagist, because it's easier to handle access across disparate VCS systems when the packages are proxied, instead of trying to give someone access to repos strewn across 4-5 different providers.\nThe point I was making was WP update notifications are so core to the WordPress workflow that removing them fundamentally changes the framework and resulting workflow. I understand the impetus, and your intention and points are well received, I just think the negative repercussions outweigh the benefit.\n. You bring up an interesting project idea, though: a centralized server that could interpret composer.json+lock and let you know if there are any updates available. My first inclination would be to build them as some kind of an extension to Packagist, however with Toran and Statis as credible alternatives, it would likely make more sense to be repo agnostic.\nYou could potentially do it locally with a composer update --dry-run, but that wouldn't let you know about updates that exceed your semantic version declaration, which are equally helpful.\nThoughts?\n. @fabschurt I think your suggestion and defaults on production and staging are more than fair.\n. @rstormsf It doesn't look like you're running it as a privileged user. Just as you do it yourself on the server, you need to run \"sudo service php5-fpm restart\".\n. @kjprince That's why the default is there - to capture those instances when it isn't in the .env file. Most people just leave it be. I don't think every \"flag\" should need to be explicitly defined, especially those used less often.\n. I don't believe this is a bedrock issue. When you're on multisite, try setting the url to explicitly declare which blog you're connecting to.\nhttp://wp-cli.org/config/\nwp --url=<url>\n. @soifou I just know because I've been bitten by the same issue. WP CLI error output is not very helpful.\n. @alexciarlillo I believe the latest trend is away from static caching altogether, and relying on the pure performance characteristics of hhvm + proper object caching in Redis or memcached. IIRC, Jaquith had a recent presentation covering this stack.\nPersonally, I've always used Varnish - mostly because of the issues with W3TC/Super Cache and integration with Bedrock.\n. @rohmann I tried ericmann's plugin again two days ago, and had a few problems. They might have been environment specific issues, though.\nI did, however, use the object-cache.php out of this, https://wordpress.org/plugins/wp-redis/, successfully.\n. @alexciarlillo Much of what is parroted regarding the web technologies is nonsense. Apache 2.4 is fine - just go MPM Event if memory is an issue and turn AllowOverride off. mod_php typically benches at parity with nginx as long as it is properly configured and AllowOverride is off (which it isn't by default). People don't realize just how taxing checking for the .htaccess is. Embedded php (mod_php) benchmarks faster than fastcgi (fpm).\nWould you have access to an external Redis perhaps? What about Varnish?\n. @alexciarlillo As long as you're on the internal network, the transactional overhead of the object cache requests to Redis should be pretty small, and in most cases will exceed the performance of the equivalent db call, unless you have those cached in memory (E.g. query or innodb cache)\nVarnish is great. It's flexible and you have a lot of control.\n. @swalkinshaw Is there anything wrong just adding some postupdate/postinstall scripts, akin to what Bedrock is doing?\nThat's where I conditionally handle all file moves (E.g. domain mapping plugin, etc).\n. @swalkinshaw What about just creating symlinks?\n. @swalkinshaw Yes. In fact...the more I think about it, the more I think I'm going to remove the script and do just that.\n. @swalkinshaw DB_NAME is a custom env variable.\n. @lautreamont3 Those are custom built images. There is no official convention that's mandated by Docker. If those image authors choose to use the DB_NAME convention, it is of their own accord, no different than Bedrock's usage choice.\n. @lautreamont3 I think it would be difficult to account for every permutation or naming convention unless you are advocating namespacing. If that's the case, shouldn't the mysql or mariadb images be namespaced? Also, isn't the db_name the one you're using anyways?\n. Agreed. Not to mention, environmental specific configuration, especially to this level, shouldn't be automatically included.\n. @swalkinshaw I used this to sometimes generate random salts for production environments. What if we just left the script there, but allowed it only to be manually invoked?\n. @kiwiot Yes. You need to be running a newer version of PHP.\nhttp://php.net/manual/en/language.types.array.php\n. @retlehs What role should Pip use instead? \n. @retlehs I'll reach out to Pip on this issue. Thanks, Ben!\n. @mAAdhaTTah I think that's a good observation. There are two menu items missing, though - the extensions one makes sense, but what about info/tools?\nThis is only affected on production, right?\n. @retlehs and @mAAdhaTTah I think you're right.\nhttps://github.com/easydigitaldownloads/Easy-Digital-Downloads/pull/4036\n. @retlehs @mAAdhaTTah https://github.com/easydigitaldownloads/Easy-Digital-Downloads/pull/4036#issuecomment-159112366\n. @jsonfry Out of curiosity, how are you handling deployment? We're using Cap to deploy to our docker nodes.\n. @bitwombat That's not the issue and not why it wasn't 12 Factor Compliant. Having plugins and uploads under a single directly makes no difference. The key was removing wp-content (apps) from within WordPress (a library dependency unto itself.)\n. > @etcook and @QWp6t do any of those points change your mind?\nThere are too many plugins in use that rely on the relative location of uploads because that's been the \"WordPress way\" from the beginning. Working with the WP ecosystem is more often than not about striking a pragmatic balance between \"best practices\" and the realities of the ecosystem.\n. ",
    "francescolaffi": "Some of those files are drop-ins and the locations are defined by WordPress core, see https://github.com/WordPress/WordPress/blob/496c05f1e9ee043522699ebce18e9d10d4e08b6f/wp-admin/includes/plugin.php#L409 so they could be present in other situation and are not plugin specific\nanyway the gitignore could work by whitelisting in the app folder, something like:\napp/*\n!app/themes/*\n!app/languages/*\n!app/*/.gitkeep\n!app/mu-plugins/register-theme-directory.php\n. It would also be nice to have a way to make w3tc rebuild its dir structure on new deploys from cli but with info about the webserver used.\nThe one time I used w3tc with a bedrock project I had the configs shared between releases and a custom script on deploy that tricked w3tc in thinking it was a admin request and calling a method that fixed stuff. I know that there are few wp-cli commands but they didnt do the trick and also keeping the cache shared between releases didnt work out well.\nI'm not sure if the situation changed because it was almost a year ago and after that I moved to other solutions.\n. if you really cant add symlinks or change the doc root (have you tried asking the hosting support to do one of those?) and changing hosting is not an option, then it seems like that you could rename web to www and change all the references of web to www\n. :+1: \nI would add on the docs that is possible to have a wp-cli.yml file in the project root with the content path: web/wp instead of using the command line option, or maybe add the file in bedrock and say its possible to use it from the project root too\n. The target for Bedrock is not the low-tier shared hosting user and php 5.3 is near end of life (july i think?), so its should be ok to use php 5.4 imho.\nI agree that projects with a broader target should support at least php 5.3 and sometimes php 5.2, there is a lot to say about wp, php versions and backward compatibility, but it's outside the scope of this discussion.\n. I'm using this .htaccess on litespeed and it works fine\nRewriteEngine On\nRewriteBase /\nRewriteRule ^index\\.php$ - [L]\nRewriteRule ^wp-admin$ wp-admin/ [R=301,L]\nRewriteCond %{REQUEST_FILENAME} -f [OR]\nRewriteCond %{REQUEST_FILENAME} -d\nRewriteRule ^ - [L]\nRewriteRule ^(wp-(content|admin|includes).*)$ wp/$1 [L];\nRewriteRule ^(.*\\.php)$ wp/$1 [L]\nRewriteRule . index.php [L]\nI dont see much difference other than the slashes before wp/$1, try without it but I dubt that is the problem\nstuff you could try:\n- clean cookies and go directly to wp-login.php and try logins (in case you are in a reauth loop / cookie problem)\n- check in wp_sites and wp_blogs tables if the domains and/or paths are correct\n. well i'm using it with https://wordpress.org/plugins/wordpress-mu-domain-mapping/ and it works although it needs some configuration, but i didn't have login problems (both with remote logins and logins on main site)\nI had some issues with plugin urls since the domain mapping plugin use a deprecated constant to rewrite those urls, you can workaround it with define('PLUGINDIR', 'app/plugins'); hoping other plugins dont use it in other ways, or unhook that specific filter if you provide a correct WP_CONTENT_URL for all sites. Remember that on multisite wp ignores WP_HOME and WP_SITEURL constants.\nThere are some quirks with bedrock+multisite+mapping but its not broken, some documentation could help, @swalkinshaw how about enabling the wiki for this repo?\n. I dont have a public repo for that project but I'll make a wiki page with a working config\nCookies blocked probably means it cant set or verify the test cookie, I guess its a misconfiguration of the cookie domain.\nAnyway you should check with browser tools or curl if the domain for wp cookies is correct by http standards: try maindomain.tld/wp-login.php it should be something like .maindomain.tld if it is a subdomain install\nI had a similar problem when I misconfigured DOMAIN_CURRENT_SITE inserting the scheme (should be bare domain)\n. there are also archives without akismet, they have a no-content suffix or something, I'll see if I can find all the urls\n. there was http://downloads.wordpress.org/release/wordpress-3.8.3-no-content.zip with no wp-content at all and http://downloads.wordpress.org/release/wordpress-3.8.3-new-bundled.zip with only themes but no plugin (or maybe only new bundled stuff from some point release), but they dont seem to exist for 3.9, even the api doesn't list them https://api.wordpress.org/core/version-check/1.7/\n. I was going to do the same, tried a new site with bedrock + wp3.9.1 and haven't found any problem.\nFYI you can convert an issue to a pull request\n. Yep default themes will be under wp/wp-content/themes, anyway the only issue with a child theme should be the import css relative path and its possible to make it work even without the parent theme in a sibling dir to the child theme, i.e. managing the two style separately, so in the child theme you should remove the import rule from style.css and add in the functions.php:\nphp\nadd_action('wp_enqueue_scripts', function () {\n    wp_enqueue_style('twentyfourteen-style', get_template_directory_uri() . '/style.css', array('genericons'));\n    wp_enqueue_style('child-style', get_stylesheet_uri(), array('twentyfourteen-style'));\n});\n. :beers: \n. I've been doing this but only on non-dev environments because its useful to see if there are updates when working on dev. Since this applies to all environments whats the suggested approach for noticing there are updates available?\n. Keeping it only on production.php seems like a good solution.\nOn the wordpress ecosystem most packages don't use semver so I often use stricter requirements then when working with sf or other frameworks, like locking also the minor where I would usually only lock the major.\nIt would be great if composer had the outdated command like npm/brew/bundle/..., there are several issues/PRs about it. There are also services like the one @etcook describes, they are common for ruby and nodejs dependencies with the github badge too, there should be one that work with composer ~~but i dont remember the name...~~ like https://www.versioneye.com/ (never used but trying now)\n. Unless you are using capistrano for provisioning (i.e. changing nginx and php conf) there should be no need for it.\nThere is a common gotcha with php5, opcache and atomic deploy based on symlink, so I'm gonna trow a guess that this is your problem or similar enough:\nphp5 opcache doesnt resolve symlinks for file paths (APC and others did), so when you deploy a new version opcache still see the same path (/srv/www/mysite/current/web/myfile.php) so it still serve the old cached file.\nThe best fix is to make the webserver pass the realpath to php, if you are using nginx is easy, just add this in the location that passes the request to php:  \nfastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\nfastcgi_param DOCUMENT_ROOT $realpath_root;\notherwise for apache there should be some module or you need to call on php opcache_reset();, but it should be run within a web request because cli has a different cache than the php-fpm pool\nfurther readings:\n- http://rocketeer.autopergamene.eu/#/docs/docs/VI-Help/Troubleshooting\n- https://github.com/zendtech/ZendOptimizerPlus/issues/126#issue-18483771\nlet me know if this solve the problem, as its probably a good idea to add it to the readme\n. Im stuck with chef, so I cant really say on ansible, but the role file you linked its about php conf and what I proposed to change is on an nginx conf, I would guess there is a template somewhere for the nginx sites conf\n. @austinpray yep, but you also have to change SCRIPT_FILENAME, the change is $realpath_root vs $document_root\nthis way nginx pass to php the paths with symlink resolved and opcache understand that the files are different on deploys\n. not able to replicate, can you replicate it on a clean install?\nyou could have some issues with siteurl / homeurl / cookiedomain / cookiepath options/constants, maybe check what cookies get set when you login\n. I don't understand why its not correct to load the plugins as soon as the bedrock autoloader is included.\n@swalkinshaw said\n\nIf another muplugin happened to be loaded before it, it wouldn't have access to the\nrest of the plugins.\n\nI don't see this as a problem, when any plugin is loaded there could still be plugins waiting to be loaded, and since wp doesn't provide dependencies management its the plugin job to postpone its operations until all plugins are loaded if needed.\n. You had me worried for a moment :p\n. I would rename APP_ROOT to WEB_ROOT to avoid confusion with the content dir that is named app, also as said in the pull request description its commonly referred as webroot; maybe also move this constant up near $root_dir definition since this section is about custom content dir, just my 2 cents ;)\nanyway good PR :+1: \n. should be !web/app/mu-plugins/register-theme-directory.php\n. ",
    "williejackson": "@swalkinshaw \n\nW3 Total Cache is a mess :(\n\nAnything I can clarify or help with?\n\nI believe it also dumps an nginx.conf in your web root and modifies wp-config.php.\n\nIf Nginx is detected, an nginx.conf file is written to the webroot by default, yes.\n. @swalkinshaw there's no way for W3TC not to modify files, it's impossible to implement and manage caching policies without this unfortunately.\n. @benjibee I can only speak to the W3 Total Cache piece, sorry. \nThe product does indeed create and/or make changes to:\n- .htaccess (if Apache is detected)\n- nginx.conf (if Nginx is detected)\n- wp-config.php\n- wp-content/cache/\n- wp-content/w3tc-config/\nand depending on your settings, the following drop-ins may be added to wp-content:\n- advanced-cache.php\n- object-cache.php\n- db.php\n. @benjibee Clear. I chimed in because I think this project is important, and I just happen to know a little bit about W3TC (smile). All the best.\n. ",
    "marshmallowcreme": "Why not just move the configuration files to the shared directory?\n. I can understand that. For me, it suffices to make those configs shared\nsince I don't expect them to change dramatically between deploys.\nI'm curious, though - what are you guys using for caching instead of W3TC?\nOn Mon, Mar 2, 2015 at 7:13 PM, Scott Walkinshaw notifications@github.com\nwrote:\n\nconfigs definitely should not be shared. They are code as well and need to\nremain atomic in case of rollbacks.\nOn Monday, March 2, 2015, E.T.Cook notifications@github.com wrote:\n\n@marshmallowcreme https://github.com/marshmallowcreme There's more to\nit than just symlinking the generated config file (which, correct me if\nI'm\nwrong, would still probably be considered at odds with \"12 Factor\")\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/38#issuecomment-76866296.\n\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/38#issuecomment-76879380.\n. \n",
    "tommymarshall": "For anyone else viewing this: We're using W3 Total Cache and, since our caching on staging and production is the same, we simply symlinked the cacheing-related files and directories in our deploy.rb:\nruby\nset :linked_files, fetch(:linked_files, []).push(\n  '.env',\n  'web/app/advanced-cache.php',\n  'web/app/db.php',\n  'web/app/object-cache.php'\n)\nset :linked_dirs, fetch(:linked_dirs, []).push(\n  'web/app/uploads',\n  'web/app/cache',\n  'web/app/w3tc-config'\n)\nWorked without a hitch.\n. In case anyone else was looking at this, I added db backups when pushing/puling a DB. Added to the end of config/deploy.rb:\n``` ruby\ntime             = Time.new\nbackup_timestamp = time.strftime(\"%Y%m%d%H%M\")\nset :db_backup_file_name,        -> {\"wpcli_db_backup.#{backup_timestamp}.sql.gz\"}\nset :local_db_folder_path,       -> {\"./db_backups\"}\nset :local_db_folder_file_path,  -> {\"./db_backups/#{fetch(:db_backup_file_name)}\"}\nset :remote_db_folder_path,      -> {\"#{fetch(:deploy_to)}/db_backups\"}\nset :remote_db_folder_file_path, -> {\"#{fetch(:deploy_to)}/db_backups/#{fetch(:db_backup_file_name)}\"}\nbefore 'wpcli:db:pull', :backup_local_db do\n  run_locally do\n    execute :mkdir, \"-p\", fetch(:local_db_folder_path)\n    execute :wp, :db, :export, \"- |\", :gzip, \">\", fetch(:local_db_folder_file_path)\n  end\nend\nbefore 'wpcli:db:push', :backup_remote_db do\n  on roles(:web) do\n    within release_path do\n      execute :mkdir, \"-p\", fetch(:remote_db_folder_path)\n      execute :wp, :db, :export, \"- |\", :gzip, \">\", fetch(:remote_db_folder_file_path)\n    end\n  end\nend\n```\nAnd then just .gitignore the db_backups directory.\n. ",
    "jfrux": "Thanks, that helped me... been a long day... I've done this 100 times and today I'm just losing it.\nThanks again!\n. my only issue now seems to be this:\n...\n INFO [eb460cd5] Running /usr/bin/env composer install --no-dev --no-scripts --quiet --optimize-autoloader on site.com\nDEBUG [eb460cd5] Command: cd /home/site/public_html/releases/20140210225657 && ( WP_ENV=production /usr/bin/env composer install --no-dev --no-scripts --quiet --optimize-autoloader )\nDEBUG [eb460cd5]    /usr/bin/env:\nDEBUG [eb460cd5]    composer\nDEBUG [eb460cd5]    : No such file or directory\nDEBUG [eb460cd5]\ncap aborted!\ncomposer stdout: Nothing written\ncomposer stderr: Nothing written\n. Yep it does work if I SSH into the server.\n. That fixed it! Thank you!\nOn Feb 11, 2014, at 5:09 PM, Scott Walkinshaw notifications@github.com wrote:\n\nWell then you may need to update your command map to point to the absolute path of composer, or use default_env to update your path like (wherever composer is):\nset :default_env, { path: \"/usr/local/bin:$PATH\" }\nEither way, this isn't a Bedrock issue as we include any server configuration yet. I suggest checking into Capistrano docs/help and/or SSHKit. Or you can post in the Roots discourse forum.\n\u2014\nReply to this email directly or view it on GitHub.\n. Well, it will definitely be different for everyone but you just set this line in your deploy.rb\nSSHKit.config.command_map[:composer] = \"~/bin/composer\"\n\nMine happened to be under the current user's \"bin\" directory.  But it could be anywhere, really.\nThanks again!\n. Since this is top result for google... figured I'd post this other thing that helped resolve my issues for some strange reason...\nadded:\nruby\nset :composer_install_flags, '--no-dev --no-interaction --optimize-autoloader'\nby removing the --quiet from the default install flags it helped resolve it... must have given capistrano what it needed to ensure it completed correctly...\n. My bad... Deploying with Capistrano3 + Apache\n. That makes sense, I'll give it a go!\n. Sorry about the misplacement of my question.\nI'm not sure I get the \"cat\" reference...?\nI'm just a user of Bedrock.  Honestly, it was more flooring to me in my dev environment... Production was an easy fix.\nI need to just figure out a way to tell nginx locally in my dev environment to check in the root first, and if it's not there then look in web/...\nIn the future, I'll be sure to use the Roots Discourse Forum.\nThanks for the quick response!  Love roots and bedrock btw!  Thanks for everything.\n. Oh snap, duh\u2026 gawd\u2026 what a morning.\nhaha\nTake care!\nOn Mar 13, 2014, at 9:38 AM, Foxaii notifications@github.com wrote:\n\nYou said you were curious, which turns out badly for cats...\nI would encourage using separate server blocks where possible, or wait for the Ansible playbook we're working on, which will do this for you.\n\u2014\nReply to this email directly or view it on GitHub.\n. Should I be adding /vendor directory to gitignore so that composer installs everything from scratch each time it's deployed?\n. Hmm, my gitignore only contained this:\nlib-cov\n.seed\n.log\n.csv\n.dat\n.out\n.pid\n*.gz\n\npids\nlogs\nresults\nnpm-debug.log\nMust have got overwrote somehow... Thanks!\n. I'm actually just getting a white screen.\nRunning from php -S 0.0.0.0:8000 -t web it just returns white screen. Any tips?\n. ",
    "reneruiz": "I have both lines in deploy.rb:\nruby\nset :default_env, { path: \"/usr/local/bin:$PATH\" }\nSSHKit.config.command_map[:composer] = \"/usr/local/bin/composer\"\nand I'm still getting the composer stdout error:\nshell\nINFO [17eba5fc] Running /usr/local/bin/composer install --no-dev --no-scripts --quiet --optimize-autoloader on staging.thisisreneruiz.com\ncap aborted!\ncomposer stdout: Nothing written\ncomposer stderr: Nothing written\nI even tried installing composer with Capistrano's available tasks:\n$ cap staging composer:install_executable\nI've tried rebooting the machine. Based on those two links that @swalkinshaw posted, I updated memory_limit in php.ini from -1 to 512M, although the DigitalOcean droplet I'm using is only configured with 512MBs. Could that be why?\nEDIT:\nOkay, looks like I had to add this to staging.rb for it to work:\nSSHKit.config.command_map[:composer] = \"/var/www/staging.thisisreneruiz.com/shared/composer.phar\"\nThat was the location that $ cap staging composer:install_executable installed the executable, too. Kind of an ugly solution. :confused: \n. ",
    "goellner": "I have similar problem with my deployment process. I set the default env to \"set :default_env, { path: \"/usr/local/bin:$PATH\" }\" and additionally added this line \"SSHKit.config.command_map[:composer] = \"/usr/local/bin/composer\"\". Now I wonder if i get this whole thing right. Does composer has to be installed on my server or just on my local machine? I have composer installed on my local machine and it is in the /usr/local/bin folder. \nThe error looks like this:\nDEBUG [1af3225b]    bash: /usr/local/bin/composer: No such file or directory\n. ",
    "kjprince": "I had a similar issue.\nCapistrano deployment would throw an error when attempting to run the composer tasks.\nINFO [44095e89] Running /usr/bin/env composer install --no-dev --prefer-dist --no-interaction --quiet --optimize-autoloader on 162.243.247.167\ncap aborted!\nSSHKit::Command::Failed: composer stdout: Nothing written\ncomposer stderr: Nothing written\nI installed composer on my remote server, in my user directory (~/kj or /home/kj) as shown in the docs.\nThen I moved composer.phar to enable the composer command globally:\nmv composer.phar /usr/local/bin/composer\nEverything works fine now.\n. That line is of course there, what I'm referring to is the default setup after creating a new project with Composer, I have to add the environment variable manually as it's not created in the .env file after the initial project creation.\n. ",
    "cfxd": "I am now running into this issue. The only thing about my local setup that changed is that I am directly plugged into my router now instead of using my WiFi. Not sure if that would make any difference. I'm still able to SSH into my shared host and running composer with php-cli /home4/cfxdesig/composer.phar works fine.\nHere is my complete deploy log: http://pastebin.com/1WB4AyVu\nThere are failures on lines 73, 76, 82, 85, and 94 but from what I remember these have been present all along and deploys have been fine. It's been about a month since my last successful deploy.\nAny troubleshooting help would be great guys. Thanks!\n. @etcook thank you!\nNoob mistake. I thought for sure the written deploy dir would be removed if the deploy was unsuccessful. Shame on me for not checking.\nRunning composer install in the deploy dir threw an error with my lock file which I tracked down to having updated a few plugin versions in composer.json but I never performed an update so the lock file contained outdated dependencies.\nThanks again!\n. With create-project I'm not sure how to set the version...\n. Thanks Scott.\n. Hey @felixarntz thanks for this PR. I'd love to see this pass build checks. That would be one step closer to a merge and fix of this issue which affects both Bedrock and Trellis (https://github.com/roots/trellis/pull/616).\n. ",
    "dutchiexl": "Yes, that sounds logical. \nI did some testing and I had to reshuffle my entire folder structure to get everything working:\napp -> /www/web/app\nvendor-> /www/vendor\nconfig -> / www/config\neverything inside web but app -> /www/\nIs there a better way to do this ? Remember it is a shared host so I cannot add symlinks (apache only has access to /www/) and I cannot change the root path of my website -> /www/web/index.php is not an option\n. yes, but the problem is that the whole application is not under 1 root:\n/root1/ ->everything but web\n/root2/ ->web folder\nand it seems to be impossible to get this to work\n. ",
    "goatherd": "sorry, may mistake!\n. ",
    "Vinsanity": "I just realized that might be intentional. Please disregard that first message if it is. :)\n. ",
    "akamyself": "you guessed right, sorry about that.\n. ",
    "DArtagan": "Good point, moved Dotenv::required back outside the file check.\n. Terrific, thanks!\n. ",
    "dboune": "Seems worth mentioning that PHP 5.3 is still the base supported version in many distro releases that are still widely used in virtual/dedicated server environments, without consideration for shared hosting environments. For instance, Debian 6 (squeeze) and Ubuntu 12.04.\nFortunately Debian 7 and Ubuntu 14.04 both have newer PHP versions in the base repos, but not every provider has these flavors available yet, and not every client is ready for them either.\nArtificially increasing the PHP version required for this project would needlessly complicate use in still otherwise well supported environments (past the zend EOL of 5.3). For this reason I suggest requiring only what is required.\n. ",
    "danielck": "For reference, in case this helps someone, these are the steps I took to get multisite working with Bedrock correctly:\n1. Add WP_ALLOW_MULTISITE to config/application.php\n2. Start the multisite install process in the admin normally.\n3. Copy the generated .htaccess rules into your htaccess file\n4. Add the required multisite constants to development.php, staging.php or production.php, taking care to remove references to subdirectories. At least DOMAIN_CURRENT_SITE should probably be defined as an environment variable in your .env file.\n5. Check the home and siteurl values in wp_options and wp_sitemeta, removing any reference to subdirectories (yoursite.com/wp should be changed to yoursite.com). This is because the .htaccess rewrite rules already take care of hiding the wp/ part.\n6. Login to your site at yoursite.com/wp-login.php (NOT yoursite.com/wp/wp-login.php).\n7. Enjoy!\n. Glad to hear it! You're welcome. \n\nOn 21 Oct 2014, at 15:22, Fredrik Broman notifications@github.com wrote:\nThe steps above work nicely. Thanks @danielck !\n\u2014\nReply to this email directly or view it on GitHub.\n. Question of workflow. You can't put everything at once in the config, before you've run network setup. And I assume you'd want to test first in development before starting the process in staging or production. But it all depends on how you do deployments (we don't use Capistrano) and in the end you can just move everything into application.php anyway. \n\nDaniel\n\nOn 21 Oct 2014, at 21:45, E.T.Cook notifications@github.com wrote:\nWhy would you put the multisite constants in three different environment files rather than application.php?\n\u2014\nReply to this email directly or view it on GitHub.\n. \n",
    "frebro": "The steps above work nicely. Thanks @danielck !\n. \ud83d\ude2c\nWell, I'm running Bedrock locally for development but ended up with deploying to WPEngine using a shell script. So I'm not actually using Bedrock on WPEngine, but would like to use the autoloader for some plugins. \n. Sure! I'll take it up with their support and see if there's a fix.\nOtherwise I'll work around the issue. Thanks guys.\nl\u00f6r 23 maj 2015 kl. 21:25 skrev Scott Walkinshaw notifications@github.com:\n\nAlso there's nothing to do with wp_cache in the autoloader plugin. The\nautoloader will work perfectly fine on a \"normal\" WP server/host. WPEngine\ndoes some non-standard things to make their \"magic\" happen and they don't\nreally explain too much about what's going on in that process. Something is\nobviously conflicting with this but that's on their end.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/181#issuecomment-104937602.\n. Ok, thanks guys! I appreciate you took the time. This plugins is must-use and non-optional on WPEngine, so unless they do a fix the autoloader can't be used with them. \n. \n",
    "alexleonard": "@etcook Presumably you could just set this in application.php\ndefine('DOMAIN_CURRENT_SITE', getenv('DOMAIN_CURRENT_SITE'));\nAnd then make sure to add the new line to your .env\n. @francescolaffi Did you ever get a chance to share your working multi-site multidomain configuration tweaks? I'd be intrigued to see them as I'm about to try setting one up.\n. @robganly I went with sub-domain mode. My first attempts with sub-folder mode didn't seem to work, but that said, I didn't spend too long on it. Domain mapping worked well. The setup is a little ungainly and moving from local -> staging -> production is a bit of a pain in the ass (you need to step by step work through database changes - I do wish WP just handled domain settings in config files - or at least had an option to).\n@etcook Heh, I can't remember exactly - I think you'd asked a question about why was config stuff spread around various files.\n. ",
    "starise": "I'm trying to configure a bedrock multisite and the @danielck solution works for me. However i think there's an issue with bedrock autoloader, all the mu-plugins loaded in composer.json as mu-plugins that are located in subdirectories are loaded correctly but not listed in the admin page (roots/soil for example). Moreover i can't see anymore the asterisks next of the plugin name.\n. :+1: \n. ",
    "robganly": "I'm creating a multisite implementation and was wondering if the above posts are generally referring to sub-directory or sub-domain mode? I'm going to use the domain mapping plugin eventually but want to get it working without this first.\n. ",
    "nathanielks": "I can confirm that the rewrite rules suggested in https://github.com/roots/bedrock/issues/58#issuecomment-40128697 work just fine, as evidenced by https://github.com/roots/bedrock-ansible/pull/116. After adding the necessary multisite constants, Bedrock works with aplomb.\n. I'm currently researching that. So far, for my load balancer configuration, the backend doesn't know it's supposed to serve https links, so even though the url is https, the assets are served with http. \n. Yup, that's what I'm finding. Thanks for working this out with me!\n. Thanks for the help, @swalkinshaw. Trick77's helped a bunch.\n. ",
    "olivierhaustrate": "I'm encountering the same problem as described by @starise : the plugins' files are in the mu-plugins folder, but not listed in admin (plugin page).\nI've updated the bedrock-autoloader.php based on the fix of @starise , but it's not solving my problem because I'm not using a multisites instal; I'm working on a subdomain (dev) for staging on the production server.\nSo the problem occurs because I have my wordpress install on a subdomain.\nDid someone already found a way to solve that problem?\n. I don't manage to get the autoloader to work on a subdomain with a WordPress single install. Any idea how to solve the problem?\nOn production server (Apache) I've set a subdomain (dev) for staging purpose. \nThe plugin's files are loaded in the mu-plugins folder, but not there when I go to the plugin page in dashboard. \nIf I try without the subdomain all is working great. So I understand that the problem comes from the subdomain install. \nThanks for your help,\nolivier\n. ",
    "zairl23": "How about nginx rewirte codes??\n. ",
    "bitmatix": "+1\n. ",
    "davidosomething": "For my own setup I'm using wp-cli, run during capistrano deploy, to activate/deactivate stuff. The wp-cli.yml is removed on production after the plugin configuration is done.\n. I would even argue that you take out Capistrano/deploy related things altogether, make this a WP stack only.\nThen in a separate repo, create deploy strategies based on the host and target. Don't forget WP deploys to IIS as well, so if anyone was on Azure or something this Bedrock stack wouldn't have unnecessary components. IIS has no SSH.\nIf you were deploying from an OSX machine (which has ruby by default), capistrano or PHP is good. If you're on *nix, assume just PHP and use Envoy (you'd have to set up the same strategy as cap though -- releases and a symlinked \"current\" folder, not something Envoy provides out of the box). If you're on windows ... well ... good luck? MS Deploy or Powershell?\nHtml5boilerplate has done something similar by ripping out the server configs from their boilerplate and into a separate repository, since not everyone will be running Apache.\n. ",
    "BrandonShutter": "No worries.  I'm sending a pull request using Github's 3.9 file as well.  I suppose you can pick which one you want to use.\n. I was having this same issue today.  I ended up adding this code to have wp only be used by core wordpress stuff.\n``` php\nfunction clean_site_url($url) {\n    // Only strip in the case that we are not dealing with a core wordpress link\n    if ( strpos($url, 'wp-') === false )\n        return str_replace('/wp/', '/', $url);\n    return $url;\n} add_filter('site_url', 'clean_site_url');\n``\n. On running/usr/bin/env wp core is-installedI get the following error:PHP Warning:  require_once(/srv/www/new.domain.com/releases/20141111172634/vendor/autoload.php): failed to open stream: No such file or directory in phar:///usr/local/bin/wp/php/wp-cli.php(23) : eval()'d code on line 6\n`\nRunning this by SSHing in and running it gives me the same error - which makes sense, as autoload.php doesn't exist in the release/vendor directory.\n. @swalkinshaw This is my deploy.rb: https://gist.github.com/BrandonShutter/89212e0b16bbb88d0c74 I don't really understand what you mean by after the Composer extension?  I checked the deploy of what Cap does, and it never attempts to run composer install\n. That's exactly what it was.  My Capfile was missing the third line.\n. Yes, I have that task setup in my deploy.rb file.\nAnd just to assure that I didn't mess up my task, I manually go in there as well and run the commands, to no avail.\n. I\u2019ll do that now.  \n\nBrandon Shutter\nOn Saturday, October 25, 2014 at 9:17 PM, Scott Walkinshaw wrote:\n\nIf your deploy isn't properly pulling down your entire Git repo then something weird is going on. Not even sure how Capistrano itself could be blamed for that. #1 (https://github.com/roots/bedrock/pull/1) rule with Cap debugging is to set your log level to debug and it will output all the commands it runs. Then you can manually run those commands on the server and see what happens. If you try to run the clone/archive commands from Git and you see the same problems, then you'll know it's not Capistrano itself.\n\u2014\nReply to this email directly or view it on GitHub (https://github.com/roots/bedrock/issues/109#issuecomment-60503149).\n. Okay, manually cloning works.  I went into releases, mv'd the most recent release into another directory - created a new directory with the same name, cd'd into that dir, cloned, and the site works, with the exception of all image uploads.\n\nSo it's something with Cap for sure.\nA bit confusing though, as my git repo doesn't store the .env file - yet the site still works.\n. I just thought of something else that doesn't make sense.  I can do a cap deploy - and see that the repo therefore current has been updated, but it doesn't actually update the live site.  However, when I run ansible - current is then updated.  Is there a cache that I'm missing that I need to clear?\nEdit: My thought was that is memcached - however running flush_all didn't make any change.  \nI'm noticing that my style.css file is being updated every time I make a change and push it.  But if I make a change to any other file (so far I have tested headers/footers/functions) those changes don't go into effect until after I run ansible again.  However, style.css is updated successfully every time I make a change there.\n. Yeah verified.  The moment I restart manually via ssh, I still have a white screen.  Again, no errors in error logs that I can see.  Access log still shows me trying to access the page.\n. It ended up being the issue with the theme path not being set correctly.  So when I would restart php-fpm and still see the white screen, I assumed it was file or permisisons based.  It was actually database based due to the path never being set correct which was fixed by actually using wp-cli and utilizing https://github.com/roots/bedrock/pull/101 \n. ",
    "cibulka": "Scott, that was an insanely fast reply, thank you! What would you recommend than if you have multiple Wordpress/Bedrock installations on one server? \nE.g. I develop websites locally on MAMP, so I have multiple \"Wordpresses\" under my document root. It would be nice, if I could access the projects by ...\n- http://localhost/project-1\n- http://localhost/project-2\n... and not http://localhost/web/project-1. Thanks!\n. Yes, I will probably go down that road. For any google speeders with a similar problem, this is a nice guide how to do so: http://serverfault.com/questions/146550/how-to-set-up-multiple-websites-virtual-hosts-on-mamp\nThanks again!\n. Would appreciate as well!\n. Scott, thank you for your quick reply! I will probably stick with manual git cloning for now and when I will have more time on my hands, I will try to mess with --repository-url and packages.json.\nAnyway, if you're interested in any possible answers to the question, I asked it also at Stack Overflow: http://stackoverflow.com/questions/24506478/composer-create-project-working-with-forked-repository/24517395#24517395\n. ",
    "meliaxford": "@cibulka thanks for the last link - saved me heaps of time.\n. ",
    "heyfletch": "In addition to wp-cli for sql tasks, I've come across syncdb. Looks promising.\n. ",
    "treb0r": "IMHO WP Migrate Pro is the only way to fly. It handles find and replace, remembers profiles and also syncs media files. I have been using it in tandem with bedrock and now I realise that I want to handle the database sync separately from Capistrano just to have flexibility.\nhttps://deliciousbrains.com/wp-migrate-db-pro/\n. It may possibly be 'cleaner' in some sense but WP Migrate Pro works well, is here now, requires zero configuration and is a joy to use.\nI find that separating the db sync from the rest of the deploy brings benefits in added flexibility. And having the media files synced with the DB saves a lot of time. \n. ",
    "leotulipan": "Wouldn't using a plugin like Migrate Pro violate one of the 12 factor rules (namely \"4 backing services\" http://12factor.net/backing-services) ?\nIMO using Capistrano + WP-CLI (and mabye syncdb) for snapshoting, updating and synching is the cleaner way.\n. ",
    "lavmeiker": "Hi guys! Here's one approach to the problem solution. This rubygem that will add db pull and push using WP-CLI. https://github.com/lavmeiker/capistrano-wpcli\nThis is my first public release so I'd appreciate some feedback on this one! :smiley: \nHope you find it useful.\n. Some improvements were made on https://github.com/lavmeiker/capistrano-wpcli/ to simplify the configuration and add support for WPCLI arguments.\n. ",
    "soullivaneuh": "Hmm that's true. :)\nI will test it and give you feedback !\n. Yes, was the problem. Thanks and sorry. :)\n. Ok found why. Just add the -t option to specify root directory:\nsh\nphp -S localhost:8000 -t web\nAre you interested for a PR managing built-in server and foreman?\nThanks.\n. @joshuairl Seems to be another error.\nHave you any log? You better ask your question here to get support I think: https://discourse.roots.io/c/bedrock :+1: \n. ",
    "meierjan": "I tested it as well :+1: \nIts my first pull request, so forgive me my newbeness :) - can we merge these two issues? \n. Same here.\n. ",
    "OutThisLife": "I was curious to try this but:\nWP_HOME=http://localhost/bedrock/web/\nWP_SITEURL=http://localhost/bedrock/web/wp\nWorks just fine with WP SEO: http://d.pr/i/qGxL\nMaybe it has to do w/ an nginx system though.\n. ",
    "alexanderritola": "@swalkinshaw no, we don't get an app/themes/twentyfourteen in either of those cases, we get a wp/wp-content/themes in those cases. We can only get app/themes/twentyfourteen when it's in that directory in the repo.\n. Yes we have that line, and my mistake, yes it's going to the right place. We've found that the issue we had been experiencing wasn't actually caused by bedrock, it was a poor design decision and we ended up using bedrock as a scapegoat for the issue. Bedrock had just added some complexity and confusion to the problem and made us lose focus on the real issue. Thanks for your help!\n. ",
    "Pier-Philip": "I simply made a task to symlink after the deploy\nruby\ntask :link_release_to_public do\n    on roles(:app) do\n         execute \"cd ~\"\n         execute \"rm -rf ~/public_html && ln -sf #{current_path}/web ~/public_html\"\n    end \nend\n. I have no idea why, I think Capistrano is trying to overwrite public_html/ so it destroy the symlink, by making it into a task in my deploy.rb, I don't have to do anything and everything seems to be working fine!\n. @swalkinshaw Thanks!\n. ",
    "theantichris": "I think I did something I didn't mean to do.\n. It is the default Twenty Fourteen theme right now. I just switch it to another theme then back and it fixes.\nSpecifically it looks like the template_root option in the wp_options table is not be updated after a deploy. It is still pointing to the previous release in the releases folder.\n. Nginx.\n. Thanks for looking into this.\nI tried the wp-cli stuff but it kept telling me \"Error: This does not seem to be a WordPress install.\" even with the yml file there or specifying the path on the command.\nI can hold tight with just switching themes until a solution is found.\n. Thanks. I just removed the plugin file since I don't need multiple theme directories. That has me fixed for now.\n. ",
    "fabiomontefuscolo": "@swalkinshaw sorry to dig here, but I was afraid to open a new issue to share my conf with bedrock. I would like share the Nginx conf I'm using. Is there any place or forum to send?\nThe link below is a migration I did to use Bedrock. It is using Nginx with cache feature. Could you take a look on that?\nhttps://gist.github.com/fabiomontefuscolo/2acbc19dcc2b285a41126a45f8fe6048. ",
    "grahamblevins": "Thanks Scott. Thanks for the quick and helpful reply. Turns out the extension had been removed from the Capfile.\n. ",
    "grahamharper": "I'm having the same problem with a fresh install using WP 4.0. I don't have WPLANG defined.\nUpdate: Turns out this is related to language selection. I had selected English (UK) during installation.\n. I was getting the white screen of death too but the fix proposed @liviucmg and @swalkinshaw didn't fix this issue for me because I noticed the stylesheet_root wasn't being updated either. I added a new execute line to update this too.\nnamespace :deploy do\n  desc 'Update WordPress theme path to the new release'\n  task :update_options do\n    on roles(:app) do\n      within fetch(:release_path) do\n        execute :wp, :option, :set, :template_root, fetch(:release_path).join('web/wp/wp-content/themes')\n        execute :wp, :option, :set, :stylesheet_root, fetch(:release_path).join('web/wp/wp-content/themes')\n      end\n    end\n  end\nend\n. Gah, sorry, just saw that now. Cheers. At least the comment might be useful for other folks.\n. ",
    "hyyan": "Any one figured how to solve this issue\n. I don't think this issue is resolved because the update message keep appearing on wordpress4.0 when we set the lang to anything other than en-US.\n. @swalkinshaw  No it is not , I have just tried , I think it is an issue related to bedrock installation only\n. @Foxaii  What I am trying to do is to load translation file for my plugin which must be loaded by bedrock-autoloader , the plugin is simple branding plugin , Here is a snippet : \n```\n/\n * This file is part of the SARC package.\n * (c) Hyyan Abo Fakher@Guestra tiribthea4hyyan@gmail.com\n * \n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n * \n * Plugin Name: Guestra Branding\n * Description: Brand this wordpress installation for Guestra\n * Author: Guestra\n * Author URI: http://www.guestra.net\n /\nadd_filter('Hyyan\\Dashboard.options', 'guestra_dashboard_plugin');\nadd_action('admin_bar_menu', 'geustra_contact_menu', 9999);\nadd_action('plugins_loaded', 'guestra_lang');\n/*\n * Add the plugin translation\n /\nfunction guestra_lang() {\n    load_plugin_textdomain(\n            'guestra'\n            , false\n            , trailingslashit(basename(dirname(FILE))) . 'languages/'\n    );\n}\n```\nNow as you can see from the snippet the translation files will not be loaded because the autoloader itself use plugins_loaded hook to make its job done . and the question is what hook should I use instead ??\nNote : the plugin works fine if I use it as standard wordpress plugin offcourse \n. @Foxaii  I've just tried what you proposed to do , But it didn't work \n. @Foxaii I know that , but the method in my snippet return relative path not a full path , I am already aware of the second deprecated param . What we are missing here is the right hook to load translation file , in normal plugins we use load_plugin_textdomain and in mu-plugins we use load_muplugin_textdomain but  none of these methods works with autoloader , Is there any alternative hook to use with autloader so the translation file will be loaded ? \n. @Foxaii I think there is must a bedrock autoloader hook like wordpress native hooks to mark that plugins have loaded by the autoloader for example bedrock_plugins_loaded , but I am not really sure if something like that will solve the problem , What do you think?\n. @Foxaii It is still not working , even with #110 changes, I don't why ??? I think I will use the plugin as standard wordpress plugin for now until the solution become available , Thanks anyway \n. @royduin Hey , I agree with you bedrock should explain how it could ships with shared hosting environments , I faced this before , and here is my solution after digging using the following .htacces file : \n```\nOptions -Indexes\n.htaccess primary domain to web redirect\nthis file must be in the (public_html | web ) folder of your hosting account\nmake the changes to the file according to the instructions.\n\n    # Do not change this line.\n    RewriteEngine on\n# Change %host% to be your primary domain.\nRewriteCond %{HTTP_HOST} ^(www.)?%host%$\n\n# Change 'web' to be the folder you will use for your primary domain.\nRewriteCond %{REQUEST_URI} !^/web/\n\n#********************\n# NOT RRCOMMENDED   *\n#********************\n#\n# Uncomment those two lines if you want dirs and files to be accessible out of the\n# your primary domain dir.\n\n#RewriteCond %{REQUEST_FILENAME} !-f \n#RewriteCond %{REQUEST_FILENAME} !-d\n\n# Change 'web' to be the folder you will use for your primary domain.\nRewriteRule ^(.*)$ /web/$1\n\n# Change %host% to be your primary domain again. \n# Change 'web' to be the folder you will use for your primary domain \n# followed by / then the main file for your site, index.php, index.html, etc.\nRewriteCond %{HTTP_HOST} ^(www.)?%host%$ \nRewriteRule ^(/)?$ web/index.php [L]\n\n\n```\n. @royduin glade you liked the solution , but I think it is not a good idea to make that part of the Bedrock project so we can still use it with none shared hosting envs , but I think it will be good a idea if such a solution can be mentioned in the bedorck documentaion  @swalkinshaw ?\n. @royduin you are correct , while it won't harm but it would ask the server for unnecessary extra work (redirecting) to do .\nmake the .htaccess more generic? The domainname inside is not ideal. ? any suggestion about that ?\n. @royduin You are totally write, God how I've missed that ,sorry :blush: \n. @royduin I have my own project which called GWP the project is completely inspired from bedorck  , with following improvements : \n- Better environment support (with env and php files)\n- Phing build (automate the build and deployment process with shared hosts in )\nThe project does not have a documentation yet , cause it has been used for my own company projects only, and I couldn't find the time to add one , but I am ready to clear things up if you are interested ,it is easy to follow with if you understand how bedrock is organized.\n. @austinpray the line define the full path for composer path in windows env , this is because phing does not know how to find composer \n. @austinpray it is very common to include the composer.phar file in the project dir , so the file can be found anyway \n. @austinpray , @royduin  If some is interested , I have documented  GWP\n. ",
    "ivomarino": "@joshmedeski do you need to handle \"propietary\" plugins which are e.g. not on wpackagist? Maybe this can help: http://codelight.eu/using-private-wordpress-repositories-with-composer/\n. OK, sounds good to me, thanks!\n. Sounds great, you're not using this plugin anymore? Troubles?\n. Furthermore I keep my theme (proprietary one) under git, seems good.\nThe theme also needs three proprietary plugins which cannot be installed through wpackagist:\n./framework/plugins/js_composer.zip\n./framework/plugins/revslider.zip\n./framework/plugins/x-shortcodes.zip\nwhat's the best way to install those plugins? is it possible to install local zips using composer for example? Thanks for suggestions.\n. Thanks @etcook, I'm just setting up wp.ttss.ch exactly for this, can you send me a tree or directory structure layout of your private repo? Would help setting up things. Thanks.\n. You mean you set up one of those? https://packagist.org\n. Allright, also with solr enabled?\n. Ok\n. Using it, works like a charm!;)\n. ",
    "liviucmg": "The solution posted by @swalkinshaw worked for me with just a minor change. The \"current_path\" variable is empty for some reason, so I've replaced it with \"release_path\". The following code works on Capistrano 3.2.1 and WordPress 4.0 when deployed to Ubuntu 14.04 + Nginx + PHP-FPM (though the deploy target shouldn't really matter):\nruby\nnamespace :deploy do\n  desc 'Update WordPress theme path to the new release'\n  task :update_options do\n    on roles(:app) do\n      within fetch(:release_path) do\n        execute :wp, :option, :set, :template_root, fetch(:release_path).join('web/wp/wp-content/themes')\n      end\n    end\n  end\nend\nNote that this requires WP-CLI installed on the server. I'll be making a pull request, since the issue is present on all of my websites. Strange that it appeared fairly recently. Maybe a recent WordPress update caused it?\n. Thank you for your input on this. I have added the check to see if WordPress is installed, but I left only template_root to be updated. For some reason, the fix doesn't work anymore if I also update stylesheet_root. It seems that stylesheet_root needs to remain \"/themes\" while template_root needs to be the absolute path.\n. I think I got it this time. There are several cases (tested on a fresh WordPress 4.0 setup):\n1. You activate a default theme (e.g. Twenty Twelve), which is located in the wp folder. => Both the \"template_root\" and \"stylesheet_root\" options are set to the absolute path [...]/wp/wp-content/themes.\n2. You activate a custom theme, which is located in the app folder. => Both the \"template_root\" and \"stylesheet_root\" options are set to the relative path /themes.\n3. On some of my existing sites, somehow \"template_root\" has the absolute path, while \"stylesheet_root\" has the relative path /themes.\nI have come up with the following solution: change only the absolute paths:\nif test :wp, :core, 'is-installed'\n  [:stylesheet_root, :template_root].each do |option|\n    # Only change the value if it's an absolute path\n    # i.e. The relative path \"/themes\" must remain unchanged\n    if (capture :wp, :option, :get, option) != '/themes'\n      execute :wp, :option, :set, option, fetch(:release_path).join('web/wp/wp-content/themes')\n    end\n  end\nend\n. On fresh installs, if you don't change any setting at all, it seems that the \"stylesheet_root\" option is not even set, so we need to check for that as well.\nif test :wp, :core, 'is-installed'\n  [:stylesheet_root, :template_root].each do |option|\n    # Only change the value if it's an absolute path\n    # i.e. The relative path \"/themes\" must remain unchanged\n    # Also, the option might not be set, in which case we leave it like that\n    value = capture :wp, :option, :get, option, raise_on_non_zero_exit: false\n    if value != '' and value != '/themes'\n      execute :wp, :option, :set, option, fetch(:release_path).join('web/wp/wp-content/themes')\n    end\n  end\nend\n. Done. Sorry for the delay as well. I too would have liked a more elegant solution, but I don't see any at the moment. Cheers!\n. @swalkinshaw Forgot about that. Done!\n. ",
    "rstormsf": "I'm setting up SSL right now and would like to know if my plan is correct:\nI'm going to follow these steps\nhttps://rtcamp.com/wordpress-nginx/tutorials/ssl/thawte/\nor\nuse this one \nhttps://mozilla.github.io/server-side-tls/ssl-config-generator/?server=nginx-1.6.1&openssl=1.0.1f&hsts=yes&profile=modern\nCan you guys confirm that I'm on the right track with these?\nShould I add those lines:\ndefine('FORCE_SSL_ADMIN', true);\ndefine('FORCE_SSL_LOGIN', true);\nadd_filter('force_ssl' , '__return_true');\nto config/application.php ? in my bedrock repo?\nFor bedrock-ansible I'm going to create new template.yml file in nginx role, add those configs from blog\ncopy certs and use ansible to upload it to the server\nPlease let me know your thoughts and if I'm on the right track. \n. @swalkinshaw @QWp6t thank you guys. \n. I used bedrock-ansible to provision my DO instance.\nhttps://github.com/roots/bedrock-ansible/tree/master/roles/php/defaults\nsooo what should I change and run that role again against my instance\n. Cool! Thanks for doing it!\n. @francescolaffi Do you mind me to point to some online material, so I could understand what was happening and how you figured it out the fix. \nWould really love to understand details\n. Great, @swalkinshaw thank you\n. Ohhh I wanted to file it against bedrock-ansible repo :-( my baadd\n. Done. https://discourse.roots.io/t/re-provisioning-ansible-instance/3407\nAny idea why mysql server was shut down? Any way to figure it out? \n. @fullyint it was exactly the same thing. Thank you for your information. Now I know where to look for a fix. I also have 512 MB DO instance and I had the exact message \"Error establishing a database connection.\"\nI love GitHub community. @swalkinshaw do you mind to mention somewhere in the README about swap file in ansible repo? I think it would be helpful for others\nI successfuly applied https://galaxy.ansible.com/list#/roles/1262 this role to my playbook. I hope I won't see this issue anymore.\nabout /var/log/kern.log \nif you are interested what I had there:\nmy ip dest and mac address is removed\nMar 30 07:59:05 WP47 kernel: [4796265.462214] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=221.179.89.90 DST= LEN=60 TOS=0x08 PREC=0x00 TTL=47 ID=58268 DF PROTO=TCP SPT=56873 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nMar 30 07:59:08 WP47 kernel: [4796268.460925] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=221.179.89.90 DST= LEN=60 TOS=0x08 PREC=0x00 TTL=47 ID=58269 DF PROTO=TCP SPT=56873 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nMar 30 07:59:14 WP47 kernel: [4796274.461417] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=221.179.89.90 DST= LEN=60 TOS=0x08 PREC=0x00 TTL=47 ID=58270 DF PROTO=TCP SPT=56873 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nMar 30 12:24:14 WP47 kernel: [4812174.648236] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=218.106.254.121 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=50 ID=57469 DF PROTO=TCP SPT=57015 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 12:24:15 WP47 kernel: [4812175.643500] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=218.106.254.121 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=50 ID=57470 DF PROTO=TCP SPT=57015 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 12:24:17 WP47 kernel: [4812177.641726] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=218.106.254.121 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=50 ID=57471 DF PROTO=TCP SPT=57015 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 12:24:21 WP47 kernel: [4812181.640681] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=218.106.254.121 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=50 ID=57472 DF PROTO=TCP SPT=57015 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 16:28:19 WP47 kernel: [4826819.361712] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=123.57.134.96 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=49 ID=23416 DF PROTO=TCP SPT=38379 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 16:28:20 WP47 kernel: [4826820.361353] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=123.57.134.96 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=49 ID=23417 DF PROTO=TCP SPT=38379 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 16:28:22 WP47 kernel: [4826822.361614] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=123.57.134.96 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=49 ID=23418 DF PROTO=TCP SPT=38379 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 30 16:28:26 WP47 kernel: [4826826.361390] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=123.57.134.96 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=49 ID=23419 DF PROTO=TCP SPT=38379 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 31 14:08:23 WP47 kernel: [4904823.607547] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=74.208.162.125 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=55 ID=13650 DF PROTO=TCP SPT=56828 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 31 14:08:24 WP47 kernel: [4904824.606559] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=74.208.162.125 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=55 ID=13651 DF PROTO=TCP SPT=56828 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 31 14:08:26 WP47 kernel: [4904826.606525] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=74.208.162.125 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=55 ID=13652 DF PROTO=TCP SPT=56828 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nMar 31 14:08:30 WP47 kernel: [4904830.606188] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=74.208.162.125 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=55 ID=13653 DF PROTO=TCP SPT=56828 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  1 20:39:57 WP47 kernel: [5014717.469527] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=112.78.11.159 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=29969 DF PROTO=TCP SPT=49336 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0\nApr  1 20:39:58 WP47 kernel: [5014718.466181] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=112.78.11.159 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=29970 DF PROTO=TCP SPT=49336 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0\nApr  1 20:40:00 WP47 kernel: [5014720.470108] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=112.78.11.159 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=29971 DF PROTO=TCP SPT=49336 DPT=22 WINDOW=29200 RES=0x00 SYN URGP=0\nApr  2 04:06:19 WP47 kernel: [5041499.143284] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=77.247.177.23 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=54 ID=44177 DF PROTO=TCP SPT=39613 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nApr  2 04:06:22 WP47 kernel: [5041502.143184] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=77.247.177.23 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=54 ID=44178 DF PROTO=TCP SPT=39613 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nApr  2 04:06:28 WP47 kernel: [5041508.143115] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=77.247.177.23 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=54 ID=44179 DF PROTO=TCP SPT=39613 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nApr  3 01:54:11 WP47 kernel: [5119971.660889] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=218.27.204.27 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=53 ID=23863 DF PROTO=TCP SPT=36706 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 01:54:12 WP47 kernel: [5119972.660557] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=218.27.204.27 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=53 ID=23864 DF PROTO=TCP SPT=36706 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 01:54:14 WP47 kernel: [5119974.661243] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=218.27.204.27 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=53 ID=23865 DF PROTO=TCP SPT=36706 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 01:54:18 WP47 kernel: [5119978.661008] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=218.27.204.27 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=53 ID=23866 DF PROTO=TCP SPT=36706 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 02:56:51 WP47 kernel: [5123731.411106] audit: type=1400 audit(1428044211.730:9): apparmor=\"STATUS\" operation=\"profile_remove\" info=\"profile does not exist\" error=-2 profile=\"unconfined\" name=\"/usr/sbin/mysqld\" pid=28521 comm=\"apparmor_parser\"\nApr  3 08:22:15 WP47 kernel: [5143255.278614] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=23.98.75.149 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=24926 DF PROTO=TCP SPT=1127 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 08:22:16 WP47 kernel: [5143256.278217] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=23.98.75.149 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=24927 DF PROTO=TCP SPT=1127 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 08:22:18 WP47 kernel: [5143258.278146] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=23.98.75.149 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=24928 DF PROTO=TCP SPT=1127 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 08:22:22 WP47 kernel: [5143262.278291] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=23.98.75.149 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=48 ID=24929 DF PROTO=TCP SPT=1127 DPT=22 WINDOW=14600 RES=0x00 SYN URGP=0\nApr  3 15:14:14 WP47 kernel: [5167973.777367] iptables-blocked-ssh: IN=eth0 OUT= MAC= SRC=222.219.187.9 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=52 ID=64626 DF PROTO=TCP SPT=23117 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nApr  3 15:14:17 WP47 kernel: [5167976.778179] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=222.219.187.9 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=52 ID=64627 DF PROTO=TCP SPT=23117 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nApr  3 15:14:23 WP47 kernel: [5167982.777830] iptables-recent-badguys: IN=eth0 OUT= MAC= SRC=222.219.187.9 DST= LEN=60 TOS=0x00 PREC=0x00 TTL=52 ID=64628 DF PROTO=TCP SPT=23117 DPT=22 WINDOW=5840 RES=0x00 SYN URGP=0\nApr  3 22:27:14 WP47 kernel: [5193954.208327] Adding 499996k swap on /swapfile.  Priority:-1 extents:6 across:778524k FS\n. ",
    "sandrodz": "Thank you!\nhad same issue bedrock behind jwilder/nginx-proxy docker container with auto generated ssl was causing infinite redirect loop on wp-admin/wp-login\nhttp://trick77.com/2012/12/01/prevent-ssl-redirect-loop-using-wordpress-and-haproxy/ this resolved it.\n. I like .env files, I'm used to them in Laravel, ROR. please don't remove it.. This is example .htaccess I shipped with project.\n\nnginx\n\n. Btw, I'm including this info for someone who might end up here before your fixes are merged! I'm not suggesting this as a better solution or smth, your PR is awesome.. @henscu no, but I can provide them. I also have a very nice docker dev env for wp and laravel with respective nginx configs - I'm planning to share it soon - it contains correct configs for multisite too.. @swalkinshaw thanks! my plan was to report to both of you guys anyways :). @retlehs I know. Also this: https://github.com/roots/bedrock/blob/2162a7defd19f7a2229e5ede5223d729b95d6efb/config/environments/production.php#L7\nI think there is something weird going on with multisite installation and bedrock, maybe its worth investigating?. ",
    "lpirola": "Fixed link: https://trick77.com/prevent-ssl-redirect-loop-using-wordpress-and-haproxy/. ",
    "dcoxall": "This works unless it is the initial deploy:\nDEBUG[601ae7af]  Error: The site you have requested is not installed.\nDEBUG[601ae7af]  Run `wp core install`.\n. ",
    "alexsomeoddpilot": "I've isolated the issue to the order of the installer paths. By default the installer paths are:\n- wordpress-plugin\n- wordpress-muplugin\n- wordpress-theme\nSomething about this doesn't work with the way composer resolves types and thus the packages don't get installed as mu-plugins. Switching the order fixed the issue. This should be the default order on creating a new bedrock project.\nI've create a pull request (#104) to partially resolve the issue.\n. I've rebased the branch.\n. ",
    "szepeviktor": "Thank you for your answer.\nThis is the final product: Protect Plugin\nhttps://github.com/szepeviktor/wordpress-plugin-construction/tree/master/mu-protect-plugins\n. ",
    "chrisnx": "Sorry I've been quiet on this PR, I've done the rebase, hopefully correctly!\n. @swalkinshaw rebasing has been a disaster today and I'm not a git pro. Its only 2 lines that need changing so can you either sort the rebase out for me or just make the change to the repo?\n. Much appreciated @swalkinshaw! :+1: \n. @swalkinshaw just realised the description for this plugin is out of date since this change, could that be updated too?\n. ",
    "jambox": "Hey @swalkinshaw that did it for me, thanks! I was following the Deploying WordPress with Capistrano screencast and don't think that was included as a step...I actually just checked the gist for that screencast, and the only line that was related to that was\nset :linked_dirs, %w{media}\nMaybe it would be helpful to update the gist to include the line for .env?\nThanks!\n. yea that'd be great! I've been a WP dev for about four years and I'm really eager to dive into your workflow...the more resources the better...\n. ",
    "Rarst": "@austinpray \n. ",
    "CharlieHawker": "That's fair... I'd rather not be running PHP 5.3 anyway! \nThanks @Foxaii \n. ",
    "damongant": "Id' just like to mention that distributions that were the most recent quite recently will be on 5.3 for a while. (e.g. wheezy for at least another 8 months, trusty for almost 2 years) There are a lot of sites on the shared host I must deploy on, so foreign packages or upgrading PHP is not an option so I'd encourage it if requirements aren't bumped up without a good reason.\n. ",
    "fabschurt": "Well I guess it's a problem specific to Composer-based projects, and not especially Bedrock-based projects. I don't actually know about any workflow that would allow to easily keep in touch with latest update announcements outside of WP admin, but I guess it may exist.\nAnyway, for vendors that enforce semantic versioning, you should be good to go with a version constraint of ~2.0 for example, as the public API is not supposed to change until 3.0, and when 3.0 comes out, you will certainly have to get your hands dirty and modify your own code in order to keep it compatible with the new API anyway. But between 2.0 and 3.0, I guess it's kind of safe to have an automated workflow which updates vendors and deploys a new release every day or every week. With a tool like Capistrano you can still easily rollback to the previous release anyway.\nFor vendors that don't enforce semantic versioning, well, there's no good solution that I can think of. Version constraints have to be stricter of course. I guess you can still have an automated update/deploy workflow, but there's a higher risk that rollback will be used :confused:\n. > I tend to disfavor this change as well. Very little gain (a little bit of security, and a slightly decluttered interface) but not being able to readily review updates is a huge downside. Disabling auto-updates is one thing, but this change presupposes that we just regularly run composer sheerly for the fact that we're looking for updates.\nWell, it's the common workflow when you're developing a Symfony 2 (or any other \"low-level\" framework) application for example, and I think the main point of Bedrock is helping us use WordPress a little more like a framework and a little less like a CMS. When you develop a Symfony 2 application (for example), you don't have fancy notifications to keep you updated about latest bundle releases.\n\nThis change seems to be predicated on preventing user error, not actually protecting the fidelity of the code.\n\nNot exactly, my intent was in fact to completly separate \"user space\" (WP admin UI) from \"developer space\" (command-line, Composer, Capistrano, server environment, etc.). To me, admin interfaces are for users, and users only. Updates are not up to users, but to developers/IT people. In my opinion, there is no point in using Composer in the first place if it is not meant to handle all of the vendor installing/updating workflow, maybe helped with some automation (Capistrano, bash, cron, etc.).\nI guess a utility that would watch a root dev folder, take its composer.json + composer.lock pair as input and automatically show if there are updates available (and maybe display changelogs) would be pretty cool (maybe it exists already), but I think it's not up to a CMS admin area to provide such information.\n\nAs such, I think \"stupid proofing\" the installation should be up to the dev, even on production.\n\nWell, again, it's not a question of \"What could an admin user do wrong\", but \"Is it really up to CMS admin users to be notified about updates, not matter what the current environment is\".\nNote: @etcook I don't clearly understand your Toran-based workflow, so I think I'm missing your point about the usefulness of admin update notifications. So I guess they can be useful in certain cases, but I don't fully comprehend those cases right now.\nWith all that said, if really update notifications are useful to some developers and that it's not too big a problem to leave the possibility to update vendors from the admin UI in development, I guess DISALLOW_FILE_MODS could be enabled in production.php only.\n. @etcook Okay, now I get your point :wink: I actually did not think of the private/commercial packages case, and it's obvious that the fact that these packages are not listed on wpackagist makes maintenance tedious (even with the help of the repositories config directive), especially when dealing with a lot of these. It's also true that it's inherent to WordPress that development is split between admin UI work and source code work, as dirty as it may seems (to me), so workflows must reflect that.\nSo, moving this setting from global application.php to staging.php and production.php seems relevant to everyone?\n\nMy first inclination would be to build them as some kind of an extension to Packagist, however with Toran and Statis as credible alternatives, it would likely make more sense to be repo agnostic.\n\nYes, that would be very cool. This could be a standalone executable that would regularly poll any number of given endpoints (which could be listed in a configuration file or something), either local or distant, and send notifications via various protocols (syslog, e-mail, UI in the case of SaaS integration, etc.), with helpful information like new patch/minor/major releases, changelogs, etc. But I think we're going off-topic :smile:\n. > you want to handle the new PR?\nSure!\n. > my vote is to treat them the same\n:+1:\n. Here goes: #127 \nBut in the end, I now wonder if these new settings are actually relevant at all, and if it would not disturb too much developers to be worth it. The fact that update notifications are typically of no use to me (be it in development or production) doesn't necessarily mean that disabling them should me made default, even in production. So I don't know.\n. @etcook Thanks, let's hope other Bedrock users will agree with that.\n@swalkinshaw Oh, sure. I updated the PR.\n. ",
    "mattstratton": "OK, so that was what I was not totally sure about. The example doesn't show multiple plugins either (this seems to be a pretty common use case, as if a theme depends upon a plugin, I want to be sure it is activated and cannot be messed with).\nIs this line duplicated for each plugin\n\"web/app/mu-plugins/{$name}/\": [\"type:wordpress-muplugin\", \"roots/soil\"],\nor is it set up as an array?\n\"web/app/mu-plugins/{$name}/\": [{\"type:wordpress-muplugin\", \"roots/soil\"},{\"type:wordpress-muplugin\", \"mysite/plugin\"}],\n. So items that come from wpackagist would need this, but any of my own custom plugins that I have created a repository for would not, as long as I set their type to wordpress-muplugin?\n. OK, so I had an old version of Composer. Updating Composer to the latest version solved this. Sorry!\n. Fair enough! The PR referenced was a bit misleading to me. Thanks for\nclearing it up.\nOn Sunday, March 22, 2015, Scott Walkinshaw notifications@github.com\nwrote:\n\nI don't think you need to be worried about anything.\nbedrock-ansible https://github.com/roots/bedrock-ansible will always be\na separate project and there's no way for it to ever really be a\n\"dependency\". Even now with Capistrano there's nothing in the actual\nBedrock \"code\" related to Capistrano. It just has its own set of files (\nGemfile, Capfile, configs).\nIf/when Capistrano is removed, those files will just be moved into its own\nrepo so they won't go away completely. There will just be a section in the\nREADME about provisioning servers and deploys which will link to it.\nThe same goes for any other server management software (Chef, Puppet,\netc). Since there won't be anything in this repo to do with Ansible (other\nthan the README), there really is no dependency anyway.\n\u2014\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/153#issuecomment-84733841.\n\n\nSent from Gmail Mobile.\nHave you listened to Arrested DevOps today?\nhttp://www.arresteddevops.com\n. ",
    "fagiani": "@swalkinshaw it took me a couple of hours to understand what you explain in this very comment. \nI had some issues with a specific plugin because it's name was different from it's own composer.json specs. The require would work but plugin would appear on the regular plugins. After noticing you say ...has its package type set to... I've headed to the project's composer spec and noticed both it's type and it's real name. \nI'd really appreciate if this page could be a bit more detailed or elaborated about mu-plugins with regards to the package's composer options. \nKeep rocking!. ",
    "thewunder": "The composer.lock file will prevent it from being automatically upgraded without testing...\nI'm mostly a Symfony dev not a wordpress dev, so if you don't think it's safe I'll remove.\n. Rebased\n. That's what happens when you use phpstorms rebase, it copied the commits...\nUsed git push --force for the first time ever :boom: \n. ",
    "jaywilliams": "This is the way I have mine setup, actually. Composer locks the version, so any version change can easily be reverted.\n. ",
    "teohhanhui": "Unfortunately I still have to manually restart nginx and php5-fpm (I'm not sure which is causing the issue) after each deploy. Otherwise I get some weird HTTP 502 Bad Gateway errors from nginx (on wp-admin) and my manual code changes on the server (e.g. test editing plugin code) are just giving me plain odd behaviour.\nI also used bedrock-ansible for provisioning...\n. ",
    "o1y": "Strange. It seems there are no wp cookies set on my frontend. The LOGGED_IN_COOKIE is missing which is causing the issue. But in the backend all user data are available. Can you replicate this on your frontend side?\n. ",
    "mrobit": "All good! Just wanted to put the idea out there. Thanks for the consideration.\n. ",
    "kix": "@QWp6t, actually, there is a difference at the opcode level. Let's take a look:\nphp\n<?php\n// dirname.php\necho dirname(__FILE__);\n\u2026transforms to these opcodes:\n```\nline     #* E I O op                           fetch          ext  return  operands\n\n2     0  E >   EXT_STMT\n         1        EXT_FCALL_BEGIN\n         2        SEND_VAL                                                 '%2FUsers%2Fkix%2FDocuments%2FCode%2Fphp%2Fopcode-test%2Fdirname.php'\n         3        DO_FCALL                                      1  $0      'dirname'\n         4        EXT_FCALL_END\n         5        ECHO                                                     $0\n   3     6      > RETURN                                                   1\n```\nAnd this:\nphp\n<?php\n// const.php\necho __DIR__;\n\u2026looks like that in opcodes:\n```\nline     #* E I O op                           fetch          ext  return  operands\n\n2     0  E >   EXT_STMT\n         1        ECHO                                                     '%2FUsers%2Fkix%2FDocuments%2FCode%2Fphp%2Fopcode-test'\n   3     2      > RETURN                                                   1\n```\nAs you can see, dirname() approach requires FCALL, while in case of __DIR__ only a compile-time constant is being used.\nThis affects performance, but just a slightest bit (I've wrapped the echo call in a for loop that repeats 1\u00a0000\u00a0000 times):\n$ time php const.php  > /dev/null\nphp const.php > /dev/null  0.77s user 0.56s system 60% cpu 2.221 total\n$ time php dirname.php  > /dev/null\nphp dirname.php > /dev/null  1.86s user 0.50s system 99% cpu 2.362 total\n. @swalkinshaw, yup, thanks for pointing it out. It's fixed now.\n. ",
    "TomasVotruba": "I haven't notices it's the same organization. Fixed!\n. Thank you!\n. ",
    "dmncls": "Great - you're right it isn't an issue.\nWhen I've installed Wordpress from a zip in the past I remember getting an SQL script to install into the database that WP uses. I must be missing something obvious if this makes no sense to you.\nAny idea what I mean?\n. Ok thanks. \nMy problem was enhanced because I changed the name of the wp directory in the composer.json and in .env - but it seems something was still lost and it wasn't finding the install script.\nThanks for your help.\n. Thanks @QWp6t \nI also found one more place to change it - in web/index.php.\n. ",
    "soifou": "OMG you're so right, I forgot to read this part of the doc... everything works indeed. \nThanks and sorry for this one !\n. ",
    "rasmusbe": "Done! :)\n. Thank you for your reply @Foxaii \nLike @QWp6t said, we do use Redis as object cache. And we are deploying by using Capistrano. We do have a Capistrano task to flush the cache when deploying (and for example adding new mu-plugins) and right now the mu-plugin cache is not invalidated, therefore generating some trouble for us.\nWith this change the mu-plugin cache is invalidated correctly when other cache values is flushed.\n. I'm sorry for a slow reply.\nIf we add a new mu-plugin it won't be loading after deploy since it's not in the site option and it won't be loaded until someone visits the wp-admin plugin page.\nIf the plugin uses transients instead and we flush the object cache when deploying it will be loaded.\n. @Foxaii \n. ",
    "alexciarlillo": "It occurs to me, too late of course, that this might be better suited for Discourse. Apologies.\n. @rohmann I see your point and I agree. There are enough options for caching outside of the WP environment that it doesn't make sense for Bedrock to get involved. However, I do think that establishing some best practices for using simpler caching methods (read: W3TC and WPSC) would help others in the Bedrock community.\n@etcook I am just getting sysops to bring us up to PHP 5.5 and Apache 2.4 on RedHat 6... I am doing my best to modernize our stack but right now it is baby steps and getting the support from sysops the further we deviate from the standard (read: outdated) LAMP stack they offer the rest of the departments. \nI suppose my problems are mostly institutional, and there already exist many correct solutions to this problem. I am trying to find ways around artificial restrictions imposed by those who manage the environment, while at the same time adhering to Bedrock's principles. I'm sure I'm not the only one in this community doing so, but I don't feel like this particular venue is appropriate for the discussion so I will go ahead and close this. \nI appreciate your responses and will mostly likely just go ahead and commit advanced-cache and object-cache into my app folders for now until I can get buy in to establish a more modern LAMP stack.\nThanks\n. @etcook External Varnish or Redis is something I had not really considered. Varnish is a possibility since it acts a reverse proxy. I am not as familiar with Redis but assumed the overhead from needing to fetch data off-site would begin to negate caching improvements. \nI have never been too concerned about our Apache performance. Our sites really are pretty low traffic, it is just that occasional burst that kills us. That's why a lot of these solutions seem like overkill for our situation. Just caching the home page and our news page would probably solve 99% of the problem when we run into that load spike, which is why I was trying to keep it simple. \n. Well the requirement of php-memcached instead of php-memcache kills the memcached solution for me. I am limited to packages available in RHEL Software Collections (php 5.5 and a good amount of modules are available, but not the -memcached one). Luckily Nginx is available to me so I think that is my best bet for a real caching solution. \n. @swalkinshaw ahh my mistake. thanks for clarifying. \n. ",
    "rohmann": "Honestly I wouldn't want Bedrock to get too deep into caching, as that can get pretty opinionated.\nadvanced-cache.php is actually more functionality rather than configuration. You can override it's global variables in your config files though. Batcache hasn't really needed to be updated. It's old in internet years, but solid. I'm pretty sure they use a modified version of it on WordPress.com.\nBatcache doesn't work with memcached directly, instead it interfaces with the WordPress Object Cache. You need the Memcached backend plugin, because it allow WordPress to use Memcached as an object cache. You could really use any object cache you want. Here's one for Redis that works nicely: https://github.com/ericmann/Redis-Object-Cache\nBedrock gets us miles towards a sustainable deployment environment, but honestly until WordPress allows for some changes it will never be perfect. Personally I just commit the advanced-cache.php and object-cache.php right into my app folders and just manage their updates manually.\n. ",
    "cmosguy": "So is the consensus here to stay far away from W3 Total Cache?  I just ran into the problem wither none of the files could be served from from the /app directory etc.  Yes @swalkinshaw  it is a total mess with bedrock.  What do you guys recommend to here then?\n. @swalkinshaw thanks!  BTW, what do you guys use that does the CDN and minification for the .css and .js files to AWS Cloudfront or some other provider?  I liked the W3TC because it could do this, but I'd like to know which plugin you are using that is compatible with Bedrock.\n. ",
    "austenc": "I see this is either in process or already done. Would it be possible to create a repo with rocketeer configs as well? I'm happy to create one in my account that you can be copied over if you'd like? Willing to help with this however I can!\n. Awesome, thanks @swalkinshaw. I like capistrano, but a full composer / php is just easier for me! I'll let you know when I've put something up, cheers!\nEdit: Wasn't thinking clearly earlier. There's no need for another repo, since I don't need to rip out the capistrano stuff anymore, adding rocketeer is as easy as adding a line to composer and calling rocketeer ignite to bootstrap the config files.\n. ",
    "fullyint": "@rstormsf I don't know if it's the same thing, but on my little 512 MB DigitalOcean droplet, the oom-killer will kill mysql after a few days unless I have added a swap file. You might search  /var/log/kern.log for 'oom-killer'. For me, mysql doesn't restart after being killed (like other services do, I'm told), so my site was left showing nothing but \"Error establishing a database connection.\" I've been meaning to PR bedrock-ansible to add a swap file. Oh wait, someone did in roots/bedrock-ansible#152\n. Most users find that these steps resolve the issue: https://discourse.roots.io/t/johnpbloch-wordpress-moved-to-a-new-configuration-and-wp-goes-missing/9124/45\nI'm closing this because there is no code nor bug to be fixed in Bedrock.. ",
    "ghostal": "Good detective work on this, saved me what I can only imagine would have been an annoying amount of time!\nTo clarify, the issue arises from having a docker container with the alias db. This means any container linked to it has an environment variable set called DB_NAME containing the fully qualified container name, which obviously conflicts with the .env file.\nOne solution, as described above, is to simply alias your docker database container something else (e.g. database, mysql, etc).\nHowever, these environment variables are only created when using the version 1 of the docker-compose.yml file format (as stated here). Upgrading your docker-compose.yml file to version 2 or higher of the format means you won't have the issue any more - you can still alias your database container db :tada: :smile: . ",
    "MikeiLL": "It seems like most web devs will be moving from Shared to VPS hosting, since VPS is so affordable and package management is making it \"very easy\" to configure a server. But in the meantime I certainly look forward to whatever insights and tools can me made available for Bedrock-style deployment in a shared environment.\n. I'd like to contribute, but am also a little glassy-eyed about where this codebase goes. Is it a plugin that would potentially be installed with composer? Would that be $ composer require roots/wp-config?. @austinpray yes see you then.. ",
    "jordywijman": "Isn't this a way more clean solution for this issue, you can't really get it more dynamic this way.\nThoughts on this?\n```\nAdd directives\nRewriteEngine on\nChange root directory to \"web\" folder\nRewriteCond %{THE_REQUEST} ^GET\\ /web/\nRewriteRule ^web/(.*) /$1 [L,R=301]\nRewriteRule !^web/ web%{REQUEST_URI} [L]\n```\n. ",
    "hello-jason": "~FYI, I am no longer seeing this error message on WP Engine.~\nEdit: I believe I mispoke, and there is an issue on my end.. ",
    "jamiechong": "I managed to make bedrock autoloader and WPEngine work together by modifying a few files:\n\ncomposer.json\nchange \"web/app/mu-plugins/{$name}/\" to \"web/app/mu-plugins/bedrock/{$name}/\"\n\n\nbedrock-autoloader.php\nchange self::$relative_path = '/../' . basename(__DIR__); to self::$relative_path = '/../' . basename(__DIR__) . '/bedrock';\nchange all instances of WPMU_PLUGIN_DIR to WPMU_PLUGIN_DIR . '/bedrock/'\n\n\n\nYou will then need to run composer update and likely delete the plugins within mu-plugins that are leftover and now within the bedrock subfolder (they weren't auto removed for me).\nI literally just got this working, so will report back if it fails, but so far so good.. ",
    "lvampa": "I too just ran into this issue with WPEngine. Since I prefer using Bedrock and Trellis for my development environment, but WPEngine is picky about structure, I set up my app directory as a submodule that I push to WPEngine for deploys.\nTo solve the issue, I added bedrock-autoloader.php to the .gitignore, moved the file to an archive directory, then used a composer post-install script to move the file in on a composer install.\nMy composer.json\n\"scripts\": {\n    \"test\": [\n      \"vendor/bin/phpcs\"\n    ],\n    \"post-install-cmd\": [\n      \"./install.sh\"\n    ]\n  }\nand install.sh looks like\n```\n!/usr/bin/env bash\nPLUGIN_DIR=./web/app/mu-plugins\nSOURCE_DIR=./archive/\nCopy bedrock plugins into correct folder\nrsync -a --include='*.php' $SOURCE_DIR $PLUGIN_DIR\n```\nThis solution is far from perfect, but it leverages composer, and also means I don't have to edit a core Bedrock file so if there are updates to that file in the future, it will be easier for me to pull in the changes. I can use composer to get the files I need for local development, and since they are not tracked in the mu-plugins directory, WPEngine doesn't have a problem.. ",
    "y2keeper": "I can confirm that your solution works for me too @jamiechong - with the small addition that I had to modify the default bedrock .gitignore file to have the bedrock/ dir recognised.. ",
    "dhuyvetter": "Sorry, was filtered out of bith my local and ftp view. My mistake. ;)\n. ",
    "hamza765": "Fatal error: Uncaught exception 'RuntimeException' with message 'Required environment variable missing, or value not allowed: 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'WP_HOME', 'WP_SITEURL'' in C:\\wamp\\www\\vendor\\vlucas\\phpdotenv\\src\\Dotenv.php on line 106\nRuntimeException: Required environment variable missing, or value not allowed: 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'WP_HOME', 'WP_SITEURL' in C:\\wamp\\www\\vendor\\vlucas\\phpdotenv\\src\\Dotenv.php on line 106\nAnd sorry, i didn't know how else to get help. Google didn't help much.\n. ",
    "pcfreak30": "I am using this while creating a docker stack, so ENV is passed via docker-compose and shell entry script, thus how I caught the errors. No .env used.\nSee https://github.com/pcfreak30/bedrock-docker :).\n. Any ETA for tagging a new release? Would like to update my docker repo back to using the official git repo.\n. @louim I know, but my Dockerfile pulls the latest tags aka release rather than the head of the repo to ensure its a stable version.\n. ",
    "jumbojett": "\nWhich paths does Bedrock fail to reference? \n\n@QWp6t Bedrock references most paths correctly. It could be an issue with wordpress core not referencing the correct paths within the Bedrock shim. Most of the URLs in the admin dashboard fail to resolve correctly if index.php is launched with the built-in webserver from another directory. For example /wp/themes.php. I hope this makes sense. \n. Additional info.\nhttp://stackoverflow.com/questions/5254000/php-how-to-set-current-working-directory-to-be-same-as-directory-executing-the\n. ",
    "PanzerKunst": "Big thank you, you were totally right. I switched from the \"php_mysql\" extension to the \"php_mysqli\" extension and it solved the issue.\nI just wonder why this error didn't appear when I was doing the exact same thing with vanilla Wordpress...\n. ",
    "oktalk": "@PanzerKunst I'm experiencing the same issue as you. Could you please share your solution? I don't know PHP well enough to:\n\nswitch from the \"php_mysql\" extension to the \"php_mysqli\" . Ha! It looks like you can get WP-CLI working if you update the path in your wp-cli.yml file. When I set my path to path: web then run wp server everything works.. I could PR this if you want.. \n",
    "petterannerwall": "Ok, thanks, totally forgot about php errors. This is the error im getting.\n( ! ) Fatal error: Uncaught exception 'RuntimeException' with message 'One or more environment variables failed assertions: DB_NAME is missing' in C:\\NotSourceControl\\SageDemo\\bedrock\\vendor\\vlucas\\phpdotenv\\src\\Validator.php on line 102\n( ! ) RuntimeException: One or more environment variables failed assertions: DB_NAME is missing in C:\\NotSourceControl\\SageDemo\\bedrock\\vendor\\vlucas\\phpdotenv\\src\\Validator.php on line 102\nCall Stack\nTime    Memory  Function    Location\n1   0.0003  138088  {main}( )   ...\\index.php:0\n2   0.0007  139800  require( 'C:\\NotSourceControl\\SageDemo\\bedrock\\web\\wp\\wp-blog-header.php' ) ...\\index.php:5\n3   0.0011  148936  require_once( 'C:\\NotSourceControl\\SageDemo\\bedrock\\web\\wp\\wp-load.php' )   ...\\wp-blog-header.php:12\n4   0.0016  150616  require_once( 'C:\\NotSourceControl\\SageDemo\\bedrock\\web\\wp-config.php' )    ...\\wp-load.php:42\n5   0.0042  212248  require_once( 'C:\\NotSourceControl\\SageDemo\\bedrock\\config\\application.php' )   ...\\wp-config.php:8\n6   0.0074  265680  Dotenv\\Dotenv->required( )  ...\\application.php:11\n7   0.0080  276680  Dotenv\\Validator->__construct( )    ...\\Dotenv.php:83\n8   0.0080  276992  Dotenv\\Validator->assertCallback( ) ...\\Validator.php:44\n. Indeed, but as you can see in the .env i posted above it's there and the .env file is located directly in the bedrock folder.\nI tried with multiple different databases that other installations use without problem and it still doesn't work.\n. Thanks and sorry for bothering your here, just posted a topic there. https://discourse.roots.io/t/fresh-bedrock-install-php-error-db-name-missing-in-validator-php/4578\n. Just solved it, leaving a reply here aswell if anyone finds this issue.\nThe problem for me was not having a blank row at the very top of the .env file. Seems like the first row isn't read for some reason. Tried putting another variable at the top row and got a warning message stating it was missing then so it's not connected to the DB_NAME property.\nMaybe add a blank row to the .env.example to avoid this happening to others?\nUPDATE\nFound out the issue, the file was saved as UTF-8. Changed it to ANSI and removed the top blank line and it still works!! \n. ",
    "kiwiot": "Thanks for the quick reply\n. ",
    "damianwajer": "I know that this kind of structure is weird, but apparently it happens sometimes in environments where domain directory public_html appears to PHP like the root directory / (probably like you've said for security reasons - a form of masking the server's folder structure). \nIn order to make Bedrock works, I had to point a domain to a subdirectory /web (which in my case is /public_html/web but appears to PHP as /web). Maybe the better solution is to create another directory, e.g. /www move Bedrock there, then point a domain to a subdirectory /www/web so document root is /www/web and $root_dir is /www.\nI'm not sure if it should be added to Bedrock by default but it's an issue that may occurs in some shared hosting environments.\nAnyway, your solution will also work.\n. ",
    "Qoto": "@retlehs this is to support the MU Domain Mapping plugin with mapped subdomains on LEMH setups. This is confirmed by 4 different installations.\nYou also have #58 as reference.\n. Funny, how I still got this issue almost 3 years with 2 new installations and was still able to fix it with #216 maybe you can reconsider my pull request. ",
    "lukecav": "This is a related core ticket for plugins restrictions should not be set when DISALLOW_FILE_MODS constant is enabled in wp-config.\nhttps://core.trac.wordpress.org/ticket/25219. ",
    "jsonfry": "That was meant to be just on our fork... My apologies, I'll learn to push buttons better in the future. \n. ",
    "iamskok": "@swalkinshaw :+1: \n. ",
    "garand": "Oh nice. Didn't know I could do it that way.\nCurious on why you're against it though? Anything I'm missing that it breaks?\n. Gotcha, thanks for the added insight! \ud83d\udc4d\n. ",
    "leanderlindahl": "Ok, so reading in #184 I discover salts are not needed on local install...\nI still find the instructions slightly confusing, sorry if I'm being thick, but I'm unclear about what the sequence is\n1. Clone bedrock to your machine\n2. Execute composer install\n3. Copy .env.example to .env and add your case specific settings (db name, dblogin etc)\n4. Add a theme to themes folder\n5. Configure your local machine (hosts, vhosts)\n6. Log in at wp/wp-admin\nWhat I don't understand is how/when the variables in .env will be transformed into a wp-config file. There is no command executed after the .env is created and given the db settings \u2013 it's just a file lying about...\n. QWp6t, thanks for your answer and I can see your point about this not being the right forum for support, but I still feel the instructions seem to be missing some step or steps, which is a legitimate issue for the project.\n. Perhaps the requirements need to be clarified if it is not the installation instructions? I have PHP 5.5 (5.5.29) and Composer installed and followed the installation instructions. \n. @swalkinshaw Thanks for taking the time to reply. I really like the entire Roots project and \"suite\" and it's a great resource and opportunity to pick up good coding and workflow practices. I use it whenever there's an opportunity.\nNow to the actual issue: I know the DB credentials are valid. I run 30-40 local installs with the same credentials. And I know the virtual host is correctly configured because I can load loc.mysite.dev/readme.html... I even started to think perhaps the .env file doesn't have the right permissions and can't be read and put the entire project (including .env) to chmod 777, just to make sure.\nI guess this is something we would have discovered right away if we were in the same room but obviously it can't be conveyed or identified in this format. I believe you when if you say it is working both in theory and in practice. But it doesn't for me. (And I've had the entire stack with Trellis installed and working several times, so I'm not completely lost with this stuff).\nMy guess is that there is one piece of the puzzle somehow missing and that's why I suggested  that there might be some \"implicit\" knowledge that could be missing in the requirements or instructions. \nFollowing QWp6t suggestion I have continued the discussion here https://discourse.roots.io/t/missing-step-installing-bedrock/5542\n. ",
    "ocasta": "The problem with deleting the file is we would need to remember to do it whenever we re-install bedrock. \nI've worked round the issue adding the following to one of our plugins\nif ( WP_ENV === 'staging' && has_filter( 'pre_option_blog_public', '__return_zero' ) ) {\n         remove_filter( 'pre_option_blog_public', '__return_zero' );\n    }\n. ",
    "dvorakluk": "@swalkinshaw Here you are :)\n. $ VAR=1 php -r \"var_dump((bool) getenv('VAR')==\"true\");\"\nbool(true)\n$ VAR=0 php -r \"var_dump((bool) getenv('VAR')==\"true\");\"\nbool(false)\nCase-sensitivity is another story, good point.\n. Of course, I just thought that the longer version is easier to understand.\n. ",
    "andrewfrankel": "Noticed something similar recently... but should it be \"True\" (capital T)? That's how booleans render for me in the .env file. \nSOME_VAR=\"True\"\n. ",
    "madalinignisca": "I agree also, uploads have nothing to do with application and should be out of the \"app\" folder.\n\"/web/media\" or \"/web/assets\" I find it making more sense, but \"/web/uploads\" would work too.\n:+1: \n. ",
    "thomascharbit": "I agree with this.\nIf functional benefit was the only concern for Bedrock, why renaming wp-content into app in the first place?\nI don't see how having an uploads folder into an app folder is semantically correct.\nIs there any other reason that would explain the choice not to move to the  uploads folder to its parent folder?\n. ",
    "ollietreend": "Hey @ionut-tanasa \nThe best way to migrate your site would be to start with a fresh install of Bedrock WordPress, and just migrate across the themes and plugins from your old installation. In theory, the only files that you've changed in your old install will all exist inside the wp-content directory.\nIn bedrock, the directory web/app serves the same purpose as wp-content \u2013 it just has a different name. Therefore you should be able to simply move all subdirectories of wp-content over to bedrock's web/app directory.\n. ",
    "jamesgol": "I just searched through plugins I have on a development system and there are 2 plugins that call it, but those are each calling it from a secure location.  I have definitely seen it exposed before only plugins that I've audited for security issues.\n. I was originally just going to submit a PR that would just do it, but figured it would get more traction by having it be configurable.\nI would have used the dotenv function if it was exposed, but alas it is not exposed because $loader is protected:\n/**\n     * The loader instance.\n     *\n     * @var \\Dotenv\\Loader|null\n     */\n    protected $loader;\n. The design is a bit odd to me also. It would make sense if \\Dotenv\\Loader\\load() returned a self reference, but it returns an array of all the lines.\n. Another possibility to doing this instead of adding a function would be to just look using an array\nforeach (array( 'DB_NAME', 'DB_USER', ... ) as $key) {\n  putenv($key);\n  unset($_ENV[$key], $_SERVER[$key]);\n}\n. Unfortunately putenv doesn't covert it completely, since the keys are also in $_ENV and $_SERVER.\n. Being leaked via phpinfo() was/is my biggest concern, because I have seen plugins give open access to that function, though I was not using Bedrock (or anything that stored important data in env vars) at the time so it wasn't a major deal. I worked with the developers to restrict access to that, but if it's happened before it will happen again.\n. Why not just add something like the PR (but make it so default is to unset vs how I did it) for the interim and keep the dotenv support for backwards compatibility, then add in the parse-ini as an option that people can migrate to assuming they have > 5.6.1.  The code to do both isn't very complicated.\nFor the ini file you could have a subcategory that everything in it just gets used as a key pair for a define and then other subcategories could be used for other future uses.\n. A huge disadvantage to JSON is the lack of comments\n. ",
    "donaldallen": "Doesn't the PHP dotenv readme indicate that you shouldn't use it in production?\n. ",
    "bjorn-ali-goransson": "How about JSON? Could be easier, if more complex structures were needed (they are automatically converted to arrays and expando stdClass objects when using json_decode...)\n. YAML?\n2016-03-24 22:57 GMT+01:00 James Golovich notifications@github.com:\n\nA huge disadvantage to JSON is the lack of comments\n\u2014\nYou are receiving this because you commented.\nReply to this email directly or view it on GitHub\nhttps://github.com/roots/bedrock/issues/240#issuecomment-201043066\n. There's an instructional comment in .env.example that says how to generate salts from wordpress.org.\n\nAlso, commenting out stuff (rather than commenting stuff) is handy from time to time\n. Sounds like a plan. I'll make a PR there when it's done.\n. ",
    "dlundgren": "You might want to look at josegonzalez/dotenv. I switched to it from vlucas/phpdotenv because I didn't like the variables being leaked into the environment. By default josegonzalez/dotenv will only export into the environment when told to.\nI use the following in my non-wordpress projects:\n``` php\n$envLoader = new \\josegonzalez\\Dotenv\\Loader(ROOT_PATH . '/.env');\n$envLoader->parse();\n$env = $envLoader->toArray();\n```\nI then access the array for what I need. There is an expect() function that does the same as required().\nForgot to note this has an extra dependency on m1/env.\n. ",
    "COLABORATI": "Please just include a plain php file, then it is also possible to remove that unneeded autoloader overhead. This is wordpress, it is not java or rails or django, keep it simple. If the goal is to keep config values out of the repo, then this is the most direct way to achieve it. Just plain php in the config folder. Look at this thread and learn what complications that dotenv overhead created - do not overcomplicate things. Keep it simple. Thanks!\n. Re the ini file special character issue: \nhttp://stackoverflow.com/questions/36458964/wrong-output-of-ini-file-after-parsing/36459482#36459482\n. Yes, I contributed here, please just copy paste what you want, thanks for your attention and good luck!\n. ",
    "singlow": "Does updating the wpackagist repo url to https fix this for others? I am still getting non-https svn urls from wpackagist which cause the same exception.\n. ",
    "TWG-Matt": "@bjorn-ali-goransson I'm not that familiar with IIS and I'm trying to get this setup using your instructions but I'm having no luck.\nWhen I view the site using localhost/ I get the following error.\n403.18 - Forbidden 'The specified request cannot be processed in the application pool that is configured for this resource on the Web server.'\nThis is odd as I have 5 other WordPress sites configured and running on this server.  They are not using bedrock though.\nIn the Detailed Error Information I have these two items but they are wrong.\nRequested URL: http://localhost:80/web/\nPhysical Path: D:\\Web\\Sites\\web\\\nWhen they should be:\nRequested URL: http://localhost:80/site1/web/\nPhysical Path: D:\\Web\\Sites\\site1\\web\\\n. ",
    "vinkla": "@swalkinshaw okay, I understand. Do you know how WordPress handles this on their salt page?\n. Oh, okay. Too bad :(. ",
    "DavidSchargel": "Why do simple things like this make me so happy? Thanks, @austinpray!\n. ",
    "iandunn": "x-ref: https://core.trac.wordpress.org/ticket/36507\n. ",
    "dubcanada": "Adding\n$url .= 'wp/';\n\nTo network_site_url function in link-template.php fixes it, but that's obviously not a correct fix.\nFor now what I did was use the network_site_url filter to fix the urls.. ",
    "henscu": "@sandrodz do you have your example .htaccess and nginx configs above in a gist or webpage so that they can be easily cut and pasted?. @sandrodz that would be great. I'm also working on getting my Docker env going, and am looking at the entire workflow from initial generation of WP database & code in Vagrant using Trellis, then migrating the db from inside Vagrant to use with Docker and merging upstream changes from Trellis etc... I'm not sure if anyone else has done this yet.... ",
    "smarterdigitalltd": "Hi all, I'm just going to leave this link here: https://github.com/felixarntz/multisite-fixes/blob/master/mu-plugins/wpms-site-url-fixer.php\nIt's not mine, but it works well for me. I've tried many times to get multisite (subdomain) + bedrock working on a managed WP host (I'm with Kinsta) with no luck, but after another 6 hours of tearing my hair out today, I stumbled across this.\nSimply add it as an mu-plugin and define a constant in application.php for\ndefine('WP_CORE_DIRECTORY', 'wp');\nand that's it. . ",
    "felixarntz": "@smarterdigitalltd I specifically wrote this with Bedrock in mind :). Very happy to read that this is now in official hands - thanks @JulienMelissas! :). ",
    "JulienMelissas": "Hey everyone! I've finally had a chance to take a look at this ticket. Please check out https://github.com/roots/multisite-url-fixer (install this as an mu-plugin, run composer install) and see if it works for you \ud83d\ude04  - it's working on my multisite for sure right now. If in fact it's working for everyone, I'll add it to packagist and to the bedrock multisite docs. Would love feedback ASAP.\nThanks again to @felixarntz for the og code (hi Felix!!).. @greatislander, we're working on that over here: https://github.com/roots/multisite-url-fixer/pull/2/\nWould you be willing to test? Would be a great help for me and maybe I could then close out these issues and finish this all up! Thanks.. Thanks for the feedback and testing @greatislander! I'm going to close this now with the solution of people using https://github.com/roots/multisite-url-fixer. Bedrock Docs are coming.. @Preen - regarding your issue, can you please make a thread on Discourse and maybe someone can help you there? I think your issue might lie in define('DOMAIN_CURRENT_SITE', env('DOMAIN'));.. Just for reference purposes, https://github.com/roots/multisite-url-fixer should now help with this.. Just want to mention many of us on the Roots team are running pretty large, mission-critical, and awesome multisite installs with Bedrock, so I can assure you it works. I'm working on 100% compatibility with this mu-plugin over here: https://github.com/roots/multisite-url-fixer. Would love your feedback on that plugin, and it's close to working with both subdomain and subdirectory installs.. Understood. Might have been related to https://github.com/roots/bedrock/issues/325 tbh. I haven't had time to test it or look into it, but if you ever want help in the future feel free to use our discourse for more specific back and forth.. @slackday - nice! Thanks for providing some detailed stuff here too :)\nWe're always looking for some more blog posts, and I do think that limiting post revisions is a handy thing to know. Would you be interested in fleshing all of this out a bit more and writing a post about limiting post revisions? It can be quick, but real-life examples of performance impact are always welcome. Let me know what you think!. I'll weigh in @QWp6t... I liked the \"Why?\" - especially if it just leads to some documentation.. Nice golf \ud83c\udfcc\ufe0f LGTM. Do we want to add the text domain for \"roots\"? \ud83d\udc8b . Hey there, can we correct to \"WordPress\" please? https://codex.wordpress.org/Function_Reference/capital_P_dangit \ud83d\ude1d. ",
    "Preen": "Im getting\n\nNot Found The requested URL /wp-signup.php was not found on this server.\n\nwith\ndefine('MULTISITE', true);\ndefine('SUBDOMAIN_INSTALL', true);\ndefine('DOMAIN_CURRENT_SITE', env('DOMAIN'));\ndefine('PATH_CURRENT_SITE', '/');\ndefine('SITE_ID_CURRENT_SITE', 1);\ndefine('BLOG_ID_CURRENT_SITE', 1);\nWhenever I activate that plugin and use that config. Is there a guided tutorial somewhere to get multisite up n running with bedrock?. ",
    "greatislander": "@JulienMelissas The new plugin seems to be working for me. One question though\u2026 in @felixarntz's original repo, it says:\n\nEverything here should only be used for subdomain (or domain) setups. Do not use with subdirectory setups!\n\nDoes this still apply? Thanks in advance.. @JulienMelissas will do \ud83d\udc4d . Sorry, all. Not enough coffee yet.. @k-k-k-kirill I think this PR should be against a different repo.. ",
    "reverbsoul": "Thanks for this @felixarntz - been looking for this fix for a while.\n. ",
    "oxyc": "No extensive testing done but so far so good\u2013all the URLs seem to be fixed with this PR.\n. ",
    "xyNNN": "What's the state of this PR?\n. ",
    "amenk": "@felixarntz did this fix all issues? are you working on a standalone package?. ",
    "lekkerduidelijk": "The PR #276 by @ryanplasma fixed my issues. It's a small mu-plugin file. \ud83d\udc4f . Check out #251 . ",
    "nabsalz": "update my database info in .env fileand accept my pull request\n. ",
    "timotheemoulin": "Well it is still in use in some old plugins.\nThanks\n. ",
    "yeah": "230 breaks fresh installs on MySQL servers which don't support utf8mb4 yet.\nSteps to reproduce:\n1. Set up a MySQL server that doesn't support utf8mb4\n2. Follow instructions at https://roots.io/bedrock/docs/installing-bedrock/\n3. Complete installation wizard at /wp/wp-admin\n4. An error message appears: WordPress database error installation: Unknown character set: 'utf8mb4'\nExpected behavior: \n- WordPress should install cleanly.\nThis pull request allows users to define DB_CHARSET=utf8 (without the mb4) in their .env to make things work.\n. I am not sure how that relates to the problem I mentioned. I'm new to bedrock, so please bear with me. How should I properly address the problem described above if not by this PR?\n. So, where exactly do you expect people to set the charset if they're running a MySQL version that doesn't support it? Am I expected to run a fork of bedrock in that case?\nThe point I'm trying to make is that https://roots.io/bedrock/docs/installing-bedrock/ does not result in a working WordPress install in case the MySQL server used doesn't support utf8mb4.\n. Alright then. Should not https://roots.io/bedrock/docs/installing-bedrock/ mention a minimum requirement of MySQL 5.5.3 then? \n. > edit: you should basically always be running a \"fork\" of Bedrock. It's a boilerplate project that you should customize.\nok, thanks.\n. ",
    "mostafasoufi": "Sorry. resolved!\n. ",
    "ankurk91": "Agree, updated the command.\n. Ok, no problem. . Are you sure you want to merge your code into the repo?. Updated, please check, feel free to modify in my repo, see how. ",
    "k1sul1": "I think it's pretty much the same thing as the disallow indexing mu-plugin, but that's just my opinion. Soil was just an example, and as you must know, this is very trivial thing to do, but often overlooked (or forgotten). \nhttps://github.com/roots/soil/blob/master/modules/disable-asset-versioning.php\n. ",
    "shaneog": "Other files such as .travis.yml, CHANGELOG.md, .gitignore, etc. can also be removed from the dist export using this method.\n. Is .env.example not useful for new users? And copying it is mentioned in the README.\n. @swalkinshaw Updated. \n. ",
    "ssteinerx": "Changed to un-lazy numbering, ready to merge.\n. Fixed, was previously inline, forgot to remove when I separated them.\n. This is the recommended way of doing numbered lists as Markdown will take care of renumbering them so, when you add or remove an item, you don't have to manually redo everything.\n. Original Markdown Docs\nGo there and search for: \nIf you instead wrote the list in Markdown like this:\nThere is a note there specifically instructing to use the number 1. due to future versions of Markdown allowing starting numbered lists at arbitrary numbers.  \nThe way I did  it is not only canonically correct but makes future additions/subtractions from the list much less error-prone.\n. ",
    "michaeldyrynda": "I just felt it odd that everything else was configurable via env except these parameters, but I can see your point of view as well.\nIt was only because I was using Herbert and it was having issues with utf8mb4 collation that I went looking for a solution.\nI suppose it's not something most would have to change, would some clearer documentation on this be more suitable?\n. Thanks, folks. With regards to docs, I was referring to the additional variables that could be changed in config/application.php, but looking here I think there's probably sufficient info there.\n. ",
    "eimanavicius": "Why DB_PREFIX is not in .env.example file? But have environment var?\n$table_prefix = env('DB_PREFIX') ?: 'wp_';\nMaybe we should have these new vars with defaults?\n. wp dir name should be changeable from constants or similar\n. ",
    "collegeman": "I can understand and appreciate that reason. I don't know if Taylor et al\nwould be willing to change how Envoyer behaves. Either way, you both having\namazing things going on, I'm just trying to make the most of it all. Thank\nyou for replying.\nOn Thu, Dec 1, 2016 at 11:52 PM Scott Walkinshaw notifications@github.com\nwrote:\n\nWe committed an empty vendor/ dir just to make the repo a bit simpler to\nunderstand for newcomers to Composer/dependency management. Since we make\nreferences to vendor, it could be confusing when it doesn't exist at\nfirst.\nIt has also never been a problem for 2+ years until now. I don't feel\ntoo strongly about keeping it at this point, but also find it weird that\nEnvoyer has a problem with it.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/roots/bedrock/issues/281#issuecomment-264373087, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/AAHV_E6RNwQiLB2au6eZS8qb-9ypEX_4ks5rD6QZgaJpZM4LCL3z\n.\n-- \nAaron Collegeman\nOwner, Fat Panda\n540-335-9013\nyo@fatpandadev.com\n. \n",
    "strarsis": "Thanks! I thought it is installed automatically or as project-local dependency.\nIt would be nice if this is hinted more in README.. @austinpray: But this would be fixable in plugin by looking up the plugins path \ninstead having it hardcoded as it is now?. composer can also install from sources like Github but this plugin can update in production automatically.. If managing WordPress language with composer packages worked with all packages, \nwould it then make sense to gitignore the language files, too?. ",
    "Knogobert": "Excuse me, I only believed so because of a new installation. I was on wp 4.7 when this happened. Now I have updated to WP 4.7.1. Should I check if the problem persists for you guys?\nEDIT\nThis is probably just WP's error. Sorry to use your precious time!. Nope! Dunno why it didn't work for me on 4.7 :/. ",
    "bormat": "I fixed it easily by adding \nif ( empty($credentials) ) {\n        $credentials = [];\non line 39 in wp_signon of user.php in wp-includes.\n. ",
    "marciobera": "I returned to 5.6 php version and done!. ",
    "randelsr": "This problem still persists. composer create-project roots/bedrock installs dependency johnpblock/wordpress v4.3 which is significantly behind the current Wordpress release. \nThis is considered a security risk as php 5.6 is deprecated.\nTo resolve:\na. set php version on host to 5.6 or 7.0\nb. install via composer create-project roots/bedrock .\nc. go through the typical Wordpress install via instructions\nd. Upgrade Wordpress Core\ne. Change php version on host to latest version (tested on 7.1.24 and verified working) \n. ",
    "dxops": "@swalkinshaw fixed. ",
    "thisolivier": "You can add any number of external repos through composer, what functionality do you feel it doesn't provide?. ",
    "moazam1": "Thanks. It works fine most of the time just randomly throwing error. I asked here because bedrock is using dotenv so wanted to ask alternative or workaround.. ",
    "Snaver": "You can use symlinks to get round this issue, so if you require html/ to be your document root simply run the command: ln -s web/ html\nI had to do this when setting up Docker support, working example can be seen here https://github.com/Snaver/bedrock.. ",
    "ihsanberahim": "Hi @QWp6t,\nyou change the wp directory name in these files? Then everything works fine?\nsite/wp-cli.yml\nsite/composer.json\nsite/config/application.php\nsite/web/index.php. ",
    "justingivens": "you can also just remove vendor/johnpbloch folder before running composer update or composer install. ",
    "tucq88": "@justingivens How smart. I followed a guide in forum which suggest me to remove page in composer, run update, clear cache, then re-add with latest version. And your guide is just the same but so much quicker. Thanks mate.\nPS : Actually this should be added to Bedrocks doc as a guide for updating Wordpress version. Brilliant. . ",
    "bmeiser": "@tucq88 @justingivens Agreed.  Saved me lots of time and stress for my 50+ Wordpress install updates :). ",
    "EmilEriksen": "@kalenjohnson Thanks for you comment. Good points - I'm convinced.\nI'm closing the issue since I feel like it's been established that it is in fact bad practice by the plugin developers and not a Bedrock issue.. ",
    "gretzky": "Everything is committed, quadruple checked. Like I said, 2 different machines, 2 different servers.  I've done this about 30 times now and have never encountered this issue.\nOpening a discussion on discourse now, thanks Ben.. ",
    "antoscarface": "I already do this :) I already reach authors, but no answers. For now, I had to put this fix on my website, otherwise I will have problems with almost every plugin. \nSo, maybe this fix could be a suggested extension for bedrock? One of these: https://roots.io/plugins/. ",
    "ruscon": "\nbetween environments tbh\n\nMay be is not between environments. \nBut they hard coded :)\nIn some cases they needed to be edited.\n. ",
    "TangRufus": "+1\nUse case:\nA throw away server for clients to play with their plugins.\nThink you are managing client's sever. Instead of changing composer.json every time clients want to play with their new found toys, we can create another less restrictive staging for them. Allowing clients to install plugins by themselves.\n. Rebased and bump composer/installers to ^1.4. > probably bad practice on my part but I was copying in an old composer.json (from before August 2018, with my preferred packages) and missed the changes.\nA simpler solution: Don't copy and paste the JSON; Use $ composer require instead.. Suggestion: Use composer-normalize so that formatting composer.json can be automated. Should we use LogicException instead?\nBecause LogicException is\n\nException that represents error in the program logic. This kind of exception should lead directly to a fix in your code. \nhttps://secure.php.net/manual/en/class.logicexception.php\n\nSame goes to UndefinedConfigKeyException. Awesome! This reply should go into textbooks as \"best code review reply example\".\nThanks!!!. ",
    "vpillinger": "If you want a special staging environment create an environment specific config file called config/staging_special.php, set wp_env to staging_special and then override things as you please.\nDoing this will cause PHP to throw notices because constants are being redefined. I think this is why it seems like many people are leaning towards what the roots team sees as the \"incorrect\" solution.\n\nI think that doing these changes through the config files makes a lot more sense than adding to the .env, but the current implementation does not really support that effectively.. How about an alternative here where we move the configuration into config/environments files.\nThe main issue that I have with the current implementation is that this particular config is hardcoded to a specific environment where it can't be changed. For example, if someone wanted to create \"altproduction\" environment that doesn't block indexing then they could not with the current implementation.  Or if they wanted to allow indexing on staging for some reason (I need to do this sometimes to test a web-scrape or other featrure short-term), then they could without having to change code.\nThis takes advantage of the environments and their associated configuration files in a more robust manner.. ",
    "pioneerskies": "Being on this issue today I'd like to share that wp-cli.yml could be configured like\n```yml\npath: web/wp\nserver:\n  docroot: web\n```\nand this way you can invoke a clean wp server command w/o other worries.\nSince my dev workflow requires me to lay in the theme directory, I've put on a tricky but functional solution: inside theme's folder I have another wp-cli.yml like this:\n```yml\nserver:\n  docroot: ../../../ # this is the web/ directory\n_:\n  merge: true\n  inherit: ../../../../wp-cli.yml # This is bedrock's root wp-cli.yml\n```\nAwful but solid.. ",
    "petrpacas": "Right, so the library's creator will release a new version that will have an option to get the values from $_ENV[] instead of env().\nphp\nEnv::init();\nEnv::$options |= Env::USE_ENV_ARRAY;. ",
    "chetzof": "@retlehs \nlooks like it is specific to bedrock, on a vanilla installation it works just fine\nthe closed pull request https://github.com/roots/bedrock/pull/216 fixes the issue\nThe issue stems from the line\ndefine('WP_CONTENT_URL', WP_HOME . CONTENT_DIR);\nWP_HOME is a \"static\" value that does not change depending on currently opened network site but is taken from the .env file\ndefine('WP_HOME', env('WP_HOME'));\nThus, all the assets urls that should have as base the current site domain are having as domain the primary website, which leads to a lot of issues, including the CORS warnings.\n. @retlehs Yes, I do, posted the config here \nhttps://discourse.roots.io/t/invalid-media-and-asset-url/12499. ",
    "REPTILEHAUS": "Yeah tried that but it didnt work, i think you should make it very clear that it is NOT suitable for multisite. I found out the hard way.. Cheers man, appreciated I think I found this plugin around the time I was facing the issues. I was running nginx and narrowed the issue down to the links-template.php (or something like that) in a core file, patching it by literally hard coding the url and protocol there worked, I had tried your url fixed but faced issues because i had written a hook so that all the multisites used the one image upload location, for whatever reason using your plugin made all my images disappear on certain child sites, so perhaps if I didnt have that hook it would have worked.. I wasted a lot (a hell of a lot) of hours so ended up ditching bedrock all together.. No worries \ud83d\udc4d thanks again. ",
    "HarroH": "Never called it a bug. So it's not really an answer to the question. The function is_plugin_active is the default function for WP to check if plugins are on or off. Even though bedrock uses a different way to activate my plugins, I would expect to be able to use the default functions from wordpress to check if a plugin is active or not. If this is something that is just being looked over an nothing is being done with it, I feel it's a mayor flaw in the design. This basically makes a lot of plugins within the Wordpress directory useless when they are depended on another plugin. The only work around is not to make the plugins must use, which disregards the idea behind the mu plugins.. A you win! Try not to improve your framework. Just ignore it.\nIt logic that wordpress does only mention the /plugin/ folder, as they assume you stick with there folder structure. When you start manipulating the folder structure of a framework, it's not more then logic should consider all the functions that use this folder structure. But that's just my logic, based on all the very defence responses here, I believe I'm the only one who find this logical.. ",
    "chesio": "\nThe function is_plugin_active is the default function for WP to check if plugins are on or off.\n\nYes, but as @aaemnnosttv mentioned, the function is designed to work only with normal plugins, not must-use plugins. You should really read the docs.\nIf you need to use is_plugin_active within a plugin, you probably don't want this plugin to be a must-use plugin in the first place.. ",
    "kevinbamber": "going to bump this as I seem to be experiencing the same thing with latest Bedrock, latest version of WP, latest version of Polylang on a fresh install.\nIt appears as though something within Bedrock core is preventing Polylang from updating its pll_language cookie; which is being used to determine what class to add to the active language on navbar; and determine what pll_e and pll__ strings to output.\nI'm 100% that this is being caused by Bedrock since running a clean install of WP outside of Bedrock works as expected.\nIn both cases I am testing with a clean Twentyseventeen.\nHas anyone found a solution to this, or might anyone be able to point me in the right direction? I've been exchanging a few emails with Polylang author @ https://github.com/polylang/polylang/issues/273\nCheers,\nKevin. ",
    "patricktruebe": "Hi @distributev my company kilenda.de is built on Woocommerce (WP) and Dokku. As we prepare a major update, we are evaluating roots.io with very promising results. We have got a working project which integrates neatly into Gitlab CI, Docker and Dokku.\nThus I'd see your request as very achievable (as we are currently doing it). I would advise to split WordPress and Laravel into different projects, as they have very different structures with some infrastructure code in common.. ",
    "mvasin": "I have also noticed that there are in fact no tests. A reasonable test suite would include composer install, bringing a WordPress installation to life and running at least a few end-to-end tests, to make sure WordPress is operational. The test suite would also document what should be done to start using Bedrock. Code sniffing is nothing.. ",
    "monkeywithacupcake": "You have several kinds of backers on Open Collective (tiers) - please check how they have been grouped into backers and sponsors, or reassign if you want to have all the groups show on the readme. . ",
    "roots-ladybug": "Hi @OwenMelbz,\nIt looks like the issue template is missing from this issue. Please take a look at the Contribution Guidelines, which will tell you exactly what your ticket has to contain in order to be processable.\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse to ask the Roots Community for help, or if you want the Roots Team to dedicate some time to your issue, we offer our services as well).. Hi @caco26i,\nIt looks like the issue template is missing from this issue. Please take a look at the Contribution Guidelines, which will tell you exactly what your ticket has to contain in order to be processable.\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse to ask the Roots Community for help, or if you want the Roots Team to dedicate some time to your issue, we offer our services as well).. Hi @palmiak,\nIt looks like the issue template is missing from this issue. Please take a look at the Contribution Guidelines, which will tell you exactly what your ticket has to contain in order to be processable.\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse to ask the Roots Community for help, or if you want the Roots Team to dedicate some time to your issue, we offer our services as well).. Hi @tristanbes,\nIt looks like the issue template is missing from this issue. Please take a look at the Contribution Guidelines, which will tell you exactly what your ticket has to contain in order to be processable.\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse to ask the Roots Community for help, or if you want the Roots Team to dedicate some time to your issue, we offer our services as well).. Hi @devkinetic,\nIt looks like the issue template is missing from this issue. Please take a look at the Contribution Guidelines, which will tell you exactly what your ticket has to contain in order to be processable.\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse to ask the Roots Community for help, or if you want the Roots Team to dedicate some time to your issue, we offer our services as well).. Hi @tristanbes,\nIt looks like the issue template is missing from this issue. Please take a look at the Contribution Guidelines, which will tell you exactly what your ticket has to contain in order to be processable.\nPlease do not use the issue tracker for personal support requests (use the Roots Discourse to ask the Roots Community for help, or if you want the Roots Team to dedicate some time to your issue, we offer our services as well).. ",
    "bobmulder": "Hi @mAAdhaTTah, I don't see how WP-CLI aliases could work here for a different DB Host. Can you explain?. Thank you for your suggestions. Those should work and are cleaner ways. I can implement this locally, but are you guys interested in a PR to support custom config's for the WP CLI?. ",
    "hanoii": "Erm, I think jump too quickly into this. Closing for now.. ",
    "amarsyla": "@hanoii I'm also having problems finding a way of using the base url without /wp/, were you able to find a solution?. Oh, I had the WP_SITEURL and WP_HOME variables misconfigured. Thanks @MWDelaney . ",
    "MWDelaney": "A standard implementation of Bedrock doesn\u2019t have /wp in the URL. Please make sure you\u2019ve read the documentation and searched the forum. This question has come up a few times. . This is removing basic Bedrock functionality and one of the main advantages to having different environments in the first place. I don\u2019t think this is the way we should go here. . Can you please provide some examples of the cryptic messages the plugin produces when installed in a Bedrock environment?. ",
    "palmiak": "Ok - I understand - that's why I asked. Thanks for quick response.\nStill I think that maybe some section in docs would be useful. But I think first I'll collect some data about other caching plugins.. I've corrected the issue by adding the issue template.. Sorry - I wasn't clear enough.\nSteps to replicate:\n1. git clone git@github.com:roots/bedrock.git bedrock-test\n2. cd bedrock-test\n3. rm -rf .git - becuase I want to use Bedrock as base of new project\n4. git init, git add * and git commit\nYou will see that files from mu-plugins are not in the new repo.\nTo fix this - I think that the best way it would be to change the folder structure a bit https://github.com/palmiak/bedrock/tree/mu-plugins\nI moved all the Bedrock's mu-plugins to one folder and changed .gitignore a bit to be sure that it's always in the repository.. that did the trick - thanks guys.. ",
    "devkinetic": "I think that is a novel approach. Maintaining many env files sounds tedious though, especially when onboarding an environment, but like you said it does work. I have to solve this as well, I have berock env, My own env, and docker hosting env that all need to live together. I didn't even think about multisites yet... Still coming up to speed, but is possibly a use case for YAML configuration into ENV?. Thanks guys! I appreciate it. It would be nice if the readme explicitly stated the last officially supported 5.6 release.. https://github.com/roots/bedrock/pull/423 pull request. ",
    "erralb": "\"Maintaining many env files sounds tedious though\"\nTrue that. \nBut in the end, I find that when using multisite, you often need to make specific configurations on a per site basis. In my use cases, I would not create a sub-site everyday, so having to create a new .env file once in a while, which I would mostly never touch afterwards has worked fine for me.\nIn the end there is a couple of ways of achieving various config or .env files for multisite, when I asked this I was just wondering if they could be some sort of standard way!. This was a feature request for a \"standard way\" for achieving this, but the solution I implemented loading different .env files is working for me.\nAnything would work for me :-) I was more asking core developers how they would go about it!\n. ",
    "cfoellmann": "You can define environment variables in your php-fpm config per your vhost. Would that be an option for you?. ",
    "slackday": "I totally understand your concern with setting only production variables and changing the expected behaviour. And I understand it can cause more questions from the community than problems it solves. I will close this PR.\nActually I did a bit more digging since I posted this PR and found the root cause of my issue. The performance issue had more to do with how WordPress builds queries with wp_postmeta when having more than one join.\nI was fetching calendar events where the start date. If calendar events would span more than one day they could have an end date.\nThe code looked like this:\n$query->set('meta_key', 'acf__calendar--start-date');\n      $query->set('orderby', 'meta_value_num');\n      $query->set('order', 'ASC');\n      $query->set('meta_query', array(\n        'relation' => 'OR',\n        array(\n          'key' => 'acf__calendar--date-end',\n          'value' => date('Ymd'),\n          'compare' => '>=',\n          'type' => 'NUMERIC',\n        ),\n        array(\n          'relation' => 'AND',\n          array(\n            'relation' => 'OR',\n            array(\n              'key' => 'acf__calendar--date-end',\n              'compare' => 'NOT EXISTS',\n            ),\n            array(\n              'key' => 'acf__calendar--date-end',\n              'compare' => '=',\n              'value' => '',\n            ),\n          ),\n          array(\n            'key' => 'acf__calendar--start-date',\n            'value' => date('Ymd'),\n            'compare' => '>=',\n            'type' => 'NUMERIC',\n          ),\n        ),\n      ));\nIt would produce SQL that looked like this and took ~24sec to run:\nSELECT SQL_CALC_FOUND_ROWS wp_4_posts.ID \nFROM wp_4_posts  \nLEFT JOIN wp_4_postmeta ON ( wp_4_posts.ID = wp_4_postmeta.post_id )  \nLEFT JOIN wp_4_postmeta AS mt1 ON ( wp_4_posts.ID = mt1.post_id )  \nLEFT JOIN wp_4_postmeta AS mt2 ON (wp_4_posts.ID = mt2.post_id AND mt2.meta_key = 'acf__calendar--date-end' )  \nLEFT JOIN wp_4_postmeta AS mt3 ON ( wp_4_posts.ID = mt3.post_id )  \nLEFT JOIN wp_4_postmeta AS mt4 ON ( wp_4_posts.ID = mt4.post_id ) \nWHERE 1=1  \nAND ( \n  wp_4_postmeta.meta_key = 'acf__calendar--start-date'  \n  AND ( \n    ( mt1.meta_key = 'acf__calendar--date-end' AND CAST(mt1.meta_value AS SIGNED) >= '20180709' )  \n    OR ( \n      ( mt2.post_id IS NULL  OR ( mt3.meta_key = 'acf__calendar--date-end' AND mt3.meta_value = '' ) )  \n      AND ( mt4.meta_key = 'acf__calendar--start-date' AND CAST(mt4.meta_value AS SIGNED) >= '20180709' ) \n    ) \n  ) \n) \nAND wp_4_posts.post_type = 'cpt_calendar' \nAND ((wp_4_posts.post_status = 'publish')) \nGROUP BY wp_4_posts.ID\nORDER BY wp_4_postmeta.meta_value+0 \nASC LIMIT 0, 3;\nI noticed that the website had a large number of post revisions with post_meta because I had forgotten to limit the number of post revisions.\nI thought that cleaning it up would resolve the issue and I thought it would be a good default to limit the revisions so others don't run into this issue.\nHowever cleaning the database only got the query time to ~5sec...\nSo I also rewrote the code to look like this:\n$query->set('meta_key', 'acf__calendar--start-date');\n      $query->set('orderby', 'meta_value_num');\n      $query->set('order', 'ASC');\n      $query->set('meta_query', array(\n        'relation' => 'OR',\n        array(\n          'key' => 'acf__calendar--date-end',\n          'value' => date('Ymd'),\n          'compare' => '>=',\n          'type' => 'NUMERIC',\n        ),\n        array(\n          'key' => 'acf__calendar--start-date',\n          'value' => date('Ymd'),\n          'compare' => '>=',\n          'type' => 'NUMERIC',\n        ),\n      ));\nAnd SQL looks like this now:\nSELECT SQL_CALC_FOUND_ROWS wp_4_posts.ID\nFROM wp_4_posts \nINNER JOIN wp_4_postmeta\nON ( wp_4_posts.ID = wp_4_postmeta.post_id ) \nINNER JOIN wp_4_postmeta AS mt1\nON ( wp_4_posts.ID = mt1.post_id )\nWHERE 1=1 \nAND ( wp_4_postmeta.meta_key = 'acf__calendar--start-date' \nAND ( ( mt1.meta_key = 'acf__calendar--date-end'\nAND CAST(mt1.meta_value AS SIGNED) >= '20180709' ) \nOR ( mt1.meta_key = 'acf__calendar--start-date'\nAND CAST(mt1.meta_value AS SIGNED) >= '20180709' ) ) )\nAND wp_4_posts.post_type = 'cpt_calendar'\nAND ((wp_4_posts.post_status = 'publish'))\nGROUP BY wp_4_posts.ID\nORDER BY wp_4_postmeta.meta_value+0 ASC\nLIMIT 0, 3\nWhich runs in 0,0052s. So yeah... more of a WP issue I guess \ud83d\ude04 \nThanks for your detailed feedback! \ud83d\udc4d \n. Cool. I've never written a blog post so that's a nice offer for something to try. I'm interested. I just have to do some more research and find the right angle on this issue.\nI'm on vacation right now hence the late response. I'll get back to you on Slack or Discourse when I'm back at work.. ",
    "eshimischi": "Anything here?. ",
    "koconder": "Happy to help guys, can also cook in native PHPCS and PHPUnit configuration for Travis CI and codecoverage reporting. Have a look at my repo: https://github.com/koconder/wordpress-test-template and a plugin you can see the Travis CI setup on: https://github.com/koconder/wordpress-test-template Shout if you need me to jump in and build out a PR on-top of any unit tests.. ",
    "johnpbloch": "I haven't taken a look at the code, just jumping in to follow up to @austinpray's comment. I think insofar as the PR improves the compatibility between WP PHPUnit and Bedrock, this is a great initiative. I do tend to agree with the idea of keeping Bedrock testing framework-agnostic. Maybe it would be worth putting some of the more popular testing frameworks (WP Mock, WP PHPUnit, BrainMonkey, etc.) in the suggest block of composer.json with descriptions of their intended use? Just a thought.. ",
    "ethanclevenger91": "Couldn't you make the exact opposite argument though? That failing to explicitly disable search indexing could wreck SEO due to having an entire copy of your website being indexed?. I gotcha, so this doesn't change the current behavior. I like the\ngranularity of control offered here.\nOn Wed, Dec 5, 2018 at 2:58 PM Austin Pray notifications@github.com wrote:\n\nMaybe I wasn't clear/you didn't understand that I am trying to determine a\nfail-safe case.\nI'm suggesting:\n\nto application.php\n   https://github.com/roots/bedrock/blob/61e5689f8d5308fac3c8f9da714c627252bc8e19/config/application.php#L90\n   add the following line Config::define('DISALLOW_INDEXING', WP_ENV !==\n   'production');. This means all environments will disallow indexing by\n   default except for production.\nmake the disallow indexing plugin listen to the DISALLOW_INDEXING\n   env var instead of WP_ENV directly\n\nNow everyone can explicitly control the fail-safe in application.php, the\nnew one important place to look for bedrock configuration. If you want you\ncould do like Config::define('DISALLOW_INDEXING', in_array(WP_ENV,\n['staging', 'development'])); if you are like OP and you are scared\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub\nhttps://github.com/roots/bedrock/issues/368#issuecomment-444683990, or mute\nthe thread\nhttps://github.com/notifications/unsubscribe-auth/ACgInpdmk9FWKQFuXSdLMtg75GGRczcPks5u2E-lgaJpZM4Vo76R\n.\n. \n",
    "knowler": "Tested and it works. \ud83d\udc4d\nChanged notice to a warning instead of an error + added text domain. Ready to be squashed and merged.. Maybe it could be helpful to append something about the current environment to the notice. It could help identify misteaks.\n\n\u201cWhy?\u201d would link to the plugin description in the repo, the site\u2019s must-use plugin page, or somewhere else that\u2019s more informative.. \nBased on the feedback above I removed the conditional, used inline vars (thanks @austinpray), and made the message read a bit better.\n\nSearch engine indexing is discouraged [for/by/in/with] the current environment\n\ncould be read as a suggestion, when what we are actually doing is informing the user of what is happening.\nAlso, I decided against the \"Why?\" link and replaced it with Bedrock because:\n\nmu-plugins don't have pages, so admin_url('plugins.php?s=disallow-indexing') doesn't work.\nIt felt redundant linking to a description that is not so much different than the message itself.\nThe plugin is a part of the functionality that Bedrock provides.\nThere is less to add code-wise. \ud83d\ude1b\n\nUnless anyone has any issues with this or wants to refine this more, we are ready to go (again).. yo just swap roots/wordpress (or johnpbloch/wordpress) for classicpress/classicpress, then composer update. easy. \u00af\\_(\u30c4)_/\u00af. From trying this myself on an actual project, I do know that there will be conflicts with https://github.com/PhilippBaschke/acf-pro-installer if you use that. Outside of that I believe the only change that needs to happen is in config/application.php since 3.0 changed how Dotenv is instantiated (check their README for the migration steps).. I find this cleaner:\nsuggestion\n    Config::define('DB_HOST', isset($dsn->port) ? \"$dsn->host:$dsn->port\" : $dsn->host);. While, I do like working with objects since they are syntactically nicer to write \u2014 especially for string concatenations \u2014 I don\u2019t think the pay off is much since we\u2019re only using it for a few lines within an if clause that nobody will ever touch again. In this case, I\u2019d vote performance over syntactical sugar since, like you said, this is called on every request. We should strive to keep the core as fast as possible, even if it\u2019s a matter of microseconds.. Really good points @Log1x \u2014 your comment didn't show up until after I posted mine. Principally, I still hold to what I said.. ",
    "mike-source": "Has this change been reflected in the docs? \nhttps://roots.io/bedrock/docs/folder-structure/\nhttps://roots.io/bedrock/docs/configuration-files/\nNot sure if this is the best place to mention it, and probably bad practice on my part but I was copying in an old composer.json (from before August 2018, with my preferred packages) and missed the changes. \nJust posting here in case anyone else is doing the same (I suspect quite a few people do this with bedrock + composer) and got confused. Was pulling my hair out for a couple hours!. I'd offer to do it myself, but will confess I haven't got my head round the changes yet!. @TangRufus hmmm maybe I could write myself a CLI script in future, I needed to add 8+ plugins to my composer.json at once and also add a couple of custom  repositories... ACF pro is incredibly annoying to use via composer.\nI'll probably just remember to check Bedrock latest changes!. @austinpray I'm UK based so those times are a bit tricky (been a long day!) If something happens definitely share it though I'll take a look. Cheers.. ",
    "dependencies[bot]": "This PR has been automatically closed in favor of #393.. This PR has been automatically closed in favor of #394.. ",
    "scottybo": "I'd also like to see this . ",
    "nylen": "For now, ClassicPress installation works the same way as WordPress installation.  We'd be happy for Bedrock to support ClassicPress, and we are happy to help with any technical or implementation details.\nFor the future, we are publishing our release versions on Packagist and looking into ways to make it easier to install ClassicPress using non-standard path structures.. > Options have a cost unfortunately\nOne cost is keeping the related code up to date and working.  We'd be happy to help with automated tests for this change so that this isn't a concern.\nIf there are any other costs, can you elaborate?. > Now it would prompt them and they'd be force to make a choice which likely the vast majority of people wouldn't care about or want to make.\nI think this should be an option rather than a prompt, though I'm not sure the details of how this would be implemented.  I agree changing from a command that doesn't prompt to a command that does prompt is not a good idea (and would probably even break some scripts and tools).\n\nBottom line is that ClassicPress is a hard fork that will diverge with WordPress and could cause compatibility issues with Bedrock going forward.\n\nI hope we can keep ClassicPress compatible with Bedrock and similar tools for a long time.  There are no changes planned that would require any changes in other projects, but we'll remain open to collaboration to make this happen if needed.\nI haven't tried it, but according to @octoxan here is how to get Bedrock + ClassicPress working without editing files:\ncomposer create-project roots/bedrock\ncomposer remove johnpbloch/wordpress\ncomposer require classicpress/classicpress:@beta\n\nIt's just certainly too early in the project's life for me to officially recommend ClassicPress alongside WordPress in Bedrock.\n\nFair - after all, ClassicPress is still in beta.\n\nOn the technical side: I don't see any issue with a fork of bedrock that tracks the ClassicPress composer package. It should accomplish everything you want.\n\nThe thought of starting another fork right now makes me want to go to sleep for about a week straight :)\nStill, if someone wants to set this up under the ClassicPress umbrella, ping me on Slack and we'll see what we can do.. Updated/corrected commands:\ncomposer create-project roots/bedrock my-site\ncd my-site\ncomposer remove roots/wordpress\ncomposer require classicpress/classicpress:@beta\nAlso linked from the ClassicPress documentation:  https://docs.classicpress.net/installing-classicpress/installing-with-composer/#after-installation. ",
    "jgatech": "Absolutely, I would like to see this option as well.. ",
    "octoxan": "This did work, but it would be awesome to have a built in option and not have to manually do this change for every new website. Would let people know that they can do either or without having to research how to manually modify it.. ",
    "pfalomo": "\nyo just swap roots/wordpress (or johnpbloch/wordpress) for classicpress/classicpress, then composer update. easy. \u00af_(\u30c4)_/\u00af\n\nTo anyone trying to do it you have to place \"classicpress/classicpress\": \"1.0.0-beta1\" (or any [available version](https://packagist.org/packages/classicpress/classicpress), on your composer.json, delete composer.lock and then run composer update. ",
    "drzraf": "While I understand the reasoning and votes behind this merge, I think its a bad decision.\nDebian, for the first time in its history does not provide a version of PHP supported by upstream. But, by definition, provides (security) support for the software bundled (PHP being one of them).\nFor that reason, even if upstream dropped support <7.1 I believe distribution must be fairly considered too.\nDebian does support PHP 7.0, but none of the above version are available in Debian stable.\nSince almost no one run PHP binary outside a Linux distribution I believe the PHP requirement should be set to >= 7.0 until this version get obsoleted (not as in \"upstream speech\" but as in \"people uses and server boxes\")\nI also think it's bad use of composer require which is not intended for politics about what people install on their servers but rather only which dependencies and versions **this** software needs to run correctly. ",
    "distributev": "Here you can find more details\nhttps://github.com/wp-erp/wp-erp/issues/753. ",
    "rodrigoaguilera": "I think that can be a followup to this issue. I completely agree about adding that plugin. ",
    "tristanbes": "Yeah thanks for pointing that out, the question is more like, why is the core team of bedrock doesn't upgrade to 3.X for their roots/bedrock project.. absolutely no feature is lacking for me (yet, i'm new to roots/bedrocks). I just don't \"like\" starting new wordpress project with dependencies that are too behind. \nThat's why I wanted to have your reasonning about not updating it (if there is any). :). Thank you \ud83d\udc4d. Not yet, but tomorrow someone will test this on my team :). Given the small changes it requires, I don't see any reason not to work \ud83d\udc4d . Forgot to mention but yes, tests were ok on our side too.. @swalkinshaw done. . the reason why we haven't supported the DSN option is because WordPress itself doesn't.\nThey also doesn't support your structure, doesn't support composer, and dotenv. Your edition is \"the right way\" of doing Wordpress (yes Wordpress, we're not in 2004 anymore). So adding support is one step closer your goal. Also, it doesn't removes the actual way of doing :-), it just remove a little pain for cloud/paas users of bedrock\nAlso: Nope, I don't want to contribute to Wordpress, they are decades away of good practices when it comes to web development. I imagine PR like this would be left over like the composer support... \ud83d\ude04 . Also, I fixed a case where the code couldn't support a passwordless database connexion. Good catch @Kocal. . The algorithm takes care of the following DSN variations:\nmysql://john_doe:password@127.0.0.1:3402/my_awesome_blog\nmysql://john_doe:password@127.0.0.1/my_awesome_blog\nmysql://john_doe@127.0.0.1/my_awesome_blog\nI think this PR is now ready if you don't have more comments to add.. @QWp6t do you find this version better ?. What is missing in order to merge and tag a new release of bedrock ? :D . @swalkinshaw I've updated the code to allow only DATABASE_URL to be defined\n. Great news thanks :-), if possible tag a new release right away so we can all benefit from my 2 last PR \ud83e\udd13 . Is there something missing I can add that prevents this PR to get merged ? :). Thank you, @austinpray thanks for providing reactive feedback on my work . I'm not in favor of changing DATABASE_URL to DB_URL\nI would stick to DATABASE_URL since a lot of cloud providers are using this to expose their DSN. (Scalingo uses it, clever-cloud uses it and other international ones like @swalkinshaw reported).\nPS: Frameworks also tends to use DATABASE_URL like for instance Symfony. Well i've decided to go with Config::get('WP_CONTENT_DIR') since there is no config for just only $webroot_dir. done. And done. Sorry, I follow PSR standard so I naturally used camelCase variables. Actually, with my latest changes, you can change to: \n```suggestion\nWhen using a DSN, you can remove DB_NAME, DB_USER, DB_PASSWORD, and DB_HOST variables\n```. \ud83d\udc4e on this, see my comment on the PR . I don't see the point of using implicit cast from an array to an object. Plus, I don't know if it's a good practice to do that \ud83e\udd14. Also, it add negative performance to do such casting.\nWe talking about microseconds, but, keep in mind that application.php is called upon every request.\nSo that microseconds penalty will apply to all requests. And I personally want to avoid that when/if possible.. May I have your feedback on the performance problematic here @austinpray && @knowler ?. I do agree that performance impact are very very very tiny, but only for >PHP 7.1 setup. The question was revelant as the code manipulation is only needed there. \nThanks for your feedback. and that's why i'm not a fan of forcing an array into an object via casting. Now you're accessing properties that may not exist in the case you posted in your comment and it will trigger warnings if you remove the ?? operator.\nSee for yourself: https://3v4l.org/Yf3ck\nWorking with objects is great but only if the source was crafted/thought as an object ;). yeah in both cases we need it to handle passwordless db. ",
    "Kocal": "What happens if there is no password or no port in the DSN?. ",
    "Log1x": "Want to wait for more feedback or should I change it?\nDrupal (lol) uses DB_URL \u2013 Laravel, etc. doesn't use DSN which isn't a surprise, it isn't user-friendly and there is no definitive standard (e.g. PDO: mysql:host=localhost;dbname=example, Perl: DBI:mysql:database=$database;host=$hostname;port=$port).\nOtherwise, I mainly just see Rails/Django defining DATABASE_URL.. With the current implementation, the existence of the DB_ variables isn't checked so removing them would throw an error. We would need to add a null coalesce operator.. I considered that\u2013 it just isn't being used elsewhere.. I think looking at it from a performance prospective is incredibly silly. Every database query processor in Laravel casts to objects, not to mention eloquent. In this case, it is a single array. If we were pinching on performance to this extent, dotenv as a whole would be catastrophic, @austinpray's wp-config would be excessive overhead, heck, even using parse_url() is a \"huge\" performance impact. According to this publication \u2013 doing it with preg_match() is 7.5x faster than parse_url().\nI think it comes down to readability and what feels more appropriate. I felt like this was a better fit in both cases.. It was done out of @tristanbes's suggestion above to change the Docblock to include # When using a DSN, you can **remove** DB_NAME, DB_USER, and DB_PASSWORD instead of leaving it blank. If there isn't an isset() on the env variables and you remove them, dotenv will throw an error.\nShould I revert it and just assume people won't comment out or remove the DB_ vars?. Yeah you're right. I had tested it without uncommenting DATABASE_URL and mistakened the ValidationException being thrown from L32. It works fine with DATABASE_URL being set.\nFatal error: Uncaught Dotenv\\Exception\\ValidationException: One or more environment variables failed assertions: DB_NAME is missing, DB_USER is missing, DB_PASSWORD is missing.. I had kept it from the original implementation but it does look like it would be fine to remove it as $dsn->pass is returning NULL and doesn't appear to be throwing any errors when testing with:\nDATABASE_URL=mysql://root@localhost/wp_sage\nwhile having the DB_ vars commented out.. Yeah, I was going to post an update to my above\u2013 I didn't push any changes as I assumed there was a \"gotcha\" somewhere. My PHP wasn't throwing errors locally but I assumed it should.\nAnd yes, for the record, an array would behave the same way. https://3v4l.org/LTTEX \u2013 it has nothing to do with casting to an object. :). ",
    "jawngee": "Updated phpdotenv to 3.3.6 fixes the issues.. Sorry I meant 3.3.2. ",
    "rdanusha": "Install multisite-url-fixer plugin. do not put it on the mu-plugins folder. \nhttps://github.com/roots/multisite-url-fixer. ",
    "thedamon": "Interesting idea, although I feel like almost every case it will need a port number added, so I'm not sure the implication that it might be ok to leave it will help ppl. Although that may just be my own experience\n. "
}