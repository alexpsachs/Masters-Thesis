{
    "leastprivilege": "thanks - will take a look ASAP\n. Check\n- required default services\n- IPersistedGrantService\n- check key material (>= 2048 bits, cert exp etc)\n. thanks\n. We can't do that right now because of a bug in the v5 version. We will at RC2.\n. Not sure what your problem is, works for us. \nSent from my iPhone\n\nOn 15.01.2016, at 12:43, Giovanni Bassi notifications@github.com wrote:\nOk.\nDo you have a workaround for this specific problem I just posted om the error log?\n\u2014\nReply to this email directly or view it on GitHub.\n. Quoting my above answer\nWe can't do that right now because of a bug in the v5 version. We will at RC2.\n. There is an open todo issue for upgrading to the new jwt library. Feel free to re open if that helps. \n\nSent from my iPhone\n\nOn 26.01.2016, at 10:59, Giovanni Bassi notifications@github.com wrote:\nIf the bug is not fixed, the issue shouldn't be closed. This is unexpected behavior, it is an open bug.\n\u2014\nReply to this email directly or view it on GitHub.\n. this one\n\nhttps://github.com/IdentityServer/IdentityServer4/issues/24\n. It is the very first beta version. Some things are not done yet. \nSent from my iPad\n\nOn 16 Jan 2016, at 09:17, sebitsi notifications@github.com wrote:\nHi Nelson.\nThanks for your suggestion.\nI made exactly same solution.\nBut. Point of my question is: \nWhat code should be part of IdentityServer implementation and what is my code.\nFor example: Should be LoginController implemented as part of IdS4 or in my custom LoginController ?\nWith DI we can inject in custom controller everything we need and implement anything we need.\nBut is this right approach ?\nI think logging process should be isolated in Ids4 with (for example) extension points for adding\ncustom claims or something else.\nOr..\nIn IdS4 code there could be some bulletproff default controller we can inherit.\nOr...\nI missed something.. :)\nEdvin\n\u2014\nReply to this email directly or view it on GitHub.\n. thanks!\n. session management is not implemented yet.\n. This is an issue tracker - can we please focus on the issue in the title ;)\n\nSO is a great place to ask general purpose questions that are not directly related to idsrv.\n. you probably try to push your luck a little bit too far.\ntry Windows and Visual Studio first - then go from there ;)\n. Tenant and Idp are different unrelated things. \nSent from my iPhone\n\nOn 22.01.2016, at 18:16, Brock Allen notifications@github.com wrote:\nWell, IIRC, in IdSvr3 if the tenant in the acr_values didn't match the user's idp, then we triggered a login. So if IdSvr4 doesn't do that, then it sounds like a regression bug.\n\u2014\nReply to this email directly or view it on GitHub.\n. Cool. Thanks! I will leave this open then\n. not before RC2\n. Yes - the openid connect protocol demands a subject id - you can map that to whatever is a unique, immutable user identifier in your domain.\n. Yes - but we have to wait until RC2 - and there is currently no ETA for this.\n. WS-Federation is not support in ASP.NET core 1.0 (there are plans to do that later - and we depend on that).\n\nWindows Authentication - I don't know yet. All those low level details are moving targets right now. If it is possible we will certainly do it.\n. No \nhttps://github.com/aspnet/Home/wiki/Roadmap\n. I don't understand this\n\nyou will now have to write the ASP.NET Endpoints that handle the authorization\n\nwhy? that's done by identityserver\n. Exactly - and they are supposed to be composable. IdentityServer is doing all the protocol work - you implement your login workflow.\nThis will become more seamless once we get closer to release. But that's the idea.\n. ASP.NET Core has no support for WS-Fed.\n. logs please.\n. hm - need to try to repro. TBH we won't put much work into this before RC2. I will leave this open and see what I can do.\n. all set?\n. you can create the tokens yourself (using the MS JWT lib) - or in-memory host idsrv. Check our integration tests for an example.\n. It's gone - check the archives or samples.\n. https://github.com/IdentityServer/IdentityServer4/blob/dev/src/IdentityServer4/Configuration/IdentityServerBuilderExtensions.cs#L14\n. Reference tokens is for access tokens - not id_tokens.\n. You need to set the AccessTokenType to reference in your client config.\n. Hi thanks.\nBut you changed to things in one PR. We'd also need a unit test that shows that your change is working.\n. Feel free to start a contrib project for that.\n. Yep - this endpoint is not implemented yet. No high prio plans to bring it back right now.\nUse a JS lib that does local validation e.g. Brock's oidc-token-manager in the IdentityModel org.\n. you are missing logging.\n. New questions require a new issue. Any question regarding the Microsoft MW - you need to ask Microsoft.\n. We currently don't provide any EF support - please open those issues in the right repo.\n. There is no AuthenticateLocalAsync anymore. Do whatever you need to authenticate a user - but you do it yourself.\n. Just have a look at the host project and follow the code path on the login page.\n. You are right about the decoupling - but our plan is to provide the standard UI as a nuget package.\n. Yes you are right.\n. sure - just add a route and controller - that's just normal MVC at this point.\n. Discovery is extensible. Check the discovery options.\n. No. But its just a normal Web App. We'll have more docs when we get closer to the release. \n. It is as stable as the platform it runs on - do you get that hint? ;)\n. We will fix that once we start the RC2 work - probably next week.\n. so what? ;)\nTell MS to boot up faster or keep the app running..that has always been an issue in .net\n. You said \"idle\" state. Why would \"core\" change that?\nAnyways - feel free to do some more investigation and profiling to find out where the time gets spend. Looking forward to the findings!\n. id_tokens can be only requested using flows specified in OpenID Connect - hybrid, implicit and code.\n. RC2 was released yesterday, I am still in the process of updating the code.\n. I will push the source code and nuget later today.\n. It is just controllers and views - feel free to add it yourself.\nA \"default\" registration does not exist - everybody does it differently. Maybe this is more for a sample. \n. You should really open an issue in aspnet/security on github.\nI think this is a bug.\n. no ;)\nAccording to jwt.io, this token looks good. You need to learn the node.js side.\n. did you insert your keys?\n. no. For jwt.io to validate it you need to paste in the signing key.\nI wouldn't worry about that - I can guarantee the token is valid ;) Learn how to use the validation library instead.\n. We'll look into it. @brockallen \nI would not recommend turning off the CORS validation. There's a reason it's there.\n. that's a typo. we'll fix it.\n. maybe we should rename that to local?\n. for the idp i mean\n. done on dev\n. check the logs\n. You need to enable logging - not sure how that works for aspnetcore and Azure (we use the standard aspnet core logging facilities) - maybe a question for MS\n. Well - i am not surprised by that. There might be some configuration/request mismatch. Logging will tell you.\n. Configure logging to write to a file or maybe this approach\nhttp://benfoster.io/blog/how-to-use-tracesource-with-azure-diagnostics\nor\nhttps://github.com/aspnet/Logging/tree/dev/src/Microsoft.Extensions.Logging.TraceSource\nor\nhttps://github.com/aspnet/Logging/tree/dev/src/Microsoft.Extensions.Logging.EventLog\nshould be doable\n. Sure - but you won't solve that problem by just trying out some combinations.\nthere's another flag AllowAccessTokensViaBrowser which must be set to true if you want to deliver access tokens via the front channel.\n. It's a client setting\n. I wouldn't use claimsprincipal.current anymore. \nSent from my iPad\n\nOn 30 Jun 2016, at 22:38, Kouloukos notifications@github.com wrote:\nHello,\nActually I have 2 questions:\n1)\nI am using IdentityServer4 Core (.NET Framework 4.6.2) and I have implemented User, Client and Scope persistence in MongoDB. I can successfully issue tokens for my API (Core.NET Framework 4.6.2) and everything works as expected. I put a breakpoint in my API HotelController and I can see in Locals under this, HttpContext, User, Claims my Claims and also the client, scope etc (see image below)\nWhen I look ClaimsPrincipal.Current (same level as this above) in locals I don't see my claims...\nIs this how it is supposed to be?\n2)\nWhen I use the same credentials at the the UI/login page to login to the IdentityServer:\nI put a breakpoint at my login controller and I can see in Autos that user and claims have my claims\nbut here again CurrentPrincipal claims are empty\nIs this it is supposed to be this way?\nHere is my LoginController Index action:\n[HttpPost(Constants.RoutePaths.Login)]\n[ValidateAntiForgeryToken]\npublic async Task Index(LoginInputModel model)\n{\nif (ModelState.IsValid)\n{\nif (_loginService.ValidateCredentials(model.Username, model.Password))\n{\nvar user = _loginService.FindByUsername(model.Username);\n```\n            var claims = new Claim[] {\n                new Claim(JwtClaimTypes.Subject, user.Id.ToString()),\n                new Claim(JwtClaimTypes.Name, user.Username.Value),\n                new Claim(JwtClaimTypes.IdentityProvider, \"AuthServer\"),\n                new Claim(JwtClaimTypes.AuthenticationTime, DateTime.UtcNow.ToEpochTime().ToString()),\n                new Claim(JwtClaimTypes.Role, Enum.GetName(typeof(Role), user.Role))\n            };\n            var ci = new ClaimsIdentity(claims, \"password\", JwtClaimTypes.Name, JwtClaimTypes.Role);\n            var cp = new ClaimsPrincipal(ci);\n        await HttpContext.Authentication.SignInAsync(Constants.PrimaryAuthenticationType, cp);\n\n        if (model.SignInId != null)\n        {\n            return new SignInResult(model.SignInId);\n        }\n        System.Diagnostics.Trace.Write(ClaimsPrincipal.Current);\n        return Redirect(\"~/\");\n    }\n\n    ModelState.AddModelError(\"\", \"Invalid username or password.\");\n}\n\nvar vm = new LoginViewModel(model);\nreturn View(vm);\n\n}\n```\nI want to use the IdentityServer UI to add CRUD functionality for Users, Clients and scopes.\nI watched Dominick's courses in Pluralsight (Introduction to Identity and Access Control in .NET 4.5 and Identity and Access Control in ASP.NET 4.5) although my projects are in 4.6.2.\nCan someone help me clear these things out?\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. these are all not issues with idsrv - please use SO for general questions. thanks!\n. I am confused. The walkthrough is for identityserver3 - but this is the identityserver4 repo.\n. access token validation in OWIN is not compatible with system.identitymodel v5 - you need to downgrade to v4.\n. To improve discoverability of frequently asked and/or more general questions, we decided to move those questions to StackOverflow:\n\nhttps://stackoverflow.com/questions/tagged/?tagnames=identityserver3&sort=newest\nWe actively monitor SO as well but hope to create a community there so questions can get answered faster when we are not available.\n. thanks. Does the above commit work for you?\n. ok. thanks\n. Sure - you need to implement IClientStore to connect to your custom data store.\n. I also think it is now or never.\n. SignalR as it turns out...\n. e.g. here\nhttps://msdn.microsoft.com/en-us/library/dn433692(v=vs.118).aspx\n. done on dev\n. :shipit:\n. We have no plans right now to change that. Tbh - there are other priorities right now to be able to ship 1.0\nBut I added this as a feature request.\n. Since the UI is not controller by IS anymore - this feature does not exist anymore as well\n. As I said - in IS4 we don't implement any UI. We will provide a default implementation - but nothing will be built into our core library.\nWe released beta5 yesterday - look at our reference host to see how this is implemented now\nhttps://github.com/IdentityServer/IdentityServer4/tree/dev/src/Host\n. updated idm and tests\n. thanks!\n. thanks!\n. @Simply-Awesome open a new issue - some behavior has changed in beta5\n. I assume the OP problem is solved.\n. What Brock is saying is - that in idsrv4 we are separating the UI from the protocol bits.\nRemember Me is a UI feature. Once we get closer to RTM we will have a standard UI implementation that will support remember me OOB.\n. @brockallen do we need to look at that?\n. Why are you using both hashed and plain text at the same time?\n. OK - will have a look.\nbut I don't understand this part:\n\nAlso I get the following when trying to validate my implicit clients which have no secrets\nNo client secret found\n\nunder which circumstances does this happen?\n. closing for now. please open a new issue for the RC\n. Thanks for the help!\nWe know that right now there is a lot of cleanup to do - as well as feature work. Brock and will sit down for the next 3 weeks to get that done.\nThere will be an RC early September that I encourage you to have a look at (or follow the check ins over the coming weeks) - if you still think we can do more cleanup - let us know and we can start a discussion.\n. Events are already implemented.\nEnable them on the options class\n. you only use the term user for humans. Clients are applications, services etc (pure silicon).\nhttps://identityserver.github.io/Documentation/docsv2/overview/terminology.html\nIn idsrv3 we support both client and user authentication using x509. In idsrv4 there is still some work to do for client authentication. User authentication is not part of idsrv4 anymore and would work just as it would work in standard aspnet core (but we don't have any guidance yet).\n. that's a good point - we will discuss this for the RC\n. IOW - you want the sub \"outside\" the access token so that the client can read it? That's exactly why resource owner flow is not recommended ;))\nAnyways - starting with RC1 you can set custom response fields. Chech the new GrantValidationResult in the resource owner validator.\n. sorry - then I don't understand.\n. You need to properly validate the token. Use the MS JwtSecurityTokenHandler for this.\n. thanks - will look into it.\n. @BrettJaner wanna send a PR? against dev.\n. @BrettJaner nm - I did it myself - also wrote a test for it.\nUpdate on the dev nuget feed.\n. I published a 1.0.0-rc1-update1 to nuget with a fix.\n. They have all been replaced by IPersistedGrantStore\n. Add AddInMemoryStores() \n. Yes - I noticed that as well. thanks!\n. Why OpenID Connect ?? You are only supposed to sign in the user.\n. I think you are misunderstanding the whole thing. \"Remember me\" on the idsrv login page is for the idsrv cookie. Not the client. \nSent from my iPhone\n\nOn 11.09.2016, at 12:27, ChristianRiedl notifications@github.com wrote:\nI have now a solution where I set the cookie properties to persistent with some expiration date in my MVC's apps OpenIdConnect.OnTokenValidated event. Than I was looking how AccountController.Login can deliver the \"Remember Me\" checkbox info together with the implicit flows authentication response. This response contains an expires_in field but it contains the \"constant\" clients token lifetime parameter. The state contains the serialized AuthenticationProperties but it cannot be changed during login because as I understand, the specs require that they are a copied from the request state field. So in my current solution I saw only the chance to use some claim to deliver the \"remember me\" information. I misused standard \"amr\" claim for this purpose and for my purpose \"remember me\" is working now as expeected. But I think it is not really a clean solution so I studied how you solved the problem in idsrv3 and found out that it was a quite different approach, and I think you surely have a good reason not to do it in the same way in idsrv4. Anyhow my solution is working for my needs.\n\u2014\nYou are receiving this because you were assigned.\nReply to this email directly, view it on GitHub, or mute the thread.\n. What's that?\n. Ah - that's an oversight - we'll add it back\n. fixed in RC2 pre-release on the dev feed.\n. Try implementing ICustomTokenRequestValidator\n. Register it with the aspnet DI system. \n\nSent from my iPhone\n\nOn 09.09.2016, at 11:15, maganuk notifications@github.com wrote:\nThanks for the lead. I've implemented the Validator. How can I get identityserver4 to use it? I cant find any samples or issues around it.\nThanks\n\u2014\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n. You said refresh token - that's a feature of OAuth's token endpoint.\n\n\"Silent renews\" works completely different and is using the authorization endpoint. We are not done yet with the redesign of the authorization pipeline.\nThere is something similar (IIRC ICustomAuthorizationRequestValidator) which might work for you  - or not.\nPlease describe your scenario so we can get a better understanding.\n. How do you sign in the user?\n. I see - so it maybe happens when the gets \"slided\" ? @brockallen ?\n. Update the RC package to update1\nSent from my iPhone\n\nOn 11.09.2016, at 15:12, svg3171 notifications@github.com wrote:\nHello,\nI am new to identity server. Please help me in resolving the endpoint discovery issue -\nIdentityServer4.Hosting.IdentityServerMiddleware[0]\nUnhandled exception: System.NullReferenceException: Object reference not set to an instance of an object.\nat IdentityServer4.Endpoints.DiscoveryEndpoint.d__10.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\nat System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\nat System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\nat IdentityServer4.Hosting.IdentityServerMiddleware.d__3.MoveNext()\nException is thrown when I try to create TokenClient as below -\nvar disco = await DiscoveryClient.GetAsync(\"http://localhost:5000/\");\nvar tokenClient = new TokenClient(disco.TokenEndpoint, \"client\", \"secret\");\nHowever when I try following it works fine -\nvar tokenClient = new TokenClient(\"http://localhost:5000/connect/token\", \"password.client\", \"secret\");\n\u2014\nYou are receiving this because you are subscribed to this thread.\nReply to this email directly, view it on GitHub, or mute the thread.\n. IdentityServer itself is not affected by this since we don't have a dependency on the patched packages. I updated the host to use 1.0.* everywhere.\n\nEF needs updating though.\n. Yea - we gonna change the design again.\nRemove the Quickstart - and add AddInMemoryStores - that's the cleanest right now\n. That does not make sense. You are adding identityserver to the API pipeline.\n. String interpolation is not allowed in logging messages - can break the sink by injecting curly braces. We had this problem before.... > Really? I have never had that issue.\nBecause you never tried it ;). Then you should read the docs on how ASP.NET Core logging actually works ;). https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.0&tabs=aspnetcore2x. why 2 commas?. feel free to do a PR - log at debug level. same here. PR?. ",
    "dnfclas": "Hi @jvanrhyn, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @martijnboland, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @pvasek, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @pvasek, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @smallplanet-it, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @leastprivilege, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @KhuongNtrd, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @PawelGerr, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @PivotalAnimal, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @brockallen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @brockallen, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @brockallen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @AndyPook, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. @AndyPook, Thanks for signing the contribution license agreement so quickly! Actual humans will now validate the agreement and then evaluate the PR.\nThanks, DNFBOT;\n. Hi @brockallen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @dacken, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        In order for us to evaluate and accept your PR, we ask that you sign a contribution license agreement. It's all electronic and will take just minutes. I promise there's no faxing. https://cla2.dotnetfoundation.org.\n    \nTTYL, DNFBOT;\n. Hi @ralmlopez, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @anandav, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @ralmlopez, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @ralmlopez, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @ralmlopez, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. Hi @brockallen, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @leastprivilege, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    You've already signed the contribution license agreement. Thanks!\nThe agreement was validated by .NET Foundation and real humans are currently evaluating your PR.\nTTYL, DNFBOT;\n. Hi @ralmlopez, I'm your friendly neighborhood .NET Foundation Pull Request Bot (You can call me DNFBOT). Thanks for your contribution!\n    \n        This seems like a small (but important) contribution, so no Contribution License Agreement is required at this point. Real humans will now evaluate your PR.\n    \nTTYL, DNFBOT;\n. ",
    "brockallen": "Most of the core from IdentityServer3 is the same in IdentityServer4. The main things that will be changing relate to the user service and how your UI pages are invoked from IdentityServer (login page, error page, etc). Unfortunately these are the places you spend the most of your time coding for IdentityServer. So I'm not sure what to tell you. In a month's time these aspects will be much more stable, but at the same time if you start to try them out now you are in a perfect position to provide feedback on what works and what doesn't work.\nWhat do you think?\n. The MVC sample \n-Brock\n\nOn Jan 14, 2016, at 5:10 PM, Max Beckenbach notifications@github.com wrote:\nSounds good and I would be happy to provide feedback.\nAny tip where i should have a look in the examples for getting an idea of the new ui invoking and user service? I think there is nothing like a documentation yet, correct?\n\u2014\nReply to this email directly or view it on GitHub.\n. We don't have the end session endpoint implemented yet.\n. Partial logins are gone because now you are 100% responsible for the UI. You use the various Interaction classes or the action result classes to redirect back into IdentityServer. See the sample host project to get started. Also, details are subject to change :)\n. This seems to be a problem in ASP.NET Core: https://github.com/aspnet/HttpAbstractions/issues/535\n. So in short, you're saying that if the acr_value=tenant:foo request param is passed, that it's not being honored if the user is already logged in with a idp other than \"foo\"?\n. Well, IIRC, in IdSvr3 if the tenant in the acr_values didn't match the user's idp, then we triggered a login. So if IdSvr4 doesn't do that, then it sounds like a regression bug. I'll have to investigate.\n. Oh yea, of course. Forget what I said then :/\n. Yep -- so you can take a look at this (it might be an approach that works for you): https://github.com/IdentityServer/IdentityServer3/issues/2388#issuecomment-172640121\n. access_denied is the solution.\n. We will see. We're not yet sure what the IUserService will look like in IdSvr4.\n\nIn essence, though, there it won't be hard for you to do this yourself in IdSvr4 (and it wasn't all that hard in IdSvr3).\n. This is a fundamental design flaw of ASP.NET Core's DI system -- there is no official way to have distinct DI systems for different branches in the pipeline. We (and many others) have provided this feedback to Microsoft. They say they're aware of it and will be doing something at some point to allow for this. BTW, they call this \"multi-tenancy\" support, which is just... an awful.. awful name.\nThere are others who have shown how to get it to work with various workarounds/hacks. You could look for them and give them a try. If you do, please let us know your results.\nThanks.\n. You could probably use parts of it to get the ws-fed protocol features, but then hook the various notifications to then bridge the gap to the new ASP.NET Core approach.\n. > The problem is that the request scope is not initialized correctly. The fix which is working for me is to replace inside the Find method\n\nendpoint = context.RequestServices.GetService(type) as IEndpoint;\nwith\nendpoint = context.RequestServices.GetService(type) as IEndpoint;\n\naren't those two lines of code the same?\n. Ah, ok. Yes, we should be using RequestServices. Send the PR if you'd like.\n. thanks\n. JS is not that bad -- you can look into the oidc-client/oidc-token-manager, or just use the idtoken validation endpoint:\nhttps://identityserver.github.io/Documentation/docsv2/endpoints/identityTokenValidation.html\n. Also, here's a link to a relevant video: https://vimeo.com/131636653\n. some notes: I investigated the new i18n APIs in core. IStringLocalizer is mainly meant for the host to allow overriding of localizable strings. IdSvr would have to allow/inject this for its resources to allow the host to override. If the host does not, then there's a flag that shows that there's no override, so then we'd need to code for a default value. For the default value, we could then have our own set of localized resx files to provide default localized messages. \nSo in short, a bit of work to support this.\n. some notes: I investigated the new i18n APIs in core. IStringLocalizer is mainly meant for the host to allow overriding of localizable strings. IdSvr would have to allow/inject this for its resources to allow the host to override. If the host does not, then there's a flag that shows that there's no override, so then we'd need to code for a default value. For the default value, we could then have our own set of localized resx files to provide default localized messages. \nSo in short, a bit of work to support this.\n. We removed it, as it was not needed in the core. The only main place that needs to localize data from the core would be on the error UI. This could then be done via the new IStringLocalizer in ASP.NET Core.\n. We will support that, but everything around that is still a work in progress.\n. We will support that, but everything around that is still a work in progress.\n. > everything around that is still a work in progress\n:)\n. > everything around that is still a work in progress\n:)\n. Those are all under the control of the host. In the sample, that's controlled by the CustomViewLocationExpander.\n. Those are all under the control of the host. In the sample, that's controlled by the CustomViewLocationExpander.\n. Yep.\n. Yes, it should be possible since it's all about the OIDC protocol.\n. Yes, it should be possible since it's all about the OIDC protocol.\n. If you're not a .NET developer, then there are many other platforms that have OIDC support: https://openid.net/developers/libraries/\n. If you're not a .NET developer, then there are many other platforms that have OIDC support: https://openid.net/developers/libraries/\n. np\n. np\n. Check the archives\n. Check the archives\n. @Edu115 yes, for the most part. But this is all still a work in progress. Again, some of this has already been discussed in prior issues opened (and since closed).\n. @Edu115 yes, for the most part. But this is all still a work in progress. Again, some of this has already been discussed in prior issues opened (and since closed).\n. Claims are about identity data, not permissions.\n. Claims are about identity data, not permissions.\n. That is Microsoft's middleware -- why are you asking here about it?\n. That is Microsoft's middleware -- why are you asking here about it?\n. SPAs should not be obtaining refresh tokens. The implicit flow is designed for SPAs.\n. SPAs should not be obtaining refresh tokens. The implicit flow is designed for SPAs.\n. I'd go for long lived access tokens. Have you considered reference tokens? This gives you similar security characteristics to refresh tokens.\n\ndesign the identity server pages to look the same as the SPA. This seems like the worst option, since there's a mobile app in the works that will require a different look and feel. Meaning multiple views for identity server depending on client.\n\nI always dislike this approach since it's disingenuous to the user. The user is logging into the token service, not just the app. That's sort of the whole point of SSO. For example, I login to google, not just maps, docs, or gmail.\n. I'd go for long lived access tokens. Have you considered reference tokens? This gives you similar security characteristics to refresh tokens.\n\ndesign the identity server pages to look the same as the SPA. This seems like the worst option, since there's a mobile app in the works that will require a different look and feel. Meaning multiple views for identity server depending on client.\n\nI always dislike this approach since it's disingenuous to the user. The user is logging into the token service, not just the app. That's sort of the whole point of SSO. For example, I login to google, not just maps, docs, or gmail.\n. Yes, but not much is happening here until ASP.NET Core RC2 is out.\n. Yes, but not much is happening here until ASP.NET Core RC2 is out.\n. Because we don't have infinite time or resources. If your company would like to sponsor this OSS effort, then email us.\n. Because we don't have infinite time or resources. If your company would like to sponsor this OSS effort, then email us.\n. Yes, soon.\n. And what do the logs tell you?\n. And what do the logs tell you?\n. We have a web forms sample client using IdSvr3, but the client code would look the same regardless which one you're using. https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients/WebFormsClient\n. We have a web forms sample client using IdSvr3, but the client code would look the same regardless which one you're using. https://github.com/IdentityServer/IdentityServer3.Samples/tree/master/source/Clients/WebFormsClient\n. Any storage is essentially accessible by any code running on the website's origin. So if your website is XSS compromised then any storage is accessible. Also, though, if your website is XSS compromised then most anything that the user could do the attacker can do. \nHaving said all of that, it still all depends on your token expiration and where it's needed. \n. Any storage is essentially accessible by any code running on the website's origin. So if your website is XSS compromised then any storage is accessible. Also, though, if your website is XSS compromised then most anything that the user could do the attacker can do. \nHaving said all of that, it still all depends on your token expiration and where it's needed. \n. done\n. done\n. We just haven't gotten to that feature yet. It also depends on how we eventually design the cookie management.\n. We just haven't gotten to that feature yet. It also depends on how we eventually design the cookie management.\n. IdentityServer3 is much more mature and has many more customers using it. IdentityServer4 is still in development (mainly because ASP.NET Core is still thrashing so much).\n. IdentityServer3 is much more mature and has many more customers using it. IdentityServer4 is still in development (mainly because ASP.NET Core is still thrashing so much).\n. \"all the information\" meaning all the info about a user's current login session, yes\n. \"all the information\" meaning all the info about a user's current login session, yes\n. Eventually, yes. But as mentioned elsewhere we're not really starting back up with significant work here until RC2 is out. This feature would be lower on the priority list, to be honest (just so many more fundamental things to get ported over from IdSvr3).\n. Eventually, yes. But as mentioned elsewhere we're not really starting back up with significant work here until RC2 is out. This feature would be lower on the priority list, to be honest (just so many more fundamental things to get ported over from IdSvr3).\n. Sure... with time we might have something like this. But we don't have it now as we're in beta.\n. Sure... with time we might have something like this. But we don't have it now as we're in beta.\n. > Introspection Endpoint Security\nWe allow other credential types for authentication now.\n\nScopes and Audiences in Jwt\n\nBeen discussed many times. This is by design.\n\nToken encrypting\n\nIt's coming in the Microsoft JWT library. Once they have it, we'll consider it.. Are you planning on doing a full EF core implementation for client, cors, scope, and operational stores?\n. Are you planning on doing a full EF core implementation for client, cors, scope, and operational stores?\n. Marking with docs so we can add links to these projects.\n. I think we're targeting netstandard1.5 right now. We'll evaluate this and pick the lowest one possible.\n. I think we're targeting netstandard1.5 right now. We'll evaluate this and pick the lowest one possible.\n. Delete the \".vs? folder if you see one and try again, please. Not sure if this is the issue, but we've had lots of VS tooling problems when moving projects from machine to machine.\n. Delete the \".vs? folder if you see one and try again, please. Not sure if this is the issue, but we've had lots of VS tooling problems when moving projects from machine to machine.\n. Search the closed issues -- we discuss in there somewhere.\n. Search the closed issues -- we discuss in there somewhere.\n. We probably need to just modify project.json to include the right files.\n. We probably need to just modify project.json to include the right files.\n. you need to diagnose it some more -- is the 500 from ASP.NET Core, or from IdSvr?\n. you need to diagnose it some more -- is the 500 from ASP.NET Core, or from IdSvr?\n. Can you try an ASP.NET Core app that's not using IdSvr?\n. Can you try an ASP.NET Core app that's not using IdSvr?\n. And what do the logs say?\n. And what do the logs say?\n. No, I meant the ASP.NET Core log....\n. Check the ASP.NET Core docs on enabling logging with the ILoggerFactory and logger providers\n. Yes, we've also seen some of these odd errors. I think we found that including an explicit reference in project.json addresses the problem. Still unknown why (we think it's some transitive dependency where the nuget package is not listed).\n. The ones it complains about.\n. Sorry then -- not sure what that issue is.\n. Sorry -- that's one I've not run into. Without IdSvr do you still have the problem? IOW, try to minimize the code until you find what triggers it.\n. Is there a reason this should be in IdSvr and not done at the hosting layer? This was our feeling and why we did not carry that over. But maybe we overlooked something.\n. To improve discoverability of frequently asked and/or more general questions, we decided to move those questions to StackOverflow:\nhttps://stackoverflow.com/questions/tagged/?tagnames=identityserver3&sort=newest\nWe actively monitor SO as well but hope to create a community there so questions can get answered faster when we are not available.\n. Yes, because they'd speak to each other at the protocol layer.\n. You need to understand the sample host and how it related to IdSvr4 (it's different than in IdSvr3). Here's a sample that has taken the sample host and applied ASP.NET Identity 3 to it: https://github.com/tibold/IdentityServer4.Contrib.AspNetIdentity\n. To improve discoverability of frequently asked and/or more general questions, we decided to move those questions to StackOverflow:\nhttps://stackoverflow.com/questions/tagged/?tagnames=identityserver3&sort=newest\nWe actively monitor SO as well but hope to create a community there so questions can get answered faster when we are not available.\n. I just tried it with the latest code on dev for core and the clients and I don't see the error. \n. The \"/resources\" is hard coded as it implies the token is valid at resources protected by IdentityServer. For more fine-grained scoping at a specific resource, then use the scope claim in the payload to ensure valid use.\n. Audience is a JWT concept, scope is an OIDC/OAuth2 concept and they both have overlapping semantics. Our approach is a tradeoff, also given some of the other constraints we have (e.g. IIRC the Microsoft JWT handler didn't allow multiple audiences).\nAs I said above, scope is what you should use to audience checking, since it's providing the same feature (in conjunction with the correct authority).\n. > Was this ever addressed?\nhttps://github.com/IdentityServer/IdentityServer4/blob/dev/src/Host/Quickstart/Account/AccountOptions.cs#L16. \"idsvr\" is the right one. \n. \"idsvr\" is the right one. \n. I'm ok with that. \n. I'm ok with that. \n. Also, you can always check the milestones page to keep up to date with our release plans.\n. Also, you can always check the milestones page to keep up to date with our release plans.\n. @Lutando it's something like this: https://brockallen.com/2016/02/09/federated-sign-out-and-identityserver3/\n. @Lutando it's something like this: https://brockallen.com/2016/02/09/federated-sign-out-and-identityserver3/\n. Notes from some research: federated signout will be the responsibility of the logout UI page. once they deliver the user to the SLO location, and that has returned the user back, the signed out page can invoke the same APIs on the IUserInteractionService that it calls without federated signout to render the iframe to IdSvr's end session cleanup endpoint. \nIn short, I don't think there's anything to do for this as a feature, unless I'm forgetting something. Am I @leastprivilege?\n. Notes from some research: federated signout will be the responsibility of the logout UI page. once they deliver the user to the SLO location, and that has returned the user back, the signed out page can invoke the same APIs on the IUserInteractionService that it calls without federated signout to render the iframe to IdSvr's end session cleanup endpoint. \nIn short, I don't think there's anything to do for this as a feature, unless I'm forgetting something. Am I @leastprivilege?\n. The only other thing we could do is possibly provide an API or a taghelper to automatically render the iframe. This might be something in the UI library. This would need to be done in the OnSigningOut event in the OIDC MW. We'd also have to ensure the sid check, since we'd need to mark this event as HAndled, and render the response.\n. The only other thing we could do is possibly provide an API or a taghelper to automatically render the iframe. This might be something in the UI library. This would need to be done in the OnSigningOut event in the OIDC MW. We'd also have to ensure the sid check, since we'd need to mark this event as HAndled, and render the response.\n. The more I think about it, I almost prefer middleware in front checking for the oidc-signout to emit the hidden iframes.\n. we will build a middleware that we can put in front of the signout to emit the iframes.\n. done. we should review the API \"feel\" @leastprivilege \n. No, just reworking how IdSvr passes context to the views to minimize the use of cookies as much as we can.\n. No, just reworking how IdSvr passes context to the views to minimize the use of cookies as much as we can.\n. done\n. done\n. Yes, this area is still very much being thought out. \n. Yes, this area is still very much being thought out. \n. Much like this: https://github.com/IdentityServer/IdentityServer4/blob/dev/src/Host/Startup.cs#L41\n. You will have access to the tenant in the UI code. Right now that's on the SignInMessage, but the details of this are being reworked as we speak.\n. You will have access to the tenant in the UI code. Right now that's on the SignInMessage, but the details of this are being reworked as we speak.\n. sure\n. sure\n. Too soon, prolly\n. Too soon, prolly\n. Sure, but is there real precedent elsewhere?\n. Sure, but is there real precedent elsewhere?\n. We should ask them if that was the right thing to have done in retrospect. // @davidfowl\n. We should ask them if that was the right thing to have done in retrospect. // @davidfowl\n. Well, given that they know they're cool now, I guess we keep it: https://twitter.com/leastprivilege/status/753472703387099136\n. Well, given that they know they're cool now, I guess we keep it: https://twitter.com/leastprivilege/status/753472703387099136\n. For questions or comments that are new or unrelated, open new issues please.\n. For questions or comments that are new or unrelated, open new issues please.\n. done\n. done\n. Perhaps if scopes are absent, we just use the list of configured allowed scopes...\n. @JonCubed What flows are your third parties using?\n. Do we want to allow a redirect on the AuthorizeRequestValidationResult so custom implementations can send the user to a custom page?\n. Do we want to allow a redirect on the AuthorizeRequestValidationResult so custom implementations can send the user to a custom page?\n. I think we need to define what the requirements are for this. Pre-authenticate used to allow both: 1) partial logins/redirects for custom UI workflows, and 2) short-circuit the login process and decide the authentication outcome prior to the login UI being displayed. I'm guessing the requirement is that we want both of these, but I think those are two different features given where each needs to fit into the authorization endpoint pipeline.\nCurrently there's extensibility via a custom authorization request validator. I don't think we want to allow custom redirects on the AuthorizeRequestValidationResult -- that should be simple protocol validation with a result of error or \"continue with authorization\" (especially since it's also used from the user interaction service). In short, it should only validate the param values and not try to affect workflow. So the current extensibility point doesn't feel like the right place.\nFor custom redirects/UI workflow, this needs to be done after the user has successfully authenticated. This extensibility should be added into the IAuthorizeInteractionResponseGenerator. Right now the default implementation does 2-steps of checking: 1) login related checks (prompt=login, etc), and 2) consent related checks. So if we want to allow custom redirects, I think we design it around the fact that the user has authenticated and that we've done all of our default login related checks (meaning IdentityServer doesn't think it needs to send the user to the login page). We then add custom call before we do our consent checks and we allow the custom code to do a redirect to a custom page... IOW, this is like the partial login feature from IdSvr3. After the user is done on the custom page and come back to the authorization endpoint, we'd then do all the same workflow and then the custom code would not redirect, and then the consent checks run. I think customers will want this to be a user-focused thing (EULA, etc.), thus the need to put it in between login interaction checks and consent interaction checks.\nIf we want to allow a hook for choosing the identity of the user from some other source other than the cookie, then we'd need to do that earlier in the authorization endpoint prior to the basic protocol validation via the authorize request validator. \n@leastprivilege did you have another use case in mind, since you mentioned pre-authenticate? So you'd want a check before the login check to allow custom code to redirect? Or are you thinking more pre-authenticate to choose the identity of the user from something other than the cookie? Or are you thinking pre-authenticate to decide the outcome of authorization without any prompt of the user (login or consent)? \n. Having done some more thinking, I believe we already have all the extensibility points we need to handle most of the above requirements.\nThere's the ICustomAuthorizeRequestValidator that can reject any invalid combination of protocol params (including things like this user can't use that client) but this extensibility point can only produce an error result (and thus the error UI).\nThere's also the IAuthorizeInteractionResponseGenerator which wasn't always designed to be replaced, but it can be. Now, replacing would lose a lot of our built-in functionality, so I'd propose to make the default AuthorizeInteractionResponseGenerator public and open the methods to be protected virtual so that derived classes can reuse our main implementation and then surround it with their own logic (either as pre- or post-processing). Also, I'd propose we make the ProcessLoginAsync and ProcessConsentAsync also protected virtual so a custom implementation can put any logic in between those two steps I described above.\nThe one thing the IAuthorizeInteractionResponseGenerator isn't currently designed for is to allow redirects to any arbitrary URL (like partial logins used to allow). Do we want to add that feature, or just make their login page handle that?\nThe only last requirement that this doesn't handle is \"PreAuthenticate regardless of logged in status\", and that's the one I think I want examples of use cases so we understand the requirement.\n. > To be honest, I am not a big fan of this code.\nI'm not either, but when I have customers that want to do this I try to discourage them. If IdentityServer is meant to be your SSO platform, then the users aren't logging into an individual client -- they're logging into your company's \"suite of applications\". The business/marketing people don't get this unless you explain it to them. Think about google -- you never log just into gmail -- you're logging into google and from that you have access to youtube, calendar, gmail, etc. I also think this is disingenuous to the user. \nBut yea, if you must brand the login page for each client then multiple razor views is one way, or have one that's more dynamic. I don't have a better suggestion either. \n. done\n. protected internal virtual\nprotected and internal together is an \"or\", not an \"and\"\n. Yea, maybe on the iclientservice it makes sense to add the cors semantics. we'll think about it.\n. Yea, maybe on the iclientservice it makes sense to add the cors semantics. we'll think about it.\n. \n. @dementeddevil, what did you mean by this:\n\nSeems that we are missing the ability to optionally restrict a given CORS origin to specific methods\n. We are using that implementation. It's just a matter of allowing CORS for specific endpoints and determining where the policy is sourced from. It's common to associate CORS origins with client configurations.\n. @jjanne i'm curious why you had to do so much of that implementation? was there something about our ICorsPolicyService that wasn't working for you?\n. Ok, that makes sense. And the problems you're having (and the reason we have this open issue) is because the design of the Microsoft CORS middleware doesn't really make it easy for our situation where we're hosting 2 different \"things\" in the same pipeline. Plus with the fact that the policy for IdentityServer will most likely need to be dynamic from a database.\n\nWe'll keep investigating here and try to come up with a solid solution that works. Thanks. \n. Done.\n. :shipit: \n. I think for now we're not going to do anything on this. As with many of Microsoft's internal helpers, for now just copy the code.\n. And remove User.Identity.Name from the UI\n. All done.\n. i ported the ones from idsv3 and pushed to dev. there are a few that have some issues we need to discuss.\n. i ported the ones from idsv3 and pushed to dev. there are a few that have some issues we need to discuss.\n. Perhaps we should discuss setting the default response_mode as soon as the response_type is determined. This will solve the chicken & egg problem we're seeing. \n. Perhaps we should discuss setting the default response_mode as soon as the response_type is determined. This will solve the chicken & egg problem we're seeing. \n. Not the most elegant PR ever, but this encapsulates all the changes needed to make this work. The main things are:\n- allow error_description into authorization responses\n- move assignment of the default response_mode earlier (as soon as response_type is known)\nhttps://github.com/IdentityServer/IdentityServer4/pull/207\n. Not the most elegant PR ever, but this encapsulates all the changes needed to make this work. The main things are:\n- allow error_description into authorization responses\n- move assignment of the default response_mode earlier (as soon as response_type is known)\nhttps://github.com/IdentityServer/IdentityServer4/pull/207\n. merged. 2 tests marked as skip pending updates to IdModel\n. merged. 2 tests marked as skip pending updates to IdModel\n. You're asking for two things. The first part is a dup of https://github.com/IdentityServer/IdentityServer4/issues/166, I believe.\nThe second part is solved by the \"allowed IdPs\" options  on the Client config. Your login UI would need to query this and do the right thing.\nThe third is a matter of your UI accessing the client requesting the login and changing itself accordingly. \n. Look at the sample host -- there's a service injected to get this info.\n. Follow-up question for you: for your first requirement where the user can't use certain clients (external user can't use internal for example) what would you want to happen if they did make the request into IdSvr? Should IdSvr 1) show them an error, or 2) show them a login page to login as a user that is allowed to access the app?\n. Thanks for that. Also feel free to add any input to this thread: https://github.com/IdentityServer/IdentityServer4/issues/166 with any pertinent suggestions/feedback you have.\n. We can look into how this might work. No promises though.\n. We can look into how this might work. No promises though.\n. @hequs did @ariesdane's suggestion work for you?\n. Yep, I can look into it.\n. Done.\n. Done.\n. Those cookies do different (but related) things, so I'm a little confused by the question. We're still working on some of these parts, so I'm not yet sure what direction we will end up with. Do you have a specific use-case or feature request?\n. In IdSvr4 the entire UI for login will be the responsibility of the developer (you) and not the framework (us). So you can issue your own persistent cookie if you want. If the current UI does not honor the \"remember me\", then that's a bug in the sample.\n. In IdSvr4 the entire UI for login will be the responsibility of the developer (you) and not the framework (us). So you can issue your own persistent cookie if you want. If the current UI does not honor the \"remember me\", then that's a bug in the sample.\n. I've done some thinking on this... session ID cookie is, in a sense, derived from the authentication cookie, but it's hard to have the session cookie know the options used for the main authentication cookie. We do need 2 cookies, and it's unfortunate that these could get of of sync. I'm wondering if it makes sense to:\n1) put the session ID into the properties of the main authentication cookie, and when we need to emit the session ID cookie we read the value from the main authN cookie. if it's absent in the main authN cookie we add it (and re-issue the main authN cookie).\n2) have middleware in IdSvr that always emits the session cookie if it's absent on the incoming request. Sort of a self-healing session ID. this way if the main authN cookie changes, we won't get out of sync (or at least we'll correct ourselves the next time a request is made into IdSvr).\n. Ok, I'll track this here: https://github.com/IdentityServer/IdentityServer4/issues/240\n. You need to round trip the returnUrl, and when you round trip it if it's not in the expected place then you can pass the value into the API.\n. If you invoke GetLoginContextAsync with a null param, then it looks in the expected query string for the value. If it's not there, then null will be returned. If on your login page you make postbacks and don't round-trip the value in the same query string, then where would GetLoginContextAsync look to find it? This is why on a post back you would need to round-trip the value, and if it's somewhere else (like a hidden form field) then you can pass it in explicitly to GetLoginContextAsync.\nOr am I still misunderstanding?\n. No problem -- and at some point this will be documented. If you have any other feedback on the IUserInteractionService, please let us know (in a new issue). Thanks.\n. Well, I'm open to suggestions. Since we need to allow it to be passed for the POST scenarios, we need to allow a param. But as a convenience since we know what the configured query string should be we can automatically look it up. Is the convenience behavior too confusing?\n. Ok, that's good feedback. I'll keep it in mind for the RC. Thanks\n. // @leastprivilege can think about it too...\n. Ok, we consolidated the GetLoginContext and GetConsentContext and now the param is mandatory. Thanks.\n. Yes, but this is more of a question for ASP.NET Core, not specifically IdentityServer4.\n. This is something we did not support in IdSvr3, but given the UI re-work it might be easier in IdSvr4. If we get something working, then the real work will be passed onto you as the UI/login page developer and the request for prompt=select_account would be something your login code would have to handle.\n. > However the TokenValidator fails the validation since it can't find the client id. \nCan you elaborate? What do the logs say?\n. That tells me that the access token is being sent, not the id token.\n. That tells me that the access token is being sent, not the id token.\n. thx\n. The first issue has been fixed.\n. The first issue has been fixed.\n. The second one is also done. Thanks.\n. The second one is also done. Thanks.\n. Sure, we can take a look.\n. Sure, we can take a look.\n. I can't reproduce this with my local setup. Any more info that might help?\n. I can't reproduce this with my local setup. Any more info that might help?\n. From inspecting the code I might have tracked it down. I'll see if I can write a test to repro.\n. From inspecting the code I might have tracked it down. I'll see if I can write a test to repro.\n. @leastprivilege for this situation, what should we do? client triggers signout endpoint with valid id_token_hint & post_logout_redirect_uri params, but user is no longer signed into idsvr -- should those params be considered valid or invalid for redirecting back to client?\n. @leastprivilege for this situation, what should we do? client triggers signout endpoint with valid id_token_hint & post_logout_redirect_uri params, but user is no longer signed into idsvr -- should those params be considered valid or invalid for redirecting back to client?\n. BTW, the NRE is now fixed. Just need to know what behavior is desired to close this issue.\n. BTW, the NRE is now fixed. Just need to know what behavior is desired to close this issue.\n. Closing now since bug is fixed, and we will honor end session params even if user is signed out at IdSvr.\n. nothing on NuGet yet, but these fixes are on the myget feed (devbuilds): https://identityserver4.readthedocs.io/en/dev/intro/packaging.html\n. In IdSvr3 it was a list because it needed to be mutable. I don't know about IdSvr4 yet if we still need it that way.\n. In IdSvr3 it was a list because it needed to be mutable. I don't know about IdSvr4 yet if we still need it that way.\n. Yea, just hold off on this for now, please. This month we're doing a lot of work on IdSvr, and for this particular issue we're not yet ready on a direction or what's needed. What you see now is just a snapshot in time of where we're going.\n. Yea, just hold off on this for now, please. This month we're doing a lot of work on IdSvr, and for this particular issue we're not yet ready on a direction or what's needed. What you see now is just a snapshot in time of where we're going.\n. I'll close this since we're doing so much rework this month. If it's still confusing after the RC, please open a new issue. Thanks. \n. Ok, I think we have either addressed all of these issues, or we have plans for them (like adding a new \"quick start\" project). Have a look. Thanks.\n. The URL being passed -- is it in the client's list of allowed post logout redirect uris?\n. The URL being passed -- is it in the client's list of allowed post logout redirect uris?\n. We will have events like we did in IdSvr3 and that could be a place for you to record that a user had a token issued. We're just not there yet in the implementation.\n. We will have events like we did in IdSvr3 and that could be a place for you to record that a user had a token issued. We're just not there yet in the implementation.\n. Still tracking here: #214. Will close now, but feel free to update us if necessary.\n. If you're doing load balancing, then you should put middleware in the IdSvr pipeline that changes the incoming request's host header to be the right one (the pubic one). \n. If you're doing load balancing, then you should put middleware in the IdSvr pipeline that changes the incoming request's host header to be the right one (the pubic one). \n. I can look into it... might just be something incomplete in the UI sample layer./\n. Ok, just looked into this. This is how the Microsoft OIDC middleware handles errors. This is not an IdentityServer issue. You would be expected to handle the error on the Events property of the OIDC middleware and have this error however you saw fit. Here is a list of common errors  you'd expect to get from OIDC/OAuth2: https://tools.ietf.org/html/rfc6749#section-4.1.2.1\n. // @leastprivilege \n. This has been fixed.\n. done\n. done\n. done\n. Because we are always storing UTC, so the use of it was not necessary. Oh yea, and we had lots of complaints about it.\n. caching done\n. scope stone done; events done via helper\n. Perhaps consent?\n. done\n. Looks like it might be best for this on the IPersistedGrantService for the GetReferenceTokenAsync. \n. Yep, good point. Thanks!\n. We just tried to reproduce your situation on the ASP.NET Identity Quickstart and could not reproduce it. Are you using RC1 (I'm assuming yes)? Does the ASP.NET Identity Quickstart work for you?\n. Also, if you're not using AddIdentityServerQuickstart then you'll also need to register AddInMemoryStores (in addition to your signing cert). But that's an error you'd get at runtime, not startup.\n. The design was changed to have the CorsPolicyProvider decorate any custom ICorsPolicyProvider registered in DI prior to registering IdentityServer. \nAre you registering your own ICorsPolicyProvider?\n. That's opening this up beyond our intended design. Why do you need CORS on other paths?\n. I bet it's GitHub for Windows\n. Possibly. I did have a reminder for myself to look into this.\n. Ok, good to hear. Thanks.\n. > I don't understand this. Why would periodically reloading the user's claims cause this problem?\nBecause idp is a claim captured at login time, and is not something stored in the DB.\n. Just as a follow on note here about this issue. This error happens when you don't have the main authentication cookie scheme set as the default sign-in scheme in ASP.NET Core. This is usually the case when you use ASP.NET Identity, because it internally set the sign in scheme to be the external authentication cookie scheme. . add it\n. done\n. Tracking here: https://github.com/IdentityServer/IdentityServer4.EntityFramework/issues/7\nThanks for the report.\n. Tracking here: https://github.com/IdentityServer/IdentityServer4.EntityFramework/issues/7\nThanks for the report.\n. IdentityServer4.EntityFramework-rc1-update1 is now on nuget.\n. Added call in auth handler to ensure session id cookie is in sync on every request\n. Dom would know better, but my understanding is that those App IDs/GUIDs are unique to the app. So, yes, it's unique per client (but not per install of the client).\n. A salt is to thwart dictionary-style attacks. Given that we're using high entropy secrets, a salt isn't really necessary.\n. Sorry -- I should have added that if you disagree, please feel free to express your concerns. \n. Also, you should be generating these from your client registration. Look into this API: https://github.com/IdentityModel/IdentityModelv2/blob/dev/src/IdentityModel/CryptoRandom.cs#L34\n. A 128 bit entropy secret hashed once should be sufficient. If you have anything to show this is not sufficient, please share. Also, you can always use a larger key space.. > Many pre-computed databases of common hash functions exist that allow for an attacker to simply lookup a hash to know the pre-hashed string. E.g. Rainbow tables\nThe size of said database would be large: \n\nLook at this way: Suppose you could somehow get this algorithm to run a quintillion times faster, so it finishes in under a year. Your output file is going to be 2\u00b9\u00b2\u2078 \u00d7 16 = 2\u00b9\u00b3\u00b2 bytes in size. That's around 10\u00b2\u2077 terabytes. One terabyte of SSD storage weighs around 100 grams. The mass of the earth is 10\u00b2\u2074 kilograms. Therefore, before you run this program, you will need to acquire 100 earth-sized planets and convert them all to SSDs. \n\nfrom: https://blogs.msdn.microsoft.com/oldnewthing/20131029-00/?p=2803/\nSalting is to address collisions in the secret, and is useful when the secret is human created (not machine created). . done\n. :shipit: :+1: \n. Ok, we can look into it. // @leastprivilege \n. @adminnz Looks like it's a Microsoft bug: https://github.com/aspnet/Security/issues/976\n. all UI related html removed. this means they can wrap server-side in middleware if needed.\n. thanks!\n. thanks.\n. thanks again!\n. thanks again!\n. Was this PR possibly a mistake?\n. Was this PR possibly a mistake?\n. keep it coming! thanks.\n. keep it coming! thanks.\n. thanks again!\n. thanks again!\n. done\n. For the consent: Are they configured as the same client, or different? Do they have different consent settings?\nFor the cookie: Where did you see this error? In IdentityServer, or in one of the clients?\n. For the consent: Are they configured as the same client, or different? Do they have different consent settings?\nFor the cookie: Where did you see this error? In IdentityServer, or in one of the clients?\n. You will only see records in the grants table if you have authorization codes, refresh tokens, reference tokens, or user consent.\n. You will only see records in the grants table if you have authorization codes, refresh tokens, reference tokens, or user consent.\n. If all you're doing is code flow, then the code persisted grant will only exist in the DB for a short while. Once the browser is redirected back to the MVC apps and they exchange the code for tokens, the code grant in the DB will be removed.\n. We use the ASP.NET host's DI, so whatever ASP.NET Core supports we will use.\n. We use the ASP.NET host's DI, so whatever ASP.NET Core supports we will use.\n. This is not something we control. Your host controls it. I guess I'm confused...\n. This is not something we control. Your host controls it. I guess I'm confused...\n. I've updated the docs so this won't merge anymore. I'll do this edit manually. Thanks.\n. I've updated the docs so this won't merge anymore. I'll do this edit manually. Thanks.\n. IdentityServer is not a CORS framework, so it's not our job to do that for you. I'm sorry. Why don't you just copy the code from here? https://github.com/IdentityServer/IdentityServer4/blob/dev/src/IdentityServer4/Infrastructure/CorsPolicyProvider.cs\n. You'd not be using the InMemoryUserLoginService on your account controller -- that's only designed to work if you're using InMemoryUsers, which you're not.\n. As we work more on documentation, some of these things will be better explained.\n. @dknaack you're saying it was working pre-1.0.1?\n. Also, can you put in this code in ConfigureServices and tell me what scheme it reports?\nservices.Configure<IdentityOptions>(options =>\n{\n    var scheme = options.Cookies.ApplicationCookieAuthenticationScheme;\n});\n. Well, then that might explain why you don't have the authentication scheme. Do you have app.UseIdentity() in your Configure?\n. > Ive looked into my older version (1.0.0) and i can confirm that it does not have the\n\ncall for app.UseIdentity() either.\n\nOdd.\n. In azure you should be using this: https://azure.microsoft.com/en-us/blog/using-certificates-in-azure-websites-applications/\n. Well, apparently this:\n\nafter some time it starts throwing CryptographicException: Keyset does not exist.\n. thanks!\n. This is also how it worked in IdSvr3, BTW. If you want access tokens to be invalidatable, then either keep short access token times and make the client frequently get new tokens, or use reference tokens and invalidate them at logout time.\n. Access tokens represent consent for a client to use a resource on behalf of the user, which is different than the user logging out. If you want to tie the two together, then you'll have to take extra steps as I mentioned above.\n. > Thanks for your answer, makes sense, but for me, but if I logout of an application, (and most other users), believe that the protected resources cannot be used without logging in again. This feel like a serious security risk. \n\nAre the apps 1st party or 3rd party to IdentityServer and the user database? If they're 1st party, then they are all in the same realm of trust, so it's not a real concern. If they're 3rd party, that's what consent is all about. Think about when you use some app and you give it access to your google calendar. If you logout of google, should the app stop being able to use your calendar? Or think about when you use an app on your phone to access your facebook. When you logout in the browser, should that affect the app?\nAll I'm trying to do is point out that it's tricky. Fortunately IdentityServer allows you the flexibility to design it to work the way you want :)\n. We will still have the event service. If you write a custom one, then put it into DI. \n. Even better -- the IPersistedGrantService. It has higher level API specific to reference tokens, refresh tokens, etc.\n. No docs yet for this. It's a work in progress. And no, you don't have to use AspId3.\n. reference tokens are implemented, yes\n. Which Claim class?\n. done.\n. done in new repo. Done\n. Also need logic to restrict allowed IdPs based on client.\n. @noufionline any claims you issue as part of the login process will be made available in the claims on the Subject in the profile service's API (assuming the request for tokens is coming thru the front-channel).\n. The UseIISIntegration you typically see, like this:\nvar host = new WebHostBuilder()\n                .UseKestrel()\n                .UseUrls(\"http://localhost:5000\")\n                .UseContentRoot(Directory.GetCurrentDirectory())\n                .UseIISIntegration()\n                .UseStartup<Startup>()\n                .Build();\nbasically does the reverse proxy magic when fronting your app with IIS.\n. I don't know to be honest -- so much changed in that area the months before RTM, and I've not had a chance to re-research it. But when I am using it locally with IIS Express it seems to do some magic to make requests look as if they're from the outside (meaning the host name is corrected, HTTPS is true, etc.).\n. UI style MVC?\n. > What do you mean by UI style MVC?\nAs opposed to just an API.\n. I had something similar in a project, but I can't repro it now. IIRC what I did was to set AutomaticChallenge on the OIDC MW to false. This fell thru to the cookie MW's 401 vs. 403 behavior.\n. I'm sorry -- I am not following how the persisted grant store relates to login sessions (because they aren't the same thing). If you have a requirement where a user can only be logged into one app at a time, then that's up to you to implement on your own in the app with some check back to a central DB that knows the user's last login session at which app.\n. https://github.com/IdentityServer/IdentityServer4/blob/dev/src/IdentityServer4/Services/IPersistedGrantService.cs\nand\nhttps://github.com/IdentityServer/IdentityServer4/blob/dev/src/IdentityServer4/Stores/IPersistedGrantStore.cs\n. So am I. I'm sorry. I have a feeling that your expectation is how it's supposed to work is not lined up with how it actually works. \nWhen a user logs in they're assigned a session ID in their cookie. This is added to id_tokens when the user logs into client apps. Also, if the client app requests API access then they're issued a access token. If the access token default configuration is changed to a reference token then that's when the persistent grant store would be used -- but it's not the default.\n. > Now, if I block him or if he e.x. changes password I want to \"Cancel\" his session so he is logged out of IdSrv => IdSrv notifies all MVC apps that user not valid => new login redirect to IdSrv.\nThe only thing like this in IdSvr is the IsActive API on the IProfileService -- this API allows you to say that a user is no longer allowed to get new tokens (id_token or access_token) or existing refresh tokens or reference tokens will no longer validate. But this only really works for the \"disable user\" scenario. \nIf you want to disable a user's existing session in an existing app and just make them login again, you'll have to build this yourself with your own custom check in the MVC app for this. \n. I think you need to spend some more time learning how OIDC and OAuth2 work. This seems to be your major mental hurdle, because you're conflating things that aren't related. Once you have a better understanding of them then I think you'll have an easier time with your requirement.\n. You can host them together. It's just that as soon as you have more than one app or API, this hosting doesn't make sense anymore. Most real world scenarios host it separate.\n. Yea, looks good.\n. So just have all 3 apps trust the one IdentityServer -- that's how you achieve SSO.\n. done\n. @dhjf all set on this issue -- can we close?\n. fixed\n. fixed\n. samples done (on rc2 branch)\n. quickstart docs now also updated (on rc2 branch)\n. That name came from a time when we had 4 in-memory stores. We've recently consolidated them into the one, so you have a good point. I just wonder if we might have more in the future (you never know), and this mode is really meant for local/in-memory testing scenarios. But calling it \"AddTesting\" or whatever is also a bad name. \n. Can you ask a more specific question or identify a more specific issue? \n. https://github.com/aspnet/Security/issues/978\n. > After successfully authenticating the credentials IdentityServer is automatically setting the User in the HttpContext\nWhere is this happening?\n. The error id is passed as a param to the error page when something goes wrong in IdentityServer.\n. Look at the IdentityModel X509 class.\n. Closing -- we'll have more docs/samples as we get closer to RTM.\n. > This user should not have access to the tenant2 site but he does. \nFundamentally the app should be enforcing this. IIRC we pass along a tenant param as a claim? Maybe that was in IdSvr3... but you could add this claim in the profile service or at login time.\nNow, could IdentityServer do something more to help... we'd need to check the tenant param and compare to the current logged in user's tenant and then force re-authentication. \nI'll leave this open so we can think more about it.\n. > So then with this in mind, would your opinion be to do the site / tenant authorization in the OnTicketReceived event in my Client? If it's determined that they should not have access, call SignOutAsync('oidc') which will then redirect back to and sign out from IdentityServer.\nSure -- really anywhere in your app when the authenticated user arrives you need to ensure they meet any requirements. This is just normal authorization that apps should do.\n\nI also wanted to comment on this. Instead of having anything built into IdentityServer to handle tenant authentication, I think it would be better to just have an extensibility point and let the implementing system write the authentication logic.\n\nI have a feeling this will allow for your requirement: https://github.com/IdentityServer/IdentityServer4/issues/166#issuecomment-252442506. If so, then perhaps we can close this issue?\n. This is what LoggedOutViewModel has: https://github.com/IdentityServer/IdentityServer4/blob/dev/src/Host/Models/LoggedOutViewModel.cs\n. If you want the client name, use the client store to look it up. This is just the sample UI code.\n. I think the best/easiest place to implement this would be as a custom IPersistedGrantService with StoreUserConsentAsync and GetUserConsentAsync checking the DB as well as a cookie. It'd be nice to not have to implement all 18 methods in a decorator (see #394).\n. Yes, it's now possible.\n. Given that this PR is so old, I think it makes sense to close it and follow up on the open issue so we can understand the real ask here. . Sounds like you need a token to submit to the UI of IdentityServer to accept the user as being logged in. You can always pass a custom acr_values or any custom QS params and IdentityServer will pass those to the login page in the returnUrl. You'd then just trust that param instead on the login page and not prompt the user.\n. So disable browser link?\n. > Where is this browser link defined and why is it called.\nIn ASP.NET Core, it's a middleware that the templates add IIRC.\n. BTW if this is used, we need to rework logging again since the inner token validator won't be called and thus we won't get our informational on certain endpoints (like introspection and user info).\n. done\n. done\n. This will make the quickstart UI problematic. . done. fixed here: https://github.com/IdentityServer/IdentityServer4/commit/2a04b5566933be01667e988bd83978ee1b101e61\n. I started to do this work and was not happy with it. In short, this approach ends up being like IdSvr3 with the 4 different store interfaces. \nWhat if instead we removed all these APIs on the IPersistedGrantService, and instead made them all extension methods to the IPersistedGrantStore instead?\n. done\n. check the logs\n. I just tried to repro on the quickstart as you suggested, and it's working for me. Did you remember to update the PostLogoutRedirectUris to now have /signout-callback-oidc as the suffix? That's a change from 1.0 to 1.1 from Microsoft: \nPostLogoutRedirectUris = { \"http://localhost:5002/signout-callback-oidc\" }. PostLogoutRedirectUri is set for you automatically in the MW, so no need to set it explicitly.. I was referring to the ASP.NET OIDC security handler -- IOW, the client side component config, not IdentityServer's config.. I don't understand the question. Change password is not covered in OIDC anywhere.\n. Pass some id param of the client app so your change password can redirect back once done. That's just normal web development at that point.\n. IdentityManager is a Katana-only, and doesn't work (yet) with AspId3.\n. We have a collection of validation keys now -- you can use AddValidationKeys.\n. yep, and if needed a can stay as a validation key as well for some time (until all outstanding tokens are expired)\n. You would need to implement something to check your user database. Nothing in OIDC or IdentityServer has that built-in.\n. This seems to be a general question about IdentityServer - not a bug report or an issue.\nPlease use StackOverflow for that. This has the advantage that questions and answers can be easily found by search engines, and that there are more people answering questions than just us.\nFor IdentityServer3\nhttps://stackoverflow.com/questions/tagged/?tagnames=identityserver3&sort=newest\nFor IdentityServer4\nhttps://stackoverflow.com/questions/tagged/?tagnames=identityserver4&sort=newest\n. I added call from the authN mgr to the events extensions that we have, but they still need review (as do all of them IIRC). This also changed the resource owner event, so we should review that now as well.\n. Yes, it sounds strange, but if the grant type is configured properly (implicit in this case) then the client will not be allowed to access the token endpoint (which is the other place the RequireClientSecret=false would be applicable).\n. We can review to either cleanup the names, and/or ensure there's no vulnerable configuration.\n. >  Should the server not handle revoking any active tokens when a signout occurs ? \nIt does not automatically, no.\n\nSetting RequireClientSecret to false seems dangerous because it exposes the revocation endpoint to anybody.\n\nOnly if they have a valid access token for that client, which should only be your JS client.\n\nMaybe I should post this in the oidc-client repo\n\nPerhaps there should be a flag in the UserManagerSettings to not use the revocation endpoint automatically. But... if you're signing out, and it's a reference token... then revoking it seems like a good idea to me.\nDon't forget that IdSvr4 is still a work in progress. For this workflow we might relax that configuration setting. If we can infer this scenario securely, then I'd like to make it work.\n. > For this workflow we might relax that configuration setting. If we can infer this scenario securely, then I'd like to make it work.\nDone: For clients that only have the implicit grant type, we allow using revocation endpoint without credentials.. I see no config in your UseOpenIdConnectAuthentication where access tokens are being requested.\n. Need to pair on this -- it needs discussion.\n. done, but still need to have signout iframes be a collection on the LogoutRequest\n. done\n. Yes, see our quickstarts.\n. you'd want something like this:\nif (url.IsLocalUrl())\n{\n    if (url.StartsWith(\"~/\")) url = url.Substring(1);\n}\nand then assign the url to the LoginPath and/or LogoutPath. If they're not local, then don't assign them.. please remove this. good catch, thanks!. I don't like Html.Raw in here -- XSS potential.. I'd just write the if/else blocks to build the html tags. The use of Raw disables the HTML encoding of the value.. No, I am just looking at issues. No time yet for me to do any code :). The quickstarts are to help people get people used to using IdentityServer. This is not a general purpose help system to teach you everything you need to know about OAuth2, ASP.NET Core, or other security topics you need to know.. ",
    "mbeckenbach": "Sounds good and I would be happy to provide feedback.\nAny tip where i should have a look in the examples for getting an idea of the new ui invoking and user service? I think there is nothing like a documentation yet, correct?\n. OK. If that's all to look at, let's go. :)\n. First positive feedback, after playing arround for some time:\nI really like the usage of ViewLocationExpanders. This helps much to keep the project directories clean and gives the feeling of component driven development while still using mvc. \nBut the naming of the UI folder in the example feels somehow wrong. Don't know why.\n. Ok this is what I do at the moment. My User entity has a UserID which maps to the subject in identity server models.\n. ",
    "giggio": "BTW, bellow you can find the error I am getting when running on .NET 4.5.1. It works perfectly with .NET Core (dnxcore50). I am assuming the version difference on System.IdentityModel.Tokens.Jwt to be the problem.\n=> RequestId:0HKOT6M4ABETF RequestPath:/connect/authorize\n      An unhandled exception has occurred while executing the request\n      System.TypeLoadException: Could not load type 'System.IdentityModel.Tokens.Serializer' from assembly 'System.IdentityModel.Tokens.Jwt, Version=5.0.0.112, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\n         at IdentityServer4.Core.Services.Default.DefaultTokenSigningService..cctor()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\n         at IdentityServer4.Core.Hosting.EndpointRouter.Find(HttpContext context)\n         at IdentityServer4.Core.Hosting.IdentityServerMiddleware.<Invoke>d__3.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at IdentityServer4.Core.Hosting.BaseUrlMiddleware.<Invoke>d__2.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.IISPlatformHandler.IISPlatformHandlerMiddleware.<Invoke>d__8.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\n. BTW, bellow you can find the error I am getting when running on .NET 4.5.1. It works perfectly with .NET Core (dnxcore50). I am assuming the version difference on System.IdentityModel.Tokens.Jwt to be the problem.\n=> RequestId:0HKOT6M4ABETF RequestPath:/connect/authorize\n      An unhandled exception has occurred while executing the request\n      System.TypeLoadException: Could not load type 'System.IdentityModel.Tokens.Serializer' from assembly 'System.IdentityModel.Tokens.Jwt, Version=5.0.0.112, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\n         at IdentityServer4.Core.Services.Default.DefaultTokenSigningService..cctor()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)\n         at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\n         at IdentityServer4.Core.Hosting.EndpointRouter.Find(HttpContext context)\n         at IdentityServer4.Core.Hosting.IdentityServerMiddleware.<Invoke>d__3.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at IdentityServer4.Core.Hosting.BaseUrlMiddleware.<Invoke>d__2.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.IISPlatformHandler.IISPlatformHandlerMiddleware.<Invoke>d__8.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n      --- End of stack trace from previous location where exception was thrown ---\n         at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n         at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n         at Microsoft.AspNet.Diagnostics.DeveloperExceptionPageMiddleware.<Invoke>d__7.MoveNext()\n. Ok.\nDo you have a workaround for this specific problem I just posted om the error log? \n. Ok.\nDo you have a workaround for this specific problem I just posted om the error log? \n. The conflict came from using Microsoft.AspNet.Authentication.OpenIdConnect version 1.0.0-rc1-final on the same host. After removing, the problem was solved. I think it is using version 5 of System.IdentityModel.Tokens.Jwt and that is conflicting. I have solved the conflict, but this is still an issue. Let's wait for RC2, then.\n. The conflict came from using Microsoft.AspNet.Authentication.OpenIdConnect version 1.0.0-rc1-final on the same host. After removing, the problem was solved. I think it is using version 5 of System.IdentityModel.Tokens.Jwt and that is conflicting. I have solved the conflict, but this is still an issue. Let's wait for RC2, then.\n. @leastprivilege I see that System.IdentityModel.Tokens.Jwt is still in different versions on the latest project.json. This was closed as not going to be fixed, or is it being fixed some other way?\n. @leastprivilege I see that System.IdentityModel.Tokens.Jwt is still in different versions on the latest project.json. This was closed as not going to be fixed, or is it being fixed some other way?\n. If the bug is not fixed, the issue shouldn't be closed. This is unexpected behavior, it is an open bug.\n. If the bug is not fixed, the issue shouldn't be closed. This is unexpected behavior, it is an open bug.\n. #27, right? I assume that that will fix this one, so I will follow that one. Tks.\n. #27, right? I assume that that will fix this one, so I will follow that one. Tks.\n. You should dispose the serviceProvider at the end.. @leastprivilege Cool! Would you know when this will be released?. It depends on your release strategy. If you are planning on keeping evolving IS, and release versions 5, 6, etc, following semver, than I would deprecate the parameterless constructor on version 4 (with a message warning for the problem), and remove it on version 5. At the same time, post the problem on the docs, alerting people for the problem.\nIt would also be a good idea to make the Name property read only, to avoid confusion, along with DisplayName.\nWhatever way you decide, try to leave only one way to do things, to avoid confusion. I am not sure my suggestion above follows your plans to IS, so maybe you will approach it differently. But make it so that there is only one way to do it. I spent a lot of time trying to figure out why I had a problem, the current way things are set makes it harder to use the library.. ",
    "margagn": "I am having the exact same issue. Is there something we can do to get unblocked?\nResult StackTrace:  \nat IdentityServer4.Core.Services.Default.DefaultTokenSigningService..cctor()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ConstructorCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.TransientCallSite.Invoke(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.<>c__DisplayClass12_0.<RealizeService>b__0(ServiceProvider provider)\n   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)\n   at IdentityServer4.Core.Hosting.EndpointRouter.Find(HttpContext context)\n   at IdentityServer4.Core.Hosting.IdentityServerMiddleware.<Invoke>d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at IdentityServer4.Core.Hosting.BaseUrlMiddleware.<Invoke>d__2.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at Microsoft.AspNet.Authentication.AuthenticationMiddleware`1.<Invoke>d__18.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNet.Cors.Infrastructure.CorsMiddleware.<Invoke>d__7.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNet.Hosting.Internal.RequestServicesContainerMiddleware.<Invoke>d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNet.Hosting.Internal.HostingEngine.<>c__DisplayClass32_0.<<Start>b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNet.TestHost.ClientHandler.<>c__DisplayClass3_0.<<SendAsync>b__0>d.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Microsoft.AspNet.TestHost.ClientHandler.<SendAsync>d__3.MoveNext()\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at DataAccessLayer.Tests.RecipientControllerTests.<GetAccessTokenAsync>d__0.MoveNext() in D:\\DataAccessLayer.Tests\\RecipientsControllerTests.cs:line 38\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()\n   at DataAccessLayer.Tests.RecipientControllerTests.<CreateJob>d__2.MoveNext() in D:\\DataAccessLayer.Tests\\RecipientsControllerTests.cs:line 73\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Xunit.Sdk.TestInvoker`1.<>c__DisplayClass46_1.<<InvokeTestMethodAsync>b__1>d.MoveNext() in C:\\BuildAgent\\work\\cb37e9acf085d108\\src\\xunit.execution\\Sdk\\Frameworks\\Runners\\TestInvoker.cs:line 227\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Xunit.Sdk.ExecutionTimer.<AggregateAsync>d__4.MoveNext() in C:\\BuildAgent\\work\\cb37e9acf085d108\\src\\xunit.execution\\Sdk\\Frameworks\\ExecutionTimer.cs:line 48\n--- End of stack trace from previous location where exception was thrown ---\n   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)\n   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)\n   at Xunit.Sdk.ExceptionAggregator.<RunAsync>d__9.MoveNext() in C:\\BuildAgent\\work\\cb37e9acf085d108\\src\\xunit.core\\Sdk\\ExceptionAggregator.cs:line 90\nResult Message: Could not load type 'System.IdentityModel.Tokens.Serializer' from assembly 'System.IdentityModel.Tokens.Jwt, Version=5.0.0.112, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.\n. ",
    "ircnelson": "@sebitsi In my case, I removed the \"LoginService\" dependency and I put the IUserService calling the \"AuthenticateLocalAsync\" method passing an instance of \"LocalAuthenticationContext\" with username and password...\nafter passing in the \"AuthenticateLocalAsync\" method, you can see the property \"AuthenticateResult\" in the same instance of \"LocalAuthenticationContext\"\nexample:\n```\n var localAuthContext = new LocalAuthenticationContext() \n {\n    UserName = model.Username,\n    Password = model.Password\n };\n// use the instance of IUserService injected\nawait _userService.AuthenticateLocalAsync(localAuthContext);\nif (string.IsNullOrWhiteSpace(localAuthContext.AuthenticateResult.ErrorMessage))\n{\n   // everthing ok...\n}\n```\nI used my class like this\n. @oferAshkenazy put this in your Startup.cs and try again: \nbuilder.Services.AddTransient<IResourceOwnerPasswordValidator, DefaultResouceOwnerPasswordValidator>();\n. Look how this works behind the scenes when u use InMemory implementation, for example...\nhttps://github.com/IdentityServer/IdentityServer4/blob/dev/src/IdentityServer4/Configuration/IdentityServerBuilderExtensions.cs#L14\n. ",
    "sebitsi": "Hi Nelson.\nThanks for your suggestion.\nI made exactly same solution.\nBut. Point of my question is: \nWhat code should be part of IdentityServer implementation  and what is my code.\nFor example: Should be LoginController implemented as part of IdS4 or in my custom LoginController ?\nWith DI we can inject in custom controller everything we need and implement anything we need.\nBut is this right approach ?\nI think logging process should be isolated in Ids4 with (for example) extension points for adding\ncustom claims or something else.\nOr..\nIn IdS4 code there could be some bulletproff default controller we can inherit.\nOr...\nI missed something.. :)\nEdvin\n. @leastprivilege \nYes, I know that. \nYour work is awsome.\nFor now - it is enought for me that you are aare of that problem and you have plans to solve it.\nThanks for advance.\nEdvin\n. ",
    "iberodev": "Thank you.\nIt'd be great if you could include some tips on good practices in client side when retrieving/storing tokens.\nAs far as I understood it's better to treat the access token (JWT) as a password, hence if stored in client side better to do so in a cookie rather than in local storage.\nBut is it a better practice to retrieve silently the token from the IdSvrHost? I guess that would require storing username/password for the browser session in client-side and/or allowing the user to remember it in case the user closes the browser.\nIn that case would a refresh-token be necessary at all? If sending username/password silently before the current token expires (assuming the token is stored in an app variable, not persisted) then there wouldn't be any need to refresh the token, would it?\nThese are the kind of questions I have at the moment as I'm quite new with OpenId connect. I'd appreciate any link or advice on what's best. Thank you!\n. I'm also having this issue after following the quick start today after the RC1 has been released.\nThe steps say to create an API using the AspNet API Template and add the [Authorize] attribute to the controller and expect to get a 401 response.\nThis is what happens if I am using IIS, but if I am running the API project with Kestrel (e.g: dotnet run), the server starts listening on the configured port but when I trigger the first GET requests I am getting the 500 error with the exception\nSystem.InvalidOperationException: No authentication handler is configured to handle the scheme: Automatic\nAt this point this should not be even related to IdentityServer4 at all, since I haven't added any IdentityServer middleware, just the default Startup.cs created by the API template:\n```\n    public class Startup\n    {\n        public Startup(IHostingEnvironment env)\n        {\n            var builder = new ConfigurationBuilder()\n                .SetBasePath(env.ContentRootPath)\n                .AddJsonFile(\"appsettings.json\", optional: true, reloadOnChange: true)\n                .AddJsonFile($\"appsettings.{env.EnvironmentName}.json\", optional: true)\n                .AddEnvironmentVariables();\n            Configuration = builder.Build();\n        }\n    public IConfigurationRoot Configuration { get; }\n\n     public void ConfigureServices(IServiceCollection services)\n    {\n        services.AddMvc();\n    }\n\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n    {\n        loggerFactory.AddConsole(Configuration.GetSection(\"Logging\"));\n        loggerFactory.AddDebug();\n\n        app.UseMvc();\n    }\n}\n\n```\nI am aware this has nothing to do with IdentityServer, but since it's a step described at the quickstart guide I am now wondering why is using Kestrel any different than IIS when dealing with the [Authorize] attribute without any middleware in the pipeline at all (other than MVC)?\nIt can create confusion for beginners following the quick start like myself.\n. I have created a question at stackoverflow asking why kestrel and iis handle differently the Authorize attribute in a basic AspNet Core project generated with the default Web Api template\n. Thank you. I opened a ticket with them here at aspnet/security\n. are the acr_values accessible through the ProfileDataRequestContext ?\nI would need to check the tentant before building the claims as these would depend on what tenant is making the authorization request. My implementation of the IProfileService would be an ideal place to access this but I don't think it's avaulable there.\nYou mention this area was being reworked. in IdentityServer4 RC1 where did this end up being available in the back end?\n. I just found tenant would be available in the AuthorizationRequest by using the [IIdentityServerInteractionService ]. (https://github.com/IdentityServer/IdentityServer4/blob/dev/src/IdentityServer4/Services/IIdentityServerInteractionService.cs)\nI could inject the IIdentityServerInteractionService into my IProfileService implementation, but how do I get the returnUrl to get the AuthorizationRequest?\nWhat is that returnUrl exactly?\n. ",
    "henriqueprj": "Ok. Thank you.\n. ",
    "akamud": "Is this the sample you mentioned @brockallen?\n. ",
    "mleader1": "tried to add dependency System.Xml but the error didn't go away so I ran out of luck this time. :dart: \nVS 2015 on VM is the way to go...\nCheers\n. ",
    "dbrink": "Yes, though I'm not sure this should be handled differently in the default case.  My concern is more that there doesn't seem to be a way to reject the current IdentityServer identity during authorize.\n. Then I'm back to my original question.  Is there any way in IdSrv4 to force re-authentication based on authorize parameters or does this need to wait until some of the UserService bits are flushed out?\n. ",
    "ry8806": "yeh, that's cool\nOnce you do know how the interface might look, then I wouldn't mind getting involved and writing the AspNetIdentity \"bridge\"\n. Thanks - do we have a separate Repo for this, like we do in IdentitfyServer3 ??\n. ",
    "Cybrosys": "Is there a way to work around the limitation of just using InMemoryUser? It's possible to read all the users from a DB into memory. The only problem with that solution is how to handle when user information changes in the DB.\nEverywhere it's used it's injected as a List<InMemoryUser>, if it instead was injected as IList<InMemoryUser> then it would've been possible to create an implementation that read from an external source/DB.\n. Thank you @alzdrak !\n. @ry8806 Update1 has been released. The two interfaces you're interrested in are IProfileService and IResourceOwnerPasswordValidator.\n. I've written simple implementations of both, but they're tied to *.Identity.EntityFramework, in case someone's interested (the tie-in is because of my usage of the IdentityUser class).\nAspNetIdentity ProfileService and ResourceOwnerPasswordValidator.zip\n. ",
    "nikoszs": "@Cybrosys please see #5  and the stackoverflow example to implement IUserService. Please note that IUserService will be replaced with something similar in the next release of Identity Server 4. \n. Just know that you will probably skip any email verification in the process of doing that. It really depends on your setup, but you can implement a UserService on identityserver to register users for you. I'm not sure if its present in the current samples, but you could built it yourself. Second option have identityserver just authorize and issue tokens, and your api do the actual user registration with a Resource Owner type setup.\nSo you could potentially do this (if you have a resource owner setup):\n1.  In your register() function on the SPA do a POST /api/register which returns userId/true if successful. Your api/register function will have [AllowAnonymous] attribute (or no [Authorize] attribute. Just make sure your API is closed off with CORS.\n2. Then in same call, request token from IdentityServer with username and password used in previous step: /connect/token (You will need some UserService setup on your IdentityServer, theres an example on one of the questions in this repo). IdentityServer issues token save that in your SPA (cookies, local/session storage).\n3. Log the user into your SPA by checking if the token is valid or get user info. Use the token with headers Authentication: Bearer <token> and call the API as you wish.\nMaybe the identityserver security masters can comment on this if there are any big security flaws in my design, as I would like to know as well :)\nAnd also how to fix the security holes of course!!!\nI hope this helps.\n. Thanks for your reply, however in my case the implicit flow (redirects) would be bad user experience design and also not possible for my use case. The system is running in a trusted environment, meaning I own the Identity Server, API, and SPA, and there will be no other clients besides the ones specified here.\nIs it possible to use the resource owner flow with SPA's and also have it secure?\nIt seems I have three options:\n1. Long-lived access tokens (and remove refresh_token).\n2. Proxy in between SPA and API/IdentityServer then use cookies, however I'm not 100% how to do this.\n3. Go with implicit flow, but design the identity server pages to look the same as the SPA. This seems like the worst option, since there's a mobile app in the works that will require a different look and feel. Meaning multiple views for identity server depending on client. Not to mention, bad user experience (redirects) since the user will never know about identity server and it doesn't suite the specs of the project.\nFor 3rd party logins (google, twitter etc) its understandable to have redirects because you are integrating with another application, but it doesn't make sense jumping the user around on my application as I'm not really integrating with anything external.\nThanks for the advice.\n. ",
    "SimonTouchtech": "@Cybrosys FWIW, it is relatively simple to remove the dependency on Identity.EntityFramework by using UserManager instead of the model class directly to get its properties. This would mean e.g. replacing user.Id with await _userManager.GetUserIdAsync(user)\n. ",
    "totht91": "I think you need to prioritize this issue, because Identity Server is unuseable for many people without ASP.NET Identity support and samples. \n. Why is the RC2 release the turning point? You can actively develop with the nightly builds, it's paintful sometimes but you can. \n. understood\n. Am I right that in IdentityServer4 the UI is completely decoupled from the library, and we always need to copy-paste from the sample project?\n. netstandard1.5 is compatible with the full framework, specifically with the 4.6.2. \nhttps://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md\n. You can use the IdentityServer3 with asp.net core on the full framework, Or @brockallen, do you want to support anything else beside netstandard, in v4?\n. Can you try with 4.6.2?\n. In the new concept, you can assign grant types to the clients with the AllowedGrantTypes property.\n. Confession Bear I personally like the Async suffix.\n. ",
    "klanglie": "I have made some progress on this. It is not as abstract as IS3 IdentityManager. For instance, Reflection is more limited in .NET Core. I created my solution however so that you can switch between the default InMemoryUser implementation and EF easily. SEE: https://github.com/PivotalAnimal/BlueConcord.IdentityServer.EntityFrameworkCore\n. Let me know if I can help out. Experienced at .NET. New to Core.\n. You should remove RC2 or at least try to and upgrade to RTM. Also, one of my machines was totally hosed and I had to rebuild it for RTM. Hopefully that isn't the case for you. Best of luck!\n. I fixed a small problem in my project that was causing an empty collection to be passed into this method. However, I still think this is probably a bug. Else more checking for errant conditions.\n. Sure. I think it is safe to assume that an empty collection indicates AllClaimsRequested be set to true. It is sort of up to the Scopes / Claims provider to make certain that they have a valid configuration. Further downstream, I don't know the full ramifications. Is there anything that would impact security? On the other-hand, allowing an empty collection to be set to RequestedClaimTypes and detecting a missing sub claim from the client-side via an error also seems legit. That is how I found the problem to begin with.\n. Probably better to do now while in Beta. I just renamed all my methods, removing 'Async.'\n. Great work, guys! I added a post in the Async issue that was probably off topic. Not trying to spam. I know you all are busy. So here it is:\nIs using default collation inside a database when searching based on IS4 interfaces acceptable? There is no hint passed in from the implemented interfaces as to how to do string comparisons. Maybe this isn't a big deal, but I have been passing in StringComparison comparison = StringComparison.OrdinalIgnoreCase into other methods I have created. That allows different cultures to change how Entity Framework, for example, should test for equality. I am also not sure if it makes sense to pass in a Context object to these interfaces. AutoMapper, for instance, has re-written some of their methods to pass in a context providing more information. \n. I'll review the rfcs some more. I remember reading something about token comparisons.\n. I abstracted the methods from LoginController using interfaces. One for Cookie Handling and one for in memory / database operations. It uses IEnumerable. What I haven't figured out is the best way to implement AutoProvisionUser using AspIdentity as part of my solution. Any suggestions? IUserService\n. ",
    "uncleyo": "should I help with this one?\n. Do you think it could be possible to reuse the existing katana ws-federation implementation when targeting full framework?\n. ",
    "pvasek": "My apologies. The original code was\nendpoint = context.ApplicationServices.GetService(type) as IEndpoint;\n. ",
    "ninety7": "@ronaldkuijpers I still can't figure out how to tie IdServer custom stores to the DI system. Do you have an example of how to accomplish that?\n. Thanks!\n. ",
    "joaomello": "@ninety7 https://github.com/IdentityServer/IdentityServer4/issues/45\n. ",
    "xabikos": "The scenario I am interesting in is to host the server and the client under the same application and not have the server in a separate one. In that case I am not sure how the configuration in the server should look like. In case of Identity server 3 the code on the first comment does the trick. \nIs it a bit more clear now?\n. Yes that makes the trick. I am getting back a json response that looks like \n{\n  \"issuer\":\"http://localhost:5000\",\n  \"jwks_uri\":\"http://localhost:5000/.well-known/openid-configuration/jwks\",\n  \"authorization_endpoint\":\"http://localhost:5000/connect/authorize\",\n  \"token_endpoint\":\"http://localhost:5000/connect/token\",\n  \"userinfo_endpoint\":\"http://localhost:5000/connect/userinfo\"\n ...\n}\nSo I guess everything is in place. Thanks a lot\n. I am also having the same questions and I am interested to hear some answers. I am developing a Reactjs application and would like to fully customize the log in screens and remove the redirects if possible.\n. So I guess there is no way to implement a full Ajax login workflow even if we remove the consent part.\n. Thanks for the answer. It's more clear for me now. \n. ",
    "theDiverDK": "Hi there\nAny idea about the ETA of RC2?\nLooking forward to be able to use the Session logout feature.\n. ",
    "nielslbeck": "Looking forward to a solution on this one :-)\n. ",
    "jerry2007": "Only for information...\nI found this projet:\nTwentyTwenty.IdentityServer4.EntityFramework7\nIt's implementation of clients and scopes for IdSrv4 and work very well\nservices.AddIdentityServer(options =>\n            {\n                options.SigningCertificate = cert;\n            }).AddInMemoryUsers(new List<InMemoryUser>())\n                .ConfigureEntityFramework()\n                .RegisterOperationalStores()\n                .RegisterClientStore<Guid, ClientConfigurationContext>()\n                .RegisterScopeStore<Guid, ScopeConfigurationContext>();\n. ",
    "yelob": "I was just about to submit a question about the functionality of the EndSession endpoint. Are there any plans to accept this pull request?\n. Nevermind, I see following the link above that you have no plans to update IDS4 until rc2. Thanks.\n. ",
    "gthelp": "Just having 1 application to maintain for authentication calls at this time was ideal. All I had to do was UseIdentityServer and create claims login for it, and I was in business for my local application and was next testing my api controllers. It created a session only login, so I wanted to a cookie authentication , but can not get the AuthenticationOptions.CookieAuthenticationOptions to apply. Just seeing if I am using a wrong property.\n. pauldotknopf - Thank you for the suggestions. I will plan to revisit using identity server with our project. Looking forward to this Great product coming out of Beta.\n. ",
    "pauldotknopf": "I think using IdentityServer4 with existing authentication (ASP.NET Identity EntityFramework) should be supported.\nFor what it is worth, I managed to get this working with the default ASP.NET template with account management.\nvar builder = services.AddIdentityServer(options =>\n{\n    options.SigningCertificate = cert;\n    // important, tells IdentityServer to use authentication from ASP.NET Identity\n    options.AuthenticationOptions.PrimaryAuthenticationScheme = new IdentityOptions().Cookies.ApplicationCookie.AuthenticationScheme;\n});\nThen, use ASP.NET Identity look you would in the default template, except we need to add a custom IUserClaimsPrincipalFactory<TUser>.\nservices.AddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, UserClaimsPrincipalFactory>();\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n    .AddEntityFrameworkStores<ApplicationDbContext>()\n    .AddDefaultTokenProviders();\nThis claims provider adds some claims required by IdentityServer.\n```\npublic class UserClaimsPrincipalFactory : IUserClaimsPrincipalFactory\n{\n    private IdentityOptions _options;\npublic UserClaimsPrincipalFactory(IOptions<IdentityOptions> optionsAccessor)\n{\n    _options = optionsAccessor.Value;\n}\n\npublic Task<ClaimsPrincipal> CreateAsync(ApplicationUser user)\n{\n    var id = new ClaimsIdentity(_options.Cookies.ApplicationCookieAuthenticationScheme,\n        _options.ClaimsIdentity.UserNameClaimType,\n        _options.ClaimsIdentity.RoleClaimType);\n    id.AddClaim(new Claim(_options.ClaimsIdentity.UserIdClaimType, user.Id));\n    id.AddClaim(new Claim(_options.ClaimsIdentity.UserNameClaimType, user.UserName));\n\n    // required by IdentityServer\n    id.AddClaim(new Claim(JwtClaimTypes.Name, user.UserName));\n    id.AddClaim(new Claim(JwtClaimTypes.Subject, user.Id));\n    id.AddClaim(new Claim(JwtClaimTypes.IdentityProvider, _options.Cookies.ApplicationCookieAuthenticationScheme));\n    id.AddClaim(new Claim(JwtClaimTypes.AuthenticationTime, DateTimeOffset.UtcNow.ToEpochTime().ToString(), ClaimValueTypes.Integer));\n\n    return Task.FromResult(new ClaimsPrincipal(id));\n}\n\n}\n```\nThat is it. Of course, you will now have to write the ASP.NET Endpoints that handle the authorization, etc. You will also have to write a IProfileService that will query the ApplicationUser from EntityFramework.\n. I think using IdentityServer4 with existing authentication (ASP.NET Identity EntityFramework) should be supported.\nFor what it is worth, I managed to get this working with the default ASP.NET template with account management.\nvar builder = services.AddIdentityServer(options =>\n{\n    options.SigningCertificate = cert;\n    // important, tells IdentityServer to use authentication from ASP.NET Identity\n    options.AuthenticationOptions.PrimaryAuthenticationScheme = new IdentityOptions().Cookies.ApplicationCookie.AuthenticationScheme;\n});\nThen, use ASP.NET Identity look you would in the default template, except we need to add a custom IUserClaimsPrincipalFactory<TUser>.\nservices.AddScoped<IUserClaimsPrincipalFactory<ApplicationUser>, UserClaimsPrincipalFactory>();\nservices.AddIdentity<ApplicationUser, IdentityRole>()\n    .AddEntityFrameworkStores<ApplicationDbContext>()\n    .AddDefaultTokenProviders();\nThis claims provider adds some claims required by IdentityServer.\n```\npublic class UserClaimsPrincipalFactory : IUserClaimsPrincipalFactory\n{\n    private IdentityOptions _options;\npublic UserClaimsPrincipalFactory(IOptions<IdentityOptions> optionsAccessor)\n{\n    _options = optionsAccessor.Value;\n}\n\npublic Task<ClaimsPrincipal> CreateAsync(ApplicationUser user)\n{\n    var id = new ClaimsIdentity(_options.Cookies.ApplicationCookieAuthenticationScheme,\n        _options.ClaimsIdentity.UserNameClaimType,\n        _options.ClaimsIdentity.RoleClaimType);\n    id.AddClaim(new Claim(_options.ClaimsIdentity.UserIdClaimType, user.Id));\n    id.AddClaim(new Claim(_options.ClaimsIdentity.UserNameClaimType, user.UserName));\n\n    // required by IdentityServer\n    id.AddClaim(new Claim(JwtClaimTypes.Name, user.UserName));\n    id.AddClaim(new Claim(JwtClaimTypes.Subject, user.Id));\n    id.AddClaim(new Claim(JwtClaimTypes.IdentityProvider, _options.Cookies.ApplicationCookieAuthenticationScheme));\n    id.AddClaim(new Claim(JwtClaimTypes.AuthenticationTime, DateTimeOffset.UtcNow.ToEpochTime().ToString(), ClaimValueTypes.Integer));\n\n    return Task.FromResult(new ClaimsPrincipal(id));\n}\n\n}\n```\nThat is it. Of course, you will now have to write the ASP.NET Endpoints that handle the authorization, etc. You will also have to write a IProfileService that will query the ApplicationUser from EntityFramework.\n. > why? that's done by identityserver\nTrue, but the default asp.net project template has a lot more functionality, such as two-factor authentication, external sign in, locking out users, auto-locking account after X number of attempts, etc.\nedit: If anyone is interested, have a react-aspnet-boilerplate that uses ASP.NET Identity for authorization/account management. I am on another branch right now implementing react endpoints for IdentityServer. Also, we will be storing consents and and allowing developers to manage client.\n. > why? that's done by identityserver\nTrue, but the default asp.net project template has a lot more functionality, such as two-factor authentication, external sign in, locking out users, auto-locking account after X number of attempts, etc.\nedit: If anyone is interested, have a react-aspnet-boilerplate that uses ASP.NET Identity for authorization/account management. I am on another branch right now implementing react endpoints for IdentityServer. Also, we will be storing consents and and allowing developers to manage client.\n. ",
    "strung250": "Here are the logs:\n3/7/2016 11:03:19 AM Info User profile is available. Using 'C:\\Users\\xxxxx\\AppData\\Local\\ASP.NET\\DataProtection-Keys' as key repository and Windows DPAPI to encrypt keys at rest.\n3/7/2016 11:03:19 AM Debug Hosting starting\n3/7/2016 11:03:19 AM Debug Hosting started\n3/7/2016 11:03:19 AM Info Request starting HTTP/1.1 DEBUG http://localhost:44388/ text/html \n3/7/2016 11:03:19 AM Debug DEBUG requests are not supported\n3/7/2016 11:03:20 AM Debug Request successfully matched the route with name '' and template ''.\n3/7/2016 11:03:20 AM Debug Executing action Plan.IdentityServer.UI.Home.HomeController.Index\n3/7/2016 11:03:20 AM Info Executing action method Plan.IdentityServer.UI.Home.HomeController.Index with arguments () - ModelState is Valid'\n3/7/2016 11:03:20 AM Debug Executed action method Plan.IdentityServer.UI.Home.HomeController.Index, returned result Microsoft.AspNet.Mvc.ViewResult.'\n3/7/2016 11:03:21 AM Debug The view 'Index' was found.\n3/7/2016 11:03:21 AM Info Executing ViewResult, running view at path /UI/Home/Views/Index.cshtml.\n3/7/2016 11:03:21 AM Info Executed action Plan.IdentityServer.UI.Home.HomeController.Index in 0.1514ms\n3/7/2016 11:03:21 AM Info Request finished in 0.1965ms 200 text/html; charset=utf-8\n3/7/2016 11:03:31 AM Info Request starting HTTP/1.1 GET https://localhost:44388/.well-known/openid-configuration\n3/7/2016 11:03:31 AM Debug Start discovery request\n3/7/2016 11:03:31 AM Info Request finished in 0.0125ms 200 application/json\n3/7/2016 11:03:31 AM Info Request starting HTTP/1.1 GET https://localhost:44388/.well-known/openid-configuration/jwks\n3/7/2016 11:03:31 AM Debug Start key discovery request\n3/7/2016 11:03:31 AM Info Request finished in 0.0047ms 200 application/json\n3/7/2016 11:03:31 AM Info Request starting HTTP/1.1 GET https://localhost:44388/connect/authorize?client_id=hybridClient&redirect_uri=http%3A%2F%2Flocalhost%3A4679%2Fsignin-oidc&response_type=code%20id_token%20token&scope=openid%20profile%20offline_access%20profile%20email%20roles%20openid%20api1&response_mode=form_post&nonce=635929706118258386.NDliNWVmY2UtYTc5Ny00ZTJiLTkyNDQtYjQyNTMwYzRhZDMxN2RkMDQzMzQtM2FiMy00ZWU1LWFlMTgtY2M1NTU0ODE3ZmU5&state=CfDJ8LRsqLZ5qrtBuiVe_n7JGZQjwAWxWyvWKp8R9dPJWbqDsW387ICAVvuiDSJlXMKrjr1zHR-ito4-PBFinKWssIp928g0O3oS1V5acdm882hRs7mcf5ZwBqzrH7TTgrmWRk-ELFgqzyG8IiYIpQ3Sg3QJI6NBWflZtBYDIJ8gkG6_t7cwKTxEJtRSGO0Uti4euSXTdrzQFRaLYs7j76fYMU8ndPwdPwEFcRqfDzj24LpetLvGXyS04WlxL5RpP1AszCoqssXQ9cas9xYkoRRKG5eaLhOquw4-QFWPC5graOFYhfK4iTT0XHBtZdoFEUee8iGruUyhDDk9O7-riA8Anos3oZMno5SHrQzwLg2BtPi_\n3/7/2016 11:03:31 AM Info Start Authorize Request\n3/7/2016 11:03:31 AM Debug No user present in authorize request\n3/7/2016 11:03:31 AM Info Start authorize request protocol validation\n3/7/2016 11:03:31 AM Info Authorize request validation success\n {\n  \"ClientId\": \"hybridClient\",\n  \"ClientName\": \"Hybrid Client\",\n  \"RedirectUri\": \"http://localhost:4679/signin-oidc\",\n  \"AllowedRedirectUris\": [\n    \"http://localhost:4679/signin-oidc\"\n  ],\n  \"SubjectId\": \"unknown\",\n  \"ResponseType\": \"code id_token token\",\n  \"ResponseMode\": \"form_post\",\n  \"Flow\": \"Hybrid\",\n  \"RequestedScopes\": \"openid profile offline_access email roles api1\",\n  \"State\": \"CfDJ8LRsqLZ5qrtBuiVe_n7JGZQjwAWxWyvWKp8R9dPJWbqDsW387ICAVvuiDSJlXMKrjr1zHR-ito4-PBFinKWssIp928g0O3oS1V5acdm882hRs7mcf5ZwBqzrH7TTgrmWRk-ELFgqzyG8IiYIpQ3Sg3QJI6NBWflZtBYDIJ8gkG6_t7cwKTxEJtRSGO0Uti4euSXTdrzQFRaLYs7j76fYMU8ndPwdPwEFcRqfDzj24LpetLvGXyS04WlxL5RpP1AszCoqssXQ9cas9xYkoRRKG5eaLhOquw4-QFWPC5graOFYhfK4iTT0XHBtZdoFEUee8iGruUyhDDk9O7-riA8Anos3oZMno5SHrQzwLg2BtPi_\",\n  \"Nonce\": \"635929706118258386.NDliNWVmY2UtYTc5Ny00ZTJiLTkyNDQtYjQyNTMwYzRhZDMxN2RkMDQzMzQtM2FiMy00ZWU1LWFlMTgtY2M1NTU0ODE3ZmU5\",\n  \"Raw\": {\n    \"client_id\": \"hybridClient\",\n    \"redirect_uri\": \"http://localhost:4679/signin-oidc\",\n    \"response_type\": \"code id_token token\",\n    \"scope\": \"openid profile offline_access profile email roles openid api1\",\n    \"response_mode\": \"form_post\",\n    \"nonce\": \"635929706118258386.NDliNWVmY2UtYTc5Ny00ZTJiLTkyNDQtYjQyNTMwYzRhZDMxN2RkMDQzMzQtM2FiMy00ZWU1LWFlMTgtY2M1NTU0ODE3ZmU5\",\n    \"state\": \"CfDJ8LRsqLZ5qrtBuiVe_n7JGZQjwAWxWyvWKp8R9dPJWbqDsW387ICAVvuiDSJlXMKrjr1zHR-ito4-PBFinKWssIp928g0O3oS1V5acdm882hRs7mcf5ZwBqzrH7TTgrmWRk-ELFgqzyG8IiYIpQ3Sg3QJI6NBWflZtBYDIJ8gkG6_t7cwKTxEJtRSGO0Uti4euSXTdrzQFRaLYs7j76fYMU8ndPwdPwEFcRqfDzj24LpetLvGXyS04WlxL5RpP1AszCoqssXQ9cas9xYkoRRKG5eaLhOquw4-QFWPC5graOFYhfK4iTT0XHBtZdoFEUee8iGruUyhDDk9O7-riA8Anos3oZMno5SHrQzwLg2BtPi_\"\n  }\n}\n3/7/2016 11:03:31 AM Info User is not authenticated.\n3/7/2016 11:03:31 AM Info Showing login page\n3/7/2016 11:03:32 AM Debug Reading data from file 'C:\\Users\\xxxxx\\AppData\\Local\\ASP.NET\\DataProtection-Keys\\key-b6a86cb4-aa79-41bb-ba25-5efe7ec91994.xml'.\n3/7/2016 11:03:32 AM Debug Found key {b6a86cb4-aa79-41bb-ba25-5efe7ec91994}.\n3/7/2016 11:03:32 AM Debug Considering key {b6a86cb4-aa79-41bb-ba25-5efe7ec91994} with expiration date 2016-05-17 21:35:54Z as default key.\n3/7/2016 11:03:32 AM Debug Decrypting secret element using Windows DPAPI.\n3/7/2016 11:03:32 AM Debug Opening CNG algorithm 'AES' from provider '' with chaining mode CBC.\n3/7/2016 11:03:32 AM Debug Opening CNG algorithm 'SHA256' from provider '' with HMAC.\n3/7/2016 11:03:32 AM Debug Using key {b6a86cb4-aa79-41bb-ba25-5efe7ec91994} as the default key.\n3/7/2016 11:03:32 AM Info End Authorize Request. Result type: IdentityServer4.Core.Endpoints.Results.LoginPageResult\n3/7/2016 11:03:32 AM Info Request finished in 0.014ms 302 \n3/7/2016 11:03:32 AM Info Request starting HTTP/1.1 GET https://localhost:44388/ui/login?id=950e91369dda513d52f5e53dfa76dbd0\n3/7/2016 11:03:32 AM Debug The request path /ui/login does not match a supported file type\n3/7/2016 11:03:32 AM Debug Request successfully matched the route with name 'Login' and template 'ui/login'.\n3/7/2016 11:03:32 AM Debug Action 'Plan.IdentityServer.UI.Login.LoginController.Index' with id '66807072-d7ef-45aa-884e-11882f73f176' did not match the constraint 'Microsoft.AspNet.Mvc.ActionConstraints.HttpMethodConstraint'\n3/7/2016 11:03:32 AM Debug Executing action Plan.IdentityServer.UI.Login.LoginController.Index\n3/7/2016 11:03:32 AM Info Executing action method Plan.IdentityServer.UI.Login.LoginController.Index with arguments (950e91369dda513d52f5e53dfa76dbd0) - ModelState is Valid'\n3/7/2016 11:03:32 AM Debug Executed action method Plan.IdentityServer.UI.Login.LoginController.Index, returned result Microsoft.AspNet.Mvc.ViewResult.'\n3/7/2016 11:03:32 AM Debug The view 'Index' was found.\n3/7/2016 11:03:32 AM Info Executing ViewResult, running view at path /UI/Login/Views/Index.cshtml.\n3/7/2016 11:03:32 AM Info Executed action Plan.IdentityServer.UI.Login.LoginController.Index in 0.0327ms\n3/7/2016 11:03:32 AM Info Request finished in 0.0359ms 200 text/html; charset=utf-8\n3/7/2016 11:03:35 AM Info Request starting HTTP/1.1 POST https://localhost:44388/ui/login?id=950e91369dda513d52f5e53dfa76dbd0 application/x-www-form-urlencoded 270\n3/7/2016 11:03:35 AM Debug POST requests are not supported\n3/7/2016 11:03:35 AM Debug Request successfully matched the route with name 'Login' and template 'ui/login'.\n3/7/2016 11:03:35 AM Debug Action 'Plan.IdentityServer.UI.Login.LoginController.Index' with id '9371dd17-e30b-413a-a350-56a537528bb4' did not match the constraint 'Microsoft.AspNet.Mvc.ActionConstraints.HttpMethodConstraint'\n3/7/2016 11:03:35 AM Debug Executing action Plan.IdentityServer.UI.Login.LoginController.Index\n3/7/2016 11:03:35 AM Info Executing action method Plan.IdentityServer.UI.Login.LoginController.Index with arguments (Plan.IdentityServer.UI.Login.LoginInputModel) - ModelState is Valid'\n3/7/2016 11:03:35 AM Info AuthenticationScheme: idsrv signed in.\n3/7/2016 11:03:35 AM Debug Executed action method Plan.IdentityServer.UI.Login.LoginController.Index, returned result Plan.IdentityServer.UI.Login.SignInResult.'\n3/7/2016 11:03:35 AM Info Executed action Plan.IdentityServer.UI.Login.LoginController.Index in 0.0093ms\n3/7/2016 11:03:35 AM Info Request finished in 0.0093ms 302 \n3/7/2016 11:03:35 AM Info Request starting HTTP/1.1 GET https://localhost:44388/connect/authorize/login?id=fcab3c0b2aab1798e116041914072cc0\n3/7/2016 11:03:35 AM Info HttContext.User merged via AutomaticAuthentication from authenticationScheme: idsrv.\n3/7/2016 11:03:35 AM Info Start Authorize Request (after login)\n3/7/2016 11:03:35 AM Info AuthenticationScheme: idsrv was successfully authenticated.\n3/7/2016 11:03:35 AM Debug User in authorize request: name:Bob Smith, sub:88421113\n3/7/2016 11:03:35 AM Info Start authorize request protocol validation\n3/7/2016 11:03:35 AM Info Authorize request validation success\n {\n  \"ClientId\": \"hybridClient\",\n  \"ClientName\": \"Hybrid Client\",\n  \"RedirectUri\": \"http://localhost:4679/signin-oidc\",\n  \"AllowedRedirectUris\": [\n    \"http://localhost:4679/signin-oidc\"\n  ],\n  \"SubjectId\": \"88421113\",\n  \"ResponseType\": \"code id_token token\",\n  \"ResponseMode\": \"form_post\",\n  \"Flow\": \"Hybrid\",\n  \"RequestedScopes\": \"openid profile offline_access email roles api1\",\n  \"State\": \"CfDJ8LRsqLZ5qrtBuiVe_n7JGZQjwAWxWyvWKp8R9dPJWbqDsW387ICAVvuiDSJlXMKrjr1zHR-ito4-PBFinKWssIp928g0O3oS1V5acdm882hRs7mcf5ZwBqzrH7TTgrmWRk-ELFgqzyG8IiYIpQ3Sg3QJI6NBWflZtBYDIJ8gkG6_t7cwKTxEJtRSGO0Uti4euSXTdrzQFRaLYs7j76fYMU8ndPwdPwEFcRqfDzj24LpetLvGXyS04WlxL5RpP1AszCoqssXQ9cas9xYkoRRKG5eaLhOquw4-QFWPC5graOFYhfK4iTT0XHBtZdoFEUee8iGruUyhDDk9O7-riA8Anos3oZMno5SHrQzwLg2BtPi_\",\n  \"Nonce\": \"635929706118258386.NDliNWVmY2UtYTc5Ny00ZTJiLTkyNDQtYjQyNTMwYzRhZDMxN2RkMDQzMzQtM2FiMy00ZWU1LWFlMTgtY2M1NTU0ODE3ZmU5\",\n  \"SessionId\": \"2db8d4373bdef4f05b976edff3f29d00\",\n  \"Raw\": {\n    \"client_id\": \"hybridClient\",\n    \"redirect_uri\": \"http://localhost:4679/signin-oidc\",\n    \"response_type\": \"code id_token token\",\n    \"scope\": \"openid profile offline_access profile email roles openid api1\",\n    \"response_mode\": \"form_post\",\n    \"nonce\": \"635929706118258386.NDliNWVmY2UtYTc5Ny00ZTJiLTkyNDQtYjQyNTMwYzRhZDMxN2RkMDQzMzQtM2FiMy00ZWU1LWFlMTgtY2M1NTU0ODE3ZmU5\",\n    \"state\": \"CfDJ8LRsqLZ5qrtBuiVe_n7JGZQjwAWxWyvWKp8R9dPJWbqDsW387ICAVvuiDSJlXMKrjr1zHR-ito4-PBFinKWssIp928g0O3oS1V5acdm882hRs7mcf5ZwBqzrH7TTgrmWRk-ELFgqzyG8IiYIpQ3Sg3QJI6NBWflZtBYDIJ8gkG6_t7cwKTxEJtRSGO0Uti4euSXTdrzQFRaLYs7j76fYMU8ndPwdPwEFcRqfDzj24LpetLvGXyS04WlxL5RpP1AszCoqssXQ9cas9xYkoRRKG5eaLhOquw4-QFWPC5graOFYhfK4iTT0XHBtZdoFEUee8iGruUyhDDk9O7-riA8Anos3oZMno5SHrQzwLg2BtPi_\"\n  }\n}\n3/7/2016 11:03:35 AM Info Issuing successful authorization response\n3/7/2016 11:03:35 AM Info Creating Hybrid Flow response.\n3/7/2016 11:03:35 AM Info {\n  \"Category\": \"TokenService\",\n  \"Name\": \"Authorization code issued\",\n  \"EventType\": \"Information\",\n  \"Id\": 2010\n}\n3/7/2016 11:03:35 AM Info Creating Implicit Flow response.\n3/7/2016 11:03:35 AM Debug Creating access token\n3/7/2016 11:03:35 AM Debug Creating JWT access token\n3/7/2016 11:03:35 AM Info {\n  \"Category\": \"TokenService\",\n  \"Name\": \"Access token issued\",\n  \"EventType\": \"Information\",\n  \"Id\": 2000\n}\n3/7/2016 11:03:35 AM Debug Creating identity token\n3/7/2016 11:03:35 AM Info Getting claims for identity token for subject: 88421113\n3/7/2016 11:03:35 AM Debug Creating JWT identity token\n3/7/2016 11:03:35 AM Info {\n  \"Category\": \"TokenService\",\n  \"Name\": \"Identity token issued\",\n  \"EventType\": \"Information\",\n  \"Id\": 2001\n}\n3/7/2016 11:03:35 AM Info {\n  \"Category\": \"Endpoints\",\n  \"Name\": \"Endpoint success\",\n  \"EventType\": \"Success\",\n  \"Id\": 3000,\n  \"Details\": {\n    \"EndpointName\": \"authorize\"\n  }\n}\n3/7/2016 11:03:35 AM Info End Authorize Request. Result type: IdentityServer4.Core.Endpoints.Results.AuthorizeFormPostResult\n3/7/2016 11:03:35 AM Info Request finished in 0.0187ms 200 text/html; charset=UTF-8\n. ",
    "Sn3b": "aaaaaaaaah good to know ;)\nThanks!\n. I thought UserService was gone in version 4?\n. Ah that too ;)\nOk I'll wait :D\n. ",
    "primalfear": "Hi guys, i see this issue is now closed.\nis there per-chance a sample on how to implement this. \nThanks :)\n. ",
    "oferAshkenazy": "I have done a search for a replacement class but no avail..\nHints please ? \n. thanks it helped a lot!!!\n. My problem seems to be adding IdentityServer4 from nuget to work with my assembles (net 4.6.1)\nI need Identity Server 4 version project for .Net Framework and not .Net core ?\n. Thanks it worked!!!\n. ",
    "npongracic": "Then i have a problem or i'm not doing something right.\nI'll post more details later.\n. Here are the details:\nI have an app (app1) that is also the identity server host. The config is this:\nClients.cs\n```\npublic static IEnumerable Get()\n        {\n            return new[]\n            {\n                new Client\n                {\n                    Enabled = true,\n                    ClientName = \"App 1\",\n                    ClientId = \"App1\",\n                    Flow = Flows.Implicit,                   \n                RedirectUris = new List<string>\n                {\n                    \"http://localhost:54368/signin-oidc\"\n                },\n                AllowAccessToAllScopes = true\n            },\n            new Client\n            {\n                Enabled = true,\n                ClientName = \"App 2\",\n                ClientId = \"App2\",\n                Flow = Flows.Implicit,\n\n                RedirectUris = new List<string>\n                {\n                    \"http://localhost:53000/signin-oidc\"\n                },\n                 AllowAccessToAllScopes = true\n\n            }\n        };\n    }\n\n```\nClaims when logging in:\n```\nvar claims = new Claim[]\n                        {\n                            new Claim(JwtClaimTypes.Subject, user.Id.ToString()),\n                            new Claim(JwtClaimTypes.IdentityProvider, \"idsvr\"),\n                            new Claim(JwtClaimTypes.AuthenticationTime, DateTime.UtcNow.ToEpochTime().ToString()),\n                            new Claim(JwtClaimTypes.Name, user.Displayname),\n                            new Claim(\"id\", user.Id.ToString()),\n                            new Claim(\"username\", user.Username),\n                            new Claim(\"email\", user.Email),\n                            new Claim(\"tenant_id\", user.TenantId.HasValue ? user.TenantId.ToString() : string.Empty),\n                            new Claim(\"value_1\", user.value_1.ToString()),\n                            new Claim(\"value_2\",user.value_2.ToString())\n                        };\n                    var ci = new ClaimsIdentity(claims, \"password\", JwtClaimTypes.Name, JwtClaimTypes.Role);\n                    var cp = new ClaimsPrincipal(ci);\n\n                    await HttpContext.Authentication.SignInAsync(IdentityServer4.Core.Constants.PrimaryAuthenticationType, cp);\n\n                    if (model.SignInId != null)\n                    {\n                        return new SignInResult(model.SignInId);\n                    }\n\n                    return Redirect(\"~/\");\n\n```\nStartup.cs\n```\napp.UseCookieAuthentication(options =>\n            {\n                options.AuthenticationScheme = \"cookies\";\n                options.AutomaticAuthenticate = true;\n            });\n        JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();\n        app.UseOpenIdConnectAuthentication(options =>\n        {\n            options.AuthenticationScheme = \"oidc\";\n            options.SignInScheme = \"cookies\";\n            options.AutomaticChallenge = true;\n\n            options.Authority = \"http://localhost:54368/\";\n            options.RequireHttpsMetadata = false;\n\n            options.ClientId = \"App1\";\n            options.ResponseType = \"id_token token\";\n\n            options.TokenValidationParameters.NameClaimType = \"name\";\n            options.TokenValidationParameters.RoleClaimType = \"role\";\n        });\n\n```\nThe other app (App2) is a MVC client with the only config in startup.cs as follows:\n```\napp.UseCookieAuthentication(options =>\n            {\n                options.AuthenticationScheme = \"cookies\";\n                options.AutomaticAuthenticate = true;\n            });\n        JwtSecurityTokenHandler.DefaultInboundClaimTypeMap.Clear();\n\n        app.UseOpenIdConnectAuthentication(options =>\n        {\n            options.AuthenticationScheme = \"oidc\";\n            options.SignInScheme = \"cookies\";\n            options.AutomaticChallenge = true;\n\n            options.Authority = \"http://localhost:54368/\";\n            options.RequireHttpsMetadata = false;\n\n            options.ClientId = \"App2\";\n            options.ResponseType = \"id_token token\";\n\n            options.TokenValidationParameters.NameClaimType = \"name\";\n            options.TokenValidationParameters.RoleClaimType = \"role\";\n        });\n\n```\nWhen the other app (app2) tries to connect to the first one (host) i get this error:\nHTTP Error 404.15 - Not Found\nBecause of this url:\nhttp://localhost:53000/?client_id=App2&redirect_uri=http%3A%2F%2Flocalhost%3A53000%2Fsignin-oidc&response_type=id_token%20token&scope=openid%20profile&response_mode=form_post&nonce=635932432741911136.NmQ1YmZjYmEtNzA5OS00NDUxLTlmZTQtM2QwMGY1YmM0YWY4Yjk0MjAyYWYtZWZkMy00ZDEyLWJkODMtZjZkMTQ3Y2ZhZGRj&state=CfDJ8B2egGQRAM9LolZKpOmaYb8x5aLa8jqsxTgV1bzN61snI37jyyY8J9TfleFIOteplVlh6J3u8ZpeqArHN-4hYXblDAus_aOiTgPxJiTzlqwvfJaznvUBNRFihjM_iuYtHiIZy_AV1_tFs6Qaoep8K0cx-dQqDrHjc-JWeR9gISeRV9ThHr8AXXJXUQIZXy7onFiTfRSW5fNN6Jn84C1ZNI3FR8JWsOjXzECQ7izlSClmucanNcpgpfzbx_ZM1M65Hs6NCe114GcfDCfccx8JCxhc8UZIewYB7FzRykrBUXWyJJDC1lVGShH9Gwg1_8bPpfavKQ4jno6TdGxVdtUzRZcIqS3bI3bTr1_3FuGfbehEQcSqCj0LX-0RSthFi6XT1qlKxaY1oE4x7sk2bp7Y5Wi5yrbmjahXOehDwjusGNd8mX-jNtunw0_5cxgJjJ7KLf-p81FjQaMOWDDKFvWeUpArkZ_y58UzW-SN5yh5tDZLr1xUXYvsdYmrd7HUfCGhS5i-dmLerT_TuKVSZmw411xdia3NXeyPeFIIJ-FaGXwkR8kHvb_jV8HZGIm3mA_IInzRenmxjtChLKMl2gV0rG8931MHimHsAUGZXfKFXAjPY2cBr34g_2-3Uju-G6IAFM5dMMBFfC_9N4bvmHIMt5hC3-IzIqT0-3gR0ntSQaLeyygMN3PbHYaJYOWfc25haATQdkpUUYroGayQgEA1eh2-4_99MthlDTimj1Hsf5ECrOtoFNPYl7pP9_DjbeoV9J-MKM_BHE4kuvU09DbeALTtIy5fBdhCbx3zUleQ6XGrI0LQFl8rF2VjWeXmtBTwBaqI7NfZnwwMnW8tgtxelvV6xqzYjA1E8mAmSkvTa637xfGvBuUxdR46M3YrMEkQmppzuYwRgPwCOr3RYPNj-6IXF8bbqnLMnEzBMP-mYMfVXwVj7ctZnK6rguJAHTsEO52w125BlGiuxcl6eQMx_kg3zPlyb-BckulJfKyNd_WkkqhZc-JiprmoMqt5tLWqnbgLDjWy6sXr6sWrx4SeVlQu4ep1p3FsxhXYfYLsiKl49bMFq9elGj8s5WkL6mm7Gu8vEWgfwdyuPqECC9Ek9j40NsGKLXv_gLpW7AA1yt3taJkeqcvw5-Z3pB5ZQNWCS3iBdckh-MXVzdhcmv3HGr58CxmdbXFHJKZ7hWuku7P_iv6ld9j8Q9_yzYG2u6xQplUwVYbTgcEvW-uLafQYfjzK9ZFLKmBEB_PQZrmHxTZZsZAGrQRpNwkPbxLo8av65ZTPH4rN7FDep5CCs3hvPuUXZ7O62pdnYmCjDmm-I1BXzzovOdTQrJXTJVahMgJibj9_lhYSCxN0_VMEqmbLfyPkGqRO9uTA5EENWfQyjXAQRjbFcr0wVbq2OxDZO1hicvNg1t8QjtfGn5zjZ1SojtdLoQ5raLmrYrYVLpPTPVuvyN8nJGFJwqsS-W1enqzfUZbt69APROwpxwI8MAnD6YIaUSiec6-PsNEeIF7RdVqDor468_520LJRAgO_FamU4js8A1x9f6eZfUaAF8M_Ket9rz0JFxLrSA2UtGHxU58wglVi6LI1aoZuupE-r9Qd87Gt_GyNl8heFI7LI8keEg9OY6Dyzvzug-XR3yxAcakzO8rqPc2f1RehwTTCy3CZLHvCADeoANxglb7r6YZv2VvQ5JZV_fUmy80QRnKrz_OIst-QZr2fH9geYwIDeTA7sP19xC37r8VWJEybLBWR1si91uS8oBmP8Cb8ZgjnrKJ7Gyjka0iMh1sPLdcgsUIHN1ojXfPU6xXDCDGZ4WhdOgEI1Is9MuoaWeOmZ6OxD3FhPwdrVcn5ZgN0kNERslwuAsvVzG7nE5YgMaLgs92muJ2I6e9ln9A26IS9qDuGQdY9aI4sV6ssGtWbfMzONSHwG4l_AbaCX6S7D3vPavV11kDLCcOjDOPjFED5DHvrc9IMcfaP-TUoPgF0A5PZxXwntKm47KNhvzzu4Op4q7YtqkFe2s5UFjMDMqWF9dRf-UjIMfFOqpc55I_eegz8IVdAbU9CevohlZ8U9l08JnjHVXpeCvpbUt7IQcIyiWVPT4GMlJ_E2EtcrZjVFGcXohRTq_sy7hgzoBYIDK-SKsFK6z6ADxjlfV-mSKEVuEfQaDqSSDDxhvm1-f7wLwJ-OaGUKV8U9_2AsPzguBIW8DbGpT3wZBaDM9fPU9OGmh5D4nBuEYaDeKe3v0m9CARVoUG7brrKmT9sKwynsrR2x68OmiQOFflg9xSEIykYmQo96uH9afcXPEuQ4rNAMPyMzHd_wjFY28KMM3W-MVprj7GYG8u0A3bXX1YDu_Q_IHfuETV6nPCMg0iVehP00pHPzpIGX5qKy51Z3690FS7FkHmjJwlbU3TBCWQ_1RajO0dMN9Ib\nSometimes the first application (host) gets an 400 Bad request  - Request too long error and i have to clear my cookies and it's ok... for a while.\nI've tried doing it as in the samples, perhaps i missed something.\n. Hi,\nI've tried that (I set the AccessTokenType to reference in Clients.cs App1 (that acts as idsvrhost), i haven't set anything in the app2 because i'm following the Mvc implicit samples in IdentityServer4-samples. \nI see there is an option in UseOpenIdConnectAuthentication to set AuthenticationMethod to FormPost:\noptions.AuthenticationMethod = Microsoft.AspNet.Authentication.OpenIdConnect.OpenIdConnectRedirectBehavior.FormPost;\nBut that just redirects me to /connect/authorize route, i dont have anything there (don't know what it's supposed to be there).\nPerhaps there is some other way to make this happen?\nAll i need is to sign in in one application and share the auth in other applications so i don't have to login in every other app.\n. If I use post AuthenticationMethod in the App2, i get Http 400 - Request too long. This is an example of Cookie entry in Http headers:\n__atuvc=1%7C43%2C0%7C44%2C0%7C45%2C4%7C46%2C3%7C47; wptouch-pro-view=desktop; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-eGmajt0XjIwKLB64rEG2bmyddV8UCoAf3bzrcdqRiqrbKAOuJBKLUe1bRzj9wnlqpcn6TZwoOppH-i8NhvtVEfMWQ8hVKPTFLtp5LxG4LoFw-jT3uvD7NwxGcHr7zETJ4buRPxpR6SjlpG02tSS1b9DKQw0n8-zU6xgJ_2c5VSrSvo-DJwf_kFbE1SQOe0QKvHGjrgz2BOAI0K0W4MsU8bYQSn2H-XR9Udsli8PCPvmh3j5Gq7kwsxm9jk375BqE=N; .AspNet.OpenIdConnect.State.53F_ThjHgSew7ZbUYIu4O5uDrZuxaMNqcZft7PUnA9U=N; idsvr.SignInRequest.8d3a200923c2d7665b427f1cc7f46db5=CfDJ8B2egGQRAM9LolZKpOmaYb8tz7U0Gl4kOcmzz0IvVcU-tVEZJrHEJhN8BzlKbtGsCBI-WvVrIAJygvaGchGNGc_b5CUL7KrQfgnozaWfNew8Da0V3vocYVQ66vApYZG3yjbB1AMvQaO8CJ13UPwrDxJAY0pjEc3V1P9bKePaSM-U1CtZBnrcFQvGYQXUo4p7CslhSfp7KDKAuBJLh6OCWWzzBLCxlYcWkVf8IoG4pRFWjJv8GLDJbCok8yFyWlAEL3lMGhpkdFNdBHyxJP3DAriQZ0tSTMQJjaPuh_tGpqtpwSj7biLVG7QU8F6RNAeAXqHK9jA3HYae8Q90bsW60jW62f7H1Us2Op7shunsVndahcaA_ul6A4iaNmGvy-ryhzQKKwYkr0BzPEYhmWCHG4rllyHa3jFhV5zepKgoy4Yy6Ua2j0dDZ4M2XjcLrIsHJXcrxjG52XOenZVhkxl7xnSR-UnRNU8MiWrq0Q5Odh-rC_QRtN3xI5-ZMLnyVcrVSM_B_6P5CSRG8RENBqidmroPPnOraSqsHkaUyVyHNHdTz97F3PfhuaQjjNfnZlsap0-Q7G-mIDvonQ_mO6A1YmhA5igg-kNMNUL458CSgu_oQW6oEFcZ_Jrk9KdvynTirNFSfPx-pIbO7X0aM4uDwplMyt67lPbu4FJu3c-pzXFj_kRERlDEZT0ifT4McYoOaTkH2mpKPHYQVbqVOKCexldOsw0yuUY9UfgZ-n4IDKgWZd-wJzC9PnYTs3H0JLh9HQyUqJSOZDZDaMeA-cFCZrXf7-qquc_m_sgck6So4Pu5QnF0mGaWmn0UeqnhzK3VhbxXXBgnOQiYfXgkSXweXPItXghK0LjOoAHnPt6YjJmiBiwhpNqnzY5tIXfHUIR8HNslNRo0o22xdXEzOR1Wvy1Evoxh1T0dZVK8bUpgkTTqpfc_0rEXKMmtbGj3foOopzC_L8Cj115VylABp_2diDcvCwnVkXmyk0I9q6fClooLGU04Faz5yn5_USEfpyNT4EbB2nS8IW-HPAXqYJnHus-bcJk_n7zuyJnY0iTCAm9Uqc2hO2jJpPusGP7zeu2LgepxG-6ZmtLN66g9by09w15l1nCaBqKgiByw6a82_24wAVDu3WQUiHTrIKNEaUN6kpsS2QzJ3FeqEP-HNESgdVXy4pYrWGhWLZTKcZPNXrNyCjvAw4Z7RryPtbuX_pf63JXhFNDCfXV7CEVyYRAJ3mum4_IzTXGlrViSoeZ9hhnl7zZf9Eq6cBUkjV05JnYQFZ9HkoO-MaG7atL9OeWI-ygvIc8UiiOtNWYHTKplgAWc; VWsUdwWHOSo=CfDJ8B2egGQRAM9LolZKpOmaYb9iUFt8zvyttj6l6IBm2czB_mvgCk8HdKkDtdLLMkbv1lo9o4z98wS-StaWbrllV7jQYZrWyhO_7e5GFl9fJVImJBw4FUAkj6siqhaV0WFps9VxuC6q2woYKCUmykdZM3c; .AspNet.idsrv=CfDJ8B2egGQRAM9LolZKpOmaYb-ZlzWLXqXdTe9JJDz2eY-2JkTWP7xXwrdUEWJKzB6l5-YeBsrdbgSjyVUlKq_7VVUr07phD2DbRk1SKp9nnpByIbLNi20wEGyAYs8afu0hKk-YedQX5PgvfO9O3BvUsicYAKrfN6fJ5sn2PcPTRKEI_GoGjckZMLjYmAjv8Qw0y5X4NNlFGrsT5Wa73P4DR1v9liLGINVEOQQMgCIEvyFFaKi_KYu0PlcfTUO0HAGm0WG5sRRcJLPEvRjBTM48n4oohJoPB3CiLO47x8glU095XS8eTsrnX72QH2pAlqE8NQJKccbXt9osu8fIBNQwzFOaWtJ6O0JuluDOe_QfFF3-ZHcPD0L9kUh_pRhrPeoRuxv26e-m5bjYJAdcJSZe_PIsvwwy17F-mCrBZ99Gcq1ByH2kYON90LTi0CU_7K8IGkeTvhTleoEWyOEiwbTFk_OwQRL8bAtfgr_xXUxY4nDXzeebX8K2WHFQoSWn4WiLSd0LfIJ7mY5Y7CsGk4zsd6lIuEQRaB5tz0dUWeH7I27eLepkWe3lCK5kVYFh5ilLlAUCiIc1pYWDsHk_VI5QgK0; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb970eVpP5pfkkXQUB44-f6WbPLjoe9MFN5s-fcQNgBLOPlAwZtOWZ83nYW7ZfocWnDL6ac6r5dcA_NsJzS9tNtdHTU70XU_S1LzHi-KHQ03jaK_Tg4v1z5_beLEjvMnqlOU-EeDX3I2Fq_bVrFMXYf0co4IZKRVLT9mSIASm4btB8VzezNTNcqUWfOKU08a9Jk9-cCMiHp0bmltkhhqS1vIJSufBQI2RPo8vhyn-doa51vjNlXY7RqADq8IcWHgMXw=N; .AspNet.OpenIdConnect.State.EtKt7AaI18lbKLbNdQlApxgcm1_x8rf_t_c5qNn0vwc=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_B8UeUSsKgXTLpsvdHwqXAiIbcsfte0KzX5gcETE-wEFQA2NLc5NbJ3wVjQjFCqJ5RJWOV3wyHWVViB61FgB-YPcuhLFVLqcDAvlagyyv7_H0EzWU6aJhlMSWoXYGLWMS81R8OdeGHBWl-PMVMks8E9sPXC6Qpr1P0G5F08AbPvz6nmI4NGRt9d9HWhYDc4ollbZM-iI41gxj7H6dJYjUl-33Gc5PAwmt0SWBwl3DkhbPXPkw9eWP8IN6h-_DLcgo=N; .AspNet.OpenIdConnect.State.t0JMIH7Hcc-O94sQJKAe1Bv-fWanv2CWdLXrneuUaeU=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9VZSdlFFLjkaVNU8Uh-8KxPe3K9Bjkcq2K59FLM6TeoGbycHBkg5Xqll_5vGF1hJW7s9ztXauv_9i_JD5Z4IkLwVK4xeDQtVckwIw4XSakyV1wO-LecqhAcOEwB52B0LKwqQpC2B-TgydZ-VM-oVjX-kiBbkKsznnVjt6ZkHoGKaxGIWRUgOjXAhcTJOI0jd0P1lLVfYTkg0wuvMpRpTtINbcDnGO_5fZ0bfQR7jJJa8fG_uZhtbn8wft6K7QpT7w=N; .AspNet.OpenIdConnect.State.DH8kxQKYzAks-tmg4sCj0eBCFX03Q0tjKVU-E8vkrlA=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-vzfLrtuB26alIjN03sY7pNNJJoLTqzenp_EWgXg-49Y9jXnc5quJlB7RiQylD0KCi__HJp8_tdJBXGrQGBED0gp1gz3uLXsh6B7mryhW8AfnYmK1HxFWMgk92rlmi0cP05ezn_m3G6W-646GIFMst2LCeaUO6twnda3LApfF4ID_R2LzoRFsAXX6JmzlaSt_6Yzczjls3aB2N6iaqOHCFu2Lrj_kDis7KTxOdyccb2UWNkQEz0SBf6IKlevWiJFw=N; .AspNet.OpenIdConnect.State.QVAHeEtP6Y96YT5QL-3mLkzF8yq7SUGm-USUNQOlfiY=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-d9dLHuODbzKIDGxgUW0Vi-s0LVZXyDl6O8D_1OglIoVo27FhQ2JmagVEYCf2WjpJeftnuEEkaFspxsWtgXzDqGFLq2M1BXuflzPlTOjRu9ljazUTF1Ay6XcI3FP2haqkOVvHjSw9Iun7N7WQK3tbDhtR6ROpOPeWEiV3oAy63DHdBxkMG3oYjRv1xme8E82jfL0M3ibsVYoubwuYTeArJ1MkJHJ2-szWzwrgGrsI1NbSN8g0DZApc27oAOAO5-6k=N; .AspNet.OpenIdConnect.State.__CjYHBUlLzzIZhX3Zgi6Tqv597rSs-SnTADoYI7hLw=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_EVLl8_JHTorTpMGxB4ygUEhPfytbf5OhA1a9v7nJuC_rrM3mQTlyCbixLOr5tA6EGXPvZtviVMwyCkhgNPu1UmSRvrfMXhSiMI7hHzVMaMLC3UeBVqUl4PSUSO5elEWB8qEQR-EBPMDnA3iz8UDRM-j_8HXQMbCF20l5yy6BTOVrbVo8fwMgj6JGhtaygQ8YNowHHgCI06MiWlW3LvgF2XPahFY2-Ucdz1_mArE1JcvpxGDm29S0HPXfT0ZpY5qA=N; .AspNet.OpenIdConnect.State.c0O0KKh9gbVC8Eh6VQUyUdKZdLcpGvqK9wzpp1JsX0g=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9O7t3ceaQHWT2udvq1GiQ111nlkQ1Rlrqs-xWUx4OddKnM3G3dB8FScfiKnQ6611gpfkpnvUq1mUEarUzNkuKrsoE_HIsaeaFTzUcbWuf4zXCiYSDeWYuNzBKWWZDfg0OlnkRsFF5pKaqtRP-HyspdwQhN5BEeg7fjZ64NO3Lz1RUfTxmVOAP-yBimc9km7pjdzGhQRa_pofSdLj2c4YqS85MHiTkgV2Rk_XRgrgcTLZU9Ffca9nY26OQLWQ3hPv0=N; .AspNet.OpenIdConnect.State.-1KbBRZV9XX2PR_-iHmQMghtlwFu7A3paI6TsUvLM3o=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9h1LMV6IwmHR4ZYM8O-7HYincZVWj38kpbAQRH8VpOo3aByIgGRBEZ45gL_TzFGijNlGAZuHpokwX9apJz_Q9tpWYM4jrQVwPqZAnNTRON-6dYUy5djEyMfzZbsH4QedTPMKPN407T6VJJeKI9vI78pqASRwhW_5iw6XGBjWBD_2QAtktm73lAdFf_jVcnEPUydFdwEPFOcqdD5vt-VgvA42DCAZOP8QbwHyLtyjtk2Px0BSllbeDCNNsXqLuZ7NQ=N; .AspNet.OpenIdConnect.State.Y-3kkzepbMLpbFLunTluvyVk7GIIpvTGT_4nVd6vCc8=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb8S3p7i2CB6kP3DsqW01EQDl9op76-r_RQxlZ4QWONBU2fmL-TrFZwUqi5nyVUaqbDs5iPqhMNi6ZxPEB-g5Y8cQFAhrbzHIxm3zUxVPVswZsB8rIou5RVMrbawkJdev7bCBEsU8U2Wn2tH-czA5AEwCXWtHJgHHsNPrClGvMsjRsNIi0tQjfEJJsQFtjEgw-xqNsA_QXIbJb3eYsGtevVWW_5O7hXYJo-_NTIw8R7GVVck2172nwTL1eXReUxwdak=N; .AspNet.OpenIdConnect.State.L70a4VywG6J6nC13AOW2W2u1Spyti4P_G5-Gu5lxk58=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_6vHH-Aoeb8vMW6OIBwPoZXat2j2Ll9ckPm6ygPdhoAnIKZqTDq-l3dhlUEZts9Bhyi8ULXxiIimUS_PLHz4dL510wIkhSVVS3nwipVhdT83jP9qb_CsPMYAikqFVY04N3myMRpwrT8th-KVDzGmo22NCgHpyfcpKO9cxfHS41XHxklYRU3nca-XEB3yYzeEe_VJKYp6KV9C4_OzkPVdTtcgR37ZjYRDMTwDY9r5AQwzIP7QKpdRi640-oMsxsVxU=N; .AspNet.OpenIdConnect.State.WlAh7-X5m2J-3LqhyOWKRWi8wqQWN-p7_NkDb_U7cLY=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_dsLrgBqemg4eymtlPyFpj_0RbuHSSlRxypMWfFsS7ouoZFhG6JpI3gvzLnEXW8c6WCPRMGahZWPzA2fqbr7JzdhRlV4k4g8LqeAkCI6aSdhdjLgt-61yMF_RzDofX6TDGMfTJO5XvXux0LYn4ZdPyj8dwrHE6a19yoCOXfjcXoGn0396fEL1zR7kRW20PU22qMEypBwboAfIkk6KpaFUfwgzApYjYcf0-ZFRzHTVslxx7dYdWJOxnJbhfInPyQ-M=N; .AspNet.OpenIdConnect.State.z6jxV_nhvFZAHPOWifZsAbh8bxzGxC5k2Axv-mXPbFk=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_3FlCN2zFTnAtkriMMv-fAjAkeiCM-B8rKAvWDWSdnRR3vYSaxVv-wAq7bZdJqPRdp5z2GjNthlprWchL5HzICFUqiW55hhsHjkPO9rJlqSjtQYTPE4WYawROEMYdipZw2g0QNmVtf0mSrpcsigLdg64EbRjYFOPL_ymoco1h5438KRonHwfzGCeHxrtOwsJw5o7GdCMz32ZcMc6Y1r6J6Oz6Ls9JCRIf1qR-M8csprzz4uMjkrEZXt-H52xOW8aU=N; .AspNet.OpenIdConnect.State.Y5t93awJga9PuztV87RBubyK9hLDy2dt5KoHcfWPk3k=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb8rckC0y8rwd1By4M7XruiMxFkVrQ7xHx6DT2aEpFKPKRpQcohKjPgxd1qaqSey3Z63ep0onb0oHu7Lf4KfTnNeudlH26huPtPRorfLFgICle3LcN8VqP2AbRwFKGJKuYNTr6mU1Fja2RXJvlNnEuYqCSo384Rhksy2Xjn80Jfb8OH9IOwPeFnsLCi7TCzR_gO5_dyX2zYqG1rM-IX65grRVTq0t6ikulvcGOLNg86pytzGXCTvxLHTjjkatBN2A-E=N; .AspNet.OpenIdConnect.State.RDU2J1B2G9E1Itmky50uTZcICXkn_ODGiNAU9O9mZdI=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-jo-HmL1VgbYgR4umdAwSmzbI2WHZcQJm5i-Z-JDVnNDxb8SsgWrd_ACrZsFiWrBlQwX_BR6F17wxXjLFHgfU-PS7exod49a9gK8S7vaJ423duUesU8oFfcPthxb3Zld0fR2xW6Y3GhBPtRzSXzvY9RLoRd_MOlGaxa4XFQNWWY5lFFsBZzyQysnoau40oRsyNeWJxxgvOU-NGFZu-A0xQMZrpRr9RQqmVud1ihIr2Nzn5OaxxoTgEzIBiPB2OwkU=N; .AspNet.OpenIdConnect.State.1w5e_nwcaOYfudu7AS2ARFoy3klsvkwIAoMk6p9_qeI=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb86lCtWtwQPxX-cP0EfS3pUaewjjelhmde2iTvKqB1jOP1kuiOdmRQ9IXwCegzQhqycyNxadiwAoB7hitMxVfRNWzaGD9nq4HkO4Imo7QuwS541tRxicROk88JDbIjy0xpI1pL1ggwbj44u2LM-Gse4NQcIeQytsQ_DX-LjHc3CcSrS0XGZFxd7S8zsqBZ5RbuaKJQfs5XcMhqc5baxLOejxjeNsMToYBZTIQVK3mk7DDQwaqux7k74GCKeodJ0uss=N; .AspNet.OpenIdConnect.State.YzwGOeLVLvYKMnSzA0gt29itQbmBmz7-d9kqXbTxg5A=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_JT8Nc8VrBw8qppkSP9EUjZMDMdMMq6xahx314s16F1ixPeMg81N8RcMwTxcWNDkkJ0ShtJd-pWadK44NmKiRBRYtQHsI8XbhtiAKOO2lGkgs-llNgcUFakKM0alhtlw_3lMwzEXjTyFFr48hTfxu5sHLR1Homl2VAKUIqlCmBe4GarxBk25PugwaFfTRjmKKcev9t8_vQqMvD45Hfew3Xdi2McZMAt1JpqmN1H3dmF9C7Uar_O9NQUhbMaJs7s24=N; .AspNet.OpenIdConnect.State.Tq5m9mWN1E40oaS6E_X1zkXrq4hYS7f29bCxy0clwIo=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-2V9UWjsVw89WWBwI8y7lQvrWehFv1PF46YtxAQiJhV7QacXpzOkTvt7NBXzfOTy2kpf5vrSt1FkBRgnIUtB6x3FiOG2HwOnzp0_iAAfZxHcQmNhafx1Hfrn4yC0WmS2fPLSNuN1ENErsFdMVxkuEmTUJrM3HjSN1GTNk07rZbuCxuFi-wontbYH9_gIhyuNizpmRI7Ynz8wsRe7z1eVBF4v0BAQlzqpdB5Lfs4XuB7ZbU8I6jFIEolp893Q65mR8=N; .AspNet.OpenIdConnect.State.Tsv_-N3BOirB6503l7XCOrmfmaeuemzSEyMC6WjXoY8=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_Rqlwt0A5Wwo70TQgsnBF8Yr0RYDU8MXaOWigaCyso4x-UmUjpYpjNEBv251bIe-UtxE3s9qy1O9SN9kw_Ywuyk_apwF4AEjHjeS77hZEmC_d7catN6J7poA_9IpbP8yBa85LhPDq5500rOYqZO_MXM_872dgPHijWiPeyqCNopdP7x9SrxOWT4JwWbpS-FVT7IokqrLn1qFHTj9JhY7X1CKB90BaKC8-wo0mxAmkLwlxHFA8Ha_tlVn2wqgidJHo=N; .AspNet.OpenIdConnect.State.nn0l_3jcRAbkugePg_vUx3_uNmMjJJKJU5VRHN6GJjQ=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb8l9Xnw6a-KheTJG5XuwO2_riU8w_-rl-5jloVf3cvyeuHvz6SuanH5hRKuxIj8SvH7uJkhBNTA-e25BIc7mD73YKuU_cLa8bSSjdGMtwHeDh6wHVqK-risRPa0n6qwKQnBvzSGNuWlzePsA37IDhZ-kk5UCgkjihmt2lTZtivLFS3OKNePNEgRML4--G9GVaELS_mQB28WgG65UV5iMk4uHluC9RvhHCHpXIqT7ZGO1IfwIOCcWxUeNQmdAdb7Ap0=N; .AspNet.OpenIdConnect.State.tYeBJqbTxRUjDxqAbrd6MmZjQnLzAfalFlLeL4LKDyM=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb8UEidWGctyqL1QIsQQgA8dtAOx9ZC5raEcv5YkkE5Z0AqswAo4uqsN5JsLLx0sXq2kfcFu8IUyBjFy6g_FOALCV1WmTsuMj59-KP2IY9AN21W1UqaQAw8Fq7jLrwtd6p84s5bKpqVomSAmRhUuoYnGWsFTD8T2GxRC8LRBedeXevBUyxwAcjhEVOGjE8cOdkXovXBcXYq7SmGLEvZnpigWrjzBz9UB5w0_j-aGbP7T-RcG3kwxZYqdg7vKW2MlihU=N; .AspNet.OpenIdConnect.State.8Srvrd7KjQVIrYJjIemfOmaVT1Uie568O_Rq7HrsKvQ=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-NK-_nDNJc57oM41QJJIasV8PWO5hRUSYuipT1vbrfRFOL3wQ3tKiD5ab0JHLwEuyCNW-DvWMo6AQa2NDmlOo4_IFT5EE0k-5swcJgS754Z6SwwbeLI-fGHEh9sbvOEBk3763sDUv2lq2PPt_82rgYJno9UCWTrbXEiND8U7CtqHn4uwPl8Yrowlep7_WWYCvYVlhnMmzWkns2UYcuB3Bznv8OM_T9PkGAgWf8Licx9eH5ulQYb4a_6yPPypXz2d4=N; .AspNet.OpenIdConnect.State.fujb_rvEYGldfASiNo-dALr-bGvIJiqvAFQOXZh2KxA=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9ihOIJtLczaaOBMbhonoPSsy1vqQFNLDZ6qI8rPoDrqD82w-UJ57MExitpSsgxmCgJf_FIZDScNZcA1pUq4oEDZK4g2zyj_-oFYqJTwtpaIulaJhbjsqXR3hHmAP_LUPmRZ03RznQmZu540hIuYQKl4vBSHulxA47jNQ7wDatRlP-YfeJo87TtvyWV3ceT9B_7SccjoXcethlg_GKVf9dced9x7H5mSyg1mrqHXTcinCVKSUe7fJmlDExf2Pm6zWQ=N; .AspNet.OpenIdConnect.State.DvAaU29BzRCuXNG1HdpsWKTrNhZNBy-22mFSiPKUncg=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_ndb-aJvQlBuzlnZSXsHcSb7QdRRUQI9M40baUYAhGoJCKIJt6dwjQX3ZMEGtVP-kjWqX1k0Em_hyYGKgnYz-u0xommMF164a8NDyX94kRf6oM_A42cIOuQXwTIDJHQe04nG-0Vg0gBchDUSCRzR_H6LvBMN6rUNU9sqlNcdijlRUEmlw_Jvkz5qaRqjnxfOP3aAH-OygKb2iHd5zjqupWFsqu40kI8KXcA4WbI0XSX87AGd8OBN_W_iglZbE_OuU=N; .AspNet.OpenIdConnect.State.4U50VSkQw9PBayyTybaFPnyRlT9M0pvZf1pkKZcFEMs=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_HRbREH4enj_1Z2eC9TNUk-bNFhcpAU6akKUC0yqc20Qf80QfUJPX6gtR8blndSzGkdUn4vUE_zJ4KRCFznLteYBLbVLx3uOE-xj6dVvL6PRI5soe0IZKtYP0YKc6KN46xFKZp9NGG-Vx-T_BA5rpUUMCxqiUHHMdY9-hD9ZkzG17cIz-aNvTcgsq0PpkV_9L_fNMzP0-l-14pdgsC6sma1uJXmfiES0PbTlvjBeNJ7L5pywLG2S1IHD4LtT6tBpI=N; .AspNet.OpenIdConnect.State.cF3VN1FKFAlDwKWqKaAemrBU2Yh_e6D-A46sLbM-ciI=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-j0mVs6swSvkdQYKBwsMIJX0jjoG6o-QU-ho1WgvY1QsKwgWwyaJXwXON7PfJe7rmyfrGMrX75A1eYMhh4kPdHD034NjnDKgmrsGZ9-9d68FJ9mZ3NaleEG8u6hrpCKSqgb4dt4CY_l9v-UuVNrCTBRnDY5wowA534Ll6z0T7npYe_qIy4mFzxlOs03bljcJUa89PYagbVYJm5vRbsdAgMLquJxdzzkOxJYuFrJtPjxmUpF9jJ7vDh3NKf11fWiiw=N; .AspNet.OpenIdConnect.State.MD2PQiu94VyyQ2evya05bg5Iv5XUaJ0f1eKIqsgtCyg=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb8h3JAsilBb0-P34ATWl-To74LLixEG_v3xYQrTnfsrlrKEuDjvG-b-uOpgUlb2VP95lMSbnNZJL9VUJN_Iq3c08fVBK8LBb9Ygi6_Oicv6sd9sr_dgzi3kAWCupLdAhmhtjixDUHdybyxMlRLRIBenv5NyaKh9jO58I-nsF3uoXI8jRLM0F7DTjyYw5OXmV3CyD7cz922zhCnromN6jYtQApTJxBEn_9AcA3i5oT13SdpwN6nOYBZxGz51zM5jHvA=N; .AspNet.OpenIdConnect.State.jcCnSzGDSSuCcQwmSgAeSQHkJ-HUuJSEX1tMt2yUR14=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-TLwQ9Wq0LwLgnBs3-bMfgLbDkePLyMjGKSq-5ZJ3dOVC1UVi3EaftKGfOOXMiVWFtzUnldVBaT2YHPmHsjXOwBI1wdZCqEs9-Cbhr6sQMLHnoNXHWTIG4QbYbNAyryD3kIEqEwRo8rDO-X1T6QD6KGqOgpzWlnu2RxjrWTMDSjeU2OKOv8b2E4dQsImwhOuC8hgGCeosp6kiNU9l58uqxMJwHjhRPIJcp0TQAYLTytRdZ2TIDRZgLYBDRFnUKgco=N; .AspNet.OpenIdConnect.State.c78eYrQ0suVu4bFNyHq1451zvlsWr1j1-ExQUcYmZIQ=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb8McN2qXAjWBvK0GT8F3xSrSYZUmTw1ABzqEDnoLozQKBbvhwTdUOkbBu2KXCLPcVj-X70Jv0biLhyTOFAw4s91b3Q2m45IP4Iw2sLRkiQzTes8lk7jZBVPGi7t-_ywCpV0OVmiT7n6sfl8168dKRWzG-yDeXPAIZf-pR3VhUnHldEHPobeEkZpNiqauMYEW8SjeQfNdZpOXB3uJpOatbAdydrA9L96qoGpyWBrxDF8o9rIN7KZR2St0vECrPRuhKA=N; .AspNet.OpenIdConnect.State.QnXv5QcH8jzTEWus3MqxBC10pC4DZceHjaVyxmXuIFs=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-RoVZ4U55dPl_yEwuqAxicgo-AhIu1tVtDw7BOGB1FXZ_LuPj20jrzVSENfxfUpvOzwLFt1aZwQC0aJprZY5QhURYrXBapAupwpLJzoFhAysQvlR3QtVMtWXsl02dNJHMGTNkszyxqxmf7hgP2YJblAdvy8XgEARCNPW_0wkevm1WLqUELxYvWiQjlfCP4VcEnFEtElPYDEbaKLYRoQZdvvNLl8_cdkKXMsvgdp2J43DY5CgPTYdfIr-MtAvu75os=N; .AspNet.OpenIdConnect.State.zR54e2pfWL9KAWbfU_QUafLoq_oahvEVeLfl4MlDMtw=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb_Y_LupwQArzS3QFdj6I_pnO3ydOIt7fLr1rCeKg9hFCUKpnbkD7bAbyyMIZ7zJIXWR-4VfaBw4kmRGmn5rUpTrrAqxM95uwI4d-cbq8SzMoBCLUvUjF1y4MULE7IyV0EDS_0olrsFYKU7ncTRWcbU9Z1TYNDVtGTZetkYov9q_BtJ367_jOiIUT1TqgMtfX8VwbH-KG3FTzJeqzxmx68HA5XBvERipkyavbwGT26qHaYPB4chN-sExuODP0S_psXY=N; .AspNet.OpenIdConnect.State.hBEQqOziBcftMdzaohukxyXclM7wJLVPeEmGRAsmwLI=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9dZMnacJPJv29n7Oga7PoFHGlF8ptjGgx985msPusolX8F30fioIlDPKCZuS0kiGsRNo3_7KP9xiBWtcR_wCBEugDWW_3cv9bV2NXRhO0OOb5DEJMZEx24VNlXaRmLdepEAvGRhwwszgXJUYzuNfboKvWyOgVUx8wnnxVFxMmpOB5qzCzJbiqan8IM3ZmaKJtfF5C4eY3V1n-daPEb4aXuTHiK1gb8unVSoGX7rw9qiDyhtuN8p5uEi3BhaEQmuEU=N; .AspNet.OpenIdConnect.State.rF5lxR9w5pQUdv9zKTYpeskArQHUcWq8XFyenQD1UKM=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9BkPhTYCNzO6GN6SXn3Bj_H1bFGigGD333ZcjItItjAktHNM5mjOjT-YlEwP5RsEZtt1y4H1_kJn76873R2bSsyhaNEtycMsrEoRNbD4Wuh_fXa8byQD-WW2h4suvMkMDxswnnuGqFPeXxVZ9gacSRhLxaBvYNDBLVEfafzhda45V2aX0fcUw9gLgFJMtu8xxwfwLi9esEWakC_Ly_9IFY6YqBme7oJG6canrGTPIPLox97AGIdaqiXSXGUYCJJpE=N; .AspNet.OpenIdConnect.State.SEXjOHNQBVo2jmDQNYxOCcV7h_Mn1kdsE7jJQAiZ_1M=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb-jwsw-9WpxOk5vu4790ianLpyx31QONrk9UdO-IuS4CUg9c9p8kNT7FRE4DysEryXFTdOnBGcrKQSqZHxobXtXQ1Mquygj2SEtDcsDT-yoGLWE4ObH_aNRRzImGSu_lKs5qwXaUbtC3CVPnUD__HwhJrx__iI6Wny0Fyil7MShzYMWqOQPlOEbz7R3dvjggBWqZKw__qCHvLzfjcn7bq2MC93viUsbCqEFQ1o3GP0Z70NNkNDh9JczdCgSiEqm2eU=N; .AspNet.OpenIdConnect.State.XkgZ9rhO06W13yxG79x6vk0Da__oWvO5ljl2SXuvnQU=N; .AspNet.OpenIdConnect.Nonce.CfDJ8B2egGQRAM9LolZKpOmaYb9KZb3WcV3owYZxFreJPjrLYRPaAl8CF54o0VkBJ_iJqshsNLz6zbH_X4A-7zGnUJo9a9JwFQi1Vyrhmfd8X0qLeS4UTrZ6wzbqOMR11YYMdmdG1rlw4rn3Nmch8TZJLzKmam5gyDMBlEsqjSMsia8BgrG_7GEVy5EF3CIV62WHhaHDAdnvFR3iCQDNAVE4dgcXciUX8BI1Vj4oH_pzaoCJArkY_7kQSOYHasH583x59nUSI_kkZr03NBGxDl2gGTs=N; .AspNet.OpenIdConnect.State.mnTeuXEFq9VIoc2XWUUyOFpnIwkQ-3H3f6mQk8xEtS4=N\nHost:localhost:53000\n. This seems to be an issue in IISExpress, in IIS 10 (Windows 10) works ok.\n. ",
    "furrybaer": "But in all the samples I see, the ASP.NET MVC app needs a reference to the ID Server library/package...PHP couldn't do that...Not sure what the \"Client\" would be when I configure the ID Server...Sorry/thanks...\n. I see the PHP example...Looks like it takes \"ClientId\" and \"ClientSecret\"...So the OpenIdConnectClient(\"IDSERVERURLGOESHERE???\").  That is my guess...Will try to get the ID Server running and have my PHP Developer try it out...Thanks...\n. ",
    "Edu115": "@mikeandersun I also struggled a bit to understand how to do this.\nI think the current approach is to use IProfileService for implementing the profile specific logic, and the login/logout logic, which previously was \"baked in\" and tightly coupled to IdentityServer's UI implementation, is now completely up to you to implement. I guess if you look at the current Host example, it would be implemented in the LoginService and LogoutService, which are in the UI folder.\nIf you want to use the Resource Owner Password flow, then you also need to implement your own validator that inherits from IResourceOwnerPasswordValidator.\nI assume later this will probably be changed and improved. Please correct me if I'm wrong @brockallen :)\n. ",
    "ghost": "HI, \ncan any one direct me to find some resource to implement AspNetIdentity in IdentityServer4\nRegards\n_xx\n. using AllowedCorsOrigins for InMemoryClients doesn't have any effect:\nI always get\nInformation: Client list checked and origin: xxxxxxx is not allowed\nOk, my request was wrong. Either way the message was misleading since it wasn't a CORS issue.\n. ",
    "mikeandersun": "@krishanthaI here is for bug report and feature request. Please add you questions on others sites (stackoverflow ,..). I have some experiences on what you want.\n. @krishanthaI here is for bug report and feature request. Please add you questions on others sites (stackoverflow ,..). I have some experiences on what you want.\n. Maybe this is my sensitivity that wouldn't like to add an assembly that brings MVC requirement (assemblies ) to a project (Store or CQRS  implementation) that doesn't needs MVC assemblies.\n. > If I understand correctly, I dont need a login to get token for my JavaScript Client application. \nYou need to login first.\nWhat is the example that you follow?\nDo you use a js library(e.g oidc-client-js, angular-jwt ,...)?\nPlease give more details and some code snippet of what you did?. @ebadollahi your question isn't a bug or a feature request. SO or gitter are better places to ask questions like this. \n. Thanks to quick reply.. I have this issue too in a MVC Client  with implicit flow.\nHere is what log says:\n```\n[12:23:51 Information] IdentityServer4.Validation.EndSessionRequestValidator\nEnd session request validation failure: Invalid post logout URI\n{\n  \"ClientId\": \"myclient\",\n  \"ClientName\": \"myclient\",\n  \"SubjectId\": \"e8293e6c-ac00-48bb-8aa9-2b8b3f9a5a41\",\n  \"Raw\": {\n    \"post_logout_redirect_uri\": \"http://localhost:6200/signout-callback-oidc\",\n    \"id_token_hint\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IkRCMUU3NDFBOTEwMEJGQjA2RUVDQjA1Q0M1MzlFNjg3QjlGNjNEQUQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiIyeDUwR3BFQXY3QnU3TEJjeFRubWg3bjJQYTAifQ.eyJuYmYiOjE0OTMwMjAwODksImV4cCI6MTQ5MzAyMDM4OSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiZHJpdmluZyIsIm5vbmNlIjoiNjM2Mjg2MTY4ODYzMTYzNTc4Lk16Y3dNRGM1WldVdFl6UXlZaTAwTnpVNUxUZzNaR0V0WVdVME1HWTVNRGd6TWpobVkyWTFZemhsWm1ZdE0yTTRNeTAwWmpJeExUZ3lPREl0Wmprd05tRXdZakZrWkdSbSIsImlhdCI6MTQ5MzAyMDA4OSwiYXRfaGFzaCI6InVFTkZwckFCbVA2alJQVjBxbGRvWXciLCJzaWQiOiI4YTAyMjcyM2ZjYWYzYTdmYjYxZjIwMzU4MGU4YjM2MiIsInN1YiI6ImU4MjkzZTZjLWFjMDAtNDhiYi04YWE5LTJiOGIzZjlhNWE0MSIsImF1dGhfdGltZSI6MTQ5Mjk4MzEzMSwiaWRwIjoibG9jYWwiLCJhbXIiOlsicHdkIl19.BvJce2oP1vT37U9qVH-TRIeG2asVlHoM2FPqseXRzr2d3adkI_HOavyepyXxqdxWitjEu-Ep7j_MTNv6LSvnIi8QUfbIDjcTJfzk1LnBca8N1UpqbaE2Y5SX12h17uNLqPU3T-LyWRnuhXzKe0TyjaY6AR2akt7jzJ82zy_gv3eSK0ztauqgB0SQ3RNJPnUy2Dmk6hFDvq4maauGo-jZvwIAuZVrdaHZYbv2PLzjWe8RAiUPaykqCmvxzR2Re46hNSMmY6ERY7sN4f25C58l5FNBAt33jtpsOytDw1dHF6gnZpQDAdwlRpWzHhKyVnxEEkbGIvAE_wLXcRab1T9exw\",\n    \"state\": \"CfDJ8LNDbCJS4RRCtBFOjCXAHYzluDD6k7DpK0pBziduOxq0LA9bBjkV4N1doxcyWnVRKPjhaMO0c85j2MgNLzPN6PlN1v-_aXyfTDFupekDVz9Y06m2UQwUVDOi8EeVRefTPHd28D5fGKiBv61RuZI8ObQjQ41t3szcBfnQgp61vkYm\"\n  }\n}\ninfo: IdentityServer4.Validation.EndSessionRequestValidator[0]\n      End session request validation failure: Invalid post logout URI\n      {\n        \"ClientId\": \"myclient\",\n        \"ClientName\": \"myclient\",\n        \"SubjectId\": \"e8293e6c-ac00-48bb-8aa9-2b8b3f9a5a41\",\n        \"Raw\": {\n          \"post_logout_redirect_uri\": \"http://localhost:6200/signout-callback-oidc\",\n          \"id_token_hint\": \"eyJhbGciOiJSUzI1NiIsImtpZCI6IkRCMUU3NDFBOTEwMEJGQjA2RUVDQjA1Q0M1MzlFNjg3QjlGNjNEQUQiLCJ0eXAiOiJKV1QiLCJ4NXQiOiIyeDUwR3BFQXY3QnU3TEJjeFRubWg3bjJQYTAifQ.eyJuYmYiOjE0OTMwMjAwODksImV4cCI6MTQ5MzAyMDM4OSwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MDAwIiwiYXVkIjoiZHJpdmluZyIsIm5vbmNlIjoiNjM2Mjg2MTY4ODYzMTYzNTc4Lk16Y3dNRGM1WldVdFl6UXlZaTAwTnpVNUxUZzNaR0V0WVdVME1HWTVNRGd6TWpobVkyWTFZemhsWm1ZdE0yTTRNeTAwWmpJeExUZ3lPREl0Wmprd05tRXdZakZrWkdSbSIsImlhdCI6MTQ5MzAyMDA4OSwiYXRfaGFzaCI6InVFTkZwckFCbVA2alJQVjBxbGRvWXciLCJzaWQiOiI4YTAyMjcyM2ZjYWYzYTdmYjYxZjIwMzU4MGU4YjM2MiIsInN1YiI6ImU4MjkzZTZjLWFjMDAtNDhiYi04YWE5LTJiOGIzZjlhNWE0MSIsImF1dGhfdGltZSI6MTQ5Mjk4MzEzMSwiaWRwIjoibG9jYWwiLCJhbXIiOlsicHdkIl19.BvJce2oP1vT37U9qVH-TRIeG2asVlHoM2FPqseXRzr2d3adkI_HOavyepyXxqdxWitjEu-Ep7j_MTNv6LSvnIi8QUfbIDjcTJfzk1LnBca8N1UpqbaE2Y5SX12h17uNLqPU3T-LyWRnuhXzKe0TyjaY6AR2akt7jzJ82zy_gv3eSK0ztauqgB0SQ3RNJPnUy2Dmk6hFDvq4maauGo-jZvwIAuZVrdaHZYbv2PLzjWe8RAiUPaykqCmvxzR2Re46hNSMmY6ERY7sN4f25C58l5FNBAt33jtpsOytDw1dHF6gnZpQDAdwlRpWzHhKyVnxEEkbGIvAE_wLXcRab1T9exw\",\n          \"state\": \"CfDJ8LNDbCJS4RRCtBFOjCXAHYzluDD6k7DpK0pBziduOxq0LA9bBjkV4N1doxcyWnVRKPjhaMO0c85j2MgNLzPN6PlN1v-_aXyfTDFupekDVz9Y06m2UQwUVDOi8EeVRefTPHd28D5fGKiBv61RuZI8ObQjQ41t3szcBfnQgp61vkYm\"\n        }\n      }\n[12:23:51 Error] IdentityServer4.Endpoints.EndSessionEndpoint\nError processing end session request Invalid request\nfail: IdentityServer4.Endpoints.EndSessionEndpoint[0]\n      Error processing end session request Invalid request\n```\n. https://github.com/IdentityServer/IdentityServer4/issues/1055. I inspect the user claims and it contains subclaim. but the idpnot exists.\n. I change \nawait HttpContext.SignInAsync(result.User.Id.ToString(), result.User.UserName, props);\n to \nawait HttpContext.SignInAsync(result.User.Id.ToString(), result.User.UserName, \"local\", props);\n  And work fine. \nBu I don't know hos to get the IdentityProviderfrom login controller?. https://github.com/IdentityServer/IdentityServer4/issues/2274\nThe two issues request extra properties on Resources.\n . Please look at google developer console. In there there are many APIs that we can add them to client . \nThe Apis have many information when we click on one of them .\n With having some fields on ApiResource  I can link the developer to an internal or external page to get mode info about the api (e.g api price , api usage , ...) . I believe any entity that have a descriptionfield should  have a urlfield too.\nsorry for my bad english :)\n. This is duplicate of #2249 \nI close this and follow that.\n. @leastprivilege  I needs to query the store with more parameter (e.g tenantId,..). I want to have primary key on clientIdand tenantIdin the client table.\n@brockallen  the parameter is an object to carry out parameter to query the table according the value of it's properties.\n. TenantId or any extra information are fields on my client table that i needs to implement some business logic with my clients.. What I try to do is a solution that client owners can define own api and api scopes.\nSo how they can care about duplication one api scopes?. The owner of api and scopes  is the client.\nI will try it.  \n. ",
    "JerVoe": "OK, thanks.\n. ",
    "TheRubble": "I believe if you implement IResourceOwnerPasswordValidator, then add it to DI that's all you need to do. In the ctor for your implementation pass in the the user store and then use something similar to var user = await UserManager.FindAsync(User.Identity.Name,VerifyViewModel.Password)\n` public class AspNetIdentityResourceOwnerPasswordValidator : IResourceOwnerPasswordValidator\n    {\n        private readonly UserManager _userManager;\n```\n    public AspNetIdentityResourceOwnerPasswordValidator(UserManager userManager)\n    {\n        _userManager = userManager;\n    }\nasync public Task<CustomGrantValidationResult> ValidateAsync(string userName, string password, ValidatedTokenRequest request)\n{\n    var user = await _userManager.FindByNameAsync(userName);\n    if (user != null && await _userManager.CheckPasswordAsync(user, password))\n        return new CustomGrantValidationResult(user.Id, \"password\");\n\n    return new CustomGrantValidationResult(\"Invalid username or password\");\n}\n\n}`\n.\npublic class AspNetIdentityProfileService : IProfileService\n    {\n        private readonly UserManager _userManager;\n    public AspNetIdentityProfileService(UserManager<IdentityUser> userManager)\n    {\n        _userManager = userManager;\n    }\n\n    async public Task GetProfileDataAsync(ProfileDataRequestContext context)\n    {\n        var subject = context.Subject;\n        if (subject == null) throw new ArgumentNullException(nameof(context.Subject));\n\n        var subjectId = subject.GetSubjectId();\n\n        var user = await _userManager.FindByIdAsync(subjectId);\n        if (user == null)\n            throw new ArgumentException(\"Invalid subject identifier\");\n\n        var claims = await GetClaimsFromUser(user);\n        if (!context.AllClaimsRequested)\n        {\n            var requestedClaimTypes = context.RequestedClaimTypes;\n            if (requestedClaimTypes != null)\n                claims = claims.Where(c => requestedClaimTypes.Contains(c.Type));\n            else\n                claims = claims.Take(0);\n        }\n        context.IssuedClaims = claims;\n    }\n\n    async public Task IsActiveAsync(IsActiveContext context)\n    {\n        var subject = context.Subject;\n        if (subject == null) throw new ArgumentNullException(nameof(context.Subject));\n\n        var subjectId = subject.GetSubjectId();\n        var user = await _userManager.FindByIdAsync(subjectId);\n\n        context.IsActive = false;\n\n        if (user != null)\n        {\n            if (_userManager.SupportsUserSecurityStamp)\n            {\n                var security_stamp = subject.Claims.Where(c => c.Type == \"security_stamp\").Select(c => c.Value).SingleOrDefault();\n                if (security_stamp != null)\n                {\n                    var db_security_stamp = await _userManager.GetSecurityStampAsync(user);\n                    if (db_security_stamp != security_stamp)\n                        return;\n                }\n            }\n\n            context.IsActive =\n                !user.LockoutEnabled ||\n                !user.LockoutEnd.HasValue ||\n                user.LockoutEnd <= DateTime.Now;\n        }\n    }\n\n    async private Task<IEnumerable<Claim>> GetClaimsFromUser(IdentityUser user)\n    {\n        var claims = new List<Claim>\n        {\n            new Claim(JwtClaimTypes.Subject, user.Id),\n            new Claim(JwtClaimTypes.PreferredUserName, user.UserName)\n        };\n\n        if (_userManager.SupportsUserEmail)\n        {\n            claims.AddRange(new[]\n            {\n                new Claim(JwtClaimTypes.Email, user.Email),\n                new Claim(JwtClaimTypes.EmailVerified, user.EmailConfirmed ? \"true\" : \"false\", ClaimValueTypes.Boolean)\n            });\n        }\n\n        if (_userManager.SupportsUserPhoneNumber && !string.IsNullOrWhiteSpace(user.PhoneNumber))\n        {\n            claims.AddRange(new[]\n            {\n                new Claim(JwtClaimTypes.PhoneNumber, user.PhoneNumber),\n                new Claim(JwtClaimTypes.PhoneNumberVerified, user.PhoneNumberConfirmed ? \"true\" : \"false\", ClaimValueTypes.Boolean)\n            });\n        }\n\n        if (_userManager.SupportsUserClaim)\n        {\n            claims.AddRange(await _userManager.GetClaimsAsync(user));\n        }\n\n        if (_userManager.SupportsUserRole)\n        {\n            var roles = await _userManager.GetRolesAsync(user);\n            claims.AddRange(roles.Select(role => new Claim(JwtClaimTypes.Role, role)));\n        }\n\n        return claims;\n    }\n}\n\n```\nDisclaimer I found this code somewhere else, it's not my own.\n. ```\npublic class AspNetIdentityProfileService : IProfileService\n    {\n        private readonly UserManager _userManager;\n    public AspNetIdentityProfileService(UserManager<IdentityUser> userManager)\n    {\n        _userManager = userManager;\n    }\n\n    async public Task GetProfileDataAsync(ProfileDataRequestContext context)\n    {\n        var subject = context.Subject;\n        if (subject == null) throw new ArgumentNullException(nameof(context.Subject));\n\n        var subjectId = subject.GetSubjectId();\n\n        var user = await _userManager.FindByIdAsync(subjectId);\n        if (user == null)\n            throw new ArgumentException(\"Invalid subject identifier\");\n\n        var claims = await GetClaimsFromUser(user);\n        if (!context.AllClaimsRequested)\n        {\n            var requestedClaimTypes = context.RequestedClaimTypes;\n            if (requestedClaimTypes != null)\n                claims = claims.Where(c => requestedClaimTypes.Contains(c.Type));\n            else\n                claims = claims.Take(0);\n        }\n        context.IssuedClaims = claims;\n    }\n\n    async public Task IsActiveAsync(IsActiveContext context)\n    {\n        var subject = context.Subject;\n        if (subject == null) throw new ArgumentNullException(nameof(context.Subject));\n\n        var subjectId = subject.GetSubjectId();\n        var user = await _userManager.FindByIdAsync(subjectId);\n\n        context.IsActive = false;\n\n        if (user != null)\n        {\n            if (_userManager.SupportsUserSecurityStamp)\n            {\n                var security_stamp = subject.Claims.Where(c => c.Type == \"security_stamp\").Select(c => c.Value).SingleOrDefault();\n                if (security_stamp != null)\n                {\n                    var db_security_stamp = await _userManager.GetSecurityStampAsync(user);\n                    if (db_security_stamp != security_stamp)\n                        return;\n                }\n            }\n\n            context.IsActive =\n                !user.LockoutEnabled ||\n                !user.LockoutEnd.HasValue ||\n                user.LockoutEnd <= DateTime.Now;\n        }\n    }\n\n    async private Task<IEnumerable<Claim>> GetClaimsFromUser(IdentityUser user)\n    {\n        var claims = new List<Claim>\n        {\n            new Claim(JwtClaimTypes.Subject, user.Id),\n            new Claim(JwtClaimTypes.PreferredUserName, user.UserName)\n        };\n\n        if (_userManager.SupportsUserEmail)\n        {\n            claims.AddRange(new[]\n            {\n                new Claim(JwtClaimTypes.Email, user.Email),\n                new Claim(JwtClaimTypes.EmailVerified, user.EmailConfirmed ? \"true\" : \"false\", ClaimValueTypes.Boolean)\n            });\n        }\n\n        if (_userManager.SupportsUserPhoneNumber && !string.IsNullOrWhiteSpace(user.PhoneNumber))\n        {\n            claims.AddRange(new[]\n            {\n                new Claim(JwtClaimTypes.PhoneNumber, user.PhoneNumber),\n                new Claim(JwtClaimTypes.PhoneNumberVerified, user.PhoneNumberConfirmed ? \"true\" : \"false\", ClaimValueTypes.Boolean)\n            });\n        }\n\n        if (_userManager.SupportsUserClaim)\n        {\n            claims.AddRange(await _userManager.GetClaimsAsync(user));\n        }\n\n        if (_userManager.SupportsUserRole)\n        {\n            var roles = await _userManager.GetRolesAsync(user);\n            claims.AddRange(roles.Select(role => new Claim(JwtClaimTypes.Role, role)));\n        }\n\n        return claims;\n    }\n}\n\n```\nDisclaimer I found this code somewhere else, it's not my own.\n. @ericgreenmix Are those gists available?\n. ",
    "mackvatoloco": "I believe you should also implement IProfileService. \n. AddIdentity, AddIdentityServer and UseIdentityServer. I don't think you need to add Identity (UseIdentity) to the pipeline.\n. services.AddIdentity() adds the services required from Identity to the DI container. With that should should be able to use it in Controllers or any class you need. What exactly isn't working?\n. It's because you are also using entity framework. You need to add the services for that. Check the sample. https://github.com/aspnet/Identity/blob/dev/samples/IdentitySample.Mvc/Startup.cs\n. Just add the services, don't add Identity to the pipeline. I don't think they conflict, but you will have 2 separate middleware doing cookie authentication. \nThe thing is UserManager expects an IUserStore. EF provides an implementation for this, or you could provide your own. So if you want to keep using EF just add entity framework stores (you will need to provide a dbcontext). If you want to build your own user store you can, just be aware that user manager assumes this is a fat class, and that it implements other interfaces.\n. V3 had the UI embedded. In V4 you have full control over the UI. You can either create your own UI in any technology you prefer, copy-paste the UI provided in the example or wait for the nuget package with default UI/Templates they will eventually provide. \nSo, if you want default UI and are in a hurry, copy-paste (either in the same project or in another), if not in a hurry, wait for the separate nugget package. \nFor more: https://leastprivilege.com/2016/01/11/announcing-identityserver-for-asp-net-5-and-net-core/\nHope this helps.\n. > Is a brute force not a worry due to the number of combinations?\nAn access token is a JWT, which means it is signed (assures the JWT has not been tampered with) and encoded. So I don't think brute forcing a token is a concern. Of course there are other concerns with the use of access tokens like XSRF (if you are using cookies), man in the middle attacks, poorly validated tokens, etc. But most of this have a known solutions.\n\nIs it ok to have the same ClientId and Secret for every install of the application\n\nYes. Just remember that ClientId and Secret are the application's credentials, so they have to be safeguarded.\n\nShould I have a different ClientId and Secret for every installation of the application in the wild\n\nIt depends on your business rules. But just consider that the authorization server must know of the client. So in this scenario, for every installation of the application you would have to \"inform\" the authorization server that there is a new client(for example having the user \"manually\" request a ClientId and secret from the authorization server).\n\nor is there a better way such as passing through a user ID as well and linking that to the refresh token?\n\nYou should use the SubjectId standard claim for this (sub). So yes, you could \"link it\" I guess along with any other claims you deem necessary. But if you are worried about the fact that access tokens and refresh tokens are self contained tokens (they have the information required to be granted authorization and don't need to be checked by the authorization server once granted), consider using reference tokens instead (which use the introspection end point) to have more control over their lifetime. For more on reference tokens and introspection: https://leastprivilege.com/2015/11/25/reference-tokens-and-introspection/\nHope this helps.\n. Yes my bad, reference tokens are opaque tokens. \nI don't think is a good idea to resend the UserId outside the access token.\nI believe it is overkill.\n. ",
    "hmheng": "Thanks for sharing. In the startup.cs, should I use service.addidentity and app.useidentity() along with app.useidentityserver()?\n. hmm, if I don't add that, the usermanager and signinmanager from aspidentity isn't working. is there anything I missed out?\n. I got this error...\n```\nAn unhandled exception occurred while processing the request.\nInvalidOperationException: Unable to resolve service for type 'Microsoft.AspNet.Identity.IUserStore1[Microsoft.AspNet.Identity.EntityFramework.IdentityUser]' while attempting to activate 'Microsoft.AspNet.Identity.UserManager1[Microsoft.AspNet.Identity.EntityFramework.IdentityUser]'.\nMicrosoft.Extensions.DependencyInjection.ServiceLookup.Service.PopulateCallSites(ServiceProvider provider, ISet`1 callSiteChain, ParameterInfo[] parameters, Boolean throwIfCallSiteNotFound)\n```\nFollowing is my code for startup.cs\n```\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Threading.Tasks;\nusing Microsoft.AspNet.Builder;\nusing Microsoft.AspNet.Hosting;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing Microsoft.Extensions.Logging;\nusing System.Security.Cryptography.X509Certificates;\nusing Microsoft.Extensions.PlatformAbstractions;\nusing System.IO;\nusing TEST_02_01.Configuration;\nusing TEST_02_01.Extensions;\nusing Microsoft.AspNet.Identity.EntityFramework;\nusing IdentityServer4.Core.Services;\nusing TEST_02_01.Services;\nnamespace TEST_02_01\n{\n    public class Startup\n    {\n        private readonly IApplicationEnvironment _environment;\n        public IConfigurationRoot Configuration { get; set; }\n        public Startup(IHostingEnvironment env, IApplicationEnvironment environment)\n        {\n            _environment = environment;\n        // Set up configuration sources.\n        var builder = new ConfigurationBuilder()\n            .AddJsonFile(\"appsettings.json\")\n            .AddEnvironmentVariables();\n\n        if (env.IsDevelopment())\n        {\n            // This will push telemetry data through Application Insights pipeline faster, allowing you to view results immediately.\n            builder.AddApplicationInsightsSettings(developerMode: true);\n        }\n        Configuration = builder.Build();\n    }\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        var cert = new X509Certificate2(Path.Combine(_environment.ApplicationBasePath, \"idsrv4test.pfx\"), \"idsrv3test\");\n\n        var builder = services.AddIdentityServer(options =>\n        {\n            options.SigningCertificate = cert;\n        });\n\n        builder.AddInMemoryClients(Clients.Get());\n        builder.AddInMemoryScopes(Scopes.Get());\n\n        services.AddIdentity<IdentityUser, IdentityRole>();\n\n        builder.AddCustomGrantValidator<CustomGrantValidator>();\n\n        services\n            .AddMvc()\n            .AddRazorOptions(razor =>\n            {\n                razor.ViewLocationExpanders.Add(new TEST_02_01.UI.CustomViewLocationExpander());\n            });\n        services.AddTransient<TEST_02_01.UI.Login.LoginService>();\n        services.AddTransient<IProfileService, ProfileService>();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env, ILoggerFactory loggerFactory)\n    {\n        loggerFactory.AddConsole(LogLevel.Verbose);\n        loggerFactory.AddDebug(LogLevel.Verbose);\n\n        app.UseDeveloperExceptionPage();\n        app.UseIISPlatformHandler();\n\n        app.UseIdentityServer();\n\n        app.UseStaticFiles();\n        app.UseMvcWithDefaultRoute();\n    }\n\n    // Entry point for the application.\n    public static void Main(string[] args) => WebApplication.Run<Startup>(args);\n}\n\n}\n```\n. sorry ya, with AddIdentity, UseIdentity and UseIdentityServer. will this conflict with IdentityServer?\n. I'm trying out with TheRubble's code, but the IdentityUser requires AspIdentity's EF's IdentityUser. did I make it wrongly?\n. Thanks buddy, let me try it out again. I actually simply would like to make use of aspidentity's db.. hope I can figure it out with your further helps :)\n. Now I code up the ProfileService, LoginService with userManager and signInManager. \nI found that if not using app.UseIdentity() to the pipeline, it will throw me following error.\n```\nAn unhandled exception occurred while processing the request.\nInvalidOperationException: No authentication handler is configured to handle the scheme: Microsoft.AspNet.Identity.Application\nMicrosoft.AspNet.Http.Authentication.Internal.DefaultAuthenticationManager.d__13.MoveNext()\n```\n. if I added Useidentity(), it works, but when it comes to sign out, users has to sign out separately from client app and idserver itself.\n. I'm using test cert, but it throws me error 500 on azure deployment with following error, even trying with sample copy.\nInternal.Cryptography.CryptoThrowHelper+WindowsCryptographicException\nThe system cannot find the file specified\nat Internal.Cryptography.Pal.CertificatePal.FromBlobOrFile(Byte[] rawData, string fileName, string password, X509KeyStorageFlags keyStorageFlags)\nat System.Security.Cryptography.X509Certificates.X509Certificate..ctor(string fileName, string password, X509KeyStorageFlags keyStorageFlags)\nat hello_2016_01.Startup.ConfigureServices\n. Thanks. It works perfectly. =D\nI guess I found the problem, it is due to the changes in RC2 directory whereby we must have  project.json with \"publishOptions\" to include the folder \"UI\" to allow view files and maybe we can have \"Certificate\" folder to include the signed cert?\nI encounter similar issue with my RC2 project, so I created following post, hope it helps:\nhttp://www.cubicurve.com/blog/asp-net-core-r2-files-in-root-path-are-not-included-when-publishing-to-azure\n. i'm sorry, but I couldn't retrieve the log as it is published on azure webapp. is there anyway that I can get the detailed error message?\n. actually when i set the granttype hybrid for my web client, it works perfectly. But when it comes to my mobile client with implicit, then it just throws me invalid request on ids error page. :(\n. Thanks, I'm trying to set it up. \nBtw, I found an issue when I put responsetype \"id_token token\" in my implicit client configuration for getting access_token and identity token, iIt shows me that invalid_request error. When I set only \"id_token\", it is able to capture the identity token.\n. ",
    "henningst": "A simple standard UI based on Bootstrap is already included in the IdentityServer package. You can see the source code here: https://github.com/IdentityServer/IdentityServer4/tree/dev/src/Host/UI\n\n. I'm not sure if I understand your question. This is the repository for IdentityServer 4. If you want to use Identity Server 3, you'll use that version. IdentityServer 4 is implemented on ASP.NET Core.\nIf you want to use IdentityServer 3 with MongoDB, you could have a look at this:\nhttps://github.com/jageall/IdentityServer.v3.MongoDb\nI have written a sample for IdentityServer 4 using MongoDB here:\nhttps://github.com/henningst/IdentityServer4-MongoDB-Sample/\n. ",
    "nicolasr75": "Thanks, wasn't aware of that.\n. ",
    "ash23": "OK thanks for the clarification and for the quick response!\n. ",
    "AllenMaz": "I try to Request code from IdentityServer by:\nhttp://localhost:11242/connect/authorize?client_id=codeflow&response_type=code&scope=api&redirect_uri=http://localhost:27898/Login\nbut  get error:\nunauthorized_client The client application is not known or is not authorized.\nFllow is my AuthorizationServer client code:\n               new Client\n                {\n                    ClientId = \"codeflow\",\n                    ClientName = \"Authorization Code\",\n                    ClientUri = \"http://identityserver.io\",\n```\n                Flow = Flows.AuthorizationCode,\n                //Specifies allowed URIs to return tokens or authorization codes to\n                RedirectUris = new List\n                {\n                     \"http://localhost:27898/Login\" //Client URI\n                },\n            AllowedScopes = new List<string>\n            {\n                StandardScopes.OpenId.Name,\n                StandardScopes.Profile.Name,\n                StandardScopes.Email.Name,\n                StandardScopes.Roles.Name,\n                \"api\"\n            }\n\n        },\n\n```\nI don't know what i missed?\n. I am sorry .After i read the log ,i found i have write the wrong client_id.The problem has been solved.\nThank you \u3002\n. I want to ask another question. Is UseOpenIdConnectAuthentication Middleware not support code flow in asp.net core? if support , how could i confige the MW?\n. When i use InMemoryClients ,if i set RequireConsent = true,Consent Screen will show,if i set RequireConsent = false,then no Consent Screen ,it works fine.\nBut when i use EF Core, if i set the RequireConsent column to true,then i get an error: \"Invalid object name 'Consents'\",but when i set the  RequireConsent column to false, it works fine and i get a Consent Screen from Implicit flow. Is that a bug in TwentyTwenty.IdentityServer4.EntityFramework7 ?\n. TwentyTwenty.IdentityServer4.EntityFramework7 has no document on github ,i don't know how to set the column value like InMemory .anyone can give me some advice?\n. ",
    "Junicus": "now that rc2 has been release, any word about this endpoint?\n. ",
    "avoxm": "Interesting. Could you please point me to the direction where to look for this. What should be used instead of AuthenticateLocalAsync now ?\n. Thanks @leastprivilege it looks like this approach simplifies the integration a lot. Am I right to conclude that IdentityServer4 doesn't really care about how you validate the credentials and what is the database structure. As long as you populate claims and pass it in ClaimsPrincipal it will know all it needs to know.\n. @leastprivilege not exactly, I want to have it inside access/identity token, I just want to populate claims out of access token. As I have noted I am still doing it by decoding bas64 string and etc, I was just thinking if there are better ways to do it.\n. @leastprivilege sorry probably I am not describing my case clear. \nHere's how login flow looks like : User provides username/pass in a web app, web app uses  TokenClient to request a token that contains sub. So the question is how to decrypt that token in web app properly so to get the sub. At the moment I am decoding the access token \"manually\" and populating claims accordingly, but it makes me think that there must be a better way of doing this. \n. Thanks @leastprivilege, will look into it.\n. ",
    "Padmate": "It seems Azure's Error,but azure logs did't tell me any useful informations.\nWhen my code as follow:\nvar cert = new X509Certificate2(Path.Combine(_environment.ApplicationBasePath, \"MySignCA.pfx\"),\"password1234\");\n            var builder = services.AddIdentityServer(options =>\n            {\n                options.SigningCertificate = cert;\n            });\nthe Azure server return 500 error.\nBut when i change the code as follow:\nvar cert = new X509Certificate2(Path.Combine(_environment.ApplicationBasePath, \"MySignCA.pfx\"),\n                \"password1234\",\n                X509KeyStorageFlags.MachineKeySet | X509KeyStorageFlags.PersistKeySet | X509KeyStorageFlags.Exportable);\nvar builder = services.AddIdentityServer(options =>\n        {\n            options.SigningCertificate = cert;\n        });\nAzure works fine.\nSo,it my self-signed certificate's problem?\n. ",
    "chrisvfabio": "I was having the same issue. I didn't fully understand why Azure couldn't read the cert file, but I managed to get it working using Azure's Cert Store. Upload your signing certificate to your azure web app, and reference the generated thumbnail key from your code. \n(Azure Portal > Web App > Settings > Custom Domains and SSL > Upload Certificate)\nHere is how I load the certificate: \n``` C#\npublic X509Certificate2 LoadCertificate()\n{\n    if (_environment.IsDevelopment())\n    {\n        return new X509Certificate2(Path.Combine(_environment.ContentRootPath, \"your.development.certificate.pfx\"), \"secret\");\n    }\n    else\n    {\n        X509Store certStore = new X509Store(StoreName.My, StoreLocation.CurrentUser);\n        certStore.Open(OpenFlags.ReadOnly);\n    X509Certificate2Collection certCollection = certStore\n        .Certificates\n        .Find(X509FindType.FindByThumbprint,\n        \"XXXX-XXXX-XXXX-XXXX\", // Generated by Azure\n        false);\n\n    if (certCollection.Count > 0)\n    {\n        X509Certificate2 cert = certCollection[0];\n\n        return cert;\n    }\n    certStore.Dispose();\n\n    return null;\n}\n\n}\n```\n``` c#\nvar builder = ...\nvar cert = LoadCertificate();\nbuilder.SetSigningCredentials(cert);\n```\nHope that helps. \n. No problem :)\n. ",
    "mikebridge": "@chrisvfabio Are you deploying IdentityServer4 as a windows-based image?  I am trying to deploy essentially the same code as you on top of the microsoft/aspnetcore docker image and it's giving me the error: System.PlatformNotSupportedException: Unix LocalMachine X509Store is limited to the Root and CertificateAuthority stores. . @brockallen The documentation doesn't give a full description of IProfileService, but am I correct in assuming that with this modification, the claims added by IProfileService.GetProfileDataAsync will be added to both Identity Token and the Access Token, but before 1.0.2 they were only added to the Identity Token?  This seems to be the behaviour I'm seeing when using Implicit Flow and upgrading from QuickStart 7's version 1.0.0 to 1.1.1.\n. It looks like the commit is this one, and it's getting called for the Identity Token here and again for the Access Token in this method here.  So I guess the answer is that IProfileService will normally be queried for both tokens.\n. ",
    "BlackMoon": "Thanks, solved.\nThe reason of\n\nunauthorized_client The client application is not known or is not authorized\n\nwas in RedirectUrl disparity between client on IdentityServers' list and RedirectUrl option in \nOpenIdConnectAuthenticationOptions.\n. Not exactly.\nI also want to see endpoint url in\n1. .well-known/openid-configuration\n2. use by different clients (console, web, api, etc.)\n. > Since the UI is not controller by IS anymore\nAnd what about PostLogoutRedirectUris ? Redirect after logout also not implemented?\n. ",
    "damienbod": "Thanks\n. Sorry, this is working, rechecked it and the URL didn't match one of the URLs in the PostLogoutRedirectUris\n. I have this problem as well, OpenID Connect Implicit Flow. \nhttps://github.com/damienbod/AspNet5IdentityServerAngularImplicitFlow\nI can reproduce it by logging on directly to IdentityServer4, and then starting the SPA and the Implicit Flow login request causes this problem.\nGreetings Damien\n. Ok, thanks\n. ",
    "ispbox": "mackvatoloco, thanks a lot for a detailed description! I will copy-paste existing UI from IdentityServer4/Host application.\n. ",
    "StormOli": "Thanks for the reply,\nI may be wrong but I was under the impression that IdentityServer's refresh tokens are simply a random id with no data such as Sub and no signature.  A brute force would just fire random ID's at the Token Endpoint and hope for a match.\nMy worry was the more users you have the more active refresh id's there are to match against but I've been thinking about it and even if you have a refresh token for every human on the plant, the chance of matching one would still be almost 0. I think the combinations are so big I just can't visualize it.\nIdentity Server seems to use 128bit ID's for the Reference Token Handle which I've increased to 256bit to satisfy my own Anxiety.\nI could lock it down even further by requiring the refresh token in the form UserID.RefreshTokenHandle when sent to the endpoint but I think this is probably overkill?\n. Thanks, I'll leave it as I currently have it then.\n. ",
    "alexsandro-xpt": "+1\n. ",
    "balivo": "It's \"stable\" for production use? Angular client, web api...\n. Tks for answer @leastprivilege... Now I'm looking at samples for configuration process...\n. ",
    "FranciscoJCLus": "Thanks for your quick answer. Is this something that can be done indirectly through the .net core session/cookie or any other mechanism? I'm trying to stick to IdentityServer4 and .net core, but if I cannot make this somehow work, I may have to go back to IdentityServer3, which is less than desirable.\n. I see. So the way it works today is storing all the information of the session in the cookie itself? So if the user hits a second instance of identity server (with the same data protection settings), this second instance just checks that the expire date is in the future to consider a session valid, for example?\n. Our requirement is to be able to list the open sessions for a given user, and have the possibility to terminate any of them, forcing the user to re-login the next time he/she tries to use an application with terminated session. Would it be possible to achieve that combining identityserver and the native asp.net core session/cookie approach?\n. ",
    "ajtowf": "A bit quick to judge don't you think? The latency is definitely in the identityserver middlewear. You're referring to the long load time from cold start with the non core version but I'm running on core. Also as I described the app is already warm since I've loaded the login page and posted my credentials, it's not the first load, just the first redirect to connect/authorize.\nJust now I had one tab that was waiting on connect/authorize with the title \"submit this form\", while that tab was busy I opened up a new tab and browsed to the identityserver where I was already logged in (due to the RP redirect->login), and I could perform several operations like updating my email adress and whatever until the first tab finally finished and redirected to RP.\nDefinitely not a MS problem.\n. Let me know if you need help mate, just upgraded to RC2, shawn has written an excellent guide, helped me a lot, https://wildermuth.com/2016/05/17/Converting-an-ASP-NET-Core-RC1-Project-to-RC2 \nCheers!\n. ",
    "jkavanaghrdm": "I've read that id_token values can be returned from grants other than the Implicit and Code flows. I'd like to try that but can't figure out if it's possible, and if it is, what the configuration is. Is it supported? Also, is there a relevant sample?\n. ",
    "markgarcia": "I tried to port IdentityServer4 myself to RC2 and found some references, namely Json.Net and IdentityModel2 still doesn't support dotnet core / cli. Aside from that, it's mostly simple renaming references.\n. ",
    "rmja": "Ahh, I didn't know that. Thanks!\n. Reopening. I seems that I really need net451, as I need to deploy to a Service Fabric cluster.\n. Created https://github.com/IdentityModel/IdentityModelv2/pull/2 for net451 support in IdentityModel.\n. Try and add the assemblies like this in the frameworks section in project.json:\n\"frameworks\": {\n    \"net46\": {\n      \"frameworkAssemblies\": {\n        \"System.Runtime\": \"4.0.20.0\"\n      }\n    }\n  }\nI have not tried it with net462 though.\n. ",
    "bburman": "I would also like support for net451. .NET 4.6.2 still appears to be in preview.\n. Unfortunately this won't work, as the latest version of IdentityServer4 requires .NET 4.6.2 or above (because it targets netstandard1.5). If I augment your suggestion above, target net462, and add the missing assemblies to the frameworkAssemblies section, they are still not copied to the bin folder.\nThis may be, more or less, more of a problem with the .NET 4.6.2 installer. It appears that all of the .NET assemblies are installed in the Program Files (x86)\\Reference Assemblies\\Microsoft\\Framework.NETFramework\\v4.6.2 directory:\n\nThese three files are missing from this directory. When I add them to the frameworkAssemblies section and then view the Add Reference dialog from within Visual Studio, it looks like this:\n\nNotice the version number picked up by Visual Studio is 1.0.0.0, signifying that it can't find those assemblies...\n. My eyes may be deceiving me, but it looks as if netcoreapp1.0 slid to netstandard1.6 over the weekend:\nhttps://github.com/dotnet/corefx/blob/master/Documentation/architecture/net-platform-standard.md\n. I had the same problem. It looks like you are targeting dnx451 in your frameworks section. Apparently the newest version of IdentityServer4 is currently only supporting netstandard1.5, which would be .NET 4.6.2 and above.\n. ",
    "ericgreenmix": "Just FYI, our https://github.com/2020IP/TwentyTwenty.IdentityServer4.EntityFrameworkCore has been ported to RC2 IS4 beta 2. Will be published to nuget tomorrow. Not sure what the purpose of his fork was here...\n. ",
    "BurningEnlightenment": "\nMy eyes may be deceiving me, but it looks as if netcoreapp1.0 slid to netstandard1.6 over the weekend\n\n@bburman So what? This just means that some new APIs became consumable by .net core apps. Because this class library targets netstandard 1.5 you can use it from any project targeting netstandard 1.5 or higher (i.e. netcoreapp 1.0 and .net framework 4.6.2 & 4.6.3).\n. ",
    "leo9223": "alright :)\n. @brockallen Thankyou so much.\nnow I have UI folder in my published folder but still the same error :S\n. @brockallen \nIt is working fine while running from visual studio, getting tokens etc...\nonly problem on IIS\nMost probably it is with IdentityServer4 (RC2 Port) because other asp.net core RC2 apps are working fine on IIS.\nI have also tested your authorization server from latest ported samples of IdentityServer4 gives the same error. \n. @brockallen yea yea ASP.NET Core RC2 HelloWorld app is working fine on IIS\n. @brockallen \nhere is the log, created when I browse website\nI don't think anything useful in it :S \n`#Software: Microsoft Internet Information Services 10.0\nVersion: 1.0\nDate: 2016-05-25 13:33:10\nFields: date time s-ip cs-method cs-uri-stem cs-uri-query s-port cs-username c-ip cs(User-Agent) cs(Referer) sc-status sc-substatus sc-win32-status time-taken\n2016-05-25 13:33:10 10.104.0.116 GET / - 85 - 10.104.0.116 Mozilla/5.0+(Windows+NT+10.0;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/50.0.2661.102+Safari/537.36 - 500 0 0 736\n2016-05-25 13:33:10 10.104.0.116 GET /favicon.ico - 85 - 10.104.0.116 Mozilla/5.0+(Windows+NT+10.0;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/50.0.2661.102+Safari/537.36 http://10.104.0.116:85/ 500 0 0 3\n2016-05-25 13:33:14 10.104.0.116 GET / - 85 - 10.104.0.116 Mozilla/5.0+(Windows+NT+10.0;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/50.0.2661.102+Safari/537.36 - 500 0 0 0\n2016-05-25 13:33:14 10.104.0.116 GET /favicon.ico - 85 - 10.104.0.116 Mozilla/5.0+(Windows+NT+10.0;+WOW64)+AppleWebKit/537.36+(KHTML,+like+Gecko)+Chrome/50.0.2661.102+Safari/537.36 http://10.104.0.116:85/ 500 0 0 0`\n. ",
    "dmigo": "@leastprivilege I forgot to mention that the token is produced by IdentityServer4. Does this change anything?\n. @leastprivilege but jwt.io says:\n\nInvalid Signature\n. @leastprivilege  I've tried to use some-secret which is the secret in my case. This is the secret of the scope, for which the token was created. Is it right?\n. @leastprivilege  Ok, I'll try to figure this out. Thank you for your time!\n. \n",
    "xyting": "@liupengf12 \nThat maybe is the can't configurable issue. you can do like I have done, RigoFunc.IdentityServer\n. ",
    "liupengf12": "@xyting Thanks for your reply, if choose your solution I have to add the url of each APIs, it is not a good solution. It seems I have to split the identity server into a new project.\nOr I can fork the identityserver4 and disable the CorsPaths validation :)\n. ",
    "jgilbert1": "Same result on RTM .netcore with beta4\n. ",
    "zngreg": "where to put AllowAccessTokensViaBrowser on the server or client?\n. Thanks, i got it.\n. ",
    "Tazer": "Noticed it was the same problem in Samples when I opened them. So to reproduces , just open MVC and API.sln and check startup / or try to build:\n\n@leastprivilege \n. ",
    "ericvan76": "What a quick fix! Thanks.\n. ",
    "Lutando": "Is this related to the endsession endpoint?\n. For legacy reasons to be honest.Some of our clients have thier secrets stored in plaintext while the others are hashed. The vast majority of them are stored as hashed secrets. We also have a sort of portal to manage clients and we would like to have some of these client_ids and client secrets in 'human' readable form for ease of remembering them. These are mostly for our internal prototype projects.\n. Ahh my apologies they are two separate issues. I was being an idiot :) the latter issue isnt part of this one at all, just my configuration silliness. \n. I also just ran into this. \nIt specifically occurs in DiscoveryEndpoint.cs : line 265\nquick repro step is to just change the target framework of any of the quickstart frameworks to net451-ne461.\n. ",
    "diogodamiani": "What does it mean? Are you going to control the views again, like in IS3?\n. What does it mean? Are you going to control the views again, like in IS3?\n. You should set the signing credential. Call the SetTemporarySigningCredential() extension method or one of SetSigningCredential overloads.\n. That's because before you were calling AddDeveloperIdentityServer and now AddIdentityServer. The AddDeveloperIdentityServer already set the temporary signing credential.\nHave a look here how can you set the temporary: https://github.com/diogodamiani/IdentityServer4.MongoDB/blob/dev/src/Host/Startup.cs\nAnd here how can you set a X509 certificate: https://github.com/IdentityServer/IdentityServer4.Samples/blob/dev/Docker/src/IdentityServer/Startup.cs\n. I think you can use both strategies. Publish with the app or get it from a certificate store.\n. I'm sorry I did not start a discussion before. :(\nI think it's clearer for anyone who uses the code not to instantiate an object that is defined in another class (IdentityResources). When you look for standard types, they are usually in the same class that defines the type.. Do you mean \"needed to be changed\" by you or by the consumers of the API? The way it's in the PR allow changes on the default objects if it's necessary, by the spec (you), but not by consumers. \nAnyway, as Dominick said, I should have started a discussion before have sent the PR.. ",
    "Carl-Hugo": "I tend to agree that it would be a good idea to allow customization.\nThis could easily be done by removing the route pattern of the HttpGet/HttpPost attributes from the controllers. Since an attribute need constants they cannot be used with customization in mind (well adding custom Get/Post attributes could solve that problem). More on that, it would also help achieve a greater separation of concerns (routes are routes and controllers are controllers).\nThis would lead to URL like \"/login\", \"/logout\" and so on.\nFinally, to still use the \"ui/\" pattern, a developer could add a custom route pattern similar to ui/{controller}/{action=Index}/{id?} to MVC routing middleware (im not too sure how to do that in asp.net core, but im pretty sure it is simple). Same thing goes for \"account/\" or any other URL patterns that a developer want.\nOn another note, as my first post on GitHub, i'd also like to point out that I am pretty happy to see this project ported to .net core, good job :)\n. ",
    "Kouloukos": "Thank you Dominick for the quick reply...\nWhy wouldn't you use ClaimsPrincipal.Current anymore? \nWhat do you think about my Solution's setup?\nDo you think IdentityServer belongs to the Infrastructure layer in a DDD world?\nDo you think that everything is correct regarding my IdentityServer's settings in Startup.cs?\nI am using RousourceOwner flow for testing purposes (and my inhouse web application for integrations management) and later on when we build apps for mobile devices that consume my WebAPI I am planning to use implicit flow for their auth.\nI apologize for the numerous questions but your opinion is valuable to me (and all of us here I suppose).\n. ",
    "rodrigocezar": "@brockallen It is safe and right to use claim to save TenantID? \n. ",
    "MaorWithM": "You are right. excuse me for the mistake,\nI should have posted the issue on \"IdentityServer3.AccessTokenValidation\"\n. ",
    "kbasaris": "Thank you for the immediate response\n. ",
    "filipw": "Async is absolutely hungarian notation, get rid of it. \nI never use it personally unless you want to overload a sync method (since you can't overload by return type)\n. ",
    "imranbaloch": "Another suggestion keep it just for back compatibility(with IdvSvr 3) and make it obsolete.\n. ",
    "DerAlbertCom": "Getting rid of  *Async makes not really sense. I think a convention is needed to know which methods are awaitable. And in my Code ihave Sync and Async Methods. Because normale local computation does not need to be Async. And not knowing which is awaitable or not is bad for productivity. \nAlso it is not even less typing on using sync method, because most times i complete method names with Tab i dont write the complete name there.\n. ",
    "michael-x": "Worst thing, when you are calling a method and you are not aware that it is Async and therefore you forgot to add the await and half of the time it works, because the Task is short, but half the time it doesn't and it's right in the middle of other async logic and you try to debug it, but you can't reproduce it. On GetResultAsync you could say GetResult, because when trying to use the result you'd notice that you have to await it, but for something like DoSomethingAsync, naming it DoSomething instead just asks for problems.\n. If you need a hand, let me (or my alter ego @mpoettgen) know.\n. ",
    "dementeddevil": "I added a method to IClientStore2 (derived from IClientStore) that allows fetching CORS origins for enabled clients (InMemoryCorsPolicyService currently looks at all clients whether enabled or not)\nSeems that we are missing the ability to optionally restrict a given CORS origin to specific methods (which would be nice) - is this something you anticipate adding in the future?\n. ",
    "Simply-Awesome": "I have a similar issue where claims of type role (and their values) are not being returned.\nWhen I use Id4 beta 5, and the Resource Scope is configured as:\nnew Scope\n            {\n                Name = \"api1\",\n                DisplayName = \"API 1\",\n                Description = \"API 1 features and data\",\n                Type = ScopeType.Resource,\n                //IncludeAllClaimsForUser = true,\n                Claims = new List<ScopeClaim>\n                {\n                    new ScopeClaim(\"role\")\n                }\n            }\nThe role claims ARE returned (or available) at my Resource \"api1\". So if I were to log in with \"alice\" on an MVC Hybrid flow, I expect to see 2 role claims. One \"Admin\" and the other \"Geek\". I do see this.\nHowever, when I use Id4 (on one of the later builds after beta 5 from Git), with the same scope configuration, the role claims are NOT returned.  All I see is a single role claim of type \"some_role\". A quick source file search confirms this is simply some default claim set. A comment out still reveals the issue is still present. For now, I will continue with beta 5.\n. ",
    "ChristianRiedl": "Thank you for your answer.\nMy application is not very critical regarding security, and so I currently use an idsrv3 based solution using implicit flow and \"Remember my Login\" functionality. Now I started to port to idsrv4 and I am afraid my customers will be unhappy when they have to login whenever they start a browser session. \nSo I started to analyze the difference between idsrv3 and idsrv4 login flow of http messages and detected that idsrv4.session cookie has only session lifetime. Than I compared idsrv3 and idsrv4 sources and found that this functionality is not available any more (or not until now) in idsrv4. \"Remember me\" checkbox is ignored. Can you tell me if it is planned to support it in future versions ? If not, can you give me a hint how I can add this functionality ?\nOf course I can tinker some cookie storage logic, but I want to do it in an OIDC compliant way.\nI searched in the OpenID connect specs, but got no answer for my problem. \n. I understand that \"remember me\" is not really part of the OIDC specs and therefore idsrv4 will not support this functionality (other then idsrv3). So I have the choice to continue using idsrv3 or add the missing functionality on my side. Ok, thanks, I have the info needed to decide.      \n. Great to hear, implementing it inside idsrv4 will be a much better solution than tinkering arround !!\n. It is easy to work arround and create the IdentityServerPrincipal and use it to call AuthenticationManager.SigninAsync. But this is only the half Story. I am not able to deliver the AuthenticationProperties including IsPersistent and ExpiresUtc to the OpenIDConnect and cookie handler in my MVC application.\nThe authentication properties are serialized properly to a AspNetCore.Application cookie but the authentication properties read by the OpenID authentication handler in the MVC application looks different. I will continue to analyze it but I have not enough knowledge of the AspNetCore authentication components. I will try to debug it.\n. I have now a solution where I set the cookie properties to persistent with some expiration date in my MVC's apps OpenIdConnect.OnTokenValidated event. Than I was looking how AccountController.Login can deliver the \"Remember Me\" checkbox info together with the implicit flows authentication response. This response contains an expires_in field but it contains the \"constant\" clients token lifetime parameter. The state contains the serialized AuthenticationProperties but it cannot be changed during login because as I understand, the specs require that they are a copied from the request state field. So in my current solution I saw only the chance to use  some claim to deliver the \"remember me\" information. I misused standard \"amr\" claim for this purpose and for my purpose \"remember me\"  is working now as expeected. But I think it is not really a clean solution so I studied how you solved the problem in idsrv3 and found out that it was a quite different approach, and I think you surely have a good reason not to do it in the same way in idsrv4. Anyhow my solution is working for my needs.    \n. You are right, it seems to work. I tried the same thing in the beta5 version and it failed for some  reason.\nSo I assumed that I have to make the client cookie persistent, which is a bit more complicated.\nThank you.\n. ",
    "baluubas": "Of course\nHere is what the logs say:\ntrce: IdentityServer4.Hosting.IdentityServerMiddleware[0]\n      Invoking IdentityServer endpoint: IdentityServer4.Endpoints.EndSessionEndpoint\ninfo: IdentityServer4.Endpoints.EndSessionEndpoint[0]\n      Processing singout request\ndbug: IdentityServer4.Validation.EndSessionRequestValidator[0]\n      Start end session request validation\ndbug: IdentityServer4.Validation.TokenValidator[0]\n      Start identity token validation\nfail: IdentityServer4.Validation.TokenValidator[0]\n      Unknown or diabled client: http://localhost:60211/resources.\nwarn: IdentityServer4.Validation.EndSessionRequestValidator[0]\n      Error validating id token hint.\n{\n        \"SubjectId\": \"unknown\",\n        \"Raw\": {\n          \"id_token_hint\": <removed>\n        }\n      }\nSo it appears  that audience claim value (in my case http://localhost:60211/resources) is being used to check the existence of a client (using IClientStore.) \nI was expecting the client id to equal the value of the claim with type JwtClaimTypes.ClientId. (That said, I'm not quite sure what the audience claim is intended for). \n. Yes, spot on. As you said, I was sending the access_token and not the id_token. Sending the correct token fixed my problem.\nThanks for for the help.\n. ",
    "AndyPook": "Hmmm, ok... \nIt looks like the LoginService (in Host) does need to add to the collection (shouldn't it be InMemoryLoginService?). But the services in IS4 do not (at the moment)\nI bumped into this because I tried to use a different collection type. List can be a little constraining.\nIt looks like the direction is for IS4 to be \"readonly\" in relation to the \"stores\". It's another parts responsibility to maintain the stores.\nIt could be argued that AddInMemoryUsers should take IEnumerable and LoginService should take ICollection. It's then up to the dev to pass the right instance into each to achieve the desired effect.\n. things always look simple when you first start. Then the detail devil sticks its head up.\nUsing the interfaces is \"better\" as it better expresses the needs of the dependent class. But, in this case, the same collection instance needs to be used by two dependents with different requirements. \nSo you either\n1. Just use List (or ICollection) and accept that some classes (ie InMemoryProfileService) take a dependency that is over featured\n2. register the collection twice (IEnumerable and ICollection) but this may seem a little weird/awkward.\nHowever, you could also argue that this shouldn't be a concern of IS4 at all. It only needs abstractions like IProfileService. This only seems like an issue because there are implementations like InMemoryXYZ within IS4.\nMaybe the \"solution\" is to remove the InMemory implementations from IS4 and boil it down to its essentials. Would you ever use InMemory for any reason other than testing? Maybe they belong in the Host project which is a demo/sample/debugging construct. Maybe in a separate proj, \"IndentiServer4.InMemory\". Then it would sit as a peer with IndentityServer4.EF/TableStorage/DocumentDB/whatever.\n(not sure what to think about the DefaultXYZ implementations)\nSo, from the library developers pov, you're just saying \"here's what the library needs\" (ie IProfileService and friends). Implementations of these services are a different concern (ie storage and admin).\nThoughts?\n. rebased on dev 87a0c0 \"pkce integration tests\".\nbut see discussion on #202 \n. ",
    "mpoettgen": "See also #179.\nI'm not sure, but InMemory may be a valid option for transient data (e.g. something like a RefreshToken), while for persistent data (Clients, Scopes, etc.) it would only be used for testing. So could be good to keep these apart (#208)\n. ",
    "ncoblentz": "Great, thanks for giving some direction! Here's what I ended up using and it worked great! I added something similar to my MVC application as well to eliminate the need for other workarounds I've implemented.\napp.Use(async (context, next) =>\n        {\n            context.Request.Scheme = \"https\";\n            HostString httpsHostString = new HostString(\"loadbalancer\", 1943);\n            context.Request.Host = httpsHostString;\n            await next.Invoke();\n        });\n. ",
    "tillig": "If your load balancer uses the X-Forwarded-* or X-Original-* headers, the ForwardedHeadersMiddleware could help.\n. ",
    "automatonic": "OK. Thanks!\n. ",
    "Knaackee": "I thought i was on rc1 but for some reason dotnet restore used beta5. After removing the packages from project.json and re-adding it + using AddIdentityServerQuickstart and AddInMemoryStores()  the problem is gone.\nThank you very much!\n. ",
    "senzacionale": "I used it so:\n```\nvar paths = new List(Constants.ProtocolRoutePaths.CorsPaths);\n            paths.AddRange(CorsOptions.RoutePaths);\n        // just for allow more route paths\n        services.AddTransient<ICorsPolicyProvider>(provider =>\n        {\n            return new PolicyProvider(\n               provider.GetRequiredService<ILogger<PolicyProvider>>(),\n               paths,\n               provider.GetRequiredService<ICorsPolicyService>());\n        });\n        services.AddCors();\n\n```\n. Do you have any idea how to solve this problem?\n. ",
    "RolandGuijt": "Thanks!\n. You can use IdentityServerConstants instead.\n. Duplicate of #269 \n. ",
    "BrettJaner": "Thanks all!\n. ",
    "ravetroll": "They are not all in IdentityServerConstants.\n. ",
    "maganuk": "Thanks for the lead. I've implemented the Validator. How can I get identityserver4 to use it? I cant find any samples or issues around it.\nThanks\n. Already tried that:\nservices.AddTransient<ICustomTokenRequestValidator, MyTokenRequestValidator>();\nstill doesn't get called.\nHere's how I'm implementing:\npublic class MyTokenRequestValidator: ICustomTokenRequestValidator\n{\n    public Task ValidateAsync(CustomTokenRequestValidationContext context)\n    {\n        return Task.FromResult(0);\n    }\n}\n. BTW I'm using the implicit flow and I'm hoping this breakpoint should be hit every time the app does a silent refresh and gets a new token.\nIs this correct?\n. My bad, It indeed is a silent renewal and not a refresh token. Here's describing my exact issue:\nI have two apps (an administration spa and a customer facing MVC app) which are both using a common user database. I have managed to implement two separate login pages for each of the apps based on the client Id from the IdentityServerInteraction service. So, users are allowed to login Into either of the apps based on the their role, which is working fine. Both the apps use a common web api as their data source. The problem is that since the user may be perpetually logged into the spa and the token to access the api is continuously silently renewed , at some point the administrator may decide to kick off the user from the required role so that he is unable to access the administration app. At this point I would like for the user to be logged out from the administration app and the silent renewal should fail.\nSo I would like to do a role check every time their is a silent renewal. \nNow you mentioned that you are still not done redesigning the auth pipeline. Do you expect something will be made available where I can do these checks in the final version of identity server 4 or my only option is to use the iCustomAuthorizationRequestValidator to do this check?\nThanks\nBest Regards\nVishal\n. ",
    "liamdawson": "Via a login endpoint. In this instance, the idp claim issue arose after automatically being accepted as being logged in (via cookies).\n. Entirety of the login endpoint:\n```\n        [AllowAnonymous]\n        [HttpPost]\n        public async Task Login(LoginViewModel model, string redirectUrl = null)\n        {\n            if (!ModelState.IsValid)\n            {\n                var errors = ModelState.Values.SelectMany(v => v.Errors).Select(e => e.ErrorMessage ?? e.Exception?.Message); \n                _logger.LogWarning(\"Login request was invalid. Errors: {errors}, Password provided for {username}: {password_provided}.\",\n                    errors,\n                    model.Email,\n                    !string.IsNullOrEmpty(model.Password));\n                return StatusCode(StatusCodes.Status400BadRequest);\n            }\n        var result = await _signInManager.PasswordSignInAsync(model.Email,\n            model.Password,\n            model.RememberMe ?? false,\n            true);\n\n        if (result.Succeeded)\n        {\n            return Redirect(string.IsNullOrEmpty(redirectUrl) ? \"/\" : redirectUrl);\n        }\n\n        return StatusCode(StatusCodes.Status403Forbidden);\n    }\n\n```\n(which wasn't called in this instance, because already logged in)\n. https://docs.asp.net/en/latest/security/authentication/identity.html\nhttps://docs.asp.net/en/latest/security/authentication/2fa.html\nhttps://github.com/IdentityServer/IdentityServer4.AspNetIdentity\nUse asp.net core Identity to handle the login and 2FA, integrate it with IS4 for the token generation etc.\n. ",
    "kdaveid": "I have made the same experiences. Usually this happens when (in dev) I restart the auth server (IdentityServer4) but not the MVC client and make a new request to an [Authorize]'d method within MVC app. The exact behavior I'll probably see today as I'll go further with implementing.\n. ",
    "ManuelRauber": "I can confirm this behavior using ASP.NET Core Identity, too. \nSPA with Implicit using the popup mode. Code is the same as in your quickstarter examples. \n. ",
    "ralmlopez": "You\u2019re welcome.\nI am learning a lot from your tutorial. Helping fix some spelling and grammar is the least I can do.\nRegards,\nROBERTO LOPEZ,  SR. TECHNICAL CONSULTANT\nMicrosoft Certified Professional\n615-604-0813  | roberto@rhlopez.commailto:roberto@rhlopez.com\nwww.rhlopez.comhttp://www.rhlopez.com/\nBetter People Better Software\nOn Sep 13, 2016, at 7:01 PM, Brock Allen notifications@github.com<mailto:notifications@github.com> wrote:\nthanks again!\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHubhttps://github.com/IdentityServer/IdentityServer4/pull/296#issuecomment-246864774, or mute the threadhttps://github.com/notifications/unsubscribe-auth/AAaWMiToIAzL0GwFx_CQcqD_MKq_z2EMks5qpzltgaJpZM4J8MxY.\n. ",
    "ammar-haider": "Hi Brock, i am not using consents for the time being. Cookie error is seen on the idsvr side.\nThanks\n. all the records created so far have type as authorization_code. \nthe following client conf was used to create database records for clients\n`return new List\n            {\n                //MVC5-A\n                new Client\n                {\n                    ClientId = \"MVC5-A\",\n                    ClientName = \"MVC5 A\",\n                    AllowedGrantTypes = GrantTypes.HybridAndClientCredentials,\n```\n                RequireConsent = false,\n            RedirectUris = new List<string>\n            {\n                \"http://localhost:44306/signin-oidc\"\n            },\n\n            PostLogoutRedirectUris = new List<string>\n            {\n                \"http://localhost:1278/\"\n            },\n\n            ClientSecrets = new List<Secret>\n            {\n                new Secret(\"secret\".Sha256())\n            },\n\n            AllowedScopes = new List<string>\n            {\n                StandardScopes.OpenId.Name,\n                StandardScopes.Profile.Name,\n                StandardScopes.Roles.Name,\n                StandardScopes.OfflineAccess.Name\n            },\n\n        },\n        //MVC5-B client\n        new Client\n        {\n            ClientId = \"MVC5-B\",\n            ClientName = \"MVC5 B\",\n            AllowedGrantTypes = GrantTypes.HybridAndClientCredentials,\n\n            RequireConsent = false,\n\n            RedirectUris = new List<string>\n            {\n                \"http://localhost:1278/signin-oidc\"\n            },\n\n            PostLogoutRedirectUris = new List<string>\n            {\n                \"http://localhost:1278/\"\n            },\n\n            ClientSecrets = new List<Secret>\n            {\n                new Secret(\"secret\".Sha256())\n            },\n\n            AllowedScopes = new List<string>\n            {\n                StandardScopes.OpenId.Name,\n                StandardScopes.Profile.Name,\n                StandardScopes.Roles.Name,\n                StandardScopes.OfflineAccess.Name\n            }\n        },\n        //MVC Core\n        new Client\n        {\n            ClientId = \"MVCCore\",\n            ClientName = \"MVC Core\",\n            AllowedGrantTypes = GrantTypes.HybridAndClientCredentials,\n\n            RequireConsent = false,\n\n            RedirectUris = new List<string>\n            {\n                \"http://localhost:1278/signin-oidc\"\n            },\n\n            PostLogoutRedirectUris = new List<string>\n            {\n                \"http://localhost:1278/\"\n            },\n\n            ClientSecrets = new List<Secret>\n            {\n                new Secret(\"secret\".Sha256())\n            },\n\n            AllowedScopes = new List<string>\n            {\n                StandardScopes.OpenId.Name,\n                StandardScopes.Profile.Name,\n                StandardScopes.Roles.Name,\n                StandardScopes.OfflineAccess.Name\n            }\n        }`\n\n```\n. ",
    "iamgurdip": "ASP.NET also supports plugging your own DI framework, which is what i do, b/c the ASP.NET default DI does not support advanced things like Decorators. So do you support plugging 3rd party DI framework like ASP.NET does? \n. ",
    "khelben": "Thx!\nAnything I could help with fixing issues, would love to try to help.\n. I've created a small example application on how we have tackled multitenancy https://github.com/khelben/IdsvrMultiTenantExample\nHerein the IdSvr is hosted in a tenant specific route /tenants/<tenant>/...idsvr....\nFor extra safety, we've scoped the IdSvr cookie name with the tenant also.\nI'm interested in knowing what you think about this.\nChristiaan\n. Hey @TooMuchTaurine,\nactually we have the same idea if I understand your point correctly.  \nFrom what I understand is that you want to be able to allow to login a user with the same credentials in the different client applications which are tenant specific. Correct?\nWe've solved this by implementing 2 different auth servers based on IdSvr4. \nThe first is the multi tenant aware version (as shown in the example) hosted on https://auth.example.com/tenants/<tenant>/\nThe other one is a central one hosted on https://auth.example.com/.\nThe general idea is the following: the first one acts as a gateway in which the second one is configured as an external provider.  This also allows us to configure other external providers per tenant.\nSo let's say when one tenant/customer wants to use his own authentication provider (SAML, google, etc...) this can be perfectly done by configuring the external provider for that tenant.\nI'd love to know your ideas/remarks on this architecture.\nI'll be planning another sample where this architecture is used.\nChristiaan\n. This is perfectly normal behaviour, your client's openid middleware expects that an external OpenId Connect provider returns with a request to /signin-oidc.\nThan the client middleware normally redirects to your app, / by default I gueuss.\n. I think so, in fact what you do for authentication a user is up to you.\nWhat you could do is:\n- in the AccountController.Login (GET) let the user enter his email address.\n  Be sure to keep a reference to the returnUrl, this is the url that you should redirect to when a user is authenticated (it links to /connect/authorize/login?...)\n- Send the user a link with your TOTP and let it link to a custom action in your AccountController\n  In that action validate the TOTP and redirect then to the previous returnUrl and voila, the user is logged in. Similar to how AccountController.Login (POST) works\nThat's how I would do it.\n. Well, I understand the reasoning about whether or not to include it in the id token / access token or getting it from the user info endpoint.  And I fully understand that it is my responsability to ensure that the tokens are limited in size.\nWhat I still do not know is how to be able to let IdSvr4 return the role claims and where they should be put (access token / id token / ...)\nAs you suggested it would be beneficial for every implementor to know more on this, so yes a blog post / documentation would be great.\nThanks\n. We have both type of applications.. But the real issue was that in my first example I've added the roles claim to the identity resources, but somehow IdSvr4 didn't include them anymore in the id_token.\nSo what do I need to do more than the code in my original example?. I've found out that the current RC5 does not allow me to include the role claims in the id_token.\nI've tested it with the latest dev branch and re-enabling the AlwaysIncludeUserClaimsInIdToken fixed the issue for me.\nSo I'll wait till the next release.\nBut I'm still wondering what the best approach then would be (without having this AlwaysIncludeUserClaimsInIdToken set to true). ",
    "behrooz66": "@khushalpatel1981  have a look at this, not exactly what you are looking for but can be of your interest:\nSecuring .Net Core Web API with IdentityServer4. I read through the default implementation and there is a tiny piece I cannot decipher, probably due to a missing piece in my programming knowledge. I wonder if you can give me a quick tip.\nThe _event is from the type IEventService which only contains one method called RaiseAsync.\nHowever, in refresh token service implementation, there is the following line:\n_event.RaiseSuccessfulRefreshTokenRefreshEventAsync(....)\nThis \"RaiseSuccessfulRefreshTokenRefreshEventAsync\" is a method of another class called \"IEventServiceExtensions\" that does not event implement that \"IEventService\" interface! How does the _event then invoke a method in that class?\nI'm very confused and any help is appreciated.. @MovGP0 \nMay you please elaborate a bit on where exactly your piece of code can be used?. ",
    "patriksvensson": "Nevermind this. I was completely wrong...\n. ",
    "FrankV01": "Is AddSigningCredential the new name for SetSigningCredential or are these different? . ",
    "dodegaard": "Does it look like this feature will make it to RTM? Saw that it switched from RC4 to RTM. Wondering if you have had time to assess if it is possible to do.  Thanks so much for your work, guys.. From the looks of the dev branch it looks like you guys are close to RTM.  I simply wanted to check back in on this issue and if I can plan on using RTM for this as noted by the updated milestones along the way.  I'm good with examples/guidance on \"custom code\" as noted by Brock above but need to assure the ability to use IdSvr4 for my solution.  Thanks guys.  Amazing work.. Brock....how is it possible to not have a cookie when using ASP.NET Identity along with IdSvr? Thinking on this I needed to ask more of how to achieve that which was my original request. Thanks. . Adding my two cents as I wondered about the change as well.  Per client setting would suffice for my implementation I currently am attempting. Thanks.. ",
    "MichalStaruch": "@brockallen Let me just quote CSP specification:\n\nIn either case, developers SHOULD NOT include either 'unsafe-inline', or data: as valid sources in their policies. Both enable XSS attacks by allowing code to be included directly in the document itself; they are best avoided completely.\n\nWhy IdentityServer can't just use simple and secure policy like default-src 'self'? It would be more secure solution and is compatible with older browsers (CSP1 is widely supported). Chrome uses pretty similar policy for its extensions, and I see no reason why IdentityServer should be any different. It needs XSS protection as much as any other web application. And it should work properly on every popular browser.\nPS CSP article on Chrome Developers portal has some useful hints related to getting rid of inline JS.. ",
    "MartinWa": "We faced this issue for a customer that where running an old version of Edge (v38). After reading this issue and looking at the source I see that there is now an option to support CSP 1.0 browsers (documented here). As this was not mentioned in this issue I want to point it out to anyone else facing this problem:\nc#\nservices.AddIdentityServer(options =>\n{\n    options.Csp.Level = CspLevel.One; // For old Edge \n});. I have been working with this for a while starting with @pierslawson's code. There was however an issue with the returnUrl. The case is that the original website get a call to a protected url. This then redirects to IDS4 and after a successful login should redirect back to the website with a query parameter that incudes the returnUrl. In @pierslawson's example this queryparameter was lost. This is because it is embedded in the OpenIdConnect.AuthenticationProperties. To solve this I added a redirect in the end of the ProcessInteractionAsync. I also added code to set the SSO cookie at IDS4 and made a check to only run the code for users that where not authenticated.\nc#\npublic override async Task<InteractionResponse> ProcessInteractionAsync(ValidatedAuthorizeRequest request, ConsentResponse consent = null)\n{\n    //\n    // https://github.com/IdentityServer/IdentityServer4/issues/853\n    //\n    var isAuthenticated = _httpContextAccessor.HttpContext.User.Identity.IsAuthenticated;\n    var userId = request.GetAcrValues().FirstOrDefault(a => a.StartsWith(\"impersonatedUserId\"));\n    if (isAuthenticated || key == null)\n    {\n        return await base.ProcessInteractionAsync(request, consent);\n    }\n    int userId;\n    string userName;\n    ICollection<Claim> claims;\n    try\n    {\n        // Get or create claim, userId and userName\n    }\n    catch (LoginException e)\n    {\n        Log.Error($\"({e.Id} \" + e);\n        return new InteractionResponse()\n        {\n            Error = e.Message\n        };\n    }\n    await _events.RaiseAsync(new UserLoginSuccessEvent(user.Name, user.UserId.ToString(), user.Name));\n    var props = new AuthenticationProperties\n    {\n        IsPersistent = true,\n        ExpiresUtc = DateTimeOffset.UtcNow.Add(AccountOptions.RememberMeLoginDuration)\n    };\n    // Using IDP4 extension methiod to signin, it is in the Microsoft.AspNetCore.Http namespace and AuthenticationManagerExtensions class\n    await _httpContextAccessor.HttpContext.SignInAsync(user.UserId.ToString(), props, claims.ToArray());\n    return new InteractionResponse()\n    {\n        // Redirect to controller\n        RedirectUrl = \"/impersonae/login\"\n    };\n}\nAnd the controller\n```c#\n[HttpGet]\npublic async Task Login(string returnUrl)\n{\n    // Not shure if all this is needed, copy from AccountControler\n    var context = await _interaction.GetAuthorizationContextAsync(returnUrl);\n    if (context != null)\n    {\n        if (await _clientStore.IsPkceClientAsync(context.ClientId))\n        {\n            return View(\"Redirect\", new RedirectViewModel {RedirectUrl = returnUrl});\n        }\n    return Redirect(returnUrl);\n}\n\nif (Url.IsLocalUrl(returnUrl))\n{\n    return Redirect(returnUrl);\n}\n\nif (string.IsNullOrEmpty(returnUrl))\n{\n    return Redirect(\"~/\");\n}\n\n// user might have clicked on a malicious link - should be logged\nthrow new Exception(\"invalid return URL\");\n\n}\n```\n. ",
    "jbanken": "@raigol Where do you end up on your findings? I am running into something similar.. ",
    "MovGP0": "You can get the access token from the HTTP Header: \ncsharp\nprivate static string GetAccessToken(HttpContext httpContext)\n{\n    var accessToken = (httpContext.Request.Headers as FrameRequestHeaders).HeaderAuthorization;\n    var token = accessToken.First().Remove(0, \"Bearer \".Length);\n    return token;\n}. @behrooz66 usually you don't use this at all, but use a library like IdentityModel instead. . I agree that there is not enough information. I can speculate that this might be a reference token instead of an JWT token, so you can check your configuration for that. \nFor an detailed analysis, you should give an code example of your client settings and describe the HTTP-Requests + URLs from your browser log. \n(ie. in Chrome: hit F12, switch to Browser Log, enable Preserve Log, execute the calls, and note down the URLs from the request/response headers) . I am also wondering how to reconfigure those routes since I found no suitable documentation: \nAccount/ExternalLogin\nAccount/ExternalLoginCallback\nAccount/AccessDenied\nHome. i think the error route could be implemented in IdentityServer4.Endpoints.Results.AuthorizeResult.RedirectToErrorPageAsync() like the following: \ncsharp \nvar errorIdParameter = _options.UserInteraction.ErrorIdParameter;\nvar url = errorIdParameter.StartsWith(\"/\")\n                ? (errorIdParameter.EndsWith(\"/\") ? errorUrl + id : errorUrl + \"/\" + id)\n                : errorUrl.AddQueryString(_options.UserInteraction.ErrorIdParameter, id);. Another way would be to use the Access Token in order to get additional user information via the user information endpoint: \n```csharp\n    [Authorize(\"ApiUser\")]\n    [Route(\"topsecret\")]\n    public sealed class TopSecretController : Controller\n    {\n        private IConfiguration Configuration { get; }\n    public TopSecretController(IConfiguration configuration)\n    {\n        Configuration = configuration;\n    }\n\n    [HttpGet]\n    public async Task Get()\n    {\n        var accessToken = GetAccessToken(HttpContext);\n        if (accessToken == null)\n        {\n            await WriteResponseAsync(\"Could not find access token\", HttpStatusCode.Unauthorized);\n            return;\n        }\n\n        var discoveryClient = new DiscoveryClient(Configuration[\"IdentityServerUrl\"]);\n        var discoveryResponse = await discoveryClient.GetAsync();\n\n        if (discoveryResponse.IsError)\n        {\n            await WriteResponseAsync(\"Could not load discovery document\", HttpStatusCode.InternalServerError);\n            return;\n        }\n\n        var userInfoClient = new UserInfoClient(discoveryResponse.UserInfoEndpoint);\n        var response = await userInfoClient.GetAsync(accessToken);\n\n        if (response.IsError)\n        {\n            await WriteResponseAsync($\"Could not access user info ({response.Error})\", HttpStatusCode.InternalServerError);\n            return;\n        }\n\n        var claims = response.Claims;\n        if (claims.Any(c => c.Type == \"http://schemas.microsoft.com/ws/2008/06/identity/claims/role\" &&\n                            c.Value == \"Admin\"))\n        {\n            await WriteResponseAsync(\"top secret\");\n            return;\n        }\n\n        await WriteResponseAsync(\"access denied\", HttpStatusCode.Forbidden);\n    }\n\n    private async Task WriteResponseAsync(string result, HttpStatusCode statusCode = HttpStatusCode.OK)\n    {\n        var data = System.Text.Encoding.UTF8.GetBytes(result);\n        Response.StatusCode = (int)statusCode;\n        Response.ContentType = \"text/strings\";\n        await Response.Body.WriteAsync(data, 0, data.Length);\n    }\n\n    private static string GetAccessToken(HttpContext httpContext)\n    {\n        var accessToken = (httpContext.Request.Headers as FrameRequestHeaders).HeaderAuthorization;\n        var token = accessToken.First().Remove(0, \"Bearer \".Length);\n        return token;\n    }\n}\n\n```\nAlso, there needs to be a custom implementation of the IProfileService interface\n```csharp\n    public sealed class UserProfileService : IProfileService\n    {\n        private ILogger Logger { get; }\n        private IUserStore Users { get; }\n        private RoleManager RoleManager { get; }\n        private UserManager UserManager { get; }\n        private IClaimManager ClaimManager { get; }\n    public UserProfileService(IUserStore users, IClaimManager claimManager, ILogger<UserProfileService> logger)\n    {\n        Users = users ?? throw new ArgumentNullException(nameof(users));\n        ClaimManager = claimManager ?? throw new ArgumentNullException(nameof(claimManager));\n        Logger = logger ?? throw new ArgumentNullException(nameof(logger));\n    }\n\n    public async Task GetProfileDataAsync(ProfileDataRequestContext context)\n    {\n        context.LogProfileRequest(Logger);\n\n        if (context.RequestedClaimTypes.Any())\n        {\n            var user = await Users.FindBySubjectIdAsync(context.Subject.GetSubjectId(), CancellationToken.None);\n            var additionalClaims = ClaimManager.GetAdditionalClaims(users, CancellationToken.None);\n            context.AddRequestedClaims(additionalClaims);\n        }\n\n        context.LogIssuedClaims(Logger);\n    }\n\n    public async Task IsActiveAsync(IsActiveContext context)\n    {\n        var user = await Users.FindBySubjectIdAsync(context.Subject.GetSubjectId(), CancellationToken.None);\n        context.IsActive = user != null;\n    }\n}\n\n```\nUnfortunately this seems to be undocumented at the moment. The documentation should probably be expanded to address this. . IdentityServer4 v1.5.2. The latest NuGet package. \nBut yes, a newer NuGet package would be welcome. \nThe IEnumerable GetScopes() is taken from the manual. In practice, I use it to populate the ApiResource.Scopes: \n```csharp\n        public static IEnumerable GetApiResources()\n        {\n            var resource = new ApiResource(\"api.mydomain.com\", \"API Server\");\n            resource.Scopes.AddRange(GetApiServerScopes()); // AddRange is a custom extension method\n            yield return resource;\n       // other API resources\n    }\n\n```. yes. that's the intention. . the intention of the issue is to optionally include the user claim type/value-pairs in the access token, such that the API Resource doesn't need an additional roundtrip to the identity server. \nNot sure if this is a good idea, since the API Resource's identity might need checking with TLS key pinning or something similar. . I want to save the round trip to the UserInfo endpoint on every request to the API Resource for performance considerations. . I guess I figured it out: Reference Tokens :-) \nhttp://docs.identityserver.io/en/release/topics/reference_tokens.html . @stalek71 I did. The trick was to implement a custom IProfileService. Unfortunately this is currently not documented. I figured it out by reading the source code. \nThis is mostly infrastructure: \n```csharp\n    public sealed class UserProfileService : IProfileService\n    {\n        private ILogger Log { get; }\n        private IUserStore Users { get; }\n        private IClaimManager ClaimManager { get; }\n        private IHttpContextAccessor HttpContextAccessor { get; }\n    public UserProfileService(IUserStore users, IClaimManager claimManager, IHttpContextAccessor httpContextAccessor, ILogger<UserProfileService> log)\n    {\n        HttpContextAccessor = httpContextAccessor;\n        Users = users ?? throw new ArgumentNullException(nameof(users));\n        ClaimManager = claimManager ?? throw new ArgumentNullException(nameof(claimManager));\n        HttpContextAccessor = httpContextAccessor ?? throw new ArgumentNullException(nameof(httpContextAccessor));\n        Log = log ?? throw new ArgumentNullException(nameof(log));\n    }\n\n    private CancellationToken CancellationToken => HttpContextAccessor.HttpContext.RequestAborted;\n\nThis is the interesting part:csharp\n        public async Task GetProfileDataAsync(ProfileDataRequestContext context)\n        {\n            context.LogProfileRequest(Log);\n        if (context.RequestedClaimTypes.Any())\n        {\n            // get the user\n            var users = await Users.FindBySubjectIdAsync(context.Subject.GetSubjectId(), CancellationToken);\n\n            // get the user claims from Microsoft.Identity (using my custom manager)\n            var additionalClaims = ClaimManager.GetAdditionalClaimsAsync(users, CancellationToken);\n\n            // filter the claims \n            // you could do that in the ClaimManager and not return them in the first place\n            // but I wanted it to be more obvious what is happening\n            var newClaims = additionalClaims.Where(claim => !context.IssuedClaims.Contains(claim));\n\n            // add the caims to the context\n            context.AddRequestedClaims(newClaims);\n        }\n\n        context.LogIssuedClaims(Log);\n    }\n\nThis is the other method you need to implement\n        public async Task IsActiveAsync(IsActiveContext context)\n        {\n            var user = await Users.FindBySubjectIdAsync(context.Subject.GetSubjectId(), CancellationToken);\n            context.IsActive = user != null && user.LockoutEnabled == false;\n        }\n    }\n``. btw: there are at least two schemes for roles:IdentityModel.JwtClaimTypes.Role(value:role) andSystem.Security.Claims.ClaimTypes.Role(value:http://schemas.microsoft.com/ws/2008/06/identity/claims/role`). You might want to support both. . @stalek71 this here should make it work: \nJavaScript Client\ncsharp\nyield return new Client\n{\n    ClientId = \"frontend\",\n    ClientName = \"Frontend Server\",\n    Enabled = true,\n    AllowedGrantTypes = GrantTypes.Implicit, // required for JS Clients\n    AllowedScopes = { \"email\", \"openid\", \"roles\", \"api.mydomain.com\" },\n    AccessTokenType = AccessTokenType.Jwt,\n    RedirectUris = new[]\n    {\n        \"https://client.mydomain.com/\"\n    },\n    AllowedCorsOrigins = new[] \n    {\n        \"https://client.mydomain.com/\"\n    },\n    AllowOfflineAccess = true,\n    AllowAccessTokensViaBrowser = true,\n    AlwaysSendClientClaims = true,\n    // you might want this to enable and disable functionality in the JavaScript frontend\n    AlwaysIncludeUserClaimsInIdToken = true \n};\nResource Server\ncsharp\nvar resource = new ApiResource(\"api.mydomain.com\", \"API Server\");\nresource.Scopes.AddRange(GetResourceServerScopes());\nresource.UserClaims.AddRange(new[] { JwtClaimTypes.Role, ClaimTypes.Role });\ncsharp\nprivate static IEnumerable<Scope> GetResourceServerScopes()\n{\n    yield return new Scope\n    {\n        Name = \"roles_api\", \n        DisplayName = \"Roles\", \n        Description = \"Allow the service access to your user roles.\", \n        UserClaims = new[] { JwtClaimTypes.Role, ClaimTypes.Role },\n        ShowInDiscoveryDocument = true,\n        Required = true,\n        Emphasize = true\n    };\n}\ncsharp\nyield return new Client\n{\n    ClientId = \"api.mydomain.com\",\n    ClientName = \"API Server\",\n    Enabled = true,\n    AllowedGrantTypes = GrantTypes.Code, // uses the ClientID + Secret to get tokens\n    ClientSecrets =\n    {\n        // use some really long random value here (>16 characters)\n        new Secret(\"l2EwArBmEw1kyjT8RaH1fjxvToz5GWrihxDuE7i6H5bvUFuG9r8sVbo54WftV4cG\".Sha256())\n    },\n    AccessTokenType = AccessTokenType.Jwt,\n    RedirectUris = new [] { \"https://api.mydomain.com/\" },\n    AllowedCorsOrigins = new[] { \"https://api.mydomain.com/\" },\n    AllowOfflineAccess = false,\n    AllowAccessTokensViaBrowser = false,\n    AlwaysSendClientClaims = true,\n    AlwaysIncludeUserClaimsInIdToken = true,\n    AllowedScopes = new [] { \"email\", \"openid\", \"roles\", \"api.mydomain.com\" }\n};. btw: if you use Angular in the Frontend, you might find this helpful: \nInstall jwt-decode: \npowershell\nnpm install jwt-decode --save\nnpm install @types/jwt-decode --save-dev\npipes/jwtdecode.pipe.ts\n```typescript\nimport { Pipe, PipeTransform } from \"@angular/core\";\nimport * as jwtDecode from \"jwt-decode\";\n@Pipe({ name: \"jwtdecode\" })\nexport class JwtDecode implements PipeTransform {\n  transform(token: string): any {\n    if (!token) return token;\n    return jwtDecode(token);\n  }\n}\n```\napp.module\n```typescript\nimport { JwtDecode } from './pipes/jwtdecode.pipe';\n@NgModule({\n  declarations: [ JwtDecode, / ... / ]\n  // ...\n})\nexport class AppModule {\n  // ...\n}\n```\nusage\nhtml\n<pre>{{IdToken | jwtdecode | json}}</pre>\n<pre>{{accessToken | jwtdecode | json}}</pre>\nThis way you can easily inspect the tokens. . The filtering is that Identity Server only returns the claims that are requested by the client. \nSo I guess that your client does not ask for the all required claims, or the claims are missing in the client configuration (or both). . you probably want to change that to \ncsharp\nScope = { \"openid\", \"profile\", \"reporting\", \"offline_access\", JwtClaimTypes.Role, \"EMDClaim\"},\nexcept you include JwtClaimTypes.Role and \"EMDClaim\" in the profile scope: \ncsharp\nyield return new Scope\n    {\n        Name = \"profile\", \n        DisplayName = \"Profile\", \n        Description = \"Allow access to your user profile.\", \n        UserClaims = new[] { JwtClaimTypes.Role, ClaimTypes.Role, \"EMDClaim\" },\n        ShowInDiscoveryDocument = true,\n        Required = true,\n        Emphasize = true\n    };. In my case, the custom profile service needs to access a database over the network and there is also a retry policy (with Polly) in place, so the data access can bind the task for a long time. \nHowever, the Task in the DAL will not get canceled when the cancellation token from the HTTP session is not passed. \nWhat I want is to cancel the data access/retry policy, when the REST client canceled the session. . I had issues with an unreliable connection to the database in development, so even small requests kept failing. Also, it's always a good idea to saveguard all requests to external resources. \n(see also: Release It! by Michael T. Nygard) . the annotation in brackets should be removed. the annotation in brackets should be removed. this was intentionally the name of the class and should not be changed in this way. ",
    "martintro": "Alright, thanks. I posted the question on StackOverflow as well now: http://stackoverflow.com/questions/41260971/storage-of-oauth-access-tokens-in-javascript-clients-e-g-angular. This happens for me as well, pretty often, in local development environment. Is there any solution for this yet?. To specify https cert change UseKestrel() to UseKestrel(options => options.UseHttps([https cert])).\nIn UseUrls() I had problem when the port was something else that didn't started with 443, so for example I'm using 44310 and that works.. Add the Microsoft.AspNetCore.Server.Kestrel.Https nuget package. Exactly, there is a mismatch between the name in the certificate and the host name you are accessing IdentityServer via. Would actually be better to try to get a valid certificate for the hostname instead.. I think an extension grant type would be the best way to authenticate the user using an certificate?\nhttp://docs.identityserver.io/en/release/topics/grant_types.html. As far as I know it should be working in IdentityServer4 in the current version. If you get the extension grant type working, then you should be able to get the client certificate from the request/pipeline in there and also validate the certificate according to your user store or other business rules.\nCould you please attach the code how the client calls IdentityServer as well? Right now you have only included how you create the TokenClient.. Oh well, it looks like you are still requesting the token with grant type password according to this:\nfail: IdentityServer4.Validation.TokenRequestValidator[0]\n{\n\"ClientId\": \"ro.siths.my\",\n\"ClientName\": \"SITHS client\",\n\"GrantType\": \"password\",\n\"Raw\": {\n\"grant_type\": \"password\",\n\"username\": \"test\",\n\"password\": \"REDACTED\",\n\"scope\": \"my.wcf\"\n}\nTry change how you call IdentityServer from the client, like how it's done in the docs:\nreturn await client.RequestCustomGrantAsync(\"[your extension grant type]\", \"api2\", payload);\nhttp://docs.identityserver.io/en/release/topics/extension_grants.html#refextensiongrants. I'm going to look into the same thing soon, but maybe this could be some help? http://stackoverflow.com/questions/38665934/asp-net-core-kestrel-server-ssl-client-certificate-only-for-specific-routes-or-c\nhttps://github.com/aspnet/KestrelHttpServer/issues/332\nI guess it is because the web server doesn't \"accept\" client certificates and because of that the ClientCertification-property is null.. Great! Please close it if you don't have any additional question :). I thought of this as well and also your solution for it @leastprivilege. But will the silent renewal of access tokens in JS clients still work then? In client nr1 after the second login.. Yeah. What is the solution for that? Multiple sessions?. Alright, and because of that there is no possibility to have multiple \"sessions\" right now?. ",
    "Mardoxx": "Is this needed as well as having each instance use the same AddSigningCredential()s? Or is just using one, or the other, sufficient?\nI.e. do I need to have both of these in my app startup if I'm running idsrv in a cluster environment?\n```\nservices.AddDataProtection()\n    .ProtectKeysWithCertificate(dataProtectionCert);\nservices.AddIdentityServer()\n    .AddSigningCredential(idSrvCert);\n```. Does each instance need to configure data protection API too? Or is that handled by setting the signing credential?. Confusion on my part most likely.\nSo signing certs/keys/whatever are used to sign and validate generated tokens. What data is un/protected using the data protection API? \nhttp://docs.identityserver.io/en/release/topics/crypto.html#data-protection. Not sure what I'm trying to as here, but how are cookies used in IdentityServer? Or rather ,what are they used for? Is it just for local account sign in and remember-me settings?\nBasically if I'm just using IDSrv with external IdPs do I need to worry about setting up DPAPI with each machine in my cluster?\nCurrently I am doing, I am just wondering if it is necessary. I'm still not entirely convinced I understand how login works.. Forgot to mention, the external providers are both OIDC, if that makes any difference.\nI included {'login_hint', context.LoginHint } in AuthenticationProperties.Items above then in my OpenIdConnectEvents added\nOnRedirectToIdentityProvider = ctx =>\n{\n    ctx.ProtocolMessage.LoginHint = ctx.Properties.Items[\"login_hint\"];\n    return Task.FromResult(0);\n}\nAnd it forwards the property correctly.\nDoes that seem sensible enough?. Cheers.\nWhen using Azure AD you can alternatively, or additionally, specify username as a query param and it also populates the username field ~~~but sets tab focus to the field as well (Unsure if this is standard or not but gives for a better UX imo).~~~\nI tried setting ctx.ProtocolMessage.Username, but this did not get passed through. I also attempted ctx.ProtocolMessage.SetParameter(\"username\", \"test\"); which should do the same, but this didn't work either. A couple of sites online suggest it perhaps should, unless I've misunderstood?\nNot sure where the issue lies, if it is indeed an issue, so I can't really look in to it in much detail.. My mistake, the login page doesn't auto focus, it was my browser automatically focusing on the initial form when I manually went to the site, instead of being redirected to it.\nIssue still remains whereby I can't pass custom params though.. I got it to work for what I needed, yeah. Which was just sending login_hint to IdP -- so it filled out their username input box. I believe with AAD if you send login_hint and they are already logged in as the provided value it logs you in without interaction.\nNot sure how you'd achieve what you want. Have you tried specifying an acr_values of idp:providerName when doing your auth? This would then bypass idp selection screen and redirect to correct tenant's idp -- this is what I do (did). They'd still need to click their username to login (or enter credentials if not authenticated with IdP), and auth the app if not already, but after this you should have username in token, which you can then pass as login_hint so when access token has expired you can request a new one with no user interaction (assuming cookie with IdP is valid, password not expired etc..) -- will still have to do redirect dance, ofcourse!. Did you add services.AddCors(); to ConfigureServices ?. KeyId is the id of the key, not the key itself.\n1/ Create a key with KeySize of 2048 and export it as XML with all props (new RSACryptoServiceProvider(2048).ToXmlString(true)).\n2/ Save this somewhere safe.\n3/ Modify your startup to do this:\n```\nvar signingKeyXml = \"...\";\nvar rsa = RSA.Create();\nrsa.FromXmlStringEx(signingCredKeyXml);\nvar signingKey = new RsaSecurityKey(rsa.ExportParameters(true));\nservices.AddIdentityServer()\n    .AddSigningCredential(signingKey);\n```\nIf using netcore, you'll have to implement FromXMLString(string xml) yourself: https://github.com/dotnet/core/issues/874#issuecomment-323894072\nI'll leave others to whinge about why this is a bad idea \ud83d\ude04.. Hi,\nNo worries!\nSo if I follow, IsActive is to restrict already authenticated users from being issued new tokens -- e.g. lock out when they are already logged in. So I should be doing similar logical checks when the user logs in, for example, here and here ?. Brilliant, thank you \ud83d\ude04 . Might want to check that the thumbprint doesn't have some hidden unicode characters before it if you copied it from certmgr! https://support.microsoft.com/en-us/help/2023835/certificate-thumbprint-displayed-in-mmc-certificate-snap-in-has-extra-invisible-unicode-character\nAlthough I'd expect some sort of exception to follow if that were the case.\nLogging can be setup thusly:\nhttps://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging. Have you tried it in a new session, e.g  private browsing? . Is that okay to do? Is the cookie needed after login from external provider?. I assume this is for validating id_tokens provided from a different STS?. Surely if you can't (don't) trust that your received id_token is valid, the response from sending it off to get validated can't be trusted either? So it's a little unnecessary?\nAs I understand it, the idea of validating id_token client side is so you can be sure it wasn't tampered with before being received? So if you don't trust your sts then sending it back to get validated just seems silly?\nOr have I completely missed the point?\nE: I guess it can give piece of mind that it wasn't tampered with at rest?. So it's okay that the op validates the token, not the actual client?. @mikeandersun I had a similar issue, and it was that the post logout url needs to be a local url. i.e. just \"/signout-callback-oidc\" I was doing my own end session request (i.e. not with an oidc lib).\nI'd create a new issue for this, it doesn't seem completely related. . If only there were a way to map clientId to a client.... hmmmm!\nhttps://github.com/IdentityServer/IdentityServer4.Samples/blob/release/Quickstarts/8_EntityFrameworkStorage/src/QuickstartIdentityServer/Quickstart/Account/AccountService.cs#L73\nPretty sure this will point you in the right direction!. leastprivilege, said iat, not auth_time perhaps this is where the confusion lies!\nI would asusme auth_time returns the time at last authentication, not the time the token was, effectually, created. If this does, indeed, update correctly then just verify that the time they last authed in your sensitive api falls within a reasonable time period - as brockallen, and, I presume, leastprivilege suggested - if it doesn't just send back an unauth response that client will pick up on to relog user.\nEdit: totally ninja'd me!. You can store certs in keyvault as secrets (they are stored as Base64 encoded strings) then in your startup you can pull them down using keyvault rest api and read into X509Certificate2.. Yes. What browser are you using, works fine here! The LHS menu is in its own scrollable container -- mouse over it to scroll.. I would hazard a guess that the node your API is running on is not the same as the node your IDSrv is running on.\nSo naturally when Bearer middleware (running on node_0, e.g.) looks for idsrv localhost:9999 (which is running on node_1) it can not resolve it.\nA solution would be to use external IP in your bearer middleware (IdentityServer4.AccessTokenValidation e.g.)  (or some clever DNS, I am not good with networking so can not advise here!)\nWhat does your applicationmanifest look like for idsrv and your api?\nedit: Just noticed you said this was when it was deployed locally. I am unsure then, as localhost:9999 should resolve fine. It could be a CORS issue, are you sure you have https://localhost:443 as an allowed origin in your Client config? I don't know the internals of HttpClient so it could be that it strips out :443 on the Origin header if it is an https request, meaning your CORS allowed origin should be https://localhost. A couple of roadblocks that I came across:\nEach node needs access to the same SigningCredentials. E.g. pull from KeyVault, or provision each node in the cluster with your certificate. N.B Ensure NETWORK SERVICE account has ACLing for private key read. Either that, or do something like this https://github.com/IdentityServer/IdentityServer4/issues/1159#issuecomment-301241891\nYou may need to set up DPAPI. Although I'm still unsure as to what configurations need this, see here.  Each node will need certificate in the certificate store, see https://github.com/aspnet/DataProtection/issues/139#issuecomment-205898117 as to why. It is probably best to set this up anyway.\nI do something like this:\n```cs\nvar store = new X509Store(StoreName.My, StoreLocation.LocalMachine);\nstore.Open(OpenFlags.ReadOnly);\nvar x509Certificate2Collection = store.Certificates.Find(X509FindType.FindByThumbprint, dataProtectionCertificateThumbprint, false);\nvar dataProtectionCert = x509Certificate2Collection.Count > 0 ? x509Certificate2Collection[0] : null;\nstore.Close();\nif (dataProtectionCert == null)\n{\n    throw new Exception(nameof(dataProtectionCert));\n}\nvar storageAccount = CloudStorageAccount.Parse(keyStorageConnectionString);\nvar blobClient = storageAccount.CreateCloudBlobClient();\nvar container = blobClient.GetContainerReference(keyStorageContainerName);\nservices.AddDataProtection()\n    .PersistKeysToAzureBlobStorage(container, keyStorageBlobName)\n    .ProtectKeysWithCertificate(dataProtectionCert);\n``\nN.B documentation doesn't say that when calling anyProtectKeysWith()you also have to have to have somewhere to persist them to withPersistKeysTo().. My apologies, it isNETWORK SERVICE` without the underscore. I don't imagine it is an issue with certificate perms, otherwise SF runtime would be telling you off by now! \ud83d\ude1d \nWhat is your API Client config like -- specifically the Allowed CORS origins? What are your ServiceManifest.xml's like -- although I'm pretty certain it will be a CORS issue.. cs\nRedirectUris =           { \"http://localhost:8210/#/auth/callback/\" },\nPostLogoutRedirectUris = { \"http://localhost:8210/index.html\" },\nAllowedCorsOrigins =     { \"http://localhost:8210\" },\nShould these not be https://localhost:443 ?\nSorry no, I got confused. JS client is on :8210. Are they self-signed SSL certificates? Perhaps your computer doesn't trust them so middleware is rejecting them and hence the request!. I suspect this will be the issue then. For the self signed certificates they need to be installed in LocalMachine/My and have NETWORK SERVICE ACLing. Not entirely sure how you add it as a trusted certificate in windows, I think you just export the cert (without private key) and ad it to Trusted Root CA store.\nTo test you could try running Idsrv on http only and set RequireHttpsMetadata = false in your IdentityServerAuthenticationOptions.\nOf course it won't have been a CORS issue since you weren't requesting through a mechanism that requires it (e.g. js on a website) hah.. Not sure what else to suggest, sorry! I have it working in an SF cluster, but I think during local development I did everything over http. I now have it deployed to a standalone SF cluster running inside a dev server however it runs under https with a trusted certificate for *.ourdomain.com which points to our IP.\n\nHowever, both the API and IS4 are on error status in SF local cluster manager\n\nIf you copied the thumbprint from mmc, did you make sure you removed the hidden character at the beginning of it?. I would definitely give it a try!\nI would also try over http only, then you can rule out the certificate (or something to do with https) being an issue.\nNo worries, I spent hours getting it to work in SF, so I can empathise a bit! \ud83d\ude04 . Can you connect to http://localhost:5330 normally? (within the machine nginx is running on, of course)\n502 means there was an error getting response from up stream, most likely because it can't connect to it!. I have IdSrv working behind NginX on windows, but I'm not using ForwardedHeaders middleware -- wasn't even aware that was necessary.. Ah yes, I had a very similar issue but my NginX returned the error on the error page!\nGlad you've fixed it. Something ridiculous because\n\nNot a production server\nIn production we'll be using a layer 4 load balancer\nDidn't want to spend ages finding optimal settings\n\n```\nhttp {\n    proxy_buffer_size 128k;\n    proxy_buffers 4 256k;\n    proxy_busy_buffers_size 256k;\n    large_client_header_buffers 4 256k;\nserver {\n    listen 443 ssl;\n\n    ssl_certificate ssl/chained_cert.pem;\n    ssl_certificate_key ssl/key.pem;\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    ssl_prefer_server_ciphers on;\n    ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;\n    ssl_dhparam ssl/dhparam.pem;\n\n    #add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains\";\n\n    location / {\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_pass https://$httpsRules;\n    }\n}\n\n# more settings\n\n}\n```\n$httpsRules is a map, since I've got multiple sites I'm routing to based on Host. Just change set your target framework to use net452 moniker.. Good question. I was under the impression that ASP.NET Core libraries target net core and net framework (it's a little more complicated than this, but I don't fully understand it to be able to explain it in a manner I am satisfied with) and that AspNetCoreModule is only required to run net core apps under net core runtime? \nSo if you target the full framework, it should \"just work\" without any additional IIS configuration/modules running under net framework.\nI believe the confusion lies with the damn \"Core\" name, ASP.Net Core ~~~framework~~~ uhh  collection of libraries, despite its name, can target and \"compile\" to a normal .NET Framework app which will run on normal net framework.. Is this necessary even if you are targeting net framework?. Ahh thanks, that answers my question then! . It's entirely possible, although someone more experienced than I would have to chime in to advise on security of it.\nI had a go at it (basically API only IdentityServer and UI hosted elsewhere) a month or so ago, but dropped it because I persuaded us to move in a different direction where having a login page on idsrv was acceptable.\nAt a very basic level, you'd have to create an API which returned data you needed e.g. external IdP's/Consent for a particular app. Which is simple enough. Inspect what logic the existing controllers do and look at what the views do wrt generating URL's and replicate these on API/your SPA respectively.\nAs for C/XSRF you can do something like this http://stackoverflow.com/a/44035774/3515174 Not sure what else needs doing for security -- as in, I'm genuinely not sure -- to me this is rather scary -- I would stick with MVC UI... Although I believe it is not intended for production, the QuickStart UI was developed by people who really know this sorta stuff inside out.\nProTip: You can pass idp through acr_values to automatically redirect to external IDP.. Are you running behind a proxy (nginx e.g.) you may need to increase acceptable header length.\nCould also be that too many cookies are being set somewhere (or a really large one)?. >I notice that the number of idsrv session cookies grows on each login\nMight be worth looking in to. Your AllowedRedirectUris is set to http://localhost//signin-oidc your provided one is \nhttp://localhost/signin-oidc - I believe they must match exactly. This may be your issue!. >We have the configuration set to persist store in entity framework\nI can't see where you are registering IPersistedGrantStore\nIServiceCollection.AddIdentityServer(..) registers IPersistedGrantStore as InMemoryPersistedGrantStore by default here. You need to provide an implementation of it yourself e.g. this is how IdentityServer4.EntityFramework does it.. ACL for private key read on NETWORK SERVICE account should be done automatically when using VMSS ARM template to provision cert.\nAlthough saying that, it is pretty flaky some times. Open an issue here https://github.com/Azure/service-fabric-issues/issues. Interesting, however, does that really matter? Or are you wanting to satisfy a \"what if\" scenario?\nForgive me if I misunderstand -- For retry cancellation this makes sense -- but only in the very unlikely scenario that: 1. your user logs when your DB is down  2. your retry policy several failures until it gives up (which could last minutes in total until absolute failure) 3. user cancels navigation request within this time.\nAs for contacting a database -- probably not. As soon as the request to your db has been sent off, it will do the work regardless of whether its calling task has been requested to be cancelled or not. Unless you do, say, several queries and check the cancellation token between them.\nTo me... The sorts of information that should go in the profile should be very simple. E.g. name, surname, email. Something that is very inexpensive (temporally) to retrieve. If the request for this information fails, and user cancels requests when the service is retrying, I think you'd have bigger issues than worrying about some hanging tasks!\nFor completeness I suppose it should be added, but I see little value. Perhaps I've misunderstood.\nHandling cancelled requests is something I'm looking in to, so interested to hear your point of view!! \ud83d\ude04 . >succesfully found the access-token and added it to the header\nPost code plz. Should be in the format Bearer token_goes_here.. https://github.com/IdentityServer/IdentityServer4/issues/475#issuecomment-260225024\nI presume. It's AllowCredentials on the CORS policy in aspnet core.. https://github.com/IdentityModel/oidc-client-js handles login via popup, may point you in the right direction. Can always dissect it to figure out how it does it.. Not required for net core https://stackoverflow.com/a/13494570/3515174 but for net full.. not sure.\nI look this up from time to time - I have yet to convince myself I am doing async properly - to try and gain a better understanding. All that happens is I get a solution but no intuition.\nBasically all I learn is \"don't use it unless you are writing a library which could possibly be used in an application with a UI (or an application with one main thread).\" Which is fine.. I can do that.. but it would be good to understand why. Seems a rather large concept and details are left out of less technical blogs out of brevity or ignorance. A lot just seem to parrot \"if you don't configure await false in your lib and someone uses it in a UI app, you will get a deadlock\" without explaining the technicalities - either that or I'm a bit slow :). What's it used for? A quick search for JwtClaimTypes.Name and GetName just appear in code that dictates it is required. The only place I can see it being used is in ClaimsPrincipalConverter which looks like it's used to persist tokens? Not sure!. So you only require name to be set just for your UI -- it has always seemed to me you left it up to the user (me) to implement UI and yours was just a very basic example.  So requiring this just for your UI is putting a restriction on how the user (me) is to design their UI/system without good reason?\nI basically wanted it for this: Users can request a token for my API, and optionally have a \"profile\" assigned to them (which can be resolved (lookedup) to their name). If they have a profile, set name as their profileId, otherwise empty string.\nI suppose I could just set it to a different claim (e.g. \"profile_id\") and have this as a user claim for that api resource?. Sweet, thanks \ud83d\ude04 . This is still the case with IdSrv, not sure what you mean?. Was thinking... possibly more consistent to ship a breaking change to IUserConsentStore and switch all the params to clientId, subjectId ?. Thanks\nI was having a brief look at other functions' signatures in idsrv and it seems to use clientId followed by subjectId.\nBut yes you are right, with this patch it doesn't matter :). Most dev tools (postman) dont care about SOP (and hence obaying CORS headers) - so it will 'work' in postman.\nYour startup looks weird. You've got .AddMvc() and also .AddMvcCore() can't remember of the top of my head, but I think AddMvc adds an opinionated set of services (a default configuration). So one, or the other, is unnecessary. \nI think that also idsrv sets cors headers itself based on allowed cors origins on a per client configuration.\nTry reviewing your startup (remove explicit cors setup) and try with that.\nHope that helps!\n\nNot really following your setup here? Is this to configure identity server as a standalone service or are you trying to run identoty server on top of an existing project?\nWhat is running on port 5000 and what is on 4200? Is 5000 what this (identity server) is running on and 4200 is some web application which needs to access this server (the one on 5000). It may be on purpose? This way you can scroll anywhere on the page to move the navbar.. I think I might be \"feature not a bug\"ing this though.... >What does it actually do if I add it as bellow\nRegisters TokenCleanup.Start and .Stop to the respective starting and stopping callbacks of the given app lifetime. I.e. starts up the cleanup schedule task on app startup and stops it when it's shutting down. -- This task periodically removes expired persisted grants from the database.. First link you posted told you how to do this.\nIn your DbContext impl:\n```cs\nprotected override void OnModelCreating(ModelBuilder modelBuilder)\n{\n    //...\n// Do this for all IdSrv entitites which should auto increment\nmodelBuilder.Entity<Client>()\n    .Property(e => e.Id)\n    .ValueGeneratedOnAdd();\n\n}\n```\nMight want to read this https://www.npgsql.org/efcore/value-generation.html. Well the fix would be to add ValueGeneratedOnAdd() to each entity configuration. Although there's no saying that this may have unintended consequences for other EF providers. As for why postgres provider doesn't auto increment int/long PKs, dunno.. Probably best to leave it how it is and stick sonething in the documentation?\nApparently it's meant to pick this up by convention so it should work as is, however it is unclear what this convention is.. but by the sounds of it it is an int/long property named Id without any attributes.... Couple of closed issues here https://github.com/npgsql/Npgsql.EntityFrameworkCore.PostgreSQL/issues?q=is%3Aissue+auto+increment+is%3Aclosed . What's the issue here - have you got a couple simple steps to make a failing example?\nI'm guessing it's to do with https://github.com/IdentityServer/IdentityServer4/blob/6003f606458255666dc33db00714ef0d15969061/src/IdentityServer4/Hosting/IdentityServerAuthenticationService.cs#L59-L62\nSo I assume it's relying that GetDefaultAuthenticateSchemeAsync() from GetCookieAuthenticationSchemeAsync() returns cookie auth scheme?\n. Ahh right!\nIs this not restricting the situations where idsrv can be used? Not sure --- Would it make sense to have a different default scheme that wasn't used by idsrv?. Which, of course, would be a valid observation!\nIs using the default auth scheme not assuming too much? I can create a PR with my idea if you like.\nAre you able to elaborate more on https://github.com/IdentityServer/IdentityServer4/issues/2489 because it sounds like my proposal may help?. I was thinking about perhaps using Castle.DynamicProxy, but it's bound to break something or somewhere... it involves too many (i.e. more than 0) assumptions about how the return value is gonna be used, and whether the implementation of HandleRequestAsync is marked as virtual or not.... Just too flaky!. await _handlerProvider.GetHandlerAsync(_context, \"name\") will return a AuthenticationRequestHandlerWrapper instead of the actual handler type. It's okay I've solved what I needed to now.. Post impl of LoggerFactory from the failing project's startup config.. ",
    "vquaiato": "@brockallen Is this information present in the docs or I should have known for knowing the OAuth/OpenId process and flow? If it is in the docs could you please link it?. ",
    "becdetat": "I can reproduce this in a local environment by sending two simultaneous requests both with the same (valid) payload - caused as a result of a bug in my consuming code. The first comes back as a 200 but the second comes back as a 404 with no response body.\nChrome reports \"No 'Access-Control-Allow-Origin' header is present\" on the 404, which although valid as the header isn't present in the 404 response, is a red herring.\nThe actual error in the logs is as @pellea reported.\nSimple LinqPad script to reproduce. Note that the Origin header is required to reproduce, otherwise both requests succeed:\n```\nEnumerable.Range(1, 2).AsParallel().ForAll(i =>\n{\n    var client = new RestClient(\"http://localhost:8130/connect/token\");\n    var request = new RestRequest(Method.POST);\nrequest.AddHeader(\"content-type\", \"application/x-www-form-urlencoded\");\nrequest.AddHeader(\"Origin\", \"http://localhost:3000\");\nrequest.AddParameter(\"application/x-www-form-urlencoded\", \"grant_type=password&scope=my.scope&client_id=my-client&username=admin%40test.com&password=test1234&client_secret=my-client-secret\", ParameterType.RequestBody);\n\nvar response = client.Execute(request);\n\n$\"{i}: {response.StatusCode} {response.Content}\".Dump();\n\n});\n```. :-O Thank you very much \ud83d\udc4d . That pretty much sums up the situation.\nAre you talking about the IIS URL Rewrite module (https://www.iis.net/downloads/microsoft/url-rewrite)?  I've had to use that before in a different 3rd party system that generated resource URLs based on the HTTP context. I'm self-hosting kestrel in this case, so I'm not sure if that will work but I'll give it a try. Being able to configure IdentityServer to work in this scenario without having to resort to URL Rewrite would be good though. I'll give it a try tomorrow, thanks.. We haven't had a chance to implement the middleware yet, my messy workaround above is still in place and working... The middleware sounds like a better solution though, when we can revisit this I'll update. Happy for this to stay closed. Thanks for your help.. ",
    "spragchris": "Duplicate issue is 404. Thanks but a cursory glance indicates it's not exactly direct to the point I'm asking. Can you give me some context regarding your recommendation that I read this? Are you suggesting I watch a video on authorisation, in general?. I think I regret mentioning authorisation in my question, as that's not really what I'm interested in. Specifically, I really just want to know if I can have profile data come back on userinfo endpoint, but not be in the JWT from the token endpoint, as the key of this question is really the size of the access token.. For posterity:\nI believe the correct use of the Profile Service is intended to be as a means of extending the access_token, and not a framework for designing a profile service as a resource, which could be done in business level APIs.. Apologies, IdentityServer4 for .NET Core is the product, version 1.5.1.\nI would be interested in work-arounds, if this turns out to be a bug.. This is not a helpful answer.. I suspected a possible bug as indicated in my original posting.\nThank you for your follow up.. ",
    "EdwardBlair": "Did you create the initial migrations? Does the folder Data/Migrations/IdentityServer exist in your IdSrv project, and does it have the two initial migrations in it?. ",
    "jjafuller": "I edited my comment for clarity I was referring to the jwk, not the access token. I also found an example in another client that does something similar to what we are doing, except we default the TTL to 0, rather than 24 hours.\nhttps://github.com/coreos/go-oidc/blob/fe7346e2e6855bda769d5b3db7d917f159c5613c/oidc/key.go#L28. Yup. That is what we are doing now.\nOn Feb 11, 2017 9:57 AM, \"Brock Allen\" notifications@github.com wrote:\n\nYea, not a bad idea. You can do this now by putting middleware in front of\nIdentityServer and emit those headers on the way out for those endpoints.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/IdentityServer/IdentityServer4/issues/810#issuecomment-279149342,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAA7dgEQlKTzRzc1TcTWz4h4_uAapE3jks5rbcxlgaJpZM4L92XT\n.\n. The header just needs to look like this: Cache-Control: max-age=3600 this is the basic middleware we're using now:\n\nhttps://gist.github.com/jjafuller/0bd6631235eaf93928487e6288e092d1. ",
    "skorunka": "@billyjacobs2014 I think it was not a firewall. I have the same issue, but only in Firefox. in Chrome it works.. ",
    "sergik": "Thanks a lot for your reply! ForwardedHeaders midleware fixed our issue.. ",
    "robcthegeek": "TL;DR Seems there's an issue with the .NET Core tooling (quelle surprise). Sharing story here in case someone else stumbles on this.\n\nI've also had the same issue..\n\nVisual Studio 2017: 15.1 (26403.7)\n.NET Core: 1.0.3\n\nInstall-Package IdentityServer4 failing on a new project based on the \"Empty\" ASP.NET Core project template.\nHere's what I've tried:\n\nUpdate VS\nUpdate .NET Core SDK\n\nAt this point - I was unsure of what else I could even update - so then started thinking along the lines of versioning issues, because, .NET Core \ud83d\ude09  \n\nCleared All NuGet Caches (Options > NuGet Package Manager > Clear All Caches)\n\nLooked very promising, but once packages were downloaded - still the same problem. \ud83d\ude20 \nAt this point, I am scratching my head and questioning my life choices - when I noticed something...\n```\nInstall-Package : Failed to resolve conflicts for .NETCoreApp,Version=v1.1.\nAt line:1 char:1\n+ Install-Package IdentityServer4\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [Install-Package], Exception\n    + FullyQualifiedErrorId : NuGetCmdletUnhandledException,NuGet.PackageManagement.PowerShellCmdlets.InstallPackageCommand\nInstall-Package : Unable to satisfy conflicting requests for 'IdentityServer4': project/IdentityServer4 \n```\nI wondered:\n\nIs it possible it's not liking the Project name also being IdentityServer4?\n\nSo - I  \"File > New Project'd\" and did the exact same steps and everything was fine!\nRepro\nI cleared everything. very reproducible:\n\nCreate a Project with the name IdentityServer4.\nInstall-Package IdentityServer4\nObserve a whole lot of red.\n\nFix\n\nRename/create new Project not called IdentityServer4.\nInstall-Package IdentityServer4\nBe happy \ud83d\ude04 \n\nThe Root Cause\nAt this point - I am thinking there's something weird going on, so I did this:\n\nFile > New Project > Class Library (.NET Core)\nName the Project xunit.\nInstall-Package xunit\nObserve the world implode.\n\nSo - I'll look at getting these notes reported to the right people :smile:\nHope this helps!!. ",
    "neman": "I got the same error when I named my vs2017 (15.2) project Serilog  (for demo purpose) and after that tried to add Serilog package and boom. This is definitively tooling issue.. ",
    "twenzel": "Got a hint from Johnny to set the RequireConsent flag to false in the Client registration.\nhttp://stackoverflow.com/questions/42834138/permission-grant-page-will-always-be-shown-when-using-identityserver4/42837395#42837395\n. @urielb92 you're right. Let's see what leastprivilege or brockallen says.. Is this correct?\nvar result = await _oidcClient.LoginAsync(IdentityModel.OidcClient.Browser.DisplayMode.Hidden, extraParameters: new { acr_values = \"idp:Negotiate\" });\nThen I recieve a \"HttpError\". And the browser window will still be shown.\n. Maybe I found the error.\nWhen I add the  acr_values value the request fail because of to much redirects. It ends in a loop in AccountController from Login/ExternalLogin -> ChallengeResult to Login/ExternalLogin again..\nI have \"fixed\" this issue by removing the acr_values from value from the return url in AccountController.       ExternalLoginCallback().\n```\n...\n// delete temporary cookie used during external authentication\nawait HttpContext.Authentication.SignOutAsync(IdentityServerConstants.ExternalCookieAuthenticationScheme);\n// remove the acr_values in order to get redirected correctly\nif (returnUrl.Contains(\"&acr_values\"))\n    returnUrl = returnUrl.Substring(0, returnUrl.IndexOf(\"&acr_values\"));\n// validate return URL and redirect back to authorization endpoint\nif (_interaction.IsValidReturnUrl(returnUrl))\n{\n    return Redirect(returnUrl);\n}\n...\n```\nNow it work's fine.\nIs this a bug or \"by design\"?. No I never set an idp claim. Should I? Where?. I've added following code right before SignInAsync\n```\n// very rough code -> ONLY for testing\nif (returnUrl.Contains(\"&acr_values=\"))\n{\n    var pairs = returnUrl.Substring(returnUrl.IndexOf(\"&acr_values=\") + 12).Split(';');\nforeach(var pair in pairs)\n{\n    var values = System.Net.WebUtility.UrlDecode(pair).Split(':');                  \n    additionalClaims.Add(new Claim(values[0], values[1]));                  \n}\n\n}\n``\nThis adds a new \"idp\" claim with \"Negotiate\". But it does not help. I've to remove theacr_values` from the return url in order to get this working.. That worked. Setting the provider name to \"Negotiate\" (instead of \"Windows\") prior calling SignInAsync works, no error message.\n```\nif (returnUrl.Contains(\"&acr_values=\"))\n{\n    var pairs = returnUrl.Substring(returnUrl.IndexOf(\"&acr_values=\") + 12).Split(';');\nforeach (var pair in pairs)\n{\n    var values = System.Net.WebUtility.UrlDecode(pair).Split(':');\n\n    if (values[0] == JwtClaimTypes.IdentityProvider)\n        provider = values[1];\n}\n\n}\n// issue authentication cookie for user\nawait HttpContext.Authentication.SignInAsync(user.SubjectId, user.Username, provider, props, additionalClaims.ToArray());\n```\n. Since the update to 2.0.5 (from 2.0.4) I also getting this error.. This commit might be the problem. \nhttps://github.com/IdentityServer/IdentityServer4/commit/cbe9ac415838ed0d19dcc9fbf66eb66cc6a29e35\nBut I can't actually confirm this thought.. Oh, error found on my site. All fine.. With the 2.0.6-preview1 version the error is gone.. ",
    "jimmystridh": "Thanks for the response Dominick, I'll re-evaluate using local storage + CSP (which I don't have ATM).\nOut curiosity and wanting to understand; any references or comments on why you don't recommend cookie based token auth ?. Reasonable view. Reading up on CSP, thanks for the input & hard work on idsrv! Going to help out some with the improving the docs when I'm more familiar with the lots.. ",
    "pjmagee": "This problem is now fixed for us. The CNG Key Isolation Windows Service wasn\u2019t running.. ",
    "bklooste": "sorry the 2 samples i was brought were .net core web with web.config investigating why it doesnt work when copying. . ",
    "Ciantic": "This is missing .AddAspNetIdentity<ApplicationUser>() maybe it's not needed, but if this thread is to collect changes, that is one. (2.0.0-rc1)\nP.S. I'm struggling to piece together a code that works, there doesn't seem to be any sample. Currently I'm getting Sub claim is missing error.. ",
    "xrkolovos": "If i turn on the option AlwaysIncludeUserClaimsInIdToken in the JsApp Client it still doen't work an i get this log in the end\n```\ninfo: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware[8]\n      AuthenticationScheme: Identity.Application was successfully authenticated.\ninfo: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware[8]\n      AuthenticationScheme: Identity.Application was successfully authenticated.\ndbug: IdentityServer4.Hosting.AuthenticationHandler[0]\n      Augmenting SignInContext\ninfo: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware[10]\n      AuthenticationScheme: Identity.Application signed in.\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\n      Request finished in 49.1191ms 302\n```. I have read this code and i am wondering if i should implement my own ClaimsService, but i think again that it works in windows.. In my windows dev machine i get this log\n```\ninfo: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware[8]\n      AuthenticationScheme: Identity.Application was successfully authenticated.\ninfo: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware[8]\n      AuthenticationScheme: Identity.Application was successfully authenticated.\ndbug: IdentityServer4.Hosting.AuthenticationHandler[0]\n      Augmenting SignInContext\ninfo: Microsoft.AspNetCore.Authentication.Cookies.CookieAuthenticationMiddleware[10]\n      AuthenticationScheme: Identity.Application signed in.\ninfo: Microsoft.AspNetCore.Hosting.Internal.WebHost[2]\n      Request finished in 9684.3101ms 302\n```. This mornig when i waked up, i rethink this logs and i found out that this logs are right. So, i stopped ngnix and setup kestrel listening port 80. Now everything seems to work right. So the problem must be in ngnix. My config is this.\n```\nserver {\n    listen 80;\n    server_name my.domain;\n    root /var/aspnetcore/auth;\nlocation / {\n    proxy_pass http://localhost:5330;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection keep-alive;\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n}\n\n}\n```\n. After carefull reading of the microsoft docs -> https://docs.microsoft.com/en-us/aspnet/core/publishing/linuxproduction\nI understand that the problem is in the middleware ForwardedHeaders.\nI have it configured right, but it doesn't seems to work.\n. > Can you connect to http://localhost:5330 normally? (within the machine nginx is running on, of course)\nYes, and the mvcapp works in general.\nI opened an issue here, i think is ForwardedHeaders middleware issue.\nthanks for your response. I solved my issue. The problem was with the proxy_buffers.\nI got this error.\n*3 upstream sent too big header while reading response header from upstream\nhttps://github.com/aspnet/BasicMiddleware/issues/233#issuecomment-302379169. We should have a section about this in the docs. \nWhat are your proxy settings in ngnix?. It's a simple easy way. Nice. ",
    "tbasallo": "To follow-up, the issue is definitely related to the length of the URL. Interestingly, it only happens for the initial consent. If the user has already consented to allow access to the Microsoft account, then the consent screen is skipped and the normal flow occurs.\nHowever, the consent screen fails to load. If you remove the state and reload, the consent screen appears, you approve and then you get redirected to identity server, which fails. However, if you try signing in again, since you already gave permission, the flow continues with no issues.\nThe hack (removing returnURL) in https://github.com/IdentityServer/IdentityServer4/issues/371 still works, as you expect.\nSaving the returnURL in a cookie works and allows to the app to continue to operate. Aside from the fact that we're dependent on a cookie on the users device, any other side-effects or detriments to using cookies to store the returnURL?\nSince this is a Microsoft issue, where would you recommend opening this issue?. Yes, that was a good reference. . Hope no one minds, I went ahead and made the change and created PR https://github.com/IdentityServer/IdentityServer4/pull/1974 \nI added two links, one the project and the other to what I think was the intended destination (for auto-provisioning). updated page in fork. ",
    "larsw": "Pardon my lack of internal IdentityServer jargon knowledge, but what's \"QS\" ?. This draft has recently been updated (https://datatracker.ietf.org/doc/draft-ietf-oauth-mtls/) to 0.11 and AFAIK is scheduled for RFC status (Proposed Standard).\nRe. https://github.com/aspnet/Security/issues/1575 the client cert auth. dependency is on the ASP.NET Core 3.0 road map.. @leastprivilege Agree. Might be other framework features that will be needed in the future as well.. ",
    "smcl": "Good call - I have a set of addresses I tested this against already (taking the output of existing implementation vs mine) but I'm not sure what the best way to add these are. Perhaps I should add a separate pull req with the tests (so we have a set of inputs we know pass against the existing implementation) - then it's possible to test for regressions in the new implementation? What do you think? I know it's not a hugely important part of IdentityServer, but I'd like to get it right :-). Hey Brock - sorry I have a lot of very poor excuses for not responding! I've added the tests that I put together - testing various combinations of scheme * host * port * resource against the value returned by the original implementation.. ",
    "StevenTCramer": "Updated.  And thanks for the Pizza Pizza :) . I went ahead and did all the booleans in this file. and wrapped them like <c>true</c> or <c>false</c>\ncomment only changes.. @leastprivilege   \"It's a logging info message - that's all.\"  Where is it I will do a PR to not show if anonymous.  But I can't find the source.\nIdentityServer4.AccessTokenValidation.Infrastructure.NopAuthenticationMiddleware  I thought that would be the class but I can't find it.  \nSearching for \"was not authenticated\" also comes up empty.. Can do.. removed :). ",
    "davebown": "I see that IProfileService can't access the request so i need to generate a claim in the ExternalLoginCallback method of the AccountController. I presume I can get the acr_values from the result of GetAuthenticateInfoAsync method?\nIn terms of the IResourceOwnerPasswordValidator I assume I can find acr_values using context.Request.Raw.Get(\"acr_values\") ?. ",
    "odytrice": "I figured out the problem. Its because after Signup, I needed to Sign-In the user immediately after the user is created. ",
    "null-d3v": "I would think that referential integrity would be my own prerogative as an implementation detail.\nOperating at scale, an n-tier service is an approachable solution. Full referential integrity within that service affords an extensive set of benefits.\nCurrently the store interfaces are prohibitive to that, and I cannot see an express reason why they are.. Disabling definitely an option; however the EndSessionCallbackResult does allow this in a way in that if the headers are already set it will not override them. So basic middleware on the /connect/endsession/callback endpoint which sets both CSP headers to empty strings achieves this. Currently this is what we are doing until we are able to kill the undesirable Client.\nI think it's an alright approach for a solution given the context of the requirements. Could add this as an official option or even just update documentation for the behavior?. ",
    "tymarats": "Oops, seems like I missed to set SubjectId for the test user. Maybe the error message should be a bit more descriptive?. ",
    "damianh": "Yes you'll need to add the cancellation token parameter to all async methods on the various interfaces. Yes it is viral but that is what it is. Can be added in a non-breaking way by making the parameter optional.. Yes a re-compile, but I think semver wise it's still considered non-breaking? I've not heard anyone dropping a replacement dll into a deployed application in many years.. Actually I think anyone inheriting from any of default services (i.e. DefaultProfileService) and overriding a method (GetProfileDataAsync) would experience a 'breaking' change. \ud83e\udd14 . ",
    "ipeo": "Yes but this is in the startup class, within the AddIdentityServer service. I already defined my principal login route there. But what if I want to specify an other route based on the current context of a client URL? Or how can I pass a parameter to the Identity server login controller so that I can re-route the user to the correct login page? Both login page to not have the same design based on where in the client you are coming from (return url). So I did some research, what I actually want to do is pass an acr_value param to my IDP login controller, so I can select which Login view I want to show to the current user. I use the [Authorize] on my controller. Should I replace this attribute with an AuthorizeRequest in my action method to be able to change the returnUrl passed to the IDP? Because I tried this solution but the returnUrl is not in the same format as my [Authorize] attribute. Am I I on the right path?\n. @brockallen Well, my question was how to pass those acr_values from the client to the IDP. I managed to make it work by removing the [Authorize] tag on my action controller, and by calling a new AuthorizeRequest instead. This way I can control WHEN to add arc_values when accessing the controller action.\nA real-world use case would be, for instance, different login pages to get to a specific action controller method. Imagine a CMS secured page managed by an admin. The admin wants to invite a user to also manage the page. The user has different claims and roles. The user will receive an invitation URL referring to that page, but when using the link, he will be redirected to a register/login page having the info of page his trying to access, Like the title and the owner (the admin name). Admin has a more generic Login page.\nSo technically, the way a user and an admin access this page, like the login page, is not the same, or at least, is showing different info to the user. \nBy design, I had to tell the IDP page which scenario to use: An admin wants to access the page or a user.\nSo would you say my implementation for this scenario is good?. Admin wants to access localhost:3000/home/secure, gets redirect to IDP localhost:3001/account/login.\nUser wants to access localhost:3000/home/secure?invitation=true, gets redirect to IDP localhost:3001/account/loginUser.\nSo inlocalhost:3000/home/secure, that's where I need to put some arc_values based on the invitation param to tell the IDP where to redirect. Didn't know how to intercept the returnUrl only with the [Authorize] tag. That's why I removed it on the action method and called a new AuthorizeRequest instead. Guys this is just an example. The real issue is not if there\u2019s 1 or 2 login pages. The issue is how do we pass ace_values to the IDP, from the client, if the client uses [Authorize] attributes... . I look deeper into it thank you!. ",
    "AlexZeitler": "LGTM + suggestions:\n\nPut everything in Containers + Docker Compose as the current sample does to ease startup with a single command and without installing deps locally\nUse release version of IdSrv4 2.0 instead of RC\nAdd script to create the signing cert as the current sample does (just use the script), maybe add a .cmd/.ps1 for Windows as well\nIntegrate the JS Implicit sample client as the current sample does\nCurrent sample has auto discovery for jwks endpoint, maybe re-integrate this again\n\nGood to see jwt / jwks-rsa Node modules from Auth0 now support x5t / x5c.\nTested on Ubuntu 16.04.. BTW if suggestions are applied we should make this sample the \"official\" Node.js sample (read: replace the current NodeJsApi folder in IdentityServer4.Samples). \nOtherwise it would make sense to refactor that sample to use jwt / jwks-rsa as they now handle x5t/x5c as well.\nThe currently used Node.js module to handle this was more a proof of concept and it was just implemented because jwt / jwks-rsa did not support x5t / x5c at the time of implemeting the sample.\nInstead of spreading efforts for Node.js samples we should combine them to have an evolution instead of many revolutions.\nMy rationale behind using Docker for the Node.js sample is: people in Node.js land are looking for an OIDC Server and you can just point them to the sample without having them to deal with .NET Core installation etc. to just get a look and play with it. Therefore also the suggestion to stick (or at least to re-add) with the OIDC Implicit Client (instead of a .NET Core based console client).. Will have a look the next few days but in general it sounds good to me now.. Tomorrow, sorry for the delay.. Sample works as expected.. ",
    "rushfrisby": "Googling the error message brings up this issue in first position. Kinda funny.. @brockallen any idea when this will be released? I can implement one of these workarounds but if it's going to be pushed out this week I'll just wait. Thanks!. I will give preview 2 a try then. thanks!. @prflores updating to 2.3 fixed this issue for me. ",
    "gterdem": "I tried with Combined_AspNetIdentity_and_EntityFrameworkStorage and that worked without problem.\nAlso updated to current latest versions\nMvcClient to: \n<PackageReference Include=\"IdentityModel\" Version=\"2.16.0\" />\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\nIdentityServerWithAspIdAndEF to: \n<PackageReference Include=\"IdentityServer4.AspNetIdentity\" Version=\"2.0.4\" />\n<PackageReference Include=\"IdentityServer4.EntityFramework\" Version=\"2.1.0\" />\n<PackageReference Include=\"Microsoft.AspNetCore.All\" Version=\"2.0.3\" />\nworks without problem either.\nHowever after digging for hours, came across a private method with the following; \nservices.AddIdentity<ApplicationUser, IdentityRole>()\n                .AddEntityFrameworkStores<ApplicationDbContext>()\n                .AddDefaultTokenProviders();\non our mvc client in hope of to activate and use the roles innocently that causes the CSP error..\nApperantly clients shouldn't be using Microsoft Identity role based authorization (logicaly) since there won't be any application users stored. But to keep authorization logic completly customized.\nThe CSP error didn't make any sense though. It seems conflict between Oidc and Microsoft Identity authentication challange. In terms of error detection, couldn't decide which one is more helping; infinite loop (older browser) or misleading CSP error.\nNevertheless, problem which was caused by client's config is solved.. I'm the author of #1811,\nAfter  publishing, we're having the same issue where it works fine on localhost. We too run behind a load balancer.\njavascript\nRefused to send form data to 'https://abc.edu.tr/connect/authorize?client_id=sabis.adabis.mvc&redirect_uri=https%3A%2F%2Fadabismvc.sakarya.edu.tr%2Fsignin-oidc&response_type=code%20id_token&scope=openid%20profile%20offline_access&response_mode=form_post&nonce=636487535314992627.M2YzNDAzYTMtNzg5YS00MzIwLTkyYjQtMjk5NDY3MmQ5YmMxZGYyYjk2ZDQtYjQ2ZS00N2E2LTllYWQtYjkyYjdhNDhmNTU0&state=CfDJ8KEMmXMUTTpNhx0xZPiKaIbS1v2vzr_t_InIpmYv6VXUUeH76kZoTj9seLB-kEd4OznfO8BTZUgI9EmY-XlOXDJbZEMAc8-c4DzuTckGCf3J6wr_8Ix4vEraiZeLUXSupVdvC3oV8VT7NkC0p4pdQO2MzfvUhm6QLDavzdMwXVlD2uJGifkTcVnPhod0f_Ahc_pfRVqL9k-bAnkPVaZoFfjM8pPg1dZsbo-gFYtsUS5HmH6Uq7dd8XRY1WFNdkPXVcSreWEQxUbgXyzcV1dUu59e-CODSUu_vU8nHvF_VoAK4nGiSsj4xn21KbwiJibDSBUDgO0yC8vyF7qHlbzd020b5IpaHvc-ukHK9ZhJ9jM6&x-client-SKU=ID_NET&x-client-ver=2.1.4.0' because it violates the following Content Security Policy directive: \"form-action https://adabismvc.sakarya.edu.tr\".\ncallback response header:\nContent-Security-Policy:default-src 'none'; frame-ancestors https://adabismvc.sakarya.edu.tr; form-action https://adabismvc.sakarya.edu.tr; script-src 'sha256-VuNUSJ59bpCpw62HM2JG/hCyGiqoPN3NqGvNXQPU+rY=';\nAnd this is identityserver:\n<PackageReference Include=\"IdentityServer4\" Version=\"2.0.3\" />\nI still couldn't check client logs but not sure if I'll find the solution there.. ",
    "jongalloway": "Adding @MichaelTsengLZ to verify since we just flipped to new CLA system.\nOn Fri, Dec 8, 2017 at 9:37 AM, Brock Allen notifications@github.com\nwrote:\n\nIs our CLA bot still working @leastprivilege\nhttps://github.com/leastprivilege @jongalloway\nhttps://github.com/jongalloway?\n\u2014\nYou are receiving this because you were mentioned.\nReply to this email directly, view it on GitHub\nhttps://github.com/IdentityServer/IdentityServer4/pull/1845#issuecomment-350324077,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAELu1hjU5Sj_noSZbsUoQw52T3XRiBmks5s-XO-gaJpZM4Q7ZE6\n.\n. \n",
    "mcintyre321": "I've managed to hack some custom redaction in via reflection, by adding a key to the static TokenRequestValidationLog.SensitiveValues field:\nvar logType = typeof(IdentityServer4.IdentityServerTools).Assembly.GetType(\"IdentityServer4.Logging.Models.TokenRequestValidationLog\");\n            var fieldInfo = logType.GetField(\"SensitiveValuesFilter\", BindingFlags.Static | BindingFlags.NonPublic);\n            string[] sensitiveValues = (string[] )fieldInfo.GetValue(null);\n            sensitiveValues = sensitiveValues.Concat(new []{\"ticket\"}).ToArray();\n            fieldInfo.SetValue(null, sensitiveValues);\nCould we perhaps have this exposed via a SensitiveValues object in the container, or similar?. ",
    "molaie": "Hi all.\nIs there any sample code to what is discussed here?\nor any progress on ASP.NET sample UI Repo?. ",
    "wilson85": "I've been working on something which will migrate reference tokens from is3 to is4, it's here for anyone with this problem: https://gist.github.com/wilson85/b3963c000efbe00917a51c3cd27f0115. ",
    "ThorstenHans": "lol. ",
    "dennisdoomen": "@Erwinvandervalk thanks for taking the time to upgrade.. ",
    "ninjaboy": "I have simply cloned this repository today as it is, packages are restored by default.\nI have just updated the packages manually within Visual Studio and I believe all the packages are the latest now.\nThe issue still reproduces.. @brockallen , latest SDK is installed indeed.\nCan you try one more thing please? In my case when I right click the solution itself and Build - it's ok. However, there's no dll created in src\\Client\\bin\\Debug\\netcoreapp2.0\\ folder.\nThe issue reproduces when I explicitly right-click on the Client project and try to build.\nI have also manged to reproduce the same issue on my colleague's machine with the same steps.\n\n. I think it may be closed. I managed to run the console client in debig\nmode. the build though still throws this error but may be an issue of my\nspecific env\nThanks anyway\nOn Thu, 22 Mar 2018 at 01:22 Brock Allen notifications@github.com wrote:\n\nAny update? Given that I was unable to repro it, I don't know what else I\ncan offer.\n\u2014\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\nhttps://github.com/IdentityServer/IdentityServer4/issues/2134#issuecomment-375147685,\nor mute the thread\nhttps://github.com/notifications/unsubscribe-auth/AAQ11UTZKrpx-E83OzPKjowgyfFH2zKnks5tgvzZgaJpZM4Scd2P\n.\n. \n",
    "GeertVL": "This is the log:\n\nIdentityServer4 2.1.1\nangular5 client with \"angular-auth-oidc-client\": \"4.0.2\"\nclient config:\nexport const openIdConfig: PhxOpenIdConfig = {\n  sts_server: 'http://sts.identityserver4.be/',\n  redirect_url: 'http://localhost:49155',\n  client_id: 'my.client',\n  response_type: 'id_token token',\n  scope: 'openid profile email new.my.api',\n  post_logout_redirect_uri: 'http://localhost:49155',\n  start_checksession: false,\n  silent_renew: true,\n  post_login_route: '/',\n  unauthorized_route: '/',\n  log_console_debug_active: true,\n  log_console_warning_active: true,\n  max_id_token_iat_offset_allowed_in_seconds: 10\n};\nAll other Uri's work correctly. Even localhost:4200\nBut when I add a second localhost like localhost:49155 this does not work.\nIs it because it doesn't make a distinction between two localhost entries?. Is it allowed to leave the port out?\nLike so:\nredirect_url: 'http://localhost',\nDoes IdentityServer allow that?. ",
    "abergs": "I second this.\nI think it would be very helpful to have two samples:\n1. Registering & Logging in with IdentityServer, powered by WebAuthn.\nSimilar to the samples showing how to do SSO using third party providers, such as Google, MS etc. \n2. Showcasing a good workflow for client/api requesting assertion\nClarifying the responsibilities between IdSrv and the Client where there is an established identity (logged in user, valid token) but the client want to assert the user before doing a highly sensitive action (such as transferring funds, deleting data etc).\nAs we try out different ways of implementing the above scenarios I will of course share what we come up with, but having a place to discuss and share different methods in combination with IdSrv would probably be useful for the community.\nedit: .NET library available here: https://github.com/abergs/fido2-net-lib\n~As for code examples in .NET and JS, it's available here https://github.com/adrianba/fido-snippets (although not as full fledged SDK, slightly Edge specific, more of a proof of concept)~\nA good demo of Webauthn in action is here: https://webauthn.org/.\nAnother good demo: https://webauthn.io/. So here is my proof of concept fido2/webAuthn library for .net: https://github.com/abergs/fido2-net-lib\nThere's a bunch of todos such as validating the attestmentStatement correctly, support multiple formats etc. But I can put a Yubikey in my computer and \"register\" and do some minor verification.\nFeedback etc is very welcome.. @leastprivilege I actually borrowed the Base64Url code from your blog haha \ud83d\udcaf . @elukewalker and @TomCJones That is what we are solving in this lib: https://github.com/abergs/fido2-net-lib. Lot's of exciting progress the last couple of days.. @TomCJones Yeah, it's now updated to support root document \ud83d\udc4d . @leastprivilege I think it would be interesting to discuss my second point from earlier comment. In anyway, could a Resource Owner see if the JWT has been created by a second factor on the IdSrv? A special claim?\nCould a Resource Owner ask the client the make an assertment against the IdSrv if that claim is not present or e.g. older than 20 minutes (similar to linux sudo)? Or would each Resource Owner need to implement their own FIDO2 endpoints to support fido2 assertments of identity.\n(I can see how a ResourceOwner might need to have those endpoints for domain specific assertments). @mackie1001 hey, thanks for the comment. \n\nand force reauthentication if it's not happy.\n\nHow would this work, simply redirecting to the SSO login page would (naively) redirect back to the client (redirect URL) since we have a valid session cookie. \nWould the recommended approach be a custom login page which accepts re-auths even though user is logged in.. Update on FIDO2 .NET library. We just shipped the 1.0.0 Preview which has 100% conformance test passing and would love some feedback. So if you're curious about this, please give it a go \ud83c\udf89 It brings examples etc for how to implement it, so that might be a good starting ground for a IdentityServer sample?\n. ",
    "johnbaker": "I haven't seen much fanfare in regards to this WIP/POC.  We have some use cases where the device flow would be a home run.   Is this feature still planned?. ",
    "narthollis": "I have been working on using this device flow based on this branch (rebaseing it locally to keep up with develop) and working on implementing device flow in our client applications.\nEverything has been working fantastically so far, (which is par for the course with IdentityServer \ud83d\ude04 ) though I did run into one very minor thing - CORS requests to the Device Endpoint were failing.\nI have been able to resolve this on my local copy of IdentityServer by adding ProtocolRoutePaths.DeviceAuthorization to ProtocolRoutePaths.CorsPaths.\nWould this be something you would consider doing as part of the this work? Or is the a way that I can extend these Cors paths in my implementation?\n. Our applications are all web apps - and in some cases these are run inside of an embedded browser in an input constrained environment (a non-interactive dashboard mode on wall mounted TVs).\nWhen the application made the request to the device authorisation endpoint to retrieve the user_code/device_code/verification_uri/etc the request was being aborted by the web browser as it was a cross-origin request with the server not responding with CORS headers to the OPTIONS request.\nAfter taking a brief glance at the IdentityServer4 code, it looked like adding ProtocolRoutePaths.DeviceAuthorization to ProtocolRoutePaths.CorsPaths was sufficient to get the CORS headers added to the request - and when I made this change in my local build, it resolved the lack of CORS header issue.. ",
    "jalchr": "@paulyipkh Great job, do you mind sharing your working solution on GitHub ?\n. ",
    "erendrake": "There is a proposed oauth standard for device flow. How closely do you match it?\nhttps://tools.ietf.org/html/draft-ietf-oauth-device-flow-09. ",
    "salem84": "Hi,\nI suppose the issue in PDF is due to Sphinx generates TOC in Latex/PDF unlike HTML website; each title in index.rst file produce a single chapter in PDF (also it is only a paragraph).\nAs I know we can improve it in two different ways:\n1. The simplest: we add a section \"Documentation\" before .. toctree:: Sphinx directive, so the TOC is correct, also there are \"fake\" chapter before \"Documentation\". An example is visible in Pelican documentation (HTML / PDF)\n2. we insert .. toctree:: after introduction and before other main title in index.rst, so \"fake\" chapter will be at the end of PDF. An example is visible in Automapper documentation (HTML / PDF)\nHowever I think a general reingineering of TOC must be done in future; I generated a PDF with TOC 2 levels and the result is about 60 chapters... look at identityserver4-s84-test.pdf\nSome tips can be grabbed from Autofac and Django documentation.\nWhat do you think about it? I'm always there willing to help you. I have updated on my fork the docs... you can view at HTML / PDF.\nI have changed in index.rst section headers into bullet list.\nI apologize for previous commit references in issue history.\nIf you agree with changes, I'll create the PR. ",
    "gsvitak": "Thank you!! Do you have a unit test to show how it works? . ",
    "martindrlik": "We are still getting auth_time is missing critical log entry. It seems only while user is logging in.\nExcept that critical log entry there seems to be no other issue.\nMight be that I missed something but otherwise it looks like we are setting authentication time anywhere relevant.\nI did reopen this issue. I still looking for clarification or otherwise to get rid of this issue.. Sorry but still no update. We have no steps to reproduce.. ",
    "thirkcircus": "This is of great interest to us as well.  Here is some detail from our perspective;\nBackground\nWe run pretty aggressive monitoring and alerting on error logs in production - more than N error logs in X min results in a page to on-call.  \nCurrently a lot of internal IdentityServer4 logging emits Error events in situations where IdentityServer is doing exactly the right thing (eg token is invalid, authZ code is invalid, etc) and is technically not itself experiencing errors at all.  Sure a client isn't getting the response they want but if that's due to invalid input that's not an error at our end - and isn't something we can do anything about.  (Well, we can and do plead with people to stop doing bad things but our Salesforce integration support is just a deadend and I think they'll spam us with invalid input forever.)\nMy primary concern is that IdentityServer is emitting Error logs in cases which are not errors.  The client isn't getting the response they want but IdentityServer is doing exactly what it should.  This makes it impossible to isolate actual errors from noise caused by badly behaved clients.\nRequest\nWould you be open to a PR which alters the log levels for client-caused request rejection down to Warn or Info level?  This would most likely target all types under the IdentityServer4.Validation namespace.  We would be happy to contribute this.\nYou mention \n\nwe are planning to re-write [the logging system] anyways. Then this requirement will be considered.\n\nIs there an issue somewhere where we could contribute requirements/input to this?\nAlternatively, when looking at your logging rewrite would you consider providing something like a Dictionary for log level mappings?  That would allow us to override the log level for a specific log message, and then the app code could lookup the log level at runtime like so;\nprivate void Log(string message) {\n    var logLevel = LogLevels[message];\n    _logger.Log(logLevel, message);\n});\nThere are obviously other considerations but the basic idea is to provide a means to control log levels where that is appropriate (clearly it's not appropriate everywhere).\nThanks.  \ud83d\ude42 \nWorkaround\nWe also use Serilog and what we've done is to add a LogLevelModifyingSink which alters the level of logs emitted by IdentityServer on the way out - typically to drop Error logs down to Warn or lower.  See below for impl details if that's useful.  It's just a pretty nasty workaround to have to apply - incurs overhead on the logging output and may hide some legitimate error logs.\nHere is our logic (and we're about to add yet more log level overrides);\n```\n/// \n/// Runs conditional logic on logs to alter log levels on the fly\n/// \n/// \n/// Useful to control logs from third party libs which output logs with levels that we think are too spammy or not helpful.\n/// \npublic class LogLevelModifyingSink : ILogEventSink, IDisposable\n{\n    readonly ILogEventSink _pipeline;\n    readonly LogLevelModifier _logLevelModifier;\n// this is a list of loglevel modifiers\n// each modifier has a predicate which takes a logevent and returns whether the log level should be modified,\n// and a replacement logeventlevel (used if modifying the log)\nstatic readonly IList<(ShouldModifyLog,LogEventLevel)> LogLevelModifiers = new List<(ShouldModifyLog, LogEventLevel)> {\n    (IsIdentityServerErrorLogScopeValidatorRequestedScopeNotAllowed,LogEventLevel.Warning),\n    (IsIdentityServerErrorLogTokenRequestValidator_RequestedScopeNotAllowedOrAuthorisationCodeInvalid,LogEventLevel.Warning),\n    (IsIdentityServerErrorLogTokenValidatorInvalidReferenceToken,LogEventLevel.Warning)\n};\n\n// a list of quick checks to see if we should handle a particular log\nstatic readonly IList<ShouldModifyLog> ShouldHandlePredicates = new List<ShouldModifyLog> {\n    logEvent => logEvent.SourceContextHasNamespaceStartingWith(IdentityServer4Namespace),\n};\n\nstatic bool IsIdentityServerErrorLogScopeValidatorRequestedScopeNotAllowed(LogEvent logEvent) {\n    return logEvent.Level.Equals(LogEventLevel.Error)\n           && logEvent.SourceContext().Equals($\"{IdentityServer4Namespace}.Validation.ScopeValidator\")\n           && logEvent.MessageTemplate.Text.StartsWith(\"Requested scope not allowed\");\n}\n\nstatic bool IsIdentityServerErrorLogTokenValidatorInvalidReferenceToken(LogEvent logEvent) {\n    return logEvent.Level.Equals(LogEventLevel.Error)\n           && logEvent.SourceContext().Equals($\"{IdentityServer4Namespace}.Validation.TokenValidator\")\n           && logEvent.MessageTemplate.Text.StartsWith(\"Invalid reference token\");\n}\n\nstatic bool IsIdentityServerErrorLogTokenRequestValidator_RequestedScopeNotAllowedOrAuthorisationCodeInvalid(LogEvent logEvent) {\n    return logEvent.Level.Equals(LogEventLevel.Error)\n           && logEvent.SourceContext().Equals($\"{IdentityServer4Namespace}.Validation.TokenRequestValidator\")\n           && (\n               // requested scope not allowed\n               logEvent.MessageTemplate.Text.Equals(\"{details}\") || // wut?  :confounded:\n               logEvent.MessageTemplate.Text.StartsWith(\"Invalid authorization code\")\n           );\n}\n\n#endregion\n\npublic LogLevelModifyingSink(ILogEventSink pipeline) {\n    _pipeline = pipeline;\n    _logLevelModifier = new LogLevelModifier(ShouldHandlePredicates, LogLevelModifiers);\n}\n\npublic void Dispose() {\n    (_pipeline as IDisposable)?.Dispose();\n}\n\n[DebuggerStepThrough]\npublic void Emit(LogEvent logEvent) {\n    // let's assume that all our own logs have correct logging levels and we can just pass-thru\n    if(logEvent.SourceContextHasNamespaceStartingWith(MyCompanyNamespace)) {\n        _pipeline.Emit(logEvent);\n    }\n\n    // otherwise it's third party so we'll check...\n    else if(_logLevelModifier.ShouldHandle(logEvent)) {\n        var modifiedEvent = _logLevelModifier.Modify(logEvent);\n        _pipeline.Emit(modifiedEvent);\n    }\n    else {\n        _pipeline.Emit(logEvent);\n    }\n}\n\n}\n```\nand the LogLevelModifier impl includes\n```\n/// \n/// Runs through the  and applies the first one that matches.\n/// \n/// \n/// A log event with an altered log level\n[DebuggerStepThrough]\npublic LogEvent Modify(LogEvent logEvent) {\n    foreach(var (predicate, replacementLogLevel) in _logLevelModifiers) {\n        var replacementLogEvent = ConditionallyModifyLogLevel(predicate, logEvent, replacementLogLevel, out var wasModified);\n        if(wasModified) {\n            return replacementLogEvent;\n        }\n    }\n// shouldn't get here\nreturn logEvent;\n\n}\nstatic LogEvent ConditionallyModifyLogLevel(ShouldModifyLog predicate, LogEvent logEvent, LogEventLevel replacementLevel, out bool wasModified) {\n    if(predicate(logEvent)) {\n        wasModified = true;\n        return ModifyLog(logEvent, replacementLevel);\n    }\n// shouldn't get here\nwasModified = false;\nreturn logEvent;\n\n}\nstatic LogEvent ModifyLog(LogEvent logEvent, LogEventLevel replacementLevel) {\n    return new LogEvent(\n        logEvent.Timestamp,\n        replacementLevel, // only changing this\n        logEvent.Exception,\n        logEvent.MessageTemplate,\n        logEvent.Properties.Select(kvp => new LogEventProperty(kvp.Key, kvp.Value)));\n}\n```. > There is no simple answer since incessant hammering of a authn system is a valid error condition.\nThanks - that's helpful feedback.  And I agree - sort of.\nWhere I work we've attempted to handle this with rate limiting on requests (that are necessarily unauthenticated), if we can extract identifying information such as clientid from the request.\nOr we can ip block at our internal WAF if it's bad enough and we can't extract uniquely identifying information.\n\nIt really is not possible for any general system (like idsvr) to know the threshold characteristics of each install.\n\nYes that's true, but I'd argue idsvr is not the right place to identify whether this is an error or not.  We can only see if it's truly 'incessant hammering of a authn system' from outside the request; as you say in a system which can measure and respond to aggregated counts of a specific type of log/event.\nThe problem as I see it is that idsvr is unilaterally deeming that threshold to be 1, where any validation failure is an error, not N validation failures over X time.  Idsvr conflates actual errors we can fix with validation errors we can't.\nI'd much rather idsvr emitted validation errors via an event or non-error log that allows external systems to aggregate and determine if there is in fact an error.\n\nuse a common format and let the security analysis sort it out\n\nSo I totally agree - use a common format, don't prematurely mark these as errors and let downstream analysis/monitoring sort it out.  That's my argument - that it's not an idsvr concern.. Hi - aha, i see!\nI'm really just after AccessTokenAudience.  \ud83d\ude04\nI've just altered the PR (force-push) - have dropped the commit to publicise Constants and moved just the one member over to IdentityServerConstants.\n. Oh.  \ud83d\ude10 \nI've just gone to create a custom DiscoveryResponseGenerator and see that all of Constants.ProtocolRoutePaths is internal so I can't reuse it - any objection to my also moving that into public constants?. and SigningAlgorithms and SupportResponseModes and SupportedResponseTypes also.\nI think that's probably all though.  \ud83d\ude00 . Why what?  Why are we creating custom implementations of idsvr4 interfaces?\nFor backwards compatibility (url encoding of client ids and secrets in idsvr4 broke some of our clients and some of our clients couldn't handle the change to always render scope claims in an array even when only one present) and integration reasons.  For eg we host on two origins with a single issuer.  I'm wanting to create custom discovery and override just the authorization endpoint to hardcode the origin for when users log in.  This would be as simple as copy/paste the DiscoveryResponseGenerator and alter one line - except the constants used by that type are internal so I have to copy/paste a whole bunch of them as well.. ",
    "alexdresko": "I'm in the same boat, though I feel like this is probably a duplicate issue... just worded differently somewhere else. . Ha. As luck would have it, I think I just got it working. This post was extremely helpful. \nI did scaffold Identity as instructed. Also, here's my full startup.cs\n```\nusing Microsoft.AspNetCore.Builder;\nusing Microsoft.AspNetCore.Identity;\nusing Microsoft.AspNetCore.Hosting;\nusing Microsoft.AspNetCore.Http;\nusing Microsoft.AspNetCore.Identity.UI.Services;\nusing Microsoft.AspNetCore.Mvc;\nusing Microsoft.EntityFrameworkCore;\nusing StarkId7.Data;\nusing Microsoft.Extensions.Configuration;\nusing Microsoft.Extensions.DependencyInjection;\nusing StarkId7.Core;\nnamespace StarkId7\n{\n    public class Startup\n    {\n        public Startup(IConfiguration configuration)\n        {\n            Configuration = configuration;\n        }\n    public IConfiguration Configuration { get; }\n\n    // This method gets called by the runtime. Use this method to add services to the container.\n    public void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<CookiePolicyOptions>(options =>\n        {\n            // This lambda determines whether user consent for non-essential cookies is needed for a given request.\n            options.CheckConsentNeeded = context => true;\n            options.MinimumSameSitePolicy = SameSiteMode.None;\n        });\n\n        services.AddDbContext<ApplicationDbContext>(options =>\n            options.UseSqlServer(\n                Configuration.GetConnectionString(\"DefaultConnection\")));\n\n        services.AddIdentity<IdentityUser, IdentityRole>()\n            .AddEntityFrameworkStores<ApplicationDbContext>()\n            .AddDefaultTokenProviders();\n\n        services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_2_1);\n\n        // configure identity server with in-memory stores, keys, clients and scopes\n        services.AddIdentityServer(options =>\n            {\n                options.UserInteraction.LoginUrl = \"/Identity/Account/Login\";\n                options.UserInteraction.LogoutUrl = \"/Identity/Account/Logout\";\n            })\n            .AddDeveloperSigningCredential()\n            .AddInMemoryPersistedGrants()\n            .AddInMemoryIdentityResources(Config.GetIdentityResources())\n            .AddInMemoryApiResources(Config.GetApiResources())\n            .AddInMemoryClients(Config.GetClients())\n            .AddAspNetIdentity<IdentityUser>();\n\n        services.ConfigureApplicationCookie(options =>\n        {\n            options.LoginPath = $\"/Identity/Account/Login\";\n            options.LogoutPath = $\"/Identity/Account/Logout\";\n            options.AccessDeniedPath = $\"/Identity/Account/AccessDenied\";\n        });\n\n        // using Microsoft.AspNetCore.Identity.UI.Services;\n        services.AddSingleton<IEmailSender, EmailSender>();\n    }\n\n    // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.\n    public void Configure(IApplicationBuilder app, IHostingEnvironment env)\n    {\n        if (env.IsDevelopment())\n        {\n            app.UseDeveloperExceptionPage();\n            app.UseDatabaseErrorPage();\n        }\n        else\n        {\n            app.UseExceptionHandler(\"/Home/Error\");\n            app.UseHsts();\n        }\n\n        app.UseHttpsRedirection();\n        app.UseStaticFiles();\n        app.UseCookiePolicy();\n\n        app.UseAuthentication(); // not needed, since UseIdentityServer adds the authentication middleware\n        app.UseIdentityServer();\n\n        app.UseMvc(routes =>\n        {\n            routes.MapRoute(\n                name: \"default\",\n                template: \"{controller=Home}/{action=Index}/{id?}\");\n        });\n    }\n}\n\n}\n```. I just updated to 2.3.0-preview1 today. Curious if this PR going to make it into 2.3 at some point? . I understand. We start drinking early on Fridays here too. . ",
    "burningice2866": "Url https://github.com/IdentityServer/IdentityServer4.EntityFramework/tree/release/src/Host/Migrations/IdentityServe doesn't work?. ",
    "rbanks54": "Looks like there's a breaking change in CORS behaviour - https://github.com/aspnet/AspNetCore/issues/3106\nWaiting for a response to see if this means a change is needed here, or if the ASP.NET team will revert or adjust their changes. They'll need to release the next preview before we can test it or we could build the runtime ourselves and try it. I'm happy to wait for the next preview myself, but I'm lazy like that.\nEDIT: D'Oh! Brain fade. I forgot about the daily builds...  I'll try with one those and see if it works. Might take 24 hours or so though before I can get to it though.. I'm struggling to get the .NET Core SDK nightly builds working on my machine to see if this is now resolved (I'm getting some nuget package issues).  I'll try again in a few days.. Hooray for yak shaving! My Nuget packages issue was related to this problem https://github.com/NuGet/Home/issues/7414. \nAnyway, once that was worked around, I grabbed the latest nightly build (2.2.100-rtm-009571 for reference) and retested the quickstart sample again. Good news! It's all working as expected \ud83d\ude04 \nI'm not sure if you want to close this now or if we should wait until the next preview is publicly released. I'll leave that up to you.. Now that the stable .NET Core 2.2.0 release is out, I've just retested it. Everything seems to be working as expected.\nClosing this issue to save you the hassle \ud83d\ude42. @brockallen As a note the docs and quickstart samples will need to be updated, though it might be worth waiting until the various patches are released (as per https://github.com/aspnet/AspNetCore/issues/6486).\nGiven this comment on the aspnet core announcement in the 3.0 section:\n\"...considering removing the Microsoft.AspNetCore.Authentication.Google package and directing users to Microsoft.AspNetCore.Authentication.OpenIdConnect instead.\"\nI'm not sure if we should just switch over to the oidc approach instead.\nIf you create a \"help wanted\" issue with the approach you'd prefer we can jump in and make the changes for you.. ",
    "ActualAl": "This may or may not be related to an issue I'm seeing on our implementation of ID4. It happens when we issue a POST request to connect/token\nTwo methods in the ResourceStore get called twice which results in us calling our DB twice with duplicated queries.\nCould this be a related issue or could be we doing something fundamentally wrong with our configuration of the server ?\nIn IoC we wire up our own ResourceStore.\n services\n                .AddTransient();\n. ",
    "nandhu": "I believe the powershell script will change it in system level. After executed the script my outlook was stopped working. . ",
    "luisabreu": "Answered by the man himself :)\nInstead of using the options.ConfigureDbContext, you should rely on options.ResolveDbContextOptions:\ncs\n.AddConfigurationStore(options => {\n  options.ResolveDbContextOptions = (provider, builder) => \n  builder.UseSqlServer(provider.GetRequiredService<Foo>().FooValue);\n})\n. ",
    "danwad": "Just tried to use this but it doesn't seem to be included in the latest 2.4.0-preview1 build on NuGet.\n```\n\n...\nerror CS0234: The type or namespace name 'LocalAccessTokenValidation' does not exist in the namespace 'IdentityServer4.Hosting' (are you missing an assembly reference?)\n``. Ah - so it isAddLocalApiAuthenticationand notAddLocalAccessTokenValidation`. I was trying to use it based on this PR which still calls it the latter.\nThanks. ",
    "MartinZikmund": "Oh my... I got the sample mixed up. Sorry about that :-) .\n. ",
    "robmen": "I think you mean 2017 not 2016.. ",
    "cwe1ss": "I didn't know that you could use external urls for that. I updated the code.. ",
    "Triwaters": "OK, but even so there is some formatting issue, which is why I took a swing at that... on the currently live page, the entire sentence comes across as \"an object\" -- colored font red with a button border around it, plus some tick marks that shouldn't be seen. So at a minimum, a formatting fix on that sentence. I see your point on the class, that having been said.. Agreed -- but what we really need is the corrected text desired. I will remove my comment, but that leaves the two spots in need of correction by someone else. That make sense?. Probably a better way to handle that one, but I'm a novice on git. :). ",
    "user1336": "get. ",
    "ycrumeyrolle": "Should be \"Event for consent denied\". Should be \"Event for consent granted\". ",
    "bartekmarnane": "This should be: dotnet new -i IdentityServer4.Templates\n. ",
    "LindaLawton": "Note.   I have urls inserted here and this isnt working due to CORS errors.    Not sure what you have been inserting.   URL is probably a bad idea on second thought ignore this.. I suggest using $ - string interpolation instead.   Might as well follow Boy Scouts rules here.\nLogger.LogInformation($\"Showing login: Current IdP ({currentIdp}) is not the requested IdP ({idp})\");\n\nwell spotted.. Really?   I have never had that issue.  Something specific to the logger your using here?  I will keep an eye out in the future thanks for the tip.\nI went ahead and switched this to approval to remove the comment here.   Yes i realizes you do not need my approval to merge something but you cant delete it once you start a review :). yup i have i always use String interpolation, and its in all my logging both APIs and in the identity server project. \n_logger.LogWarning($\"User ({user.Id}) LastFiscalId (not set)\");\n\nThats in ProfileService.   \nI think you would be surprised what i have tried ;o)\n. On it  :)  This has started a great conversation here.   Stuff like this is great fun to dig into.. You are sure that you dont want to log that you are removing them?\nIf a developer added them without knowing that they are not valid they may wonder why they are not there and there is no error.. I haven't done web development in 10 years so i am a bit behind in what one should be using.\nDo you have a suggestion?. I wont have time to do this until Thursday.  Up to you if you can wait it looks like your on a clean out PR spree today.. Probably not I have some tasks at work that need to be completed before I go on vacation.    As its your code you probably know exact where to put it anyway.. ",
    "veikkoeeva": "Should all of these async  tasks also have .ConfigureAwait(false)? It doesn't appear the codebase has much them, but maybe it's OK to add them as one refactor anyhow. This doesn't only help with \"GUI systems\", but also with systems like https://github.com/dotnet/orleans (maybe even ASP.NET Core).. I was looking through the PRs and noticed .ConfigureAwait(false) isn't used in the codebase... But I wonder if I comment here in some PR and ask would it be OK to introduce them little-by-little? :). Good point. There isn't one in ASP.NET Core and it appears they aren't writing that out, see at https://blog.stephencleary.com/2017/03/aspnetcore-synchronization-context.html for more authoritative explanation. (That article recommends it for libraries, though.)\nThis brings a question, how much of this code could be run elsewhere? As for an example, some Orleans people are experimenting with IS. The system works so that it has roughly one threas per core and it gives \"single-thread guarantee\" (https://dotnet.github.io/orleans/Documentation/Advanced-Concepts/External-Tasks-and-Grains.html), which could be problematic. (Task.Run can be used to excape blocking behaviour if needed, though.)\nThat being written, I don't know if this has been a concious decision as in to save in trouble of writing it everywhere or if it might avoid some other trouble. So I thought just to ask it in some context. :). I'm wondering about https://github.com/IdentityServer/IdentityServer4/pull/2856/files#diff-71f9631bfa2ca3c38575e79f74c3924fR146 and the IETF Best Practice recommendation to not to use implicit flow and move to PKCE even for web clients that if there should be a note a clear note about it? If I didn't read the diff wrong, AllowedGrantTypes = GrantTypes.Implicit was changed to AllowedGrantTypes = GrantTypes.Code.\nAs for context: https://medium.com/oauth-2/why-you-should-stop-using-the-oauth-implicit-grant-2436ced1c926, for further links to IETF and other explanation.. I'll add https://brockallen.com/2019/01/03/the-state-of-the-implicit-flow-in-oauth2/ for posterity for the benefit of people who might end up here.. ",
    "scottbrady91": "Is configureawait still necessary for ASP.NET Core?. Okay, I'd have to defer to Dom & Brock about support throughout the rest of the library From what I've seen configureawait is only necessary when targetting .NET Framework. \nI'm going to assume that this PR won't be the place to start any change in behavior though. Maybe you could open a separate issue?. ",
    "cornem": "ConfigureAwait(false) is not necessary in ASP.NET Core, as it doesn't have a synchronization context.. "
}