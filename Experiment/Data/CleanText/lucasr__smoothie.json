{
    "lucasr": "AsyncListView and AsyncGridView are just subclasses of ListView and GridView respectively. Hence, they share the same limitations than their parent classes unfortunately. i.e. no support for horizontal scrolling. \n. Nice catch! Thanks! The patch looks good but there's a bit of code duplication in there. Could you please move the code to set the adapter into a private \"setAdapterOnView(ListAdapter adapter)\" method?\n. Good point. Yeah, I wonder how the API would look like. I guess instead of loadItem and displayItem, we'd have something like loadChildItem/loadGroupItem and displayChildItem/displayGroupItem. We'd need an AsyncExpandableListView too.\n. The upcoming API in 0.2.0 might make it easier to implement this.\n. I removed trailing spaces and use of tab or indentation in a couple of places before pushing. Pushed as SHA: 33e44bcdf664224ab9e286731b0827fdf06a7031. Thanks! \n. Marking this issue as duplicate of #8 (which has more info).\n. This library is meant to be used with AbsListView subclasses. It does proper integration between scrolling gestures and the async loading of items. It's not a general-purpose image loading library.\nIf you already wrote an extended version of ListView, you can simply make it extend AsyncListView instead.\n. @bennyk Yep, currently Smoothie works with the assumption that scrolling down is the most common use case. Maybe add a Builder option to reverse loading order? I'd prefer to avoid depending on ListView-specific API to detect that automatically as Smoothie is meant to be used with GridView too.\n. @mrtristan Yes, it should be possible to load multiple images by simply making your ItemLoader's Result type an object that holds all bitmaps/drawables that have to be loaded asynchronously. The displayItem() method would then just use this object to display them.\nThe problem with the current API is that it requires you to load the whole content of each item at once, even if the content comprises multiple parts (like your example with multiple images per item). This means that there's no way to apply priorities to each part of the item. For example, if you have a main image and an avatar image per item, you probably want to prioritize the loading of the main image for each item over their avatar images. This is an API change that I haven't finalized yet to land in the repo. But stay tuned.\n. @murimons If you make your ItemLoader's Result type something that can hold the multiple parts of the item, then you can probably load parts of each item separately instead of failing the whole item loading when one of the parts fail.\n. I'm closing this issue as it doesn't seem to have anything actionable for now. Feel free to re-open if you still think something can be done about it.\n. @mrtristan No timetable, sorry. I'm far from done though. So feel free to submit API proposals to cover your use case in the mean time :-)\n. @DavyJonesUA It seems that the fast scrolling UI intercepts touch events which might not work well with the way Smoothie tracks user interaction to know when to load items from the ListView/GridView. Let me investigate if there's a way to work around that.\n. Thanks for the report. This is probably caused by a mismatch between the wrapped adapter and the wrapper. Investigating.\n. Smoothie relies on AbsListView's OnScrollListener states to determine when to stop and start loading items as you scroll. So, you'd have to 1) Add support for OnScrollListener in StaggeredGridView 2) Create your own \"AsyncStaggeredGridView\" hooking up with Smoothie private API.\n. How exactly do you think it should be integrated? Can't see how they might be directly related...\n. Done. See README for details.\n. Thanks for the patch! This was fixes in SHA: 96a0cd908fc719ba5c19cf8b4467bdb2d4dd194c\n. Thanks for the patch! This was fixed in SHA: 96a0cd908fc719ba5c19cf8b4467bdb2d4dd194c\n. Closing.\n. Thanks @mr-archano! This is looking good after quick skim. I'll do more thorough review later today or tomorrow.\n. ",
    "Flitskikker": "Tested some more. In the ListLoader, displayItem(); if I replace the transition code:\n``` java\nBitmapDrawable emptyDrawable = new BitmapDrawable(itemView.getResources());\nTransitionDrawable fadeInDrawable = new TransitionDrawable(new Drawable[] { emptyDrawable, result });\nholder.image.setImageDrawable(fadeInDrawable);\nfadeInDrawable.startTransition(200);\n```\nby simply:\njava\nholder.image.setImageDrawable(result);\n...the application doesn't crash on my phone.\nHowever, I tried your sample (including the fade ins) and it doesn't crash. Did I do something wrong?\n. I updated the BitmapCache library from Git already a while ago, and it would still crash on my device. It works fine on the emulator (4.2), though. Since I've updated my device to JB 4.2.2, it now also works on there.\nI've just updated the library again and it still crashes when scrolling on an emulator running 2.2. Can't test it on my device now unfortunately, but I suppose it would still crash (on 4.0.4). Same workaround: disable the fade ins and it works.\n@atla: A few questions:\n- Did you apply a different recycle policy after which the crash was fixed, or was it fixed by just updating the BitmapCache library?\n- Which Android version are you testing it on? You might want to test it on e.g. 2.2 too to see if the problem still persists.\nI'm using the BitmapCache from GIT and the DiskLRUCache 1.3.1 jar (not the GIT source as library).\nThanks in advance!\n. ",
    "atla": "So what happened here? I still get the same error as Flitskikker and can only fix it with the same workaround. How can i not run into this while still fading in the image?\n. Oh - just a quick hint... i updated to the latest BitmapCache version from git that also includes setRecyclePolicy on the builder (i was curious to try that out) and the crash seems to be gone. It internally also uses a newer version of the DiskLRUCache.\n. Hi,\nsorry for taking so long to respond. Actually the issue still occured to me. It didnt when i answered this post so i thought its fixed. But it is still occuring randomly. The only \"fix\" that i have - what i currently activated - is the Recycle policy RecyclePolicy.DISABLED ... which i guess has a huge impact on memory and basically makes the caching useless.\nStill not sure where exactly this bug comes from.. sorry.\nregards,\nmarcus\n. ",
    "jansouza": "Hi,\nI fixed this problem, first switch ImageView by CacheableImageView. The BitmapCache need CacheableImageView to recycle correctly.\nSo, ViewHolder should be:\nclass ViewHolder {\n        public CacheableImageView image;\n        public TextView title;\n    }\nAnd don't forget on layout:\n\nAnd second, you need remove TransitionDrawable (see Flitskikker comment above), again the BitmapCache need CacheableImageView to recycle correctly.\nI hope this helps.\nThanks.\n. ",
    "jerrellmardis": "I'm getting this error randomly as well. @jansouza How does the TransitionDrawable have anything to do with the way recycling happens?\n* UPDATE 4/25 *\nI've removed the TransitionDrawable code and this still seems to happen. It seems to happen less but I've noticed it happen a few times on my testing device (Hauwei Comet).\n. ",
    "blaztriglav": "Had the same issue, Flitskikker's solution of removing the transition worked for me. \n. It is a mismatch between the adapter and the wrapper. In my case, I had a view that I animated when the ListView item got double-tapped. If I scrolled while the animation was happening, I got the following:\njava.lang.IllegalStateException: The content of the adapter has changed but ListView did not receive a notification. Make sure the content of your adapter is not modified from a background thread, but only from the UI thread. [in ListView(-1, class android.widget.ListView) with Adapter(class android.widget.HeaderViewListAdapter)]\nat android.widget.ListView.layoutChildren(ListView.java:1544)\nI fixed it by removing my header and footer.\nIf you need to keep the header and footer, a much more hacky and basically wrong way is to override layoutChildren in your custom ListView and catch the exception. Your ListView gets reset to the top, but nothing else goes wrong. Not recommended however.\n. ",
    "quintos": "I'm using 2 lazy loaded images in my listview rows so i can confirm this is possible. I don't have access to my code right now but i's not complicated. \nNot to hijack you question but i've got a related question:\nImaging you have multiple items in my listview rows that are expensive to load. for instance 2 are web images and 1 is something local but which is just expensive to load. I'm wondering if the following is possible to achieve:\nAt the moment, when 1 of the resources cannot load, none of the 3 items load in the listview. I would like to see that, let's say, when i have no internet connection, the 2 images don't load but my third local resource does continue to load. Or when 1 of the images cannot be downloaded but the second can, only show the second.\nIs it possible to implement such  logic?\n. Thanks,\nBut the ItemManaged class needs an AbsListView.\nI can create an interface for it? but then i would need to modify it..\n. ",
    "mrtristan": "interesting limitation.... i said two as a proof of concept but i would have multiple points of implementation for this library... at one of the more complicated points in my app, i have a listview that involves 4 web images and a number of locally loaded assets per row.\nif you don't mind, i'd be interested in seeing how you altered things to make this work for you.\n. sorry if this comment reopens this. i'm not terribly familiar with github issues. i'm curious to see how this will work, do you have any timetable for what you're working on?\n. sounds good. great work so far. if i get some free time to attempt shoehorning this in to my project i'll bounce some things off you as i work through it..\nthanks again! :-)\n. ",
    "AndyVavrynets": "@lucasr Thank you, a lot. I would wait for fix this issue. \n. ",
    "r2bapps": "I had this problem when i removed the footer of a list, I fix it calling adapter.notifyDataSetChanged(); after the footer removing. \nIt works for me!!\n. ",
    "blundell": "the /gradlew and /gradlew.bat are auto generated files\n. That is just a minor version increase, won't affect the version of ASide you can run on; but sure I can do that as well whilst I am here.\n. Nice to have the MAT report to show it is definitely this view holding onto the mem\n. Sorry I forgot to reply, I highly recommend this video from Google IO it explains MAT and finding memory leaks http://www.youtube.com/watch?v=_CruQY55HOk\n\nAndroid apps have more memory available to them than ever before, but are you sure you're using it wisely? This talk will cover the memory management changes in Gingerbread and Honeycomb (concurrent GC, heap-allocated bitmaps, \"largeHeap\" option) and explore tools and techniques for profiling the memory usage of Android apps.\n. \n",
    "devisnik": "Isn't 19.0.1 the current build tool version?\n. ",
    "theoklink": "My xml has an additional tag (which i guess is relevant )enclosing your example\n<org.lucasr.smoothie.AsyncListView\n....\n....\n. As I have also implemented this library, I am curious about this error\nandroid.content.res.Resources$NotFoundException: Resource is not a Drawable (color or path): TypedValue{t=0x1/d=0x7f06009b a=1 r=0x7f06009b}\nI am not aware that smoothie loads any drawables so the error may be in your code. Try and post on Stackoverflow where you have a greater audience.\n. I would appreciate it If you can explain what a MAT report is and how I could get this. I am quite sure it is attributable to the library as I can repeat this issue consistently.\n. Installed MAT but have no idea how to use it. User guides do not really help. There is no doubt that the memory issue is caused by the smoothie library.\nAnyway, I have replaced the memory allocation in Gallery Loader with\n        ActivityManager manager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);\n        int memoryClass = manager.getMemoryClass();\n        int memoryClassInKilobytes = memoryClass * 1024;\n        int maxSize = memoryClassInKilobytes;\nBehaviour is better but still runs out of memory. I have not been able to find any code that would indicate the mMemCache is maintained. For instance, when deleting an item in the grid and after \nmGalleryAdapter.notifyDataSetChanged(), it seems that the memory cache is not updated immediately.\nI would appreciate some input\n. Paul \nmany thanks. Very useful tutorial. I have learned about yet another useful area. I followed it through but can not discover any leaks. The only question I have is the use of \"runnable\" in the smoothie ItemLoader. The presenter mentions this specifically in the context of caching bitmaps and that you need to be aware as this may hold on to references for longer than desired.\nI have the leak hprof report but can not attach it so how can I make this available.\n. If you extract the zip file, you get the correct structures as shown in the screenshot \n\nHope this helps\n. I have paired down the code to a simple test framework. \nFollowing the steps as outlined in itemLoader, the tracing shows that all pass getItemParams, loadItemFromMemory, loadItem, but when it comes to displayItem only some of the drawables are displayed. Although all have passed, something has decided incorrectly some drawables need not be displayed.\nStep 1 getItemParams - Album Id = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 3 loadItem - Load item albumid = 12\nStep 1 getItemParams - Album Id = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 1 getItemParams - Album Id = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 1 getItemParams - Album Id = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 1 getItemParams - Album Id = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 2 loadItemFromMemory - albumid = 12\nStep 3 loadItem - Load item albumid = 12\nStep 3 loadItem - Load item albumid = 12\nStep 3 loadItem - Load item albumid = 12\nStep 3 loadItem - Load item albumid = 12\nStep 4 - displayItem\nStep 4 fading drawable\nStep 4 - displayItem\nStep 4 fading drawable\nThis is the result\n\n. Additional:\nI started from scratch. Took the Gallery example that is included in the zip. Added lots of images to my avd.\nBehaves perfect and as expected. However, when trying to display album covers the behaviour changes and issue as described above occurs.\nThe only changes made to the original code are:\nUse the AsyncListView\nIn MainActivity amend Loader uri and selection:\n            Uri newuri = MediaStore.Audio.Playlists.Members.getContentUri(\n                    \"external\", 259);\n        String[] columns = { \n                     MediaStore.Audio.Playlists.Members.ALBUM_ID + \" as _id\" ,// needed for album cover\n                    MediaStore.Audio.Playlists.Members.AUDIO_ID ,\n                    MediaStore.Audio.Playlists.Members.TRACK,\n                    MediaStore.Audio.Playlists.Members.ARTIST,\n                    MediaStore.Audio.Playlists.Members.TRACK,\n                    MediaStore.Audio.Playlists.Members.ALBUM,\n                    MediaStore.Audio.Playlists.Members.TITLE,\n                    MediaStore.Audio.Playlists.Members.DURATION,\n                    MediaStore.Audio.Playlists.Members.DATA,\n                    MediaStore.Audio.Playlists.Members.PLAY_ORDER,\n                    MediaStore.Audio.Playlists.Members.DATE_MODIFIED };\n        return new CursorLoader(this, newuri, columns, null, null, null);\n        default:\n            return null;\n        }\nin GalleryAdapter:\n        String label = c.getString(c.getColumnIndex(MediaStore.Audio.Playlists.Members.ALBUM));\n        label = label + \"\\r\\n\" + c.getString(c.getColumnIndex(MediaStore.Audio.Playlists.Members.TITLE));\n        holder.title.setText(label);\nin GalleryLoader:\n    @Override\n    public Long getItemParams(Adapter adapter, int position) {\n        Cursor c = (Cursor) adapter.getItem(position);\n        long    album_id = c.getLong(c.getColumnIndex(MediaStore.Audio.Playlists.Members._ID));\n        return album_id;\n//        return c.getLong(c.getColumnIndex(MediaStore.Audio.Media._ID));\n    }\nand\n  @Override\n    public Bitmap loadItem(Long id) {\n        Uri sArtworkUri = Uri.parse(\"content://media/external/audio/albumart\");\n        Uri imageUri = Uri.withAppendedPath(sArtworkUri, String.valueOf(id));\nNow when launching this and without touching the screen, the first page only loads a few album icons. Again, which ones it displays appears to be arbitrary.\n\nThe loading of bitmaps in the background does not appear to be working corretly.\nAnyone with similar experiences? I would appreciate some response(s)\n. Still investigating. Smoothie does not refresh correctly when I display albumart for  all tracks in a gridview. First of all, it incorrectly loads the first page views, secondly when scrolling, it gets its knickers in a twist with the paging. \nThis effectively means displaying the same (album) id repeatedly, which I think is where the problem lies. smoothie seems to be quite happy when each id is different but dealing with many same ids appears to be a problem. \n. I have implemented smoothie in my Playlist Manager app where i display albumart. I have found that fastscrollenabled interferes so ensured that it is removed from layouts etc. I still have the occasional albumart \"miss\" when fast scrolling and on the first load of a screen. I have been unable to figure out why this happens but found that when no albumart is found, providing a default icon improves the behaviour.\nLike you I would love to see this library reach maturity.\nRegards\nT\n. Do you want to use the smoothie library? I use this in my app but have not come across a jar file. It is just a matter of setting up the smoothie library within your project.\nAssuming you use Android Studio, \n1. place the library in your project folder\n2. edit the module  gradle file and add the library \neg in this example I use several libraries\ndependencies {\n    compile fileTree(dir: 'libs', include: '*.jar')\n    compile project(':holoColorPickermaster')\n    compile project(':smoothie')\n    compile files('libs/disklrucache-1.3.1.jar')\n    compile files('libs/google-play-services.jar')\n    compile files('jcifs-1.3.18.jar')\n}\n1. edit settings.gradle at the top (app) level, add smoothie\n   eg\n   include ':smoothie', 'holoColorPickermaster'\n   include ':playlistManager'\nI hope this helps\n. ",
    "pirbe7": "Sorry, didnt put that in the question, but its on my code. Thats not the problem. Thank you anyway\n. I also found this very strange. The fact is, that the activity is \"clean\", it only has this AsyncListView, nothing more, no drawables, nothing.\nI will ask at Stackoverflow... \nThanks again.\n. ",
    "2794644723": "thank you very much. theoklink\n. ",
    "mr-archano": "I have worked on a quick&dirty port of Smoothie that is working with the RecyclerView (mostly a copy/paste of the ItemManager and ItemManaged classes), but the change in this PR was needed in order to preserve the Smoothie API (the user only knows about ItemLoader). It would be cool to hear from you about the Smoothie 1.0 API, I would be happy to contribute :)\n. ",
    "zsoltk": "Oh, now I see that in both your samples you are manually resetting the holder in the Adapter class in the getView method. I guess otherwise the holder is recycled as it's cached in the view's tag.\n. I'm only speaking for myself, but yeah, this lib seems pretty abandoned since you can use RecyclerView as an official solution that addresses the same problem.\n. "
}